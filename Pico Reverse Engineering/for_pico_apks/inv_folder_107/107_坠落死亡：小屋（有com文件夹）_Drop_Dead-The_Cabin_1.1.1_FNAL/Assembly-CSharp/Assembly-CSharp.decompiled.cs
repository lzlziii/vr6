using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using AppFlow.Core;
using AppFlow.Data;
using AppFlow.Logic;
using BattleSister;
using BattleSister.Ballistics;
using Bolt;
using Bolt.Photon;
using Cabin.Actors;
using Cabin.Actors.Properties;
using Cabin.Agents;
using Cabin.Animation;
using Cabin.Factions;
using Cabin.Gameplay;
using Cabin.HealthStatusSystem;
using Cabin.HsmLite;
using Cabin.Movement;
using Cabin.Navigation;
using Cabin.Network.Testing;
using Cabin.PowerSystem;
using Cabin.SceneContentsDirectory;
using CabinViewModelsModule;
using Cinemachine;
using Cinematics;
using CurvedUI;
using FMODUnity;
using Gamekit3D.Cameras;
using HutongGames.PlayMaker;
using Il2CppDummyDll;
using LitJson;
using Meta.WitAi;
using Meta.WitAi.Data;
using Meta.WitAi.Interfaces;
using Meta.WitAi.Json;
using Meta.WitAi.Lib;
using Multiplay;
using Networking;
using Networking.Interactables;
using Networking.Shop;
using Networking.Shop.Data;
using Networking.Shop.TerminalDisplay;
using Networking.Shop.TerminalDisplay.Buttons;
using Oculus.Avatar2;
using PT;
using PT.AppFlowUtils;
using PT.BLAST;
using PT.BehaviourTree;
using PT.DataBinding;
using PT.Lighting;
using PT.Optional;
using PT.PremiumFMOD.Core;
using PT.PremiumFMOD.Players;
using PT.QuestSystem;
using PT.SceneContentsDirectory;
using PT.SharedVariables;
using PT.Utilities;
using Pickups;
using Pico.Platform;
using Pico.Platform.Models;
using RootMotion.Dynamics;
using RootMotion.FinalIK;
using SA;
using Score;
using Spawner;
using TMPro;
using UdpKit;
using UdpKit.Platform.Photon;
using Unity.AI.Navigation;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using Unity.Profiling;
using Unity.XR.PXR.Input;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations;
using UnityEngine.Animations.Rigging;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Experimental.AI;
using UnityEngine.InputSystem;
using UnityEngine.Jobs;
using UnityEngine.LowLevel;
using UnityEngine.Networking;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.ResourceManagement.AsyncOperations;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.SpatialTracking;
using UnityEngine.Timeline;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using VivoxUnity;
using VrWeaponManager;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class RockPush : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float thrust;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float fallTime;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<Rigidbody> chunks;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isPlaying;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x1169824", Offset = "0x1169824", VA = "0x1169824")]
	[ContextMenu("Get RigidBody's")]
	private void GetChunks()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x1169870", Offset = "0x1169870", VA = "0x1169870")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x11699BC", Offset = "0x11699BC", VA = "0x11699BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x1169BCC", Offset = "0x1169BCC", VA = "0x1169BCC")]
	public RockPush()
	{
	}
}
[Token(Token = "0x2000003")]
public class FPSLightCurves : MonoBehaviour
{
	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool canUpdate;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x1169C5C", Offset = "0x1169C5C", VA = "0x1169C5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x1169CE0", Offset = "0x1169CE0", VA = "0x1169CE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x1169D18", Offset = "0x1169D18", VA = "0x1169D18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x1169DA8", Offset = "0x1169DA8", VA = "0x1169DA8")]
	public FPSLightCurves()
	{
	}
}
[Token(Token = "0x2000004")]
public class FPSRandomRotateAngle : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool RotateX;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool RotateY;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool RotateZ;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x1169DF0", Offset = "0x1169DF0", VA = "0x1169DF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x1169E14", Offset = "0x1169E14", VA = "0x1169E14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x1169EE8", Offset = "0x1169EE8", VA = "0x1169EE8")]
	public FPSRandomRotateAngle()
	{
	}
}
[Serializable]
[Token(Token = "0x2000005")]
public class LightControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float intensity;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bounceIntensity;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float range;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x1169EF8", Offset = "0x1169EF8", VA = "0x1169EF8")]
	public LightControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000006")]
public class LightControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LightControlBehaviour template;

	[Token(Token = "0x17000001")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600000D")]
		[Address(RVA = "0x1169F18", Offset = "0x1169F18", VA = "0x1169F18", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x1169F20", Offset = "0x1169F20", VA = "0x1169F20", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x1169FC8", Offset = "0x1169FC8", VA = "0x1169FC8")]
	public LightControlClip()
	{
	}
}
[Token(Token = "0x2000007")]
public class LightControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_DefaultIntensity;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_DefaultBounceIntensity;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_DefaultRange;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light m_TrackBinding;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x116A054", Offset = "0x116A054", VA = "0x116A054", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x116A41C", Offset = "0x116A41C", VA = "0x116A41C", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x116A4E8", Offset = "0x116A4E8", VA = "0x116A4E8")]
	public LightControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000008")]
[TrackColor(0.9454092f, 0.9779412f, 0.3883002f)]
[TrackClipType(typeof(LightControlClip))]
[TrackBindingType(typeof(Light))]
public class LightControlTrack : TrackAsset
{
	[Token(Token = "0x6000013")]
	[Address(RVA = "0x116A4F0", Offset = "0x116A4F0", VA = "0x116A4F0", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x116A590", Offset = "0x116A590", VA = "0x116A590", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x116A598", Offset = "0x116A598", VA = "0x116A598")]
	public LightControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000009")]
public class NavMeshAgentControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform destination;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool destinationSet;

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x116A5F0", Offset = "0x116A5F0", VA = "0x116A5F0", Slot = "15")]
	public override void OnPlayableCreate(Playable playable)
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x116A5F8", Offset = "0x116A5F8", VA = "0x116A5F8")]
	public NavMeshAgentControlBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200000A")]
public class NavMeshAgentControlClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ExposedReference<Transform> destination;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public NavMeshAgentControlBehaviour template;

	[Token(Token = "0x17000002")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000018")]
		[Address(RVA = "0x116A600", Offset = "0x116A600", VA = "0x116A600", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x116A608", Offset = "0x116A608", VA = "0x116A608", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x116A748", Offset = "0x116A748", VA = "0x116A748")]
	public NavMeshAgentControlClip()
	{
	}
}
[Token(Token = "0x200000B")]
public class NavMeshAgentControlMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x600001B")]
	[Address(RVA = "0x116A7BC", Offset = "0x116A7BC", VA = "0x116A7BC", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x116AA20", Offset = "0x116AA20", VA = "0x116AA20")]
	public NavMeshAgentControlMixerBehaviour()
	{
	}
}
[Token(Token = "0x200000C")]
[TrackColor(0.855f, 0.8623f, 0.87f)]
[TrackBindingType(typeof(NavMeshAgent))]
[TrackClipType(typeof(NavMeshAgentControlClip))]
public class NavMeshAgentControlTrack : TrackAsset
{
	[Token(Token = "0x600001D")]
	[Address(RVA = "0x116AA28", Offset = "0x116AA28", VA = "0x116AA28", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x116AAC8", Offset = "0x116AAC8", VA = "0x116AAC8")]
	public NavMeshAgentControlTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x200000D")]
public class ScreenFaderBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x116AB20", Offset = "0x116AB20", VA = "0x116AB20")]
	public ScreenFaderBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200000E")]
public class ScreenFaderClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScreenFaderBehaviour template;

	[Token(Token = "0x17000003")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000020")]
		[Address(RVA = "0x116AB34", Offset = "0x116AB34", VA = "0x116AB34", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x116AB3C", Offset = "0x116AB3C", VA = "0x116AB3C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x116ABE4", Offset = "0x116ABE4", VA = "0x116ABE4")]
	public ScreenFaderClip()
	{
	}
}
[Token(Token = "0x200000F")]
public class ScreenFaderMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Image m_TrackBinding;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x116AC64", Offset = "0x116AC64", VA = "0x116AC64", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x116AFA4", Offset = "0x116AFA4", VA = "0x116AFA4", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x116B03C", Offset = "0x116B03C", VA = "0x116B03C")]
	public ScreenFaderMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000010")]
[TrackClipType(typeof(ScreenFaderClip))]
[TrackColor(0.875f, 0.5944853f, 0.1737132f)]
[TrackBindingType(typeof(Image))]
public class ScreenFaderTrack : TrackAsset
{
	[Token(Token = "0x6000026")]
	[Address(RVA = "0x116B044", Offset = "0x116B044", VA = "0x116B044", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x116B0E4", Offset = "0x116B0E4", VA = "0x116B0E4", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x116B0EC", Offset = "0x116B0EC", VA = "0x116B0EC")]
	public ScreenFaderTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000011")]
public class TextSwitcherBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int fontSize;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string text;

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x116B144", Offset = "0x116B144", VA = "0x116B144")]
	public TextSwitcherBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000012")]
public class TextSwitcherClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextSwitcherBehaviour template;

	[Token(Token = "0x17000004")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x600002A")]
		[Address(RVA = "0x116B15C", Offset = "0x116B15C", VA = "0x116B15C", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x116B164", Offset = "0x116B164", VA = "0x116B164", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x116B20C", Offset = "0x116B20C", VA = "0x116B20C")]
	public TextSwitcherClip()
	{
	}
}
[Token(Token = "0x2000013")]
public class TextSwitcherMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color m_DefaultColor;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_DefaultFontSize;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_DefaultText;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.UI.Text m_TrackBinding;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x116B290", Offset = "0x116B290", VA = "0x116B290", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x116B7EC", Offset = "0x116B7EC", VA = "0x116B7EC", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x116B8B4", Offset = "0x116B8B4", VA = "0x116B8B4")]
	public TextSwitcherMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000014")]
[TrackColor(0.1394896f, 0.4411765f, 0.3413077f)]
[TrackClipType(typeof(TextSwitcherClip))]
[TrackBindingType(typeof(UnityEngine.UI.Text))]
public class TextSwitcherTrack : TrackAsset
{
	[Token(Token = "0x6000030")]
	[Address(RVA = "0x116B8BC", Offset = "0x116B8BC", VA = "0x116B8BC", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x116B95C", Offset = "0x116B95C", VA = "0x116B95C", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x116B964", Offset = "0x116B964", VA = "0x116B964")]
	public TextSwitcherTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000015")]
public class TimeDilationBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float timeScale;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x116B9BC", Offset = "0x116B9BC", VA = "0x116B9BC")]
	public TimeDilationBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x2000016")]
public class TimeDilationClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TimeDilationBehaviour template;

	[Token(Token = "0x17000005")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000034")]
		[Address(RVA = "0x116B9CC", Offset = "0x116B9CC", VA = "0x116B9CC", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x116B9D4", Offset = "0x116B9D4", VA = "0x116B9D4", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x116BA7C", Offset = "0x116BA7C", VA = "0x116BA7C")]
	public TimeDilationClip()
	{
	}
}
[Token(Token = "0x2000017")]
public class TimeDilationMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly float defaultTimeScale;

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x116BAF8", Offset = "0x116BAF8", VA = "0x116BAF8", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x116BCF0", Offset = "0x116BCF0", VA = "0x116BCF0", Slot = "18")]
	public override void OnBehaviourPause(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x116BCFC", Offset = "0x116BCFC", VA = "0x116BCFC", Slot = "14")]
	public override void OnGraphStop(Playable playable)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x116BD08", Offset = "0x116BD08", VA = "0x116BD08", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x116BD14", Offset = "0x116BD14", VA = "0x116BD14")]
	public TimeDilationMixerBehaviour()
	{
	}
}
[Token(Token = "0x2000018")]
[TrackClipType(typeof(TimeDilationClip))]
[TrackColor(0.855f, 0.8623f, 0.87f)]
public class TimeDilationTrack : TrackAsset
{
	[Token(Token = "0x600003C")]
	[Address(RVA = "0x116BD24", Offset = "0x116BD24", VA = "0x116BD24", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x116BDC4", Offset = "0x116BDC4", VA = "0x116BDC4")]
	public TimeDilationTrack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000019")]
public class TransformTweenBehaviour : PlayableBehaviour
{
	[Token(Token = "0x200001A")]
	public enum TweenType
	{
		[Token(Token = "0x400003C")]
		Linear,
		[Token(Token = "0x400003D")]
		Deceleration,
		[Token(Token = "0x400003E")]
		Harmonic,
		[Token(Token = "0x400003F")]
		Custom
	}

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform startLocation;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform endLocation;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool tweenPosition;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool tweenRotation;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public TweenType tweenType;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve customCurve;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 startingPosition;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Quaternion startingRotation;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AnimationCurve m_LinearCurve;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnimationCurve m_DecelerationCurve;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnimationCurve m_HarmonicCurve;

	[Token(Token = "0x400003A")]
	private const float k_RightAngleInRads = (float)Math.PI / 2f;

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x116BE1C", Offset = "0x116BE1C", VA = "0x116BE1C", Slot = "19")]
	public override void PrepareFrame(Playable playable, FrameData info)
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x116BEB4", Offset = "0x116BEB4", VA = "0x116BEB4")]
	public float EvaluateCurrentCurve(float time)
	{
		return default(float);
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x116BFA8", Offset = "0x116BFA8", VA = "0x116BFA8")]
	private bool IsCustomCurveNormalised()
	{
		return default(bool);
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x116C24C", Offset = "0x116C24C", VA = "0x116C24C")]
	public TransformTweenBehaviour()
	{
	}
}
[Serializable]
[Token(Token = "0x200001B")]
public class TransformTweenClip : PlayableAsset, ITimelineClipAsset
{
	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TransformTweenBehaviour template;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExposedReference<Transform> startLocation;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ExposedReference<Transform> endLocation;

	[Token(Token = "0x17000006")]
	public ClipCaps clipCaps
	{
		[Token(Token = "0x6000042")]
		[Address(RVA = "0x116C460", Offset = "0x116C460", VA = "0x116C460", Slot = "9")]
		get
		{
			return default(ClipCaps);
		}
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x116C468", Offset = "0x116C468", VA = "0x116C468", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x116C5D8", Offset = "0x116C5D8", VA = "0x116C5D8")]
	public TransformTweenClip()
	{
	}
}
[Token(Token = "0x200001C")]
public class TransformTweenMixerBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_FirstFrameHappened;

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x116C648", Offset = "0x116C648", VA = "0x116C648", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x116CD18", Offset = "0x116CD18", VA = "0x116CD18", Slot = "16")]
	public override void OnPlayableDestroy(Playable playable)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x116CD04", Offset = "0x116CD04", VA = "0x116CD04")]
	private static Quaternion AddQuaternions(Quaternion first, Quaternion second)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x116CCF0", Offset = "0x116CCF0", VA = "0x116CCF0")]
	private static Quaternion ScaleQuaternion(Quaternion rotation, float multiplier)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x116CD20", Offset = "0x116CD20", VA = "0x116CD20")]
	private static float QuaternionMagnitude(Quaternion rotation)
	{
		return default(float);
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x116CBF0", Offset = "0x116CBF0", VA = "0x116CBF0")]
	private static Quaternion NormalizeQuaternion(Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x116CD44", Offset = "0x116CD44", VA = "0x116CD44")]
	public TransformTweenMixerBehaviour()
	{
	}
}
[Token(Token = "0x200001D")]
[TrackColor(0.855f, 0.8623f, 0.87f)]
[TrackClipType(typeof(TransformTweenClip))]
[TrackBindingType(typeof(Transform))]
public class TransformTweenTrack : TrackAsset
{
	[Token(Token = "0x600004C")]
	[Address(RVA = "0x116CD4C", Offset = "0x116CD4C", VA = "0x116CD4C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x116CDEC", Offset = "0x116CDEC", VA = "0x116CDEC", Slot = "29")]
	public override void GatherProperties(PlayableDirector director, IPropertyCollector driver)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x116CDF4", Offset = "0x116CDF4", VA = "0x116CDF4")]
	public TransformTweenTrack()
	{
	}
}
[Token(Token = "0x200001E")]
public class Elevator : MonoBehaviour
{
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float m_fallingSpeed;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Object Setup")]
	[SerializeField]
	private GameObject m_crankWheel;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_crankWheelKeyhole;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Space]
	private MechanismCrank m_mechanismCrank;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private WorldInteraction m_worldInteraction;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MechanismSlide m_elevator;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MechanismKeyhole m_keyhole;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_shouldFall;

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x116CE4C", Offset = "0x116CE4C", VA = "0x116CE4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x116D038", Offset = "0x116D038", VA = "0x116D038")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x116D204", Offset = "0x116D204", VA = "0x116D204")]
	private void ActionOnInteractionStart()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x116D20C", Offset = "0x116D20C", VA = "0x116D20C")]
	private void ActionOnInteractionStop()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x116D218", Offset = "0x116D218", VA = "0x116D218")]
	private void MechanismCrankOnAngleChangedNormalizedEvent(float normalizedAngle)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x116D254", Offset = "0x116D254", VA = "0x116D254")]
	public void SwapHandleFromKeyToPhysics()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x116D28C", Offset = "0x116D28C", VA = "0x116D28C")]
	public void SwapHandleFromPhysicsToKey()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x116D3BC", Offset = "0x116D3BC", VA = "0x116D3BC")]
	private static void SwapInteraction(VrHand hand, WorldInteraction current, WorldInteraction next)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x116D47C", Offset = "0x116D47C", VA = "0x116D47C")]
	public Elevator()
	{
	}
}
[Token(Token = "0x200001F")]
public class GeneratorAttachTrigger : CachedMonoBehaviour
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PowerSystem _system;

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x116D48C", Offset = "0x116D48C", VA = "0x116D48C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x116D4E4", Offset = "0x116D4E4", VA = "0x116D4E4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x116D4E8", Offset = "0x116D4E8", VA = "0x116D4E8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x116D4EC", Offset = "0x116D4EC", VA = "0x116D4EC")]
	public GeneratorAttachTrigger()
	{
	}
}
[Token(Token = "0x2000020")]
public class OVRMetricsToolSDK : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000021")]
	public struct MetricsSnapshot
	{
		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long time;

		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int available_memory_MB;

		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int app_pss_MB;

		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int battery_level_percentage;

		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int battery_temperature_celcius;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int battery_current_now_milliamps;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int sensor_temperature_celcius;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int power_current;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int power_level_state;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int power_voltage;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int power_wattage;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int cpu_level;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int gpu_level;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int cpu_frequency_MHz;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int gpu_frequency_MHz;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int mem_frequency_MHz;

		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int minimum_vsyncs;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int extra_latency_mode;

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int average_frame_rate;

		[Token(Token = "0x4000065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int display_refresh_rate;

		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int average_prediction_milliseconds;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int screen_tear_count;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int early_frame_count;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int stale_frame_count;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maximum_rotational_speed_degrees_per_second;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int foveation_level;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int eye_buffer_width;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int eye_buffer_height;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int app_gpu_time_microseconds;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int timewarp_gpu_time_microseconds;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int guardian_gpu_time_microseconds;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int cpu_utilization_percentage;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int cpu_utilization_percentage_core0;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int cpu_utilization_percentage_core1;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int cpu_utilization_percentage_core2;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int cpu_utilization_percentage_core3;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int cpu_utilization_percentage_core4;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int cpu_utilization_percentage_core5;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int cpu_utilization_percentage_core6;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int cpu_utilization_percentage_core7;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int gpu_utilization_percentage;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int spacewarp_motion_vector_type;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public int spacewarped_frames_per_second;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int app_vss_MB;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public int app_rss_MB;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int app_dalvik_pss_MB;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public int app_private_dirty_MB;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int app_private_clean_MB;

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public int app_uss_MB;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int stale_frames_consecutive;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public int avg_vertices_per_frame;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int avg_fill_percentage;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int avg_inst_per_frag;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public int avg_inst_per_vert;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public int avg_textures_per_frag;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public int percent_time_shading_frags;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public int percent_time_shading_verts;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public int percent_time_compute;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public int percent_vertex_fetch_stall;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public int percent_texture_fetch_stall;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int percent_texture_l1_miss;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public int percent_texture_l2_miss;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public int percent_texture_nearest_filtered;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public int percent_texture_linear_filtered;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public int percent_texture_anisotropic_filtered;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public int vrshell_average_frame_rate;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public int vrshell_gpu_time_microseconds;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int vrshell_and_guardian_gpu_time_microseconds;
	}

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaClass _MetricsService;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static AndroidJavaObject _Context;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool _NativeInitialized;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool _IsBound;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static OVRMetricsToolSDK _Instance;

	[Token(Token = "0x17000007")]
	public static OVRMetricsToolSDK Instance
	{
		[Token(Token = "0x6000063")]
		[Address(RVA = "0x116D898", Offset = "0x116D898", VA = "0x116D898")]
		get
		{
			return null;
		}
	}

	[PreserveSig]
	[Token(Token = "0x600005C")]
	[Address(RVA = "0x116D4F4", Offset = "0x116D4F4", VA = "0x116D4F4")]
	private static extern bool ovrMetricsTool_Initialize(IntPtr jvm, IntPtr jni, IntPtr context);

	[PreserveSig]
	[Token(Token = "0x600005D")]
	[Address(RVA = "0x116D590", Offset = "0x116D590", VA = "0x116D590")]
	private static extern bool ovrMetricsTool_EnterVrMode();

	[PreserveSig]
	[Token(Token = "0x600005E")]
	[Address(RVA = "0x116D600", Offset = "0x116D600", VA = "0x116D600")]
	private static extern bool ovrMetricsTool_AppendCsvDebugString(string debugString);

	[PreserveSig]
	[Token(Token = "0x600005F")]
	[Address(RVA = "0x116D698", Offset = "0x116D698", VA = "0x116D698")]
	private static extern bool ovrMetricsTool_SetOverlayDebugString(string debugString);

	[PreserveSig]
	[Token(Token = "0x6000060")]
	[Address(RVA = "0x116D730", Offset = "0x116D730", VA = "0x116D730")]
	private static extern string ovrMetricsTool_GetLatestEventJson();

	[PreserveSig]
	[Token(Token = "0x6000061")]
	[Address(RVA = "0x116D7B8", Offset = "0x116D7B8", VA = "0x116D7B8")]
	private static extern bool ovrMetricsTool_LeaveVrMode();

	[PreserveSig]
	[Token(Token = "0x6000062")]
	[Address(RVA = "0x116D828", Offset = "0x116D828", VA = "0x116D828")]
	private static extern bool ovrMetricsTool_Shutdown();

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x116D9D8", Offset = "0x116D9D8", VA = "0x116D9D8")]
	[Conditional("JNI_AVAILABLE")]
	private static void Initialize()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x116DD84", Offset = "0x116DD84", VA = "0x116DD84")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x116DEB8", Offset = "0x116DEB8", VA = "0x116DEB8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x116E04C", Offset = "0x116E04C", VA = "0x116E04C")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x116DD94", Offset = "0x116DD94", VA = "0x116DD94")]
	private void EnterVrMode()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x116DEC8", Offset = "0x116DEC8", VA = "0x116DEC8")]
	private void LeaveVrMode()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x116DFE0", Offset = "0x116DFE0", VA = "0x116DFE0")]
	private void Shutdown()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x116E058", Offset = "0x116E058", VA = "0x116E058")]
	public bool AppendCsvDebugString(string debugString)
	{
		return default(bool);
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x116E1D0", Offset = "0x116E1D0", VA = "0x116E1D0")]
	public bool SetOverlayDebugString(string debugString)
	{
		return default(bool);
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x116E348", Offset = "0x116E348", VA = "0x116E348")]
	public MetricsSnapshot? GetLatestMetricsSnapshot()
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x116E518", Offset = "0x116E518", VA = "0x116E518")]
	public OVRMetricsToolSDK()
	{
	}
}
[Token(Token = "0x2000022")]
public class OculusSpatializerFMOD : MonoBehaviour
{
	[Token(Token = "0x2000023")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioRaycastCallback _raycastCallback;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float particleSize;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float particleOffset;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject room;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] dims;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] coefs;

	[Token(Token = "0x40000A5")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] points;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3[] normals;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem sys;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x40000AB")]
	private const string strOSP = "OculusSpatializerFMOD";

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x116E520", Offset = "0x116E520", VA = "0x116E520")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x116E528", Offset = "0x116E528", VA = "0x116E528")]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x116E6B8", Offset = "0x116E6B8", VA = "0x116E6B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x116E80C", Offset = "0x116E80C", VA = "0x116E80C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x116E904", Offset = "0x116E904", VA = "0x116E904")]
	private void Update()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x116F270", Offset = "0x116F270", VA = "0x116F270")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000075")]
	[Address(RVA = "0x116E880", Offset = "0x116E880", VA = "0x116E880")]
	private static extern int OSP_FMOD_AssignRayCastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000076")]
	[Address(RVA = "0x116F004", Offset = "0x116F004", VA = "0x116F004")]
	private static extern int OSP_FMOD_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x6000077")]
	[Address(RVA = "0x116F080", Offset = "0x116F080", VA = "0x116F080")]
	private static extern int OSP_FMOD_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x6000078")]
	[Address(RVA = "0x116F0FC", Offset = "0x116F0FC", VA = "0x116F0FC")]
	private static extern int OSP_FMOD_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x6000079")]
	[Address(RVA = "0x116F178", Offset = "0x116F178", VA = "0x116F178")]
	private static extern int OSP_FMOD_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x600007A")]
	[Address(RVA = "0x116F1F4", Offset = "0x116F1F4", VA = "0x116F1F4")]
	private static extern int OSP_FMOD_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x600007B")]
	[Address(RVA = "0x116FFF8", Offset = "0x116FFF8", VA = "0x116FFF8")]
	private static extern int OSP_FMOD_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x600007C")]
	[Address(RVA = "0x117009C", Offset = "0x117009C", VA = "0x117009C")]
	private static extern int OSP_FMOD_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x1170140", Offset = "0x1170140", VA = "0x1170140")]
	public OculusSpatializerFMOD()
	{
	}
}
[Token(Token = "0x2000024")]
public static class LayerHelper
{
	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int c_default;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int c_transparent_fx;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int c_ignore_raycast;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int c_water;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int c_ui;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string c_dropped_object_col_name;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly int c_interior_ren;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static readonly int c_sector_sen;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly int c_ignore_all_col;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static readonly int c_player_hand_col;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly int c_player_body_col;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static readonly int c_player_head_col;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly int c_player_clip_col;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static readonly int c_held_object_col;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly int c_dropped_object_col;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static readonly int c_agents_col;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static readonly int c_weapon_col;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public static readonly int c_damage_sen;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static readonly int c_trigger_sen;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public static readonly int c_bullet_blocker_col;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static readonly int c_enemy_ragdolls_col;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public static readonly int c_gibs_col;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static readonly int c_inventory_sen;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public static readonly int c_ammo_sen;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static readonly int c_important_structures;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public static readonly int c_dynamic_environment_col;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static readonly int c_environment_object_col;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public static readonly int c_push_button_col;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static readonly int c_worldGeometryMask;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public static readonly int c_environment;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static readonly int c_playerVisionMask;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public static readonly int c_meleeDamageMask;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static readonly int c_environmentDamage;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public static readonly int c_handScanColMask;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static readonly int c_playerMask;

	[Token(Token = "0x17000008")]
	public static int WorldGeometryMask
	{
		[Token(Token = "0x6000083")]
		[Address(RVA = "0x117047C", Offset = "0x117047C", VA = "0x117047C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x11704D4", Offset = "0x11704D4", VA = "0x11704D4")]
	private static int FindLayer(string layerName)
	{
		return default(int);
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x11704DC", Offset = "0x11704DC", VA = "0x11704DC")]
	public static int Mask(params int[] layers)
	{
		return default(int);
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x1170548", Offset = "0x1170548", VA = "0x1170548")]
	public static bool CheckLayerAgainstMask(int layer, int mask)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000025")]
public class XRComponentTracker : MonoBehaviour
{
	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody LeftHand;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody RightHand;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Height;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<XRNodeState> mNodeStates;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 mLeftHandPos;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 mRightHandPos;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion mLeftHandRot;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion mRightHandRot;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x1170D24", Offset = "0x1170D24", VA = "0x1170D24")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x1171030", Offset = "0x1171030", VA = "0x1171030")]
	public XRComponentTracker()
	{
	}
}
[Token(Token = "0x2000026")]
public class CollisionForwardingHaptics : ManualHaptics
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_runOnCollisionStay;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private HapticsAbstractClass m_optionalSpecificHandRef;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool m_selectHapticsViaVelocity;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private HapticFrameVelocityConfig m_hapticFrameVelocityConfig;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ScriptableObject s_defaultVelocityConfig;

	[Token(Token = "0x40000DC")]
	private const string c_defaultVelocityConfigAssetName = "HapticCollisionForwardingConfig_Default";

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x11710C4", Offset = "0x11710C4", VA = "0x11710C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x11711F4", Offset = "0x11711F4", VA = "0x11711F4")]
	private void CloneScriptables()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x11715A4", Offset = "0x11715A4", VA = "0x11715A4", Slot = "7")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x11716F4", Offset = "0x11716F4", VA = "0x11716F4", Slot = "8")]
	protected override void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x1171788", Offset = "0x1171788", VA = "0x1171788")]
	public void PlayHapticEnter(float velocitySquareMagnitude)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x1171630", Offset = "0x1171630", VA = "0x1171630")]
	private void Play(float velSqrMag = 0f)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x11717FC", Offset = "0x11717FC", VA = "0x11717FC")]
	private HapticFrame GetHapticFrameForVelocityMagnitude(float velSqrMag)
	{
		return null;
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x1171988", Offset = "0x1171988", VA = "0x1171988")]
	public CollisionForwardingHaptics()
	{
	}
}
[Serializable]
[Token(Token = "0x2000027")]
public class HapticFrameVelocityNode
{
	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_name;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_velocityMagnitudeToTrigger;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticConfig m_hapticConfig;

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x11719A8", Offset = "0x11719A8", VA = "0x11719A8")]
	public HapticFrameVelocityNode()
	{
	}
}
[Serializable]
[Token(Token = "0x2000028")]
public class CollisionHaptics : StandardHapticsBase
{
	[Token(Token = "0x6000093")]
	[Address(RVA = "0x11719B0", Offset = "0x11719B0", VA = "0x11719B0")]
	private new void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x1171B50", Offset = "0x1171B50", VA = "0x1171B50")]
	public CollisionHaptics()
	{
	}
}
[Serializable]
[Token(Token = "0x2000029")]
public class ContinuousHaptics : StandardHapticsBase
{
	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool PlayOnAwake;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool Loop;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int mSampleCopyIndex;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float mStartTime;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float mLastTime;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool mPlaying;

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x1171C48", Offset = "0x1171C48", VA = "0x1171C48")]
	public void Play()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x1171C7C", Offset = "0x1171C7C", VA = "0x1171C7C")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x1171C84", Offset = "0x1171C84", VA = "0x1171C84")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x1171C94", Offset = "0x1171C94", VA = "0x1171C94")]
	private void playHapticPiece(HapticsClip clip, int sampleLength)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x1171F60", Offset = "0x1171F60", VA = "0x1171F60")]
	private void Awake()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x1172000", Offset = "0x1172000", VA = "0x1172000")]
	private void Update()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x117223C", Offset = "0x117223C", VA = "0x117223C")]
	public ContinuousHaptics()
	{
	}
}
[Serializable]
[Token(Token = "0x200002A")]
public class HapticFrame
{
	[Token(Token = "0x200002B")]
	public enum Type
	{
		[Token(Token = "0x40000ED")]
		Raw,
		[Token(Token = "0x40000EE")]
		Audio
	}

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Type ClipType;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip HapticAudioClip;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RawHapticCurve RawHapticCurve;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private byte[] mHapticData;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mHaveCachedClip;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private HapticsClip mHapticClip;

	[Token(Token = "0x17000009")]
	public HapticsClip Clip
	{
		[Token(Token = "0x600009D")]
		[Address(RVA = "0x1171940", Offset = "0x1171940", VA = "0x1171940")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x1172240", Offset = "0x1172240", VA = "0x1172240")]
	public HapticFrame(float defaultRawTime = 1f)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x1172314", Offset = "0x1172314", VA = "0x1172314")]
	private HapticsClip generateClip()
	{
		return null;
	}
}
[Token(Token = "0x200002C")]
public abstract class HapticsAbstractClass : MonoBehaviour
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static readonly System.Random c_random;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int eventID;

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x1172840", Offset = "0x1172840", VA = "0x1172840", Slot = "4")]
	protected virtual void DoRumble(int id, HapticsClip hapticsClip, bool mix = false, [Optional] HapticsAbstractClass explicitHapticNode)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x1171B2C", Offset = "0x1171B2C", VA = "0x1171B2C")]
	public void TransmitRumble(int id, HapticsClip hapticsClip, GameObject sendingObject, bool mix = false)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x1172848", Offset = "0x1172848", VA = "0x1172848")]
	protected HapticsAbstractClass()
	{
	}
}
[Token(Token = "0x200002D")]
public class HapticsClip
{
	[Token(Token = "0x1700000A")]
	public int Length
	{
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x11728DC", Offset = "0x11728DC", VA = "0x11728DC")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x11728E4", Offset = "0x11728E4", VA = "0x11728E4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public byte[] Samples
	{
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x11728EC", Offset = "0x11728EC", VA = "0x11728EC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x11728F4", Offset = "0x11728F4", VA = "0x11728F4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x1171F18", Offset = "0x1171F18", VA = "0x1171F18")]
	public HapticsClip(byte[] samples, int samplesCount)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x11725AC", Offset = "0x11725AC", VA = "0x11725AC")]
	public HapticsClip(AudioClip audioClip, int channel = 0)
	{
	}
}
[Serializable]
[Token(Token = "0x200002E")]
public class RawHapticCurve
{
	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float Time;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve HapticCurve;

	[Token(Token = "0x1700000C")]
	public int FrameCount
	{
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0x1172800", Offset = "0x1172800", VA = "0x1172800")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x11722D0", Offset = "0x11722D0", VA = "0x11722D0")]
	public RawHapticCurve()
	{
	}
}
[Token(Token = "0x200002F")]
public class StandardHapticsBase : HapticsAbstractClass
{
	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticFrame Haptic;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected HashSet<HapticsAbstractClass> mHapticNodes;

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x11728FC", Offset = "0x11728FC", VA = "0x11728FC", Slot = "4")]
	protected override void DoRumble(int id, HapticsClip hapticsClip, bool mix = false, [Optional] HapticsAbstractClass explicitHapticNode)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x1172B08", Offset = "0x1172B08", VA = "0x1172B08", Slot = "5")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x1172BDC", Offset = "0x1172BDC", VA = "0x1172BDC", Slot = "6")]
	protected virtual void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x117162C", Offset = "0x117162C", VA = "0x117162C", Slot = "7")]
	protected virtual void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x1171784", Offset = "0x1171784", VA = "0x1171784", Slot = "8")]
	protected virtual void OnCollisionStay(Collision other)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x1172CB0", Offset = "0x1172CB0", VA = "0x1172CB0", Slot = "9")]
	protected virtual void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x1171B54", Offset = "0x1171B54", VA = "0x1171B54")]
	public StandardHapticsBase()
	{
	}
}
[Token(Token = "0x2000030")]
public class HandHaptics : HapticsAbstractClass
{
	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public XRNode hand;

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x1172CB4", Offset = "0x1172CB4", VA = "0x1172CB4", Slot = "4")]
	protected override void DoRumble(int id, HapticsClip hapticsClip, bool mix = false, [Optional] HapticsAbstractClass explicitHapticNode)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x1172E74", Offset = "0x1172E74", VA = "0x1172E74")]
	public HandHaptics()
	{
	}
}
[Token(Token = "0x2000031")]
public class ManualHaptics : StandardHapticsBase
{
	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool m_loadFromScriptableAsset;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HapticConfig m_hapticConfig;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ScriptableObject m_defaultHapticConfig;

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x1172EDC", Offset = "0x1172EDC", VA = "0x1172EDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x1171150", Offset = "0x1171150", VA = "0x1171150")]
	public void AddHapticsNode(HapticsAbstractClass node)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x1173168", Offset = "0x1173168", VA = "0x1173168")]
	public void RemoveHapticsNode(HapticsAbstractClass node)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x117320C", Offset = "0x117320C", VA = "0x117320C")]
	public void ClearHapticsNodes()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x117325C", Offset = "0x117325C", VA = "0x117325C")]
	public void Play()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x1173314", Offset = "0x1173314", VA = "0x1173314")]
	public void Play(HapticsAbstractClass explicitHapticNode)
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x117199C", Offset = "0x117199C", VA = "0x117199C")]
	public ManualHaptics()
	{
	}
}
[Serializable]
[Token(Token = "0x2000032")]
public class TriggerHaptics : StandardHapticsBase
{
	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x11733D0", Offset = "0x11733D0", VA = "0x11733D0")]
	protected new void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x117354C", Offset = "0x117354C", VA = "0x117354C")]
	public TriggerHaptics()
	{
	}
}
[Token(Token = "0x2000033")]
public static class HapticsUtils
{
	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HapticCapabilities sHapticCapabilities;

	[Token(Token = "0x1700000D")]
	private static HapticCapabilities Capabilities
	{
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x1173550", Offset = "0x1173550", VA = "0x1173550")]
		get
		{
			return default(HapticCapabilities);
		}
	}

	[Token(Token = "0x1700000E")]
	public static uint SampleRateHz
	{
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x11721BC", Offset = "0x11721BC", VA = "0x11721BC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x1700000F")]
	public static float DisplayFrequency
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x1172234", Offset = "0x1172234", VA = "0x1172234")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x1172D90", Offset = "0x1172D90", VA = "0x1172D90")]
	public static void SendHapticData(XRNode hand, HapticsClip hapticsClip, bool mix)
	{
	}
}
[Token(Token = "0x2000034")]
[DisallowMultipleComponent]
[ExecuteInEditMode]
public class GuidComponent : MonoBehaviour, ISerializationCallbackReceiver
{
	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Guid guid;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private byte[] serializedGuid;

	[Token(Token = "0x17000010")]
	public byte[] SerializedGuid
	{
		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x11735FC", Offset = "0x11735FC", VA = "0x11735FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000011")]
	public Guid Guid
	{
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x1173604", Offset = "0x1173604", VA = "0x1173604")]
		get
		{
			return default(Guid);
		}
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x1173610", Offset = "0x1173610", VA = "0x1173610")]
	public bool IsGuidAssigned()
	{
		return default(bool);
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x1173664", Offset = "0x1173664", VA = "0x1173664", Slot = "6")]
	protected virtual void CreateGuid()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x1173838", Offset = "0x1173838", VA = "0x1173838", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x11738C0", Offset = "0x11738C0", VA = "0x11738C0", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x1173904", Offset = "0x1173904", VA = "0x1173904")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x1173910", Offset = "0x1173910", VA = "0x1173910")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x117391C", Offset = "0x117391C", VA = "0x117391C")]
	public Guid GetGuid()
	{
		return default(Guid);
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x11739B8", Offset = "0x11739B8", VA = "0x11739B8", Slot = "7")]
	public virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x1173A6C", Offset = "0x1173A6C", VA = "0x1173A6C")]
	public GuidComponent()
	{
	}
}
[Token(Token = "0x2000035")]
public class GuidManager
{
	[Token(Token = "0x2000036")]
	private struct GuidInfo
	{
		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject go;

		[Token(Token = "0x14000001")]
		public event Action<GameObject> OnAdd
		{
			[Token(Token = "0x60000D5")]
			[Address(RVA = "0x11743A0", Offset = "0x11743A0", VA = "0x11743A0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60000D6")]
			[Address(RVA = "0x11744EC", Offset = "0x11744EC", VA = "0x11744EC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000002")]
		public event Action OnRemove
		{
			[Token(Token = "0x60000D7")]
			[Address(RVA = "0x1174450", Offset = "0x1174450", VA = "0x1174450")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60000D8")]
			[Address(RVA = "0x117459C", Offset = "0x117459C", VA = "0x117459C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x1174314", Offset = "0x1174314", VA = "0x1174314")]
		public GuidInfo(GuidComponent comp)
		{
		}

		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x1174364", Offset = "0x1174364", VA = "0x1174364")]
		public void HandleAddCallback()
		{
		}

		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x1174384", Offset = "0x1174384", VA = "0x1174384")]
		public void HandleRemoveCallback()
		{
		}
	}

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GuidManager Instance;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<Guid, GuidInfo> guidToObjectMap;

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x11737A0", Offset = "0x11737A0", VA = "0x11737A0")]
	public static bool Add(GuidComponent guidComponent)
	{
		return default(bool);
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x11739C4", Offset = "0x11739C4", VA = "0x11739C4")]
	public static void Remove(Guid guid)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x1173F70", Offset = "0x1173F70", VA = "0x1173F70")]
	public static GameObject ResolveGuid(Guid guid, Action<GameObject> onAddCallback, Action onRemoveCallback)
	{
		return null;
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x11741B0", Offset = "0x11741B0", VA = "0x11741B0")]
	public static GameObject ResolveGuid(Guid guid, Action onDestroyCallback)
	{
		return null;
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x1174264", Offset = "0x1174264", VA = "0x1174264")]
	public static GameObject ResolveGuid(Guid guid)
	{
		return null;
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x1173AC4", Offset = "0x1173AC4", VA = "0x1173AC4")]
	private GuidManager()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x1173B4C", Offset = "0x1173B4C", VA = "0x1173B4C")]
	private bool InternalAdd(GuidComponent guidComponent)
	{
		return default(bool);
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x1173EA8", Offset = "0x1173EA8", VA = "0x1173EA8")]
	private void InternalRemove(Guid guid)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x1174030", Offset = "0x1174030", VA = "0x1174030")]
	private GameObject ResolveGuidInternal(Guid guid, Action<GameObject> onAddCallback, Action onRemoveCallback)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000037")]
public class GuidReference : ISerializationCallbackReceiver
{
	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject cachedReference;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isCacheSet;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private byte[] serializedGuid;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Guid guid;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Action<GameObject> addDelegate;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Action removeDelegate;

	[Token(Token = "0x17000012")]
	public GameObject gameObject
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x11748D0", Offset = "0x11748D0", VA = "0x11748D0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x1174918", Offset = "0x1174918", VA = "0x1174918")]
		private set
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action<GameObject> OnGuidAdded
	{
		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x1174638", Offset = "0x1174638", VA = "0x1174638")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x11746E8", Offset = "0x11746E8", VA = "0x11746E8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action OnGuidRemoved
	{
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x1174798", Offset = "0x1174798", VA = "0x1174798")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x1174834", Offset = "0x1174834", VA = "0x1174834")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x117491C", Offset = "0x117491C", VA = "0x117491C")]
	public GuidReference()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x1174ABC", Offset = "0x1174ABC", VA = "0x1174ABC")]
	public GuidReference(GuidComponent target)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x1174C74", Offset = "0x1174C74", VA = "0x1174C74")]
	private void GuidAdded(GameObject go)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x1174CB8", Offset = "0x1174CB8", VA = "0x1174CB8")]
	private void GuidRemoved()
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x1174CF4", Offset = "0x1174CF4", VA = "0x1174CF4", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x1174D1C", Offset = "0x1174D1C", VA = "0x1174D1C", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}
}
[Token(Token = "0x2000039")]
public interface IGuidComponentData
{
	[Token(Token = "0x60000EE")]
	void ProcessEvent(GuidComponentDataEvent evnt);
}
[Token(Token = "0x200003A")]
[RequireComponent(typeof(Light))]
public class SpecularProbeLight : MonoBehaviour
{
	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x1174F04", Offset = "0x1174F04", VA = "0x1174F04")]
	public SpecularProbeLight()
	{
	}
}
[Token(Token = "0x200003B")]
[ExecuteInEditMode]
[RequireComponent(typeof(ReflectionProbe))]
public class SpecularProbeRenderer : MonoBehaviour
{
	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x1174F0C", Offset = "0x1174F0C", VA = "0x1174F0C")]
	public SpecularProbeRenderer()
	{
	}
}
[Token(Token = "0x200003C")]
public class AchievementsManager : PT.Singleton<AchievementsManager>
{
	[Token(Token = "0x200003D")]
	private class AchievementHolder
	{
		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly AchievementID ID;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AchievementProgress Progress;

		[Token(Token = "0x17000013")]
		public string Name
		{
			[Token(Token = "0x6000100")]
			[Address(RVA = "0x117620C", Offset = "0x117620C", VA = "0x117620C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		public bool IsUnlocked
		{
			[Token(Token = "0x6000102")]
			[Address(RVA = "0x11761E4", Offset = "0x11761E4", VA = "0x11761E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000101")]
		[Address(RVA = "0x1175CE0", Offset = "0x1175CE0", VA = "0x1175CE0")]
		public AchievementHolder(AchievementID id)
		{
		}
	}

	[Token(Token = "0x4000110")]
	private const string c_retryAchievementsPlayerPref = "c_retryAchievementsPlayerPref";

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<AchievementID, AchievementHolder> m_achievements;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<AchievementID, string> m_achievementsToRetry;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<string> m_achievementsToUpdate;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_lastAchievementUpdate;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_lastAchievementRetry;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CabinAchievementHandler m_cabinAchievements;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x1174F14", Offset = "0x1174F14", VA = "0x1174F14")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x1174FB8", Offset = "0x1174FB8", VA = "0x1174FB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x11750D8", Offset = "0x11750D8", VA = "0x11750D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x11759D0", Offset = "0x11759D0", VA = "0x11759D0")]
	public void InitAchievementsAsync()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x1175C4C", Offset = "0x1175C4C", VA = "0x1175C4C")]
	public void AddAchievement(AchievementID achievementID)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x1175D08", Offset = "0x1175D08", VA = "0x1175D08")]
	private void DebugPrintInfo()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x1175624", Offset = "0x1175624", VA = "0x1175624")]
	public void AddCount(AchievementID achievementID, ulong count)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x11754A8", Offset = "0x11754A8", VA = "0x11754A8")]
	public void UnlockAchievement(AchievementID achievementID)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x117582C", Offset = "0x117582C", VA = "0x117582C")]
	public void AddFields(AchievementID achievementID, string fields)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x1176284", Offset = "0x1176284", VA = "0x1176284")]
	private void UpdateAchievementFromServerByName(params string[] achievementNames)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x11763AC", Offset = "0x11763AC", VA = "0x11763AC")]
	private void UpdateAchievementProgressFromServer(AchievementProgress achievementProgress)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x1176540", Offset = "0x1176540", VA = "0x1176540")]
	private void AddToRetry(AchievementID achievementID, string payload)
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x117675C", Offset = "0x117675C", VA = "0x117675C")]
	public AchievementsManager()
	{
	}
}
[Token(Token = "0x2000042")]
public class BossEnemyKilledFSMAction : FsmStateAction
{
	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public AchievementID AchievementID;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool IsCount;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x1176ECC", Offset = "0x1176ECC", VA = "0x1176ECC", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x1176F70", Offset = "0x1176F70", VA = "0x1176F70")]
	public BossEnemyKilledFSMAction()
	{
	}
}
[Token(Token = "0x2000043")]
public class CabinAchievementHandler : MonoBehaviour
{
	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameEvent FinishRadioTowerEvent;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameEvent FinishShacksEvent;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameEvent FinishStoneCircleEvent;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameEvent StartExtractionEvent;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameEvent FinishExtraction1pEvent;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameEvent FinishExtraction2pEvent;

	[Token(Token = "0x400012D")]
	private const float QUICK_EXTRACTION_TIME = 100f;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Identifier BaseballBatIdentifier;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Identifier AxeIdentifier;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Identifier PitchforkIdentifier;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Identifier PickAxeIdentifier;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Identifier MeatCleaverIdentifier;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Identifier PistolIdentifier;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Identifier RevolverIdentifier;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Identifier ShotgunIdentifier;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Identifier AssaultRifleIdentifier;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int m_consecutiveHeadshotKills;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private HealthStatus m_playerHealthStatus;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_timeExtractionEventStarted;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x1176F78", Offset = "0x1176F78", VA = "0x1176F78")]
	private void Awake()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x1177450", Offset = "0x1177450", VA = "0x1177450")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x1177928", Offset = "0x1177928", VA = "0x1177928")]
	private void FinishRadioTowerEventOnOnGameEvent()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x1177A18", Offset = "0x1177A18", VA = "0x1177A18")]
	private void FinishShacksEventOnOnGameEvent()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x1177B08", Offset = "0x1177B08", VA = "0x1177B08")]
	private void FinishStoneCircleEventOnOnGameEvent()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x1177BF8", Offset = "0x1177BF8", VA = "0x1177BF8")]
	private void StartExtractionEventOnOnGameEvent()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x1177C14", Offset = "0x1177C14", VA = "0x1177C14")]
	private void FinishExtractionEventOnOnGameEvent()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x1177D78", Offset = "0x1177D78", VA = "0x1177D78")]
	private void HealthStatusOnGlobalActionOnRescue(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x1177EFC", Offset = "0x1177EFC", VA = "0x1177EFC")]
	private void PlayerActionOnDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x1177F00", Offset = "0x1177F00", VA = "0x1177F00")]
	private void OnDamageReport(DamageReport damageReport)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x1178510", Offset = "0x1178510", VA = "0x1178510")]
	private void OnPlayerGainRank(Rank newRank)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x1178674", Offset = "0x1178674", VA = "0x1178674")]
	private void OnWeaponGainRank(Identifier weaponIdentifier, int newRank)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x11789C4", Offset = "0x11789C4", VA = "0x11789C4")]
	public CabinAchievementHandler()
	{
	}
}
[Token(Token = "0x2000044")]
public enum AchievementID
{
	[Token(Token = "0x400013B")]
	AssaultRifleWeaponLevel1,
	[Token(Token = "0x400013C")]
	AssaultRifleWeaponLevel3,
	[Token(Token = "0x400013D")]
	AssaultRifleWeaponLevel5,
	[Token(Token = "0x400013E")]
	BladedWeaponKills10,
	[Token(Token = "0x400013F")]
	BladedWeaponKills100,
	[Token(Token = "0x4000140")]
	BladedWeaponKills500,
	[Token(Token = "0x4000141")]
	BluntWeaponKills10,
	[Token(Token = "0x4000142")]
	BluntWeaponKills100,
	[Token(Token = "0x4000143")]
	BluntWeaponKills500,
	[Token(Token = "0x4000144")]
	ExtractedSuccessfully10x,
	[Token(Token = "0x4000145")]
	ExtractedSuccessfully1x,
	[Token(Token = "0x4000146")]
	ExtractedSuccessfully3x,
	[Token(Token = "0x4000147")]
	FocalPointsCompleted10x,
	[Token(Token = "0x4000148")]
	FocalPointsCompleted20x,
	[Token(Token = "0x4000149")]
	FocalPointsCompleted5x,
	[Token(Token = "0x400014A")]
	HeadshotKills10,
	[Token(Token = "0x400014B")]
	HeadshotKills100,
	[Token(Token = "0x400014C")]
	HeadshotKills500,
	[Token(Token = "0x400014D")]
	HealthKitsConsumed1,
	[Token(Token = "0x400014E")]
	HealthKitsConsumed10,
	[Token(Token = "0x400014F")]
	HealthKitsConsumed30,
	[Token(Token = "0x4000150")]
	ImpalingKills10,
	[Token(Token = "0x4000151")]
	ImpalingKills100,
	[Token(Token = "0x4000152")]
	ImpalingKills500,
	[Token(Token = "0x4000153")]
	Kills10000,
	[Token(Token = "0x4000154")]
	Kills2500,
	[Token(Token = "0x4000155")]
	Kills500,
	[Token(Token = "0x4000156")]
	MeleeKills100,
	[Token(Token = "0x4000157")]
	MeleeKills1000,
	[Token(Token = "0x4000158")]
	MeleeKills500,
	[Token(Token = "0x4000159")]
	PistolWeaponLevel1,
	[Token(Token = "0x400015A")]
	PistolWeaponLevel3,
	[Token(Token = "0x400015B")]
	PistolWeaponLevel5,
	[Token(Token = "0x400015C")]
	PlayerLevel11,
	[Token(Token = "0x400015D")]
	PlayerLevel2,
	[Token(Token = "0x400015E")]
	PlayerLevel21,
	[Token(Token = "0x400015F")]
	PlayersRevived1,
	[Token(Token = "0x4000160")]
	PlayersRevived10,
	[Token(Token = "0x4000161")]
	PlayersRevived5,
	[Token(Token = "0x4000162")]
	QuickEscape,
	[Token(Token = "0x4000163")]
	RangedKills100,
	[Token(Token = "0x4000164")]
	RangedKills1000,
	[Token(Token = "0x4000165")]
	RangedKills500,
	[Token(Token = "0x4000166")]
	RevolverWeaponLevel1,
	[Token(Token = "0x4000167")]
	RevolverWeaponLevel3,
	[Token(Token = "0x4000168")]
	RevolverWeaponLevel5,
	[Token(Token = "0x4000169")]
	ShacksCompleted1x,
	[Token(Token = "0x400016A")]
	ShacksCompleted3x,
	[Token(Token = "0x400016B")]
	ShacksCompleted5x,
	[Token(Token = "0x400016C")]
	ShotgunWeaponLevel1,
	[Token(Token = "0x400016D")]
	ShotgunWeaponLevel3,
	[Token(Token = "0x400016E")]
	ShotgunWeaponLevel5,
	[Token(Token = "0x400016F")]
	StoneCircleCompleted1x,
	[Token(Token = "0x4000170")]
	StoneCircleCompleted3x,
	[Token(Token = "0x4000171")]
	StoneCircleCompleted5x,
	[Token(Token = "0x4000172")]
	TowerCompleted1x,
	[Token(Token = "0x4000173")]
	TowerCompleted3x,
	[Token(Token = "0x4000174")]
	TowerCompleted5x
}
[Token(Token = "0x2000045")]
public class EnemyDefeatedAchievementTracker : MonoBehaviour
{
	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AchievementID m_achievementID;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool m_isCount;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x11789CC", Offset = "0x11789CC", VA = "0x11789CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x1178AEC", Offset = "0x1178AEC", VA = "0x1178AEC")]
	private void ActionOnDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x1178B7C", Offset = "0x1178B7C", VA = "0x1178B7C")]
	public EnemyDefeatedAchievementTracker()
	{
	}
}
[Token(Token = "0x2000046")]
public interface IAttack
{
	[Token(Token = "0x17000015")]
	MeleeData shortMelee
	{
		[Token(Token = "0x600011D")]
		get;
	}

	[Token(Token = "0x600011E")]
	string SelectAttackAnimation();

	[Token(Token = "0x600011F")]
	ActorAttackChanceProperties.BlockedAnimationData SelectBlockedAnimation(string attackAnimation);
}
[Token(Token = "0x2000047")]
public class NearestPlayerCalculator : CachedMonoBehaviour
{
	[Token(Token = "0x6000120")]
	[Address(RVA = "0x1178B84", Offset = "0x1178B84", VA = "0x1178B84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x11791F0", Offset = "0x11791F0", VA = "0x11791F0")]
	public NearestPlayerCalculator()
	{
	}
}
[Token(Token = "0x2000048")]
public class TargetInfo
{
	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PriorityTarget m_target;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AttackPosition attackPosition;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_preceiverPoint;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float score;

	[Token(Token = "0x17000016")]
	public PriorityTarget target
	{
		[Token(Token = "0x6000122")]
		[Address(RVA = "0x11791F8", Offset = "0x11791F8", VA = "0x11791F8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000123")]
		[Address(RVA = "0x1179200", Offset = "0x1179200", VA = "0x1179200")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public PlayerAgent playerAgent
	{
		[Token(Token = "0x6000124")]
		[Address(RVA = "0x1179314", Offset = "0x1179314", VA = "0x1179314")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000125")]
		[Address(RVA = "0x117931C", Offset = "0x117931C", VA = "0x117931C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public Vector3 perceivedPoint
	{
		[Token(Token = "0x6000126")]
		[Address(RVA = "0x1179324", Offset = "0x1179324", VA = "0x1179324")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000127")]
		[Address(RVA = "0x11793B8", Offset = "0x11793B8", VA = "0x11793B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public float targetRadius
	{
		[Token(Token = "0x6000128")]
		[Address(RVA = "0x11793C4", Offset = "0x11793C4", VA = "0x11793C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x1179440", Offset = "0x1179440", VA = "0x1179440")]
	public TargetInfo()
	{
	}
}
[Token(Token = "0x2000049")]
public class TargetSelectionManager : SceneSingleton<TargetSelectionManager>
{
	[Token(Token = "0x200004A")]
	public class ActorTargetData
	{
		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Zombie.NearestPlayer nearestPlayer;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<TargetInfo> reachableTargets;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<PriorityTarget, TargetInfo> targetData;

		[Token(Token = "0x1700001A")]
		public float distanceToNearestPlayerSqr
		{
			[Token(Token = "0x600013F")]
			[Address(RVA = "0x117BFE0", Offset = "0x117BFE0", VA = "0x117BFE0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000140")]
		[Address(RVA = "0x1179A94", Offset = "0x1179A94", VA = "0x1179A94")]
		public ActorTargetData()
		{
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0x117A434", Offset = "0x117A434", VA = "0x117A434")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200004B")]
	private enum UpdatePhase
	{
		[Token(Token = "0x4000196")]
		SortEnemiesByDistance,
		[Token(Token = "0x4000197")]
		StartEnemyBestTargetCalculation,
		[Token(Token = "0x4000198")]
		CalculateTargetScore,
		[Token(Token = "0x4000199")]
		WaitForPath,
		[Token(Token = "0x400019A")]
		CalculateBestTarget,
		[Token(Token = "0x400019B")]
		CompletedEnemyBestTargetCalculation,
		[Token(Token = "0x400019C")]
		StartJobPaths,
		[Token(Token = "0x400019D")]
		WaitForPathBatchQuery
	}

	[Token(Token = "0x200004C")]
	public class PathData
	{
		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PathRequest> requests;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Actor[] requestActors;

		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PriorityTarget[] requestTargets;

		[Token(Token = "0x6000142")]
		[Address(RVA = "0x117BFFC", Offset = "0x117BFFC", VA = "0x117BFFC")]
		public PathData(int maxPaths)
		{
		}
	}

	[Token(Token = "0x200004D")]
	public enum UpdateMethod
	{
		[Token(Token = "0x40001A2")]
		Legacy,
		[Token(Token = "0x40001A3")]
		JobsVersion1,
		[Token(Token = "0x40001A4")]
		JobsVersion2
	}

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Actor> m_actors;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<Actor, ActorTargetData> _targetingInfo;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AttackStateMatrix m_defaultAttackMatrix;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<ActorTargetData> m_infoPool;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<PriorityTarget> m_targets;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UpdatePhase m_updatePhase;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int m_actorIndex;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Actor m_currentActor;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_pendingTargetScores;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool m_pathCalculationStarted;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private PathData[] m_dataBuffers;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Stack<PathingData> m_pathingDataStack;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<PathingData> m_allPathingData;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<PathingData, PriorityTarget> m_pathingDataToTargetMap;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UpdateMethod m_updateMethod;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int m_lastStartedFrame;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool m_useJobPathing;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int m_totalPathRequests;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int m_waitingFrames;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int[] m_phaseCounts;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool locked;

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x1179448", Offset = "0x1179448", VA = "0x1179448")]
	public static void Create()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x11794D4", Offset = "0x11794D4", VA = "0x11794D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x1179B6C", Offset = "0x1179B6C", VA = "0x1179B6C", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x1179D24", Offset = "0x1179D24", VA = "0x1179D24")]
	private void HandleLevelReset()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x1179E04", Offset = "0x1179E04", VA = "0x1179E04")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x1179FF4", Offset = "0x1179FF4", VA = "0x1179FF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x117A1E4", Offset = "0x117A1E4", VA = "0x117A1E4")]
	private void HandleAgentAdded(IAgent agent)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x117A438", Offset = "0x117A438", VA = "0x117A438")]
	private void HandleAgentRemoved(IAgent agent)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x117A500", Offset = "0x117A500", VA = "0x117A500")]
	private void Update()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x117A9DC", Offset = "0x117A9DC", VA = "0x117A9DC")]
	private void UpdateActorToPlayerInfo()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x117AF90", Offset = "0x117AF90", VA = "0x117AF90")]
	private void ProcessTargetByScore(Actor actor)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x117B568", Offset = "0x117B568", VA = "0x117B568")]
	private void CalculateCurrentActorTargetScore(bool isValid, float distance, object userData)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x117B6F4", Offset = "0x117B6F4", VA = "0x117B6F4")]
	private void CalculateTargetScore(PriorityTarget actualTarget, Actor actor, bool isValid, float distance)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x117AC30", Offset = "0x117AC30", VA = "0x117AC30")]
	private void GetTargets(Actor actor)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x117BB34", Offset = "0x117BB34", VA = "0x117BB34")]
	private bool IsValidObservation(PriorityTarget target, Actor actor, AttackStateMatrix attackMatrix)
	{
		return default(bool);
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x117B9EC", Offset = "0x117B9EC", VA = "0x117B9EC")]
	private AttackStateMatrix GetAttackMatrix(Actor actor)
	{
		return null;
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x117B96C", Offset = "0x117B96C", VA = "0x117B96C")]
	private float GetScore(TargetInfo targetInfo, Actor actor, float distance)
	{
		return default(float);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x117BCFC", Offset = "0x117BCFC", VA = "0x117BCFC")]
	public ActorTargetData GetTargetData(Actor actor)
	{
		return null;
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x117BD6C", Offset = "0x117BD6C", VA = "0x117BD6C")]
	public void ResetActorTarget(Actor actor, PriorityTarget target)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x117BE8C", Offset = "0x117BE8C", VA = "0x117BE8C")]
	public TargetSelectionManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200004F")]
[CreateAssetMenu(menuName = "Cabin/AI/Attack State Matrix")]
public class AttackStateMatrix : ScriptableObject, ISerializationCallbackReceiver
{
	[Token(Token = "0x2000050")]
	public enum ScoreCategory
	{
		[Token(Token = "0x40001AA")]
		DistanceBias,
		[Token(Token = "0x40001AB")]
		NearThreshold,
		[Token(Token = "0x40001AC")]
		NearBonus,
		[Token(Token = "0x40001AD")]
		AwarenessDistance
	}

	[Serializable]
	[Token(Token = "0x2000051")]
	public class EnemyAttackArray
	{
		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<float> enemyAttackArray;

		[Token(Token = "0x600014F")]
		[Address(RVA = "0x117CE50", Offset = "0x117CE50", VA = "0x117CE50")]
		public EnemyAttackArray()
		{
		}
	}

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private List<EnemyAttackArray> setValues;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Dictionary<ScoreCategory, Dictionary<PriorityTargetType, float>> scoreMap;

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x117C190", Offset = "0x117C190", VA = "0x117C190", Slot = "5")]
	private void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x117C9C8", Offset = "0x117C9C8", VA = "0x117C9C8", Slot = "4")]
	private void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x117C1B4", Offset = "0x117C1B4", VA = "0x117C1B4")]
	private Dictionary<ScoreCategory, Dictionary<PriorityTargetType, float>> DeserializeMap(List<EnemyAttackArray> data)
	{
		return null;
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x117C9EC", Offset = "0x117C9EC", VA = "0x117C9EC")]
	private List<EnemyAttackArray> SerializeMap(Dictionary<ScoreCategory, Dictionary<PriorityTargetType, float>> map)
	{
		return null;
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x117CED8", Offset = "0x117CED8", VA = "0x117CED8")]
	private float GetScore(ScoreCategory category, PriorityTargetType priorityTargetType)
	{
		return default(float);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x117BBAC", Offset = "0x117BBAC", VA = "0x117BBAC")]
	public float GetScoreBias(PriorityTargetType priorityTargetType)
	{
		return default(float);
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x117BAB8", Offset = "0x117BAB8", VA = "0x117BAB8")]
	public float GetAwarenessDistance(PriorityTargetType priorityTargetType)
	{
		return default(float);
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x117BBB8", Offset = "0x117BBB8", VA = "0x117BBB8")]
	public float GetScoreByDistance(PriorityTargetType priorityTargetType, float distance)
	{
		return default(float);
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x117CFDC", Offset = "0x117CFDC", VA = "0x117CFDC")]
	public AttackStateMatrix()
	{
	}
}
[Token(Token = "0x2000052")]
[CreateAssetMenu(menuName = "Cabin/AI/Attack Properties")]
public class ActorAttackChanceProperties : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000053")]
	public class AttackChance
	{
		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string stateName;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int hashName;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float chance;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public Limb limb;

		[Token(Token = "0x1700001B")]
		public float normalizedChance
		{
			[Token(Token = "0x6000154")]
			[Address(RVA = "0x117D7A4", Offset = "0x117D7A4", VA = "0x117D7A4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000155")]
			[Address(RVA = "0x117D7AC", Offset = "0x117D7AC", VA = "0x117D7AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x117D7B4", Offset = "0x117D7B4", VA = "0x117D7B4")]
		public AttackChance(string name, int hash)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000054")]
	public class BlockedAnimationData
	{
		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string stateName;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int hashName;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public int attackHashName;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public float interpolationLength;

		[Token(Token = "0x40001BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public float maxOffset;

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x117D7F0", Offset = "0x117D7F0", VA = "0x117D7F0")]
		public BlockedAnimationData(string name, int hash)
		{
		}
	}

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RuntimeAnimatorController animator;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AttackChance[] chanceList;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BlockedAnimationData[] blockStateData;

	[NonSerialized]
	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<Limb, List<AttackChance>> m_attackChanceMap;

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x117D064", Offset = "0x117D064", VA = "0x117D064")]
	public void Initialise()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x117D4B4", Offset = "0x117D4B4", VA = "0x117D4B4")]
	public string GetAttackByValue(float value, bool allowLeft, bool allowRight)
	{
		return null;
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x117D6CC", Offset = "0x117D6CC", VA = "0x117D6CC")]
	public BlockedAnimationData GetBlockByAttack(string attack)
	{
		return null;
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x117D79C", Offset = "0x117D79C", VA = "0x117D79C")]
	public ActorAttackChanceProperties()
	{
	}
}
[Token(Token = "0x2000056")]
public interface IEnemyType
{
	[Token(Token = "0x1700001C")]
	EnemyType enemyType
	{
		[Token(Token = "0x600015B")]
		get;
	}
}
[Token(Token = "0x2000057")]
public class AttackZones
{
	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, List<IAttackZone>> m_attackZones;

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x117D880", Offset = "0x117D880", VA = "0x117D880")]
	static AttackZones()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x117D918", Offset = "0x117D918", VA = "0x117D918")]
	public static void Add(IAttackZone zone)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x117DB84", Offset = "0x117DB84", VA = "0x117DB84")]
	public static void Remove(IAttackZone zone)
	{
	}

	[Token(Token = "0x600015F")]
	public static T Get<T>(string id) where T : IAttackZone
	{
		return (T)null;
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x117DCB8", Offset = "0x117DCB8", VA = "0x117DCB8")]
	public static IAttackZone GetClosestWithId(Vector3 position, string id)
	{
		return null;
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x117DFD0", Offset = "0x117DFD0", VA = "0x117DFD0")]
	public AttackZones()
	{
	}
}
[Token(Token = "0x2000059")]
public class DetachWearable : Wearable
{
	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("References")]
	[FormerlySerializedAs("HeadGearPrefab")]
	public GameObject WearablePrefab;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Header("Settings")]
	private float m_maxDetachForce;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	private float m_minDetachForce;

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x117DFD8", Offset = "0x117DFD8", VA = "0x117DFD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x117E0C4", Offset = "0x117E0C4", VA = "0x117E0C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x117E1B0", Offset = "0x117E1B0", VA = "0x117E1B0")]
	private void ActionOnDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x117E208", Offset = "0x117E208", VA = "0x117E208")]
	public GameObject DoDetachWearable()
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x117E1B4", Offset = "0x117E1B4", VA = "0x117E1B4")]
	public GameObject DetachWearableWithRandomVelocity()
	{
		return null;
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x117E4A0", Offset = "0x117E4A0", VA = "0x117E4A0")]
	public GameObject DetachWearableWithVelocity(Vector3 velocity)
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x117E578", Offset = "0x117E578", VA = "0x117E578")]
	public DetachWearable()
	{
	}
}
[Token(Token = "0x200005A")]
public interface IAttackZone
{
	[Token(Token = "0x1700001D")]
	string id
	{
		[Token(Token = "0x600016B")]
		get;
	}

	[Token(Token = "0x1700001E")]
	Vector3 position
	{
		[Token(Token = "0x600016C")]
		get;
	}

	[Token(Token = "0x1700001F")]
	bool strictlyConstrainAttackPositionsToZone
	{
		[Token(Token = "0x600016D")]
		get;
	}

	[Token(Token = "0x600016E")]
	bool IsInside(Vector3 pos);

	[Token(Token = "0x600016F")]
	Vector3 CalculatePosition(Vector3 targetPos, Vector3 currentPos, float minAttackDistance, float maxAttackDistance);

	[Token(Token = "0x6000170")]
	Vector3 CalculatePosition(Vector3 targetPos, Vector3 attackDirection, Vector3 currentPos, float minAttackDistance, float maxAttackDistance);
}
[Token(Token = "0x200005B")]
public class RadialAttackZone : CachedMonoBehaviour, IAttackZone
{
	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_id;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float m_innerRadius;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float m_outerRadius;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool m_strictlyConstrainAttackPositionsToZone;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Color gizmoFillColor;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Color gizmoOutlineColor;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform m_debugPoint;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 m_debugCurrentPos;

	[Token(Token = "0x17000020")]
	private float innerAttackRadius
	{
		[Token(Token = "0x6000171")]
		[Address(RVA = "0x117E58C", Offset = "0x117E58C", VA = "0x117E58C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000021")]
	private float outerAttackRadius
	{
		[Token(Token = "0x6000172")]
		[Address(RVA = "0x117E594", Offset = "0x117E594", VA = "0x117E594")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000022")]
	private float innerAttackRadiusSqr
	{
		[Token(Token = "0x6000173")]
		[Address(RVA = "0x117E59C", Offset = "0x117E59C", VA = "0x117E59C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000023")]
	private float outerAttackRadiusSqr
	{
		[Token(Token = "0x6000174")]
		[Address(RVA = "0x117E5A8", Offset = "0x117E5A8", VA = "0x117E5A8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000024")]
	private Vector3 IAttackZone.position
	{
		[Token(Token = "0x6000175")]
		[Address(RVA = "0x117E5B4", Offset = "0x117E5B4", VA = "0x117E5B4", Slot = "5")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000025")]
	private string IAttackZone.id
	{
		[Token(Token = "0x6000176")]
		[Address(RVA = "0x117E5D4", Offset = "0x117E5D4", VA = "0x117E5D4", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000026")]
	private bool IAttackZone.strictlyConstrainAttackPositionsToZone
	{
		[Token(Token = "0x6000177")]
		[Address(RVA = "0x117E5DC", Offset = "0x117E5DC", VA = "0x117E5DC", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x117E5E4", Offset = "0x117E5E4", VA = "0x117E5E4")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x117E634", Offset = "0x117E634", VA = "0x117E634")]
	private void Awake()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x117E688", Offset = "0x117E688", VA = "0x117E688")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x117E6DC", Offset = "0x117E6DC", VA = "0x117E6DC", Slot = "7")]
	private bool IAttackZone.IsInside(Vector3 pos)
	{
		return default(bool);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x117E758", Offset = "0x117E758", VA = "0x117E758", Slot = "8")]
	public Vector3 CalculatePosition(Vector3 targetPos, Vector3 currentPos, float minAttackDistance, float maxAttackDistance)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x117E8D8", Offset = "0x117E8D8", VA = "0x117E8D8", Slot = "9")]
	public Vector3 CalculatePosition(Vector3 targetPos, Vector3 attackDirection, Vector3 currentPos, float minAttackDistance, float maxAttackDistance)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x117ED88", Offset = "0x117ED88", VA = "0x117ED88")]
	private Vector3[] IntersectionPoints()
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x117ED90", Offset = "0x117ED90", VA = "0x117ED90")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x117F350", Offset = "0x117F350", VA = "0x117F350")]
	public RadialAttackZone()
	{
	}
}
[Token(Token = "0x200005C")]
public class SpitterZombieManager : SceneSingleton<SpitterZombieManager>, ITokenProvider
{
	[Token(Token = "0x200005D")]
	private enum State
	{
		[Token(Token = "0x40001DF")]
		Idle,
		[Token(Token = "0x40001E0")]
		CalculatePlayerPositions,
		[Token(Token = "0x40001E1")]
		CalculateSpitterPositions,
		[Token(Token = "0x40001E2")]
		Complete
	}

	[Token(Token = "0x200005E")]
	public class PlayerPositionData
	{
		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isValid;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 playerPos;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sector playerSector;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 visiblePosition;

		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Sector bestSector;

		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Portal bestPortal;

		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 portalNormal;

		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<IAttackPositionProvider> publicAttackPositions;

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x117FE04", Offset = "0x117FE04", VA = "0x117FE04")]
		public PlayerPositionData()
		{
		}
	}

	[Token(Token = "0x200005F")]
	public class SpitterAttackData
	{
		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isValid;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool attackingPortal;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool canGrabCover;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 projectileTargetPosition;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<IAttackPositionProvider> attackPositionProviders;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 defaultAttackPosition;

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IAttackPositionProvider attackFrom;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 attackPosition;

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x1180160", Offset = "0x1180160", VA = "0x1180160")]
		public SpitterAttackData()
		{
		}
	}

	[Token(Token = "0x2000060")]
	public class SpitToken : TokenManager.TokenKey
	{
		[Token(Token = "0x600019C")]
		[Address(RVA = "0x117F954", Offset = "0x117F954", VA = "0x117F954")]
		public SpitToken(ITokenProvider provider, TokenManager.TokenType type)
		{
		}
	}

	[Token(Token = "0x2000061")]
	[CompilerGenerated]
	private sealed class <CalculatePlayerPositionData>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpitterZombieManager <>4__this;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callback;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<PlayerAgent>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000028")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0x11810F8", Offset = "0x11810F8", VA = "0x11810F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0x1181140", Offset = "0x1181140", VA = "0x1181140", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600019D")]
		[Address(RVA = "0x11807E4", Offset = "0x11807E4", VA = "0x11807E4")]
		[DebuggerHidden]
		public <CalculatePlayerPositionData>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x1180DC0", Offset = "0x1180DC0", VA = "0x1180DC0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600019F")]
		[Address(RVA = "0x1180DDC", Offset = "0x1180DDC", VA = "0x1180DDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x11810A8", Offset = "0x11810A8", VA = "0x11810A8")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x1181100", Offset = "0x1181100", VA = "0x1181100", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000062")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass40_0
	{
		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerPositionData playerData;

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x1181148", Offset = "0x1181148", VA = "0x1181148")]
		public <>c__DisplayClass40_0()
		{
		}

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x1181150", Offset = "0x1181150", VA = "0x1181150")]
		internal bool <CalculatePlayerPositionData>b__0(IAttackPositionProvider provider, Vector3 direction)
		{
			return default(bool);
		}

		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x1181280", Offset = "0x1181280", VA = "0x1181280")]
		internal void <CalculatePlayerPositionData>b__1(List<IAttackPositionProvider> result)
		{
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x118129C", Offset = "0x118129C", VA = "0x118129C")]
		internal void <CalculatePlayerPositionData>b__2(List<IAttackPositionProvider> result)
		{
		}
	}

	[Token(Token = "0x2000063")]
	[CompilerGenerated]
	private sealed class <CalculatePlayerPositionData>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerPositionData playerData;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerAgent playerAgent;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpitterZombieManager <>4__this;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private <>c__DisplayClass40_0 <>8__1;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 <playerPos>5__2;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <spitRadius>5__3;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Portal <bestPortal>5__4;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Sector <bestSector>5__5;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 <visiblePosition>5__6;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int <count>5__7;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float <playerDistToNearestPortal>5__8;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 <targetPos>5__9;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int <i>5__10;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int <numPortals>5__11;

		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int <k>5__12;

		[Token(Token = "0x1700002A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001AB")]
			[Address(RVA = "0x1181CB4", Offset = "0x1181CB4", VA = "0x1181CB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001AD")]
			[Address(RVA = "0x1181CFC", Offset = "0x1181CFC", VA = "0x1181CFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x11808B0", Offset = "0x11808B0", VA = "0x11808B0")]
		[DebuggerHidden]
		public <CalculatePlayerPositionData>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x11812B8", Offset = "0x11812B8", VA = "0x11812B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x11812BC", Offset = "0x11812BC", VA = "0x11812BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001AC")]
		[Address(RVA = "0x1181CBC", Offset = "0x1181CBC", VA = "0x1181CBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000064")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass41_0
	{
		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool finished;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SpitterZombie> zombies;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpitterZombieManager <>4__this;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<IAttackPositionProvider> attackPositionProviders;

		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x1181D04", Offset = "0x1181D04", VA = "0x1181D04")]
		public <>c__DisplayClass41_0()
		{
		}

		[Token(Token = "0x60001AF")]
		[Address(RVA = "0x1181D0C", Offset = "0x1181D0C", VA = "0x1181D0C")]
		internal void <CalculateSpitterPositions>b__1()
		{
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0x1181D18", Offset = "0x1181D18", VA = "0x1181D18")]
		internal bool <CalculateSpitterPositions>b__2(int from, int dest)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000066")]
	[CompilerGenerated]
	private sealed class <CalculateSpitterPositions>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpitterZombieManager <>4__this;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass41_0 <>8__1;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action callback;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001B9")]
			[Address(RVA = "0x1182E2C", Offset = "0x1182E2C", VA = "0x1182E2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001BB")]
			[Address(RVA = "0x1182E74", Offset = "0x1182E74", VA = "0x1182E74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x11821A4", Offset = "0x11821A4", VA = "0x11821A4")]
		[DebuggerHidden]
		public <CalculateSpitterPositions>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x11821CC", Offset = "0x11821CC", VA = "0x11821CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x11821D0", Offset = "0x11821D0", VA = "0x11821D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x1182E34", Offset = "0x1182E34", VA = "0x1182E34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000067")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass43_0
	{
		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<IAttackPositionProvider> attackPositionProviders;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpitterZombieManager <>4__this;

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x1182E7C", Offset = "0x1182E7C", VA = "0x1182E7C")]
		public <>c__DisplayClass43_0()
		{
		}
	}

	[Token(Token = "0x2000068")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass43_1
	{
		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpitterZombie spitter;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpitterAttackData attackData;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public <>c__DisplayClass43_0 CS$<>8__locals1;

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x11831B4", Offset = "0x11831B4", VA = "0x11831B4")]
		public <>c__DisplayClass43_1()
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x11831BC", Offset = "0x11831BC", VA = "0x11831BC")]
		internal void <FindAttackPositionCandidates>b__2(List<IAttackPositionProvider> result)
		{
		}
	}

	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass43_2
	{
		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<IAttackPositionProvider> attackPositionsToUse;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass43_1 CS$<>8__locals2;

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x11831E0", Offset = "0x11831E0", VA = "0x11831E0")]
		public <>c__DisplayClass43_2()
		{
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x11831E8", Offset = "0x11831E8", VA = "0x11831E8")]
		internal void <FindAttackPositionCandidates>b__1(List<IAttackPositionProvider> result)
		{
		}
	}

	[Token(Token = "0x200006A")]
	[CompilerGenerated]
	private sealed class <FindAttackPositionCandidates>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<IAttackPositionProvider> attackPositionProviders;

		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpitterZombieManager <>4__this;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass43_0 <>8__1;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<SpitterZombie> zombies;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private <>c__DisplayClass43_2 <>8__2;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <i>5__2;

		[Token(Token = "0x1700002E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C5")]
			[Address(RVA = "0x1183F48", Offset = "0x1183F48", VA = "0x1183F48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001C7")]
			[Address(RVA = "0x1183F90", Offset = "0x1183F90", VA = "0x1183F90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x11835FC", Offset = "0x11835FC", VA = "0x11835FC")]
		[DebuggerHidden]
		public <FindAttackPositionCandidates>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x1183624", Offset = "0x1183624", VA = "0x1183624", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x1183628", Offset = "0x1183628", VA = "0x1183628", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x1183F50", Offset = "0x1183F50", VA = "0x1183F50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001CC")]
	private const float c_spitterSeparationDistance = 0.7f;

	[Token(Token = "0x40001CD")]
	private const float c_spitterCoverGrabHeight = 1.6f;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Attack positions are selected within this radius of the spitter's desired position")]
	private float m_attackPositionCaptureRadius;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[UnityEngine.Tooltip("Spitter can choose 'no cover' attack positions if further than this distance from target player")]
	private float m_seekCoverRadius;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("Portal target position random offset in x,y-plane of portal")]
	private float m_portalPosRandomLimit;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("Angular threshold for targeting a portal.")]
	[Range(10f, 80f)]
	[SerializeField]
	private float m_maxPortalAttackAngle;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SpitterProperties m_spitterProperties;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<PlayerAgent, PlayerPositionData> m_playerPositionData;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Dictionary<SpitterZombie, SpitterAttackData> m_spitters;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SimpleFSM<SpitterZombieManager, State> m_fsm;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private PairedDistanceCalculator m_calculator;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_stepComplete;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_timer;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float m_maxPortalAttackDotProduct;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Dictionary<SpitterAttackPosition, Vector3> m_attackGroundPositions;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Sector[] m_sectors;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Portal[] m_portals;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private SpitToken m_spitToken;

	[Token(Token = "0x17000027")]
	private string ITokenProvider.DisplayName
	{
		[Token(Token = "0x6000183")]
		[Address(RVA = "0x117F808", Offset = "0x117F808", VA = "0x117F808", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x117F3F8", Offset = "0x117F3F8", VA = "0x117F3F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x117F700", Offset = "0x117F700", VA = "0x117F700", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x117F848", Offset = "0x117F848", VA = "0x117F848", Slot = "7")]
	private void ITokenProvider.TokenTaken(IToken token)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x117F84C", Offset = "0x117F84C", VA = "0x117F84C", Slot = "8")]
	private void ITokenProvider.TokenReturned(IToken token)
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x117F850", Offset = "0x117F850", VA = "0x117F850")]
	private void Start()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x117F95C", Offset = "0x117F95C", VA = "0x117F95C")]
	private void HandleLevelReset()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x117FA74", Offset = "0x117FA74", VA = "0x117FA74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x117FE0C", Offset = "0x117FE0C", VA = "0x117FE0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x117FFFC", Offset = "0x117FFFC", VA = "0x117FFFC")]
	private void HandleAgentRegistered(IAgent agent)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x1180168", Offset = "0x1180168", VA = "0x1180168")]
	private void HandleAgentDeregistered(IAgent agent)
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x11802A0", Offset = "0x11802A0", VA = "0x11802A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x11802F0", Offset = "0x11802F0", VA = "0x11802F0")]
	private void UpdateFSM(State state, StateCall call)
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x1180614", Offset = "0x1180614", VA = "0x1180614")]
	public PlayerPositionData GetPlayerData(PlayerAgent key)
	{
		return null;
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x1180684", Offset = "0x1180684", VA = "0x1180684")]
	public Sector GetPlayerSector(PlayerAgent key)
	{
		return null;
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x1180750", Offset = "0x1180750", VA = "0x1180750")]
	public SpitterAttackData GetSpitterAttackData(SpitterZombie key)
	{
		return null;
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x11804F4", Offset = "0x11804F4", VA = "0x11804F4")]
	[IteratorStateMachine(typeof(<CalculatePlayerPositionData>d__39))]
	private IEnumerator CalculatePlayerPositionData(Action callback)
	{
		return null;
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x118080C", Offset = "0x118080C", VA = "0x118080C")]
	[IteratorStateMachine(typeof(<CalculatePlayerPositionData>d__40))]
	private IEnumerator CalculatePlayerPositionData(PlayerAgent playerAgent, PlayerPositionData playerData)
	{
		return null;
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x1180584", Offset = "0x1180584", VA = "0x1180584")]
	[IteratorStateMachine(typeof(<CalculateSpitterPositions>d__41))]
	private IEnumerator CalculateSpitterPositions(Action callback)
	{
		return null;
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x11808D8", Offset = "0x11808D8", VA = "0x11808D8")]
	private bool GetSpitterAttackPositionGroundPos(IAttackPositionProvider attackPositionProvider, out Vector3 attackPositionRoot)
	{
		return default(bool);
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x1180C30", Offset = "0x1180C30", VA = "0x1180C30")]
	[IteratorStateMachine(typeof(<FindAttackPositionCandidates>d__43))]
	private IEnumerator FindAttackPositionCandidates(List<SpitterZombie> zombies, List<IAttackPositionProvider> attackPositionProviders)
	{
		return null;
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x1180CD4", Offset = "0x1180CD4", VA = "0x1180CD4", Slot = "6")]
	private ITokenKey ITokenProvider.GetTokenKey(TokenManager.TokenType tokenType)
	{
		return null;
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x1180CEC", Offset = "0x1180CEC", VA = "0x1180CEC")]
	public SpitterZombieManager()
	{
	}
}
[Token(Token = "0x200006B")]
public class Wearable : CachedMonoBehaviour, IPoolable
{
	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform m_defaultParent;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform m_ragdollParent;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_localPosition;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion m_localRotation;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_localScale;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Renderer[] m_renderers;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected float m_permutation;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Dissolve m_dissolve;

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x1183F98", Offset = "0x1183F98", VA = "0x1183F98")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x118402C", Offset = "0x118402C", VA = "0x118402C")]
	public void SetParentTransforms(Transform defaultTransform, Transform ragdollTransform)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x11840C4", Offset = "0x11840C4", VA = "0x11840C4")]
	public void SetPermutation(float permutation)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x11840CC", Offset = "0x11840CC", VA = "0x11840CC")]
	public void ParentToRagdoll()
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x11841D0", Offset = "0x11841D0", VA = "0x11841D0")]
	public void ParentToDefault()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x11840D4", Offset = "0x11840D4", VA = "0x11840D4")]
	private void ParentTo(Transform parent)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x11841D8", Offset = "0x11841D8", VA = "0x11841D8", Slot = "5")]
	public void OnAllocFromPool()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x11841DC", Offset = "0x11841DC", VA = "0x11841DC", Slot = "6")]
	public void OnReturnToPool()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x11841E0", Offset = "0x11841E0", VA = "0x11841E0", Slot = "7")]
	public void OnAddedToPool()
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x11841E8", Offset = "0x11841E8", VA = "0x11841E8")]
	public Wearable()
	{
	}

	[SpecialName]
	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x11841F0", Offset = "0x11841F0", VA = "0x11841F0", Slot = "4")]
	private GameObject PT.IPoolable.get_gameObject()
	{
		return null;
	}
}
[Token(Token = "0x200006C")]
public interface IAgentChargeable
{
	[Token(Token = "0x17000030")]
	bool IsCharging
	{
		[Token(Token = "0x60001D5")]
		get;
	}

	[Token(Token = "0x60001D3")]
	bool IsChargeEndPointValid(Vector3 endPoint);

	[Token(Token = "0x60001D4")]
	void PerformCharge(Vector3 targetPoint, Vector3 endPoint, float chargeSpeedScale, Action activeChargeBeginCallback, Action activeChargeEndCallback);
}
[Token(Token = "0x200006D")]
public interface IAgentDodgeable
{
	[Token(Token = "0x17000031")]
	bool CanDodge
	{
		[Token(Token = "0x60001D6")]
		get;
	}

	[Token(Token = "0x17000032")]
	bool IsFinished
	{
		[Token(Token = "0x60001D8")]
		get;
	}

	[Token(Token = "0x60001D7")]
	bool Dodge(Vector3 destination);
}
[Token(Token = "0x200006E")]
public interface IAgentMelee : IMeleeStrength
{
	[Token(Token = "0x17000033")]
	bool Blocked
	{
		[Token(Token = "0x60001DC")]
		get;
		[Token(Token = "0x60001DD")]
		set;
	}

	[Token(Token = "0x17000034")]
	bool HasCombos
	{
		[Token(Token = "0x60001DE")]
		get;
	}

	[Token(Token = "0x17000035")]
	float MinRange
	{
		[Token(Token = "0x60001DF")]
		get;
	}

	[Token(Token = "0x17000036")]
	float MaxRange
	{
		[Token(Token = "0x60001E0")]
		get;
	}

	[Token(Token = "0x17000037")]
	bool IsFinished
	{
		[Token(Token = "0x60001E1")]
		get;
	}

	[Token(Token = "0x17000038")]
	new float NormalizedDamageStrength
	{
		[Token(Token = "0x60001E2")]
		get;
	}

	[Token(Token = "0x17000039")]
	bool AllowLongRange
	{
		[Token(Token = "0x60001E3")]
		set;
	}

	[Token(Token = "0x60001D9")]
	bool InMeleeRange(Vector3 target, bool comboMelee);

	[Token(Token = "0x60001DA")]
	bool IsReadyToMelee();

	[Token(Token = "0x60001DB")]
	void PerformMelee(Vector3 target, bool comboMelee);
}
[Token(Token = "0x200006F")]
public interface IIAgentStunnable
{
	[Token(Token = "0x1700003A")]
	bool IsStunned
	{
		[Token(Token = "0x60001E6")]
		get;
	}

	[Token(Token = "0x60001E4")]
	void BeginStun(float stunDuration);

	[Token(Token = "0x60001E5")]
	void EndStun();
}
[Token(Token = "0x2000070")]
public interface IManualAnimatable
{
	[Token(Token = "0x1700003B")]
	bool IsPlayingAnimation
	{
		[Token(Token = "0x60001E8")]
		get;
	}

	[Token(Token = "0x60001E7")]
	void PlayAnimation(string[] clipTags);
}
[Token(Token = "0x2000071")]
public interface IMeleeStrength
{
	[Token(Token = "0x1700003C")]
	float NormalizedDamageStrength
	{
		[Token(Token = "0x60001E9")]
		get;
	}
}
[Token(Token = "0x2000072")]
public enum AgentEmotion
{
	[Token(Token = "0x400022F")]
	Relaxed = 0,
	[Token(Token = "0x4000230")]
	CombatEngaged = 1,
	[Token(Token = "0x4000231")]
	CombatReloading = 4,
	[Token(Token = "0x4000232")]
	Panicked = 2
}
[Token(Token = "0x2000073")]
[CreateAssetMenu(menuName = "Battle Sister/AI/CombatRole")]
public class CombatRole : ScriptableObject
{
	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x11841F8", Offset = "0x11841F8", VA = "0x11841F8")]
	public CombatRole()
	{
	}
}
[Serializable]
[Token(Token = "0x2000074")]
public class ItemDrop
{
	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SpawnableItem item;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxItemCount;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool removeBeforeNextWave;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EnemyItemDropChance[] enemyChance;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_maxEnemyCount;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int m_enemyCount;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_itemCount;

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x1184200", Offset = "0x1184200", VA = "0x1184200")]
	public void Init()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x118420C", Offset = "0x118420C", VA = "0x118420C")]
	public bool IsEnemyTypeAllowedToDrop(EnemyType enemyType)
	{
		return default(bool);
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x11842FC", Offset = "0x11842FC", VA = "0x11842FC")]
	public bool IncreaseMaxCount(EnemyType enemyType, int count)
	{
		return default(bool);
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x1184338", Offset = "0x1184338", VA = "0x1184338")]
	public bool IncreaseEnemyCount(EnemyType enemyType)
	{
		return default(bool);
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x1184368", Offset = "0x1184368", VA = "0x1184368")]
	public bool CheckEnemiesPerItem()
	{
		return default(bool);
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x1184388", Offset = "0x1184388", VA = "0x1184388")]
	public void IncreaseItemCount()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x1184398", Offset = "0x1184398", VA = "0x1184398")]
	public bool CanWeSpawnItem()
	{
		return default(bool);
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x11843AC", Offset = "0x11843AC", VA = "0x11843AC")]
	public ItemDrop()
	{
	}
}
[Serializable]
[Token(Token = "0x2000075")]
public class EnemyItemDropChance
{
	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EnemyType enemyType;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float probability;

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x11843BC", Offset = "0x11843BC", VA = "0x11843BC")]
	public EnemyItemDropChance()
	{
	}
}
[Token(Token = "0x2000076")]
[CreateAssetMenu(fileName = "MP_GlobalEnemyConfig", menuName = "Battle Sister/Enemies/Global Config")]
public class Multiplayer_GlobalEnemyConfig : ScriptableObject
{
	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Inactivity")]
	[SerializeField]
	[UnityEngine.Tooltip("Check for distance inactivity every X frames")]
	private int m_distanceCheckInterval;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[UnityEngine.Tooltip("Distance in meters the enemy needs to have moved every check interval so we consider it active")]
	private float m_significantMovementDistanceThreshold;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Amount of time in seconds that need to pass before the enemy gets killed for inactivity")]
	private float m_inactiveTimeThreshold;

	[Token(Token = "0x1700003D")]
	public int DistanceCheckInterval
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x11843CC", Offset = "0x11843CC", VA = "0x11843CC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700003E")]
	public float SignificantMovementDistanceThreshold
	{
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x11843D4", Offset = "0x11843D4", VA = "0x11843D4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700003F")]
	public float InactiveTimeThreshold
	{
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x11843DC", Offset = "0x11843DC", VA = "0x11843DC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x11843E4", Offset = "0x11843E4", VA = "0x11843E4")]
	public Multiplayer_GlobalEnemyConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000077")]
public class NavMeshIsland
{
	[Serializable]
	[Token(Token = "0x2000078")]
	public struct TriangleData : ISpatialHashPoint
	{
		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private int m_islandIndex;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[FormerlySerializedAs("m_index")]
		[FormerlySerializedAs("index")]
		[SerializeField]
		private int m_triangleIndex;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private int m_agentTypeId;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[FormerlySerializedAs("centerPoint")]
		[SerializeField]
		private Vector3 m_centerPoint;

		[Token(Token = "0x17000044")]
		public int IslandIndex
		{
			[Token(Token = "0x6000206")]
			[Address(RVA = "0x1184FBC", Offset = "0x1184FBC", VA = "0x1184FBC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000045")]
		public int TriangleIndex
		{
			[Token(Token = "0x6000207")]
			[Address(RVA = "0x1184FC4", Offset = "0x1184FC4", VA = "0x1184FC4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000046")]
		public int AgentTypeId
		{
			[Token(Token = "0x6000208")]
			[Address(RVA = "0x1184FCC", Offset = "0x1184FCC", VA = "0x1184FCC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000047")]
		public Vector3 pointPosition
		{
			[Token(Token = "0x6000209")]
			[Address(RVA = "0x1184FD4", Offset = "0x1184FD4", VA = "0x1184FD4", Slot = "4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0x1184BD4", Offset = "0x1184BD4", VA = "0x1184BD4")]
		public TriangleData(int islandIndex, int triangleIndex, int agentTypeId, Vector3 centerPoint)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000079")]
	public struct TriangulationData
	{
		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int[] indices;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3[] vertices;
	}

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private List<TriangleData> m_memberTriangles;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<int> m_linkedIslandIds;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int m_agentTypeId;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int debugTriangleDataIndex;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<int> m_runtimeLinkedIslandIds;

	[Token(Token = "0x17000040")]
	public int AgentTypeId
	{
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x1184400", Offset = "0x1184400", VA = "0x1184400")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000041")]
	public Vector3? FirstTrianglePoint
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x1184408", Offset = "0x1184408", VA = "0x1184408")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000042")]
	public List<TriangleData> memberTrianges
	{
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x11844B8", Offset = "0x11844B8", VA = "0x11844B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000043")]
	public int numDynamicLinks
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x11844C0", Offset = "0x11844C0", VA = "0x11844C0")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x11844C8", Offset = "0x11844C8", VA = "0x11844C8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x11844D0", Offset = "0x11844D0", VA = "0x11844D0")]
	public NavMeshIsland(int agentTypeId)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x11845EC", Offset = "0x11845EC", VA = "0x11845EC")]
	public bool HasTriangle(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x11847B0", Offset = "0x11847B0", VA = "0x11847B0")]
	public bool HasVertex(Vector3 vertex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x11849CC", Offset = "0x11849CC", VA = "0x11849CC")]
	public void AddTriangle(int islandIndex, int triangleIndex, Vector3 centerPoint)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x1184BE8", Offset = "0x1184BE8", VA = "0x1184BE8")]
	public void PlacePointsIntoSpatialHashGrid(ref SpatialHashGrid<TriangleData> grid)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x1184D98", Offset = "0x1184D98", VA = "0x1184D98")]
	public bool HasLinkToIsland(int islandIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x1184E1C", Offset = "0x1184E1C", VA = "0x1184E1C")]
	public void DrawGizmos(Color drawCol, int islandIndex, bool drawLabels)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x1184FB8", Offset = "0x1184FB8", VA = "0x1184FB8")]
	public void DrawMesh(Color drawCol, List<TriangulationData> triangulationData)
	{
	}
}
[Token(Token = "0x200007B")]
public class NavMeshIslandDynamicLinker : CachedMonoBehaviour
{
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("m_sideA & m_sideB vectors only need to be defined for NavMeshObstacles. For NavMeshLinks, the link start and end points will be used.")]
	private Vector3 m_sideA;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private Vector3 m_sideB;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private NavMeshLink m_link;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private NavMeshObstacle m_obstacle;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Matrix4x4 m_localToWorld;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int m_agentId;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private NavMeshIsland m_islandA;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private NavMeshIsland m_islandB;

	[Token(Token = "0x17000048")]
	public Vector3 localPointA
	{
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x1184FF4", Offset = "0x1184FF4", VA = "0x1184FF4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000049")]
	public Vector3 localPointB
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0x118508C", Offset = "0x118508C", VA = "0x118508C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700004A")]
	public Matrix4x4 localToWorld
	{
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x1185124", Offset = "0x1185124", VA = "0x1185124")]
		get
		{
			return default(Matrix4x4);
		}
	}

	[Token(Token = "0x1700004B")]
	public Vector3 worldPointA
	{
		[Token(Token = "0x600020F")]
		[Address(RVA = "0x1185140", Offset = "0x1185140", VA = "0x1185140")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700004C")]
	public Vector3 worldPointB
	{
		[Token(Token = "0x6000210")]
		[Address(RVA = "0x118515C", Offset = "0x118515C", VA = "0x118515C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700004D")]
	public NavMeshLink link
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0x1185178", Offset = "0x1185178", VA = "0x1185178")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004E")]
	public NavMeshObstacle obstacle
	{
		[Token(Token = "0x6000212")]
		[Address(RVA = "0x1185180", Offset = "0x1185180", VA = "0x1185180")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004F")]
	public NavMeshIsland islandA
	{
		[Token(Token = "0x6000213")]
		[Address(RVA = "0x1185188", Offset = "0x1185188", VA = "0x1185188")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000050")]
	public NavMeshIsland islandB
	{
		[Token(Token = "0x6000214")]
		[Address(RVA = "0x1185190", Offset = "0x1185190", VA = "0x1185190")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000051")]
	public bool bidirectional
	{
		[Token(Token = "0x6000215")]
		[Address(RVA = "0x1185198", Offset = "0x1185198", VA = "0x1185198")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000052")]
	public bool isJoining
	{
		[Token(Token = "0x6000216")]
		[Address(RVA = "0x1185238", Offset = "0x1185238", VA = "0x1185238")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x11852C0", Offset = "0x11852C0", VA = "0x11852C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x11852C4", Offset = "0x11852C4", VA = "0x11852C4")]
	public void Initialise()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x11854C0", Offset = "0x11854C0", VA = "0x11854C0")]
	public void SetIslands(NavMeshIsland islandA, NavMeshIsland islandB, int agentId)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x11854FC", Offset = "0x11854FC", VA = "0x11854FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x1185898", Offset = "0x1185898", VA = "0x1185898")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x11859C4", Offset = "0x11859C4", VA = "0x11859C4")]
	public NavMeshIslandDynamicLinker()
	{
	}
}
[Token(Token = "0x200007C")]
public class NavMeshIslandMarkup : SceneSingleton<NavMeshIslandMarkup>
{
	[Token(Token = "0x200007D")]
	public class AgentIdIslandData
	{
		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int agentTypeId;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NativeArray<int> reachbilityMatrix;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<NavMeshIsland> islands;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NativeHashMap<PolygonId, int> polygonIdToIslandMap;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<NavMeshIslandDynamicLinker> dynamicLinks;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private NativeArray<FloydWarshallJobs.Edge> nativeEdges;

		[Token(Token = "0x17000054")]
		public int numIslands
		{
			[Token(Token = "0x600022F")]
			[Address(RVA = "0x1188074", Offset = "0x1188074", VA = "0x1188074")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x11860D0", Offset = "0x11860D0", VA = "0x11860D0")]
		public AgentIdIslandData()
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x11879E4", Offset = "0x11879E4", VA = "0x11879E4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x11871B4", Offset = "0x11871B4", VA = "0x11871B4")]
		public JobHandle CalculateInitialReachabilityMatrix()
		{
			return default(JobHandle);
		}
	}

	[Token(Token = "0x200007E")]
	private struct IslandLinkChange
	{
		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int islandA;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int islandB;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AgentIdIslandData data;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool join;
	}

	[Token(Token = "0x2000080")]
	[CompilerGenerated]
	private sealed class <GetIslandsForAgentType>d__31 : IEnumerable<NavMeshIsland>, IEnumerable, IEnumerator<NavMeshIsland>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NavMeshIsland <>2__current;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NavMeshIslandMarkup <>4__this;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int agentTypeId;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int <>3__agentTypeId;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<NavMeshIsland>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000055")]
		private NavMeshIsland System.Collections.Generic.IEnumerator<NavMeshIsland>.Current
		{
			[Token(Token = "0x600023C")]
			[Address(RVA = "0x118839C", Offset = "0x118839C", VA = "0x118839C", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600023E")]
			[Address(RVA = "0x11883E4", Offset = "0x11883E4", VA = "0x11883E4", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x1187B08", Offset = "0x1187B08", VA = "0x1187B08")]
		[DebuggerHidden]
		public <GetIslandsForAgentType>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x1188168", Offset = "0x1188168", VA = "0x1188168", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x1188184", Offset = "0x1188184", VA = "0x1188184", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x118834C", Offset = "0x118834C", VA = "0x118834C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x11883A4", Offset = "0x11883A4", VA = "0x11883A4", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x11883EC", Offset = "0x11883EC", VA = "0x11883EC", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<NavMeshIsland> System.Collections.Generic.IEnumerable<NavMeshIsland>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x11884A0", Offset = "0x11884A0", VA = "0x11884A0", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000081")]
	[CompilerGenerated]
	private sealed class <get_AllIslands>d__33 : IEnumerable<NavMeshIsland>, IEnumerable, IEnumerator<NavMeshIsland>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NavMeshIsland <>2__current;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NavMeshIslandMarkup <>4__this;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<NavMeshIsland>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000057")]
		private NavMeshIsland System.Collections.Generic.IEnumerator<NavMeshIsland>.Current
		{
			[Token(Token = "0x6000245")]
			[Address(RVA = "0x11886B4", Offset = "0x11886B4", VA = "0x11886B4", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000247")]
			[Address(RVA = "0x11886FC", Offset = "0x11886FC", VA = "0x11886FC", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x1187BC0", Offset = "0x1187BC0", VA = "0x1187BC0")]
		[DebuggerHidden]
		public <get_AllIslands>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x11884A4", Offset = "0x11884A4", VA = "0x11884A4", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x11884C0", Offset = "0x11884C0", VA = "0x11884C0", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x1188664", Offset = "0x1188664", VA = "0x1188664")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x11886BC", Offset = "0x11886BC", VA = "0x11886BC", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0x1188704", Offset = "0x1188704", VA = "0x1188704", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<NavMeshIsland> System.Collections.Generic.IEnumerable<NavMeshIsland>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x11887B0", Offset = "0x11887B0", VA = "0x11887B0", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<NavMeshIsland> m_navigationIslands;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SpatialHashGrid<NavMeshIsland.TriangleData> m_spatialHashGrid;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Range(1f, 15f)]
	private int m_hashGridBucketEdgeLength;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private List<int> m_surfaceAgentTypes;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static NavMeshIsland.TriangleData[] s_triangleDataBuffer;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool m_includeNavMeshCornersWhenGenerating;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private int m_agentTypeId;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool m_drawIslandMeshes;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	private bool m_drawIslandLabels;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private int m_drawIslandMeshIndex;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private bool m_drawSpatialHashGrid;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Dictionary<PolygonId, int> m_polygonToIslandMap;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Dictionary<int, AgentIdIslandData> m_agentIdToIslandDataMap;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Dictionary<PolygonId, NavMeshIsland> m_polygonIdToIslandMaps;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_initialReachabilityMatricesCalculated;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Queue<IslandLinkChange> m_islandLinkChangeQueue;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private JobHandle m_islandLinkChangeJob;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool m_islandLinkChangeRunning;

	[Token(Token = "0x17000053")]
	private IEnumerable<NavMeshIsland> AllIslands
	{
		[Token(Token = "0x6000229")]
		[Address(RVA = "0x1187B3C", Offset = "0x1187B3C", VA = "0x1187B3C")]
		[IteratorStateMachine(typeof(<get_AllIslands>d__33))]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x11859D4", Offset = "0x11859D4", VA = "0x11859D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x1185C30", Offset = "0x1185C30", VA = "0x1185C30")]
	private void GenerateIslandDataPerAgentId()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x11866E0", Offset = "0x11866E0", VA = "0x11866E0")]
	public void CalculateIslandReachability()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x1185634", Offset = "0x1185634", VA = "0x1185634")]
	public static void LinkIslands(NavMeshIsland islandA, NavMeshIsland islandB, int agentId)
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x1185804", Offset = "0x1185804", VA = "0x1185804")]
	public static void UnLinkIslands(NavMeshIsland islandA, NavMeshIsland islandB, int agentId)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x11876D8", Offset = "0x11876D8", VA = "0x11876D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x118615C", Offset = "0x118615C", VA = "0x118615C")]
	private NativeHashMap<PolygonId, int> GeneratePolygonToIslandMap(int agentId, out List<NavMeshIsland> islands)
	{
		return default(NativeHashMap<PolygonId, int>);
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x1187830", Offset = "0x1187830", VA = "0x1187830", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x1187880", Offset = "0x1187880", VA = "0x1187880")]
	private void ClearNativeData()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x1187618", Offset = "0x1187618", VA = "0x1187618")]
	public static AgentIdIslandData GetAgentIslandData(int agentId)
	{
		return null;
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x1185A9C", Offset = "0x1185A9C", VA = "0x1185A9C")]
	private void BuildSpatialHashGrid()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x1187A74", Offset = "0x1187A74", VA = "0x1187A74")]
	[IteratorStateMachine(typeof(<GetIslandsForAgentType>d__31))]
	private IEnumerable<NavMeshIsland> GetIslandsForAgentType(int agentTypeId)
	{
		return null;
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x1187BF4", Offset = "0x1187BF4", VA = "0x1187BF4")]
	private bool UpdateSpacialHashGrid()
	{
		return default(bool);
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x1187C2C", Offset = "0x1187C2C", VA = "0x1187C2C")]
	public int? GetIndexOfClosestIsland(Vector3 point, int agentTypeId)
	{
		return null;
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x1187DEC", Offset = "0x1187DEC", VA = "0x1187DEC")]
	public Vector3? GetNearestIslandPosition(Vector3 point, int islandIndex)
	{
		return null;
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x1187FB0", Offset = "0x1187FB0", VA = "0x1187FB0")]
	public NavMeshIslandMarkup()
	{
	}
}
[Token(Token = "0x2000082")]
[RequireComponent(typeof(NavMeshLink))]
public class NavMeshLinkGateway : MonoBehaviour
{
	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NavMeshLink m_link;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Min(0f)]
	[UnityEngine.Tooltip("The number of scaled seconds between an agent traversing this link and the link becoming available for use by agents again.")]
	private float m_cooldown;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_autoOpenTimer;

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x11887B4", Offset = "0x11887B4", VA = "0x11887B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x1188820", Offset = "0x1188820", VA = "0x1188820")]
	private void OpenGateway()
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x118884C", Offset = "0x118884C", VA = "0x118884C")]
	public void CloseGateway()
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x1188878", Offset = "0x1188878", VA = "0x1188878")]
	public void TriggerTimedGateway()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x11888B0", Offset = "0x11888B0", VA = "0x11888B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x11888FC", Offset = "0x11888FC", VA = "0x11888FC")]
	public NavMeshLinkGateway()
	{
	}
}
[Token(Token = "0x2000083")]
[DisallowMultipleComponent]
public abstract class AbstractPathNode : CachedMonoBehaviour, IMovementNode
{
	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Min(0.2f)]
	private float m_radius;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private bool m_isRadius;

	[Token(Token = "0x17000059")]
	public float Radius
	{
		[Token(Token = "0x6000250")]
		[Address(RVA = "0x118890C", Offset = "0x118890C", VA = "0x118890C", Slot = "5")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700005A")]
	public bool IsRadius
	{
		[Token(Token = "0x6000251")]
		[Address(RVA = "0x1188914", Offset = "0x1188914", VA = "0x1188914")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005B")]
	public Vector3 Position
	{
		[Token(Token = "0x6000252")]
		[Address(RVA = "0x118891C", Offset = "0x118891C", VA = "0x118891C", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x118893C", Offset = "0x118893C", VA = "0x118893C")]
	public Vector3 GetSpawnPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x11889E0", Offset = "0x11889E0", VA = "0x11889E0")]
	protected AbstractPathNode()
	{
	}
}
[Serializable]
[Token(Token = "0x2000084")]
public enum AgentInstruction
{
	[Token(Token = "0x4000286")]
	ContinueImmediately,
	[Token(Token = "0x4000287")]
	Wait,
	[Token(Token = "0x4000288")]
	PlayAnimation,
	[Token(Token = "0x4000289")]
	GoToSpecifiedCover,
	[Token(Token = "0x400028A")]
	LookAtPoint
}
[Token(Token = "0x2000085")]
public class SpawnPathNode : AbstractPathNode
{
	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("The next node in the spawn branch, if any.")]
	private SpawnPathNode m_nextNodeInSpawnPath;

	[Token(Token = "0x1700005C")]
	public SpawnPathNode Next
	{
		[Token(Token = "0x6000255")]
		[Address(RVA = "0x11889F4", Offset = "0x11889F4", VA = "0x11889F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x11889FC", Offset = "0x11889FC", VA = "0x11889FC")]
	public SpawnPathNode()
	{
	}
}
[Token(Token = "0x2000086")]
public class AgentEyes : CachedMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000087")]
	private class EyeConfiguration
	{
		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Min(0.1f)]
		public float farDistance;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(5f, 120f)]
		public float fovHorizontal;

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x118A044", Offset = "0x118A044", VA = "0x118A044")]
		public EyeConfiguration()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000088")]
	private struct EyeConfigurationByEmotion
	{
		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AgentEmotion emotion;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EyeConfiguration config;
	}

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private EyeConfiguration m_defaultEyeConfiguration;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private EyeConfigurationByEmotion[] m_eyeConfigurationsByEmotion;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private EyeConfiguration m_activeEyeConfiguration;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_eyecastLayerMask;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_latestRaycastFrame;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform m_latestRaycastTarget;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_latestRaycastResult;

	[Token(Token = "0x4000293")]
	private const int c_raycastFrameInterval = 20;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool m_lineOfSightPending;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform m_lineOfSightColliderToIgnore;

	[Token(Token = "0x1700005D")]
	private EyeConfiguration ActiveEyeConfiguration
	{
		[Token(Token = "0x6000257")]
		[Address(RVA = "0x1188A10", Offset = "0x1188A10", VA = "0x1188A10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700005E")]
	public float FarDistance
	{
		[Token(Token = "0x6000259")]
		[Address(RVA = "0x1188A94", Offset = "0x1188A94", VA = "0x1188A94")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x1188A3C", Offset = "0x1188A3C", VA = "0x1188A3C")]
	public void SignalEmotionChange(AgentEmotion emotion)
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x1188ACC", Offset = "0x1188ACC", VA = "0x1188ACC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x1188BE0", Offset = "0x1188BE0", VA = "0x1188BE0")]
	public bool CanSeeTransform(Transform target, [Optional] Transform raycastColliderToIgnore)
	{
		return default(bool);
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x1188D7C", Offset = "0x1188D7C", VA = "0x1188D7C")]
	private bool CheckLineOfSight(Vector3 myPos, Vector3 targetPos, Transform target, Transform raycastColliderToIgnore)
	{
		return default(bool);
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x11890BC", Offset = "0x11890BC", VA = "0x11890BC")]
	private void RaycastCommandResultCallback(RaycastHit hitInfo)
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x1189198", Offset = "0x1189198", VA = "0x1189198")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x1189FF0", Offset = "0x1189FF0", VA = "0x1189FF0")]
	public AgentEyes()
	{
	}
}
[Token(Token = "0x2000089")]
public class AgentEyesRaycastJobManager : PT.Singleton<AgentEyesRaycastJobManager>
{
	[Serializable]
	[Token(Token = "0x200008A")]
	private class RaycastJobHandler
	{
		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NativeArray<RaycastCommand> m_commandBatch;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NativeArray<RaycastHit> m_resultBatch;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Action<RaycastHit>[] m_callbackBatch;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private JobHandle m_currentJobHandle;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_hasValidHandle;

		[Token(Token = "0x40002A2")]
		private const int c_maxBatchSize = 40;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int m_currentBatchSize;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_currentBatchStartFrame;

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x118A17C", Offset = "0x118A17C", VA = "0x118A17C")]
		public RaycastJobHandler()
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x118A2F4", Offset = "0x118A2F4", VA = "0x118A2F4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x118A364", Offset = "0x118A364", VA = "0x118A364")]
		public bool SubmitRaycastCommand(Vector3 origin, Vector3 direction, float distance, int layerMask, Action<RaycastHit> resultCallback)
		{
			return default(bool);
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x118A494", Offset = "0x118A494", VA = "0x118A494")]
		public void Tick()
		{
		}
	}

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RaycastJobHandler[] m_handlers;

	[Token(Token = "0x400029B")]
	private const int c_handlerCount = 32;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_nextAvailableHandler;

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x118A058", Offset = "0x118A058", VA = "0x118A058")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x118A26C", Offset = "0x118A26C", VA = "0x118A26C", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x1188FC4", Offset = "0x1188FC4", VA = "0x1188FC4")]
	public void SubmitRaycastCommand(Vector3 origin, Vector3 direction, float distance, int layerMask, Action<RaycastHit> resultCallback)
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x118A440", Offset = "0x118A440", VA = "0x118A440")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x118A67C", Offset = "0x118A67C", VA = "0x118A67C")]
	public AgentEyesRaycastJobManager()
	{
	}
}
[Token(Token = "0x200008B")]
public class AgentSensoryAudio : CachedMonoBehaviour
{
	[Token(Token = "0x200008C")]
	[CompilerGenerated]
	private sealed class <get_PlayingAgentAudioObjects>d__25 : IEnumerable<AgentSensoryAudio>, IEnumerable, IEnumerator<AgentSensoryAudio>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AgentSensoryAudio <>2__current;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<AgentSensoryAudio>.Enumerator <>7__wrap1;

		[Token(Token = "0x17000063")]
		private AgentSensoryAudio System.Collections.Generic.IEnumerator<AgentSensoryAudio>.Current
		{
			[Token(Token = "0x600027F")]
			[Address(RVA = "0x118AE8C", Offset = "0x118AE8C", VA = "0x118AE8C", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000064")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000281")]
			[Address(RVA = "0x118AED4", Offset = "0x118AED4", VA = "0x118AED4", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x118AA40", Offset = "0x118AA40", VA = "0x118AA40")]
		[DebuggerHidden]
		public <get_PlayingAgentAudioObjects>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x600027C")]
		[Address(RVA = "0x118AC5C", Offset = "0x118AC5C", VA = "0x118AC5C", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x118AC78", Offset = "0x118AC78", VA = "0x118AC78", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x118AE3C", Offset = "0x118AE3C", VA = "0x118AE3C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x118AE94", Offset = "0x118AE94", VA = "0x118AE94", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x118AEDC", Offset = "0x118AEDC", VA = "0x118AEDC", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<AgentSensoryAudio> System.Collections.Generic.IEnumerable<AgentSensoryAudio>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x118AF74", Offset = "0x118AF74", VA = "0x118AF74", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("The radius of the noise. Higher values mean agents will be able to hear this from farther away.")]
	[Min(0f)]
	[SerializeField]
	private float m_noiseRadius;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Range(0f, 1f)]
	[HideInInspector]
	[UnityEngine.Tooltip("The amount we'll multiply the radius by for each surface the noise is passing through. 1 means no decay, 0 means the sound will be completely stopped by solid surfaces.")]
	private float m_radiusFactorPerObstruction;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Agent hint for what kind of target this is.")]
	[SerializeField]
	private TargetHint m_targetHint;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("The transform to play the audio from. If unset, plays from this game object's transform instead.")]
	[SerializeField]
	private Transform m_playTransform;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[UnityEngine.Tooltip("If ticked, automatically play this forever on enable. It will stop when disabled.")]
	private bool m_autoPlayImmediately;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private IOwner m_attachedowner;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_playDuration;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_stopTime;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_groundLayer;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly HashSet<AgentSensoryAudio> s_playingAgentAudioObjects;

	[Token(Token = "0x1700005F")]
	public IOwner owner
	{
		[Token(Token = "0x600026B")]
		[Address(RVA = "0x118A6E8", Offset = "0x118A6E8", VA = "0x118A6E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000060")]
	private bool IsCurrentlyPlaying
	{
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x118A948", Offset = "0x118A948", VA = "0x118A948")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000061")]
	public TargetHint TargetHint
	{
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x118A9C8", Offset = "0x118A9C8", VA = "0x118A9C8")]
		get
		{
			return default(TargetHint);
		}
	}

	[Token(Token = "0x17000062")]
	public static IEnumerable<AgentSensoryAudio> PlayingAgentAudioObjects
	{
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x118A9D0", Offset = "0x118A9D0", VA = "0x118A9D0")]
		[IteratorStateMachine(typeof(<get_PlayingAgentAudioObjects>d__25))]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x118A6F0", Offset = "0x118A6F0", VA = "0x118A6F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x118A808", Offset = "0x118A808", VA = "0x118A808")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x118A824", Offset = "0x118A824", VA = "0x118A824")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x118A8A8", Offset = "0x118A8A8", VA = "0x118A8A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x118A8AC", Offset = "0x118A8AC", VA = "0x118A8AC")]
	public void AssociateOwner(IOwner owner)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x118A81C", Offset = "0x118A81C", VA = "0x118A81C")]
	public void StartPlaying()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x118A8B4", Offset = "0x118A8B4", VA = "0x118A8B4")]
	public void StartPlaying(float stopAfterSeconds)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x118A828", Offset = "0x118A828", VA = "0x118A828")]
	public void StopPlaying()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x118AA74", Offset = "0x118AA74", VA = "0x118AA74")]
	public bool IsPointInHearingRange(Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x118AB4C", Offset = "0x118AB4C", VA = "0x118AB4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x118ABA8", Offset = "0x118ABA8", VA = "0x118ABA8")]
	public AgentSensoryAudio()
	{
	}
}
[Serializable]
[Token(Token = "0x200008D")]
public struct PerceptionTarget
{
	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 perceivedPoint;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform perceivedTransform;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TargetHint targetHint;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float targetRadius;
}
[Token(Token = "0x200008E")]
public enum TargetHint
{
	[Token(Token = "0x40002B8")]
	World = 0,
	[Token(Token = "0x40002B9")]
	Foot = 100,
	[Token(Token = "0x40002BA")]
	Hand = 200,
	[Token(Token = "0x40002BB")]
	Head = 300
}
[Token(Token = "0x200008F")]
[DisallowMultipleComponent]
public class VisionTargetContainer : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000090")]
	public struct VisionTarget
	{
		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform transform;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public TargetHint hint;

		[Token(Token = "0x17000068")]
		public float Radius
		{
			[Token(Token = "0x600028E")]
			[Address(RVA = "0x118B414", Offset = "0x118B414", VA = "0x118B414")]
			get
			{
				return default(float);
			}
		}
	}

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private VisionTarget m_visionTargetHead;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PriorityTarget m_priorityTarget;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<VisionTargetContainer> s_allActiveVisionTargetContainers;

	[Token(Token = "0x17000065")]
	public VisionTarget VisionTargetHead
	{
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x118AF78", Offset = "0x118AF78", VA = "0x118AF78")]
		get
		{
			return default(VisionTarget);
		}
	}

	[Token(Token = "0x17000066")]
	public PriorityTarget PriorityTarget
	{
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x118AF84", Offset = "0x118AF84", VA = "0x118AF84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000067")]
	public static List<VisionTargetContainer> ActiveTargetContainers
	{
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x118AF8C", Offset = "0x118AF8C", VA = "0x118AF8C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x118AFE4", Offset = "0x118AFE4", VA = "0x118AFE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x118B054", Offset = "0x118B054", VA = "0x118B054")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x118B17C", Offset = "0x118B17C", VA = "0x118B17C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x118B24C", Offset = "0x118B24C", VA = "0x118B24C")]
	public void AssociateTarget(PriorityTarget target)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x118B254", Offset = "0x118B254", VA = "0x118B254")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x118B374", Offset = "0x118B374", VA = "0x118B374")]
	public VisionTargetContainer()
	{
	}
}
[Token(Token = "0x2000091")]
public class SpawnWaveDefinition
{
	[Serializable]
	[Token(Token = "0x2000092")]
	public class GroupAgentSpawn
	{
		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[FormerlySerializedAs("SpawnableAgent")]
		public UnityEngine.Object Spawnable;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int CountToSpawn;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int MinTime;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string SpawnGroup;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaxEnemies;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ItemDrop[] ItemDrops;

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x118B940", Offset = "0x118B940", VA = "0x118B940")]
		public GroupAgentSpawn(UnityEngine.Object spawnable, int countToSpawn, int minTime, string spawnGroup, int maxEnemies, ItemDrop[] drops)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000093")]
	public class AgentSpawn
	{
		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpawnWaveDefinition WaveDefinition;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GroupAgentSpawn AgentsSpawnData;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool IsFromWaveManager;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int MinTime;

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x118BC4C", Offset = "0x118BC4C", VA = "0x118BC4C")]
		public AgentSpawn(SpawnWaveDefinition waveDef, GroupAgentSpawn groupAgentSpawn, int enemyIndex, bool isFromWaveManager)
		{
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x118BCD0", Offset = "0x118BCD0", VA = "0x118BCD0")]
		public AbstractSpawnPoint FindSuitableSpawnPoint(List<MultiplayerSpawnPoint> usableSpawnPoints)
		{
			return null;
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x118BD5C", Offset = "0x118BD5C", VA = "0x118BD5C")]
		private List<AbstractSpawnPoint> FindSuitablesSpawnPoint(AgentSpawn agent, List<MultiplayerSpawnPoint> usableSpawnPoints)
		{
			return null;
		}
	}

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<GroupAgentSpawn> AgentsSpawnData;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool FromWaveManager;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool IsPaused;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool Despawn;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float DespawnInDeEscalation;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ItemDrop[] WaveItemDrops;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int _enemyAmountIndex;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int _enemyGroupIndex;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int _totalAgents;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _returnedAgents;

	[Token(Token = "0x17000069")]
	public int EnemiesKilled
	{
		[Token(Token = "0x600028F")]
		[Address(RVA = "0x118B420", Offset = "0x118B420", VA = "0x118B420")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x118B428", Offset = "0x118B428", VA = "0x118B428")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006A")]
	public int TotalAgents
	{
		[Token(Token = "0x6000291")]
		[Address(RVA = "0x118B430", Offset = "0x118B430", VA = "0x118B430")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700006B")]
	public bool WaveFinished
	{
		[Token(Token = "0x6000292")]
		[Address(RVA = "0x118B438", Offset = "0x118B438", VA = "0x118B438")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x118B448", Offset = "0x118B448", VA = "0x118B448")]
	public SpawnWaveDefinition(WaveSpecifier.SquadSequence sequence, ItemDrop[] itemDrops, bool comesFromWaveManager, List<MultiplayerSpawnPoint> usableSpawnPoints, bool despawn, float despawnInDeEscalation)
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x118B9BC", Offset = "0x118B9BC", VA = "0x118B9BC")]
	private int CountTotalAgents()
	{
		return default(int);
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x118BB18", Offset = "0x118BB18", VA = "0x118BB18")]
	public int CountAgentsToSpawn()
	{
		return default(int);
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x118BB28", Offset = "0x118BB28", VA = "0x118BB28")]
	public AgentSpawn GetNextEnemy()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000094")]
[CreateAssetMenu(menuName = "Cabin/Squad Definition")]
public class SquadDefinition : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000095")]
	public class InitialAgentSpawn
	{
		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[FormerlySerializedAs("SpawnableAgent")]
		public UnityEngine.Object Spawnable;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int CountToSpawn;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RootNode OverrideBehaviourTree;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SharedVariableTable SharedVariableOverrideTable;

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x118C240", Offset = "0x118C240", VA = "0x118C240")]
		public InitialAgentSpawn()
		{
		}
	}

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CombatRole SquadCombatRole;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform OptionalGoalTransform;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Faction Faction;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AbstractSpawnPoint ForcedSpawnPoint;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InitialAgentSpawn[] AgentTypesToSpawn;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ItemDrop[] ItemsDroppedOnDeath;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool InstantlyAwareOfExistingHostileAgents;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public CinematicSpawnPoint.NonPlayerAgentMode InitialAgentMode;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ISpawnable Spawnable;

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x118BFE0", Offset = "0x118BFE0", VA = "0x118BFE0")]
	public SquadDefinition()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x118BFE8", Offset = "0x118BFE8", VA = "0x118BFE8")]
	public static SquadDefinition Create(CombatRole combatRole, Transform goalTransform, AbstractSpawnPoint forcedSpawnPoint, GameObject spawnableAgent, RootNode overrideBehaviourTree, SharedVariableTable sharedVariableOverrideTable, ItemDrop[] itemsDroppedOnDeath, bool instantlyAwareOfExistingHostileAgents, CinematicSpawnPoint.NonPlayerAgentMode initialAgentMode, [Optional] ISpawnable spawnable)
	{
		return null;
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x118C248", Offset = "0x118C248", VA = "0x118C248")]
	public int CountTotalAgentsInSquad()
	{
		return default(int);
	}
}
[Token(Token = "0x2000096")]
public class AnalyticsEventDebugger : MonoBehaviour
{
	[Token(Token = "0x2000097")]
	public enum AnalyticEvent
	{
		[Token(Token = "0x40002FB")]
		Boot,
		[Token(Token = "0x40002FC")]
		Quit,
		[Token(Token = "0x40002FD")]
		RunStarted,
		[Token(Token = "0x40002FE")]
		RunEnded,
		[Token(Token = "0x40002FF")]
		FTUEComplete,
		[Token(Token = "0x4000300")]
		NewObjectiveSelected,
		[Token(Token = "0x4000301")]
		FailedLobby,
		[Token(Token = "0x4000302")]
		Ping
	}

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AnalyticEvent m_SelectedDebugEvent;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private VrDeviceModel m_DeviceModel;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Player Stats")]
	[SerializeField]
	private int m_UserLevel;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int m_UserTotalXp;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int m_RunCount;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Run Stats")]
	[SerializeField]
	private string m_FocalPoint;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Range(1f, 4f)]
	private int m_PlayersInMatch;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private bool m_VOIPEnabled;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_RunLength;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int m_XpGain;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool m_Won;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[SerializeField]
	private bool m_FirstWin;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private string m_Objective;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Session Stats")]
	private float m_SessionLength;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private string m_ClientVersion;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Lobby Stats")]
	[SerializeField]
	private float m_LobbyWaitTime;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private bool m_OpenLobby;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private int m_InvitesSent;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private bool m_IsHost;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[SerializeField]
	private bool m_IsFTUE;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Ping Stats")]
	[SerializeField]
	private float m_avgPing;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private float m_minPing;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float m_maxPing;

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x118C2AC", Offset = "0x118C2AC", VA = "0x118C2AC")]
	public void SendDebugAnalyticEvent()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x118CCE8", Offset = "0x118CCE8", VA = "0x118CCE8")]
	public AnalyticsEventDebugger()
	{
	}
}
[Token(Token = "0x2000098")]
public static class AnalyticsHelper
{
	[StructLayout(3)]
	[Token(Token = "0x2000099")]
	[CompilerGenerated]
	private struct <InitializeWithEnvironment>d__19 : IAsyncStateMachine
	{
		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int <>1__state;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AsyncVoidMethodBuilder <>t__builder;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TaskAwaiter <>u__1;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TaskAwaiter<List<string>> <>u__2;

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x118F438", Offset = "0x118F438", VA = "0x118F438", Slot = "4")]
		private void MoveNext()
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x118F8B0", Offset = "0x118F8B0", VA = "0x118F8B0", Slot = "5")]
		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
		}
	}

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_analyticsActive;

	[Token(Token = "0x4000304")]
	private const bool c_sendAnalyticsInEditor = true;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static DateTime s_lobbyStartTime;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static UdpSession s_lobbySession;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static bool s_isLobbyHost;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static string s_lastFocalPoint;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string s_lastDifficultyLevel;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static bool m_isFTUE;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private static bool m_flagMenuQuit;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private static int m_milkCount;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int m_reviveCount;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static int m_repairCount;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static bool m_batteryCurrentlyBroken;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static float m_batteryBreakDuration;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static DateTime m_batteryLastBreakTime;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static bool m_deathPosSet;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static Vector3 m_deathPos;

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x118CB50", Offset = "0x118CB50", VA = "0x118CB50")]
	public static void QueueAnalyticEvent(string eventName, Dictionary<string, object> customParams)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x118CDB0", Offset = "0x118CDB0", VA = "0x118CDB0")]
	public static void FlushAnalyticEvents()
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x118CE94", Offset = "0x118CE94", VA = "0x118CE94")]
	[AsyncStateMachine(typeof(<InitializeWithEnvironment>d__19))]
	public static void InitializeWithEnvironment()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x118CF30", Offset = "0x118CF30", VA = "0x118CF30")]
	public static void GameSessionAnalytic(bool quitting)
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x118D314", Offset = "0x118D314", VA = "0x118D314")]
	public static void SetLobbyInfo(UdpSession session, bool isHost)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x118D3D0", Offset = "0x118D3D0", VA = "0x118D3D0")]
	public static void SendAnalyticFlag(AnalyticFlag flag)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x118D858", Offset = "0x118D858", VA = "0x118D858")]
	private static void ResetMatchStats()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x118D8FC", Offset = "0x118D8FC", VA = "0x118D8FC")]
	public static void RunStartAnalytic(string focalPoint, string difficultyLevel, bool isFTUE)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x118E088", Offset = "0x118E088", VA = "0x118E088")]
	public static void RunEndedAnalytic(ScoreBreakdown score)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x118F098", Offset = "0x118F098", VA = "0x118F098")]
	public static void MatchPingAnalytic(PingStats stats)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x118EF88", Offset = "0x118EF88", VA = "0x118EF88")]
	private static void WeaponUsageAnalytic(float levelTime)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x118EC4C", Offset = "0x118EC4C", VA = "0x118EC4C")]
	public static void MilestoneAnalytic(string type, int eventRank = -1, string milestoneInfo = "")
	{
	}
}
[Token(Token = "0x200009A")]
public enum AnalyticFlag
{
	[Token(Token = "0x4000319")]
	QuitFlag,
	[Token(Token = "0x400031A")]
	Revive,
	[Token(Token = "0x400031B")]
	MilkConsumed,
	[Token(Token = "0x400031C")]
	PlayerDeath,
	[Token(Token = "0x400031D")]
	BatteryBroken,
	[Token(Token = "0x400031E")]
	BatteryRepaired
}
[Token(Token = "0x200009B")]
public class QuitFlag : MonoBehaviour
{
	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x118F8BC", Offset = "0x118F8BC", VA = "0x118F8BC")]
	public void FlagQuit()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x118F970", Offset = "0x118F970", VA = "0x118F970")]
	public QuitFlag()
	{
	}
}
[Token(Token = "0x200009C")]
public class AnimationStateToken : IProtocolToken
{
	[Token(Token = "0x1700006C")]
	public int animationHash
	{
		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x118F978", Offset = "0x118F978", VA = "0x118F978")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x118F980", Offset = "0x118F980", VA = "0x118F980")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public float blendTime
	{
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x118F988", Offset = "0x118F988", VA = "0x118F988")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x118F990", Offset = "0x118F990", VA = "0x118F990")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public float offset
	{
		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x118F998", Offset = "0x118F998", VA = "0x118F998")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x118F9A0", Offset = "0x118F9A0", VA = "0x118F9A0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x118F9A8", Offset = "0x118F9A8", VA = "0x118F9A8", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x118F9FC", Offset = "0x118F9FC", VA = "0x118F9FC", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x118FA4C", Offset = "0x118FA4C", VA = "0x118FA4C")]
	public AnimationStateToken()
	{
	}
}
[Token(Token = "0x200009D")]
public class ActorAttachToken : IProtocolToken
{
	[Token(Token = "0x1700006F")]
	public int animatorVariant
	{
		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x118FA54", Offset = "0x118FA54", VA = "0x118FA54")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x118FA5C", Offset = "0x118FA5C", VA = "0x118FA5C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000070")]
	public int numGroups
	{
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x118FA64", Offset = "0x118FA64", VA = "0x118FA64")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x118FA6C", Offset = "0x118FA6C", VA = "0x118FA6C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000071")]
	public byte[] groupVariants
	{
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x118FA74", Offset = "0x118FA74", VA = "0x118FA74")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x118FA7C", Offset = "0x118FA7C", VA = "0x118FA7C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000072")]
	public int clothingVariant
	{
		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x118FA84", Offset = "0x118FA84", VA = "0x118FA84")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x118FA8C", Offset = "0x118FA8C", VA = "0x118FA8C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x118FA94", Offset = "0x118FA94", VA = "0x118FA94", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x118FB08", Offset = "0x118FB08", VA = "0x118FB08", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x118FB68", Offset = "0x118FB68", VA = "0x118FB68")]
	public ActorAttachToken()
	{
	}
}
[Token(Token = "0x200009E")]
public class DummyAnimationEventListener : MonoBehaviour
{
	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x118FB70", Offset = "0x118FB70", VA = "0x118FB70")]
	public void Fst()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x118FB74", Offset = "0x118FB74", VA = "0x118FB74")]
	public void PlayAudio()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x118FB78", Offset = "0x118FB78", VA = "0x118FB78")]
	public DummyAnimationEventListener()
	{
	}
}
[Token(Token = "0x200009F")]
public class JumpAnimState : StateMachineBehaviour
{
	[Token(Token = "0x20000A0")]
	public struct Trajectory
	{
		[Token(Token = "0x4000334")]
		private const float c_minPhysicsJumpHeight = 1f;

		[Token(Token = "0x4000335")]
		private const float c_maxPhysicsJumpHeight = 4f;

		[Token(Token = "0x4000336")]
		private const float c_highestValidGravity = -2f;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float jumpGravity;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private float jumpDuration;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Vector3 jumpVelocity;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3 start;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 peak;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 end;

		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float horizontalDistance;

		[Token(Token = "0x17000075")]
		public float JumpGravity
		{
			[Token(Token = "0x60002D1")]
			[Address(RVA = "0x118FFD0", Offset = "0x118FFD0", VA = "0x118FFD0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000076")]
		public float JumpDuration
		{
			[Token(Token = "0x60002D2")]
			[Address(RVA = "0x118FFD8", Offset = "0x118FFD8", VA = "0x118FFD8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000077")]
		public Vector3 JumpVelocity
		{
			[Token(Token = "0x60002D3")]
			[Address(RVA = "0x118FFE0", Offset = "0x118FFE0", VA = "0x118FFE0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000078")]
		public Vector3 Start
		{
			[Token(Token = "0x60002D4")]
			[Address(RVA = "0x118FFEC", Offset = "0x118FFEC", VA = "0x118FFEC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000079")]
		public Vector3 Peak
		{
			[Token(Token = "0x60002D5")]
			[Address(RVA = "0x118FFF8", Offset = "0x118FFF8", VA = "0x118FFF8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700007A")]
		public Vector3 End
		{
			[Token(Token = "0x60002D6")]
			[Address(RVA = "0x1190004", Offset = "0x1190004", VA = "0x1190004")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700007B")]
		public float HorizontalDistance
		{
			[Token(Token = "0x60002D7")]
			[Address(RVA = "0x1190010", Offset = "0x1190010", VA = "0x1190010")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x1190018", Offset = "0x1190018", VA = "0x1190018")]
		public Trajectory(Vector3 start, Vector3 end, float gravity, float jumpHeightFactor = 1f)
		{
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x11900E4", Offset = "0x11900E4", VA = "0x11900E4")]
		public bool IsClearOfWorld()
		{
			return default(bool);
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x118FE80", Offset = "0x118FE80", VA = "0x118FE80")]
		public Vector3 GetPositionAlongTrajectory(float sampleTime, out float currentVerticalVelocity)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x1190308", Offset = "0x1190308", VA = "0x1190308")]
		public void SetTrajectoryData(float jumpGravityParam, float jumpDurationParam, Vector3 jumpVelocityParam, Vector3 startParam, Vector3 peakParam, Vector3 endParam, float horizontalDistanceParam)
		{
		}
	}

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnJumpLanded;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float jumpHeightFactor;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float jumpGravity;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_jumpHeightRange;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_jumpDistanceRange;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Trajectory m_trajectory;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_matchStart;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_matchEnd;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_jumpHeightAdjust;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_clipLength;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_timer;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_finished;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool m_jumpInitialised;

	[Token(Token = "0x17000073")]
	public bool Finished
	{
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x118FB80", Offset = "0x118FB80", VA = "0x118FB80")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000074")]
	public bool IsActive
	{
		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x118FB88", Offset = "0x118FB88", VA = "0x118FB88")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x118FB90", Offset = "0x118FB90", VA = "0x118FB90")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x118FB9C", Offset = "0x118FB9C", VA = "0x118FB9C")]
	public void JumpTo(Trajectory trajectory)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x118FBC0", Offset = "0x118FBC0", VA = "0x118FBC0", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x118FD28", Offset = "0x118FD28", VA = "0x118FD28", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x118FF6C", Offset = "0x118FF6C", VA = "0x118FF6C", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x118FFBC", Offset = "0x118FFBC", VA = "0x118FFBC")]
	public JumpAnimState()
	{
	}
}
[Token(Token = "0x20000A1")]
public class AnimationLayerPlayer : ScriptableObject
{
	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Animator Layer and Animation Names")]
	protected string m_layerName;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected string m_animFullPath;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Time taken to smooth layer in.")]
	protected float m_layerSmoothingInDuration;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[UnityEngine.Tooltip("Time taken to smooth layer out.")]
	protected float m_layerSmoothingOutDuration;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_blendOutStartTime;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int m_hashTrigger;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected SmoothedValue<float> m_normalizedLayerBlend;

	[NonSerialized]
	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected int m_frameDelay;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected int m_hashAnimName;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected int m_layerIndex;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected Animator m_animator;

	[NonSerialized]
	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool m_isPlaying;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected SmoothedValue<float>.SmoothedValueDelegate m_floatSmoothingFunc;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected SmoothedValue<Vector2>.SmoothedValueDelegate m_vec2SmoothingFunc;

	[NonSerialized]
	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_activeLayerWeight;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected BoltEntity m_entity;

	[Token(Token = "0x1700007C")]
	public virtual bool IsActive
	{
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x1190340", Offset = "0x1190340", VA = "0x1190340", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007D")]
	protected float activeLayerWeight
	{
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x1190378", Offset = "0x1190378", VA = "0x1190378")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x1190380", Offset = "0x1190380", VA = "0x1190380")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	protected GameObject owner
	{
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x1190388", Offset = "0x1190388", VA = "0x1190388")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x11903A4", Offset = "0x11903A4", VA = "0x11903A4", Slot = "5")]
	public virtual void Initialise(Animator animator)
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x11905D0", Offset = "0x11905D0", VA = "0x11905D0", Slot = "6")]
	public virtual void Disable()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x11906AC", Offset = "0x11906AC", VA = "0x11906AC")]
	private float SmoothFloat(float current, float desired, ref float velocity, float t, float maxSpeed, float dt)
	{
		return default(float);
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x11906E0", Offset = "0x11906E0", VA = "0x11906E0", Slot = "7")]
	protected virtual bool AllowPlayback()
	{
		return default(bool);
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x11906F0", Offset = "0x11906F0", VA = "0x11906F0", Slot = "8")]
	public virtual void Poll()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x11909E0", Offset = "0x11909E0", VA = "0x11909E0", Slot = "9")]
	public virtual void LatePoll()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x11909E4", Offset = "0x11909E4", VA = "0x11909E4", Slot = "10")]
	protected virtual bool IsComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x11909FC", Offset = "0x11909FC", VA = "0x11909FC", Slot = "11")]
	protected virtual void Play()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x1190C34", Offset = "0x1190C34", VA = "0x1190C34")]
	private float SmoothWeight(float current, float desired, ref float velocity, float duration, float maxSpeed, float dt)
	{
		return default(float);
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x1190C60", Offset = "0x1190C60", VA = "0x1190C60", Slot = "12")]
	public virtual void Cancel()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x1190C10", Offset = "0x1190C10", VA = "0x1190C10")]
	protected void StartLayer()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x119068C", Offset = "0x119068C", VA = "0x119068C")]
	protected void StopLayer()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x1190C80", Offset = "0x1190C80", VA = "0x1190C80", Slot = "13")]
	protected virtual void OnLayerStart()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x1190C84", Offset = "0x1190C84", VA = "0x1190C84", Slot = "14")]
	protected virtual void OnLayerStop()
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x1190C88", Offset = "0x1190C88", VA = "0x1190C88")]
	public AnimationLayerPlayer()
	{
	}
}
[Token(Token = "0x20000A2")]
public static class AnimParams
{
	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int c_speed_dy;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int c_speed_dx;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int c_move;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int c_turn_angle;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int c_turn;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static readonly int c_aim_x;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly int c_aim_y;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static readonly int c_max_aiming;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly int c_shooting;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static readonly int c_flinch_x;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly int c_flinch_z;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static readonly int c_flinch_strength;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly int c_falter_x;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static readonly int c_falter_z;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly int c_stagger_x;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static readonly int c_stagger_z;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly int c_melee_blocked;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static readonly int c_melee_mode;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static readonly int c_melee_damage;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public static readonly int c_mirror;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static readonly int c_cycle_offset;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public static readonly int c_jump_dist;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static readonly int c_jump_height;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public static readonly int c_jump_velocity;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static readonly int c_jump_landing;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public static readonly int c_charge_ending;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static readonly int c_charge_speed_scale;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public static readonly int c_stun_ending;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static readonly int c_speed_mult;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public static readonly int c_block_x;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static readonly int c_block_y;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public static readonly int c_blocking;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static readonly int c_defence;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public static readonly int c_melee_attack_speed;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static readonly int c_panic_idle;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public static readonly int c_kneel;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static readonly int c_unarmed;
}
[Token(Token = "0x20000A3")]
public class FalterLayerPlayer : ImpactAnimationLayerPlayer
{
	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x11913F0", Offset = "0x11913F0", VA = "0x11913F0")]
	public FalterLayerPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A4")]
[CreateAssetMenu(menuName = "Cabin/Animation/Flinch Layer Player")]
public class FlinchLayerPlayer : ImpactAnimationLayerPlayer
{
	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[UnityEngine.Tooltip("This curve dictates how the layer is blended in and out over time.")]
	private AnimationCurve m_layerWeightCurve;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float m_currentTime;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float m_duration;

	[Token(Token = "0x1700007F")]
	public override bool IsActive
	{
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x1191488", Offset = "0x1191488", VA = "0x1191488", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x11914AC", Offset = "0x11914AC", VA = "0x11914AC", Slot = "7")]
	protected override bool AllowPlayback()
	{
		return default(bool);
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x11914F8", Offset = "0x11914F8", VA = "0x11914F8", Slot = "11")]
	protected override void Play()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x1191520", Offset = "0x1191520", VA = "0x1191520", Slot = "10")]
	protected override bool IsComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x1191530", Offset = "0x1191530", VA = "0x1191530", Slot = "8")]
	public override void Poll()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0x1191698", Offset = "0x1191698", VA = "0x1191698")]
	public FlinchLayerPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A5")]
[CreateAssetMenu(menuName = "Cabin/Animation/Impact Layer Player")]
public class ImpactAnimationLayerPlayer : AnimationLayerPlayer
{
	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Header("Impact Anim Param Names")]
	protected string m_paramImpactDirection;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Impact Strength Param Name")]
	[SerializeField]
	protected string m_paramStrength;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Header("Impact Smoothing")]
	[UnityEngine.Tooltip("Time taken to smooth to new impact values.")]
	protected float m_impactSmoothingDuration;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[FormerlySerializedAs("m_normalizedMinPlayDuration")]
	[Header("Duration")]
	[SerializeField]
	[UnityEngine.Tooltip("Normalized time at which a new projectile impact can be registered and animation played.")]
	protected float m_minPlayDuration;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected bool m_allowInteruption;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int m_hashStrength;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int m_impactDirectionHash;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected SmoothedValue<Vector2> m_impactPoint;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected SmoothedValue<float> m_impactStrength;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected Vector3 m_hitNormal;

	[Token(Token = "0x17000080")]
	protected virtual float MinPlaybackDuration
	{
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x119169C", Offset = "0x119169C", VA = "0x119169C", Slot = "15")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x11916A4", Offset = "0x11916A4", VA = "0x11916A4", Slot = "5")]
	public override void Initialise(Animator animator)
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x1191804", Offset = "0x1191804", VA = "0x1191804", Slot = "7")]
	protected override bool AllowPlayback()
	{
		return default(bool);
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x119187C", Offset = "0x119187C", VA = "0x119187C", Slot = "16")]
	public virtual bool Hit(HealthStatusUpdateRuntimeInfo hitInfo, float strength = 1f)
	{
		return default(bool);
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x1191A6C", Offset = "0x1191A6C", VA = "0x1191A6C", Slot = "8")]
	public override void Poll()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x1191B28", Offset = "0x1191B28", VA = "0x1191B28", Slot = "17")]
	protected virtual void UpdateAnimationParams()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x11913F4", Offset = "0x11913F4", VA = "0x11913F4")]
	public ImpactAnimationLayerPlayer()
	{
	}
}
[Token(Token = "0x20000A6")]
public class KnockBackLayerPlayer : StaggerLayerPlayer
{
	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[Header("Stunned Animation State")]
	private string m_stunnedAnimFullPath;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float m_maxChargedKnockBackDistance;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private bool m_isChargedKnockedBack;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int m_stunnedHash;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float m_stunDuration;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool m_isStunned;

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x1191BAC", Offset = "0x1191BAC", VA = "0x1191BAC", Slot = "5")]
	public override void Initialise(Animator animator)
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x1191BF4", Offset = "0x1191BF4", VA = "0x1191BF4", Slot = "7")]
	protected override bool AllowPlayback()
	{
		return default(bool);
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x1191C04", Offset = "0x1191C04", VA = "0x1191C04", Slot = "16")]
	public override bool Hit(HealthStatusUpdateRuntimeInfo hitInfo, float strength = 1f)
	{
		return default(bool);
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x1192078", Offset = "0x1192078", VA = "0x1192078", Slot = "10")]
	protected override bool IsComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x11920BC", Offset = "0x11920BC", VA = "0x11920BC", Slot = "9")]
	public override void LatePoll()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x11922E0", Offset = "0x11922E0", VA = "0x11922E0")]
	public KnockBackLayerPlayer()
	{
	}
}
[Token(Token = "0x20000A7")]
[CreateAssetMenu(menuName = "Cabin/Animation/Moving Attack Layer Player")]
public class MovingAttackLayerPlayer : AnimationLayerPlayer
{
	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private IAttack m_attacker;

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x1192354", Offset = "0x1192354", VA = "0x1192354", Slot = "5")]
	public override void Initialise(Animator animator)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x11923C4", Offset = "0x11923C4", VA = "0x11923C4")]
	public bool CanPlay()
	{
		return default(bool);
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x11923D0", Offset = "0x11923D0", VA = "0x11923D0")]
	public void PlayAttack()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x11924EC", Offset = "0x11924EC", VA = "0x11924EC")]
	public MovingAttackLayerPlayer()
	{
	}
}
[Token(Token = "0x20000A8")]
[CreateAssetMenu(menuName = "Cabin/Animation/Moving Spit Layer Player")]
public class MovingSpitLayerPlayer : AnimationLayerPlayer
{
	[Token(Token = "0x6000308")]
	[Address(RVA = "0x11924F0", Offset = "0x11924F0", VA = "0x11924F0")]
	public bool CanPlay()
	{
		return default(bool);
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x11924FC", Offset = "0x11924FC", VA = "0x11924FC")]
	public void PlayAttack()
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x1192538", Offset = "0x1192538", VA = "0x1192538")]
	public MovingSpitLayerPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A9")]
[CreateAssetMenu(menuName = "Cabin/Animation/Stagger Layer Player")]
public class StaggerLayerPlayer : ImpactAnimationLayerPlayer
{
	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[FormerlySerializedAs("m_normalizedMinPlayDurationForMeleeHits")]
	[SerializeField]
	protected float m_minPlayDurationForMeleeHits;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	protected Vector3 m_movementMultiplier;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	protected float m_overrideMinPlayDuration;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected Vector3 m_activeMultiplier;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	protected Vector3 m_slideDir;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected Vector3 m_localDir;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	protected Vector3 m_agentStartPosition;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	protected int m_impactStartFrame;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private Quaternion m_startRotation;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private Quaternion m_desiredRotation;

	[Token(Token = "0x17000081")]
	protected override float MinPlaybackDuration
	{
		[Token(Token = "0x600030B")]
		[Address(RVA = "0x119253C", Offset = "0x119253C", VA = "0x119253C", Slot = "15")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x1191BD8", Offset = "0x1191BD8", VA = "0x1191BD8", Slot = "5")]
	public override void Initialise(Animator animator)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x1191BFC", Offset = "0x1191BFC", VA = "0x1191BFC", Slot = "7")]
	protected override bool AllowPlayback()
	{
		return default(bool);
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x1191D48", Offset = "0x1191D48", VA = "0x1191D48", Slot = "16")]
	public override bool Hit(HealthStatusUpdateRuntimeInfo hitInfo, float strength = 1f)
	{
		return default(bool);
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x1192544", Offset = "0x1192544", VA = "0x1192544", Slot = "8")]
	public override void Poll()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x1192808", Offset = "0x1192808", VA = "0x1192808", Slot = "9")]
	public override void LatePoll()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x11922EC", Offset = "0x11922EC", VA = "0x11922EC")]
	public StaggerLayerPlayer()
	{
	}
}
[Token(Token = "0x20000AA")]
public class SimpleLookAt : CachedMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000AB")]
	public class Bone
	{
		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform node;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float normalizedWeight;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 localForward;

		[Token(Token = "0x17000087")]
		public Vector3 forward
		{
			[Token(Token = "0x6000322")]
			[Address(RVA = "0x1193788", Offset = "0x1193788", VA = "0x1193788")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x11937C8", Offset = "0x11937C8", VA = "0x11937C8")]
		public Bone()
		{
		}
	}

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_relativeLookDirection;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private List<Bone> m_bones;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float m_maxLookDistance;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[UnityEngine.Tooltip("Shoudl the zombie only look at the player if they are in the same sector. Best turn off for Spitter.")]
	private bool m_onlyLookIfInSameSector;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_currentWeight;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Zombie m_zombie;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform m_lookAtTransform;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private HealthStatus m_lookAtHealthStatus;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private SectorMember m_lookAtSectorMember;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private SectorMember m_localSectorMember;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_inSameSector;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int m_randomModulo;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool m_useEndBoneForForward;

	[Token(Token = "0x17000082")]
	private Transform lookAtTransform
	{
		[Token(Token = "0x6000312")]
		[Address(RVA = "0x1192948", Offset = "0x1192948", VA = "0x1192948")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000313")]
		[Address(RVA = "0x1192950", Offset = "0x1192950", VA = "0x1192950")]
		set
		{
		}
	}

	[Token(Token = "0x17000083")]
	public float overrideWeight
	{
		[Token(Token = "0x6000314")]
		[Address(RVA = "0x1192C34", Offset = "0x1192C34", VA = "0x1192C34")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000315")]
		[Address(RVA = "0x1192C3C", Offset = "0x1192C3C", VA = "0x1192C3C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000084")]
	private Bone endBone
	{
		[Token(Token = "0x6000316")]
		[Address(RVA = "0x1192C44", Offset = "0x1192C44", VA = "0x1192C44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000085")]
	public float maxLookDistance
	{
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x1192CA8", Offset = "0x1192CA8", VA = "0x1192CA8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000318")]
		[Address(RVA = "0x1192CB0", Offset = "0x1192CB0", VA = "0x1192CB0")]
		set
		{
		}
	}

	[Token(Token = "0x17000086")]
	public float relativeLookDirection
	{
		[Token(Token = "0x6000319")]
		[Address(RVA = "0x1192CB8", Offset = "0x1192CB8", VA = "0x1192CB8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x1192CC0", Offset = "0x1192CC0", VA = "0x1192CC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x1192FD8", Offset = "0x1192FD8", VA = "0x1192FD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x1193034", Offset = "0x1193034", VA = "0x1193034")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x119303C", Offset = "0x119303C", VA = "0x119303C")]
	private void Update()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x11931D8", Offset = "0x11931D8", VA = "0x11931D8")]
	private void HandleLookAtReturnedToPool()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x11931E0", Offset = "0x11931E0", VA = "0x11931E0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x1192DBC", Offset = "0x1192DBC", VA = "0x1192DBC")]
	private void CalculateNormalizedWeight()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x11937B0", Offset = "0x11937B0", VA = "0x11937B0")]
	public SimpleLookAt()
	{
	}
}
[Token(Token = "0x20000AC")]
public class HitReactionTest : MonoBehaviour
{
	[Token(Token = "0x20000AD")]
	[CompilerGenerated]
	private sealed class <Initialize>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitReactionTest <>4__this;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IAgent agent;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000336")]
			[Address(RVA = "0x1194CE8", Offset = "0x1194CE8", VA = "0x1194CE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000338")]
			[Address(RVA = "0x1194D30", Offset = "0x1194D30", VA = "0x1194D30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x1194248", Offset = "0x1194248", VA = "0x1194248")]
		[DebuggerHidden]
		public <Initialize>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x1194400", Offset = "0x1194400", VA = "0x1194400", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x1194404", Offset = "0x1194404", VA = "0x1194404", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x1194CF0", Offset = "0x1194CF0", VA = "0x1194CF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VrBullet _bulletPrefab;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float hitForce;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask layerMask;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DebugDataViewModel debugData;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float deathHitNormalizedStrength;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string colliderName;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HealthStatus _healthStatus;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private IAgent _agent;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnMiss;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float fireDelay;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool enableFiring;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<HealthStatus, HealthStatusViewModel> _healthViewModelStatusMap;

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x11937D0", Offset = "0x11937D0", VA = "0x11937D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x1193860", Offset = "0x1193860", VA = "0x1193860")]
	private void Start()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x1193A50", Offset = "0x1193A50", VA = "0x1193A50")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x1193C40", Offset = "0x1193C40", VA = "0x1193C40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x11940DC", Offset = "0x11940DC", VA = "0x11940DC")]
	private void HandleAgentEnabled(IAgent agent)
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x11941A0", Offset = "0x11941A0", VA = "0x11941A0")]
	private void HandleAgentDisabled(IAgent agent)
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x1194164", Offset = "0x1194164", VA = "0x1194164")]
	private void SetFocusedAgent(IAgent agent)
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x11941B8", Offset = "0x11941B8", VA = "0x11941B8")]
	[IteratorStateMachine(typeof(<Initialize>d__19))]
	private IEnumerator Initialize(IAgent agent)
	{
		return null;
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x1194270", Offset = "0x1194270", VA = "0x1194270")]
	public void OnImpact(InputValue value)
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x1193CA0", Offset = "0x1193CA0", VA = "0x1193CA0")]
	private void PerformHit()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x11942EC", Offset = "0x11942EC", VA = "0x11942EC")]
	private void HandleImpact(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x11942F0", Offset = "0x11942F0", VA = "0x11942F0")]
	private void OnToggleDeath()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x1193EA0", Offset = "0x1193EA0", VA = "0x1193EA0")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x11942F4", Offset = "0x11942F4", VA = "0x11942F4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x11943EC", Offset = "0x11943EC", VA = "0x11943EC")]
	public HitReactionTest()
	{
	}
}
[Token(Token = "0x20000AE")]
public abstract class AbstractOccludedAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x40003B4")]
	private const int c_maxPerFrame = 2;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Audio Occlusion")]
	[SerializeField]
	[UnityEngine.Tooltip("Whether to enable occlusion. Can be disabled for audio players directly attached to the player. Not intended to be changed at runtime.")]
	private bool m_enableOcclusion;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[UnityEngine.Tooltip("This is the max distance after which we do not check for occlusions")]
	private float m_maxDistance;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("Trace lines to the position of this transform offset upwards by this amount. Avoids floor intersection on characters.")]
	[SerializeField]
	private float m_samplePositionVerticalOffset;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("The frequency (in sec) with which we check the occlusion state")]
	[Range(0.1f, 1f)]
	[SerializeField]
	[HideInInspector]
	private float m_refreshTime;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform m_listener;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_isOutOfRange;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_currentValue;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<AbstractOccludedAudioPlayer> s_checkForOcclusion;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int s_index;

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x1194D38", Offset = "0x1194D38", VA = "0x1194D38")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitializePlayerLoop()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x1194EB4", Offset = "0x1194EB4", VA = "0x1194EB4")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x1194F6C", Offset = "0x1194F6C", VA = "0x1194F6C")]
	static AbstractOccludedAudioPlayer()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x1194F70", Offset = "0x1194F70", VA = "0x1194F70")]
	private static void UpdateInstancesOcculusion()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x1195294", Offset = "0x1195294", VA = "0x1195294", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x11953A4", Offset = "0x11953A4", VA = "0x11953A4", Slot = "27")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x1195490", Offset = "0x1195490", VA = "0x1195490", Slot = "28")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x1195118", Offset = "0x1195118", VA = "0x1195118")]
	private void UpdateOcclusion()
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x1195754", Offset = "0x1195754", VA = "0x1195754", Slot = "29")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x1195524", Offset = "0x1195524", VA = "0x1195524")]
	private void SetOcclusionBetween(Vector3 listener, Vector3 target)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x11955EC", Offset = "0x11955EC", VA = "0x11955EC")]
	private void SetOcclusionParameterValue(bool isOccluded)
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x1195758", Offset = "0x1195758", VA = "0x1195758")]
	protected AbstractOccludedAudioPlayer()
	{
	}
}
[Token(Token = "0x20000AF")]
public class AnimationAudioBroadcaster : MonoBehaviour
{
	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<AnimationEvent> onFootstep;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<AnimationEvent> onPlayAudio;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<AnimationEvent> onStopAudio;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<AnimationEvent> onSetParameter;

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x119577C", Offset = "0x119577C", VA = "0x119577C")]
	private void Fst(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x1195798", Offset = "0x1195798", VA = "0x1195798")]
	private void PlayAudio(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x11957B4", Offset = "0x11957B4", VA = "0x11957B4")]
	private void StopAudio(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x11957D0", Offset = "0x11957D0", VA = "0x11957D0")]
	private void SetAudioParameter(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x11957EC", Offset = "0x11957EC", VA = "0x11957EC")]
	public AnimationAudioBroadcaster()
	{
	}
}
[Token(Token = "0x20000B0")]
public class AnimationEventAudioPlayer : AbstractOccludedAudioPlayer
{
	[Serializable]
	[Token(Token = "0x20000B1")]
	public struct AnimationAudioEvent
	{
		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string Name;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AudioEventDescription AudioEventDescription;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform Transform;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioParameter Parameter;
	}

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AnimationAudioBroadcaster m_broadcaster;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AnimationAudioEvent[] m_events;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_isGamePlaying;

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x11957F4", Offset = "0x11957F4", VA = "0x11957F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x11959C4", Offset = "0x11959C4", VA = "0x11959C4", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x1195B70", Offset = "0x1195B70", VA = "0x1195B70", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x1195D98", Offset = "0x1195D98", VA = "0x1195D98", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x1196040", Offset = "0x1196040", VA = "0x1196040", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x11960BC", Offset = "0x11960BC", VA = "0x11960BC")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x11960C8", Offset = "0x11960C8", VA = "0x11960C8")]
	private void EndGame()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x11960D0", Offset = "0x11960D0", VA = "0x11960D0")]
	private GameObject GetTransform(AnimationAudioEvent animationAudioEvent)
	{
		return null;
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x1196164", Offset = "0x1196164", VA = "0x1196164")]
	private void PlayAudio(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x1196258", Offset = "0x1196258", VA = "0x1196258")]
	private void StopAudio(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x1195FC8", Offset = "0x1195FC8", VA = "0x1195FC8")]
	private void StopAllAudio()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x1196308", Offset = "0x1196308", VA = "0x1196308")]
	private void SetParameter(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x11963CC", Offset = "0x11963CC", VA = "0x11963CC")]
	public AnimationEventAudioPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B2")]
public class AreaBasedAudio
{
	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioEventDescription Description;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool AllowStealing;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(1f, 15f)]
	[SerializeField]
	[UnityEngine.Tooltip("This defines how often (in seconds) we want to check the distance to the player in order to start playing or stop sounds.")]
	public float DistanceCheckFrequency;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[MinMaxRange(0.1f, 60f)]
	public MinMaxRange TimeBasedInterval;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public float MaxDistance;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public float Timer;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float NextTimeToPlayAudio;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public bool AllowAudio;

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x1196440", Offset = "0x1196440", VA = "0x1196440")]
	public AreaBasedAudio()
	{
	}
}
[Token(Token = "0x20000B3")]
public class AreaBasedAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 m_area;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Color m_gizmoColor;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AreaBasedAudio[] m_audioToPlay;

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x11964BC", Offset = "0x11964BC", VA = "0x11964BC", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x11964C4", Offset = "0x11964C4", VA = "0x11964C4", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x119655C", Offset = "0x119655C", VA = "0x119655C")]
	private void CheckDescriptions()
	{
	}

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x1196678", Offset = "0x1196678", VA = "0x1196678")]
	private void GetMaximumDistance(AreaBasedAudio areaDescription)
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x11966C0", Offset = "0x11966C0", VA = "0x11966C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x1196964", Offset = "0x1196964", VA = "0x1196964")]
	private Vector3 GetRandomPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x11967D8", Offset = "0x11967D8", VA = "0x11967D8")]
	private void CheckAudioAvailability(AreaBasedAudio areaDescription)
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x1196914", Offset = "0x1196914", VA = "0x1196914")]
	private bool PolyphonyCheck(AreaBasedAudio areaDescription)
	{
		return default(bool);
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x11969FC", Offset = "0x11969FC", VA = "0x11969FC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x1196A44", Offset = "0x1196A44", VA = "0x1196A44")]
	public AreaBasedAudioPlayer()
	{
	}
}
[Token(Token = "0x20000B4")]
public enum MusicStates
{
	[Token(Token = "0x40003D5")]
	Exploration,
	[Token(Token = "0x40003D6")]
	Fighting,
	[Token(Token = "0x40003D7")]
	Extraction
}
[Token(Token = "0x20000B5")]
public class AudioMusicManager : AbstractAudioPlayer
{
	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_sALogo_screen_sfx;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_legal_screen_sfx;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_cabinLogo_screen_sfx;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioEventDescription m_frontEndMusic;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioEventDescription m_gamePlayMusic;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioParameter m_musicState;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private AudioParameter m_enemyCount;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioEventDescription m_lastMusicPlayed;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameEvent TimerFinishes;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_zombiesCount;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool m_extractionStarted;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool m_extractionSuccesful;

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x1196A58", Offset = "0x1196A58", VA = "0x1196A58", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x1196A74", Offset = "0x1196A74", VA = "0x1196A74", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x1197128", Offset = "0x1197128", VA = "0x1197128")]
	private void AgentAdded(IAgent agent)
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x119725C", Offset = "0x119725C", VA = "0x119725C")]
	private void AgentRemoved(IAgent agent)
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x11971F0", Offset = "0x11971F0", VA = "0x11971F0")]
	private void UpdateEnemyCount(int zombiesCount)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x1197354", Offset = "0x1197354", VA = "0x1197354")]
	public void PlayFrontEndMusic()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x1197448", Offset = "0x1197448", VA = "0x1197448")]
	public void StopFrontEndMusic()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x119745C", Offset = "0x119745C", VA = "0x119745C")]
	public void PlaySALogoMusic()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x1197464", Offset = "0x1197464", VA = "0x1197464")]
	public void StopSALogoMusic()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x1197478", Offset = "0x1197478", VA = "0x1197478")]
	public void PlayLegalScreenMusic()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x1197480", Offset = "0x1197480", VA = "0x1197480")]
	public void StopLegalScreenMusic()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x1197494", Offset = "0x1197494", VA = "0x1197494")]
	public void PlayCabinLogoScreenMusic()
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x119749C", Offset = "0x119749C", VA = "0x119749C")]
	public void StopCabinLogoScreenMusic()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x119735C", Offset = "0x119735C", VA = "0x119735C")]
	public void AttemptToPlayMusic(AudioEventDescription description)
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x11974B0", Offset = "0x11974B0", VA = "0x11974B0")]
	private void PlayMusic(AudioEventDescription description)
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x11974E4", Offset = "0x11974E4", VA = "0x11974E4")]
	public void StopMusic()
	{
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x119751C", Offset = "0x119751C", VA = "0x119751C")]
	private void EnterCabinFirstTime(int index)
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x1197544", Offset = "0x1197544", VA = "0x1197544")]
	private void LevelStart()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x119754C", Offset = "0x119754C", VA = "0x119754C")]
	private void LevelComplete()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x1197550", Offset = "0x1197550", VA = "0x1197550")]
	private void SuccesfulExtraction()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x119755C", Offset = "0x119755C", VA = "0x119755C")]
	private void ResultsScreen()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x1197560", Offset = "0x1197560", VA = "0x1197560")]
	private void TimerHasFinished()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x1197324", Offset = "0x1197324", VA = "0x1197324")]
	public void ChangeMusicState(float value)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x1197580", Offset = "0x1197580", VA = "0x1197580", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x1197B3C", Offset = "0x1197B3C", VA = "0x1197B3C")]
	public AudioMusicManager()
	{
	}
}
[Token(Token = "0x20000B6")]
public class AudioPackageBridge : PT.Singleton<AudioPackageBridge>
{
	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public AudioManager AudioManager;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public AudioMusicManager MusicManager;

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x1298468", Offset = "0x1298468", VA = "0x1298468")]
	private void Awake()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x12984B4", Offset = "0x12984B4", VA = "0x12984B4")]
	private void Start()
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x1298544", Offset = "0x1298544", VA = "0x1298544")]
	public AudioPackageBridge()
	{
	}
}
[Token(Token = "0x20000B7")]
[RequireComponent(typeof(Slider))]
public class AudioSlider : MonoBehaviour
{
	[Token(Token = "0x20000B8")]
	private enum Type
	{
		[Token(Token = "0x40003E9")]
		Master,
		[Token(Token = "0x40003EA")]
		Music,
		[Token(Token = "0x40003EB")]
		SFX,
		[Token(Token = "0x40003EC")]
		Dialogue
	}

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Type m_type;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Slider m_slider;

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x12985B0", Offset = "0x12985B0", VA = "0x12985B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x12987B4", Offset = "0x12987B4", VA = "0x12987B4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x129885C", Offset = "0x129885C", VA = "0x129885C")]
	private void SetVolume(float newValue)
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x1298A58", Offset = "0x1298A58", VA = "0x1298A58")]
	public AudioSlider()
	{
	}
}
[Token(Token = "0x20000B9")]
public class ButtonAudio : AbstractAudioPlayer, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
{
	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_pointerEnterAudio;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_pointerExitAudio;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_pointerDownAudio;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_pointerUpAudio;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Selectable m_selectable;

	[Token(Token = "0x1700008A")]
	private bool CanPlayAudio
	{
		[Token(Token = "0x6000383")]
		[Address(RVA = "0x1298AC8", Offset = "0x1298AC8", VA = "0x1298AC8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x1298A60", Offset = "0x1298A60", VA = "0x1298A60")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x1298AE4", Offset = "0x1298AE4", VA = "0x1298AE4", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x1298B48", Offset = "0x1298B48", VA = "0x1298B48", Slot = "27")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x1298B7C", Offset = "0x1298B7C", VA = "0x1298B7C", Slot = "28")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x1298BB0", Offset = "0x1298BB0", VA = "0x1298BB0", Slot = "29")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x1298BE4", Offset = "0x1298BE4", VA = "0x1298BE4", Slot = "30")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x1298C18", Offset = "0x1298C18", VA = "0x1298C18")]
	public ButtonAudio()
	{
	}
}
[Token(Token = "0x20000BA")]
public class CabinSpeakersVOAudioPlayer : VOAudioPlayer
{
	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Header("Dr. Monday")]
	private VOEvent m_doomsDayCounterStarted;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private VOEvent m_locatorBeaconActivatedFirstTime;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private VOEvent m_locatorBeaconActivatedSecondPlusTime;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool m_beaconAlreadyActivatedOnce;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[Header("Event Subscriptions")]
	private GameEvent m_playerEnteredTheCabinFirstTime;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private GameEvent m_playerCloseToGenerator;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private GameEvent m_playerCloseToBattery;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private GameEvent m_startTimer;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool m_PowerSystemEventsSubscribed;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
	private bool m_powerState;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x152")]
	private bool m_extractionTimerHasStarted;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x153")]
	private bool m_generatorAlreadySeen;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private bool m_batteryAlreadySeen;

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x1298C20", Offset = "0x1298C20", VA = "0x1298C20", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x1298DAC", Offset = "0x1298DAC", VA = "0x1298DAC", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x1298F38", Offset = "0x1298F38", VA = "0x1298F38", Slot = "35")]
	protected override void ResetVOVariables()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x1299344", Offset = "0x1299344", VA = "0x1299344", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x12996D4", Offset = "0x12996D4", VA = "0x12996D4")]
	private void PlayerCloseToGenerator()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x1299838", Offset = "0x1299838", VA = "0x1299838")]
	private void PlayerCloseToBattery()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x129985C", Offset = "0x129985C", VA = "0x129985C")]
	public void PlayerEnteredTheCabinFirstTime()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x12996F8", Offset = "0x12996F8", VA = "0x12996F8")]
	public void SubscribeToPowerSystemEvents()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x1299860", Offset = "0x1299860", VA = "0x1299860", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x1299994", Offset = "0x1299994", VA = "0x1299994")]
	public void OnPowerChange(bool isOn)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x12999C0", Offset = "0x12999C0", VA = "0x12999C0")]
	private void PowerOn()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x1299A1C", Offset = "0x1299A1C", VA = "0x1299A1C")]
	private void PowerOff()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x1299A20", Offset = "0x1299A20", VA = "0x1299A20")]
	public void StartTimerFirstTime()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x1299A54", Offset = "0x1299A54", VA = "0x1299A54")]
	public CabinSpeakersVOAudioPlayer()
	{
	}
}
[Token(Token = "0x20000BB")]
public class CollisionAudioPlayer : AbstractAudioPlayer
{
	[Serializable]
	[Token(Token = "0x20000BC")]
	public struct MaterialAudioMapping
	{
		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string materialName;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PhysicMaterial m_material;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioEventDescription m_audioEventDescription;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("This lets you ignore the material and no audio will be played.")]
		public bool m_ignoreMaterial;
	}

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CollisionBroadcaster m_collisionBroadcaster;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private VelocityTrackerComponent m_velocityTrackerComponent;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<string> m_availableMaterials;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_defaultCollisionAudio;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MaterialAudioMapping[] m_materialAudioMappings;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected AudioParameter m_sqrRelativeSpeedParameter;

	[Token(Token = "0x4000405")]
	private const string c_agentTag = "Agent";

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Range(0f, 1f)]
	[SerializeField]
	private float m_collisionMinimumInterval;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_latestCollisionTime;

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x1299DA8", Offset = "0x1299DA8", VA = "0x1299DA8", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x1299DB0", Offset = "0x1299DB0", VA = "0x1299DB0", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x129A034", Offset = "0x129A034", VA = "0x129A034")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x129A21C", Offset = "0x129A21C", VA = "0x129A21C")]
	public void PlayCollisionAudio(GameObject gameObject, float velocity, PhysicMaterial material)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x129A41C", Offset = "0x129A41C", VA = "0x129A41C", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x129A55C", Offset = "0x129A55C", VA = "0x129A55C")]
	public CollisionAudioPlayer()
	{
	}
}
[Token(Token = "0x20000BD")]
public class CollisionBroadcaster : MonoBehaviour
{
	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<Collision> onTriggerEnter;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrItem m_vrItem;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_isInInventory;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly ProfilerMarker s_profileMarker2;

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x129A5F0", Offset = "0x129A5F0", VA = "0x129A5F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x129A648", Offset = "0x129A648", VA = "0x129A648")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x129A990", Offset = "0x129A990", VA = "0x129A990")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x129ACD8", Offset = "0x129ACD8", VA = "0x129ACD8")]
	private void OnItemPlacedInInventory()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x129ACE4", Offset = "0x129ACE4", VA = "0x129ACE4")]
	private void OnItemRemovedFromInventory()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x129ACEC", Offset = "0x129ACEC", VA = "0x129ACEC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x129AD10", Offset = "0x129AD10", VA = "0x129AD10")]
	public CollisionBroadcaster()
	{
	}
}
[Token(Token = "0x20000BE")]
public class EnemyExplosionAudioPlayer : AbstractOccludedAudioPlayer
{
	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioEventDescription m_explosion;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ExploderZombie m_exploderZombie;

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x129ADFC", Offset = "0x129ADFC", VA = "0x129ADFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x129AE54", Offset = "0x129AE54", VA = "0x129AE54", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x129AF3C", Offset = "0x129AF3C", VA = "0x129AF3C", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x129B024", Offset = "0x129B024", VA = "0x129B024", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x129B04C", Offset = "0x129B04C", VA = "0x129B04C")]
	private void OnExplosion()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x129B094", Offset = "0x129B094", VA = "0x129B094", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x129B098", Offset = "0x129B098", VA = "0x129B098")]
	public EnemyExplosionAudioPlayer()
	{
	}
}
[Token(Token = "0x20000BF")]
public class EnemyFootstepAudioPlayer : AbstractOccludedAudioPlayer
{
	[Serializable]
	[Token(Token = "0x20000C0")]
	private struct FeetMapping
	{
		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string footName;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform customTransform;
	}

	[Serializable]
	[Token(Token = "0x20000C1")]
	public struct MaterialAudioMapping
	{
		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string materialName;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PhysicMaterial m_material;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioEventDescription m_audioEventDescription;
	}

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Animation Setup")]
	[SerializeField]
	private AnimationAudioBroadcaster m_broadcaster;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private FeetMapping[] m_feetMapping;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float m_distanceThreshold;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float m_animationBlendThreshold;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float m_raycastLength;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Header("Audio Descriptions")]
	private AudioEventDescription m_defaultFootstep;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private MaterialAudioMapping[] m_materialAudioMappings;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioParameter m_stepIntensityParameter;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<string> m_availableMaterials;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private LayerMask m_mask;

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x129B0F0", Offset = "0x129B0F0", VA = "0x129B0F0", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x129B0F8", Offset = "0x129B0F8", VA = "0x129B0F8", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x129B1EC", Offset = "0x129B1EC", VA = "0x129B1EC", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x129B2E0", Offset = "0x129B2E0", VA = "0x129B2E0", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x129B4D0", Offset = "0x129B4D0", VA = "0x129B4D0")]
	public void OnFootstep(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x129B8C8", Offset = "0x129B8C8", VA = "0x129B8C8")]
	private void PlayFootstepAudio(Transform transform, float intensity, PhysicMaterial material)
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x129B7B8", Offset = "0x129B7B8", VA = "0x129B7B8")]
	private PhysicMaterial GetMaterialFromRaycast(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x129B71C", Offset = "0x129B71C", VA = "0x129B71C")]
	private Transform GetTransform(string footID)
	{
		return null;
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x129BAA8", Offset = "0x129BAA8", VA = "0x129BAA8")]
	public EnemyFootstepAudioPlayer()
	{
	}
}
[Token(Token = "0x20000C2")]
public class EnemyVOAudioPlayer : VOAudioPlayer
{
	[Serializable]
	[Token(Token = "0x20000C3")]
	public struct AnimationVOEvent
	{
		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string Name;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public VOEvent voEvent;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioParameter Parameter;
	}

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool m_isSpeechTransformDettached;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private HealthStatus m_headHealthStatus;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	[Header("Health Based")]
	private VOEvent m_idleVO;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private VOEvent m_deathVO;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private VOEvent m_damagedVO;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private AudioEventDescription m_headshotSfx;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[Header("Animation Based")]
	[SerializeField]
	private AnimationVOEvent[] m_animationVO;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private AnimationAudioBroadcaster m_animationBroadcaster;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x129BB74", Offset = "0x129BB74", VA = "0x129BB74", Slot = "30")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x129C5C4", Offset = "0x129C5C4", VA = "0x129C5C4", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x129CC04", Offset = "0x129CC04", VA = "0x129CC04", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x129CC24", Offset = "0x129CC24", VA = "0x129CC24", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x129CC30", Offset = "0x129CC30", VA = "0x129CC30", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x129CD8C", Offset = "0x129CD8C", VA = "0x129CD8C")]
	private void OnInitialise()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x129CD94", Offset = "0x129CD94", VA = "0x129CD94", Slot = "35")]
	protected override void ResetVOVariables()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x129CD44", Offset = "0x129CD44", VA = "0x129CD44")]
	private void OnSpawn()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x129CD98", Offset = "0x129CD98", VA = "0x129CD98")]
	private void OnDeSpawn()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x129CDE0", Offset = "0x129CDE0", VA = "0x129CDE0")]
	private void OnDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x129CE34", Offset = "0x129CE34", VA = "0x129CE34")]
	private void OnHealthDecreased(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x129CFE8", Offset = "0x129CFE8", VA = "0x129CFE8")]
	private void OnHealthIncreasedAfterDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x129CFEC", Offset = "0x129CFEC", VA = "0x129CFEC")]
	private void OnHealthIncreased(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x129CFF0", Offset = "0x129CFF0", VA = "0x129CFF0")]
	private void OnAnimationVO(AnimationEvent animationEvent)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x129D0A4", Offset = "0x129D0A4", VA = "0x129D0A4")]
	private void OnLosingHead(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x129D128", Offset = "0x129D128", VA = "0x129D128")]
	public EnemyVOAudioPlayer()
	{
	}
}
[Token(Token = "0x20000C4")]
public class EventsAudioPlayer : AbstractAudioPlayer
{
	[Serializable]
	[Token(Token = "0x20000C5")]
	private class GameEventsAudio
	{
		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameEvent gameEvent;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioEventDescription audioEventDescription;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform customTransform;

		[NonSerialized]
		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AbstractAudioPlayer abstractAudioPlayer;

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x129D26C", Offset = "0x129D26C", VA = "0x129D26C")]
		public void Init(AbstractAudioPlayer audioPlayer)
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x129D374", Offset = "0x129D374", VA = "0x129D374")]
		public void Disable()
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x129D480", Offset = "0x129D480", VA = "0x129D480")]
		public void PlayGameEventAudio()
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x129D54C", Offset = "0x129D54C", VA = "0x129D54C")]
		public GameEventsAudio()
		{
		}
	}

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameEventsAudio[] m_gameEventAudio;

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x129D208", Offset = "0x129D208", VA = "0x129D208")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x129D318", Offset = "0x129D318", VA = "0x129D318")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x129D400", Offset = "0x129D400", VA = "0x129D400", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x129D478", Offset = "0x129D478", VA = "0x129D478")]
	public EventsAudioPlayer()
	{
	}
}
[Token(Token = "0x20000C6")]
public class GameEventsAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform m_bellTransform;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_waveStart3D;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_waveStart2D;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_waveEnd3D;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioEventDescription m_waveEnd2D;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioEventDescription m_levelStart;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioEventDescription m_levelEnd;

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x129D554", Offset = "0x129D554", VA = "0x129D554", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x129D55C", Offset = "0x129D55C", VA = "0x129D55C", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x129D94C", Offset = "0x129D94C", VA = "0x129D94C")]
	private void WaveStart(int obj)
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x129D9A4", Offset = "0x129D9A4", VA = "0x129D9A4")]
	private void WaveComplete(int obj)
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x129D9FC", Offset = "0x129D9FC", VA = "0x129D9FC")]
	private void LevelStart()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x129DA0C", Offset = "0x129DA0C", VA = "0x129DA0C")]
	private void LevelLeave()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0x129DA1C", Offset = "0x129DA1C", VA = "0x129DA1C", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x129DE14", Offset = "0x129DE14", VA = "0x129DE14")]
	public GameEventsAudioPlayer()
	{
	}
}
[Token(Token = "0x20000C7")]
public class HealthAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_spawn;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_death;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_damaged;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioEventDescription m_lowHealth;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioEventDescription m_fallen;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioEventDescription m_rescued;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioEventDescription m_passiveAudio;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Usually this should be true (3D audio) but it could be false (2D) for some cases like the player.")]
	[SerializeField]
	private bool m_lowHealthAudio3D;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float m_lowHealthAudioThreshold;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioParameter m_healthNormalizedParameter;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private AudioParameter m_healthNormalizedChange;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x129DE1C", Offset = "0x129DE1C", VA = "0x129DE1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x129DE74", Offset = "0x129DE74", VA = "0x129DE74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x129E498", Offset = "0x129E498", VA = "0x129E498")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x129EA88", Offset = "0x129EA88", VA = "0x129EA88")]
	private void LeavingMatch()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x129EA98", Offset = "0x129EA98", VA = "0x129EA98", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x129EB90", Offset = "0x129EB90", VA = "0x129EB90")]
	private void OnInitialise()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x129EB40", Offset = "0x129EB40", VA = "0x129EB40")]
	private void OnSpawn()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x129EC80", Offset = "0x129EC80", VA = "0x129EC80")]
	private void OnDeSpawn()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x129ED10", Offset = "0x129ED10", VA = "0x129ED10")]
	private void OnDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x129ED80", Offset = "0x129ED80", VA = "0x129ED80")]
	private void OnHealthDecreased(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x129F14C", Offset = "0x129F14C", VA = "0x129F14C")]
	private void OnHealthIncreasedAfterDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x129F150", Offset = "0x129F150", VA = "0x129F150")]
	private void OnHealthIncreased(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x129F1C0", Offset = "0x129F1C0", VA = "0x129F1C0")]
	private void OnGlobalRescue(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x129F078", Offset = "0x129F078", VA = "0x129F078")]
	private void PlayLowHealthAudio(float normalizedHealth)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x129F234", Offset = "0x129F234", VA = "0x129F234")]
	private void OnGlobalFallen(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x129EB94", Offset = "0x129EB94", VA = "0x129EB94")]
	private void StopLowHealthAudio()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x129EBF4", Offset = "0x129EBF4", VA = "0x129EBF4")]
	public void StartPassiveAudio()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x129ECB0", Offset = "0x129ECB0", VA = "0x129ECB0")]
	public void StopPassiveAudio()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x129F350", Offset = "0x129F350", VA = "0x129F350")]
	public HealthAudioPlayer()
	{
	}
}
[Token(Token = "0x20000C8")]
public class HealthItemAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_healthItemUse;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private VrHealthItem m_healthItemUsed;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnHealthItemUsed;

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x129F400", Offset = "0x129F400", VA = "0x129F400")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x129F458", Offset = "0x129F458", VA = "0x129F458")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x129F534", Offset = "0x129F534", VA = "0x129F534")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x129F610", Offset = "0x129F610", VA = "0x129F610", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x129F638", Offset = "0x129F638", VA = "0x129F638")]
	private void HealthItemUse()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x129F6D8", Offset = "0x129F6D8", VA = "0x129F6D8", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x129F6DC", Offset = "0x129F6DC", VA = "0x129F6DC")]
	public HealthItemAudioPlayer()
	{
	}
}
[Token(Token = "0x20000C9")]
public class State_AudioEnterResultsScreen : BaseStateAttachedLogic
{
	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x129F6E4", Offset = "0x129F6E4", VA = "0x129F6E4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x129F7B4", Offset = "0x129F7B4", VA = "0x129F7B4")]
	public State_AudioEnterResultsScreen()
	{
	}
}
[Token(Token = "0x20000CA")]
public class State_AudioInitialize : BaseStateAttachedLogic
{
	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x129F7BC", Offset = "0x129F7BC", VA = "0x129F7BC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x129F948", Offset = "0x129F948", VA = "0x129F948")]
	public State_AudioInitialize()
	{
	}
}
[Token(Token = "0x20000CB")]
public class State_AudioLevelLoading : BaseStateAttachedLogic
{
	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x129F950", Offset = "0x129F950", VA = "0x129F950", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x129FA20", Offset = "0x129FA20", VA = "0x129FA20")]
	public State_AudioLevelLoading()
	{
	}
}
[Token(Token = "0x20000CC")]
public class State_AudioSetPaused : BaseStateAttachedLogic
{
	[Token(Token = "0x1700008B")]
	[StateConfig("Paused Value")]
	public bool Paused
	{
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x129FA28", Offset = "0x129FA28", VA = "0x129FA28")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x129FA30", Offset = "0x129FA30", VA = "0x129FA30")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x129FA3C", Offset = "0x129FA3C", VA = "0x129FA3C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x129FAA8", Offset = "0x129FAA8", VA = "0x129FAA8")]
	public State_AudioSetPaused()
	{
	}
}
[Token(Token = "0x20000CD")]
public class State_FrontEndMusicOutro : BaseStateAttachedLogic
{
	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x129FAB0", Offset = "0x129FAB0", VA = "0x129FAB0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x129FB1C", Offset = "0x129FB1C", VA = "0x129FB1C")]
	public State_FrontEndMusicOutro()
	{
	}
}
[Token(Token = "0x20000CE")]
public class State_FrontEndMusicStart : BaseStateAttachedLogic
{
	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x129FB24", Offset = "0x129FB24", VA = "0x129FB24", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x129FBE8", Offset = "0x129FBE8", VA = "0x129FBE8")]
	public State_FrontEndMusicStart()
	{
	}
}
[Token(Token = "0x20000CF")]
public class State_FrontEndMusicStop : BaseStateAttachedLogic
{
	[Token(Token = "0x6000400")]
	[Address(RVA = "0x129FBF0", Offset = "0x129FBF0", VA = "0x129FBF0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x129FCB4", Offset = "0x129FCB4", VA = "0x129FCB4")]
	public State_FrontEndMusicStop()
	{
	}
}
[Token(Token = "0x20000D0")]
public class State_LegalScreenMusicStart : BaseStateAttachedLogic
{
	[Token(Token = "0x6000402")]
	[Address(RVA = "0x129FCBC", Offset = "0x129FCBC", VA = "0x129FCBC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x129FD80", Offset = "0x129FD80", VA = "0x129FD80")]
	public State_LegalScreenMusicStart()
	{
	}
}
[Token(Token = "0x20000D1")]
public class State_LegalScreenMusicStop : BaseStateAttachedLogic
{
	[Token(Token = "0x6000404")]
	[Address(RVA = "0x129FD88", Offset = "0x129FD88", VA = "0x129FD88", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x129FE4C", Offset = "0x129FE4C", VA = "0x129FE4C")]
	public State_LegalScreenMusicStop()
	{
	}
}
[Token(Token = "0x20000D2")]
public class State_LoadingAudioSnapshotStart : BaseStateAttachedLogic
{
	[Token(Token = "0x6000406")]
	[Address(RVA = "0x129FE54", Offset = "0x129FE54", VA = "0x129FE54", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x129FEC0", Offset = "0x129FEC0", VA = "0x129FEC0")]
	public State_LoadingAudioSnapshotStart()
	{
	}
}
[Token(Token = "0x20000D3")]
public class State_LoadingAudioSnapshotStop : BaseStateAttachedLogic
{
	[Token(Token = "0x1700008C")]
	[StateConfig("Allow Fade Out")]
	public bool AllowFadeOut
	{
		[Token(Token = "0x6000408")]
		[Address(RVA = "0x129FEC8", Offset = "0x129FEC8", VA = "0x129FEC8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000409")]
		[Address(RVA = "0x129FED0", Offset = "0x129FED0", VA = "0x129FED0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x129FEDC", Offset = "0x129FEDC", VA = "0x129FEDC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x129FF48", Offset = "0x129FF48", VA = "0x129FF48")]
	public State_LoadingAudioSnapshotStop()
	{
	}
}
[Token(Token = "0x20000D4")]
public class State_LogoCabinMusicStart : BaseStateAttachedLogic
{
	[Token(Token = "0x600040C")]
	[Address(RVA = "0x129FF58", Offset = "0x129FF58", VA = "0x129FF58", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x12A001C", Offset = "0x12A001C", VA = "0x12A001C")]
	public State_LogoCabinMusicStart()
	{
	}
}
[Token(Token = "0x20000D5")]
public class State_LogoCabinMusicStop : BaseStateAttachedLogic
{
	[Token(Token = "0x600040E")]
	[Address(RVA = "0x12A0024", Offset = "0x12A0024", VA = "0x12A0024", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x12A00E8", Offset = "0x12A00E8", VA = "0x12A00E8")]
	public State_LogoCabinMusicStop()
	{
	}
}
[Token(Token = "0x20000D6")]
public class State_LogoSAMusicStart : BaseStateAttachedLogic
{
	[Token(Token = "0x6000410")]
	[Address(RVA = "0x12A00F0", Offset = "0x12A00F0", VA = "0x12A00F0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x12A01B4", Offset = "0x12A01B4", VA = "0x12A01B4")]
	public State_LogoSAMusicStart()
	{
	}
}
[Token(Token = "0x20000D7")]
public class State_LogoSAMusicStop : BaseStateAttachedLogic
{
	[Token(Token = "0x6000412")]
	[Address(RVA = "0x12A01BC", Offset = "0x12A01BC", VA = "0x12A01BC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x12A0280", Offset = "0x12A0280", VA = "0x12A0280")]
	public State_LogoSAMusicStop()
	{
	}
}
[Token(Token = "0x20000D8")]
public class State_StopChapterAudio : BaseStateAttachedLogic
{
	[Token(Token = "0x6000414")]
	[Address(RVA = "0x12A0288", Offset = "0x12A0288", VA = "0x12A0288", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x12A0344", Offset = "0x12A0344", VA = "0x12A0344")]
	public State_StopChapterAudio()
	{
	}
}
[Token(Token = "0x20000D9")]
public class State_TitleCardAudioSnapshotStart : BaseStateAttachedLogic
{
	[Token(Token = "0x6000416")]
	[Address(RVA = "0x12A034C", Offset = "0x12A034C", VA = "0x12A034C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0x12A03B8", Offset = "0x12A03B8", VA = "0x12A03B8")]
	public State_TitleCardAudioSnapshotStart()
	{
	}
}
[Token(Token = "0x20000DA")]
public class State_TitleCardAudioSnapshotStop : BaseStateAttachedLogic
{
	[Token(Token = "0x1700008D")]
	[StateConfig("Allow Fade Out")]
	public bool AllowFadeOut
	{
		[Token(Token = "0x6000418")]
		[Address(RVA = "0x12A03C0", Offset = "0x12A03C0", VA = "0x12A03C0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000419")]
		[Address(RVA = "0x12A03C8", Offset = "0x12A03C8", VA = "0x12A03C8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x12A03D4", Offset = "0x12A03D4", VA = "0x12A03D4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x12A0440", Offset = "0x12A0440", VA = "0x12A0440")]
	public State_TitleCardAudioSnapshotStop()
	{
	}
}
[Token(Token = "0x20000DB")]
public class State_TitleCardMusicPlay : BaseStateAttachedLogic
{
	[Token(Token = "0x600041C")]
	[Address(RVA = "0x12A0450", Offset = "0x12A0450", VA = "0x12A0450", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0x12A04F8", Offset = "0x12A04F8", VA = "0x12A04F8", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x12A0598", Offset = "0x12A0598", VA = "0x12A0598")]
	public State_TitleCardMusicPlay()
	{
	}
}
[Token(Token = "0x20000DC")]
public class State_UnloadLevelBanks : BaseStateAttachedLogic
{
	[Token(Token = "0x600041F")]
	[Address(RVA = "0x12A05A0", Offset = "0x12A05A0", VA = "0x12A05A0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x12A069C", Offset = "0x12A069C", VA = "0x12A069C")]
	public State_UnloadLevelBanks()
	{
	}
}
[Token(Token = "0x20000DD")]
public class ImpactManagerAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public List<AudioEventDescription> ImpactAudioDescriptions;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioEventDescription DefaultAudio;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioParameter m_impactVelocity;

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x12A06A4", Offset = "0x12A06A4", VA = "0x12A06A4", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x12A06AC", Offset = "0x12A06AC", VA = "0x12A06AC", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x12A06F0", Offset = "0x12A06F0", VA = "0x12A06F0")]
	public void InitializeImpactDescription(AudioEventDescription description)
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x12A07E8", Offset = "0x12A07E8", VA = "0x12A07E8")]
	public void PlayImpactDescription(AudioEventDescription description, Vector3 position, float velocity)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x12A08C0", Offset = "0x12A08C0", VA = "0x12A08C0")]
	public ImpactManagerAudioPlayer()
	{
	}
}
[Token(Token = "0x20000DE")]
public class InfoscreenAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_infoscreenIdleLoop;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_updateInfoOnScreenSfx;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[UnityEngine.Tooltip("Check this to play the oneshot sfxs only the first time")]
	private bool m_playOnlyFirstTime;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_screenOnOffSfx;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Check this field if you need to play screen On sfx, uncheck it for a turn Off sfx")]
	[SerializeField]
	private bool m_onOffSwitch;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool m_initializedDescriptions;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool onOffAlreadyPlayed;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool infoAlreadyPlayed;

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x12A0948", Offset = "0x12A0948", VA = "0x12A0948", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x12A0950", Offset = "0x12A0950", VA = "0x12A0950", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x12A09AC", Offset = "0x12A09AC", VA = "0x12A09AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x12A0B38", Offset = "0x12A0B38", VA = "0x12A0B38")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x12A09D8", Offset = "0x12A09D8", VA = "0x12A09D8")]
	public void PlayAllOnEnable()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x12A0B98", Offset = "0x12A0B98", VA = "0x12A0B98", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x12A0BAC", Offset = "0x12A0BAC", VA = "0x12A0BAC")]
	public InfoscreenAudioPlayer()
	{
	}
}
[Token(Token = "0x20000DF")]
public class MechanismAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_audioOnLowThreshold;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_audioOnHighThreshold;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_audioOnLockdown;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[FormerlySerializedAs("m_deltaProjectionThreshold")]
	private float m_movementDeltaThreshold;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioEventDescription m_buttonMoveAudio;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("m_deltaProjectionParameter")]
	[SerializeField]
	private AudioParameter m_deltaParameter;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_prevPosition;

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x12A0BBC", Offset = "0x12A0BBC", VA = "0x12A0BBC", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x12A0BC4", Offset = "0x12A0BC4", VA = "0x12A0BC4", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x12A0C28", Offset = "0x12A0C28", VA = "0x12A0C28")]
	public void OnStart(float position)
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x12A0C30", Offset = "0x12A0C30", VA = "0x12A0C30")]
	public void OnLowThreshold()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x12A0C78", Offset = "0x12A0C78", VA = "0x12A0C78")]
	public void OnHighThreshold()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x12A0CC0", Offset = "0x12A0CC0", VA = "0x12A0CC0", Slot = "27")]
	public virtual void OnLock()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x12A0D20", Offset = "0x12A0D20", VA = "0x12A0D20")]
	public void OnTriggerCheck(float position)
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x12A0DE8", Offset = "0x12A0DE8", VA = "0x12A0DE8")]
	public MechanismAudioPlayer()
	{
	}
}
[Token(Token = "0x20000E0")]
public class ParticleSystemAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem m_system;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] m_particles;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_particleAudio;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("The audio will loop as long as the particle system is playing.")]
	[SerializeField]
	private bool m_useLoop;

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x12A0E04", Offset = "0x12A0E04", VA = "0x12A0E04", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x12A0ED8", Offset = "0x12A0ED8", VA = "0x12A0ED8", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x12A0F00", Offset = "0x12A0F00", VA = "0x12A0F00")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x12A101C", Offset = "0x12A101C", VA = "0x12A101C", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x12A1024", Offset = "0x12A1024", VA = "0x12A1024")]
	public ParticleSystemAudioPlayer()
	{
	}
}
[Token(Token = "0x20000E1")]
public class PlayerFootstepAudioPlayer : AbstractAudioPlayer
{
	[Serializable]
	[Token(Token = "0x20000E2")]
	public struct MaterialAudioMapping
	{
		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string materialName;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PhysicMaterial m_material;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioEventDescription m_audioEventDescription;
	}

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_raycastLength;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("The frequency (in sec) with which the footsteps play when walking")]
	[SerializeField]
	private float m_walkStepFrequency;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("The frequency (in sec) with which the footsteps play when sprinting")]
	[SerializeField]
	private float m_sprintStepFrequency;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Audio Descriptions")]
	[SerializeField]
	private AudioEventDescription m_defaultFootstep;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_defaultLanding;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioEventDescription m_sprintCooldown;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private MaterialAudioMapping[] m_footstepMaterialAudioMappings;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private MaterialAudioMapping[] m_landingMaterialAudioMappings;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private SimpleVelocityTracker m_velocityTracker;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float m_stepFilter;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float m_sprintFilter;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<string> m_availableMaterials;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LayerMask m_mask;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_nextRefreshTime;

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x12A102C", Offset = "0x12A102C", VA = "0x12A102C", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x12A1034", Offset = "0x12A1034", VA = "0x12A1034", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x12A1344", Offset = "0x12A1344", VA = "0x12A1344")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x12A14D4", Offset = "0x12A14D4", VA = "0x12A14D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x12A1664", Offset = "0x12A1664", VA = "0x12A1664")]
	private void Update()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x12A1A0C", Offset = "0x12A1A0C", VA = "0x12A1A0C")]
	private void PlayFootstepAudio(PhysicMaterial material)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x12A1BCC", Offset = "0x12A1BCC", VA = "0x12A1BCC")]
	private void PlayLandingAudio(PhysicMaterial material)
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x12A1D8C", Offset = "0x12A1D8C", VA = "0x12A1D8C")]
	private void OnSprintCooldownStart()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x12A1D9C", Offset = "0x12A1D9C", VA = "0x12A1D9C")]
	private void OnSprintCooldownEnds()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x12A18FC", Offset = "0x12A18FC", VA = "0x12A18FC")]
	private PhysicMaterial GetMaterialFromRaycast(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x12A1DB0", Offset = "0x12A1DB0", VA = "0x12A1DB0")]
	public PlayerFootstepAudioPlayer()
	{
	}
}
[Token(Token = "0x20000E3")]
[CreateAssetMenu(menuName = "Cabin/Audio/Player Audio Lines")]
public class PlayerVOAudioEvents : ScriptableObject
{
	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("clientLines")]
	public List<AudioLineList> audioLines;

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x12A1E5C", Offset = "0x12A1E5C", VA = "0x12A1E5C")]
	public PlayerVOAudioEvents()
	{
	}
}
[Serializable]
[Token(Token = "0x20000E4")]
public class AudioLine
{
	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public string prefix;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hasGameEvent;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[ConditionalVisibility("hasGameEvent", "gameEvent", false)]
	public GameEvent gameEvent;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<VOEvent> audioEvent;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("This is true if we don't need any additional conditions to trigger this event")]
	public bool defaultCall;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool playFirstTimeOnly;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[UnityEngine.Tooltip("This is true if we want this line to be audible for all the players")]
	public bool isRemoteAudioLine;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	[UnityEngine.Tooltip("This is true if we are triggering this event from the server")]
	public bool isServerAudioTrigger;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[ConditionalVisibility("isServerAudioTrigger", "isSpecificAudio", false)]
	public bool isPlayerSpecificAudio;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[ConditionalVisibility("isPlayerSpecificAudio", "replicateInRemote", false)]
	public bool replicateInRemote;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	[UnityEngine.Tooltip("Play this audio line on FTUE")]
	public bool playInFTUE;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	[UnityEngine.Tooltip("Force play even in end screen")]
	public bool forcePlay;

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x12A1E64", Offset = "0x12A1E64", VA = "0x12A1E64")]
	public bool IsConversation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x12A1EBC", Offset = "0x12A1EBC", VA = "0x12A1EBC")]
	public string GetKey()
	{
		return null;
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x12A1EC8", Offset = "0x12A1EC8", VA = "0x12A1EC8")]
	public AudioLine()
	{
	}
}
[Serializable]
[Token(Token = "0x20000E5")]
public class AudioLineList
{
	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AudioLine> audioLines;

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x12A1F5C", Offset = "0x12A1F5C", VA = "0x12A1F5C")]
	public AudioLineList()
	{
	}
}
[Token(Token = "0x20000E6")]
public class PlayerVOAudioPlayer : VOAudioPlayer
{
	[Serializable]
	[Token(Token = "0x20000E7")]
	public class AudioWeaponGrabEvent
	{
		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VOEvent weaponPickUp;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Identifier[] identifiers;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool checkOnlyFirstTime;

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x12A7EFC", Offset = "0x12A7EFC", VA = "0x12A7EFC")]
		public AudioWeaponGrabEvent()
		{
		}
	}

	[Token(Token = "0x20000E8")]
	[CompilerGenerated]
	private sealed class <SubscribeToWaveManagerEvents>d__113 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700008E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000488")]
			[Address(RVA = "0x12A7F88", Offset = "0x12A7F88", VA = "0x12A7F88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600048A")]
			[Address(RVA = "0x12A7FD0", Offset = "0x12A7FD0", VA = "0x12A7FD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x12A37A0", Offset = "0x12A37A0", VA = "0x12A37A0")]
		[DebuggerHidden]
		public <SubscribeToWaveManagerEvents>d__113(int <>1__state)
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x12A7F04", Offset = "0x12A7F04", VA = "0x12A7F04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x12A7F08", Offset = "0x12A7F08", VA = "0x12A7F08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x12A7F90", Offset = "0x12A7F90", VA = "0x12A7F90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000E9")]
	[CompilerGenerated]
	private sealed class <ZoneReminder>d__152 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerVOAudioPlayer <>4__this;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string audio;

		[Token(Token = "0x17000090")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600048E")]
			[Address(RVA = "0x12A8094", Offset = "0x12A8094", VA = "0x12A8094", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000490")]
			[Address(RVA = "0x12A80DC", Offset = "0x12A80DC", VA = "0x12A80DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x12A6BA8", Offset = "0x12A6BA8", VA = "0x12A6BA8")]
		[DebuggerHidden]
		public <ZoneReminder>d__152(int <>1__state)
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x12A7FD8", Offset = "0x12A7FD8", VA = "0x12A7FD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x12A7FDC", Offset = "0x12A7FDC", VA = "0x12A7FDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x12A809C", Offset = "0x12A809C", VA = "0x12A809C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EA")]
	[CompilerGenerated]
	private sealed class <NoEnemiesForAWhile>d__165 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerVOAudioPlayer <>4__this;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string audio;

		[Token(Token = "0x17000092")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000494")]
			[Address(RVA = "0x12A81BC", Offset = "0x12A81BC", VA = "0x12A81BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000093")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000496")]
			[Address(RVA = "0x12A8204", Offset = "0x12A8204", VA = "0x12A8204", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x12A6FFC", Offset = "0x12A6FFC", VA = "0x12A6FFC")]
		[DebuggerHidden]
		public <NoEnemiesForAWhile>d__165(int <>1__state)
		{
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x12A80E4", Offset = "0x12A80E4", VA = "0x12A80E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x12A80E8", Offset = "0x12A80E8", VA = "0x12A80E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x12A81C4", Offset = "0x12A81C4", VA = "0x12A81C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EB")]
	[CompilerGenerated]
	private sealed class <EnemiesWarning>d__166 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerVOAudioPlayer <>4__this;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string audio;

		[Token(Token = "0x17000094")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600049A")]
			[Address(RVA = "0x12A82D0", Offset = "0x12A82D0", VA = "0x12A82D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600049C")]
			[Address(RVA = "0x12A8318", Offset = "0x12A8318", VA = "0x12A8318", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x12A7024", Offset = "0x12A7024", VA = "0x12A7024")]
		[DebuggerHidden]
		public <EnemiesWarning>d__166(int <>1__state)
		{
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x12A820C", Offset = "0x12A820C", VA = "0x12A820C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x12A8210", Offset = "0x12A8210", VA = "0x12A8210", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x12A82D8", Offset = "0x12A82D8", VA = "0x12A82D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000EC")]
	[CompilerGenerated]
	private sealed class <PlayAudioReminder>d__184 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerVOAudioPlayer <>4__this;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string audio;

		[Token(Token = "0x17000096")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004A0")]
			[Address(RVA = "0x12A83F0", Offset = "0x12A83F0", VA = "0x12A83F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004A2")]
			[Address(RVA = "0x12A8438", Offset = "0x12A8438", VA = "0x12A8438", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x12A7D2C", Offset = "0x12A7D2C", VA = "0x12A7D2C")]
		[DebuggerHidden]
		public <PlayAudioReminder>d__184(int <>1__state)
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x12A8320", Offset = "0x12A8320", VA = "0x12A8320", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x12A8324", Offset = "0x12A8324", VA = "0x12A8324", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x12A83F8", Offset = "0x12A83F8", VA = "0x12A83F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private HealthStatus m_playerHealthStatus;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool m_isLocalPlayer;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	[Header("General Events Subscriptions")]
	private GameEvent m_playerCloseToGenerator;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private GameEvent m_playerFarFromGenerator;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private GameEvent m_playerCloseToBattery;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private GameEvent m_playerFarFromToBattery;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private GameEvent m_placeFuelOnGeneratorMain;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private GameEvent m_placeFuelOnGeneratorFTUE;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private GameEvent m_onComputerEvent;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private GameEvent m_extractionTimerFinishedEvent;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private GameEvent m_1pExtractionComplete;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private GameEvent m_2pExtractionComplete;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SerializeField]
	private GameEvent m_startTimer;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SerializeField]
	private GameEvent m_onNotEnoughGatePoints;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[SerializeField]
	private GameEvent m_onDefendObjectDamaged;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private GameEvent m_startKOTHZoneReminder;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private GameEvent m_StopKOTHZoneReminder;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private GameEvent m_TowerUnexploredAfter12Mins;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private GameEvent m_UpstairsUnexploredAfter7Mins;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	private GameEvent m_NoOpenCrateFor5Mins;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private GameEvent m_NoOpenGateFor5Mins;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	private GameEvent m_NoOpenShackFor7Mins;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[Range(0f, 1f)]
	[SerializeField]
	[Header("General VO Conditions")]
	[UnityEngine.Tooltip("Normalized health value under which the low-health VO is triggered")]
	private float m_damageThreshold;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	[SerializeField]
	[UnityEngine.Tooltip("Number of enemies after which the power-related VO is paused")]
	private int m_enemyThreshold;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[UnityEngine.Tooltip("The focus ratio that you need to see when an enemy kill another zombie (explosion / Goo)")]
	[SerializeField]
	private float m_focusRatio;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	[SerializeField]
	[UnityEngine.Tooltip("The max distance that allow you to see when an enemy kill another zombie (explosion / Goo)")]
	private float m_maxEnemyHitDistance;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	[UnityEngine.Tooltip("Amount (in seconds) after which the reminder is played")]
	private float m_frontDoorReminderTime;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private AudioWeaponGrabEvent[] m_audioItemsGrabEvents;

	[Token(Token = "0x40004A3")]
	private const string c_damage = "HLTHDamage";

	[Token(Token = "0x40004A4")]
	private const string c_damageLow = "HLTHDamageLow";

	[Token(Token = "0x40004A5")]
	private const string c_death = "HLTHDeath";

	[Token(Token = "0x40004A6")]
	private const string c_playerDowned = "HLTHPlayerDowned";

	[Token(Token = "0x40004A7")]
	private const string c_buddyDowned = "HLTHBuddyDowned";

	[Token(Token = "0x40004A8")]
	private const string c_enterFrontRoom = "FTUE006EnterCabinEvent";

	[Token(Token = "0x40004A9")]
	private const string c_approachBrokenBattery1st = "POWERApproachBrokenBattery";

	[Token(Token = "0x40004AA")]
	private const string c_findBatteryDamaged = "POWERFindBatteryDamaged";

	[Token(Token = "0x40004AB")]
	private const string c_approachGenerator1st = "POWERApproachBrokenGen";

	[Token(Token = "0x40004AC")]
	private const string c_findGeneratorDamaged = "POWERFindGenDamaged";

	[Token(Token = "0x40004AD")]
	private const string c_powerOff = "POWERPowerGoesOut";

	[Token(Token = "0x40004AE")]
	private const string c_batteryBroken = "POWERBatteryBroken";

	[Token(Token = "0x40004AF")]
	private const string c_generatorOff = "POWERGeneratorOff";

	[Token(Token = "0x40004B0")]
	private const string c_generatorNeedStarting = "POWERGeneratorNeedStart";

	[Token(Token = "0x40004B1")]
	private const string c_generatorOutOfFuelFirstTime = "POWERGeneratorOutOfFuel";

	[Token(Token = "0x40004B2")]
	private const string c_placeFuelOnGen1stSequence = "POWERPlaceFuelOnGeneratorFirst";

	[Token(Token = "0x40004B3")]
	private const string c_fuelAddedToGenerator = "POWERPlaceFuelOnGenerator";

	[Token(Token = "0x40004B4")]
	private const string c_fuelAddedToGenFTUE = "FTUEFTUEFuelAttachedEvent";

	[Token(Token = "0x40004B5")]
	private const string c_powerBackOn = "POWERPowerBackOn";

	[Token(Token = "0x40004B6")]
	private const string c_batteryFixed = "POWERBatteryFixed";

	[Token(Token = "0x40004B7")]
	private const string c_firstBasicZombieSeen = "GAMFirstBasicZombieSeen";

	[Token(Token = "0x40004B8")]
	private const string c_firstFastZombieSeen = "GAMFirstFastZombieSeen";

	[Token(Token = "0x40004B9")]
	private const string c_firstExploderZombieSeen = "GAMFirstExploderZombieSeen";

	[Token(Token = "0x40004BA")]
	private const string c_firstForestZombieSeen = "GAMFirstForestZombieSeen";

	[Token(Token = "0x40004BB")]
	private const string c_firstSpitterZombieSeen = "GAMFirstSpitterZombieSeen";

	[Token(Token = "0x40004BC")]
	private const string c_firstHitByGoo = "GAMFirstHitByGoo";

	[Token(Token = "0x40004BD")]
	private const string c_firstHitByExpl = "GAMFirstHitByExpl";

	[Token(Token = "0x40004BE")]
	private const string c_firstHitByCharge = "GAMFirstHitByCharge";

	[Token(Token = "0x40004BF")]
	private const string c_firstHitByPunch = "GAMFirstHitByPunch";

	[Token(Token = "0x40004C0")]
	private const string c_noAmmoInPouch = "GAMNoAmmoInPouch";

	[Token(Token = "0x40004C1")]
	private const string c_ammoInMagazineRunsOut = "GAMAmmoMagazineRunsOut";

	[Token(Token = "0x40004C2")]
	private const string c_healthItemUsed = "GAMHealthItemUsed";

	[Token(Token = "0x40004C3")]
	private const string c_halfBarricadesDestroyed = "GAMHalfBarricadesDestroyed";

	[Token(Token = "0x40004C4")]
	private const string c_allBarricadesDestroyed = "GAMAllBarricadesDestroyed";

	[Token(Token = "0x40004C5")]
	private const string c_firstHeadshot = "GAMFirstHeadshot";

	[Token(Token = "0x40004C6")]
	private const string c_tenthHeadshot = "GAMTenthHeadshot";

	[Token(Token = "0x40004C7")]
	private const string c_fiveconsecutiveHeadshot = "GAMFiveConsecutiveHeadshot";

	[Token(Token = "0x40004C8")]
	private const string c_sixconsecutiveHeadshot = "GAMSixConsecutiveHeadshot";

	[Token(Token = "0x40004C9")]
	private const string c_generalHeadshot = "GAMGeneralHeadshot";

	[Token(Token = "0x40004CA")]
	private const string c_generalKill = "GAMGeneralKill";

	[Token(Token = "0x40004CB")]
	private const string c_generalCombat = "GAMGeneralCombat";

	[Token(Token = "0x40004CC")]
	private const string c_noNewZomFor35sec = "OBJNoNewZomFor35sec";

	[Token(Token = "0x40004CD")]
	private const string c_manyZombiesAliveFor1min = "GAMManyZomAliveFor1Min";

	[Token(Token = "0x40004CE")]
	private const string c_zomDieFromExplosion = "GAMEnemyDiesFromExplosion";

	[Token(Token = "0x40004CF")]
	private const string c_zomDieFromGoo = "GAMEnemyDiesFromGoo";

	[Token(Token = "0x40004D0")]
	private const string c_notEnoughGatePoints = "GAMNotEnoughGatePoints";

	[Token(Token = "0x40004D1")]
	private const string c_onDefendDamagedEvent = "OBJOnDefendDamagedEvent";

	[Token(Token = "0x40004D2")]
	private const string c_zoneReminder = "OBJZoneReminder";

	[Token(Token = "0x40004D3")]
	private const string c_towerUnexploredAfter12Mins = "GAMTowerUnexploredAfter12Mins";

	[Token(Token = "0x40004D4")]
	private const string c_upstairsUnexploredAfter7Mins = "GAMUpstairsUnexploredAfter7Mins";

	[Token(Token = "0x40004D5")]
	private const string c_noOpenCrateFor5Mins = "GAMNoOpenCrateFor5Mins";

	[Token(Token = "0x40004D6")]
	private const string c_noOpenGateFor5Mins = "GAMNoOpenGateFor5Mins";

	[Token(Token = "0x40004D7")]
	private const string c_noOpenShackFor7Mins = "GAMNoOpenShackFor7Mins";

	[Token(Token = "0x40004D8")]
	private const string c_pilotFrontDoorOpened = "RADIOPilot_FrontDoorOpened";

	[Token(Token = "0x40004D9")]
	private const string c_pilotFrontDoorOpenedRemider = "RADIOPilot_FrontDoorOpenedReminder";

	[Token(Token = "0x40004DA")]
	private const string c_pilotPowerDown = "EXTPowerDown";

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private List<AudioWeaponGrabEvent> m_audioWeaponGrabEventsList;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private bool m_PowerOutAlready;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E9")]
	private bool m_generatorOutOfFuel;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EA")]
	private bool m_consecutiveHeadshotPlayed;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EB")]
	private bool m_isPlayerCloseToGenerator;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	private bool m_isPlayerCloseToBattery;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1ED")]
	private bool m_1stFuelAdded;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EE")]
	private bool m_1stFuelAddedFTUE;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EF")]
	private bool m_isBatteryBroken;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private bool m_1stTimeBatteryBroken;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
	private bool m_1stTimeGeneratorBroken;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F2")]
	private bool m_brokenGenVOAlreadyPlayed;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F3")]
	private bool m_brokenBattVOAlreadyPlayed;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	private bool m_generatorAlreadySeen;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F5")]
	private bool m_isInFocalPoint;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F6")]
	private bool m_hasDiedFromGooPlayed;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F7")]
	private bool m_hasDiedFromExplPlayed;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private bool m_PowerSystemEventsSubscribed;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F9")]
	private bool m_timerFinished;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FA")]
	private bool m_generatorVOplaying;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FB")]
	private bool m_batteryVOplaying;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	private int m_consecutivesHeadShots;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private int m_headShots;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
	private int m_zombiesCount;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private string m_lastAmmoEvent;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private bool m_extractionTimerHasFinished;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
	private bool m_extractionTimerStarted;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
	private bool m_spitterAudioPlayed;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x213")]
	private bool m_exploderAudioPlayed;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	private bool m_forestExplosionAudioPlayed;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x215")]
	private bool m_forestChargeAudioPlayed;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private int destroyedBarricade;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private float m_lastTimeGateAudio;

	[Token(Token = "0x40004FD")]
	private const float m_unavailableTime = 20f;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private float m_lastTimeZoneAudio;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
	private float m_waitingTime;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private bool m_isZoneReminderPlaying;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private Coroutine m_KOTHZoneReminder;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private Coroutine m_enemiesWarning;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private Coroutine m_noEnemiesFor35sec;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private bool m_hasNoEnemiesPlayed;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private string m_lastGeneratorState;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private VOEvent m_lastBatteryState;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private Coroutine m_openDoorRemiderCoroutine;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private Coroutine m_extractionTimeReminderCoroutine;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private Coroutine m_chopperTimeReminderCoroutine;

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x12A1F64", Offset = "0x12A1F64", VA = "0x12A1F64", Slot = "30")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x12A233C", Offset = "0x12A233C", VA = "0x12A233C", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x12A3608", Offset = "0x12A3608", VA = "0x12A3608")]
	[IteratorStateMachine(typeof(<SubscribeToWaveManagerEvents>d__113))]
	private IEnumerator SubscribeToWaveManagerEvents()
	{
		return null;
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x12A37C8", Offset = "0x12A37C8", VA = "0x12A37C8", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x12A4D7C", Offset = "0x12A4D7C", VA = "0x12A4D7C", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x12A4E08", Offset = "0x12A4E08", VA = "0x12A4E08", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x12A51C8", Offset = "0x12A51C8", VA = "0x12A51C8", Slot = "35")]
	protected override void ResetVOVariables()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x12A5380", Offset = "0x12A5380", VA = "0x12A5380")]
	private void ExtractionComplete()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x12A5394", Offset = "0x12A5394", VA = "0x12A5394")]
	private void ResultScreen()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x12A5398", Offset = "0x12A5398", VA = "0x12A5398")]
	private void AgentAdded(IAgent agent)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x12A5744", Offset = "0x12A5744", VA = "0x12A5744", Slot = "32")]
	protected override void StartGame()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x12A575C", Offset = "0x12A575C", VA = "0x12A575C")]
	private void AgentRemoved(IAgent agent)
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x12A5824", Offset = "0x12A5824", VA = "0x12A5824")]
	private void ExtractionTimerStarted()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x12A5830", Offset = "0x12A5830", VA = "0x12A5830")]
	private void ExtractionTimerFinished()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x12A5AE0", Offset = "0x12A5AE0", VA = "0x12A5AE0")]
	private void OnDeSpawn()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x12A5AF0", Offset = "0x12A5AF0", VA = "0x12A5AF0")]
	private void OnDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x12A5AF4", Offset = "0x12A5AF4", VA = "0x12A5AF4")]
	public void PlayDeathVO()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x12A5E1C", Offset = "0x12A5E1C", VA = "0x12A5E1C")]
	private void OnHealthIncreased(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x12A5EC0", Offset = "0x12A5EC0", VA = "0x12A5EC0")]
	private void OnHealthItemUsed()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x12A5F14", Offset = "0x12A5F14", VA = "0x12A5F14")]
	private void OnHealthDecreased(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x12A62C8", Offset = "0x12A62C8", VA = "0x12A62C8")]
	private void OnGlobalFallen(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x12A63CC", Offset = "0x12A63CC", VA = "0x12A63CC")]
	public void OnPlayerEnterFrontRoom()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x12A6638", Offset = "0x12A6638", VA = "0x12A6638")]
	private void OnBarricadeDestroyed()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x12A66DC", Offset = "0x12A66DC", VA = "0x12A66DC")]
	public void EnterFocalPoint(int wave)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x12A67A4", Offset = "0x12A67A4", VA = "0x12A67A4")]
	public void ExitFocalPoint(int i)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x12A69A0", Offset = "0x12A69A0", VA = "0x12A69A0")]
	private void NotEnoughGatePoints()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x12A6A20", Offset = "0x12A6A20", VA = "0x12A6A20")]
	private void OnDefendObjectDamaged()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x12A6AA0", Offset = "0x12A6AA0", VA = "0x12A6AA0")]
	private void EnterZoneReminder()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x12A6BA0", Offset = "0x12A6BA0", VA = "0x12A6BA0")]
	private void StopEnterZoneReminder()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x12A6B10", Offset = "0x12A6B10", VA = "0x12A6B10")]
	[IteratorStateMachine(typeof(<ZoneReminder>d__152))]
	private IEnumerator ZoneReminder(string audio)
	{
		return null;
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x12A6BD0", Offset = "0x12A6BD0", VA = "0x12A6BD0")]
	private void OnTowerUnexploredAfter12Mins()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x12A6C38", Offset = "0x12A6C38", VA = "0x12A6C38")]
	private void OnUpstairsUnexploredAfter7Mins()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x12A6CA0", Offset = "0x12A6CA0", VA = "0x12A6CA0")]
	private void OnNoOpenCrateFor5Minss()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x12A6D08", Offset = "0x12A6D08", VA = "0x12A6D08")]
	private void OnNoOpenGateFor5Mins()
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x12A6D70", Offset = "0x12A6D70", VA = "0x12A6D70")]
	private void OnNoOpenShackFor7Mins()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x12A6DD8", Offset = "0x12A6DD8", VA = "0x12A6DD8")]
	public void OnPowerChange(bool isOn)
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x12A6DF0", Offset = "0x12A6DF0", VA = "0x12A6DF0")]
	private void PowerOn()
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x12A67AC", Offset = "0x12A67AC", VA = "0x12A67AC")]
	private void PowerOff()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x12A5460", Offset = "0x12A5460", VA = "0x12A5460")]
	private void UpdatePowerOnEnemyCount()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x12A6EDC", Offset = "0x12A6EDC", VA = "0x12A6EDC")]
	[IteratorStateMachine(typeof(<NoEnemiesForAWhile>d__165))]
	private IEnumerator NoEnemiesForAWhile(string audio)
	{
		return null;
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x12A6F6C", Offset = "0x12A6F6C", VA = "0x12A6F6C")]
	[IteratorStateMachine(typeof(<EnemiesWarning>d__166))]
	private IEnumerator EnemiesWarning(string audio)
	{
		return null;
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x12A704C", Offset = "0x12A704C", VA = "0x12A704C")]
	private void PlayerCloseToGenerator()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x12A7180", Offset = "0x12A7180", VA = "0x12A7180")]
	private void PlayerFarFromGenerator()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x12A7188", Offset = "0x12A7188", VA = "0x12A7188")]
	private void PlayerCloseToBattery()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x12A7264", Offset = "0x12A7264", VA = "0x12A7264")]
	private void PlayerFarFromBattery()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x12A6428", Offset = "0x12A6428", VA = "0x12A6428")]
	public void SubscribeToPowerSystemEvents()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x12A726C", Offset = "0x12A726C", VA = "0x12A726C")]
	private void PlaceFuelOnGenMain()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x12A7358", Offset = "0x12A7358", VA = "0x12A7358")]
	private void PlaceFuelOnGenFTUE()
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0x12A73CC", Offset = "0x12A73CC", VA = "0x12A73CC")]
	private void OnGeneratorState(PowerSystem system, PowerSystemState generatorState)
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0x12A7734", Offset = "0x12A7734", VA = "0x12A7734")]
	private void OnVrItemGrabbed(Identifier id, VrItem item)
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x12A784C", Offset = "0x12A784C", VA = "0x12A784C")]
	private void FirstEnemySeen(EnemyType enemyType)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x12A78EC", Offset = "0x12A78EC", VA = "0x12A78EC")]
	private void OnDamageReport(DamageReport report)
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0x12A7C20", Offset = "0x12A7C20", VA = "0x12A7C20")]
	private void OnDoorOpenEvent()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x12A7C8C", Offset = "0x12A7C8C", VA = "0x12A7C8C")]
	[IteratorStateMachine(typeof(<PlayAudioReminder>d__184))]
	private IEnumerator PlayAudioReminder(string audio, float time)
	{
		return null;
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x12A7D54", Offset = "0x12A7D54", VA = "0x12A7D54")]
	private void OnComputerEvent()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x12A7DAC", Offset = "0x12A7DAC", VA = "0x12A7DAC")]
	public void OnChopperArrives()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x12A7DB8", Offset = "0x12A7DB8", VA = "0x12A7DB8")]
	public PlayerVOAudioPlayer()
	{
	}
}
[Token(Token = "0x20000ED")]
public class PointConsumerAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_pointsTransfer;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_insufficientPoints;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_accessGranted;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ResearchPointConsumer m_pointConsumer;

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x12A8440", Offset = "0x12A8440", VA = "0x12A8440")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x12A8498", Offset = "0x12A8498", VA = "0x12A8498")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x12A8714", Offset = "0x12A8714", VA = "0x12A8714")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x12A8990", Offset = "0x12A8990", VA = "0x12A8990", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x12A89E0", Offset = "0x12A89E0", VA = "0x12A89E0")]
	private void OnAccessGranted()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x12A8A40", Offset = "0x12A8A40", VA = "0x12A8A40")]
	private void OnInsufficientPoints()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x12A8A88", Offset = "0x12A8A88", VA = "0x12A8A88")]
	private void OnTimerStart()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x12A8AD0", Offset = "0x12A8AD0", VA = "0x12A8AD0")]
	private void OnTimerStop()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x12A8AE4", Offset = "0x12A8AE4", VA = "0x12A8AE4")]
	public PointConsumerAudioPlayer()
	{
	}
}
[Token(Token = "0x20000EE")]
public class PowerSystemAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Battery Audio")]
	[SerializeField]
	private AudioEventDescription m_batteryLoop;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_rtBatteryLoop;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform m_batteryTransform;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_rtBatteryTransform1;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_rtBatteryTransform2;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private HealthStatus m_batteryHealthStatus;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Lights Audio")]
	private AudioSimplePlayer[] m_lightsAudioPlayers;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Fridge")]
	[SerializeField]
	private AudioEventDescription m_fridgeAudio;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform m_fridgeTransform;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_rtFridgeTransform;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Computer Audio")]
	[SerializeField]
	private AudioEventDescription m_computerAudio;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform m_computerTransform;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform m_rtComputerTransform;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Timer Audio")]
	[SerializeField]
	private GameEvent m_onTimerStart;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameEvent m_onTimerFinished;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AudioEventDescription m_timerBeep;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private AudioEventDescription m_timerAlert;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Transform m_timerTransform;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[Header("Power Feedback")]
	private GameEvent m_powerChangesEventSubscription;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private AudioEventDescription m_powerUp;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private AudioEventDescription m_powerDown;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private AudioEventDescription m_generatorOff;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private AudioEventDescription m_powerSystemDamaged;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private Transform m_powerFeedbackTransform;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private HealthStatus m_generatorHealthStatus;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private AudioParameter m_batteryHealth;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool m_powerState;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
	private bool m_isSubscribedToPowerChanges;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
	private bool m_timerFinished;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF7")]
	private bool m_timerStarted;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float m_distanceTimer;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private bool m_isGamePlaying;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Range(0f, 10f)]
	public float DistanceTimerValue;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x12A8AEC", Offset = "0x12A8AEC", VA = "0x12A8AEC", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x12A8AF4", Offset = "0x12A8AF4", VA = "0x12A8AF4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x12A9104", Offset = "0x12A9104", VA = "0x12A9104")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x12A970C", Offset = "0x12A970C", VA = "0x12A970C", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x12A9878", Offset = "0x12A9878", VA = "0x12A9878")]
	private void OnTimerStart()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x12A9934", Offset = "0x12A9934", VA = "0x12A9934")]
	private void StartGame()
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x12A9940", Offset = "0x12A9940", VA = "0x12A9940")]
	private void EndGame()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x12A99BC", Offset = "0x12A99BC", VA = "0x12A99BC")]
	private void OnPowerChangeSubscription()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x12A99C8", Offset = "0x12A99C8", VA = "0x12A99C8")]
	public void OnPowerChange(bool isOn)
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x12A99F4", Offset = "0x12A99F4", VA = "0x12A99F4")]
	private void PowerOn()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x12A9C78", Offset = "0x12A9C78", VA = "0x12A9C78")]
	private void PowerOff()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x12A9F1C", Offset = "0x12A9F1C", VA = "0x12A9F1C")]
	private void OnGeneratorBroken(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x12A9F74", Offset = "0x12A9F74", VA = "0x12A9F74")]
	private void OnPowerDeviceDamaged()
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x12A9FB8", Offset = "0x12A9FB8", VA = "0x12A9FB8")]
	public void TimerFinished()
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x12AA064", Offset = "0x12AA064", VA = "0x12AA064")]
	private void OnHealthIncreased(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x12AA068", Offset = "0x12AA068", VA = "0x12AA068")]
	private void OnHealthDecreased(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x12A9E18", Offset = "0x12A9E18", VA = "0x12A9E18")]
	private void UpdateBatteryHealth()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x12AA208", Offset = "0x12AA208", VA = "0x12AA208", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x12AA224", Offset = "0x12AA224", VA = "0x12AA224")]
	public PowerSystemAudioPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000EF")]
public class PilotVOTimerReminder
{
	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public VOEvent ReminderVO;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 1f)]
	public float RemainingNormalizedTime;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public bool Played;

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x12AA2D0", Offset = "0x12AA2D0", VA = "0x12AA2D0")]
	public PilotVOTimerReminder()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F0")]
public class PilotVOExtractionReminder
{
	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public VOEvent ExtrReminderVO;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Amount (in seconds) after which the reminder is played")]
	public float ReminderTime;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public bool Played;

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x12AA2D8", Offset = "0x12AA2D8", VA = "0x12AA2D8")]
	public PilotVOExtractionReminder()
	{
	}
}
[Token(Token = "0x20000F1")]
public class RadioAudioPlayer : VOAudioPlayer
{
	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Header("Game Events Subscription")]
	private GameEvent m_onDoorOpenEvent;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private GameEvent m_onComputerEvent;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private GameEvent m_onChopperArrives;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private GameEvent m_onExtractionFail;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private GameEvent m_onExtractionSuccessSingleP;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private GameEvent m_onExtractionSuccessMultiAllP;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private GameEvent m_onExtractionSuccessMultiOnly1P;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[Header("Helicopter Pilot VO")]
	[SerializeField]
	private VOEvent m_frontDoorOpened;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private VOEvent m_frontDoorReminder;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	[UnityEngine.Tooltip("Amount (in seconds) after which the reminder is played")]
	private float m_frontDoorReminderTime;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private VOEvent m_chopperArrives;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private PilotVOTimerReminder[] m_pilotGeneralTimerReminders;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private int m_remindersPlayed;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SerializeField]
	private PilotVOExtractionReminder[] m_pilotExtractionTimerReminders;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int m_extrRemindersPlayed;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private VOEvent m_extractionFailed;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private VOEvent m_extractionSuccessAllP;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private VOEvent m_extractionSuccessOnly1P;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool m_needToPlayFRDoorReminder;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float m_frontDoortimer;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float m_nextRefreshTime;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private bool m_extractionTimerHasStarted;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AD")]
	private bool m_extractionTimerHasFinished;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private float m_timePassedAfterExtraction;

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x12AA2E0", Offset = "0x12AA2E0", VA = "0x12AA2E0", Slot = "30")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x12AA2FC", Offset = "0x12AA2FC", VA = "0x12AA2FC", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x12AA564", Offset = "0x12AA564", VA = "0x12AA564", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x12AA734", Offset = "0x12AA734", VA = "0x12AA734", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x12AA7B8", Offset = "0x12AA7B8", VA = "0x12AA7B8", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x12AA924", Offset = "0x12AA924", VA = "0x12AA924", Slot = "35")]
	protected override void ResetVOVariables()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x12AA950", Offset = "0x12AA950", VA = "0x12AA950", Slot = "29")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x12AB00C", Offset = "0x12AB00C", VA = "0x12AB00C")]
	private void OnDoorOpenEvent()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x12AB03C", Offset = "0x12AB03C", VA = "0x12AB03C")]
	private void OnComputerEvent()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x12AB054", Offset = "0x12AB054", VA = "0x12AB054")]
	public void OnChopperArrives()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x12AB084", Offset = "0x12AB084", VA = "0x12AB084")]
	private void OnFailedExtraction()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x12AB09C", Offset = "0x12AB09C", VA = "0x12AB09C")]
	private void OnSuccessfulExtractionSingleP()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x12AB0B4", Offset = "0x12AB0B4", VA = "0x12AB0B4")]
	private void OnSuccessfulExtractionMultiAllP()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x12AB0CC", Offset = "0x12AB0CC", VA = "0x12AB0CC")]
	private void OnSuccessfulExtractionMulti1P()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x12AB0E4", Offset = "0x12AB0E4", VA = "0x12AB0E4")]
	public RadioAudioPlayer()
	{
	}
}
[Token(Token = "0x20000F2")]
public class RankAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_rankUpAudio;

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x12AB138", Offset = "0x12AB138", VA = "0x12AB138")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x12AB234", Offset = "0x12AB234", VA = "0x12AB234")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x12AB330", Offset = "0x12AB330", VA = "0x12AB330", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x12AB358", Offset = "0x12AB358", VA = "0x12AB358")]
	private void OnRankUnlocked()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x12AB368", Offset = "0x12AB368", VA = "0x12AB368")]
	public RankAudioPlayer()
	{
	}
}
[Token(Token = "0x20000F3")]
public class RemotePlayerVOAudioPlayer : VOAudioPlayer
{
	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private HealthStatus m_playerHealthStatus;

	[Token(Token = "0x4000566")]
	private const string c_damage = "HLTHDamage";

	[Token(Token = "0x4000567")]
	private const string c_damageLow = "HLTHDamageLow";

	[Token(Token = "0x4000568")]
	private const string c_death = "HLTHDeath";

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Range(0f, 1f)]
	[SerializeField]
	private float m_damageThreshold;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x12AB370", Offset = "0x12AB370", VA = "0x12AB370", Slot = "30")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x12AB3E0", Offset = "0x12AB3E0", VA = "0x12AB3E0", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x12AB8DC", Offset = "0x12AB8DC", VA = "0x12AB8DC", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x12ABDE4", Offset = "0x12ABDE4", VA = "0x12ABDE4", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x12ABE28", Offset = "0x12ABE28", VA = "0x12ABE28", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x12ABEB4", Offset = "0x12ABEB4", VA = "0x12ABEB4")]
	private void OnDeSpawn()
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x12ABEC4", Offset = "0x12ABEC4", VA = "0x12ABEC4")]
	private void OnDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x12ABEC8", Offset = "0x12ABEC8", VA = "0x12ABEC8")]
	public void PlayDeathVO()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x12ABF44", Offset = "0x12ABF44", VA = "0x12ABF44")]
	private void OnHealthIncreased(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x12ABFB8", Offset = "0x12ABFB8", VA = "0x12ABFB8")]
	private void OnHealthDecreased(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x12AC210", Offset = "0x12AC210", VA = "0x12AC210")]
	public RemotePlayerVOAudioPlayer()
	{
	}
}
[Token(Token = "0x20000F4")]
public class RobotVoAudioPlayer : VOAudioPlayer
{
	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private HealthStatus m_playerHealthStatus;

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x12AC2FC", Offset = "0x12AC2FC", VA = "0x12AC2FC", Slot = "30")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x12AC35C", Offset = "0x12AC35C", VA = "0x12AC35C", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x12AC4FC", Offset = "0x12AC4FC", VA = "0x12AC4FC", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x12AC69C", Offset = "0x12AC69C", VA = "0x12AC69C", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x12AC728", Offset = "0x12AC728", VA = "0x12AC728", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x12AC750", Offset = "0x12AC750", VA = "0x12AC750")]
	private void OnPlayerDespawn()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x12AC760", Offset = "0x12AC760", VA = "0x12AC760")]
	private void OnPlayerDeath(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x12AC790", Offset = "0x12AC790", VA = "0x12AC790")]
	public RobotVoAudioPlayer()
	{
	}
}
[Token(Token = "0x20000F5")]
public class VelocityTrackerAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x400056C")]
	private const float c_audioSmoothFactor = 8f;

	[Token(Token = "0x400056D")]
	private const float c_audioPowerFactor = 2f;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private VelocityTrackerComponent m_velocityTrackerComponent;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_sqrSpeed;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_whoosh;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioParameter m_velocitySquared;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Range(0f, 10f)]
	private float m_whooshVelocityThreshold;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_whooshCooldown;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_cooldownTimer;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private VrItem m_item;

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x12AC7E4", Offset = "0x12AC7E4", VA = "0x12AC7E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x12AC880", Offset = "0x12AC880", VA = "0x12AC880", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x12AC8A8", Offset = "0x12AC8A8", VA = "0x12AC8A8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x12AC970", Offset = "0x12AC970", VA = "0x12AC970")]
	private float SmoothLerp(float current, float target)
	{
		return default(float);
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x12AC9E8", Offset = "0x12AC9E8", VA = "0x12AC9E8")]
	public VelocityTrackerAudioPlayer()
	{
	}
}
[Token(Token = "0x20000F6")]
public class VivoxMuteButton : AbstractSettingsButton<bool>
{
	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button m_button;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[FormerlySerializedAs("m_enabledString")]
	private string m_enabledStringLocId;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("m_disabledString")]
	[SerializeField]
	private string m_disabledStringLocId;

	[Token(Token = "0x17000098")]
	protected override string StateString
	{
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x12ACA04", Offset = "0x12ACA04", VA = "0x12ACA04", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x12ACA70", Offset = "0x12ACA70", VA = "0x12ACA70")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x12ACB34", Offset = "0x12ACB34", VA = "0x12ACB34")]
	private void ToggleMuteVoiceChat()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x12ACC14", Offset = "0x12ACC14", VA = "0x12ACC14")]
	public VivoxMuteButton()
	{
	}
}
[Token(Token = "0x20000F7")]
public class VivoxVolumeSlider : MonoBehaviour
{
	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Slider m_slider;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IAudioDevices m_audioDevices;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected GameSettings.Setting<int> m_controlledSetting;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Action m_onSettingChanged;

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x12ACCAC", Offset = "0x12ACCAC", VA = "0x12ACCAC", Slot = "4")]
	public virtual void Init(GameSettings.Setting<int> controlledSetting, [Optional] Action onSettingChanged)
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x12ACCDC", Offset = "0x12ACCDC", VA = "0x12ACCDC")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x12ACE70", Offset = "0x12ACE70", VA = "0x12ACE70")]
	private void SetVivox()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x12ACEBC", Offset = "0x12ACEBC", VA = "0x12ACEBC")]
	private void AdjustVolume(IAudioDevices devices, int value)
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x12AD0A8", Offset = "0x12AD0A8", VA = "0x12AD0A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x12AD150", Offset = "0x12AD150", VA = "0x12AD150")]
	public VivoxVolumeSlider()
	{
	}
}
[Token(Token = "0x20000F9")]
public class VOAudioPlayer : AbstractOccludedAudioPlayer
{
	[Token(Token = "0x20000FA")]
	[CompilerGenerated]
	private sealed class <InitializePlayerVO>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VOAudioPlayer <>4__this;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool initializeRemoteOnly;

		[Token(Token = "0x1700009B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600052D")]
			[Address(RVA = "0x1394744", Offset = "0x1394744", VA = "0x1394744", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600052F")]
			[Address(RVA = "0x139478C", Offset = "0x139478C", VA = "0x139478C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x1394410", Offset = "0x1394410", VA = "0x1394410")]
		[DebuggerHidden]
		public <InitializePlayerVO>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x1394438", Offset = "0x1394438", VA = "0x1394438", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x139443C", Offset = "0x139443C", VA = "0x139443C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x139474C", Offset = "0x139474C", VA = "0x139474C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000FB")]
	[CompilerGenerated]
	private sealed class <PlayVOAndWait>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioLine audioLine;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float waitingStartValue;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float waitingEndValue;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VOAudioPlayer <>4__this;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<VOEvent> <conversation>5__2;

		[Token(Token = "0x1700009D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000533")]
			[Address(RVA = "0x1394B68", Offset = "0x1394B68", VA = "0x1394B68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000535")]
			[Address(RVA = "0x1394BB0", Offset = "0x1394BB0", VA = "0x1394BB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x1394794", Offset = "0x1394794", VA = "0x1394794")]
		[DebuggerHidden]
		public <PlayVOAndWait>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x13947BC", Offset = "0x13947BC", VA = "0x13947BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0x13947C0", Offset = "0x13947C0", VA = "0x13947C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0x1394B70", Offset = "0x1394B70", VA = "0x1394B70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000FC")]
	[CompilerGenerated]
	private sealed class <TriggerEvent>d__69 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VOEvent line;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameEvent gameEvent;

		[Token(Token = "0x1700009F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000539")]
			[Address(RVA = "0x1394D4C", Offset = "0x1394D4C", VA = "0x1394D4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600053B")]
			[Address(RVA = "0x1394D94", Offset = "0x1394D94", VA = "0x1394D94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0x1394BB8", Offset = "0x1394BB8", VA = "0x1394BB8")]
		[DebuggerHidden]
		public <TriggerEvent>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0x1394BE0", Offset = "0x1394BE0", VA = "0x1394BE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0x1394BE4", Offset = "0x1394BE4", VA = "0x1394BE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0x1394D54", Offset = "0x1394D54", VA = "0x1394D54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000FD")]
	[CompilerGenerated]
	private sealed class <RestoreWatchUIBeforePilotSpeaks>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int length;

		[Token(Token = "0x170000A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600053F")]
			[Address(RVA = "0x1394EBC", Offset = "0x1394EBC", VA = "0x1394EBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000541")]
			[Address(RVA = "0x1394F04", Offset = "0x1394F04", VA = "0x1394F04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x1394D9C", Offset = "0x1394D9C", VA = "0x1394D9C")]
		[DebuggerHidden]
		public <RestoreWatchUIBeforePilotSpeaks>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x1394DC4", Offset = "0x1394DC4", VA = "0x1394DC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x1394DC8", Offset = "0x1394DC8", VA = "0x1394DC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x1394EC4", Offset = "0x1394EC4", VA = "0x1394EC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("VOAudioPlayer")]
	public Transform SpeechTransform;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioEventDescription BreathAudio;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected List<VOEvent> m_allVOEvents;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private VOEvent m_latestVoEvent;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Queue<VOEvent> m_voEventsQueue;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<VOEvent> m_voEventsTimeBased;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<VOEvent> m_voEventsDelayed;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<VOEvent> m_voEventsTimeCount;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_breathMaxDistance;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float BreathTimerValue;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_breathTimer;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected bool m_alive;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected SpeakerType m_speakerType;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected bool m_speakerAcquired;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Networking")]
	[SerializeField]
	private SerializableGUID m_componentGUID;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private BoltPlayerController m_boltController;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public int ComponentIndex;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public BoltEntity Entity;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected bool m_enablePlayAudio;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Audio")]
	[SerializeField]
	private PlayerVOAudioEvents m_playerAudio;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Dictionary<string, AudioLine> m_audioEvents;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Dictionary<GameEvent, List<AudioLine>> m_defaultAudioEvents;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Dictionary<GameEvent, List<AudioLine>> m_removedAudioEvents;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Dictionary<AudioLine, Coroutine> m_conversationsPlaying;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameViewModel m_gameViewModel;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected bool m_remoteVOAudioPlayer;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private LevelLoadManager m_levelLoadManager;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private List<AudioEventDescription> m_descriptionsPlaying;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly ProfilerMarker s_profilerMarker2;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly ProfilerMarker s_profilerMarker3;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly ProfilerMarker s_profilerMarker4;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly ProfilerMarker s_profilerMarker1;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly ProfilerMarker s_profilerMarker5;

	[Token(Token = "0x17000099")]
	public Guid ComponentGUID
	{
		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x12AD20C", Offset = "0x12AD20C", VA = "0x12AD20C")]
		get
		{
			return default(Guid);
		}
	}

	[Token(Token = "0x1700009A")]
	public bool IsAnyVOPlaying
	{
		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x12AD228", Offset = "0x12AD228", VA = "0x12AD228")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x129C230", Offset = "0x129C230", VA = "0x129C230", Slot = "30")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x12AD308", Offset = "0x12AD308", VA = "0x12AD308", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x12AD414", Offset = "0x12AD414", VA = "0x12AD414", Slot = "31")]
	protected virtual void TryVOInitialization(VOEvent voEvent)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x12998D0", Offset = "0x12998D0", VA = "0x12998D0", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x12AD890", Offset = "0x12AD890", VA = "0x12AD890")]
	private void DefaultCallFunction(GameEvent gameEvent)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x12993D0", Offset = "0x12993D0", VA = "0x12993D0", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x1298DA4", Offset = "0x1298DA4", VA = "0x1298DA4", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x12A5750", Offset = "0x12A5750", VA = "0x12A5750", Slot = "32")]
	protected virtual void StartGame()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x12ADF4C", Offset = "0x12ADF4C", VA = "0x12ADF4C", Slot = "33")]
	protected virtual void EndGame()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x1298F30", Offset = "0x1298F30", VA = "0x1298F30", Slot = "28")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x12A5140", Offset = "0x12A5140", VA = "0x12A5140")]
	[IteratorStateMachine(typeof(<InitializePlayerVO>d__42))]
	protected IEnumerator InitializePlayerVO(bool initializeRemoteOnly = false)
	{
		return null;
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x12ADF54", Offset = "0x12ADF54", VA = "0x12ADF54")]
	private void TryInitializeAudioLine(List<VOEvent> audioLine)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x12A5B70", Offset = "0x12A5B70", VA = "0x12A5B70")]
	public void PlayAudio(string audioLineKey, float minConversationWaitTime = 0.5f, float maxConversationWaitTime = 0.8f)
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0x12AE09C", Offset = "0x12AE09C", VA = "0x12AE09C")]
	public void PlayAudio(string audioLineKey, int index)
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0x12AE1A0", Offset = "0x12AE1A0", VA = "0x12AE1A0")]
	public GameEvent GetGameEvent(string audioLineKey)
	{
		return null;
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0x12A3668", Offset = "0x12A3668", VA = "0x12A3668")]
	public void SubscribeToGameEvent(string audioLineKey, Action action, bool subscribe = true)
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0x12AE238", Offset = "0x12AE238", VA = "0x12AE238")]
	public List<VOEvent> GetAudio(string audioLineKey)
	{
		return null;
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0x12A58D0", Offset = "0x12A58D0", VA = "0x12A58D0")]
	public void StopAudio(string audioLineKey)
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0x12AE2D0", Offset = "0x12AE2D0", VA = "0x12AE2D0", Slot = "34")]
	protected virtual void OnLevelLoading()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x12AE3A0", Offset = "0x12AE3A0", VA = "0x12AE3A0")]
	private void GetPlayerID(bool remote = false)
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0x1299088", Offset = "0x1299088", VA = "0x1299088", Slot = "35")]
	protected virtual void ResetVOVariables()
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0x12A2024", Offset = "0x12A2024", VA = "0x12A2024")]
	protected void CreateAudioLineKeyMap()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x12AE428", Offset = "0x12AE428", VA = "0x12AE428")]
	protected void SubscribeAudioEvents()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x12AE9E0", Offset = "0x12AE9E0", VA = "0x12AE9E0")]
	protected void UnsuscribeAudioEvents()
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0x12AEBC0", Offset = "0x12AEBC0", VA = "0x12AEBC0")]
	private void LeavingMatch()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0x12AAC7C", Offset = "0x12AAC7C", VA = "0x12AAC7C", Slot = "29")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0x12AF32C", Offset = "0x12AF32C", VA = "0x12AF32C", Slot = "36")]
	protected virtual void StartVo(VOEvent voEvent, bool forcePlay = false)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0x12AF078", Offset = "0x12AF078", VA = "0x12AF078")]
	public void PlayVo(VOEvent voEvent, bool fromRPC = false, [Optional] GameEvent gameEvent, bool forcePlay = false)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0x12AFC40", Offset = "0x12AFC40", VA = "0x12AFC40")]
	public void PlayVoNow(VOEvent voEvent, bool fromRPC, bool forcePlay = false)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0x12ADC8C", Offset = "0x12ADC8C", VA = "0x12ADC8C")]
	public void StartConversation(AudioLine audioLine, float waitingStartValue, float waitingEndValue)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0x12AEC18", Offset = "0x12AEC18", VA = "0x12AEC18")]
	public void StopConversations()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x12B0BF8", Offset = "0x12B0BF8", VA = "0x12B0BF8")]
	[IteratorStateMachine(typeof(<PlayVOAndWait>d__68))]
	private IEnumerator PlayVOAndWait(AudioLine audioLine, int index, float waitingStartValue, float waitingEndValue)
	{
		return null;
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0x12B0B68", Offset = "0x12B0B68", VA = "0x12B0B68")]
	[IteratorStateMachine(typeof(<TriggerEvent>d__69))]
	private IEnumerator TriggerEvent(VOEvent line, GameEvent gameEvent)
	{
		return null;
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x12B0B00", Offset = "0x12B0B00", VA = "0x12B0B00")]
	[IteratorStateMachine(typeof(<RestoreWatchUIBeforePilotSpeaks>d__70))]
	private IEnumerator RestoreWatchUIBeforePilotSpeaks(int length)
	{
		return null;
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x12B0CA4", Offset = "0x12B0CA4", VA = "0x12B0CA4")]
	private void SendPlay(VOEvent voEvent)
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x12B0448", Offset = "0x12B0448", VA = "0x12B0448")]
	private AudioEventDescription GetDescriptionToPlay(VOEvent voEvent, SpeakerType type, out Variation variation)
	{
		return null;
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x12AEFF0", Offset = "0x12AEFF0", VA = "0x12AEFF0")]
	private bool CheckIfAllowedToPlay()
	{
		return default(bool);
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0x12AD828", Offset = "0x12AD828", VA = "0x12AD828")]
	private void ResetVOEvent(VOEvent voEvent)
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0x12AED98", Offset = "0x12AED98", VA = "0x12AED98")]
	private void UpdateBreathAudio()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x12B0D40", Offset = "0x12B0D40", VA = "0x12B0D40", Slot = "37")]
	protected virtual void StopVO(VOEvent voEvent)
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0x12B0E10", Offset = "0x12B0E10", VA = "0x12B0E10", Slot = "38")]
	protected virtual void StopAllVOEvents()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0x1299AB0", Offset = "0x1299AB0", VA = "0x1299AB0")]
	public VOAudioPlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000FF")]
[CreateAssetMenu(menuName = "Cabin/Audio/VO Event")]
public class VOEvent : ScriptableObject
{
	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Speaker[] Speakers;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("If this value is higher, the line is more likely to play when something else is playing.")]
	[Range(0f, 10f)]
	public int priority;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	[UnityEngine.Tooltip("Normalized chance to play a line. ")]
	public float probability;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("Maximum time a queued line can wait to be played. (Only affects 'When Triggered' lines.)")]
	[Range(1f, 40f)]
	public int maxWaitTime;

	[NonSerialized]
	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeCounter;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("If there is a higher priority line already playing, queue this line to play after.")]
	[Header("VO Play Options")]
	public bool queueIfTalking;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("Play the line just when triggered or repeatedly with a certain frequency.")]
	public VOPlayType playType;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("(Only for At random interval mode) A new value within this range is chosen each time we want to play the line.")]
	[MinMaxRange(0.1f, 60f)]
	public MinMaxRange timeBasedInterval;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Choose how to delay this line")]
	[Header("VO Delay Options")]
	public DelayType DelayType;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[MinMaxRange(0f, 10f)]
	[UnityEngine.Tooltip("Delay randomized values. A new value is chosen within the range everytime the line plays.")]
	public MinMaxRange Delay;

	[NonSerialized]
	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float nextVOTime;

	[NonSerialized]
	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float NextDelayValue;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Networking")]
	[UnityEngine.Tooltip("Replicate with the player voice that activate the event")]
	public bool Replicate;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[UnityEngine.Tooltip("Duplicate with the owner player voice")]
	public bool Duplicate;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private SerializableGUID m_voEventGUID;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Trigger Game Event at the end of the audio")]
	[Header("GameEvent")]
	public GameEvent gameEvent;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Header("Debug")]
	private bool m_logActivationAndDeactivation;

	[NonSerialized]
	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioEventDescription LastDescriptionPlayed;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<Guid, VOEvent> GUIDToVOEvent;

	[Token(Token = "0x170000A3")]
	public Guid VOEventGUID
	{
		[Token(Token = "0x6000545")]
		[Address(RVA = "0x1394F8C", Offset = "0x1394F8C", VA = "0x1394F8C")]
		get
		{
			return default(Guid);
		}
	}

	[Token(Token = "0x170000A4")]
	public bool LogActivationAndDeactivation
	{
		[Token(Token = "0x6000546")]
		[Address(RVA = "0x1394FA8", Offset = "0x1394FA8", VA = "0x1394FA8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0x1394FB0", Offset = "0x1394FB0", VA = "0x1394FB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0x1395304", Offset = "0x1395304", VA = "0x1395304")]
	public static VOEvent FindVOEvent(Guid guidHash)
	{
		return null;
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0x13953A4", Offset = "0x13953A4", VA = "0x13953A4")]
	public Speaker GetSpeaker(SpeakerType type)
	{
		return null;
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x1395408", Offset = "0x1395408", VA = "0x1395408")]
	public VOEvent()
	{
	}
}
[Token(Token = "0x2000101")]
public enum VOPlayType
{
	[Token(Token = "0x40005CC")]
	WhenTriggered,
	[Token(Token = "0x40005CD")]
	AtRandomIntervals
}
[Token(Token = "0x2000102")]
public enum DelayType
{
	[Token(Token = "0x40005CF")]
	Never,
	[Token(Token = "0x40005D0")]
	Always,
	[Token(Token = "0x40005D1")]
	OnlyWhenQueuedOrInterrupting
}
[Token(Token = "0x2000103")]
public enum SpeakerType
{
	[Token(Token = "0x40005D3")]
	None,
	[Token(Token = "0x40005D4")]
	Player1,
	[Token(Token = "0x40005D5")]
	Player2
}
[Serializable]
[Token(Token = "0x2000104")]
public class Speaker
{
	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[UnityEngine.Tooltip("Leave 'None' if this voEvents is only spoken by one speaker.")]
	public SpeakerType SpeakerType;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Variation[] Variations;

	[NonSerialized]
	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public List<int> VariationsIndex;

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x1395534", Offset = "0x1395534", VA = "0x1395534")]
	public Speaker()
	{
	}
}
[Serializable]
[Token(Token = "0x2000105")]
public class Variation
{
	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AudioEventDescription Description;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public string SubtitleID;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_VOLength;

	[Token(Token = "0x170000A5")]
	public int VOLength
	{
		[Token(Token = "0x6000551")]
		[Address(RVA = "0x1394B40", Offset = "0x1394B40", VA = "0x1394B40")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x139553C", Offset = "0x139553C", VA = "0x139553C")]
	public void CalculateLength()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x13955CC", Offset = "0x13955CC", VA = "0x13955CC")]
	public Variation()
	{
	}
}
[Token(Token = "0x2000106")]
public class VrBulletAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioEventDescription m_VrBulletIdleSound;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HealthStatus m_vrBulletShot;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private VrBullet_Projectile m_vrBulletImpact;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_initializeAudio;

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x13955DC", Offset = "0x13955DC", VA = "0x13955DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x1395634", Offset = "0x1395634", VA = "0x1395634")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x13957A0", Offset = "0x13957A0", VA = "0x13957A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x139590C", Offset = "0x139590C", VA = "0x139590C", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x1395944", Offset = "0x1395944", VA = "0x1395944")]
	private void VrBulletPlayIdle()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x139598C", Offset = "0x139598C", VA = "0x139598C")]
	private void VrBulletStopIdle()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x13959A0", Offset = "0x13959A0", VA = "0x13959A0", Slot = "26")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x13959A4", Offset = "0x13959A4", VA = "0x13959A4")]
	public VrBulletAudioPlayer()
	{
	}
}
[Token(Token = "0x2000107")]
public class VrGunAudioPlayer : VrItemAudioPlayer
{
	[Token(Token = "0x2000108")]
	[CompilerGenerated]
	private sealed class <FireLoopAudio>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrGunAudioPlayer <>4__this;

		[Token(Token = "0x170000A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600056D")]
			[Address(RVA = "0x1396340", Offset = "0x1396340", VA = "0x1396340", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600056F")]
			[Address(RVA = "0x1396388", Offset = "0x1396388", VA = "0x1396388", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x13960C0", Offset = "0x13960C0", VA = "0x13960C0")]
		[DebuggerHidden]
		public <FireLoopAudio>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x1396288", Offset = "0x1396288", VA = "0x1396288", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x139628C", Offset = "0x139628C", VA = "0x139628C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x1396348", Offset = "0x1396348", VA = "0x1396348", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Header("VrGun Specific")]
	private AudioEventDescription m_fire3D;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private AudioEventDescription m_fire2D;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool m_hasFireLoopEvent;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private AudioEventDescription m_fireLoop;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Coroutine m_fireLoopCoroutine;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private AudioEventDescription m_dryFire;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private AudioEventDescription m_magazineInserted;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private AudioEventDescription m_magazineRemoved;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private AudioEventDescription m_gunIdle;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	protected AudioParameter m_ammoCountParameter;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float m_initialTimer;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_timer;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private WaitForSeconds m_waitingTime;

	[Token(Token = "0x170000A6")]
	public bool HasFireLoopEvent
	{
		[Token(Token = "0x600055B")]
		[Address(RVA = "0x13959B4", Offset = "0x13959B4", VA = "0x13959B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A7")]
	public bool IsFireLoopPlaying
	{
		[Token(Token = "0x600055C")]
		[Address(RVA = "0x13959BC", Offset = "0x13959BC", VA = "0x13959BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x13959D0", Offset = "0x13959D0", VA = "0x13959D0", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x1395B84", Offset = "0x1395B84", VA = "0x1395B84")]
	public void OnFire(GameObject gameObject, float normalizedAmmoCount)
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x1395CB0", Offset = "0x1395CB0", VA = "0x1395CB0")]
	public void OnDryFire(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x1395D80", Offset = "0x1395D80", VA = "0x1395D80")]
	public void PlayMagazineInsertedAudio(GameObject gameObject, float normalizedAmmoCount)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x1395D9C", Offset = "0x1395D9C", VA = "0x1395D9C")]
	public void PlayMagazineRemovedAudio(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x1395DB4", Offset = "0x1395DB4", VA = "0x1395DB4")]
	public void PlayGunIdleAudio(GameObject gameObject, float normalizedAmmoCount)
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x1395E40", Offset = "0x1395E40", VA = "0x1395E40")]
	public void StopGunIdleAudio()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x1395EA0", Offset = "0x1395EA0", VA = "0x1395EA0")]
	public void PlayFireLoopAudio(GameObject gameObject, float normalizedAmmoCount)
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x1395FAC", Offset = "0x1395FAC", VA = "0x1395FAC")]
	public void PlayFireLoopAudioRemote(GameObject gameObject, float normalizedAmmoCount)
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x139604C", Offset = "0x139604C", VA = "0x139604C")]
	[IteratorStateMachine(typeof(<FireLoopAudio>d__26))]
	private IEnumerator FireLoopAudio()
	{
		return null;
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x13960E8", Offset = "0x13960E8", VA = "0x13960E8")]
	public void StopFireLoopAudio(float normalizedAmmoCount)
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x13961D4", Offset = "0x13961D4", VA = "0x13961D4")]
	public void SendNormalizedAmmo(float normalizedAmmoCount)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x13961E4", Offset = "0x13961E4", VA = "0x13961E4")]
	public VrGunAudioPlayer()
	{
	}
}
[Token(Token = "0x2000109")]
public class VrItemAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x200010A")]
	public enum VrItemAudioEnum : byte
	{
		[Token(Token = "0x40005FF")]
		Selected,
		[Token(Token = "0x4000600")]
		Gripped,
		[Token(Token = "0x4000601")]
		ItemSwapHands,
		[Token(Token = "0x4000602")]
		ItemTriggerPressed,
		[Token(Token = "0x4000603")]
		ItemTriggerReleased,
		[Token(Token = "0x4000604")]
		ItemDropped,
		[Token(Token = "0x4000605")]
		ItemPlacedInInventory,
		[Token(Token = "0x4000606")]
		ItemRemovedFromInventory,
		[Token(Token = "0x4000607")]
		ItemDestroyed
	}

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("VrItem Specific")]
	[SerializeField]
	private AudioEventDescription m_itemSelected;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_itemGripped;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_itemSwapHands;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_itemTriggerPressed;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioEventDescription m_itemTriggerReleased;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioEventDescription m_itemDropped;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioEventDescription m_itemInVacuum;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioEventDescription m_itemPlacedInInventory;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioParameter m_normalizedPouchAmmo;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioEventDescription m_itemRemovedFromInventory;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioEventDescription m_itemDestroyed;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioEventDescription m_itemIdleLoop;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[UnityEngine.Tooltip("The event being called when the player quit the game from the pause menu. This will disable all unwanted audio post-quitting")]
	private GameEvent m_levelQuitEvent;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_isGamePlaying;

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x1396390", Offset = "0x1396390", VA = "0x1396390")]
	public void PlaySfx(VrItemAudioEnum audioEvent, BoltEntity entity, float normalizedAmmo)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x13967C8", Offset = "0x13967C8", VA = "0x13967C8")]
	public void SendPlaySfx(VrItemAudioEnum audioEvent, BoltEntity entity, float normalizedAmmo = 0f)
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x13968CC", Offset = "0x13968CC", VA = "0x13968CC")]
	private string GetDebugName(BoltEntity entity)
	{
		return null;
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x1395A94", Offset = "0x1395A94", VA = "0x1395A94", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x13969C0", Offset = "0x13969C0", VA = "0x13969C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0x1396BF0", Offset = "0x1396BF0", VA = "0x1396BF0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x1396E20", Offset = "0x1396E20", VA = "0x1396E20")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x1396E2C", Offset = "0x1396E2C", VA = "0x1396E2C")]
	private void EndGame()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x1396528", Offset = "0x1396528", VA = "0x1396528")]
	public void OnItemSelected(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x139655C", Offset = "0x139655C", VA = "0x139655C")]
	public void OnItemGripped(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x13965C4", Offset = "0x13965C4", VA = "0x13965C4")]
	public void OnSwapHands(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x13965F8", Offset = "0x13965F8", VA = "0x13965F8")]
	public void OnItemTriggerPressed(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x139662C", Offset = "0x139662C", VA = "0x139662C")]
	public void OnItemTriggerReleased(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x1396660", Offset = "0x1396660", VA = "0x1396660")]
	public void OnItemDropped(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x13966A8", Offset = "0x13966A8", VA = "0x13966A8")]
	public void OnItemPlacedInInventory(GameObject gameObject, BoltEntity entity, float normalizedAmmo)
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x13966E0", Offset = "0x13966E0", VA = "0x13966E0")]
	public void OnItemRemovedFromInventory(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x1396714", Offset = "0x1396714", VA = "0x1396714")]
	public void OnItemDestroyed(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x1396FDC", Offset = "0x1396FDC", VA = "0x1396FDC")]
	public void OnItemEnterVacuum(GameObject gameObject, BoltEntity entity)
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x13970B8", Offset = "0x13970B8", VA = "0x13970B8")]
	public void OnItemExitVacuum(BoltEntity entity)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x1396E34", Offset = "0x1396E34", VA = "0x1396E34")]
	private void PlayItemIdleAudio(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x1396F10", Offset = "0x1396F10", VA = "0x1396F10")]
	private void StopItemIdleAudio()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x1396278", Offset = "0x1396278", VA = "0x1396278")]
	public VrItemAudioPlayer()
	{
	}
}
[Token(Token = "0x200010B")]
public class VRItemThrowAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_sqrSpeed;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_throwIdleLoop;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private VelocityTrackerComponent m_velocityTrackerComponent;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private VrItem m_vrItem;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioParameter m_velocitySquared;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[Range(5f, 20f)]
	private float m_throwVelocityThreshold;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_isIdlePlaying;

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x1397184", Offset = "0x1397184", VA = "0x1397184", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x139729C", Offset = "0x139729C", VA = "0x139729C", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x13972C4", Offset = "0x13972C4", VA = "0x13972C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x1397398", Offset = "0x1397398", VA = "0x1397398")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x139746C", Offset = "0x139746C", VA = "0x139746C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x13975BC", Offset = "0x13975BC", VA = "0x13975BC")]
	private void OnItemDestroyed()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x13975D0", Offset = "0x13975D0", VA = "0x13975D0")]
	public VRItemThrowAudioPlayer()
	{
	}
}
[Token(Token = "0x200010C")]
public class WatchAudioPlayer : AbstractAudioPlayer
{
	[Token(Token = "0x400060F")]
	internal const int EXTRACTION_TIMER = 0;

	[Token(Token = "0x4000610")]
	internal const int CHOPPER_TIMER = 1;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("The event being called when the player quit the game from the pause menu. This will disable all unwanted audio post-quitting")]
	[SerializeField]
	private GameEvent m_levelQuitEvent;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioEventDescription m_alarm;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AudioEventDescription m_timerNotification;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private AudioEventDescription m_compassActivated;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AudioEventDescription m_headShotNotification;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioEventDescription m_healthRegenStart;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioEventDescription m_pointsNotification;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[UnityEngine.Tooltip("A notification will play every time we add this points amount to the watch count")]
	private int m_pointsAmountToNotify;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[UnityEngine.Tooltip("time to wait before playing another health regen event, used to prevent multiple event being launched when auto regen")]
	private float m_minTimeBeetweenHealthRegenAudioEvent;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameViewModel m_gameViewModel;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int nextAmountToNotify;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int m_oldAmount;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool[,] m_ExtractionTimerNotificationPlayed;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_isGamePlaying;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_healthRegenLastPlayedTime;

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x13975E4", Offset = "0x13975E4", VA = "0x13975E4", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x13976AC", Offset = "0x13976AC", VA = "0x13976AC", Slot = "5")]
	protected override void InitializeAllDescriptions()
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x1397738", Offset = "0x1397738", VA = "0x1397738")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x1397918", Offset = "0x1397918", VA = "0x1397918")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x1397AF8", Offset = "0x1397AF8", VA = "0x1397AF8")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x1397B04", Offset = "0x1397B04", VA = "0x1397B04")]
	private void EndGame()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x1397B0C", Offset = "0x1397B0C", VA = "0x1397B0C")]
	internal void PlayAlarm(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x1397B68", Offset = "0x1397B68", VA = "0x1397B68")]
	internal float GetAlarmDuration()
	{
		return default(float);
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x1397BA8", Offset = "0x1397BA8", VA = "0x1397BA8")]
	internal void PlayCompass(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x1397BC8", Offset = "0x1397BC8", VA = "0x1397BC8")]
	internal void PlayTimer(GameObject gameObject, float normalizedTime, int timerIndex)
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x1397E34", Offset = "0x1397E34", VA = "0x1397E34")]
	internal void PlayHealthRegen(GameObject gameObject)
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x1397F04", Offset = "0x1397F04", VA = "0x1397F04")]
	internal void PlayPoints(GameObject gameObject, int numPoints)
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x1397F7C", Offset = "0x1397F7C", VA = "0x1397F7C")]
	internal void PlayHeadShot(GameObject gameObject)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x1397F94", Offset = "0x1397F94", VA = "0x1397F94")]
	internal bool IsAlarmPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x1397FA8", Offset = "0x1397FA8", VA = "0x1397FA8")]
	public WatchAudioPlayer()
	{
	}
}
[Token(Token = "0x200010D")]
public interface IDamageTypeProvider
{
	[Token(Token = "0x170000AA")]
	DamageType damageType
	{
		[Token(Token = "0x600059C")]
		get;
	}
}
[Token(Token = "0x200010E")]
public class ImpactManager : SceneSingleton<ImpactManager>
{
	[Token(Token = "0x200010F")]
	[CompilerGenerated]
	private sealed class <InitializeAudioDescriptions>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ImpactManager <>4__this;

		[Token(Token = "0x170000AB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005AD")]
			[Address(RVA = "0x1399BD0", Offset = "0x1399BD0", VA = "0x1399BD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005AF")]
			[Address(RVA = "0x1399C18", Offset = "0x1399C18", VA = "0x1399C18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x139887C", Offset = "0x139887C", VA = "0x139887C")]
		[DebuggerHidden]
		public <InitializeAudioDescriptions>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x13999E8", Offset = "0x13999E8", VA = "0x13999E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x13999EC", Offset = "0x13999EC", VA = "0x13999EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x1399BD8", Offset = "0x1399BD8", VA = "0x1399BD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Min(0f)]
	[UnityEngine.Tooltip("Do not process impact audio if the player's head is at least this far away. Helps to save performance by not wasting time playing clips the player won't hear anyway.")]
	[SerializeField]
	private float m_impactAudioCullDistance;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ImpactManagerAudioPlayer m_audioPlayer;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private DamageMapping[] m_damageMappings;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<DamageType, Dictionary<PhysicMaterial, ImpactMapping>> m_impactMappingsDictionary;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ImpactParticlePlayer[] m_particlePlayers;

	[Token(Token = "0x4000625")]
	private const int c_particlePlayerCount = 64;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_nextParticlePlayerIndex;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ParticleSystem.EmitParams s_cachedEmitParams;

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x1397FBC", Offset = "0x1397FBC", VA = "0x1397FBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x1398404", Offset = "0x1398404", VA = "0x1398404")]
	private void Start()
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0x1398498", Offset = "0x1398498", VA = "0x1398498")]
	private void Update()
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x1398424", Offset = "0x1398424", VA = "0x1398424")]
	[IteratorStateMachine(typeof(<InitializeAudioDescriptions>d__10))]
	private IEnumerator InitializeAudioDescriptions()
	{
		return null;
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x13988A4", Offset = "0x13988A4", VA = "0x13988A4")]
	private ImpactMapping GetImpactMapping(DamageType damageType, PhysicMaterial physicMaterial)
	{
		return null;
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x1398A20", Offset = "0x1398A20", VA = "0x1398A20")]
	public void ProcessImpact(DamageType damageType, Collider impactCollider, Vector3 impactPosition, Vector3 impactNormal, float velocity)
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x1399378", Offset = "0x1399378", VA = "0x1399378")]
	public void NetworkProcessImpact(DamageType damageType, BoltEntity entity, Vector3 impactPosition, Vector3 impactNormal, string physicMaterialName, float velocity)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x1398B58", Offset = "0x1398B58", VA = "0x1398B58")]
	private void ProcessImpactVisuals(ImpactMapping impactMapping, DamageType damageType, Collider impactCollider, bool hasImpactCollider, Vector3 impactPosition, Vector3 impactNormal)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x13991FC", Offset = "0x13991FC", VA = "0x13991FC")]
	private void ProcessImpactAudio(ImpactMapping impactMapping, Vector3 impactPosition, float velocity)
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x1399730", Offset = "0x1399730", VA = "0x1399730")]
	private void PlayParticleSystem(ParticleSystem system, Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x13997D0", Offset = "0x13997D0", VA = "0x13997D0")]
	private static DamageMapManager FindDamageMapComponent(Collider collider)
	{
		return null;
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x1399994", Offset = "0x1399994", VA = "0x1399994")]
	public ImpactManager()
	{
	}
}
[Token(Token = "0x2000110")]
public class ImpactParticlePlayer
{
	[Token(Token = "0x2000111")]
	private enum Stage
	{
		[Token(Token = "0x4000637")]
		NotRunning,
		[Token(Token = "0x4000638")]
		StartDelay,
		[Token(Token = "0x4000639")]
		WaitForBurst,
		[Token(Token = "0x400063A")]
		PerformBurst
	}

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ParticleSystem m_system;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform m_systemTransform;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Burst[] m_systemBurstBuffer;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_systemBurstCount;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 m_position;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion m_rotation;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ParticleSystem.EmitParams s_emitParams;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_delayTimer;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_currentBurstIndex;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_lastBurstTime;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Stage m_stage;

	[Token(Token = "0x170000AD")]
	public bool IsRunning
	{
		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x13984F4", Offset = "0x13984F4", VA = "0x13984F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x1398398", Offset = "0x1398398", VA = "0x1398398")]
	public ImpactParticlePlayer()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x1399888", Offset = "0x1399888", VA = "0x1399888")]
	public void Setup(ParticleSystem system, Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x1399C88", Offset = "0x1399C88", VA = "0x1399C88")]
	private void DecayTimer(float dt)
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x1398504", Offset = "0x1398504", VA = "0x1398504")]
	public void Tick()
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x1399C20", Offset = "0x1399C20", VA = "0x1399C20")]
	private void SetCurrentStage(Stage stage)
	{
	}
}
[Token(Token = "0x2000112")]
public class GameObjectGroupMember_PlayTimeline : CachedMonoBehaviour, IGameObjectGroupMember
{
	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PlayableDirector m_director;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Canvas m_canvas;

	[Token(Token = "0x170000AE")]
	private bool IGameObjectGroupMember.isActive
	{
		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x1399D10", Offset = "0x1399D10", VA = "0x1399D10", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x1399D30", Offset = "0x1399D30", VA = "0x1399D30")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x1399DC0", Offset = "0x1399DC0", VA = "0x1399DC0", Slot = "5")]
	private void IGameObjectGroupMember.SetActive(bool mode)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x1399EE0", Offset = "0x1399EE0", VA = "0x1399EE0")]
	public void UpdateUIMasking(bool enableMaskable)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x139A098", Offset = "0x139A098", VA = "0x139A098")]
	public GameObjectGroupMember_PlayTimeline()
	{
	}
}
[Token(Token = "0x2000113")]
[BindingType(new Type[] { typeof(Sprite) })]
public class ImageBinder : ComponentBinder<Image>
{
	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x139A0A0", Offset = "0x139A0A0", VA = "0x139A0A0", Slot = "7")]
	protected override void UpdateData(object value)
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x139A178", Offset = "0x139A178", VA = "0x139A178")]
	public ImageBinder()
	{
	}
}
[Token(Token = "0x2000114")]
[BindingType(new Type[] { typeof(int) })]
public class LevelBinding : BindingPath
{
	[Token(Token = "0x2000115")]
	public enum DisplayMode
	{
		[Token(Token = "0x4000640")]
		LessThan,
		[Token(Token = "0x4000641")]
		LessThanEqual,
		[Token(Token = "0x4000642")]
		Equal,
		[Token(Token = "0x4000643")]
		GreaterThanEqual,
		[Token(Token = "0x4000644")]
		GreaterThan
	}

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected List<Image> m_levelImages;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected DisplayMode m_mode;

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x139A1C0", Offset = "0x139A1C0", VA = "0x139A1C0", Slot = "7")]
	protected override void UpdateData(object value)
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x139A424", Offset = "0x139A424", VA = "0x139A424")]
	public LevelBinding()
	{
	}
}
[Token(Token = "0x2000116")]
[AddComponentMenu("Scroll Rect Pos Binder")]
[BindingType(new Type[]
{
	typeof(float),
	typeof(Vector2)
})]
public class ScrollRectPosBinder : ComponentBinder<ScrollRect>
{
	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[UnityEngine.Tooltip("If true, the bound position will be centered in the viewport.")]
	private bool m_centerPosition;

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x139A42C", Offset = "0x139A42C", VA = "0x139A42C", Slot = "7")]
	protected override void UpdateData(object value)
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x139A5FC", Offset = "0x139A5FC", VA = "0x139A5FC")]
	private void SetPosition(Vector2 normalizedPos)
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x139A85C", Offset = "0x139A85C", VA = "0x139A85C")]
	public ScrollRectPosBinder()
	{
	}
}
[Token(Token = "0x2000117")]
public class SiblingSelectedBinding : BindingPath
{
	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("The transform that defines the sibling index for this menu element.")]
	[SerializeField]
	private Transform m_referenceTransform;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("The monobehaviour to enable/disable based on whether this menu element is selected or not.")]
	[SerializeField]
	private MonoBehaviour m_componentToEnableDisable;

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x139A8A4", Offset = "0x139A8A4", VA = "0x139A8A4", Slot = "7")]
	protected override void UpdateData(object value)
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0x139A9AC", Offset = "0x139A9AC", VA = "0x139A9AC")]
	public SiblingSelectedBinding()
	{
	}
}
[Token(Token = "0x2000118")]
[BindingType(new Type[] { typeof(Action) })]
public class SystemActionBinding : BindingPath
{
	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnityEvent m_responseEvents;

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x139A9B4", Offset = "0x139A9B4", VA = "0x139A9B4", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x139AA88", Offset = "0x139AA88", VA = "0x139AA88", Slot = "6")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x139AB5C", Offset = "0x139AB5C", VA = "0x139AB5C")]
	private void OnAction()
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x139AB70", Offset = "0x139AB70", VA = "0x139AB70")]
	public SystemActionBinding()
	{
	}
}
[Token(Token = "0x2000119")]
[BindingType(new Type[]
{
	typeof(float),
	typeof(int)
})]
public class UIRotationBinder : ComponentBinder<RectTransform>
{
	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Input Value")]
	private float m_minInputValue;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float m_maxInputValue;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[UnityEngine.Tooltip("Value is in degrees.")]
	[Header("Output Rotation")]
	private float m_minRotation;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	[UnityEngine.Tooltip("Value is in degrees.")]
	private float m_maxRotation;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[UnityEngine.Tooltip("Leave as zero if not rotation step is required. Value is in degrees.")]
	private float m_rotationStep;

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x139AB78", Offset = "0x139AB78", VA = "0x139AB78", Slot = "7")]
	protected override void UpdateData(object value)
	{
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x139AC8C", Offset = "0x139AC8C", VA = "0x139AC8C")]
	private void UpdateRotation(float value)
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x139ADB4", Offset = "0x139ADB4", VA = "0x139ADB4")]
	public UIRotationBinder()
	{
	}
}
[Token(Token = "0x200011A")]
[BindingType(new Type[] { typeof(WeaponConfig) })]
public class WeaponAttachmentBinder : LevelBinding
{
	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject m_rankPrefab;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_ranksRoot;

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x139AE0C", Offset = "0x139AE0C", VA = "0x139AE0C", Slot = "7")]
	protected override void UpdateData(object value)
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x139B524", Offset = "0x139B524", VA = "0x139B524")]
	public WeaponAttachmentBinder()
	{
	}
}
[Token(Token = "0x200011B")]
public class CoreDebug : MonoBehaviour
{
	[Token(Token = "0x200011C")]
	private struct StatInfo
	{
		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ProfilerCategory Cat;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ProfilerMarkerDataUnit Unit;
	}

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ProfilingViewModel m_profilingViewModel;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ProfilerRecorder m_drawCallsRecorder;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ProfilerRecorder m_trianglesRecorder;

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x139B52C", Offset = "0x139B52C", VA = "0x139B52C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x139B598", Offset = "0x139B598", VA = "0x139B598")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x139B69C", Offset = "0x139B69C", VA = "0x139B69C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x139BAC8", Offset = "0x139BAC8", VA = "0x139BAC8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x139BAEC", Offset = "0x139BAEC", VA = "0x139BAEC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x139BBF0", Offset = "0x139BBF0", VA = "0x139BBF0")]
	private void HandleDisableNetworkChanged()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x139BC70", Offset = "0x139BC70", VA = "0x139BC70")]
	private void FreezeEntities(bool mode)
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0x139BD5C", Offset = "0x139BD5C", VA = "0x139BD5C")]
	private void HandleDisableOcclusionChanged()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0x139BD60", Offset = "0x139BD60", VA = "0x139BD60")]
	public CoreDebug()
	{
	}
}
[Token(Token = "0x200011D")]
public static class CoreObjectCreation
{
	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_instantiated;

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0x139BD68", Offset = "0x139BD68", VA = "0x139BD68")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0x139BDB0", Offset = "0x139BDB0", VA = "0x139BDB0")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
	private static void OnRuntimeMethodLoad()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0x139BDB4", Offset = "0x139BDB4", VA = "0x139BDB4")]
	private static void InstantiateCoreObject()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x139C088", Offset = "0x139C088", VA = "0x139C088")]
	private static void HandleCoreLoaded(AsyncOperationHandle<GameObject> handle)
	{
	}
}
[Token(Token = "0x200011E")]
public interface ICoreObjectOverride
{
	[Token(Token = "0x170000AF")]
	bool InstantiateCore
	{
		[Token(Token = "0x60005DB")]
		get;
	}
}
[Token(Token = "0x200011F")]
public class CoreObjectOverride : MonoBehaviour
{
	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("NOTE : This bool may get overriden if another component implement ICoreObjectOverride interface.")]
	private bool m_instantiateCore;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private StateDescription m_coreHSMOverride;

	[Token(Token = "0x170000B0")]
	public bool InstantiateCore
	{
		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x139BFBC", Offset = "0x139BFBC", VA = "0x139BFBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B1")]
	public StateDescription coreHSMOverride
	{
		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x139C350", Offset = "0x139C350", VA = "0x139C350")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x139C358", Offset = "0x139C358", VA = "0x139C358")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x139C24C", Offset = "0x139C24C", VA = "0x139C24C")]
	public void OverrideHSMRootState(GameObject source)
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0x139C428", Offset = "0x139C428", VA = "0x139C428")]
	public CoreObjectOverride()
	{
	}
}
[Token(Token = "0x2000120")]
public static class StackTraceLogInitializer
{
	[Token(Token = "0x60005E1")]
	[Address(RVA = "0x139C430", Offset = "0x139C430", VA = "0x139C430")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSplashScreen)]
	private static void SetStackTraceLogTypes()
	{
	}
}
[Token(Token = "0x2000121")]
[RequireComponent(typeof(BoltEntity))]
public abstract class ComputerAbility : EntityEventListener<IComputerAbilityState>
{
	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("If greater than zero, do not allow this ability to be used again until this many seconds have passed.")]
	private float m_usageCooldown;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ComputerAbilityViewModel m_viewModel;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_hasViewModel;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameEvent m_triggerEventSuccess;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameEvent m_triggerEventFail;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Action<ComputerAbilityIdentifier, string, ComputerAbilityRequestResult> m_executionCallback;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x170000B2")]
	public float UsageCooldown
	{
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x139C488", Offset = "0x139C488", VA = "0x139C488")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B3")]
	protected BoltEntity AttachedBoltEntity
	{
		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x139C490", Offset = "0x139C490", VA = "0x139C490")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B4")]
	private bool IsUnlocked
	{
		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x139C498", Offset = "0x139C498", VA = "0x139C498")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B5")]
	public bool IsRecharging
	{
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x139C55C", Offset = "0x139C55C", VA = "0x139C55C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000B6")]
	public abstract ComputerAbilityIdentifier AbilityIdentifier
	{
		[Token(Token = "0x60005E6")]
		get;
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x139C628", Offset = "0x139C628", VA = "0x139C628", Slot = "148")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x139C6D8", Offset = "0x139C6D8", VA = "0x139C6D8")]
	public void RegisterExecutionCallback(Action<ComputerAbilityIdentifier, string, ComputerAbilityRequestResult> callback)
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x139C6E0", Offset = "0x139C6E0", VA = "0x139C6E0", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x139C758", Offset = "0x139C758", VA = "0x139C758")]
	public RequestComputerAbilityEvent ConstructRequestEvent([Optional] string param)
	{
		return null;
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x139C7C8", Offset = "0x139C7C8", VA = "0x139C7C8", Slot = "124")]
	public override void OnEvent(RequestComputerAbilityEvent requestEvent)
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x139C9E4", Offset = "0x139C9E4", VA = "0x139C9E4", Slot = "125")]
	public override void OnEvent(ExecuteComputerAbilityEvent executeEvent)
	{
	}

	[Token(Token = "0x60005ED")]
	protected abstract bool Activate([Optional] string param);

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0x139CB60", Offset = "0x139CB60", VA = "0x139CB60", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x139CCA4", Offset = "0x139CCA4", VA = "0x139CCA4", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x139CDE8", Offset = "0x139CDE8", VA = "0x139CDE8", Slot = "20")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x139D158", Offset = "0x139D158", VA = "0x139D158")]
	private void OnRechargeTimerChanged()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x139D240", Offset = "0x139D240", VA = "0x139D240")]
	protected ComputerAbility()
	{
	}
}
[Token(Token = "0x2000122")]
public class ComputerAbilityFloppyDiskDrive : MonoBehaviour
{
	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MechanismKeyhole m_keyhole;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TweenPosition m_positionTweener;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ComputerFloppyDisk m_processedFloppyDisk;

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x139D314", Offset = "0x139D314", VA = "0x139D314")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x139D4D4", Offset = "0x139D4D4", VA = "0x139D4D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x139D67C", Offset = "0x139D67C", VA = "0x139D67C")]
	private void OnKeyPreInsertionStartedAction(GameObject key)
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x139D7B4", Offset = "0x139D7B4", VA = "0x139D7B4")]
	private void OnKeyInserted(GameObject keyGameObject)
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x139D94C", Offset = "0x139D94C", VA = "0x139D94C")]
	private void OnPositionTweenFinish()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x139DA84", Offset = "0x139DA84", VA = "0x139DA84")]
	private void RequestAbilityUnlock(ComputerAbilityIdentifier abilityIdentifier)
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x139DAC8", Offset = "0x139DAC8", VA = "0x139DAC8")]
	public ComputerAbilityFloppyDiskDrive()
	{
	}
}
[Token(Token = "0x2000123")]
public class ComputerAbilityHandler : GlobalEventListener
{
	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ComputerAbility[] m_abilities;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<ComputerAbilityIdentifier?, string, ComputerAbilityRequestResult> OnComputerAbilityResolved;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<ComputerAbilityIdentifier> OnComputerAbilityUnlocked;

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x139DAD0", Offset = "0x139DAD0", VA = "0x139DAD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x139DBA4", Offset = "0x139DBA4", VA = "0x139DBA4")]
	public void ActivateEmp()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x139DC64", Offset = "0x139DC64", VA = "0x139DC64")]
	public void ActivateTurret(System.Collections.Generic.IReadOnlyDictionary<string, string> entities)
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x139DD50", Offset = "0x139DD50", VA = "0x139DD50")]
	private ComputerAbility LookupAbility(ComputerAbilityIdentifier abilityIdentifier)
	{
		return null;
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x139DBB0", Offset = "0x139DBB0", VA = "0x139DBB0")]
	private void ActivateAbility(ComputerAbilityIdentifier abilityIdentifier, [Optional] string abilityParam)
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x139DE94", Offset = "0x139DE94", VA = "0x139DE94")]
	public void HandleUnknownAbility()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x139DEB8", Offset = "0x139DEB8", VA = "0x139DEB8")]
	private void HandleResolvedAbility(ComputerAbilityIdentifier abilityIdentifier, string abilityParameter, ComputerAbilityRequestResult result)
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x139DF64", Offset = "0x139DF64", VA = "0x139DF64", Slot = "229")]
	public override void OnEvent(ExecuteComputerAbilityUnknownEvent requestEvent)
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x139DFF8", Offset = "0x139DFF8", VA = "0x139DFF8", Slot = "230")]
	public override void OnEvent(RequestUnlockComputerAbilityEvent requestUnlockEvent)
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0x139E1FC", Offset = "0x139E1FC", VA = "0x139E1FC", Slot = "231")]
	public override void OnEvent(ExecuteUnlockComputerAbilityEvent executeUnlockEvent)
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0x139E290", Offset = "0x139E290", VA = "0x139E290")]
	public ComputerAbilityHandler()
	{
	}
}
[Token(Token = "0x2000124")]
public enum ComputerAbilityIdentifier
{
	[Token(Token = "0x4000668")]
	Emp,
	[Token(Token = "0x4000669")]
	Turret
}
[Token(Token = "0x2000125")]
public enum ComputerAbilityRequestResult
{
	[Token(Token = "0x400066B")]
	Success,
	[Token(Token = "0x400066C")]
	NotRecognized,
	[Token(Token = "0x400066D")]
	NotUnlocked,
	[Token(Token = "0x400066E")]
	Recharging,
	[Token(Token = "0x400066F")]
	OneTimeUsed
}
[Token(Token = "0x2000126")]
public class ComputerAbilityTerminal : MonoBehaviour
{
	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text m_statusLabel;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string m_defaultStringId;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_activationFeedbackDisplayDuration;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float m_unlockFeedbackDisplayDuration;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ComputerAbilityViewModel m_computerAbility;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_customLabelEndTime;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool m_hasCustomLabelEndTime;

	[Token(Token = "0x4000677")]
	private const string NEGATIVE_INFORMATION_LABEL_FORMAT = "<color=\"red\">{0}</color>";

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool m_success;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool m_reloading;

	[Token(Token = "0x6000606")]
	[Address(RVA = "0x139E298", Offset = "0x139E298", VA = "0x139E298")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0x139E4D4", Offset = "0x139E4D4", VA = "0x139E4D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0x139E6C0", Offset = "0x139E6C0", VA = "0x139E6C0")]
	public void SignalListeningStarted()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x139E76C", Offset = "0x139E76C", VA = "0x139E76C")]
	private void ShowAbilityResult(ComputerAbilityIdentifier? abilityIdentifier, string abilityParameter, ComputerAbilityRequestResult result)
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x139E8F8", Offset = "0x139E8F8", VA = "0x139E8F8")]
	private string GenerateLabelStringId(ComputerAbilityIdentifier? abilityIdentifier, string abilityParameter, ComputerAbilityRequestResult result)
	{
		return null;
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x139EB20", Offset = "0x139EB20", VA = "0x139EB20")]
	private void ShowAbilityUnlock(ComputerAbilityIdentifier abilityIdentifier)
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x139E718", Offset = "0x139E718", VA = "0x139E718")]
	private void SetStatusLabel(string labelText, float duration = 0f)
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0x139E48C", Offset = "0x139E48C", VA = "0x139E48C")]
	public void ClearStatusLabel()
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0x139EBE0", Offset = "0x139EBE0", VA = "0x139EBE0")]
	private void Update()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0x139ECB4", Offset = "0x139ECB4", VA = "0x139ECB4")]
	public ComputerAbilityTerminal()
	{
	}
}
[Token(Token = "0x2000127")]
public class ComputerAbility_Emp : ComputerAbility, IStunnable
{
	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float m_effectRadius;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	[Min(1f)]
	private float m_damage;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private IAgent[] m_agentsBuffer;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private HitReactionConfig m_hitReactionConfig;

	[Token(Token = "0x170000B7")]
	public HitReactionConfig ReactionProperties
	{
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x139ECBC", Offset = "0x139ECBC", VA = "0x139ECBC", Slot = "150")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000B8")]
	public override ComputerAbilityIdentifier AbilityIdentifier
	{
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x139ECC4", Offset = "0x139ECC4", VA = "0x139ECC4", Slot = "147")]
		get
		{
			return default(ComputerAbilityIdentifier);
		}
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x139ECCC", Offset = "0x139ECCC", VA = "0x139ECCC", Slot = "148")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0x139ED2C", Offset = "0x139ED2C", VA = "0x139ED2C", Slot = "149")]
	protected override bool Activate([Optional] string param)
	{
		return default(bool);
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x139F18C", Offset = "0x139F18C", VA = "0x139F18C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x139F1D8", Offset = "0x139F1D8", VA = "0x139F1D8")]
	public ComputerAbility_Emp()
	{
	}
}
[Token(Token = "0x2000128")]
public class ComputerAbility_Turret : ComputerAbility
{
	[Token(Token = "0x2000129")]
	private enum Direction
	{
		[Token(Token = "0x4000680")]
		North,
		[Token(Token = "0x4000681")]
		East,
		[Token(Token = "0x4000682")]
		South,
		[Token(Token = "0x4000683")]
		West
	}

	[Serializable]
	[Token(Token = "0x200012A")]
	private class TurretMapping
	{
		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Direction direction;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public bool used;

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x139F3E8", Offset = "0x139F3E8", VA = "0x139F3E8")]
		public TurretMapping()
		{
		}
	}

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private TurretMapping[] m_turretMappings;

	[Token(Token = "0x170000B9")]
	public override ComputerAbilityIdentifier AbilityIdentifier
	{
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x139F22C", Offset = "0x139F22C", VA = "0x139F22C", Slot = "147")]
		get
		{
			return default(ComputerAbilityIdentifier);
		}
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x139F234", Offset = "0x139F234", VA = "0x139F234", Slot = "149")]
	protected override bool Activate([Optional] string param)
	{
		return default(bool);
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x139F310", Offset = "0x139F310", VA = "0x139F310")]
	private bool FindMapping(Direction direction, out TurretMapping mapping)
	{
		return default(bool);
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x139F394", Offset = "0x139F394", VA = "0x139F394")]
	public ComputerAbility_Turret()
	{
	}
}
[Token(Token = "0x200012B")]
public class ComputerFloppyDisk : VrItem
{
	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	[SerializeField]
	private ComputerAbilityIdentifier m_targetIdentifier;

	[Token(Token = "0x170000BA")]
	public ComputerAbilityIdentifier TargetIdentifier
	{
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x139F3F0", Offset = "0x139F3F0", VA = "0x139F3F0")]
		get
		{
			return default(ComputerAbilityIdentifier);
		}
	}

	[Token(Token = "0x170000BB")]
	public override bool isVisible
	{
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x139F418", Offset = "0x139F418", VA = "0x139F418", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x139F3F8", Offset = "0x139F3F8", VA = "0x139F3F8", Slot = "25")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0x139F4C4", Offset = "0x139F4C4", VA = "0x139F4C4")]
	public ComputerFloppyDisk()
	{
	}
}
[Token(Token = "0x200012C")]
public class EventOnEnableDisable : MonoBehaviour
{
	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnGameObjectEnable;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnGameObjectDisable;

	[Token(Token = "0x600061F")]
	[Address(RVA = "0x139F51C", Offset = "0x139F51C", VA = "0x139F51C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x139F530", Offset = "0x139F530", VA = "0x139F530")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0x139F544", Offset = "0x139F544", VA = "0x139F544")]
	public EventOnEnableDisable()
	{
	}
}
[Token(Token = "0x200012D")]
public class GameEventListener : MonoBehaviour
{
	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameEvent Event;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent Response;

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x139F5E0", Offset = "0x139F5E0", VA = "0x139F5E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x139F66C", Offset = "0x139F66C", VA = "0x139F66C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x139F6F8", Offset = "0x139F6F8", VA = "0x139F6F8")]
	public void OnEventRaised()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x139F70C", Offset = "0x139F70C", VA = "0x139F70C")]
	public GameEventListener()
	{
	}
}
[Token(Token = "0x200012E")]
public class MultiGameEventListener : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200012F")]
	public class GameEventInstance
	{
		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameEvent Event;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent Response;

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x139F8C0", Offset = "0x139F8C0", VA = "0x139F8C0")]
		public void Enable()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x139FAD4", Offset = "0x139FAD4", VA = "0x139FAD4")]
		public void Disable()
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x139FBB0", Offset = "0x139FBB0", VA = "0x139FBB0")]
		private void OnEventRaised()
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x139FBC4", Offset = "0x139FBC4", VA = "0x139FBC4")]
		public GameEventInstance()
		{
		}
	}

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameEventInstance> m_gameEvents;

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x139F780", Offset = "0x139F780", VA = "0x139F780")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x139F994", Offset = "0x139F994", VA = "0x139F994")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x139FBA8", Offset = "0x139FBA8", VA = "0x139FBA8")]
	public MultiGameEventListener()
	{
	}
}
[Token(Token = "0x2000130")]
public class ToggleSnapGuide : MonoBehaviour
{
	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_plankSnapGuide;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameEvent togglePlankOn;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameEvent togglePlankOff;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MechanismKeyhole m_mechanism;

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x139FC38", Offset = "0x139FC38", VA = "0x139FC38")]
	private void Start()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x139FC90", Offset = "0x139FC90", VA = "0x139FC90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x139FDDC", Offset = "0x139FDDC", VA = "0x139FDDC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0x139FF28", Offset = "0x139FF28", VA = "0x139FF28")]
	private void TogglePlankOn_OnGameEvent()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0x139FFB8", Offset = "0x139FFB8", VA = "0x139FFB8")]
	private void TogglePlankOff_OnGameEvent()
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0x139FFD8", Offset = "0x139FFD8", VA = "0x139FFD8")]
	public ToggleSnapGuide()
	{
	}
}
[Token(Token = "0x2000131")]
public class MapObjectiveCircleManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000132")]
	public class MapObjective
	{
		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject ObjectiveMapMarker;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameEvent MapObjectiveActive;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameEvent MapObjectiveDone;

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x13A0468", Offset = "0x13A0468", VA = "0x13A0468")]
		public MapObjective()
		{
		}
	}

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MapObjective[] m_objectiveMapMarkers;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Action> m_enableMapObjectiveDelegates;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Action> m_disableMapObjectiveDelegates;

	[Token(Token = "0x6000633")]
	[Address(RVA = "0x139FFE0", Offset = "0x139FFE0", VA = "0x139FFE0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0x13A02F8", Offset = "0x13A02F8", VA = "0x13A02F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0x13A0460", Offset = "0x13A0460", VA = "0x13A0460")]
	public MapObjectiveCircleManager()
	{
	}
}
[Token(Token = "0x2000134")]
public class ProxyAttachToken : IProtocolToken
{
	[Token(Token = "0x170000BC")]
	public Guid SceneId
	{
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x13A04C0", Offset = "0x13A04C0", VA = "0x13A04C0")]
		[CompilerGenerated]
		get
		{
			return default(Guid);
		}
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x13A04CC", Offset = "0x13A04CC", VA = "0x13A04CC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0x13A04D4", Offset = "0x13A04D4", VA = "0x13A04D4", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0x13A04FC", Offset = "0x13A04FC", VA = "0x13A04FC", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0x13A0520", Offset = "0x13A0520", VA = "0x13A0520")]
	public ProxyAttachToken()
	{
	}
}
[Token(Token = "0x2000135")]
public enum ConnectionError : byte
{
	[Token(Token = "0x400069B")]
	Unknown,
	[Token(Token = "0x400069C")]
	DestinationUnavailable,
	[Token(Token = "0x400069D")]
	DlcRequired,
	[Token(Token = "0x400069E")]
	General,
	[Token(Token = "0x400069F")]
	GroupFull,
	[Token(Token = "0x40006A0")]
	InviterNotJoinable,
	[Token(Token = "0x40006A1")]
	LevelNotHighEnough,
	[Token(Token = "0x40006A2")]
	LevelNotUnlocked,
	[Token(Token = "0x40006A3")]
	NetworkTimeout,
	[Token(Token = "0x40006A4")]
	NoLongerAvailable,
	[Token(Token = "0x40006A5")]
	UpdateRequired,
	[Token(Token = "0x40006A6")]
	TutorialRequired
}
[Token(Token = "0x2000136")]
internal class DisconnectToken : IProtocolToken
{
	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ConnectionError ConnectionError;

	[Token(Token = "0x600063F")]
	[Address(RVA = "0x13A0528", Offset = "0x13A0528", VA = "0x13A0528", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x13A0550", Offset = "0x13A0550", VA = "0x13A0550", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x13A0574", Offset = "0x13A0574", VA = "0x13A0574")]
	public DisconnectToken()
	{
	}
}
[Token(Token = "0x2000137")]
public class NetworkedMechanismSlide : NetworkInteractableEntityBase<IEntityState>
{
	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private MechanismSlide m_slide;

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x13A057C", Offset = "0x13A057C", VA = "0x13A057C", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x13A070C", Offset = "0x13A070C", VA = "0x13A070C")]
	public NetworkedMechanismSlide()
	{
	}
}
[Serializable]
[Token(Token = "0x2000138")]
public class AttackPosition
{
	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public Transform transform;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_isTaken;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion initialRotation;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 initialOffset;

	[Token(Token = "0x170000BD")]
	public bool isTaken
	{
		[Token(Token = "0x6000644")]
		[Address(RVA = "0x13A0754", Offset = "0x13A0754", VA = "0x13A0754")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x13A075C", Offset = "0x13A075C", VA = "0x13A075C")]
		set
		{
		}
	}

	[Token(Token = "0x170000BE")]
	public Matrix4x4 worldToLocal
	{
		[Token(Token = "0x6000646")]
		[Address(RVA = "0x13A0768", Offset = "0x13A0768", VA = "0x13A0768")]
		[CompilerGenerated]
		get
		{
			return default(Matrix4x4);
		}
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x13A0784", Offset = "0x13A0784", VA = "0x13A0784")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x13A07A0", Offset = "0x13A07A0", VA = "0x13A07A0")]
	public void Initialize(bool groundPosition, Transform owner)
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x13A0AC4", Offset = "0x13A0AC4", VA = "0x13A0AC4")]
	public void SetPositionAndRotation(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x13A0A58", Offset = "0x13A0A58", VA = "0x13A0A58")]
	public Vector3 GetPosition(float distance)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x13A0C10", Offset = "0x13A0C10", VA = "0x13A0C10")]
	public AttackPosition()
	{
	}
}
[Token(Token = "0x2000139")]
public enum AttackPositionCoverType
{
	[Token(Token = "0x40006AF")]
	None = -1,
	[Token(Token = "0x40006B0")]
	Radial
}
[Token(Token = "0x200013A")]
public static class AttackPositionExtensionMethods
{
	[Token(Token = "0x200013B")]
	[CompilerGenerated]
	private sealed class <FindAttackPositions>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 referencePos;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxRadius;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int identifier;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<List<IAttackPositionProvider>> callback;

		[Token(Token = "0x170000BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000657")]
			[Address(RVA = "0x13A1908", Offset = "0x13A1908", VA = "0x13A1908", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000659")]
			[Address(RVA = "0x13A1950", Offset = "0x13A1950", VA = "0x13A1950", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0x13A1514", Offset = "0x13A1514", VA = "0x13A1514")]
		[DebuggerHidden]
		public <FindAttackPositions>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x13A1830", Offset = "0x13A1830", VA = "0x13A1830", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x13A1834", Offset = "0x13A1834", VA = "0x13A1834", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x13A1910", Offset = "0x13A1910", VA = "0x13A1910", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013C")]
	[CompilerGenerated]
	private sealed class <FindAttackPositions>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int identifier;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 referencePos;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxRadius;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minRadius;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Func<IAttackPositionProvider, Vector3, bool> validateFn;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<List<IAttackPositionProvider>> callback;

		[Token(Token = "0x170000C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600065D")]
			[Address(RVA = "0x13A1A4C", Offset = "0x13A1A4C", VA = "0x13A1A4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600065F")]
			[Address(RVA = "0x13A1A94", Offset = "0x13A1A94", VA = "0x13A1A94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x13A160C", Offset = "0x13A160C", VA = "0x13A160C")]
		[DebuggerHidden]
		public <FindAttackPositions>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x13A1958", Offset = "0x13A1958", VA = "0x13A1958", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0x13A195C", Offset = "0x13A195C", VA = "0x13A195C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x13A1A54", Offset = "0x13A1A54", VA = "0x13A1A54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013D")]
	[CompilerGenerated]
	private sealed class <FindAttackPositionsInRange>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minRadius;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxRadius;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IAttackPositionProvider[] providers;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 referencePos;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Func<IAttackPositionProvider, Vector3, bool> validateFn;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int count;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action<List<IAttackPositionProvider>> callback;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<IAttackPositionProvider> <inRange>5__2;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <minRadiusSq>5__3;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float <maxRadiusSq>5__4;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int <limit>5__5;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int <i>5__6;

		[Token(Token = "0x170000C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000663")]
			[Address(RVA = "0x13A1DD8", Offset = "0x13A1DD8", VA = "0x13A1DD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000665")]
			[Address(RVA = "0x13A1E20", Offset = "0x13A1E20", VA = "0x13A1E20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x13A1720", Offset = "0x13A1720", VA = "0x13A1720")]
		[DebuggerHidden]
		public <FindAttackPositionsInRange>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x13A1A9C", Offset = "0x13A1A9C", VA = "0x13A1A9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x13A1AA0", Offset = "0x13A1AA0", VA = "0x13A1AA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x13A1DE0", Offset = "0x13A1DE0", VA = "0x13A1DE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013E")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass9_0
	{
		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<IAttackPositionProvider> reachable;

		[Token(Token = "0x6000666")]
		[Address(RVA = "0x13A1E28", Offset = "0x13A1E28", VA = "0x13A1E28")]
		public <>c__DisplayClass9_0()
		{
		}
	}

	[Token(Token = "0x2000140")]
	[CompilerGenerated]
	private sealed class <FindReachableAttackPositions>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<IAttackPositionProvider> positions;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass9_0 <>8__1;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PathingData pathingData;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MonoBehaviour owner;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<List<IAttackPositionProvider>> callback;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <count>5__2;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Coroutine> <running>5__3;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<IAttackPositionProvider>.Enumerator <>7__wrap3;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<Coroutine>.Enumerator <>7__wrap4;

		[Token(Token = "0x170000C5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600066E")]
			[Address(RVA = "0x13A273C", Offset = "0x13A273C", VA = "0x13A273C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000670")]
			[Address(RVA = "0x13A2784", Offset = "0x13A2784", VA = "0x13A2784", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0x13A1808", Offset = "0x13A1808", VA = "0x13A1808")]
		[DebuggerHidden]
		public <FindReachableAttackPositions>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0x13A1F84", Offset = "0x13A1F84", VA = "0x13A1F84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600066B")]
		[Address(RVA = "0x13A1FB8", Offset = "0x13A1FB8", VA = "0x13A1FB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0x13A269C", Offset = "0x13A269C", VA = "0x13A269C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0x13A26EC", Offset = "0x13A26EC", VA = "0x13A26EC")]
		private void <>m__Finally2()
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0x13A2744", Offset = "0x13A2744", VA = "0x13A2744", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<int, SpatialHashGrid<IAttackPositionProvider>> m_attackPositionSpatialHashGrids;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<int, IAttackPositionProvider[]> m_attackPositionBuffers;

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x13A0C18", Offset = "0x13A0C18", VA = "0x13A0C18")]
	static AttackPositionExtensionMethods()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x13A0D04", Offset = "0x13A0D04", VA = "0x13A0D04")]
	public static void Register(this IAttackPositionProvider attackPoint)
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x13A0FEC", Offset = "0x13A0FEC", VA = "0x13A0FEC")]
	public static void Unregister(this IAttackPositionProvider attackPoint)
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x13A127C", Offset = "0x13A127C", VA = "0x13A127C")]
	public static int Get(int identifier, Vector3 referencePosition, float radius, out IAttackPositionProvider[] attackPositions)
	{
		return default(int);
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x13A1468", Offset = "0x13A1468", VA = "0x13A1468")]
	[IteratorStateMachine(typeof(<FindAttackPositions>d__6))]
	public static IEnumerator FindAttackPositions(Vector3 referencePos, float maxRadius, int identifier, Action<List<IAttackPositionProvider>> callback)
	{
		return null;
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x13A153C", Offset = "0x13A153C", VA = "0x13A153C")]
	[IteratorStateMachine(typeof(<FindAttackPositions>d__7))]
	public static IEnumerator FindAttackPositions(Vector3 referencePos, float minRadius, float maxRadius, int identifier, Func<IAttackPositionProvider, Vector3, bool> validateFn, Action<List<IAttackPositionProvider>> callback)
	{
		return null;
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x13A1634", Offset = "0x13A1634", VA = "0x13A1634")]
	[IteratorStateMachine(typeof(<FindAttackPositionsInRange>d__8))]
	public static IEnumerator FindAttackPositionsInRange(Vector3 referencePos, float minRadius, float maxRadius, IAttackPositionProvider[] providers, int count, Func<IAttackPositionProvider, Vector3, bool> validateFn, Action<List<IAttackPositionProvider>> callback)
	{
		return null;
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x13A1748", Offset = "0x13A1748", VA = "0x13A1748")]
	[IteratorStateMachine(typeof(<FindReachableAttackPositions>d__9))]
	public static IEnumerator FindReachableAttackPositions(MonoBehaviour owner, PathingData pathingData, List<IAttackPositionProvider> positions, Action<List<IAttackPositionProvider>> callback)
	{
		return null;
	}
}
[Token(Token = "0x2000141")]
public class AttackPositionsSet : CachedMonoBehaviour, IAttackPositionProvider, ISpatialHashPoint
{
	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_identifier;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AttackPosition[] m_attackPositions;

	[Token(Token = "0x170000C7")]
	public AttackPosition[] AttackPositions
	{
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x13A278C", Offset = "0x13A278C", VA = "0x13A278C", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C8")]
	public virtual int Identifier
	{
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x13A2794", Offset = "0x13A2794", VA = "0x13A2794", Slot = "14")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000C9")]
	private Vector3 ISpatialHashPoint.pointPosition
	{
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x13A27A0", Offset = "0x13A27A0", VA = "0x13A27A0", Slot = "13")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000CA")]
	private Vector3 IAttackPositionProvider.position
	{
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x13A27C0", Offset = "0x13A27C0", VA = "0x13A27C0", Slot = "5")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000CB")]
	private float IAttackPositionProvider.distance
	{
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x13A27E0", Offset = "0x13A27E0", VA = "0x13A27E0", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x13A27E8", Offset = "0x13A27E8", VA = "0x13A27E8", Slot = "9")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000CC")]
	private bool IAttackPositionProvider.isValid
	{
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x13A27F0", Offset = "0x13A27F0", VA = "0x13A27F0", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000CD")]
	private string IAttackPositionProvider.positionName
	{
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x13A27F8", Offset = "0x13A27F8", VA = "0x13A27F8", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CE")]
	public AttackPositionCoverType coverType
	{
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x13A2818", Offset = "0x13A2818", VA = "0x13A2818", Slot = "10")]
		get
		{
			return default(AttackPositionCoverType);
		}
	}

	[Token(Token = "0x170000CF")]
	public float separationDistance
	{
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x13A2820", Offset = "0x13A2820", VA = "0x13A2820", Slot = "11")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x13A2828", Offset = "0x13A2828", VA = "0x13A2828", Slot = "15")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x13A287C", Offset = "0x13A287C", VA = "0x13A287C", Slot = "16")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x13A28D0", Offset = "0x13A28D0", VA = "0x13A28D0")]
	public AttackPositionsSet()
	{
	}
}
[Token(Token = "0x2000142")]
public class CrowdPositions : SceneSingleton<CrowdPositions>
{
	[Serializable]
	[Token(Token = "0x2000143")]
	public class CrowdPosition : IFormationPosition
	{
		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Vector3 m_position;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_radius;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_weight;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool m_moveable;

		[Token(Token = "0x170000D0")]
		public Vector3 Position
		{
			[Token(Token = "0x6000691")]
			[Address(RVA = "0x13A3A80", Offset = "0x13A3A80", VA = "0x13A3A80", Slot = "4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000692")]
			[Address(RVA = "0x13A3A8C", Offset = "0x13A3A8C", VA = "0x13A3A8C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public float Radius
		{
			[Token(Token = "0x6000693")]
			[Address(RVA = "0x13A3A98", Offset = "0x13A3A98", VA = "0x13A3A98", Slot = "6")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000D2")]
		public float Weight
		{
			[Token(Token = "0x6000694")]
			[Address(RVA = "0x13A3AA0", Offset = "0x13A3AA0", VA = "0x13A3AA0", Slot = "7")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000695")]
			[Address(RVA = "0x13A3AA8", Offset = "0x13A3AA8", VA = "0x13A3AA8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public bool Moveable
		{
			[Token(Token = "0x6000696")]
			[Address(RVA = "0x13A3AB0", Offset = "0x13A3AB0", VA = "0x13A3AB0", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x13A3AB8", Offset = "0x13A3AB8", VA = "0x13A3AB8")]
		public CrowdPosition()
		{
		}
	}

	[Token(Token = "0x2000144")]
	public class AgentData
	{
		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlayerAgent nearestTo;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float bestDistance;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int positionIndex;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 position;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool valid;

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x13A3AD4", Offset = "0x13A3AD4", VA = "0x13A3AD4")]
		public void OnPathCheckComplete(bool succes, float distance)
		{
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x13A3120", Offset = "0x13A3120", VA = "0x13A3120")]
		public AgentData()
		{
		}
	}

	[Token(Token = "0x2000145")]
	public enum CrowdState
	{
		[Token(Token = "0x40006F7")]
		Grouping,
		[Token(Token = "0x40006F8")]
		AssignPositions,
		[Token(Token = "0x40006F9")]
		Wait
	}

	[Token(Token = "0x2000146")]
	[CompilerGenerated]
	private sealed class <CalculateGrouping>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CrowdPositions <>4__this;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callback;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <count>5__2;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<IAgent>.Enumerator <>7__wrap2;

		[Token(Token = "0x170000D4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600069E")]
			[Address(RVA = "0x13A446C", Offset = "0x13A446C", VA = "0x13A446C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A0")]
			[Address(RVA = "0x13A44B4", Offset = "0x13A44B4", VA = "0x13A44B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x13A36EC", Offset = "0x13A36EC", VA = "0x13A36EC")]
		[DebuggerHidden]
		public <CalculateGrouping>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x13A3AE0", Offset = "0x13A3AE0", VA = "0x13A3AE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x13A3AFC", Offset = "0x13A3AFC", VA = "0x13A3AFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x13A441C", Offset = "0x13A441C", VA = "0x13A441C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x13A4474", Offset = "0x13A4474", VA = "0x13A4474", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000147")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass28_0
	{
		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NativeArray<PairedDistanceCalculator.Edge> pairings;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool finished;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CrowdPositions <>4__this;

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x13A44BC", Offset = "0x13A44BC", VA = "0x13A44BC")]
		public <>c__DisplayClass28_0()
		{
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x13A44C4", Offset = "0x13A44C4", VA = "0x13A44C4")]
		internal void <AssignPositions>b__1()
		{
		}
	}

	[Token(Token = "0x2000149")]
	[CompilerGenerated]
	private sealed class <AssignPositions>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CrowdPositions <>4__this;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass28_0 <>8__1;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action callback;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<PlayerAgent>.Enumerator <>7__wrap1;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<IAgent> <agents>5__3;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 <playerPos>5__4;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] <zombiePositions>5__5;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int <i>5__6;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Coroutine>.Enumerator <>7__wrap6;

		[Token(Token = "0x170000D6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006AB")]
			[Address(RVA = "0x13A55DC", Offset = "0x13A55DC", VA = "0x13A55DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006AD")]
			[Address(RVA = "0x13A5624", Offset = "0x13A5624", VA = "0x13A5624", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x13A3714", Offset = "0x13A3714", VA = "0x13A3714")]
		[DebuggerHidden]
		public <AssignPositions>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x13A4618", Offset = "0x13A4618", VA = "0x13A4618", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x13A46D4", Offset = "0x13A46D4", VA = "0x13A46D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x13A558C", Offset = "0x13A558C", VA = "0x13A558C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x13A553C", Offset = "0x13A553C", VA = "0x13A553C")]
		private void <>m__Finally2()
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x13A55E4", Offset = "0x13A55E4", VA = "0x13A55E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[NavMeshAgentType]
	[Header("Navigation")]
	private int m_navMeshAgentType;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Where can the agent move, and which links they can traverse.")]
	[NavMeshAreaMask]
	[SerializeField]
	private int m_navMeshAreaMask;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private FormationDefinition m_definition;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<CrowdPosition> m_positions;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<IAgent, AgentData> m_agentDataMap;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SimpleFSM<CrowdPositions, CrowdState> m_fsm;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Dictionary<PlayerAgent, List<IAgent>> m_grouping;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_timer;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_complete;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PairedDistanceCalculator m_calculator;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<Vector3> m_crowdPositions;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private NavMeshQueryFilter m_navMeshfilter;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<Coroutine> m_runningCoroutines;

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x13A28D8", Offset = "0x13A28D8", VA = "0x13A28D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x13A29A0", Offset = "0x13A29A0", VA = "0x13A29A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x13A2C68", Offset = "0x13A2C68", VA = "0x13A2C68", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x13A2C7C", Offset = "0x13A2C7C", VA = "0x13A2C7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x13A2DA8", Offset = "0x13A2DA8", VA = "0x13A2DA8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x13A2ED4", Offset = "0x13A2ED4", VA = "0x13A2ED4")]
	private void AddPlayer(IAgent agent)
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x13A2FF8", Offset = "0x13A2FF8", VA = "0x13A2FF8")]
	public void AddAgent(IAgent agent)
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x13A3128", Offset = "0x13A3128", VA = "0x13A3128")]
	public void RemoveAgent(IAgent agent)
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x13A3334", Offset = "0x13A3334", VA = "0x13A3334")]
	public AgentData GetAgentData(IAgent agent)
	{
		return null;
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x13A33AC", Offset = "0x13A33AC", VA = "0x13A33AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x13A33FC", Offset = "0x13A33FC", VA = "0x13A33FC")]
	private void UpdateFSM(CrowdState state, StateCall call)
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x13A35CC", Offset = "0x13A35CC", VA = "0x13A35CC")]
	[IteratorStateMachine(typeof(<CalculateGrouping>d__27))]
	private IEnumerator CalculateGrouping(Action callback)
	{
		return null;
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x13A365C", Offset = "0x13A365C", VA = "0x13A365C")]
	[IteratorStateMachine(typeof(<AssignPositions>d__28))]
	private IEnumerator AssignPositions(Action callback)
	{
		return null;
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x13A373C", Offset = "0x13A373C", VA = "0x13A373C")]
	private void OnPathCheckComplete(bool succes, float distance)
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0x13A3740", Offset = "0x13A3740", VA = "0x13A3740")]
	[ContextMenu("Generate Positions")]
	private void GeneratePositions()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x13A37A0", Offset = "0x13A37A0", VA = "0x13A37A0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x13A3984", Offset = "0x13A3984", VA = "0x13A3984")]
	public CrowdPositions()
	{
	}
}
[Token(Token = "0x200014A")]
public interface IAttackPositionProvider : ISpatialHashPoint
{
	[Token(Token = "0x170000D8")]
	string positionName
	{
		[Token(Token = "0x60006AE")]
		get;
	}

	[Token(Token = "0x170000D9")]
	Vector3 position
	{
		[Token(Token = "0x60006AF")]
		get;
	}

	[Token(Token = "0x170000DA")]
	int Identifier
	{
		[Token(Token = "0x60006B0")]
		get;
	}

	[Token(Token = "0x170000DB")]
	AttackPosition[] AttackPositions
	{
		[Token(Token = "0x60006B1")]
		get;
	}

	[Token(Token = "0x170000DC")]
	float distance
	{
		[Token(Token = "0x60006B2")]
		get;
		[Token(Token = "0x60006B3")]
		set;
	}

	[Token(Token = "0x170000DD")]
	AttackPositionCoverType coverType
	{
		[Token(Token = "0x60006B4")]
		get;
	}

	[Token(Token = "0x170000DE")]
	float separationDistance
	{
		[Token(Token = "0x60006B5")]
		get;
	}

	[Token(Token = "0x170000DF")]
	bool isValid
	{
		[Token(Token = "0x60006B6")]
		get;
	}
}
[Token(Token = "0x200014B")]
public class SpitterAttackPosition : CachedMonoBehaviour, IAttackPositionProvider, ISpatialHashPoint
{
	[Token(Token = "0x200014C")]
	private enum AttackPositionSetupType
	{
		[Token(Token = "0x400071C")]
		Disabled = -1,
		[Token(Token = "0x400071D")]
		AcceptanceCriteria,
		[Token(Token = "0x400071E")]
		Always
	}

	[Token(Token = "0x200014D")]
	public enum AttackPointUsage
	{
		[Token(Token = "0x4000720")]
		Public,
		[Token(Token = "0x4000721")]
		Private
	}

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Public spitter attack positions can be used by all spitters, Private ones can only be use by spitter who reverence them via spawn points.")]
	[Header("Attack Point Config")]
	private AttackPointUsage m_usageScope;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private AttackPositionSetupType m_setupType;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("Distance to maintain away from this object to avoid clipping.")]
	private float m_separationDistance;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private AttackPositionCoverType m_coverType;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Acceptance Criteria")]
	[UnityEngine.Tooltip("Prefab root transform.")]
	[SerializeField]
	private Transform m_prefabRoot;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("Only consider trees with a scale greater than this.")]
	[SerializeField]
	private float m_minimumScale;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[UnityEngine.Tooltip("Only consider trees that have a lean less than this angle.")]
	[SerializeField]
	private float m_maximumLean;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_isValid;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Collider[] m_treeColliders;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private HashSet<SpitterZombie> m_directReferences;

	[Token(Token = "0x170000E0")]
	public static int defaultIdentifier
	{
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x13A562C", Offset = "0x13A562C", VA = "0x13A562C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000E1")]
	public static int privateIdentifier
	{
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x13A5670", Offset = "0x13A5670", VA = "0x13A5670")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000E2")]
	private bool IAttackPositionProvider.isValid
	{
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x13A56B4", Offset = "0x13A56B4", VA = "0x13A56B4", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000E3")]
	private AttackPosition[] IAttackPositionProvider.AttackPositions
	{
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x13A56BC", Offset = "0x13A56BC", VA = "0x13A56BC", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E4")]
	private int IAttackPositionProvider.Identifier
	{
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x13A56C4", Offset = "0x13A56C4", VA = "0x13A56C4", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000E5")]
	private Vector3 IAttackPositionProvider.position
	{
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x13A56D4", Offset = "0x13A56D4", VA = "0x13A56D4", Slot = "5")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000E6")]
	private float IAttackPositionProvider.distance
	{
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x13A56F4", Offset = "0x13A56F4", VA = "0x13A56F4", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x13A56FC", Offset = "0x13A56FC", VA = "0x13A56FC", Slot = "9")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000E7")]
	private AttackPositionCoverType IAttackPositionProvider.coverType
	{
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x13A5704", Offset = "0x13A5704", VA = "0x13A5704", Slot = "10")]
		get
		{
			return default(AttackPositionCoverType);
		}
	}

	[Token(Token = "0x170000E8")]
	private float IAttackPositionProvider.separationDistance
	{
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x13A570C", Offset = "0x13A570C", VA = "0x13A570C", Slot = "11")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000E9")]
	private Vector3 ISpatialHashPoint.pointPosition
	{
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x13A5714", Offset = "0x13A5714", VA = "0x13A5714", Slot = "13")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000EA")]
	private Transform prefabRoot
	{
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x13A5734", Offset = "0x13A5734", VA = "0x13A5734")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000EB")]
	public Vector3 RootUpVector
	{
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x13A57B0", Offset = "0x13A57B0", VA = "0x13A57B0")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000EC")]
	private string IAttackPositionProvider.positionName
	{
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x13A57D8", Offset = "0x13A57D8", VA = "0x13A57D8", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000ED")]
	public int numZombieReferences
	{
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x13A5860", Offset = "0x13A5860", VA = "0x13A5860")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000EE")]
	public AttackPointUsage usageScope
	{
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x13A58A8", Offset = "0x13A58A8", VA = "0x13A58A8")]
		get
		{
			return default(AttackPointUsage);
		}
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x13A58B0", Offset = "0x13A58B0", VA = "0x13A58B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0x13A5B84", Offset = "0x13A5B84", VA = "0x13A5B84")]
	public void AddZombie(SpitterZombie zombie)
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x13A5BDC", Offset = "0x13A5BDC", VA = "0x13A5BDC")]
	public void RemoveZombie(SpitterZombie zombie)
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x13A5C34", Offset = "0x13A5C34", VA = "0x13A5C34")]
	public void SetInvalid()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x13A5C4C", Offset = "0x13A5C4C", VA = "0x13A5C4C")]
	public void DisableColliders()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x13A5CB0", Offset = "0x13A5CB0", VA = "0x13A5CB0")]
	public void EnableColliders()
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x13A59A4", Offset = "0x13A59A4", VA = "0x13A59A4")]
	private bool IsExcluded()
	{
		return default(bool);
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x13A5D14", Offset = "0x13A5D14", VA = "0x13A5D14", Slot = "14")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x13A5D68", Offset = "0x13A5D68", VA = "0x13A5D68", Slot = "15")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x13A5DBC", Offset = "0x13A5DBC", VA = "0x13A5DBC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x13A5EBC", Offset = "0x13A5EBC", VA = "0x13A5EBC")]
	public SpitterAttackPosition()
	{
	}
}
[Token(Token = "0x200014E")]
public interface IAttackStatus
{
	[Token(Token = "0x170000EF")]
	bool shouldAttack
	{
		[Token(Token = "0x60006D2")]
		get;
	}
}
[Token(Token = "0x200014F")]
public interface IToken
{
	[Token(Token = "0x170000F0")]
	bool isTaken
	{
		[Token(Token = "0x60006D3")]
		get;
		[Token(Token = "0x60006D4")]
		set;
	}

	[Token(Token = "0x170000F1")]
	ITokenConsumer consumer
	{
		[Token(Token = "0x60006D5")]
		get;
		[Token(Token = "0x60006D6")]
		set;
	}

	[Token(Token = "0x170000F2")]
	ITokenKey tokenKey
	{
		[Token(Token = "0x60006D7")]
		get;
		[Token(Token = "0x60006D8")]
		set;
	}
}
[Token(Token = "0x2000150")]
public interface ITokenConsumer
{
	[Token(Token = "0x170000F3")]
	string name
	{
		[Token(Token = "0x60006D9")]
		get;
	}

	[Token(Token = "0x170000F4")]
	Action<TokenRequestResponse> OnTokenRequestResponse
	{
		[Token(Token = "0x60006DA")]
		get;
		[Token(Token = "0x60006DB")]
		set;
	}

	[Token(Token = "0x170000F5")]
	Vector3 position
	{
		[Token(Token = "0x60006DD")]
		get;
	}

	[Token(Token = "0x60006DC")]
	bool AllowStealToken(ITokenConsumer thief, IToken token);
}
[Token(Token = "0x2000151")]
public interface ITokenKey
{
	[Token(Token = "0x170000F6")]
	ITokenProvider provider
	{
		[Token(Token = "0x60006DE")]
		get;
	}

	[Token(Token = "0x170000F7")]
	TokenManager.TokenType type
	{
		[Token(Token = "0x60006DF")]
		get;
	}
}
[Token(Token = "0x2000152")]
public interface ITokenProvider
{
	[Token(Token = "0x170000F8")]
	string DisplayName
	{
		[Token(Token = "0x60006E0")]
		get;
	}

	[Token(Token = "0x60006E1")]
	ITokenKey GetTokenKey(TokenManager.TokenType tokenType);

	[Token(Token = "0x60006E2")]
	void TokenTaken(IToken token);

	[Token(Token = "0x60006E3")]
	void TokenReturned(IToken token);
}
[Token(Token = "0x2000153")]
public interface ITokenRequestSort
{
	[Token(Token = "0x60006E4")]
	int SortMethod(TokenManager.Request a, TokenManager.Request b);
}
[Token(Token = "0x2000154")]
public interface ITokenSelector
{
	[Token(Token = "0x60006E5")]
	IToken SelectTokenFrom(TokenManager.TokenType tokenType, List<IToken> availableTokens);
}
[Token(Token = "0x2000155")]
public class PriorityTargetManager : PT.Singleton<PriorityTargetManager>
{
	[Token(Token = "0x4000722")]
	private const int c_maxCheckPerFrame = 10;

	[Token(Token = "0x4000723")]
	private const int c_maxUpdatePerFrame = 5;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<PriorityTarget> _allTargets;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_index;

	[Token(Token = "0x170000F9")]
	public List<PriorityTarget> PriorityTargets
	{
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x13A5EE0", Offset = "0x13A5EE0", VA = "0x13A5EE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x13A5EE8", Offset = "0x13A5EE8", VA = "0x13A5EE8")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitializePlayerLoop()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x13A5F88", Offset = "0x13A5F88", VA = "0x13A5F88")]
	public void RegisterPriorityTarget(PriorityTarget target)
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x13A6038", Offset = "0x13A6038", VA = "0x13A6038")]
	public void UnregisterPriorityTarget(PriorityTarget target)
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x13A6090", Offset = "0x13A6090", VA = "0x13A6090")]
	public static void UpdateOptimalAttackPositions()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x13A62AC", Offset = "0x13A62AC", VA = "0x13A62AC")]
	public PriorityTargetManager()
	{
	}
}
[Token(Token = "0x2000156")]
public static class TokenExtensionMethods
{
	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x13A6374", Offset = "0x13A6374", VA = "0x13A6374")]
	public static bool RequestToken(this ITokenConsumer consumer, ITokenProvider provider, TokenManager.TokenType tokenType)
	{
		return default(bool);
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x13A6444", Offset = "0x13A6444", VA = "0x13A6444")]
	public static void RequestToken(this ITokenConsumer consumer, ITokenKey tokenKey)
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x13A657C", Offset = "0x13A657C", VA = "0x13A657C")]
	public static void ReturnToken(this ITokenConsumer consumer, IToken token)
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x13A67C4", Offset = "0x13A67C4", VA = "0x13A67C4")]
	public static void ReturnTokens(this ITokenConsumer consumer, bool clearRequests = true)
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x13A6FD8", Offset = "0x13A6FD8", VA = "0x13A6FD8")]
	public static void ReturnTokens(this ITokenConsumer consumer, TokenManager.TokenType tokenType, bool clearRequests = true)
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0x13A78D4", Offset = "0x13A78D4", VA = "0x13A78D4")]
	public static void ClearRequests(this ITokenConsumer consumer)
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0x13A7988", Offset = "0x13A7988", VA = "0x13A7988")]
	public static void ClearRequests(this ITokenConsumer consumer, TokenManager.TokenType tokenType)
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0x13A7A50", Offset = "0x13A7A50", VA = "0x13A7A50")]
	public static bool HasToken(this ITokenConsumer consumer, TokenManager.Token token)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0x13A7A70", Offset = "0x13A7A70", VA = "0x13A7A70")]
	public static bool HasToken(this ITokenConsumer consumer, TokenManager.TokenType tokenType)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0x13A7B54", Offset = "0x13A7B54", VA = "0x13A7B54")]
	public static bool HasToken(this ITokenConsumer consumer, ITokenProvider provider, TokenManager.TokenType tokenType)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x13A7C80", Offset = "0x13A7C80", VA = "0x13A7C80")]
	public static bool HasToken(this ITokenConsumer consumer, ITokenKey tokenKey)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0x13A7A88", Offset = "0x13A7A88", VA = "0x13A7A88")]
	public static IToken GetToken(this ITokenConsumer consumer, TokenManager.TokenType tokenType)
	{
		return null;
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0x13A7B6C", Offset = "0x13A7B6C", VA = "0x13A7B6C")]
	public static IToken GetToken(this ITokenConsumer consumer, ITokenProvider provider, TokenManager.TokenType tokenType)
	{
		return null;
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0x13A7C98", Offset = "0x13A7C98", VA = "0x13A7C98")]
	public static IToken GetToken(this ITokenConsumer consumer, ITokenKey tokenKey)
	{
		return null;
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x13A7FB8", Offset = "0x13A7FB8", VA = "0x13A7FB8")]
	public static int GetNumUsedTokens(this ITokenProvider provider, TokenManager.TokenType tokenType)
	{
		return default(int);
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x13A8178", Offset = "0x13A8178", VA = "0x13A8178")]
	public static int GetTokenConsumers(this ITokenProvider provider, TokenManager.TokenType tokenType, ITokenConsumer[] consumers)
	{
		return default(int);
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0x13A84E8", Offset = "0x13A84E8", VA = "0x13A84E8")]
	public static bool StealToken(this ITokenConsumer thief, ITokenConsumer victim, ITokenProvider provider, TokenManager.TokenType tokenType)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000157")]
public class TokenManager : PT.Singleton<TokenManager>
{
	[Token(Token = "0x2000158")]
	public enum TokenType
	{
		[Token(Token = "0x400072F")]
		MoveTo,
		[Token(Token = "0x4000730")]
		Attack,
		[Token(Token = "0x4000731")]
		NavLink,
		[Token(Token = "0x4000732")]
		Spit
	}

	[Token(Token = "0x2000159")]
	public class TokenKey : ITokenKey
	{
		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ITokenProvider _provider;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TokenType _type;

		[Token(Token = "0x170000FD")]
		private ITokenProvider ITokenKey.provider
		{
			[Token(Token = "0x600071A")]
			[Address(RVA = "0x13AB680", Offset = "0x13AB680", VA = "0x13AB680", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		private TokenType ITokenKey.type
		{
			[Token(Token = "0x600071B")]
			[Address(RVA = "0x13AB688", Offset = "0x13AB688", VA = "0x13AB688", Slot = "5")]
			get
			{
				return default(TokenType);
			}
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x13AB690", Offset = "0x13AB690", VA = "0x13AB690")]
		public TokenKey(ITokenProvider provider, TokenType type)
		{
		}
	}

	[Token(Token = "0x200015A")]
	public class Token : IToken
	{
		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool m_isTaken;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ITokenConsumer m_consumer;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ITokenKey m_tokenKey;

		[Token(Token = "0x170000FF")]
		public bool isTaken
		{
			[Token(Token = "0x600071D")]
			[Address(RVA = "0x13AB6CC", Offset = "0x13AB6CC", VA = "0x13AB6CC", Slot = "4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600071E")]
			[Address(RVA = "0x13A954C", Offset = "0x13A954C", VA = "0x13A954C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public ITokenConsumer consumer
		{
			[Token(Token = "0x600071F")]
			[Address(RVA = "0x13AB6D4", Offset = "0x13AB6D4", VA = "0x13AB6D4", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000720")]
			[Address(RVA = "0x13AB6DC", Offset = "0x13AB6DC", VA = "0x13AB6DC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public ITokenKey tokenKey
		{
			[Token(Token = "0x6000721")]
			[Address(RVA = "0x13AB6E4", Offset = "0x13AB6E4", VA = "0x13AB6E4", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000722")]
			[Address(RVA = "0x13AB6EC", Offset = "0x13AB6EC", VA = "0x13AB6EC", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x13A9544", Offset = "0x13A9544", VA = "0x13A9544")]
		public Token()
		{
		}
	}

	[Token(Token = "0x200015B")]
	public struct Request
	{
		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ITokenConsumer consumer;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ITokenKey tokenKey;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool priorityRequest;
	}

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<ITokenKey, List<IToken>> _tokens;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<ITokenKey, List<Request>> _requestQueue;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<TokenType, List<ITokenKey>> _tokenTypesMap;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<ITokenConsumer, List<IToken>> _consumerTokens;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Predicate<IToken> m_tokenTakenTrue;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Predicate<IToken> m_tokenTakenFalse;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<ITokenKey> m_tempTokenKeyList;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Request> m_tempRequestList;

	[Token(Token = "0x170000FA")]
	public Dictionary<ITokenKey, List<Request>> requestQueue
	{
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x13A8CA0", Offset = "0x13A8CA0", VA = "0x13A8CA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FB")]
	public Dictionary<ITokenKey, List<IToken>> tokens
	{
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x13A8CA8", Offset = "0x13A8CA8", VA = "0x13A8CA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FC")]
	public Dictionary<ITokenConsumer, List<IToken>> consumerTokens
	{
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x13A8CB0", Offset = "0x13A8CB0", VA = "0x13A8CB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x13A8CB8", Offset = "0x13A8CB8", VA = "0x13A8CB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x13A8F04", Offset = "0x13A8F04", VA = "0x13A8F04")]
	public void RegisterToken(ITokenKey tokenKey, int numTokens, [Optional] IToken[] tokenList)
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0x13A972C", Offset = "0x13A972C", VA = "0x13A972C")]
	public void UnregisterToken(ITokenKey tokenKey)
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0x13A64D0", Offset = "0x13A64D0", VA = "0x13A64D0")]
	public void RequestToken(ITokenConsumer consumer, ITokenKey tokenKey, bool highPriority = false)
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0x13AA000", Offset = "0x13AA000", VA = "0x13AA000")]
	private void AddRequest(Request request)
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0x13A68AC", Offset = "0x13A68AC", VA = "0x13A68AC")]
	public void ReturnTokens(ITokenConsumer consumer)
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0x13A7134", Offset = "0x13A7134", VA = "0x13A7134")]
	public void ReturnTokens(ITokenConsumer consumer, TokenType tokenType)
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0x13A65F4", Offset = "0x13A65F4", VA = "0x13A65F4")]
	public void ReturnToken(IToken token)
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0x13A6B74", Offset = "0x13A6B74", VA = "0x13A6B74")]
	public void ClearRequests(ITokenConsumer consumer)
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0x13A7464", Offset = "0x13A7464", VA = "0x13A7464")]
	public void ClearRequests(ITokenConsumer consumer, TokenType tokenType)
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0x13A9E90", Offset = "0x13A9E90", VA = "0x13A9E90")]
	private void DeleteRequest(ITokenConsumer consumer, ITokenKey tokenKey)
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0x13AABE4", Offset = "0x13AABE4", VA = "0x13AABE4")]
	private void Update()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x13AABE8", Offset = "0x13AABE8", VA = "0x13AABE8")]
	private int SortRequests(Request a, Request b)
	{
		return default(int);
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x13AA2F0", Offset = "0x13AA2F0", VA = "0x13AA2F0")]
	private void ProcessRequests()
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x13AAC10", Offset = "0x13AAC10", VA = "0x13AAC10")]
	private bool ProcessRequest(Request request)
	{
		return default(bool);
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x13A88AC", Offset = "0x13A88AC", VA = "0x13A88AC")]
	public void GiveToken(IToken token, ITokenConsumer consumer)
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x13A86B0", Offset = "0x13A86B0", VA = "0x13A86B0")]
	public void StealToken(IToken token)
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x13AB0BC", Offset = "0x13AB0BC", VA = "0x13AB0BC")]
	private bool StealToken(Request request)
	{
		return default(bool);
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x13AB3EC", Offset = "0x13AB3EC", VA = "0x13AB3EC")]
	public int NumAvailableTokens(ITokenKey tokenKey)
	{
		return default(int);
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x13A80C4", Offset = "0x13A80C4", VA = "0x13A80C4")]
	public int NumTakenTokens(ITokenKey tokenKey)
	{
		return default(int);
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x13AB4A0", Offset = "0x13AB4A0", VA = "0x13AB4A0")]
	public bool HasToken(ITokenConsumer consumer, TokenType tokenType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x13A9E78", Offset = "0x13A9E78", VA = "0x13A9E78")]
	public bool HasToken(ITokenConsumer consumer, ITokenKey tokenKey)
	{
		return default(bool);
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x13A7D64", Offset = "0x13A7D64", VA = "0x13A7D64")]
	public IToken GetToken(ITokenConsumer consumer, TokenType tokenType)
	{
		return null;
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x13A7E88", Offset = "0x13A7E88", VA = "0x13A7E88")]
	public IToken GetToken(ITokenConsumer consumer, ITokenKey tokenKey)
	{
		return null;
	}

	[Token(Token = "0x6000718")]
	public List<T> GetTokenConsumers<T>(ITokenKey key) where T : ITokenConsumer
	{
		return null;
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x13AB4C8", Offset = "0x13AB4C8", VA = "0x13AB4C8")]
	public TokenManager()
	{
	}
}
[Token(Token = "0x2000163")]
public enum TokenResult
{
	[Token(Token = "0x4000748")]
	Given,
	[Token(Token = "0x4000749")]
	Stolen,
	[Token(Token = "0x400074A")]
	Unavailable
}
[Token(Token = "0x2000164")]
public struct TokenRequestResponse
{
	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public TokenResult result;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IToken token;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ITokenKey key;
}
[Token(Token = "0x2000165")]
public class TimerManager : EntityEventListener<IExtractionTimerState>
{
	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float _startTimer;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("time in sec before the departure of the helicopter")]
	[SerializeField]
	private float _chopperTimer;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float _refreshTime;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameViewModel _gameViewModel;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameEvent OnStartTimer;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameEvent OnPauseTimer;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameEvent OnUnpauseTimer;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameEvent OnCompletTimer;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameEvent OnCompletedChoperTimer;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameEvent OnStartTimerAudio;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	internal Action OnChopperLeft;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<TimedGameEvent> StartTimerEvents;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<TimedGameEvent> ChopperTimerEvents;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _totalTimeElapsed;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isTimerEnabled;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	private bool m_lightingState;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _timeLastUpdate;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float _extractionTimer;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float _chopperWaitingTimer;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool _chopperLanded;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	private bool _chopperLeft;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	private bool firstUpdate;

	[Token(Token = "0x17000102")]
	public static TimerManager Instance
	{
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x13ABCB4", Offset = "0x13ABCB4", VA = "0x13ABCB4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000735")]
		[Address(RVA = "0x13ABD0C", Offset = "0x13ABD0C", VA = "0x13ABD0C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000103")]
	public float ExtractionTimer
	{
		[Token(Token = "0x6000736")]
		[Address(RVA = "0x13ABD74", Offset = "0x13ABD74", VA = "0x13ABD74")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000104")]
	public float UpwardExtractionTimer
	{
		[Token(Token = "0x6000737")]
		[Address(RVA = "0x13ABD7C", Offset = "0x13ABD7C", VA = "0x13ABD7C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000105")]
	public float NormalizedRemainingTime
	{
		[Token(Token = "0x6000738")]
		[Address(RVA = "0x13ABD8C", Offset = "0x13ABD8C", VA = "0x13ABD8C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000106")]
	public float NormalizedChopperWaitingTime
	{
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x13ABD9C", Offset = "0x13ABD9C", VA = "0x13ABD9C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000107")]
	public bool IsTimerEnabled
	{
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x13ABDAC", Offset = "0x13ABDAC", VA = "0x13ABDAC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000108")]
	public bool ChopperLanded
	{
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x13ABDB4", Offset = "0x13ABDB4", VA = "0x13ABDB4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000109")]
	public bool ChopperLeft
	{
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x13ABDBC", Offset = "0x13ABDBC", VA = "0x13ABDBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700010A")]
	public float ChopperTimer
	{
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x13ABDC4", Offset = "0x13ABDC4", VA = "0x13ABDC4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0x13ABDCC", Offset = "0x13ABDCC", VA = "0x13ABDCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x13ABDD8", Offset = "0x13ABDD8", VA = "0x13ABDD8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x13AC084", Offset = "0x13AC084", VA = "0x13AC084", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x13AC9D0", Offset = "0x13AC9D0", VA = "0x13AC9D0", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x13ACAA0", Offset = "0x13ACAA0", VA = "0x13ACAA0", Slot = "20")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0x13AD078", Offset = "0x13AD078", VA = "0x13AD078")]
	private void UpdateChopperTimer(List<TimedGameEvent> timerList)
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0x13AD2C8", Offset = "0x13AD2C8", VA = "0x13AD2C8")]
	private void PlayTimerNotification(float time, int timerIndex)
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0x13AD41C", Offset = "0x13AD41C", VA = "0x13AD41C")]
	public void OnTimerChanged()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x13AD5CC", Offset = "0x13AD5CC", VA = "0x13AD5CC")]
	public void OnChopperTimerChanged()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0x13AD714", Offset = "0x13AD714", VA = "0x13AD714")]
	public void OnChopperLanded()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0x13AD9AC", Offset = "0x13AD9AC", VA = "0x13AD9AC")]
	public void OnObjectivePosition()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x13ADEA8", Offset = "0x13ADEA8", VA = "0x13ADEA8")]
	public void OnObjectiveTotalTargetCount()
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x13ADFC0", Offset = "0x13ADFC0", VA = "0x13ADFC0")]
	public void OnObjectiveCurrentTargetCount()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x13AE0D8", Offset = "0x13AE0D8", VA = "0x13AE0D8")]
	public void OnObjectiveTimer()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x13AE1EC", Offset = "0x13AE1EC", VA = "0x13AE1EC")]
	public void OnObjectiveNormalizedTimer()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x13AE300", Offset = "0x13AE300", VA = "0x13AE300")]
	public void OnShowObjectiveProgress()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x13AE418", Offset = "0x13AE418", VA = "0x13AE418")]
	public void OnWatchMode()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x13AE5C4", Offset = "0x13AE5C4", VA = "0x13AE5C4")]
	public void StartTimer(float initialTime)
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x13AE5F4", Offset = "0x13AE5F4", VA = "0x13AE5F4")]
	public void StartTimer()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x13AE628", Offset = "0x13AE628", VA = "0x13AE628")]
	public void PauseTimer()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x13AE630", Offset = "0x13AE630", VA = "0x13AE630")]
	public void UnPauseTimer()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x13AE63C", Offset = "0x13AE63C", VA = "0x13AE63C")]
	public void SetIntialTimer(float initialTimer)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x13AE644", Offset = "0x13AE644", VA = "0x13AE644")]
	public void SetTimer(float timer)
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x13AE61C", Offset = "0x13AE61C", VA = "0x13AE61C")]
	public void ResetTimer()
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x13AE64C", Offset = "0x13AE64C", VA = "0x13AE64C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x13AE6E4", Offset = "0x13AE6E4", VA = "0x13AE6E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x13AE880", Offset = "0x13AE880", VA = "0x13AE880")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x13AE9AC", Offset = "0x13AE9AC", VA = "0x13AE9AC")]
	private void ChangeLightState(bool isOn)
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x13AD824", Offset = "0x13AD824", VA = "0x13AD824")]
	internal void SetWatchRightPaneMode()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x13AE9B8", Offset = "0x13AE9B8", VA = "0x13AE9B8")]
	internal void SetWatchTargetCount(int currentTargetCount, int totalTargetCount, bool showProgress)
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x13AEBF8", Offset = "0x13AEBF8", VA = "0x13AEBF8")]
	internal void SetWatchTimer(float timer, float normalizedTimer)
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x13AED4C", Offset = "0x13AED4C", VA = "0x13AED4C")]
	internal void SetWatchQuietMode(bool isSilent)
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x13AEE20", Offset = "0x13AEE20", VA = "0x13AEE20")]
	public TimerManager()
	{
	}
}
[Token(Token = "0x2000166")]
public class BillboardYAxisLock : MonoBehaviour
{
	[Token(Token = "0x2000167")]
	public enum AllignmentAxis
	{
		[Token(Token = "0x4000769")]
		X,
		[Token(Token = "0x400076A")]
		Y,
		[Token(Token = "0x400076B")]
		Z,
		[Token(Token = "0x400076C")]
		custom
	}

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AllignmentAxis alignmentAxis;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 customAxis;

	[Token(Token = "0x6000760")]
	[Address(RVA = "0x13AFF10", Offset = "0x13AFF10", VA = "0x13AFF10")]
	private void Update()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x13B0080", Offset = "0x13B0080", VA = "0x13B0080")]
	public BillboardYAxisLock()
	{
	}
}
[Token(Token = "0x2000168")]
[RequireComponent(typeof(PlayableDirector))]
public class CinematicDirector : MonoBehaviour
{
	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<TimelineAsset> m_timelineAssets;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AutoComponent]
	private PlayableDirector m_director;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, TimelineAsset> m_timelineDict;

	[Token(Token = "0x6000762")]
	[Address(RVA = "0x13B0088", Offset = "0x13B0088", VA = "0x13B0088")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0x13B038C", Offset = "0x13B038C", VA = "0x13B038C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0x13B04A8", Offset = "0x13B04A8", VA = "0x13B04A8")]
	private void OnPlayerActiveStateChanged(bool active)
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0x13B04EC", Offset = "0x13B04EC", VA = "0x13B04EC")]
	public void Play(TimelineAsset timeline, bool loop)
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0x13B0820", Offset = "0x13B0820", VA = "0x13B0820")]
	public void Play(string timelineName, bool loop)
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0x13B04D0", Offset = "0x13B04D0", VA = "0x13B04D0")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x13B08A4", Offset = "0x13B08A4", VA = "0x13B08A4")]
	public CinematicDirector()
	{
	}
}
[Token(Token = "0x2000169")]
public class EyeTwitcher : MonoBehaviour
{
	[Token(Token = "0x200016A")]
	[CompilerGenerated]
	private sealed class <Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EyeTwitcher <>4__this;

		[Token(Token = "0x1700010B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600076F")]
			[Address(RVA = "0x13B0D08", Offset = "0x13B0D08", VA = "0x13B0D08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000771")]
			[Address(RVA = "0x13B0D50", Offset = "0x13B0D50", VA = "0x13B0D50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x13B09F0", Offset = "0x13B09F0", VA = "0x13B09F0")]
		[DebuggerHidden]
		public <Start>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x13B0B64", Offset = "0x13B0B64", VA = "0x13B0B64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x13B0B68", Offset = "0x13B0B68", VA = "0x13B0B68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x13B0D10", Offset = "0x13B0D10", VA = "0x13B0D10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform[] m_eyeBallTransforms;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Quaternion currentTwitch;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector3 rotation;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float minTime;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float maxTime;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float minEyeMovement;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float maxEyeMovement;

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x13B097C", Offset = "0x13B097C", VA = "0x13B097C")]
	[IteratorStateMachine(typeof(<Start>d__7))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x13B0A18", Offset = "0x13B0A18", VA = "0x13B0A18")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x13B0B00", Offset = "0x13B0B00", VA = "0x13B0B00")]
	public EyeTwitcher()
	{
	}
}
[Token(Token = "0x200016B")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer))]
public class FaceSkinController : MonoBehaviour
{
	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MeshFilter m_meshFilter;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshRenderer m_meshRenderer;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform neckBone;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform headBone;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool reverseBoneWeightOrder;

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x13B0D58", Offset = "0x13B0D58", VA = "0x13B0D58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x13B0DE8", Offset = "0x13B0DE8", VA = "0x13B0DE8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0x13B112C", Offset = "0x13B112C", VA = "0x13B112C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0x13B1240", Offset = "0x13B1240", VA = "0x13B1240")]
	public FaceSkinController()
	{
	}
}
[Token(Token = "0x200016C")]
public class BattleTest : MonoBehaviour
{
	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BattleTestAgent[] m_cultists;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BattleTestAgent[] m_battleSisters;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem m_cultistGunParticleSystem;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem m_battleSisterGunParticleSystem;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float m_timeBetweenShotsMin;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float m_timeBetweenShotsMax;

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x13B1248", Offset = "0x13B1248", VA = "0x13B1248")]
	private void Update()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x13B15D0", Offset = "0x13B15D0", VA = "0x13B15D0")]
	private static void EmitParticle(ParticleSystem particleSystem, Transform muzzle)
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0x13B1644", Offset = "0x13B1644", VA = "0x13B1644")]
	public BattleTest()
	{
	}
}
[Token(Token = "0x200016D")]
public class BattleTestAgent : CachedMonoBehaviour
{
	[Token(Token = "0x200016E")]
	private enum State
	{
		[Token(Token = "0x4000794")]
		Moving,
		[Token(Token = "0x4000795")]
		Firing
	}

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_addMovement;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_destination;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Vector3[] m_pathCorners;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Quaternion[] m_pathCornersRotations;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float[] m_lengths;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float m_movementSpeed;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_muzzle;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private int m_moveClipIndex;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private int m_firingClipIndex;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeForNextShot;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private State m_state;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_timer;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int m_nextCorner;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private VertexVATController m_vertexVatController;

	[Token(Token = "0x1700010D")]
	public Transform Muzzle
	{
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x13B1658", Offset = "0x13B1658", VA = "0x13B1658")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700010E")]
	public bool CanFire
	{
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x13B15C0", Offset = "0x13B15C0", VA = "0x13B15C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0x13B1660", Offset = "0x13B1660", VA = "0x13B1660")]
	[ContextMenu("Calculate Path")]
	private void CalculatePath()
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0x13B19F0", Offset = "0x13B19F0", VA = "0x13B19F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0x13B1A88", Offset = "0x13B1A88", VA = "0x13B1A88")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0x13B13B4", Offset = "0x13B13B4", VA = "0x13B13B4")]
	public void Tick()
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0x13B1C18", Offset = "0x13B1C18", VA = "0x13B1C18")]
	public BattleTestAgent()
	{
	}
}
[Token(Token = "0x200016F")]
public class VATControlAsset : PlayableAsset
{
	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VertexVATMetadata vertexVatMetadata;

	[Token(Token = "0x6000780")]
	[Address(RVA = "0x13B1C34", Offset = "0x13B1C34", VA = "0x13B1C34", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0x13B1D24", Offset = "0x13B1D24", VA = "0x13B1D24")]
	public VATControlAsset()
	{
	}
}
[Token(Token = "0x2000170")]
public class VATControlBehaviour : PlayableBehaviour
{
	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public VertexVATMetadata vertexVatMetadata;

	[Token(Token = "0x6000782")]
	[Address(RVA = "0x13B1D2C", Offset = "0x13B1D2C", VA = "0x13B1D2C", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0x13B1E48", Offset = "0x13B1E48", VA = "0x13B1E48")]
	public VATControlBehaviour()
	{
	}
}
[Token(Token = "0x2000171")]
public class WalkingTest : MonoBehaviour
{
	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private WalkingTestAgent[] m_agents;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem m_cultistGunParticleSystem;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem m_battleSisterGunParticleSystem;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_timeBetweenShotsMin;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_timeBetweenShotsMax;

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x13B1E50", Offset = "0x13B1E50", VA = "0x13B1E50")]
	private void Update()
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x13B20B4", Offset = "0x13B20B4", VA = "0x13B20B4")]
	public WalkingTest()
	{
	}
}
[Token(Token = "0x2000172")]
public class WalkingTestAgent : CachedMonoBehaviour
{
	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_destination;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Vector3[] m_pathCorners;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Quaternion[] m_pathCornersRotations;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float[] m_lengths;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float m_movementSpeed;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float m_timer;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_nextCorner;

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x13B20C8", Offset = "0x13B20C8", VA = "0x13B20C8")]
	[ContextMenu("Calculate Path")]
	private void CalculatePath()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x13B2458", Offset = "0x13B2458", VA = "0x13B2458")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x13B1EB8", Offset = "0x13B1EB8", VA = "0x13B1EB8")]
	public void Tick()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x13B25E8", Offset = "0x13B25E8", VA = "0x13B25E8")]
	public WalkingTestAgent()
	{
	}
}
[Token(Token = "0x2000173")]
[ExecuteInEditMode]
public class CameraLayerCulling : MonoBehaviour
{
	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera m_camera;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float range;

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x13B2600", Offset = "0x13B2600", VA = "0x13B2600")]
	private void UpdateCulling()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x13B2698", Offset = "0x13B2698", VA = "0x13B2698")]
	public CameraLayerCulling()
	{
	}
}
[Token(Token = "0x2000174")]
public class CullingElement : MonoBehaviour
{
	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool dontCull;

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x13B26A0", Offset = "0x13B26A0", VA = "0x13B26A0")]
	public CullingElement()
	{
	}
}
[Token(Token = "0x2000175")]
public static class LayerCullController
{
	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Camera s_mainCamera;

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x13B26A8", Offset = "0x13B26A8", VA = "0x13B26A8")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitRuntime()
	{
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0x13B2824", Offset = "0x13B2824", VA = "0x13B2824")]
	private static void UpdateCullDistancesEditor()
	{
	}
}
[Token(Token = "0x2000176")]
public enum Shape
{
	[Token(Token = "0x40007A9")]
	Box,
	[Token(Token = "0x40007AA")]
	ConvexPrism,
	[Token(Token = "0x40007AB")]
	Composited_Colliders
}
[Token(Token = "0x2000177")]
public class ActivateObjectWithLightState : MonoBehaviour
{
	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("_activateObjectsWithLight")]
	private List<GameObject> m_activateObjectsWithLight;

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x13B2A00", Offset = "0x13B2A00", VA = "0x13B2A00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x13B2B2C", Offset = "0x13B2B2C", VA = "0x13B2B2C")]
	public void LightingStateChanged(bool isOn)
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x13B2CD4", Offset = "0x13B2CD4", VA = "0x13B2CD4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x13B2E00", Offset = "0x13B2E00", VA = "0x13B2E00")]
	public ActivateObjectWithLightState()
	{
	}
}
[Token(Token = "0x2000178")]
public class CheckpointTrackerPanel : MonoBehaviour
{
	[Token(Token = "0x6000793")]
	[Address(RVA = "0x13B2E08", Offset = "0x13B2E08", VA = "0x13B2E08")]
	public CheckpointTrackerPanel()
	{
	}
}
[Token(Token = "0x2000179")]
public class DeactivateAfterTimeInSec : MonoBehaviour
{
	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float timeBeforeDeactivation;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float elapsedTime;

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x13B2E10", Offset = "0x13B2E10", VA = "0x13B2E10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x13B2E18", Offset = "0x13B2E18", VA = "0x13B2E18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x13B2E20", Offset = "0x13B2E20", VA = "0x13B2E20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x13B2E80", Offset = "0x13B2E80", VA = "0x13B2E80")]
	public DeactivateAfterTimeInSec()
	{
	}
}
[Token(Token = "0x200017A")]
public class JointVisualizer : CachedMonoBehaviour
{
	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private XRLineRenderer m_lineRenderer;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ConfigurableJoint m_joint;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_baseLocalPosition;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] m_points;

	[Token(Token = "0x6000798")]
	[Address(RVA = "0x13B2E90", Offset = "0x13B2E90", VA = "0x13B2E90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0x13B2F64", Offset = "0x13B2F64", VA = "0x13B2F64")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0x13B3118", Offset = "0x13B3118", VA = "0x13B3118")]
	public JointVisualizer()
	{
	}
}
[Token(Token = "0x200017B")]
public class MetaDebug : MonoBehaviour
{
	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> panels;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI weaponStatsText;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshProUGUI perkStatsText;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_Weapon;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WeaponConfig m_WeaponConfig;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float IncreaseAmmount;

	[Token(Token = "0x600079B")]
	[Address(RVA = "0x13B3120", Offset = "0x13B3120", VA = "0x13B3120")]
	private void Start()
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0x13B3124", Offset = "0x13B3124", VA = "0x13B3124")]
	private void Update()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0x13B3460", Offset = "0x13B3460", VA = "0x13B3460")]
	private void Awake()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0x13B3464", Offset = "0x13B3464", VA = "0x13B3464")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0x13B3580", Offset = "0x13B3580", VA = "0x13B3580")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0x13B369C", Offset = "0x13B369C", VA = "0x13B369C")]
	public void SwitchPanels(int I)
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x13B3128", Offset = "0x13B3128", VA = "0x13B3128")]
	private void PlayerStats()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x13B373C", Offset = "0x13B373C", VA = "0x13B373C")]
	public void WeaponStats()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x13B3D78", Offset = "0x13B3D78", VA = "0x13B3D78")]
	public void WeaponDamage(bool Mode)
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x13B3DAC", Offset = "0x13B3DAC", VA = "0x13B3DAC")]
	public void RecoilReduction(bool Mode)
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x13B3DE0", Offset = "0x13B3DE0", VA = "0x13B3DE0")]
	public void WeaponBulletPenetration(bool Mode)
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x13B3E14", Offset = "0x13B3E14", VA = "0x13B3E14")]
	public void MagazineCapacity(bool Mode)
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x13B3E5C", Offset = "0x13B3E5C", VA = "0x13B3E5C")]
	public void Projectlie(bool Mode)
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x13B3EA4", Offset = "0x13B3EA4", VA = "0x13B3EA4")]
	public void Durabilty(bool Mode)
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x13B3EF8", Offset = "0x13B3EF8", VA = "0x13B3EF8")]
	public void RangeEffectiveness(bool Mode)
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x13B3F40", Offset = "0x13B3F40", VA = "0x13B3F40")]
	public void LaserMod(bool Mode)
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x13B3F60", Offset = "0x13B3F60", VA = "0x13B3F60")]
	public void ResetXP()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x13B3FAC", Offset = "0x13B3FAC", VA = "0x13B3FAC")]
	public void ResetWeaponXP()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x13B3FD8", Offset = "0x13B3FD8", VA = "0x13B3FD8")]
	public void PlayerLvl(bool Mode)
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x13B41A4", Offset = "0x13B41A4", VA = "0x13B41A4")]
	public void WeaponLevelUp()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x13B426C", Offset = "0x13B426C", VA = "0x13B426C")]
	public void SaveXP()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x13B42BC", Offset = "0x13B42BC", VA = "0x13B42BC")]
	public void OnVrItemGrab(Identifier id, VrItem item)
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x13B43F8", Offset = "0x13B43F8", VA = "0x13B43F8")]
	public MetaDebug()
	{
	}
}
[Token(Token = "0x200017C")]
public class VrDebugCycleTimescale : MonoBehaviour
{
	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text m_text;

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x13B4488", Offset = "0x13B4488", VA = "0x13B4488")]
	public void CycleTimescale()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x13B4570", Offset = "0x13B4570", VA = "0x13B4570")]
	public VrDebugCycleTimescale()
	{
	}
}
[Token(Token = "0x200017D")]
public class AgentDataProvider : MonoBehaviour, IDataSource
{
	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AgentViewModel m_agentViewModel;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x1700010F")]
	public AgentViewModel Data
	{
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x13B4578", Offset = "0x13B4578", VA = "0x13B4578")]
		get
		{
			return null;
		}
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x13B4580", Offset = "0x13B4580", VA = "0x13B4580")]
		set
		{
		}
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x13B45EC", Offset = "0x13B45EC", VA = "0x13B45EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x13B4644", Offset = "0x13B4644", VA = "0x13B4644")]
	public void Update()
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x13B469C", Offset = "0x13B469C", VA = "0x13B469C")]
	public AgentDataProvider()
	{
	}
}
[Token(Token = "0x200017E")]
[CreateAssetMenu(menuName = "Battle Sister/Agent Identifier")]
public class AgentIdentifier : Identifier
{
	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x13B4710", Offset = "0x13B4710", VA = "0x13B4710")]
	public AgentIdentifier()
	{
	}
}
[Token(Token = "0x200017F")]
public class CinematicHelper : MonoBehaviour
{
	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x13B4718", Offset = "0x13B4718", VA = "0x13B4718")]
	public CinematicHelper()
	{
	}
}
[Token(Token = "0x2000180")]
public class MoveInterestingCube : MonoBehaviour
{
	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x13B4720", Offset = "0x13B4720", VA = "0x13B4720")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x13B4724", Offset = "0x13B4724", VA = "0x13B4724")]
	private void Move()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x13B47EC", Offset = "0x13B47EC", VA = "0x13B47EC")]
	public MoveInterestingCube()
	{
	}
}
[Serializable]
[Token(Token = "0x2000181")]
public class TimelineReaction
{
	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private SignalAsset m_signaledReactions;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent m_unityEvent;

	[Token(Token = "0x17000110")]
	public SignalAsset SignaledReaction
	{
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x13B47F4", Offset = "0x13B47F4", VA = "0x13B47F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000111")]
	public UnityEvent UnityEvent
	{
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x13B47FC", Offset = "0x13B47FC", VA = "0x13B47FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x13B4804", Offset = "0x13B4804", VA = "0x13B4804")]
	public TimelineReaction()
	{
	}
}
[Token(Token = "0x2000182")]
public static class IAgentExtensionMethods
{
	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x13B480C", Offset = "0x13B480C", VA = "0x13B480C")]
	public static bool HasRootHealthStatus(this IAgent agent)
	{
		return default(bool);
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x13B49C0", Offset = "0x13B49C0", VA = "0x13B49C0")]
	public static HealthStatus RootHealthStatus(this IAgent agent)
	{
		return null;
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x13B4B08", Offset = "0x13B4B08", VA = "0x13B4B08")]
	public static PriorityTarget PriorityTarget(this IAgent agent)
	{
		return null;
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0x13B4C50", Offset = "0x13B4C50", VA = "0x13B4C50")]
	public static BoltEntity BoltEntity(this IAgent agent)
	{
		return null;
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0x13B4D10", Offset = "0x13B4D10", VA = "0x13B4D10")]
	public static void ChangeAgentMode(this IAgent agent, CinematicSpawnPoint.NonPlayerAgentMode mode, BasicSpawnPoint spawnPoint)
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0x13B4D14", Offset = "0x13B4D14", VA = "0x13B4D14")]
	public static void SetSpawnedFrom(this IAgent agent, object SpawnedFrom)
	{
	}
}
[Token(Token = "0x2000183")]
public class LipSyncAlembicDisabler : MonoBehaviour
{
	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LODGroup m_lodGroup;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LOD[] m_standardLods;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LOD[] m_reducedLods;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer[] m_highestLodRenderers;

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0x13B4D18", Offset = "0x13B4D18", VA = "0x13B4D18")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0x13B4E3C", Offset = "0x13B4E3C", VA = "0x13B4E3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0x13B4E44", Offset = "0x13B4E44", VA = "0x13B4E44")]
	public void SetAlembicLodEnabled(bool isEnabled)
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x13B4ED8", Offset = "0x13B4ED8", VA = "0x13B4ED8")]
	public LipSyncAlembicDisabler()
	{
	}
}
[Token(Token = "0x2000184")]
public class TestPlayerAgentStunnable : MonoBehaviour, IStunnable
{
	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HitReactionConfig m_reactionProperties;

	[Token(Token = "0x17000112")]
	private HitReactionConfig IStunnable.ReactionProperties
	{
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x13B4EE0", Offset = "0x13B4EE0", VA = "0x13B4EE0", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x13B4EE8", Offset = "0x13B4EE8", VA = "0x13B4EE8")]
	public TestPlayerAgentStunnable()
	{
	}
}
[Token(Token = "0x2000185")]
public class AgentPerformanceManager : MonoBehaviour
{
	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Distance within melee striking range")]
	[SerializeField]
	private float m_meleeDistance;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[UnityEngine.Tooltip("Angle (degrees) from players head rotation to denote which agents are in view")]
	private float m_inViewAngle;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("How often we should perform target checks while we're being targeted. Happens every frame when we are not being targeted to ensure we switch over in time.")]
	[SerializeField]
	private float m_targetCheckInterval;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Collider to enable when agent is not within melee distance and not shot at")]
	private Collider m_lodCollider;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_hasLodCollider;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool m_withinMeleeDistance;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_sqrMeleeDist;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Collider> m_colliders;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_disableColliders;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool m_inView;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PriorityTarget[] s_targetBuffer;

	[Token(Token = "0x40007CE")]
	private const float c_resetCollisionPostTargetTime = 1f;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_resetCollisionPostTargetTimer;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_checkTargetedTimer;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private IAgent m_agent;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_renderersVisible;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] defaultPlayerDirections;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float[] defaultAngles;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float[] defaultSqrDists;

	[Token(Token = "0x17000113")]
	public bool InViewOrInMeleeRange
	{
		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x13B4EF0", Offset = "0x13B4EF0", VA = "0x13B4EF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000114")]
	private bool ShouldUseFullCollision
	{
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x13B59B4", Offset = "0x13B59B4", VA = "0x13B59B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x13B4F10", Offset = "0x13B4F10", VA = "0x13B4F10")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x13B52CC", Offset = "0x13B52CC", VA = "0x13B52CC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x13B5484", Offset = "0x13B5484", VA = "0x13B5484")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x13B5490", Offset = "0x13B5490", VA = "0x13B5490")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x13B55CC", Offset = "0x13B55CC", VA = "0x13B55CC")]
	private void RefreshBeingTargeted()
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x13B59D8", Offset = "0x13B59D8", VA = "0x13B59D8")]
	private void OnAllocatedFromPool()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x13B5B3C", Offset = "0x13B5B3C", VA = "0x13B5B3C")]
	private void OnDeath(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x13B549C", Offset = "0x13B549C", VA = "0x13B549C")]
	private void EnableAgentColliders(bool enable, bool forceSet = false)
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x13B5B48", Offset = "0x13B5B48", VA = "0x13B5B48")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x13B5B60", Offset = "0x13B5B60", VA = "0x13B5B60")]
	private void UpdateRenderer()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x13B5A74", Offset = "0x13B5A74", VA = "0x13B5A74")]
	private void SetRenderersVisible(bool visible, bool force)
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x13B5BEC", Offset = "0x13B5BEC", VA = "0x13B5BEC")]
	private void UpdateCollision()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x13B62C4", Offset = "0x13B62C4", VA = "0x13B62C4")]
	public AgentPerformanceManager()
	{
	}
}
[Token(Token = "0x2000186")]
public class GraphicTests : MonoBehaviour
{
	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OpaqueSortMode m_sortMode;

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x13B64B8", Offset = "0x13B64B8", VA = "0x13B64B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x13B64E0", Offset = "0x13B64E0", VA = "0x13B64E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x13B64E4", Offset = "0x13B64E4", VA = "0x13B64E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x13B650C", Offset = "0x13B650C", VA = "0x13B650C")]
	[ContextMenu("Clear Lightmapping")]
	public void ClearLightmapping()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x13B6510", Offset = "0x13B6510", VA = "0x13B6510")]
	[ContextMenu("Clear Material Property Blocks")]
	public void ClearMaterialProipertyBlocks()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x13B6514", Offset = "0x13B6514", VA = "0x13B6514")]
	[ContextMenu("Optimize Decals")]
	public void OptimizeDecals()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x13B6518", Offset = "0x13B6518", VA = "0x13B6518")]
	[ContextMenu("Disable Static Batch Top LOD")]
	public void DisableTopLodStaticBatch()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x13B666C", Offset = "0x13B666C", VA = "0x13B666C")]
	[ContextMenu("Enable Static Batch Top LOD")]
	public void EnableTopLodStaticBatch()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x13B67C0", Offset = "0x13B67C0", VA = "0x13B67C0")]
	[ContextMenu("Remove Top Lod")]
	public void RemoveTopLod()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x13B69A4", Offset = "0x13B69A4", VA = "0x13B69A4")]
	[ContextMenu("Use Standard Shader")]
	public void UseStandardShader()
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x13B69A8", Offset = "0x13B69A8", VA = "0x13B69A8")]
	[ContextMenu("Set Bounds")]
	public void SetBounds()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x13B6BF0", Offset = "0x13B6BF0", VA = "0x13B6BF0")]
	[ContextMenu("Disable Static Batching")]
	public void DisableStaticBatching()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x13B6CEC", Offset = "0x13B6CEC", VA = "0x13B6CEC")]
	[ContextMenu("Enable Static Batching")]
	public void EnableStaticBatching()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x13B6DE8", Offset = "0x13B6DE8", VA = "0x13B6DE8")]
	[ContextMenu("Make Additional Meshes non-readable")]
	public void MakeMeshesNonReadable()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x13B6F90", Offset = "0x13B6F90", VA = "0x13B6F90")]
	public GraphicTests()
	{
	}
}
[Token(Token = "0x2000187")]
public static class GameExtensionMethods
{
	[Token(Token = "0x2000188")]
	private struct LineOfSightCacheEntry
	{
		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 eyePoint;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 targetPoint;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform targetObject;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int mask;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool result;
	}

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector3[] s_cardinalDirections;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int s_lineOfSightCacheFrame;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static List<LineOfSightCacheEntry> s_lineOfSightCache;

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x13B6F98", Offset = "0x13B6F98", VA = "0x13B6F98")]
	public static void ProcessImpactVfx(this DamageType damageType, Collider collider, Vector3 hitPoint, Vector3 hitNormal, float velocity = 0f)
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x13B7058", Offset = "0x13B7058", VA = "0x13B7058")]
	public static void LaunchAtTargetPosition(this Rigidbody rigidbody, Vector3 targetPosition, float launchSpeedXz, bool turnToFaceLaunchVector = false, [Optional] float? maximumSpeedY)
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x13B75C8", Offset = "0x13B75C8", VA = "0x13B75C8")]
	public static void RotateTowardsUsingTorque(this Rigidbody rigidbody, Quaternion rotationError, float torqueMagnitude)
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x13B76B4", Offset = "0x13B76B4", VA = "0x13B76B4")]
	public static bool CheckLineOfSight(Vector3 eyePoint, Vector3 targetPoint, float tolerance, [Optional] Transform targetObject, bool hitPlayerClips = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x13B7890", Offset = "0x13B7890", VA = "0x13B7890")]
	public static bool CheckLineOfSight(Vector3 eyePoint, Vector3 targetPoint, [Optional] Transform targetObject, bool hitPlayerClips = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60007F1")]
	public static T GetComponent<T>(this IOwner source) where T : class
	{
		return null;
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x13B7D54", Offset = "0x13B7D54", VA = "0x13B7D54")]
	public static HealthStatus GetHealthStatus(this IOwner source)
	{
		return null;
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x13B7E94", Offset = "0x13B7E94", VA = "0x13B7E94")]
	public static int NumGuns(this IGunOwner gunOwner)
	{
		return default(int);
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x13B7F4C", Offset = "0x13B7F4C", VA = "0x13B7F4C")]
	public static void HandleLimbDetached(this IGunOwner gunOwner, Transform parentTransform, List<VrGun> activeGuns, GibDefinition gib)
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0x13B8144", Offset = "0x13B8144", VA = "0x13B8144")]
	public static void ResetSharedVariables(this BehaviourTree tree)
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0x13B865C", Offset = "0x13B865C", VA = "0x13B865C")]
	public static void PairRequiredDevices(this PlayerInput input)
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0x13B875C", Offset = "0x13B875C", VA = "0x13B875C")]
	public static string ConvertCmToHeightString(this int centimeters)
	{
		return null;
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x13B88F4", Offset = "0x13B88F4", VA = "0x13B88F4")]
	public static Color MoveTowards(this Color a, Color b, float maxDelta)
	{
		return default(Color);
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x13B8994", Offset = "0x13B8994", VA = "0x13B8994")]
	public static float DistanceFromCameraSqr(this Transform transform)
	{
		return default(float);
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x13B8A7C", Offset = "0x13B8A7C", VA = "0x13B8A7C")]
	public static float DistanceFromCamera(this Transform transform)
	{
		return default(float);
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x13B8AD8", Offset = "0x13B8AD8", VA = "0x13B8AD8")]
	public static HealthStatus GetHealthStatus(this Transform otherTransform)
	{
		return null;
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x13B8C88", Offset = "0x13B8C88", VA = "0x13B8C88")]
	public static HealthStatus GetRootHealthStatus(this Transform owner)
	{
		return null;
	}
}
[Token(Token = "0x2000189")]
public static class HingeJointExtensions
{
	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x13B8F00", Offset = "0x13B8F00", VA = "0x13B8F00")]
	public static void ProjectHinge(this HingeJoint hinge, Transform t, Vector3 initialLocalPosition, Quaternion initialLocalRotation, float minAngleLimit, float maxAngleLimit)
	{
	}
}
[Token(Token = "0x200018A")]
public class FireInstance
{
	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isAlive;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform cachedParent;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform cachedTransform;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject cachedGameObject;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 positionOffset;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 forwardOffset;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float currentDuration;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool hasParent;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool m_hasLight;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshFilter m_cachedMeshFilter;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MeshRenderer m_cachedMeshRenderer;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Light m_light;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_lightTime;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Mesh s_sharedQuad;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Mesh s_sharedCircle;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static MaterialPropertyBlock s_materialPropertyBlock;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Material s_material;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly string ShaderName;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly int MainTex;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static readonly int Color;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly int Rows;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private static readonly int Columns;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static readonly int Parameters;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly int CullMode;

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x13B90D4", Offset = "0x13B90D4", VA = "0x13B90D4")]
	private FireInstance()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x13B9168", Offset = "0x13B9168", VA = "0x13B9168")]
	public static void CheckMaterial()
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x13B9278", Offset = "0x13B9278", VA = "0x13B9278")]
	public static void UpdateMaterial(Texture2D texture, Color color, float columns, float rows, CullMode cullMode, bool instancing)
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x13B942C", Offset = "0x13B942C", VA = "0x13B942C")]
	public static FireInstance Create(string name, GameObject instancePrefab, bool addLight, LightInfo lightInfo)
	{
		return null;
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x13B99C0", Offset = "0x13B99C0", VA = "0x13B99C0")]
	private static Mesh GetSharedQuad()
	{
		return null;
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x13B9DD0", Offset = "0x13B9DD0", VA = "0x13B9DD0")]
	private static Mesh GetSharedCircle()
	{
		return null;
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x13BA684", Offset = "0x13BA684", VA = "0x13BA684")]
	public void SetPropertyBlock(float animationSpeed, float animationProgress)
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x13BA74C", Offset = "0x13BA74C", VA = "0x13BA74C")]
	public void UpdateInstance(Transform cameraTransform, UpdateType updateType, ViewType viewType, Vector3Bool rotationAxis, AnimationCurve lightIntensityGraph)
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x13BA7D8", Offset = "0x13BA7D8", VA = "0x13BA7D8")]
	private void UpdatePosition(UpdateType updateType)
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x13BA880", Offset = "0x13BA880", VA = "0x13BA880")]
	private void UpdateRotation(Transform cameraTransform, UpdateType updateType, ViewType viewType, Vector3Bool rotationAxis)
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x13BAB7C", Offset = "0x13BAB7C", VA = "0x13BAB7C")]
	public void UpdateLightIntensity(AnimationCurve lightIntensityGraph)
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x13BAC90", Offset = "0x13BAC90", VA = "0x13BAC90")]
	public void ResetInstance()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x13B9D40", Offset = "0x13B9D40", VA = "0x13B9D40")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x200018B")]
public class FireSystem : MonoBehaviour
{
	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public bool useSpawnTransforms;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Min(1f)]
	[SerializeField]
	public int spawnsPerTransform;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Transform[] spawnTransforms;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public GameObject fireInstancePrefab;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public Texture2D texture;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[ColorUsage(true, true)]
	public Color color;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public Vector2 spriteSheetDimensions;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public float animationSpeed;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	public bool loop;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	public float duration;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Min(0f)]
	[SerializeField]
	public int maxInstances;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public bool preWarm;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[SerializeField]
	public bool emitOnStart;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	public EmitShape emitShape;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	public Vector3 emitShapeSize;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	public float spawnRangeDecline;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	public UpdateType updateType;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	public ViewType viewType;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public CullMode cullMode;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	public Vector3Bool rotationAxis;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	public Vector3 scale;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	public Vector3 startOffset;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	public bool spawnLight;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	public LightInfo spawnLightInfo;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	public bool enableInstancing;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[HideInInspector]
	public int activeInstances;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private FireInstance[] m_fireInstances;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool m_systemInitialized;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Func<Vector3, Vector3, Vector3, Vector3> m_getPosition_Func;

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x13BB084", Offset = "0x13BB084", VA = "0x13BB084")]
	private void Awake()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x13BB0AC", Offset = "0x13BB0AC", VA = "0x13BB0AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x13BB110", Offset = "0x13BB110", VA = "0x13BB110")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x13BB09C", Offset = "0x13BB09C", VA = "0x13BB09C")]
	private void Init()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x13BB270", Offset = "0x13BB270", VA = "0x13BB270")]
	public void ApplyChanges()
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0x13BB17C", Offset = "0x13BB17C", VA = "0x13BB17C")]
	private void ForceInit()
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0x13BB0B0", Offset = "0x13BB0B0", VA = "0x13BB0B0")]
	public void DestroyInstances()
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0x13BB730", Offset = "0x13BB730", VA = "0x13BB730")]
	public void ResetInstance(int index)
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x13BB114", Offset = "0x13BB114", VA = "0x13BB114")]
	public void ResetInstances()
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x13BB274", Offset = "0x13BB274", VA = "0x13BB274")]
	private void InvalidateInstances()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x13BB300", Offset = "0x13BB300", VA = "0x13BB300")]
	private void CreateInstances()
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x13BB774", Offset = "0x13BB774", VA = "0x13BB774")]
	private bool GetAvailableInstanceIndex(out int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x13BB7D0", Offset = "0x13BB7D0", VA = "0x13BB7D0")]
	private bool ValidRange(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x13BB8A4", Offset = "0x13BB8A4", VA = "0x13BB8A4")]
	private Transform GetCameraTransform()
	{
		return null;
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x13BB5CC", Offset = "0x13BB5CC", VA = "0x13BB5CC")]
	public void EmitAll()
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0x13BB8F4", Offset = "0x13BB8F4", VA = "0x13BB8F4")]
	public void Emit(Transform parent, Vector3 position, Vector3 forward, int count)
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x13BBD44", Offset = "0x13BBD44", VA = "0x13BBD44")]
	public void ResetDurations()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x13BBD88", Offset = "0x13BBD88", VA = "0x13BBD88")]
	public void UpdateInstances()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x13BBE74", Offset = "0x13BBE74", VA = "0x13BBE74")]
	private void Update()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x13BBE78", Offset = "0x13BBE78", VA = "0x13BBE78")]
	public FireSystem()
	{
	}
}
[Token(Token = "0x200018C")]
[ExecuteInEditMode]
public class FlameThrower : MonoBehaviour
{
	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform[] m_layerTransforms;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Light m_light;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_lightIntensity;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private BoxCollider[] m_colliders;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float m_maxRange;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float m_flowSpeed;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_gravity;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Range(2f, 10f)]
	private int m_pointsOnRange;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(1f, 10f)]
	[SerializeField]
	private int m_delayedSamples;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[Range(1f / 90f, 1f / 30f)]
	private float m_timeStep;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool m_enableSetFiringOffCooldown;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	[UnityEngine.Tooltip("If ticked, limit how far the flames visually go by checking forward raycasts.")]
	[SerializeField]
	private bool m_useRangeLimiting;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_timePassed;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_hasLight;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[SerializeField]
	[Header("Debug")]
	private bool m_debugFire;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	[SerializeField]
	private bool m_showPoints;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	private bool m_initialized;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform m_cachedTransform;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_step;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_range;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int m_totalPoints;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int m_currentIndex;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_isFiring;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3[] m_direction;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector4[] m_points;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3[] m_current;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Points;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int Direction;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int PointsRange;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int PointsCount;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float m_vfxKillTimerAfterLastShot;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float m_timeSinceLastBullet;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<GameObject> m_layers;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float m_latestRangeLimit;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int m_latestRangeLimitCheckFrame;

	[Token(Token = "0x4000838")]
	private const int c_rangeLimitFrameDelayInterval = 5;

	[Token(Token = "0x17000115")]
	public Vector3[] CurrentPoints
	{
		[Token(Token = "0x6000821")]
		[Address(RVA = "0x13BC08C", Offset = "0x13BC08C", VA = "0x13BC08C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000116")]
	public Collider[] Colliders
	{
		[Token(Token = "0x6000822")]
		[Address(RVA = "0x13BC094", Offset = "0x13BC094", VA = "0x13BC094")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000117")]
	public List<VrBullet> Bullets
	{
		[Token(Token = "0x6000823")]
		[Address(RVA = "0x13BC09C", Offset = "0x13BC09C", VA = "0x13BC09C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000824")]
		[Address(RVA = "0x13BC0A4", Offset = "0x13BC0A4", VA = "0x13BC0A4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000118")]
	private bool IsFiring
	{
		[Token(Token = "0x6000827")]
		[Address(RVA = "0x13BC768", Offset = "0x13BC768", VA = "0x13BC768")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0x13BC0AC", Offset = "0x13BC0AC", VA = "0x13BC0AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0x13BC118", Offset = "0x13BC118", VA = "0x13BC118")]
	private void Start()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x13BC788", Offset = "0x13BC788", VA = "0x13BC788")]
	public void SetFiringOn()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x13BC910", Offset = "0x13BC910", VA = "0x13BC910")]
	public void SetFiringOff()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x13BC91C", Offset = "0x13BC91C", VA = "0x13BC91C")]
	public void OnBulletCreated()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x13BC964", Offset = "0x13BC964", VA = "0x13BC964")]
	private void UpdateFiring()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x13BC11C", Offset = "0x13BC11C", VA = "0x13BC11C")]
	private void Init()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x13BCCBC", Offset = "0x13BCCBC", VA = "0x13BCCBC")]
	private void UpdatePoints()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x13BD13C", Offset = "0x13BD13C", VA = "0x13BD13C")]
	private float DetermineMaxRange()
	{
		return default(float);
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x13BC7C4", Offset = "0x13BC7C4", VA = "0x13BC7C4")]
	private void ResetPoints()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x13BD2BC", Offset = "0x13BD2BC", VA = "0x13BD2BC")]
	private int RoundMod(int value, int mod)
	{
		return default(int);
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x13BCA28", Offset = "0x13BCA28", VA = "0x13BCA28")]
	private void UpdateMaterials()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x13BD2D4", Offset = "0x13BD2D4", VA = "0x13BD2D4")]
	private void DebugCheckChangedVariables()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x13BD308", Offset = "0x13BD308", VA = "0x13BD308")]
	private void DebugDrawRangePoints()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x13BD458", Offset = "0x13BD458", VA = "0x13BD458")]
	private void UpdateRange()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x13BD4BC", Offset = "0x13BD4BC", VA = "0x13BD4BC")]
	private Vector3 GetColliderPoint(int index, int count)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x13BD538", Offset = "0x13BD538", VA = "0x13BD538")]
	private void UpdateColliders()
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x13BD684", Offset = "0x13BD684", VA = "0x13BD684")]
	private bool LayersDisabled()
	{
		return default(bool);
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x13BD7CC", Offset = "0x13BD7CC", VA = "0x13BD7CC")]
	private bool TimeStep()
	{
		return default(bool);
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x13BD838", Offset = "0x13BD838", VA = "0x13BD838")]
	private void UpdateLight()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x13BC9B4", Offset = "0x13BC9B4", VA = "0x13BC9B4")]
	private void SetLightIntensity(float intensity)
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x13BD850", Offset = "0x13BD850", VA = "0x13BD850")]
	private void UpdateBullets()
	{
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x13BD934", Offset = "0x13BD934", VA = "0x13BD934")]
	private void Update()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x13BD998", Offset = "0x13BD998", VA = "0x13BD998")]
	public FlameThrower()
	{
	}
}
[Token(Token = "0x200018D")]
public class VrRigFPSBotBuddy : CachedMonoBehaviour
{
	[Token(Token = "0x200018E")]
	private enum OtherPlayerMode
	{
		[Token(Token = "0x4000850")]
		Standing,
		[Token(Token = "0x4000851")]
		Moving
	}

	[Token(Token = "0x200018F")]
	public struct PositionInfo
	{
		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 position;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion rotation;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeStamp;
	}

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_walkSpeed;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_runSpeed;

	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_shootDelay;

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_otherPlayerLastPosition;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OtherPlayerMode m_otherPlayerMode;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool m_moveToSet;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PositionInfo m_moveTo;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Queue<PositionInfo> m_positionHistory;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PlayerAgent m_remotePlayer;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RaycastHit m_shootAt;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private CharacterController m_controller;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private VrRigFPSController m_fpsController;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private VrRig m_vrRig;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private List<VrHand> m_hands;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private List<VrMotionInputWorldInteraction> m_handInteractions;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool m_enableAutoMove;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float m_shootTimer;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private VrItem.TriggerStateType m_triggerState;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Collider m_targetCollider;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private HealthStatus m_currentTarget;

	[Token(Token = "0x17000119")]
	public float movementSpeed
	{
		[Token(Token = "0x600083F")]
		[Address(RVA = "0x13BDC3C", Offset = "0x13BDC3C", VA = "0x13BDC3C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000840")]
		[Address(RVA = "0x13BDC44", Offset = "0x13BDC44", VA = "0x13BDC44")]
		set
		{
		}
	}

	[Token(Token = "0x1700011A")]
	public PositionInfo moveTo
	{
		[Token(Token = "0x6000841")]
		[Address(RVA = "0x13BDC4C", Offset = "0x13BDC4C", VA = "0x13BDC4C")]
		get
		{
			return default(PositionInfo);
		}
		[Token(Token = "0x6000842")]
		[Address(RVA = "0x13BDC58", Offset = "0x13BDC58", VA = "0x13BDC58")]
		private set
		{
		}
	}

	[Token(Token = "0x1700011B")]
	private PlayerAgent otherPlayer
	{
		[Token(Token = "0x6000843")]
		[Address(RVA = "0x13BDC6C", Offset = "0x13BDC6C", VA = "0x13BDC6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011C")]
	public RaycastHit shootAt
	{
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x13BDF14", Offset = "0x13BDF14", VA = "0x13BDF14")]
		get
		{
			return default(RaycastHit);
		}
	}

	[Token(Token = "0x1700011D")]
	public bool shootAtvalid
	{
		[Token(Token = "0x6000845")]
		[Address(RVA = "0x13BDF28", Offset = "0x13BDF28", VA = "0x13BDF28")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000846")]
		[Address(RVA = "0x13BDF30", Offset = "0x13BDF30", VA = "0x13BDF30")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700011E")]
	public bool enableAutoMove
	{
		[Token(Token = "0x6000847")]
		[Address(RVA = "0x13BDF3C", Offset = "0x13BDF3C", VA = "0x13BDF3C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x13BDF44", Offset = "0x13BDF44", VA = "0x13BDF44")]
		set
		{
		}
	}

	[Token(Token = "0x1700011F")]
	public bool isFacingTarget
	{
		[Token(Token = "0x6000849")]
		[Address(RVA = "0x13BE1EC", Offset = "0x13BE1EC", VA = "0x13BE1EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000120")]
	private HealthStatus currentTarget
	{
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x13C01E4", Offset = "0x13C01E4", VA = "0x13C01E4")]
		get
		{
			return null;
		}
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x13BDFCC", Offset = "0x13BDFCC", VA = "0x13BDFCC")]
		set
		{
		}
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x13BE398", Offset = "0x13BE398", VA = "0x13BE398")]
	private void Awake()
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0x13BE554", Offset = "0x13BE554", VA = "0x13BE554")]
	private void Start()
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x13BE8A0", Offset = "0x13BE8A0", VA = "0x13BE8A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x13BF158", Offset = "0x13BF158", VA = "0x13BF158")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x13C01EC", Offset = "0x13C01EC", VA = "0x13C01EC")]
	private void HandleTargetDeath(HealthStatusInfo statusInfo)
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x13BED04", Offset = "0x13BED04", VA = "0x13BED04")]
	private void CalculateAimTargetPosition()
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x13C0210", Offset = "0x13C0210", VA = "0x13C0210")]
	private bool GunsHaveClearPathToTarget(Vector3 targetPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x13C031C", Offset = "0x13C031C", VA = "0x13C031C")]
	private bool HasClearPathToTarget(Vector3 pos, Vector3 target)
	{
		return default(bool);
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x13BFF5C", Offset = "0x13BFF5C", VA = "0x13BFF5C")]
	private VrGun[] GetGuns()
	{
		return null;
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x13C03FC", Offset = "0x13C03FC", VA = "0x13C03FC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x13C04A0", Offset = "0x13C04A0", VA = "0x13C04A0")]
	public VrRigFPSBotBuddy()
	{
	}
}
[Token(Token = "0x2000190")]
public class VrRigFPSController : CachedMonoBehaviour
{
	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnUserPresent;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnUserNotPresent;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject m_fpsHudPrefab;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private DebugUIViewModel m_debugData;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PlayerInput m_playerInput;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private InventorySlot m_leftHolster;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private InventorySlot m_rightHolster;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector2 m_currentSpeed;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform m_head;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody m_body;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject m_hud;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 m_chargeDirection;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 m_chargeDestination;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_chargeCoolDown;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private bool m_chargeSuccess;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float m_chargeDistance;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float m_chargeSpeed;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float m_chargeDuration;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float m_movementSpeed;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IHandInput[] m_defaultHandInputs;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool m_paused;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<InventorySlot> m_inventorySlots;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private InterpolatedTransform[] m_interpolatedTransformComponents;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private VrRigFPSHandInteractionData[] m_handsData;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Dictionary<VrHand, VrRigFPSHandInteractionData> m_handsDataMap;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private VrRigFPSHandInteractionData m_leftHandData;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private VrRigFPSHandInteractionData m_rightHandData;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float m_lastInputTimer;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private VrRigFPSBotBuddy m_botBuddy;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Vector3 m_desiredPosition;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private bool hasSentEvent;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x145")]
	private bool m_teleport;

	[Token(Token = "0x17000121")]
	public static bool Active
	{
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x13C04BC", Offset = "0x13C04BC", VA = "0x13C04BC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000858")]
		[Address(RVA = "0x13C0504", Offset = "0x13C0504", VA = "0x13C0504")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000122")]
	public Camera camera
	{
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x13C0550", Offset = "0x13C0550", VA = "0x13C0550")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x13C0558", Offset = "0x13C0558", VA = "0x13C0558")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000123")]
	public Vector2 moveDirection
	{
		[Token(Token = "0x600085B")]
		[Address(RVA = "0x13C0560", Offset = "0x13C0560", VA = "0x13C0560")]
		[CompilerGenerated]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600085C")]
		[Address(RVA = "0x13C0568", Offset = "0x13C0568", VA = "0x13C0568")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000124")]
	public Vector2 lookDirection
	{
		[Token(Token = "0x600085D")]
		[Address(RVA = "0x13C0570", Offset = "0x13C0570", VA = "0x13C0570")]
		[CompilerGenerated]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600085E")]
		[Address(RVA = "0x13C0578", Offset = "0x13C0578", VA = "0x13C0578")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000125")]
	public Vector2 heightAdjust
	{
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x13C0580", Offset = "0x13C0580", VA = "0x13C0580")]
		[CompilerGenerated]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000860")]
		[Address(RVA = "0x13C0588", Offset = "0x13C0588", VA = "0x13C0588")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000126")]
	public bool botMode
	{
		[Token(Token = "0x6000861")]
		[Address(RVA = "0x13C0590", Offset = "0x13C0590", VA = "0x13C0590")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000862")]
		[Address(RVA = "0x13C0598", Offset = "0x13C0598", VA = "0x13C0598")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000127")]
	private bool NoClip
	{
		[Token(Token = "0x6000863")]
		[Address(RVA = "0x13C05A4", Offset = "0x13C05A4", VA = "0x13C05A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000864")]
		[Address(RVA = "0x13C062C", Offset = "0x13C062C", VA = "0x13C062C")]
		set
		{
		}
	}

	[Token(Token = "0x17000128")]
	private float deltaTime
	{
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x13C06C4", Offset = "0x13C06C4", VA = "0x13C06C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000129")]
	private bool IsPaused
	{
		[Token(Token = "0x6000866")]
		[Address(RVA = "0x13C06F4", Offset = "0x13C06F4", VA = "0x13C06F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012A")]
	private bool allowFpsInteraction
	{
		[Token(Token = "0x6000867")]
		[Address(RVA = "0x13C0774", Offset = "0x13C0774", VA = "0x13C0774")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012B")]
	public VrRigFPSSettings Settings
	{
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x13C07A4", Offset = "0x13C07A4", VA = "0x13C07A4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000869")]
		[Address(RVA = "0x13C07AC", Offset = "0x13C07AC", VA = "0x13C07AC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700012C")]
	private Vector3 playerPosition
	{
		[Token(Token = "0x600086A")]
		[Address(RVA = "0x13C07BC", Offset = "0x13C07BC", VA = "0x13C07BC")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700012D")]
	private bool interactingWithMechanism
	{
		[Token(Token = "0x600086B")]
		[Address(RVA = "0x13C0850", Offset = "0x13C0850", VA = "0x13C0850")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012E")]
	private bool interactingWithMechanismKey
	{
		[Token(Token = "0x600086C")]
		[Address(RVA = "0x13C09B0", Offset = "0x13C09B0", VA = "0x13C09B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700012F")]
	public float defaultHandHeight
	{
		[Token(Token = "0x600086D")]
		[Address(RVA = "0x13C0AEC", Offset = "0x13C0AEC", VA = "0x13C0AEC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x13C0B90", Offset = "0x13C0B90", VA = "0x13C0B90")]
	private void Awake()
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x13C0EE4", Offset = "0x13C0EE4", VA = "0x13C0EE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x13C1878", Offset = "0x13C1878", VA = "0x13C1878")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x13C1A58", Offset = "0x13C1A58", VA = "0x13C1A58")]
	private void HandleInventorySlotEnabled(InventorySlot slot)
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x13C1B58", Offset = "0x13C1B58", VA = "0x13C1B58")]
	private void HandleInventorySlotDisabled(InventorySlot slot)
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x13C1C00", Offset = "0x13C1C00", VA = "0x13C1C00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x13C1F9C", Offset = "0x13C1F9C", VA = "0x13C1F9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x13C228C", Offset = "0x13C228C", VA = "0x13C228C")]
	private void OnApplicationPause(bool mode)
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x13C2298", Offset = "0x13C2298", VA = "0x13C2298")]
	public void SetEnabled(bool mode)
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x13C22C0", Offset = "0x13C22C0", VA = "0x13C22C0")]
	private void DisablePlayMakerGUI()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x13C235C", Offset = "0x13C235C", VA = "0x13C235C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x13C2894", Offset = "0x13C2894", VA = "0x13C2894")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x13C29AC", Offset = "0x13C29AC", VA = "0x13C29AC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x13C2608", Offset = "0x13C2608", VA = "0x13C2608")]
	private void UpdateRotationAndLookDirection()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0x13C2A48", Offset = "0x13C2A48", VA = "0x13C2A48")]
	private void UpdatePosition()
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0x13C2FBC", Offset = "0x13C2FBC", VA = "0x13C2FBC")]
	private void UpdatePosition(Vector3 velocity)
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0x13C3030", Offset = "0x13C3030", VA = "0x13C3030")]
	private Ray getAimRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0x13C30B4", Offset = "0x13C30B4", VA = "0x13C30B4")]
	private Vector3 GetTargetPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0x13C2E68", Offset = "0x13C2E68", VA = "0x13C2E68")]
	private void UpdateHands()
	{
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0x13C2158", Offset = "0x13C2158", VA = "0x13C2158")]
	private void FreeHands()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x13C3564", Offset = "0x13C3564", VA = "0x13C3564")]
	public void ResetController(Vector3 resetPosition)
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x13C3654", Offset = "0x13C3654", VA = "0x13C3654")]
	public void OnMove(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x13C36C8", Offset = "0x13C36C8", VA = "0x13C36C8")]
	public void OnLook(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x13C373C", Offset = "0x13C373C", VA = "0x13C373C")]
	public void OnHeight(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x13C3798", Offset = "0x13C3798", VA = "0x13C3798")]
	public void OnLeftHandFire(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x13C3994", Offset = "0x13C3994", VA = "0x13C3994")]
	public void OnRightHandFire(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x13C39EC", Offset = "0x13C39EC", VA = "0x13C39EC")]
	public void AmmoPouch(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x13C3B3C", Offset = "0x13C3B3C", VA = "0x13C3B3C")]
	public void OnEject(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x13C3A20", Offset = "0x13C3A20", VA = "0x13C3A20")]
	private void GrabAmmoFromPouch()
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x13C42E0", Offset = "0x13C42E0", VA = "0x13C42E0")]
	public void OnTeleport(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x13C45B4", Offset = "0x13C45B4", VA = "0x13C45B4")]
	public void OnSprint(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0x13C435C", Offset = "0x13C435C", VA = "0x13C435C")]
	private void TeleportPlayer()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x13C4634", Offset = "0x13C4634", VA = "0x13C4634")]
	private bool TeleportPlayer(Vector3 pos)
	{
		return default(bool);
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x13C46DC", Offset = "0x13C46DC", VA = "0x13C46DC")]
	public void OnKillEnemies(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x13C478C", Offset = "0x13C478C", VA = "0x13C478C")]
	public void OnLeftInteraction(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x13C4D18", Offset = "0x13C4D18", VA = "0x13C4D18")]
	public void OnRightInteraction(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x13C4E64", Offset = "0x13C4E64", VA = "0x13C4E64")]
	public void OnDropLeft(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x13C4FA8", Offset = "0x13C4FA8", VA = "0x13C4FA8")]
	public void OnDropRight(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0x13C4FFC", Offset = "0x13C4FFC", VA = "0x13C4FFC")]
	public void OnHolsterLeft(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x13C5054", Offset = "0x13C5054", VA = "0x13C5054")]
	public void OnHolsterRight(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0x13C50AC", Offset = "0x13C50AC", VA = "0x13C50AC")]
	public void OnSwapLeftToRight(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0x13C50B0", Offset = "0x13C50B0", VA = "0x13C50B0")]
	public void OnSwapRightToLeft(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0x13C2560", Offset = "0x13C2560", VA = "0x13C2560")]
	private void FindHandInteractionCandidates()
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0x13C5200", Offset = "0x13C5200", VA = "0x13C5200")]
	public void OnNoClip(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0x13C52CC", Offset = "0x13C52CC", VA = "0x13C52CC")]
	private void SwapHands(VrHand fromHand, VrHand toHand)
	{
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0x13C54AC", Offset = "0x13C54AC", VA = "0x13C54AC")]
	public void OnMenu(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0x13C3F20", Offset = "0x13C3F20", VA = "0x13C3F20")]
	public InventorySlot_AmmoPouch GetAmmoPouch()
	{
		return null;
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x13C5580", Offset = "0x13C5580", VA = "0x13C5580")]
	public List<InventorySlot> InventorySlots(InventorySlotIdentifier.BodySide bodySide)
	{
		return null;
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x13C5664", Offset = "0x13C5664", VA = "0x13C5664")]
	public InventorySlot GetBestEmptyInventorySlot(InventorySlotIdentifier.BodySide bodySide, VrItem item, out int usedSlot, int preferredSlotIndex = 0)
	{
		return null;
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x13C58B8", Offset = "0x13C58B8", VA = "0x13C58B8")]
	public VrRigFPSController()
	{
	}
}
[Token(Token = "0x2000193")]
public class VrRigFPSHandInput : IHandInput, IAxisInput
{
	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public FPSTriggerInput gripTrigger;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FPSTriggerInput mainTrigger;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FPSButtonInput primaryButton;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FPSButtonInput secondaryButton;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FPSButtonInput menuButton;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FPSButtonInput stickButton;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string name;

	[Token(Token = "0x17000130")]
	private Vector2? IAxisInput.value
	{
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x13C5A44", Offset = "0x13C5A44", VA = "0x13C5A44", Slot = "12")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000131")]
	private IAxisInput IHandInput.stickAxis
	{
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x13C5A50", Offset = "0x13C5A50", VA = "0x13C5A50", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000132")]
	private ITriggerInput IHandInput.gripTrigger
	{
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x13C5A54", Offset = "0x13C5A54", VA = "0x13C5A54", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000133")]
	private ITriggerInput IHandInput.mainTrigger
	{
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x13C5A5C", Offset = "0x13C5A5C", VA = "0x13C5A5C", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000134")]
	private IButtonInput IHandInput.primaryButton
	{
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x13C5A64", Offset = "0x13C5A64", VA = "0x13C5A64", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000135")]
	private IButtonInput IHandInput.secondaryButton
	{
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x13C5A6C", Offset = "0x13C5A6C", VA = "0x13C5A6C", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000136")]
	private IButtonInput IHandInput.menuButton
	{
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x13C5A74", Offset = "0x13C5A74", VA = "0x13C5A74", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000137")]
	private IButtonInput IHandInput.stickButton
	{
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x13C5A7C", Offset = "0x13C5A7C", VA = "0x13C5A7C", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000138")]
	private float IHandInput.ThumbTouchValue
	{
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x13C5A84", Offset = "0x13C5A84", VA = "0x13C5A84", Slot = "10")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x13C1458", Offset = "0x13C1458", VA = "0x13C1458")]
	public VrRigFPSHandInput(string name)
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x13C28CC", Offset = "0x13C28CC", VA = "0x13C28CC")]
	public void LateUpdate()
	{
	}
}
[Token(Token = "0x2000194")]
public class FPSTriggerInput : ITriggerInput
{
	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_lastState;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_currentState;

	[Token(Token = "0x17000139")]
	public bool currentState
	{
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x13C5B5C", Offset = "0x13C5B5C", VA = "0x13C5B5C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x13C5B64", Offset = "0x13C5B64", VA = "0x13C5B64")]
		set
		{
		}
	}

	[Token(Token = "0x1700013A")]
	private float ITriggerInput.Value
	{
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x13C5B70", Offset = "0x13C5B70", VA = "0x13C5B70", Slot = "4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700013B")]
	private bool ITriggerInput.Down
	{
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x13C5B88", Offset = "0x13C5B88", VA = "0x13C5B88", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700013C")]
	private bool ITriggerInput.Up
	{
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x13C5BA8", Offset = "0x13C5BA8", VA = "0x13C5BA8", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700013D")]
	private bool ITriggerInput.Held
	{
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x13C5BC8", Offset = "0x13C5BC8", VA = "0x13C5BC8", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x13C5B20", Offset = "0x13C5B20", VA = "0x13C5B20")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x13C5A8C", Offset = "0x13C5A8C", VA = "0x13C5A8C")]
	public FPSTriggerInput(string name)
	{
	}
}
[Token(Token = "0x2000195")]
public class FPSButtonInput : IButtonInput
{
	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string guid;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_value;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool m_lastValue;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool m_down;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	private bool m_up;

	[Token(Token = "0x1700013E")]
	private bool IButtonInput.Value
	{
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x13C5BD0", Offset = "0x13C5BD0", VA = "0x13C5BD0", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700013F")]
	public bool Value
	{
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x13C5BD8", Offset = "0x13C5BD8", VA = "0x13C5BD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000140")]
	private bool IButtonInput.Down
	{
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x13C5BE4", Offset = "0x13C5BE4", VA = "0x13C5BE4", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000141")]
	private bool IButtonInput.Up
	{
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x13C5BEC", Offset = "0x13C5BEC", VA = "0x13C5BEC", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x13C5B2C", Offset = "0x13C5B2C", VA = "0x13C5B2C")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x13C5ABC", Offset = "0x13C5ABC", VA = "0x13C5ABC")]
	public FPSButtonInput(string name)
	{
	}
}
[Token(Token = "0x2000196")]
public class VrRigFPSHandInteractionData
{
	[Token(Token = "0x2000197")]
	public class VrRigFPSHandInteractionCandidates
	{
		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VrItem item;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float itemDistSqr;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WorldInteraction interaction;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float interactionDistSqr;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AbstractTriggeredMechanism buttonMechanism;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float mechanismDistSqr;

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x13C8238", Offset = "0x13C8238", VA = "0x13C8238")]
		public void Clear()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x13C8260", Offset = "0x13C8260", VA = "0x13C8260")]
		public VrRigFPSHandInteractionCandidates()
		{
		}
	}

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 handPosition;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float handRotationSpeed;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int currentSlot;

	[Token(Token = "0x17000142")]
	public VrHand hand
	{
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x13C5BF4", Offset = "0x13C5BF4", VA = "0x13C5BF4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x13C5BFC", Offset = "0x13C5BFC", VA = "0x13C5BFC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000143")]
	public VrRigFPSHandInput handInput
	{
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x13C5C04", Offset = "0x13C5C04", VA = "0x13C5C04")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x13C5C0C", Offset = "0x13C5C0C", VA = "0x13C5C0C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000144")]
	public VrItem heldItem
	{
		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x13C3E9C", Offset = "0x13C3E9C", VA = "0x13C3E9C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000145")]
	public WorldInteraction activeInteraction
	{
		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x13C5C14", Offset = "0x13C5C14", VA = "0x13C5C14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000146")]
	public Joint manipulatingJoint
	{
		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x13C0904", Offset = "0x13C0904", VA = "0x13C0904")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000147")]
	public MechanismKey mechanismKeyInHand
	{
		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x13C5C30", Offset = "0x13C5C30", VA = "0x13C5C30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000148")]
	public bool manipulateMechanismKey
	{
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x13C09E8", Offset = "0x13C09E8", VA = "0x13C09E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000149")]
	public bool pressButtonMechanism
	{
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x13C2EBC", Offset = "0x13C2EBC", VA = "0x13C2EBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700014A")]
	public ITriggerInput gripTrigger
	{
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x13C5CF8", Offset = "0x13C5CF8", VA = "0x13C5CF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700014B")]
	public ITriggerInput mainTrigger
	{
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x13C5CDC", Offset = "0x13C5CDC", VA = "0x13C5CDC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700014C")]
	public Transform anchor
	{
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x13C5D14", Offset = "0x13C5D14", VA = "0x13C5D14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700014D")]
	public VrMotionInputWorldInteraction handWorldInteractor
	{
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x13C5D30", Offset = "0x13C5D30", VA = "0x13C5D30")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x13C5D38", Offset = "0x13C5D38", VA = "0x13C5D38")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700014E")]
	public VrRigFPSHandInteractionCandidates interactionCandidates
	{
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x13C5D40", Offset = "0x13C5D40", VA = "0x13C5D40")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x13C5D48", Offset = "0x13C5D48", VA = "0x13C5D48")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700014F")]
	public InventorySlotIdentifier.BodySide bodySide
	{
		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x13C5D50", Offset = "0x13C5D50", VA = "0x13C5D50")]
		[CompilerGenerated]
		get
		{
			return default(InventorySlotIdentifier.BodySide);
		}
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x13C5D58", Offset = "0x13C5D58", VA = "0x13C5D58")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000150")]
	public InventorySlot_Hand handInventorySlot
	{
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x13C5D60", Offset = "0x13C5D60", VA = "0x13C5D60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000151")]
	public Vector3 defaultHandPosition
	{
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x13C5D7C", Offset = "0x13C5D7C", VA = "0x13C5D7C")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x13C5D88", Offset = "0x13C5D88", VA = "0x13C5D88")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000152")]
	public VrRigFPSController controller
	{
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x13C5D94", Offset = "0x13C5D94", VA = "0x13C5D94")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x13C5D9C", Offset = "0x13C5D9C", VA = "0x13C5D9C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x13C16F4", Offset = "0x13C16F4", VA = "0x13C16F4")]
	public VrRigFPSHandInteractionData(VrRigFPSController _controller, InventorySlotIdentifier.BodySide _bodySide, VrRigFPSHandInput _handInput, Vector3 _defaultHandPosition)
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x13C3244", Offset = "0x13C3244", VA = "0x13C3244")]
	public void Update(Vector3 targetPoint)
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x13C5DA4", Offset = "0x13C5DA4", VA = "0x13C5DA4")]
	private void UpdatePosition(Vector3 desiredhandPos)
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x13C5F2C", Offset = "0x13C5F2C", VA = "0x13C5F2C")]
	private void UpdateRotation(Vector3 targetPoint)
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x13C50B4", Offset = "0x13C50B4", VA = "0x13C50B4")]
	public void FindInteractionCandidates(Vector3 playerPosition, Ray aimRay)
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x13C69C4", Offset = "0x13C69C4", VA = "0x13C69C4")]
	private WorldInteraction FindInteraction(Vector3 playerPosition, Ray aimRay, out float nearestDistSqr)
	{
		return null;
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x13C6B54", Offset = "0x13C6B54", VA = "0x13C6B54")]
	private VrItem FindItemCandidate(Vector3 playerPosition, Ray aimRay, out float neasrestDistSqr)
	{
		return null;
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x13C6CF0", Offset = "0x13C6CF0", VA = "0x13C6CF0")]
	private MechanismButton FindMechanism(Vector3 playerPosition, Ray aimRay, out float neasrestDistSqr)
	{
		return null;
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x13C6E80", Offset = "0x13C6E80", VA = "0x13C6E80")]
	private GraspMarker GetGraspMarker(WorldInteraction interactable, bool isHandScan)
	{
		return null;
	}

	[Token(Token = "0x60008DF")]
	private T GetGraspableInteraction<T>(Vector3 playerPosition, Ray aimRay, out float bestDistSqr) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x60008E0")]
	private T GetInteraction<T>(Vector3 playerPosition, Ray aimRay, out float bestDistSqr) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x13C37F0", Offset = "0x13C37F0", VA = "0x13C37F0")]
	public void ProcessMainTrigger(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x13C7098", Offset = "0x13C7098", VA = "0x13C7098")]
	private void FireWeapon(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x13C4AFC", Offset = "0x13C4AFC", VA = "0x13C4AFC")]
	public void HandInteraction()
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x13C7470", Offset = "0x13C7470", VA = "0x13C7470")]
	private void InteractWithItem(FPSTriggerInput trigger, VrItem item)
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x13C7938", Offset = "0x13C7938", VA = "0x13C7938")]
	private bool PickUpAmmo(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x13C7C38", Offset = "0x13C7C38", VA = "0x13C7C38")]
	private bool LoadMagazine(VrGun weapon, VrMagazine magazine)
	{
		return default(bool);
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x13C7B30", Offset = "0x13C7B30", VA = "0x13C7B30")]
	private bool PickupHealth(VrHealthItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x13C543C", Offset = "0x13C543C", VA = "0x13C543C")]
	public bool PickUpItem(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x13C7DC8", Offset = "0x13C7DC8", VA = "0x13C7DC8")]
	private bool PickUpItem(WorldInteraction candidate)
	{
		return default(bool);
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x13C7268", Offset = "0x13C7268", VA = "0x13C7268")]
	private bool InteractWithWorldInteraction(WorldInteraction interactable)
	{
		return default(bool);
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x13C7604", Offset = "0x13C7604", VA = "0x13C7604")]
	private bool CycleInventory()
	{
		return default(bool);
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x13C7F60", Offset = "0x13C7F60", VA = "0x13C7F60")]
	private bool PutItemIntoInventory(out int usedSlot)
	{
		return default(bool);
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x13C8108", Offset = "0x13C8108", VA = "0x13C8108")]
	private bool PutItemIntoInventory(VrItem item, out int usedSlot)
	{
		return default(bool);
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x13C7F8C", Offset = "0x13C7F8C", VA = "0x13C7F8C")]
	private void EquipItemFromInventory(int slotIndex)
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x13C4EB8", Offset = "0x13C4EB8", VA = "0x13C4EB8")]
	public VrItem DropItem()
	{
		return null;
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x13C41BC", Offset = "0x13C41BC", VA = "0x13C41BC")]
	public bool GrabAmmoFromPouch(InventorySlot_AmmoPouch ammoPouch)
	{
		return default(bool);
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x13C4078", Offset = "0x13C4078", VA = "0x13C4078")]
	public bool PutAmmoInPouch(InventorySlot_AmmoPouch ammoPouch)
	{
		return default(bool);
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x13C48D8", Offset = "0x13C48D8", VA = "0x13C48D8")]
	public VrItem HolsterItem(InventorySlot slot)
	{
		return null;
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x13C3DB4", Offset = "0x13C3DB4", VA = "0x13C3DB4")]
	public bool Eject()
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x2000198")]
public class VrRigFPSSettings : ScriptableObject
{
	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("General Movement Settings")]
	public float walkSpeed;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float runSpeed;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Camera Settings")]
	public float rotationSpeed;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float elevationSpeed;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Min(0.2f)]
	public float sensitivity;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool invertY;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fieldOfView;

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x13C8268", Offset = "0x13C8268", VA = "0x13C8268")]
	public static VrRigFPSSettings Load()
	{
		return null;
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x13C8304", Offset = "0x13C8304", VA = "0x13C8304")]
	public void Save()
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x13C82E0", Offset = "0x13C82E0", VA = "0x13C82E0")]
	public VrRigFPSSettings()
	{
	}
}
[Token(Token = "0x2000199")]
public class AnimationEventReceiver : MonoBehaviour
{
	[Token(Token = "0x200019A")]
	public delegate void AnimationEventFunction();

	[Token(Token = "0x200019B")]
	public delegate void CallbackFunction();

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<AnimationEventFunction, List<CallbackFunction>> m_callbackStorage;

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x13C8308", Offset = "0x13C8308", VA = "0x13C8308")]
	public void RegisterCallback(AnimationEventFunction eventFunc, CallbackFunction callbackFunc)
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x13C84F0", Offset = "0x13C84F0", VA = "0x13C84F0")]
	public void FireWeapon()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x13C864C", Offset = "0x13C864C", VA = "0x13C864C")]
	private void FireCallbacks(ref AnimationEventFunction func)
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0x13C87F0", Offset = "0x13C87F0", VA = "0x13C87F0")]
	public AnimationEventReceiver()
	{
	}
}
[Token(Token = "0x200019C")]
public class ApplicationFocusListener : PT.Singleton<ApplicationFocusListener>
{
	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_applicationHasFocus;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action<bool> OnFocusRefreshed;

	[Token(Token = "0x17000153")]
	public bool ApplicationHasFocus
	{
		[Token(Token = "0x6000906")]
		[Address(RVA = "0x13C89C4", Offset = "0x13C89C4", VA = "0x13C89C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x13C89CC", Offset = "0x13C89CC", VA = "0x13C89CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0x13C8A18", Offset = "0x13C8A18", VA = "0x13C8A18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0x13C9390", Offset = "0x13C9390", VA = "0x13C9390", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0x13C9874", Offset = "0x13C9874", VA = "0x13C9874")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0x13C8EE4", Offset = "0x13C8EE4", VA = "0x13C8EE4")]
	private void RefreshFocusPause()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0x13C9A14", Offset = "0x13C9A14", VA = "0x13C9A14")]
	public ApplicationFocusListener()
	{
	}
}
[Token(Token = "0x200019D")]
public struct ChargeMetaData
{
	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float knockBackDistance;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float stunDuration;
}
[Serializable]
[Token(Token = "0x200019E")]
public class CoinAwardData
{
	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int DefaultValue;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int GameStartAmount;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] CoinsByWave;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CoinAwardItem[] Items;

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x13C9A80", Offset = "0x13C9A80", VA = "0x13C9A80")]
	public CoinAwardData()
	{
	}
}
[Serializable]
[Token(Token = "0x200019F")]
public class CoinAwardItem
{
	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Identifier Identifier;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Value;

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x13C9A94", Offset = "0x13C9A94", VA = "0x13C9A94")]
	public CoinAwardItem()
	{
	}
}
[Token(Token = "0x20001A0")]
public class DestructedAndSeenTriggerEvent : MonoBehaviour
{
	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameEvent m_gameEvent;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x13C9A9C", Offset = "0x13C9A9C", VA = "0x13C9A9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x13C9B88", Offset = "0x13C9B88", VA = "0x13C9B88")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x13C9C74", Offset = "0x13C9C74", VA = "0x13C9C74")]
	private void ActionOnHealthDecreased(HealthStatusInfo status)
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x13C9F18", Offset = "0x13C9F18", VA = "0x13C9F18")]
	public static bool IsVisibleToCamera(Transform transform)
	{
		return default(bool);
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x13C9FC4", Offset = "0x13C9FC4", VA = "0x13C9FC4")]
	public DestructedAndSeenTriggerEvent()
	{
	}
}
[Token(Token = "0x20001A1")]
public class DevTimescaleCycler : PT.Singleton<DevTimescaleCycler>
{
	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_targetTimescale;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool m_vrActive;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool m_previouslyActive;

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x13CA058", Offset = "0x13CA058", VA = "0x13CA058")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x13CA0AC", Offset = "0x13CA0AC", VA = "0x13CA0AC")]
	public float ToggleVrActive()
	{
		return default(float);
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x13CA0CC", Offset = "0x13CA0CC", VA = "0x13CA0CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x13CA164", Offset = "0x13CA164", VA = "0x13CA164")]
	public DevTimescaleCycler()
	{
	}
}
[Token(Token = "0x20001A2")]
public class DisableInGameState : MonoBehaviour
{
	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MultiplayerGameState m_state;

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x13CA1D8", Offset = "0x13CA1D8", VA = "0x13CA1D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x13CA2E0", Offset = "0x13CA2E0", VA = "0x13CA2E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x13CA3E8", Offset = "0x13CA3E8", VA = "0x13CA3E8")]
	private void DisableObject()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x13CA40C", Offset = "0x13CA40C", VA = "0x13CA40C")]
	public DisableInGameState()
	{
	}
}
[Token(Token = "0x20001A3")]
public class FireInstancesRoot : PT.Singleton<FireInstancesRoot>
{
	[Token(Token = "0x600091D")]
	[Address(RVA = "0x13CA414", Offset = "0x13CA414", VA = "0x13CA414")]
	public void Awake()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x13CA460", Offset = "0x13CA460", VA = "0x13CA460")]
	public FireInstancesRoot()
	{
	}
}
[Token(Token = "0x20001A4")]
public class Gameplay : SceneSingleton<Gameplay>
{
	[Token(Token = "0x20001A5")]
	public class DynamicObjectData
	{
		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject DynamicObject;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string LocatedSceneName;

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x13CAE9C", Offset = "0x13CAE9C", VA = "0x13CAE9C")]
		public DynamicObjectData()
		{
		}
	}

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_dynamicObjectRoot;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<DynamicObjectData> m_dynamicObjectSaveData;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<ObjectDatum> m_consumedObjects;

	[Token(Token = "0x40008BB")]
	public const string c_consumedObjectStateTypeName = "ConsumedObject";

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool? m_wasPaused;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_playerActive;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GameViewModel m_gameViewModel;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnLevelReset;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action<bool> OnPlayerActiveStateChanged;

	[Token(Token = "0x17000154")]
	public Transform DynamicObjectRoot
	{
		[Token(Token = "0x600091F")]
		[Address(RVA = "0x13CA4CC", Offset = "0x13CA4CC", VA = "0x13CA4CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000155")]
	public List<DynamicObjectData> DynamicObjectSaveData
	{
		[Token(Token = "0x6000920")]
		[Address(RVA = "0x13CA4D4", Offset = "0x13CA4D4", VA = "0x13CA4D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000156")]
	public List<ObjectDatum> ConsumedObjects
	{
		[Token(Token = "0x6000921")]
		[Address(RVA = "0x13CA4DC", Offset = "0x13CA4DC", VA = "0x13CA4DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000157")]
	public bool IsReady
	{
		[Token(Token = "0x6000922")]
		[Address(RVA = "0x13CA4E4", Offset = "0x13CA4E4", VA = "0x13CA4E4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000923")]
		[Address(RVA = "0x13CA4EC", Offset = "0x13CA4EC", VA = "0x13CA4EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000158")]
	public static bool IsPlayerActive
	{
		[Token(Token = "0x6000928")]
		[Address(RVA = "0x13CA954", Offset = "0x13CA954", VA = "0x13CA954")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000929")]
		[Address(RVA = "0x13CA99C", Offset = "0x13CA99C", VA = "0x13CA99C")]
		set
		{
		}
	}

	[Token(Token = "0x17000159")]
	public static bool IsEnoughResearchPointsForRescue
	{
		[Token(Token = "0x600092A")]
		[Address(RVA = "0x13CAA1C", Offset = "0x13CAA1C", VA = "0x13CAA1C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700015A")]
	public static int CurrentNeededResearchPointsForRescue
	{
		[Token(Token = "0x600092B")]
		[Address(RVA = "0x13CAA7C", Offset = "0x13CAA7C", VA = "0x13CAA7C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700015B")]
	public bool IsPaused
	{
		[Token(Token = "0x6000934")]
		[Address(RVA = "0x13CAAF4", Offset = "0x13CAAF4", VA = "0x13CAAF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0x13CA4F8", Offset = "0x13CA4F8", VA = "0x13CA4F8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0x13CA61C", Offset = "0x13CA61C", VA = "0x13CA61C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0x13CA774", Offset = "0x13CA774", VA = "0x13CA774", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0x13CA948", Offset = "0x13CA948", VA = "0x13CA948")]
	private void HandleLevelReset()
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0x13C9878", Offset = "0x13C9878", VA = "0x13C9878")]
	public void Update()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0x13CAB7C", Offset = "0x13CAB7C", VA = "0x13CAB7C")]
	public void ParentDynamicItem(Transform item, [Optional] string locatedScene)
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0x13CAC9C", Offset = "0x13CAC9C", VA = "0x13CAC9C")]
	public void UpdateDynamicItemData(GameObject item, string locatedScene)
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0x13CAEA4", Offset = "0x13CAEA4", VA = "0x13CAEA4")]
	public void RemoveDynamicItemData(GameObject item)
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x13CAFC0", Offset = "0x13CAFC0", VA = "0x13CAFC0")]
	public void AddConsumedItem(string guid, string sceneGuid, [Optional] GameObject item)
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x13CB1F4", Offset = "0x13CB1F4", VA = "0x13CB1F4")]
	public static string GetObjectLocatedSceneName(GameObject go)
	{
		return null;
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x13CB4A8", Offset = "0x13CB4A8", VA = "0x13CB4A8")]
	public void ClearDynamicObjects()
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x13CBA04", Offset = "0x13CBA04", VA = "0x13CBA04")]
	private void OnGlobalActionOnRescue(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x13CBA60", Offset = "0x13CBA60", VA = "0x13CBA60")]
	public Gameplay()
	{
	}
}
[Token(Token = "0x20001A9")]
public class InstructionMarker : MonoBehaviour
{
	[Token(Token = "0x600093D")]
	[Address(RVA = "0x13CBC8C", Offset = "0x13CBC8C", VA = "0x13CBC8C")]
	public InstructionMarker()
	{
	}
}
[Token(Token = "0x20001AA")]
public class MultiplayerSchematicTracker : PT.Singleton<MultiplayerSchematicTracker>
{
	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly List<Identifier> m_unlockedSchematicIdentifiers;

	[Token(Token = "0x14000005")]
	public static event Action OnSchematicsUpdated
	{
		[Token(Token = "0x600093E")]
		[Address(RVA = "0x13CBC94", Offset = "0x13CBC94", VA = "0x13CBC94")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x13CBD4C", Offset = "0x13CBD4C", VA = "0x13CBD4C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x13CBE04", Offset = "0x13CBE04", VA = "0x13CBE04")]
	public void Add(Identifier identifier)
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x13CBEF0", Offset = "0x13CBEF0", VA = "0x13CBEF0")]
	public bool Contains(Identifier identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x13CBF48", Offset = "0x13CBF48", VA = "0x13CBF48")]
	public MultiplayerSchematicTracker()
	{
	}
}
[Token(Token = "0x20001AB")]
[ServiceProvider]
public class MultiplayerScoreTracker
{
	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ScoreBreakdown m_score;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ScorePoints m_scorePoints;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<MultiplayerScoreResult> m_results;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_liveMatchScore;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<string, int> m_liveMatchScores;

	[Token(Token = "0x1700015C")]
	public ScoreBreakdown Score
	{
		[Token(Token = "0x6000943")]
		[Address(RVA = "0x13CC010", Offset = "0x13CC010", VA = "0x13CC010")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700015D")]
	public List<MultiplayerScoreResult> Results
	{
		[Token(Token = "0x6000944")]
		[Address(RVA = "0x13CC018", Offset = "0x13CC018", VA = "0x13CC018")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700015E")]
	public Dictionary<string, int> LiveMatchScores
	{
		[Token(Token = "0x6000945")]
		[Address(RVA = "0x13CC020", Offset = "0x13CC020", VA = "0x13CC020")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x13CC028", Offset = "0x13CC028", VA = "0x13CC028")]
	public static void Create()
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0x13CC0C4", Offset = "0x13CC0C4", VA = "0x13CC0C4")]
	public MultiplayerScoreTracker()
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0x13CC600", Offset = "0x13CC600", VA = "0x13CC600", Slot = "1")]
	~MultiplayerScoreTracker()
	{
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0x13CC938", Offset = "0x13CC938", VA = "0x13CC938")]
	public void StartSession(LeaderboardMapName mapName)
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0x13CCCF4", Offset = "0x13CCCF4", VA = "0x13CCCF4")]
	public ScoreBreakdown FinishSession()
	{
		return null;
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x13CD140", Offset = "0x13CD140", VA = "0x13CD140")]
	public float GetLevelTime()
	{
		return default(float);
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0x13CD2A0", Offset = "0x13CD2A0", VA = "0x13CD2A0")]
	public static ScoreBreakdownData ToData()
	{
		return null;
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0x13CD468", Offset = "0x13CD468", VA = "0x13CD468")]
	public static ScoreBreakdown GetScore()
	{
		return null;
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0x13CD524", Offset = "0x13CD524", VA = "0x13CD524")]
	public static void FromData(ScoreBreakdownData data)
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0x13CD768", Offset = "0x13CD768", VA = "0x13CD768")]
	private void OnDamageReport(DamageReport report)
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0x13CD918", Offset = "0x13CD918", VA = "0x13CD918")]
	private void OnScoreReceived(SendScore score)
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0x13CDCE0", Offset = "0x13CDCE0", VA = "0x13CDCE0")]
	public void AddScore(ScoreBreakdown finalScore)
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x13CE220", Offset = "0x13CE220", VA = "0x13CE220")]
	private void OnLiveMatchScoreReceived(LiveMatchScore obj)
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x13CD820", Offset = "0x13CD820", VA = "0x13CD820")]
	private void ChangeLiveMatchScore(int amount)
	{
	}
}
[Token(Token = "0x20001AE")]
public class MultiplayerScoreResult
{
	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string PlayerName;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly int Level;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public readonly int Kills;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public readonly int Headshots;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public readonly int TotalScore;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public readonly float Ping;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public readonly int TimeExp;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public readonly float LevelTime;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public readonly bool IsServer;

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x13CDC54", Offset = "0x13CDC54", VA = "0x13CDC54")]
	public MultiplayerScoreResult(string playerName, int level, int kills, int headshots, int totalScore, float ping, int timeExp, float levelTime, bool isServer)
	{
	}
}
[Token(Token = "0x20001AF")]
public enum PlayerGlory
{
	[Token(Token = "0x40008DA")]
	GunHeadshot,
	[Token(Token = "0x40008DB")]
	MeleeHeadshot,
	[Token(Token = "0x40008DC")]
	RapidKills
}
[Token(Token = "0x20001B0")]
public class PlayerGloryMonitor : MonoBehaviour
{
	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Trigger a rapid kill glory moment if we get this many kills within the required time window.")]
	[Min(0f)]
	[SerializeField]
	private int m_rapidKillRequiredCount;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("Trigger a rapid kill glory moment if we get enough kills within this many scaled seconds.")]
	[SerializeField]
	[Min(0f)]
	private float m_rapidKillTimeWindow;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<float> m_killTimestamps;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<PlayerGlory> OnGloryMomentObserved;

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x13CE370", Offset = "0x13CE370", VA = "0x13CE370")]
	private void Awake()
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x13CE4A0", Offset = "0x13CE4A0", VA = "0x13CE4A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x13CE578", Offset = "0x13CE578", VA = "0x13CE578")]
	private void OnDamageReport(DamageReport damageReport)
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x13CE57C", Offset = "0x13CE57C", VA = "0x13CE57C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x13CE638", Offset = "0x13CE638", VA = "0x13CE638")]
	public PlayerGloryMonitor()
	{
	}
}
[Token(Token = "0x20001B1")]
public class PlayerLocationDetector : CachedMonoBehaviour
{
	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<PlayerAgent, PlayerLocationDetector> OnEnteredLocation;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<PlayerAgent, PlayerLocationDetector> OnExitedLocation;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_locationId;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Zone> m_childZones;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<PlayerAgent, HashSet<Zone>> m_playerInZones;

	[Token(Token = "0x1700015F")]
	public string locationId
	{
		[Token(Token = "0x600095E")]
		[Address(RVA = "0x13CE640", Offset = "0x13CE640", VA = "0x13CE640")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0x13CE648", Offset = "0x13CE648", VA = "0x13CE648")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0x13CE838", Offset = "0x13CE838", VA = "0x13CE838")]
	private void Start()
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0x13CEB48", Offset = "0x13CEB48", VA = "0x13CEB48")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0x13CEEE4", Offset = "0x13CEEE4", VA = "0x13CEEE4")]
	private void HandleAgentRegistered(IAgent agent)
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0x13CF004", Offset = "0x13CF004", VA = "0x13CF004")]
	private void HandleAgentDeregistered(IAgent agent)
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0x13CF0DC", Offset = "0x13CF0DC", VA = "0x13CF0DC")]
	private void HandleEnterZone(Zone zone, GameObject obj)
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x13CF3BC", Offset = "0x13CF3BC", VA = "0x13CF3BC")]
	private void HandleExitZone(Zone zone, GameObject obj)
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x13CF698", Offset = "0x13CF698", VA = "0x13CF698")]
	public PlayerLocationDetector()
	{
	}
}
[Token(Token = "0x20001B2")]
public class BattleSisterPool : IPool
{
	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_errorOnAllocation;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int m_key;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject m_SourcePrefab;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform m_PoolRoot;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<GameObject> m_instances;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<GameObject> m_activeItems;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_iTotalInstantiated;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<GameObject, List<IPoolable>> m_instancePoolables;

	[Token(Token = "0x17000160")]
	public int Key
	{
		[Token(Token = "0x6000967")]
		[Address(RVA = "0x13CF6F0", Offset = "0x13CF6F0", VA = "0x13CF6F0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000161")]
	public GameObject SourcePrefab
	{
		[Token(Token = "0x6000968")]
		[Address(RVA = "0x13CF6F8", Offset = "0x13CF6F8", VA = "0x13CF6F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000162")]
	public int FreeCount
	{
		[Token(Token = "0x6000969")]
		[Address(RVA = "0x13CF700", Offset = "0x13CF700", VA = "0x13CF700")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000163")]
	public Transform RootTransform
	{
		[Token(Token = "0x600096A")]
		[Address(RVA = "0x13CF748", Offset = "0x13CF748", VA = "0x13CF748")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x13CF750", Offset = "0x13CF750", VA = "0x13CF750")]
	public BattleSisterPool(int key, GameObject sourcePrefab, GameObject poolManagerRoot, bool createPoolRoot = true)
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x13CF998", Offset = "0x13CF998", VA = "0x13CF998")]
	public void Clear()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0x13CFBE8", Offset = "0x13CFBE8", VA = "0x13CFBE8")]
	public bool OwnsInstance(GameObject instance)
	{
		return default(bool);
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0x13CFC68", Offset = "0x13CFC68", VA = "0x13CFC68")]
	public void AddInstance(bool calledFromInitPool = false)
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0x13D0158", Offset = "0x13D0158", VA = "0x13D0158")]
	public GameObject GetInstance()
	{
		return null;
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0x13D0398", Offset = "0x13D0398", VA = "0x13D0398", Slot = "4")]
	public void ReturnInstance(GameObject poolable)
	{
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0x13D04C8", Offset = "0x13D04C8", VA = "0x13D04C8")]
	public static void BeginAllocationAllowedScope()
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0x13D0520", Offset = "0x13D0520", VA = "0x13D0520")]
	public static void EndAllocationAllowedScope()
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0x13D057C", Offset = "0x13D057C", VA = "0x13D057C")]
	public List<IPoolable> GetInstancePoolables(GameObject instance)
	{
		return null;
	}
}
[Token(Token = "0x20001B3")]
public class BattleSisterPoolManager : PT.Singleton<BattleSisterPoolManager>
{
	[Token(Token = "0x20001B4")]
	public delegate void InstanceAllocatedHandler(GameObject sourcePrefab, GameObject instanceGameObject);

	[Token(Token = "0x20001B5")]
	public enum Group
	{
		[Token(Token = "0x40008F7")]
		Attackable,
		[Token(Token = "0x40008F8")]
		Projectile,
		[Token(Token = "0x40008F9")]
		FX,
		[Token(Token = "0x40008FA")]
		Other,
		[Token(Token = "0x40008FB")]
		Count
	}

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<GameObject> OnReturnedToPoolManager;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool s_initialized;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Transform s_PoolManagerRoot;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static bool s_bObjectPoolingEnabled;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<int, BattleSisterPool> s_pools;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Dictionary<GameObject, BattleSisterPool> s_activeInstances;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static GameObject[] s_ActiveRoots;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static InstanceAllocatedHandler OnInstanceAllocated;

	[Token(Token = "0x17000164")]
	public static bool PoolingEnabled
	{
		[Token(Token = "0x6000975")]
		[Address(RVA = "0x13D0640", Offset = "0x13D0640", VA = "0x13D0640")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000976")]
		[Address(RVA = "0x13D0698", Offset = "0x13D0698", VA = "0x13D0698")]
		set
		{
		}
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x13D06F4", Offset = "0x13D06F4", VA = "0x13D06F4")]
	public static void Init()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x13D0AD0", Offset = "0x13D0AD0", VA = "0x13D0AD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0x13D0B1C", Offset = "0x13D0B1C", VA = "0x13D0B1C")]
	public static void Reset()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0x13D0D68", Offset = "0x13D0D68", VA = "0x13D0D68")]
	private new void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0x13D0DF0", Offset = "0x13D0DF0", VA = "0x13D0DF0")]
	public static void InitPool(int key, GameObject sourcePrefab, int numberOfInstances, int max = -1)
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x13D1000", Offset = "0x13D1000", VA = "0x13D1000")]
	private static BattleSisterPool GetOrCreatePool(GameObject sourcePrefab)
	{
		return null;
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0x13D1140", Offset = "0x13D1140", VA = "0x13D1140")]
	private static BattleSisterPool GetPoolFromPrefabName(GameObject sourcePrefab)
	{
		return null;
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0x13D0EE4", Offset = "0x13D0EE4", VA = "0x13D0EE4")]
	private static BattleSisterPool GetOrCreatePool(int key, GameObject sourcePrefab)
	{
		return null;
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0x13D11F8", Offset = "0x13D11F8", VA = "0x13D11F8")]
	public static BattleSisterPool GetInstancePool(GameObject instance)
	{
		return null;
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0x13D139C", Offset = "0x13D139C", VA = "0x13D139C")]
	public static void RemovePool(int key)
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0x13D1480", Offset = "0x13D1480", VA = "0x13D1480")]
	private static GameObject GetInstance(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0x13D1528", Offset = "0x13D1528", VA = "0x13D1528")]
	private static GameObject GetInstance(int key, GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0x13D15E0", Offset = "0x13D15E0", VA = "0x13D15E0")]
	private static void OnAllocFromPool(GameObject instance, [Optional] List<Type> excludeOnAllocTypes)
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0x13D1854", Offset = "0x13D1854", VA = "0x13D1854")]
	private static void OnReturnToPool(GameObject instance)
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0x13D1AC0", Offset = "0x13D1AC0", VA = "0x13D1AC0")]
	public static BattleSisterPool GetPrefabForInstance(GameObject instance)
	{
		return null;
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x13D1B94", Offset = "0x13D1B94", VA = "0x13D1B94")]
	public static GameObject AllocFromPool(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x13D1BFC", Offset = "0x13D1BFC", VA = "0x13D1BFC")]
	public static GameObject AllocFromPool(int key, GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x13D1C74", Offset = "0x13D1C74", VA = "0x13D1C74")]
	public static GameObject AllocFromPool(GameObject prefab, Group eType)
	{
		return null;
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x13D1CDC", Offset = "0x13D1CDC", VA = "0x13D1CDC")]
	public static GameObject AllocFromPool(int key, GameObject prefab, Group eType)
	{
		return null;
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x13D1D60", Offset = "0x13D1D60", VA = "0x13D1D60")]
	public static GameObject AllocFromPool(int key, GameObject prefab, Group eType, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x13D1E50", Offset = "0x13D1E50", VA = "0x13D1E50")]
	public static GameObject AllocFromPool(GameObject prefab, Group eType, Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0x13D1F00", Offset = "0x13D1F00", VA = "0x13D1F00")]
	public static GameObject AllocFromPool(GameObject prefab, Vector3 position, Quaternion rotation, [Optional] List<Type> excludeOnAllocTypes)
	{
		return null;
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0x13D1FEC", Offset = "0x13D1FEC", VA = "0x13D1FEC")]
	public static GameObject AllocFromPool(GameObject prefab, Group eType, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x600098E")]
	public static T AllocFromPool<T>(T prefab) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x600098F")]
	public static T AllocFromPool<T>(int key, T prefab) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000990")]
	public static T AllocFromPool<T>(T prefab, Group eType) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000991")]
	public static T AllocFromPool<T>(int key, T prefab, Group eType) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000992")]
	public static T AllocFromPool<T>(T prefab, Group eType, Vector3 vPos) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000993")]
	public static T AllocFromPool<T>(T prefab, Group eType, Vector3 vPos, Quaternion qOrient) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000994")]
	public static T AllocFromPool<T>(int key, T prefab, Group eType, Vector3 vPos, Quaternion qOrient) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x13CB934", Offset = "0x13CB934", VA = "0x13CB934")]
	public static void ReturnToPool(IPoolable poolable)
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x13D20CC", Offset = "0x13D20CC", VA = "0x13D20CC")]
	public static void ReturnToPool(GameObject obj)
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0x13D2210", Offset = "0x13D2210", VA = "0x13D2210")]
	public BattleSisterPoolManager()
	{
	}
}
[Token(Token = "0x20001B6")]
public class CachedPoolable : Poolable
{
	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int m_cachedPoolKey;

	[Token(Token = "0x17000165")]
	public int CachedPoolKey
	{
		[Token(Token = "0x600099D")]
		[Address(RVA = "0x13D24CC", Offset = "0x13D24CC", VA = "0x13D24CC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x13D24D4", Offset = "0x13D24D4", VA = "0x13D24D4")]
	protected void InitializePoolable(int key)
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0x13D24DC", Offset = "0x13D24DC", VA = "0x13D24DC")]
	public CachedPoolable()
	{
	}
}
[Token(Token = "0x20001B7")]
public class CachedPoolableMonoBehaviour : CachedMonoBehaviour
{
	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Poolable m_cachedPoolable;

	[Token(Token = "0x17000166")]
	public Poolable CachedPoolable
	{
		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x13D24E4", Offset = "0x13D24E4", VA = "0x13D24E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x13D2588", Offset = "0x13D2588", VA = "0x13D2588", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x13D25E0", Offset = "0x13D25E0", VA = "0x13D25E0")]
	public CachedPoolableMonoBehaviour()
	{
	}
}
[Token(Token = "0x20001B8")]
[CreateAssetMenu(fileName = "Mission Poolable Asset List", menuName = "Battle Sister/Pooling/GameObject Poolable Asset List", order = 1)]
public class GameObjectPoolableAssetList : PoolableAssetList
{
	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Max instances with negative value => maxInstances = numberToPool")]
	protected int m_maxInstances;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected List<MissionPoolableMapping> m_poolableList;

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x13D25E8", Offset = "0x13D25E8", VA = "0x13D25E8", Slot = "4")]
	public override void AddElementsToPool()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x13D2794", Offset = "0x13D2794", VA = "0x13D2794")]
	public GameObjectPoolableAssetList()
	{
	}
}
[Token(Token = "0x20001B9")]
public abstract class PoolableAssetList : ScriptableObject
{
	[Token(Token = "0x60009A5")]
	public abstract void AddElementsToPool();

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0x13D2824", Offset = "0x13D2824", VA = "0x13D2824")]
	protected PoolableAssetList()
	{
	}
}
[Token(Token = "0x20001BA")]
[CreateAssetMenu(fileName = "Poolable Config File", menuName = "Battle Sister/Pooling/Poolable Config File", order = 1)]
public class PoolableConfigFile : ScriptableObject
{
	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public List<PoolableAssetList> m_poolingAssetList;

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x13D282C", Offset = "0x13D282C", VA = "0x13D282C")]
	public void PopulatePool()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x13D2958", Offset = "0x13D2958", VA = "0x13D2958")]
	public PoolableConfigFile()
	{
	}
}
[Serializable]
[Token(Token = "0x20001BB")]
public class MissionPoolableMapping
{
	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject m_prefabReference;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_numberToPool;

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x13D29E0", Offset = "0x13D29E0", VA = "0x13D29E0")]
	public MissionPoolableMapping()
	{
	}
}
[Serializable]
[Token(Token = "0x20001BC")]
public class BehaviourTreePoolableMapping
{
	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RootNode m_behaviourTree;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_numberToPool;

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x13D29F0", Offset = "0x13D29F0", VA = "0x13D29F0")]
	public BehaviourTreePoolableMapping()
	{
	}
}
[Token(Token = "0x20001BD")]
public class PoolableMonoBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_cachedPoolKey;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Poolable m_cachedPoolable;

	[Token(Token = "0x17000167")]
	public int CachedPoolKey
	{
		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x13D2A00", Offset = "0x13D2A00", VA = "0x13D2A00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000168")]
	public Poolable CachedPoolable
	{
		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x13D2A08", Offset = "0x13D2A08", VA = "0x13D2A08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x13D2AAC", Offset = "0x13D2AAC", VA = "0x13D2AAC", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x13D2B04", Offset = "0x13D2B04", VA = "0x13D2B04")]
	protected void InitializePoolable(int key)
	{
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x13D2B0C", Offset = "0x13D2B0C", VA = "0x13D2B0C")]
	public PoolableMonoBehaviour()
	{
	}
}
[Token(Token = "0x20001BE")]
public class PoolableReturnToPool : Poolable
{
	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Poolable> m_childPoolables;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_allocatedFromPool;

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x13D2B14", Offset = "0x13D2B14", VA = "0x13D2B14")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x13D2B18", Offset = "0x13D2B18", VA = "0x13D2B18")]
	private List<Poolable> GetPoolables()
	{
		return null;
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x13D2C04", Offset = "0x13D2C04", VA = "0x13D2C04", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x13D2D60", Offset = "0x13D2D60", VA = "0x13D2D60", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0x13D2D84", Offset = "0x13D2D84", VA = "0x13D2D84", Slot = "8")]
	public override void OnAddedToPool()
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x13D2EF0", Offset = "0x13D2EF0", VA = "0x13D2EF0")]
	public PoolableReturnToPool()
	{
	}
}
[Token(Token = "0x20001BF")]
public class PreMissionPooling : MonoBehaviour
{
	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PoolableConfigFile m_poolableConfig;

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0x13D2EF8", Offset = "0x13D2EF8", VA = "0x13D2EF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0x13D2F10", Offset = "0x13D2F10", VA = "0x13D2F10")]
	public PreMissionPooling()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C0")]
public class ScoreBreakdown : IDataSource
{
	[Token(Token = "0x20001C1")]
	public class MultiKillInfo
	{
		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int scorePoints;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int killCounter;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeLastShot;

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x13D3B84", Offset = "0x13D3B84", VA = "0x13D3B84")]
		public MultiKillInfo()
		{
		}
	}

	[Token(Token = "0x20001C2")]
	public class MultiKillKey : IEquatable<MultiKillKey>
	{
		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int id;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Identifier weapon;

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x13D3B4C", Offset = "0x13D3B4C", VA = "0x13D3B4C")]
		public MultiKillKey(int identifier, Identifier weaponId)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x13D3D6C", Offset = "0x13D3D6C", VA = "0x13D3D6C")]
		public static bool operator ==(MultiKillKey b, MultiKillKey c)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x13D3DEC", Offset = "0x13D3DEC", VA = "0x13D3DEC")]
		public static bool operator !=(MultiKillKey b, MultiKillKey c)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x13D3E6C", Offset = "0x13D3E6C", VA = "0x13D3E6C", Slot = "4")]
		public bool Equals(MultiKillKey other)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x13D3ED4", Offset = "0x13D3ED4", VA = "0x13D3ED4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x13D3F64", Offset = "0x13D3F64", VA = "0x13D3F64", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, int> m_enemyKillCount;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Identifier, int> m_weaponKillCount;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_headshotCount;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_accumulationTimestamp;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_levelId;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_secondsElapsed;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_sessionRunning;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<MultiKillKey, MultiKillInfo> m_multikillBonusCount;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_maxMultikill;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_multikillBonusExp;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ScorePoints m_scorePointsInfo;

	[Token(Token = "0x17000169")]
	public float SecondsElapsed
	{
		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x13D2F18", Offset = "0x13D2F18", VA = "0x13D2F18")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700016A")]
	public int LevelId
	{
		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x13D2F20", Offset = "0x13D2F20", VA = "0x13D2F20")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700016B")]
	public bool SessionRunning
	{
		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x13D2F28", Offset = "0x13D2F28", VA = "0x13D2F28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700016C")]
	public Dictionary<string, int> EnemyKillCount
	{
		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x13D2F30", Offset = "0x13D2F30", VA = "0x13D2F30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700016D")]
	public Dictionary<Identifier, int> WeaponKillCount
	{
		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x13D2F38", Offset = "0x13D2F38", VA = "0x13D2F38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700016E")]
	public int MaxMultiKill
	{
		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x13D2F40", Offset = "0x13D2F40", VA = "0x13D2F40")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700016F")]
	public int MultikillBonusExp
	{
		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x13D2F48", Offset = "0x13D2F48", VA = "0x13D2F48")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000170")]
	public int KillCount
	{
		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x13CE038", Offset = "0x13CE038", VA = "0x13CE038")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000171")]
	public int KillsExp
	{
		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x13D30A4", Offset = "0x13D30A4", VA = "0x13D30A4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000172")]
	public int LevelCompletedExp
	{
		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x13D325C", Offset = "0x13D325C", VA = "0x13D325C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000173")]
	public int HeadshotsCount
	{
		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x13D3304", Offset = "0x13D3304", VA = "0x13D3304")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000174")]
	public int HeadshotsExp
	{
		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x13D330C", Offset = "0x13D330C", VA = "0x13D330C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000175")]
	public string FormattedLevelTime
	{
		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x13D3330", Offset = "0x13D3330", VA = "0x13D3330")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000176")]
	public float LevelTime
	{
		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x13D33C4", Offset = "0x13D33C4", VA = "0x13D33C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000177")]
	public int TimeExp
	{
		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x13CE1D0", Offset = "0x13CE1D0", VA = "0x13CE1D0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000178")]
	public float TimeBonusMultiplier
	{
		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x13D33CC", Offset = "0x13D33CC", VA = "0x13D33CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000179")]
	public int TotalScore
	{
		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x13CE024", Offset = "0x13CE024", VA = "0x13CE024")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700017A")]
	public int ScoreWithoutTimeBonus
	{
		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x13D359C", Offset = "0x13D359C", VA = "0x13D359C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700017B")]
	public int ScoreWithTimeBonus
	{
		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x13D3534", Offset = "0x13D3534", VA = "0x13D3534")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x13CC4BC", Offset = "0x13CC4BC", VA = "0x13CC4BC")]
	public ScoreBreakdown(ScorePoints scoreInfo)
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x13D2F50", Offset = "0x13D2F50", VA = "0x13D2F50")]
	public ScoreBreakdown(ScoreBreakdownData data, ScorePoints scoreInfo)
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x13D3690", Offset = "0x13D3690", VA = "0x13D3690")]
	public void Clear()
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0x13CCCA4", Offset = "0x13CCCA4", VA = "0x13CCCA4")]
	public void TrackLevel(int levelId)
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x13CCCC8", Offset = "0x13CCCC8", VA = "0x13CCCC8")]
	public void StartTimer()
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x13CD0F4", Offset = "0x13CD0F4", VA = "0x13CD0F4")]
	public void StopTimer()
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0x13D36F0", Offset = "0x13D36F0", VA = "0x13D36F0")]
	private void AccumulateTime()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x13CD808", Offset = "0x13CD808", VA = "0x13CD808")]
	public int EnemyKilled(Identifier enemyId, bool headshot, int groupBulletId, VrItem weapon)
	{
		return default(int);
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x13D3730", Offset = "0x13D3730", VA = "0x13D3730")]
	public int EnemyKilled(Identifier enemyId, bool headshot, int groupBulletId, Identifier weaponId)
	{
		return default(int);
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x13CCD28", Offset = "0x13CCD28", VA = "0x13CCD28")]
	public void AcumulateMultipleShots(bool force = false)
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x13D3B8C", Offset = "0x13D3B8C", VA = "0x13D3B8C")]
	public void OverwriteScoreTime(float value)
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x13CD360", Offset = "0x13CD360", VA = "0x13CD360")]
	public ScoreBreakdownData ToData()
	{
		return null;
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x13CD658", Offset = "0x13CD658", VA = "0x13CD658")]
	public void FromData(ScoreBreakdownData data)
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x13D3B94", Offset = "0x13D3B94", VA = "0x13D3B94", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x20001C3")]
public class State_InitializeRankingManager : BaseStateAttachedLogic
{
	[Token(Token = "0x60009E0")]
	[Address(RVA = "0x13D3F98", Offset = "0x13D3F98", VA = "0x13D3F98", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0x13D4014", Offset = "0x13D4014", VA = "0x13D4014")]
	public State_InitializeRankingManager()
	{
	}
}
[Token(Token = "0x20001C4")]
public class State_SaveRankingData : BaseStateAttachedLogic
{
	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x13D401C", Offset = "0x13D401C", VA = "0x13D401C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x13D4120", Offset = "0x13D4120", VA = "0x13D4120")]
	public State_SaveRankingData()
	{
	}
}
[Token(Token = "0x20001C5")]
public class State_SetHandGrabInteraction : BaseStateAttachedLogic
{
	[Token(Token = "0x1700017C")]
	[StateConfig("Interaction")]
	public bool Interaction
	{
		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x13D4128", Offset = "0x13D4128", VA = "0x13D4128")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x13D4130", Offset = "0x13D4130", VA = "0x13D4130")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0x13D413C", Offset = "0x13D413C", VA = "0x13D413C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0x13D43A4", Offset = "0x13D43A4", VA = "0x13D43A4")]
	public State_SetHandGrabInteraction()
	{
	}
}
[Token(Token = "0x20001C6")]
public class State_SetHandOnlyToHoldOn : BaseStateAttachedLogic
{
	[Token(Token = "0x1700017D")]
	[StateConfig("Only Hold On")]
	public bool OnlyHoldOn
	{
		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x13D43AC", Offset = "0x13D43AC", VA = "0x13D43AC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x13D43B4", Offset = "0x13D43B4", VA = "0x13D43B4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0x13D43C0", Offset = "0x13D43C0", VA = "0x13D43C0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0x13D45C8", Offset = "0x13D45C8", VA = "0x13D45C8")]
	public State_SetHandOnlyToHoldOn()
	{
	}
}
[Token(Token = "0x20001C7")]
public class State_ShowHordeHowToPlayInstructions : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PlayableDirector _instructionsTimeline;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Button skipButton;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_isShowing;

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0x13D45D0", Offset = "0x13D45D0", VA = "0x13D45D0", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x13D48A4", Offset = "0x13D48A4", VA = "0x13D48A4")]
	private void OnSkip()
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x13D4918", Offset = "0x13D4918", VA = "0x13D4918")]
	private void OnInstructionsTimelineDone(PlayableDirector obj)
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x13D49BC", Offset = "0x13D49BC", VA = "0x13D49BC", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x13D4AD4", Offset = "0x13D4AD4", VA = "0x13D4AD4")]
	public State_ShowHordeHowToPlayInstructions()
	{
	}
}
[Token(Token = "0x20001C8")]
public class State_StartTrackingMultiplayerScore : BaseStateAttachedLogic
{
	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x13D4ADC", Offset = "0x13D4ADC", VA = "0x13D4ADC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x13D4B9C", Offset = "0x13D4B9C", VA = "0x13D4B9C", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x13D4CC8", Offset = "0x13D4CC8", VA = "0x13D4CC8")]
	public State_StartTrackingMultiplayerScore()
	{
	}
}
[Token(Token = "0x20001C9")]
public class State_StopTrackingMultiplayerScore : BaseStateAttachedLogic
{
	[Token(Token = "0x60009F4")]
	[Address(RVA = "0x13D4CD0", Offset = "0x13D4CD0", VA = "0x13D4CD0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0x13D50AC", Offset = "0x13D50AC", VA = "0x13D50AC")]
	public State_StopTrackingMultiplayerScore()
	{
	}
}
[Token(Token = "0x20001CA")]
public class TerrainColliderHandler : PT.SceneContentsDirectory.SceneContentsDirectory<TerrainCollider, TerrainColliderHandler>
{
	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string m_cachedSceneName;

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x13D50B4", Offset = "0x13D50B4", VA = "0x13D50B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x13D52A0", Offset = "0x13D52A0", VA = "0x13D52A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x13D5370", Offset = "0x13D5370", VA = "0x13D5370")]
	private void OnSceneUnload()
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0x13D51D0", Offset = "0x13D51D0", VA = "0x13D51D0")]
	private void SetCollisionState(bool collisionEnabled)
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0x13D5378", Offset = "0x13D5378", VA = "0x13D5378")]
	public TerrainColliderHandler()
	{
	}
}
[Token(Token = "0x20001CB")]
public class Crate : CachedMonoBehaviour, ISpatialHashPoint
{
	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SpatialHashGrid<Crate> s_spatialHashGrid;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Crate[] s_resultBuffer;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<Crate> OnCrateEnabled;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private NavMeshObstacle m_navBounds;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool m_glassTop;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Gate m_gate;

	[Token(Token = "0x1700017E")]
	private Vector3 ISpatialHashPoint.pointPosition
	{
		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x13D54B8", Offset = "0x13D54B8", VA = "0x13D54B8", Slot = "4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700017F")]
	public bool isOpen
	{
		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x13D54D8", Offset = "0x13D54D8", VA = "0x13D54D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000180")]
	public bool canSeeContents
	{
		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x13D555C", Offset = "0x13D555C", VA = "0x13D555C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0x13D53E4", Offset = "0x13D53E4", VA = "0x13D53E4")]
	static Crate()
	{
	}

	[Token(Token = "0x60009FF")]
	[Address(RVA = "0x13D5588", Offset = "0x13D5588", VA = "0x13D5588")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A00")]
	[Address(RVA = "0x13D55E0", Offset = "0x13D55E0", VA = "0x13D55E0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0x13D5690", Offset = "0x13D5690", VA = "0x13D5690")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0x13D5710", Offset = "0x13D5710", VA = "0x13D5710")]
	public static Crate GetCrate(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0x13D58B0", Offset = "0x13D58B0", VA = "0x13D58B0")]
	public bool Contains(Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0x13D5A00", Offset = "0x13D5A00", VA = "0x13D5A00")]
	public Crate()
	{
	}
}
[Token(Token = "0x20001CC")]
public class DropLadder : MonoBehaviour
{
	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator m_animator;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_dropped;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_dropHash;

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0x13D5A08", Offset = "0x13D5A08", VA = "0x13D5A08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0x13D5A90", Offset = "0x13D5A90", VA = "0x13D5A90")]
	public void Drop()
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0x13D5B3C", Offset = "0x13D5B3C", VA = "0x13D5B3C")]
	public DropLadder()
	{
	}
}
[Token(Token = "0x20001CD")]
[RequireComponent(typeof(GuidComponent))]
public class Gate : CachedMonoBehaviour, IPowerConsumer, IUniqueInt, IBoltEntityComponent
{
	[Serializable]
	[Token(Token = "0x20001CE")]
	public class GateEvents
	{
		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[FormerlySerializedAs("onClose")]
		public UnityEvent onLocallyClose;

		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("onOpen")]
		public UnityEvent onLocallyOpen;

		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FormerlySerializedAs("onPowerGained")]
		public UnityEvent onLocallyPowerGained;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("onPowerLost")]
		public UnityEvent onLocallyPowerLost;

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x13D6840", Offset = "0x13D6840", VA = "0x13D6840")]
		public GateEvents()
		{
		}
	}

	[Token(Token = "0x20001CF")]
	public enum GateOpenState
	{
		[Token(Token = "0x400093A")]
		Closed,
		[Token(Token = "0x400093B")]
		Open
	}

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Optional Power Source, gate can only open/close when power source is running, or if there is no power source")]
	[SerializeField]
	[InterfaceObject(typeof(IPowerSource))]
	private UnityEngine.Object m_powerSource;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GateOpenState m_initialState;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("The blocking object is enabled/disabled straight away to try and prevent players moving through doors opening and closing.")]
	[SerializeField]
	private GameObject m_blockingObject;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GateEvents m_events;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<GameObject> m_disableToBakeNavObjects;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_id;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private BoltEntity m_entity;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private PowerSystemConnections m_connections;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Animator m_animator;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x17000181")]
	private int IUniqueInt.id
	{
		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x13D5B44", Offset = "0x13D5B44", VA = "0x13D5B44", Slot = "6")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x13D5B4C", Offset = "0x13D5B4C", VA = "0x13D5B4C", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000182")]
	private BoltEntity IBoltEntityComponent.entity
	{
		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x13D5B54", Offset = "0x13D5B54", VA = "0x13D5B54", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x17000183")]
	public GateState localState
	{
		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x13D5D28", Offset = "0x13D5D28", VA = "0x13D5D28")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x13D5D30", Offset = "0x13D5D30", VA = "0x13D5D30")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000184")]
	private bool Cabin.PowerSystem.IPowerConsumer.IsConsumingPower
	{
		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x13D5D38", Offset = "0x13D5D38", VA = "0x13D5D38", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000185")]
	private PowerSystemConnections Cabin.PowerSystem.IPowerConsumer.connections
	{
		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x13D5D40", Offset = "0x13D5D40", VA = "0x13D5D40", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000186")]
	public bool isOpen
	{
		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x13D5D48", Offset = "0x13D5D48", VA = "0x13D5D48")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x13D5D50", Offset = "0x13D5D50", VA = "0x13D5D50")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0x13D5D5C", Offset = "0x13D5D5C", VA = "0x13D5D5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0x13D5DF8", Offset = "0x13D5DF8", VA = "0x13D5DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x13D5E5C", Offset = "0x13D5E5C", VA = "0x13D5E5C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x13D5EC8", Offset = "0x13D5EC8", VA = "0x13D5EC8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0x13D5F34", Offset = "0x13D5F34", VA = "0x13D5F34", Slot = "8")]
	private void IBoltEntityComponent.Attached(BoltEntity entity)
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0x13D5F38", Offset = "0x13D5F38", VA = "0x13D5F38", Slot = "9")]
	private void IBoltEntityComponent.Detached(BoltEntity entity)
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x13D5F3C", Offset = "0x13D5F3C", VA = "0x13D5F3C", Slot = "10")]
	private void IBoltEntityComponent.SimulateOwner()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x13D6178", Offset = "0x13D6178", VA = "0x13D6178")]
	public bool OwnerCanOpen(bool force = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0x13D6250", Offset = "0x13D6250", VA = "0x13D6250")]
	public bool OwnerCanClose(bool force = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0x13D5CB8", Offset = "0x13D5CB8", VA = "0x13D5CB8")]
	public void OwnerOpen(bool force = false)
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x13D5CF0", Offset = "0x13D5CF0", VA = "0x13D5CF0")]
	public void OwnerClose(bool force = false)
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0x13D6328", Offset = "0x13D6328", VA = "0x13D6328")]
	public void OwnerToggleState()
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x13D6368", Offset = "0x13D6368", VA = "0x13D6368")]
	public void OnOpenChanged()
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x13D64CC", Offset = "0x13D64CC", VA = "0x13D64CC")]
	public void OnPowerChanged()
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x13D6518", Offset = "0x13D6518", VA = "0x13D6518")]
	public void DisableToBakeNav()
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x13D667C", Offset = "0x13D667C", VA = "0x13D667C")]
	public void EnableToBakeNav()
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0x13D67CC", Offset = "0x13D67CC", VA = "0x13D67CC")]
	public Gate()
	{
	}
}
[Token(Token = "0x20001D0")]
public class GateManager : MultiBoltEntityManager<Gate, IGatesManagerState>
{
	[Token(Token = "0x17000187")]
	protected override int maxInstances
	{
		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x13D68D4", Offset = "0x13D68D4", VA = "0x13D68D4", Slot = "147")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0x13D68DC", Offset = "0x13D68DC", VA = "0x13D68DC", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0x13D6A34", Offset = "0x13D6A34", VA = "0x13D6A34", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0x13D6B8C", Offset = "0x13D6B8C", VA = "0x13D6B8C")]
	private void OnGateStateChanged(IState state, string path, ArrayIndices indices)
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0x13D6C80", Offset = "0x13D6C80", VA = "0x13D6C80")]
	public GateManager()
	{
	}
}
[Token(Token = "0x20001D1")]
public class LocksManager : MultiBoltEntityManager<ResearchPointConsumer, ILocksManagerState>
{
	[Token(Token = "0x17000188")]
	protected override int maxInstances
	{
		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x13D6CEC", Offset = "0x13D6CEC", VA = "0x13D6CEC", Slot = "147")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0x13D6CF4", Offset = "0x13D6CF4", VA = "0x13D6CF4", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0x13D6E4C", Offset = "0x13D6E4C", VA = "0x13D6E4C", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0x13D6FA4", Offset = "0x13D6FA4", VA = "0x13D6FA4")]
	private void OnLockStateChanged(IState state, string path, ArrayIndices indices)
	{
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0x13D7454", Offset = "0x13D7454", VA = "0x13D7454")]
	public static void ProcessEvent(ResearchPointsEvent evnt)
	{
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0x13D75A4", Offset = "0x13D75A4", VA = "0x13D75A4")]
	public static void ServerProcessEvent(RequestUseResearchPoints evnt)
	{
	}

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0x13D7774", Offset = "0x13D7774", VA = "0x13D7774")]
	public static void ServerProcessEvent(ResearchPointConsumerInteraction evnt)
	{
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0x13D7A7C", Offset = "0x13D7A7C", VA = "0x13D7A7C")]
	public LocksManager()
	{
	}
}
[Token(Token = "0x20001D2")]
public class MultiBoltEntityManager<TClass, TState> : EntityEventListener<TState> where TClass : UnityEngine.Component, IUniqueInt, IBoltEntityComponent
{
	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static MultiBoltEntityManager<TClass, TState> s_instance;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static List<TClass> s_instances;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static bool s_isDirty;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected Dictionary<int, TClass> m_instancesById;

	[Token(Token = "0x17000189")]
	protected virtual int maxInstances
	{
		[Token(Token = "0x6000A33")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A31")]
	[AutoInitializeStatics]
	private void ResetStatic()
	{
	}

	[Token(Token = "0x6000A32")]
	static MultiBoltEntityManager()
	{
	}

	[Token(Token = "0x6000A34")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A35")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A36")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x6000A37")]
	public static void Add(TClass instance)
	{
	}

	[Token(Token = "0x6000A38")]
	public static void Remove(TClass instance)
	{
	}

	[Token(Token = "0x6000A39")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6000A3A")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6000A3B")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x6000A3C")]
	private void AssignSceneIds()
	{
	}

	[Token(Token = "0x6000A3D")]
	public MultiBoltEntityManager()
	{
	}
}
[Token(Token = "0x20001D3")]
public class PlayAnimation : MonoBehaviour
{
	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float defaultBlendTime;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animation m_animation;

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0x13D7AE8", Offset = "0x13D7AE8", VA = "0x13D7AE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x13D7B40", Offset = "0x13D7B40", VA = "0x13D7B40")]
	public void PlayAnim(AnimationClip clip)
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0x13D7C30", Offset = "0x13D7C30", VA = "0x13D7C30")]
	public PlayAnimation()
	{
	}
}
[Token(Token = "0x20001D4")]
public class ResearchPointAward : MonoBehaviour
{
	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int m_numPoints;

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x13D7C44", Offset = "0x13D7C44", VA = "0x13D7C44")]
	public void AwardPoints()
	{
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0x13D7DEC", Offset = "0x13D7DEC", VA = "0x13D7DEC")]
	public ResearchPointAward()
	{
	}
}
[Token(Token = "0x20001D5")]
[RequireComponent(typeof(GuidComponent))]
public class ResearchPointConsumer : CachedMonoBehaviour, IDataSource, IUniqueInt, IBoltEntityComponent
{
	[Token(Token = "0x20001D6")]
	public enum ConsumerState
	{
		[Token(Token = "0x400096F")]
		CantUse,
		[Token(Token = "0x4000970")]
		CanUse,
		[Token(Token = "0x4000971")]
		Used
	}

	[Token(Token = "0x20001D7")]
	public class ActiveInteraction
	{
		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float unlockDuration;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int pointsRequired;

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x13D8850", Offset = "0x13D8850", VA = "0x13D8850")]
		public ActiveInteraction()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20001D8")]
	public class Events
	{
		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("Local Events on all players, to be used purely for feedback, vfx, audio etc.")]
		[UnityEngine.Tooltip("Called when there are enough research points for the consumer.")]
		public UnityEvent OnLocallyCanUse;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Called when there are not enough research points for the consumer.")]
		public UnityEvent OnLocallyCantUse;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Called when consumer is activated.")]
		public UnityEvent OnLocallyActivated;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Called when consumer is deactivated.")]
		public UnityEvent OnLocallyDeactivated;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Called when consumer has accepted research points.")]
		public UnityEvent OnLocallyPointsAccepted;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Called when consumer has rejected research points.")]
		public UnityEvent OnLocallyPointsRejected;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Server Events, called on server only.")]
		public UnityEvent OnServerPointsAccepted;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent OnServerPointsRejected;

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x13D9EAC", Offset = "0x13D9EAC", VA = "0x13D9EAC")]
		public Events()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20001D9")]
	public class NumberTexture
	{
		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int number;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture texture;

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x13D9FD4", Offset = "0x13D9FD4", VA = "0x13D9FD4")]
		public NumberTexture()
		{
		}
	}

	[Token(Token = "0x4000943")]
	private const string c_cantUse = "CantUse";

	[Token(Token = "0x4000944")]
	private const string c_canUse = "CanUse";

	[Token(Token = "0x4000945")]
	private const string c_used = "Used";

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action ActionOnAccessGranted;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action ActionOnInsufficientPoints;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action ActionOnTimerStart;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action ActionOnTimerStop;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool m_timePerkUsable;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool m_pricePerkUsable;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[FormerlySerializedAs("m_numOfPointsRequired")]
	[SerializeField]
	private int m_numOfPointsRequiredSP;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private int m_numOfPointsRequiredMP;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_difficultyCostRatio;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[UnityEngine.Tooltip("Time to transfer research point to unlock connected device.")]
	private float m_unlockDuration;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float m_cooldownDuration;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Events m_events;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[HideInInspector]
	private ResearchPointConsumerViewModel m_viewModel;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[UnityEngine.Tooltip("Material when lock can't be used becasue its for another POI.")]
	private Material m_unavailableMaterial;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[FormerlySerializedAs("m_lockedMaterial")]
	private Material m_insufficientPointsMaterial;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Material m_availableMaterial;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Material m_usedMaterial;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private WorldInteraction m_worldInteraction;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private ManualHaptics m_haptics;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Renderer[] m_renderers;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private MeshRenderer m_screenRenderer;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private MeshRenderer m_flareRenderer;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Material m_flareAvailableMaterial;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private Material m_flareInsufficientPointsMaterial;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private List<NumberTexture> m_pointsTextures;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[UnityEngine.Tooltip("List the levels this consumer should only be active for. If the list is empty, then its valid for all levels.")]
	[SerializeField]
	private List<LevelManifest> m_limitedToLevels;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_emissionColor;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_animationProgress;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int s_screenTexture;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool m_canUse;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	private bool m_unlockTimerActive;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private SectorMember m_sectorMember;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private ResearchPointConsumerData localState;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private ActiveInteraction m_activeInteraction;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private BoltEntity m_entity;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private int m_id;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Dictionary<int, Texture> m_pointsToTexture;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool m_isLockedForPOI;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private float m_localTimer;

	[Token(Token = "0x1700018A")]
	private static int m_availableResearchPoints
	{
		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x13D7DFC", Offset = "0x13D7DFC", VA = "0x13D7DFC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700018B")]
	public int PointsRequiredToUnlock
	{
		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x13D7E04", Offset = "0x13D7E04", VA = "0x13D7E04")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700018C")]
	private BoltEntity IBoltEntityComponent.entity
	{
		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x13D819C", Offset = "0x13D819C", VA = "0x13D819C", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x1700018D")]
	private int IUniqueInt.id
	{
		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x13D8584", Offset = "0x13D8584", VA = "0x13D8584", Slot = "4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x13D858C", Offset = "0x13D858C", VA = "0x13D858C", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700018E")]
	private bool isUsed
	{
		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x13D8594", Offset = "0x13D8594", VA = "0x13D8594")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0x13D85C0", Offset = "0x13D85C0", VA = "0x13D85C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0x13D8858", Offset = "0x13D8858", VA = "0x13D8858")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0x13D8E44", Offset = "0x13D8E44", VA = "0x13D8E44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0x13D8ABC", Offset = "0x13D8ABC", VA = "0x13D8ABC")]
	private void CalculateLockedForPOIState()
	{
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0x13D8320", Offset = "0x13D8320", VA = "0x13D8320")]
	private void SetRendererState(float fill, bool canUse, bool isUsed)
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0x13D8F80", Offset = "0x13D8F80", VA = "0x13D8F80")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x13D7E08", Offset = "0x13D7E08", VA = "0x13D7E08")]
	private int GetPoints()
	{
		return default(int);
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0x13D90BC", Offset = "0x13D90BC", VA = "0x13D90BC", Slot = "6")]
	private void IBoltEntityComponent.Attached(BoltEntity entity)
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0x13D90C0", Offset = "0x13D90C0", VA = "0x13D90C0", Slot = "7")]
	private void IBoltEntityComponent.Detached(BoltEntity entity)
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x13D90C4", Offset = "0x13D90C4", VA = "0x13D90C4", Slot = "8")]
	private void IBoltEntityComponent.SimulateOwner()
	{
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x13D953C", Offset = "0x13D953C", VA = "0x13D953C")]
	public void OwnerStartUnlockTimer()
	{
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0x13D9714", Offset = "0x13D9714", VA = "0x13D9714")]
	public void OwnerStopUnlockTimer()
	{
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0x13D7878", Offset = "0x13D7878", VA = "0x13D7878")]
	public void ServerProcessEvent(ResearchPointConsumerInteraction evnt)
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0x13D943C", Offset = "0x13D943C", VA = "0x13D943C")]
	private void ServerUseResearchPoints(int quantity)
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0x13D76A8", Offset = "0x13D76A8", VA = "0x13D76A8")]
	public void ServerProcessEvent(RequestUseResearchPoints requestEvent)
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0x13D7558", Offset = "0x13D7558", VA = "0x13D7558")]
	public void ProcessEvent(ResearchPointsEvent evnt)
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0x13D96C8", Offset = "0x13D96C8", VA = "0x13D96C8")]
	public void ProcessLocalEvent(ResearchPointsEvent evnt)
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0x13D9A1C", Offset = "0x13D9A1C", VA = "0x13D9A1C")]
	public void OwnerActivate()
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0x13D9B48", Offset = "0x13D9B48", VA = "0x13D9B48")]
	public void OwnerDeactivate()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0x13D9C7C", Offset = "0x13D9C7C", VA = "0x13D9C7C")]
	private void HandleAvailablePointsChanged()
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0x13D8BD8", Offset = "0x13D8BD8", VA = "0x13D8BD8")]
	private void UpdatePointsChanged(bool force = false)
	{
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0x13D70CC", Offset = "0x13D70CC", VA = "0x13D70CC")]
	public void OnActiveChanged()
	{
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0x13D7208", Offset = "0x13D7208", VA = "0x13D7208")]
	public void OnTimesUsedChanged()
	{
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0x13D720C", Offset = "0x13D720C", VA = "0x13D720C")]
	public void OnUnlockTimerChanged()
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0x13D8D3C", Offset = "0x13D8D3C", VA = "0x13D8D3C")]
	public void ApplyTexture()
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0x13D9DD8", Offset = "0x13D9DD8", VA = "0x13D9DD8")]
	public ResearchPointConsumer()
	{
	}
}
[Token(Token = "0x20001DA")]
public class ResearchPointStore : EntityEventListener<IResearchPointStoreState>
{
	[Serializable]
	[Token(Token = "0x20001DB")]
	public class PointsByDamageType
	{
		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DamageType damageType;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int points;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int headShotPoints;

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x13DAB54", Offset = "0x13DAB54", VA = "0x13DAB54")]
		public PointsByDamageType()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20001DC")]
	public class PointsAwards
	{
		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EnemyType enemyType;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int defaultPoints;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int defaultHeadShotPoints;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<PointsByDamageType> byDamageType;

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x13DAB5C", Offset = "0x13DAB5C", VA = "0x13DAB5C")]
		public PointsAwards()
		{
		}
	}

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ResearchPointStore s_instance;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnPointsChanged;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int m_numStartingPoints;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<PointsAwards> m_enemyReseacrhPoints;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameViewModel m_viewModel;

	[Token(Token = "0x1700018F")]
	public static int numPoints
	{
		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x13D9C84", Offset = "0x13D9C84", VA = "0x13D9C84")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0x13D9FDC", Offset = "0x13D9FDC", VA = "0x13D9FDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0x13DA090", Offset = "0x13DA090", VA = "0x13DA090")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0x13DA0E8", Offset = "0x13DA0E8", VA = "0x13DA0E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0x13DA19C", Offset = "0x13DA19C", VA = "0x13DA19C", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0x13DA604", Offset = "0x13DA604", VA = "0x13DA604", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0x13D97FC", Offset = "0x13D97FC", VA = "0x13D97FC")]
	public static bool Spend(int numPoints)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0x13D7C4C", Offset = "0x13D7C4C", VA = "0x13D7C4C")]
	public static bool Collect(int numPoints)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x13DA408", Offset = "0x13DA408", VA = "0x13DA408")]
	private void OnNumPointsChangedInternal()
	{
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0x13DA7EC", Offset = "0x13DA7EC", VA = "0x13DA7EC")]
	private void HandleOnDeath(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6000A71")]
	[Address(RVA = "0x13DAAB0", Offset = "0x13DAAB0", VA = "0x13DAAB0")]
	public ResearchPointStore()
	{
	}
}
[Token(Token = "0x20001DF")]
public class Gib : CachedMonoBehaviour, IPoolable
{
	[Token(Token = "0x20001E0")]
	[CompilerGenerated]
	private sealed class <ReEnablePhysics>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gib <>4__this;

		[Token(Token = "0x17000193")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A91")]
			[Address(RVA = "0x13DBE2C", Offset = "0x13DBE2C", VA = "0x13DBE2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A93")]
			[Address(RVA = "0x13DBE74", Offset = "0x13DBE74", VA = "0x13DBE74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x13DB3CC", Offset = "0x13DB3CC", VA = "0x13DB3CC")]
		[DebuggerHidden]
		public <ReEnablePhysics>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x13DBCE4", Offset = "0x13DBCE4", VA = "0x13DBCE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x13DBCE8", Offset = "0x13DBCE8", VA = "0x13DBCE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x13DBE34", Offset = "0x13DBE34", VA = "0x13DBE34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E1")]
	[CompilerGenerated]
	private sealed class <EnablePhysicsDelayed>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gib <>4__this;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 velocity;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float spinFactor;

		[Token(Token = "0x17000195")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A97")]
			[Address(RVA = "0x13DC034", Offset = "0x13DC034", VA = "0x13DC034", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0x13DC07C", Offset = "0x13DC07C", VA = "0x13DC07C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x13DB64C", Offset = "0x13DB64C", VA = "0x13DB64C")]
		[DebuggerHidden]
		public <EnablePhysicsDelayed>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x13DBE7C", Offset = "0x13DBE7C", VA = "0x13DBE7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x13DBE80", Offset = "0x13DBE80", VA = "0x13DBE80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x13DC03C", Offset = "0x13DC03C", VA = "0x13DC03C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float ignoreDuration;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[FormerlySerializedAs("effectsProfile")]
	[Header("Body Vfx")]
	public GibEffectsProfile parentVfx;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool attachParentVfxToSource;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool m_hasParentVfx;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Gib Vfx")]
	public GibEffectsProfile localVfx;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool attachLocalVfxToSource;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform localVfxRoot;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Dissolve m_dissolver;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_canPlayLocalVfx;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Header("Testing")]
	private Transform testSpawnFrom;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_enableIgnoring;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform m_defaultParent;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private IEffectInstance m_activeLocalEffect;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool m_impaled;

	[Token(Token = "0x17000190")]
	public Dissolve dissolver
	{
		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x13DAC50", Offset = "0x13DAC50", VA = "0x13DAC50")]
		set
		{
		}
	}

	[Token(Token = "0x17000191")]
	public bool Impaled
	{
		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x13DAC58", Offset = "0x13DAC58", VA = "0x13DAC58")]
		set
		{
		}
	}

	[Token(Token = "0x17000192")]
	private GameObject PT.IPoolable.gameObject
	{
		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x13DAC64", Offset = "0x13DAC64", VA = "0x13DAC64", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x13DACA4", Offset = "0x13DACA4", VA = "0x13DACA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0x13DB028", Offset = "0x13DB028", VA = "0x13DB028")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x13DB1BC", Offset = "0x13DB1BC", VA = "0x13DB1BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x13DB2FC", Offset = "0x13DB2FC", VA = "0x13DB2FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x13DB288", Offset = "0x13DB288", VA = "0x13DB288")]
	[IteratorStateMachine(typeof(<ReEnablePhysics>d__25))]
	private IEnumerator ReEnablePhysics()
	{
		return null;
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x13DB3F4", Offset = "0x13DB3F4", VA = "0x13DB3F4", Slot = "8")]
	public virtual void SpawnGib(Transform spawnTransform, Vector3 velocity, float spinFactor, bool impaled)
	{
	}

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x13DB594", Offset = "0x13DB594", VA = "0x13DB594")]
	[IteratorStateMachine(typeof(<EnablePhysicsDelayed>d__27))]
	private IEnumerator EnablePhysicsDelayed(Vector3 velocity, float spinFactor)
	{
		return null;
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x13DB674", Offset = "0x13DB674", VA = "0x13DB674", Slot = "9")]
	public virtual void ResetGib()
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x13DB720", Offset = "0x13DB720", VA = "0x13DB720")]
	private void HandleDissolveComplete()
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x13DB788", Offset = "0x13DB788", VA = "0x13DB788")]
	[ContextMenu("Test Vfx")]
	public void TestVfx()
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x13DB820", Offset = "0x13DB820", VA = "0x13DB820")]
	public void TestSpawn()
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x13DB8BC", Offset = "0x13DB8BC", VA = "0x13DB8BC")]
	public void TestReset()
	{
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0x13DB630", Offset = "0x13DB630", VA = "0x13DB630")]
	private void PlayFullVfx(Transform spawnTransform, Vector3 velocity)
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x13DBA1C", Offset = "0x13DBA1C", VA = "0x13DBA1C")]
	public void PlayParentVfx(Transform spawnTransform, Vector3 velocity, [Optional] GibEffectsProfile overrideProfile)
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0x13DBBFC", Offset = "0x13DBBFC", VA = "0x13DBBFC")]
	private void PlayChildVfx()
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0x13DBCB4", Offset = "0x13DBCB4", VA = "0x13DBCB4", Slot = "5")]
	private void PT.IPoolable.OnAllocFromPool()
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x13DBCB8", Offset = "0x13DBCB8", VA = "0x13DBCB8", Slot = "6")]
	private void PT.IPoolable.OnReturnToPool()
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x13DBCC4", Offset = "0x13DBCC4", VA = "0x13DBCC4", Slot = "7")]
	private void PT.IPoolable.OnAddedToPool()
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x13DBCC8", Offset = "0x13DBCC8", VA = "0x13DBCC8")]
	public Gib()
	{
	}
}
[Serializable]
[Token(Token = "0x20001E2")]
[CreateAssetMenu(menuName = "Cabin/Gib Creation Definition")]
public class GibCreationDefinition : ScriptableObject
{
	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> models;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public string outputPath;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public float density;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public int gibLayer;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Material gibMaterial;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public GibEffectsProfile parentVfx;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public GibEffectsProfile gibVfx;

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0x13DC084", Offset = "0x13DC084", VA = "0x13DC084")]
	public GibCreationDefinition()
	{
	}
}
[Serializable]
[Token(Token = "0x20001E3")]
public class GibDefinition : ICloneable
{
	[Serializable]
	[Token(Token = "0x20001E4")]
	public class GibGroups
	{
		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string groupIdentifier;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Gib overridenGib;

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x13DE914", Offset = "0x13DE914", VA = "0x13DE914")]
		public GibGroups(string name)
		{
		}
	}

	[Token(Token = "0x20001E6")]
	[CompilerGenerated]
	private sealed class <DetachLimbWithDelay>d__87 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GibDefinition <>4__this;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HealthStatusInfo healthStatusInfo;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool shouldSpawnGib;

		[Token(Token = "0x170001A7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0x13DEB1C", Offset = "0x13DEB1C", VA = "0x13DEB1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x13DEB64", Offset = "0x13DEB64", VA = "0x13DEB64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x13DE314", Offset = "0x13DE314", VA = "0x13DE314")]
		[DebuggerHidden]
		public <DetachLimbWithDelay>d__87(int <>1__state)
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x13DEA58", Offset = "0x13DEA58", VA = "0x13DEA58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x13DEA5C", Offset = "0x13DEA5C", VA = "0x13DEA5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x13DEB24", Offset = "0x13DEB24", VA = "0x13DEB24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E7")]
	[CompilerGenerated]
	private sealed class <DelayedScaleBoneToZero>d__89 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GibDefinition <>4__this;

		[Token(Token = "0x170001A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x13DEBEC", Offset = "0x13DEBEC", VA = "0x13DEBEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x13DEC34", Offset = "0x13DEC34", VA = "0x13DEC34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x13DE3B0", Offset = "0x13DE3B0", VA = "0x13DE3B0")]
		[DebuggerHidden]
		public <DelayedScaleBoneToZero>d__89(int <>1__state)
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x13DEB6C", Offset = "0x13DEB6C", VA = "0x13DEB6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x13DEB70", Offset = "0x13DEB70", VA = "0x13DEB70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x13DEBF4", Offset = "0x13DEBF4", VA = "0x13DEBF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Action<GibDefinition> OnLimbDetatched;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string m_limbName;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Limb m_limb;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Header("Required Data")]
	[SerializeField]
	private GibMode m_gibMode;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Killshot Gibs will only happen if the damage of the kill shot exceeds this damage threshold. Negative values = damage, positive = health.")]
	private float m_killShotThreshold;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform m_spawnTransform;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Gib m_gibPrefab;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<GibGroups> m_overridenGibs;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("The gib will only be shown if the current gore setting is at least this high.")]
	[SerializeField]
	private GoreIntensity m_requiredGoreSetting;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private bool m_scaleBoneToZero;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[FormerlySerializedAs("m_normalizedHealthThreshold")]
	[UnityEngine.Tooltip("Normalized damage value at which limb should detatch/gib.")]
	private float m_normalizedDamageThreshold;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[Header("Shot Velocity Data")]
	private bool m_applyShotVelocity;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float m_velocityScaler;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float m_velocityVariance;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Non-Shot Velocity Data")]
	[UnityEngine.Tooltip("Direction of force applied to gib when not using shot velocity.")]
	private Vector3 m_gibDirection;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float m_directionVariance;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[MinMaxRange(1f, 50f)]
	[SerializeField]
	private MinMaxRange m_gibVelocity;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float m_gibSpinFactor;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Header("Gib Reaction Data")]
	[UnityEngine.Tooltip("If ticked, make the limb explode rather than detach when shot at range and the impact point is above the threshold height set below.")]
	[SerializeField]
	private bool m_explodeWhenShotAbovePoint;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	[UnityEngine.Tooltip("If ticked, make the limb explode rather than detach when killed with melee and the impact point is above the threshold height set below.")]
	[SerializeField]
	private bool m_explodeWhenMeleedAbovePoint;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[UnityEngine.Tooltip("If the impact point is above this height, explode the gib rather than detach it. Only takes effect if one or both of the settings above are enabled.")]
	[SerializeField]
	[Min(0f)]
	private float m_explodeThresholdHeight;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[UnityEngine.Tooltip("When a limb explodes, use this effects profile for VFX instead of the normal one. Can be left null in which case we'll just use the normal one.")]
	[SerializeField]
	private GibEffectsProfile m_explodeOverrideEffects;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Optional Data")]
	[UnityEngine.Tooltip("Optional time delay to use when spawning a gib on death.")]
	[SerializeField]
	private float m_onDeathGibDelay;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[UnityEngine.Tooltip("Override limb health status, otherwise it defaults to health status on the spawn transform.")]
	[HideInInspector]
	[SerializeField]
	private HealthStatus m_limbHealthStatus;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private List<HealthStatus> m_itemsToKillWhenThisIsDestroyed;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private bool m_flipX;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private List<GameObject> m_childrenToDisable;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[UnityEngine.Tooltip("List of transforms that should cause this bone to gib when OnGibTransformHit is set. If left empty then the limb will only gib when the Spawn Transform is hit.")]
	[SerializeField]
	private List<Collider> m_gibWhenHit;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool m_limbRemoved;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 m_cachedBoneScale;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private HealthStatusReceiver_GibHelper m_gibHelper;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private List<Collider> m_spawnTransformColliders;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Transform m_ragdollTransform;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GoreIntensity m_goreIntensity;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private GameObjectGroups m_group;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Dictionary<string, Gib> m_gibPerGroup;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x17000197")]
	public List<GibGroups> OverridenGibs
	{
		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x13DC094", Offset = "0x13DC094", VA = "0x13DC094")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x13DC09C", Offset = "0x13DC09C", VA = "0x13DC09C")]
		set
		{
		}
	}

	[Token(Token = "0x17000198")]
	public Transform ragdollTransform
	{
		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x13DC0A4", Offset = "0x13DC0A4", VA = "0x13DC0A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000199")]
	public string displayName
	{
		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x13DC0AC", Offset = "0x13DC0AC", VA = "0x13DC0AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700019A")]
	public Transform spawnTransform
	{
		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x13DC0B4", Offset = "0x13DC0B4", VA = "0x13DC0B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x13DC12C", Offset = "0x13DC12C", VA = "0x13DC12C")]
		set
		{
		}
	}

	[Token(Token = "0x1700019B")]
	public Transform originalSpawnTransform
	{
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x13DC134", Offset = "0x13DC134", VA = "0x13DC134")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700019C")]
	public Gib gibPrefab
	{
		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x13DC13C", Offset = "0x13DC13C", VA = "0x13DC13C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x13DC144", Offset = "0x13DC144", VA = "0x13DC144")]
		set
		{
		}
	}

	[Token(Token = "0x1700019D")]
	public GibMode gibMode
	{
		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x13DC14C", Offset = "0x13DC14C", VA = "0x13DC14C")]
		get
		{
			return default(GibMode);
		}
		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x13DC154", Offset = "0x13DC154", VA = "0x13DC154")]
		set
		{
		}
	}

	[Token(Token = "0x1700019E")]
	public float GibDeathDelay
	{
		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x13DC15C", Offset = "0x13DC15C", VA = "0x13DC15C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x13DC164", Offset = "0x13DC164", VA = "0x13DC164")]
		set
		{
		}
	}

	[Token(Token = "0x1700019F")]
	public float Health
	{
		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x13DC16C", Offset = "0x13DC16C", VA = "0x13DC16C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x13DC2D0", Offset = "0x13DC2D0", VA = "0x13DC2D0")]
		set
		{
		}
	}

	[Token(Token = "0x170001A0")]
	public bool limbRemoved
	{
		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x13DC378", Offset = "0x13DC378", VA = "0x13DC378")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A1")]
	public MinMaxRange GibVelocity
	{
		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x13DC380", Offset = "0x13DC380", VA = "0x13DC380")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001A2")]
	public Vector3 GibDirection
	{
		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x13DC388", Offset = "0x13DC388", VA = "0x13DC388")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x13DC394", Offset = "0x13DC394", VA = "0x13DC394")]
		set
		{
		}
	}

	[Token(Token = "0x170001A3")]
	public float SpinFactor
	{
		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x13DC3A0", Offset = "0x13DC3A0", VA = "0x13DC3A0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x13DC3A8", Offset = "0x13DC3A8", VA = "0x13DC3A8")]
		set
		{
		}
	}

	[Token(Token = "0x170001A4")]
	public Limb limb
	{
		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x13DC3B0", Offset = "0x13DC3B0", VA = "0x13DC3B0")]
		get
		{
			return default(Limb);
		}
	}

	[Token(Token = "0x170001A5")]
	public GameObjectGroups Group
	{
		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x13DC3B8", Offset = "0x13DC3B8", VA = "0x13DC3B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001A6")]
	public HealthStatus LimbHealthStatus
	{
		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x13DC1F8", Offset = "0x13DC1F8", VA = "0x13DC1F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x13DC3C0", Offset = "0x13DC3C0", VA = "0x13DC3C0")]
	public GibDefinition(Transform t)
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0x13DC60C", Offset = "0x13DC60C", VA = "0x13DC60C")]
	private void SetLimb(bool force = false)
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x13DC760", Offset = "0x13DC760", VA = "0x13DC760")]
	public void Init(HealthStatusReceiver_GibHelper owner, Transform gibsParent, [Optional] GameObjectGroups group)
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0x13DCA64", Offset = "0x13DCA64", VA = "0x13DCA64")]
	private void InitGibPerGroup()
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0x13DCC58", Offset = "0x13DCC58", VA = "0x13DCC58")]
	public void RegisterResponse()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x13DCE2C", Offset = "0x13DCE2C", VA = "0x13DCE2C")]
	public void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0x13DD000", Offset = "0x13DD000", VA = "0x13DD000")]
	public void ResetGib()
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0x13DD2A8", Offset = "0x13DD2A8", VA = "0x13DD2A8")]
	private bool ShouldRemoveLimb(HealthStatusInfo healthStatusInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0x13DD5E8", Offset = "0x13DD5E8", VA = "0x13DD5E8")]
	private bool ShouldGibExplode(HealthStatusInfo healthStatusInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0x13DD69C", Offset = "0x13DD69C", VA = "0x13DD69C")]
	public void ProcessLimbLoss(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0x13DDD58", Offset = "0x13DDD58", VA = "0x13DDD58")]
	[IteratorStateMachine(typeof(<DetachLimbWithDelay>d__87))]
	private IEnumerator DetachLimbWithDelay(HealthStatusInfo healthStatusInfo, bool shouldSpawnGib, float delay)
	{
		return null;
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0x13DDE04", Offset = "0x13DDE04", VA = "0x13DDE04")]
	private void DetachLimb(HealthStatusInfo healthStatusInfo, bool shouldSpawnGib)
	{
	}

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0x13DE33C", Offset = "0x13DE33C", VA = "0x13DE33C")]
	[IteratorStateMachine(typeof(<DelayedScaleBoneToZero>d__89))]
	private IEnumerator DelayedScaleBoneToZero(Transform bone)
	{
		return null;
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0x13DD1B0", Offset = "0x13DD1B0", VA = "0x13DD1B0")]
	private void ToggleChildObjects(bool value)
	{
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x13DE3D8", Offset = "0x13DE3D8", VA = "0x13DE3D8")]
	public Gib Instantiate()
	{
		return null;
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x13DE640", Offset = "0x13DE640", VA = "0x13DE640", Slot = "4")]
	private object System.ICloneable.Clone()
	{
		return null;
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x13DE7D8", Offset = "0x13DE7D8", VA = "0x13DE7D8")]
	public void DrawGizmos()
	{
	}
}
[Token(Token = "0x20001E8")]
[CreateAssetMenu]
[SerializeField]
public class GibEffectsProfile : EffectProfile
{
	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ParticleSystem> particleVfxs;

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x13DEC3C", Offset = "0x13DEC3C", VA = "0x13DEC3C", Slot = "4")]
	protected override void Init()
	{
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x13DEE14", Offset = "0x13DEE14", VA = "0x13DEE14", Slot = "5")]
	protected override void CleanUp()
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x13DEFD8", Offset = "0x13DEFD8", VA = "0x13DEFD8", Slot = "6")]
	public override IEffectInstance Trigger(EffectData effectData)
	{
		return null;
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0x13DF108", Offset = "0x13DF108", VA = "0x13DF108")]
	public GibEffectsProfile()
	{
	}
}
[Token(Token = "0x20001E9")]
[Flags]
public enum GibMode
{
	[Token(Token = "0x40009DE")]
	OnSpawnTransformHit = 1,
	[Token(Token = "0x40009DF")]
	OnLimbCollidersHit = 2,
	[Token(Token = "0x40009E0")]
	OnAnyImpact = 4,
	[Token(Token = "0x40009E1")]
	OnLocalDeath = 8,
	[Token(Token = "0x40009E2")]
	OnRootDeath = 0x10,
	[Token(Token = "0x40009E3")]
	OnKillShot = 0x20,
	[Token(Token = "0x40009E4")]
	OnMeleeWeapon = 0x40,
	[Token(Token = "0x40009E5")]
	OnImpactReaction = 0x400,
	[Token(Token = "0x40009E6")]
	OnExplosionDeath = 0x800
}
[Token(Token = "0x20001EA")]
public enum Limb
{
	[Token(Token = "0x40009E8")]
	LeftArm = 0,
	[Token(Token = "0x40009E9")]
	RightArm = 1,
	[Token(Token = "0x40009EA")]
	LeftLeg = 2,
	[Token(Token = "0x40009EB")]
	RightLeg = 3,
	[Token(Token = "0x40009EC")]
	Torso = 4,
	[Token(Token = "0x40009ED")]
	Head = 5,
	[Token(Token = "0x40009EE")]
	Undefined = 255
}
[Serializable]
[Token(Token = "0x20001EB")]
[CreateAssetMenu(menuName = "Cabin/Location Performance Config")]
public class CabinLocationPerformanceConfig : ScriptableObject
{
	[Token(Token = "0x20001EC")]
	public enum Platform
	{
		[Token(Token = "0x40009F1")]
		Oculus_Quest2 = 0,
		[Token(Token = "0x40009F2")]
		Pico_Neo3 = 1,
		[Token(Token = "0x40009F3")]
		Windows64 = 0x20
	}

	[Serializable]
	[Token(Token = "0x20001ED")]
	public class PerPlatformConfig
	{
		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Platform m_platform;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CabinPerformanceConfig m_config;

		[Token(Token = "0x170001AB")]
		public Platform platform
		{
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0x13DF590", Offset = "0x13DF590", VA = "0x13DF590")]
			get
			{
				return default(Platform);
			}
		}

		[Token(Token = "0x170001AC")]
		public CabinPerformanceConfig config
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x13DF598", Offset = "0x13DF598", VA = "0x13DF598")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x13DF5A0", Offset = "0x13DF5A0", VA = "0x13DF5A0")]
		public PerPlatformConfig()
		{
		}
	}

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<PerPlatformConfig> m_platformConfigs;

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0x13DF160", Offset = "0x13DF160", VA = "0x13DF160")]
	public void Apply(Platform platform)
	{
	}

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0x13DF588", Offset = "0x13DF588", VA = "0x13DF588")]
	public CabinLocationPerformanceConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x20001EF")]
[CreateAssetMenu(menuName = "Cabin/Performance Config")]
public class CabinPerformanceConfig : ScriptableObject
{
	[Token(Token = "0x20001F0")]
	public enum MSAAStrength
	{
		[Token(Token = "0x4000A02")]
		Off,
		[Token(Token = "0x4000A03")]
		MSAAx2,
		[Token(Token = "0x4000A04")]
		MSAAx4,
		[Token(Token = "0x4000A05")]
		MSAAx8
	}

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string m_qualitySettingsName;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool m_enableASW;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool m_enable90Hz;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private MSAAStrength m_msaa;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int m_fixedFoviationStrength;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool m_dynamicFoviation;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_renderScale;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool m_enableSRPBatcher;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SerializeField]
	private bool m_enableSectorCulling;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CabinPerformanceConfig s_activeConfig;

	[Token(Token = "0x170001AD")]
	public static CabinPerformanceConfig activeConfig
	{
		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x13DF5CC", Offset = "0x13DF5CC", VA = "0x13DF5CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001AE")]
	public string description
	{
		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x13DF614", Offset = "0x13DF614", VA = "0x13DF614")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0x13DF61C", Offset = "0x13DF61C", VA = "0x13DF61C")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0x13DF2A4", Offset = "0x13DF2A4", VA = "0x13DF2A4")]
	public void Apply()
	{
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0x13DF670", Offset = "0x13DF670", VA = "0x13DF670")]
	public CabinPerformanceConfig()
	{
	}
}
[Token(Token = "0x20001F1")]
public class DamageMapManager : MonoBehaviour
{
	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_dynamic;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4[] m_impactPositions;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector4[] m_staticImpactPositions;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform[] m_boneTransforms;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform m_cachedTransform;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_hitCounter;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly float s_maxDistanceSqr;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_maxHitsPerObjectQuest;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int s_maxHitsPerObjectRift;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int s_maxHitsPerObject;

	[Token(Token = "0x4000A10")]
	private const string DefineKeyword = "ENABLE_DAMAGE";

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int s_impactCountID;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int s_damageDistanceFadeID;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int s_impactDamagePositionID;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector4[] m_newPositionsWS;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_transformedPoint;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool m_keywordEnabled;

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x13DF6E8", Offset = "0x13DF6E8", VA = "0x13DF6E8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0x13DF7D8", Offset = "0x13DF7D8", VA = "0x13DF7D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0x13DF844", Offset = "0x13DF844", VA = "0x13DF844")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0x13DFC78", Offset = "0x13DFC78", VA = "0x13DFC78")]
	private void CheckDistanceAndSetKeyword()
	{
	}

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0x13E00C8", Offset = "0x13E00C8", VA = "0x13E00C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0x13E01D0", Offset = "0x13E01D0", VA = "0x13E01D0")]
	private void ApplyDamage(Vector4[] positionsWS)
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0x13DF9FC", Offset = "0x13DF9FC", VA = "0x13DF9FC")]
	private void InitShaderMaterials()
	{
	}

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0x13E03A0", Offset = "0x13E03A0", VA = "0x13E03A0")]
	public void AddPoint(Transform colliderTransform, Vector4 impactPosition)
	{
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x13E0728", Offset = "0x13E0728", VA = "0x13E0728")]
	public DamageMapManager()
	{
	}
}
[Token(Token = "0x20001F2")]
public class Dissolve : Poolable
{
	[Token(Token = "0x20001F3")]
	[CompilerGenerated]
	private sealed class <PlayDelayedDissolve>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dissolve <>4__this;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timePassed>5__2;

		[Token(Token = "0x170001B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x13E230C", Offset = "0x13E230C", VA = "0x13E230C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0x13E2354", Offset = "0x13E2354", VA = "0x13E2354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x13E19E4", Offset = "0x13E19E4", VA = "0x13E19E4")]
		[DebuggerHidden]
		public <PlayDelayedDissolve>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x13E20CC", Offset = "0x13E20CC", VA = "0x13E20CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x13E20D0", Offset = "0x13E20D0", VA = "0x13E20D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x13E2314", Offset = "0x13E2314", VA = "0x13E2314", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Identifier m_identifier;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HashSet<Dissolve> s_activeDissolveInstances;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Space]
	[FormerlySerializedAs("m_timeToDissolve")]
	[SerializeField]
	private float m_DissolveTime;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float m_dissolveDelay;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Range(0f, 2f)]
	private float m_strength;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[ColorUsage(false, true)]
	[SerializeField]
	private Color m_dissolveColor;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private bool m_playOnEnable;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Texture m_dissolveTexture;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject m_disableOnDissolve;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool DisableAfterDissolve;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float m_startTime;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Color m_activeDissolveColor;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Action OnDissolveStarted;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Action OnDissolveActualStarted;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Action OnDissolveCompleted;

	[Token(Token = "0x4000A27")]
	private const float c_minRange = -0.2f;

	[Token(Token = "0x4000A28")]
	private const float c_maxRange = 1f;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool m_dissolveStarted;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	private bool m_dissolveKeywordEnabled;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected MaterialInstances m_materialInstances;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int s_toggleDissolve;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int s_dissolveTex;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int s_dissolveAmount;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int s_dissolveGlowCol;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int s_dissolveStrength;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private WorldInteraction m_worldInteraction;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private ParticleSystem m_ashParticles;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool hasParticles;

	[Token(Token = "0x4000A34")]
	private const string c_dissolveKeyword = "ENABLE_DISSOLVE";

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	private bool m_initialized;

	[Token(Token = "0x170001AF")]
	public float DissolveTime
	{
		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x13E08BC", Offset = "0x13E08BC", VA = "0x13E08BC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001B0")]
	public bool HasActiveDissolve
	{
		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x13E08C4", Offset = "0x13E08C4", VA = "0x13E08C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001B1")]
	public MaterialInstances MaterialInstances
	{
		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x13E08CC", Offset = "0x13E08CC", VA = "0x13E08CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001B2")]
	public HealthStatus HealthStatus
	{
		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x13E08D4", Offset = "0x13E08D4", VA = "0x13E08D4")]
		set
		{
		}
	}

	[Token(Token = "0x170001B3")]
	public bool PlayOnEnable
	{
		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x13E0B24", Offset = "0x13E0B24", VA = "0x13E0B24")]
		set
		{
		}
	}

	[Token(Token = "0x170001B4")]
	public bool dissolveStarted
	{
		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x13E0B30", Offset = "0x13E0B30", VA = "0x13E0B30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x13E0B38", Offset = "0x13E0B38", VA = "0x13E0B38", Slot = "11")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x13E0C1C", Offset = "0x13E0C1C", VA = "0x13E0C1C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0x13E0EFC", Offset = "0x13E0EFC", VA = "0x13E0EFC", Slot = "12")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0x13E0C20", Offset = "0x13E0C20", VA = "0x13E0C20")]
	public void Init()
	{
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0x13E0F0C", Offset = "0x13E0F0C", VA = "0x13E0F0C")]
	public void SetDissolveTexture(Texture newTexture)
	{
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0x13E1110", Offset = "0x13E1110", VA = "0x13E1110")]
	public void SetDissolveColor(Color col)
	{
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0x13E1364", Offset = "0x13E1364", VA = "0x13E1364", Slot = "13")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0x13E1468", Offset = "0x13E1468", VA = "0x13E1468")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000AFD")]
	[Address(RVA = "0x13E150C", Offset = "0x13E150C", VA = "0x13E150C")]
	public static Dissolve GetDissolverWithIdentifier(Identifier id)
	{
		return null;
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0x13E16B8", Offset = "0x13E16B8", VA = "0x13E16B8")]
	private void OnTrigger(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0x13E16C8", Offset = "0x13E16C8", VA = "0x13E16C8")]
	private static float Reciprocal(float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0x13E16F8", Offset = "0x13E16F8", VA = "0x13E16F8", Slot = "14")]
	public virtual void DisableDissolve()
	{
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0x13E18B4", Offset = "0x13E18B4", VA = "0x13E18B4", Slot = "15")]
	[ContextMenu("Play Dissolve")]
	public virtual void PlayDissolve()
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0x13E1970", Offset = "0x13E1970", VA = "0x13E1970")]
	[IteratorStateMachine(typeof(<PlayDelayedDissolve>d__56))]
	private IEnumerator PlayDelayedDissolve()
	{
		return null;
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x13E1A0C", Offset = "0x13E1A0C", VA = "0x13E1A0C")]
	public void SetDissolveAmount(float normalizedDissolvePosition)
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0x13E1D60", Offset = "0x13E1D60", VA = "0x13E1D60", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0x13E1DF0", Offset = "0x13E1DF0", VA = "0x13E1DF0", Slot = "8")]
	public override void OnAddedToPool()
	{
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x13E1F14", Offset = "0x13E1F14", VA = "0x13E1F14")]
	public Dissolve()
	{
	}
}
[Token(Token = "0x20001F4")]
public class DissolveEverything : Dissolve
{
	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Dictionary<Material, Shader> m_extraMaterialPairs;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Shader m_shader;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool m_hasShader;

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0x13E235C", Offset = "0x13E235C", VA = "0x13E235C", Slot = "11")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0x13E24C4", Offset = "0x13E24C4", VA = "0x13E24C4", Slot = "12")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0x13E262C", Offset = "0x13E262C", VA = "0x13E262C", Slot = "14")]
	public override void DisableDissolve()
	{
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0x13E27BC", Offset = "0x13E27BC", VA = "0x13E27BC")]
	private void SetExtraMaterials()
	{
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0x13E2648", Offset = "0x13E2648", VA = "0x13E2648")]
	private void ResetExtraMaterials()
	{
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0x13E2924", Offset = "0x13E2924", VA = "0x13E2924")]
	public DissolveEverything()
	{
	}
}
[Token(Token = "0x20001F5")]
public class ParticleSystemPlaybackHelper : MonoBehaviour
{
	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Agent m_agent;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem[] m_systemsToStopWhenDead;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Space]
	private Dissolve m_dissolver;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem[] m_systemsToStopWhenDissolved;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Space]
	private bool m_includeChildParticleSystems;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_playingHealthStatusSystems;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool m_playingDissolveSystems;

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0x13E29D0", Offset = "0x13E29D0", VA = "0x13E29D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0x13E29DC", Offset = "0x13E29DC", VA = "0x13E29DC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0x13E2AF4", Offset = "0x13E2AF4", VA = "0x13E2AF4")]
	private void RefreshSystems(ref ParticleSystem[] systems, bool shouldPlay)
	{
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0x13E2B84", Offset = "0x13E2B84", VA = "0x13E2B84")]
	public ParticleSystemPlaybackHelper()
	{
	}
}
[Token(Token = "0x20001F6")]
public struct EffectData
{
	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Transform source;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 direction;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool attachToSource;
}
[Token(Token = "0x20001F7")]
public abstract class EffectProfile : ScriptableObject
{
	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static EffectsManager s_effectsManager;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<EffectProfile, int> s_inUseProfiles;

	[Token(Token = "0x170001B7")]
	protected EffectsManager effectsManager
	{
		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x13E2C24", Offset = "0x13E2C24", VA = "0x13E2C24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0x13E2B94", Offset = "0x13E2B94", VA = "0x13E2B94")]
	static EffectProfile()
	{
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0x13E2D28", Offset = "0x13E2D28", VA = "0x13E2D28")]
	public void Initialise()
	{
	}

	[Token(Token = "0x6000B1B")]
	protected abstract void Init();

	[Token(Token = "0x6000B1C")]
	protected abstract void CleanUp();

	[Token(Token = "0x6000B1D")]
	public abstract IEffectInstance Trigger(EffectData data);

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0x13E2E74", Offset = "0x13E2E74", VA = "0x13E2E74", Slot = "7")]
	public virtual void Stop(IEffectInstance instance)
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0x13E2FD8", Offset = "0x13E2FD8", VA = "0x13E2FD8")]
	public void Cleanup()
	{
	}

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0x13E3154", Offset = "0x13E3154", VA = "0x13E3154")]
	protected EffectProfile()
	{
	}
}
[Token(Token = "0x20001F8")]
public class EffectsManager : CachedMonoBehaviour
{
	[Token(Token = "0x20001F9")]
	private class ParticleEffectInstance : IEffectInstance
	{
		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ParticleSystem particles;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform originalParent;

		[Token(Token = "0x170001B8")]
		private bool IEffectInstance.HasFinished
		{
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0x13E3794", Offset = "0x13E3794", VA = "0x13E3794", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x13E326C", Offset = "0x13E326C", VA = "0x13E326C")]
		public ParticleEffectInstance(ParticleSystem p)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x13E3854", Offset = "0x13E3854", VA = "0x13E3854", Slot = "4")]
		private void IEffectInstance.Start(EffectData effectData)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x13E39FC", Offset = "0x13E39FC", VA = "0x13E39FC", Slot = "6")]
		private void IEffectInstance.Stop()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x13E3A44", Offset = "0x13E3A44", VA = "0x13E3A44", Slot = "7")]
		private void IEffectInstance.Remove()
		{
		}
	}

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<IEffectInstance> m_activeEffects;

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0x13E315C", Offset = "0x13E315C", VA = "0x13E315C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0x13E31D8", Offset = "0x13E31D8", VA = "0x13E31D8")]
	public IEffectInstance StartEffect(ParticleSystem particles, EffectData effectData)
	{
		return null;
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0x13E3300", Offset = "0x13E3300", VA = "0x13E3300")]
	public IEffectInstance StartEffect(IEffectInstance effect, EffectData effectData)
	{
		return null;
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0x13E349C", Offset = "0x13E349C", VA = "0x13E349C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0x13E2EFC", Offset = "0x13E2EFC", VA = "0x13E2EFC")]
	public void Stop(IEffectInstance effect)
	{
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0x13E364C", Offset = "0x13E364C", VA = "0x13E364C")]
	public void KillEffects()
	{
	}

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0x13E3788", Offset = "0x13E3788", VA = "0x13E3788")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0x13E378C", Offset = "0x13E378C", VA = "0x13E378C")]
	public EffectsManager()
	{
	}
}
[Token(Token = "0x20001FA")]
[ExecuteAlways]
public class FlareFadeController : MonoBehaviour
{
	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float m_volumeDistance;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float m_flareDistance;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MeshRenderer[] m_volumes;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshRenderer[] m_flares;

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0x13E3B14", Offset = "0x13E3B14", VA = "0x13E3B14")]
	public FlareFadeController()
	{
	}
}
[Token(Token = "0x20001FB")]
public static class FlareManager
{
	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<FlareFadeController> s_flareFadeControllers;

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0x13E3BA0", Offset = "0x13E3BA0", VA = "0x13E3BA0")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitRuntime()
	{
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x13E3C40", Offset = "0x13E3C40", VA = "0x13E3C40")]
	private static void Update()
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x13E3C44", Offset = "0x13E3C44", VA = "0x13E3C44")]
	public static void Add(FlareFadeController flareFadeController)
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0x13E3D1C", Offset = "0x13E3D1C", VA = "0x13E3D1C")]
	public static void Remove(FlareFadeController flareFadeController)
	{
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0x13E3D9C", Offset = "0x13E3D9C", VA = "0x13E3D9C")]
	private static Vector3 GetContributionPoint()
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20001FC")]
[ExecuteInEditMode]
public class Fresnel : MonoBehaviour
{
	[Token(Token = "0x4000A51")]
	private const string c_FresnelKeyword = "FRESNEL";

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int[] s_propertyID;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private FresnelDefinition m_fresnelDefinition;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<Renderer> m_renderers;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool m_autoFindRenderersIfListIsEmpty;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject m_autoFindRoot;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public bool m_effectRequiresPerFrameUpdate;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[Header("Debug")]
	[SerializeField]
	public bool m_debug_initData_constantUpdate;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[SerializeField]
	public bool m_debug_setShaderVariables_constantUpdate;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	private bool m_updatedThisFrame;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Color m_colorPow;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector4 m_scaleCutOff;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool m_currentKeyword;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color m_currentColorPow;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector4 m_currentScaleCutOff;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MaterialInstances m_materialInstances;

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0x13E3F14", Offset = "0x13E3F14", VA = "0x13E3F14")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0x13E4274", Offset = "0x13E4274", VA = "0x13E4274")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0x13E4744", Offset = "0x13E4744", VA = "0x13E4744")]
	private void InitData(FresnelDefinition def)
	{
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0x13E47B4", Offset = "0x13E47B4", VA = "0x13E47B4")]
	public void EnableFresnel()
	{
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0x13E4C14", Offset = "0x13E4C14", VA = "0x13E4C14")]
	public void EnableFresnelWithDefinition(FresnelDefinition definition)
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0x13E4C44", Offset = "0x13E4C44", VA = "0x13E4C44")]
	public void DisableFresnel()
	{
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0x13E47DC", Offset = "0x13E47DC", VA = "0x13E47DC")]
	private void SetShaderVariables(bool value)
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0x13E4C78", Offset = "0x13E4C78", VA = "0x13E4C78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0x13E4CA8", Offset = "0x13E4CA8", VA = "0x13E4CA8")]
	public Fresnel()
	{
	}
}
[Serializable]
[Token(Token = "0x20001FD")]
public class FresnelDefinition
{
	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color color;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float power;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float cutOff;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float scale;

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0x13E4D88", Offset = "0x13E4D88", VA = "0x13E4D88")]
	public FresnelDefinition()
	{
	}
}
[Serializable]
[Token(Token = "0x20001FE")]
public class GlintController : MonoBehaviour, IPoolable
{
	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_glintAlpha;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_hoverAlpha;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int s_graspPosition;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<float> OnSetHoverAlpha;

	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<bool> OnToggleHover;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<bool> OnToggleGlint;

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0x13E4E88", Offset = "0x13E4E88", VA = "0x13E4E88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0x13E4E8C", Offset = "0x13E4E8C", VA = "0x13E4E8C")]
	private List<Material> getMaterials()
	{
		return null;
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0x13E4F00", Offset = "0x13E4F00", VA = "0x13E4F00", Slot = "5")]
	private void PT.IPoolable.OnAllocFromPool()
	{
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0x13E4F04", Offset = "0x13E4F04", VA = "0x13E4F04", Slot = "6")]
	private void PT.IPoolable.OnReturnToPool()
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0x13E4F08", Offset = "0x13E4F08", VA = "0x13E4F08", Slot = "7")]
	private void PT.IPoolable.OnAddedToPool()
	{
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0x13E4F0C", Offset = "0x13E4F0C", VA = "0x13E4F0C")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0x13E4F10", Offset = "0x13E4F10", VA = "0x13E4F10")]
	public void SetGraspPosition(Vector3 graspPosition)
	{
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0x13E50CC", Offset = "0x13E50CC", VA = "0x13E50CC")]
	public void SetHoverAlpha(float alpha)
	{
	}

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0x13E529C", Offset = "0x13E529C", VA = "0x13E529C")]
	public void ToggleHover(bool isEnabled)
	{
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0x13E547C", Offset = "0x13E547C", VA = "0x13E547C")]
	public void ToggleGlint(bool isEnabled)
	{
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0x13E565C", Offset = "0x13E565C", VA = "0x13E565C")]
	public GlintController()
	{
	}

	[SpecialName]
	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0x13E572C", Offset = "0x13E572C", VA = "0x13E572C", Slot = "4")]
	private GameObject PT.IPoolable.get_gameObject()
	{
		return null;
	}
}
[Token(Token = "0x20001FF")]
[ExecuteInEditMode]
public class Hologram : MonoBehaviour
{
	[Token(Token = "0x2000200")]
	[CompilerGenerated]
	private sealed class <PlayEnable>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hologram <>4__this;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <end>5__2;

		[Token(Token = "0x170001B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x13E6180", Offset = "0x13E6180", VA = "0x13E6180", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0x13E61C8", Offset = "0x13E61C8", VA = "0x13E61C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x13E5C68", Offset = "0x13E5C68", VA = "0x13E5C68")]
		[DebuggerHidden]
		public <PlayEnable>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x13E6054", Offset = "0x13E6054", VA = "0x13E6054", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x13E6058", Offset = "0x13E6058", VA = "0x13E6058", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x13E6188", Offset = "0x13E6188", VA = "0x13E6188", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000201")]
	[CompilerGenerated]
	private sealed class <PlayDisable>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hologram <>4__this;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <end>5__2;

		[Token(Token = "0x170001BB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0x13E62C8", Offset = "0x13E62C8", VA = "0x13E62C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0x13E6310", Offset = "0x13E6310", VA = "0x13E6310", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x13E5C90", Offset = "0x13E5C90", VA = "0x13E5C90")]
		[DebuggerHidden]
		public <PlayDisable>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x13E61D0", Offset = "0x13E61D0", VA = "0x13E61D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x13E61D4", Offset = "0x13E61D4", VA = "0x13E61D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x13E62D0", Offset = "0x13E62D0", VA = "0x13E62D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color mainColor;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color fresnelColor;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve m_collapseCurve;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material[] m_materials;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string s_shaderName;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_show;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int s_Collapse;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int s_MainColor;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int s_FresnelColor;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_collapse;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_timePassed;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine m_coroutine;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_previousCollapse;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Color m_previousMainColor;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Color m_previousFresnelColor;

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0x13E5734", Offset = "0x13E5734", VA = "0x13E5734")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0x13E5AD8", Offset = "0x13E5AD8", VA = "0x13E5AD8")]
	public void StartHologram()
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0x13E5BA0", Offset = "0x13E5BA0", VA = "0x13E5BA0")]
	public void StopHologram()
	{
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0x13E5B2C", Offset = "0x13E5B2C", VA = "0x13E5B2C")]
	[IteratorStateMachine(typeof(<PlayEnable>d__18))]
	private IEnumerator PlayEnable()
	{
		return null;
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0x13E5BF4", Offset = "0x13E5BF4", VA = "0x13E5BF4")]
	[IteratorStateMachine(typeof(<PlayDisable>d__19))]
	private IEnumerator PlayDisable()
	{
		return null;
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0x13E5CB8", Offset = "0x13E5CB8", VA = "0x13E5CB8")]
	private bool CollapseChanged()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0x13E5CF8", Offset = "0x13E5CF8", VA = "0x13E5CF8")]
	private bool ColorsChanged()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0x13E5D88", Offset = "0x13E5D88", VA = "0x13E5D88")]
	public void ForceUpdate()
	{
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0x13E5D8C", Offset = "0x13E5D8C", VA = "0x13E5D8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0x13E5F48", Offset = "0x13E5F48", VA = "0x13E5F48")]
	public Hologram()
	{
	}
}
[Token(Token = "0x2000202")]
public interface IEffectInstance
{
	[Token(Token = "0x170001BD")]
	bool HasFinished
	{
		[Token(Token = "0x6000B65")]
		get;
	}

	[Token(Token = "0x6000B64")]
	void Start(EffectData effectData);

	[Token(Token = "0x6000B66")]
	void Stop();

	[Token(Token = "0x6000B67")]
	void Remove();
}
[Token(Token = "0x2000203")]
public class LaserBeamController : MonoBehaviour
{
	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 m_startPoint;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Vector3 m_endPoint;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_maxLength;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LineRenderer m_lineRenderer;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MeshRenderer m_flareRenderer;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_flareTransform;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_length;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_layerMask;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MaterialPropertyBlock m_mpb;

	[Token(Token = "0x170001BE")]
	private MaterialPropertyBlock m_materialPropertyBlock
	{
		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x13E6318", Offset = "0x13E6318", VA = "0x13E6318")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0x13E6390", Offset = "0x13E6390", VA = "0x13E6390")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x13E6440", Offset = "0x13E6440", VA = "0x13E6440")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x13E656C", Offset = "0x13E656C", VA = "0x13E656C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x13E6640", Offset = "0x13E6640", VA = "0x13E6640")]
	public void UpdateBeam()
	{
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0x13E6874", Offset = "0x13E6874", VA = "0x13E6874")]
	private Vector3 GetBeamDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0x13E6A2C", Offset = "0x13E6A2C", VA = "0x13E6A2C")]
	public void ToggleRenderers(bool forceRenderingOff)
	{
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0x13E6988", Offset = "0x13E6988", VA = "0x13E6988")]
	private void UpdatePositions()
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0x13E68DC", Offset = "0x13E68DC", VA = "0x13E68DC")]
	private void UpdateLength(float length)
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0x13E6A70", Offset = "0x13E6A70", VA = "0x13E6A70")]
	public LaserBeamController()
	{
	}
}
[Token(Token = "0x2000204")]
public static class LaserBeamManager
{
	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<LaserBeamController> s_laserBeamControllers;

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0x13E6AEC", Offset = "0x13E6AEC", VA = "0x13E6AEC")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitRuntime()
	{
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0x13E6B8C", Offset = "0x13E6B8C", VA = "0x13E6B8C")]
	private static void Update()
	{
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0x13E6494", Offset = "0x13E6494", VA = "0x13E6494")]
	public static void Add(LaserBeamController laserBeamController)
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0x13E65C0", Offset = "0x13E65C0", VA = "0x13E65C0")]
	public static void Remove(LaserBeamController laserBeamController)
	{
	}
}
[Token(Token = "0x2000205")]
[DisallowMultipleComponent]
public class MaterialInstances : MonoBehaviour
{
	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<GameObject, MaterialInstances> s_instances;

	[NonSerialized]
	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Material> m_materials;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<Material, Material> m_objectUniqueMaterials;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Renderer, Material[]> m_originalMaterials;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<Renderer, Material[]> m_instancedMaterials;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_usingInstanced;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int s_count;

	[Token(Token = "0x170001BF")]
	public List<Material> materials
	{
		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x13E4C4C", Offset = "0x13E4C4C", VA = "0x13E4C4C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C0")]
	public List<Material> instancedMaterials
	{
		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x13E7030", Offset = "0x13E7030", VA = "0x13E7030")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C1")]
	private bool Initialised
	{
		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x13E7038", Offset = "0x13E7038", VA = "0x13E7038")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0x13E6D94", Offset = "0x13E6D94", VA = "0x13E6D94")]
	static MaterialInstances()
	{
	}

	[Token(Token = "0x6000B79")]
	private static bool GetRootObjectOfType<T>(GameObject owner, out GameObject parent) where T : UnityEngine.Component
	{
		return default(bool);
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0x13E40C4", Offset = "0x13E40C4", VA = "0x13E40C4")]
	public static MaterialInstances Get(GameObject owner)
	{
		return null;
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0x13E7050", Offset = "0x13E7050", VA = "0x13E7050")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0x13E7144", Offset = "0x13E7144", VA = "0x13E7144")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0x13E7148", Offset = "0x13E7148", VA = "0x13E7148")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0x13E429C", Offset = "0x13E429C", VA = "0x13E429C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0x13E75C8", Offset = "0x13E75C8", VA = "0x13E75C8")]
	public void SetPropertyBlock(MaterialPropertyBlock propertyBlock)
	{
	}

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0x13E6E2C", Offset = "0x13E6E2C", VA = "0x13E6E2C")]
	[ContextMenu("Use Instanced Materials")]
	public void UseInstancedMaterials()
	{
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0x13E714C", Offset = "0x13E714C", VA = "0x13E714C")]
	[ContextMenu("Use Original Materials")]
	public void RestoreMaterials()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0x13E7348", Offset = "0x13E7348", VA = "0x13E7348")]
	private void CreateMaterialInstances(Renderer rend)
	{
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0x13E79F4", Offset = "0x13E79F4", VA = "0x13E79F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0x13E7764", Offset = "0x13E7764", VA = "0x13E7764")]
	private Material GetInstance(Material mat)
	{
		return null;
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x13E7B10", Offset = "0x13E7B10", VA = "0x13E7B10")]
	public List<Material> Get(params string[] properties)
	{
		return null;
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x13E7D84", Offset = "0x13E7D84", VA = "0x13E7D84")]
	public List<Material> Get(List<Renderer> renderers)
	{
		return null;
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x13E802C", Offset = "0x13E802C", VA = "0x13E802C")]
	public List<Material> Get(Renderer renderer)
	{
		return null;
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x13E8194", Offset = "0x13E8194", VA = "0x13E8194")]
	public List<Material> Get(LODGroup lodGroup)
	{
		return null;
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x13E834C", Offset = "0x13E834C", VA = "0x13E834C")]
	public void SetMaterial(Material originalMaterial, Material material)
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x13E86B8", Offset = "0x13E86B8", VA = "0x13E86B8")]
	public MaterialInstances()
	{
	}
}
[Token(Token = "0x2000206")]
public class ParticleSystemAutoReturnToPool : MonoBehaviour
{
	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem m_particleSystem;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_delay;

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x13E86C0", Offset = "0x13E86C0", VA = "0x13E86C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0x13E8718", Offset = "0x13E8718", VA = "0x13E8718")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0x13E8724", Offset = "0x13E8724", VA = "0x13E8724")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0x13E8818", Offset = "0x13E8818", VA = "0x13E8818")]
	public ParticleSystemAutoReturnToPool()
	{
	}
}
[Token(Token = "0x2000207")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshRenderer))]
public class PlayerShadowHandler : MonoBehaviour
{
	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int ShadowSphereTransformations;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MaterialPropertyBlock m_materialPropertyBlock;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshRenderer m_meshRenderer;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Matrix4x4[] m_Transforms;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<Transform> m_shadowSphereTransforms;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool m_visualize;

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0x13E8820", Offset = "0x13E8820", VA = "0x13E8820")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0x13E8920", Offset = "0x13E8920", VA = "0x13E8920")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x13E89E0", Offset = "0x13E89E0", VA = "0x13E89E0")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x13E8BD0", Offset = "0x13E8BD0", VA = "0x13E8BD0")]
	public void ToggleShadows(bool active)
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x13E8BF8", Offset = "0x13E8BF8", VA = "0x13E8BF8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x13E8DD8", Offset = "0x13E8DD8", VA = "0x13E8DD8")]
	public PlayerShadowHandler()
	{
	}
}
[Token(Token = "0x2000208")]
[ExecuteInEditMode]
public class PowerSwordAnimationClipIntensity : MonoBehaviour
{
	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float intensity;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_previousIntensity;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_emissiveFactor;

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x13E8EC8", Offset = "0x13E8EC8", VA = "0x13E8EC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0x13E8F30", Offset = "0x13E8F30", VA = "0x13E8F30")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0x13E8FA4", Offset = "0x13E8FA4", VA = "0x13E8FA4")]
	private bool ValueChanged()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0x13E8FE0", Offset = "0x13E8FE0", VA = "0x13E8FE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0x13E91D0", Offset = "0x13E91D0", VA = "0x13E91D0")]
	public PowerSwordAnimationClipIntensity()
	{
	}
}
[Token(Token = "0x2000209")]
[ExecuteInEditMode]
public class ScrollUvs : MonoBehaviour
{
	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material m_material;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool m_useScrollingUvs;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Vector2 m_speed;

	[Token(Token = "0x4000AA1")]
	private const string c_scrollUV = "_SCROLL_UV";

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_uvXOffset;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_uvYOffset;

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0x13E9240", Offset = "0x13E9240", VA = "0x13E9240")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0x13E9244", Offset = "0x13E9244", VA = "0x13E9244")]
	private void Init()
	{
	}

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0x13E92C4", Offset = "0x13E92C4", VA = "0x13E92C4")]
	private void EnableScrolling()
	{
	}

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0x13E9308", Offset = "0x13E9308", VA = "0x13E9308")]
	private void DisableScrolling()
	{
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0x13E934C", Offset = "0x13E934C", VA = "0x13E934C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0x13E943C", Offset = "0x13E943C", VA = "0x13E943C")]
	public ScrollUvs()
	{
	}
}
[Token(Token = "0x200020A")]
public class SwitchImagePeriodically : MonoBehaviour
{
	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("List of sprites to be displayed")]
	[SerializeField]
	private Sprite[] m_sprites;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("the in-game image used to display")]
	[SerializeField]
	private Image m_image;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Min(1f)]
	[UnityEngine.Tooltip("time an image will be displayed before switching with another image")]
	[SerializeField]
	private float m_periodTime;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int m_currentIndex;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_nextUpdate;

	[Token(Token = "0x6000BA6")]
	[Address(RVA = "0x13E9530", Offset = "0x13E9530", VA = "0x13E9530")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0x13E9584", Offset = "0x13E9584", VA = "0x13E9584")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0x13E9620", Offset = "0x13E9620", VA = "0x13E9620")]
	public SwitchImagePeriodically()
	{
	}
}
[Token(Token = "0x200020B")]
[RequireComponent(typeof(MeshFilter))]
public class SwitchTextureArrayIndexPeriodically : MonoBehaviour
{
	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Time before the array index is incremented.")]
	[Min(1f)]
	private float m_periodTime;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Min(1f)]
	[SerializeField]
	[UnityEngine.Tooltip("Time before the array index is incremented.")]
	private int m_maxIndex;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_currentIndex;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_nextUpdate;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshFilter m_meshFilter;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Vector3> m_tempVec3;

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0x13E9628", Offset = "0x13E9628", VA = "0x13E9628")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0x13E969C", Offset = "0x13E969C", VA = "0x13E969C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0x13E97E8", Offset = "0x13E97E8", VA = "0x13E97E8")]
	public SwitchTextureArrayIndexPeriodically()
	{
	}
}
[Token(Token = "0x200020C")]
public class ShaderControlAsset : PlayableAsset
{
	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Value;

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x13E987C", Offset = "0x13E987C", VA = "0x13E987C", Slot = "6")]
	public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x13E9968", Offset = "0x13E9968", VA = "0x13E9968")]
	public ShaderControlAsset()
	{
	}
}
[Token(Token = "0x200020D")]
public class ShaderMixer : PlayableBehaviour
{
	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string PropertyName;

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x13E9970", Offset = "0x13E9970", VA = "0x13E9970", Slot = "20")]
	public override void ProcessFrame(Playable playable, FrameData info, object playerData)
	{
	}

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0x13E9B8C", Offset = "0x13E9B8C", VA = "0x13E9B8C")]
	public ShaderMixer()
	{
	}
}
[Token(Token = "0x200020E")]
public class ShaderPlayable : PlayableBehaviour
{
	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float Value;

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0x13E9B94", Offset = "0x13E9B94", VA = "0x13E9B94")]
	public ShaderPlayable()
	{
	}
}
[Token(Token = "0x200020F")]
[TrackClipType(typeof(ShaderControlAsset))]
[TrackBindingType(typeof(CanvasRenderer))]
public class ShaderTrack : TrackAsset
{
	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[HideInInspector]
	public string PropertyName;

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0x13E9B9C", Offset = "0x13E9B9C", VA = "0x13E9B9C", Slot = "24")]
	public override Playable CreateTrackMixer(PlayableGraph graph, GameObject gameObject, int inputCount)
	{
		return default(Playable);
	}

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0x13E9C98", Offset = "0x13E9C98", VA = "0x13E9C98")]
	public ShaderTrack()
	{
	}
}
[Token(Token = "0x2000210")]
public class VertexStreamManager : MonoBehaviour
{
	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0x13E9CF0", Offset = "0x13E9CF0", VA = "0x13E9CF0")]
	public VertexStreamManager()
	{
	}
}
[Token(Token = "0x2000211")]
public class GraphicHelpers : MonoBehaviour
{
	[Token(Token = "0x2000212")]
	public class state_LoadWarmUpSceneDecision : NestedStateBehavior<GraphicHelpers>
	{
		[Token(Token = "0x2000213")]
		private enum WarmUpMethod
		{
			[Token(Token = "0x4000AED")]
			BruteForce,
			[Token(Token = "0x4000AEE")]
			Experimental,
			[Token(Token = "0x4000AEF")]
			Legacy,
			[Token(Token = "0x4000AF0")]
			Skip
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x13EFD3C", Offset = "0x13EFD3C", VA = "0x13EFD3C", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x13EFF70", Offset = "0x13EFF70", VA = "0x13EFF70", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x13EFFC8", Offset = "0x13EFFC8", VA = "0x13EFFC8")]
		public state_LoadWarmUpSceneDecision()
		{
		}
	}

	[Token(Token = "0x2000214")]
	[CompilerGenerated]
	private sealed class <CleanUp>d__71 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170001C4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BED")]
			[Address(RVA = "0x13F006C", Offset = "0x13F006C", VA = "0x13F006C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0x13F00B4", Offset = "0x13F00B4", VA = "0x13F00B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x13EE0EC", Offset = "0x13EE0EC", VA = "0x13EE0EC")]
		[DebuggerHidden]
		public <CleanUp>d__71(int <>1__state)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x13F0010", Offset = "0x13F0010", VA = "0x13F0010", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x13F0014", Offset = "0x13F0014", VA = "0x13F0014", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x13F0074", Offset = "0x13F0074", VA = "0x13F0074", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AB3")]
	public const string c_enableASWKey = "playerPrefs_enableASW";

	[Token(Token = "0x4000AB4")]
	public const string c_enable90 = "playerPrefs_enable90";

	[Token(Token = "0x4000AB5")]
	public const string c_disableShader = "playerPrefs_disableShader";

	[Token(Token = "0x4000AB6")]
	public const string c_xrRenderScale = "playerPrefs_xrRenderScale";

	[Token(Token = "0x4000AB7")]
	public const string c_enableSRPBatcher = "playerPrefs_enableSRPBatcher";

	[Token(Token = "0x4000AB8")]
	public const string c_enableSectorCulling = "playerPrefs_enableSectorCulling";

	[Token(Token = "0x4000AB9")]
	public const string c_enableHitEffects = "playerPrefs_enableHitEffects";

	[Token(Token = "0x4000ABA")]
	public const string c_enableNewLevelLoading = "playerPrefs_enableNewLevelLoading";

	[Token(Token = "0x4000ABB")]
	public const string c_bruteForceMethod = "playerPrefs_bruteForceMethod";

	[Token(Token = "0x4000ABC")]
	public const string c_warmUpMethod = "playerPrefs_warmUpMethod";

	[Token(Token = "0x4000ABD")]
	public const string c_usePunch = "playerPrefs_usePunch";

	[Token(Token = "0x4000ABE")]
	public const string c_enableLag = "playerPrefs_enableLag";

	[Token(Token = "0x4000ABF")]
	public const string c_networkLag = "playerPrefs_networkLag";

	[Token(Token = "0x4000AC0")]
	public const string c_usePathJobs = "playerPrefs_UsePathJobs";

	[Token(Token = "0x4000AC1")]
	public const string c_useJobDistanceCalculator = "playerPrefs_useJobDistanceCalculator";

	[Token(Token = "0x4000AC2")]
	public const string c_disableSplats = "playerPrefs_disableSplats";

	[Token(Token = "0x4000AC3")]
	public const string c_disableFlares = "playerPrefs_disableFlares";

	[Token(Token = "0x4000AC4")]
	public const string c_enableFrontBackSort = "playerPrefs_enableFrontBackSort";

	[Token(Token = "0x4000AC5")]
	public const string c_enableDebugObjects = "playerPrefs_enableDebugObjects";

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameSettings.BoolSetting m_hideHands;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameSettings.IntSetting m_numLights;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameSettings.BoolSetting m_urpPBR;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameSettings.IntSetting m_disableShader;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameSettings.IntSetting m_enableOnlyShader;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameSettings.IntSetting m_disableMaterial;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameSettings.BoolSetting m_disableParticles;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameSettings.BoolSetting m_enableASW;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameSettings.BoolSetting m_enable90;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameSettings.BoolSetting m_enableSRPBatcher;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameSettings.BoolSetting m_enableSectorCulling;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameSettings.BoolSetting m_enableHitEffects;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameSettings.BoolSetting m_enableWarmUpScene;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameSettings.BoolSetting m_enableNewLevelLoading;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameSettings.IntSetting m_bruteForcepMethod;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameSettings.IntSetting m_warmUpMethod;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GameSettings.FloatSetting m_xrRenderScale;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GameSettings.BoolSetting m_usePunch;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameSettings.BoolSetting m_enableLag;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameSettings.IntSetting m_networkLag;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameSettings.BoolSetting m_usePathJobs;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private GameSettings.BoolSetting m_useJobDistanceCalculator;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameSettings.BoolSetting m_disableSplats;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameSettings.BoolSetting m_disableFlares;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private GameSettings.BoolSetting m_enableFrontBackSort;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private GameSettings.BoolSetting m_enableDebugObjects;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private List<GuidReference> m_chimneyReference;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private UniversalRenderPipelineAsset m_renderPipeline;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private ShaderList m_usedShaders;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private ProfilingViewModel m_profilingVM;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private List<Renderer> m_disabledRenderers;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private List<Material> m_windMaterials;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private GameObject m_debugPanelPrefab;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[UnityEngine.Tooltip("Debug game object to enable, i.e. some extra guns etc.")]
	[SerializeField]
	private GuidReference m_debugGameObject;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private GameObject m_debugPanel;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private List<GameObject> m_disabledFlares;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private List<GameObject> m_disabledSplats;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Renderer[] m_renderers;

	[Token(Token = "0x170001C2")]
	public List<Material> WindMaterials
	{
		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x13E9CF8", Offset = "0x13E9CF8", VA = "0x13E9CF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C3")]
	public static int fixedUpdateFramesPerSecond
	{
		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x13E9D00", Offset = "0x13E9D00", VA = "0x13E9D00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0x13E9D08", Offset = "0x13E9D08", VA = "0x13E9D08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0x13EAB48", Offset = "0x13EAB48", VA = "0x13EAB48")]
	public void Start()
	{
	}

	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0x13EC4E8", Offset = "0x13EC4E8", VA = "0x13EC4E8")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0x13ED99C", Offset = "0x13ED99C", VA = "0x13ED99C")]
	private void HandleLevelReset()
	{
	}

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0x13EDB78", Offset = "0x13EDB78", VA = "0x13EDB78")]
	private void HandleEnableDebugObjects()
	{
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0x13EDFD4", Offset = "0x13EDFD4", VA = "0x13EDFD4")]
	private void HandlePunchChanged()
	{
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0x13EE088", Offset = "0x13EE088", VA = "0x13EE088")]
	private void HandleLagChanged()
	{
	}

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0x13EC428", Offset = "0x13EC428", VA = "0x13EC428")]
	private void HandleJobDistanceCalculator()
	{
	}

	[Token(Token = "0x6000BBE")]
	[Address(RVA = "0x13EC1B8", Offset = "0x13EC1B8", VA = "0x13EC1B8")]
	public static void SetShaderMode()
	{
	}

	[Token(Token = "0x6000BBF")]
	[Address(RVA = "0x13EC2E4", Offset = "0x13EC2E4", VA = "0x13EC2E4")]
	public static void SetShadowMode()
	{
	}

	[Token(Token = "0x6000BC0")]
	[Address(RVA = "0x13EC070", Offset = "0x13EC070", VA = "0x13EC070")]
	private void OnChangeResolutionDPI()
	{
	}

	[Token(Token = "0x6000BC1")]
	[Address(RVA = "0x13EE08C", Offset = "0x13EE08C", VA = "0x13EE08C")]
	[IteratorStateMachine(typeof(<CleanUp>d__71))]
	private IEnumerator CleanUp()
	{
		return null;
	}

	[Token(Token = "0x6000BC2")]
	[Address(RVA = "0x13EE114", Offset = "0x13EE114", VA = "0x13EE114")]
	private void OnChangeXRTextureResolutionScale()
	{
	}

	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x13EE16C", Offset = "0x13EE16C", VA = "0x13EE16C")]
	private void OnChangeDynamicResolutionScaling()
	{
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x13EE170", Offset = "0x13EE170", VA = "0x13EE170")]
	private void OnChangeAntiAliasing()
	{
	}

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x13EE280", Offset = "0x13EE280", VA = "0x13EE280")]
	private void OnDisableFireplaceChanged()
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x13EE4A4", Offset = "0x13EE4A4", VA = "0x13EE4A4")]
	private void HandleNumLightsChanged()
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x13EE550", Offset = "0x13EE550", VA = "0x13EE550")]
	private void OnChangeFoveationStrength()
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x13EE5D4", Offset = "0x13EE5D4", VA = "0x13EE5D4")]
	private void OnChangeDynamicFoviation()
	{
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x13EE5D8", Offset = "0x13EE5D8", VA = "0x13EE5D8")]
	private void HandleUrpPBRValueChanged()
	{
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x13ED9C4", Offset = "0x13ED9C4", VA = "0x13ED9C4")]
	private void HandleDisableShaderValueChanged()
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0x13EE7E4", Offset = "0x13EE7E4", VA = "0x13EE7E4")]
	private void HandleEnableOnlyShaderChanged()
	{
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0x13EE664", Offset = "0x13EE664", VA = "0x13EE664")]
	private bool SetRendererStates(int index, bool mode)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0x13EEC20", Offset = "0x13EEC20", VA = "0x13EEC20")]
	private void HandleDisableMaterialChanged()
	{
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0x13EDA54", Offset = "0x13EDA54", VA = "0x13EDA54")]
	private void HandleDisableFlares()
	{
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0x13EDADC", Offset = "0x13EDADC", VA = "0x13EDADC")]
	private void HandleDisableSplats()
	{
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0x13EEDB0", Offset = "0x13EEDB0", VA = "0x13EEDB0")]
	private void Enable(List<GameObject> disabledList)
	{
	}

	[Token(Token = "0x6000BD1")]
	private void Disable<T>(List<GameObject> disabledList, [Optional] string name) where T : UnityEngine.Component
	{
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0x13EEF88", Offset = "0x13EEF88", VA = "0x13EEF88")]
	private void HandleCameraSort()
	{
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0x13EC2EC", Offset = "0x13EC2EC", VA = "0x13EC2EC")]
	private void HandleASWChanged()
	{
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0x13EC39C", Offset = "0x13EC39C", VA = "0x13EC39C")]
	private void HandleEnable90Changed()
	{
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0x13EF048", Offset = "0x13EF048", VA = "0x13EF048")]
	private void HandleEnableSRPBatcherChanged()
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0x13EEA60", Offset = "0x13EEA60", VA = "0x13EEA60")]
	private void ProcessRenderers(Action<Renderer, Material> callback)
	{
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0x13EE87C", Offset = "0x13EE87C", VA = "0x13EE87C")]
	private void EnableAllDisabledRenderers()
	{
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0x13EF0A4", Offset = "0x13EF0A4", VA = "0x13EF0A4")]
	private void HandleDisableParticlesChanged()
	{
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0x13EF1AC", Offset = "0x13EF1AC", VA = "0x13EF1AC")]
	private void OnChangeStaticShaderOptimizations()
	{
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0x13EF264", Offset = "0x13EF264", VA = "0x13EF264")]
	private void OnChangeTerrainShaderOptimizations()
	{
	}

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0x13EF31C", Offset = "0x13EF31C", VA = "0x13EF31C")]
	private void OnStopDrawing()
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0x13EF4C0", Offset = "0x13EF4C0", VA = "0x13EF4C0")]
	private void EnableShaderPerformanceChanged()
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0x13EF574", Offset = "0x13EF574", VA = "0x13EF574")]
	private void EnableShaderAlbedoOnlyChanged()
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x13EF6C0", Offset = "0x13EF6C0", VA = "0x13EF6C0")]
	private void EnableWindChanged()
	{
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0x13EF774", Offset = "0x13EF774", VA = "0x13EF774")]
	private void EnableColorCorrectionChanged()
	{
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0x13EF828", Offset = "0x13EF828", VA = "0x13EF828")]
	private void EnableDitheringChanged()
	{
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0x13EF8DC", Offset = "0x13EF8DC", VA = "0x13EF8DC")]
	private void EnableTetrahedralizeChanged()
	{
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0x13EF990", Offset = "0x13EF990", VA = "0x13EF990")]
	private void BackgroundLoadingPriorityChanged()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0x13EFA10", Offset = "0x13EFA10", VA = "0x13EFA10")]
	private void OnHideHandsChanged()
	{
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0x13EFA68", Offset = "0x13EFA68", VA = "0x13EFA68")]
	public void HideHands(bool hide)
	{
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0x13EFBE0", Offset = "0x13EFBE0", VA = "0x13EFBE0")]
	public static void SetQualitySettings(string name)
	{
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0x13EFC84", Offset = "0x13EFC84", VA = "0x13EFC84")]
	public GraphicHelpers()
	{
	}
}
[Token(Token = "0x2000217")]
[ExecuteInEditMode]
public class ReflectionProbeTest : MonoBehaviour
{
	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector4[] bounds;

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0x13F0378", Offset = "0x13F0378", VA = "0x13F0378")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0x13F04E8", Offset = "0x13F04E8", VA = "0x13F04E8")]
	public ReflectionProbeTest()
	{
	}
}
[Token(Token = "0x2000218")]
[DisallowMultipleComponent]
public class RenderQueueParent : MonoBehaviour
{
	[Token(Token = "0x2000219")]
	public enum PresetRenderQueue
	{
		[Token(Token = "0x4000AFC")]
		HeldObjects,
		[Token(Token = "0x4000AFD")]
		PlayerHandsAndBody,
		[Token(Token = "0x4000AFE")]
		SetDecor,
		[Token(Token = "0x4000AFF")]
		MergedEnvironment,
		[Token(Token = "0x4000B00")]
		Skybox
	}

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PresetRenderQueue m_targetRenderQueue;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool m_dontCheckTransparentQueues;

	[Token(Token = "0x170001C6")]
	public PresetRenderQueue TargetRenderQueue
	{
		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x13F054C", Offset = "0x13F054C", VA = "0x13F054C")]
		get
		{
			return default(PresetRenderQueue);
		}
	}

	[Token(Token = "0x170001C7")]
	public bool DontCheckTransparentQueues
	{
		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x13F0554", Offset = "0x13F0554", VA = "0x13F0554")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0x13F055C", Offset = "0x13F055C", VA = "0x13F055C")]
	public RenderQueueParent()
	{
	}
}
[Serializable]
[Token(Token = "0x200021A")]
[CreateAssetMenu(menuName = "Cabin/Graphics/Shader Vertex Attribute Data")]
public class ShaderVertexAttributeDataCollection : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x200021B")]
	public struct SerializableVertexAttributeDescriptor : IEquatable<SerializableVertexAttributeDescriptor>
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VertexAttribute attribute;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VertexAttributeFormat format;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int dimension;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int stream;

		[Token(Token = "0x170001CB")]
		public VertexAttributeDescriptor descriptor
		{
			[Token(Token = "0x6000C04")]
			[Address(RVA = "0x13F1F44", Offset = "0x13F1F44", VA = "0x13F1F44")]
			get
			{
				return default(VertexAttributeDescriptor);
			}
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x13F1F74", Offset = "0x13F1F74", VA = "0x13F1F74", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x13F1FFC", Offset = "0x13F1FFC", VA = "0x13F1FFC", Slot = "4")]
		public bool Equals(SerializableVertexAttributeDescriptor other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x13F2084", Offset = "0x13F2084", VA = "0x13F2084", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x13F20C4", Offset = "0x13F20C4", VA = "0x13F20C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x13F2104", Offset = "0x13F2104", VA = "0x13F2104")]
		public static bool operator ==(SerializableVertexAttributeDescriptor lhs, SerializableVertexAttributeDescriptor rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x13F219C", Offset = "0x13F219C", VA = "0x13F219C")]
		public static bool operator !=(SerializableVertexAttributeDescriptor lhs, SerializableVertexAttributeDescriptor rhs)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x200021C")]
	public class VertexAttributeSchema
	{
		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<SerializableVertexAttributeDescriptor> m_attributes;

		[Token(Token = "0x170001CC")]
		public List<SerializableVertexAttributeDescriptor> attributes
		{
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0x13F2234", Offset = "0x13F2234", VA = "0x13F2234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		public VertexAttributeDescriptor[] vdecl
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0x13F0914", Offset = "0x13F0914", VA = "0x13F0914")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x13F142C", Offset = "0x13F142C", VA = "0x13F142C")]
		public VertexAttributeSchema(List<VertexAttributeDescriptor> _attributes)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x13F223C", Offset = "0x13F223C", VA = "0x13F223C")]
		public bool CompareWith(VertexAttributeSchema otherSchema)
		{
			return default(bool);
		}
	}

	[Serializable]
	[Token(Token = "0x200021E")]
	public class ShaderVertexAttributeData
	{
		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string m_shaderName;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Shader m_shader;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[ReadOnly]
		[UnityEngine.Tooltip("If true, them we should performa a full shader warm up as well as for the encountered vertex attribute descriptor schemas.")]
		private bool m_performFullWarmUp;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<VertexAttributeSchema> m_vertexAttributeSchemas;

		[Token(Token = "0x170001CE")]
		public string shaderName
		{
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0x13F23E8", Offset = "0x13F23E8", VA = "0x13F23E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0x13F23F0", Offset = "0x13F23F0", VA = "0x13F23F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public Shader shader
		{
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0x13F23F8", Offset = "0x13F23F8", VA = "0x13F23F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D0")]
		public bool performFullWarmUp
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0x13F2400", Offset = "0x13F2400", VA = "0x13F2400")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x13F2408", Offset = "0x13F2408", VA = "0x13F2408")]
			set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public List<VertexAttributeSchema> vertexAttributeSchemas
		{
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x13F2414", Offset = "0x13F2414", VA = "0x13F2414")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x13F0D00", Offset = "0x13F0D00", VA = "0x13F0D00")]
		public ShaderVertexAttributeData(Shader _shader)
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x13F241C", Offset = "0x13F241C", VA = "0x13F241C")]
		public void Add(List<VertexAttributeDescriptor> attributes)
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x13F0DBC", Offset = "0x13F0DBC", VA = "0x13F0DBC")]
		public void Add(VertexAttributeSchema schema)
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x13F248C", Offset = "0x13F248C", VA = "0x13F248C")]
		private bool Find(VertexAttributeSchema schema)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("The shader variant collection to build/warm up shader vertex attribute descriptors against.")]
	[SerializeField]
	private ShaderVariantCollection m_experimentalWarmupCollection;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("The shader variant collection to build/warm for shaders where we don't know the vertex attribute descriptors.")]
	[SerializeField]
	private ShaderVariantCollection m_legacyWarmupCollection;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("All the vertex attribute descriptor schemas used per shader. Use the Context Menu (right-click) to add to this list from the currently loaded scenes.")]
	[SerializeField]
	private List<ShaderVertexAttributeData> m_shaderDataCollection;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[ReadOnly]
	private int m_totalShaderVertexAttributeSchemas;

	[Token(Token = "0x170001C8")]
	public List<ShaderVertexAttributeData> shaderDataCollection
	{
		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x13F0574", Offset = "0x13F0574", VA = "0x13F0574")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C9")]
	public ShaderVariantCollection experimentalWarmupCollection
	{
		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x13F057C", Offset = "0x13F057C", VA = "0x13F057C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001CA")]
	public ShaderVariantCollection legacyWarmupCollection
	{
		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x13F0584", Offset = "0x13F0584", VA = "0x13F0584")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0x13F058C", Offset = "0x13F058C", VA = "0x13F058C")]
	public void WarmUp()
	{
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0x13F0A3C", Offset = "0x13F0A3C", VA = "0x13F0A3C")]
	private void Add(Material[] materials, VertexAttributeSchema schema)
	{
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0x13F0AB0", Offset = "0x13F0AB0", VA = "0x13F0AB0")]
	private void Add(Material m, [Optional] VertexAttributeSchema schema)
	{
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0x13F0E88", Offset = "0x13F0E88", VA = "0x13F0E88")]
	private void Combine(List<VertexAttributeDescriptor> attributes, List<VertexAttributeDescriptor> additionalStreams)
	{
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0x13F10C8", Offset = "0x13F10C8", VA = "0x13F10C8")]
	public void CollectRenderersVertexAttributeData()
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0x13F1670", Offset = "0x13F1670", VA = "0x13F1670")]
	public void CollectGraphicsVertexAttributeData()
	{
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0x13F1C44", Offset = "0x13F1C44", VA = "0x13F1C44")]
	public void CountVariantsAndSort()
	{
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0x13F1EBC", Offset = "0x13F1EBC", VA = "0x13F1EBC")]
	public ShaderVertexAttributeDataCollection()
	{
	}
}
[Token(Token = "0x2000222")]
public class State_BruteForceShaderWarmUp : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Stopwatch m_stopwatch;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_cameraPositionsRoot;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_objectsRoot;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject m_particlesRoot;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Camera m_secondaryCamera;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_trackWithCamera;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private RenderTexture m_warmupRenderTexture;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private ShaderVertexAttributeDataCollection m_vertexAttributes;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CameraPos[] m_cameraPositions;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Renderer[] m_renderers;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ParticleSystem[] m_particleSystems;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private HashSet<Material> m_materials;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Dictionary<Material, Material> m_instancedMaterials;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Dictionary<Material, List<string>> m_materialKeywords;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<Renderer, List<Material>> m_rendererOriginalMaterials;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Graphic[] m_graphics;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Camera m_warmUpCamera;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<string> m_globalKeywords;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private List<string> m_localKeywords;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool m_enableASW;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	private bool m_forceRender;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE2")]
	private bool m_useSecondCamera;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE3")]
	private bool m_currentASWValue;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool m_useRenderTexture;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform m_cameraParent;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Vector3 m_cameraPosition;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private Quaternion m_cameraRotation;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Dictionary<Shader, List<int>> m_visitedShaderVariants;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private int m_totalRendersRequired;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private int m_numGlobalVariantPermutations;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private int m_numLocalVariantPermutations;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private int m_currentRender;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private TrackedPoseDriver m_poseDriver;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int m_lastCameraIndex;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private GameViewModel m_gameVM;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private LoadingScreen m_loadingScreen;

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0x13F26EC", Offset = "0x13F26EC", VA = "0x13F26EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0x13F277C", Offset = "0x13F277C", VA = "0x13F277C", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0x13F32A0", Offset = "0x13F32A0", VA = "0x13F32A0", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0x13F3578", Offset = "0x13F3578", VA = "0x13F3578", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0x13F402C", Offset = "0x13F402C", VA = "0x13F402C")]
	private void UpdateCamera(ScriptableRenderContext context, Camera camera)
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0x13F40E4", Offset = "0x13F40E4", VA = "0x13F40E4")]
	[ContextMenu("Find GPU Instancing Materials")]
	public void FindMaterialsWithGPUInstancingEnabled()
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0x13F42F8", Offset = "0x13F42F8", VA = "0x13F42F8")]
	[ContextMenu("Display Active Shaders")]
	public void DisplayUniqueShaders()
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0x13F42FC", Offset = "0x13F42FC", VA = "0x13F42FC")]
	private void DisplayShaders()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0x13F2A50", Offset = "0x13F2A50", VA = "0x13F2A50")]
	private void CreateWarmupCamera()
	{
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0x13F3EA4", Offset = "0x13F3EA4", VA = "0x13F3EA4")]
	private void DestroyWarmupCamera()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0x13F4730", Offset = "0x13F4730", VA = "0x13F4730")]
	private void SetMaterialKeywords(int globalVarientIndex, int localVarientIndex)
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0x13F4BB0", Offset = "0x13F4BB0", VA = "0x13F4BB0")]
	private void SetCameraPosition(int posIndex)
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0x13F3394", Offset = "0x13F3394", VA = "0x13F3394")]
	private void SetCameraAndVariants(int renderIndex)
	{
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x13F2D04", Offset = "0x13F2D04", VA = "0x13F2D04")]
	private void GatherRenderers()
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x13F4F04", Offset = "0x13F4F04", VA = "0x13F4F04")]
	private Material AddMaterial(Material material, bool createInstance = true)
	{
		return null;
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x13F3830", Offset = "0x13F3830", VA = "0x13F3830")]
	private void RestoreRenderers()
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x13F4AC0", Offset = "0x13F4AC0", VA = "0x13F4AC0")]
	private void SetKeywords(Material m, int keywordCode)
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x13F4D40", Offset = "0x13F4D40", VA = "0x13F4D40")]
	private void SetKeywords(int keywordCode)
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x13F50B4", Offset = "0x13F50B4", VA = "0x13F50B4")]
	public State_BruteForceShaderWarmUp()
	{
	}
}
[Token(Token = "0x2000223")]
public class State_WarmupShaders : BaseStateAttachedLogic
{
	[Token(Token = "0x2000224")]
	private enum WarmUpMethod
	{
		[Token(Token = "0x4000B3F")]
		Experimental,
		[Token(Token = "0x4000B40")]
		Legacy
	}

	[Token(Token = "0x2000225")]
	[CompilerGenerated]
	private sealed class <WarmupShaders>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int inPoint;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public State_WarmupShaders <>4__this;

		[Token(Token = "0x170001D2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x13F56F0", Offset = "0x13F56F0", VA = "0x13F56F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x13F5738", Offset = "0x13F5738", VA = "0x13F5738", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x13F53EC", Offset = "0x13F53EC", VA = "0x13F53EC")]
		[DebuggerHidden]
		public <WarmupShaders>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x13F5518", Offset = "0x13F5518", VA = "0x13F5518", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x13F551C", Offset = "0x13F551C", VA = "0x13F551C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x13F56F8", Offset = "0x13F56F8", VA = "0x13F56F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B3A")]
	public const string c_variantsCollectionFileName = "ManualVariants_legacy";

	[Token(Token = "0x4000B3B")]
	public const string c_variantsCollectionFileName_Editor = "EditorShaderVariants";

	[Token(Token = "0x4000B3C")]
	public const string c_variantsCollectionFileName_Quest1 = "ManualVariants_Quest1";

	[Token(Token = "0x4000B3D")]
	public const string c_variantsCollectionFile = "Assets/Resources/{0}.shadervariants";

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x13F52E0", Offset = "0x13F52E0", VA = "0x13F52E0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x13F5368", Offset = "0x13F5368", VA = "0x13F5368")]
	[IteratorStateMachine(typeof(<WarmupShaders>d__6))]
	private IEnumerator WarmupShaders(int inPoint)
	{
		return null;
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x13F5414", Offset = "0x13F5414", VA = "0x13F5414")]
	public static ShaderVariantCollection LoadShaderVariantCollection()
	{
		return null;
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x13F5510", Offset = "0x13F5510", VA = "0x13F5510")]
	public State_WarmupShaders()
	{
	}
}
[Token(Token = "0x2000226")]
[CreateAssetMenu(fileName = "Haptic Config", menuName = "Battle Sister/Haptic/Haptic Config", order = 1)]
public class HapticConfig : ScriptableObject
{
	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticFrame m_haptic;

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0x13F5740", Offset = "0x13F5740", VA = "0x13F5740")]
	public HapticConfig()
	{
	}
}
[Token(Token = "0x2000227")]
[CreateAssetMenu(fileName = "Haptic Collision Forwarding Config", menuName = "Battle Sister/Haptic/Haptic Collision Forwarding Config", order = 1)]
public class HapticFrameVelocityConfig : ScriptableObject
{
	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<HapticFrameVelocityNode> m_hapticFrameVelocityTriggers;

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0x13F5748", Offset = "0x13F5748", VA = "0x13F5748")]
	public HapticFrameVelocityConfig()
	{
	}
}
[Token(Token = "0x2000228")]
public class DamageReport
{
	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Identifier m_identifier;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Identifier m_weaponID;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_wasKillShot;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Faction m_victimFaction;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DamageType? m_damageType;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_damage;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public IOwner m_damageSourceOwner;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool m_reportSourceIsGib;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool m_isRootHealthStatus;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Collider m_collider;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public IAgent m_hitAgent;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public VrItem m_weapon;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool m_isHeadshot;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int m_bulletGroupId;

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0x13F57D0", Offset = "0x13F57D0", VA = "0x13F57D0")]
	public bool IsPlayerCauseOfReport(bool localPlayerOnly = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0x13F5974", Offset = "0x13F5974", VA = "0x13F5974")]
	public bool IsPlayerTarget(bool localPlayerOnly = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0x13F5A88", Offset = "0x13F5A88", VA = "0x13F5A88")]
	public bool IsHeadshot()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0x13F5B4C", Offset = "0x13F5B4C", VA = "0x13F5B4C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0x13F5F9C", Offset = "0x13F5F9C", VA = "0x13F5F9C")]
	public DamageReport()
	{
	}
}
[Token(Token = "0x2000229")]
[DisallowMultipleComponent]
public class HealthStatus : Poolable, IHealthStatusEffector
{
	[Serializable]
	[Token(Token = "0x200022A")]
	public enum InvincibilitySetting
	{
		[Token(Token = "0x4000BA2")]
		NotInvincible,
		[Token(Token = "0x4000BA3")]
		InvincibleIncludingChildren,
		[Token(Token = "0x4000BA4")]
		InvincibleExcludingChildren
	}

	[Serializable]
	[Token(Token = "0x200022B")]
	private struct DamageTypeScaleMapping
	{
		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DamageType damageType;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[Min(0f)]
		public float scale;
	}

	[Token(Token = "0x200022C")]
	public enum ChildStatus
	{
		[Token(Token = "0x4000BA8")]
		DontCare,
		[Token(Token = "0x4000BA9")]
		DeadOnly,
		[Token(Token = "0x4000BAA")]
		AliveOnly
	}

	[Token(Token = "0x200022D")]
	[CompilerGenerated]
	private sealed class <DisableInvincibility>d__169 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HealthStatus <>4__this;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool invincible;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool children;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public object requester;

		[Token(Token = "0x170001E5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CB1")]
			[Address(RVA = "0x13FC7BC", Offset = "0x13FC7BC", VA = "0x13FC7BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x13FC804", Offset = "0x13FC804", VA = "0x13FC804", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x13FC6B4", Offset = "0x13FC6B4", VA = "0x13FC6B4")]
		[DebuggerHidden]
		public <DisableInvincibility>d__169(int <>1__state)
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x13FC6DC", Offset = "0x13FC6DC", VA = "0x13FC6DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x13FC6E0", Offset = "0x13FC6E0", VA = "0x13FC6E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x13FC7C4", Offset = "0x13FC7C4", VA = "0x13FC7C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Health Status Event Hooks")]
	[SerializeField]
	private HealthStatusEventHooks m_eventHooks;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Header("Health Status Relationship Info - between this health status and other objects")]
	private HealthStatusRelationshipInfo m_healthStatusRelationshipInfo;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Reference to a Health Status to mirror starting health with.")]
	[SerializeField]
	private HealthStatus m_mirrorWith;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Health Properties")]
	[SerializeField]
	[FormerlySerializedAs("m_isInvincible")]
	private InvincibilitySetting m_invincibilitySetting;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly HashSet<object> m_includeChildrenRequesterSet;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly HashSet<object> m_invincibilityRequesterSet;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float m_currentHealth;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	[FormerlySerializedAs("m_startHealth")]
	private float m_maxHealth;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float m_defaultMaxHealth;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float m_incomingDamageScale;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private float m_invincibleTime;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	[UnityEngine.Tooltip("Set this to never get to death (but can still be independent of invincibility). Changes at runtime have no effect.")]
	[FormerlySerializedAs("m_keepAlive")]
	private bool m_undying;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Rescue Health Item")]
	[SerializeField]
	private HealthStatusInfo m_rescueHealthInfo;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[UnityEngine.Tooltip("Caution! Only to be used for players to rescue them when a player is fallen.")]
	private bool m_canBeRescued;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private float m_fallenUntilDeathTime;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool m_fallen;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool m_fallenFullyDied;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float m_fallenTimer;

	[Token(Token = "0x4000B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private HealthStatusInfo m_fallenInfo;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private IOwner m_owner;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float m_cachedHealthBeforeLastChange;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private List<(float healthValueBeforeChange, float currentTime)> m_healthAmountLog;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Coroutine m_invincibilityRoutine;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool PendingRescueEvent;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[Min(0f)]
	[SerializeField]
	[Header("Runtime incoming damage clamping and scaling")]
	private float m_selfDamageScale;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private float m_selfDamageLowerHealthChangeLimit;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[SerializeField]
	private float m_selfDamageUpperHealthChangeLimit;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private List<DamageType> m_soloDamageTypes;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private DamageTypeScaleMapping[] m_damageTypeScaleMappings;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	[Header("Health change to pass to damaging item")]
	private float m_healthToReturnToSender;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Header("Status Effects - Each effect should be a child of the status effect root")]
	private StatusEffectRoot m_statusEffectRoot;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private readonly List<StatusEffect> m_statusEffects;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float m_lastTimeDamaged;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[Header("Misc Settings")]
	[UnityEngine.Tooltip("Whether to dissolve on death. Has no affect if no dissolver is attached.")]
	[SerializeField]
	private bool m_dissolveOnDeath;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
	[SerializeField]
	private bool m_setTransformOnReset;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x126")]
	[SerializeField]
	private bool m_trackVelocity;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private VelocityTracker m_velocityTracker;

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private bool m_deathCanTriggerEnrage;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
	[SerializeField]
	private bool m_onlyReceiveDamageFromHumanPlayers;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private Vector3 m_originalLocalPosition;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Quaternion m_originalLocalRotation;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private HealthStatusInfo m_resetHealthInfo;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	[Header("Multiplayer Setup")]
	private BoltEntity m_cachedBoltEntity;

	[Token(Token = "0x4000B80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private BoltPlayerController m_cachedBoltPlayerController;

	[Token(Token = "0x4000B81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Action ActionOnReset;

	[Token(Token = "0x4000B82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Action<HealthStatusInfo> ActionPreApplyHealthStatusUpdate;

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public Action<HealthStatusInfo> ActionApplyHealthStatusUpdate;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Action ActionOnAllocate;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public Action ActionOnReturnToPool;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public Action<HealthStatusInfo> ActionOnHealthIncreased;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public Action<HealthStatusInfo> ActionOnHealthDecreased;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public Action<HealthStatusInfo> ActionOnDeath;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public Action<HealthStatusInfo> ActionOnFallen;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public Action<HealthStatusInfo> ActionOnHealthIncreasedAfterDeath;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public Action<HealthStatusInfo> ActionHealthDecreasedAfterDeath;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public Action<HealthStatusInfo> ActionHealthIncreasedWhenInvincible;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public Action<HealthStatusInfo> ActionHealthDecreasedWhenInvincible;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private IOwner m_lastHitBy;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private Collider m_collider;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static bool allowClientHealthChanges;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly ProfilerMarker s_profileMarker3;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly ProfilerMarker s_profileMarker6;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static readonly ProfilerMarker s_profileMarker6a;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static readonly ProfilerMarker s_profileMarker6b;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly ProfilerMarker s_profileMarker6c;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static readonly ProfilerMarker s_profileMarker6d;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static readonly ProfilerMarker s_profileMarker6e;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly ProfilerMarker s_profileMarker6f;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static readonly ProfilerMarker s_profileMarker2;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly ProfilerMarker s_profileMarker4;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static readonly ProfilerMarker s_profileMarker7;

	[Token(Token = "0x4000BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly ProfilerMarker s_profileMarker5;

	[Token(Token = "0x170001D4")]
	public float StartHealth
	{
		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x13F5FAC", Offset = "0x13F5FAC", VA = "0x13F5FAC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001D5")]
	public bool IsRoot
	{
		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x13F5FB4", Offset = "0x13F5FB4", VA = "0x13F5FB4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D6")]
	public float NormalizedHealth
	{
		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x13F6020", Offset = "0x13F6020", VA = "0x13F6020")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001D7")]
	public bool ShouldDissolveOnDeath
	{
		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x13F6060", Offset = "0x13F6060", VA = "0x13F6060")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D8")]
	public float RemainingTimeForRescue
	{
		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x13F6068", Offset = "0x13F6068", VA = "0x13F6068")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001D9")]
	public HealthStatus RootHealthStatus
	{
		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x13F6078", Offset = "0x13F6078", VA = "0x13F6078")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DA")]
	public IOwner Owner
	{
		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x13F60A4", Offset = "0x13F60A4", VA = "0x13F60A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DB")]
	public BoltEntity Entity
	{
		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x13F60AC", Offset = "0x13F60AC", VA = "0x13F60AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DC")]
	public bool DeathCanTriggerEnrage
	{
		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x13F61D4", Offset = "0x13F61D4", VA = "0x13F61D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001DD")]
	public bool OnlyReceiveDamageFromHumanPlayers
	{
		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x13F61DC", Offset = "0x13F61DC", VA = "0x13F61DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001DE")]
	public HealthStatusEventHooks EventHooks
	{
		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x13F61E4", Offset = "0x13F61E4", VA = "0x13F61E4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DF")]
	public IOwner LastHitBy
	{
		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x13F61EC", Offset = "0x13F61EC", VA = "0x13F61EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001E0")]
	public float CurrentHealth
	{
		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x13F67A4", Offset = "0x13F67A4", VA = "0x13F67A4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001E1")]
	public float MaxHealth
	{
		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x13F67AC", Offset = "0x13F67AC", VA = "0x13F67AC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x13F67B4", Offset = "0x13F67B4", VA = "0x13F67B4")]
		set
		{
		}
	}

	[Token(Token = "0x170001E2")]
	public BoltEntity CachedBoltEntity
	{
		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x13F60B0", Offset = "0x13F60B0", VA = "0x13F60B0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x13F67CC", Offset = "0x13F67CC", VA = "0x13F67CC")]
		set
		{
		}
	}

	[Token(Token = "0x170001E3")]
	public BoltPlayerController CachedBoltPlayerController
	{
		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x13F67DC", Offset = "0x13F67DC", VA = "0x13F67DC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x13F6900", Offset = "0x13F6900", VA = "0x13F6900")]
		set
		{
		}
	}

	[Token(Token = "0x170001E4")]
	public HealthStatusRelationshipInfo HealthStatusRelationshipInfo
	{
		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x13F6910", Offset = "0x13F6910", VA = "0x13F6910")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000006")]
	public static event Action<HealthStatusInfo> GlobalActionOnDeath
	{
		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x13F61F4", Offset = "0x13F61F4", VA = "0x13F61F4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x13F62E4", Offset = "0x13F62E4", VA = "0x13F62E4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public static event Action<HealthStatusInfo> GlobalActionOnFallen
	{
		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x13F63D4", Offset = "0x13F63D4", VA = "0x13F63D4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x13F64C8", Offset = "0x13F64C8", VA = "0x13F64C8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public static event Action<HealthStatusInfo> GlobalActionOnRescue
	{
		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x13F65BC", Offset = "0x13F65BC", VA = "0x13F65BC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x13F66B0", Offset = "0x13F66B0", VA = "0x13F66B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0x13F6918", Offset = "0x13F6918", VA = "0x13F6918")]
	public void ResetNetworkObject()
	{
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0x13F6958", Offset = "0x13F6958", VA = "0x13F6958")]
	public void ResetObject(bool sentFromServer = false)
	{
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0x13F6A6C", Offset = "0x13F6A6C", VA = "0x13F6A6C")]
	private void ResetObjectAndChildren()
	{
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0x13F6F18", Offset = "0x13F6F18", VA = "0x13F6F18")]
	public int CountChildren(ChildStatus status)
	{
		return default(int);
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0x13F70D0", Offset = "0x13F70D0", VA = "0x13F70D0")]
	public int KillRandomProportionOfLivingChildren(float probability)
	{
		return default(int);
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0x13F6D3C", Offset = "0x13F6D3C", VA = "0x13F6D3C")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0x13F7494", Offset = "0x13F7494", VA = "0x13F7494")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0x13F75B4", Offset = "0x13F75B4", VA = "0x13F75B4")]
	public void ScaleHealth(float scale)
	{
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0x13F75D8", Offset = "0x13F75D8", VA = "0x13F75D8")]
	public void ScaleIncomingDamage(float scale)
	{
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0x13F75E0", Offset = "0x13F75E0", VA = "0x13F75E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0x13F7818", Offset = "0x13F7818", VA = "0x13F7818")]
	public int IndexOf(Collider collider)
	{
		return default(int);
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0x13F78CC", Offset = "0x13F78CC", VA = "0x13F78CC", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0x13F79F0", Offset = "0x13F79F0", VA = "0x13F79F0", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0x13F7A1C", Offset = "0x13F7A1C", VA = "0x13F7A1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0x13F7AE4", Offset = "0x13F7AE4", VA = "0x13F7AE4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0x13F7A20", Offset = "0x13F7A20", VA = "0x13F7A20")]
	private void FallenTimer()
	{
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0x13F7B9C", Offset = "0x13F7B9C", VA = "0x13F7B9C")]
	public void UpdateHealthStatusInfo(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0x13F8260", Offset = "0x13F8260", VA = "0x13F8260")]
	public void ReceivedHealthChangeEvent(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0x13F8554", Offset = "0x13F8554", VA = "0x13F8554")]
	public void ReceivedHealthChangeEvent(float currentHealth, HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0x13F8264", Offset = "0x13F8264", VA = "0x13F8264")]
	private void ApplyHealthStatusInfo(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0x13F855C", Offset = "0x13F855C", VA = "0x13F855C")]
	private void ApplyVfx(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0x13F9FA4", Offset = "0x13F9FA4", VA = "0x13F9FA4")]
	public HealthStatus GetChildHealthStatus(int index)
	{
		return null;
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0x13FA030", Offset = "0x13FA030", VA = "0x13FA030")]
	public void AddSoloDamageType(DamageType damageType)
	{
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0x13FA138", Offset = "0x13FA138", VA = "0x13FA138")]
	public void RemoveSoloDamageType(DamageType damageType)
	{
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0x13F6B70", Offset = "0x13F6B70", VA = "0x13F6B70")]
	internal void ServerSendResetObject()
	{
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0x13F8D9C", Offset = "0x13F8D9C", VA = "0x13F8D9C")]
	private void AdjustHealthAndTriggerEvents(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0x13F7B10", Offset = "0x13F7B10", VA = "0x13F7B10")]
	private void ProcessDeath(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0x13F7EB8", Offset = "0x13F7EB8", VA = "0x13F7EB8")]
	public bool AuthenticateHealthStatusInfo(HealthStatusInfo healthStatusInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0x13FAC3C", Offset = "0x13FAC3C", VA = "0x13FAC3C")]
	private bool CheckSameFaction(HealthStatusInfo healthStatusInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0x13FB11C", Offset = "0x13FB11C", VA = "0x13FB11C")]
	public void SimplifiedAdjustHealthAndTriggerEvents(float damage)
	{
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0x13FB244", Offset = "0x13FB244", VA = "0x13FB244")]
	public float GetTotalHealthChangeOverTime(float lookbackTime, bool includeChildren)
	{
		return default(float);
	}

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0x13FA3C4", Offset = "0x13FA3C4", VA = "0x13FA3C4")]
	private void ReturnHealthToSender(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0x13F8BA8", Offset = "0x13F8BA8", VA = "0x13F8BA8")]
	private void ForwardHealthStatusToRootHealthStatus(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0x13FB4A8", Offset = "0x13FB4A8", VA = "0x13FB4A8")]
	public void SetCurrentHealth(float newValue)
	{
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0x13FB580", Offset = "0x13FB580", VA = "0x13FB580")]
	public float GetCachedHealthBeforeLastChange()
	{
		return default(float);
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0x13FB588", Offset = "0x13FB588", VA = "0x13FB588")]
	public float TimeSinceLastDamaged()
	{
		return default(float);
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0x13F6040", Offset = "0x13F6040", VA = "0x13F6040")]
	public float GetCurrentHealthProportion()
	{
		return default(float);
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0x13FB5A8", Offset = "0x13FB5A8", VA = "0x13FB5A8")]
	public HealthStatusRelationshipInfo GetHealthStatusRelationshipInfo()
	{
		return null;
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0x13FB5B0", Offset = "0x13FB5B0", VA = "0x13FB5B0")]
	public void SetHealthStatusRelationshipInfo(HealthStatusRelationshipInfo healthStatusRelationshipInfo)
	{
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0x13FB5B8", Offset = "0x13FB5B8", VA = "0x13FB5B8")]
	public bool HasRelationshipWith(HealthStatus otherStatus)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0x13FB6F4", Offset = "0x13FB6F4", VA = "0x13FB6F4", Slot = "11")]
	public virtual bool IsAlive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0x13FA5F4", Offset = "0x13FA5F4", VA = "0x13FA5F4")]
	public bool IsFallen()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0x13F7078", Offset = "0x13F7078", VA = "0x13F7078")]
	public bool IsDead()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0x13FB718", Offset = "0x13FB718", VA = "0x13FB718")]
	public void Rescue()
	{
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0x13F72A4", Offset = "0x13F72A4", VA = "0x13F72A4")]
	[ContextMenu("Kill Immediately")]
	public void KillImmediately()
	{
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0x13FB79C", Offset = "0x13FB79C", VA = "0x13FB79C")]
	public void KillImmediatelyServerOverride()
	{
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0x13FB860", Offset = "0x13FB860", VA = "0x13FB860")]
	public void SetRescuable(bool rescuable)
	{
	}

	[Token(Token = "0x6000C90")]
	[Address(RVA = "0x13FA2F0", Offset = "0x13FA2F0", VA = "0x13FA2F0")]
	public bool IsInvincible()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C91")]
	[Address(RVA = "0x13FB8EC", Offset = "0x13FB8EC", VA = "0x13FB8EC")]
	public void SetInvincible(bool isInvincible, bool includeChildren, object requester)
	{
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0x13FB9E4", Offset = "0x13FB9E4", VA = "0x13FB9E4")]
	public void SetInvincibleAfterTime(bool isInvincible, bool includeChildren, object requester)
	{
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0x13FBA60", Offset = "0x13FBA60", VA = "0x13FBA60")]
	[IteratorStateMachine(typeof(<DisableInvincibility>d__169))]
	private IEnumerator DisableInvincibility(bool invincible, bool children, object requester, float time)
	{
		return null;
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0x13FBB20", Offset = "0x13FBB20", VA = "0x13FBB20")]
	public void DestroyHealthStatusReceivers()
	{
	}

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0x13F76B0", Offset = "0x13F76B0", VA = "0x13F76B0")]
	public void SetStatusEffectReferences()
	{
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0x13F7368", Offset = "0x13F7368", VA = "0x13F7368")]
	public void ResetStatusEffects()
	{
	}

	[Token(Token = "0x6000C97")]
	[Address(RVA = "0x13F888C", Offset = "0x13F888C", VA = "0x13F888C")]
	private void UpdateStatusEffects(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C98")]
	[Address(RVA = "0x13FBBE8", Offset = "0x13FBBE8", VA = "0x13FBBE8")]
	public StatusEffect GetStatusEffect(StatusEffect.StatusEffectType statusEffectType)
	{
		return null;
	}

	[Token(Token = "0x6000C99")]
	public T GetStatusEffect<T>() where T : StatusEffect
	{
		return null;
	}

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0x13FBD14", Offset = "0x13FBD14", VA = "0x13FBD14")]
	public List<StatusEffect> GetStatusEffects()
	{
		return null;
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0x13FBD1C", Offset = "0x13FBD1C", VA = "0x13FBD1C")]
	public bool IsStatusEffectActive(StatusEffect.StatusEffectType statusEffectType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0x13F7454", Offset = "0x13F7454", VA = "0x13F7454")]
	private void OnInitialise(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0x13F9DE0", Offset = "0x13F9DE0", VA = "0x13F9DE0")]
	private void OnApplyHealthStatusUpdate(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0x13F86C8", Offset = "0x13F86C8", VA = "0x13F86C8")]
	private void OnPreApplyHealthStatusUpdate(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0x13FA628", Offset = "0x13FA628", VA = "0x13FA628")]
	private void OnHealthIncreased(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA0")]
	[Address(RVA = "0x13F8B30", Offset = "0x13F8B30", VA = "0x13F8B30")]
	private void OnHealthDecreased(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA1")]
	[Address(RVA = "0x13FA6A0", Offset = "0x13FA6A0", VA = "0x13FA6A0")]
	private void OnFallen(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA2")]
	[Address(RVA = "0x13FA9B0", Offset = "0x13FA9B0", VA = "0x13FA9B0")]
	private void OnRescue(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0x13FAB5C", Offset = "0x13FAB5C", VA = "0x13FAB5C")]
	private void OnDeath(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0x13FAAE4", Offset = "0x13FAAE4", VA = "0x13FAAE4")]
	private void OnHealthIncreasedAfterDeath(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0x13FAA6C", Offset = "0x13FAA6C", VA = "0x13FAA6C")]
	private void OnHealthDecreasedAfterDeath(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0x13FA278", Offset = "0x13FA278", VA = "0x13FA278")]
	private void OnHealthIncreasedWhenInvincible(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0x13FA200", Offset = "0x13FA200", VA = "0x13FA200")]
	private void OnHealthDecreasedWhenInvincible(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0x13FBDC8", Offset = "0x13FBDC8", VA = "0x13FBDC8")]
	public void SetStatusEffectRoot(StatusEffectRoot root)
	{
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0x13FBDD8", Offset = "0x13FBDD8", VA = "0x13FBDD8")]
	public StatusEffectRoot GetStatusEffectRoot()
	{
		return null;
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0x13FBDE0", Offset = "0x13FBDE0", VA = "0x13FBDE0")]
	public VelocityTracker GetVelocityTracker()
	{
		return null;
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0x13FBDE8", Offset = "0x13FBDE8", VA = "0x13FBDE8")]
	public void MirrorStartingHealth(HashSet<HealthStatus> mirrored)
	{
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0x13FBF68", Offset = "0x13FBF68", VA = "0x13FBF68")]
	public HealthStatus()
	{
	}
}
[Serializable]
[Token(Token = "0x200022F")]
public class HealthStatusEventHooks
{
	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent OnInitialiseEvent;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnHealthIncreasedEvent;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnHealthDecreasedEvent;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnDeathEvent;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnHealthIncreasedAfterDeathEvent;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnHealthDecreasedAfterDeathEvent;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnHealthIncreasedWhenInvincibleEvent;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent OnHealthDecreasedWhenInvincibleEvent;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnSoloListNotEmpty;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent OnSoloListEmpty;

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0x13FC8A8", Offset = "0x13FC8A8", VA = "0x13FC8A8")]
	public HealthStatusEventHooks()
	{
	}
}
[Serializable]
[Token(Token = "0x2000230")]
public class HealthStatusInfo
{
	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Health Change Spec - Used to specify damage on impacts. Note: positive heals, negative deals damage.")]
	public float m_healthChangeMin;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_healthChangeMax;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Instant Kill Settings")]
	public bool m_instantKill;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool m_forwardInstantKillToRootHealthStatus;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_normalizedForce;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Status effect spec - Describe status effect changes on impacts")]
	public List<StatusEffectValuePair> m_statusEffects;

	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HealthStatusUpdateRuntimeInfo m_runtimeInfo;

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool m_isHeadshot;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int m_bulletGroupId;

	[Token(Token = "0x170001E7")]
	public HealthStatusUpdateRuntimeInfo runtimeInfo
	{
		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x13FCA84", Offset = "0x13FCA84", VA = "0x13FCA84")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x13FCA8C", Offset = "0x13FCA8C", VA = "0x13FCA8C")]
		set
		{
		}
	}

	[Token(Token = "0x170001E8")]
	public bool CreatedLocally
	{
		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x13FCA94", Offset = "0x13FCA94", VA = "0x13FCA94")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x13FCA9C", Offset = "0x13FCA9C", VA = "0x13FCA9C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0x13FCAA8", Offset = "0x13FCAA8", VA = "0x13FCAA8")]
	internal static void ExtractData(BoltEntity entity, int hitIndex, out HealthStatus healthStatusReceiver, out Collider collider, out Rigidbody rigidBody)
	{
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0x13FCE08", Offset = "0x13FCE08", VA = "0x13FCE08")]
	internal static HealthStatusInfo DeconstructServerHealthStatusRuntimeInfo(HealthStatusChangeEvent evnt)
	{
		return null;
	}

	[Token(Token = "0x6000CBE")]
	[Address(RVA = "0x13FD414", Offset = "0x13FD414", VA = "0x13FD414")]
	internal static HealthStatusInfo DeconstructServerHealthStatusRuntimeInfo(RequestHealthStatusChangeEvent evnt)
	{
		return null;
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0x13FD798", Offset = "0x13FD798", VA = "0x13FD798")]
	internal string DumpToString()
	{
		return null;
	}

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0x13FD21C", Offset = "0x13FD21C", VA = "0x13FD21C")]
	public HealthStatusInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x2000231")]
public class HealthStatusRelationshipInfo
{
	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Health Status Damage Forwarding Spec")]
	[UnityEngine.Tooltip("When this health status takes damage, pass the damage on to the parent health status if there is one after scaling it by this amount.")]
	public float m_childHealthChangeForwarding_Scaler;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[UnityEngine.Tooltip("Limit the amount of damage passed onto the root. This value must be negative, and is applied after the forwarding scalar.")]
	public float m_limitForwardedHealthChange;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Additional absolute health to pass to the root health status if there is one when this status dies. Remember, positive values heal, negative values inflict damage.")]
	public float m_childHealthChangeForwarding_FinalShotAmount;

	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Kill shot detector will apply extra damage when hit. It can either apply the extra damage when the parent HealthStatus is dead, or all the time.")]
	public KillShotDetector killShotDetector;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_forwardDamageAfterDeath;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[Header("Child Health Status List - Normally filled out for the root object only, used for re-setting a complex object")]
	[UnityEngine.Tooltip("If ticked, only receive damage if it's passed to us by one of our children - do not accept direct damage.")]
	public bool m_acceptChildForwardedHitsOnly;

	[Token(Token = "0x170001E9")]
	public HealthStatus rootHealthStatus
	{
		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x13FE8E8", Offset = "0x13FE8E8", VA = "0x13FE8E8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x13FE8F0", Offset = "0x13FE8F0", VA = "0x13FE8F0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001EA")]
	public List<Collider> damageSensorColliders
	{
		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x13FE8F8", Offset = "0x13FE8F8", VA = "0x13FE8F8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x13FE900", Offset = "0x13FE900", VA = "0x13FE900")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001EB")]
	public List<HealthStatus> childHealthStatus
	{
		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x13FE908", Offset = "0x13FE908", VA = "0x13FE908")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x13FE910", Offset = "0x13FE910", VA = "0x13FE910")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001EC")]
	public Dictionary<Collider, HealthStatus> colliderHealthStatusLut
	{
		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x13FE918", Offset = "0x13FE918", VA = "0x13FE918")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x13FE920", Offset = "0x13FE920", VA = "0x13FE920")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0x13FE928", Offset = "0x13FE928", VA = "0x13FE928")]
	public void Build(HealthStatus owner)
	{
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0x13FEF1C", Offset = "0x13FEF1C", VA = "0x13FEF1C")]
	private static int SortByName(UnityEngine.Component a, UnityEngine.Component b)
	{
		return default(int);
	}

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0x13FEE28", Offset = "0x13FEE28", VA = "0x13FEE28")]
	private HealthStatus GetRootHealthStatus(HealthStatus owner)
	{
		return null;
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0x13FEF80", Offset = "0x13FEF80", VA = "0x13FEF80")]
	public bool IsRootHealthStatus()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0x13FEFE0", Offset = "0x13FEFE0", VA = "0x13FEFE0")]
	public bool IsChildHealthStatus()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0x13FF040", Offset = "0x13FF040", VA = "0x13FF040")]
	public HealthStatusRelationshipInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x2000233")]
public class HealthStatusUpdateRuntimeInfo : ICloneable
{
	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public HealthStatus m_healthStatusChanged;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_healthChange;

	[Token(Token = "0x4000BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_wasKillShot;

	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public IOwner m_sender;

	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BoltEntity m_weapon;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HealthStatus m_receiver;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Collider m_collider;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Rigidbody m_rigidbody;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public VrMeleeWeapon m_meleeWeapon;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 m_effectPosition;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Vector3 m_effectNormal;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector3 m_originPositon;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector3 m_velocity;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector3 m_localVelocity;

	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool m_forwardedFromChild;

	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	public bool m_isInstantKill;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float m_normalizedForce;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool m_shouldForwardInstantKillToRootHealthStatus;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool m_damageAll;

	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	public bool m_damageOnlyLimbs;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x97")]
	public bool m_damageOnlyRoot;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool m_canReturnDamage;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private IDamageTypeProvider m_damageTypeProvider;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private DamageType? m_damageType;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool m_isPhysicsDamage;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public object m_metaData;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Identifier m_weaponID;

	[Token(Token = "0x170001ED")]
	public IDamageTypeProvider damageTypeProvider
	{
		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x13FF154", Offset = "0x13FF154", VA = "0x13FF154")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x13FF15C", Offset = "0x13FF15C", VA = "0x13FF15C")]
		set
		{
		}
	}

	[Token(Token = "0x170001EE")]
	public DamageType damageType
	{
		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x13FF164", Offset = "0x13FF164", VA = "0x13FF164")]
		get
		{
			return default(DamageType);
		}
		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x13FD39C", Offset = "0x13FD39C", VA = "0x13FD39C")]
		set
		{
		}
	}

	[Token(Token = "0x170001EF")]
	public bool HasDamageType
	{
		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x13FF24C", Offset = "0x13FF24C", VA = "0x13FF24C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0x13FF2A0", Offset = "0x13FF2A0", VA = "0x13FF2A0")]
	public bool IsHeadshot()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0x13FF348", Offset = "0x13FF348", VA = "0x13FF348")]
	public bool IsPlayerCauseOfReport()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0x13FF498", Offset = "0x13FF498", VA = "0x13FF498", Slot = "4")]
	public object Clone()
	{
		return null;
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0x13FDBCC", Offset = "0x13FDBCC", VA = "0x13FDBCC")]
	internal string DumpToString()
	{
		return null;
	}

	[Token(Token = "0x6000CDB")]
	[Address(RVA = "0x13FD2E4", Offset = "0x13FD2E4", VA = "0x13FD2E4")]
	public HealthStatusUpdateRuntimeInfo()
	{
	}
}
[Token(Token = "0x2000234")]
public interface IHealthStatusProvider
{
	[Token(Token = "0x170001F0")]
	HealthStatus healthStatus
	{
		[Token(Token = "0x6000CDC")]
		get;
	}
}
[Token(Token = "0x2000235")]
public interface IHealthStatusDamageModifier
{
	[Token(Token = "0x6000CDD")]
	void ModifyDamage(HealthStatus receiver, HealthStatusInfo healthStatusInfo);
}
[Token(Token = "0x2000236")]
public class GameObjectContainer : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000237")]
	private struct GameObjectIdentifierPair
	{
		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_identifier;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject m_gameObject;
	}

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObjectIdentifierPair> m_gameObjectIdentifierPairs;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, GameObject> m_runtimeGameObjectIdentifierDictionary;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool m_hideAllAssetsOnAwake;

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0x13FF4A0", Offset = "0x13FF4A0", VA = "0x13FF4A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0x13FF6DC", Offset = "0x13FF6DC", VA = "0x13FF6DC")]
	public void HideAllAssets()
	{
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0x13FF830", Offset = "0x13FF830", VA = "0x13FF830")]
	public void ToggleAsset(string identifier, bool enable)
	{
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0x13FF8F4", Offset = "0x13FF8F4", VA = "0x13FF8F4")]
	public void ShowSpecificAssetAdditively(string identifier)
	{
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0x13FF8FC", Offset = "0x13FF8FC", VA = "0x13FF8FC")]
	public void HideSpecificAsset(string identifier)
	{
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0x13FF904", Offset = "0x13FF904", VA = "0x13FF904")]
	public void ShowSpecificAssetHideOthers(string identifier)
	{
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0x13FFADC", Offset = "0x13FFADC", VA = "0x13FFADC")]
	public void StopAllParticleEffects()
	{
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0x13FFC2C", Offset = "0x13FFC2C", VA = "0x13FFC2C")]
	public void StopParticleEffectsUnderAsset(string identifier)
	{
	}

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0x13FFD4C", Offset = "0x13FFD4C", VA = "0x13FFD4C")]
	public GameObjectContainer()
	{
	}
}
[Serializable]
[Token(Token = "0x2000238")]
[CreateAssetMenu(menuName = "Cabin/Damage Hud Properties")]
public class DamageHudProperties : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000239")]
	public class HitFlashDefinition
	{
		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float duration;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color color;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve blendCurve;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Intensity of hit flash by normalized health")]
		public AnimationCurve normalizedHealthIntensity;

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x13FFDE4", Offset = "0x13FFDE4", VA = "0x13FFDE4")]
		public HitFlashDefinition()
		{
		}
	}

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HitFlashDefinition hitFlash;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve healthDesaturationCurve;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float desaturationDarkness;

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0x13FFDD4", Offset = "0x13FFDD4", VA = "0x13FFDD4")]
	public DamageHudProperties()
	{
	}
}
[Token(Token = "0x200023A")]
public class HealthStatusReceiver : CachedMonoBehaviour
{
	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected HealthStatus m_healthStatus;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_eventInitialised;

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0x13FFDF8", Offset = "0x13FFDF8", VA = "0x13FFDF8", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0x13FFE78", Offset = "0x13FFE78", VA = "0x13FFE78")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0x13FFEA0", Offset = "0x13FFEA0", VA = "0x13FFEA0", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0x13FFEAC", Offset = "0x13FFEAC", VA = "0x13FFEAC", Slot = "6")]
	public virtual void OnInitialise()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0x13FFEB0", Offset = "0x13FFEB0", VA = "0x13FFEB0", Slot = "7")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0x13FFEB4", Offset = "0x13FFEB4", VA = "0x13FFEB4")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0x13FFEB8", Offset = "0x13FFEB8", VA = "0x13FFEB8", Slot = "8")]
	public virtual void RegisterResponse()
	{
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0x13FFEBC", Offset = "0x13FFEBC", VA = "0x13FFEBC", Slot = "9")]
	public virtual void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0x13FFEC0", Offset = "0x13FFEC0", VA = "0x13FFEC0")]
	public HealthStatusReceiver()
	{
	}
}
[Token(Token = "0x200023B")]
public class HealthStatusReceiver_DamageHud : HealthStatusReceiver
{
	[Token(Token = "0x200023C")]
	[CompilerGenerated]
	private sealed class <HitFlashAsync>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HealthStatusReceiver_DamageHud <>4__this;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float normalizedHealth;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DamageHudProperties.HitFlashDefinition <hitFlash>5__2;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <duration>5__3;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <c>5__4;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <maxAlpha>5__5;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <t>5__6;

		[Token(Token = "0x170001F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D00")]
			[Address(RVA = "0x1400BE8", Offset = "0x1400BE8", VA = "0x1400BE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D02")]
			[Address(RVA = "0x1400C30", Offset = "0x1400C30", VA = "0x1400C30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x140089C", Offset = "0x140089C", VA = "0x140089C")]
		[DebuggerHidden]
		public <HitFlashAsync>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x14009C8", Offset = "0x14009C8", VA = "0x14009C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x14009CC", Offset = "0x14009CC", VA = "0x14009CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x1400BF0", Offset = "0x1400BF0", VA = "0x1400BF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private DamageHudProperties m_properties;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int s_desaturation;

	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int s_desaturationDarkness;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int s_hitFlashColor;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly int s_playerHealth;

	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine m_hitFlashCoroutine;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_updateHud;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float m_healthChange;

	[Token(Token = "0x170001F1")]
	protected bool IsLocalPlayer
	{
		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x13FFEC8", Offset = "0x13FFEC8", VA = "0x13FFEC8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000CF3")]
	[Address(RVA = "0x13FFFB8", Offset = "0x13FFFB8", VA = "0x13FFFB8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000CF4")]
	[Address(RVA = "0x14000F4", Offset = "0x14000F4", VA = "0x14000F4", Slot = "6")]
	public override void OnInitialise()
	{
	}

	[Token(Token = "0x6000CF5")]
	[Address(RVA = "0x1400170", Offset = "0x1400170", VA = "0x1400170")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0x1400270", Offset = "0x1400270", VA = "0x1400270", Slot = "8")]
	public override void RegisterResponse()
	{
	}

	[Token(Token = "0x6000CF7")]
	[Address(RVA = "0x140035C", Offset = "0x140035C", VA = "0x140035C", Slot = "9")]
	public override void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000CF8")]
	[Address(RVA = "0x1400448", Offset = "0x1400448", VA = "0x1400448")]
	public void OnApplyHealthStatusUpdate(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000CF9")]
	[Address(RVA = "0x1400570", Offset = "0x1400570", VA = "0x1400570")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0x1400818", Offset = "0x1400818", VA = "0x1400818")]
	[IteratorStateMachine(typeof(<HitFlashAsync>d__17))]
	private IEnumerator HitFlashAsync(float normalizedHealth)
	{
		return null;
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0x14008C4", Offset = "0x14008C4", VA = "0x14008C4")]
	public HealthStatusReceiver_DamageHud()
	{
	}
}
[Token(Token = "0x200023D")]
public class HealthStatusReceiver_DamageMetaAvatar : HealthStatusReceiver
{
	[Token(Token = "0x200023F")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass20_0
	{
		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color c;

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x1401E90", Offset = "0x1401E90", VA = "0x1401E90")]
		public <>c__DisplayClass20_0()
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x1401E98", Offset = "0x1401E98", VA = "0x1401E98")]
		internal void <HitFlashAsync>b__1(Material it)
		{
		}
	}

	[Token(Token = "0x2000240")]
	[CompilerGenerated]
	private sealed class <HitFlashAsync>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HealthStatusReceiver_DamageMetaAvatar <>4__this;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float normalizedHealth;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass20_0 <>8__1;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DamageHudProperties.HitFlashDefinition <hitFlash>5__2;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <duration>5__3;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <maxAlpha>5__4;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <t>5__5;

		[Token(Token = "0x170001F4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0x1402340", Offset = "0x1402340", VA = "0x1402340", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0x1402388", Offset = "0x1402388", VA = "0x1402388", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x1401AA8", Offset = "0x1401AA8", VA = "0x1401AA8")]
		[DebuggerHidden]
		public <HitFlashAsync>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x1401F18", Offset = "0x1401F18", VA = "0x1401F18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x1401F1C", Offset = "0x1401F1C", VA = "0x1401F1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x1402348", Offset = "0x1402348", VA = "0x1402348", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private DamageHudProperties m_properties;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_desaturationMeta;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_hitFlashColorMeta;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int s_hitFlashEnabledMeta;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer[] m_renderers;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Material> m_materials;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_healthChange;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool m_updateEffects;

	[Token(Token = "0x4000C16")]
	private const string c_desaturateKeyword = "ENABLE_DESATURATE";

	[Token(Token = "0x4000C17")]
	private const string c_hitFlashKeyword = "ENABLE_HITFLASH";

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Coroutine m_hitFlashCoroutine;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private MaterialInstances m_materialInstances;

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0x1400C38", Offset = "0x1400C38", VA = "0x1400C38", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0x1400C3C", Offset = "0x1400C3C", VA = "0x1400C3C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0x1400F90", Offset = "0x1400F90", VA = "0x1400F90", Slot = "6")]
	public override void OnInitialise()
	{
	}

	[Token(Token = "0x6000D06")]
	[Address(RVA = "0x14011B4", Offset = "0x14011B4", VA = "0x14011B4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D07")]
	[Address(RVA = "0x140140C", Offset = "0x140140C", VA = "0x140140C", Slot = "8")]
	public override void RegisterResponse()
	{
	}

	[Token(Token = "0x6000D08")]
	[Address(RVA = "0x1401540", Offset = "0x1401540", VA = "0x1401540", Slot = "9")]
	public override void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000D09")]
	[Address(RVA = "0x1401674", Offset = "0x1401674", VA = "0x1401674")]
	public void OnApplyHealthStatusUpdate(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0x14016A0", Offset = "0x14016A0", VA = "0x14016A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0x1401A24", Offset = "0x1401A24", VA = "0x1401A24")]
	[IteratorStateMachine(typeof(<HitFlashAsync>d__20))]
	private IEnumerator HitFlashAsync(float normalizedHealth)
	{
		return null;
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0x1401AD0", Offset = "0x1401AD0", VA = "0x1401AD0")]
	public HealthStatusReceiver_DamageMetaAvatar()
	{
	}
}
[Token(Token = "0x2000241")]
public class HealthStatusReceiver_DamageReporter : HealthStatusReceiver
{
	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[UnityEngine.Tooltip("Multiply the damage value reported by this modifier")]
	private float m_modifier;

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0x1402390", Offset = "0x1402390", VA = "0x1402390", Slot = "8")]
	public override void RegisterResponse()
	{
	}

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0x140247C", Offset = "0x140247C", VA = "0x140247C", Slot = "9")]
	public override void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0x1402568", Offset = "0x1402568", VA = "0x1402568")]
	public void OnApplyHealthStatusUpdate(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0x1402960", Offset = "0x1402960", VA = "0x1402960")]
	public HealthStatusReceiver_DamageReporter()
	{
	}
}
[Token(Token = "0x2000242")]
public class HealthStatusReceiver_GibHelper : HealthStatusReceiver
{
	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action<GibDefinition> OnLimbDetached;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("Transform to parent all gibs to")]
	[SerializeField]
	private Transform m_gibsParent;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObjectGroups m_bodyGroup;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObjectGroups m_headGroup;

	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GibDefinition> m_gibs;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PTRagdollToggler m_ragdoll;

	[Token(Token = "0x170001F6")]
	public List<GibDefinition> Gibs
	{
		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x1402970", Offset = "0x1402970", VA = "0x1402970")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x1402978", Offset = "0x1402978", VA = "0x1402978")]
		set
		{
		}
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0x1402980", Offset = "0x1402980", VA = "0x1402980", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0x1402D9C", Offset = "0x1402D9C", VA = "0x1402D9C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0x1402FCC", Offset = "0x1402FCC", VA = "0x1402FCC", Slot = "7")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0x1403058", Offset = "0x1403058", VA = "0x1403058")]
	private void Reset()
	{
	}

	[Token(Token = "0x6000D28")]
	[Address(RVA = "0x1403334", Offset = "0x1403334", VA = "0x1403334")]
	private void HandleRagdollChangeMode(bool inRagdoll)
	{
	}

	[Token(Token = "0x6000D29")]
	[Address(RVA = "0x1403420", Offset = "0x1403420", VA = "0x1403420")]
	private void HandleLimbDetached(GibDefinition gib)
	{
	}

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0x140343C", Offset = "0x140343C", VA = "0x140343C")]
	public void ResetGibs()
	{
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0x14034C8", Offset = "0x14034C8", VA = "0x14034C8", Slot = "8")]
	public override void RegisterResponse()
	{
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0x1403668", Offset = "0x1403668", VA = "0x1403668", Slot = "9")]
	public override void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0x1403808", Offset = "0x1403808", VA = "0x1403808")]
	private void HandleAgentDeath(HealthStatusInfo statusInfo)
	{
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0x140305C", Offset = "0x140305C", VA = "0x140305C")]
	[ContextMenu("Find Limbs")]
	public void FindLimbs()
	{
	}

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0x14038AC", Offset = "0x14038AC", VA = "0x14038AC")]
	[ContextMenu("Clean Up")]
	public void RemoveEmptyGibs()
	{
	}

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0x14039B4", Offset = "0x14039B4", VA = "0x14039B4")]
	[ContextMenu("Test Instantiate")]
	public void TestInstantiateGibs()
	{
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0x1403A40", Offset = "0x1403A40", VA = "0x1403A40")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0x1403ACC", Offset = "0x1403ACC", VA = "0x1403ACC")]
	public HealthStatusReceiver_GibHelper()
	{
	}
}
[Token(Token = "0x2000245")]
public class HealthStatusReceiver_HealthChangedResponse : HealthStatusReceiver, IPoolable
{
	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<ValueChangedResponse> m_valueChangedResponse;

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0x1403CC8", Offset = "0x1403CC8", VA = "0x1403CC8", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0x1403E2C", Offset = "0x1403E2C", VA = "0x1403E2C", Slot = "11")]
	private void PT.IPoolable.OnAllocFromPool()
	{
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0x1403E48", Offset = "0x1403E48", VA = "0x1403E48", Slot = "12")]
	private void PT.IPoolable.OnReturnToPool()
	{
	}

	[Token(Token = "0x6000D3B")]
	[Address(RVA = "0x1403E4C", Offset = "0x1403E4C", VA = "0x1403E4C", Slot = "13")]
	private void PT.IPoolable.OnAddedToPool()
	{
	}

	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0x1403CF8", Offset = "0x1403CF8", VA = "0x1403CF8")]
	private void Initialize(float startHealth)
	{
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0x1403E50", Offset = "0x1403E50", VA = "0x1403E50", Slot = "8")]
	public override void RegisterResponse()
	{
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0x1403F3C", Offset = "0x1403F3C", VA = "0x1403F3C", Slot = "9")]
	public override void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0x1404028", Offset = "0x1404028", VA = "0x1404028")]
	private void ProcessValueChangedResponse(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0x140421C", Offset = "0x140421C", VA = "0x140421C")]
	private float InvertNumberSign(float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0x1404224", Offset = "0x1404224", VA = "0x1404224")]
	public HealthStatusReceiver_HealthChangedResponse()
	{
	}

	[SpecialName]
	[Token(Token = "0x6000D42")]
	[Address(RVA = "0x14042AC", Offset = "0x14042AC", VA = "0x14042AC", Slot = "10")]
	private GameObject PT.IPoolable.get_gameObject()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000246")]
[ExecuteInEditMode]
public class ValueChangedResponse
{
	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_desc;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_valueTriggerAmount;

	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent m_response;

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0x14042B4", Offset = "0x14042B4", VA = "0x14042B4")]
	public ValueChangedResponse()
	{
	}
}
[Token(Token = "0x2000247")]
public class HealthStatusReceiver_UnityEventHook : HealthStatusReceiver
{
	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private HealthStatusEventHooks m_healthStatusEventHooks;

	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0x1404330", Offset = "0x1404330", VA = "0x1404330", Slot = "6")]
	public override void OnInitialise()
	{
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0x1404354", Offset = "0x1404354", VA = "0x1404354", Slot = "8")]
	public override void RegisterResponse()
	{
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0x14047F0", Offset = "0x14047F0", VA = "0x14047F0", Slot = "9")]
	public override void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0x1404C8C", Offset = "0x1404C8C", VA = "0x1404C8C")]
	public void OnHealthIncreased(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0x1404CB0", Offset = "0x1404CB0", VA = "0x1404CB0")]
	public void OnHealthDecreased(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0x1404E6C", Offset = "0x1404E6C", VA = "0x1404E6C")]
	public void OnDeath(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0x1404E90", Offset = "0x1404E90", VA = "0x1404E90")]
	public void OnHealthIncreasedAfterDeath(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0x1404EB4", Offset = "0x1404EB4", VA = "0x1404EB4")]
	public void OnHealthDecreasedAfterDeath(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0x1404ED8", Offset = "0x1404ED8", VA = "0x1404ED8")]
	public void OnHealthIncreasedWhenInvincible(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0x1404EFC", Offset = "0x1404EFC", VA = "0x1404EFC")]
	public void OnHealthDecreasedWhenInvincible(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0x1404F20", Offset = "0x1404F20", VA = "0x1404F20")]
	public HealthStatusReceiver_UnityEventHook()
	{
	}
}
[Token(Token = "0x2000248")]
public class HealthStatusReceiver_VelocityImpact : HealthStatusReceiver
{
	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float m_velocityScaler_Y;

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0x140501C", Offset = "0x140501C", VA = "0x140501C", Slot = "8")]
	public override void RegisterResponse()
	{
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x1405108", Offset = "0x1405108", VA = "0x1405108", Slot = "9")]
	public override void UnregisterResponse()
	{
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x14051F4", Offset = "0x14051F4", VA = "0x14051F4")]
	public void OnApplyHealthStatusUpdate(HealthStatusInfo healthStatusReceiver)
	{
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x1405288", Offset = "0x1405288", VA = "0x1405288")]
	public HealthStatusReceiver_VelocityImpact()
	{
	}
}
[Token(Token = "0x2000249")]
[ExecuteInEditMode]
public class HealthStatusSetupTool : MonoBehaviour
{
	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Root GameObject")]
	public GameObject m_root;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("GameObject References List")]
	private List<GameObject> m_gameObjectsToAddHealthStatusComponent;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool m_populateListBasedOnRigidbody;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool m_addHealthStatusToGameObjectList;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Health Status References Settings")]
	[SerializeField]
	private List<HealthStatus> m_healthStatuses;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool m_calcReferencesRecursive;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	private bool m_hookupHealthStatusParentChildLinks;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	[SerializeField]
	private bool m_clearHealthStatusParentChildLinks;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	[Header("Collider Setup Settings")]
	[SerializeField]
	public bool m_manipulateCollider;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	public bool m_isTriggerValue;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[SerializeField]
	[Header("Rigidbody Setup Settings")]
	public bool m_manipulateRigidbody;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	[SerializeField]
	public bool m_usesGravityValue;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	[SerializeField]
	public bool m_isKinematicValue;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Health Status Response Setup Settings")]
	public bool m_addVelocityResponse;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	public bool m_removeVelocityResponse;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	[SerializeField]
	public bool m_addUnityEventHookResponse;

	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	[SerializeField]
	public bool m_removeUnityEventHookResponse;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	public bool m_addHealthChangedResponse;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[SerializeField]
	public bool m_removeHealthChangedResponse;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	[SerializeField]
	public bool m_addGibHelperResponse;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	[SerializeField]
	public bool m_removeGibHelperResponse;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Header("Status Effect Setup Settings")]
	public GameObject m_statusEffectReferencePrefab;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public bool m_addStatusEffectPrefabAsChild;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	[SerializeField]
	public bool m_useColliderCenterForPosition;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	[SerializeField]
	public bool m_removeStatusEffectPrefabAsChild;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	[SerializeField]
	[Header("WARNING: This option removes all things related to Health Status")]
	public bool m_clearAllHealthStatusComponents;

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0x1405298", Offset = "0x1405298", VA = "0x1405298")]
	[ContextMenu("ProcessObject")]
	public void ProcessObject()
	{
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0x14058F8", Offset = "0x14058F8", VA = "0x14058F8")]
	private void ProcessAddingHealthStatusToGameObjectList()
	{
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0x1405F10", Offset = "0x1405F10", VA = "0x1405F10")]
	private bool ProccessHealthStatusCleanUp(HealthStatus healthStatus)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0x14061A8", Offset = "0x14061A8", VA = "0x14061A8")]
	private void ProcessHealthStatusParentChildLinks(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0x1405FF4", Offset = "0x1405FF4", VA = "0x1405FF4")]
	private void ProcessColliders(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0x14060C0", Offset = "0x14060C0", VA = "0x14060C0")]
	private void ProcessRigidbody(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0x14061AC", Offset = "0x14061AC", VA = "0x14061AC")]
	private void ProcessVelocityResponse(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0x14062F8", Offset = "0x14062F8", VA = "0x14062F8")]
	private void ProcessHealthChangedResponse(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0x1406444", Offset = "0x1406444", VA = "0x1406444")]
	private void ProcessUnityEventHookResponse(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0x1406590", Offset = "0x1406590", VA = "0x1406590")]
	private void ProcessGibHelperResponse(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0x14066DC", Offset = "0x14066DC", VA = "0x14066DC")]
	private void ProcessStatusEffect(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x1405B20", Offset = "0x1405B20", VA = "0x1405B20")]
	private void GetHealthStatusReferenceRecursive(GameObject go)
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x14054F8", Offset = "0x14054F8", VA = "0x14054F8")]
	private void GetRigidbodyReferenceRecursive(GameObject go)
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x14066E0", Offset = "0x14066E0", VA = "0x14066E0")]
	public HealthStatusSetupTool()
	{
	}
}
[Token(Token = "0x200024A")]
public class HealthStatusUpdate_ColliderTrigger : Poolable, IStunnable
{
	[Token(Token = "0x200024B")]
	[CompilerGenerated]
	private sealed class <ReturnToPoolWithDelay>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HealthStatusUpdate_ColliderTrigger <>4__this;

		[Token(Token = "0x170001FB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x1407F14", Offset = "0x1407F14", VA = "0x1407F14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x1407F5C", Offset = "0x1407F5C", VA = "0x1407F5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x140741C", Offset = "0x140741C", VA = "0x140741C")]
		[DebuggerHidden]
		public <ReturnToPoolWithDelay>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x1407E50", Offset = "0x1407E50", VA = "0x1407E50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x1407E54", Offset = "0x1407E54", VA = "0x1407E54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x1407F1C", Offset = "0x1407F1C", VA = "0x1407F1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Health Status Base Damage On Impact")]
	[SerializeField]
	private HealthStatusInfo m_healthStatusInfo;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool m_targetRoot;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Range(0f, 1f)]
	[UnityEngine.Tooltip("If we hit a root health object, kill this proportion of its children at random. 0=none, 1=all, 0.5=half at random")]
	[SerializeField]
	private float m_killChildHealthRandomProportion;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Collider & Collision Setup")]
	[SerializeField]
	private LayerMask m_layerMask;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<HealthStatus> m_healthStatusesToIgnore;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private ApplyPushBackOnImpact m_pushBackEnemies;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[UnityEngine.Tooltip("Damage type of the explosion")]
	[SerializeField]
	private DamageType m_explosionDamageType;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Header("Impact Distance Falloff - Scales damage and output velocity based on distance  - Use if you want an explosion type behaviour")]
	[SerializeField]
	private bool m_scaleImpactBasedOnRange;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private AnimationCurve m_normalisedImpactFalloffCurve;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Min(0f)]
	[SerializeField]
	[FormerlySerializedAs("m_explosionRadius")]
	private float m_radius;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[Header("Impact Movement Velocity falloff - Scales damage and output velocity based on this objects movement velocity")]
	[SerializeField]
	private bool m_scaleImpactBasedOnMovementVelocity;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	[Header("Impact object Velocity falloff - Scales damage and output velocity based on the input objects movement velocity")]
	[SerializeField]
	private bool m_scaleImpactBasedOnInputVelocity;

	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private float m_minVelocityMagnitude;

	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	private float m_maxVelocityMagnitude;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private AnimationCurve m_movementMagnitudeDamageCurve;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float m_velocityScaler;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[Header("Pool Settings")]
	[SerializeField]
	private bool m_returnToPoolAfterTrigger;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private float m_poolReturnDelay;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Header("Misc")]
	private VrItem m_itemParent;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Stun Properties")]
	[SerializeField]
	private HitReactionConfig m_reactionConfig;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Header("Events")]
	[SerializeField]
	private UnityEvent OnPreEffect;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private UnityEvent OnEffect;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private new UnityEvent OnReturnToPool;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private VelocityTracker m_velocityTracker;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Collider[] s_hitColliderBuffer;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("Bolt Entity")]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private IOwner m_owner;

	[Token(Token = "0x170001F7")]
	public List<HealthStatus> healthStatusesToIgnore
	{
		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x14067B8", Offset = "0x14067B8", VA = "0x14067B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F8")]
	public HitReactionConfig ReactionProperties
	{
		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x14067C0", Offset = "0x14067C0", VA = "0x14067C0", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001F9")]
	public IOwner Owner
	{
		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x14067C8", Offset = "0x14067C8", VA = "0x14067C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001FA")]
	public BoltEntity Entity
	{
		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x1406854", Offset = "0x1406854", VA = "0x1406854")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000D66")]
	[Address(RVA = "0x140685C", Offset = "0x140685C", VA = "0x140685C", Slot = "12")]
	public virtual HealthStatusUpdate_ColliderTrigger CreateAndTrigger(Vector3 position, IOwner owner, [Optional] HealthStatus ignoreHealthStatus)
	{
		return null;
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0x1406984", Offset = "0x1406984", VA = "0x1406984")]
	protected HealthStatusUpdate_ColliderTrigger CreateFromPool(Vector3 position, IOwner owner)
	{
		return null;
	}

	[Token(Token = "0x6000D68")]
	[Address(RVA = "0x1406F08", Offset = "0x1406F08", VA = "0x1406F08")]
	protected void ReturnToPool()
	{
	}

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0x1406F74", Offset = "0x1406F74", VA = "0x1406F74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0x1407080", Offset = "0x1407080", VA = "0x1407080")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000D6B")]
	[Address(RVA = "0x140709C", Offset = "0x140709C", VA = "0x140709C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000D6C")]
	[Address(RVA = "0x1406ABC", Offset = "0x1406ABC", VA = "0x1406ABC")]
	[ContextMenu("Trigger Health Status Update")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000D6D")]
	[Address(RVA = "0x1407398", Offset = "0x1407398", VA = "0x1407398")]
	[IteratorStateMachine(typeof(<ReturnToPoolWithDelay>d__42))]
	private IEnumerator ReturnToPoolWithDelay(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000D6E")]
	[Address(RVA = "0x14070C4", Offset = "0x14070C4", VA = "0x14070C4")]
	private bool ProcessHitCollider(Collider other, bool fromTriggerHit)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D6F")]
	[Address(RVA = "0x1407444", Offset = "0x1407444", VA = "0x1407444", Slot = "13")]
	protected virtual void PerformHealthStatusUpdate(HealthStatus healthStatus, Collider collider, bool treatAsExplosion)
	{
	}

	[Token(Token = "0x6000D70")]
	[Address(RVA = "0x14078D8", Offset = "0x14078D8", VA = "0x14078D8")]
	private float GetRangedFalloffDamage(float distance)
	{
		return default(float);
	}

	[Token(Token = "0x6000D71")]
	[Address(RVA = "0x1407954", Offset = "0x1407954", VA = "0x1407954")]
	private Vector3 GetRangedFalloffVelocity(HealthStatus healthStatus, float distance)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D72")]
	[Address(RVA = "0x1407AE4", Offset = "0x1407AE4", VA = "0x1407AE4")]
	private Vector3 GetNormalisedHitDirection(HealthStatus healthStatus)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D73")]
	[Address(RVA = "0x1407804", Offset = "0x1407804", VA = "0x1407804")]
	private float GetRangedFalloffDistance(HealthStatus healthStatus)
	{
		return default(float);
	}

	[Token(Token = "0x6000D74")]
	[Address(RVA = "0x1407A0C", Offset = "0x1407A0C", VA = "0x1407A0C")]
	private float GetMovementVelocityDamage(Vector3 velocity)
	{
		return default(float);
	}

	[Token(Token = "0x6000D75")]
	[Address(RVA = "0x1407A98", Offset = "0x1407A98", VA = "0x1407A98")]
	private bool ShouldInstantKill(Vector3 velocity, HealthStatusInfo healthUpdate)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D76")]
	[Address(RVA = "0x1407C10", Offset = "0x1407C10", VA = "0x1407C10")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000D77")]
	[Address(RVA = "0x1407C60", Offset = "0x1407C60", VA = "0x1407C60")]
	public HealthStatusUpdate_ColliderTrigger()
	{
	}
}
[Token(Token = "0x200024C")]
public class HealthStatusUpdate_ColliderTriggerSpawner : CachedMonoBehaviour
{
	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private HealthStatusUpdate_ColliderTrigger m_prefab;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_spawnTransform;

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0x1407F64", Offset = "0x1407F64", VA = "0x1407F64")]
	public void CreateAndTrigger()
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0x1408080", Offset = "0x1408080", VA = "0x1408080")]
	public HealthStatusUpdate_ColliderTriggerSpawner()
	{
	}
}
[Token(Token = "0x200024D")]
public interface IHealthStatusEffector
{
}
[Token(Token = "0x200024E")]
public class KillInactiveEntity : CachedMonoBehaviour
{
	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private IAgent m_ownAgent;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_currentInactiveDuration;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 m_positionPreviousCheckInterval;

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_currentFramesPassed;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool m_isTimerRunning;

	[Token(Token = "0x170001FD")]
	private float m_significantMovementDistanceThresholdSquared
	{
		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x1408088", Offset = "0x1408088", VA = "0x1408088")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001FE")]
	private Multiplayer_GlobalEnemyConfig MultiplayerGlobalEnemyConfig
	{
		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x14080BC", Offset = "0x14080BC", VA = "0x14080BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000D83")]
	[Address(RVA = "0x1408150", Offset = "0x1408150", VA = "0x1408150")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D84")]
	[Address(RVA = "0x140824C", Offset = "0x140824C", VA = "0x140824C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D85")]
	[Address(RVA = "0x1408344", Offset = "0x1408344", VA = "0x1408344")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D86")]
	[Address(RVA = "0x140841C", Offset = "0x140841C", VA = "0x140841C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000D87")]
	[Address(RVA = "0x14084B8", Offset = "0x14084B8", VA = "0x14084B8")]
	private void CheckDistanceMoved()
	{
	}

	[Token(Token = "0x6000D88")]
	[Address(RVA = "0x1408664", Offset = "0x1408664", VA = "0x1408664")]
	private void OnDamageReport(DamageReport report)
	{
	}

	[Token(Token = "0x6000D89")]
	[Address(RVA = "0x1408334", Offset = "0x1408334", VA = "0x1408334")]
	public void ResetInactivity()
	{
	}

	[Token(Token = "0x6000D8A")]
	[Address(RVA = "0x1408650", Offset = "0x1408650", VA = "0x1408650")]
	private void StartInactivityTimer()
	{
	}

	[Token(Token = "0x6000D8B")]
	[Address(RVA = "0x14086D4", Offset = "0x14086D4", VA = "0x14086D4")]
	public KillInactiveEntity()
	{
	}
}
[Token(Token = "0x200024F")]
public abstract class StatusEffect : MonoBehaviour
{
	[Token(Token = "0x2000250")]
	public enum StatusEffectType
	{
		[Token(Token = "0x4000C80")]
		None,
		[Token(Token = "0x4000C81")]
		HealthRegeneration,
		[Token(Token = "0x4000C82")]
		Shield,
		[Token(Token = "0x4000C83")]
		Slowdown,
		[Token(Token = "0x4000C84")]
		Telekinesis,
		[Token(Token = "0x4000C85")]
		Fire,
		[Token(Token = "0x4000C86")]
		Falling,
		[Token(Token = "0x4000C87")]
		SacredRitePower,
		[Token(Token = "0x4000C88")]
		Pushback
	}

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected StatusEffectEventHooks m_statusEffectEventHooks;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected HealthStatus m_healthStatus;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected IOwner m_sendingOwner;

	[Token(Token = "0x170001FF")]
	public abstract StatusEffectType EffectType
	{
		[Token(Token = "0x6000D8C")]
		get;
	}

	[Token(Token = "0x17000200")]
	public abstract bool IsEffectActive
	{
		[Token(Token = "0x6000D8F")]
		get;
	}

	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0x14086DC", Offset = "0x14086DC", VA = "0x14086DC", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000D8E")]
	[Address(RVA = "0x14086E8", Offset = "0x14086E8", VA = "0x14086E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D90")]
	[Address(RVA = "0x14086F4", Offset = "0x14086F4", VA = "0x14086F4", Slot = "7")]
	public virtual void ApplyHealthStatusUpdate(HealthStatusInfo healthStatusUpdate)
	{
	}

	[Token(Token = "0x6000D91")]
	[Address(RVA = "0x1408840", Offset = "0x1408840", VA = "0x1408840", Slot = "8")]
	protected virtual void ApplyStatusEffectUpdate(StatusEffectValuePair statusEffectUpdateInfo, [Optional] IOwner owner)
	{
	}

	[Token(Token = "0x6000D92")]
	[Address(RVA = "0x140884C", Offset = "0x140884C", VA = "0x140884C", Slot = "9")]
	protected virtual void ProcessStatusEffect()
	{
	}

	[Token(Token = "0x6000D93")]
	[Address(RVA = "0x1408850", Offset = "0x1408850", VA = "0x1408850", Slot = "10")]
	public virtual void ResetStatusEffect()
	{
	}

	[Token(Token = "0x6000D94")]
	[Address(RVA = "0x1408874", Offset = "0x1408874", VA = "0x1408874")]
	public void SetHealthStatusReference(HealthStatus healthStatus)
	{
	}

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0x1408748", Offset = "0x1408748", VA = "0x1408748")]
	private StatusEffectValuePair GetRelevantStatusEffect(HealthStatusInfo healthStatusUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0x140887C", Offset = "0x140887C", VA = "0x140887C")]
	protected StatusEffect()
	{
	}
}
[Serializable]
[Token(Token = "0x2000251")]
public class StatusEffectValuePair
{
	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public StatusEffect.StatusEffectType m_statusEffectType;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_statusEffectValue;

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0x14089D8", Offset = "0x14089D8", VA = "0x14089D8")]
	public StatusEffectValuePair()
	{
	}
}
[Serializable]
[Token(Token = "0x2000252")]
public class StatusEffectEventHooks
{
	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent OnStatusEffectActionReset;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnStatusEffectActionStarted;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnStatusEffectActionUpdated;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnStatusEffectActionFinished;

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0x14088EC", Offset = "0x14088EC", VA = "0x14088EC")]
	public StatusEffectEventHooks()
	{
	}
}
[Serializable]
[Token(Token = "0x2000253")]
public class StatusEffectIdentifierPair
{
	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Identifier m_identifier;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StatusEffect.StatusEffectType m_statusEffectType;

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0x14089E0", Offset = "0x14089E0", VA = "0x14089E0")]
	public StatusEffectIdentifierPair()
	{
	}
}
[Token(Token = "0x2000254")]
public class StatusEffectRoot : MonoBehaviour
{
	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0x14089E8", Offset = "0x14089E8", VA = "0x14089E8")]
	public StatusEffectRoot()
	{
	}
}
[Token(Token = "0x2000255")]
public class StatusEffect_Falling : StatusEffect
{
	[Serializable]
	[Token(Token = "0x2000256")]
	private class FallDamageMapping
	{
		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_name;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Min(0f)]
		public float m_fallDistance;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HealthStatusInfo m_healthAdjust;

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x1408FE8", Offset = "0x1408FE8", VA = "0x1408FE8")]
		public FallDamageMapping()
		{
		}
	}

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<FallDamageMapping> m_fallTimeDamageSpec;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_isFallInProgress;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_fallStartYPosition;

	[Token(Token = "0x17000201")]
	public override StatusEffectType EffectType
	{
		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x1408BE4", Offset = "0x1408BE4", VA = "0x1408BE4", Slot = "4")]
		get
		{
			return default(StatusEffectType);
		}
	}

	[Token(Token = "0x17000202")]
	public override bool IsEffectActive
	{
		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x1408BEC", Offset = "0x1408BEC", VA = "0x1408BEC", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0x14089F0", Offset = "0x14089F0", VA = "0x14089F0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0x1408ADC", Offset = "0x1408ADC", VA = "0x1408ADC")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0x1408BC8", Offset = "0x1408BC8", VA = "0x1408BC8", Slot = "10")]
	public override void ResetStatusEffect()
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0x1408BF4", Offset = "0x1408BF4", VA = "0x1408BF4", Slot = "9")]
	protected override void ProcessStatusEffect()
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0x1408D60", Offset = "0x1408D60", VA = "0x1408D60")]
	private HealthStatusInfo GetFallDamageInfo(float fallDistance)
	{
		return null;
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0x1408E7C", Offset = "0x1408E7C", VA = "0x1408E7C")]
	private void UpdateHealth(HealthStatusInfo healthAdjust)
	{
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0x1408F64", Offset = "0x1408F64", VA = "0x1408F64")]
	public StatusEffect_Falling()
	{
	}
}
[Token(Token = "0x2000257")]
public class StatusEffect_Fire : StatusEffect
{
	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform[] m_predefinedFlamableParts;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HealthStatusUpdate_ColliderTrigger m_fireSpread;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_startFireValue;

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float m_fireValueLimitBeforeIgnite;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float m_maxFireValue;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float m_fireUpdateFrequency;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float m_fireValueReductionRate;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float m_selfDamageAmount;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float? m_lastTimeDamaged;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_currentFireValue;

	[Token(Token = "0x17000203")]
	public override StatusEffectType EffectType
	{
		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1409364", Offset = "0x1409364", VA = "0x1409364", Slot = "4")]
		get
		{
			return default(StatusEffectType);
		}
	}

	[Token(Token = "0x17000204")]
	public override bool IsEffectActive
	{
		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x140936C", Offset = "0x140936C", VA = "0x140936C", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0x1409084", Offset = "0x1409084", VA = "0x1409084", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0x14090AC", Offset = "0x14090AC", VA = "0x14090AC")]
	private void InitFireSystem()
	{
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0x14092D8", Offset = "0x14092D8", VA = "0x14092D8")]
	private void Init()
	{
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0x1409380", Offset = "0x1409380", VA = "0x1409380", Slot = "8")]
	protected override void ApplyStatusEffectUpdate(StatusEffectValuePair statusEffectUpdateInfo, [Optional] IOwner owner)
	{
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0x1409438", Offset = "0x1409438", VA = "0x1409438", Slot = "9")]
	protected override void ProcessStatusEffect()
	{
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0x140969C", Offset = "0x140969C", VA = "0x140969C", Slot = "10")]
	public override void ResetStatusEffect()
	{
	}

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0x14095C4", Offset = "0x14095C4", VA = "0x14095C4")]
	protected void DamageSelf()
	{
	}

	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0x14096C0", Offset = "0x14096C0", VA = "0x14096C0")]
	public StatusEffect_Fire()
	{
	}
}
[Token(Token = "0x2000258")]
public class StatusEffect_HealthRegeneration : StatusEffect
{
	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_damageCooldownTime;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_healthRegenerationSpeed;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool m_allowRegenAfterDeath;

	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_prevIncreasedHealth;

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_accumulatedHealth;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_accumulatedHealthThreshold;

	[Token(Token = "0x17000205")]
	public float CoolDownTime
	{
		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x140972C", Offset = "0x140972C", VA = "0x140972C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x1409734", Offset = "0x1409734", VA = "0x1409734")]
		set
		{
		}
	}

	[Token(Token = "0x17000206")]
	public float RegenSpeed
	{
		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x140973C", Offset = "0x140973C", VA = "0x140973C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x1409744", Offset = "0x1409744", VA = "0x1409744")]
		set
		{
		}
	}

	[Token(Token = "0x17000207")]
	public override StatusEffectType EffectType
	{
		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x1409764", Offset = "0x1409764", VA = "0x1409764", Slot = "4")]
		get
		{
			return default(StatusEffectType);
		}
	}

	[Token(Token = "0x17000208")]
	public override bool IsEffectActive
	{
		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x140976C", Offset = "0x140976C", VA = "0x140976C", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DB3")]
	[Address(RVA = "0x140974C", Offset = "0x140974C", VA = "0x140974C", Slot = "10")]
	public override void ResetStatusEffect()
	{
	}

	[Token(Token = "0x6000DB6")]
	[Address(RVA = "0x14098F8", Offset = "0x14098F8", VA = "0x14098F8", Slot = "9")]
	protected override void ProcessStatusEffect()
	{
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x140997C", Offset = "0x140997C", VA = "0x140997C")]
	private void IncreaseHealth()
	{
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0x1409A9C", Offset = "0x1409A9C", VA = "0x1409A9C")]
	public StatusEffect_HealthRegeneration()
	{
	}
}
[Token(Token = "0x2000259")]
public class StatusEffect_Pushback : StatusEffect
{
	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("The range of the pushback effect.")]
	[SerializeField]
	[Min(0f)]
	private float m_range;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("The layer mask used for overlap checks. Note that agents are gathered in a separate pass and should not be included here. You should also avoid including the layers of objects you don't want pushed.")]
	[SerializeField]
	private LayerMask m_overlapLayerMask;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("Normalised strength of pushback over distance (Distance normalised with Range variable)")]
	[SerializeField]
	private AnimationCurve m_strengthFalloff;

	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("Explosive force against generic rigid bodies. Separate from the curve above.")]
	private float m_genericRigidBodyExplosionForce;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("If ticked, take the mass of pushed rigid bodies into account so heavier ones don't move as far as lighter ones. If unticked, ignore the mass so everything gets affected equally.")]
	[SerializeField]
	private bool m_genericRigidBodyConsiderMass;

	[Token(Token = "0x4000CAC")]
	private const string c_pushbackObstacleTag = "PushbackObstacle";

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private HashSet<Rigidbody> m_hitPushbackObstacles;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_pushbackActive;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Agent[] s_agentLookupBuffer;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Collider[] s_colliderLookupBuffer;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static HashSet<Rigidbody> s_processedRigidbodySet;

	[Token(Token = "0x17000209")]
	public override StatusEffectType EffectType
	{
		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x1409AB0", Offset = "0x1409AB0", VA = "0x1409AB0", Slot = "4")]
		get
		{
			return default(StatusEffectType);
		}
	}

	[Token(Token = "0x1700020A")]
	public override bool IsEffectActive
	{
		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x1409CB8", Offset = "0x1409CB8", VA = "0x1409CB8", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0x1409AB8", Offset = "0x1409AB8", VA = "0x1409AB8", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0x1409BC0", Offset = "0x1409BC0", VA = "0x1409BC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0x1409CC0", Offset = "0x1409CC0", VA = "0x1409CC0", Slot = "8")]
	protected override void ApplyStatusEffectUpdate(StatusEffectValuePair statusEffectUpdateInfo, [Optional] IOwner owner)
	{
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0x140A904", Offset = "0x140A904", VA = "0x140A904")]
	private float GetPushbackStrengthAgainstPushable(Vector3 originPosition, Vector3 pushablePosition, out Vector3 impactDirection)
	{
		return default(float);
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0x140A9E4", Offset = "0x140A9E4", VA = "0x140A9E4")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0x140ABB4", Offset = "0x140ABB4", VA = "0x140ABB4", Slot = "9")]
	protected override void ProcessStatusEffect()
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0x140ABB8", Offset = "0x140ABB8", VA = "0x140ABB8", Slot = "10")]
	public override void ResetStatusEffect()
	{
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0x140ABBC", Offset = "0x140ABBC", VA = "0x140ABBC")]
	public StatusEffect_Pushback()
	{
	}
}
[Token(Token = "0x200025A")]
public class StatusEffect_Shield : StatusEffect
{
	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_invincibilityTime;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool m_useUnscaledTime;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_invincibilityTimeRemaining;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ulong m_damageReceivedCountDuringEffect;

	[Token(Token = "0x1700020B")]
	public override StatusEffectType EffectType
	{
		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x140AD84", Offset = "0x140AD84", VA = "0x140AD84", Slot = "4")]
		get
		{
			return default(StatusEffectType);
		}
	}

	[Token(Token = "0x1700020C")]
	public override bool IsEffectActive
	{
		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x140AD8C", Offset = "0x140AD8C", VA = "0x140AD8C", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DC6")]
	[Address(RVA = "0x140ADA8", Offset = "0x140ADA8", VA = "0x140ADA8", Slot = "8")]
	protected override void ApplyStatusEffectUpdate(StatusEffectValuePair statusEffectUpdateInfo, [Optional] IOwner owner)
	{
	}

	[Token(Token = "0x6000DC7")]
	[Address(RVA = "0x140B080", Offset = "0x140B080", VA = "0x140B080")]
	private void ActionHealthDecreasedWhenInvincible(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x140B084", Offset = "0x140B084", VA = "0x140B084", Slot = "9")]
	protected override void ProcessStatusEffect()
	{
	}

	[Token(Token = "0x6000DC9")]
	[Address(RVA = "0x140ADD4", Offset = "0x140ADD4", VA = "0x140ADD4")]
	private void TriggerShield(bool active, float effectValue = 0f)
	{
	}

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0x140B110", Offset = "0x140B110", VA = "0x140B110", Slot = "10")]
	public override void ResetStatusEffect()
	{
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0x140B130", Offset = "0x140B130", VA = "0x140B130")]
	[ContextMenu("Trigger Invincibility Shield")]
	private void TriggerShieldDebug()
	{
	}

	[Token(Token = "0x6000DCC")]
	[Address(RVA = "0x140B1AC", Offset = "0x140B1AC", VA = "0x140B1AC")]
	public StatusEffect_Shield()
	{
	}
}
[Token(Token = "0x200025B")]
public class StatusEffect_SlowMotion : StatusEffect
{
	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_slowMotionTime;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_slowMotionRechargeTime;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Velocity-based Movement Mode")]
	[SerializeField]
	private float m_velocityToTimeModifier;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float m_minimumTimescale;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_maximumTimescale;

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool m_slowMotionActive;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_slowMotionTimeRemaining;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_rechargeTime;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Space]
	public float m_timeScale;

	[Token(Token = "0x1700020D")]
	public float TotalUnscaledDuration
	{
		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x140B1B8", Offset = "0x140B1B8", VA = "0x140B1B8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700020E")]
	public float NormalizedSlowMo
	{
		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x140B1C0", Offset = "0x140B1C0", VA = "0x140B1C0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700020F")]
	public override StatusEffectType EffectType
	{
		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x140B588", Offset = "0x140B588", VA = "0x140B588", Slot = "4")]
		get
		{
			return default(StatusEffectType);
		}
	}

	[Token(Token = "0x17000210")]
	public override bool IsEffectActive
	{
		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x140B590", Offset = "0x140B590", VA = "0x140B590", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DCF")]
	[Address(RVA = "0x140B1C8", Offset = "0x140B1C8", VA = "0x140B1C8")]
	private void SetTimeScale(float value)
	{
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x140B238", Offset = "0x140B238", VA = "0x140B238")]
	private bool CanUseSlowMotion()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0x140B260", Offset = "0x140B260", VA = "0x140B260")]
	private void TriggerSlowMotion(bool active)
	{
	}

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x140B32C", Offset = "0x140B32C", VA = "0x140B32C")]
	private void UpdateSlowMotion(float normalisedProgress)
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0x140B598", Offset = "0x140B598", VA = "0x140B598", Slot = "8")]
	protected override void ApplyStatusEffectUpdate(StatusEffectValuePair statusEffectUpdateInfo, [Optional] IOwner owner)
	{
	}

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0x140B5FC", Offset = "0x140B5FC", VA = "0x140B5FC", Slot = "9")]
	protected override void ProcessStatusEffect()
	{
	}

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0x140B6B8", Offset = "0x140B6B8", VA = "0x140B6B8", Slot = "10")]
	public override void ResetStatusEffect()
	{
	}

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0x140B6D8", Offset = "0x140B6D8", VA = "0x140B6D8")]
	[ContextMenu("Trigger Slow Motion")]
	private void TriggerSlowMotion()
	{
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0x140B754", Offset = "0x140B754", VA = "0x140B754")]
	public StatusEffect_SlowMotion()
	{
	}
}
[Token(Token = "0x200025C")]
public class SampleStates : MonoBehaviour
{
	[Token(Token = "0x200025D")]
	public class SampleStates_BaseState : NestedState<SampleStates>
	{
		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x140B77C", Offset = "0x140B77C", VA = "0x140B77C", Slot = "12")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x140B784", Offset = "0x140B784", VA = "0x140B784", Slot = "13")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x140B78C", Offset = "0x140B78C", VA = "0x140B78C", Slot = "14")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x140B794", Offset = "0x140B794", VA = "0x140B794")]
		public SampleStates_BaseState()
		{
		}
	}

	[Token(Token = "0x200025E")]
	public class SampleStates_stateA : SampleStates_BaseState
	{
		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x140B7DC", Offset = "0x140B7DC", VA = "0x140B7DC")]
		public SampleStates_stateA()
		{
		}
	}

	[Token(Token = "0x200025F")]
	public class SampleStates_stateB : SampleStates_BaseState
	{
		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x140B7E0", Offset = "0x140B7E0", VA = "0x140B7E0")]
		public SampleStates_stateB()
		{
		}
	}

	[Token(Token = "0x2000260")]
	public class SampleStates_stateC : SampleStates_BaseState
	{
		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x140B7E4", Offset = "0x140B7E4", VA = "0x140B7E4")]
		public SampleStates_stateC()
		{
		}
	}

	[Token(Token = "0x2000261")]
	public class SampleStates_stateD : SampleStates_BaseState
	{
		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x140B7E8", Offset = "0x140B7E8", VA = "0x140B7E8")]
		public SampleStates_stateD()
		{
		}
	}

	[Token(Token = "0x2000262")]
	public class SampleStates_stateE : SampleStates_BaseState
	{
		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x140B7EC", Offset = "0x140B7EC", VA = "0x140B7EC")]
		public SampleStates_stateE()
		{
		}
	}

	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0x140B774", Offset = "0x140B774", VA = "0x140B774")]
	public SampleStates()
	{
	}
}
[Token(Token = "0x2000263")]
[RequireComponent(typeof(TweenerGroup))]
public class Door : MonoBehaviour, IPersistable
{
	[Token(Token = "0x2000264")]
	public enum DoorState
	{
		[Token(Token = "0x4000CC8")]
		Open,
		[Token(Token = "0x4000CC9")]
		Closed,
		[Token(Token = "0x4000CCA")]
		Opening,
		[Token(Token = "0x4000CCB")]
		Closing
	}

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_startsOpen;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private DoorState m_doorState;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TweenerGroup m_tweenerGroup;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnBeginOpening;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnFinishOpening;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnBeginClosing;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnFinishClosing;

	[Token(Token = "0x6000DE4")]
	[Address(RVA = "0x140B7F0", Offset = "0x140B7F0", VA = "0x140B7F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DE5")]
	[Address(RVA = "0x140B8FC", Offset = "0x140B8FC", VA = "0x140B8FC")]
	private void SetState(DoorState state)
	{
	}

	[Token(Token = "0x6000DE6")]
	[Address(RVA = "0x140B958", Offset = "0x140B958", VA = "0x140B958")]
	public void Open()
	{
	}

	[Token(Token = "0x6000DE7")]
	[Address(RVA = "0x140BA84", Offset = "0x140BA84", VA = "0x140BA84")]
	public void Close()
	{
	}

	[Token(Token = "0x6000DE8")]
	[Address(RVA = "0x140B86C", Offset = "0x140B86C", VA = "0x140B86C")]
	private void SetOpen()
	{
	}

	[Token(Token = "0x6000DE9")]
	[Address(RVA = "0x140B8B4", Offset = "0x140B8B4", VA = "0x140B8B4")]
	private void SetClosed()
	{
	}

	[Token(Token = "0x6000DEA")]
	[Address(RVA = "0x140BBB0", Offset = "0x140BBB0", VA = "0x140BBB0")]
	public bool IsFinishedMoving()
	{
		return default(bool);
	}

	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0x140BBC4", Offset = "0x140BBC4", VA = "0x140BBC4", Slot = "4")]
	public string SerializeState()
	{
		return null;
	}

	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0x140BC48", Offset = "0x140BC48", VA = "0x140BC48", Slot = "5")]
	public void DeserializeState(string state)
	{
	}

	[Token(Token = "0x6000DED")]
	[Address(RVA = "0x140BCE0", Offset = "0x140BCE0", VA = "0x140BCE0")]
	public Door()
	{
	}
}
[Token(Token = "0x2000265")]
[CreateAssetMenu(fileName = "LoreData", menuName = "Battle Sister/Data/Lore Data", order = 1)]
public class LoreData : ScriptableObject
{
	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string m_locId;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Sprite m_optionalSprite;

	[Token(Token = "0x17000211")]
	public string LocId
	{
		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x140BD24", Offset = "0x140BD24", VA = "0x140BD24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000212")]
	public Sprite OptionalSprite
	{
		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x140BD2C", Offset = "0x140BD2C", VA = "0x140BD2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DF2")]
	[Address(RVA = "0x140BD34", Offset = "0x140BD34", VA = "0x140BD34")]
	public LoreData()
	{
	}
}
[Token(Token = "0x2000266")]
public class LoreDisplay : TrackedPersistable
{
	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("LoreData object that holds the text to display")]
	[SerializeField]
	[Header("References")]
	private LoreData m_data;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Transform m_contentParent;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected TMP_Text m_textObject;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected SpriteRenderer m_optionalSpriteRenderer;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected VrItem m_item;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Header("Animation")]
	protected Animation m_animation;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected AnimationClip m_showAnim;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected AnimationClip m_hideAnim;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent OnLoreShow;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent OnLoreHide;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected string m_locId;

	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected Sprite m_optionalSprite;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected bool m_displayingLore;

	[Token(Token = "0x6000DF3")]
	[Address(RVA = "0x140BD3C", Offset = "0x140BD3C", VA = "0x140BD3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DF4")]
	[Address(RVA = "0x140BFB0", Offset = "0x140BFB0", VA = "0x140BFB0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DF5")]
	[Address(RVA = "0x140C1A8", Offset = "0x140C1A8", VA = "0x140C1A8")]
	public void DisplayLore()
	{
	}

	[Token(Token = "0x6000DF6")]
	[Address(RVA = "0x140C300", Offset = "0x140C300", VA = "0x140C300")]
	public void HideLore()
	{
	}

	[Token(Token = "0x6000DF7")]
	[Address(RVA = "0x140C34C", Offset = "0x140C34C", VA = "0x140C34C")]
	public LoreDisplay()
	{
	}
}
[Token(Token = "0x2000267")]
public class LoreDisplay_Tablet : LoreDisplay
{
	[Token(Token = "0x6000DF8")]
	[Address(RVA = "0x140C354", Offset = "0x140C354", VA = "0x140C354")]
	public LoreDisplay_Tablet()
	{
	}
}
[Token(Token = "0x2000268")]
public class TriggerPlayMakerEvent : MonoBehaviour
{
	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PlayMakerFSM m_fsm;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string m_eventToCall;

	[Token(Token = "0x6000DF9")]
	[Address(RVA = "0x140C35C", Offset = "0x140C35C", VA = "0x140C35C")]
	public void FireEvent()
	{
	}

	[Token(Token = "0x6000DFA")]
	[Address(RVA = "0x140C3C0", Offset = "0x140C3C0", VA = "0x140C3C0")]
	public TriggerPlayMakerEvent()
	{
	}
}
[Token(Token = "0x2000269")]
public class WindowBarricade : MonoBehaviour
{
	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject m_intactArt;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_lightdamagedArt;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject m_damagedArt;

	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject m_heavydamagedArt;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject m_destroyedArt;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnDestroyed;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject m_intactCollision;

	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_lightdamagedCollision;

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_damagedCollision;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject m_heavydamagedCollision;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject m_destroyedCollision;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float normalizedHealth;

	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0x140C418", Offset = "0x140C418", VA = "0x140C418")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0x140C4F4", Offset = "0x140C4F4", VA = "0x140C4F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0x140C9F4", Offset = "0x140C9F4", VA = "0x140C9F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0x140CC00", Offset = "0x140CC00", VA = "0x140CC00")]
	private void OnHealthChanged(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0x140C700", Offset = "0x140C700", VA = "0x140C700")]
	private void UpdateArt()
	{
	}

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0x140C41C", Offset = "0x140C41C", VA = "0x140C41C")]
	private void SetIntact()
	{
	}

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0x140CE8C", Offset = "0x140CE8C", VA = "0x140CE8C")]
	private void SetLightDamaged()
	{
	}

	[Token(Token = "0x6000E02")]
	[Address(RVA = "0x140CDB4", Offset = "0x140CDB4", VA = "0x140CDB4")]
	private void SetDamaged()
	{
	}

	[Token(Token = "0x6000E03")]
	[Address(RVA = "0x140CCDC", Offset = "0x140CCDC", VA = "0x140CCDC")]
	private void SetHeavyDamaged()
	{
	}

	[Token(Token = "0x6000E04")]
	[Address(RVA = "0x140CC04", Offset = "0x140CC04", VA = "0x140CC04")]
	private void SetDestroyed()
	{
	}

	[Token(Token = "0x6000E05")]
	[Address(RVA = "0x140CF64", Offset = "0x140CF64", VA = "0x140CF64")]
	public WindowBarricade()
	{
	}
}
[Token(Token = "0x200026A")]
public class Zipline : CachedMonoBehaviour
{
	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("The holdable handle to be moved along the zipline. You should save this in the initial position for the handle.")]
	[SerializeField]
	private Transform m_handle;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("The amount of time it takes for the zipline handle to move all the way from one end of the zipline to the other (or, how long it takes for the ease to complete).")]
	[Min(0f)]
	[SerializeField]
	private float m_movementDuration;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("The position of the destination relative to our local space.")]
	[SerializeField]
	private Vector3 m_destinationPoint;

	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Easing functions: https://easings.net/en")]
	[UnityEngine.Tooltip("The easing function to use, which describes how the zipline handle will move along the zipline.")]
	[SerializeField]
	private PennerEasing.Equations m_easeFunction;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PennerEasing m_easer;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_easeProgress;

	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool m_movingForwards;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 m_originPoint;

	[Token(Token = "0x6000E06")]
	[Address(RVA = "0x140CF74", Offset = "0x140CF74", VA = "0x140CF74")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E07")]
	[Address(RVA = "0x140D074", Offset = "0x140D074", VA = "0x140D074")]
	public void MoveForwards()
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0x140D080", Offset = "0x140D080", VA = "0x140D080")]
	public void MoveBackwards()
	{
	}

	[Token(Token = "0x6000E09")]
	[Address(RVA = "0x140D088", Offset = "0x140D088", VA = "0x140D088")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0x140D220", Offset = "0x140D220", VA = "0x140D220")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000E0B")]
	[Address(RVA = "0x140D3A4", Offset = "0x140D3A4", VA = "0x140D3A4")]
	public Zipline()
	{
	}
}
[Token(Token = "0x200026B")]
public class HideableNonVrItem : CachedMonoBehaviour, IHideable, ICanHide, IPoolable
{
	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_hideDistance;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private BoltEntity m_entity;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SectorMember m_sectorMember;

	[Token(Token = "0x17000213")]
	private bool IHideable.isVisible
	{
		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x140D3BC", Offset = "0x140D3BC", VA = "0x140D3BC", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000214")]
	public virtual float hideDistance
	{
		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x140D4D0", Offset = "0x140D4D0", VA = "0x140D4D0", Slot = "16")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000215")]
	private Sector sector
	{
		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x140D450", Offset = "0x140D450", VA = "0x140D450")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000216")]
	private BoltEntity IHideable.Entity
	{
		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x140D4D8", Offset = "0x140D4D8", VA = "0x140D4D8", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000217")]
	public bool canHide
	{
		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x140D4E0", Offset = "0x140D4E0", VA = "0x140D4E0", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0x140D5B8", Offset = "0x140D5B8", VA = "0x140D5B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0x140D678", Offset = "0x140D678", VA = "0x140D678")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0x140D680", Offset = "0x140D680", VA = "0x140D680")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0x140D688", Offset = "0x140D688", VA = "0x140D688")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0x140D690", Offset = "0x140D690", VA = "0x140D690", Slot = "15")]
	private void PT.IPoolable.OnAddedToPool()
	{
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0x140D698", Offset = "0x140D698", VA = "0x140D698", Slot = "13")]
	private void PT.IPoolable.OnAllocFromPool()
	{
	}

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0x140D69C", Offset = "0x140D69C", VA = "0x140D69C", Slot = "14")]
	private void PT.IPoolable.OnReturnToPool()
	{
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0x140D6A4", Offset = "0x140D6A4", VA = "0x140D6A4", Slot = "9")]
	private void IHideable.Hide()
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0x140D748", Offset = "0x140D748", VA = "0x140D748", Slot = "10")]
	private void IHideable.Show()
	{
	}

	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0x140D7EC", Offset = "0x140D7EC", VA = "0x140D7EC")]
	public HideableNonVrItem()
	{
	}

	[SpecialName]
	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0x140D7FC", Offset = "0x140D7FC", VA = "0x140D7FC", Slot = "5")]
	private GameObject IHideable.get_gameObject()
	{
		return null;
	}

	[SpecialName]
	[Token(Token = "0x6000E1C")]
	[Address(RVA = "0x140D804", Offset = "0x140D804", VA = "0x140D804", Slot = "6")]
	private Transform IHideable.get_cachedTransform()
	{
		return null;
	}

	[SpecialName]
	[Token(Token = "0x6000E1D")]
	[Address(RVA = "0x140D80C", Offset = "0x140D80C", VA = "0x140D80C", Slot = "12")]
	private GameObject PT.IPoolable.get_gameObject()
	{
		return null;
	}
}
[Token(Token = "0x200026C")]
public interface ICanHide
{
	[Token(Token = "0x17000218")]
	bool canHide
	{
		[Token(Token = "0x6000E1E")]
		get;
	}
}
[Token(Token = "0x200026D")]
public interface IGunOwner
{
	[Token(Token = "0x17000219")]
	VrGun PrimaryGun
	{
		[Token(Token = "0x6000E1F")]
		get;
	}

	[Token(Token = "0x1700021A")]
	List<VrGun> Guns
	{
		[Token(Token = "0x6000E20")]
		get;
	}

	[Token(Token = "0x1700021B")]
	bool CheckLineOfSight
	{
		[Token(Token = "0x6000E21")]
		get;
	}

	[Token(Token = "0x6000E22")]
	void StartFiring(int gunIndex, bool shouldCheckLineOfSight);

	[Token(Token = "0x6000E23")]
	void StopFiring(int gunIndex);

	[Token(Token = "0x6000E24")]
	bool IsFiring(int gunIndex);

	[Token(Token = "0x6000E25")]
	bool HasGunAtIndex(int gunIndex);

	[Token(Token = "0x6000E26")]
	VrGun GetGunAtIndex(int gunIndex);

	[Token(Token = "0x6000E27")]
	VrGun.ShootingAvailability GetGunShootingAvailabilityAtIndex(int gunIndex);

	[Token(Token = "0x6000E28")]
	bool HasClearLineOfFireToPoint(Vector3 targetPoint, int gunIndex, bool checkGunOverlapOnly = false);
}
[Token(Token = "0x200026E")]
public interface IHideable : ICanHide, IPoolable
{
	[Token(Token = "0x1700021C")]
	bool isVisible
	{
		[Token(Token = "0x6000E29")]
		get;
	}

	[Token(Token = "0x1700021D")]
	new GameObject gameObject
	{
		[Token(Token = "0x6000E2A")]
		get;
	}

	[Token(Token = "0x1700021E")]
	Transform cachedTransform
	{
		[Token(Token = "0x6000E2B")]
		get;
	}

	[Token(Token = "0x1700021F")]
	BoltEntity Entity
	{
		[Token(Token = "0x6000E2C")]
		get;
	}

	[Token(Token = "0x17000220")]
	float hideDistance
	{
		[Token(Token = "0x6000E2D")]
		get;
	}

	[Token(Token = "0x6000E2E")]
	void Hide();

	[Token(Token = "0x6000E2F")]
	void Show();
}
[Token(Token = "0x200026F")]
public interface IAxisInput
{
	[Token(Token = "0x17000221")]
	Vector2? value
	{
		[Token(Token = "0x6000E30")]
		get;
	}
}
[Token(Token = "0x2000270")]
public interface IButtonInput
{
	[Token(Token = "0x17000222")]
	bool Value
	{
		[Token(Token = "0x6000E31")]
		get;
	}

	[Token(Token = "0x17000223")]
	bool Down
	{
		[Token(Token = "0x6000E32")]
		get;
	}

	[Token(Token = "0x17000224")]
	bool Up
	{
		[Token(Token = "0x6000E33")]
		get;
	}
}
[Token(Token = "0x2000271")]
public interface IHandInput
{
	[Token(Token = "0x17000225")]
	ITriggerInput gripTrigger
	{
		[Token(Token = "0x6000E34")]
		get;
	}

	[Token(Token = "0x17000226")]
	ITriggerInput mainTrigger
	{
		[Token(Token = "0x6000E35")]
		get;
	}

	[Token(Token = "0x17000227")]
	IButtonInput primaryButton
	{
		[Token(Token = "0x6000E36")]
		get;
	}

	[Token(Token = "0x17000228")]
	IButtonInput secondaryButton
	{
		[Token(Token = "0x6000E37")]
		get;
	}

	[Token(Token = "0x17000229")]
	IButtonInput menuButton
	{
		[Token(Token = "0x6000E38")]
		get;
	}

	[Token(Token = "0x1700022A")]
	IButtonInput stickButton
	{
		[Token(Token = "0x6000E39")]
		get;
	}

	[Token(Token = "0x1700022B")]
	float ThumbTouchValue
	{
		[Token(Token = "0x6000E3A")]
		get;
	}

	[Token(Token = "0x1700022C")]
	IAxisInput stickAxis
	{
		[Token(Token = "0x6000E3B")]
		get;
	}
}
[Token(Token = "0x2000272")]
public static class IHandInputExtensionMethods
{
	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0x140D814", Offset = "0x140D814", VA = "0x140D814")]
	public static bool GetThumbPrimaryButtonValue(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E3D")]
	[Address(RVA = "0x140D928", Offset = "0x140D928", VA = "0x140D928")]
	public static bool GetThumbPrimaryButtonValueDown(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0x140DA40", Offset = "0x140DA40", VA = "0x140DA40")]
	public static bool GetThumbPrimaryButtonValueUp(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E3F")]
	[Address(RVA = "0x140DB58", Offset = "0x140DB58", VA = "0x140DB58")]
	public static bool GetThumbSecondaryButtonValue(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0x140DC6C", Offset = "0x140DC6C", VA = "0x140DC6C")]
	public static bool GetThumbSecondaryButtonValueDown(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0x140DD84", Offset = "0x140DD84", VA = "0x140DD84")]
	public static bool GetThumbSecondaryButtonValueUp(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0x140DE9C", Offset = "0x140DE9C", VA = "0x140DE9C")]
	public static bool GetMenuButtonValue(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0x140DFB0", Offset = "0x140DFB0", VA = "0x140DFB0")]
	public static bool GetMenuButtonValueDown(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0x140E0C8", Offset = "0x140E0C8", VA = "0x140E0C8")]
	public static bool GetMenuButtonValueUp(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E45")]
	[Address(RVA = "0x140E1E0", Offset = "0x140E1E0", VA = "0x140E1E0")]
	public static bool GetThumbClickValue(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E46")]
	[Address(RVA = "0x140E2F4", Offset = "0x140E2F4", VA = "0x140E2F4")]
	public static bool GetThumbClickValueDown(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0x140E40C", Offset = "0x140E40C", VA = "0x140E40C")]
	public static bool GetThumbClickValueUp(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E48")]
	[Address(RVA = "0x140E524", Offset = "0x140E524", VA = "0x140E524")]
	public static float GetGripTriggerValue(this IHandInput input)
	{
		return default(float);
	}

	[Token(Token = "0x6000E49")]
	[Address(RVA = "0x140E634", Offset = "0x140E634", VA = "0x140E634")]
	public static bool GetGripTriggerValueDown(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0x140E748", Offset = "0x140E748", VA = "0x140E748")]
	public static bool GetGripTriggerValueUp(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0x140E85C", Offset = "0x140E85C", VA = "0x140E85C")]
	public static bool GetGripTriggerValueHeld(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0x140E970", Offset = "0x140E970", VA = "0x140E970")]
	public static float GetMainTriggerValue(this IHandInput input)
	{
		return default(float);
	}

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0x140EA84", Offset = "0x140EA84", VA = "0x140EA84")]
	public static bool GetMainTriggerValueDown(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0x140EB9C", Offset = "0x140EB9C", VA = "0x140EB9C")]
	public static bool GetMainTriggerValueUp(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E4F")]
	[Address(RVA = "0x140ECB4", Offset = "0x140ECB4", VA = "0x140ECB4")]
	public static bool GetMainTriggerValueHeld(this IHandInput input)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E50")]
	[Address(RVA = "0x140EDCC", Offset = "0x140EDCC", VA = "0x140EDCC")]
	public static Vector2? GetThumbStickValue(this IHandInput input)
	{
		return null;
	}

	[Token(Token = "0x6000E51")]
	[Address(RVA = "0x140EEE8", Offset = "0x140EEE8", VA = "0x140EEE8")]
	public static float GetThumbTouchValue(this IHandInput input)
	{
		return default(float);
	}
}
[Token(Token = "0x2000273")]
public interface ITriggerInput
{
	[Token(Token = "0x1700022D")]
	float Value
	{
		[Token(Token = "0x6000E52")]
		get;
	}

	[Token(Token = "0x1700022E")]
	bool Down
	{
		[Token(Token = "0x6000E53")]
		get;
	}

	[Token(Token = "0x1700022F")]
	bool Up
	{
		[Token(Token = "0x6000E54")]
		get;
	}

	[Token(Token = "0x17000230")]
	bool Held
	{
		[Token(Token = "0x6000E55")]
		get;
	}
}
[Token(Token = "0x2000274")]
public interface IOwner
{
	[Token(Token = "0x17000231")]
	Transform cachedTransform
	{
		[Token(Token = "0x6000E56")]
		get;
	}

	[Token(Token = "0x6000E57")]
	BoltEntity BoltEntity();
}
[Token(Token = "0x2000275")]
public interface IPosition
{
	[Token(Token = "0x17000232")]
	Vector3 position
	{
		[Token(Token = "0x6000E58")]
		get;
	}
}
[Token(Token = "0x2000276")]
public interface IUniqueInt
{
	[Token(Token = "0x17000233")]
	int id
	{
		[Token(Token = "0x6000E59")]
		get;
		[Token(Token = "0x6000E5A")]
		set;
	}
}
[Token(Token = "0x2000277")]
public static class UniqueIntHelpers
{
	[Token(Token = "0x6000E5B")]
	public static Dictionary<int, T> AssignUniqueInts<T>(this List<T> components) where T : UnityEngine.Component, IUniqueInt
	{
		return null;
	}
}
[Token(Token = "0x2000278")]
public class AmmoVacuum : MonoBehaviour
{
	[Token(Token = "0x2000279")]
	private struct BlendState
	{
		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Progress;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 LocalStartPosition;
	}

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_ammoVacuumAllowed;

	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private InventorySlot_AmmoPouch m_inventoryAmmoPouch;

	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform m_target;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool m_manipulateWithMetagame;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Min(0f)]
	private float m_vacuumTime;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool m_allowCollectionFromHand;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	private bool m_allowCollectionFromGun;

	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("the vacuum will be deactived when receiving the event")]
	private GameEvent m_disableVacumEvent;

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("the vacuum will be actived when receiving the event")]
	[SerializeField]
	private GameEvent m_enableVacumEvent;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("the vacuum wiil use this collider when disabled")]
	[SerializeField]
	private Collider m_colliderWhenDisable;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("the vacuum wiil use this collider when enabled")]
	[SerializeField]
	private Collider m_colliderWhenEnable;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<AmmoVacuum> Instances;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Dictionary<VrItem, BlendState> m_blendedItemDictionary;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private HashSet<VrItem> m_iterationBuffer;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool m_vacuum_enable;

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0x140EF88", Offset = "0x140EF88", VA = "0x140EF88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0x140F094", Offset = "0x140F094", VA = "0x140F094")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0x140F1C8", Offset = "0x140F1C8", VA = "0x140F1C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0x140F2CC", Offset = "0x140F2CC", VA = "0x140F2CC")]
	private void OnGameplayExit()
	{
	}

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0x140F2D8", Offset = "0x140F2D8", VA = "0x140F2D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0x140F424", Offset = "0x140F424", VA = "0x140F424")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0x140F504", Offset = "0x140F504", VA = "0x140F504")]
	private void OnEnableVacum()
	{
	}

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0x140F50C", Offset = "0x140F50C", VA = "0x140F50C")]
	private void OnDisableVacum()
	{
	}

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0x140F3C4", Offset = "0x140F3C4", VA = "0x140F3C4")]
	private void UpdateVacuumColliders(bool enable_vacuum)
	{
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0x140F514", Offset = "0x140F514", VA = "0x140F514", Slot = "4")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000E66")]
	[Address(RVA = "0x140FCB8", Offset = "0x140FCB8", VA = "0x140FCB8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0x140FCBC", Offset = "0x140FCBC", VA = "0x140FCBC")]
	private void ProcessItemVacuumBlending()
	{
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0x140FFEC", Offset = "0x140FFEC", VA = "0x140FFEC")]
	private bool ShouldContinueBlend(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0x1410194", Offset = "0x1410194", VA = "0x1410194")]
	private BlendState BlendItemToTarget(VrItem item, BlendState existingBlendState)
	{
		return default(BlendState);
	}

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0x140F78C", Offset = "0x140F78C", VA = "0x140F78C")]
	private bool IsItemInList(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0x140FBF0", Offset = "0x140FBF0", VA = "0x140FBF0")]
	private void AddItemToVacuumBlendingList(VrItem item)
	{
	}

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0x141012C", Offset = "0x141012C", VA = "0x141012C")]
	private void RemoveItemFromVacuumBlendingList(VrItem item)
	{
	}

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0x140F838", Offset = "0x140F838", VA = "0x140F838")]
	private bool CanVacuumItem(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0x1410574", Offset = "0x1410574", VA = "0x1410574")]
	public void ChangeVacuumSize(float Radius)
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0x14105E8", Offset = "0x14105E8", VA = "0x14105E8")]
	public bool GetManipulateWithMetagame()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0x14105F0", Offset = "0x14105F0", VA = "0x14105F0")]
	public AmmoVacuum()
	{
	}
}
[Token(Token = "0x200027A")]
public class ArcadeReloadArea : MonoBehaviour
{
	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InventorySlot_AmmoPouch m_inventoryAmmoPouch;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<VrHand> ActionOnArcadeReload;

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0x14106E4", Offset = "0x14106E4", VA = "0x14106E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0x141071C", Offset = "0x141071C", VA = "0x141071C", Slot = "4")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0x14108E4", Offset = "0x14108E4", VA = "0x14108E4")]
	public bool ReloadFromAmmoPouch(VrGun gun)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E74")]
	[Address(RVA = "0x1410C10", Offset = "0x1410C10", VA = "0x1410C10")]
	public ArcadeReloadArea()
	{
	}
}
[Token(Token = "0x200027B")]
public class BeltSlotTransformConfiguration : MonoBehaviour
{
	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InventorySlotAnchorTracker m_transformTracker;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<Transform> m_possibleTransforms;

	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public int m_selection;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool m_runUpdate;

	[Token(Token = "0x6000E75")]
	[Address(RVA = "0x1410C18", Offset = "0x1410C18", VA = "0x1410C18")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E76")]
	[Address(RVA = "0x1410D34", Offset = "0x1410D34", VA = "0x1410D34")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0x1410E50", Offset = "0x1410E50", VA = "0x1410E50")]
	private void OnSettingsDisplayed()
	{
	}

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0x1410E5C", Offset = "0x1410E5C", VA = "0x1410E5C")]
	private void OnSettingsHidden()
	{
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0x1410E64", Offset = "0x1410E64", VA = "0x1410E64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0x1410F00", Offset = "0x1410F00", VA = "0x1410F00")]
	public void SetHolsterConfigValue(int value)
	{
	}

	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0x1410FFC", Offset = "0x1410FFC", VA = "0x1410FFC")]
	public BeltSlotTransformConfiguration()
	{
	}
}
[Token(Token = "0x200027C")]
public class Inventory : MonoBehaviour
{
	[Token(Token = "0x200027D")]
	[Flags]
	public enum InventoryBlockFlags
	{
		[Token(Token = "0x4000D17")]
		None = 0,
		[Token(Token = "0x4000D18")]
		ItemPlacement = 1,
		[Token(Token = "0x4000D19")]
		ItemRemoval = 2,
		[Token(Token = "0x4000D1A")]
		AmmoPlacement = 4,
		[Token(Token = "0x4000D1B")]
		AmmoRemovalManual = 8,
		[Token(Token = "0x4000D1C")]
		AmmoRemovalAutomatic = 0x10
	}

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public GameObject m_inventoryRoot;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public List<InventorySlot> m_inventorySlots;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public FresnelDefinition m_fresnelDef_positive;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public FresnelDefinition m_fresnelDef_negative;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public List<GameObject> m_additionalInventoryAssests;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Multiplayer")]
	private bool m_isMine;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool m_networked;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private InventoryBlockFlags m_activeInventoryBlockFlags;

	[Token(Token = "0x17000234")]
	public bool Networked
	{
		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x1411084", Offset = "0x1411084", VA = "0x1411084")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000235")]
	public bool IsLocalInventory
	{
		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x141108C", Offset = "0x141108C", VA = "0x141108C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x1411094", Offset = "0x1411094", VA = "0x1411094")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000236")]
	public bool IsMine
	{
		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x14110A0", Offset = "0x14110A0", VA = "0x14110A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000237")]
	private FresnelDefinition FresnelDef_positive
	{
		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x14110A8", Offset = "0x14110A8", VA = "0x14110A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000238")]
	private FresnelDefinition FresnelDef_negative
	{
		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x14110B0", Offset = "0x14110B0", VA = "0x14110B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E82")]
	[Address(RVA = "0x14110B8", Offset = "0x14110B8", VA = "0x14110B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0x14115F8", Offset = "0x14115F8", VA = "0x14115F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0x1411978", Offset = "0x1411978", VA = "0x1411978")]
	private void OnGameplayStart()
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0x1411B58", Offset = "0x1411B58", VA = "0x1411B58")]
	private void OnGameplayExit()
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0x1411C10", Offset = "0x1411C10", VA = "0x1411C10")]
	private void OnGameplayPaused()
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0x1411C14", Offset = "0x1411C14", VA = "0x1411C14")]
	private void OnGameplayUnPaused()
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0x1411C18", Offset = "0x1411C18", VA = "0x1411C18")]
	private void OnSettingsDisplayed()
	{
	}

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0x1411C20", Offset = "0x1411C20", VA = "0x1411C20")]
	private void OnSettingsHidden()
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0x1411C28", Offset = "0x1411C28", VA = "0x1411C28")]
	private void OnSaveInventory()
	{
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0x1411568", Offset = "0x1411568", VA = "0x1411568")]
	private void RegisterInventorySlots()
	{
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0x141143C", Offset = "0x141143C", VA = "0x141143C")]
	public void ToggleInventory(bool value)
	{
	}

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0x1411B80", Offset = "0x1411B80", VA = "0x1411B80")]
	public void ClearInventory()
	{
	}

	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0x1411CD0", Offset = "0x1411CD0", VA = "0x1411CD0")]
	public void SetNetworked(bool networked)
	{
	}

	[Token(Token = "0x6000E8F")]
	[Address(RVA = "0x1411CDC", Offset = "0x1411CDC", VA = "0x1411CDC")]
	public void DisableInventoryAndSlots(bool disable)
	{
	}

	[Token(Token = "0x6000E90")]
	[Address(RVA = "0x1411D80", Offset = "0x1411D80", VA = "0x1411D80")]
	public void SetBlockingFlags(InventoryBlockFlags blockFlags)
	{
	}

	[Token(Token = "0x6000E91")]
	[Address(RVA = "0x1411D88", Offset = "0x1411D88", VA = "0x1411D88")]
	public void ClearBlockingFlags()
	{
	}

	[Token(Token = "0x6000E92")]
	[Address(RVA = "0x1411D90", Offset = "0x1411D90", VA = "0x1411D90")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x6000E93")]
	[Address(RVA = "0x140F77C", Offset = "0x140F77C", VA = "0x140F77C")]
	public bool AreBlockingFlagsSet(InventoryBlockFlags checkedFlags)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E94")]
	[Address(RVA = "0x1411D94", Offset = "0x1411D94", VA = "0x1411D94")]
	public int CountItemsWithIdentifier(Identifier identifier, bool includeHandSlots)
	{
		return default(int);
	}

	[Token(Token = "0x6000E95")]
	[Address(RVA = "0x1411F04", Offset = "0x1411F04", VA = "0x1411F04")]
	public VrItem GetItemWithIdentifier(Identifier identifier, bool includeHandSlots, out int inventorySlotIndex)
	{
		return null;
	}

	[Token(Token = "0x6000E96")]
	[Address(RVA = "0x1412084", Offset = "0x1412084", VA = "0x1412084")]
	public int CountItemsInGroup(ItemGroup itemGroup)
	{
		return default(int);
	}

	[Token(Token = "0x6000E97")]
	[Address(RVA = "0x1411998", Offset = "0x1411998", VA = "0x1411998")]
	public void ToggleInventorySlotVacuums(bool active)
	{
	}

	[Token(Token = "0x6000E98")]
	[Address(RVA = "0x1412214", Offset = "0x1412214", VA = "0x1412214")]
	public Inventory()
	{
	}
}
[Token(Token = "0x200027E")]
[CreateAssetMenu(menuName = "Pixel Toys/Inventory Loadout")]
public class InventoryLoadout : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x200027F")]
	public class LoadoutMapping
	{
		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string IdentityKey;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemDefinition ItemDefinition;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AutoInsertMag;

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x1412530", Offset = "0x1412530", VA = "0x1412530")]
		public LoadoutMapping()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000280")]
	public class GunMagMapping
	{
		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ItemDefinition gunItemDefinition;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemDefinition magItemDefinition;

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x1412538", Offset = "0x1412538", VA = "0x1412538")]
		public GunMagMapping()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000281")]
	public class AmmoPouchMapping
	{
		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ItemDefinition magItemDefinition;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ammoCount;

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x1412540", Offset = "0x1412540", VA = "0x1412540")]
		public AmmoPouchMapping()
		{
		}
	}

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private LoadoutMapping[] m_loadoutMappings;

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AmmoPouchMapping[] m_ammoPouchMappings;

	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GunMagMapping[] m_gunMagMappings;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool m_sacredRiteRosary;

	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[UnityEngine.Tooltip("Number of Sacred Rites currently unlocked. Ordered defined in StatusEffect_SacredRitePower")]
	private int m_unlockedSacredRites;

	[Token(Token = "0x4000D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InventoryLoadout s_fallbackLoadout;

	[Token(Token = "0x4000D23")]
	private const string c_fallbackLoadoutName = "InventoryLoadout_Fallback";

	[Token(Token = "0x17000239")]
	public LoadoutMapping[] LoadoutMappings
	{
		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x1412358", Offset = "0x1412358", VA = "0x1412358")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023A")]
	public AmmoPouchMapping[] AmmoPouchMappings
	{
		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x1412360", Offset = "0x1412360", VA = "0x1412360")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023B")]
	public GunMagMapping[] GunMagMappings
	{
		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x1412368", Offset = "0x1412368", VA = "0x1412368")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700023C")]
	public bool SacredRiteRosary
	{
		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x1412370", Offset = "0x1412370", VA = "0x1412370")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700023D")]
	public int UnlockedSacredRites
	{
		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x1412378", Offset = "0x1412378", VA = "0x1412378")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023E")]
	public static InventoryLoadout FallbackLoadout
	{
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x1412380", Offset = "0x1412380", VA = "0x1412380")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0x141245C", Offset = "0x141245C", VA = "0x141245C")]
	public InventoryLoadout()
	{
	}
}
[Token(Token = "0x2000282")]
public class InventorySlot : CachedMonoBehaviour
{
	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<InventorySlot> OnEnabled;

	[Token(Token = "0x4000D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<InventorySlot> OnDisabled;

	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public Identifier m_ID;

	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public GameObject m_contentRoot;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected List<ItemGroup> m_itemGroupsAllowed;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	protected Transform m_anchorTransform;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected VrItem m_itemInSlot;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	public ItemInventorySlotVacuum m_inventorySlotVaccum;

	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Min(0f)]
	protected float m_interactionDistanceSqr;

	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject interactionDistanceSphere;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public Inventory m_inventory;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Action<VrItem> ActionValidItemHoveredOverSlot;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Action<VrItem> ActionInvalidItemHoveredOverSlot;

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Action<VrItem> ActionValidItemReleasedOverSlot;

	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Action<VrItem> ActionInvalidItemReleasedOverSlot;

	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action<VrItem> ActionValidItemVacuumedIntoSlot;

	[Token(Token = "0x4000D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Action<VrItem> ActionItemGrabbedFromSlot;

	[Token(Token = "0x4000D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Action<VrHand> ActionValidHandHoverOverSlot;

	[Token(Token = "0x4000D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Action<VrHand> ActionInvalidHandHoverOverSlot;

	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Action<VrHand> ActionHandStoppedHoverOverSlot;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool m_useVacuum;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected VrHand m_interactionHand;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool m_handIsHoveringOverSlot;

	[Token(Token = "0x1700023F")]
	public virtual VrItem ItemInSlot
	{
		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x1412694", Offset = "0x1412694", VA = "0x1412694", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x141269C", Offset = "0x141269C", VA = "0x141269C", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000240")]
	public virtual VrItem PeekItemInSlot
	{
		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x14126A4", Offset = "0x14126A4", VA = "0x14126A4", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000241")]
	public virtual VrItem TakeItemInSlot
	{
		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x14126AC", Offset = "0x14126AC", VA = "0x14126AC", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000242")]
	public InventorySlotIdentifier Identifier
	{
		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x14126B4", Offset = "0x14126B4", VA = "0x14126B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000243")]
	public bool UseVacuum
	{
		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x1412730", Offset = "0x1412730", VA = "0x1412730")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x1412738", Offset = "0x1412738", VA = "0x1412738")]
		set
		{
		}
	}

	[Token(Token = "0x17000244")]
	public bool HandIsHoveringOverSlot
	{
		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x1412744", Offset = "0x1412744", VA = "0x1412744")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000245")]
	public virtual VrHand InteractionHand
	{
		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x141274C", Offset = "0x141274C", VA = "0x141274C", Slot = "8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x1412754", Offset = "0x1412754", VA = "0x1412754", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000246")]
	public bool IsItemInSlot
	{
		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0x1413208", Offset = "0x1413208", VA = "0x1413208")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000247")]
	public bool IsGunInSlot
	{
		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x141327C", Offset = "0x141327C", VA = "0x141327C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0x1412548", Offset = "0x1412548", VA = "0x1412548")]
	[AutoInitializeStatics]
	public static void ResetStatics()
	{
	}

	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0x14125B0", Offset = "0x14125B0", VA = "0x14125B0")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0x141275C", Offset = "0x141275C", VA = "0x141275C", Slot = "10")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0x14127D4", Offset = "0x14127D4", VA = "0x14127D4", Slot = "11")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0x141284C", Offset = "0x141284C", VA = "0x141284C", Slot = "12")]
	public virtual void ClearInventorySlot()
	{
	}

	[Token(Token = "0x6000EB2")]
	[Address(RVA = "0x1412A5C", Offset = "0x1412A5C", VA = "0x1412A5C", Slot = "13")]
	public virtual void OnItemHoveredOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0x1412B24", Offset = "0x1412B24", VA = "0x1412B24", Slot = "14")]
	public virtual bool OnItemReleasedNearSlot(VrHand hand, VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EB4")]
	[Address(RVA = "0x1412C40", Offset = "0x1412C40", VA = "0x1412C40")]
	public void ValidItemVacuumedIntoSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0x1412CA0", Offset = "0x1412CA0", VA = "0x1412CA0", Slot = "15")]
	public virtual void OnItemGrabbedFromSlot(VrHand hand, VrItem item)
	{
	}

	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0x1412D20", Offset = "0x1412D20", VA = "0x1412D20", Slot = "16")]
	public virtual void OnHandHoverOverSlot(VrHand hand, bool valid)
	{
	}

	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0x1412DA4", Offset = "0x1412DA4", VA = "0x1412DA4", Slot = "17")]
	public virtual void OnHandStoppedHoveringOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0x1412E08", Offset = "0x1412E08", VA = "0x1412E08", Slot = "18")]
	public virtual bool IsItemValidForSlot(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0x1413038", Offset = "0x1413038", VA = "0x1413038")]
	public bool IsSlotBestMatchForItem(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0x1412F14", Offset = "0x1412F14", VA = "0x1412F14")]
	protected bool IsItemInCorrectGroupForSlot(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0x1413144", Offset = "0x1413144", VA = "0x1413144")]
	public void RegisterInventorySlot(Inventory inventory)
	{
	}

	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0x141314C", Offset = "0x141314C", VA = "0x141314C", Slot = "19")]
	public virtual void AddItemToSlot(VrHand hand, VrItem item)
	{
	}

	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0x1412938", Offset = "0x1412938", VA = "0x1412938")]
	private void SetInNetworkInventory(bool state)
	{
	}

	[Token(Token = "0x6000EC0")]
	[Address(RVA = "0x1413304", Offset = "0x1413304", VA = "0x1413304")]
	public void AddItemsFromItemDefinitions(ItemDefinition itemDefinition, [Optional] ItemDefinition magItemDefinition)
	{
	}

	[Token(Token = "0x6000EC1")]
	[Address(RVA = "0x1413498", Offset = "0x1413498", VA = "0x1413498")]
	private void AttachMagFromItemDefinition(ItemDefinition magItemDefinition, VrGun gun, int ammo = -1)
	{
	}

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0x1411C2C", Offset = "0x1411C2C", VA = "0x1411C2C")]
	public void SetSlotActive(bool value)
	{
	}

	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0x14135DC", Offset = "0x14135DC", VA = "0x14135DC")]
	public InventorySlot()
	{
	}
}
[Token(Token = "0x2000283")]
public class InventorySlotActionReceiver : MonoBehaviour
{
	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected InventorySlot m_inventorySlot;

	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0x1413678", Offset = "0x1413678", VA = "0x1413678", Slot = "4")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0x1413B60", Offset = "0x1413B60", VA = "0x1413B60", Slot = "5")]
	public virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0x141400C", Offset = "0x141400C", VA = "0x141400C", Slot = "6")]
	public virtual void OnValidItemHoveredOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0x1414010", Offset = "0x1414010", VA = "0x1414010", Slot = "7")]
	public virtual void OnInvalidItemHoveredOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0x1414014", Offset = "0x1414014", VA = "0x1414014", Slot = "8")]
	public virtual void OnValidItemReleasedOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0x1414018", Offset = "0x1414018", VA = "0x1414018", Slot = "9")]
	public virtual void OnInvalidItemReleasedOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0x141401C", Offset = "0x141401C", VA = "0x141401C", Slot = "10")]
	public virtual void OnItemGrabbedFromSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0x1414020", Offset = "0x1414020", VA = "0x1414020", Slot = "11")]
	public virtual void OnValidHandHoverOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0x1414024", Offset = "0x1414024", VA = "0x1414024", Slot = "12")]
	public virtual void OnInvalidHandHoverOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0x1414028", Offset = "0x1414028", VA = "0x1414028", Slot = "13")]
	public virtual void OnHandStoppedHoveringOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000ECE")]
	[Address(RVA = "0x141402C", Offset = "0x141402C", VA = "0x141402C")]
	public InventorySlotActionReceiver()
	{
	}
}
[Token(Token = "0x2000284")]
public class InventorySlotActionReceiver_Haptics : InventorySlotActionReceiver
{
	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ManualHaptics m_haptic;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_hapticsOnHoverTimeLimit;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_hapticsTimer;

	[Token(Token = "0x6000ECF")]
	[Address(RVA = "0x1414034", Offset = "0x1414034", VA = "0x1414034", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0x1414094", Offset = "0x1414094", VA = "0x1414094", Slot = "6")]
	public override void OnValidItemHoveredOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0x14141A8", Offset = "0x14141A8", VA = "0x14141A8", Slot = "11")]
	public override void OnValidHandHoverOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0x14141CC", Offset = "0x14141CC", VA = "0x14141CC", Slot = "13")]
	public override void OnHandStoppedHoveringOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0x14141D4", Offset = "0x14141D4", VA = "0x14141D4", Slot = "14")]
	protected virtual void TriggerHaptics(HandHaptics handHaptics)
	{
	}

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0x14142EC", Offset = "0x14142EC", VA = "0x14142EC")]
	public InventorySlotActionReceiver_Haptics()
	{
	}
}
[Token(Token = "0x2000285")]
public class InventorySlotActionReceiver_Visual : InventorySlotActionReceiver
{
	[Token(Token = "0x2000286")]
	public enum HighlightMode
	{
		[Token(Token = "0x4000D4F")]
		None,
		[Token(Token = "0x4000D50")]
		Positive,
		[Token(Token = "0x4000D51")]
		Negative
	}

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool m_highlightValidHeldItem_OnHover;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool m_highlightInvalidHeldItem_OnHover;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[SerializeField]
	private bool m_highlightValidPlacedItem_OnHover;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	[SerializeField]
	private bool m_highlightInvalidPlacedItem_OnHover;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnDisableHighlightEvent;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnPositiveHighlightEvent;

	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnNegativeHighlightEvent;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_hoverRecieved;

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0x14142FC", Offset = "0x14142FC", VA = "0x14142FC", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0x1414300", Offset = "0x1414300", VA = "0x1414300")]
	private void VisualController(HighlightMode highlightMode)
	{
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0x141434C", Offset = "0x141434C", VA = "0x141434C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0x141437C", Offset = "0x141437C", VA = "0x141437C")]
	private void HighlightSlot(HighlightMode highlightMode)
	{
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0x1414388", Offset = "0x1414388", VA = "0x1414388", Slot = "6")]
	public override void OnValidItemHoveredOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0x14143B0", Offset = "0x14143B0", VA = "0x14143B0", Slot = "7")]
	public override void OnInvalidItemHoveredOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0x14143D8", Offset = "0x14143D8", VA = "0x14143D8", Slot = "11")]
	public override void OnValidHandHoverOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0x1414400", Offset = "0x1414400", VA = "0x1414400", Slot = "12")]
	public override void OnInvalidHandHoverOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000EDD")]
	[Address(RVA = "0x1414428", Offset = "0x1414428", VA = "0x1414428", Slot = "8")]
	public override void OnValidItemReleasedOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EDE")]
	[Address(RVA = "0x1414450", Offset = "0x1414450", VA = "0x1414450", Slot = "9")]
	public override void OnInvalidItemReleasedOverSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EDF")]
	[Address(RVA = "0x1414478", Offset = "0x1414478", VA = "0x1414478", Slot = "10")]
	public override void OnItemGrabbedFromSlot(VrItem item)
	{
	}

	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0x14144A0", Offset = "0x14144A0", VA = "0x14144A0")]
	public InventorySlotActionReceiver_Visual()
	{
	}
}
[Token(Token = "0x2000287")]
public class InventorySlotAnchorTracker : CachedMonoBehaviour
{
	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public Transform m_transformToTrack;

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0x1414570", Offset = "0x1414570", VA = "0x1414570")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0x1414610", Offset = "0x1414610", VA = "0x1414610")]
	public InventorySlotAnchorTracker()
	{
	}
}
[Token(Token = "0x2000288")]
[CreateAssetMenu(menuName = "Battle Sister/Inventory Slot Identifier")]
public class InventorySlotIdentifier : Identifier
{
	[Token(Token = "0x2000289")]
	public enum BodySide
	{
		[Token(Token = "0x4000D56")]
		Left,
		[Token(Token = "0x4000D57")]
		Central,
		[Token(Token = "0x4000D58")]
		Right
	}

	[Token(Token = "0x200028A")]
	public enum BodyPart
	{
		[Token(Token = "0x4000D5A")]
		Shoulder = 0,
		[Token(Token = "0x4000D5B")]
		Back = 1,
		[Token(Token = "0x4000D5C")]
		Armpit = 2,
		[Token(Token = "0x4000D5D")]
		Hand = 3,
		[Token(Token = "0x4000D5E")]
		Stomach = 4,
		[Token(Token = "0x4000D5F")]
		Waist = 4,
		[Token(Token = "0x4000D60")]
		Hips = 5
	}

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BodySide bodySide;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public BodyPart bodyPart;

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0x1414618", Offset = "0x1414618", VA = "0x1414618")]
	public InventorySlotIdentifier()
	{
	}
}
[Token(Token = "0x200028B")]
public class InventorySlot_AmmoPouch : InventorySlot
{
	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	public List<AmmoCount> m_ammoCountDefinitions;

	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private List<AmmoPouchSlot> m_ammoTypeDefinitions;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private AmmoPouchSlot m_hoveredAmmoPouchSlot;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static InventorySlot_AmmoPouch Instance;

	[Token(Token = "0x17000248")]
	public List<AmmoPouchSlot> AmmoTypeDefinitions
	{
		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x1414620", Offset = "0x1414620", VA = "0x1414620")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000249")]
	public override VrItem ItemInSlot
	{
		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x141471C", Offset = "0x141471C", VA = "0x141471C", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x14147A4", Offset = "0x14147A4", VA = "0x14147A4", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x1700024A")]
	public override VrItem PeekItemInSlot
	{
		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x14147AC", Offset = "0x14147AC", VA = "0x14147AC", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700024B")]
	public override VrItem TakeItemInSlot
	{
		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x14147B4", Offset = "0x14147B4", VA = "0x14147B4", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0x1414628", Offset = "0x1414628", VA = "0x1414628")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0x1414680", Offset = "0x1414680", VA = "0x1414680", Slot = "10")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0x14147BC", Offset = "0x14147BC", VA = "0x14147BC")]
	public void SetMaxAmmoDefinitions(int[] ammoMaxCountDefs)
	{
	}

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0x1414724", Offset = "0x1414724", VA = "0x1414724")]
	private VrItem GetItemInSlot(bool peek)
	{
		return null;
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0x1414878", Offset = "0x1414878", VA = "0x1414878")]
	private AmmoPouchSlot GetAmmoPouchSlotFromGunHeld(out bool isHoldingGun)
	{
		return null;
	}

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0x14149A8", Offset = "0x14149A8", VA = "0x14149A8")]
	private AmmoPouchSlot GetNearestAmmoPouch()
	{
		return null;
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0x1414B00", Offset = "0x1414B00", VA = "0x1414B00", Slot = "16")]
	public override void OnHandHoverOverSlot(VrHand hand, bool valid)
	{
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0x1414B9C", Offset = "0x1414B9C", VA = "0x1414B9C", Slot = "17")]
	public override void OnHandStoppedHoveringOverSlot(VrHand hand)
	{
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0x1414BBC", Offset = "0x1414BBC", VA = "0x1414BBC", Slot = "15")]
	public override void OnItemGrabbedFromSlot(VrHand hand, VrItem item)
	{
	}

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0x1414FD8", Offset = "0x1414FD8", VA = "0x1414FD8", Slot = "14")]
	public override bool OnItemReleasedNearSlot(VrHand hand, VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0x1415058", Offset = "0x1415058", VA = "0x1415058", Slot = "18")]
	public override bool IsItemValidForSlot(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0x1415274", Offset = "0x1415274", VA = "0x1415274", Slot = "19")]
	public override void AddItemToSlot(VrHand hand, VrItem item)
	{
	}

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0x141525C", Offset = "0x141525C", VA = "0x141525C")]
	private bool IsIdentifierFoundInAmmoPouchList(Identifier identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0x141039C", Offset = "0x141039C", VA = "0x141039C")]
	public List<(AmmoPouchSlot, int)> GetEntriesInAmmoPouchListFromAmmoBox(VrAmmoBox ammoBox)
	{
		return null;
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0x14102D0", Offset = "0x14102D0", VA = "0x14102D0")]
	public AmmoPouchSlot GetEntryInAmmoPouchListFromIdentifier(Identifier identifier)
	{
		return null;
	}

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0x14156D8", Offset = "0x14156D8", VA = "0x14156D8")]
	private AmmoPouchSlot GetEntryInAmmoPouchListFromCollider(Collider col)
	{
		return null;
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0x1410B48", Offset = "0x1410B48", VA = "0x1410B48")]
	public AmmoPouchSlot GetEntryInAmmoPouchSlotFromGunIdentifier(Identifier identifier)
	{
		return null;
	}

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0x14157A0", Offset = "0x14157A0", VA = "0x14157A0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0x141582C", Offset = "0x141582C", VA = "0x141582C")]
	public void SetSlotAmmoByIdentifier(Identifier identifier, int count)
	{
	}

	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0x14159A0", Offset = "0x14159A0", VA = "0x14159A0")]
	public int GetSlotAmmoByGunIdentifier(Identifier identifier)
	{
		return default(int);
	}

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0x1415B30", Offset = "0x1415B30", VA = "0x1415B30")]
	public float GetNormalizedAmmoByMagazine(VrMagazine magazine)
	{
		return default(float);
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0x1415CF0", Offset = "0x1415CF0", VA = "0x1415CF0")]
	public float GetNormalizedAmmoByAmmoBox(VrAmmoBox ammoBox)
	{
		return default(float);
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0x1415FF8", Offset = "0x1415FF8", VA = "0x1415FF8")]
	public void DevFillAllAmmo()
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0x1416154", Offset = "0x1416154", VA = "0x1416154")]
	public InventorySlot_AmmoPouch()
	{
	}
}
[Serializable]
[Token(Token = "0x200028C")]
public class AmmoCount
{
	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public string m_name;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public int m_ammoCount;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	public int m_maxAmmoCount;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public TMP_Text m_ammoLabel;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SpriteRenderer m_ammoIcon;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private SpriteRenderer m_background;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[FormerlySerializedAs("m_outOfAmmoOverlay")]
	private SpriteRenderer m_overlay;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color m_ammoColor;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Color m_ammoHoveredColor;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[FormerlySerializedAs("m_outOfAmmoColor")]
	[SerializeField]
	private Color m_outOfAmmoIconColor;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Color m_outOfAmmoOverlayColor;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[FormerlySerializedAs("m_atFullAmmoColor")]
	private Color m_atFullAmmoIconColor;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Color m_atFullAmmoOverlayColor;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	public List<Identifier> m_supportedGuns;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action<int> OnAdjustmentMade;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int m_latestHoveredFrame;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool m_appliedHoveredState;

	[Token(Token = "0x1700024C")]
	public bool IsAtEmptyAmmo
	{
		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x1417228", Offset = "0x1417228", VA = "0x1417228")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700024D")]
	public bool IsAtFullAmmo
	{
		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x1417238", Offset = "0x1417238", VA = "0x1417238")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700024E")]
	private bool IsHovered
	{
		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x1417248", Offset = "0x1417248", VA = "0x1417248")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0x1417268", Offset = "0x1417268", VA = "0x1417268")]
	public void AdjustAmmoAmount(int adjustment, bool trackAmmo = false)
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0x14175FC", Offset = "0x14175FC", VA = "0x14175FC")]
	public void MarkHovered()
	{
	}

	[Token(Token = "0x6000F06")]
	[Address(RVA = "0x1417618", Offset = "0x1417618", VA = "0x1417618")]
	public void RefreshHoveredUI()
	{
	}

	[Token(Token = "0x6000F07")]
	[Address(RVA = "0x1417418", Offset = "0x1417418", VA = "0x1417418")]
	private void UpdateAmmoUI()
	{
	}

	[Token(Token = "0x6000F08")]
	[Address(RVA = "0x1417670", Offset = "0x1417670", VA = "0x1417670")]
	public void SetAmmoAmount(int newAmmoCount, bool ignoreMaxAmmo)
	{
	}

	[Token(Token = "0x6000F09")]
	[Address(RVA = "0x1417694", Offset = "0x1417694", VA = "0x1417694")]
	public AmmoCount()
	{
	}
}
[Serializable]
[Token(Token = "0x200028D")]
public class AmmoPouchSlot
{
	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public string m_name;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Identifier m_identifier;

	[NonSerialized]
	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AmmoCount m_ammoCountRef;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public Transform m_ammoSpawnTransform;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public Transform m_ammoGrabPositionTransform;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public List<Collider> m_associatedColliders;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public Identifier m_supportedGun;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public BoltEntity AmmoBoltEntity;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Stack<VrItem> m_instancedItems;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_minInstancedItems;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private VrMagazine m_magRef;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ItemDefinition m_itemDef;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private InventorySlot m_slot;

	[Token(Token = "0x1700024F")]
	public ItemDefinition ItemDef
	{
		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x141775C", Offset = "0x141775C", VA = "0x141775C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000250")]
	public InventorySlot Slot
	{
		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x1417764", Offset = "0x1417764", VA = "0x1417764")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000251")]
	public AmmoCount AmmoCountRef
	{
		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x141776C", Offset = "0x141776C", VA = "0x141776C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F0D")]
	[Address(RVA = "0x1417774", Offset = "0x1417774", VA = "0x1417774")]
	public void Initialise(InventorySlot slot, [Optional] List<AmmoCount> ammoCounts)
	{
	}

	[Token(Token = "0x6000F0E")]
	[Address(RVA = "0x1417A54", Offset = "0x1417A54", VA = "0x1417A54")]
	public void CreateInstancedItem()
	{
	}

	[Token(Token = "0x6000F0F")]
	[Address(RVA = "0x1417B28", Offset = "0x1417B28", VA = "0x1417B28")]
	private void SetupInstancedItem(VrItem item, bool active, bool parent)
	{
	}

	[Token(Token = "0x6000F10")]
	[Address(RVA = "0x141790C", Offset = "0x141790C", VA = "0x141790C")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6000F11")]
	[Address(RVA = "0x1417D58", Offset = "0x1417D58", VA = "0x1417D58")]
	public int GetMagCapacity()
	{
		return default(int);
	}

	[Token(Token = "0x6000F12")]
	[Address(RVA = "0x1417DDC", Offset = "0x1417DDC", VA = "0x1417DDC")]
	public int GetMagFillAmount()
	{
		return default(int);
	}

	[Token(Token = "0x6000F13")]
	[Address(RVA = "0x1417E10", Offset = "0x1417E10", VA = "0x1417E10")]
	public bool ColliderInAssociatedColliderList(Collider collider)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F14")]
	[Address(RVA = "0x1417EF0", Offset = "0x1417EF0", VA = "0x1417EF0")]
	public bool IsSupportedGun(Identifier identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F15")]
	[Address(RVA = "0x1417EFC", Offset = "0x1417EFC", VA = "0x1417EFC")]
	public int InstancedItemStackCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000F16")]
	[Address(RVA = "0x1417F44", Offset = "0x1417F44", VA = "0x1417F44")]
	public void AddInstancedItem(VrItem item)
	{
	}

	[Token(Token = "0x6000F17")]
	[Address(RVA = "0x1418000", Offset = "0x1418000", VA = "0x1418000")]
	public VrItem PeekInstancedItem()
	{
		return null;
	}

	[Token(Token = "0x6000F18")]
	[Address(RVA = "0x1418078", Offset = "0x1418078", VA = "0x1418078")]
	public VrItem GetInstancedItem()
	{
		return null;
	}

	[Token(Token = "0x6000F19")]
	[Address(RVA = "0x14180FC", Offset = "0x14180FC", VA = "0x14180FC")]
	public AmmoPouchSlot()
	{
	}
}
[Token(Token = "0x200028E")]
[DefaultExecutionOrder(-62)]
public class InventorySlot_Hand : InventorySlot
{
	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[SerializeField]
	[UnityEngine.Tooltip("How long the item should hover on restore")]
	[Header("Persistent inventory properties")]
	private float m_hoverTime;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[UnityEngine.Tooltip("The animation curve for item hover movement")]
	[SerializeField]
	private AnimationCurve m_hoverCurve;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[UnityEngine.Tooltip("A child transform definition the relative position and rotation of hovered items (at their primary grasp marker)")]
	[SerializeField]
	private Transform m_hoverTransform;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[UnityEngine.Tooltip("A child transform used when detecting the closest inventory slot available for interaction")]
	[SerializeField]
	private Transform m_inventoryInteractionTransform;

	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private bool m_processInvalidSlotsOnHover;

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private GameObject m_debugInteractionRangeMesh;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private VrHand m_hand;

	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private List<InventoryInteractionRecord> m_slotsToProcess;

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private InventoryInteractionRecord m_inventorySlotToProcessInCurrentFrame;

	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<Identifier, VrItem> OnLocalItemGrabbed;

	[Token(Token = "0x17000252")]
	public VrHand Hand
	{
		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x14181DC", Offset = "0x14181DC", VA = "0x14181DC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000253")]
	public bool HasInventorySlotToProcess
	{
		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x14181E4", Offset = "0x14181E4", VA = "0x14181E4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000254")]
	public override VrItem ItemInSlot
	{
		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x14181F4", Offset = "0x14181F4", VA = "0x14181F4", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x14181FC", Offset = "0x14181FC", VA = "0x14181FC", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6000F1E")]
	[Address(RVA = "0x1418380", Offset = "0x1418380", VA = "0x1418380")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F1F")]
	[Address(RVA = "0x14183F4", Offset = "0x14183F4", VA = "0x14183F4")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000F20")]
	[Address(RVA = "0x141865C", Offset = "0x141865C", VA = "0x141865C")]
	private bool InventoryActionListContains(Rigidbody inventorySlotRigidbody)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F21")]
	[Address(RVA = "0x1418758", Offset = "0x1418758", VA = "0x1418758")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F22")]
	[Address(RVA = "0x1418CB8", Offset = "0x1418CB8", VA = "0x1418CB8")]
	private static InventoryInteractionRecord FindClosestSlot(in List<InventoryInteractionRecord> slots, Vector3 inventoryPosition)
	{
		return null;
	}

	[Token(Token = "0x6000F23")]
	[Address(RVA = "0x1418908", Offset = "0x1418908", VA = "0x1418908")]
	private List<InventoryInteractionRecord> FindValidInventorySlots()
	{
		return null;
	}

	[Token(Token = "0x6000F24")]
	[Address(RVA = "0x1418EA8", Offset = "0x1418EA8", VA = "0x1418EA8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000F25")]
	[Address(RVA = "0x1418F18", Offset = "0x1418F18", VA = "0x1418F18")]
	public bool CheckInteraction()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F26")]
	[Address(RVA = "0x141903C", Offset = "0x141903C", VA = "0x141903C")]
	private bool CheckForInventoryInteraction(InventorySlot inventorySlot)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F27")]
	[Address(RVA = "0x141946C", Offset = "0x141946C", VA = "0x141946C")]
	public void GrabItemFromInventory(InventorySlot inventorySlot)
	{
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0x14194D8", Offset = "0x14194D8", VA = "0x14194D8")]
	public void PlaceItemInInventory(InventorySlot inventorySlot)
	{
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0x14194F0", Offset = "0x14194F0", VA = "0x14194F0")]
	public void PlaceItemInInventory(InventorySlot inventorySlot, bool useVacuum)
	{
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0x141962C", Offset = "0x141962C", VA = "0x141962C", Slot = "12")]
	public override void ClearInventorySlot()
	{
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0x1418DD8", Offset = "0x1418DD8", VA = "0x1418DD8")]
	public bool IsItemInSlotValidForHand(InventorySlot slot)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0x1419700", Offset = "0x1419700", VA = "0x1419700", Slot = "15")]
	public override void OnItemGrabbedFromSlot(VrHand hand, VrItem item)
	{
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0x1419784", Offset = "0x1419784", VA = "0x1419784", Slot = "14")]
	public override bool OnItemReleasedNearSlot(VrHand hand, VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0x1419364", Offset = "0x1419364", VA = "0x1419364")]
	public VrItem GetCurrentlyHeldItem()
	{
		return null;
	}

	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0x14197CC", Offset = "0x14197CC", VA = "0x14197CC")]
	public InventorySlot_Hand()
	{
	}
}
[Serializable]
[Token(Token = "0x200028F")]
public class InventoryInteractionRecord
{
	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public InventorySlot m_placementInventorySlot;

	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider m_collider;

	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VrHand m_handRef;

	[Token(Token = "0x6000F30")]
	[Address(RVA = "0x1418750", Offset = "0x1418750", VA = "0x1418750")]
	public InventoryInteractionRecord()
	{
	}
}
[Token(Token = "0x2000290")]
public class InventoryTransformTracker : CachedMonoBehaviour
{
	[Token(Token = "0x2000291")]
	private enum HeightAdjustmentMode
	{
		[Token(Token = "0x4000D99")]
		UseDynamicHeight,
		[Token(Token = "0x4000D9A")]
		UseStaticHeight,
		[Token(Token = "0x4000D9B")]
		DoNotAdjust
	}

	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private HeightAdjustmentMode m_heightAdjustmentMode;

	[Token(Token = "0x4000D91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_transformToTrack;

	[Token(Token = "0x4000D92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Unchanging offset vector in XZ.")]
	[SerializeField]
	private Vector2 m_fixedOffsetVector;

	[Token(Token = "0x4000D93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("Controls moving the transform forward or back as the player crouches. X=1 is at full height, X=0 is on the floor, Y is the local offset applied to the transform in the Z axis.")]
	[SerializeField]
	private AnimationCurve m_crouchZOffsetCurve;

	[Token(Token = "0x4000D94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Range(0f, 1f)]
	[SerializeField]
	[FormerlySerializedAs("m_placementHeightNormalised")]
	public float m_placementHeightNormalized;

	[Token(Token = "0x4000D95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float m_rotationBlendRate;

	[Token(Token = "0x4000D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AnimationCurve m_mapTrackedXRotationToTrackedYRotation;

	[Token(Token = "0x4000D97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameSettings.IntSetting m_playerHeight;

	[Token(Token = "0x6000F31")]
	[Address(RVA = "0x1419970", Offset = "0x1419970", VA = "0x1419970")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000F32")]
	[Address(RVA = "0x1419EB0", Offset = "0x1419EB0", VA = "0x1419EB0")]
	private float GetPlayerHeight()
	{
		return default(float);
	}

	[Token(Token = "0x6000F33")]
	[Address(RVA = "0x14199E4", Offset = "0x14199E4", VA = "0x14199E4")]
	private void UpdatePosition()
	{
	}

	[Token(Token = "0x6000F34")]
	[Address(RVA = "0x1419B60", Offset = "0x1419B60", VA = "0x1419B60")]
	private void UpdateRotation()
	{
	}

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0x1419F58", Offset = "0x1419F58", VA = "0x1419F58")]
	public void SetTransformToTrack(Transform transformToTrack, Vector2 offset)
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0x1419F98", Offset = "0x1419F98", VA = "0x1419F98")]
	public InventoryTransformTracker()
	{
	}
}
[Token(Token = "0x2000292")]
[CreateAssetMenu(fileName = "Item Definition", menuName = "Battle Sister/Inventory/Item Definition", order = 1)]
public class ItemDefinition : ScriptableObject
{
	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Identifier m_ID;

	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ItemGroup m_itemGroup;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_prefabReference;

	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite m_itemDisplayImage;

	[Token(Token = "0x4000DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("This MUST be unique for each item")]
	public string m_itemGuidString;

	[Token(Token = "0x4000DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string m_itemNameLocId;

	[Token(Token = "0x17000255")]
	public Guid ItemGuid
	{
		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x1419FFC", Offset = "0x1419FFC", VA = "0x1419FFC")]
		get
		{
			return default(Guid);
		}
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0x141A008", Offset = "0x141A008", VA = "0x141A008")]
	public ItemDefinition()
	{
	}
}
[Token(Token = "0x2000293")]
public enum ItemGroup
{
	[Token(Token = "0x4000DA3")]
	Any,
	[Token(Token = "0x4000DA4")]
	Misc,
	[Token(Token = "0x4000DA5")]
	HipWeapon,
	[Token(Token = "0x4000DA6")]
	BackWeapon,
	[Token(Token = "0x4000DA7")]
	Melee,
	[Token(Token = "0x4000DA8")]
	Ammo,
	[Token(Token = "0x4000DA9")]
	Story,
	[Token(Token = "0x4000DAA")]
	Secondary,
	[Token(Token = "0x4000DAB")]
	BothHolsters
}
[Token(Token = "0x2000294")]
public class ItemInventorySlotVacuum : MonoBehaviour
{
	[Token(Token = "0x2000295")]
	private struct BlendState
	{
		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Progress;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 LocalStartPosition;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Quaternion LocalStartRotation;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 LocalEndPosition;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion LocalEndRotation;
	}

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_itemVacuumAllowed;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float m_timeSinceItemDroppedCheck;

	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private InventorySlot m_inventorySlot;

	[Token(Token = "0x4000DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform m_target;

	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Min(0f)]
	[SerializeField]
	private float m_vacuumTime;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool m_allowCollectionFromHand;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private VrItem m_blendedItem;

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private BlendState m_blendState;

	[Token(Token = "0x17000256")]
	public bool ItemVacuumAllowed
	{
		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x141A018", Offset = "0x141A018", VA = "0x141A018")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x141A020", Offset = "0x141A020", VA = "0x141A020")]
		set
		{
		}
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0x141A02C", Offset = "0x141A02C", VA = "0x141A02C", Slot = "4")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0x141A828", Offset = "0x141A828", VA = "0x141A828")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0x141A82C", Offset = "0x141A82C", VA = "0x141A82C")]
	private void ProcessItemVacuumBlending()
	{
	}

	[Token(Token = "0x6000F3E")]
	[Address(RVA = "0x141AA50", Offset = "0x141AA50", VA = "0x141AA50")]
	private void BlendItemToTarget(VrItem item, ref BlendState existingBlendState)
	{
	}

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0x141A3B8", Offset = "0x141A3B8", VA = "0x141A3B8")]
	private bool IsBlendingItem(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0x141A634", Offset = "0x141A634", VA = "0x141A634")]
	public void BeginBlendingItem(VrItem item)
	{
	}

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0x141AA00", Offset = "0x141AA00", VA = "0x141AA00")]
	private void StopBlendingItem(VrItem item)
	{
	}

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0x141A440", Offset = "0x141A440", VA = "0x141A440")]
	private bool CanVacuumItem(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0x141A29C", Offset = "0x141A29C", VA = "0x141A29C")]
	private bool IsItemHeld(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F44")]
	[Address(RVA = "0x141A910", Offset = "0x141A910", VA = "0x141A910")]
	private bool ShouldContinueBlend(VrItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F45")]
	[Address(RVA = "0x141AB44", Offset = "0x141AB44", VA = "0x141AB44")]
	public ItemInventorySlotVacuum()
	{
	}
}
[Token(Token = "0x2000296")]
public class ItemLoader : SceneSingleton<ItemLoader>
{
	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public List<ItemDefinition> m_itemList;

	[Token(Token = "0x6000F46")]
	[Address(RVA = "0x141AB68", Offset = "0x141AB68", VA = "0x141AB68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F47")]
	[Address(RVA = "0x1417BA8", Offset = "0x1417BA8", VA = "0x1417BA8")]
	public ItemDefinition GetItemDefinitionFromID(Identifier ID)
	{
		return null;
	}

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0x141ABB4", Offset = "0x141ABB4", VA = "0x141ABB4")]
	public VrItem CreateItemAssetsFromID(Identifier ID, Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6000F49")]
	[Address(RVA = "0x141ABF0", Offset = "0x141ABF0", VA = "0x141ABF0")]
	public VrItem CreateItemAssetsFromDefinition(ItemDefinition definition, Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0x141AD2C", Offset = "0x141AD2C", VA = "0x141AD2C")]
	public Guid GetItemGuidFromId(Identifier identifier)
	{
		return default(Guid);
	}

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0x141AECC", Offset = "0x141AECC", VA = "0x141AECC")]
	public ItemDefinition GetItemDefinitionFromGuid(Guid guid)
	{
		return null;
	}

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x141B05C", Offset = "0x141B05C", VA = "0x141B05C")]
	public ItemLoader()
	{
	}
}
[Token(Token = "0x2000297")]
public class State_DropHeldItems : BaseStateAttachedLogic
{
	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0x141B0F8", Offset = "0x141B0F8", VA = "0x141B0F8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0x141B360", Offset = "0x141B360", VA = "0x141B360")]
	public State_DropHeldItems()
	{
	}
}
[Token(Token = "0x2000298")]
public class ImmediateLevelLoader : MonoBehaviour
{
	[Token(Token = "0x2000299")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ImmediateLevelLoader <>4__this;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.AsyncOperation> <operations>5__2;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <finished>5__3;

		[Token(Token = "0x17000258")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F55")]
			[Address(RVA = "0x141B9C4", Offset = "0x141B9C4", VA = "0x141B9C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000259")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F57")]
			[Address(RVA = "0x141BA0C", Offset = "0x141BA0C", VA = "0x141BA0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x141B3E4", Offset = "0x141B3E4", VA = "0x141B3E4")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x141B414", Offset = "0x141B414", VA = "0x141B414", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x141B418", Offset = "0x141B418", VA = "0x141B418", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x141B9CC", Offset = "0x141B9CC", VA = "0x141B9CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<PT.SceneProxy> m_scenes;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _isDone;

	[Token(Token = "0x17000257")]
	public bool isDone
	{
		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x141B368", Offset = "0x141B368", VA = "0x141B368")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0x141B370", Offset = "0x141B370", VA = "0x141B370")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0x141B40C", Offset = "0x141B40C", VA = "0x141B40C")]
	public ImmediateLevelLoader()
	{
	}
}
[Token(Token = "0x200029A")]
public class LevelEndTrigger : MonoBehaviour
{
	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_triggered;

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0x141BA14", Offset = "0x141BA14", VA = "0x141BA14")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0x141BA1C", Offset = "0x141BA1C", VA = "0x141BA1C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0x141BAC0", Offset = "0x141BAC0", VA = "0x141BAC0")]
	public void RequestLevelEnd()
	{
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0x141BB28", Offset = "0x141BB28", VA = "0x141BB28")]
	public LevelEndTrigger()
	{
	}
}
[Token(Token = "0x200029B")]
public static class LevelLoadHelpers
{
	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0x141BB30", Offset = "0x141BB30", VA = "0x141BB30")]
	public static void CheckForDuplicateSceneIds()
	{
	}
}
[Token(Token = "0x200029C")]
public class LevelLoadManager : CachedMonoBehaviour
{
	[Token(Token = "0x200029D")]
	public class state_PreLoadLevel : NestedStateBehavior<LevelLoadManager>
	{
		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x141D2A8", Offset = "0x141D2A8", VA = "0x141D2A8", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x141D474", Offset = "0x141D474", VA = "0x141D474")]
		public state_PreLoadLevel()
		{
		}
	}

	[Token(Token = "0x200029E")]
	public class state_LoadLevel : NestedStateBehavior<LevelLoadManager>
	{
		[Token(Token = "0x200029F")]
		[CompilerGenerated]
		private sealed class <LoadSceneRoutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public state_LoadLevel <>4__this;

			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action action;

			[Token(Token = "0x4000DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private GameLevel <gameLevel>5__2;

			[Token(Token = "0x4000DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private string <difficultyLevelNameLocId>5__3;

			[Token(Token = "0x17000267")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F8B")]
				[Address(RVA = "0x141E024", Offset = "0x141E024", VA = "0x141E024", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000268")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F8D")]
				[Address(RVA = "0x141E06C", Offset = "0x141E06C", VA = "0x141E06C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F87")]
			[Address(RVA = "0x141D8D0", Offset = "0x141D8D0", VA = "0x141D8D0")]
			[DebuggerHidden]
			public <LoadSceneRoutine>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000F88")]
			[Address(RVA = "0x141D9DC", Offset = "0x141D9DC", VA = "0x141D9DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F89")]
			[Address(RVA = "0x141D9F8", Offset = "0x141D9F8", VA = "0x141D9F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F8A")]
			[Address(RVA = "0x141DE1C", Offset = "0x141DE1C", VA = "0x141DE1C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0x141E02C", Offset = "0x141E02C", VA = "0x141E02C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002A0")]
		[CompilerGenerated]
		private sealed class <LoadImmediateLoaderScenes>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameLevel gameLevel;

			[Token(Token = "0x4000DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<ImmediateLevelLoader> <loaders>5__2;

			[Token(Token = "0x4000DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <immediateLoadersComplete>5__3;

			[Token(Token = "0x4000DD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<ImmediateLevelLoader>.Enumerator <>7__wrap3;

			[Token(Token = "0x17000269")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F92")]
				[Address(RVA = "0x141E47C", Offset = "0x141E47C", VA = "0x141E47C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F94")]
				[Address(RVA = "0x141E4C4", Offset = "0x141E4C4", VA = "0x141E4C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F8E")]
			[Address(RVA = "0x141D96C", Offset = "0x141D96C", VA = "0x141D96C")]
			[DebuggerHidden]
			public <LoadImmediateLoaderScenes>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x141E074", Offset = "0x141E074", VA = "0x141E074", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F90")]
			[Address(RVA = "0x141E090", Offset = "0x141E090", VA = "0x141E090", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F91")]
			[Address(RVA = "0x141E42C", Offset = "0x141E42C", VA = "0x141E42C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000F93")]
			[Address(RVA = "0x141E484", Offset = "0x141E484", VA = "0x141E484", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x141D4BC", Offset = "0x141D4BC", VA = "0x141D4BC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x141D658", Offset = "0x141D658", VA = "0x141D658")]
		private void HandleLoadComplete()
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x141D6C4", Offset = "0x141D6C4", VA = "0x141D6C4", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x141D5C8", Offset = "0x141D5C8", VA = "0x141D5C8")]
		[IteratorStateMachine(typeof(<LoadSceneRoutine>d__3))]
		private IEnumerator LoadSceneRoutine([Optional] Action action)
		{
			return null;
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x141D8F8", Offset = "0x141D8F8", VA = "0x141D8F8")]
		[IteratorStateMachine(typeof(<LoadImmediateLoaderScenes>d__4))]
		private IEnumerator LoadImmediateLoaderScenes(GameLevel gameLevel)
		{
			return null;
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x141D994", Offset = "0x141D994", VA = "0x141D994")]
		public state_LoadLevel()
		{
		}
	}

	[Token(Token = "0x20002A1")]
	public class state_PostLoadLevel : NestedStateBehavior<LevelLoadManager>
	{
		[Token(Token = "0x20002A2")]
		[CompilerGenerated]
		private sealed class <PostLoadLevelRoutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public state_PostLoadLevel <>4__this;

			[Token(Token = "0x4000DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private MultiplayerGameState <gameState>5__2;

			[Token(Token = "0x1700026B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F9D")]
				[Address(RVA = "0x141EF68", Offset = "0x141EF68", VA = "0x141EF68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F9F")]
				[Address(RVA = "0x141EFB0", Offset = "0x141EFB0", VA = "0x141EFB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F9A")]
			[Address(RVA = "0x141EB38", Offset = "0x141EB38", VA = "0x141EB38")]
			[DebuggerHidden]
			public <PostLoadLevelRoutine>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0x141EBA8", Offset = "0x141EBA8", VA = "0x141EBA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0x141EBAC", Offset = "0x141EBAC", VA = "0x141EBAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F9E")]
			[Address(RVA = "0x141EF70", Offset = "0x141EF70", VA = "0x141EF70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.AsyncOperation m_unloadOperation;

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x141E4CC", Offset = "0x141E4CC", VA = "0x141E4CC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x141E5E8", Offset = "0x141E5E8", VA = "0x141E5E8", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x141E760", Offset = "0x141E760", VA = "0x141E760", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x141EAC4", Offset = "0x141EAC4", VA = "0x141EAC4")]
		[IteratorStateMachine(typeof(<PostLoadLevelRoutine>d__4))]
		private IEnumerator PostLoadLevelRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x141EB60", Offset = "0x141EB60", VA = "0x141EB60")]
		public state_PostLoadLevel()
		{
		}
	}

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private LevelSet m_multiplayerLevelSet;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_highestReachedChapter;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_gameLevelIDToLoad;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int m_difficultyToLoad;

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private HashSet<UnityEngine.AsyncOperation> m_loadOps;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ThreadPriority m_defaultThreadPriority;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float m_timeBetweenHints;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private LoadingScreen m_loadingScreen;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_lastTimeUpdated;

	[Token(Token = "0x1700025A")]
	public LevelSet activeLevelSet
	{
		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x141BB34", Offset = "0x141BB34", VA = "0x141BB34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025B")]
	public List<GameLevel> activeGameLevelList
	{
		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x141BB3C", Offset = "0x141BB3C", VA = "0x141BB3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025C")]
	public List<DifficultyLevel> ActiveDifficulties
	{
		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x141BB58", Offset = "0x141BB58", VA = "0x141BB58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025D")]
	public GameLevel FTUELevel
	{
		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x141BBD0", Offset = "0x141BBD0", VA = "0x141BBD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025E")]
	public GameLevel DefaultLevel
	{
		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x141BD40", Offset = "0x141BD40", VA = "0x141BD40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025F")]
	public bool IsFTUELevel
	{
		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x141BD60", Offset = "0x141BD60", VA = "0x141BD60")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000260")]
	public static bool ISFTUEEverLoaded
	{
		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x141BE38", Offset = "0x141BE38", VA = "0x141BE38")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x141BE80", Offset = "0x141BE80", VA = "0x141BE80")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000261")]
	public int HighestReachedChapter
	{
		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x141BECC", Offset = "0x141BECC", VA = "0x141BECC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x141BED4", Offset = "0x141BED4", VA = "0x141BED4")]
		set
		{
		}
	}

	[Token(Token = "0x17000262")]
	public bool CompletedCampaign
	{
		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x141BEDC", Offset = "0x141BEDC", VA = "0x141BEDC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x141BEE4", Offset = "0x141BEE4", VA = "0x141BEE4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000263")]
	public int LevelToLoad
	{
		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x141BEF0", Offset = "0x141BEF0", VA = "0x141BEF0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000264")]
	public int DifficultyToLoad
	{
		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x141BEF8", Offset = "0x141BEF8", VA = "0x141BEF8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000265")]
	public bool IsLoadingInProgress
	{
		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x141BF00", Offset = "0x141BF00", VA = "0x141BF00")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000266")]
	public GameLevel activeGameLevel
	{
		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x141BF50", Offset = "0x141BF50", VA = "0x141BF50")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0x141C0B4", Offset = "0x141C0B4", VA = "0x141C0B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0x141C1F0", Offset = "0x141C1F0", VA = "0x141C1F0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0x141C30C", Offset = "0x141C30C", VA = "0x141C30C")]
	private void ProcessDifficultyLevelOptions_RemoteConfig(RemoteDifficulty remote)
	{
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0x141C39C", Offset = "0x141C39C", VA = "0x141C39C")]
	public bool GetFirstCheckpointComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0x141C478", Offset = "0x141C478", VA = "0x141C478")]
	public void NextLevel(int gameLevelID)
	{
	}

	[Token(Token = "0x6000F72")]
	[Address(RVA = "0x141C480", Offset = "0x141C480", VA = "0x141C480")]
	public void NextLevelWithName(string rootSceneName)
	{
	}

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0x141C650", Offset = "0x141C650", VA = "0x141C650")]
	public void SetDifficulty(int difficultyLevelID)
	{
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0x141C6F0", Offset = "0x141C6F0", VA = "0x141C6F0")]
	public void SetDefaultDifficulty()
	{
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0x141C710", Offset = "0x141C710", VA = "0x141C710")]
	public DifficultyLevel GetDifficultyLevel()
	{
		return null;
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0x141C818", Offset = "0x141C818", VA = "0x141C818")]
	public GameLevel GetRandomLevel(GameLevelType type)
	{
		return null;
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0x141C834", Offset = "0x141C834", VA = "0x141C834")]
	public GameLevel GetWeightedRandomLevel(GameLevelType type)
	{
		return null;
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0x141CEA0", Offset = "0x141CEA0", VA = "0x141CEA0")]
	public void StartNewGame()
	{
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0x141CED0", Offset = "0x141CED0", VA = "0x141CED0")]
	public void Continue()
	{
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0x141BD80", Offset = "0x141BD80", VA = "0x141BD80")]
	public GameLevel GetCurrentlyLoadedGameLevel()
	{
		return null;
	}

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0x141C470", Offset = "0x141C470", VA = "0x141C470")]
	public GameLevel GetCurrentOrLastGameLevel()
	{
		return null;
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0x141CF10", Offset = "0x141CF10", VA = "0x141CF10")]
	private GameLevel GetCurrentOrLastGameLevelInternal(LevelSet levelSet)
	{
		return null;
	}

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0x141D1C4", Offset = "0x141D1C4", VA = "0x141D1C4")]
	public void Debug_UnlockAllChapters()
	{
	}

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0x141D218", Offset = "0x141D218", VA = "0x141D218")]
	public LevelLoadManager()
	{
	}
}
[Token(Token = "0x20002A5")]
[CreateAssetMenu(fileName = "Level Set", menuName = "Battle Sister/Level Set")]
public class LevelSet : ScriptableObject
{
	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int m_IDStartOffset;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<GameLevel> m_levelList;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<DifficultyLevel> m_difficultyLevels;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<DifficultyLevel> m_activeDifficultyLevels;

	[Token(Token = "0x4000DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_activeDefaultDifficulty;

	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Debug Data")]
	[UnityEngine.Tooltip("Instance of a SpawnableEnemy which will be use for all enemies instead of those setup on the wave specifiers etc. Used for debug only.")]
	[InterfaceObject(typeof(ISpawnable))]
	[SerializeField]
	private UnityEngine.Object m_spawnableEnemyOverride;

	[Token(Token = "0x1700026D")]
	public List<GameLevel> levelList
	{
		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x141F034", Offset = "0x141F034", VA = "0x141F034")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026E")]
	public List<DifficultyLevel> DifficultyLevels
	{
		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x141BB70", Offset = "0x141BB70", VA = "0x141BB70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026F")]
	public ISpawnable spawnableEnemyOverride
	{
		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0x141F03C", Offset = "0x141F03C", VA = "0x141F03C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000270")]
	public int DefaultDifficulty
	{
		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x141F218", Offset = "0x141F218", VA = "0x141F218")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0x141CFD4", Offset = "0x141CFD4", VA = "0x141CFD4")]
	public GameLevel GetGameLevel(Scene scene)
	{
		return null;
	}

	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0x141C4AC", Offset = "0x141C4AC", VA = "0x141C4AC")]
	public GameLevel GetGameLevel(string rootSceneName)
	{
		return null;
	}

	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0x141F084", Offset = "0x141F084", VA = "0x141F084")]
	public GameLevel GetNextLevelInSet(GameLevel gameLevel)
	{
		return null;
	}

	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0x141BFD8", Offset = "0x141BFD8", VA = "0x141BFD8")]
	public GameLevel GetLevelFromId(int id)
	{
		return null;
	}

	[Token(Token = "0x6000FAB")]
	[Address(RVA = "0x141BBF0", Offset = "0x141BBF0", VA = "0x141BBF0")]
	public GameLevel GetLevelFromType(GameLevelType type, bool random = true)
	{
		return null;
	}

	[Token(Token = "0x6000FAC")]
	[Address(RVA = "0x141C730", Offset = "0x141C730", VA = "0x141C730")]
	public DifficultyLevel GetDifficultyFromID(int id)
	{
		return null;
	}

	[Token(Token = "0x6000FAE")]
	[Address(RVA = "0x141C38C", Offset = "0x141C38C", VA = "0x141C38C")]
	public void OverrideDifficultiesWithRemote(int defaultDifficultyID, List<DifficultyLevel> difficultyLevels)
	{
	}

	[Token(Token = "0x6000FAF")]
	[Address(RVA = "0x141F220", Offset = "0x141F220", VA = "0x141F220")]
	public GameLevel GetGameLevelFromLeaderboardName(LeaderboardMapName mapName)
	{
		return null;
	}

	[Token(Token = "0x6000FB0")]
	[Address(RVA = "0x141F3A0", Offset = "0x141F3A0", VA = "0x141F3A0")]
	public LevelSet()
	{
	}
}
[Token(Token = "0x20002AB")]
public enum GameLevelType
{
	[Token(Token = "0x4000DED")]
	Multiplayer = 0,
	[Token(Token = "0x4000DEE")]
	FTUE = 1,
	[Token(Token = "0x4000DEF")]
	Test = 255
}
[Serializable]
[Token(Token = "0x20002AC")]
public class GameLevel
{
	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[UnityEngine.Tooltip("Dev description soley for purposes of making the leve lis tarray more legible.")]
	public string devDescription;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public int m_id;

	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_levelNameLocId;

	[Token(Token = "0x4000DF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LevelManifest m_manifest;

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameLevelType levelType;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int ChanceWeight;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public string m_levelDescriptionLocId;

	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public string m_levelDescription2LocId;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public string m_levelHologramMainPanelDescriptionLocId;

	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public string m_levelHologramSidePanelDescriptionLocId;

	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Sprite m_levelImage;

	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool m_forceInventoryLoadout;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public InventoryLoadout m_inventoryLoadout;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Quest m_levelStartQuest;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public MissionQuest m_levelCompletionQuest;

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public bool m_playMusicOnChapterIntro;

	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string m_loadingScreenImagePath;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public LoadingScreenStringsSet m_loadingScreenStrings;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[HideInInspector]
	public bool m_skipInventorySaving;

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	[HideInInspector]
	public bool m_cinematicLevel;

	[Token(Token = "0x4000E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public LeaderboardMapName m_leaderboardMapName;

	[Token(Token = "0x17000271")]
	public bool showResults
	{
		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x141F490", Offset = "0x141F490", VA = "0x141F490")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000272")]
	public LevelManifest levelManifest
	{
		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x141F518", Offset = "0x141F518", VA = "0x141F518")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0x141F520", Offset = "0x141F520", VA = "0x141F520")]
	public GameLevel()
	{
	}
}
[Serializable]
[Token(Token = "0x20002AD")]
public class DifficultyLevel
{
	[Token(Token = "0x4000E05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Menu Info")]
	public string devDescription;

	[Token(Token = "0x4000E06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	public int m_id;

	[Token(Token = "0x4000E07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_nameLocId;

	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LeaderboardMapName m_rootMap;

	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LeaderboardMapName m_leaderboardMapName;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_activeInLive;

	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("XP Difficulty Settings")]
	[Range(0f, 2.5f)]
	public float m_playerXPScaler;

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 2.5f)]
	public float m_gunXPScaler;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Header("Player Received Damage Scaling")]
	[Range(0.01f, 2.5f)]
	public float m_soloPlayerDamageScaling;

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0.01f, 2.5f)]
	public float m_coopPlayerDamageScaling;

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Header("General Difficulty Settings")]
	public bool m_disableMetaPerks;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool m_unleveledWeapons;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int m_startWave;

	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float m_initalWaitOverride;

	[Token(Token = "0x4000E13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float m_waveIntervalOverride;

	[Token(Token = "0x4000E14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float m_easyPathSpawnsTimerOverride;

	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(0.1f, 2.5f)]
	public float m_generatorHealthRatio;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Range(0.1f, 2.5f)]
	public float m_batteryHealthRatio;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Range(0.1f, 2.5f)]
	public float m_pointConsumerCostRatio;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Range(0.1f, 2.5f)]
	[Header("Enemy Health Scale Settings")]
	public float m_enemyHealthRatio;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Range(0.1f, 2.5f)]
	public float m_enemyHeadHealthRatio;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Space]
	[Range(0.1f, 2.5f)]
	public float m_fastEnemyHealthRatio;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Range(0.1f, 2.5f)]
	public float m_fastEnemyHeadHealthRatio;

	[Token(Token = "0x4000E1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Space]
	[Range(0.1f, 2.5f)]
	public float m_spitterEnemyHealthRatio;

	[Token(Token = "0x4000E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Range(0.1f, 2.5f)]
	public float m_spitterEnemyHeadHealthRatio;

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Space]
	[Range(0.1f, 2.5f)]
	public float m_exploderEnemyHealthRatio;

	[Token(Token = "0x4000E1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Range(0.1f, 2.5f)]
	public float m_exploderEnemyHeadHealthRatio;

	[Token(Token = "0x4000E20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Space]
	[Range(0.1f, 2.5f)]
	public float m_forestPeteHealthRatio;

	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Range(0.1f, 2.5f)]
	public float m_forestPeteHeadHealthRatio;

	[Token(Token = "0x4000E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Header("Enemies Difficulty Settings")]
	public bool m_overrideKillshot;

	[Token(Token = "0x4000E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float m_killShotOverrideHealthChange;

	[Token(Token = "0x4000E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public int m_enemySpawnersDifficultyStep;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool m_stunsAlwaysHitMinumum;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float m_stunIdleTimeOverride;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Objectives Difficulty Settings")]
	public int m_killEnemiesObjectiveCountOverride;

	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float m_kingOTHObjectiveTimerOverride;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float m_defendObjectiveTimerOverride;

	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float m_pressButtonsTimerOverride;

	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float m_destroyObjectsTimerOverride;

	[Token(Token = "0x4000E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[Header("Skybox & Fog Overrides")]
	public bool m_overrideSkybox;

	[Token(Token = "0x4000E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	public bool m_overrideFog;

	[Token(Token = "0x4000E2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LightingManager.SkyboxColorGradientSerializable m_skyboxColorOverrides;

	[Token(Token = "0x4000E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public FogColorPairSerializable m_fogColorOverrides;

	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0x141F5C0", Offset = "0x141F5C0", VA = "0x141F5C0")]
	public DifficultyLevel()
	{
	}
}
[Serializable]
[Token(Token = "0x20002AE")]
[CreateAssetMenu(menuName = "Cabin/Loading Screen Strings")]
public class LoadingScreenStringsSet : ScriptableObject
{
	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] m_loadingScreenDescriptionLocId;

	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0x141F658", Offset = "0x141F658", VA = "0x141F658")]
	public LoadingScreenStringsSet()
	{
	}
}
[Token(Token = "0x20002AF")]
[ExecuteInEditMode]
[RequireComponent(typeof(BakeryVolume))]
public class CabinBakeryVolumeController : MonoBehaviour
{
	[Token(Token = "0x4000E31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[ReadOnly]
	[SerializeField]
	private Texture3D[] m_texturesLight;

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[ReadOnly]
	[SerializeField]
	private Texture3D[] m_texturesDark;

	[NonSerialized]
	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTexture[] m_blendTextures;

	[Token(Token = "0x4000E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BakeryVolume m_bakeryVolume;

	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int c_resultID;

	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ComputeShader m_computeShader;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_kernelIndex;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int[] c_sourceID;

	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int[] c_blendID;

	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int c_ResolutionID;

	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static List<CabinBakeryVolumeController> s_knownVolumeControllers;

	[Token(Token = "0x4000E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static CabinBakeryVolumeController s_activeVolumeController;

	[Token(Token = "0x17000273")]
	public static CabinBakeryVolumeController ActiveVolumeController
	{
		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x141F660", Offset = "0x141F660", VA = "0x141F660")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0x141F6B8", Offset = "0x141F6B8", VA = "0x141F6B8")]
	public static bool RefreshPosition(Vector3 contributionPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0x141F940", Offset = "0x141F940", VA = "0x141F940")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0x141F920", Offset = "0x141F920", VA = "0x141F920")]
	private bool Contains(Vector3 position)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC5")]
	[Address(RVA = "0x141F998", Offset = "0x141F998", VA = "0x141F998")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0x141FE48", Offset = "0x141FE48", VA = "0x141FE48")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0x141FF68", Offset = "0x141FF68", VA = "0x141FF68")]
	public void Refresh(float blend)
	{
	}

	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0x1420468", Offset = "0x1420468", VA = "0x1420468")]
	public void SetVolumes(LightingScenario lightingScenario, Texture3D[] volumes)
	{
	}

	[Token(Token = "0x6000FC9")]
	[Address(RVA = "0x1420494", Offset = "0x1420494", VA = "0x1420494")]
	public CabinBakeryVolumeController()
	{
	}
}
[Token(Token = "0x20002B1")]
[ExecuteInEditMode]
public class EnvironmentController : MonoBehaviour
{
	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("m_globalLightingSetup")]
	private GlobalRenderingSetup m_globalRenderingSetup;

	[Token(Token = "0x6000FCE")]
	[Address(RVA = "0x1420768", Offset = "0x1420768", VA = "0x1420768")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0x142080C", Offset = "0x142080C", VA = "0x142080C")]
	public EnvironmentController()
	{
	}
}
[Token(Token = "0x20002B2")]
public class FlickeringLight : MonoBehaviour
{
	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string message;

	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0x1420814", Offset = "0x1420814", VA = "0x1420814")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0x14208DC", Offset = "0x14208DC", VA = "0x14208DC")]
	public FlickeringLight()
	{
	}
}
[Token(Token = "0x20002B3")]
public static class LightingManager
{
	[Serializable]
	[Token(Token = "0x20002B4")]
	public class SkyboxColorGradient
	{
		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color TopColor;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color BottomColor;

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x1421774", Offset = "0x1421774", VA = "0x1421774")]
		public SkyboxColorGradient()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20002B5")]
	public class SkyboxColorGradientSerializable
	{
		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color32 TopColor;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color32 BottomColor;

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x142177C", Offset = "0x142177C", VA = "0x142177C")]
		public SkyboxColorGradient GetValues()
		{
			return null;
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x142199C", Offset = "0x142199C", VA = "0x142199C")]
		public SkyboxColorGradientSerializable()
		{
		}
	}

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float s_powerIntensity;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_lightBlend;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int s_fogNearColor;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int s_fogMiddleColor;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int s_fogRangeInterior;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static FogColorPair s_fogColourPair;

	[Token(Token = "0x4000E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static SkyboxColorGradient m_defaultSkybox;

	[Token(Token = "0x4000E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Material m_skyboxAppliedMaterial;

	[Token(Token = "0x17000274")]
	public static float PowerIntensity
	{
		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x14208EC", Offset = "0x14208EC", VA = "0x14208EC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000275")]
	public static bool IsLightingOn
	{
		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x1420944", Offset = "0x1420944", VA = "0x1420944")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0x14209A4", Offset = "0x14209A4", VA = "0x14209A4")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitRuntime()
	{
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0x1420AF8", Offset = "0x1420AF8", VA = "0x1420AF8")]
	private static void Update()
	{
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0x1420D7C", Offset = "0x1420D7C", VA = "0x1420D7C")]
	public static void SetPowerIntensity(float lightingStrength)
	{
	}

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0x1420A6C", Offset = "0x1420A6C", VA = "0x1420A6C")]
	public static void ForceRefresh()
	{
	}

	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0x1420F6C", Offset = "0x1420F6C", VA = "0x1420F6C")]
	private static void Refresh()
	{
	}

	[Token(Token = "0x6000FD9")]
	[Address(RVA = "0x1420E4C", Offset = "0x1420E4C", VA = "0x1420E4C")]
	private static void SetFogColor(FogColorPair overrideFogColorPair)
	{
	}

	[Token(Token = "0x6000FDA")]
	[Address(RVA = "0x142145C", Offset = "0x142145C", VA = "0x142145C")]
	private static void SetSkyboxGradient(SkyboxColorGradient skyboxColorGradient)
	{
	}

	[Token(Token = "0x6000FDB")]
	[Address(RVA = "0x141E9E4", Offset = "0x141E9E4", VA = "0x141E9E4")]
	public static void ApplyDifficultyLightingOptions()
	{
	}
}
[Token(Token = "0x20002B6")]
public static class PlayerLightingHelper
{
	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0x1420C9C", Offset = "0x1420C9C", VA = "0x1420C9C")]
	public static Vector3 GetContributionPoint()
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20002B7")]
[ExecuteInEditMode]
public class PTPointLight : MonoBehaviour
{
	[Token(Token = "0x4000E4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PTPointLightData LightData;

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x14219A4", Offset = "0x14219A4", VA = "0x14219A4")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0x1421A90", Offset = "0x1421A90", VA = "0x1421A90")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0x1421B50", Offset = "0x1421B50", VA = "0x1421B50")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0x1421B84", Offset = "0x1421B84", VA = "0x1421B84")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0x1421B94", Offset = "0x1421B94", VA = "0x1421B94")]
	public PTPointLight()
	{
	}
}
[Token(Token = "0x20002B8")]
[ExecuteInEditMode]
[RequireComponent(typeof(PTPointLight))]
public class PTPointLightAnimationController : MonoBehaviour
{
	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float m_intensity;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PTPointLight m_ptPointLight;

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0x1421C78", Offset = "0x1421C78", VA = "0x1421C78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0x1421CD0", Offset = "0x1421CD0", VA = "0x1421CD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0x1421CF8", Offset = "0x1421CF8", VA = "0x1421CF8")]
	public PTPointLightAnimationController()
	{
	}
}
[Serializable]
[Token(Token = "0x20002B9")]
public class PTPointLightData
{
	[Token(Token = "0x20002BA")]
	public enum LightLayer
	{
		[Token(Token = "0x4000E58")]
		Environment,
		[Token(Token = "0x4000E59")]
		Weapon
	}

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[FormerlySerializedAs("vPos")]
	public Vector3 m_position;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[FormerlySerializedAs("color")]
	public Color m_color;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[FormerlySerializedAs("fIntensity")]
	public float m_intensity;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[FormerlySerializedAs("fAtten")]
	public float m_attenuation;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public LightLayer m_lightLayer;

	[NonSerialized]
	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_contribution;

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0x1421C04", Offset = "0x1421C04", VA = "0x1421C04")]
	public PTPointLightData()
	{
	}

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0x1421D08", Offset = "0x1421D08", VA = "0x1421D08")]
	public float CalculateContributionAtPoint(Vector3 position)
	{
		return default(float);
	}
}
[Token(Token = "0x20002BB")]
public class PTPointLightFlash : Poolable
{
	[Token(Token = "0x4000E5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float Duration;

	[Token(Token = "0x4000E5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float Intensity;

	[Token(Token = "0x4000E5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PTPointLightData LightData;

	[Token(Token = "0x4000E5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_fTimer;

	[Token(Token = "0x4000E5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_fRate;

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0x1421D4C", Offset = "0x1421D4C", VA = "0x1421D4C", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0x1421DC0", Offset = "0x1421DC0", VA = "0x1421DC0", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6000FED")]
	[Address(RVA = "0x1421E18", Offset = "0x1421E18", VA = "0x1421E18", Slot = "11")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0x1421E8C", Offset = "0x1421E8C", VA = "0x1421E8C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0x1421EE4", Offset = "0x1421EE4", VA = "0x1421EE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0x1421F6C", Offset = "0x1421F6C", VA = "0x1421F6C")]
	public PTPointLightFlash()
	{
	}
}
[Token(Token = "0x20002BC")]
public static class PTPointLightManager
{
	[Token(Token = "0x4000E5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PTPointLightManagerImp s_imp;

	[Token(Token = "0x6000FF1")]
	[Address(RVA = "0x1421FE8", Offset = "0x1421FE8", VA = "0x1421FE8")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitRuntime()
	{
	}

	[Token(Token = "0x6000FF2")]
	[Address(RVA = "0x1421A28", Offset = "0x1421A28", VA = "0x1421A28")]
	public static void AddLight(PTPointLightData lightData)
	{
	}

	[Token(Token = "0x6000FF3")]
	[Address(RVA = "0x1421AE8", Offset = "0x1421AE8", VA = "0x1421AE8")]
	public static void RemoveLight(PTPointLightData lightData)
	{
	}

	[Token(Token = "0x6000FF4")]
	[Address(RVA = "0x142235C", Offset = "0x142235C", VA = "0x142235C")]
	public static void Update()
	{
	}
}
[Token(Token = "0x20002BD")]
public class PTPointLightManagerImp
{
	[Token(Token = "0x4000E60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector4 m_lightPosX;

	[Token(Token = "0x4000E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4 m_lightPosY;

	[Token(Token = "0x4000E62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector4 m_lightPosZ;

	[Token(Token = "0x4000E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector4 m_lightAttenSq;

	[Token(Token = "0x4000E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 s_safePositionForUnusedLight;

	[Token(Token = "0x4000E65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly PTPointLightData s_safeLightData;

	[Token(Token = "0x4000E66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PTPointLightData[] m_activeLights;

	[Token(Token = "0x4000E67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<PTPointLightData> m_otherLights;

	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<PTPointLightData> m_environmentLights;

	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0x14221D8", Offset = "0x14221D8", VA = "0x14221D8")]
	public void AddLight(PTPointLightData pointLightData)
	{
	}

	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0x14222F0", Offset = "0x14222F0", VA = "0x14222F0")]
	public void RemoveLight(PTPointLightData pointLightData)
	{
	}

	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0x14223BC", Offset = "0x14223BC", VA = "0x14223BC")]
	public void Update()
	{
	}

	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0x14224F0", Offset = "0x14224F0", VA = "0x14224F0")]
	public static void PrioritizeLights(Vector3 contributionPoint, ref List<PTPointLightData> environmentLights, ref List<PTPointLightData> otherLights)
	{
	}

	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0x14227CC", Offset = "0x14227CC", VA = "0x14227CC")]
	private void SetGlobalShaderParameters(in PTPointLightData[] activeLights)
	{
	}

	[Token(Token = "0x6000FFB")]
	[Address(RVA = "0x1422AE0", Offset = "0x1422AE0", VA = "0x1422AE0")]
	public static void UpdateLightContribution(ref List<PTPointLightData> lights, Vector3 contributionPoint)
	{
	}

	[Token(Token = "0x6000FFC")]
	[Address(RVA = "0x1422BD4", Offset = "0x1422BD4", VA = "0x1422BD4")]
	public static void SortLightsByContribution(ref List<PTPointLightData> lights)
	{
	}

	[Token(Token = "0x6000FFD")]
	[Address(RVA = "0x142259C", Offset = "0x142259C", VA = "0x142259C")]
	public static void SelectActiveLights(in List<PTPointLightData> otherLights, in List<PTPointLightData> envLights, ref PTPointLightData[] activeLights)
	{
	}

	[Token(Token = "0x6000FFE")]
	[Address(RVA = "0x14220F0", Offset = "0x14220F0", VA = "0x14220F0")]
	public PTPointLightManagerImp()
	{
	}
}
[Token(Token = "0x20002BF")]
[DisallowMultipleComponent]
public class MultiplayerHubPointDirectory : PT.SceneContentsDirectory.SceneContentsDirectory<PlayerSpawnPoint, MultiplayerHubPointDirectory>
{
	[Token(Token = "0x6001003")]
	[Address(RVA = "0x1422EB4", Offset = "0x1422EB4", VA = "0x1422EB4")]
	public MultiplayerHubPointDirectory()
	{
	}
}
[Token(Token = "0x20002C0")]
public class MultiplayerLeaderboardMarker : MonoBehaviour
{
	[Token(Token = "0x6001004")]
	[Address(RVA = "0x1422F20", Offset = "0x1422F20", VA = "0x1422F20")]
	public MultiplayerLeaderboardMarker()
	{
	}
}
[Token(Token = "0x20002C1")]
public class MultiplayerLeaderboardPlayerPoint : MonoBehaviour
{
	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Set this to the id of the player that should be positioned here. 1 is the first player, 2 the second etc.")]
	private int m_playerId;

	[Token(Token = "0x17000276")]
	public int PlayerIndex
	{
		[Token(Token = "0x6001005")]
		[Address(RVA = "0x1422F28", Offset = "0x1422F28", VA = "0x1422F28")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001006")]
	[Address(RVA = "0x1422F34", Offset = "0x1422F34", VA = "0x1422F34")]
	public MultiplayerLeaderboardPlayerPoint()
	{
	}
}
[Token(Token = "0x20002C2")]
public class MultiplayerSpectatorPoint : MonoBehaviour
{
	[Token(Token = "0x6001007")]
	[Address(RVA = "0x1422F44", Offset = "0x1422F44", VA = "0x1422F44")]
	public MultiplayerSpectatorPoint()
	{
	}
}
[Token(Token = "0x20002C3")]
public class PlayerSpawnPoint : MonoBehaviour
{
	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnSpawn;

	[Token(Token = "0x6001008")]
	[Address(RVA = "0x1422F4C", Offset = "0x1422F4C", VA = "0x1422F4C")]
	public PlayerSpawnPoint()
	{
	}
}
[Token(Token = "0x20002C4")]
[Obsolete("This class is redundant following removal of point walking and is only kept for backwards compatibility in existing prefabs.", false)]
public class PlayerSuggestedCover : CachedMonoBehaviour
{
	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Min(0.05f)]
	[SerializeField]
	[FormerlySerializedAs("m_radius")]
	[UnityEngine.Tooltip("We'll snap the destination of the point walk to this suggested cover if the selected end point is within this radius.")]
	private float m_selectionRadius;

	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Only suggest this cover if the player's feet are at least this far away.")]
	[SerializeField]
	[Min(0.05f)]
	private float m_proximityRadius;

	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<PlayerSuggestedCover> s_allPlayerCoverNodes;

	[Token(Token = "0x6001009")]
	[Address(RVA = "0x1422F54", Offset = "0x1422F54", VA = "0x1422F54")]
	private void Awake()
	{
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0x1422FD4", Offset = "0x1422FD4", VA = "0x1422FD4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600100B")]
	[Address(RVA = "0x1423054", Offset = "0x1423054", VA = "0x1423054")]
	public static PlayerSuggestedCover GetSuggestedCoverForPosition(Vector3 selectionPosition)
	{
		return null;
	}

	[Token(Token = "0x600100C")]
	[Address(RVA = "0x14232E8", Offset = "0x14232E8", VA = "0x14232E8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0x1423410", Offset = "0x1423410", VA = "0x1423410")]
	public PlayerSuggestedCover()
	{
	}
}
[Token(Token = "0x20002C5")]
public static class GlobalMessages
{
	[Token(Token = "0x4000E70")]
	public const string OnGameplayStart = "OnGameplayStart";

	[Token(Token = "0x4000E71")]
	public const string OnGameplayExit = "OnGameplayExit";

	[Token(Token = "0x4000E72")]
	public const string OnGameplayPaused = "OnGameplayPaused";

	[Token(Token = "0x4000E73")]
	public const string OnGameplayUnpaused = "OnGameplayUnpaused";

	[Token(Token = "0x4000E74")]
	public const string OnSettingsDisplayed = "OnSettingsDisplayed";

	[Token(Token = "0x4000E75")]
	public const string OnSettingsHidden = "OnSettingsHidden";

	[Token(Token = "0x4000E76")]
	public const string OnDamageReceived = "OnDamageReceived";

	[Token(Token = "0x4000E77")]
	public const string OnPlayerEnableTrigger = "OnPlayerEnableTrigger";

	[Token(Token = "0x4000E78")]
	public const string OnSlowdownSacredRiteToggle = "OnSlowdownSacredRiteToggle";

	[Token(Token = "0x4000E79")]
	public const string OnLevelEndRequested = "OnLevelEndRequested";
}
[Token(Token = "0x20002C6")]
public class MetaDisplayMenu : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x20002C7")]
	public enum DisplayMode
	{
		[Token(Token = "0x4000E83")]
		None,
		[Token(Token = "0x4000E84")]
		CharacterStats,
		[Token(Token = "0x4000E85")]
		WeaponList,
		[Token(Token = "0x4000E86")]
		WeaponDetails,
		[Token(Token = "0x4000E87")]
		EndGameCharacterStats,
		[Token(Token = "0x4000E88")]
		ProfileSummary
	}

	[Token(Token = "0x20002C8")]
	public class state_CharacterStats : ButtonHandlerState<MetaDisplayMenu>
	{
		[Token(Token = "0x6001018")]
		[Address(RVA = "0x14238AC", Offset = "0x14238AC", VA = "0x14238AC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x1423ABC", Offset = "0x1423ABC", VA = "0x1423ABC", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x1423B74", Offset = "0x1423B74", VA = "0x1423B74", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x1423C84", Offset = "0x1423C84", VA = "0x1423C84")]
		public state_CharacterStats()
		{
		}
	}

	[Token(Token = "0x20002C9")]
	public class state_WeaponsList : ButtonHandlerState<MetaDisplayMenu>
	{
		[Token(Token = "0x4000E89")]
		private const int c_gridCellPerPage = 4;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_weaponSelected;

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x1423CCC", Offset = "0x1423CCC", VA = "0x1423CCC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x14241B4", Offset = "0x14241B4", VA = "0x14241B4", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x1423E68", Offset = "0x1423E68", VA = "0x1423E68")]
		private void TurnThePage(int pageNo)
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x1424248", Offset = "0x1424248", VA = "0x1424248", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x14245B0", Offset = "0x14245B0", VA = "0x14245B0", Slot = "16")]
		protected override bool OnButtonEnter(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x14246AC", Offset = "0x14246AC", VA = "0x14246AC", Slot = "17")]
		protected override bool OnButtonExit(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x142477C", Offset = "0x142477C", VA = "0x142477C")]
		public state_WeaponsList()
		{
		}
	}

	[Token(Token = "0x20002CA")]
	public class state_WeaponDetails : ButtonHandlerState<MetaDisplayMenu>
	{
		[Token(Token = "0x6001023")]
		[Address(RVA = "0x14247C4", Offset = "0x14247C4", VA = "0x14247C4", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x1424858", Offset = "0x1424858", VA = "0x1424858", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x1424910", Offset = "0x1424910", VA = "0x1424910", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x14249F0", Offset = "0x14249F0", VA = "0x14249F0")]
		public state_WeaponDetails()
		{
		}
	}

	[Token(Token = "0x20002CB")]
	public class state_EndGameCharacterStats : ButtonHandlerState<MetaDisplayMenu>
	{
		[Token(Token = "0x6001027")]
		[Address(RVA = "0x1424A38", Offset = "0x1424A38", VA = "0x1424A38", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x1424ACC", Offset = "0x1424ACC", VA = "0x1424ACC", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x1424B60", Offset = "0x1424B60", VA = "0x1424B60")]
		public state_EndGameCharacterStats()
		{
		}
	}

	[Token(Token = "0x20002CC")]
	public class state_ProfileSummary : ButtonHandlerState<MetaDisplayMenu>
	{
		[Token(Token = "0x600102A")]
		[Address(RVA = "0x1424BA8", Offset = "0x1424BA8", VA = "0x1424BA8", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x1424C3C", Offset = "0x1424C3C", VA = "0x1424C3C", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x1424CD0", Offset = "0x1424CD0", VA = "0x1424CD0")]
		public state_ProfileSummary()
		{
		}
	}

	[Token(Token = "0x4000E7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObjectGroups m_displayGroups;

	[Token(Token = "0x4000E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private MetaUIViewModel m_metaUIViewModel;

	[Token(Token = "0x4000E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject RankDisplayPanel;

	[Token(Token = "0x4000E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject RankCard;

	[Token(Token = "0x4000E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject WeaponDisplayPanel;

	[Token(Token = "0x4000E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject WeaponCard;

	[Token(Token = "0x4000E80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<GameObject> ScreenList;

	[Token(Token = "0x4000E81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<GameObject> CardList;

	[Token(Token = "0x600100F")]
	[Address(RVA = "0x14234BC", Offset = "0x14234BC", VA = "0x14234BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0x14234DC", Offset = "0x14234DC", VA = "0x14234DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0x1423554", Offset = "0x1423554", VA = "0x1423554")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0x1423614", Offset = "0x1423614", VA = "0x1423614", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001013")]
	[Address(RVA = "0x1423640", Offset = "0x1423640", VA = "0x1423640", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001014")]
	[Address(RVA = "0x1423550", Offset = "0x1423550", VA = "0x1423550")]
	private void PopulateRankGrid()
	{
	}

	[Token(Token = "0x6001015")]
	[Address(RVA = "0x14234E0", Offset = "0x14234E0", VA = "0x14234E0")]
	private void PopulateWeaponGrid()
	{
	}

	[Token(Token = "0x6001016")]
	[Address(RVA = "0x1423648", Offset = "0x1423648", VA = "0x1423648")]
	private void WeaponInfoScreen()
	{
	}

	[Token(Token = "0x6001017")]
	[Address(RVA = "0x14237F4", Offset = "0x14237F4", VA = "0x14237F4")]
	public MetaDisplayMenu()
	{
	}
}
[Token(Token = "0x20002CD")]
public class MetaXpBar : MonoBehaviour
{
	[Token(Token = "0x4000E8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Slider m_XpBar;

	[Token(Token = "0x4000E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI XpAmmount;

	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public XpTypes XP;

	[Token(Token = "0x600102D")]
	[Address(RVA = "0x1424D18", Offset = "0x1424D18", VA = "0x1424D18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0x1424D1C", Offset = "0x1424D1C", VA = "0x1424D1C")]
	public void UpdateBar()
	{
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0x1424E94", Offset = "0x1424E94", VA = "0x1424E94")]
	public MetaXpBar()
	{
	}
}
[Token(Token = "0x20002CE")]
public class ProfileUnlock : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler
{
	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button m_button;

	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MetaUIViewModel m_metaUIViewModel;

	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEvent m_onRankUnlocked;

	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rank m_rank;

	[Token(Token = "0x17000277")]
	private Rank boundRank
	{
		[Token(Token = "0x6001030")]
		[Address(RVA = "0x1424E9C", Offset = "0x1424E9C", VA = "0x1424E9C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001031")]
		[Address(RVA = "0x1424EA4", Offset = "0x1424EA4", VA = "0x1424EA4")]
		set
		{
		}
	}

	[Token(Token = "0x6001032")]
	[Address(RVA = "0x1425034", Offset = "0x1425034", VA = "0x1425034")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001033")]
	[Address(RVA = "0x142503C", Offset = "0x142503C", VA = "0x142503C")]
	public void BindRank(object value)
	{
	}

	[Token(Token = "0x6001034")]
	[Address(RVA = "0x14250C4", Offset = "0x14250C4", VA = "0x14250C4")]
	public void OnButtonClicked()
	{
	}

	[Token(Token = "0x6001035")]
	[Address(RVA = "0x14250E8", Offset = "0x14250E8", VA = "0x14250E8")]
	private void OnRankUnlocked()
	{
	}

	[Token(Token = "0x6001036")]
	[Address(RVA = "0x14250FC", Offset = "0x14250FC", VA = "0x14250FC", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6001037")]
	[Address(RVA = "0x1425120", Offset = "0x1425120", VA = "0x1425120")]
	public ProfileUnlock()
	{
	}
}
[Token(Token = "0x20002CF")]
public class RankCard : MonoBehaviour
{
	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI m_Name;

	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Image> Images;

	[Token(Token = "0x6001038")]
	[Address(RVA = "0x1425128", Offset = "0x1425128", VA = "0x1425128")]
	public void PopulateInfo(string Name, Sprite Icon, Color C)
	{
	}

	[Token(Token = "0x6001039")]
	[Address(RVA = "0x1425210", Offset = "0x1425210", VA = "0x1425210")]
	public RankCard()
	{
	}
}
[Token(Token = "0x20002D0")]
public class State_MetaInitialize : BaseStateAttachedLogic
{
	[Token(Token = "0x600103A")]
	[Address(RVA = "0x1425218", Offset = "0x1425218", VA = "0x1425218", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600103B")]
	[Address(RVA = "0x142533C", Offset = "0x142533C", VA = "0x142533C")]
	public State_MetaInitialize()
	{
	}
}
[Token(Token = "0x20002D1")]
public class WeaponCard : MonoBehaviour
{
	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI m_Name;

	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image m_Icon;

	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Slider m_StarBar;

	[Token(Token = "0x600103C")]
	[Address(RVA = "0x1425344", Offset = "0x1425344", VA = "0x1425344")]
	public void PopulateInfo(string Name, Sprite Icon, int StarAmmount)
	{
	}

	[Token(Token = "0x600103D")]
	[Address(RVA = "0x14253AC", Offset = "0x14253AC", VA = "0x14253AC")]
	public WeaponCard()
	{
	}
}
[Token(Token = "0x20002D2")]
public class WeaponMeta : MonoBehaviour
{
	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> m_WepAttachments;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private VrGun m_vrGun;

	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private VrRecoil m_recoilController;

	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private WeaponSkin m_weaponSkin;

	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WeaponConfig m_weaponConfig;

	[Token(Token = "0x17000278")]
	private WeaponConfig WeaponConfig
	{
		[Token(Token = "0x600103E")]
		[Address(RVA = "0x14253B4", Offset = "0x14253B4", VA = "0x14253B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600103F")]
	[Address(RVA = "0x14254C4", Offset = "0x14254C4", VA = "0x14254C4")]
	public void Init()
	{
	}

	[Token(Token = "0x6001040")]
	[Address(RVA = "0x14254DC", Offset = "0x14254DC", VA = "0x14254DC")]
	private void SetReferences()
	{
	}

	[Token(Token = "0x6001041")]
	[Address(RVA = "0x1425690", Offset = "0x1425690", VA = "0x1425690")]
	private void Start()
	{
	}

	[Token(Token = "0x6001042")]
	[Address(RVA = "0x1425644", Offset = "0x1425644", VA = "0x1425644")]
	public void SetRecoil()
	{
	}

	[Token(Token = "0x6001043")]
	[Address(RVA = "0x14256A8", Offset = "0x14256A8", VA = "0x14256A8")]
	public void SetSkin(weaponSkinNames weaponSkin)
	{
	}

	[Token(Token = "0x6001044")]
	[Address(RVA = "0x14258F0", Offset = "0x14258F0", VA = "0x14258F0")]
	public void SetAllAttachmentsActive(bool isEnabled)
	{
	}

	[Token(Token = "0x6001045")]
	[Address(RVA = "0x1425A48", Offset = "0x1425A48", VA = "0x1425A48")]
	public void SetAttachmentActive(string attachmentName, bool isEnabled)
	{
	}

	[Token(Token = "0x6001046")]
	[Address(RVA = "0x1425BC4", Offset = "0x1425BC4", VA = "0x1425BC4")]
	public void RefreshWeaponVisuals(bool forceDisableVisuals)
	{
	}

	[Token(Token = "0x6001047")]
	[Address(RVA = "0x1425EDC", Offset = "0x1425EDC", VA = "0x1425EDC")]
	public WeaponMeta()
	{
	}
}
[Token(Token = "0x20002D3")]
public enum weaponSkinNames
{
	[Token(Token = "0x4000E9D")]
	Basic,
	[Token(Token = "0x4000E9E")]
	Golden
}
[Token(Token = "0x20002D4")]
public class WeaponSkin : MonoBehaviour
{
	[Token(Token = "0x4000E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> m_gunElements;

	[Token(Token = "0x4000EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<MeshRenderer> m_meshRenderers;

	[Token(Token = "0x4000EA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<WeaponSkinDescription> m_weaponSkins;

	[Token(Token = "0x6001048")]
	[Address(RVA = "0x1425F64", Offset = "0x1425F64", VA = "0x1425F64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001049")]
	[Address(RVA = "0x142573C", Offset = "0x142573C", VA = "0x142573C")]
	public void SkinChange(weaponSkinNames weaponSkinName)
	{
	}

	[Token(Token = "0x600104A")]
	[Address(RVA = "0x1426100", Offset = "0x1426100", VA = "0x1426100")]
	public WeaponSkin()
	{
	}
}
[Token(Token = "0x20002D6")]
[CreateAssetMenu(fileName = "WeaponSkinDescription", menuName = "Weapon/Skin", order = 1)]
public class WeaponSkinDescription : ScriptableObject
{
	[Token(Token = "0x4000EA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public weaponSkinNames weaponSkinID;

	[Token(Token = "0x4000EA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material originalMaterialToReplace;

	[Token(Token = "0x4000EA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material weaponSkinMat;

	[Token(Token = "0x600104D")]
	[Address(RVA = "0x142624C", Offset = "0x142624C", VA = "0x142624C")]
	public WeaponSkinDescription()
	{
	}
}
[Token(Token = "0x20002D7")]
public class MetaAvatarEntity : OvrAvatarEntity
{
	[Serializable]
	[Token(Token = "0x20002D8")]
	private class InventorySlotJointPair
	{
		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform Anchor;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Identifier Key;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CAPI.ovrAvatar2JointType Joint;

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x142796C", Offset = "0x142796C", VA = "0x142796C")]
		public InventorySlotJointPair()
		{
		}
	}

	[Token(Token = "0x20002D9")]
	public enum AssetSource
	{
		[Token(Token = "0x4000EBF")]
		Zip,
		[Token(Token = "0x4000EC0")]
		StreamingAssets
	}

	[Serializable]
	[Token(Token = "0x20002DA")]
	private struct AssetData
	{
		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AssetSource source;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string path;
	}

	[Token(Token = "0x20002DB")]
	[CompilerGenerated]
	private sealed class <Start>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MetaAvatarEntity <>4__this;

		[Token(Token = "0x17000281")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x14279D8", Offset = "0x14279D8", VA = "0x14279D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000282")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001073")]
			[Address(RVA = "0x1427A20", Offset = "0x1427A20", VA = "0x1427A20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x1426370", Offset = "0x1426370", VA = "0x1426370")]
		[DebuggerHidden]
		public <Start>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x1427974", Offset = "0x1427974", VA = "0x1427974", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x1427978", Offset = "0x1427978", VA = "0x1427978", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x14279E0", Offset = "0x14279E0", VA = "0x14279E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002DC")]
	[CompilerGenerated]
	private sealed class <SetTrackingAfterSnap>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GraspMarker graspMarker;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TransformTracker tracker;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TransformTracker.TrackingType trackingType;

		[Token(Token = "0x17000283")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001077")]
			[Address(RVA = "0x1427BD0", Offset = "0x1427BD0", VA = "0x1427BD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000284")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001079")]
			[Address(RVA = "0x1427C18", Offset = "0x1427C18", VA = "0x1427C18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x142696C", Offset = "0x142696C", VA = "0x142696C")]
		[DebuggerHidden]
		public <SetTrackingAfterSnap>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x1427A28", Offset = "0x1427A28", VA = "0x1427A28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x1427A2C", Offset = "0x1427A2C", VA = "0x1427A2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x1427BD8", Offset = "0x1427BD8", VA = "0x1427BD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002DD")]
	[CompilerGenerated]
	private sealed class <LoadCdnAvatar>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MetaAvatarEntity <>4__this;

		[Token(Token = "0x17000285")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600107D")]
			[Address(RVA = "0x1427D0C", Offset = "0x1427D0C", VA = "0x1427D0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000286")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600107F")]
			[Address(RVA = "0x1427D54", Offset = "0x1427D54", VA = "0x1427D54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x1426FA8", Offset = "0x1426FA8", VA = "0x1426FA8")]
		[DebuggerHidden]
		public <LoadCdnAvatar>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x1427C20", Offset = "0x1427C20", VA = "0x1427C20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x1427C24", Offset = "0x1427C24", VA = "0x1427C24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x1427D14", Offset = "0x1427D14", VA = "0x1427D14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002DE")]
	[CompilerGenerated]
	private sealed class <LoadUserAvatar>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MetaAvatarEntity <>4__this;

		[Token(Token = "0x17000287")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001083")]
			[Address(RVA = "0x1427DD4", Offset = "0x1427DD4", VA = "0x1427DD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000288")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001085")]
			[Address(RVA = "0x1427E1C", Offset = "0x1427E1C", VA = "0x1427E1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x1427044", Offset = "0x1427044", VA = "0x1427044")]
		[DebuggerHidden]
		public <LoadUserAvatar>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x1427D5C", Offset = "0x1427D5C", VA = "0x1427D5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x1427D60", Offset = "0x1427D60", VA = "0x1427D60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x1427DDC", Offset = "0x1427DDC", VA = "0x1427DDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002DF")]
	[CompilerGenerated]
	private sealed class <Retry_HasAvatarRequest>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MetaAvatarEntity <>4__this;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <totalAttempts>5__2;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool <continueRetries>5__3;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <retriesRemaining>5__4;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool <hasFoundAvatar>5__5;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool <requestComplete>5__6;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private System.Threading.Tasks.Task<OvrAvatarManager.HasAvatarRequestResultCode> <hasAvatarRequest>5__7;

		[Token(Token = "0x17000289")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001089")]
			[Address(RVA = "0x1428328", Offset = "0x1428328", VA = "0x1428328", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600108B")]
			[Address(RVA = "0x1428370", Offset = "0x1428370", VA = "0x1428370", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x14276EC", Offset = "0x14276EC", VA = "0x14276EC")]
		[DebuggerHidden]
		public <Retry_HasAvatarRequest>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x1427E24", Offset = "0x1427E24", VA = "0x1427E24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x1427E28", Offset = "0x1427E28", VA = "0x1427E28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x1428330", Offset = "0x1428330", VA = "0x1428330", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002E0")]
	[CompilerGenerated]
	private sealed class <AutoRetry_LoadUser>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MetaAvatarEntity <>4__this;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool loadFallbackOnFailure;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <totalAttempts>5__2;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <remainingAttempts>5__3;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool <didLoadAvatar>5__4;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <currentPollingInterval>5__5;

		[Token(Token = "0x1700028B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600108F")]
			[Address(RVA = "0x14285F0", Offset = "0x14285F0", VA = "0x14285F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x1428638", Offset = "0x1428638", VA = "0x1428638", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x142779C", Offset = "0x142779C", VA = "0x142779C")]
		[DebuggerHidden]
		public <AutoRetry_LoadUser>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x1428378", Offset = "0x1428378", VA = "0x1428378", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x142837C", Offset = "0x142837C", VA = "0x142837C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x14285F8", Offset = "0x14285F8", VA = "0x14285F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002E1")]
	[CompilerGenerated]
	private sealed class <PollForAvatarChange>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MetaAvatarEntity <>4__this;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSecondsRealtime <waitForPollInterval>5__2;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <continueChecking>5__3;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private System.Threading.Tasks.Task<OvrAvatarManager.HasAvatarChangedRequestResultCode> <checkTask>5__4;

		[Token(Token = "0x1700028D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001095")]
			[Address(RVA = "0x14289A0", Offset = "0x14289A0", VA = "0x14289A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001097")]
			[Address(RVA = "0x14289E8", Offset = "0x14289E8", VA = "0x14289E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x1427838", Offset = "0x1427838", VA = "0x1427838")]
		[DebuggerHidden]
		public <PollForAvatarChange>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x1428640", Offset = "0x1428640", VA = "0x1428640", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x1428644", Offset = "0x1428644", VA = "0x1428644", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0x14289A8", Offset = "0x14289A8", VA = "0x14289A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[Header("Meta Avatar Entity")]
	[SerializeField]
	private Texture m_dissolveTexture;

	[Token(Token = "0x4000EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	private OvrAvatarCustomHandPose m_RightHandCustomHandPose;

	[Token(Token = "0x4000EA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[SerializeField]
	private OvrAvatarCustomHandPose m_LeftHandCustomHandPose;

	[Token(Token = "0x4000EA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[SerializeField]
	private TransformTrackerWithLimit m_HeadTransformTracker;

	[Token(Token = "0x4000EAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	private TransformTrackerWithLimit m_RightHandTransformTracker;

	[Token(Token = "0x4000EAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private TransformTrackerWithLimit m_LeftHandTransformTracker;

	[Token(Token = "0x4000EAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	private InventorySlotJointPair[] m_InventoryAnchors;

	[Token(Token = "0x4000EAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	public ulong OculusUserID;

	[Token(Token = "0x4000EAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	public HealthStatus AgentHealthStatus;

	[Token(Token = "0x4000EAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private bool b_isAvatarLoaded;

	[Token(Token = "0x4000EB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A1")]
	private bool b_pendingHidden;

	[Token(Token = "0x4000EB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private Dissolve m_dissolve;

	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private VrHand m_leftVRHand;

	[Token(Token = "0x4000EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private VrHand m_rightVRHand;

	[Token(Token = "0x4000EB4")]
	private const string logScope = "MetaAvatar";

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	[Header("Variables from Sample Avatar Entity")]
	[SerializeField]
	[UnityEngine.Tooltip("Automatically retry LoadUser download request on failure")]
	private bool m_autoCdnRetry;

	[Token(Token = "0x4000EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C1")]
	[SerializeField]
	[UnityEngine.Tooltip("Automatically check for avatar changes")]
	private bool m_autoCheckChanges;

	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
	[Range(4f, 320f)]
	[SerializeField]
	[UnityEngine.Tooltip("How frequently to check for avatar changes")]
	private float m_changeCheckInterval;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	[SerializeField]
	[Header("Assets")]
	[UnityEngine.Tooltip("Asset paths to load, and whether each asset comes from a preloaded zip file or directly from StreamingAssets. See Preset Asset settings on OvrAvatarManager for how this maps to the real file name.")]
	private List<AssetData> m_assets;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	[SerializeField]
	[UnityEngine.Tooltip("Folder under StreamingAssets containing the avatar files")]
	private string m_fallbackAvatarsFolder;

	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	[UnityEngine.Tooltip("Adds an underscore between the path and the filename (platform specific) postfix, such as \"_rift.glb\"")]
	[SerializeField]
	private string m_filePostfix;

	[Token(Token = "0x17000279")]
	public bool IsAvatarLoaded
	{
		[Token(Token = "0x600104E")]
		[Address(RVA = "0x1426254", Offset = "0x1426254", VA = "0x1426254")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700027A")]
	public OvrAvatarCustomHandPose RightHandCustomHandPose
	{
		[Token(Token = "0x600104F")]
		[Address(RVA = "0x142625C", Offset = "0x142625C", VA = "0x142625C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027B")]
	public OvrAvatarCustomHandPose LeftHandCustomHandPose
	{
		[Token(Token = "0x6001050")]
		[Address(RVA = "0x1426264", Offset = "0x1426264", VA = "0x1426264")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027C")]
	public TransformTrackerWithLimit HeadTracker
	{
		[Token(Token = "0x6001051")]
		[Address(RVA = "0x142626C", Offset = "0x142626C", VA = "0x142626C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027D")]
	public TransformTrackerWithLimit RightHandTracker
	{
		[Token(Token = "0x6001052")]
		[Address(RVA = "0x1426274", Offset = "0x1426274", VA = "0x1426274")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027E")]
	public TransformTrackerWithLimit LeftHandTracker
	{
		[Token(Token = "0x6001053")]
		[Address(RVA = "0x142627C", Offset = "0x142627C", VA = "0x142627C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027F")]
	public Dissolve Dissolve
	{
		[Token(Token = "0x6001054")]
		[Address(RVA = "0x1426284", Offset = "0x1426284", VA = "0x1426284")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000280")]
	private bool b_HasFallbackAvatar
	{
		[Token(Token = "0x6001055")]
		[Address(RVA = "0x142628C", Offset = "0x142628C", VA = "0x142628C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001056")]
	[Address(RVA = "0x14262DC", Offset = "0x14262DC", VA = "0x14262DC", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001057")]
	[Address(RVA = "0x14262FC", Offset = "0x14262FC", VA = "0x14262FC")]
	[IteratorStateMachine(typeof(<Start>d__41))]
	protected IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6001058")]
	[Address(RVA = "0x1426398", Offset = "0x1426398", VA = "0x1426398")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0x142639C", Offset = "0x142639C", VA = "0x142639C", Slot = "7")]
	protected override void OnDestroyCalled()
	{
	}

	[Token(Token = "0x600105A")]
	[Address(RVA = "0x1426488", Offset = "0x1426488", VA = "0x1426488")]
	public void ShowMetaAvatar(bool show)
	{
	}

	[Token(Token = "0x600105B")]
	[Address(RVA = "0x1426540", Offset = "0x1426540", VA = "0x1426540")]
	public void DisableDissolve()
	{
	}

	[Token(Token = "0x600105C")]
	[Address(RVA = "0x14265CC", Offset = "0x14265CC", VA = "0x14265CC")]
	public void SetAssociatedVRHands(VrHand rightHand, VrHand leftHand)
	{
	}

	[Token(Token = "0x600105D")]
	[Address(RVA = "0x14267F0", Offset = "0x14267F0", VA = "0x14267F0")]
	private void OnRemoteHandGraspSet(VrHand hand, GraspMarker graspMarker)
	{
	}

	[Token(Token = "0x600105E")]
	[Address(RVA = "0x14268D4", Offset = "0x14268D4", VA = "0x14268D4")]
	[IteratorStateMachine(typeof(<SetTrackingAfterSnap>d__48))]
	private IEnumerator SetTrackingAfterSnap(TransformTracker tracker, TransformTracker.TrackingType trackingType, GraspMarker graspMarker)
	{
		return null;
	}

	[Token(Token = "0x600105F")]
	[Address(RVA = "0x1426994", Offset = "0x1426994", VA = "0x1426994")]
	private void SetInventoryAnchors()
	{
	}

	[Token(Token = "0x6001060")]
	[Address(RVA = "0x1426AB0", Offset = "0x1426AB0", VA = "0x1426AB0")]
	public Transform GetInventoryTransformFromKey(string inventoryKey)
	{
		return null;
	}

	[Token(Token = "0x6001061")]
	[Address(RVA = "0x1426B40", Offset = "0x1426B40", VA = "0x1426B40")]
	public Transform GetSkeletonTransform(CAPI.ovrAvatar2JointType jointType)
	{
		return null;
	}

	[Token(Token = "0x6001062")]
	[Address(RVA = "0x1426BE0", Offset = "0x1426BE0", VA = "0x1426BE0")]
	public void ShowPlayerInactive(bool inActive)
	{
	}

	[Token(Token = "0x6001063")]
	[Address(RVA = "0x1426EA8", Offset = "0x1426EA8", VA = "0x1426EA8")]
	public void OnPlayerDeath(HealthStatusInfo healthInfo)
	{
	}

	[Token(Token = "0x6001064")]
	[Address(RVA = "0x1426F34", Offset = "0x1426F34", VA = "0x1426F34")]
	[IteratorStateMachine(typeof(<LoadCdnAvatar>d__54))]
	private IEnumerator LoadCdnAvatar()
	{
		return null;
	}

	[Token(Token = "0x6001065")]
	[Address(RVA = "0x1426FD0", Offset = "0x1426FD0", VA = "0x1426FD0")]
	[IteratorStateMachine(typeof(<LoadUserAvatar>d__55))]
	private IEnumerator LoadUserAvatar()
	{
		return null;
	}

	[Token(Token = "0x6001066")]
	[Address(RVA = "0x142706C", Offset = "0x142706C", VA = "0x142706C")]
	private void LoadFallbackAvatar()
	{
	}

	[Token(Token = "0x6001067")]
	[Address(RVA = "0x1427438", Offset = "0x1427438", VA = "0x1427438", Slot = "15")]
	protected override void OnUserAvatarLoaded()
	{
	}

	[Token(Token = "0x6001068")]
	[Address(RVA = "0x14275E8", Offset = "0x14275E8", VA = "0x14275E8")]
	private void UserHasNoAvatarFallback()
	{
	}

	[Token(Token = "0x6001069")]
	[Address(RVA = "0x1427678", Offset = "0x1427678", VA = "0x1427678")]
	[IteratorStateMachine(typeof(<Retry_HasAvatarRequest>d__59))]
	private IEnumerator Retry_HasAvatarRequest()
	{
		return null;
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0x1427714", Offset = "0x1427714", VA = "0x1427714")]
	[IteratorStateMachine(typeof(<AutoRetry_LoadUser>d__60))]
	private IEnumerator AutoRetry_LoadUser(bool loadFallbackOnFailure)
	{
		return null;
	}

	[Token(Token = "0x600106B")]
	[Address(RVA = "0x14277C4", Offset = "0x14277C4", VA = "0x14277C4")]
	[IteratorStateMachine(typeof(<PollForAvatarChange>d__61))]
	private IEnumerator PollForAvatarChange()
	{
		return null;
	}

	[Token(Token = "0x600106C")]
	[Address(RVA = "0x1427860", Offset = "0x1427860", VA = "0x1427860")]
	public MetaAvatarEntity()
	{
	}
}
[Token(Token = "0x20002E2")]
public class MetaAvatarInputManager : OvrAvatarInputManager
{
	[Token(Token = "0x6001098")]
	[Address(RVA = "0x14289F0", Offset = "0x14289F0", VA = "0x14289F0")]
	public void InitBodyTracking(BoltPlayerController player, Transform head, Transform rightHand, Transform leftHand)
	{
	}

	[Token(Token = "0x6001099")]
	[Address(RVA = "0x14289F4", Offset = "0x14289F4", VA = "0x14289F4")]
	public MetaAvatarInputManager()
	{
	}
}
[Token(Token = "0x20002E3")]
public class MetaAvatarManager : SceneSingleton<MetaAvatarManager>
{
	[Token(Token = "0x20002E5")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass13_0
	{
		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public System.Threading.Tasks.Task<OvrAvatarManager.HasAvatarRequestResultCode> hasAvatarRequest;

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x1429F10", Offset = "0x1429F10", VA = "0x1429F10")]
		public <>c__DisplayClass13_0()
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x1429F18", Offset = "0x1429F18", VA = "0x1429F18")]
		internal bool <CheckUserHasAvatarRoutine>b__2()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20002E7")]
	[CompilerGenerated]
	private sealed class <CheckUserHasAvatarRoutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private <>c__DisplayClass13_0 <>8__1;

		[Token(Token = "0x1700028F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010B4")]
			[Address(RVA = "0x142A494", Offset = "0x142A494", VA = "0x142A494", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010B6")]
			[Address(RVA = "0x142A4DC", Offset = "0x142A4DC", VA = "0x142A4DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x142913C", Offset = "0x142913C", VA = "0x142913C")]
		[DebuggerHidden]
		public <CheckUserHasAvatarRoutine>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x142A084", Offset = "0x142A084", VA = "0x142A084", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x142A088", Offset = "0x142A088", VA = "0x142A088", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x142A49C", Offset = "0x142A49C", VA = "0x142A49C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MetaAvatarEntity m_LocalAvatarPrefab;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MetaAvatarEntity m_RemoteAvatarPrefab;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Identifier m_avatarEditorButtonIdentifier;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MetaAvatarEntity m_localAvatar;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<MetaAvatarEntity> m_remoteAvatars;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static OvrAvatarManager.HasAvatarRequestResultCode? UserHasAvatarResult;

	[Token(Token = "0x600109A")]
	[Address(RVA = "0x14289FC", Offset = "0x14289FC", VA = "0x14289FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600109B")]
	[Address(RVA = "0x1428D6C", Offset = "0x1428D6C", VA = "0x1428D6C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600109C")]
	[Address(RVA = "0x1428E98", Offset = "0x1428E98", VA = "0x1428E98")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600109D")]
	[Address(RVA = "0x1428FC4", Offset = "0x1428FC4", VA = "0x1428FC4")]
	private void OnGlobalButtonClicked(Identifier identifier, ButtonHandler handler)
	{
	}

	[Token(Token = "0x600109E")]
	[Address(RVA = "0x1428FF4", Offset = "0x1428FF4", VA = "0x1428FF4")]
	public MetaAvatarEntity GetMetaAvatar(ulong oculusUserID)
	{
		return null;
	}

	[Token(Token = "0x600109F")]
	[Address(RVA = "0x14290D4", Offset = "0x14290D4", VA = "0x14290D4")]
	public MetaAvatarEntity GetLocalMetaAvatar()
	{
		return null;
	}

	[Token(Token = "0x60010A0")]
	[Address(RVA = "0x1428D4C", Offset = "0x1428D4C", VA = "0x1428D4C")]
	public void CheckUserHasAvatar()
	{
	}

	[Token(Token = "0x60010A1")]
	[Address(RVA = "0x14290DC", Offset = "0x14290DC", VA = "0x14290DC")]
	[IteratorStateMachine(typeof(<CheckUserHasAvatarRoutine>d__13))]
	private IEnumerator CheckUserHasAvatarRoutine()
	{
		return null;
	}

	[Token(Token = "0x60010A2")]
	[Address(RVA = "0x1429164", Offset = "0x1429164", VA = "0x1429164")]
	public MetaAvatarEntity AddLocalAvatar()
	{
		return null;
	}

	[Token(Token = "0x60010A3")]
	[Address(RVA = "0x1429734", Offset = "0x1429734", VA = "0x1429734")]
	public MetaAvatarEntity AddRemoteAvatar(BoltPlayerController boltPlayer)
	{
		return null;
	}

	[Token(Token = "0x60010A4")]
	[Address(RVA = "0x1429C58", Offset = "0x1429C58", VA = "0x1429C58")]
	private void RemoveLocalAvatar()
	{
	}

	[Token(Token = "0x60010A5")]
	[Address(RVA = "0x1429CF4", Offset = "0x1429CF4", VA = "0x1429CF4")]
	public void RemoveRemoteAvatar(ulong oculusUserID)
	{
	}

	[Token(Token = "0x60010A6")]
	[Address(RVA = "0x14295C8", Offset = "0x14295C8", VA = "0x14295C8")]
	private void SetAvatarHandTrackers(MetaAvatarEntity avatar, Transform rightHandPosSource, Transform leftHandPosSource)
	{
	}

	[Token(Token = "0x60010A7")]
	[Address(RVA = "0x142961C", Offset = "0x142961C", VA = "0x142961C")]
	private void SetupCustomHandPoses(MetaAvatarEntity avatar, GameObject rightHandPose, GameObject leftHandPose, Transform rightWristOffset, Transform leftWristOffset)
	{
	}

	[Token(Token = "0x60010A8")]
	[Address(RVA = "0x1429DE4", Offset = "0x1429DE4", VA = "0x1429DE4")]
	public MetaAvatarManager()
	{
	}
}
[Token(Token = "0x20002E8")]
public class State_IsMetaAvatarSetup : BaseStateAttachedLogic
{
	[Token(Token = "0x17000291")]
	[StateConfig("Wait Time")]
	public float WaitTime
	{
		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x142A4E4", Offset = "0x142A4E4", VA = "0x142A4E4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x142A4EC", Offset = "0x142A4EC", VA = "0x142A4EC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60010B9")]
	[Address(RVA = "0x142A4F4", Offset = "0x142A4F4", VA = "0x142A4F4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60010BA")]
	[Address(RVA = "0x142A544", Offset = "0x142A544", VA = "0x142A544")]
	public State_IsMetaAvatarSetup()
	{
	}
}
[Token(Token = "0x20002E9")]
public class AgentDistancing : PT.Singleton<AgentDistancing>
{
	[Token(Token = "0x20002EA")]
	public struct PositionInstance
	{
		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int dispersible;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float3 last;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float3 desired;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float4 position;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool moveable;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool updated;
	}

	[Token(Token = "0x20002EB")]
	[BurstCompile]
	private struct DisperseJob : IJob
	{
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public NativeArray<PositionInstance> data;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NativeArray<float3> forces;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[ReadOnly]
		public int count;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[ReadOnly]
		public float minOverlap;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Unity.Mathematics.Random random;

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x142B7E0", Offset = "0x142B7E0", VA = "0x142B7E0", Slot = "4")]
		public void Execute()
		{
		}
	}

	[Token(Token = "0x4000EF7")]
	private const float c_radiusMultiplier = 1.5f;

	[Token(Token = "0x4000EF8")]
	private const int c_maxAgents = 100;

	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<int, (IDispersible, PositionInstance)> m_dispersibles;

	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NativeArray<PositionInstance> m_dispersiblesNativeArray;

	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private NativeArray<float3> m_forces;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private DisperseJob m_job;

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private JobHandle m_jobHandle;

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Unity.Mathematics.Random m_randomizer;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int m_jobCount;

	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool m_isDirty;

	[Token(Token = "0x17000292")]
	public bool Dirty
	{
		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x142A54C", Offset = "0x142A54C", VA = "0x142A54C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60010BC")]
	[Address(RVA = "0x142A554", Offset = "0x142A554", VA = "0x142A554")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010BD")]
	[Address(RVA = "0x142A6C8", Offset = "0x142A6C8", VA = "0x142A6C8", Slot = "4")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60010BE")]
	[Address(RVA = "0x142A758", Offset = "0x142A758", VA = "0x142A758")]
	public void AddAgent(IDispersible agent, float radius)
	{
	}

	[Token(Token = "0x60010BF")]
	[Address(RVA = "0x142A9D8", Offset = "0x142A9D8", VA = "0x142A9D8")]
	public void RemoveAgent(IDispersible dispersible)
	{
	}

	[Token(Token = "0x60010C0")]
	[Address(RVA = "0x142AB40", Offset = "0x142AB40", VA = "0x142AB40")]
	public void SetDesiredPosition(IDispersible dispersible, Vector3 pos, bool moveable = true)
	{
	}

	[Token(Token = "0x60010C1")]
	[Address(RVA = "0x142AE1C", Offset = "0x142AE1C", VA = "0x142AE1C")]
	public Vector3 GetDesiredPosition(IDispersible dispersible)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60010C2")]
	[Address(RVA = "0x142AF58", Offset = "0x142AF58", VA = "0x142AF58")]
	private void Update()
	{
	}

	[Token(Token = "0x60010C3")]
	[Address(RVA = "0x142B1A8", Offset = "0x142B1A8", VA = "0x142B1A8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60010C4")]
	[Address(RVA = "0x142B474", Offset = "0x142B474", VA = "0x142B474")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60010C5")]
	[Address(RVA = "0x142B714", Offset = "0x142B714", VA = "0x142B714")]
	public AgentDistancing()
	{
	}
}
[Serializable]
[Token(Token = "0x20002EC")]
public class Aiming
{
	[Token(Token = "0x20002ED")]
	public enum AimingNodeMode
	{
		[Token(Token = "0x4000F13")]
		Additive,
		[Token(Token = "0x4000F14")]
		Override
	}

	[Serializable]
	[Token(Token = "0x20002EE")]
	public class AimingNode
	{
		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 localRotationAxis;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 localForwardAxis;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float minRange;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxRange;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AimingNodeMode mode;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Is the node animated, if it isn't then we will have to manually reset its position each frame.")]
		public bool animated;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SmoothedValue<float> m_smoothing;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothedValue<float>.SmoothedValueDelegate m_smoothingFunc;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_lastDesiredRotation;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion defaultRotation;

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x142C8B4", Offset = "0x142C8B4", VA = "0x142C8B4")]
		public AimingNode()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x142C1A8", Offset = "0x142C1A8", VA = "0x142C1A8")]
		public void AimAt(Vector3 target)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x142C608", Offset = "0x142C608", VA = "0x142C608")]
		public void StopAiming()
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x142C9D4", Offset = "0x142C9D4", VA = "0x142C9D4")]
		private void Update(float desiredRotation, float desiredWeight)
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x142BDF4", Offset = "0x142BDF4", VA = "0x142BDF4")]
		public void Init(float smoothing)
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x142BFE8", Offset = "0x142BFE8", VA = "0x142BFE8")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x142C37C", Offset = "0x142C37C", VA = "0x142C37C")]
		public bool IsAimingAtTarget(Vector3 target, float tolerance)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string description;

	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool aimingEnabled;

	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AimingNode> nodes;

	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float smoothing;

	[Token(Token = "0x4000F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("The allowable tolerance in degrees to determine if the end node in the aiming chain is aiming at the desired target.")]
	public float aimingAtTargetTolerance;

	[Token(Token = "0x17000293")]
	public AimingNode lastNode
	{
		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x142BC30", Offset = "0x142BC30", VA = "0x142BC30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000294")]
	public bool isAimingAtTarget
	{
		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x142BC94", Offset = "0x142BC94", VA = "0x142BC94")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x142BC9C", Offset = "0x142BC9C", VA = "0x142BC9C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60010CA")]
	[Address(RVA = "0x142BCA8", Offset = "0x142BCA8", VA = "0x142BCA8")]
	public void Init()
	{
	}

	[Token(Token = "0x60010CB")]
	[Address(RVA = "0x142BEA0", Offset = "0x142BEA0", VA = "0x142BEA0")]
	public void ResetNodes()
	{
	}

	[Token(Token = "0x60010CC")]
	[Address(RVA = "0x142C010", Offset = "0x142C010", VA = "0x142C010")]
	public void AimAt(Vector3 target)
	{
	}

	[Token(Token = "0x60010CD")]
	[Address(RVA = "0x142C4BC", Offset = "0x142C4BC", VA = "0x142C4BC")]
	public void StopAiming()
	{
	}

	[Token(Token = "0x60010CE")]
	[Address(RVA = "0x142C63C", Offset = "0x142C63C", VA = "0x142C63C")]
	public void DrawGizmos(Vector3 target)
	{
	}

	[Token(Token = "0x60010CF")]
	[Address(RVA = "0x142C818", Offset = "0x142C818", VA = "0x142C818")]
	public Aiming()
	{
	}
}
[Token(Token = "0x20002EF")]
public class AimingRig : CachedMonoBehaviour
{
	[Token(Token = "0x4000F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform targetTransform;

	[Token(Token = "0x4000F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform spineLookAt;

	[Token(Token = "0x4000F22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform shoulderPivot;

	[Token(Token = "0x4000F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform weaponEffector;

	[Token(Token = "0x4000F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float m_maxArmReach;

	[Token(Token = "0x4000F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion m_desiredLookRotation;

	[Token(Token = "0x60010D7")]
	[Address(RVA = "0x142CCAC", Offset = "0x142CCAC", VA = "0x142CCAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010D8")]
	[Address(RVA = "0x142CCB0", Offset = "0x142CCB0", VA = "0x142CCB0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60010D9")]
	[Address(RVA = "0x142CF40", Offset = "0x142CF40", VA = "0x142CF40")]
	public AimingRig()
	{
	}
}
[Token(Token = "0x20002F0")]
[CreateAssetMenu(fileName = "CharacterAimingFinalIKLevelOfDetailConfiguration", menuName = "Battle Sister/IK Aiming Lods", order = 0)]
public class CharacterAimingFinalIKLevelOfDetailConfiguration : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20002F1")]
	private struct IkIterationLevelOfDetail
	{
		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Min(0f)]
		public float distanceFromPlayer;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[Min(1f)]
		public int ikIterations;
	}

	[Serializable]
	[Token(Token = "0x20002F2")]
	private struct IkIterationLevelOfDetailPlatformPair
	{
		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VrDeviceModel model;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IkIterationLevelOfDetail[] iterationLods;
	}

	[Token(Token = "0x4000F26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("m_iterationLods")]
	[Header("List LODs in order from lowest distance (closest) to highest distance (farthest).")]
	private IkIterationLevelOfDetail[] m_iterationLodsDefault;

	[Token(Token = "0x4000F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Platform overrides will be used if available, otherwise default will be used.")]
	private IkIterationLevelOfDetailPlatformPair[] m_iterationLodsPlatformOverrides;

	[Token(Token = "0x4000F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("If ticked, use an iteration count of zero for as long as the player is not looking at the character regardless of the above settings.")]
	[Space]
	private bool m_cullIterationsWhenNotLookedAt;

	[Token(Token = "0x60010DA")]
	[Address(RVA = "0x142CF50", Offset = "0x142CF50", VA = "0x142CF50")]
	private IkIterationLevelOfDetail[] GetIkLodsForCurrentDevice()
	{
		return null;
	}

	[Token(Token = "0x60010DB")]
	[Address(RVA = "0x142CFD4", Offset = "0x142CFD4", VA = "0x142CFD4")]
	public int GetIterationCount(Vector3 pivot, Transform aimTarget)
	{
		return default(int);
	}

	[Token(Token = "0x60010DC")]
	[Address(RVA = "0x142D194", Offset = "0x142D194", VA = "0x142D194")]
	public CharacterAimingFinalIKLevelOfDetailConfiguration()
	{
	}
}
[Token(Token = "0x20002F3")]
public class TimelinePlayer : CachedMonoBehaviour, ITimelinePlayer
{
	[Serializable]
	[Token(Token = "0x20002F4")]
	private struct TimelineData
	{
		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TimelineGroup group;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[UnityEngine.Tooltip("The available timelines. If there's more than one, we'll choose one at random.")]
		public TimelineAsset[] timelines;
	}

	[Token(Token = "0x4000F2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TimelineData[] m_timelineData;

	[Token(Token = "0x4000F2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<TimelineGroup, List<TimelineAsset>> m_timelineDictionary;

	[Token(Token = "0x4000F2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[UnityEngine.Tooltip("The director to play the timeline on.")]
	private PlayableDirector m_playableDirector;

	[Token(Token = "0x4000F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_playing;

	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool m_hasValidCompletionTime;

	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_completionTime;

	[Token(Token = "0x17000295")]
	public Action OnTimelineComplete
	{
		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x142D19C", Offset = "0x142D19C", VA = "0x142D19C", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x142D1A4", Offset = "0x142D1A4", VA = "0x142D1A4", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60010DF")]
	[Address(RVA = "0x142D1AC", Offset = "0x142D1AC", VA = "0x142D1AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010E0")]
	[Address(RVA = "0x142D40C", Offset = "0x142D40C", VA = "0x142D40C", Slot = "4")]
	public bool Play(TimelineGroup group, DirectorWrapMode wrapMode = DirectorWrapMode.None, [Optional] Animator animator)
	{
		return default(bool);
	}

	[Token(Token = "0x60010E1")]
	[Address(RVA = "0x142D6B8", Offset = "0x142D6B8", VA = "0x142D6B8", Slot = "5")]
	public void Stop()
	{
	}

	[Token(Token = "0x60010E2")]
	[Address(RVA = "0x142D700", Offset = "0x142D700", VA = "0x142D700")]
	private void Update()
	{
	}

	[Token(Token = "0x60010E3")]
	[Address(RVA = "0x142D750", Offset = "0x142D750", VA = "0x142D750")]
	public TimelinePlayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20002F5")]
public class FormationDefinition
{
	[Token(Token = "0x20002F6")]
	public enum FormationType
	{
		[Token(Token = "0x4000F3F")]
		Row,
		[Token(Token = "0x4000F40")]
		Column,
		[Token(Token = "0x4000F41")]
		Grid,
		[Token(Token = "0x4000F42")]
		RandomBox,
		[Token(Token = "0x4000F43")]
		RandomElipse,
		[Token(Token = "0x4000F44")]
		RandomLoop,
		[Token(Token = "0x4000F45")]
		UniformLoop
	}

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Range(0f, 50f)]
	public int numPositions;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public FormationType formationType;

	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 100f)]
	public int seed;

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 20f)]
	public float width;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 20f)]
	public float depth;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 360f)]
	public float loopRange;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 5f)]
	public float jitter;

	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector2 offset;

	[Token(Token = "0x60010E4")]
	public List<T> GeneratePositions<T>() where T : IFormationPosition
	{
		return null;
	}

	[Token(Token = "0x60010E5")]
	public List<T> GeneratePositions<T>(List<T> combineWith) where T : IFormationPosition
	{
		return null;
	}

	[Token(Token = "0x60010E6")]
	public void UpdatePositions<T>(List<T> positions) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010E7")]
	private void RowFormation<T>(List<T> positions) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010E8")]
	private void ColumnFormation<T>(List<T> positions) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010E9")]
	private void GridFormation<T>(List<T> positions) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010EA")]
	private void RandomBoxFormation<T>(List<T> positions) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010EB")]
	private void RandomElipseFormation<T>(List<T> positions) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010EC")]
	private void LoopFormation<T>(List<T> positions, bool random = false) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010ED")]
	public static bool Disperse<T>(List<T> positions, float minOverlap = 0.05f) where T : IFormationPosition
	{
		return default(bool);
	}

	[Token(Token = "0x60010EE")]
	public static List<T> FindMovablesInsideNonMovables<T>(List<T> positions) where T : IFormationPosition
	{
		return null;
	}

	[Token(Token = "0x60010EF")]
	public static void Display<T>(Vector3 position, Vector3 forward, List<T> positions, Color fill0, Color fill1, Color outline) where T : IFormationPosition
	{
	}

	[Token(Token = "0x60010F0")]
	[Address(RVA = "0x142D758", Offset = "0x142D758", VA = "0x142D758")]
	public FormationDefinition()
	{
	}
}
[Token(Token = "0x20002F7")]
public interface IFormationPosition
{
	[Token(Token = "0x17000296")]
	Vector3 Position
	{
		[Token(Token = "0x60010F1")]
		get;
		[Token(Token = "0x60010F2")]
		set;
	}

	[Token(Token = "0x17000297")]
	float Radius
	{
		[Token(Token = "0x60010F3")]
		get;
	}

	[Token(Token = "0x17000298")]
	float Weight
	{
		[Token(Token = "0x60010F4")]
		get;
	}

	[Token(Token = "0x17000299")]
	bool Moveable
	{
		[Token(Token = "0x60010F5")]
		get;
	}
}
[Token(Token = "0x20002F8")]
public class GroundMonitor : CachedMonoBehaviour
{
	[Token(Token = "0x4000F46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_heightOffset;

	[Token(Token = "0x4000F47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Min(0f)]
	[SerializeField]
	private float m_castDistanceWhileGrounded;

	[Token(Token = "0x4000F48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Min(0f)]
	[SerializeField]
	private float m_castDistanceWhileUngrounded;

	[Token(Token = "0x4000F49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Min(0f)]
	[SerializeField]
	private float m_castRadius;

	[Token(Token = "0x4000F4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Range(0f, 80f)]
	[SerializeField]
	private float m_levelSurfaceAngleTolerance;

	[Token(Token = "0x4000F4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private bool m_useUnscaledTime;

	[Token(Token = "0x4000F4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private CapsuleCollider m_trackedCollider;

	[Token(Token = "0x4000F4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_isGrounded;

	[Token(Token = "0x4000F4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 m_latestGroundedNormal;

	[Token(Token = "0x4000F4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody m_groundedRigidBody;

	[Token(Token = "0x4000F50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_lastGroundHitDistance;

	[Token(Token = "0x4000F51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool m_goingDownhill;

	[Token(Token = "0x4000F52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	private bool m_attachedToVrRig;

	[Token(Token = "0x4000F53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4000F54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_groundMask;

	[Token(Token = "0x4000F55")]
	private const int c_updateRate = 5;

	[Token(Token = "0x1700029A")]
	public bool IsGrounded
	{
		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x142DFE4", Offset = "0x142DFE4", VA = "0x142DFE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700029B")]
	public bool IsGroundedOnStaticFloor
	{
		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x142DFEC", Offset = "0x142DFEC", VA = "0x142DFEC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700029C")]
	private float CurrentCastDistance
	{
		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x142E070", Offset = "0x142E070", VA = "0x142E070")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700029D")]
	public Vector3 GroundVelocity
	{
		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x142E08C", Offset = "0x142E08C", VA = "0x142E08C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700029E")]
	public Vector3 GroundNormal
	{
		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x142E14C", Offset = "0x142E14C", VA = "0x142E14C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60010F6")]
	[Address(RVA = "0x142D7BC", Offset = "0x142D7BC", VA = "0x142D7BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010F7")]
	[Address(RVA = "0x142D9D0", Offset = "0x142D9D0", VA = "0x142D9D0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60010F8")]
	[Address(RVA = "0x142DABC", Offset = "0x142DABC", VA = "0x142DABC")]
	private void MonitorFalling()
	{
	}

	[Token(Token = "0x60010FE")]
	[Address(RVA = "0x142DB28", Offset = "0x142DB28", VA = "0x142DB28")]
	private void CheckGroundRaycast()
	{
	}

	[Token(Token = "0x60010FF")]
	[Address(RVA = "0x142E1B8", Offset = "0x142E1B8", VA = "0x142E1B8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001100")]
	[Address(RVA = "0x142E2F4", Offset = "0x142E2F4", VA = "0x142E2F4")]
	private void DrawCapsule(Vector3 start, float distance, float radius, Color color)
	{
	}

	[Token(Token = "0x6001101")]
	[Address(RVA = "0x142E430", Offset = "0x142E430", VA = "0x142E430")]
	public GroundMonitor()
	{
	}
}
[Token(Token = "0x20002F9")]
public interface IDispersible
{
	[Token(Token = "0x1700029F")]
	int identifier
	{
		[Token(Token = "0x6001103")]
		get;
	}

	[Token(Token = "0x6001104")]
	void OnDisperse(Vector3 pos);
}
[Token(Token = "0x20002FA")]
[RequireComponent(typeof(FullBodyBipedIK))]
public class IkResponder : Poolable, ICollisionReceiver
{
	[Serializable]
	[Token(Token = "0x20002FB")]
	private class IkResponderLimb
	{
		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private FullBodyBipedEffector m_effectorId;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IKEffector m_effector;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("How long it takes to go from no weight to full weight when response starts and to fall back to no weight again once response ends. Set to zero to immediately adjust to the target weight.")]
		[Min(0f)]
		[SerializeField]
		private float m_weightChangeDuration;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("How quickly each IK point can accelerate to its target. Set this too low and the responses will be sluggish. Set this too high and the limbs are likely to start shuddering.")]
		[Min(0f)]
		[SerializeField]
		private float m_targetPointAcceleration;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Maximum allowed distance between the original position of the limb and the pushed position.")]
		[Min(0f)]
		[SerializeField]
		private float m_maxLimbDistance;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform m_ikTarget;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_desiredPosition;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 m_desiredPositionUnclamped;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VelocityTracker m_targetVelocityTracker;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float m_standardWeight;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_frameTargetLastSet;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform m_boneTransform;

		[Token(Token = "0x170002A0")]
		public Transform BoneTransform
		{
			[Token(Token = "0x6001110")]
			[Address(RVA = "0x1430298", Offset = "0x1430298", VA = "0x1430298")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A1")]
		public bool Idle
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0x1430634", Offset = "0x1430634", VA = "0x1430634")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x142F8F8", Offset = "0x142F8F8", VA = "0x142F8F8")]
		public void Init(IkResponder owner)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x142F854", Offset = "0x142F854", VA = "0x142F854")]
		public void ResetPositionWeight()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x1430018", Offset = "0x1430018", VA = "0x1430018")]
		public void AddToLocalPosition(Vector3 targetLocalPos)
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x1430324", Offset = "0x1430324", VA = "0x1430324")]
		public void DoUpdate()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x14302A0", Offset = "0x14302A0", VA = "0x14302A0")]
		private void AdjustWeight(bool up)
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x14306C0", Offset = "0x14306C0", VA = "0x14306C0")]
		public IkResponderLimb()
		{
		}
	}

	[Token(Token = "0x20002FC")]
	[CompilerGenerated]
	private sealed class <LateFixedUpdate>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IkResponder <>4__this;

		[Token(Token = "0x170002A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600111B")]
			[Address(RVA = "0x1430998", Offset = "0x1430998", VA = "0x1430998", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600111D")]
			[Address(RVA = "0x14309E0", Offset = "0x14309E0", VA = "0x14309E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x1430268", Offset = "0x1430268", VA = "0x1430268")]
		[DebuggerHidden]
		public <LateFixedUpdate>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x14306E0", Offset = "0x14306E0", VA = "0x14306E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x14306E4", Offset = "0x14306E4", VA = "0x14306E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x14309A0", Offset = "0x14309A0", VA = "0x14309A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private IkResponderLimb[] m_responderLimbs;

	[Token(Token = "0x4000F57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private FullBodyBipedIK m_fullBodyBipedIk;

	[Token(Token = "0x4000F58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IKSolverFullBodyBiped m_ikSolver;

	[Token(Token = "0x4000F59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Dictionary<Transform, IkResponderLimb> m_effectorDictionary;

	[Token(Token = "0x4000F5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private IImpaleable m_impaleable;

	[Token(Token = "0x4000F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Coroutine m_lateFixedUpdateCoroutine;

	[Token(Token = "0x4000F5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_idle;

	[Token(Token = "0x4000F5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool m_responding;

	[Token(Token = "0x4000F5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private WaitForFixedUpdate m_waitForFixedUpdateCachedYieldInstruction;

	[Token(Token = "0x6001105")]
	[Address(RVA = "0x142F498", Offset = "0x142F498", VA = "0x142F498")]
	private void Start()
	{
	}

	[Token(Token = "0x6001106")]
	[Address(RVA = "0x142F734", Offset = "0x142F734", VA = "0x142F734", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001107")]
	[Address(RVA = "0x142F754", Offset = "0x142F754", VA = "0x142F754")]
	public void SetResponsiveToPushes(bool responding)
	{
	}

	[Token(Token = "0x6001108")]
	[Address(RVA = "0x142F760", Offset = "0x142F760", VA = "0x142F760", Slot = "14")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001109")]
	[Address(RVA = "0x142F864", Offset = "0x142F864", VA = "0x142F864")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600110A")]
	[Address(RVA = "0x142F628", Offset = "0x142F628", VA = "0x142F628")]
	private void PopulateEffectorDictionary()
	{
	}

	[Token(Token = "0x600110B")]
	[Address(RVA = "0x142FB04", Offset = "0x142FB04", VA = "0x142FB04", Slot = "12")]
	public void OnCollisionStay(Collision other)
	{
	}

	[Token(Token = "0x600110C")]
	[Address(RVA = "0x1430260", Offset = "0x1430260", VA = "0x1430260", Slot = "11")]
	public void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x600110D")]
	[Address(RVA = "0x1430264", Offset = "0x1430264", VA = "0x1430264", Slot = "13")]
	public void OnCollisionExit(Collision other)
	{
	}

	[Token(Token = "0x600110E")]
	[Address(RVA = "0x142F7E0", Offset = "0x142F7E0", VA = "0x142F7E0")]
	[IteratorStateMachine(typeof(<LateFixedUpdate>d__19))]
	private IEnumerator LateFixedUpdate()
	{
		return null;
	}

	[Token(Token = "0x600110F")]
	[Address(RVA = "0x1430290", Offset = "0x1430290", VA = "0x1430290")]
	public IkResponder()
	{
	}
}
[Serializable]
[Token(Token = "0x20002FD")]
[CreateAssetMenu(menuName = "Battle Sister/Impalement Settings")]
public class ImpalementSettings : ScriptableObject
{
	[Token(Token = "0x4000F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ImpalementSettings s_defaultSettings;

	[Token(Token = "0x4000F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Should agent try to un-impale themselves after a period of time.")]
	public bool autoUnimpale;

	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("Delay before agent tries to unimpale themselves.")]
	public float unimpaleDelay;

	[Token(Token = "0x170002A4")]
	public static ImpalementSettings DefaultSettings
	{
		[Token(Token = "0x600111E")]
		[Address(RVA = "0x14309E8", Offset = "0x14309E8", VA = "0x14309E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600111F")]
	[Address(RVA = "0x1430AC4", Offset = "0x1430AC4", VA = "0x1430AC4")]
	public ImpalementSettings()
	{
	}
}
[Token(Token = "0x20002FE")]
public interface IAgentDodgeHandlerState
{
	[Token(Token = "0x170002A5")]
	Vector3 Destination
	{
		[Token(Token = "0x6001120")]
		set;
	}
}
[Token(Token = "0x20002FF")]
public interface IGroundHeightProvider
{
	[Token(Token = "0x170002A6")]
	float groundHeight
	{
		[Token(Token = "0x6001121")]
		get;
	}
}
[Token(Token = "0x2000300")]
public interface IImpaleable
{
	[Token(Token = "0x170002A7")]
	bool IsImpaled
	{
		[Token(Token = "0x6001126")]
		get;
	}

	[Token(Token = "0x6001122")]
	bool AllowImpalement(PenetrationEdge edge, Collider impaledCollider);

	[Token(Token = "0x6001123")]
	IEnumerator StartImpalement(PenetrationEdge edge, Collider impaledCollider, Rigidbody rigidbody, Action<Rigidbody> callback);

	[Token(Token = "0x6001124")]
	void UnImpale();

	[Token(Token = "0x6001125")]
	bool IsValid(ref Rigidbody rigidbody);
}
[Token(Token = "0x2000301")]
public interface IMovementDirectionProvider
{
	[Token(Token = "0x170002A8")]
	Vector3 DesiredMovementDirection
	{
		[Token(Token = "0x6001127")]
		get;
	}

	[Token(Token = "0x170002A9")]
	Vector3 DesiredFacingDirection
	{
		[Token(Token = "0x6001128")]
		get;
	}

	[Token(Token = "0x170002AA")]
	Vector3 CurrentVelocity
	{
		[Token(Token = "0x6001129")]
		get;
	}

	[Token(Token = "0x170002AB")]
	Vector3 DesiredVelocity
	{
		[Token(Token = "0x600112A")]
		get;
	}
}
[Token(Token = "0x2000302")]
public interface IMovementNode
{
	[Token(Token = "0x170002AC")]
	Vector3 Position
	{
		[Token(Token = "0x600112B")]
		get;
	}

	[Token(Token = "0x170002AD")]
	float Radius
	{
		[Token(Token = "0x600112C")]
		get;
	}
}
[Token(Token = "0x2000303")]
public interface IPushable
{
	[Token(Token = "0x170002AE")]
	bool IsPushed
	{
		[Token(Token = "0x6001131")]
		get;
	}

	[Token(Token = "0x170002AF")]
	Vector3 Position
	{
		[Token(Token = "0x6001132")]
		get;
	}

	[Token(Token = "0x170002B0")]
	float PushbackRadiusModifier
	{
		[Token(Token = "0x6001133")]
		get;
	}

	[Token(Token = "0x600112D")]
	bool AllowPush();

	[Token(Token = "0x600112E")]
	bool StartPush(Vector3 impactPoint, Vector3 impactNormal, float strength);

	[Token(Token = "0x600112F")]
	void UnPush();

	[Token(Token = "0x6001130")]
	bool IsValid();
}
[Token(Token = "0x2000304")]
public interface ISmoothingTimeProvider
{
	[Token(Token = "0x6001134")]
	float GetDuration(float currentValue, float desiredValue);
}
[Token(Token = "0x2000305")]
public enum TimelineGroup
{
	[Token(Token = "0x4000F72")]
	Spawn,
	[Token(Token = "0x4000F73")]
	WarpDodge
}
[Token(Token = "0x2000306")]
public interface ITimelinePlayer
{
	[Token(Token = "0x170002B1")]
	Action OnTimelineComplete
	{
		[Token(Token = "0x6001137")]
		get;
		[Token(Token = "0x6001138")]
		set;
	}

	[Token(Token = "0x6001135")]
	bool Play(TimelineGroup group, DirectorWrapMode wrapMode = DirectorWrapMode.None, [Optional] Animator animator);

	[Token(Token = "0x6001136")]
	void Stop();
}
[Token(Token = "0x2000307")]
public class MeshColliderGeneratorProperties : MonoBehaviour
{
	[Token(Token = "0x2000308")]
	public enum ColliderQuality
	{
		[Token(Token = "0x4000F7B")]
		Inherit,
		[Token(Token = "0x4000F7C")]
		Faces_6,
		[Token(Token = "0x4000F7D")]
		Faces_12,
		[Token(Token = "0x4000F7E")]
		Faces_18,
		[Token(Token = "0x4000F7F")]
		Faces_30
	}

	[Token(Token = "0x4000F74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Set to true to exclude creatign a mesh collider for this bone.")]
	public bool exclude;

	[Token(Token = "0x4000F75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("NUmber of faces generated for the collider, or inherit quality from properties higher in chain.")]
	public ColliderQuality quality;

	[Token(Token = "0x4000F76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Scale factor for the mesh collider and any child mesh colliders unless overriden.")]
	public float scale;

	[Token(Token = "0x4000F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Set to true to combine child mesh colliders with this bone.")]
	public bool combineChildren;

	[Token(Token = "0x4000F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("Minimum weight a vertex must be weighted to a bone to be included for that bones triangles.")]
	public float minWeight;

	[Token(Token = "0x4000F79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("Align the mesh collider with the mesh verts to create smallest possible collider, otherwise mesh colllider is aligned with local transform axis.")]
	public bool bestFit;

	[Token(Token = "0x6001139")]
	[Address(RVA = "0x1430ADC", Offset = "0x1430ADC", VA = "0x1430ADC")]
	public MeshColliderGeneratorProperties()
	{
	}
}
[Token(Token = "0x2000309")]
[Flags]
public enum MirrorHints
{
	[Token(Token = "0x4000F81")]
	QUAT_NEG_X = 1,
	[Token(Token = "0x4000F82")]
	QUAT_NEG_Y = 2,
	[Token(Token = "0x4000F83")]
	QUAT_NEG_Z = 4,
	[Token(Token = "0x4000F84")]
	QUAT_NEG_ANGLE = 8,
	[Token(Token = "0x4000F85")]
	EULER_X_ADD_180 = 0x10,
	[Token(Token = "0x4000F86")]
	EULER_Y_ADD_180 = 0x20,
	[Token(Token = "0x4000F87")]
	EULER_Z_ADD_180 = 0x40
}
[Token(Token = "0x200030A")]
[CreateAssetMenu(menuName = "Battle Sister/Motion Data")]
public class CharacterMotionData : ScriptableObject
{
	[Token(Token = "0x200030B")]
	public delegate float AnimationClipOffsetProviderDelegate(ClipData clip);

	[Serializable]
	[Token(Token = "0x200030C")]
	public class TransformData
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Matrix4x4 _matrix;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 position;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion rotation;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 forward;

		[Token(Token = "0x170002B2")]
		public Matrix4x4 matrix
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0x1432A4C", Offset = "0x1432A4C", VA = "0x1432A4C")]
			get
			{
				return default(Matrix4x4);
			}
			[Token(Token = "0x6001154")]
			[Address(RVA = "0x14319BC", Offset = "0x14319BC", VA = "0x14319BC")]
			set
			{
			}
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x14316E4", Offset = "0x14316E4", VA = "0x14316E4")]
		public static TransformData operator -(TransformData a, TransformData b)
		{
			return null;
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x1432AA8", Offset = "0x1432AA8", VA = "0x1432AA8")]
		public TransformData()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x1432A60", Offset = "0x1432A60", VA = "0x1432A60")]
		public TransformData(Matrix4x4 m)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x14318B8", Offset = "0x14318B8", VA = "0x14318B8")]
		public void Mirror()
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x1432B1C", Offset = "0x1432B1C", VA = "0x1432B1C")]
		public TransformData Mirrored()
		{
			return null;
		}
	}

	[Serializable]
	[Token(Token = "0x200030D")]
	public class NodeData
	{
		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TransformData startFrame;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TransformData endFrame;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 velocity;

		[Token(Token = "0x170002B3")]
		public Vector3 linearDelta
		{
			[Token(Token = "0x600115A")]
			[Address(RVA = "0x143220C", Offset = "0x143220C", VA = "0x143220C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002B4")]
		public Quaternion angularDelta
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0x1432BC0", Offset = "0x1432BC0", VA = "0x1432BC0")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x1432C6C", Offset = "0x1432C6C", VA = "0x1432C6C")]
		public NodeData(TransformData start, TransformData end, float length)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200030E")]
	public class ParamData
	{
		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int hash;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float value;

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x1432CFC", Offset = "0x1432CFC", VA = "0x1432CFC")]
		public ParamData()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200030F")]
	public class CustomCurveData
	{
		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float clipLength;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve curve;

		[Token(Token = "0x170002B5")]
		public float normalizedFirstKeyTime
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0x1432D04", Offset = "0x1432D04", VA = "0x1432D04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002B6")]
		public float normalizedLastKeyTime
		{
			[Token(Token = "0x600115F")]
			[Address(RVA = "0x1432D70", Offset = "0x1432D70", VA = "0x1432D70")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002B7")]
		public int numKeys
		{
			[Token(Token = "0x6001160")]
			[Address(RVA = "0x1432E14", Offset = "0x1432E14", VA = "0x1432E14")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002B8")]
		public int numPairs
		{
			[Token(Token = "0x6001161")]
			[Address(RVA = "0x1432E3C", Offset = "0x1432E3C", VA = "0x1432E3C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x1432E58", Offset = "0x1432E58", VA = "0x1432E58")]
		public int GetPairTimes(float normalizedTime, out float[] times)
		{
			return default(int);
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x1432F50", Offset = "0x1432F50", VA = "0x1432F50")]
		public bool GetPairTimes(int index, out float[] times)
		{
			return default(bool);
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x1433094", Offset = "0x1433094", VA = "0x1433094")]
		public bool GetPairValues(int index, out float[] values)
		{
			return default(bool);
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x14331D8", Offset = "0x14331D8", VA = "0x14331D8")]
		public CustomCurveData()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000310")]
	public class ClipData
	{
		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int pathHash;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string fullPath;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationClip clip;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float length;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<string> tags;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<ParamData> blendParams;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public NodeData root;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public NodeData hips;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<CustomCurveData> customCurves;

		[Token(Token = "0x4000FA6")]
		private const string c_customCurveMatchTargetName = "match_target";

		[NonSerialized]
		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float queryValue;

		[NonSerialized]
		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CustomCurveData m_matchTargetCurve;

		[Token(Token = "0x170002B9")]
		public CustomCurveData MatchTarget
		{
			[Token(Token = "0x6001166")]
			[Address(RVA = "0x14331E0", Offset = "0x14331E0", VA = "0x14331E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x14332C0", Offset = "0x14332C0", VA = "0x14332C0")]
		public bool HasTag(string tag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x1433318", Offset = "0x1433318", VA = "0x1433318")]
		public ClipData()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x1433440", Offset = "0x1433440", VA = "0x1433440")]
		public ClipData(AnimationClip clip)
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x14335B8", Offset = "0x14335B8", VA = "0x14335B8")]
		public CustomCurveData GetCustomCurve(string name)
		{
			return null;
		}
	}

	[Token(Token = "0x4000F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, AnimationClipOffsetProviderDelegate> m_offsetFunctions;

	[Token(Token = "0x4000F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("List of extra clips outside of those in the animator controller to include in the motion data.")]
	public List<AnimationClip> extraClips;

	[Token(Token = "0x4000F8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator animator;

	[Token(Token = "0x4000F8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[ReadOnly]
	public RuntimeAnimatorController runtimeController;

	[Token(Token = "0x4000F8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ClipData> clipData;

	[NonSerialized]
	[Token(Token = "0x4000F8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_initialised;

	[Token(Token = "0x4000F8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<string, HashSet<ClipData>> m_tagsToClips;

	[Token(Token = "0x600113A")]
	[Address(RVA = "0x1430B00", Offset = "0x1430B00", VA = "0x1430B00")]
	private void Awake()
	{
	}

	[Token(Token = "0x600113B")]
	[Address(RVA = "0x1430B04", Offset = "0x1430B04", VA = "0x1430B04")]
	private void Initialise()
	{
	}

	[Token(Token = "0x600113C")]
	[Address(RVA = "0x1430F24", Offset = "0x1430F24", VA = "0x1430F24")]
	public HashSet<ClipData> FindByTags(params string[] tags)
	{
		return null;
	}

	[Token(Token = "0x600113D")]
	[Address(RVA = "0x1431084", Offset = "0x1431084", VA = "0x1431084")]
	public List<ClipData> FindByTagsAsList(params string[] tags)
	{
		return null;
	}

	[Token(Token = "0x600113E")]
	[Address(RVA = "0x143111C", Offset = "0x143111C", VA = "0x143111C")]
	public List<ClipData> FindByClip(AnimationClip clip)
	{
		return null;
	}

	[Token(Token = "0x600113F")]
	[Address(RVA = "0x143120C", Offset = "0x143120C", VA = "0x143120C")]
	public List<ClipData> FindByFullPath(string fullPath)
	{
		return null;
	}

	[Token(Token = "0x6001140")]
	[Address(RVA = "0x14312FC", Offset = "0x14312FC", VA = "0x14312FC")]
	public TransformData GetStartPosition(Animator animator, string groupTag, Vector3 finalPosition, Vector3 finalDirection, bool mirrored, out ClipData clipData)
	{
		return null;
	}

	[Token(Token = "0x6001141")]
	[Address(RVA = "0x14314F4", Offset = "0x14314F4", VA = "0x14314F4")]
	public TransformData GetStartPosition(Vector3 finalPosition, Vector3 finalDirection, Vector3 localScale, ClipData clipData, bool mirrored)
	{
		return null;
	}

	[Token(Token = "0x6001142")]
	[Address(RVA = "0x14315D0", Offset = "0x14315D0", VA = "0x14315D0")]
	public TransformData GetStartPosition(Matrix4x4 finalM, ClipData clipData, bool mirrored)
	{
		return null;
	}

	[Token(Token = "0x6001143")]
	[Address(RVA = "0x1431ACC", Offset = "0x1431ACC", VA = "0x1431ACC")]
	public TransformData GetEndPosition(Vector3 startPosition, Vector3 startingDirection, Vector3 localScale, ClipData clipData)
	{
		return null;
	}

	[Token(Token = "0x6001144")]
	[Address(RVA = "0x1431B98", Offset = "0x1431B98", VA = "0x1431B98")]
	public TransformData GetEndPosition(Matrix4x4 m, ClipData clipData)
	{
		return null;
	}

	[Token(Token = "0x6001145")]
	[Address(RVA = "0x1431C4C", Offset = "0x1431C4C", VA = "0x1431C4C")]
	public ClipData SelectBestClip(Animator animator, Vector3 destination, bool mirrored, params string[] tags)
	{
		return null;
	}

	[Token(Token = "0x6001146")]
	[Address(RVA = "0x1431CB4", Offset = "0x1431CB4", VA = "0x1431CB4")]
	public ClipData SelectBestClip(Animator animator, Vector3 destination, bool mirrored, float threshold = float.MaxValue, params string[] tags)
	{
		return null;
	}

	[Token(Token = "0x6001147")]
	[Address(RVA = "0x1431D1C", Offset = "0x1431D1C", VA = "0x1431D1C")]
	public ClipData SelectBestClip(Animator animator, Vector3 destination, HashSet<ClipData> availableClips, bool mirrored, float threshold = float.MaxValue)
	{
		return null;
	}

	[Token(Token = "0x6001148")]
	[Address(RVA = "0x143206C", Offset = "0x143206C", VA = "0x143206C")]
	public ClipData SelectBestClip(Vector3 currentPos, Quaternion currentRot, Vector3 destination, HashSet<ClipData> availableClips, bool mirrored, float threshold = float.MaxValue)
	{
		return null;
	}

	[Token(Token = "0x6001149")]
	[Address(RVA = "0x1431DC4", Offset = "0x1431DC4", VA = "0x1431DC4")]
	public ClipData SelectBestClip(Matrix4x4 worldToLocal, Vector3 destination, HashSet<ClipData> availableClips, bool mirrored, float threshold = float.MaxValue)
	{
		return null;
	}

	[Token(Token = "0x600114A")]
	[Address(RVA = "0x1432248", Offset = "0x1432248", VA = "0x1432248")]
	public List<ClipData> SelectBestClips(Vector3 currentPos, Quaternion currentRot, Vector3 destination, HashSet<ClipData> availableClips, bool mirrored, float tolerance)
	{
		return null;
	}

	[Token(Token = "0x600114B")]
	[Address(RVA = "0x1432564", Offset = "0x1432564", VA = "0x1432564")]
	public void RegisterOffsetFn(AnimationClipOffsetProviderDelegate offsetFn, params string[] tags)
	{
	}

	[Token(Token = "0x600114C")]
	[Address(RVA = "0x14321D4", Offset = "0x14321D4", VA = "0x14321D4")]
	public float GetOffset(ClipData clip)
	{
		return default(float);
	}

	[Token(Token = "0x600114D")]
	[Address(RVA = "0x14326D4", Offset = "0x14326D4", VA = "0x14326D4")]
	private AnimationClipOffsetProviderDelegate GetOffsetFunction(ClipData clip)
	{
		return null;
	}

	[Token(Token = "0x600114E")]
	[Address(RVA = "0x14328AC", Offset = "0x14328AC", VA = "0x14328AC")]
	public CharacterMotionData()
	{
	}
}
[Token(Token = "0x2000314")]
public class CharacterMotionDataVisualizer : MonoBehaviour
{
	[Token(Token = "0x4000FAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CharacterMotionData motionData;

	[Token(Token = "0x4000FAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform referenceTransform;

	[Token(Token = "0x4000FAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Matrix4x4 m_snapshot;

	[Token(Token = "0x4000FAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationClip testClip;

	[Token(Token = "0x6001171")]
	[Address(RVA = "0x1433760", Offset = "0x1433760", VA = "0x1433760")]
	[ContextMenu("SnapShot Matrix")]
	private void SnapshotMatrix()
	{
	}

	[Token(Token = "0x6001172")]
	[Address(RVA = "0x14337B0", Offset = "0x14337B0", VA = "0x14337B0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001173")]
	[Address(RVA = "0x1433AE0", Offset = "0x1433AE0", VA = "0x1433AE0")]
	public CharacterMotionDataVisualizer()
	{
	}
}
[Token(Token = "0x2000315")]
[Flags]
public enum MovementUrgency
{
	[Token(Token = "0x4000FB1")]
	Default = 0,
	[Token(Token = "0x4000FB2")]
	Normal = 1,
	[Token(Token = "0x4000FB3")]
	Alert = 2,
	[Token(Token = "0x4000FB4")]
	Flee = 4,
	[Token(Token = "0x4000FB5")]
	Patrol = 8
}
[Token(Token = "0x2000316")]
[RequireComponent(typeof(BoxCollider))]
public class PlayerClip : CachedMonoBehaviour
{
	[Token(Token = "0x4000FB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private BoxCollider m_collider;

	[Token(Token = "0x6001174")]
	[Address(RVA = "0x1433AE8", Offset = "0x1433AE8", VA = "0x1433AE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001175")]
	[Address(RVA = "0x1433BA0", Offset = "0x1433BA0", VA = "0x1433BA0")]
	public void SetPlayerClipEnabled(bool isEnabled)
	{
	}

	[Token(Token = "0x6001176")]
	[Address(RVA = "0x1433BC0", Offset = "0x1433BC0", VA = "0x1433BC0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001177")]
	[Address(RVA = "0x1433D4C", Offset = "0x1433D4C", VA = "0x1433D4C")]
	public PlayerClip()
	{
	}
}
[Token(Token = "0x2000317")]
public class FaceEnemyAgents : CachedMonoBehaviour
{
	[Token(Token = "0x4000FB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody m_body;

	[Token(Token = "0x6001178")]
	[Address(RVA = "0x1433D54", Offset = "0x1433D54", VA = "0x1433D54")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001179")]
	[Address(RVA = "0x1433DAC", Offset = "0x1433DAC", VA = "0x1433DAC")]
	private void Update()
	{
	}

	[Token(Token = "0x600117A")]
	[Address(RVA = "0x14340FC", Offset = "0x14340FC", VA = "0x14340FC")]
	public FaceEnemyAgents()
	{
	}
}
[Token(Token = "0x2000318")]
public class InputTest : MonoBehaviour
{
	[Token(Token = "0x4000FB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject items;

	[Token(Token = "0x600117B")]
	[Address(RVA = "0x1434104", Offset = "0x1434104", VA = "0x1434104")]
	public void OnSpawnAgent()
	{
	}

	[Token(Token = "0x600117C")]
	[Address(RVA = "0x1434140", Offset = "0x1434140", VA = "0x1434140")]
	public InputTest()
	{
	}
}
[Token(Token = "0x2000319")]
public class PinTest : MonoBehaviour
{
	[Token(Token = "0x200031A")]
	[CompilerGenerated]
	private sealed class <PinLimb>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PinTest <>4__this;

		[Token(Token = "0x170002BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001183")]
			[Address(RVA = "0x14342AC", Offset = "0x14342AC", VA = "0x14342AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001185")]
			[Address(RVA = "0x14342F4", Offset = "0x14342F4", VA = "0x14342F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x14341F8", Offset = "0x14341F8", VA = "0x14341F8")]
		[DebuggerHidden]
		public <PinLimb>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x1434228", Offset = "0x1434228", VA = "0x1434228", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x143422C", Offset = "0x143422C", VA = "0x143422C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x14342B4", Offset = "0x14342B4", VA = "0x14342B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PuppetMaster puppet;

	[Token(Token = "0x4000FBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody limbToPin;

	[Token(Token = "0x4000FBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ConfigurableJoint pinTo;

	[Token(Token = "0x600117D")]
	[Address(RVA = "0x1434148", Offset = "0x1434148", VA = "0x1434148")]
	private void Update()
	{
	}

	[Token(Token = "0x600117E")]
	[Address(RVA = "0x1434184", Offset = "0x1434184", VA = "0x1434184")]
	[IteratorStateMachine(typeof(<PinLimb>d__4))]
	private IEnumerator PinLimb()
	{
		return null;
	}

	[Token(Token = "0x600117F")]
	[Address(RVA = "0x1434220", Offset = "0x1434220", VA = "0x1434220")]
	public PinTest()
	{
	}
}
[Token(Token = "0x200031B")]
public class VrDebugCanvasPositioner : MonoBehaviour
{
	[Token(Token = "0x4000FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float canvasDistance;

	[Token(Token = "0x6001186")]
	[Address(RVA = "0x14342FC", Offset = "0x14342FC", VA = "0x14342FC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001187")]
	[Address(RVA = "0x1434508", Offset = "0x1434508", VA = "0x1434508")]
	public VrDebugCanvasPositioner()
	{
	}
}
[Token(Token = "0x200031C")]
public class VaultHelper : MonoBehaviour
{
	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform contactPoint;

	[Token(Token = "0x6001188")]
	[Address(RVA = "0x1434518", Offset = "0x1434518", VA = "0x1434518")]
	public VaultHelper()
	{
	}
}
[Token(Token = "0x200031D")]
public class WeaponAttachmentPoint : CachedMonoBehaviour
{
	[Token(Token = "0x200031E")]
	public enum Hand
	{
		[Token(Token = "0x4000FCA")]
		Left,
		[Token(Token = "0x4000FCB")]
		Right
	}

	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Hand m_hand;

	[Token(Token = "0x4000FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private bool m_animated;

	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Identifier m_weaponIdentifier;

	[Token(Token = "0x4000FC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 defaultLocalPosition;

	[Token(Token = "0x4000FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion defaultLocalRotation;

	[Token(Token = "0x170002BC")]
	public Hand Handedness
	{
		[Token(Token = "0x6001189")]
		[Address(RVA = "0x1434520", Offset = "0x1434520", VA = "0x1434520")]
		get
		{
			return default(Hand);
		}
	}

	[Token(Token = "0x170002BD")]
	public bool isAnimated
	{
		[Token(Token = "0x600118A")]
		[Address(RVA = "0x1434528", Offset = "0x1434528", VA = "0x1434528")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002BE")]
	public Identifier WeaponIdentifier
	{
		[Token(Token = "0x600118B")]
		[Address(RVA = "0x1434530", Offset = "0x1434530", VA = "0x1434530")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002BF")]
	public Vector3 animatedPosition
	{
		[Token(Token = "0x600118C")]
		[Address(RVA = "0x1434538", Offset = "0x1434538", VA = "0x1434538")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600118D")]
		[Address(RVA = "0x1434544", Offset = "0x1434544", VA = "0x1434544")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002C0")]
	public Quaternion animatedRotation
	{
		[Token(Token = "0x600118E")]
		[Address(RVA = "0x1434550", Offset = "0x1434550", VA = "0x1434550")]
		[CompilerGenerated]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x600118F")]
		[Address(RVA = "0x143455C", Offset = "0x143455C", VA = "0x143455C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002C1")]
	public WeaponAttachmentPoint mirrorAttachment
	{
		[Token(Token = "0x6001190")]
		[Address(RVA = "0x1434568", Offset = "0x1434568", VA = "0x1434568")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001191")]
		[Address(RVA = "0x1434570", Offset = "0x1434570", VA = "0x1434570")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001192")]
	[Address(RVA = "0x1434578", Offset = "0x1434578", VA = "0x1434578")]
	public void StoreDefaultTransform()
	{
	}

	[Token(Token = "0x6001193")]
	[Address(RVA = "0x14345C8", Offset = "0x14345C8", VA = "0x14345C8")]
	public void StoreAnimatedTransform()
	{
	}

	[Token(Token = "0x6001194")]
	[Address(RVA = "0x14345E4", Offset = "0x14345E4", VA = "0x14345E4")]
	public void RestoreDefaultTransform()
	{
	}

	[Token(Token = "0x6001195")]
	[Address(RVA = "0x1434630", Offset = "0x1434630", VA = "0x1434630")]
	public void Mirror(Vector3 pos, Quaternion rot, Transform root, MirrorHints hints)
	{
	}

	[Token(Token = "0x6001196")]
	[Address(RVA = "0x14347E4", Offset = "0x14347E4", VA = "0x14347E4")]
	public WeaponAttachmentPoint()
	{
	}
}
[Token(Token = "0x200031F")]
public class AnimationTest : MonoBehaviour
{
	[Token(Token = "0x2000320")]
	[SerializeField]
	public class ActorInstance
	{
		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Actor actor;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AgentMirroring mirroring;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IMoveable moveable;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 lastPosition;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AverageValue<Vector3> averageVelocity;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool movementDisabled;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 moveToOffset;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 targetPos;

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x143633C", Offset = "0x143633C", VA = "0x143633C")]
		public ActorInstance(Actor _actor)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x1437318", Offset = "0x1437318", VA = "0x1437318")]
		public void Update(Vector3? trackPoint)
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x1439F60", Offset = "0x1439F60", VA = "0x1439F60")]
		public void MoveTo(Vector3 pos, [Optional] IMovementNode node)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x1439F84", Offset = "0x1439F84", VA = "0x1439F84")]
		public void FaceTowards(Vector3 pos)
		{
		}
	}

	[Token(Token = "0x2000321")]
	private enum InputState
	{
		[Token(Token = "0x4000FF5")]
		Down,
		[Token(Token = "0x4000FF6")]
		Held,
		[Token(Token = "0x4000FF7")]
		Up,
		[Token(Token = "0x4000FF8")]
		Unknown
	}

	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AnimationTest s_instance;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform[] m_aimTargets;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform m_pointerRay;

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private DebugDataViewModel m_debugData;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CinemachineTargetGroup m_cameraGroup;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform m_initialSpawnPos;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_slicePlaneHeightAbovePlayer;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Items to drop for each death")]
	[SerializeField]
	[FormerlySerializedAs("ItemDrops")]
	private ItemDrop[] m_itemsToDrop;

	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GuidComponent m_spitterAttackPositionsRoot;

	[Token(Token = "0x4000FD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 m_targetPos;

	[Token(Token = "0x4000FD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool m_trackPoint;

	[Token(Token = "0x4000FD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_targetIndex;

	[Token(Token = "0x4000FD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool m_enableCameraDrag;

	[Token(Token = "0x4000FD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 m_dragPos;

	[Token(Token = "0x4000FDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float m_cameraAlt;

	[Token(Token = "0x4000FDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float m_primaryInputValue;

	[Token(Token = "0x4000FDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_secondaryInputValue;

	[Token(Token = "0x4000FDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int m_focusAgent;

	[Token(Token = "0x4000FDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float m_fallVelocity;

	[Token(Token = "0x4000FDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_falling;

	[Token(Token = "0x4000FE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 m_groudPlanePos;

	[Token(Token = "0x4000FE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private TestSpawner m_testSpawner;

	[Token(Token = "0x4000FE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float m_slicePlaneHeight;

	[NonSerialized]
	[Token(Token = "0x4000FE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<ActorInstance> m_actors;

	[Token(Token = "0x4000FE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private SmoothedValue<Vector3> m_playerVelocity;

	[Token(Token = "0x4000FE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float m_pressTimer;

	[Token(Token = "0x4000FE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float m_intensity;

	[Token(Token = "0x4000FE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float slicePlaneHeight;

	[Token(Token = "0x4000FE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Coroutine m_impalingCoroutine;

	[Token(Token = "0x4000FE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool m_impaledActive;

	[Token(Token = "0x4000FEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	private bool weaponState;

	[Token(Token = "0x4000FEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 _moveTo;

	[Token(Token = "0x170002C2")]
	private ActorInstance FocusActor
	{
		[Token(Token = "0x6001198")]
		[Address(RVA = "0x1434840", Offset = "0x1434840", VA = "0x1434840")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001199")]
		[Address(RVA = "0x14348C8", Offset = "0x14348C8", VA = "0x14348C8")]
		set
		{
		}
	}

	[Token(Token = "0x6001197")]
	[Address(RVA = "0x14347EC", Offset = "0x14347EC", VA = "0x14347EC")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x600119A")]
	[Address(RVA = "0x1434930", Offset = "0x1434930", VA = "0x1434930")]
	private void Awake()
	{
	}

	[Token(Token = "0x600119B")]
	[Address(RVA = "0x1434C6C", Offset = "0x1434C6C", VA = "0x1434C6C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600119C")]
	[Address(RVA = "0x1434F60", Offset = "0x1434F60", VA = "0x1434F60")]
	private void Start()
	{
	}

	[Token(Token = "0x600119D")]
	[Address(RVA = "0x14353EC", Offset = "0x14353EC", VA = "0x14353EC")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x600119E")]
	[Address(RVA = "0x14355B0", Offset = "0x14355B0", VA = "0x14355B0")]
	private void HandleSceneLoaded()
	{
	}

	[Token(Token = "0x600119F")]
	[Address(RVA = "0x1435344", Offset = "0x1435344", VA = "0x1435344")]
	private void UpdateAgentSelectedFlags()
	{
	}

	[Token(Token = "0x60011A0")]
	[Address(RVA = "0x1435894", Offset = "0x1435894", VA = "0x1435894")]
	private void OnButtonClicked(Identifier identifier, ButtonHandler button)
	{
	}

	[Token(Token = "0x60011A1")]
	[Address(RVA = "0x143616C", Offset = "0x143616C", VA = "0x143616C")]
	private void HandleActorEnabled(IAgent agent)
	{
	}

	[Token(Token = "0x60011A2")]
	[Address(RVA = "0x14364B8", Offset = "0x14364B8", VA = "0x14364B8")]
	private void HandleActorDisabled(IAgent agent)
	{
	}

	[Token(Token = "0x60011A3")]
	[Address(RVA = "0x1436788", Offset = "0x1436788", VA = "0x1436788")]
	public void RequestSpawnAgent()
	{
	}

	[Token(Token = "0x60011A4")]
	[Address(RVA = "0x14367B0", Offset = "0x14367B0", VA = "0x14367B0")]
	public void RequestSpawnAgent(Vector3 pos)
	{
	}

	[Token(Token = "0x60011A5")]
	[Address(RVA = "0x14368A0", Offset = "0x14368A0", VA = "0x14368A0")]
	private void Update()
	{
	}

	[Token(Token = "0x60011A6")]
	[Address(RVA = "0x1436F8C", Offset = "0x1436F8C", VA = "0x1436F8C")]
	private void VrMode()
	{
	}

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0x14376EC", Offset = "0x14376EC", VA = "0x14376EC")]
	private void OnPause()
	{
	}

	[Token(Token = "0x60011A8")]
	[Address(RVA = "0x14376F0", Offset = "0x14376F0", VA = "0x14376F0")]
	private void OnToggleTarget()
	{
	}

	[Token(Token = "0x60011A9")]
	[Address(RVA = "0x143773C", Offset = "0x143773C", VA = "0x143773C")]
	private void OnPrimaryInput(InputValue value)
	{
	}

	[Token(Token = "0x60011AA")]
	[Address(RVA = "0x1437798", Offset = "0x1437798", VA = "0x1437798")]
	private void OnSecondaryInput(InputValue value)
	{
	}

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0x14377F4", Offset = "0x14377F4", VA = "0x14377F4")]
	private void OnFaceTowards()
	{
	}

	[Token(Token = "0x60011AC")]
	[Address(RVA = "0x1437D50", Offset = "0x1437D50", VA = "0x1437D50")]
	private void OnMirrorCharacter()
	{
	}

	[Token(Token = "0x60011AD")]
	[Address(RVA = "0x1437F08", Offset = "0x1437F08", VA = "0x1437F08")]
	private void OnChangeMirrorHint()
	{
	}

	[Token(Token = "0x60011AE")]
	[Address(RVA = "0x14380D0", Offset = "0x14380D0", VA = "0x14380D0")]
	private bool GetGroundPosition(out Vector3 pos)
	{
		return default(bool);
	}

	[Token(Token = "0x60011AF")]
	[Address(RVA = "0x1437C88", Offset = "0x1437C88", VA = "0x1437C88")]
	private bool GetGroundPosition(Ray r, out Vector3 pos)
	{
		return default(bool);
	}

	[Token(Token = "0x60011B0")]
	[Address(RVA = "0x14381AC", Offset = "0x14381AC", VA = "0x14381AC")]
	private bool GetGroundPlanePosition(out Vector3 pos, int layerMask = 0)
	{
		return default(bool);
	}

	[Token(Token = "0x60011B1")]
	[Address(RVA = "0x1437514", Offset = "0x1437514", VA = "0x1437514")]
	private bool GetGroundPlanePosition(Ray r, out Vector3 pos, int layerMask = 0)
	{
		return default(bool);
	}

	[Token(Token = "0x60011B2")]
	[Address(RVA = "0x143820C", Offset = "0x143820C", VA = "0x143820C")]
	private bool GetEnvironmentPosition(Ray r, out Vector3 pos, int layerMask = 0)
	{
		return default(bool);
	}

	[Token(Token = "0x60011B3")]
	[Address(RVA = "0x1437A70", Offset = "0x1437A70", VA = "0x1437A70")]
	private Ray GetPointerRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x60011B4")]
	[Address(RVA = "0x14383A8", Offset = "0x14383A8", VA = "0x14383A8")]
	private void OnSpawnAgent()
	{
	}

	[Token(Token = "0x60011B5")]
	[Address(RVA = "0x143845C", Offset = "0x143845C", VA = "0x143845C")]
	private void OnDodge(InputValue value)
	{
	}

	[Token(Token = "0x60011B6")]
	[Address(RVA = "0x143876C", Offset = "0x143876C", VA = "0x143876C")]
	private void OnJump(InputValue value)
	{
	}

	[Token(Token = "0x60011B7")]
	[Address(RVA = "0x14388AC", Offset = "0x14388AC", VA = "0x14388AC")]
	private void OnFlinch()
	{
	}

	[Token(Token = "0x60011B8")]
	[Address(RVA = "0x14388FC", Offset = "0x14388FC", VA = "0x14388FC")]
	private void OnFalter()
	{
	}

	[Token(Token = "0x60011B9")]
	[Address(RVA = "0x143894C", Offset = "0x143894C", VA = "0x143894C")]
	private void OnStagger()
	{
	}

	[Token(Token = "0x60011BA")]
	[Address(RVA = "0x143899C", Offset = "0x143899C", VA = "0x143899C")]
	private void OnCharged()
	{
	}

	[Token(Token = "0x60011BB")]
	[Address(RVA = "0x1438A24", Offset = "0x1438A24", VA = "0x1438A24")]
	private void OnKnockedBack()
	{
	}

	[Token(Token = "0x60011BC")]
	private void PlayImpact<T>([Optional] object metaData, float strength = 0f) where T : ImpactAnimationLayerPlayer
	{
	}

	[Token(Token = "0x60011BD")]
	[Address(RVA = "0x1438A74", Offset = "0x1438A74", VA = "0x1438A74")]
	private void OnCameraZoom(InputValue value)
	{
	}

	[Token(Token = "0x60011BE")]
	[Address(RVA = "0x1438CEC", Offset = "0x1438CEC", VA = "0x1438CEC")]
	private void OnCameraDragStart()
	{
	}

	[Token(Token = "0x60011BF")]
	[Address(RVA = "0x1438DE8", Offset = "0x1438DE8", VA = "0x1438DE8")]
	private void OnCameraAlt(InputValue value)
	{
	}

	[Token(Token = "0x60011C0")]
	[Address(RVA = "0x1438E44", Offset = "0x1438E44", VA = "0x1438E44")]
	private void OnCameraDragEnd()
	{
	}

	[Token(Token = "0x60011C1")]
	[Address(RVA = "0x1435AD4", Offset = "0x1435AD4", VA = "0x1435AD4")]
	private void OnKill()
	{
	}

	[Token(Token = "0x60011C2")]
	[Address(RVA = "0x1437400", Offset = "0x1437400", VA = "0x1437400")]
	private void DragCamera()
	{
	}

	[Token(Token = "0x60011C3")]
	[Address(RVA = "0x1438E4C", Offset = "0x1438E4C", VA = "0x1438E4C")]
	private void OnCameraRotate(InputValue value)
	{
	}

	[Token(Token = "0x60011C4")]
	[Address(RVA = "0x1439638", Offset = "0x1439638", VA = "0x1439638")]
	private void StopImpalingCoroutine()
	{
	}

	[Token(Token = "0x60011C5")]
	[Address(RVA = "0x143967C", Offset = "0x143967C", VA = "0x143967C")]
	private void OnMixAnimationClip()
	{
	}

	[Token(Token = "0x60011C6")]
	[Address(RVA = "0x1439910", Offset = "0x1439910", VA = "0x1439910")]
	private void OnLockMovement()
	{
	}

	[Token(Token = "0x60011C7")]
	[Address(RVA = "0x1439B64", Offset = "0x1439B64", VA = "0x1439B64")]
	private void OnToggleWeapon()
	{
	}

	[Token(Token = "0x60011C8")]
	[Address(RVA = "0x1439CA0", Offset = "0x1439CA0", VA = "0x1439CA0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60011C9")]
	[Address(RVA = "0x1439DF8", Offset = "0x1439DF8", VA = "0x1439DF8")]
	public AnimationTest()
	{
	}
}
[Token(Token = "0x2000325")]
public class BakeTests : MonoBehaviour
{
	[Token(Token = "0x4000FFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BoltPlayerController m_playerController;

	[Token(Token = "0x4000FFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MetaAvatarEntity m_avatar;

	[Token(Token = "0x4000FFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_inactive;

	[Token(Token = "0x4001000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool m_visible;

	[Token(Token = "0x60011D7")]
	[Address(RVA = "0x143A16C", Offset = "0x143A16C", VA = "0x143A16C")]
	private void Start()
	{
	}

	[Token(Token = "0x60011D8")]
	[Address(RVA = "0x143A20C", Offset = "0x143A20C", VA = "0x143A20C")]
	private void Update()
	{
	}

	[Token(Token = "0x60011D9")]
	[Address(RVA = "0x143A318", Offset = "0x143A318", VA = "0x143A318")]
	public BakeTests()
	{
	}
}
[Token(Token = "0x2000326")]
public class GatesTests : MonoBehaviour
{
	[Token(Token = "0x4001001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_itemsToDestroy;

	[Token(Token = "0x4001002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CabinLocationPerformanceConfig m_frontendPerformanceConfig;

	[Token(Token = "0x4001003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CabinLocationPerformanceConfig m_performanceConfig;

	[Token(Token = "0x60011DA")]
	[Address(RVA = "0x143A328", Offset = "0x143A328", VA = "0x143A328")]
	private void Start()
	{
	}

	[Token(Token = "0x60011DB")]
	[Address(RVA = "0x143A3AC", Offset = "0x143A3AC", VA = "0x143A3AC")]
	private void Update()
	{
	}

	[Token(Token = "0x60011DC")]
	[Address(RVA = "0x143A494", Offset = "0x143A494", VA = "0x143A494")]
	public GatesTests()
	{
	}
}
[Token(Token = "0x2000327")]
public class ImpactStateManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000328")]
	public class ImpactData
	{
		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string description;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> validColliders;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ImpactAnimationLayerPlayer animationLayerPlayer;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("normalizedHealthThreshold")]
		[UnityEngine.Tooltip("If normalized impact strength is less than or equal to this value, then this animation will play. Only used if there are multiple possible impact animations.")]
		[FormerlySerializedAs("impactStrengthThreshold")]
		[FormerlySerializedAs("normalizedDamageThreshold")]
		public float impactStrengthUpperThreshold;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Force value for hit IK. Use a low value, the IK is just used to randomize the animations a little. If there are no hit reaction animations then higher values can be used.")]
		[SerializeField]
		[HideInInspector]
		public float hitForce;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onImpactStateTrigger;

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x143C474", Offset = "0x143C474", VA = "0x143C474")]
		public bool PlayImpact(HealthStatusUpdateRuntimeInfo hitInfo, float strength)
		{
			return default(bool);
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x143C538", Offset = "0x143C538", VA = "0x143C538")]
		public void Cancel()
		{
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x143C660", Offset = "0x143C660", VA = "0x143C660")]
		public ImpactData()
		{
		}
	}

	[Token(Token = "0x4001004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	[Header("Reactions etc")]
	private HitReaction m_hitReaction;

	[Token(Token = "0x4001005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Minumum time between physics/IK hit reactions, used to help reduce hit reaction spamming.")]
	[HideInInspector]
	[SerializeField]
	private float m_hitCoolDownDuration;

	[Token(Token = "0x4001006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ImpactStrength m_impactStrengthCalculator;

	[Token(Token = "0x4001007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Projectile Impact Animation Players")]
	private List<ImpactData> m_impactAnimationData;

	[Token(Token = "0x4001008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[UnityEngine.Tooltip("Impact animation layer player to use for knockbacks.")]
	private ImpactAnimationLayerPlayer m_knockBackLayerPlayer;

	[Token(Token = "0x4001009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Impact animation layer player to use for stagger.")]
	[SerializeField]
	private ImpactAnimationLayerPlayer m_staggerLayerPlayer;

	[Token(Token = "0x400100A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x400100B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_hitCoolDown;

	[Token(Token = "0x400100C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private IImpaleable m_impaleable;

	[Token(Token = "0x400100D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<AnimationLayerPlayer> m_playing;

	[Token(Token = "0x400100E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Dictionary<Collider, List<ImpactData>> _impactReactionsPerCollider;

	[Token(Token = "0x400100F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profilerMarker;

	[Token(Token = "0x170002C3")]
	public bool IsInBlockerLayer
	{
		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x143A49C", Offset = "0x143A49C", VA = "0x143A49C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60011DE")]
	[Address(RVA = "0x143A4E4", Offset = "0x143A4E4", VA = "0x143A4E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011DF")]
	[Address(RVA = "0x143B07C", Offset = "0x143B07C", VA = "0x143B07C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60011E0")]
	[Address(RVA = "0x143B388", Offset = "0x143B388", VA = "0x143B388")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60011E1")]
	[Address(RVA = "0x143B390", Offset = "0x143B390", VA = "0x143B390")]
	private void Update()
	{
	}

	[Token(Token = "0x60011E2")]
	[Address(RVA = "0x143B4FC", Offset = "0x143B4FC", VA = "0x143B4FC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60011E3")]
	[Address(RVA = "0x143B748", Offset = "0x143B748", VA = "0x143B748")]
	public void ForceKnockback(Vector3 knockbackDirection)
	{
	}

	[Token(Token = "0x60011E4")]
	[Address(RVA = "0x143B7DC", Offset = "0x143B7DC", VA = "0x143B7DC")]
	public void ForceKnockback(HealthStatusUpdateRuntimeInfo hitInfo)
	{
	}

	[Token(Token = "0x60011E5")]
	[Address(RVA = "0x143B880", Offset = "0x143B880", VA = "0x143B880")]
	public void ForceStagger(Vector3 staggerDirection)
	{
	}

	[Token(Token = "0x60011E6")]
	[Address(RVA = "0x143B914", Offset = "0x143B914", VA = "0x143B914")]
	public void ForceStagger(HealthStatusUpdateRuntimeInfo hitInfo)
	{
	}

	[Token(Token = "0x60011E7")]
	[Address(RVA = "0x143B9B8", Offset = "0x143B9B8", VA = "0x143B9B8")]
	private void HandleImpact(HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x60011E8")]
	[Address(RVA = "0x143C1BC", Offset = "0x143C1BC", VA = "0x143C1BC")]
	private void PlayImpact(ImpactData data, HealthStatusUpdateRuntimeInfo hitInfo, float strength)
	{
	}

	[Token(Token = "0x60011E9")]
	[Address(RVA = "0x143C134", Offset = "0x143C134", VA = "0x143C134")]
	public void CancelImpactReactions()
	{
	}

	[Token(Token = "0x60011EA")]
	[Address(RVA = "0x143C5C0", Offset = "0x143C5C0", VA = "0x143C5C0")]
	public ImpactStateManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200032A")]
public class ImpactStrength
{
	[Token(Token = "0x200032B")]
	public enum StrengthCalculation
	{
		[Token(Token = "0x400101F")]
		DamageAsPercentageOfCurrentHealth,
		[Token(Token = "0x4001020")]
		DamageAsPercentageOfStartingHealth,
		[Token(Token = "0x4001021")]
		DamageAsPercentageOfReferenceValue
	}

	[Token(Token = "0x400101A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	[UnityEngine.Tooltip("Calculation Method")]
	private StrengthCalculation m_calculation;

	[Token(Token = "0x400101B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[SerializeField]
	[UnityEngine.Tooltip("Value to multiply starting or current health by. e.g. if set to 0.2, then any incoming damage of 20% of reference health will result in a hit strength of 1.")]
	private float m_healthScalar;

	[Token(Token = "0x400101C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Fixed reference value to use when using AsPercentageOf_ReferenceValue calculation method.")]
	[SerializeField]
	private float m_referenceDamageValue;

	[Token(Token = "0x400101D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Optional curve to transform strength value. NOTE : Output will still be in 0 to 1 range.")]
	private AnimationCurve m_mapping;

	[Token(Token = "0x60011F4")]
	[Address(RVA = "0x143C384", Offset = "0x143C384", VA = "0x143C384")]
	public float Calculate(HealthStatusInfo hitInfo)
	{
		return default(float);
	}

	[Token(Token = "0x60011F5")]
	[Address(RVA = "0x143C760", Offset = "0x143C760", VA = "0x143C760")]
	public ImpactStrength()
	{
	}
}
[Token(Token = "0x200032C")]
public class MechanismTest : MonoBehaviour
{
	[Token(Token = "0x60011F6")]
	[Address(RVA = "0x143C774", Offset = "0x143C774", VA = "0x143C774")]
	private void Start()
	{
	}

	[Token(Token = "0x60011F7")]
	[Address(RVA = "0x143CDF4", Offset = "0x143CDF4", VA = "0x143CDF4")]
	public MechanismTest()
	{
	}
}
[Token(Token = "0x200032D")]
public static class MovementUtilities
{
	[Token(Token = "0x4001022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static NavMeshQueryFilter s_cachedNavMeshQueryFilter;

	[Token(Token = "0x60011F8")]
	[Address(RVA = "0x143CDFC", Offset = "0x143CDFC", VA = "0x143CDFC")]
	public static float CalculateDecelerationDistance(float currentSpeed, float deceleration)
	{
		return default(float);
	}

	[Token(Token = "0x60011F9")]
	[Address(RVA = "0x143CE10", Offset = "0x143CE10", VA = "0x143CE10")]
	public static float CalculateMaxArcSpeed(Vector3 velocity, Vector3 desiredDirection, float turnSpeed, float maxSpeed)
	{
		return default(float);
	}

	[Token(Token = "0x60011FA")]
	[Address(RVA = "0x143CE34", Offset = "0x143CE34", VA = "0x143CE34")]
	public static float CalculateMaxArcSpeed(Vector3 velocity, Vector3 desiredDirection, float turnSpeed, float minSpeed, float maxSpeed)
	{
		return default(float);
	}

	[Token(Token = "0x60011FB")]
	[Address(RVA = "0x143D164", Offset = "0x143D164", VA = "0x143D164")]
	public static float GetGroundHeight(Vector3 pos, int navAreaMask, int navAgentTypeId)
	{
		return default(float);
	}

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0x143D230", Offset = "0x143D230", VA = "0x143D230")]
	public static float SnappedAngleDiff(Vector3 from, Vector3 dest, float angleSnap)
	{
		return default(float);
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0x143D524", Offset = "0x143D524", VA = "0x143D524")]
	public static Vector3 SnappedDirection(Vector3 from, Vector3 dest, float angleSnap)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60011FE")]
	[Address(RVA = "0x143D834", Offset = "0x143D834", VA = "0x143D834")]
	public static Vector2 SnappedDirection(Vector2 from, Vector2 dest, float angleSnap)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0x143D994", Offset = "0x143D994", VA = "0x143D994")]
	public static Vector3 LimitDirection(Vector3 referenceDirection, Vector3 desiredDirection, float limitAngle, Vector3 axis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001200")]
	[Address(RVA = "0x143DD74", Offset = "0x143DD74", VA = "0x143DD74")]
	[BurstCompile]
	public static float3 LimitDirectionSIMD(float3 referenceDirection, float3 desiredDirection, float limitAngle, float3 axis)
	{
		return default(float3);
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0x143E414", Offset = "0x143E414", VA = "0x143E414")]
	[BurstCompile]
	public static float angle(float3 from, float3 to)
	{
		return default(float);
	}

	[Token(Token = "0x6001202")]
	[Address(RVA = "0x143E21C", Offset = "0x143E21C", VA = "0x143E21C")]
	[BurstCompile]
	public static float signedAngle(float3 from, float3 to, float3 axis)
	{
		return default(float);
	}

	[Token(Token = "0x6001203")]
	[Address(RVA = "0x143E598", Offset = "0x143E598", VA = "0x143E598")]
	[BurstCompile]
	public static float3 rotateTowards(float3 current, float3 desired, float rotVelocity, float magVelocity)
	{
		return default(float3);
	}
}
[Token(Token = "0x200032E")]
public class LinkAnimationOverride : MonoBehaviour
{
	[Token(Token = "0x4001023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Optional name of Animator states to use when traversing link in forwards direction. Randomly picked.")]
	public List<string> forwardDirection;

	[Token(Token = "0x4001024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Optional name of Animator states to use when traversing link in backwards direction. Randomly picked.")]
	public List<string> backwardDirection;

	[Token(Token = "0x6001204")]
	[Address(RVA = "0x143EA58", Offset = "0x143EA58", VA = "0x143EA58")]
	public LinkAnimationOverride()
	{
	}
}
[Token(Token = "0x200032F")]
[CreateAssetMenu(menuName = "Area")]
public class NavMeshAreas : ScriptableObject
{
	[Token(Token = "0x4001025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public List<int> areaIndex;

	[Token(Token = "0x4001026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public List<string> areaName;

	[Token(Token = "0x6001205")]
	[Address(RVA = "0x143EA60", Offset = "0x143EA60", VA = "0x143EA60")]
	public bool AreaBelongGroup(int areaType, string group)
	{
		return default(bool);
	}

	[Token(Token = "0x6001206")]
	[Address(RVA = "0x143EAC0", Offset = "0x143EAC0", VA = "0x143EAC0")]
	private string GetAreaName(int index)
	{
		return null;
	}

	[Token(Token = "0x6001207")]
	[Address(RVA = "0x143EB8C", Offset = "0x143EB8C", VA = "0x143EB8C")]
	public NavMeshAreas()
	{
	}
}
[Token(Token = "0x2000330")]
public class PathBatchTest : MonoBehaviour
{
	[Token(Token = "0x4001027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform[] m_startPoints;

	[Token(Token = "0x4001028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform[] m_destinations;

	[Token(Token = "0x4001029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool m_fullPath;

	[Token(Token = "0x400102A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int m_compareIndex;

	[Token(Token = "0x400102B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[NavMeshAgentType]
	[SerializeField]
	private int m_navMeshAgentType;

	[Token(Token = "0x400102C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[NavMeshAreaMask]
	[SerializeField]
	private int m_navMeshAreaMask;

	[Token(Token = "0x400102D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform m_testPolyLocation;

	[Token(Token = "0x400102E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int m_iterationsPerFrame;

	[Token(Token = "0x400102F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[ReadOnly]
	private int m_polyId;

	[Token(Token = "0x4001030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<PathingData> m_pathData;

	[Token(Token = "0x6001208")]
	[Address(RVA = "0x143EB94", Offset = "0x143EB94", VA = "0x143EB94")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001209")]
	[Address(RVA = "0x143ED68", Offset = "0x143ED68", VA = "0x143ED68")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600120A")]
	[Address(RVA = "0x143EDF4", Offset = "0x143EDF4", VA = "0x143EDF4")]
	private bool IsCompleted()
	{
		return default(bool);
	}

	[Token(Token = "0x600120B")]
	[Address(RVA = "0x143F784", Offset = "0x143F784", VA = "0x143F784")]
	private void Update()
	{
	}

	[Token(Token = "0x600120C")]
	[Address(RVA = "0x143FAC8", Offset = "0x143FAC8", VA = "0x143FAC8")]
	private void Complete()
	{
	}

	[Token(Token = "0x600120D")]
	[Address(RVA = "0x143F928", Offset = "0x143F928", VA = "0x143F928")]
	[ContextMenu("Calculate Paths")]
	public void CalculatePaths()
	{
	}

	[Token(Token = "0x600120E")]
	[Address(RVA = "0x143FACC", Offset = "0x143FACC", VA = "0x143FACC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600120F")]
	[Address(RVA = "0x143FD2C", Offset = "0x143FD2C", VA = "0x143FD2C")]
	public PathBatchTest()
	{
	}
}
[Token(Token = "0x2000331")]
public class SimpleVelocityTracker : CachedMonoBehaviour
{
	[Token(Token = "0x4001031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AverageVector3 m_sampler;

	[Token(Token = "0x4001032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 m_lastPosition;

	[Token(Token = "0x170002C4")]
	public Vector3 averageVelocity
	{
		[Token(Token = "0x6001210")]
		[Address(RVA = "0x143FD48", Offset = "0x143FD48", VA = "0x143FD48")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001211")]
	[Address(RVA = "0x143FD94", Offset = "0x143FD94", VA = "0x143FD94")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001212")]
	[Address(RVA = "0x143FE00", Offset = "0x143FE00", VA = "0x143FE00")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001213")]
	[Address(RVA = "0x143FEB4", Offset = "0x143FEB4", VA = "0x143FEB4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001214")]
	[Address(RVA = "0x143FF5C", Offset = "0x143FF5C", VA = "0x143FF5C")]
	public SimpleVelocityTracker()
	{
	}
}
[Token(Token = "0x2000332")]
public class PlatformComponent : MonoBehaviour
{
	[Token(Token = "0x4001033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_targetGameObject;

	[Token(Token = "0x4001034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<GameObject> m_oculusComponents;

	[Token(Token = "0x4001035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<GameObject> m_picoComponents;

	[Token(Token = "0x6001215")]
	[Address(RVA = "0x143FF64", Offset = "0x143FF64", VA = "0x143FF64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001216")]
	[Address(RVA = "0x143FFFC", Offset = "0x143FFFC", VA = "0x143FFFC")]
	private void CreateComponents(List<GameObject> components)
	{
	}

	[Token(Token = "0x6001217")]
	[Address(RVA = "0x14402CC", Offset = "0x14402CC", VA = "0x14402CC")]
	private void CopyComponentValues(UnityEngine.Component from, UnityEngine.Component to)
	{
	}

	[Token(Token = "0x6001218")]
	[Address(RVA = "0x14402F0", Offset = "0x14402F0", VA = "0x14402F0")]
	public PlatformComponent()
	{
	}
}
[Token(Token = "0x2000333")]
public class PlatformGameObject : MonoBehaviour
{
	[Token(Token = "0x4001036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Will use current transform when null.")]
	[SerializeField]
	private Transform m_targetTransform;

	[Token(Token = "0x4001037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<GameObject> m_oculusGameObjects;

	[Token(Token = "0x4001038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<GameObject> m_picoGameObjects;

	[Token(Token = "0x6001219")]
	[Address(RVA = "0x14402F8", Offset = "0x14402F8", VA = "0x14402F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600121A")]
	[Address(RVA = "0x1440390", Offset = "0x1440390", VA = "0x1440390")]
	private void CreateGameObjects(List<GameObject> gameObjects)
	{
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0x1440518", Offset = "0x1440518", VA = "0x1440518")]
	public PlatformGameObject()
	{
	}
}
[Token(Token = "0x2000334")]
[BoltGlobalBehaviour]
public sealed class BoltEventDispatcher : GlobalEventListener
{
	[Token(Token = "0x4001039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnBoltStartBegin;

	[Token(Token = "0x400103A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnBoltStartDone;

	[Token(Token = "0x400103B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnBoltStartFailed;

	[Token(Token = "0x400103C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action OnBoltShutdownBegin;

	[Token(Token = "0x400103D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action OnBoltShutdownDone;

	[Token(Token = "0x400103E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action<BoltEntity> OnEntityReceived;

	[Token(Token = "0x400103F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Action<BoltEntity> OnEntityAttached;

	[Token(Token = "0x4001040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Action<BoltEntity> OnEntityDetached;

	[Token(Token = "0x4001041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Action<UdpEndPoint, IProtocolToken> OnConnectAttempt;

	[Token(Token = "0x4001042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Action<UdpEndPoint, IProtocolToken> OnConnectFailed;

	[Token(Token = "0x4001043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Action<UdpEndPoint, IProtocolToken> OnConnectRefused;

	[Token(Token = "0x4001044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Action<BoltConnection> OnConnected;

	[Token(Token = "0x4001045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Action<BoltConnection> OnDisconnected;

	[Token(Token = "0x4001046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Action<UdpSession> OnSessionCreatedOrUpdated;

	[Token(Token = "0x4001047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static Action<UdpSession, UdpSessionError> OnSessionCreationFailed;

	[Token(Token = "0x4001048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static Action<UdpSession, IProtocolToken> OnSessionConnected;

	[Token(Token = "0x4001049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static Action<UdpSession, IProtocolToken, UdpSessionError> OnSessionConnectFailed;

	[Token(Token = "0x400104A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static Action<Map<Guid, UdpSession>> OnSessionListUpdated;

	[Token(Token = "0x400104B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static Action<int> OnGameStart;

	[Token(Token = "0x600121C")]
	[Address(RVA = "0x1440520", Offset = "0x1440520", VA = "0x1440520")]
	private static string GetHostName(UdpSession session)
	{
		return null;
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0x1440584", Offset = "0x1440584", VA = "0x1440584")]
	private void DumpSessionInfo(UdpSession session)
	{
	}

	[Token(Token = "0x600121E")]
	[Address(RVA = "0x1440744", Offset = "0x1440744", VA = "0x1440744", Slot = "11")]
	public override void BoltStartBegin()
	{
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0x14407E0", Offset = "0x14407E0", VA = "0x14407E0", Slot = "12")]
	public override void BoltStartDone()
	{
	}

	[Token(Token = "0x6001220")]
	[Address(RVA = "0x1440860", Offset = "0x1440860", VA = "0x1440860", Slot = "14")]
	public override void BoltStartFailed(UdpConnectionDisconnectReason reason)
	{
	}

	[Token(Token = "0x6001221")]
	[Address(RVA = "0x144094C", Offset = "0x144094C", VA = "0x144094C", Slot = "16")]
	public override void BoltShutdownBegin(AddCallback registerDoneCallback, UdpConnectionDisconnectReason disconnectReason)
	{
	}

	[Token(Token = "0x6001222")]
	[Address(RVA = "0x1440A90", Offset = "0x1440A90", VA = "0x1440A90", Slot = "27")]
	public override void EntityReceived(BoltEntity entity)
	{
	}

	[Token(Token = "0x6001223")]
	[Address(RVA = "0x1440B28", Offset = "0x1440B28", VA = "0x1440B28", Slot = "25")]
	public override void EntityAttached(BoltEntity entity)
	{
	}

	[Token(Token = "0x6001224")]
	[Address(RVA = "0x1440BC0", Offset = "0x1440BC0", VA = "0x1440BC0", Slot = "26")]
	public override void EntityDetached(BoltEntity entity)
	{
	}

	[Token(Token = "0x6001225")]
	[Address(RVA = "0x1440C58", Offset = "0x1440C58", VA = "0x1440C58", Slot = "21")]
	public override void ConnectAttempt(UdpEndPoint endpoint, IProtocolToken token)
	{
	}

	[Token(Token = "0x6001226")]
	[Address(RVA = "0x1440D50", Offset = "0x1440D50", VA = "0x1440D50", Slot = "18")]
	public override void ConnectFailed(UdpEndPoint endpoint, IProtocolToken token)
	{
	}

	[Token(Token = "0x6001227")]
	[Address(RVA = "0x1440E48", Offset = "0x1440E48", VA = "0x1440E48", Slot = "20")]
	public override void ConnectRefused(UdpEndPoint endpoint, IProtocolToken token)
	{
	}

	[Token(Token = "0x6001228")]
	[Address(RVA = "0x1440F4C", Offset = "0x1440F4C", VA = "0x1440F4C", Slot = "19")]
	public override void ConnectRequest(UdpEndPoint endpoint, IProtocolToken token)
	{
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0x1440F9C", Offset = "0x1440F9C", VA = "0x1440F9C", Slot = "17")]
	public override void Connected(BoltConnection connection)
	{
	}

	[Token(Token = "0x600122A")]
	[Address(RVA = "0x1441034", Offset = "0x1441034", VA = "0x1441034", Slot = "24")]
	public override void Disconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x600122B")]
	[Address(RVA = "0x14410CC", Offset = "0x14410CC", VA = "0x14410CC", Slot = "38")]
	public override void SessionCreatedOrUpdated(UdpSession session)
	{
	}

	[Token(Token = "0x600122C")]
	[Address(RVA = "0x14411C4", Offset = "0x14411C4", VA = "0x14411C4", Slot = "40")]
	public override void SessionCreationFailed(UdpSession session, UdpSessionError errorReason)
	{
	}

	[Token(Token = "0x600122D")]
	[Address(RVA = "0x1441280", Offset = "0x1441280", VA = "0x1441280", Slot = "41")]
	public override void SessionConnected(UdpSession session, IProtocolToken token)
	{
	}

	[Token(Token = "0x600122E")]
	[Address(RVA = "0x1441390", Offset = "0x1441390", VA = "0x1441390", Slot = "43")]
	public override void SessionConnectFailed(UdpSession session, IProtocolToken token, UdpSessionError errorReason)
	{
	}

	[Token(Token = "0x600122F")]
	[Address(RVA = "0x144146C", Offset = "0x144146C", VA = "0x144146C", Slot = "36")]
	public override void SessionListUpdated(Map<Guid, UdpSession> sessionList)
	{
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0x14414F8", Offset = "0x14414F8", VA = "0x14414F8", Slot = "155")]
	public override void OnEvent(OnGameStartEvent evnt)
	{
	}

	[Token(Token = "0x6001231")]
	[Address(RVA = "0x14415A8", Offset = "0x14415A8", VA = "0x14415A8")]
	public BoltEventDispatcher()
	{
	}
}
[Token(Token = "0x2000336")]
public class BoltMultiplayerNetwork
{
	[Token(Token = "0x400104E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static BoltConfig m_boltConfig;

	[Token(Token = "0x6001235")]
	[Address(RVA = "0x1441684", Offset = "0x1441684", VA = "0x1441684")]
	public static void StartServer()
	{
	}

	[Token(Token = "0x6001236")]
	[Address(RVA = "0x14418B0", Offset = "0x14418B0", VA = "0x14418B0")]
	public static void StartClient()
	{
	}

	[Token(Token = "0x6001237")]
	[Address(RVA = "0x144194C", Offset = "0x144194C", VA = "0x144194C")]
	public static void StartSinglePlayer()
	{
	}

	[Token(Token = "0x6001238")]
	[Address(RVA = "0x1441834", Offset = "0x1441834", VA = "0x1441834")]
	private static bool SanityCheck()
	{
		return default(bool);
	}

	[Token(Token = "0x6001239")]
	[Address(RVA = "0x14419E0", Offset = "0x14419E0", VA = "0x14419E0")]
	public static void SafeShutdown()
	{
	}

	[Token(Token = "0x600123A")]
	[Address(RVA = "0x1441A74", Offset = "0x1441A74", VA = "0x1441A74")]
	public BoltMultiplayerNetwork()
	{
	}
}
[Token(Token = "0x2000337")]
public static class BoltNetworkActions
{
	[Token(Token = "0x400104F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker2;

	[Token(Token = "0x4001050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly ProfilerMarker s_profileMarker3;

	[Token(Token = "0x4001051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x4001052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly ProfilerMarker s_profileMarker4;

	[Token(Token = "0x600123B")]
	[Address(RVA = "0x1441A7C", Offset = "0x1441A7C", VA = "0x1441A7C")]
	public static void SendGuidComponentData(Guid guid, string stringData, int intValue0, int intValue1)
	{
	}

	[Token(Token = "0x600123C")]
	[Address(RVA = "0x1441B6C", Offset = "0x1441B6C", VA = "0x1441B6C")]
	public static void RequestGuidComponentData(Guid guid)
	{
	}

	[Token(Token = "0x600123D")]
	[Address(RVA = "0x1441C14", Offset = "0x1441C14", VA = "0x1441C14")]
	public static void SendChangeTriggerRequest(Guid guid, AbstractTriggeredMechanism.Trigger newState)
	{
	}

	[Token(Token = "0x600123E")]
	[Address(RVA = "0x1441C78", Offset = "0x1441C78", VA = "0x1441C78")]
	public static void SendItemTriggerStateChangeRequest(BoltEntity item, VrItem.TriggerStateType type)
	{
	}

	[Token(Token = "0x600123F")]
	[Address(RVA = "0x1441CCC", Offset = "0x1441CCC", VA = "0x1441CCC")]
	public static void RequestHealthStatusChangeEvent(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6001240")]
	[Address(RVA = "0x1441D4C", Offset = "0x1441D4C", VA = "0x1441D4C")]
	public static void RequestHealthStatusChangeEvent(HealthStatusInfo info, BoltEntity entityHit)
	{
	}

	[Token(Token = "0x6001241")]
	[Address(RVA = "0x14423D0", Offset = "0x14423D0", VA = "0x14423D0")]
	public static void SendHealthStatusChangeEvent(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6001242")]
	[Address(RVA = "0x1442450", Offset = "0x1442450", VA = "0x1442450")]
	public static void SendHealthStatusChange(HealthStatusInfo info, BoltEntity entityHit)
	{
	}

	[Token(Token = "0x6001243")]
	[Address(RVA = "0x1442A54", Offset = "0x1442A54", VA = "0x1442A54")]
	public static void SendResetObjectEvent(BoltEntity playerEntity)
	{
	}

	[Token(Token = "0x6001244")]
	[Address(RVA = "0x1442A94", Offset = "0x1442A94", VA = "0x1442A94")]
	public static void SendPlayerDeathEvent(BoltEntity playerEntity)
	{
	}

	[Token(Token = "0x6001245")]
	[Address(RVA = "0x1442AD4", Offset = "0x1442AD4", VA = "0x1442AD4")]
	public static void SendPlayerRescueEvent(BoltEntity playerEntity)
	{
	}

	[Token(Token = "0x6001246")]
	[Address(RVA = "0x1442B18", Offset = "0x1442B18", VA = "0x1442B18")]
	public static void SendPlayerFocusEvent(BoltEntity playerEntity, bool focus)
	{
	}

	[Token(Token = "0x6001247")]
	[Address(RVA = "0x1442B6C", Offset = "0x1442B6C", VA = "0x1442B6C")]
	public static void SendAvatarVisibilityChange(string playerName, bool showLocal, bool showRemote)
	{
	}

	[Token(Token = "0x6001248")]
	[Address(RVA = "0x1442BDC", Offset = "0x1442BDC", VA = "0x1442BDC")]
	public static void SendRequestRepairGeneratorEvent(NetworkId generatorID)
	{
	}

	[Token(Token = "0x6001249")]
	[Address(RVA = "0x1442C1C", Offset = "0x1442C1C", VA = "0x1442C1C")]
	public static void SendWeaponMetaVisualsEvent(NetworkId networkID, bool laserBeam, weaponSkinNames skin)
	{
	}

	[Token(Token = "0x600124A")]
	[Address(RVA = "0x1442C90", Offset = "0x1442C90", VA = "0x1442C90")]
	public static void SendServerNetworkAudioEvent(bool is2d, Guid guid, [Optional] Guid parentGuid)
	{
	}

	[Token(Token = "0x600124B")]
	[Address(RVA = "0x1442D18", Offset = "0x1442D18", VA = "0x1442D18")]
	public static void RequestShopTransaction(PrefabId prefabId, int terminalIndex)
	{
	}

	[Token(Token = "0x600124C")]
	[Address(RVA = "0x1442D6C", Offset = "0x1442D6C", VA = "0x1442D6C")]
	public static void RequestAmmoShopTransaction(int entryIndex, int itemIndex, int terminalIndex, int ammoAmount)
	{
	}

	[Token(Token = "0x600124D")]
	[Address(RVA = "0x1442DF0", Offset = "0x1442DF0", VA = "0x1442DF0")]
	public static void RequestMultiplayerGameState()
	{
	}

	[Token(Token = "0x600124E")]
	[Address(RVA = "0x1442E10", Offset = "0x1442E10", VA = "0x1442E10")]
	public static void ChangeClientAmmo(PrefabId prefabId, int amount, BoltConnection connection)
	{
	}

	[Token(Token = "0x600124F")]
	[Address(RVA = "0x1442E68", Offset = "0x1442E68", VA = "0x1442E68")]
	public static void RequestAmmo(BoltEntity item, int amount)
	{
	}

	[Token(Token = "0x6001250")]
	[Address(RVA = "0x1442EBC", Offset = "0x1442EBC", VA = "0x1442EBC")]
	public static void RequestPouchMagazine(PrefabId prefabId)
	{
	}

	[Token(Token = "0x6001251")]
	[Address(RVA = "0x1442F00", Offset = "0x1442F00", VA = "0x1442F00")]
	public static void ChangeCoinsAmmount(string playerName, int coins)
	{
	}

	[Token(Token = "0x6001252")]
	[Address(RVA = "0x1442F54", Offset = "0x1442F54", VA = "0x1442F54")]
	public static void RequestInitialCoins(string playerName)
	{
	}

	[Token(Token = "0x6001253")]
	[Address(RVA = "0x1442F94", Offset = "0x1442F94", VA = "0x1442F94")]
	public static void OnGameStart()
	{
	}

	[Token(Token = "0x6001254")]
	[Address(RVA = "0x144300C", Offset = "0x144300C", VA = "0x144300C")]
	public static void OnSessionDataChanged()
	{
	}

	[Token(Token = "0x6001255")]
	[Address(RVA = "0x14430C8", Offset = "0x14430C8", VA = "0x14430C8")]
	public static void SendServerLevelLoadComplete()
	{
	}

	[Token(Token = "0x6001256")]
	[Address(RVA = "0x14430E8", Offset = "0x14430E8", VA = "0x14430E8")]
	public static void SendServerLevelEnd(bool isAlive, bool isExtracted)
	{
	}

	[Token(Token = "0x6001257")]
	[Address(RVA = "0x144313C", Offset = "0x144313C", VA = "0x144313C")]
	public static void SendServerLevelEnd(bool isAlive, bool isExtracted, BoltConnection connection)
	{
	}

	[Token(Token = "0x6001258")]
	[Address(RVA = "0x1443194", Offset = "0x1443194", VA = "0x1443194")]
	public static void RequestLevelEnd(LevelEndType levelEndType)
	{
	}

	[Token(Token = "0x6001259")]
	[Address(RVA = "0x1443224", Offset = "0x1443224", VA = "0x1443224")]
	public static void RequestGameEnd()
	{
	}

	[Token(Token = "0x600125A")]
	[Address(RVA = "0x14432BC", Offset = "0x14432BC", VA = "0x14432BC")]
	public static void RequestToggleLobbyVisibility()
	{
	}

	[Token(Token = "0x600125B")]
	[Address(RVA = "0x14432DC", Offset = "0x14432DC", VA = "0x14432DC")]
	public static void SendLobbyVisibilityChangeEvent(bool visible)
	{
	}

	[Token(Token = "0x600125C")]
	[Address(RVA = "0x144331C", Offset = "0x144331C", VA = "0x144331C")]
	public static void RequestRevivePlayerEvent()
	{
	}

	[Token(Token = "0x600125D")]
	[Address(RVA = "0x1443394", Offset = "0x1443394", VA = "0x1443394")]
	public static void SendServerLevelEndType(LevelEndType levelEndType)
	{
	}

	[Token(Token = "0x600125E")]
	[Address(RVA = "0x14433D4", Offset = "0x14433D4", VA = "0x14433D4")]
	public static void SendRequestChangeLevel(int mapID)
	{
	}

	[Token(Token = "0x600125F")]
	[Address(RVA = "0x1443414", Offset = "0x1443414", VA = "0x1443414")]
	public static void SendRequestDifficulty(int difficultyID)
	{
	}

	[Token(Token = "0x6001260")]
	[Address(RVA = "0x1443454", Offset = "0x1443454", VA = "0x1443454")]
	public static void SendRequestStartGame()
	{
	}

	[Token(Token = "0x6001261")]
	[Address(RVA = "0x143CC70", Offset = "0x143CC70", VA = "0x143CC70")]
	public static void RequestChangeKey(bool insert, MechanismKey key, MechanismKeyhole keyhole, [Optional] MechanismKey.KeyEjectionContext? context)
	{
	}

	[Token(Token = "0x6001262")]
	[Address(RVA = "0x1443474", Offset = "0x1443474", VA = "0x1443474")]
	public static void SendChangeKeyEvent(bool insert, MechanismKey key, MechanismKeyhole keyhole, [Optional] MechanismKey.KeyEjectionContext? context)
	{
	}

	[Token(Token = "0x6001263")]
	[Address(RVA = "0x1443600", Offset = "0x1443600", VA = "0x1443600")]
	public static void RequestEmbedWeapon(BoltEntity weapon, BoltEntity zombie, HealthStatus healthStatus, Collider col, Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x6001264")]
	[Address(RVA = "0x1443728", Offset = "0x1443728", VA = "0x1443728")]
	public static void RequestUnembedWeapon(BoltEntity weapon)
	{
	}

	[Token(Token = "0x6001265")]
	[Address(RVA = "0x1443768", Offset = "0x1443768", VA = "0x1443768")]
	public static void SendEjectEvent(MechanismKey key, MechanismKeyhole keyhole, Vector3 velocity, Vector3 angularVelocity, [Optional] MechanismKey.KeyEjectionContext? context)
	{
	}

	[Token(Token = "0x6001266")]
	[Address(RVA = "0x144393C", Offset = "0x144393C", VA = "0x144393C")]
	public static void RequestReturnToPool(BoltEntity entity)
	{
	}

	[Token(Token = "0x6001267")]
	[Address(RVA = "0x14439D8", Offset = "0x14439D8", VA = "0x14439D8")]
	public static void Dissolve(BoltEntity entity, bool requestReturnToPool)
	{
	}

	[Token(Token = "0x6001268")]
	[Address(RVA = "0x1443A30", Offset = "0x1443A30", VA = "0x1443A30")]
	public static void SendChangePlayerState(MultiplayerGameState state)
	{
	}

	[Token(Token = "0x6001269")]
	[Address(RVA = "0x1443BA4", Offset = "0x1443BA4", VA = "0x1443BA4")]
	public static void OnAgentPerformMelee(BoltEntity agentEntity, Vector3 targetPosition, bool combo)
	{
	}

	[Token(Token = "0x600126A")]
	[Address(RVA = "0x1443C2C", Offset = "0x1443C2C", VA = "0x1443C2C")]
	public static void SendScoreBreakdown(ScoreBreakdown score)
	{
	}

	[Token(Token = "0x600126B")]
	[Address(RVA = "0x1443EAC", Offset = "0x1443EAC", VA = "0x1443EAC")]
	public static void SendControlChangeRequest(BoltEntity entity, bool requestControl)
	{
	}

	[Token(Token = "0x600126C")]
	[Address(RVA = "0x1443F00", Offset = "0x1443F00", VA = "0x1443F00")]
	public static void UpdateScore(int score, string playerName)
	{
	}

	[Token(Token = "0x600126D")]
	[Address(RVA = "0x1443F54", Offset = "0x1443F54", VA = "0x1443F54")]
	public static void ChangeExplosive(BoltEntity entity, bool armed, bool isFuzeRunning)
	{
	}

	[Token(Token = "0x600126E")]
	[Address(RVA = "0x1443FC4", Offset = "0x1443FC4", VA = "0x1443FC4")]
	public static void SendInteractionRequest(BoltEntity item, BoltEntity player, int markerIndex, bool isPrimaryHand, VrHandController controller, bool isSwapping, bool isKeyInsertion, bool isFromHandScan, bool start)
	{
	}

	[Token(Token = "0x600126F")]
	[Address(RVA = "0x1444148", Offset = "0x1444148", VA = "0x1444148")]
	public static InteractionEvent SendInteractionToOthers(BoltEntity item, BoltEntity player, int markerIndex, bool isHeldByOtherHands, int controller, bool isSwapping, bool isKeyInsertion, bool isFromHandScan, bool start, [Optional] int? connectionId)
	{
		return null;
	}

	[Token(Token = "0x6001270")]
	[Address(RVA = "0x14442B8", Offset = "0x14442B8", VA = "0x14442B8")]
	public static void SendInteractionFailed(BoltConnection sentTo, BoltEntity item, BoltEntity player, int controller)
	{
	}

	[Token(Token = "0x6001271")]
	[Address(RVA = "0x14446EC", Offset = "0x14446EC", VA = "0x14446EC")]
	public static void SendGenericGameplayEvent(MultiplayerGameplayEvent gameplayEvent, int data = 0)
	{
	}

	[Token(Token = "0x6001272")]
	[Address(RVA = "0x14447D4", Offset = "0x14447D4", VA = "0x14447D4")]
	public static void SendGunFiredServerEvent(bool ownerIsHumanPlayer, BoltEntity ownerEntity, BoltEntity gunEntity, Vector3 position, Vector3 direction)
	{
	}

	[Token(Token = "0x6001273")]
	[Address(RVA = "0x14448A4", Offset = "0x14448A4", VA = "0x14448A4")]
	public static void SendGenericGameplayEvent(MultiplayerGameplayEvent gameplayEvent, BoltConnection connection, int data = 0)
	{
	}

	[Token(Token = "0x6001274")]
	[Address(RVA = "0x14449F8", Offset = "0x14449F8", VA = "0x14449F8")]
	public static void SendItemInventoryState(BoltEntity item, BoltEntity player, string inventoryKey, bool isInInventory)
	{
	}

	[Token(Token = "0x6001275")]
	[Address(RVA = "0x1444A80", Offset = "0x1444A80", VA = "0x1444A80")]
	public static void SendPushBackPlayer(BoltEntity player, Vector3 position, float angleSpread, float pushBackDuration, float pushBackForce, bool slowDown)
	{
	}

	[Token(Token = "0x6001276")]
	[Address(RVA = "0x1444B4C", Offset = "0x1444B4C", VA = "0x1444B4C")]
	public static void SendChangeAmmoPouchAmountEvent(BoltEntity magazine, int amount)
	{
	}

	[Token(Token = "0x6001277")]
	[Address(RVA = "0x1444BA0", Offset = "0x1444BA0", VA = "0x1444BA0")]
	public static void SendAmmoGrabbedFromPouchEvent(BoltEntity magazine)
	{
	}

	[Token(Token = "0x6001278")]
	[Address(RVA = "0x1444BE4", Offset = "0x1444BE4", VA = "0x1444BE4")]
	public static void SendRequestRemoveMagazineFromAmmoPouchEvent(BoltEntity magazine)
	{
	}

	[Token(Token = "0x6001279")]
	[Address(RVA = "0x1444C28", Offset = "0x1444C28", VA = "0x1444C28")]
	public static void SendUpdateMagazineAmmoFromClient(BoltEntity magazine, int amount)
	{
	}

	[Token(Token = "0x600127A")]
	[Address(RVA = "0x1444C7C", Offset = "0x1444C7C", VA = "0x1444C7C")]
	public static void SendEntityCommandEvent(BoltEntity entity, Vector3 position, Quaternion rotation, Vector3 velocity, Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x600127B")]
	[Address(RVA = "0x1444D60", Offset = "0x1444D60", VA = "0x1444D60")]
	public static void SendGunFiredClientEvent(bool ownerIsHumanPlayer, BoltEntity ownerEntity, BoltEntity gunEntity, Vector3 position, Vector3 direction, float shotPower, int bulletGroupId)
	{
	}

	[Token(Token = "0x600127C")]
	[Address(RVA = "0x1444E64", Offset = "0x1444E64", VA = "0x1444E64")]
	public static void SendConnectionConfirmation()
	{
	}

	[Token(Token = "0x600127D")]
	[Address(RVA = "0x1444E84", Offset = "0x1444E84", VA = "0x1444E84")]
	public static void SendReportEnemiesEvent(List<NetworkId> ids)
	{
	}

	[Token(Token = "0x600127E")]
	[Address(RVA = "0x144513C", Offset = "0x144513C", VA = "0x144513C")]
	public static void SendGameDebugSettings()
	{
	}

	[Token(Token = "0x600127F")]
	[Address(RVA = "0x1445210", Offset = "0x1445210", VA = "0x1445210")]
	public static VrHand FindRemoteVrHand(BoltEntity playerEntity, int controller)
	{
		return null;
	}

	[Token(Token = "0x6001280")]
	[Address(RVA = "0x14454CC", Offset = "0x14454CC", VA = "0x14454CC")]
	public static void SendExploderZombieArmed(BoltEntity entity)
	{
	}

	[Token(Token = "0x6001281")]
	[Address(RVA = "0x144550C", Offset = "0x144550C", VA = "0x144550C")]
	public static void RequestSimpleHealthChange(HealthStatus healthStatus, float healthChange)
	{
	}

	[Token(Token = "0x6001282")]
	[Address(RVA = "0x14457A8", Offset = "0x14457A8", VA = "0x14457A8")]
	public static void RequestSimpleHealthChangeNonNetworked(HealthStatus healthStatus, float healthChange)
	{
	}

	[Token(Token = "0x6001283")]
	[Address(RVA = "0x1445A4C", Offset = "0x1445A4C", VA = "0x1445A4C")]
	public static bool TestIfInteractionIsPossible(BoltEntity itemEntity, int graspMarkerIndex, bool ignoreControlled = true)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000338")]
public static class BoltNetworkExtensions
{
	[Token(Token = "0x4001053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<GameObject> EntitiesToAttach;

	[Token(Token = "0x6001285")]
	[Address(RVA = "0x1445DDC", Offset = "0x1445DDC", VA = "0x1445DDC")]
	internal static void QueueAttach(GameObject gameObject)
	{
	}

	[Token(Token = "0x6001286")]
	[Address(RVA = "0x1445EB4", Offset = "0x1445EB4", VA = "0x1445EB4")]
	internal static bool EntityExistsAndAttached(BoltEntity entity)
	{
		return default(bool);
	}

	[Token(Token = "0x6001287")]
	[Address(RVA = "0x1445F30", Offset = "0x1445F30", VA = "0x1445F30")]
	internal static bool EntityExists(BoltEntity entity)
	{
		return default(bool);
	}

	[Token(Token = "0x6001288")]
	[Address(RVA = "0x1445F8C", Offset = "0x1445F8C", VA = "0x1445F8C")]
	public static void AttachSiblingsAndChildren(this UnityEngine.Component owner, BoltEntity entity)
	{
	}

	[Token(Token = "0x6001289")]
	[Address(RVA = "0x14460A0", Offset = "0x14460A0", VA = "0x14460A0")]
	public static void DetachSiblingsAndChildren(this UnityEngine.Component owner, BoltEntity entity)
	{
	}
}
[Token(Token = "0x2000339")]
public class BoltPoolManager : IPrefabPool
{
	[Token(Token = "0x600128B")]
	[Address(RVA = "0x1446250", Offset = "0x1446250", VA = "0x1446250", Slot = "5")]
	public GameObject Instantiate(PrefabId prefabId, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x600128C")]
	[Address(RVA = "0x1446308", Offset = "0x1446308", VA = "0x1446308", Slot = "6")]
	public void Destroy(GameObject gameObject)
	{
	}

	[Token(Token = "0x600128D")]
	[Address(RVA = "0x14462FC", Offset = "0x14462FC", VA = "0x14462FC", Slot = "4")]
	public GameObject LoadPrefab(PrefabId prefabId)
	{
		return null;
	}

	[Token(Token = "0x600128E")]
	[Address(RVA = "0x1446390", Offset = "0x1446390", VA = "0x1446390")]
	public BoltPoolManager()
	{
	}
}
[Token(Token = "0x200033A")]
public class BoltPrefabPooling : IPrefabPool
{
	[Token(Token = "0x600128F")]
	[Address(RVA = "0x1446398", Offset = "0x1446398", VA = "0x1446398", Slot = "5")]
	public GameObject Instantiate(PrefabId prefabId, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6001290")]
	[Address(RVA = "0x14465FC", Offset = "0x14465FC", VA = "0x14465FC", Slot = "6")]
	private void Bolt.IPrefabPool.Destroy(GameObject gameObject)
	{
	}

	[Token(Token = "0x6001291")]
	[Address(RVA = "0x14465F0", Offset = "0x14465F0", VA = "0x14465F0", Slot = "4")]
	public GameObject LoadPrefab(PrefabId prefabId)
	{
		return null;
	}

	[Token(Token = "0x6001292")]
	[Address(RVA = "0x1446768", Offset = "0x1446768", VA = "0x1446768")]
	public static void DestroyAllNonGameplayObjects()
	{
	}

	[Token(Token = "0x6001293")]
	[Address(RVA = "0x144676C", Offset = "0x144676C", VA = "0x144676C")]
	public static void DestroyAllGameplayObjects()
	{
	}

	[Token(Token = "0x6001294")]
	[Address(RVA = "0x1446770", Offset = "0x1446770", VA = "0x1446770")]
	public BoltPrefabPooling()
	{
	}
}
[Token(Token = "0x200033B")]
public class BoltPTPrefabPooling : IPrefabPool
{
	[Token(Token = "0x4001054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<BoltEntity> m_EntityList;

	[Token(Token = "0x170002C5")]
	public static List<BoltEntity> EntityList
	{
		[Token(Token = "0x6001295")]
		[Address(RVA = "0x1446778", Offset = "0x1446778", VA = "0x1446778")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001296")]
	[Address(RVA = "0x1446908", Offset = "0x1446908", VA = "0x1446908", Slot = "5")]
	public GameObject Instantiate(PrefabId prefabId, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6001297")]
	[Address(RVA = "0x1446AC8", Offset = "0x1446AC8", VA = "0x1446AC8", Slot = "6")]
	public void Destroy(GameObject gameObject)
	{
	}

	[Token(Token = "0x6001298")]
	[Address(RVA = "0x1446ABC", Offset = "0x1446ABC", VA = "0x1446ABC", Slot = "4")]
	public GameObject LoadPrefab(PrefabId prefabId)
	{
		return null;
	}

	[Token(Token = "0x6001299")]
	[Address(RVA = "0x14467D4", Offset = "0x14467D4", VA = "0x14467D4")]
	private static void RemoveNullEntities()
	{
	}

	[Token(Token = "0x600129A")]
	[Address(RVA = "0x1446BE4", Offset = "0x1446BE4", VA = "0x1446BE4")]
	public BoltPTPrefabPooling()
	{
	}
}
[Token(Token = "0x200033D")]
[BoltGlobalBehaviour(BoltNetworkModes.Client)]
public class BoltClientCallbacks : GlobalEventListener
{
	[Token(Token = "0x4001057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<SendResetObject> OnSendResetObjectReceived;

	[Token(Token = "0x4001058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ItemShop m_itemShop;

	[Token(Token = "0x170002C6")]
	private ItemShop ItemShop
	{
		[Token(Token = "0x600129F")]
		[Address(RVA = "0x1446D58", Offset = "0x1446D58", VA = "0x1446D58")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0x1446DFC", Offset = "0x1446DFC", VA = "0x1446DFC", Slot = "24")]
	public override void Disconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x60012A1")]
	[Address(RVA = "0x1446E3C", Offset = "0x1446E3C", VA = "0x1446E3C", Slot = "156")]
	public override void OnEvent(SessionDataChangedEvent evnt)
	{
	}

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0x1446FA4", Offset = "0x1446FA4", VA = "0x1446FA4", Slot = "152")]
	public override void OnEvent(SendResetObject evnt)
	{
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0x1447010", Offset = "0x1447010", VA = "0x1447010", Slot = "180")]
	public override void OnEvent(UpdateCoinsEvent evnt)
	{
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0x14470E8", Offset = "0x14470E8", VA = "0x14470E8", Slot = "182")]
	public override void OnEvent(GiveClientAmmoEvent evnt)
	{
	}

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0x1447270", Offset = "0x1447270", VA = "0x1447270", Slot = "186")]
	public override void OnEvent(ChangeAmmoPouchAmountEvent evnt)
	{
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0x1447354", Offset = "0x1447354", VA = "0x1447354", Slot = "204")]
	public override void OnEvent(SetGameObjectName evnt)
	{
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0x1447430", Offset = "0x1447430", VA = "0x1447430", Slot = "214")]
	public override void OnEvent(InteractionRequestFailed evnt)
	{
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0x1444340", Offset = "0x1444340", VA = "0x1444340")]
	public static void HandleInteractionRequestFailed(InteractionRequestFailed evnt)
	{
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0x1447438", Offset = "0x1447438", VA = "0x1447438", Slot = "215")]
	public override void OnEvent(ExploderZombieArmed evnt)
	{
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0x144753C", Offset = "0x144753C", VA = "0x144753C", Slot = "217")]
	public override void OnEvent(GameStateEvent evnt)
	{
	}

	[Token(Token = "0x60012AB")]
	[Address(RVA = "0x14475F4", Offset = "0x14475F4", VA = "0x14475F4", Slot = "219")]
	public override void OnEvent(VrItemAudioEvent evnt)
	{
	}

	[Token(Token = "0x60012AC")]
	[Address(RVA = "0x14476E4", Offset = "0x14476E4", VA = "0x14476E4", Slot = "232")]
	public override void OnEvent(SendGameEvent evnt)
	{
	}

	[Token(Token = "0x60012AD")]
	[Address(RVA = "0x14477C8", Offset = "0x14477C8", VA = "0x14477C8", Slot = "246")]
	public override void OnEvent(PlayWatchAlarm evnt)
	{
	}

	[Token(Token = "0x60012AE")]
	[Address(RVA = "0x1447858", Offset = "0x1447858", VA = "0x1447858")]
	public BoltClientCallbacks()
	{
	}
}
[Token(Token = "0x200033E")]
[BoltGlobalBehaviour]
public class GameEventListenerService : GlobalEventListener
{
	[Token(Token = "0x200033F")]
	[CompilerGenerated]
	private sealed class <DetachEntities>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameEventListenerService <>4__this;

		[Token(Token = "0x170002C8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012DF")]
			[Address(RVA = "0x1449FD0", Offset = "0x1449FD0", VA = "0x1449FD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012E1")]
			[Address(RVA = "0x144A018", Offset = "0x144A018", VA = "0x144A018", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x14479F0", Offset = "0x14479F0", VA = "0x14479F0")]
		[DebuggerHidden]
		public <DetachEntities>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x1449DF4", Offset = "0x1449DF4", VA = "0x1449DF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x1449DF8", Offset = "0x1449DF8", VA = "0x1449DF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x1449FD8", Offset = "0x1449FD8", VA = "0x1449FD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool m_serverLevelLoadComplete;

	[Token(Token = "0x400105A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<BoltEntity> OnReceivedPlayerEntity;

	[Token(Token = "0x400105B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<bool, bool> ServerEndedLevelEvent;

	[Token(Token = "0x400105C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action<RequestLevelEndEvent> OnReceivedLevelEndEvent;

	[Token(Token = "0x400105D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static Action<RequestEndGameEvent> OnReceivedEndGameEvent;

	[Token(Token = "0x400105E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action<ServerLevelEndTypeEvent> OnReceivedServerLevelEndTypeEvent;

	[Token(Token = "0x400105F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static Action<RequestChangeLevelEvent> OnReceivedRequestChangeLevelEvent;

	[Token(Token = "0x4001060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Action<RequestChangeDifficultyEvent> OnReceivedRequestChangeDifficultyEvent;

	[Token(Token = "0x4001061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Action<RequestStartGameEvent> OnReceivedRequestStartGameEvent;

	[Token(Token = "0x4001062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Action<ulong> OnOculusRoomIdReceived;

	[Token(Token = "0x4001063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Action<BoltConnection> OnConfirmConnectionReceived;

	[Token(Token = "0x4001064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Action<SendAvatarVisibilityChanged> OnChangeAvatarVisibilityReceived;

	[Token(Token = "0x4001065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Action<bool> OnReceivedLobbyVisibilityChange;

	[Token(Token = "0x4001066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Action OnToggleChangeVisibility;

	[Token(Token = "0x4001067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static Action<SendPlayerDeath> OnReceivePlayerDeathEvent;

	[Token(Token = "0x4001068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static Action<SendPlayerRescue> OnReceivePlayerRescueEvent;

	[Token(Token = "0x4001069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static Action<SendPlayerFocus> OnReceivePlayerFocusEvent;

	[Token(Token = "0x400106A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static Action<RagdollEvent> OnRagdollEvent;

	[Token(Token = "0x400106B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static Action<WeaponMetaVisuals> OnWeaponMetaVisualsEvent;

	[Token(Token = "0x400106C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static Action<bool> OnWeaponCrateOpenedEvent;

	[Token(Token = "0x400106D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static Action<AgentPerformMelee> OnAgentPerformMeleeReceived;

	[Token(Token = "0x400106E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static Action<SendScore> OnScoreEvent;

	[Token(Token = "0x400106F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static Action<LiveMatchScore> OnLiveMatchScoreEvent;

	[Token(Token = "0x4001070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static Action<InteractionEvent> OnInteractionEvent;

	[Token(Token = "0x4001071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static Action<ChangeKeyEvent> OnChangeKeyEvent;

	[Token(Token = "0x4001072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BoltEntity m_localPlayerEntity;

	[Token(Token = "0x4001073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Queue<BoltEntity> m_detachList;

	[Token(Token = "0x4001074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_runDetachRoutine;

	[Token(Token = "0x4001075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine m_detachRoutine;

	[Token(Token = "0x170002C7")]
	public static bool ServerLevelLoadComplete
	{
		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x1447A18", Offset = "0x1447A18", VA = "0x1447A18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x1447A74", Offset = "0x1447A74", VA = "0x1447A74")]
		set
		{
		}
	}

	[Token(Token = "0x60012AF")]
	[Address(RVA = "0x1447860", Offset = "0x1447860", VA = "0x1447860", Slot = "11")]
	public override void BoltStartBegin()
	{
	}

	[Token(Token = "0x60012B0")]
	[Address(RVA = "0x144795C", Offset = "0x144795C", VA = "0x144795C", Slot = "16")]
	public override void BoltShutdownBegin(AddCallback registerDoneCallback, UdpConnectionDisconnectReason disconnectReason)
	{
	}

	[Token(Token = "0x60012B1")]
	[Address(RVA = "0x1447880", Offset = "0x1447880", VA = "0x1447880")]
	private void Initialize(bool init)
	{
	}

	[Token(Token = "0x60012B2")]
	[Address(RVA = "0x144797C", Offset = "0x144797C", VA = "0x144797C")]
	[IteratorStateMachine(typeof(<DetachEntities>d__32))]
	private IEnumerator DetachEntities()
	{
		return null;
	}

	[Token(Token = "0x60012B5")]
	[Address(RVA = "0x1447AC0", Offset = "0x1447AC0", VA = "0x1447AC0", Slot = "12")]
	public override void BoltStartDone()
	{
	}

	[Token(Token = "0x60012B6")]
	[Address(RVA = "0x1447B44", Offset = "0x1447B44", VA = "0x1447B44", Slot = "25")]
	public override void EntityAttached(BoltEntity entity)
	{
	}

	[Token(Token = "0x60012B7")]
	[Address(RVA = "0x1447C08", Offset = "0x1447C08", VA = "0x1447C08", Slot = "26")]
	public override void EntityDetached(BoltEntity entity)
	{
	}

	[Token(Token = "0x60012B8")]
	[Address(RVA = "0x1447CA8", Offset = "0x1447CA8", VA = "0x1447CA8", Slot = "24")]
	public override void Disconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x60012B9")]
	[Address(RVA = "0x1447DAC", Offset = "0x1447DAC", VA = "0x1447DAC", Slot = "190")]
	public override void OnEvent(RequestToggleLobbyVisibilityChange evnt)
	{
	}

	[Token(Token = "0x60012BA")]
	[Address(RVA = "0x1447E2C", Offset = "0x1447E2C", VA = "0x1447E2C", Slot = "191")]
	public override void OnEvent(SendLobbyVisibilityChange evnt)
	{
	}

	[Token(Token = "0x60012BB")]
	[Address(RVA = "0x1447EC0", Offset = "0x1447EC0", VA = "0x1447EC0", Slot = "197")]
	public override void OnEvent(SendAvatarVisibilityChanged evnt)
	{
	}

	[Token(Token = "0x60012BC")]
	[Address(RVA = "0x1447F2C", Offset = "0x1447F2C", VA = "0x1447F2C", Slot = "166")]
	public override void OnEvent(ChangeKeyEvent evnt)
	{
	}

	[Token(Token = "0x60012BD")]
	[Address(RVA = "0x1448000", Offset = "0x1448000", VA = "0x1448000", Slot = "209")]
	public override void OnEvent(EjectKeyEvent evnt)
	{
	}

	[Token(Token = "0x60012BE")]
	[Address(RVA = "0x144814C", Offset = "0x144814C", VA = "0x144814C", Slot = "178")]
	public override void OnEvent(SendPlayerDeath evnt)
	{
	}

	[Token(Token = "0x60012BF")]
	[Address(RVA = "0x14481B8", Offset = "0x14481B8", VA = "0x14481B8", Slot = "237")]
	public override void OnEvent(SendPlayerRescue evnt)
	{
	}

	[Token(Token = "0x60012C0")]
	[Address(RVA = "0x1448224", Offset = "0x1448224", VA = "0x1448224", Slot = "242")]
	public override void OnEvent(SendPlayerFocus evnt)
	{
	}

	[Token(Token = "0x60012C1")]
	[Address(RVA = "0x1448290", Offset = "0x1448290", VA = "0x1448290", Slot = "153")]
	public override void OnEvent(RequestChangeTriggerState evnt)
	{
	}

	[Token(Token = "0x60012C2")]
	[Address(RVA = "0x1448410", Offset = "0x1448410", VA = "0x1448410", Slot = "167")]
	public override void OnEvent(RequestReturnToPoolEvent evnt)
	{
	}

	[Token(Token = "0x60012C3")]
	[Address(RVA = "0x1448538", Offset = "0x1448538", VA = "0x1448538", Slot = "160")]
	public override void OnEvent(ServerLevelLoadCompleteEvent evnt)
	{
	}

	[Token(Token = "0x60012C4")]
	[Address(RVA = "0x1448584", Offset = "0x1448584", VA = "0x1448584", Slot = "161")]
	public override void OnEvent(ServerLevelEndEvent evnt)
	{
	}

	[Token(Token = "0x60012C5")]
	[Address(RVA = "0x144861C", Offset = "0x144861C", VA = "0x144861C", Slot = "162")]
	public override void OnEvent(RequestLevelEndEvent evnt)
	{
	}

	[Token(Token = "0x60012C6")]
	[Address(RVA = "0x1448688", Offset = "0x1448688", VA = "0x1448688", Slot = "244")]
	public override void OnEvent(RequestEndGameEvent evnt)
	{
	}

	[Token(Token = "0x60012C7")]
	[Address(RVA = "0x14486F4", Offset = "0x14486F4", VA = "0x14486F4", Slot = "163")]
	public override void OnEvent(ServerLevelEndTypeEvent evnt)
	{
	}

	[Token(Token = "0x60012C8")]
	[Address(RVA = "0x1448760", Offset = "0x1448760", VA = "0x1448760", Slot = "164")]
	public override void OnEvent(RequestChangeLevelEvent evnt)
	{
	}

	[Token(Token = "0x60012C9")]
	[Address(RVA = "0x14487CC", Offset = "0x14487CC", VA = "0x14487CC", Slot = "251")]
	public override void OnEvent(RequestChangeDifficultyEvent evnt)
	{
	}

	[Token(Token = "0x60012CA")]
	[Address(RVA = "0x1448838", Offset = "0x1448838", VA = "0x1448838", Slot = "189")]
	public override void OnEvent(RequestStartGameEvent evnt)
	{
	}

	[Token(Token = "0x60012CB")]
	[Address(RVA = "0x14488A4", Offset = "0x14488A4", VA = "0x14488A4", Slot = "171")]
	public override void OnEvent(SendScore evnt)
	{
	}

	[Token(Token = "0x60012CC")]
	[Address(RVA = "0x1448910", Offset = "0x1448910", VA = "0x1448910", Slot = "195")]
	public override void OnEvent(LiveMatchScore evnt)
	{
	}

	[Token(Token = "0x60012CD")]
	[Address(RVA = "0x144897C", Offset = "0x144897C", VA = "0x144897C", Slot = "157")]
	public override void OnEvent(AgentPerformMelee evnt)
	{
	}

	[Token(Token = "0x60012CE")]
	[Address(RVA = "0x1448A48", Offset = "0x1448A48", VA = "0x1448A48", Slot = "174")]
	public override void OnEvent(InteractionEvent evnt)
	{
	}

	[Token(Token = "0x60012CF")]
	[Address(RVA = "0x1448A50", Offset = "0x1448A50", VA = "0x1448A50")]
	public static void HandleInteractionEvent(InteractionEvent evnt)
	{
	}

	[Token(Token = "0x60012D0")]
	[Address(RVA = "0x1449178", Offset = "0x1449178", VA = "0x1449178", Slot = "193")]
	public override void OnEvent(GunFiredClientEvent evnt)
	{
	}

	[Token(Token = "0x60012D1")]
	[Address(RVA = "0x1449340", Offset = "0x1449340", VA = "0x1449340", Slot = "207")]
	public override void OnEvent(RagdollEvent evnt)
	{
	}

	[Token(Token = "0x60012D2")]
	[Address(RVA = "0x14493CC", Offset = "0x14493CC", VA = "0x14493CC", Slot = "247")]
	public override void OnEvent(WeaponMetaVisuals evnt)
	{
	}

	[Token(Token = "0x60012D3")]
	[Address(RVA = "0x1449458", Offset = "0x1449458", VA = "0x1449458", Slot = "151")]
	public override void OnEvent(HealthStatusChangeEvent evnt)
	{
	}

	[Token(Token = "0x60012D4")]
	[Address(RVA = "0x1449518", Offset = "0x1449518", VA = "0x1449518", Slot = "216")]
	public override void OnEvent(SpitGooEvent evnt)
	{
	}

	[Token(Token = "0x60012D5")]
	[Address(RVA = "0x144960C", Offset = "0x144960C", VA = "0x144960C", Slot = "220")]
	public override void OnEvent(PlayVOEvent evnt)
	{
	}

	[Token(Token = "0x60012D6")]
	[Address(RVA = "0x14496A0", Offset = "0x14496A0", VA = "0x14496A0", Slot = "223")]
	public override void OnEvent(ResearchPointsEvent evnt)
	{
	}

	[Token(Token = "0x60012D7")]
	[Address(RVA = "0x14496AC", Offset = "0x14496AC", VA = "0x14496AC", Slot = "240")]
	public override void OnEvent(GuidComponentDataEvent evnt)
	{
	}

	[Token(Token = "0x60012D8")]
	[Address(RVA = "0x1449854", Offset = "0x1449854", VA = "0x1449854", Slot = "239")]
	public override void OnEvent(SendAudioEvent evnt)
	{
	}

	[Token(Token = "0x60012D9")]
	[Address(RVA = "0x1449B98", Offset = "0x1449B98", VA = "0x1449B98", Slot = "245")]
	public override void OnEvent(GrabbedAmmoFromPouchEvent evnt)
	{
	}

	[Token(Token = "0x60012DA")]
	[Address(RVA = "0x1449C74", Offset = "0x1449C74", VA = "0x1449C74", Slot = "249")]
	public override void OnEvent(MechanismStateEvent evnt)
	{
	}

	[Token(Token = "0x60012DB")]
	[Address(RVA = "0x1449D64", Offset = "0x1449D64", VA = "0x1449D64")]
	public GameEventListenerService()
	{
	}
}
[Token(Token = "0x2000340")]
public interface IBoltEntityComponent
{
	[Token(Token = "0x170002CA")]
	BoltEntity entity
	{
		[Token(Token = "0x60012E5")]
		set;
	}

	[Token(Token = "0x60012E2")]
	void Attached(BoltEntity entity);

	[Token(Token = "0x60012E3")]
	void Detached(BoltEntity entity);

	[Token(Token = "0x60012E4")]
	void SimulateOwner();
}
[Token(Token = "0x2000341")]
[BoltGlobalBehaviour(BoltNetworkModes.Server)]
public class BoltServerCallbacks : GlobalEventListener
{
	[Token(Token = "0x2000342")]
	private class ConnectingPlayer
	{
		[Token(Token = "0x170002CC")]
		internal UdpEndPoint UdpEndPoint
		{
			[Token(Token = "0x6001314")]
			[Address(RVA = "0x1198B50", Offset = "0x1198B50", VA = "0x1198B50")]
			[CompilerGenerated]
			get
			{
				return default(UdpEndPoint);
			}
			[Token(Token = "0x6001315")]
			[Address(RVA = "0x1198B64", Offset = "0x1198B64", VA = "0x1198B64")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002CD")]
		internal int CurrentConnectionTime
		{
			[Token(Token = "0x6001316")]
			[Address(RVA = "0x1198B80", Offset = "0x1198B80", VA = "0x1198B80")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001317")]
			[Address(RVA = "0x1198B88", Offset = "0x1198B88", VA = "0x1198B88")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x1198B90", Offset = "0x1198B90", VA = "0x1198B90")]
		public ConnectingPlayer(UdpEndPoint endpoint, int currentConnectionTime)
		{
		}
	}

	[Token(Token = "0x4001079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<string, CurrencyCollectedEvent> OnCurrencyCollectedEvent;

	[Token(Token = "0x400107A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<RequestSpawnSpawnable> OnRequestSpawnSpawnable;

	[Token(Token = "0x400107B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<uint, BoltEntity> m_connectedPlayers;

	[Token(Token = "0x400107C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static BoltEntity m_serverPlayerEntity;

	[Token(Token = "0x400107D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ItemShop m_itemShop;

	[Token(Token = "0x400107E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<NetworkId, InteractionEventData> m_lastOwner;

	[Token(Token = "0x400107F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<NetworkId> m_removeInitialOwnerElements;

	[Token(Token = "0x170002CB")]
	private ItemShop ItemShop
	{
		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x144A020", Offset = "0x144A020", VA = "0x144A020")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012E7")]
	[Address(RVA = "0x144A0C4", Offset = "0x144A0C4", VA = "0x144A0C4")]
	private void OnInteractionEvent(InteractionEvent evnt)
	{
	}

	[Token(Token = "0x60012E8")]
	[Address(RVA = "0x144A748", Offset = "0x144A748", VA = "0x144A748")]
	private BoltEntity GetPlayer(BoltConnection connection)
	{
		return null;
	}

	[Token(Token = "0x60012E9")]
	private T GetPlayer<T>(BoltConnection connection) where T : UnityEngine.Component
	{
		return null;
	}

	[Token(Token = "0x60012EA")]
	[Address(RVA = "0x144A8B0", Offset = "0x144A8B0", VA = "0x144A8B0", Slot = "11")]
	public override void BoltStartBegin()
	{
	}

	[Token(Token = "0x60012EB")]
	[Address(RVA = "0x144AB04", Offset = "0x144AB04", VA = "0x144AB04", Slot = "12")]
	public override void BoltStartDone()
	{
	}

	[Token(Token = "0x60012EC")]
	[Address(RVA = "0x144B004", Offset = "0x144B004", VA = "0x144B004", Slot = "14")]
	public override void BoltStartFailed(UdpConnectionDisconnectReason disconnectReason)
	{
	}

	[Token(Token = "0x60012ED")]
	[Address(RVA = "0x144B00C", Offset = "0x144B00C", VA = "0x144B00C", Slot = "16")]
	public override void BoltShutdownBegin(AddCallback registerDoneCallback, UdpConnectionDisconnectReason disconnectReason)
	{
	}

	[Token(Token = "0x60012EE")]
	[Address(RVA = "0x144B548", Offset = "0x144B548", VA = "0x144B548", Slot = "17")]
	public override void Connected(BoltConnection connection)
	{
	}

	[Token(Token = "0x60012EF")]
	[Address(RVA = "0x144B9E0", Offset = "0x144B9E0", VA = "0x144B9E0", Slot = "24")]
	public override void Disconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x60012F0")]
	[Address(RVA = "0x144BFFC", Offset = "0x144BFFC", VA = "0x144BFFC", Slot = "179")]
	public override void OnEvent(RequestRevivePlayer evnt)
	{
	}

	[Token(Token = "0x60012F1")]
	[Address(RVA = "0x144ABEC", Offset = "0x144ABEC", VA = "0x144ABEC")]
	private static void CreateServerPlayer()
	{
	}

	[Token(Token = "0x60012F2")]
	[Address(RVA = "0x144B74C", Offset = "0x144B74C", VA = "0x144B74C")]
	private static void CreateRemotePlayer(BoltConnection connection, SessionUserToken userToken)
	{
	}

	[Token(Token = "0x60012F3")]
	[Address(RVA = "0x144B274", Offset = "0x144B274", VA = "0x144B274")]
	private static void DestroyPlayer(BoltConnection connection)
	{
	}

	[Token(Token = "0x60012F4")]
	[Address(RVA = "0x144C10C", Offset = "0x144C10C", VA = "0x144C10C", Slot = "159")]
	public override void OnEvent(RequestAmmoEvent evnt)
	{
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0x144C378", Offset = "0x144C378", VA = "0x144C378", Slot = "177")]
	public override void OnEvent(RequestAmmoPouchMagazineEvent evnt)
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0x144C624", Offset = "0x144C624", VA = "0x144C624", Slot = "168")]
	public override void OnEvent(ChangePlayerState evnt)
	{
	}

	[Token(Token = "0x60012F7")]
	[Address(RVA = "0x144C864", Offset = "0x144C864", VA = "0x144C864", Slot = "175")]
	public override void OnEvent(RequestControlChangeEvent evnt)
	{
	}

	[Token(Token = "0x60012F8")]
	[Address(RVA = "0x144CA44", Offset = "0x144CA44", VA = "0x144CA44", Slot = "173")]
	public override void OnEvent(RequestInteractionEvent evnt)
	{
	}

	[Token(Token = "0x60012F9")]
	[Address(RVA = "0x144CD64", Offset = "0x144CD64", VA = "0x144CD64", Slot = "184")]
	public override void OnEvent(ShopTransactionEvent evnt)
	{
	}

	[Token(Token = "0x60012FA")]
	[Address(RVA = "0x144CF74", Offset = "0x144CF74", VA = "0x144CF74", Slot = "181")]
	public override void OnEvent(ShopAmmoTransactionEvent evnt)
	{
	}

	[Token(Token = "0x60012FB")]
	[Address(RVA = "0x144D178", Offset = "0x144D178", VA = "0x144D178", Slot = "200")]
	public override void OnEvent(RequestInitialCoinsEvent evnt)
	{
	}

	[Token(Token = "0x60012FC")]
	[Address(RVA = "0x144D1CC", Offset = "0x144D1CC", VA = "0x144D1CC", Slot = "187")]
	public override void OnEvent(RequestRemoveMagazineFromAmmoPouchEvent evnt)
	{
	}

	[Token(Token = "0x60012FD")]
	[Address(RVA = "0x144D448", Offset = "0x144D448", VA = "0x144D448", Slot = "188")]
	public override void OnEvent(UpdateMagazineAmmoFromClient evnt)
	{
	}

	[Token(Token = "0x60012FE")]
	[Address(RVA = "0x144D508", Offset = "0x144D508", VA = "0x144D508", Slot = "198")]
	public override void OnEvent(ConfirmConnectionEvent evnt)
	{
	}

	[Token(Token = "0x60012FF")]
	[Address(RVA = "0x144D57C", Offset = "0x144D57C", VA = "0x144D57C", Slot = "199")]
	public override void OnEvent(RequestGameState evnt)
	{
	}

	[Token(Token = "0x6001300")]
	[Address(RVA = "0x144D5E4", Offset = "0x144D5E4", VA = "0x144D5E4", Slot = "194")]
	public override void OnEvent(ReportEnemiesEvent evnt)
	{
	}

	[Token(Token = "0x6001301")]
	[Address(RVA = "0x144DC8C", Offset = "0x144DC8C", VA = "0x144DC8C", Slot = "172")]
	public override void OnEvent(ChangeExplosiveEvent evnt)
	{
	}

	[Token(Token = "0x6001302")]
	[Address(RVA = "0x144C07C", Offset = "0x144C07C", VA = "0x144C07C")]
	private static BoltEntity CreateBoltPlayer([Optional] IProtocolToken token)
	{
		return null;
	}

	[Token(Token = "0x6001303")]
	[Address(RVA = "0x144DDA4", Offset = "0x144DDA4", VA = "0x144DDA4", Slot = "206")]
	public override void OnEvent(CurrencyCollectedEvent evnt)
	{
	}

	[Token(Token = "0x6001304")]
	[Address(RVA = "0x144E03C", Offset = "0x144E03C", VA = "0x144E03C", Slot = "208")]
	public override void OnEvent(RequestHealthStatusChangeEvent evnt)
	{
	}

	[Token(Token = "0x6001305")]
	[Address(RVA = "0x144E12C", Offset = "0x144E12C", VA = "0x144E12C", Slot = "233")]
	public override void OnEvent(RequestSpawnSpawnable evnt)
	{
	}

	[Token(Token = "0x6001306")]
	[Address(RVA = "0x144E1A8", Offset = "0x144E1A8", VA = "0x144E1A8", Slot = "211")]
	public override void OnEvent(RequestDebugMoveTo evnt)
	{
	}

	[Token(Token = "0x6001307")]
	[Address(RVA = "0x144E1CC", Offset = "0x144E1CC", VA = "0x144E1CC", Slot = "212")]
	public override void OnEvent(RequestChangeKeyEvent evnt)
	{
	}

	[Token(Token = "0x6001308")]
	[Address(RVA = "0x144E3AC", Offset = "0x144E3AC", VA = "0x144E3AC", Slot = "213")]
	public override void OnEvent(GameDebugSettingsEvent evnt)
	{
	}

	[Token(Token = "0x6001309")]
	[Address(RVA = "0x144E404", Offset = "0x144E404", VA = "0x144E404", Slot = "38")]
	public override void SessionCreatedOrUpdated(UdpSession session)
	{
	}

	[Token(Token = "0x600130A")]
	[Address(RVA = "0x144E4E4", Offset = "0x144E4E4", VA = "0x144E4E4", Slot = "19")]
	public override void ConnectRequest(UdpEndPoint endpoint, IProtocolToken token)
	{
	}

	[Token(Token = "0x600130B")]
	[Address(RVA = "0x144E7E4", Offset = "0x144E7E4", VA = "0x144E7E4", Slot = "21")]
	public override void ConnectAttempt(UdpEndPoint endpoint, IProtocolToken token)
	{
	}

	[Token(Token = "0x600130C")]
	[Address(RVA = "0x144E530", Offset = "0x144E530", VA = "0x144E530")]
	private void ProcessConnectRequest(UdpEndPoint endpoint, IProtocolToken token)
	{
	}

	[Token(Token = "0x600130D")]
	[Address(RVA = "0x144E830", Offset = "0x144E830", VA = "0x144E830", Slot = "224")]
	public override void OnEvent(RequestUseResearchPoints requestEvent)
	{
	}

	[Token(Token = "0x600130E")]
	[Address(RVA = "0x144E83C", Offset = "0x144E83C", VA = "0x144E83C", Slot = "238")]
	public override void OnEvent(RequestEmbedMeleeWeapon requestEmbed)
	{
	}

	[Token(Token = "0x600130F")]
	[Address(RVA = "0x144EACC", Offset = "0x144EACC", VA = "0x144EACC", Slot = "241")]
	public override void OnEvent(RequestUnembedMeleeWeapon requestEvent)
	{
	}

	[Token(Token = "0x6001310")]
	[Address(RVA = "0x144EBC0", Offset = "0x144EBC0", VA = "0x144EBC0", Slot = "234")]
	public override void OnEvent(ResearchPointConsumerInteraction requestEvent)
	{
	}

	[Token(Token = "0x6001311")]
	[Address(RVA = "0x144EBCC", Offset = "0x144EBCC", VA = "0x144EBCC", Slot = "235")]
	public override void OnEvent(DebugAwardResearchPoints evnt)
	{
	}

	[Token(Token = "0x6001312")]
	[Address(RVA = "0x144EBF0", Offset = "0x144EBF0", VA = "0x144EBF0")]
	public BoltServerCallbacks()
	{
	}
}
[Token(Token = "0x2000344")]
public class BoltServerDebugSettings
{
	[Token(Token = "0x2000345")]
	public class DebugSettings
	{
		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Invincible;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool InfiniteAmmo;

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x1199294", Offset = "0x1199294", VA = "0x1199294")]
		public DebugSettings()
		{
		}
	}

	[Token(Token = "0x4001083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<uint, DebugSettings> m_debugSettings;

	[Token(Token = "0x600131B")]
	[Address(RVA = "0x1198C58", Offset = "0x1198C58", VA = "0x1198C58")]
	static BoltServerDebugSettings()
	{
	}

	[Token(Token = "0x600131C")]
	[Address(RVA = "0x1198D2C", Offset = "0x1198D2C", VA = "0x1198D2C")]
	public static DebugSettings GetDebugSettings(BoltConnection connection)
	{
		return null;
	}

	[Token(Token = "0x600131D")]
	[Address(RVA = "0x1198DB0", Offset = "0x1198DB0", VA = "0x1198DB0")]
	public static DebugSettings GetDebugSettings(uint connectionId)
	{
		return null;
	}

	[Token(Token = "0x600131E")]
	[Address(RVA = "0x1198E50", Offset = "0x1198E50", VA = "0x1198E50")]
	public static bool Invincible()
	{
		return default(bool);
	}

	[Token(Token = "0x600131F")]
	[Address(RVA = "0x1198ED4", Offset = "0x1198ED4", VA = "0x1198ED4")]
	public static bool Invincible(BoltConnection connection)
	{
		return default(bool);
	}

	[Token(Token = "0x6001320")]
	[Address(RVA = "0x1198FC0", Offset = "0x1198FC0", VA = "0x1198FC0")]
	public static bool InfiniteAmmo()
	{
		return default(bool);
	}

	[Token(Token = "0x6001321")]
	[Address(RVA = "0x1199044", Offset = "0x1199044", VA = "0x1199044")]
	public static bool InfiniteAmmo(BoltConnection connection)
	{
		return default(bool);
	}

	[Token(Token = "0x6001322")]
	[Address(RVA = "0x1199130", Offset = "0x1199130", VA = "0x1199130")]
	public static void Update(GameDebugSettingsEvent evnt)
	{
	}

	[Token(Token = "0x6001323")]
	[Address(RVA = "0x119929C", Offset = "0x119929C", VA = "0x119929C")]
	public BoltServerDebugSettings()
	{
	}
}
[Token(Token = "0x2000346")]
[BoltGlobalBehaviour]
public class BoltNetworkManager : MonoBehaviour
{
	[Token(Token = "0x4001086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _isDedicatedServer;

	[Token(Token = "0x4001087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool BoltReady;

	[Token(Token = "0x4001088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool ServerExitOnZeroPlayers;

	[Token(Token = "0x4001089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static List<string> AllBoltRegions;

	[Token(Token = "0x400108A")]
	public const string EmptyUsernameString = "_";

	[Token(Token = "0x400108B")]
	public const int MaxPlayerCount = 2;

	[Token(Token = "0x400108C")]
	public const int MinLivesToJoinSession = 1;

	[Token(Token = "0x400108D")]
	public const int MaxWaveToJoinSession = 6;

	[Token(Token = "0x4001092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static Action<int, string> OnPlayerAdded;

	[Token(Token = "0x4001093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static Action<int, string> OnPlayerRemoved;

	[Token(Token = "0x4001094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Action<int, bool> OnPlayerReady;

	[Token(Token = "0x4001095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static Action<int, MultiplayerGameState> OnPlayerStateChanged;

	[Token(Token = "0x4001096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Action OnUpdatePlayers;

	[Token(Token = "0x4001097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Action OnTargetRegionChanged;

	[Token(Token = "0x4001098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public BoltNetworkPlayers Players;

	[Token(Token = "0x4001099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, BoltEntity> PlayerEntitiesByUsername;

	[Token(Token = "0x40010A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static PhotonRegion m_targetRegion;

	[Token(Token = "0x40010A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static bool s_showErrorDialogueOnConnectionFailure;

	[Token(Token = "0x170002CE")]
	public static bool isDedicatedServer
	{
		[Token(Token = "0x6001325")]
		[Address(RVA = "0x11992A4", Offset = "0x11992A4", VA = "0x11992A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001326")]
		[Address(RVA = "0x11992FC", Offset = "0x11992FC", VA = "0x11992FC")]
		set
		{
		}
	}

	[Token(Token = "0x170002CF")]
	public static BoltConnection MyConnection
	{
		[Token(Token = "0x6001329")]
		[Address(RVA = "0x11993BC", Offset = "0x11993BC", VA = "0x11993BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002D0")]
	public static BoltNetworkManager Instance
	{
		[Token(Token = "0x600132A")]
		[Address(RVA = "0x119940C", Offset = "0x119940C", VA = "0x119940C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600132B")]
		[Address(RVA = "0x1199464", Offset = "0x1199464", VA = "0x1199464")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002D1")]
	public static PhotonSession CurrentSession
	{
		[Token(Token = "0x600132C")]
		[Address(RVA = "0x11994C4", Offset = "0x11994C4", VA = "0x11994C4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600132D")]
		[Address(RVA = "0x119951C", Offset = "0x119951C", VA = "0x119951C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002D2")]
	public static Guid CurrentSessionGuid
	{
		[Token(Token = "0x600132F")]
		[Address(RVA = "0x1199680", Offset = "0x1199680", VA = "0x1199680")]
		[CompilerGenerated]
		get
		{
			return default(Guid);
		}
		[Token(Token = "0x6001330")]
		[Address(RVA = "0x11996D8", Offset = "0x11996D8", VA = "0x11996D8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002D3")]
	public static bool IsServerInstanceEmpty
	{
		[Token(Token = "0x6001331")]
		[Address(RVA = "0x1199740", Offset = "0x1199740", VA = "0x1199740")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002D4")]
	public static UdpIPv6Address localHostAddress
	{
		[Token(Token = "0x6001332")]
		[Address(RVA = "0x11998B8", Offset = "0x11998B8", VA = "0x11998B8")]
		get
		{
			return default(UdpIPv6Address);
		}
	}

	[Token(Token = "0x170002D5")]
	public int RequiredPlayerCount
	{
		[Token(Token = "0x6001333")]
		[Address(RVA = "0x1199910", Offset = "0x1199910", VA = "0x1199910")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002D6")]
	public static int CurrentGameLevelID
	{
		[Token(Token = "0x6001334")]
		[Address(RVA = "0x1199970", Offset = "0x1199970", VA = "0x1199970")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001335")]
		[Address(RVA = "0x11999C8", Offset = "0x11999C8", VA = "0x11999C8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002D7")]
	public static string SessionToJoinHostName
	{
		[Token(Token = "0x6001336")]
		[Address(RVA = "0x1199A24", Offset = "0x1199A24", VA = "0x1199A24")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001337")]
		[Address(RVA = "0x1199A7C", Offset = "0x1199A7C", VA = "0x1199A7C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002D8")]
	public static bool IsHeadlessServer
	{
		[Token(Token = "0x6001338")]
		[Address(RVA = "0x1199ADC", Offset = "0x1199ADC", VA = "0x1199ADC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002D9")]
	public static bool IsDebugServer
	{
		[Token(Token = "0x6001339")]
		[Address(RVA = "0x1199B64", Offset = "0x1199B64", VA = "0x1199B64")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600133A")]
		[Address(RVA = "0x1199BBC", Offset = "0x1199BBC", VA = "0x1199BBC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002DA")]
	public static UdpIPv4Address IPv4
	{
		[Token(Token = "0x600133B")]
		[Address(RVA = "0x1199C18", Offset = "0x1199C18", VA = "0x1199C18")]
		[CompilerGenerated]
		get
		{
			return default(UdpIPv4Address);
		}
		[Token(Token = "0x600133C")]
		[Address(RVA = "0x1199C70", Offset = "0x1199C70", VA = "0x1199C70")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002DB")]
	public static ushort Port
	{
		[Token(Token = "0x600133D")]
		[Address(RVA = "0x1199CCC", Offset = "0x1199CCC", VA = "0x1199CCC")]
		[CompilerGenerated]
		get
		{
			return default(ushort);
		}
		[Token(Token = "0x600133E")]
		[Address(RVA = "0x1199D24", Offset = "0x1199D24", VA = "0x1199D24")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002DC")]
	public int PlayerCount
	{
		[Token(Token = "0x600133F")]
		[Address(RVA = "0x1199800", Offset = "0x1199800", VA = "0x1199800")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002DD")]
	public static bool AttemptReconnectToSession
	{
		[Token(Token = "0x6001340")]
		[Address(RVA = "0x1199D80", Offset = "0x1199D80", VA = "0x1199D80")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001341")]
		[Address(RVA = "0x1199DD8", Offset = "0x1199DD8", VA = "0x1199DD8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002DE")]
	public static bool UserSwitchRegionRequest
	{
		[Token(Token = "0x6001342")]
		[Address(RVA = "0x1199E34", Offset = "0x1199E34", VA = "0x1199E34")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001343")]
		[Address(RVA = "0x1199E8C", Offset = "0x1199E8C", VA = "0x1199E8C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002DF")]
	public static PhotonRegion TargetRegion
	{
		[Token(Token = "0x6001344")]
		[Address(RVA = "0x1199EE8", Offset = "0x1199EE8", VA = "0x1199EE8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001345")]
		[Address(RVA = "0x1199F40", Offset = "0x1199F40", VA = "0x1199F40")]
		set
		{
		}
	}

	[Token(Token = "0x170002E0")]
	public static PhotonRegion CurrentRegion
	{
		[Token(Token = "0x6001346")]
		[Address(RVA = "0x1199FCC", Offset = "0x1199FCC", VA = "0x1199FCC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001347")]
		[Address(RVA = "0x119A024", Offset = "0x119A024", VA = "0x119A024")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001327")]
	[Address(RVA = "0x1199358", Offset = "0x1199358", VA = "0x1199358")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
	private static void OnRuntimeMethodLoad()
	{
	}

	[Token(Token = "0x6001328")]
	[Address(RVA = "0x119935C", Offset = "0x119935C", VA = "0x119935C")]
	[AutoInitializeStatics]
	public static void ResetStatics()
	{
	}

	[Token(Token = "0x600132E")]
	[Address(RVA = "0x119957C", Offset = "0x119957C", VA = "0x119957C")]
	public static void ClearSession()
	{
	}

	[Token(Token = "0x6001348")]
	[Address(RVA = "0x119A084", Offset = "0x119A084", VA = "0x119A084")]
	public static BoltConfig GetConfig()
	{
		return null;
	}

	[Token(Token = "0x6001349")]
	[Address(RVA = "0x119A0B4", Offset = "0x119A0B4", VA = "0x119A0B4")]
	public void Reinitialize()
	{
	}

	[Token(Token = "0x600134A")]
	[Address(RVA = "0x119A4A4", Offset = "0x119A4A4", VA = "0x119A4A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600134B")]
	[Address(RVA = "0x119AC54", Offset = "0x119AC54", VA = "0x119AC54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600134C")]
	[Address(RVA = "0x119B314", Offset = "0x119B314", VA = "0x119B314")]
	public static void SetSessionToJoinHostName(string hostName)
	{
	}

	[Token(Token = "0x600134D")]
	[Address(RVA = "0x119B3A4", Offset = "0x119B3A4", VA = "0x119B3A4")]
	private void OnSessionCreatedOrUpdated(UdpSession session)
	{
	}

	[Token(Token = "0x600134E")]
	[Address(RVA = "0x119B4E8", Offset = "0x119B4E8", VA = "0x119B4E8")]
	private void OnSessionConnected(UdpSession session, IProtocolToken token)
	{
	}

	[Token(Token = "0x600134F")]
	[Address(RVA = "0x119B6EC", Offset = "0x119B6EC", VA = "0x119B6EC")]
	private void OnSessionConnectFailed(UdpSession session, IProtocolToken token, UdpSessionError udpSessionError)
	{
	}

	[Token(Token = "0x6001350")]
	[Address(RVA = "0x119B740", Offset = "0x119B740", VA = "0x119B740")]
	private void OnBoltStartBegin()
	{
	}

	[Token(Token = "0x6001351")]
	[Address(RVA = "0x119B744", Offset = "0x119B744", VA = "0x119B744")]
	private void OnBoltStartDone()
	{
	}

	[Token(Token = "0x6001352")]
	[Address(RVA = "0x119B7A0", Offset = "0x119B7A0", VA = "0x119B7A0")]
	private void OnDisconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x6001353")]
	[Address(RVA = "0x119B918", Offset = "0x119B918", VA = "0x119B918")]
	private void OnGameStart(int mapID)
	{
	}

	[Token(Token = "0x6001354")]
	[Address(RVA = "0x119B9A4", Offset = "0x119B9A4", VA = "0x119B9A4")]
	public static void ConnectToSession(string sessionId, IProtocolToken protocolToken)
	{
	}

	[Token(Token = "0x6001355")]
	[Address(RVA = "0x119B9AC", Offset = "0x119B9AC", VA = "0x119B9AC")]
	public static UdpSession GetUDPSessionFromSessionGuid(string guid)
	{
		return null;
	}

	[Token(Token = "0x6001356")]
	[Address(RVA = "0x119BD10", Offset = "0x119BD10", VA = "0x119BD10")]
	private void OnEntityChanged(BoltEntity entity)
	{
	}

	[Token(Token = "0x6001357")]
	[Address(RVA = "0x119C144", Offset = "0x119C144", VA = "0x119C144")]
	public bool AddPlayer(string username, ulong id = 0uL, uint connectionId = 0u, float height = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x6001358")]
	[Address(RVA = "0x119C59C", Offset = "0x119C59C", VA = "0x119C59C")]
	public void RemovePlayer(uint connectionId)
	{
	}

	[Token(Token = "0x6001359")]
	[Address(RVA = "0x119C86C", Offset = "0x119C86C", VA = "0x119C86C")]
	public void RemoveAllPlayers()
	{
	}

	[Token(Token = "0x600135A")]
	[Address(RVA = "0x119C6E8", Offset = "0x119C6E8", VA = "0x119C6E8")]
	private void RemovePlayerAtIndex(int removeIndex)
	{
	}

	[Token(Token = "0x600135B")]
	[Address(RVA = "0x119C960", Offset = "0x119C960", VA = "0x119C960")]
	public void SetPlayerState(string playerName, MultiplayerGameState state)
	{
	}

	[Token(Token = "0x600135C")]
	[Address(RVA = "0x119CC80", Offset = "0x119CC80", VA = "0x119CC80")]
	public void SetAllPlayersState(MultiplayerGameState state)
	{
	}

	[Token(Token = "0x600135D")]
	[Address(RVA = "0x119CD44", Offset = "0x119CD44", VA = "0x119CD44")]
	public bool AllPlayersInState(MultiplayerGameState desiredState)
	{
		return default(bool);
	}

	[Token(Token = "0x600135E")]
	[Address(RVA = "0x119CE18", Offset = "0x119CE18", VA = "0x119CE18")]
	public int GetPlayerInStateCount(MultiplayerGameState state)
	{
		return default(int);
	}

	[Token(Token = "0x600135F")]
	[Address(RVA = "0x119CEE8", Offset = "0x119CEE8", VA = "0x119CEE8")]
	public void UpdatePlayersRescuable()
	{
	}

	[Token(Token = "0x6001360")]
	[Address(RVA = "0x119C3DC", Offset = "0x119C3DC", VA = "0x119C3DC")]
	public bool TestAddPlayer(string username)
	{
		return default(bool);
	}

	[Token(Token = "0x6001361")]
	[Address(RVA = "0x119C3F4", Offset = "0x119C3F4", VA = "0x119C3F4")]
	private int GetFreeIndex(string username)
	{
		return default(int);
	}

	[Token(Token = "0x6001362")]
	[Address(RVA = "0x119D3A0", Offset = "0x119D3A0", VA = "0x119D3A0")]
	public static void UpdatePlayers(BoltNetworkPlayers players)
	{
	}

	[Token(Token = "0x6001363")]
	[Address(RVA = "0x119DD48", Offset = "0x119DD48", VA = "0x119DD48")]
	public static bool IsPlayerInGreaterState(MultiplayerGameState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6001364")]
	[Address(RVA = "0x119D9AC", Offset = "0x119D9AC", VA = "0x119D9AC")]
	private static void UpdateNetworkIdDictionary()
	{
	}

	[Token(Token = "0x6001365")]
	[Address(RVA = "0x119BDFC", Offset = "0x119BDFC", VA = "0x119BDFC")]
	private static bool TrySetPlayerEntity(BoltEntity entity)
	{
		return default(bool);
	}

	[Token(Token = "0x6001366")]
	[Address(RVA = "0x119DE80", Offset = "0x119DE80", VA = "0x119DE80")]
	internal static string GetPlayerUsername(int index)
	{
		return null;
	}

	[Token(Token = "0x6001367")]
	[Address(RVA = "0x119CB34", Offset = "0x119CB34", VA = "0x119CB34")]
	internal static int GetPlayerIndex(string username)
	{
		return default(int);
	}

	[Token(Token = "0x6001368")]
	[Address(RVA = "0x119DF3C", Offset = "0x119DF3C", VA = "0x119DF3C")]
	internal static int GetPlayerIndex(BoltConnection connection)
	{
		return default(int);
	}

	[Token(Token = "0x6001369")]
	[Address(RVA = "0x119E090", Offset = "0x119E090", VA = "0x119E090")]
	public string GetUniquePlayerName(string username)
	{
		return null;
	}

	[Token(Token = "0x600136A")]
	[Address(RVA = "0x119E17C", Offset = "0x119E17C", VA = "0x119E17C")]
	public static void EnsureCorrectTargetRegion(bool updateRegionAutomatically = true)
	{
	}

	[Token(Token = "0x600136B")]
	[Address(RVA = "0x119E270", Offset = "0x119E270", VA = "0x119E270")]
	public static void UpdateRegion()
	{
	}

	[Token(Token = "0x600136C")]
	[Address(RVA = "0x119E484", Offset = "0x119E484", VA = "0x119E484")]
	public static void SetTargetRegion(PhotonRegion photonRegion)
	{
	}

	[Token(Token = "0x600136D")]
	[Address(RVA = "0x119E4D8", Offset = "0x119E4D8", VA = "0x119E4D8")]
	public static void SetTargetRegion(string regionCode)
	{
	}

	[Token(Token = "0x600136E")]
	[Address(RVA = "0x119C4E4", Offset = "0x119C4E4", VA = "0x119C4E4")]
	private static void Dump()
	{
	}

	[Token(Token = "0x600136F")]
	[Address(RVA = "0x119E660", Offset = "0x119E660", VA = "0x119E660")]
	public BoltNetworkManager()
	{
	}
}
[Token(Token = "0x2000348")]
public class SessionProtocolToken : IProtocolToken
{
	[Token(Token = "0x2000349")]
	public enum SessionState
	{
		[Token(Token = "0x40010AB")]
		None,
		[Token(Token = "0x40010AC")]
		Lobby,
		[Token(Token = "0x40010AD")]
		Game
	}

	[Token(Token = "0x170002E1")]
	public int Version
	{
		[Token(Token = "0x6001374")]
		[Address(RVA = "0x119EAE8", Offset = "0x119EAE8", VA = "0x119EAE8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001375")]
		[Address(RVA = "0x119EAF0", Offset = "0x119EAF0", VA = "0x119EAF0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002E2")]
	public string SessionName
	{
		[Token(Token = "0x6001376")]
		[Address(RVA = "0x119EAF8", Offset = "0x119EAF8", VA = "0x119EAF8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001377")]
		[Address(RVA = "0x119EB00", Offset = "0x119EB00", VA = "0x119EB00")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002E3")]
	public int State
	{
		[Token(Token = "0x6001378")]
		[Address(RVA = "0x119EB08", Offset = "0x119EB08", VA = "0x119EB08")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001379")]
		[Address(RVA = "0x119EB10", Offset = "0x119EB10", VA = "0x119EB10")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002E4")]
	public string HostUsername
	{
		[Token(Token = "0x600137A")]
		[Address(RVA = "0x119EB18", Offset = "0x119EB18", VA = "0x119EB18")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600137B")]
		[Address(RVA = "0x119EB20", Offset = "0x119EB20", VA = "0x119EB20")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002E5")]
	public string MapName
	{
		[Token(Token = "0x600137C")]
		[Address(RVA = "0x119EB28", Offset = "0x119EB28", VA = "0x119EB28")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600137D")]
		[Address(RVA = "0x119EB30", Offset = "0x119EB30", VA = "0x119EB30")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600137E")]
	[Address(RVA = "0x119EB38", Offset = "0x119EB38", VA = "0x119EB38", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x600137F")]
	[Address(RVA = "0x119EBCC", Offset = "0x119EBCC", VA = "0x119EBCC", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x6001380")]
	[Address(RVA = "0x119EC3C", Offset = "0x119EC3C", VA = "0x119EC3C")]
	public SessionProtocolToken()
	{
	}
}
[Token(Token = "0x200034A")]
public class SessionUserToken : IProtocolToken
{
	[Token(Token = "0x170002E6")]
	public ulong Id
	{
		[Token(Token = "0x6001381")]
		[Address(RVA = "0x119EC44", Offset = "0x119EC44", VA = "0x119EC44")]
		[CompilerGenerated]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x6001382")]
		[Address(RVA = "0x119EC4C", Offset = "0x119EC4C", VA = "0x119EC4C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002E7")]
	public string Username
	{
		[Token(Token = "0x6001383")]
		[Address(RVA = "0x119EC54", Offset = "0x119EC54", VA = "0x119EC54")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001384")]
		[Address(RVA = "0x119EC5C", Offset = "0x119EC5C", VA = "0x119EC5C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002E8")]
	public float UserHeight
	{
		[Token(Token = "0x6001385")]
		[Address(RVA = "0x119EC64", Offset = "0x119EC64", VA = "0x119EC64")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001386")]
		[Address(RVA = "0x119EC6C", Offset = "0x119EC6C", VA = "0x119EC6C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002E9")]
	public bool fpsPlayer
	{
		[Token(Token = "0x6001387")]
		[Address(RVA = "0x119EC74", Offset = "0x119EC74", VA = "0x119EC74")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001388")]
		[Address(RVA = "0x119EC7C", Offset = "0x119EC7C", VA = "0x119EC7C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001389")]
	[Address(RVA = "0x119EC88", Offset = "0x119EC88", VA = "0x119EC88")]
	public SessionUserToken()
	{
	}

	[Token(Token = "0x600138A")]
	[Address(RVA = "0x119EC90", Offset = "0x119EC90", VA = "0x119EC90")]
	public SessionUserToken(ulong id, string username, float height, bool _fpsPlayer)
	{
	}

	[Token(Token = "0x600138B")]
	[Address(RVA = "0x119ECF0", Offset = "0x119ECF0", VA = "0x119ECF0", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x600138C")]
	[Address(RVA = "0x119ED64", Offset = "0x119ED64", VA = "0x119ED64", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x600138D")]
	[Address(RVA = "0x119EDC4", Offset = "0x119EDC4", VA = "0x119EDC4")]
	public static SessionUserToken GetSessionUserToken()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x200034B")]
public class BoltNetworkPlayers : IProtocolToken
{
	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string[] PlayerName;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public uint[] PlayerConnectionId;

	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ulong[] PlayerNetworkId;

	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int[] PlayerState;

	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float[] PlayerHeight;

	[Token(Token = "0x170002EA")]
	public int PlayerCount
	{
		[Token(Token = "0x600138E")]
		[Address(RVA = "0x119EF34", Offset = "0x119EF34", VA = "0x119EF34")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0x119A168", Offset = "0x119A168", VA = "0x119A168")]
	public BoltNetworkPlayers()
	{
	}

	[Token(Token = "0x6001390")]
	[Address(RVA = "0x119EFE8", Offset = "0x119EFE8", VA = "0x119EFE8", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x6001391")]
	[Address(RVA = "0x119F170", Offset = "0x119F170", VA = "0x119F170", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x6001392")]
	[Address(RVA = "0x119F2B0", Offset = "0x119F2B0", VA = "0x119F2B0", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200034C")]
public class MagazineAttachToken : IProtocolToken
{
	[Token(Token = "0x170002EB")]
	public int BoltPrefabId
	{
		[Token(Token = "0x6001393")]
		[Address(RVA = "0x119F678", Offset = "0x119F678", VA = "0x119F678")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001394")]
		[Address(RVA = "0x119F680", Offset = "0x119F680", VA = "0x119F680")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002EC")]
	public bool IsAmmoPouchMag
	{
		[Token(Token = "0x6001395")]
		[Address(RVA = "0x119F688", Offset = "0x119F688", VA = "0x119F688")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001396")]
		[Address(RVA = "0x119F690", Offset = "0x119F690", VA = "0x119F690")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001397")]
	[Address(RVA = "0x119F69C", Offset = "0x119F69C", VA = "0x119F69C", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x6001398")]
	[Address(RVA = "0x119F6E4", Offset = "0x119F6E4", VA = "0x119F6E4", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x6001399")]
	[Address(RVA = "0x119F724", Offset = "0x119F724", VA = "0x119F724")]
	public MagazineAttachToken()
	{
	}
}
[Token(Token = "0x200034D")]
public class BulletAttachToken : IProtocolToken
{
	[Token(Token = "0x170002ED")]
	public BoltEntity Owner
	{
		[Token(Token = "0x600139A")]
		[Address(RVA = "0x119F72C", Offset = "0x119F72C", VA = "0x119F72C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600139B")]
		[Address(RVA = "0x119F734", Offset = "0x119F734", VA = "0x119F734")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600139C")]
	[Address(RVA = "0x119F73C", Offset = "0x119F73C", VA = "0x119F73C", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x600139D")]
	[Address(RVA = "0x119F764", Offset = "0x119F764", VA = "0x119F764", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x600139E")]
	[Address(RVA = "0x119F778", Offset = "0x119F778", VA = "0x119F778")]
	public BulletAttachToken()
	{
	}
}
[Token(Token = "0x200034E")]
public class PlayerPositionalInputData
{
	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 RootPosition;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion RootRotation;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 HeadPosition;

	[Token(Token = "0x40010BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Quaternion HeadRotation;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 HandRightPosition;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Quaternion HandRightRotation;

	[Token(Token = "0x40010C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 HandLeftPosition;

	[Token(Token = "0x40010C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Quaternion HandLeftRotation;

	[Token(Token = "0x600139F")]
	[Address(RVA = "0x119F780", Offset = "0x119F780", VA = "0x119F780")]
	public PlayerPositionalInputData(Transform rootTransform, Transform headTransform, Transform handRightTransform, Transform handLeftTransform)
	{
	}
}
[Token(Token = "0x200034F")]
public class PlayerHandInputData
{
	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public HandInputToken LeftHandInput;

	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandInputToken RightHandInput;

	[Token(Token = "0x40010C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 HandRightBlendValues;

	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 HandLeftBlendValues;

	[Token(Token = "0x60013A0")]
	[Address(RVA = "0x119F86C", Offset = "0x119F86C", VA = "0x119F86C")]
	public PlayerHandInputData(HandInputToken rightHandInput, HandInputToken leftHandInput, Vector3 right, Vector3 left)
	{
	}
}
[Token(Token = "0x2000350")]
public class PlayerBodyProportionsInputData
{
	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int PlayerHeight;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int ArmLength;

	[Token(Token = "0x60013A1")]
	[Address(RVA = "0x119F8F0", Offset = "0x119F8F0", VA = "0x119F8F0")]
	public PlayerBodyProportionsInputData(int playerHeight, int armLength)
	{
	}
}
[Token(Token = "0x2000351")]
public class BoneVectorDataToken : IProtocolToken
{
	[Token(Token = "0x40010C8")]
	public const int ArrayLength = 20;

	[Token(Token = "0x170002EE")]
	public int Frame
	{
		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x119F91C", Offset = "0x119F91C", VA = "0x119F91C")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x119F924", Offset = "0x119F924", VA = "0x119F924")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002EF")]
	public Vector3[] Positions
	{
		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x119F92C", Offset = "0x119F92C", VA = "0x119F92C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x119F934", Offset = "0x119F934", VA = "0x119F934")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60013A6")]
	[Address(RVA = "0x119F93C", Offset = "0x119F93C", VA = "0x119F93C", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013A7")]
	[Address(RVA = "0x119F9C0", Offset = "0x119F9C0", VA = "0x119F9C0", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013A8")]
	[Address(RVA = "0x119FA44", Offset = "0x119FA44", VA = "0x119FA44")]
	public BoneVectorDataToken()
	{
	}
}
[Token(Token = "0x2000352")]
public class BoneQuaternionDataToken : IProtocolToken
{
	[Token(Token = "0x40010CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int ArrayLength;

	[Token(Token = "0x170002F0")]
	public int Frame
	{
		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x119FAA8", Offset = "0x119FAA8", VA = "0x119FAA8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x119FAB0", Offset = "0x119FAB0", VA = "0x119FAB0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002F1")]
	public Quaternion[] Rotations
	{
		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x119FAB8", Offset = "0x119FAB8", VA = "0x119FAB8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x119FAC0", Offset = "0x119FAC0", VA = "0x119FAC0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60013AD")]
	[Address(RVA = "0x119FAC8", Offset = "0x119FAC8", VA = "0x119FAC8", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013AE")]
	[Address(RVA = "0x119FB9C", Offset = "0x119FB9C", VA = "0x119FB9C", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013AF")]
	[Address(RVA = "0x119FC68", Offset = "0x119FC68", VA = "0x119FC68")]
	public BoneQuaternionDataToken()
	{
	}
}
[Token(Token = "0x2000353")]
public class PlayerAttachToken : IProtocolToken
{
	[Token(Token = "0x170002F2")]
	public ulong OculusID
	{
		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x119FD44", Offset = "0x119FD44", VA = "0x119FD44")]
		[CompilerGenerated]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x119FD4C", Offset = "0x119FD4C", VA = "0x119FD4C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002F3")]
	public string Name
	{
		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x119FD54", Offset = "0x119FD54", VA = "0x119FD54")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x119FD5C", Offset = "0x119FD5C", VA = "0x119FD5C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002F4")]
	public float UserHeight
	{
		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x119FD64", Offset = "0x119FD64", VA = "0x119FD64")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x119FD6C", Offset = "0x119FD6C", VA = "0x119FD6C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002F5")]
	public bool fpsPlayer
	{
		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x119FD74", Offset = "0x119FD74", VA = "0x119FD74")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x119FD7C", Offset = "0x119FD7C", VA = "0x119FD7C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002F6")]
	public uint Connection
	{
		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x119FD88", Offset = "0x119FD88", VA = "0x119FD88")]
		[CompilerGenerated]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x119FD90", Offset = "0x119FD90", VA = "0x119FD90")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60013BB")]
	[Address(RVA = "0x119FD98", Offset = "0x119FD98", VA = "0x119FD98", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013BC")]
	[Address(RVA = "0x119FE1C", Offset = "0x119FE1C", VA = "0x119FE1C", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013BD")]
	[Address(RVA = "0x119FE8C", Offset = "0x119FE8C", VA = "0x119FE8C")]
	public PlayerAttachToken()
	{
	}
}
[Token(Token = "0x2000354")]
public class InventoryAttachToken : IProtocolToken
{
	[Token(Token = "0x170002F7")]
	public BoltEntity TargetPlayer
	{
		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x119FE94", Offset = "0x119FE94", VA = "0x119FE94")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x119FE9C", Offset = "0x119FE9C", VA = "0x119FE9C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60013C0")]
	[Address(RVA = "0x119FEA4", Offset = "0x119FEA4", VA = "0x119FEA4", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013C1")]
	[Address(RVA = "0x119FECC", Offset = "0x119FECC", VA = "0x119FECC", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013C2")]
	[Address(RVA = "0x119FEE0", Offset = "0x119FEE0", VA = "0x119FEE0")]
	public InventoryAttachToken()
	{
	}
}
[Token(Token = "0x2000355")]
public class VrTracerToken : IProtocolToken
{
	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BoltEntity TransformToTrack;

	[Token(Token = "0x40010D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Position;

	[Token(Token = "0x40010D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 HitPosition;

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0x119FEE8", Offset = "0x119FEE8", VA = "0x119FEE8", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0x119FF48", Offset = "0x119FF48", VA = "0x119FF48", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0x119FF9C", Offset = "0x119FF9C", VA = "0x119FF9C")]
	public VrTracerToken()
	{
	}
}
[Token(Token = "0x2000356")]
public enum AgentMovementStateDataType
{
	[Token(Token = "0x40010D8")]
	Jump,
	[Token(Token = "0x40010D9")]
	Charge,
	[Token(Token = "0x40010DA")]
	Stun,
	[Token(Token = "0x40010DB")]
	Death,
	[Token(Token = "0x40010DC")]
	Anim,
	[Token(Token = "0x40010DD")]
	Movement,
	[Token(Token = "0x40010DE")]
	TraverseLink
}
[Token(Token = "0x2000357")]
public class TraverseLinkStateData : IProtocolToken
{
	[Token(Token = "0x40010DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int m_index;

	[Token(Token = "0x40010E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 m_startPos;

	[Token(Token = "0x40010E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 m_endPos;

	[Token(Token = "0x170002F8")]
	public int Index
	{
		[Token(Token = "0x60013C6")]
		[Address(RVA = "0x119FFA4", Offset = "0x119FFA4", VA = "0x119FFA4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002F9")]
	public Vector3 StartPos
	{
		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x119FFAC", Offset = "0x119FFAC", VA = "0x119FFAC")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170002FA")]
	public Vector3 EndPos
	{
		[Token(Token = "0x60013C8")]
		[Address(RVA = "0x119FFB8", Offset = "0x119FFB8", VA = "0x119FFB8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60013C9")]
	[Address(RVA = "0x119FFC4", Offset = "0x119FFC4", VA = "0x119FFC4", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013CA")]
	[Address(RVA = "0x11A0020", Offset = "0x11A0020", VA = "0x11A0020", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013CB")]
	[Address(RVA = "0x11A0078", Offset = "0x11A0078", VA = "0x11A0078")]
	public TraverseLinkStateData(int index, Vector3 startPos, Vector3 endPos)
	{
	}

	[Token(Token = "0x60013CC")]
	[Address(RVA = "0x11A00DC", Offset = "0x11A00DC", VA = "0x11A00DC")]
	public TraverseLinkStateData()
	{
	}
}
[Token(Token = "0x2000358")]
public class AgentMovementStateData : IProtocolToken
{
	[Token(Token = "0x170002FB")]
	public virtual object GetData
	{
		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x11A00E4", Offset = "0x11A00E4", VA = "0x11A00E4", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013CE")]
	[Address(RVA = "0x11A00EC", Offset = "0x11A00EC", VA = "0x11A00EC", Slot = "7")]
	public virtual void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013CF")]
	[Address(RVA = "0x11A00F0", Offset = "0x11A00F0", VA = "0x11A00F0", Slot = "8")]
	public virtual void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013D0")]
	[Address(RVA = "0x11A00F4", Offset = "0x11A00F4", VA = "0x11A00F4")]
	public AgentMovementStateData()
	{
	}
}
[Token(Token = "0x2000359")]
public class AgentMovementStateJumpData : AgentMovementStateData
{
	[Token(Token = "0x40010E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private JumpAnimState.Trajectory m_trajectoryData;

	[Token(Token = "0x170002FC")]
	public override object GetData
	{
		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x11A00FC", Offset = "0x11A00FC", VA = "0x11A00FC", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013D2")]
	[Address(RVA = "0x11A0168", Offset = "0x11A0168", VA = "0x11A0168")]
	public AgentMovementStateJumpData()
	{
	}

	[Token(Token = "0x60013D3")]
	[Address(RVA = "0x11A0170", Offset = "0x11A0170", VA = "0x11A0170")]
	public AgentMovementStateJumpData(JumpAnimState.Trajectory trajectoryData)
	{
	}

	[Token(Token = "0x60013D4")]
	[Address(RVA = "0x11A01A4", Offset = "0x11A01A4", VA = "0x11A01A4", Slot = "7")]
	public override void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013D5")]
	[Address(RVA = "0x11A02AC", Offset = "0x11A02AC", VA = "0x11A02AC", Slot = "8")]
	public override void Write(UdpPacket packet)
	{
	}
}
[Token(Token = "0x200035A")]
public class AgentMovementStateStunData : AgentMovementStateData
{
	[Token(Token = "0x40010E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float m_duration;

	[Token(Token = "0x170002FD")]
	public override object GetData
	{
		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x11A034C", Offset = "0x11A034C", VA = "0x11A034C", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013D7")]
	[Address(RVA = "0x11A03A8", Offset = "0x11A03A8", VA = "0x11A03A8")]
	public AgentMovementStateStunData()
	{
	}

	[Token(Token = "0x60013D8")]
	[Address(RVA = "0x11A03B0", Offset = "0x11A03B0", VA = "0x11A03B0")]
	public AgentMovementStateStunData(float duration)
	{
	}

	[Token(Token = "0x60013D9")]
	[Address(RVA = "0x11A03D8", Offset = "0x11A03D8", VA = "0x11A03D8", Slot = "7")]
	public override void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013DA")]
	[Address(RVA = "0x11A0400", Offset = "0x11A0400", VA = "0x11A0400", Slot = "8")]
	public override void Write(UdpPacket packet)
	{
	}
}
[Token(Token = "0x200035B")]
public class AgentMovementStateAnimationData : AgentMovementStateData
{
	[Token(Token = "0x40010E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string[] m_clipTags;

	[Token(Token = "0x170002FE")]
	public override object GetData
	{
		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x11A0420", Offset = "0x11A0420", VA = "0x11A0420", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013DC")]
	[Address(RVA = "0x11A0428", Offset = "0x11A0428", VA = "0x11A0428")]
	public AgentMovementStateAnimationData()
	{
	}

	[Token(Token = "0x60013DD")]
	[Address(RVA = "0x11A0430", Offset = "0x11A0430", VA = "0x11A0430")]
	public AgentMovementStateAnimationData(string[] clipTags)
	{
	}

	[Token(Token = "0x60013DE")]
	[Address(RVA = "0x11A0460", Offset = "0x11A0460", VA = "0x11A0460", Slot = "7")]
	public override void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013DF")]
	[Address(RVA = "0x11A0514", Offset = "0x11A0514", VA = "0x11A0514", Slot = "8")]
	public override void Write(UdpPacket packet)
	{
	}
}
[Token(Token = "0x200035C")]
public class AgentMovementStateDeathData : AgentMovementStateData
{
	[Token(Token = "0x40010E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 m_effectPosition;

	[Token(Token = "0x40010E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_effectNormal;

	[Token(Token = "0x40010E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_normalizedForce;

	[Token(Token = "0x170002FF")]
	public Vector3 EffectPosition
	{
		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x11A057C", Offset = "0x11A057C", VA = "0x11A057C")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60013E1")]
		[Address(RVA = "0x11A0588", Offset = "0x11A0588", VA = "0x11A0588")]
		set
		{
		}
	}

	[Token(Token = "0x17000300")]
	public Vector3 EffectNormal
	{
		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x11A0594", Offset = "0x11A0594", VA = "0x11A0594")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x11A05A0", Offset = "0x11A05A0", VA = "0x11A05A0")]
		set
		{
		}
	}

	[Token(Token = "0x17000301")]
	public float NormalizedForce
	{
		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x11A05AC", Offset = "0x11A05AC", VA = "0x11A05AC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x11A05B4", Offset = "0x11A05B4", VA = "0x11A05B4")]
		set
		{
		}
	}

	[Token(Token = "0x60013E6")]
	[Address(RVA = "0x11A05BC", Offset = "0x11A05BC", VA = "0x11A05BC")]
	public AgentMovementStateDeathData()
	{
	}

	[Token(Token = "0x60013E7")]
	[Address(RVA = "0x11A05C4", Offset = "0x11A05C4", VA = "0x11A05C4")]
	public AgentMovementStateDeathData(Vector3 position, Vector3 normal, float force)
	{
	}

	[Token(Token = "0x60013E8")]
	[Address(RVA = "0x11A0628", Offset = "0x11A0628", VA = "0x11A0628", Slot = "7")]
	public override void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x60013E9")]
	[Address(RVA = "0x11A0684", Offset = "0x11A0684", VA = "0x11A0684", Slot = "8")]
	public override void Write(UdpPacket packet)
	{
	}
}
[Serializable]
[Token(Token = "0x200035D")]
public class HandInputToken : IProtocolToken
{
	[Serializable]
	[Token(Token = "0x200035E")]
	public class TriggerInput
	{
		[Token(Token = "0x1700030A")]
		public float Value
		{
			[Token(Token = "0x6001404")]
			[Address(RVA = "0x11A1144", Offset = "0x11A1144", VA = "0x11A1144")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001405")]
			[Address(RVA = "0x11A114C", Offset = "0x11A114C", VA = "0x11A114C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		public bool Down
		{
			[Token(Token = "0x6001406")]
			[Address(RVA = "0x11A1154", Offset = "0x11A1154", VA = "0x11A1154")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001407")]
			[Address(RVA = "0x11A115C", Offset = "0x11A115C", VA = "0x11A115C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		public bool Up
		{
			[Token(Token = "0x6001408")]
			[Address(RVA = "0x11A1168", Offset = "0x11A1168", VA = "0x11A1168")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001409")]
			[Address(RVA = "0x11A1170", Offset = "0x11A1170", VA = "0x11A1170")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		public bool Held
		{
			[Token(Token = "0x600140A")]
			[Address(RVA = "0x11A117C", Offset = "0x11A117C", VA = "0x11A117C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600140B")]
			[Address(RVA = "0x11A1184", Offset = "0x11A1184", VA = "0x11A1184")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x11A0C90", Offset = "0x11A0C90", VA = "0x11A0C90")]
		public TriggerInput()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200035F")]
	public class ButtonInput
	{
		[Token(Token = "0x1700030E")]
		public bool Value
		{
			[Token(Token = "0x600140D")]
			[Address(RVA = "0x11A1190", Offset = "0x11A1190", VA = "0x11A1190")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600140E")]
			[Address(RVA = "0x11A1198", Offset = "0x11A1198", VA = "0x11A1198")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		public bool Down
		{
			[Token(Token = "0x600140F")]
			[Address(RVA = "0x11A11A4", Offset = "0x11A11A4", VA = "0x11A11A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001410")]
			[Address(RVA = "0x11A11AC", Offset = "0x11A11AC", VA = "0x11A11AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000310")]
		public bool Up
		{
			[Token(Token = "0x6001411")]
			[Address(RVA = "0x11A11B8", Offset = "0x11A11B8", VA = "0x11A11B8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001412")]
			[Address(RVA = "0x11A11C0", Offset = "0x11A11C0", VA = "0x11A11C0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x11A0C98", Offset = "0x11A0C98", VA = "0x11A0C98")]
		public ButtonInput()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000360")]
	public class AxisInput
	{
		[Token(Token = "0x17000311")]
		public Vector2? Value
		{
			[Token(Token = "0x6001414")]
			[Address(RVA = "0x11A11CC", Offset = "0x11A11CC", VA = "0x11A11CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001415")]
			[Address(RVA = "0x11A11DC", Offset = "0x11A11DC", VA = "0x11A11DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x11A0CA0", Offset = "0x11A0CA0", VA = "0x11A0CA0")]
		public AxisInput()
		{
		}
	}

	[Token(Token = "0x17000302")]
	public TriggerInput GripTrigger
	{
		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x11A06DC", Offset = "0x11A06DC", VA = "0x11A06DC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x11A06E4", Offset = "0x11A06E4", VA = "0x11A06E4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000303")]
	public TriggerInput MainTrigger
	{
		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x11A06EC", Offset = "0x11A06EC", VA = "0x11A06EC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x11A06F4", Offset = "0x11A06F4", VA = "0x11A06F4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000304")]
	public ButtonInput PrimaryButton
	{
		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x11A06FC", Offset = "0x11A06FC", VA = "0x11A06FC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x11A0704", Offset = "0x11A0704", VA = "0x11A0704")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000305")]
	public ButtonInput SecondaryButton
	{
		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x11A070C", Offset = "0x11A070C", VA = "0x11A070C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x11A0714", Offset = "0x11A0714", VA = "0x11A0714")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000306")]
	public ButtonInput MenuButton
	{
		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x11A071C", Offset = "0x11A071C", VA = "0x11A071C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x11A0724", Offset = "0x11A0724", VA = "0x11A0724")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000307")]
	public ButtonInput StickButton
	{
		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x11A072C", Offset = "0x11A072C", VA = "0x11A072C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x11A0734", Offset = "0x11A0734", VA = "0x11A0734")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000308")]
	public float ThumbTouchValue
	{
		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x11A073C", Offset = "0x11A073C", VA = "0x11A073C")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x11A0744", Offset = "0x11A0744", VA = "0x11A0744")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000309")]
	public AxisInput StickAxis
	{
		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x11A074C", Offset = "0x11A074C", VA = "0x11A074C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x11A0754", Offset = "0x11A0754", VA = "0x11A0754")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60013FA")]
	[Address(RVA = "0x11A075C", Offset = "0x11A075C", VA = "0x11A075C")]
	public void PopulateGripTrigger(float value, bool down, bool up, bool held)
	{
	}

	[Token(Token = "0x60013FB")]
	[Address(RVA = "0x11A0790", Offset = "0x11A0790", VA = "0x11A0790")]
	public void PopulateMainTrigger(float value, bool down, bool up, bool held)
	{
	}

	[Token(Token = "0x60013FC")]
	[Address(RVA = "0x11A07C4", Offset = "0x11A07C4", VA = "0x11A07C4")]
	public void PopulatePrimaryButton(bool value, bool down, bool up)
	{
	}

	[Token(Token = "0x60013FD")]
	[Address(RVA = "0x11A07F4", Offset = "0x11A07F4", VA = "0x11A07F4")]
	public void PopulateSecondaryButton(bool value, bool down, bool up)
	{
	}

	[Token(Token = "0x60013FE")]
	[Address(RVA = "0x11A0824", Offset = "0x11A0824", VA = "0x11A0824")]
	public void PopulateMenuButton(bool value, bool down, bool up)
	{
	}

	[Token(Token = "0x60013FF")]
	[Address(RVA = "0x11A0854", Offset = "0x11A0854", VA = "0x11A0854")]
	public void PopulateStickButton(bool value, bool down, bool up)
	{
	}

	[Token(Token = "0x6001400")]
	[Address(RVA = "0x11A0884", Offset = "0x11A0884", VA = "0x11A0884")]
	public void PopulateStickAxis(Vector2? axis)
	{
	}

	[Token(Token = "0x6001401")]
	[Address(RVA = "0x11A08A4", Offset = "0x11A08A4", VA = "0x11A08A4", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x6001402")]
	[Address(RVA = "0x11A0CA8", Offset = "0x11A0CA8", VA = "0x11A0CA8", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x6001403")]
	[Address(RVA = "0x11A0FB8", Offset = "0x11A0FB8", VA = "0x11A0FB8")]
	public HandInputToken()
	{
	}
}
[Token(Token = "0x2000361")]
public class ObjectivePickUpToken : IProtocolToken
{
	[Token(Token = "0x17000312")]
	public BoltEntity ItemToPickUp
	{
		[Token(Token = "0x6001417")]
		[Address(RVA = "0x11A11E8", Offset = "0x11A11E8", VA = "0x11A11E8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001418")]
		[Address(RVA = "0x11A11F0", Offset = "0x11A11F0", VA = "0x11A11F0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000313")]
	public Guid SceneId
	{
		[Token(Token = "0x6001419")]
		[Address(RVA = "0x11A11F8", Offset = "0x11A11F8", VA = "0x11A11F8")]
		[CompilerGenerated]
		get
		{
			return default(Guid);
		}
		[Token(Token = "0x600141A")]
		[Address(RVA = "0x11A1204", Offset = "0x11A1204", VA = "0x11A1204")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0x11A120C", Offset = "0x11A120C", VA = "0x11A120C", Slot = "4")]
	public void Read(UdpPacket packet)
	{
	}

	[Token(Token = "0x600141C")]
	[Address(RVA = "0x11A1258", Offset = "0x11A1258", VA = "0x11A1258", Slot = "5")]
	public void Write(UdpPacket packet)
	{
	}

	[Token(Token = "0x600141D")]
	[Address(RVA = "0x11A12F4", Offset = "0x11A12F4", VA = "0x11A12F4")]
	public ObjectivePickUpToken()
	{
	}
}
[Token(Token = "0x2000362")]
[BoltGlobalBehaviour]
public class BoltSharedCallbacks : GlobalEventListener
{
	[Token(Token = "0x600141E")]
	[Address(RVA = "0x11A12FC", Offset = "0x11A12FC", VA = "0x11A12FC", Slot = "11")]
	public override void BoltStartBegin()
	{
	}

	[Token(Token = "0x600141F")]
	[Address(RVA = "0x11A15C0", Offset = "0x11A15C0", VA = "0x11A15C0")]
	public void Update()
	{
	}

	[Token(Token = "0x6001420")]
	[Address(RVA = "0x11A15C4", Offset = "0x11A15C4", VA = "0x11A15C4", Slot = "17")]
	public override void Connected(BoltConnection connection)
	{
	}

	[Token(Token = "0x6001421")]
	[Address(RVA = "0x11A15C8", Offset = "0x11A15C8", VA = "0x11A15C8", Slot = "24")]
	public override void Disconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x6001422")]
	[Address(RVA = "0x11A15CC", Offset = "0x11A15CC", VA = "0x11A15CC", Slot = "170")]
	public override void OnEvent(RequestTriggerStateChangeEvent evnt)
	{
	}

	[Token(Token = "0x6001423")]
	[Address(RVA = "0x11A16A8", Offset = "0x11A16A8", VA = "0x11A16A8", Slot = "222")]
	public override void OnEvent(SendDissolve evnt)
	{
	}

	[Token(Token = "0x6001424")]
	[Address(RVA = "0x11A1804", Offset = "0x11A1804", VA = "0x11A1804", Slot = "183")]
	public override void OnEvent(SendItemInventoryStateEvent evnt)
	{
	}

	[Token(Token = "0x6001425")]
	[Address(RVA = "0x11A1B74", Offset = "0x11A1B74", VA = "0x11A1B74", Slot = "185")]
	public override void OnEvent(GenericGameplayEvent evnt)
	{
	}

	[Token(Token = "0x6001426")]
	[Address(RVA = "0x11A1C44", Offset = "0x11A1C44", VA = "0x11A1C44", Slot = "243")]
	public override void OnEvent(RestartGame evnt)
	{
	}

	[Token(Token = "0x6001427")]
	[Address(RVA = "0x11A1CF0", Offset = "0x11A1CF0", VA = "0x11A1CF0", Slot = "218")]
	public override void OnEvent(ApplyPlayerPushBack evnt)
	{
	}

	[Token(Token = "0x6001428")]
	[Address(RVA = "0x11A1F60", Offset = "0x11A1F60", VA = "0x11A1F60")]
	public BoltSharedCallbacks()
	{
	}
}
[Token(Token = "0x2000363")]
public class ClearPoolOnServerState : BaseStateAttachedLogic
{
	[Token(Token = "0x6001429")]
	[Address(RVA = "0x11A1F68", Offset = "0x11A1F68", VA = "0x11A1F68", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600142A")]
	[Address(RVA = "0x11A20EC", Offset = "0x11A20EC", VA = "0x11A20EC")]
	public ClearPoolOnServerState()
	{
	}
}
[Token(Token = "0x2000364")]
public class DedicatedServer : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LevelLoadManager m_levelLoadManager;

	[Token(Token = "0x600142B")]
	[Address(RVA = "0x11A20F4", Offset = "0x11A20F4", VA = "0x11A20F4", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600142C")]
	[Address(RVA = "0x11A279C", Offset = "0x11A279C", VA = "0x11A279C")]
	private void DebugBootIntoMap(int gameLevelID)
	{
	}

	[Token(Token = "0x600142D")]
	[Address(RVA = "0x11A2700", Offset = "0x11A2700", VA = "0x11A2700")]
	private void ResetMapSelection()
	{
	}

	[Token(Token = "0x600142E")]
	[Address(RVA = "0x11A288C", Offset = "0x11A288C", VA = "0x11A288C")]
	private void OnToggleLobbyVisibility()
	{
	}

	[Token(Token = "0x600142F")]
	[Address(RVA = "0x11A2918", Offset = "0x11A2918", VA = "0x11A2918")]
	private void OnPlayerDisconnected(BoltConnection obj)
	{
	}

	[Token(Token = "0x6001430")]
	[Address(RVA = "0x11A2A54", Offset = "0x11A2A54", VA = "0x11A2A54", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001431")]
	[Address(RVA = "0x11A2DC0", Offset = "0x11A2DC0", VA = "0x11A2DC0")]
	private void OnMapSelectionChanged(RequestChangeLevelEvent evnt)
	{
	}

	[Token(Token = "0x6001432")]
	[Address(RVA = "0x11A2DEC", Offset = "0x11A2DEC", VA = "0x11A2DEC")]
	private void RequestStartGame(RequestStartGameEvent obj)
	{
	}

	[Token(Token = "0x6001433")]
	[Address(RVA = "0x11A27B8", Offset = "0x11A27B8", VA = "0x11A27B8")]
	private void PrepareAndExitToGame()
	{
	}

	[Token(Token = "0x6001434")]
	[Address(RVA = "0x11A2F9C", Offset = "0x11A2F9C", VA = "0x11A2F9C")]
	private void ExitToGame(int mapID)
	{
	}

	[Token(Token = "0x6001435")]
	[Address(RVA = "0x11A2FE8", Offset = "0x11A2FE8", VA = "0x11A2FE8")]
	public DedicatedServer()
	{
	}
}
[Token(Token = "0x2000365")]
public class EnemiesDespawn : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x6001436")]
	[Address(RVA = "0x11A2FF0", Offset = "0x11A2FF0", VA = "0x11A2FF0", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001437")]
	[Address(RVA = "0x11A30D4", Offset = "0x11A30D4", VA = "0x11A30D4")]
	public EnemiesDespawn()
	{
	}
}
[Token(Token = "0x2000366")]
public class IsDedicatedServer : BaseStateAttachedLogic
{
	[Token(Token = "0x40010FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool ShouldDebugBootIntoMap;

	[Token(Token = "0x40010FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int DebugBootMapID;

	[Token(Token = "0x6001438")]
	[Address(RVA = "0x11A30DC", Offset = "0x11A30DC", VA = "0x11A30DC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001439")]
	[Address(RVA = "0x11A3AF8", Offset = "0x11A3AF8", VA = "0x11A3AF8")]
	private void PerformanceOptimisation()
	{
	}

	[Token(Token = "0x600143A")]
	[Address(RVA = "0x11A3B68", Offset = "0x11A3B68", VA = "0x11A3B68")]
	private static string GetArg(params string[] names)
	{
		return null;
	}

	[Token(Token = "0x600143B")]
	[Address(RVA = "0x11A3C50", Offset = "0x11A3C50", VA = "0x11A3C50")]
	public IsDedicatedServer()
	{
	}
}
[Token(Token = "0x2000367")]
public class IsMultiplayerClient : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x600143D")]
	[Address(RVA = "0x11A3CA8", Offset = "0x11A3CA8", VA = "0x11A3CA8", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600143E")]
	[Address(RVA = "0x11A3D58", Offset = "0x11A3D58", VA = "0x11A3D58")]
	public IsMultiplayerClient()
	{
	}
}
[Token(Token = "0x2000368")]
public class IsMultiplayerRunning : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x600143F")]
	[Address(RVA = "0x11A3D60", Offset = "0x11A3D60", VA = "0x11A3D60", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001440")]
	[Address(RVA = "0x11A3DF4", Offset = "0x11A3DF4", VA = "0x11A3DF4")]
	public IsMultiplayerRunning()
	{
	}
}
[Token(Token = "0x2000369")]
public class IsMultiplayerServer : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x6001441")]
	[Address(RVA = "0x11A3DFC", Offset = "0x11A3DFC", VA = "0x11A3DFC", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001442")]
	[Address(RVA = "0x11A3EAC", Offset = "0x11A3EAC", VA = "0x11A3EAC")]
	public IsMultiplayerServer()
	{
	}
}
[Token(Token = "0x200036A")]
public class IsMultiplayerSingleplayer : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x6001443")]
	[Address(RVA = "0x11A3EB4", Offset = "0x11A3EB4", VA = "0x11A3EB4", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001444")]
	[Address(RVA = "0x11A3FA4", Offset = "0x11A3FA4", VA = "0x11A3FA4")]
	public IsMultiplayerSingleplayer()
	{
	}
}
[Token(Token = "0x200036B")]
public class MultiplayerDisconnectCurrentFromServer : BaseStateAttachedLogic
{
	[Token(Token = "0x6001445")]
	[Address(RVA = "0x11A3FAC", Offset = "0x11A3FAC", VA = "0x11A3FAC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0x11A4108", Offset = "0x11A4108", VA = "0x11A4108")]
	public MultiplayerDisconnectCurrentFromServer()
	{
	}
}
[Token(Token = "0x200036C")]
public class MultiplayerFindGame : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x200036D")]
	[CompilerGenerated]
	private sealed class <JoinFirstFoundSession>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MultiplayerFindGame <>4__this;

		[Token(Token = "0x17000314")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600144E")]
			[Address(RVA = "0x11A44B8", Offset = "0x11A44B8", VA = "0x11A44B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001450")]
			[Address(RVA = "0x11A4500", Offset = "0x11A4500", VA = "0x11A4500", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x11A4254", Offset = "0x11A4254", VA = "0x11A4254")]
		[DebuggerHidden]
		public <JoinFirstFoundSession>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x11A428C", Offset = "0x11A428C", VA = "0x11A428C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x11A4290", Offset = "0x11A4290", VA = "0x11A4290", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x11A44C0", Offset = "0x11A44C0", VA = "0x11A44C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40010FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_timeout;

	[Token(Token = "0x40010FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_time;

	[Token(Token = "0x40010FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Coroutine m_routine;

	[Token(Token = "0x6001447")]
	[Address(RVA = "0x11A4110", Offset = "0x11A4110", VA = "0x11A4110", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0x11A41C0", Offset = "0x11A41C0", VA = "0x11A41C0", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0x11A414C", Offset = "0x11A414C", VA = "0x11A414C")]
	[IteratorStateMachine(typeof(<JoinFirstFoundSession>d__5))]
	private IEnumerator JoinFirstFoundSession()
	{
		return null;
	}

	[Token(Token = "0x600144A")]
	[Address(RVA = "0x11A427C", Offset = "0x11A427C", VA = "0x11A427C")]
	public MultiplayerFindGame()
	{
	}
}
[Token(Token = "0x200036E")]
public class MultiplayerHubScene : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x6001451")]
	[Address(RVA = "0x11A4508", Offset = "0x11A4508", VA = "0x11A4508", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001452")]
	[Address(RVA = "0x11A4624", Offset = "0x11A4624", VA = "0x11A4624", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001453")]
	[Address(RVA = "0x11A4740", Offset = "0x11A4740", VA = "0x11A4740")]
	private void ExitToGame(int mapID)
	{
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0x11A47C4", Offset = "0x11A47C4", VA = "0x11A47C4")]
	public MultiplayerHubScene()
	{
	}
}
[Token(Token = "0x200036F")]
public class MultiplayerJoinBestSession : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_boltJoinSessionSuccess;

	[Token(Token = "0x4001104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool m_boltJoinSessionFailed;

	[Token(Token = "0x6001455")]
	[Address(RVA = "0x11A47CC", Offset = "0x11A47CC", VA = "0x11A47CC", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0x11A4FBC", Offset = "0x11A4FBC", VA = "0x11A4FBC")]
	private void OnSessionConnectedSuccess(UdpSession arg1, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x6001457")]
	[Address(RVA = "0x11A4FC8", Offset = "0x11A4FC8", VA = "0x11A4FC8")]
	private void OnSessionConnectedFailed(UdpSession arg1, IProtocolToken arg2, UdpSessionError sessionError)
	{
	}

	[Token(Token = "0x6001458")]
	[Address(RVA = "0x11A4FD4", Offset = "0x11A4FD4", VA = "0x11A4FD4")]
	private void OnServerConnectionRefused(UdpEndPoint arg1, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x6001459")]
	[Address(RVA = "0x11A4FE0", Offset = "0x11A4FE0", VA = "0x11A4FE0", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600145A")]
	[Address(RVA = "0x11A506C", Offset = "0x11A506C", VA = "0x11A506C", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600145B")]
	[Address(RVA = "0x11A5328", Offset = "0x11A5328", VA = "0x11A5328")]
	public MultiplayerJoinBestSession()
	{
	}
}
[Token(Token = "0x2000370")]
public class MultiplayerJoinEmptySession : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_boltJoinSessionSuccess;

	[Token(Token = "0x4001106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool m_boltJoinSessionFailed;

	[Token(Token = "0x600145C")]
	[Address(RVA = "0x11A5330", Offset = "0x11A5330", VA = "0x11A5330", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600145D")]
	[Address(RVA = "0x11A5990", Offset = "0x11A5990", VA = "0x11A5990")]
	private void OnSessionConnectedSuccess(UdpSession arg1, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x600145E")]
	[Address(RVA = "0x11A599C", Offset = "0x11A599C", VA = "0x11A599C")]
	private void OnSessionConnectedFailed(UdpSession arg1, IProtocolToken arg2, UdpSessionError sessionError)
	{
	}

	[Token(Token = "0x600145F")]
	[Address(RVA = "0x11A59A8", Offset = "0x11A59A8", VA = "0x11A59A8")]
	private void OnServerConnectionRefused(UdpEndPoint arg1, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x6001460")]
	[Address(RVA = "0x11A59B4", Offset = "0x11A59B4", VA = "0x11A59B4", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001461")]
	[Address(RVA = "0x11A5A40", Offset = "0x11A5A40", VA = "0x11A5A40", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001462")]
	[Address(RVA = "0x11A5CF0", Offset = "0x11A5CF0", VA = "0x11A5CF0")]
	public MultiplayerJoinEmptySession()
	{
	}
}
[Token(Token = "0x2000371")]
public class MultiplayerJoinRandomSession : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_boltJoinSessionSuccess;

	[Token(Token = "0x4001108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool m_boltJoinSessionFailed;

	[Token(Token = "0x6001463")]
	[Address(RVA = "0x11A5CF8", Offset = "0x11A5CF8", VA = "0x11A5CF8", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001464")]
	[Address(RVA = "0x11A60EC", Offset = "0x11A60EC", VA = "0x11A60EC")]
	private void OnSessionConnectedSuccess(UdpSession arg1, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x6001465")]
	[Address(RVA = "0x11A60F8", Offset = "0x11A60F8", VA = "0x11A60F8")]
	private void OnSessionConnectedFailed(UdpSession arg1, IProtocolToken arg2, UdpSessionError sessionError)
	{
	}

	[Token(Token = "0x6001466")]
	[Address(RVA = "0x11A6104", Offset = "0x11A6104", VA = "0x11A6104", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001467")]
	[Address(RVA = "0x11A6190", Offset = "0x11A6190", VA = "0x11A6190", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001468")]
	[Address(RVA = "0x11A6384", Offset = "0x11A6384", VA = "0x11A6384")]
	public MultiplayerJoinRandomSession()
	{
	}
}
[Token(Token = "0x2000372")]
public class State_HasAcceptedInvite : BaseStateAttachedLogic
{
	[Token(Token = "0x6001469")]
	[Address(RVA = "0x11A638C", Offset = "0x11A638C", VA = "0x11A638C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600146A")]
	[Address(RVA = "0x11A6408", Offset = "0x11A6408", VA = "0x11A6408")]
	public State_HasAcceptedInvite()
	{
	}
}
[Token(Token = "0x2000373")]
public class MultiplayerJoinSession : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_boltJoinSessionSuccess;

	[Token(Token = "0x400110A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool m_boltJoinSessionFailed;

	[Token(Token = "0x600146B")]
	[Address(RVA = "0x11A6410", Offset = "0x11A6410", VA = "0x11A6410", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600146C")]
	[Address(RVA = "0x11A6A9C", Offset = "0x11A6A9C", VA = "0x11A6A9C", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600146D")]
	[Address(RVA = "0x11A6EB0", Offset = "0x11A6EB0", VA = "0x11A6EB0", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600146E")]
	[Address(RVA = "0x11A6F3C", Offset = "0x11A6F3C", VA = "0x11A6F3C")]
	private void OnRoomJoined(ulong roomID)
	{
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0x11A6FD4", Offset = "0x11A6FD4", VA = "0x11A6FD4")]
	private void OnSessionConnectedSuccess(UdpSession session, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x6001470")]
	[Address(RVA = "0x11A6FE0", Offset = "0x11A6FE0", VA = "0x11A6FE0")]
	private void OnSessionConnectedFailed(UdpSession arg1, IProtocolToken arg2, UdpSessionError sessionError)
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0x11A6FF8", Offset = "0x11A6FF8", VA = "0x11A6FF8")]
	private void ConnectFailed(UdpEndPoint arg1, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0x11A6FEC", Offset = "0x11A6FEC", VA = "0x11A6FEC")]
	private void Fail()
	{
	}

	[Token(Token = "0x6001473")]
	[Address(RVA = "0x11A7004", Offset = "0x11A7004", VA = "0x11A7004")]
	public MultiplayerJoinSession()
	{
	}
}
[Token(Token = "0x2000374")]
public class MultiplayerResetGame : BaseStateAttachedLogic
{
	[Token(Token = "0x6001474")]
	[Address(RVA = "0x11A700C", Offset = "0x11A700C", VA = "0x11A700C", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001475")]
	[Address(RVA = "0x11A70CC", Offset = "0x11A70CC", VA = "0x11A70CC", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001476")]
	[Address(RVA = "0x11A717C", Offset = "0x11A717C", VA = "0x11A717C")]
	public MultiplayerResetGame()
	{
	}
}
[Token(Token = "0x2000375")]
public class MultiplayerRestartGame : BaseStateAttachedLogic
{
	[Token(Token = "0x6001477")]
	[Address(RVA = "0x11A7184", Offset = "0x11A7184", VA = "0x11A7184", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001478")]
	[Address(RVA = "0x11A72B4", Offset = "0x11A72B4", VA = "0x11A72B4", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001479")]
	[Address(RVA = "0x11A740C", Offset = "0x11A740C", VA = "0x11A740C")]
	private void ExitToGame(int mapID)
	{
	}

	[Token(Token = "0x600147A")]
	[Address(RVA = "0x11A7494", Offset = "0x11A7494", VA = "0x11A7494", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600147B")]
	[Address(RVA = "0x11A75C4", Offset = "0x11A75C4", VA = "0x11A75C4")]
	public MultiplayerRestartGame()
	{
	}
}
[Token(Token = "0x2000376")]
public class MultiplayerReviveLocalPlayer : BaseStateAttachedLogic
{
	[Token(Token = "0x600147C")]
	[Address(RVA = "0x11A75CC", Offset = "0x11A75CC", VA = "0x11A75CC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600147D")]
	[Address(RVA = "0x11A77F0", Offset = "0x11A77F0", VA = "0x11A77F0")]
	public MultiplayerReviveLocalPlayer()
	{
	}
}
[Token(Token = "0x2000377")]
public class MultiplayerShutdown : BaseStateAttachedLogic
{
	[Token(Token = "0x2000378")]
	[CompilerGenerated]
	private sealed class <MonitorSceneUnload>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.AsyncOperation op;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MultiplayerShutdown <>4__this;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WaitForSecondsRealtime <wait>5__2;

		[Token(Token = "0x17000318")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600148F")]
			[Address(RVA = "0x11A836C", Offset = "0x11A836C", VA = "0x11A836C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000319")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001491")]
			[Address(RVA = "0x11A83B4", Offset = "0x11A83B4", VA = "0x11A83B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x11A825C", Offset = "0x11A825C", VA = "0x11A825C")]
		[DebuggerHidden]
		public <MonitorSceneUnload>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x11A828C", Offset = "0x11A828C", VA = "0x11A828C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0x11A8290", Offset = "0x11A8290", VA = "0x11A8290", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0x11A8374", Offset = "0x11A8374", VA = "0x11A8374", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400110D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_gameNetworkDisconnected;

	[Token(Token = "0x400110E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool m_mapUnloaded;

	[Token(Token = "0x17000316")]
	[StateConfig("Don't Unload Scene")]
	public bool NoUnload
	{
		[Token(Token = "0x600147E")]
		[Address(RVA = "0x11A77F8", Offset = "0x11A77F8", VA = "0x11A77F8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600147F")]
		[Address(RVA = "0x11A7800", Offset = "0x11A7800", VA = "0x11A7800")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000317")]
	public static MultiplayerShutdown Instance
	{
		[Token(Token = "0x6001480")]
		[Address(RVA = "0x11A780C", Offset = "0x11A780C", VA = "0x11A780C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001481")]
		[Address(RVA = "0x11A7854", Offset = "0x11A7854", VA = "0x11A7854")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001482")]
	[Address(RVA = "0x11A78AC", Offset = "0x11A78AC", VA = "0x11A78AC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001483")]
	[Address(RVA = "0x11A7F50", Offset = "0x11A7F50", VA = "0x11A7F50", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001484")]
	[Address(RVA = "0x11A804C", Offset = "0x11A804C", VA = "0x11A804C", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001485")]
	[Address(RVA = "0x11A7F68", Offset = "0x11A7F68", VA = "0x11A7F68")]
	private void FinalizeAndExitState()
	{
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0x11A7D10", Offset = "0x11A7D10", VA = "0x11A7D10")]
	public void BoltShutdownComplete()
	{
	}

	[Token(Token = "0x6001487")]
	[Address(RVA = "0x11A8258", Offset = "0x11A8258", VA = "0x11A8258")]
	private void VivoxShutdownComplete()
	{
	}

	[Token(Token = "0x6001488")]
	[Address(RVA = "0x11A7E28", Offset = "0x11A7E28", VA = "0x11A7E28")]
	private void MapUnloaded()
	{
	}

	[Token(Token = "0x6001489")]
	[Address(RVA = "0x11A7EC0", Offset = "0x11A7EC0", VA = "0x11A7EC0")]
	[IteratorStateMachine(typeof(<MonitorSceneUnload>d__17))]
	private IEnumerator MonitorSceneUnload(UnityEngine.AsyncOperation op)
	{
		return null;
	}

	[Token(Token = "0x600148A")]
	[Address(RVA = "0x11A7D6C", Offset = "0x11A7D6C", VA = "0x11A7D6C")]
	private bool IsSceneLoaded(string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x600148B")]
	[Address(RVA = "0x11A8284", Offset = "0x11A8284", VA = "0x11A8284")]
	public MultiplayerShutdown()
	{
	}
}
[Token(Token = "0x2000379")]
public class MultiplayerStartSession : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x200037A")]
	[CompilerGenerated]
	private sealed class <WaitAndStartSession>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700031A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600149B")]
			[Address(RVA = "0x11A8A6C", Offset = "0x11A8A6C", VA = "0x11A8A6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600149D")]
			[Address(RVA = "0x11A8AB4", Offset = "0x11A8AB4", VA = "0x11A8AB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0x11A8990", Offset = "0x11A8990", VA = "0x11A8990")]
		[DebuggerHidden]
		public <WaitAndStartSession>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0x11A89C0", Offset = "0x11A89C0", VA = "0x11A89C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600149A")]
		[Address(RVA = "0x11A89C4", Offset = "0x11A89C4", VA = "0x11A89C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x11A8A74", Offset = "0x11A8A74", VA = "0x11A8A74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6001492")]
	[Address(RVA = "0x11A83BC", Offset = "0x11A83BC", VA = "0x11A83BC", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001493")]
	[Address(RVA = "0x11A862C", Offset = "0x11A862C", VA = "0x11A862C", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001494")]
	[Address(RVA = "0x11A882C", Offset = "0x11A882C", VA = "0x11A882C")]
	private void OnSessionCreationSuccess(UdpSession obj)
	{
	}

	[Token(Token = "0x6001495")]
	[Address(RVA = "0x11A88D0", Offset = "0x11A88D0", VA = "0x11A88D0")]
	private void OnSessionCreationFailed(UdpSession obj, UdpSessionError error)
	{
	}

	[Token(Token = "0x6001496")]
	[Address(RVA = "0x11A85CC", Offset = "0x11A85CC", VA = "0x11A85CC")]
	[IteratorStateMachine(typeof(<WaitAndStartSession>d__4))]
	private IEnumerator WaitAndStartSession()
	{
		return null;
	}

	[Token(Token = "0x6001497")]
	[Address(RVA = "0x11A89B8", Offset = "0x11A89B8", VA = "0x11A89B8")]
	public MultiplayerStartSession()
	{
	}
}
[Token(Token = "0x200037B")]
public class MultiplayerStartup : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x200037D")]
	[CompilerGenerated]
	private sealed class <JoinFirstFoundSession>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MultiplayerStartup <>4__this;

		[Token(Token = "0x1700031D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014B2")]
			[Address(RVA = "0x11A9EC0", Offset = "0x11A9EC0", VA = "0x11A9EC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014B4")]
			[Address(RVA = "0x11A9F08", Offset = "0x11A9F08", VA = "0x11A9F08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x11A9C64", Offset = "0x11A9C64", VA = "0x11A9C64")]
		[DebuggerHidden]
		public <JoinFirstFoundSession>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x11A9C94", Offset = "0x11A9C94", VA = "0x11A9C94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x11A9C98", Offset = "0x11A9C98", VA = "0x11A9C98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x11A9EC8", Offset = "0x11A9EC8", VA = "0x11A9EC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x1700031C")]
	[StateConfig("Start Server")]
	public bool CreateServer
	{
		[Token(Token = "0x600149E")]
		[Address(RVA = "0x11A8ABC", Offset = "0x11A8ABC", VA = "0x11A8ABC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600149F")]
		[Address(RVA = "0x11A8AC4", Offset = "0x11A8AC4", VA = "0x11A8AC4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60014A0")]
	[Address(RVA = "0x11A8AD0", Offset = "0x11A8AD0", VA = "0x11A8AD0", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0x11A9434", Offset = "0x11A9434", VA = "0x11A9434")]
	private void OnBoltStartBegin()
	{
	}

	[Token(Token = "0x60014A2")]
	[Address(RVA = "0x11A947C", Offset = "0x11A947C", VA = "0x11A947C")]
	private void OnBoltStartFailed()
	{
	}

	[Token(Token = "0x60014A3")]
	[Address(RVA = "0x11A94F4", Offset = "0x11A94F4", VA = "0x11A94F4", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60014A4")]
	[Address(RVA = "0x11A9730", Offset = "0x11A9730", VA = "0x11A9730")]
	private void OnBoltStartSuccess()
	{
	}

	[Token(Token = "0x60014A5")]
	[Address(RVA = "0x11A93E4", Offset = "0x11A93E4", VA = "0x11A93E4")]
	private void StartSinglePlayer()
	{
	}

	[Token(Token = "0x60014A6")]
	[Address(RVA = "0x11A9170", Offset = "0x11A9170", VA = "0x11A9170")]
	private void StartServer()
	{
	}

	[Token(Token = "0x60014A7")]
	[Address(RVA = "0x11A91C0", Offset = "0x11A91C0", VA = "0x11A91C0")]
	private void StartClient()
	{
	}

	[Token(Token = "0x60014A8")]
	[Address(RVA = "0x11A997C", Offset = "0x11A997C", VA = "0x11A997C")]
	private void OnStartClient()
	{
	}

	[Token(Token = "0x60014A9")]
	[Address(RVA = "0x11A92E4", Offset = "0x11A92E4", VA = "0x11A92E4")]
	private void JoinAnyGame()
	{
	}

	[Token(Token = "0x60014AA")]
	[Address(RVA = "0x11A9AE0", Offset = "0x11A9AE0", VA = "0x11A9AE0")]
	private void OnJoinAnyGameClientStarted()
	{
	}

	[Token(Token = "0x60014AB")]
	[Address(RVA = "0x11A9BF0", Offset = "0x11A9BF0", VA = "0x11A9BF0")]
	[IteratorStateMachine(typeof(<JoinFirstFoundSession>d__15))]
	private IEnumerator JoinFirstFoundSession()
	{
		return null;
	}

	[Token(Token = "0x60014AC")]
	[Address(RVA = "0x11A9058", Offset = "0x11A9058", VA = "0x11A9058")]
	private static string GetArg(params string[] names)
	{
		return null;
	}

	[Token(Token = "0x60014AD")]
	[Address(RVA = "0x11A9C8C", Offset = "0x11A9C8C", VA = "0x11A9C8C")]
	public MultiplayerStartup()
	{
	}
}
[Token(Token = "0x200037E")]
public class MultiplayerTeamDeathListener : BaseStateAttachedLogic
{
	[Token(Token = "0x60014B5")]
	[Address(RVA = "0x11A9F10", Offset = "0x11A9F10", VA = "0x11A9F10", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014B6")]
	[Address(RVA = "0x11AA02C", Offset = "0x11AA02C", VA = "0x11AA02C", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0x11AA148", Offset = "0x11AA148", VA = "0x11AA148")]
	private void OnPlayerDeathEvent(SendPlayerDeath evnt)
	{
	}

	[Token(Token = "0x60014B8")]
	[Address(RVA = "0x11AA338", Offset = "0x11AA338", VA = "0x11AA338")]
	public MultiplayerTeamDeathListener()
	{
	}
}
[Token(Token = "0x200037F")]
public class State_GetSessionFromOculusRoom : BaseStateAttachedLogic
{
	[Token(Token = "0x60014B9")]
	[Address(RVA = "0x11AA340", Offset = "0x11AA340", VA = "0x11AA340", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0x11AA348", Offset = "0x11AA348", VA = "0x11AA348")]
	public State_GetSessionFromOculusRoom()
	{
	}
}
[Token(Token = "0x2000380")]
public class State_JoinPicoRoom : BaseStateAttachedLogic
{
	[Token(Token = "0x60014BB")]
	[Address(RVA = "0x11AA350", Offset = "0x11AA350", VA = "0x11AA350", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014BC")]
	[Address(RVA = "0x11AA458", Offset = "0x11AA458", VA = "0x11AA458")]
	private void OnRoomJoined(Room room)
	{
	}

	[Token(Token = "0x60014BD")]
	[Address(RVA = "0x11AA594", Offset = "0x11AA594", VA = "0x11AA594")]
	public State_JoinPicoRoom()
	{
	}
}
[Token(Token = "0x2000381")]
public class State_DisableRegionPanel : BaseStateAttachedLogic
{
	[Token(Token = "0x60014BE")]
	[Address(RVA = "0x11AA59C", Offset = "0x11AA59C", VA = "0x11AA59C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014BF")]
	[Address(RVA = "0x11AA680", Offset = "0x11AA680", VA = "0x11AA680")]
	public State_DisableRegionPanel()
	{
	}
}
[Token(Token = "0x2000382")]
public class State_SetTargetRegion : BaseStateAttachedLogic
{
	[Token(Token = "0x1700031F")]
	[StateConfig("Desired Region")]
	public string DesiredRegion
	{
		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x11AA688", Offset = "0x11AA688", VA = "0x11AA688")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x11AA690", Offset = "0x11AA690", VA = "0x11AA690")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60014C2")]
	[Address(RVA = "0x11AA698", Offset = "0x11AA698", VA = "0x11AA698", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014C3")]
	[Address(RVA = "0x11AA780", Offset = "0x11AA780", VA = "0x11AA780")]
	public State_SetTargetRegion()
	{
	}
}
[Token(Token = "0x2000383")]
public class State_SwitchRegion : BaseStateAttachedLogic
{
	[Token(Token = "0x400111C")]
	private const string c_exitPoint_switch = "switch";

	[Token(Token = "0x400111D")]
	private const string c_exitPoint_stay = "stay";

	[Token(Token = "0x60014C4")]
	[Address(RVA = "0x11AA788", Offset = "0x11AA788", VA = "0x11AA788", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60014C5")]
	[Address(RVA = "0x11AA8C0", Offset = "0x11AA8C0", VA = "0x11AA8C0")]
	public State_SwitchRegion()
	{
	}
}
[Token(Token = "0x2000384")]
public class SetCanReceiveEntities : BaseStateAttachedLogic
{
	[Token(Token = "0x17000320")]
	[StateConfig("Receive Entities")]
	public bool Entities
	{
		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x11AA8C8", Offset = "0x11AA8C8", VA = "0x11AA8C8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x11AA8D0", Offset = "0x11AA8D0", VA = "0x11AA8D0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60014C8")]
	[Address(RVA = "0x11AA8DC", Offset = "0x11AA8DC", VA = "0x11AA8DC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014C9")]
	[Address(RVA = "0x11AA9B4", Offset = "0x11AA9B4", VA = "0x11AA9B4")]
	public SetCanReceiveEntities()
	{
	}
}
[Token(Token = "0x2000385")]
public class State_AttachQueuedEntities : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x2000386")]
	[CompilerGenerated]
	private sealed class <AttachQueuedEntities>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000321")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014D0")]
			[Address(RVA = "0x11AAC20", Offset = "0x11AAC20", VA = "0x11AAC20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000322")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014D2")]
			[Address(RVA = "0x11AAC68", Offset = "0x11AAC68", VA = "0x11AAC68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x11AAA94", Offset = "0x11AAA94", VA = "0x11AAA94")]
		[DebuggerHidden]
		public <AttachQueuedEntities>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x11AAAC4", Offset = "0x11AAAC4", VA = "0x11AAAC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x11AAAC8", Offset = "0x11AAAC8", VA = "0x11AAAC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0x11AAC28", Offset = "0x11AAC28", VA = "0x11AAC28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400111F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine m_coroutine;

	[Token(Token = "0x60014CA")]
	[Address(RVA = "0x11AA9BC", Offset = "0x11AA9BC", VA = "0x11AA9BC", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014CB")]
	[Address(RVA = "0x11AAA34", Offset = "0x11AAA34", VA = "0x11AAA34")]
	[IteratorStateMachine(typeof(<AttachQueuedEntities>d__2))]
	private IEnumerator AttachQueuedEntities()
	{
		return null;
	}

	[Token(Token = "0x60014CC")]
	[Address(RVA = "0x11AAABC", Offset = "0x11AAABC", VA = "0x11AAABC")]
	public State_AttachQueuedEntities()
	{
	}
}
[Token(Token = "0x2000387")]
public class State_CheckClientConnection : BaseStateAttachedLogic
{
	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<float> m_clientTimes;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<BoltConnection> m_connection;

	[Token(Token = "0x17000323")]
	[StateConfig("Connection TimeOut")]
	public float ConnectionTimeOut
	{
		[Token(Token = "0x60014D3")]
		[Address(RVA = "0x11AAC70", Offset = "0x11AAC70", VA = "0x11AAC70")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60014D4")]
		[Address(RVA = "0x11AAC78", Offset = "0x11AAC78", VA = "0x11AAC78")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60014D5")]
	[Address(RVA = "0x11AAC80", Offset = "0x11AAC80", VA = "0x11AAC80", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014D6")]
	[Address(RVA = "0x11AB32C", Offset = "0x11AB32C", VA = "0x11AB32C", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60014D7")]
	[Address(RVA = "0x11AB6D8", Offset = "0x11AB6D8", VA = "0x11AB6D8", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60014D8")]
	[Address(RVA = "0x11AB3B4", Offset = "0x11AB3B4", VA = "0x11AB3B4")]
	private void CheckPlayersConnection()
	{
	}

	[Token(Token = "0x60014D9")]
	[Address(RVA = "0x11AB988", Offset = "0x11AB988", VA = "0x11AB988")]
	private void ConfirmClientConnection(BoltConnection connection)
	{
	}

	[Token(Token = "0x60014DA")]
	[Address(RVA = "0x11ABA70", Offset = "0x11ABA70", VA = "0x11ABA70")]
	private void PlayerDisconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x60014DB")]
	[Address(RVA = "0x11ABB7C", Offset = "0x11ABB7C", VA = "0x11ABB7C")]
	private void PlayerConnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x60014DC")]
	[Address(RVA = "0x11ABD48", Offset = "0x11ABD48", VA = "0x11ABD48")]
	public State_CheckClientConnection()
	{
	}
}
[Token(Token = "0x2000388")]
public class State_CheckNetworkReachability : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x60014DD")]
	[Address(RVA = "0x11ABE20", Offset = "0x11ABE20", VA = "0x11ABE20", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014DE")]
	[Address(RVA = "0x11ABEAC", Offset = "0x11ABEAC", VA = "0x11ABEAC")]
	public State_CheckNetworkReachability()
	{
	}
}
[Token(Token = "0x2000389")]
public class State_ClientMultiplayerWaitForDeath : BaseStateAttachedLogic
{
	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_isDisconnecting;

	[Token(Token = "0x60014DF")]
	[Address(RVA = "0x11ABEB4", Offset = "0x11ABEB4", VA = "0x11ABEB4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0x11AC11C", Offset = "0x11AC11C", VA = "0x11AC11C")]
	private void OnShutdownBegin()
	{
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0x11AC128", Offset = "0x11AC128", VA = "0x11AC128")]
	private void OnPlayerDeathEvent(SendPlayerDeath sendPlayerDeath)
	{
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0x11AC27C", Offset = "0x11AC27C", VA = "0x11AC27C", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60014E3")]
	[Address(RVA = "0x11AC4DC", Offset = "0x11AC4DC", VA = "0x11AC4DC")]
	public State_ClientMultiplayerWaitForDeath()
	{
	}
}
[Token(Token = "0x200038A")]
public class State_ClientReportEnemies : BaseStateAttachedLogic
{
	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_sendRate;

	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_sendTime;

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0x11AC4E4", Offset = "0x11AC4E4", VA = "0x11AC4E4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0x11AC4EC", Offset = "0x11AC4EC", VA = "0x11AC4EC", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0x11AC644", Offset = "0x11AC644", VA = "0x11AC644", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60014E7")]
	[Address(RVA = "0x11AC64C", Offset = "0x11AC64C", VA = "0x11AC64C")]
	public State_ClientReportEnemies()
	{
	}
}
[Token(Token = "0x200038B")]
public class State_ClientRequestGameEnd : BaseStateAttachedLogic
{
	[Token(Token = "0x60014E8")]
	[Address(RVA = "0x11AC65C", Offset = "0x11AC65C", VA = "0x11AC65C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0x11AC6D8", Offset = "0x11AC6D8", VA = "0x11AC6D8")]
	public State_ClientRequestGameEnd()
	{
	}
}
[Token(Token = "0x200038C")]
public class State_ConfirmClientConnection : BaseStateAttachedLogic
{
	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_heartBeatTimer;

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_timeBetweenHeartBeats;

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0x11AC6E0", Offset = "0x11AC6E0", VA = "0x11AC6E0", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0x11AC864", Offset = "0x11AC864", VA = "0x11AC864")]
	public State_ConfirmClientConnection()
	{
	}
}
[Token(Token = "0x200038D")]
public class State_CreateMultiplayerGameManager : BaseStateAttachedLogic
{
	[Token(Token = "0x60014EC")]
	[Address(RVA = "0x11AC874", Offset = "0x11AC874", VA = "0x11AC874", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014ED")]
	[Address(RVA = "0x11AC9FC", Offset = "0x11AC9FC", VA = "0x11AC9FC")]
	private void ResetAndExit()
	{
	}

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0x11ACA4C", Offset = "0x11ACA4C", VA = "0x11ACA4C")]
	public State_CreateMultiplayerGameManager()
	{
	}
}
[Token(Token = "0x200038E")]
public class State_HordeStartup : BaseStateAttachedLogic
{
	[Token(Token = "0x60014EF")]
	[Address(RVA = "0x11ACA54", Offset = "0x11ACA54", VA = "0x11ACA54", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014F0")]
	[Address(RVA = "0x11ACDD0", Offset = "0x11ACDD0", VA = "0x11ACDD0")]
	private void StartSinglePlayer()
	{
	}

	[Token(Token = "0x60014F1")]
	[Address(RVA = "0x11ACE20", Offset = "0x11ACE20", VA = "0x11ACE20")]
	private void OnBoltStartBegin()
	{
	}

	[Token(Token = "0x60014F2")]
	[Address(RVA = "0x11ACE68", Offset = "0x11ACE68", VA = "0x11ACE68")]
	private void OnBoltStartFailed()
	{
	}

	[Token(Token = "0x60014F3")]
	[Address(RVA = "0x11ACEE4", Offset = "0x11ACEE4", VA = "0x11ACEE4")]
	private void OnBoltStartSuccess()
	{
	}

	[Token(Token = "0x60014F4")]
	[Address(RVA = "0x11AD004", Offset = "0x11AD004", VA = "0x11AD004")]
	public State_HordeStartup()
	{
	}
}
[Token(Token = "0x200038F")]
public class State_LevelEndListener : BaseStateAttachedLogic
{
	[Token(Token = "0x60014F5")]
	[Address(RVA = "0x11AD00C", Offset = "0x11AD00C", VA = "0x11AD00C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014F6")]
	[Address(RVA = "0x11AD128", Offset = "0x11AD128", VA = "0x11AD128", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60014F7")]
	[Address(RVA = "0x11AD244", Offset = "0x11AD244", VA = "0x11AD244")]
	private void OnReceivedLevelEndEvent(RequestLevelEndEvent evnt)
	{
	}

	[Token(Token = "0x60014F8")]
	[Address(RVA = "0x11AD37C", Offset = "0x11AD37C", VA = "0x11AD37C")]
	public State_LevelEndListener()
	{
	}
}
[Token(Token = "0x2000390")]
public class State_MPCompareClientState : BaseStateAttachedLogic
{
	[Token(Token = "0x400112B")]
	private const string m_exitToHubString = "exit_to_hub";

	[Token(Token = "0x17000324")]
	[StateConfig("Client State")]
	public MultiplayerGameState ClientState
	{
		[Token(Token = "0x60014F9")]
		[Address(RVA = "0x11AD384", Offset = "0x11AD384", VA = "0x11AD384")]
		[CompilerGenerated]
		get
		{
			return default(MultiplayerGameState);
		}
		[Token(Token = "0x60014FA")]
		[Address(RVA = "0x11AD38C", Offset = "0x11AD38C", VA = "0x11AD38C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0x11AD394", Offset = "0x11AD394", VA = "0x11AD394", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0x11AD4F8", Offset = "0x11AD4F8", VA = "0x11AD4F8")]
	public State_MPCompareClientState()
	{
	}
}
[Token(Token = "0x2000391")]
public class State_MPLoadingComplete : BaseStateAttachedLogic
{
	[Token(Token = "0x60014FD")]
	[Address(RVA = "0x11AD500", Offset = "0x11AD500", VA = "0x11AD500", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60014FE")]
	[Address(RVA = "0x11AD628", Offset = "0x11AD628", VA = "0x11AD628", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60014FF")]
	[Address(RVA = "0x11AD690", Offset = "0x11AD690", VA = "0x11AD690")]
	public State_MPLoadingComplete()
	{
	}
}
[Token(Token = "0x2000392")]
public class State_MPRequestGameState : BaseStateAttachedLogic
{
	[Token(Token = "0x6001500")]
	[Address(RVA = "0x11AD698", Offset = "0x11AD698", VA = "0x11AD698", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001501")]
	[Address(RVA = "0x11AD75C", Offset = "0x11AD75C", VA = "0x11AD75C")]
	public State_MPRequestGameState()
	{
	}
}
[Token(Token = "0x2000393")]
public class State_MpWaitForPlayersState : BaseStateAttachedLogic
{
	[Token(Token = "0x17000325")]
	[StateConfig("Desired Player State")]
	public MultiplayerGameState DesiredState
	{
		[Token(Token = "0x6001502")]
		[Address(RVA = "0x11AD764", Offset = "0x11AD764", VA = "0x11AD764")]
		[CompilerGenerated]
		get
		{
			return default(MultiplayerGameState);
		}
		[Token(Token = "0x6001503")]
		[Address(RVA = "0x11AD76C", Offset = "0x11AD76C", VA = "0x11AD76C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001504")]
	[Address(RVA = "0x11AD774", Offset = "0x11AD774", VA = "0x11AD774", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001505")]
	[Address(RVA = "0x11AD778", Offset = "0x11AD778", VA = "0x11AD778", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001506")]
	[Address(RVA = "0x11AD8EC", Offset = "0x11AD8EC", VA = "0x11AD8EC")]
	public State_MpWaitForPlayersState()
	{
	}
}
[Token(Token = "0x2000394")]
public class State_MultiplayerCanRespawn : BaseStateAttachedLogic
{
	[Token(Token = "0x6001507")]
	[Address(RVA = "0x11AD8F4", Offset = "0x11AD8F4", VA = "0x11AD8F4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001508")]
	[Address(RVA = "0x11AD9EC", Offset = "0x11AD9EC", VA = "0x11AD9EC")]
	public State_MultiplayerCanRespawn()
	{
	}
}
[Token(Token = "0x2000395")]
public class State_MultiplayerClientStart : BaseStateAttachedLogic
{
	[Token(Token = "0x6001509")]
	[Address(RVA = "0x11AD9F4", Offset = "0x11AD9F4", VA = "0x11AD9F4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600150A")]
	[Address(RVA = "0x11ADE18", Offset = "0x11ADE18", VA = "0x11ADE18", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600150B")]
	[Address(RVA = "0x11AE040", Offset = "0x11AE040", VA = "0x11AE040")]
	private void OnBoltStartBegin()
	{
	}

	[Token(Token = "0x600150C")]
	[Address(RVA = "0x11AE088", Offset = "0x11AE088", VA = "0x11AE088")]
	private void OnBoltStartSuccess()
	{
	}

	[Token(Token = "0x600150D")]
	[Address(RVA = "0x11AE1E8", Offset = "0x11AE1E8", VA = "0x11AE1E8")]
	private void OnBoltStartFailed()
	{
	}

	[Token(Token = "0x600150E")]
	[Address(RVA = "0x11AE264", Offset = "0x11AE264", VA = "0x11AE264")]
	public State_MultiplayerClientStart()
	{
	}
}
[Token(Token = "0x2000396")]
public class State_MultiplayerGameCleanup : BaseStateAttachedLogic
{
	[Token(Token = "0x600150F")]
	[Address(RVA = "0x11AE26C", Offset = "0x11AE26C", VA = "0x11AE26C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001510")]
	[Address(RVA = "0x11AE2C4", Offset = "0x11AE2C4", VA = "0x11AE2C4")]
	public State_MultiplayerGameCleanup()
	{
	}
}
[Token(Token = "0x2000397")]
public class State_MultiplayerLevelEnded : BaseStateAttachedLogic
{
	[Token(Token = "0x6001511")]
	[Address(RVA = "0x11AE2CC", Offset = "0x11AE2CC", VA = "0x11AE2CC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001512")]
	[Address(RVA = "0x11AE4A0", Offset = "0x11AE4A0", VA = "0x11AE4A0")]
	public State_MultiplayerLevelEnded()
	{
	}
}
[Token(Token = "0x2000398")]
public class State_MultiplayerSessionConnect : BaseStateAttachedLogic
{
	[Token(Token = "0x6001513")]
	[Address(RVA = "0x11AE4A8", Offset = "0x11AE4A8", VA = "0x11AE4A8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001514")]
	[Address(RVA = "0x11AEB48", Offset = "0x11AEB48", VA = "0x11AEB48", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001515")]
	[Address(RVA = "0x11AED34", Offset = "0x11AED34", VA = "0x11AED34")]
	private void OnSessionConnectedSuccess(UdpSession arg1, IProtocolToken arg2)
	{
	}

	[Token(Token = "0x6001516")]
	[Address(RVA = "0x11AED84", Offset = "0x11AED84", VA = "0x11AED84")]
	private void OnSessionConnectedFailed(UdpSession arg1, IProtocolToken arg2, UdpSessionError sessionError)
	{
	}

	[Token(Token = "0x6001517")]
	[Address(RVA = "0x11AEDD4", Offset = "0x11AEDD4", VA = "0x11AEDD4")]
	public State_MultiplayerSessionConnect()
	{
	}
}
[Token(Token = "0x2000399")]
public class State_MultiplayerStartGame : BaseStateAttachedLogic
{
	[Token(Token = "0x6001518")]
	[Address(RVA = "0x11AEDDC", Offset = "0x11AEDDC", VA = "0x11AEDDC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001519")]
	[Address(RVA = "0x11AF1FC", Offset = "0x11AF1FC", VA = "0x11AF1FC", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600151A")]
	[Address(RVA = "0x11AF32C", Offset = "0x11AF32C", VA = "0x11AF32C")]
	private void ExitToGame(int mapID)
	{
	}

	[Token(Token = "0x600151B")]
	[Address(RVA = "0x11AF3B4", Offset = "0x11AF3B4", VA = "0x11AF3B4")]
	public State_MultiplayerStartGame()
	{
	}
}
[Token(Token = "0x200039A")]
public enum MultiplayerGameStartType
{
	[Token(Token = "0x400112E")]
	Solo,
	[Token(Token = "0x400112F")]
	CoOpQuickPlay,
	[Token(Token = "0x4001130")]
	CoOpHost,
	[Token(Token = "0x4001131")]
	CoOpJoin,
	[Token(Token = "0x4001132")]
	FTUE
}
[Token(Token = "0x200039B")]
public class State_MultiplayerSubmitAnalytics : BaseStateAttachedLogic
{
	[Token(Token = "0x17000326")]
	public static MultiplayerGameStartType GameStartType
	{
		[Token(Token = "0x600151C")]
		[Address(RVA = "0x11AF3BC", Offset = "0x11AF3BC", VA = "0x11AF3BC")]
		[CompilerGenerated]
		get
		{
			return default(MultiplayerGameStartType);
		}
		[Token(Token = "0x600151D")]
		[Address(RVA = "0x11AF404", Offset = "0x11AF404", VA = "0x11AF404")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600151E")]
	[Address(RVA = "0x11AF450", Offset = "0x11AF450", VA = "0x11AF450")]
	public static void SetMultiplayerGameStartType(MultiplayerGameStartType type)
	{
	}

	[Token(Token = "0x600151F")]
	[Address(RVA = "0x11AF49C", Offset = "0x11AF49C", VA = "0x11AF49C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001520")]
	[Address(RVA = "0x11AF7E8", Offset = "0x11AF7E8", VA = "0x11AF7E8")]
	public State_MultiplayerSubmitAnalytics()
	{
	}
}
[Token(Token = "0x200039C")]
public class State_MultiplayerUpdateSession : BaseStateAttachedLogic
{
	[Token(Token = "0x6001521")]
	[Address(RVA = "0x11AF7F0", Offset = "0x11AF7F0", VA = "0x11AF7F0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001522")]
	[Address(RVA = "0x11AF84C", Offset = "0x11AF84C", VA = "0x11AF84C")]
	public State_MultiplayerUpdateSession()
	{
	}
}
[Token(Token = "0x200039D")]
public class State_MultiplayReservations : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_serverReserved;

	[Token(Token = "0x4001135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_playerCount;

	[Token(Token = "0x6001523")]
	[Address(RVA = "0x11AF854", Offset = "0x11AF854", VA = "0x11AF854", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001524")]
	[Address(RVA = "0x11AFA3C", Offset = "0x11AFA3C", VA = "0x11AFA3C", Slot = "13")]
	public override void StateExit(int? outPoint)
	{
	}

	[Token(Token = "0x6001525")]
	[Address(RVA = "0x11AFC24", Offset = "0x11AFC24", VA = "0x11AFC24")]
	private void PlayerConnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x6001526")]
	[Address(RVA = "0x11AFCE8", Offset = "0x11AFCE8", VA = "0x11AFCE8")]
	private void PlayerDisconnected(BoltConnection connection)
	{
	}

	[Token(Token = "0x6001527")]
	[Address(RVA = "0x11AFDA4", Offset = "0x11AFDA4", VA = "0x11AFDA4")]
	public State_MultiplayReservations()
	{
	}
}
[Token(Token = "0x200039E")]
public class State_OculusInitialize : BaseStateAttachedLogic
{
	[Token(Token = "0x4001136")]
	private const string SuccessExitPointName = "success_exit";

	[Token(Token = "0x4001137")]
	private const string FailExitPointName = "failed_exit";

	[Token(Token = "0x6001528")]
	[Address(RVA = "0x11AFDAC", Offset = "0x11AFDAC", VA = "0x11AFDAC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001529")]
	[Address(RVA = "0x11AFE18", Offset = "0x11AFE18", VA = "0x11AFE18")]
	public State_OculusInitialize()
	{
	}
}
[Token(Token = "0x200039F")]
public class State_PicoInitialize : BaseStateAttachedLogic
{
	[Token(Token = "0x4001138")]
	private const string SuccessExitPointName = "success_exit";

	[Token(Token = "0x4001139")]
	private const string FailExitPointName = "failed_exit";

	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool exitAppOnFailure;

	[Token(Token = "0x400113B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_failInitialization;

	[Token(Token = "0x400113C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool m_accessTokenSuccess;

	[Token(Token = "0x400113D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool m_getUserSuccess;

	[Token(Token = "0x400113E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_entitlementCheckSuccess;

	[Token(Token = "0x600152A")]
	[Address(RVA = "0x11AFE20", Offset = "0x11AFE20", VA = "0x11AFE20", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600152B")]
	[Address(RVA = "0x11AFFB8", Offset = "0x11AFFB8", VA = "0x11AFFB8", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600152C")]
	[Address(RVA = "0x11B0058", Offset = "0x11B0058", VA = "0x11B0058")]
	private void OnPicoCoreInitialized(Message<PlatformInitializeResult> message)
	{
	}

	[Token(Token = "0x600152D")]
	[Address(RVA = "0x11B0204", Offset = "0x11B0204", VA = "0x11B0204")]
	private void EntitlementCheckCallback(int entitlementResult)
	{
	}

	[Token(Token = "0x600152E")]
	[Address(RVA = "0x11B0380", Offset = "0x11B0380", VA = "0x11B0380")]
	private void GetAccessTokenComplete(Message<string> msg)
	{
	}

	[Token(Token = "0x600152F")]
	[Address(RVA = "0x11B0450", Offset = "0x11B0450", VA = "0x11B0450")]
	private void OnGetUser(NetworkResponse obj)
	{
	}

	[Token(Token = "0x6001530")]
	[Address(RVA = "0x11B05D0", Offset = "0x11B05D0", VA = "0x11B05D0")]
	public State_PicoInitialize()
	{
	}
}
[Token(Token = "0x20003A0")]
public class State_SendPlayerState : BaseStateAttachedLogic
{
	[Token(Token = "0x17000327")]
	[StateConfig("Desired Player State")]
	public MultiplayerGameState DesiredState
	{
		[Token(Token = "0x6001531")]
		[Address(RVA = "0x11B05E0", Offset = "0x11B05E0", VA = "0x11B05E0")]
		[CompilerGenerated]
		get
		{
			return default(MultiplayerGameState);
		}
		[Token(Token = "0x6001532")]
		[Address(RVA = "0x11B05E8", Offset = "0x11B05E8", VA = "0x11B05E8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001533")]
	[Address(RVA = "0x11B05F0", Offset = "0x11B05F0", VA = "0x11B05F0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001534")]
	[Address(RVA = "0x11B06C8", Offset = "0x11B06C8", VA = "0x11B06C8")]
	public State_SendPlayerState()
	{
	}
}
[Token(Token = "0x20003A1")]
public class State_ServerMultiplayerDeathListener : BaseStateAttachedLogic
{
	[Token(Token = "0x4001141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int m_frame;

	[Token(Token = "0x4001142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_checkFrame;

	[Token(Token = "0x4001143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HashSet<HealthStatus> m_acknowledgedDeadPlayerHealthStatuses;

	[Token(Token = "0x4001144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<BoltConnection> m_connections;

	[Token(Token = "0x17000328")]
	[StateConfig("ServerMonitor")]
	public bool ServerMonitor
	{
		[Token(Token = "0x6001535")]
		[Address(RVA = "0x11B06D0", Offset = "0x11B06D0", VA = "0x11B06D0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001536")]
		[Address(RVA = "0x11B06D8", Offset = "0x11B06D8", VA = "0x11B06D8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001537")]
	[Address(RVA = "0x11B06E4", Offset = "0x11B06E4", VA = "0x11B06E4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0x11B07E8", Offset = "0x11B07E8", VA = "0x11B07E8", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001539")]
	[Address(RVA = "0x11B0A70", Offset = "0x11B0A70", VA = "0x11B0A70")]
	private void TrySubtractLife(HealthStatus healthStatus, BoltEntity boltEntity)
	{
	}

	[Token(Token = "0x600153A")]
	[Address(RVA = "0x11B0C98", Offset = "0x11B0C98", VA = "0x11B0C98")]
	private bool IsAliveOrNull(HealthStatus healthStatus)
	{
		return default(bool);
	}

	[Token(Token = "0x600153B")]
	[Address(RVA = "0x11B0D20", Offset = "0x11B0D20", VA = "0x11B0D20")]
	public State_ServerMultiplayerDeathListener()
	{
	}
}
[Token(Token = "0x20003A2")]
public class State_SessionToJoinExists : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x600153C")]
	[Address(RVA = "0x11B0DB0", Offset = "0x11B0DB0", VA = "0x11B0DB0", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600153D")]
	[Address(RVA = "0x11B11A8", Offset = "0x11B11A8", VA = "0x11B11A8")]
	public State_SessionToJoinExists()
	{
	}
}
[Token(Token = "0x20003A3")]
public class State_SetServerGameState : BaseStateAttachedLogic
{
	[Token(Token = "0x17000329")]
	[StateConfig("Desired Game State")]
	public MultiplayerGameState DesiredState
	{
		[Token(Token = "0x600153E")]
		[Address(RVA = "0x11B11B0", Offset = "0x11B11B0", VA = "0x11B11B0")]
		[CompilerGenerated]
		get
		{
			return default(MultiplayerGameState);
		}
		[Token(Token = "0x600153F")]
		[Address(RVA = "0x11B11B8", Offset = "0x11B11B8", VA = "0x11B11B8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001540")]
	[Address(RVA = "0x11B11C0", Offset = "0x11B11C0", VA = "0x11B11C0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001541")]
	[Address(RVA = "0x11B12E0", Offset = "0x11B12E0", VA = "0x11B12E0")]
	public State_SetServerGameState()
	{
	}
}
[Token(Token = "0x20003A4")]
public class State_SetShowErrorDialogueOnConnectionFailure : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x6001542")]
	[Address(RVA = "0x11B12E8", Offset = "0x11B12E8", VA = "0x11B12E8", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001543")]
	[Address(RVA = "0x11B1378", Offset = "0x11B1378", VA = "0x11B1378")]
	public State_SetShowErrorDialogueOnConnectionFailure()
	{
	}
}
[Token(Token = "0x20003A5")]
public class State_UnloadMultiplayerHub : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x20003A6")]
	[CompilerGenerated]
	private sealed class <MonitorSceneUnload>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.AsyncOperation op;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public State_UnloadMultiplayerHub <>4__this;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WaitForSecondsRealtime <wait>5__2;

		[Token(Token = "0x1700032A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600154A")]
			[Address(RVA = "0x11B1640", Offset = "0x11B1640", VA = "0x11B1640", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600154C")]
			[Address(RVA = "0x11B1688", Offset = "0x11B1688", VA = "0x11B1688", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0x11B1514", Offset = "0x11B1514", VA = "0x11B1514")]
		[DebuggerHidden]
		public <MonitorSceneUnload>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0x11B1544", Offset = "0x11B1544", VA = "0x11B1544", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x11B1548", Offset = "0x11B1548", VA = "0x11B1548", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x11B1648", Offset = "0x11B1648", VA = "0x11B1648", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001146")]
	private const string c_multiplayerHubSceneName = "MultiplayerHub";

	[Token(Token = "0x6001544")]
	[Address(RVA = "0x11B1380", Offset = "0x11B1380", VA = "0x11B1380", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001545")]
	[Address(RVA = "0x11B1484", Offset = "0x11B1484", VA = "0x11B1484")]
	[IteratorStateMachine(typeof(<MonitorSceneUnload>d__2))]
	private IEnumerator MonitorSceneUnload(UnityEngine.AsyncOperation op)
	{
		return null;
	}

	[Token(Token = "0x6001546")]
	[Address(RVA = "0x11B153C", Offset = "0x11B153C", VA = "0x11B153C")]
	public State_UnloadMultiplayerHub()
	{
	}
}
[Token(Token = "0x20003A7")]
public class State_UnloadMultiplayerScene : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x20003A8")]
	[CompilerGenerated]
	private sealed class <MonitorSceneUnload>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.AsyncOperation op;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public State_UnloadMultiplayerScene <>4__this;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WaitForSecondsRealtime <wait>5__2;

		[Token(Token = "0x1700032D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001557")]
			[Address(RVA = "0x11B1DA4", Offset = "0x11B1DA4", VA = "0x11B1DA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700032E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001559")]
			[Address(RVA = "0x11B1DEC", Offset = "0x11B1DEC", VA = "0x11B1DEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x11B1C94", Offset = "0x11B1C94", VA = "0x11B1C94")]
		[DebuggerHidden]
		public <MonitorSceneUnload>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0x11B1CC4", Offset = "0x11B1CC4", VA = "0x11B1CC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0x11B1CC8", Offset = "0x11B1CC8", VA = "0x11B1CC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0x11B1DAC", Offset = "0x11B1DAC", VA = "0x11B1DAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x1700032C")]
	[StateConfig("Reset MultiplayerGameManager")]
	public bool ResetMultiplayerGameManager
	{
		[Token(Token = "0x600154D")]
		[Address(RVA = "0x11B1690", Offset = "0x11B1690", VA = "0x11B1690")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600154E")]
		[Address(RVA = "0x11B1698", Offset = "0x11B1698", VA = "0x11B1698")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600154F")]
	[Address(RVA = "0x11B16A4", Offset = "0x11B16A4", VA = "0x11B16A4", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001550")]
	[Address(RVA = "0x11B1B54", Offset = "0x11B1B54", VA = "0x11B1B54")]
	private void MapUnloaded()
	{
	}

	[Token(Token = "0x6001551")]
	[Address(RVA = "0x11B1C04", Offset = "0x11B1C04", VA = "0x11B1C04")]
	[IteratorStateMachine(typeof(<MonitorSceneUnload>d__6))]
	private IEnumerator MonitorSceneUnload(UnityEngine.AsyncOperation op)
	{
		return null;
	}

	[Token(Token = "0x6001552")]
	[Address(RVA = "0x11B1A98", Offset = "0x11B1A98", VA = "0x11B1A98")]
	private bool IsSceneLoaded(string sceneName)
	{
		return default(bool);
	}

	[Token(Token = "0x6001553")]
	[Address(RVA = "0x11B1CBC", Offset = "0x11B1CBC", VA = "0x11B1CBC")]
	public State_UnloadMultiplayerScene()
	{
	}
}
[Token(Token = "0x20003A9")]
public class State_WaitForFallen : BaseStateAttachedLogic
{
	[Token(Token = "0x600155A")]
	[Address(RVA = "0x11B1DF4", Offset = "0x11B1DF4", VA = "0x11B1DF4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600155B")]
	[Address(RVA = "0x11B1EB4", Offset = "0x11B1EB4", VA = "0x11B1EB4")]
	private void OnGlobalFallenEvent(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x600155C")]
	[Address(RVA = "0x11B1FAC", Offset = "0x11B1FAC", VA = "0x11B1FAC", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600155D")]
	[Address(RVA = "0x11B206C", Offset = "0x11B206C", VA = "0x11B206C")]
	public State_WaitForFallen()
	{
	}
}
[Token(Token = "0x20003AA")]
public class State_WaitForRescue : BaseStateAttachedLogic
{
	[Token(Token = "0x600155E")]
	[Address(RVA = "0x11B2074", Offset = "0x11B2074", VA = "0x11B2074", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600155F")]
	[Address(RVA = "0x11B2134", Offset = "0x11B2134", VA = "0x11B2134")]
	private void OnRescue(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6001560")]
	[Address(RVA = "0x11B222C", Offset = "0x11B222C", VA = "0x11B222C", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001561")]
	[Address(RVA = "0x11B22EC", Offset = "0x11B22EC", VA = "0x11B22EC")]
	public State_WaitForRescue()
	{
	}
}
[Token(Token = "0x20003AB")]
public class State_WaitForSessionList : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_boltSessionListUpdated;

	[Token(Token = "0x4001153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_timeout;

	[Token(Token = "0x4001154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_time;

	[Token(Token = "0x6001562")]
	[Address(RVA = "0x11B22F4", Offset = "0x11B22F4", VA = "0x11B22F4", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001563")]
	[Address(RVA = "0x11B243C", Offset = "0x11B243C", VA = "0x11B243C", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001564")]
	[Address(RVA = "0x11B2574", Offset = "0x11B2574", VA = "0x11B2574")]
	private void OnSessionConnectedUpdated(Map<Guid, UdpSession> obj)
	{
	}

	[Token(Token = "0x6001565")]
	[Address(RVA = "0x11B2580", Offset = "0x11B2580", VA = "0x11B2580", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001566")]
	[Address(RVA = "0x11B26BC", Offset = "0x11B26BC", VA = "0x11B26BC")]
	public State_WaitForSessionList()
	{
	}
}
[Token(Token = "0x20003AC")]
public class State_WaitGameState : BaseStateAttachedLogic
{
	[Token(Token = "0x1700032F")]
	[StateConfig("Desired Game State")]
	public MultiplayerGameState DesiredState
	{
		[Token(Token = "0x6001567")]
		[Address(RVA = "0x11B26CC", Offset = "0x11B26CC", VA = "0x11B26CC")]
		[CompilerGenerated]
		get
		{
			return default(MultiplayerGameState);
		}
		[Token(Token = "0x6001568")]
		[Address(RVA = "0x11B26D4", Offset = "0x11B26D4", VA = "0x11B26D4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001569")]
	[Address(RVA = "0x11B26DC", Offset = "0x11B26DC", VA = "0x11B26DC", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600156A")]
	[Address(RVA = "0x11B27A4", Offset = "0x11B27A4", VA = "0x11B27A4")]
	public State_WaitGameState()
	{
	}
}
[Token(Token = "0x20003AD")]
public class State_WaitReceiveConnection : BaseStateAttachedLogic
{
	[Token(Token = "0x4001156")]
	private const string c_startGameExitPointName = "start";

	[Token(Token = "0x4001158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_waitCounter;

	[Token(Token = "0x17000330")]
	[StateConfig("Max Wait Time")]
	public float MaxWaitTime
	{
		[Token(Token = "0x600156B")]
		[Address(RVA = "0x11B27AC", Offset = "0x11B27AC", VA = "0x11B27AC")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600156C")]
		[Address(RVA = "0x11B27B4", Offset = "0x11B27B4", VA = "0x11B27B4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600156D")]
	[Address(RVA = "0x11B27BC", Offset = "0x11B27BC", VA = "0x11B27BC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600156E")]
	[Address(RVA = "0x11B27D8", Offset = "0x11B27D8", VA = "0x11B27D8", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600156F")]
	[Address(RVA = "0x11B297C", Offset = "0x11B297C", VA = "0x11B297C")]
	public State_WaitReceiveConnection()
	{
	}
}
[Token(Token = "0x20003AE")]
public enum MultiplayerGameplayEvent
{
	[Token(Token = "0x400115A")]
	LevelStart,
	[Token(Token = "0x400115B")]
	LevelComplete,
	[Token(Token = "0x400115C")]
	WaveStart,
	[Token(Token = "0x400115D")]
	WaveComplete,
	[Token(Token = "0x400115E")]
	WaveCountdownBegin,
	[Token(Token = "0x400115F")]
	FirstSpawn,
	[Token(Token = "0x4001160")]
	PlayerJoin,
	[Token(Token = "0x4001161")]
	PlayerLeave,
	[Token(Token = "0x4001162")]
	PlayerDeath,
	[Token(Token = "0x4001163")]
	GameStateChanged,
	[Token(Token = "0x4001164")]
	WavePaused,
	[Token(Token = "0x4001165")]
	WaveRestarted,
	[Token(Token = "0x4001166")]
	FocalPointComplete
}
[Token(Token = "0x20003AF")]
public static class MultiplayerGameplayEvents
{
	[Token(Token = "0x4001174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static Dictionary<MultiplayerGameplayEvent, Action<int>> EventMapping;

	[Token(Token = "0x14000009")]
	public static event Action<int> OnLevelStart
	{
		[Token(Token = "0x6001570")]
		[Address(RVA = "0x11B2984", Offset = "0x11B2984", VA = "0x11B2984")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001571")]
		[Address(RVA = "0x11B2A74", Offset = "0x11B2A74", VA = "0x11B2A74")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public static event Action<int> OnLevelComplete
	{
		[Token(Token = "0x6001572")]
		[Address(RVA = "0x11B2B64", Offset = "0x11B2B64", VA = "0x11B2B64")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001573")]
		[Address(RVA = "0x11B2C58", Offset = "0x11B2C58", VA = "0x11B2C58")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public static event Action<int> OnWaveStart
	{
		[Token(Token = "0x6001574")]
		[Address(RVA = "0x11B2D4C", Offset = "0x11B2D4C", VA = "0x11B2D4C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001575")]
		[Address(RVA = "0x11B2E40", Offset = "0x11B2E40", VA = "0x11B2E40")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public static event Action<int> OnWaveComplete
	{
		[Token(Token = "0x6001576")]
		[Address(RVA = "0x11B2F34", Offset = "0x11B2F34", VA = "0x11B2F34")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001577")]
		[Address(RVA = "0x11B3028", Offset = "0x11B3028", VA = "0x11B3028")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public static event Action<int> OnWaveCountdownBegin
	{
		[Token(Token = "0x6001578")]
		[Address(RVA = "0x11B311C", Offset = "0x11B311C", VA = "0x11B311C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001579")]
		[Address(RVA = "0x11B3210", Offset = "0x11B3210", VA = "0x11B3210")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public static event Action<int> OnFirstSpawn
	{
		[Token(Token = "0x600157A")]
		[Address(RVA = "0x11B3304", Offset = "0x11B3304", VA = "0x11B3304")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600157B")]
		[Address(RVA = "0x11B33F8", Offset = "0x11B33F8", VA = "0x11B33F8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public static event Action<int> OnPlayerJoin
	{
		[Token(Token = "0x600157C")]
		[Address(RVA = "0x11B34EC", Offset = "0x11B34EC", VA = "0x11B34EC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600157D")]
		[Address(RVA = "0x11B35E0", Offset = "0x11B35E0", VA = "0x11B35E0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public static event Action<int> OnPlayerLeave
	{
		[Token(Token = "0x600157E")]
		[Address(RVA = "0x11B36D4", Offset = "0x11B36D4", VA = "0x11B36D4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600157F")]
		[Address(RVA = "0x11B37C8", Offset = "0x11B37C8", VA = "0x11B37C8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public static event Action<int> OnPlayerDeath
	{
		[Token(Token = "0x6001580")]
		[Address(RVA = "0x11B38BC", Offset = "0x11B38BC", VA = "0x11B38BC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001581")]
		[Address(RVA = "0x11B39B0", Offset = "0x11B39B0", VA = "0x11B39B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public static event Action<int> OnGameStateChanged
	{
		[Token(Token = "0x6001582")]
		[Address(RVA = "0x11B3AA4", Offset = "0x11B3AA4", VA = "0x11B3AA4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001583")]
		[Address(RVA = "0x11B3B98", Offset = "0x11B3B98", VA = "0x11B3B98")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public static event Action<int> OnWavePaused
	{
		[Token(Token = "0x6001584")]
		[Address(RVA = "0x11B3C8C", Offset = "0x11B3C8C", VA = "0x11B3C8C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001585")]
		[Address(RVA = "0x11B3D80", Offset = "0x11B3D80", VA = "0x11B3D80")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public static event Action<int> OnWaveRestarted
	{
		[Token(Token = "0x6001586")]
		[Address(RVA = "0x11B3E74", Offset = "0x11B3E74", VA = "0x11B3E74")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001587")]
		[Address(RVA = "0x11B3F68", Offset = "0x11B3F68", VA = "0x11B3F68")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public static event Action<int> OnFocalPointComplete
	{
		[Token(Token = "0x6001588")]
		[Address(RVA = "0x11B405C", Offset = "0x11B405C", VA = "0x11B405C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001589")]
		[Address(RVA = "0x11B4150", Offset = "0x11B4150", VA = "0x11B4150")]
		[CompilerGenerated]
		remove
		{
		}
	}
}
[Serializable]
[Token(Token = "0x20003B0")]
public class MultiplayerGameplayUnityEvents
{
	[Token(Token = "0x4001175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent OnLevelStart;

	[Token(Token = "0x4001176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnLevelComplete;

	[Token(Token = "0x4001177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnWaveStart;

	[Token(Token = "0x4001178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnWaveComplete;

	[Token(Token = "0x4001179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnWaveCountdownBegin;

	[Token(Token = "0x400117A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnFirstSpawn;

	[Token(Token = "0x400117B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnPlayerJoin;

	[Token(Token = "0x400117C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent OnPlayerLeave;

	[Token(Token = "0x400117D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnPlayerDeath;

	[Token(Token = "0x400117E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent OnAllyDeath;

	[Token(Token = "0x400117F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent OnGameStateChanged;

	[Token(Token = "0x4001180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent OnWavePaused;

	[Token(Token = "0x4001181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent OnWaveRestarted;

	[Token(Token = "0x4001182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent OnFocalPointComplete;

	[Token(Token = "0x600158B")]
	[Address(RVA = "0x11B4454", Offset = "0x11B4454", VA = "0x11B4454")]
	public MultiplayerGameplayUnityEvents()
	{
	}
}
[Token(Token = "0x20003B1")]
[DisallowMultipleComponent]
public class MultiplayerItemDropAreaDirectory : PT.SceneContentsDirectory.SceneContentsDirectory<MultiplayerItemDropArea, MultiplayerItemDropAreaDirectory>
{
	[Token(Token = "0x600158C")]
	[Address(RVA = "0x11B46D0", Offset = "0x11B46D0", VA = "0x11B46D0")]
	public MultiplayerItemDropAreaDirectory()
	{
	}
}
[Token(Token = "0x20003B2")]
[RequireComponent(typeof(StreamingVolume))]
public class MultiplayerStreamingVolume : MonoBehaviour
{
	[Token(Token = "0x4001183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StreamingVolume m_streamingVolume;

	[Token(Token = "0x17000331")]
	private StreamingVolume StreamingVolume
	{
		[Token(Token = "0x600158D")]
		[Address(RVA = "0x11B473C", Offset = "0x11B473C", VA = "0x11B473C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600158E")]
	[Address(RVA = "0x11B47E4", Offset = "0x11B47E4", VA = "0x11B47E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600158F")]
	[Address(RVA = "0x11B485C", Offset = "0x11B485C", VA = "0x11B485C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0x11B48D4", Offset = "0x11B48D4", VA = "0x11B48D4")]
	public MultiplayerStreamingVolume()
	{
	}
}
[Token(Token = "0x20003B3")]
public class EntitySync : NetworkEntityBase<IEntityState>
{
	[Token(Token = "0x6001591")]
	[Address(RVA = "0x11B48DC", Offset = "0x11B48DC", VA = "0x11B48DC", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0x11B4A64", Offset = "0x11B4A64", VA = "0x11B4A64")]
	public EntitySync()
	{
	}
}
[Token(Token = "0x20003B4")]
public interface INetworkControllableEntity : INetworkEntity
{
	[Token(Token = "0x17000332")]
	bool IsInInventory
	{
		[Token(Token = "0x6001598")]
		set;
	}

	[Token(Token = "0x6001593")]
	void QueueLocalInputs(Vector3 position, Quaternion rotation, Vector3 velocity, Vector3 angularVelocity, bool release = false);

	[Token(Token = "0x6001594")]
	bool AttemptAssignControl(BoltEntity boltEntity, BoltConnection boltConnection, [Optional] Action callback, bool forceRevokeControl = false);

	[Token(Token = "0x6001595")]
	bool AttemptRevokeControl(BoltEntity boltEntity, [Optional] Action callback);

	[Token(Token = "0x6001596")]
	bool AttemptRevokeControl();

	[Token(Token = "0x6001597")]
	bool HasControl();
}
[Token(Token = "0x20003B5")]
public interface INetworkEntity
{
	[Token(Token = "0x17000333")]
	bool isRigidbodySleeping
	{
		[Token(Token = "0x6001599")]
		get;
	}

	[Token(Token = "0x600159A")]
	void SetRigidbodyKinematic(bool isKinematic);

	[Token(Token = "0x600159B")]
	void RestoreRigidBodyDefaults();
}
[Token(Token = "0x20003B6")]
public interface INetworkInteractableEntity : INetworkControllableEntity, INetworkEntity
{
	[Token(Token = "0x17000334")]
	bool preemtiveInteraction
	{
		[Token(Token = "0x60015A0")]
		get;
	}

	[Token(Token = "0x600159C")]
	void RequestStartInteracting(VrHand hand, GraspMarker marker, bool isSwapping, bool isFromHandScan);

	[Token(Token = "0x600159D")]
	void StopInteraction(VrHand hand, int graspMarkerIndex, bool isSwapping, bool isKeyInsertion, bool isHeldByOtherHands);

	[Token(Token = "0x600159E")]
	bool QueueInputConditionsMet();

	[Token(Token = "0x600159F")]
	void SetInteractingLocally(bool interacting);

	[Token(Token = "0x60015A1")]
	void ResetPreEmptitiveInteraction(BoltEntity interactionItem, bool success);
}
[Token(Token = "0x20003B7")]
public interface INetworkMechanismKey
{
	[Token(Token = "0x17000335")]
	string name
	{
		[Token(Token = "0x60015A2")]
		get;
	}

	[Token(Token = "0x17000336")]
	MechanismKey Key
	{
		[Token(Token = "0x60015A3")]
		get;
	}

	[Token(Token = "0x17000337")]
	GameObject gameObject
	{
		[Token(Token = "0x60015A4")]
		get;
	}

	[Token(Token = "0x17000338")]
	BoltEntity entity
	{
		[Token(Token = "0x60015A5")]
		get;
	}

	[Token(Token = "0x17000339")]
	IKeyState state
	{
		[Token(Token = "0x60015A6")]
		get;
	}
}
[Token(Token = "0x20003B8")]
public interface INetworkVrItem
{
	[Token(Token = "0x60015A7")]
	VrItem GetVrItem();

	[Token(Token = "0x60015A8")]
	GraspMarker[] GetGraspMarkers();
}
[Token(Token = "0x20003B9")]
public abstract class NetworkControllableEntityBase<TState> : NetworkEntityBase<TState>, INetworkControllableEntity, INetworkEntity where TState : IEntityState
{
	[Token(Token = "0x4001184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected Action OnControlGainedAction;

	[Token(Token = "0x4001185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected Action OnControlLostAction;

	[Token(Token = "0x4001187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected bool m_isInInventory;

	[Token(Token = "0x4001188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected bool m_isSleeping;

	[Token(Token = "0x4001189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool m_wasControlled;

	[Token(Token = "0x400118A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected bool m_enqueueInputData;

	[Token(Token = "0x400118B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x1700033A")]
	public bool IsInInventory
	{
		[Token(Token = "0x60015AB")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60015AC")]
		set
		{
		}
	}

	[Token(Token = "0x14000016")]
	private event Action OnControlChangedAction
	{
		[Token(Token = "0x60015A9")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60015AA")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60015AD")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60015AE")]
	private void OnControlChanged()
	{
	}

	[Token(Token = "0x60015AF")]
	public override void Detached()
	{
	}

	[Token(Token = "0x60015B0")]
	public override void ControlGained()
	{
	}

	[Token(Token = "0x60015B1")]
	public override void ControlLost()
	{
	}

	[Token(Token = "0x60015B2")]
	public virtual void QueueLocalInputs(Vector3 position, Quaternion rotation, Vector3 velocity, Vector3 angularVelocity, bool release = false)
	{
	}

	[Token(Token = "0x60015B3")]
	protected virtual void PopulateInputData(ref INetworkEntityCommandInput input)
	{
	}

	[Token(Token = "0x60015B4")]
	public override void SimulateController()
	{
	}

	[Token(Token = "0x60015B5")]
	public bool AttemptAssignControl(BoltEntity boltEntity, BoltConnection raisedBy, [Optional] Action callback, bool forceRevokeControl = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60015B6")]
	public bool AttemptRevokeControl()
	{
		return default(bool);
	}

	[Token(Token = "0x60015B7")]
	public bool AttemptRevokeControl(BoltEntity boltEntity, [Optional] Action callback)
	{
		return default(bool);
	}

	[Token(Token = "0x60015B8")]
	public virtual bool HasControl()
	{
		return default(bool);
	}

	[Token(Token = "0x60015B9")]
	public override void RestoreRigidBodyDefaults()
	{
	}

	[Token(Token = "0x60015BA")]
	protected bool IsStationary()
	{
		return default(bool);
	}

	[Token(Token = "0x60015BB")]
	private bool Approximately(float a, float b, float threshold)
	{
		return default(bool);
	}

	[Token(Token = "0x60015BC")]
	protected NetworkControllableEntityBase()
	{
	}
}
[Token(Token = "0x20003BA")]
public abstract class NetworkEntityBase<TState> : EntityEventListener<TState>, INetworkEntity where TState : IEntityState
{
	[Token(Token = "0x400118C")]
	protected const bool c_forceNonOwnedAndControlledRigidBodiesToKinematic = true;

	[Token(Token = "0x400118D")]
	protected const bool c_useDesignSetDefaultsForRigidBodies = true;

	[Token(Token = "0x400118E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	protected bool m_useEventCommands;

	[Token(Token = "0x400118F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	[UnityEngine.Tooltip("The transform of the object to replicate over the network. If left null then this transform will be used.")]
	private Transform m_transformToReplicate;

	[Token(Token = "0x4001190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected Rigidbody m_rigidbody;

	[Token(Token = "0x4001191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal Action OnAttached;

	[Token(Token = "0x4001192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal Action OnDetached;

	[Token(Token = "0x4001193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected Vector3 m_startPosition;

	[Token(Token = "0x4001194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected Vector3 m_startEuler;

	[Token(Token = "0x4001195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected RigidbodyInterpolation m_defaultRigidbodyInterpolation;

	[Token(Token = "0x4001196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected CollisionDetectionMode m_defaultCollisionDetectionMode;

	[Token(Token = "0x4001197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected bool m_defaultKinematicSetting;

	[Token(Token = "0x4001198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected bool m_defaultGravitySetting;

	[Token(Token = "0x4001199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool m_isRigidbodySleeping;

	[Token(Token = "0x400119A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string s_typeName;

	[Token(Token = "0x400119B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x1700033B")]
	public Rigidbody Rigidbody
	{
		[Token(Token = "0x60015BE")]
		set
		{
		}
	}

	[Token(Token = "0x1700033C")]
	public virtual Transform interactableTransform
	{
		[Token(Token = "0x60015BF")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700033D")]
	private bool INetworkEntity.isRigidbodySleeping
	{
		[Token(Token = "0x60015C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60015C1")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60015C2")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60015C3")]
	public override void Attached()
	{
	}

	[Token(Token = "0x60015C4")]
	private void ResetObjectToOriginalState()
	{
	}

	[Token(Token = "0x60015C5")]
	public override void Detached()
	{
	}

	[Token(Token = "0x60015C6")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x60015C7")]
	private void OnSleepingChanged()
	{
	}

	[Token(Token = "0x60015C8")]
	public override void SimulateController()
	{
	}

	[Token(Token = "0x60015C9")]
	public override void ExecuteCommand(Command command, bool resetState)
	{
	}

	[Token(Token = "0x60015CA")]
	public override void OnEvent(EntityCommandEvent evnt)
	{
	}

	[Token(Token = "0x60015CB")]
	protected void SetRigidbodyProperties(RigidbodyInterpolation prop1, CollisionDetectionMode prop2)
	{
	}

	[Token(Token = "0x60015CC")]
	public void SetRigidbodyKinematic(bool isKinematic)
	{
	}

	[Token(Token = "0x60015CD")]
	public void SetRigidbodyKinematic(bool isKinematic, bool useGravity)
	{
	}

	[Token(Token = "0x60015CE")]
	public virtual void RestoreRigidBodyDefaults()
	{
	}

	[Token(Token = "0x60015CF")]
	protected NetworkEntityBase()
	{
	}
}
[Token(Token = "0x20003BB")]
public static class NetworkEntityExtensionMethods
{
	[Token(Token = "0x60015D1")]
	[Address(RVA = "0x11B4AD0", Offset = "0x11B4AD0", VA = "0x11B4AD0")]
	public static void SetKeyhole(this INetworkMechanismKey owner, MechanismKeyhole keyhole, [Optional] MechanismKey.KeyEjectionContext? context)
	{
	}

	[Token(Token = "0x60015D2")]
	[Address(RVA = "0x11B4D74", Offset = "0x11B4D74", VA = "0x11B4D74")]
	public static void OnServerChangedKeyState(this INetworkMechanismKey owner)
	{
	}
}
[Token(Token = "0x20003BC")]
public abstract class NetworkInteractableEntityBase<TState> : NetworkControllableEntityBase<TState>, INetworkInteractableEntity, INetworkControllableEntity, INetworkEntity where TState : IEntityState
{
	[Token(Token = "0x20003BD")]
	[CompilerGenerated]
	private sealed class <WaitForMagnitudeOrTimeout>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object <>2__current;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public NetworkInteractableEntityBase<TState> <>4__this;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float <maxTimeout>5__2;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float <timeout>5__3;

		[Token(Token = "0x17000342")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015E8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000343")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015EA")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015E5")]
		[DebuggerHidden]
		public <WaitForMagnitudeOrTimeout>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60015E6")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015E7")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E9")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400119C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private GraspMarker[] m_graspMarkers;

	[Token(Token = "0x400119D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected bool m_interactingLocally;

	[Token(Token = "0x400119E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool m_canLoseControl;

	[Token(Token = "0x400119F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private WorldInteraction_Hold m_worldInteractionHold;

	[Token(Token = "0x40011A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private bool m_preemptitiveInteraction;

	[Token(Token = "0x1700033E")]
	public bool CanLoseControl
	{
		[Token(Token = "0x60015D3")]
		set
		{
		}
	}

	[Token(Token = "0x1700033F")]
	private bool INetworkInteractableEntity.preemtiveInteraction
	{
		[Token(Token = "0x60015D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000340")]
	public GraspMarker[] GraspMarkers
	{
		[Token(Token = "0x60015D5")]
		get
		{
			return null;
		}
		[Token(Token = "0x60015D6")]
		set
		{
		}
	}

	[Token(Token = "0x17000341")]
	public WorldInteraction_Hold WorldInteractionHold
	{
		[Token(Token = "0x60015D7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60015D8")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60015D9")]
	public override void Attached()
	{
	}

	[Token(Token = "0x60015DA")]
	public override void ControlGained()
	{
	}

	[Token(Token = "0x60015DB")]
	public override void ControlLost()
	{
	}

	[Token(Token = "0x60015DC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60015DD")]
	public void SetInteractingLocally(bool interacting)
	{
	}

	[Token(Token = "0x60015DE")]
	public void RequestStartInteracting(VrHand hand, GraspMarker marker, bool isSwapping, bool isFromHandScan)
	{
	}

	[Token(Token = "0x60015DF")]
	private void INetworkInteractableEntity.ResetPreEmptitiveInteraction(BoltEntity interactionItem, bool success)
	{
	}

	[Token(Token = "0x60015E0")]
	public void StopInteraction(VrHand hand, int graspMarkerIndex, bool isSwapping, bool isKeyInsertion, bool isHeldByOtherHands)
	{
	}

	[Token(Token = "0x60015E1")]
	public bool QueueInputConditionsMet()
	{
		return default(bool);
	}

	[Token(Token = "0x60015E2")]
	public override void QueueLocalInputs(Vector3 position, Quaternion rotation, Vector3 velocity, Vector3 angularVelocity, bool release = false)
	{
	}

	[Token(Token = "0x60015E3")]
	[IteratorStateMachine(typeof(NetworkInteractableEntityBase<>.<WaitForMagnitudeOrTimeout>d__25))]
	private IEnumerator WaitForMagnitudeOrTimeout()
	{
		return null;
	}

	[Token(Token = "0x60015E4")]
	protected NetworkInteractableEntityBase()
	{
	}
}
[Token(Token = "0x20003BE")]
[RequireComponent(typeof(VrItem))]
public abstract class NetworkVrItem<TState> : NetworkInteractableEntityBase<TState>, INetworkVrItem where TState : IEntityState
{
	[Token(Token = "0x40011A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected VrItem m_vrItem;

	[Token(Token = "0x60015EB")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60015EC")]
	public VrItem GetVrItem()
	{
		return null;
	}

	[Token(Token = "0x60015ED")]
	public GraspMarker[] GetGraspMarkers()
	{
		return null;
	}

	[Token(Token = "0x60015EE")]
	protected NetworkVrItem()
	{
	}
}
[Token(Token = "0x20003BF")]
public interface INetworkMechanismKeyhole
{
	[Token(Token = "0x17000344")]
	MechanismKeyhole Keyhole
	{
		[Token(Token = "0x60015EF")]
		get;
	}

	[Token(Token = "0x17000345")]
	BoltEntity BoltEntity
	{
		[Token(Token = "0x60015F0")]
		get;
	}
}
[Token(Token = "0x20003C0")]
internal class InteractionEventData
{
	[Token(Token = "0x40011A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BoltEntity Item;

	[Token(Token = "0x40011A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BoltEntity Player;

	[Token(Token = "0x40011A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int GraspMarkerIndex;

	[Token(Token = "0x40011AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsHeldByOtherHands;

	[Token(Token = "0x40011AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Controller;

	[Token(Token = "0x40011AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsSwapping;

	[Token(Token = "0x40011AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool IsKeyInsertion;

	[Token(Token = "0x40011AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool IsFromHandScan;

	[Token(Token = "0x40011AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool Start;

	[Token(Token = "0x40011B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int RequesterConnectionId;

	[Token(Token = "0x40011B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool RemovalFlag;

	[Token(Token = "0x60015F1")]
	[Address(RVA = "0x11B5264", Offset = "0x11B5264", VA = "0x11B5264")]
	public InteractionEventData(InteractionEvent evnt)
	{
	}
}
[Token(Token = "0x20003C1")]
public class NetworkBarricadeKeyhole : NetworkEntityBase<IBarricadeKeyholeState>, INetworkMechanismKeyhole
{
	[Token(Token = "0x40011B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private MechanismKeyhole m_keyhole;

	[Token(Token = "0x40011B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private HealthStatus m_rootHealthStatus;

	[Token(Token = "0x40011B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x17000346")]
	public MechanismKeyhole Keyhole
	{
		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x11B5360", Offset = "0x11B5360", VA = "0x11B5360", Slot = "154")]
		get
		{
			return null;
		}
		[Token(Token = "0x60015F3")]
		[Address(RVA = "0x11B5368", Offset = "0x11B5368", VA = "0x11B5368")]
		set
		{
		}
	}

	[Token(Token = "0x17000347")]
	public BoltEntity BoltEntity
	{
		[Token(Token = "0x60015F4")]
		[Address(RVA = "0x11B5370", Offset = "0x11B5370", VA = "0x11B5370", Slot = "155")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60015F5")]
	[Address(RVA = "0x11B5378", Offset = "0x11B5378", VA = "0x11B5378", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x60015F6")]
	[Address(RVA = "0x11B57F4", Offset = "0x11B57F4", VA = "0x11B57F4", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x60015F7")]
	[Address(RVA = "0x11B57F8", Offset = "0x11B57F8", VA = "0x11B57F8")]
	private void KillAgent()
	{
	}

	[Token(Token = "0x60015F8")]
	[Address(RVA = "0x11B5680", Offset = "0x11B5680", VA = "0x11B5680")]
	private void ResetAgent()
	{
	}

	[Token(Token = "0x60015F9")]
	[Address(RVA = "0x11B5838", Offset = "0x11B5838", VA = "0x11B5838")]
	public void ResetBarricade()
	{
	}

	[Token(Token = "0x60015FA")]
	[Address(RVA = "0x11B5904", Offset = "0x11B5904", VA = "0x11B5904", Slot = "20")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x60015FB")]
	[Address(RVA = "0x11B5CAC", Offset = "0x11B5CAC", VA = "0x11B5CAC", Slot = "152")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60015FC")]
	[Address(RVA = "0x11B5D08", Offset = "0x11B5D08", VA = "0x11B5D08")]
	public NetworkBarricadeKeyhole()
	{
	}
}
[Token(Token = "0x20003C2")]
public class NetworkLight : EntityEventListener<ILightState>
{
	[Token(Token = "0x40011B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Light m_light;

	[Token(Token = "0x60015FE")]
	[Address(RVA = "0x11B5E00", Offset = "0x11B5E00", VA = "0x11B5E00")]
	private void Start()
	{
	}

	[Token(Token = "0x60015FF")]
	[Address(RVA = "0x11B5E58", Offset = "0x11B5E58", VA = "0x11B5E58")]
	private void Update()
	{
	}

	[Token(Token = "0x6001600")]
	[Address(RVA = "0x11B6068", Offset = "0x11B6068", VA = "0x11B6068", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001601")]
	[Address(RVA = "0x11B6270", Offset = "0x11B6270", VA = "0x11B6270")]
	private void LightIntesityCallback()
	{
	}

	[Token(Token = "0x6001602")]
	[Address(RVA = "0x11B6344", Offset = "0x11B6344", VA = "0x11B6344")]
	private void LightOnCallback()
	{
	}

	[Token(Token = "0x6001603")]
	[Address(RVA = "0x11B6420", Offset = "0x11B6420", VA = "0x11B6420")]
	public NetworkLight()
	{
	}
}
[Token(Token = "0x20003C3")]
[RequireComponent(typeof(MechanismKey))]
public class NetworkMechanismKey : NetworkVrItem<IKeyState>, INetworkMechanismKey
{
	[Token(Token = "0x40011B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private MechanismKey m_key;

	[Token(Token = "0x17000348")]
	public MechanismKey Key
	{
		[Token(Token = "0x6001604")]
		[Address(RVA = "0x11B6468", Offset = "0x11B6468", VA = "0x11B6468", Slot = "172")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001605")]
	[Address(RVA = "0x11B6470", Offset = "0x11B6470", VA = "0x11B6470", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001606")]
	[Address(RVA = "0x11B6678", Offset = "0x11B6678", VA = "0x11B6678", Slot = "23")]
	public override void ControlLost()
	{
	}

	[Token(Token = "0x6001607")]
	[Address(RVA = "0x11B6868", Offset = "0x11B6868", VA = "0x11B6868")]
	public void SetKeyhole(MechanismKeyhole keyhole, [Optional] MechanismKey.KeyEjectionContext? context)
	{
	}

	[Token(Token = "0x6001608")]
	[Address(RVA = "0x11B6A64", Offset = "0x11B6A64", VA = "0x11B6A64", Slot = "153")]
	public override void RestoreRigidBodyDefaults()
	{
	}

	[Token(Token = "0x6001609")]
	[Address(RVA = "0x11B6BF8", Offset = "0x11B6BF8", VA = "0x11B6BF8")]
	public NetworkMechanismKey()
	{
	}

	[SpecialName]
	[Token(Token = "0x600160A")]
	[Address(RVA = "0x11B6C40", Offset = "0x11B6C40", VA = "0x11B6C40", Slot = "171")]
	private string INetworkMechanismKey.get_name()
	{
		return null;
	}

	[SpecialName]
	[Token(Token = "0x600160B")]
	[Address(RVA = "0x11B6C48", Offset = "0x11B6C48", VA = "0x11B6C48", Slot = "173")]
	private GameObject INetworkMechanismKey.get_gameObject()
	{
		return null;
	}

	[SpecialName]
	[Token(Token = "0x600160C")]
	[Address(RVA = "0x11B6C50", Offset = "0x11B6C50", VA = "0x11B6C50", Slot = "175")]
	private IKeyState INetworkMechanismKey.get_state()
	{
		return null;
	}
}
[Token(Token = "0x20003C4")]
public class NetworkMechanismKeyhole : NetworkControllableEntityBase<IKeyholeItemState>, INetworkMechanismKeyhole
{
	[Token(Token = "0x40011B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private MechanismKeyhole m_keyhole;

	[Token(Token = "0x17000349")]
	public MechanismKeyhole Keyhole
	{
		[Token(Token = "0x600160D")]
		[Address(RVA = "0x11B6C98", Offset = "0x11B6C98", VA = "0x11B6C98", Slot = "163")]
		get
		{
			return null;
		}
		[Token(Token = "0x600160E")]
		[Address(RVA = "0x11B6CA0", Offset = "0x11B6CA0", VA = "0x11B6CA0")]
		set
		{
		}
	}

	[Token(Token = "0x1700034A")]
	public BoltEntity BoltEntity
	{
		[Token(Token = "0x600160F")]
		[Address(RVA = "0x11B6CA8", Offset = "0x11B6CA8", VA = "0x11B6CA8", Slot = "164")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001610")]
	[Address(RVA = "0x11B6CB0", Offset = "0x11B6CB0", VA = "0x11B6CB0")]
	public NetworkMechanismKeyhole()
	{
	}
}
[Token(Token = "0x20003C5")]
public class NetworkMechanismState : MonoBehaviour
{
	[Token(Token = "0x20003C6")]
	[Flags]
	public enum MechanismEventMask
	{
		[Token(Token = "0x40011BC")]
		LowThreshold = 1,
		[Token(Token = "0x40011BD")]
		HighThreshold = 2,
		[Token(Token = "0x40011BE")]
		Locked = 4,
		[Token(Token = "0x40011BF")]
		UnLocked = 8
	}

	[Token(Token = "0x40011B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AbstractTriggeredMechanism m_mechanism;

	[Token(Token = "0x40011B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GuidComponent m_guidComponent;

	[Token(Token = "0x40011BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_raisedLocally;

	[Token(Token = "0x6001611")]
	[Address(RVA = "0x11B6D1C", Offset = "0x11B6D1C", VA = "0x11B6D1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001612")]
	[Address(RVA = "0x11B6F5C", Offset = "0x11B6F5C", VA = "0x11B6F5C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001613")]
	[Address(RVA = "0x11B7168", Offset = "0x11B7168", VA = "0x11B7168")]
	private void HandleLowThreshold()
	{
	}

	[Token(Token = "0x6001614")]
	[Address(RVA = "0x11B71E8", Offset = "0x11B71E8", VA = "0x11B71E8")]
	private void HandleHighThreshold()
	{
	}

	[Token(Token = "0x6001615")]
	[Address(RVA = "0x11B71F0", Offset = "0x11B71F0", VA = "0x11B71F0")]
	private void HandleLocked()
	{
	}

	[Token(Token = "0x6001616")]
	[Address(RVA = "0x11B71F8", Offset = "0x11B71F8", VA = "0x11B71F8")]
	private void HandleUnLocked()
	{
	}

	[Token(Token = "0x6001617")]
	[Address(RVA = "0x11B7170", Offset = "0x11B7170", VA = "0x11B7170")]
	private void SendEvent(MechanismEventMask eventMask)
	{
	}

	[Token(Token = "0x6001618")]
	[Address(RVA = "0x11B7200", Offset = "0x11B7200", VA = "0x11B7200")]
	public void OnEvent(MechanismStateEvent evnt)
	{
	}

	[Token(Token = "0x6001619")]
	[Address(RVA = "0x11B736C", Offset = "0x11B736C", VA = "0x11B736C")]
	public NetworkMechanismState()
	{
	}
}
[Token(Token = "0x20003C7")]
public class NetworkPhysicsObject : NetworkInteractableEntityBase<IEntityState>
{
	[Token(Token = "0x600161A")]
	[Address(RVA = "0x11B737C", Offset = "0x11B737C", VA = "0x11B737C", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x600161B")]
	[Address(RVA = "0x11B75AC", Offset = "0x11B75AC", VA = "0x11B75AC", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x600161C")]
	[Address(RVA = "0x11B7680", Offset = "0x11B7680", VA = "0x11B7680")]
	private void OnControlLost()
	{
	}

	[Token(Token = "0x600161D")]
	[Address(RVA = "0x11B7848", Offset = "0x11B7848", VA = "0x11B7848")]
	public NetworkPhysicsObject()
	{
	}
}
[Token(Token = "0x20003C8")]
public class NetworkVrAmmoBox : NetworkVrItem<IVrItemState>
{
	[Token(Token = "0x40011C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private WorldInteraction_Hold m_interactionHold;

	[Token(Token = "0x600161E")]
	[Address(RVA = "0x11B8890", Offset = "0x11B8890", VA = "0x11B8890")]
	private void Start()
	{
	}

	[Token(Token = "0x600161F")]
	[Address(RVA = "0x11B88E8", Offset = "0x11B88E8", VA = "0x11B88E8", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001620")]
	[Address(RVA = "0x11B8B8C", Offset = "0x11B8B8C", VA = "0x11B8B8C", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6001621")]
	[Address(RVA = "0x11B8C80", Offset = "0x11B8C80", VA = "0x11B8C80")]
	private void OnControlLost()
	{
	}

	[Token(Token = "0x6001622")]
	[Address(RVA = "0x11B8E48", Offset = "0x11B8E48", VA = "0x11B8E48")]
	public NetworkVrAmmoBox()
	{
	}
}
[Token(Token = "0x20003C9")]
public class NetworkVrBookshelf : NetworkVrItem<IBarricadeMechanismState>
{
	[Token(Token = "0x40011C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private HealthStatus m_rootHealthStatus;

	[Token(Token = "0x40011C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private MechanismSlide m_slide;

	[Token(Token = "0x40011C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private WorldInteraction m_attachedInteraction;

	[Token(Token = "0x6001623")]
	[Address(RVA = "0x11B8E90", Offset = "0x11B8E90", VA = "0x11B8E90")]
	private void Start()
	{
	}

	[Token(Token = "0x6001624")]
	[Address(RVA = "0x11B904C", Offset = "0x11B904C", VA = "0x11B904C", Slot = "152")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001625")]
	[Address(RVA = "0x11B91EC", Offset = "0x11B91EC", VA = "0x11B91EC", Slot = "20")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x6001626")]
	[Address(RVA = "0x11B9398", Offset = "0x11B9398", VA = "0x11B9398", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001627")]
	[Address(RVA = "0x11B9874", Offset = "0x11B9874", VA = "0x11B9874", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6001628")]
	[Address(RVA = "0x11B9904", Offset = "0x11B9904", VA = "0x11B9904", Slot = "22")]
	public override void ControlGained()
	{
	}

	[Token(Token = "0x6001629")]
	[Address(RVA = "0x11B994C", Offset = "0x11B994C", VA = "0x11B994C", Slot = "23")]
	public override void ControlLost()
	{
	}

	[Token(Token = "0x600162A")]
	[Address(RVA = "0x11B9700", Offset = "0x11B9700", VA = "0x11B9700")]
	private void ResetAgent()
	{
	}

	[Token(Token = "0x600162B")]
	[Address(RVA = "0x11B98C4", Offset = "0x11B98C4", VA = "0x11B98C4")]
	private void KillAgent()
	{
	}

	[Token(Token = "0x600162C")]
	[Address(RVA = "0x11B9B54", Offset = "0x11B9B54", VA = "0x11B9B54")]
	private void ActionOnInteractionStart()
	{
	}

	[Token(Token = "0x600162D")]
	[Address(RVA = "0x11B9B74", Offset = "0x11B9B74", VA = "0x11B9B74")]
	private void ActionOnInteractionStop()
	{
	}

	[Token(Token = "0x600162E")]
	[Address(RVA = "0x11B9B94", Offset = "0x11B9B94", VA = "0x11B9B94")]
	public NetworkVrBookshelf()
	{
	}
}
[Token(Token = "0x20003CA")]
[RequireComponent(typeof(VrBullet))]
public class NetworkVrBullet : NetworkControllableEntityBase<IEntityState>
{
	[Token(Token = "0x40011C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private VrBullet m_vrBullet;

	[Token(Token = "0x600162F")]
	[Address(RVA = "0x11B9BDC", Offset = "0x11B9BDC", VA = "0x11B9BDC", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001630")]
	[Address(RVA = "0x11B9EF8", Offset = "0x11B9EF8", VA = "0x11B9EF8", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6001631")]
	[Address(RVA = "0x11B9F40", Offset = "0x11B9F40", VA = "0x11B9F40")]
	private void OnControlLost()
	{
	}

	[Token(Token = "0x6001632")]
	[Address(RVA = "0x11BA108", Offset = "0x11BA108", VA = "0x11BA108")]
	public NetworkVrBullet()
	{
	}
}
[Token(Token = "0x20003CB")]
public class NetworkVrGrenade : NetworkVrItem<IGrenadeState>
{
	[Token(Token = "0x40011C5")]
	private const float m_nullableFloatTime = -288f;

	[Token(Token = "0x40011C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private VrTimedExplosive m_vrTimedExplosive;

	[Token(Token = "0x6001633")]
	[Address(RVA = "0x11BA174", Offset = "0x11BA174", VA = "0x11BA174", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001634")]
	[Address(RVA = "0x11BA6A0", Offset = "0x11BA6A0", VA = "0x11BA6A0", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6001635")]
	[Address(RVA = "0x11BA950", Offset = "0x11BA950", VA = "0x11BA950")]
	private void OnExplosiveArmedCallback()
	{
	}

	[Token(Token = "0x6001636")]
	[Address(RVA = "0x11BAA80", Offset = "0x11BAA80", VA = "0x11BAA80")]
	private void OnExplodeCallback()
	{
	}

	[Token(Token = "0x6001637")]
	[Address(RVA = "0x11BABA4", Offset = "0x11BABA4", VA = "0x11BABA4", Slot = "151")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001638")]
	[Address(RVA = "0x11BAC24", Offset = "0x11BAC24", VA = "0x11BAC24")]
	public void OnExplosiveArmed(bool armed)
	{
	}

	[Token(Token = "0x6001639")]
	[Address(RVA = "0x11BADEC", Offset = "0x11BADEC", VA = "0x11BADEC")]
	public void OnExplode(bool explode)
	{
	}

	[Token(Token = "0x600163A")]
	[Address(RVA = "0x11BAF04", Offset = "0x11BAF04", VA = "0x11BAF04")]
	private void OnSecondaryAction(bool started)
	{
	}

	[Token(Token = "0x600163B")]
	[Address(RVA = "0x11BAF08", Offset = "0x11BAF08", VA = "0x11BAF08")]
	private void Update()
	{
	}

	[Token(Token = "0x600163C")]
	[Address(RVA = "0x11BAF0C", Offset = "0x11BAF0C", VA = "0x11BAF0C")]
	public NetworkVrGrenade()
	{
	}
}
[Token(Token = "0x20003CC")]
[RequireComponent(typeof(VrGun))]
public class NetworkVrGun : NetworkVrItem<IWeaponState>, INetworkMechanismKeyhole
{
	[Token(Token = "0x40011C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private MechanismKeyhole m_keyhole;

	[Token(Token = "0x40011C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private NetworkId m_attachedNetworkId;

	[Token(Token = "0x40011C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private VrGun m_vrGun;

	[Token(Token = "0x1700034B")]
	internal VrGun VrGun
	{
		[Token(Token = "0x600163D")]
		[Address(RVA = "0x11BAF54", Offset = "0x11BAF54", VA = "0x11BAF54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700034C")]
	private MechanismKeyhole INetworkMechanismKeyhole.Keyhole
	{
		[Token(Token = "0x600163E")]
		[Address(RVA = "0x11BAF5C", Offset = "0x11BAF5C", VA = "0x11BAF5C", Slot = "171")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700034D")]
	private BoltEntity INetworkMechanismKeyhole.BoltEntity
	{
		[Token(Token = "0x600163F")]
		[Address(RVA = "0x11BAF64", Offset = "0x11BAF64", VA = "0x11BAF64", Slot = "172")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001640")]
	[Address(RVA = "0x11BAF6C", Offset = "0x11BAF6C", VA = "0x11BAF6C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6001641")]
	[Address(RVA = "0x11BB01C", Offset = "0x11BB01C", VA = "0x11BB01C", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001642")]
	[Address(RVA = "0x11BB544", Offset = "0x11BB544", VA = "0x11BB544", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6001643")]
	[Address(RVA = "0x11BB88C", Offset = "0x11BB88C", VA = "0x11BB88C")]
	private void OnControlGained()
	{
	}

	[Token(Token = "0x6001644")]
	[Address(RVA = "0x11BB890", Offset = "0x11BB890", VA = "0x11BB890")]
	private void OnControlLost()
	{
	}

	[Token(Token = "0x6001645")]
	[Address(RVA = "0x11BBA58", Offset = "0x11BBA58", VA = "0x11BBA58")]
	private void OnLaserBeamStateChanged()
	{
	}

	[Token(Token = "0x6001646")]
	[Address(RVA = "0x11BBB38", Offset = "0x11BBB38", VA = "0x11BBB38")]
	private void OnSkinStateChanged()
	{
	}

	[Token(Token = "0x6001647")]
	[Address(RVA = "0x11BBCA4", Offset = "0x11BBCA4", VA = "0x11BBCA4")]
	private void OnWeaponMetaVisualsEvent(WeaponMetaVisuals metaVisuals)
	{
	}

	[Token(Token = "0x6001648")]
	[Address(RVA = "0x11BBE50", Offset = "0x11BBE50", VA = "0x11BBE50")]
	public NetworkVrGun()
	{
	}
}
[Token(Token = "0x20003CD")]
public class NetworkVrInteractableMechanism : NetworkVrItem<IMechanismState>
{
	[Token(Token = "0x40011CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private AbstractTriggeredMechanism m_mechanism;

	[Token(Token = "0x6001649")]
	[Address(RVA = "0x11BBEC0", Offset = "0x11BBEC0", VA = "0x11BBEC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600164A")]
	[Address(RVA = "0x11BBEC4", Offset = "0x11BBEC4", VA = "0x11BBEC4", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x600164B")]
	[Address(RVA = "0x11BC0FC", Offset = "0x11BC0FC", VA = "0x11BC0FC", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x600164C")]
	[Address(RVA = "0x11BC1B0", Offset = "0x11BC1B0", VA = "0x11BC1B0")]
	private void OnTrigger()
	{
	}

	[Token(Token = "0x600164D")]
	[Address(RVA = "0x11BC288", Offset = "0x11BC288", VA = "0x11BC288")]
	private void OnMechanismThresholdChange(AbstractTriggeredMechanism.Trigger trigger)
	{
	}

	[Token(Token = "0x600164E")]
	[Address(RVA = "0x11BC3B8", Offset = "0x11BC3B8", VA = "0x11BC3B8", Slot = "153")]
	public override void RestoreRigidBodyDefaults()
	{
	}

	[Token(Token = "0x600164F")]
	[Address(RVA = "0x11BC478", Offset = "0x11BC478", VA = "0x11BC478")]
	public NetworkVrInteractableMechanism()
	{
	}
}
[Token(Token = "0x20003CE")]
public class NetworkVrItem : NetworkVrItem<IVrItemState>
{
	[Token(Token = "0x40011CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Transform m_targetTransform;

	[Token(Token = "0x6001650")]
	[Address(RVA = "0x11BC4C0", Offset = "0x11BC4C0", VA = "0x11BC4C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001651")]
	[Address(RVA = "0x11BC4C4", Offset = "0x11BC4C4", VA = "0x11BC4C4", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001652")]
	[Address(RVA = "0x11BC654", Offset = "0x11BC654", VA = "0x11BC654")]
	public NetworkVrItem()
	{
	}
}
[Token(Token = "0x20003CF")]
[RequireComponent(typeof(VrMagazine))]
public class NetworkVrMagazine : NetworkVrItem<IMagazineState>, INetworkMechanismKey
{
	[Token(Token = "0x40011CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private VrMagazine m_vrMagazine;

	[Token(Token = "0x40011CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[ReadOnly]
	[SerializeField]
	private bool m_inAmmoPouch;

	[Token(Token = "0x1700034E")]
	public MechanismKey Key
	{
		[Token(Token = "0x6001653")]
		[Address(RVA = "0x11BC69C", Offset = "0x11BC69C", VA = "0x11BC69C", Slot = "172")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700034F")]
	private IKeyState INetworkMechanismKey.state
	{
		[Token(Token = "0x6001654")]
		[Address(RVA = "0x11BC718", Offset = "0x11BC718", VA = "0x11BC718", Slot = "175")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000350")]
	public bool inAmmoPouch
	{
		[Token(Token = "0x6001655")]
		[Address(RVA = "0x11BC760", Offset = "0x11BC760", VA = "0x11BC760")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001656")]
		[Address(RVA = "0x11BC768", Offset = "0x11BC768", VA = "0x11BC768")]
		set
		{
		}
	}

	[Token(Token = "0x6001657")]
	[Address(RVA = "0x11BC774", Offset = "0x11BC774", VA = "0x11BC774", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001658")]
	[Address(RVA = "0x11BCE7C", Offset = "0x11BCE7C", VA = "0x11BCE7C", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x6001659")]
	[Address(RVA = "0x11BD034", Offset = "0x11BD034", VA = "0x11BD034")]
	public void RandomizePosition()
	{
	}

	[Token(Token = "0x600165A")]
	[Address(RVA = "0x11BD180", Offset = "0x11BD180", VA = "0x11BD180", Slot = "22")]
	public override void ControlGained()
	{
	}

	[Token(Token = "0x600165B")]
	[Address(RVA = "0x11BD568", Offset = "0x11BD568", VA = "0x11BD568", Slot = "23")]
	public override void ControlLost()
	{
	}

	[Token(Token = "0x600165C")]
	[Address(RVA = "0x11BD32C", Offset = "0x11BD32C", VA = "0x11BD32C")]
	private void OnAmmoPouchMagAttached(MagazineAttachToken attachToken)
	{
	}

	[Token(Token = "0x600165D")]
	[Address(RVA = "0x11BD774", Offset = "0x11BD774", VA = "0x11BD774")]
	private void OnMagazineEjected(MechanismKey.KeyEjectionContext? keyEjectionContext)
	{
	}

	[Token(Token = "0x600165E")]
	[Address(RVA = "0x11BD860", Offset = "0x11BD860", VA = "0x11BD860")]
	private void OnGunFired()
	{
	}

	[Token(Token = "0x600165F")]
	[Address(RVA = "0x11BD95C", Offset = "0x11BD95C", VA = "0x11BD95C")]
	private void OnServerAmmoChanged()
	{
	}

	[Token(Token = "0x6001660")]
	[Address(RVA = "0x11BDA4C", Offset = "0x11BDA4C", VA = "0x11BDA4C")]
	private void OnAttachedKeyholeChanged()
	{
	}

	[Token(Token = "0x6001661")]
	[Address(RVA = "0x11BCD8C", Offset = "0x11BCD8C", VA = "0x11BCD8C")]
	public void ForceSetMaxAmmoState()
	{
	}

	[Token(Token = "0x6001662")]
	[Address(RVA = "0x11BDA68", Offset = "0x11BDA68", VA = "0x11BDA68")]
	public void ForceSetStateFromMagazine()
	{
	}

	[Token(Token = "0x6001663")]
	[Address(RVA = "0x11BDB3C", Offset = "0x11BDB3C", VA = "0x11BDB3C", Slot = "153")]
	public override void RestoreRigidBodyDefaults()
	{
	}

	[Token(Token = "0x6001664")]
	[Address(RVA = "0x11BDCE4", Offset = "0x11BDCE4", VA = "0x11BDCE4")]
	public NetworkVrMagazine()
	{
	}

	[SpecialName]
	[Token(Token = "0x6001665")]
	[Address(RVA = "0x11BDD2C", Offset = "0x11BDD2C", VA = "0x11BDD2C", Slot = "171")]
	private string INetworkMechanismKey.get_name()
	{
		return null;
	}

	[SpecialName]
	[Token(Token = "0x6001666")]
	[Address(RVA = "0x11BDD34", Offset = "0x11BDD34", VA = "0x11BDD34", Slot = "173")]
	private GameObject INetworkMechanismKey.get_gameObject()
	{
		return null;
	}
}
[Token(Token = "0x20003D0")]
[RequireComponent(typeof(VrItem))]
public class NetworkVrMelee : NetworkVrItem<IMeleeWeaponState>
{
	[Token(Token = "0x40011CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private HealthStatus m_health;

	[Token(Token = "0x40011CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private VrMeleeWeapon m_vrMeleeWeapon;

	[Token(Token = "0x40011D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private PhysicsDamage m_physicsDamage;

	[Token(Token = "0x17000351")]
	public bool Embedded
	{
		[Token(Token = "0x6001667")]
		[Address(RVA = "0x11BDD3C", Offset = "0x11BDD3C", VA = "0x11BDD3C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001668")]
		[Address(RVA = "0x11BDDFC", Offset = "0x11BDDFC", VA = "0x11BDDFC")]
		set
		{
		}
	}

	[Token(Token = "0x6001669")]
	[Address(RVA = "0x11BDED0", Offset = "0x11BDED0", VA = "0x11BDED0")]
	private void Start()
	{
	}

	[Token(Token = "0x600166A")]
	[Address(RVA = "0x11BDFDC", Offset = "0x11BDFDC", VA = "0x11BDFDC", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x600166B")]
	[Address(RVA = "0x11BE350", Offset = "0x11BE350", VA = "0x11BE350")]
	private void OnEmbededChanged()
	{
	}

	[Token(Token = "0x600166C")]
	[Address(RVA = "0x11BE448", Offset = "0x11BE448", VA = "0x11BE448", Slot = "145")]
	public override void OnEvent(ResetEmbedCandidate evnt)
	{
	}

	[Token(Token = "0x600166D")]
	[Address(RVA = "0x11BE464", Offset = "0x11BE464", VA = "0x11BE464", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x600166E")]
	[Address(RVA = "0x11BE510", Offset = "0x11BE510", VA = "0x11BE510")]
	private void OnControlLost()
	{
	}

	[Token(Token = "0x600166F")]
	[Address(RVA = "0x11BE6D8", Offset = "0x11BE6D8", VA = "0x11BE6D8")]
	public void RequestReturnToPool()
	{
	}

	[Token(Token = "0x6001670")]
	[Address(RVA = "0x11BE794", Offset = "0x11BE794", VA = "0x11BE794")]
	public NetworkVrMelee()
	{
	}
}
[Token(Token = "0x20003D1")]
[RequireComponent(typeof(VrSchematic))]
public class NetworkVrSchematic : NetworkVrItem<IVrItemState>
{
	[Token(Token = "0x40011D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private VrSchematic m_schematic;

	[Token(Token = "0x6001671")]
	[Address(RVA = "0x11BE7DC", Offset = "0x11BE7DC", VA = "0x11BE7DC", Slot = "22")]
	public override void ControlGained()
	{
	}

	[Token(Token = "0x6001672")]
	[Address(RVA = "0x11BE8B8", Offset = "0x11BE8B8", VA = "0x11BE8B8")]
	public NetworkVrSchematic()
	{
	}
}
[Token(Token = "0x20003D2")]
public class TestNetworkEntity : EntityEventListener<IEntityState>
{
	[Token(Token = "0x6001673")]
	[Address(RVA = "0x11BE900", Offset = "0x11BE900", VA = "0x11BE900", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x6001674")]
	[Address(RVA = "0x11BEA6C", Offset = "0x11BEA6C", VA = "0x11BEA6C")]
	public TestNetworkEntity()
	{
	}
}
[Token(Token = "0x20003D3")]
public class State_ApplyLevelInventory : BaseStateAttachedLogic
{
	[Token(Token = "0x17000352")]
	[StateConfig("Skip Load From Disk")]
	public bool SkipInventoryLoad
	{
		[Token(Token = "0x6001675")]
		[Address(RVA = "0x11BEAB4", Offset = "0x11BEAB4", VA = "0x11BEAB4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001676")]
		[Address(RVA = "0x11BEABC", Offset = "0x11BEABC", VA = "0x11BEABC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001677")]
	[Address(RVA = "0x11BEAC8", Offset = "0x11BEAC8", VA = "0x11BEAC8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001678")]
	[Address(RVA = "0x11BEB18", Offset = "0x11BEB18", VA = "0x11BEB18")]
	public State_ApplyLevelInventory()
	{
	}
}
[Token(Token = "0x20003D4")]
public class BoltMatchmakingNetwork
{
	[Token(Token = "0x40011D3")]
	public const string HeadlessServerName = "HeadlessServer";

	[Token(Token = "0x40011D4")]
	public const string KeyVersion = "version";

	[Token(Token = "0x40011D5")]
	public const string KeyAppVersion = "app_version";

	[Token(Token = "0x40011D6")]
	public const string KeyName = "name";

	[Token(Token = "0x40011D7")]
	public const string KeyPlatformType = "platform_type";

	[Token(Token = "0x40011D8")]
	public const string KeyGameName = "gameName";

	[Token(Token = "0x40011D9")]
	public const string KeyDisplayName = "displayName";

	[Token(Token = "0x40011DA")]
	public const string KeyHost = "host";

	[Token(Token = "0x40011DB")]
	public const string KeyState = "state";

	[Token(Token = "0x40011DC")]
	public const string KeyMap = "map";

	[Token(Token = "0x40011DD")]
	public const string KeyDifficulty = "difficulty";

	[Token(Token = "0x40011DE")]
	public const string KeyWaveNumber = "wave";

	[Token(Token = "0x40011DF")]
	public const string KeyLivesNumber = "lives";

	[Token(Token = "0x40011E0")]
	public const string KeyDeviceName = "DeviceName";

	[Token(Token = "0x40011E1")]
	public const string KeyBuildCommit = "BuildCommit";

	[Token(Token = "0x40011E2")]
	public const string KeyBuildNumber = "BuildNumber";

	[Token(Token = "0x40011E3")]
	public const string KeyBuildBranch = "BuildBranch";

	[Token(Token = "0x40011E4")]
	public const string KeyBuildUser = "BuildUser";

	[Token(Token = "0x40011E5")]
	public const string DebugNameString = "_DEBUG_";

	[Token(Token = "0x40011E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PhotonSession m_currentPhotonSession;

	[Token(Token = "0x40011E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static PhotonRoomProperties m_photonRoomProperties;

	[Token(Token = "0x40011E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool m_startVisible;

	[Token(Token = "0x17000353")]
	public static bool StartVisible
	{
		[Token(Token = "0x6001679")]
		[Address(RVA = "0x11BEB20", Offset = "0x11BEB20", VA = "0x11BEB20")]
		set
		{
		}
	}

	[Token(Token = "0x17000354")]
	public static PhotonSession CurrentPhotonSession
	{
		[Token(Token = "0x600167A")]
		[Address(RVA = "0x11BEB6C", Offset = "0x11BEB6C", VA = "0x11BEB6C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600167B")]
		[Address(RVA = "0x11BEBE0", Offset = "0x11BEBE0", VA = "0x11BEBE0")]
		private set
		{
		}
	}

	[Token(Token = "0x600167C")]
	[Address(RVA = "0x11BEC38", Offset = "0x11BEC38", VA = "0x11BEC38")]
	public static MultiplayerGameState GetGameState()
	{
		return default(MultiplayerGameState);
	}

	[Token(Token = "0x600167D")]
	[Address(RVA = "0x11BECC8", Offset = "0x11BECC8", VA = "0x11BECC8")]
	public static void StartSession()
	{
	}

	[Token(Token = "0x600167E")]
	[Address(RVA = "0x11BF7FC", Offset = "0x11BF7FC", VA = "0x11BF7FC")]
	public static void UpdateSession(bool isVisible = true)
	{
	}

	[Token(Token = "0x600167F")]
	[Address(RVA = "0x11BFD98", Offset = "0x11BFD98", VA = "0x11BFD98")]
	private static bool Equals(PhotonRoomProperties a, PhotonRoomProperties b)
	{
		return default(bool);
	}

	[Token(Token = "0x6001680")]
	[Address(RVA = "0x11C00E4", Offset = "0x11C00E4", VA = "0x11C00E4")]
	public static void OnJoinSession(UdpSession session, IProtocolToken token)
	{
	}

	[Token(Token = "0x6001681")]
	[Address(RVA = "0x11C02A8", Offset = "0x11C02A8", VA = "0x11C02A8")]
	public static int GetSessionListCount()
	{
		return default(int);
	}

	[Token(Token = "0x6001682")]
	[Address(RVA = "0x11BF5CC", Offset = "0x11BF5CC", VA = "0x11BF5CC")]
	public static string GetPlatformType()
	{
		return null;
	}

	[Token(Token = "0x6001683")]
	[Address(RVA = "0x11C0350", Offset = "0x11C0350", VA = "0x11C0350")]
	public static Dictionary<Guid, PhotonSession> GetSessionList()
	{
		return null;
	}

	[Token(Token = "0x6001684")]
	[Address(RVA = "0x11C0BB8", Offset = "0x11C0BB8", VA = "0x11C0BB8")]
	private static bool InJoinableState(MultiplayerGameState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0x11BF46C", Offset = "0x11BF46C", VA = "0x11BF46C")]
	public static string GenerateMatchName()
	{
		return null;
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0x11C0BC4", Offset = "0x11C0BC4", VA = "0x11C0BC4")]
	internal static string GetCurrentRegion()
	{
		return null;
	}

	[Token(Token = "0x6001687")]
	[Address(RVA = "0x11C0CD0", Offset = "0x11C0CD0", VA = "0x11C0CD0")]
	public BoltMatchmakingNetwork()
	{
	}
}
[Token(Token = "0x20003D5")]
public class BoltMatchmakingSessionInfo
{
	[Token(Token = "0x17000355")]
	public string SessionName
	{
		[Token(Token = "0x6001688")]
		[Address(RVA = "0x11C0CD8", Offset = "0x11C0CD8", VA = "0x11C0CD8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001689")]
		[Address(RVA = "0x11C0CE0", Offset = "0x11C0CE0", VA = "0x11C0CE0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000356")]
	public IProtocolToken SessionToken
	{
		[Token(Token = "0x600168A")]
		[Address(RVA = "0x11C0CE8", Offset = "0x11C0CE8", VA = "0x11C0CE8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600168B")]
		[Address(RVA = "0x11C0CF0", Offset = "0x11C0CF0", VA = "0x11C0CF0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600168C")]
	[Address(RVA = "0x11C0CF8", Offset = "0x11C0CF8", VA = "0x11C0CF8")]
	public BoltMatchmakingSessionInfo()
	{
	}
}
[Token(Token = "0x20003D6")]
public enum MultiplayerGameType
{
	[Token(Token = "0x40011EC")]
	LastBastion
}
[Token(Token = "0x20003D7")]
[CreateAssetMenu(fileName = "MultiplayerMapDefinition", menuName = "Battle Sister/Multiplayer/Create Map Definition")]
public class MultiplayerMapDefinition : ScriptableObject
{
	[Token(Token = "0x40011ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Define the game mode for this map. (Eg: Horde, PvP)")]
	public MultiplayerGameType MultiplayerGameType;

	[Token(Token = "0x40011EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("Define the life system the map will use (joint player lives or individual lives currently supported)")]
	public PlayerLifeSystem PlayerLifeSystem;

	[Token(Token = "0x40011EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Define the number of player lives this map gives")]
	public int PlayerLives;

	[Token(Token = "0x600168D")]
	[Address(RVA = "0x11C0D00", Offset = "0x11C0D00", VA = "0x11C0D00")]
	public MultiplayerMapDefinition()
	{
	}
}
[Token(Token = "0x20003D8")]
public enum PlayerLifeSystem
{
	[Token(Token = "0x40011F1")]
	JointLives,
	[Token(Token = "0x40011F2")]
	IndividualLives
}
[Token(Token = "0x20003D9")]
public class NavMeshLinkList
{
	[Token(Token = "0x40011F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<NavMeshLink> _navMeshLinks;

	[Token(Token = "0x600168E")]
	[Address(RVA = "0x11C0D10", Offset = "0x11C0D10", VA = "0x11C0D10")]
	[RuntimeInitializeOnLoadMethod]
	private static void Init()
	{
	}

	[Token(Token = "0x600168F")]
	[Address(RVA = "0x11C0DB0", Offset = "0x11C0DB0", VA = "0x11C0DB0")]
	private static void SceneManager_OnsceneLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6001690")]
	[Address(RVA = "0x11C0E80", Offset = "0x11C0E80", VA = "0x11C0E80")]
	private static void GetAllNavmeshLinks(Scene scene)
	{
	}

	[Token(Token = "0x6001691")]
	[Address(RVA = "0x11C0FE4", Offset = "0x11C0FE4", VA = "0x11C0FE4")]
	public static NavMeshLink GetLinkByIndex(int index)
	{
		return null;
	}

	[Token(Token = "0x6001692")]
	[Address(RVA = "0x11C10B0", Offset = "0x11C10B0", VA = "0x11C10B0")]
	public static int GetNavMeshLinkIndex(NavMeshLink link)
	{
		return default(int);
	}

	[Token(Token = "0x6001693")]
	[Address(RVA = "0x11C1130", Offset = "0x11C1130", VA = "0x11C1130")]
	public NavMeshLinkList()
	{
	}
}
[Token(Token = "0x20003DA")]
public class ControlledEntityInputData
{
	[Token(Token = "0x40011F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 Position;

	[Token(Token = "0x40011F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion Rotation;

	[Token(Token = "0x40011F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 Velocity;

	[Token(Token = "0x40011F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 AngularVelocity;

	[Token(Token = "0x40011F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool Sleeping;

	[Token(Token = "0x6001695")]
	[Address(RVA = "0x11C11D0", Offset = "0x11C11D0", VA = "0x11C11D0")]
	public ControlledEntityInputData(Vector3 position, Quaternion rotation, Vector3 velocity, Vector3 angularVelocity, bool sleeping)
	{
	}
}
[Token(Token = "0x20003DB")]
public class BoltIntegration
{
	[Token(Token = "0x40011F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string PhotonSessionKey;

	[Token(Token = "0x40011FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string PhotonRegionKey;

	[Token(Token = "0x17000357")]
	public static PhotonSession Session
	{
		[Token(Token = "0x6001696")]
		[Address(RVA = "0x11C1270", Offset = "0x11C1270", VA = "0x11C1270")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001697")]
		[Address(RVA = "0x11C12C8", Offset = "0x11C12C8", VA = "0x11C12C8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000358")]
	public static Map<Guid, UdpSession> SessionList
	{
		[Token(Token = "0x6001698")]
		[Address(RVA = "0x11C1328", Offset = "0x11C1328", VA = "0x11C1328")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001699")]
		[Address(RVA = "0x11C1380", Offset = "0x11C1380", VA = "0x11C1380")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600169A")]
	[Address(RVA = "0x11C13E0", Offset = "0x11C13E0", VA = "0x11C13E0")]
	public static void StartListeners()
	{
	}

	[Token(Token = "0x600169B")]
	[Address(RVA = "0x11C1974", Offset = "0x11C1974", VA = "0x11C1974")]
	private static void OnOculusRoomIdReceived(ulong roomId)
	{
	}

	[Token(Token = "0x600169C")]
	[Address(RVA = "0x11C1A08", Offset = "0x11C1A08", VA = "0x11C1A08")]
	public static void StopListeners()
	{
	}

	[Token(Token = "0x600169D")]
	[Address(RVA = "0x11C1F9C", Offset = "0x11C1F9C", VA = "0x11C1F9C")]
	private static void OnBoltSessionCreated(UdpSession session)
	{
	}

	[Token(Token = "0x600169E")]
	[Address(RVA = "0x11C2110", Offset = "0x11C2110", VA = "0x11C2110")]
	private static void OnBoltSessionConnected(UdpSession udpSession, IProtocolToken protocolToken)
	{
	}

	[Token(Token = "0x600169F")]
	[Address(RVA = "0x11C21F4", Offset = "0x11C21F4", VA = "0x11C21F4")]
	private static void OnBoltSessionCreationFailed(UdpSession udpSession, UdpSessionError udpSessionError)
	{
	}

	[Token(Token = "0x60016A0")]
	[Address(RVA = "0x11C2280", Offset = "0x11C2280", VA = "0x11C2280")]
	private static void OnBoltSessionConnectFailed(UdpSession udpSession, IProtocolToken protocolToken, UdpSessionError arg3)
	{
	}

	[Token(Token = "0x60016A1")]
	[Address(RVA = "0x11C230C", Offset = "0x11C230C", VA = "0x11C230C")]
	private static void OnBoltDisconnected(BoltConnection boltConnection)
	{
	}

	[Token(Token = "0x60016A2")]
	[Address(RVA = "0x11C23DC", Offset = "0x11C23DC", VA = "0x11C23DC")]
	private static void OnSessionListUpdated(Map<Guid, UdpSession> sessionList)
	{
	}

	[Token(Token = "0x60016A3")]
	[Address(RVA = "0x11C246C", Offset = "0x11C246C", VA = "0x11C246C")]
	public static void ToggleSessionVisibility()
	{
	}

	[Token(Token = "0x60016A4")]
	[Address(RVA = "0x11C2508", Offset = "0x11C2508", VA = "0x11C2508")]
	public static void SetSessionVisible(bool isVisible = true)
	{
	}

	[Token(Token = "0x60016A5")]
	[Address(RVA = "0x11C2510", Offset = "0x11C2510", VA = "0x11C2510")]
	public BoltIntegration()
	{
	}
}
[Token(Token = "0x20003DC")]
public enum NetworkResponse
{
	[Token(Token = "0x40011FE")]
	None,
	[Token(Token = "0x40011FF")]
	Info,
	[Token(Token = "0x4001200")]
	Success,
	[Token(Token = "0x4001201")]
	MinorError,
	[Token(Token = "0x4001202")]
	MajorError,
	[Token(Token = "0x4001203")]
	CriticalError
}
[Token(Token = "0x20003DD")]
public static class NetworkResponseHelpers
{
	[Token(Token = "0x4001204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Dictionary<NetworkResponse, string> NetworkResponseString;
}
[Token(Token = "0x20003DE")]
public class OculusInviteListener : BaseStateAttachedLogic
{
	[Token(Token = "0x4001205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ulong _lastAcceptedInvite;

	[Token(Token = "0x4001206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<ulong> OnInviteAccepted;

	[Token(Token = "0x17000359")]
	public static bool HasAcceptedInvite
	{
		[Token(Token = "0x60016A8")]
		[Address(RVA = "0x11C27C0", Offset = "0x11C27C0", VA = "0x11C27C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60016A9")]
	[Address(RVA = "0x11C2810", Offset = "0x11C2810", VA = "0x11C2810")]
	public OculusInviteListener()
	{
	}
}
[Token(Token = "0x20003DF")]
public static class OculusLeaderboards
{
	[Token(Token = "0x4001207")]
	private const string c_liveSuffix = "LIVE";

	[Token(Token = "0x4001208")]
	private const string c_devSuffix = "DEV";

	[Token(Token = "0x4001209")]
	private const int c_errorNotInLeaderboard = 12074;

	[Token(Token = "0x400120A")]
	private const int c_leaderboardEntryRequestLimit = 20;

	[Token(Token = "0x400120B")]
	private const int c_leaderboardEntryUILimit = 10;

	[Token(Token = "0x400120C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, UILeaderboardPanelTable> s_leaderboards;

	[Token(Token = "0x400120D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<string, LeaderboardStatus> s_statuses;

	[Token(Token = "0x400120E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<string, long> s_currentUsersScores;

	[Token(Token = "0x60016AA")]
	[Address(RVA = "0x11C2818", Offset = "0x11C2818", VA = "0x11C2818")]
	private static string GenLeaderboardKey(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly)
	{
		return null;
	}

	[Token(Token = "0x60016AB")]
	[Address(RVA = "0x11C2BB0", Offset = "0x11C2BB0", VA = "0x11C2BB0")]
	public static bool GetCurrentUsersScore(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, out long score)
	{
		return default(bool);
	}

	[Token(Token = "0x60016AC")]
	[Address(RVA = "0x11C2A90", Offset = "0x11C2A90", VA = "0x11C2A90")]
	private static string ResolveLeaderboardAPIName(LeaderboardAPISuffix lbName, LeaderboardMapName mapName)
	{
		return null;
	}

	[Token(Token = "0x60016AD")]
	[Address(RVA = "0x11C2C54", Offset = "0x11C2C54", VA = "0x11C2C54")]
	public static void ClearCache([Optional] LeaderboardMapName? mapName)
	{
	}

	[Token(Token = "0x60016AE")]
	[Address(RVA = "0x11C3188", Offset = "0x11C3188", VA = "0x11C3188")]
	public static LeaderboardStatus GetStatus(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly)
	{
		return default(LeaderboardStatus);
	}

	[Token(Token = "0x60016AF")]
	[Address(RVA = "0x11C329C", Offset = "0x11C329C", VA = "0x11C329C")]
	public static UILeaderboardPanelTable GetLeaderboardEntries(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly)
	{
		return null;
	}

	[Token(Token = "0x60016B0")]
	[Address(RVA = "0x11C33DC", Offset = "0x11C33DC", VA = "0x11C33DC")]
	public static void SendScore(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, long score)
	{
	}

	[Token(Token = "0x60016B1")]
	[Address(RVA = "0x11C354C", Offset = "0x11C354C", VA = "0x11C354C")]
	public static void GetCurrentUsersEntry(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, [Optional] Action<LeaderboardAPISuffix, LeaderboardMapName> onRefreshComplete)
	{
	}

	[Token(Token = "0x60016B2")]
	[Address(RVA = "0x11C3770", Offset = "0x11C3770", VA = "0x11C3770")]
	private static void OnGetUserEntryComplete(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, Message<LeaderboardEntryList> message, [Optional] Action<LeaderboardAPISuffix, LeaderboardMapName> onComplete)
	{
	}

	[Token(Token = "0x60016B3")]
	[Address(RVA = "0x11C38AC", Offset = "0x11C38AC", VA = "0x11C38AC")]
	public static void Refresh(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly, [Optional] Action<LeaderboardAPISuffix, LeaderboardMapName> onRefreshComplete)
	{
	}

	[Token(Token = "0x60016B4")]
	[Address(RVA = "0x11C3AE4", Offset = "0x11C3AE4", VA = "0x11C3AE4")]
	private static void OnGetEntriesComplete(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly, Message<LeaderboardEntryList> message, bool pageContinuation = false, [Optional] Action<LeaderboardAPISuffix, LeaderboardMapName> onComplete)
	{
	}
}
[Token(Token = "0x20003E4")]
public class PicoUsers
{
	[Token(Token = "0x1700035A")]
	public static User CurrentUser
	{
		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x11C49D4", Offset = "0x11C49D4", VA = "0x11C49D4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x11C4A1C", Offset = "0x11C4A1C", VA = "0x11C4A1C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60016C4")]
	[Address(RVA = "0x11C4A74", Offset = "0x11C4A74", VA = "0x11C4A74")]
	public static void GetUserAsync(Action<NetworkResponse> onGetUser)
	{
	}

	[Token(Token = "0x60016C5")]
	[Address(RVA = "0x11C4B64", Offset = "0x11C4B64", VA = "0x11C4B64")]
	public static void GetUserFriends(Action<NetworkResponse, UserList> onInviteListReady)
	{
	}

	[Token(Token = "0x60016C6")]
	private static bool ValidateMessage<T>(Message<T> message)
	{
		return default(bool);
	}

	[Token(Token = "0x60016C7")]
	[Address(RVA = "0x11C4C54", Offset = "0x11C4C54", VA = "0x11C4C54")]
	public PicoUsers()
	{
	}
}
[Token(Token = "0x20003E7")]
public class PingHelper : PT.Singleton<PingHelper>
{
	[Token(Token = "0x400121E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private BoltConnection m_connection;

	[Token(Token = "0x400121F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_recordingPing;

	[Token(Token = "0x4001220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_pingRecordTimer;

	[Token(Token = "0x4001221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_pingRecordInterval;

	[Token(Token = "0x4001222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int m_pingCount;

	[Token(Token = "0x4001223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_averagePing;

	[Token(Token = "0x4001224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_minPing;

	[Token(Token = "0x4001225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_maxPing;

	[Token(Token = "0x60016CC")]
	[Address(RVA = "0x11C4E08", Offset = "0x11C4E08", VA = "0x11C4E08")]
	public void StartPingRecording()
	{
	}

	[Token(Token = "0x60016CD")]
	[Address(RVA = "0x11C4E2C", Offset = "0x11C4E2C", VA = "0x11C4E2C")]
	public PingStats StopPingRecordingAndReturnResults()
	{
		return null;
	}

	[Token(Token = "0x60016CE")]
	[Address(RVA = "0x11C50A0", Offset = "0x11C50A0", VA = "0x11C50A0")]
	public void ForceStopPingRecording()
	{
	}

	[Token(Token = "0x60016CF")]
	[Address(RVA = "0x11C50A8", Offset = "0x11C50A8", VA = "0x11C50A8")]
	private void Update()
	{
	}

	[Token(Token = "0x60016D0")]
	[Address(RVA = "0x11C54CC", Offset = "0x11C54CC", VA = "0x11C54CC")]
	public PingHelper()
	{
	}
}
[Token(Token = "0x20003E8")]
public class PingStats
{
	[Token(Token = "0x4001226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float m_avg;

	[Token(Token = "0x4001227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_min;

	[Token(Token = "0x4001228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_max;

	[Token(Token = "0x60016D1")]
	[Address(RVA = "0x11C4EC0", Offset = "0x11C4EC0", VA = "0x11C4EC0")]
	public PingStats(float avg, float min, float max)
	{
	}
}
[Token(Token = "0x20003E9")]
public static class DestinationsAPINames
{
	[Token(Token = "0x4001229")]
	public const string MultiplayerCabinLobby = "Multiplayer_Cabin";

	[Token(Token = "0x400122A")]
	public const string MultiplayerCabinGame = "Multiplayer_CabinGame";

	[Token(Token = "0x60016D2")]
	[Address(RVA = "0x11C5540", Offset = "0x11C5540", VA = "0x11C5540")]
	public static bool IsValidDestination(string destination)
	{
		return default(bool);
	}
}
[Token(Token = "0x20003EA")]
public class BoltPlayerContainer : EntityEventListener<IVRPlayerState>
{
	[Token(Token = "0x400122B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BoltPlayerContainer MyBoltPlayer;

	[Token(Token = "0x400122C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<BoltPlayerContainer> OnPlayerAttached;

	[Token(Token = "0x400122D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<BoltPlayerContainer> OnPlayerDetached;

	[Token(Token = "0x400122E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static List<BoltPlayerContainer> RemoteBoltPlayerContainers;

	[Token(Token = "0x400122F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Setup")]
	private GameObject m_boltPlayerControllerPrefab;

	[Token(Token = "0x4001230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_isRemotePlayer;

	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string m_playerName;

	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_fpsPlayer;

	[Token(Token = "0x4001233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ulong m_playerOculusId;

	[Token(Token = "0x4001234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_localPlayerStartHealth;

	[Token(Token = "0x4001235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private BoltPlayerController m_boltPlayerController;

	[Token(Token = "0x4001236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x4001237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly ProfilerMarker s_profileMarker2;

	[Token(Token = "0x1700035B")]
	public bool IsRemotePlayer
	{
		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x11C5678", Offset = "0x11C5678", VA = "0x11C5678")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700035C")]
	public bool IsLocalPlayer
	{
		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x11C5680", Offset = "0x11C5680", VA = "0x11C5680")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700035D")]
	public BoltPlayerController BoltPlayerController
	{
		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x11C5690", Offset = "0x11C5690", VA = "0x11C5690")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700035E")]
	public static List<BoltPlayerContainer> AllBoltPlayerContainers
	{
		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x11C5698", Offset = "0x11C5698", VA = "0x11C5698")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700035F")]
	public string PlayerName
	{
		[Token(Token = "0x60016D8")]
		[Address(RVA = "0x11C5838", Offset = "0x11C5838", VA = "0x11C5838")]
		get
		{
			return null;
		}
		[Token(Token = "0x60016D9")]
		[Address(RVA = "0x11C5840", Offset = "0x11C5840", VA = "0x11C5840")]
		set
		{
		}
	}

	[Token(Token = "0x17000360")]
	public bool fpsPlayer
	{
		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x11C5848", Offset = "0x11C5848", VA = "0x11C5848")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000361")]
	public ulong PlayerOculusId
	{
		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x11C5850", Offset = "0x11C5850", VA = "0x11C5850")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x60016D3")]
	[Address(RVA = "0x11C55C4", Offset = "0x11C55C4", VA = "0x11C55C4")]
	[AutoInitializeStatics]
	public static void ResetStatics()
	{
	}

	[Token(Token = "0x60016DC")]
	[Address(RVA = "0x11C5858", Offset = "0x11C5858", VA = "0x11C5858")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016DD")]
	[Address(RVA = "0x11C5C80", Offset = "0x11C5C80", VA = "0x11C5C80")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60016DE")]
	[Address(RVA = "0x11C60A8", Offset = "0x11C60A8", VA = "0x11C60A8")]
	private void OnGameplayStart()
	{
	}

	[Token(Token = "0x60016DF")]
	[Address(RVA = "0x11C61B8", Offset = "0x11C61B8", VA = "0x11C61B8")]
	private void OnGameplayStart(BoltConnection obj)
	{
	}

	[Token(Token = "0x60016E0")]
	[Address(RVA = "0x11C61BC", Offset = "0x11C61BC", VA = "0x11C61BC")]
	private void OnGameplayExit()
	{
	}

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0x11C61C4", Offset = "0x11C61C4", VA = "0x11C61C4")]
	private void OnGameplayExit(BoltConnection obj)
	{
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0x11C61CC", Offset = "0x11C61CC", VA = "0x11C61CC")]
	private void OnGameplayPaused()
	{
	}

	[Token(Token = "0x60016E3")]
	[Address(RVA = "0x11C61D4", Offset = "0x11C61D4", VA = "0x11C61D4")]
	private void OnGameplayUnPaused()
	{
	}

	[Token(Token = "0x60016E4")]
	[Address(RVA = "0x11C61DC", Offset = "0x11C61DC", VA = "0x11C61DC")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x60016E5")]
	[Address(RVA = "0x11C6458", Offset = "0x11C6458", VA = "0x11C6458", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x60016E6")]
	[Address(RVA = "0x11C7468", Offset = "0x11C7468", VA = "0x11C7468", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x60016E7")]
	[Address(RVA = "0x11C7C60", Offset = "0x11C7C60", VA = "0x11C7C60", Slot = "22")]
	public override void ControlGained()
	{
	}

	[Token(Token = "0x60016E8")]
	[Address(RVA = "0x11C7CCC", Offset = "0x11C7CCC", VA = "0x11C7CCC")]
	private void OnAvatarVisibilityChanged(SendAvatarVisibilityChanged evnt)
	{
	}

	[Token(Token = "0x60016E9")]
	[Address(RVA = "0x11C60B0", Offset = "0x11C60B0", VA = "0x11C60B0")]
	public void ShowPlayerAvatar(bool show)
	{
	}

	[Token(Token = "0x60016EA")]
	[Address(RVA = "0x11C6A48", Offset = "0x11C6A48", VA = "0x11C6A48")]
	private void SetupPlayer(PlayerAttachToken token, bool remote)
	{
	}

	[Token(Token = "0x60016EB")]
	[Address(RVA = "0x11C61E0", Offset = "0x11C61E0", VA = "0x11C61E0")]
	public void ResetHealth()
	{
	}

	[Token(Token = "0x60016EC")]
	[Address(RVA = "0x11C7904", Offset = "0x11C7904", VA = "0x11C7904")]
	private void TeardownPlayer(bool remote)
	{
	}

	[Token(Token = "0x60016ED")]
	[Address(RVA = "0x11C8D6C", Offset = "0x11C8D6C", VA = "0x11C8D6C", Slot = "21")]
	public override void SimulateController()
	{
	}

	[Token(Token = "0x60016EE")]
	[Address(RVA = "0x11C9A0C", Offset = "0x11C9A0C", VA = "0x11C9A0C", Slot = "20")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x60016EF")]
	[Address(RVA = "0x11CA1DC", Offset = "0x11CA1DC", VA = "0x11CA1DC", Slot = "25")]
	public override void ExecuteCommand(Command command, bool resetState)
	{
	}

	[Token(Token = "0x60016F0")]
	[Address(RVA = "0x11C7DF0", Offset = "0x11C7DF0", VA = "0x11C7DF0")]
	private BoltPlayerController GetBoltPlayerController(bool remote)
	{
		return null;
	}

	[Token(Token = "0x60016F1")]
	[Address(RVA = "0x11CAB84", Offset = "0x11CAB84", VA = "0x11CAB84")]
	private void OnPlayerStateChanged(int playerName, MultiplayerGameState multiplayerGameState)
	{
	}

	[Token(Token = "0x60016F2")]
	[Address(RVA = "0x11CAD8C", Offset = "0x11CAD8C", VA = "0x11CAD8C")]
	private void OnPlayerRescueReceived(SendPlayerRescue evnt)
	{
	}

	[Token(Token = "0x60016F3")]
	[Address(RVA = "0x11CAEB0", Offset = "0x11CAEB0", VA = "0x11CAEB0")]
	private void OnPlayerFocusReceived(SendPlayerFocus evnt)
	{
	}

	[Token(Token = "0x60016F4")]
	[Address(RVA = "0x11CAF98", Offset = "0x11CAF98", VA = "0x11CAF98")]
	public BoltPlayerContainer()
	{
	}
}
[Token(Token = "0x20003EB")]
public class BoltPlayerController : MonoBehaviour
{
	[Token(Token = "0x20003EC")]
	[CompilerGenerated]
	private sealed class <DeathInvincibilityRoutine>d__132 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoltPlayerController <>4__this;

		[Token(Token = "0x1700037D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001739")]
			[Address(RVA = "0x11CD740", Offset = "0x11CD740", VA = "0x11CD740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600173B")]
			[Address(RVA = "0x11CD788", Offset = "0x11CD788", VA = "0x11CD788", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x11CD2B4", Offset = "0x11CD2B4", VA = "0x11CD2B4")]
		[DebuggerHidden]
		public <DeathInvincibilityRoutine>d__132(int <>1__state)
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x11CD660", Offset = "0x11CD660", VA = "0x11CD660", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x11CD664", Offset = "0x11CD664", VA = "0x11CD664", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x11CD748", Offset = "0x11CD748", VA = "0x11CD748", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("General setup")]
	private bool m_isLocalPlayer;

	[Token(Token = "0x4001239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HealthStatus m_rootHealthStatus;

	[Token(Token = "0x400123A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AgentSensoryAudio m_agentSensoryAudio;

	[Token(Token = "0x400123B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private BoltPlayerVRIK m_boltPlayerVRIK;

	[Token(Token = "0x400123C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PlayerVoiceController m_playerVoiceController;

	[Token(Token = "0x400123D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Agent m_playerAgent;

	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameViewModel m_viewModel;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_focusLostIcon;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Transform setup")]
	[SerializeField]
	private Transform m_rootTransform;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform m_headTransform;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform m_rightHandTransform;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_leftHandTransform;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Hand setup")]
	[UnityEngine.Tooltip("The left hand. Auto-assigned at runtime for the local player only.")]
	[SerializeField]
	private VrHand m_leftHand;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[UnityEngine.Tooltip("The right hand. Auto-assigned at runtime for the local player only.")]
	private VrHand m_rightHand;

	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Bolt child transform sync helpers")]
	[SerializeField]
	private Transform m_headBoltTransformTracker;

	[Token(Token = "0x4001247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform m_leftHandBoltTransformTracker;

	[Token(Token = "0x4001248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Transform m_rightHandBoltTransformTracker;

	[Token(Token = "0x4001249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Header("Debug")]
	private bool m_debugMode;

	[Token(Token = "0x400124A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform m_transform;

	[Token(Token = "0x400124B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private BoltPlayerContainer m_boltPlayerContainer;

	[Token(Token = "0x400124C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private PlayerPositionalInputData m_playerPositionalInputData;

	[Token(Token = "0x400124D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private PlayerHandInputData m_playerHandInputData;

	[Token(Token = "0x400124E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private PlayerBodyProportionsInputData m_playerBodyProportionsInputData;

	[Token(Token = "0x400124F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private HandInputToken m_lastRightHandInput;

	[Token(Token = "0x4001250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private HandInputToken m_lastLeftHandInput;

	[Token(Token = "0x4001251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private BoneVectorDataToken m_boneVectorData;

	[Token(Token = "0x4001252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private BoneQuaternionDataToken m_boneQuaternionData;

	[Token(Token = "0x4001253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Action<IVRPlayerCommandInput> OnInputQueued;

	[Token(Token = "0x4001254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int m_currentPlayerHeight;

	[Token(Token = "0x4001255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int m_currentPlayerArmLength;

	[Token(Token = "0x4001256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool m_hearthBeatLost;

	[Token(Token = "0x4001257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float m_sinceLastHearthBeat;

	[Token(Token = "0x4001258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private List<VrHand> m_hands;

	[Token(Token = "0x4001259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_profileMarker2;

	[Token(Token = "0x400125A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x400125B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static List<BoltPlayerController> AllBoltPlayers;

	[Token(Token = "0x400125C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Header("Setup")]
	private AmmoVacuum m_ammoVacuum;

	[Token(Token = "0x400125D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	[UnityEngine.Tooltip("The order of the BoltPlayerContainer list has to be the same than in the PlayerRig")]
	[Header("AudioPlayer")]
	private VOAudioPlayer[] m_voAudioPlayers;

	[Token(Token = "0x400125E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	[Header("Inventory")]
	private NetworkInventoryData[] m_networkInventoryData;

	[Token(Token = "0x400125F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private Identifier[] m_allAmmoIds;

	[Token(Token = "0x4001260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private InventorySlot_AmmoPouch m_ammoPouch;

	[Token(Token = "0x4001261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	[Header("Death")]
	private float m_deathInvincibilityTimer;

	[Token(Token = "0x4001262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private int m_lastPositionFrame;

	[Token(Token = "0x4001263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int m_lastBonePositionFrame;

	[Token(Token = "0x4001264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private int m_lastBoneRotationFrame;

	[Token(Token = "0x4001265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private VOAudioPlayer m_playerVOAudioPlayer;

	[Token(Token = "0x17000362")]
	public Transform HeadBoltTransformTracker
	{
		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x11CB140", Offset = "0x11CB140", VA = "0x11CB140")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000363")]
	public Transform LeftHandBoltTransformTracker
	{
		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x11CB148", Offset = "0x11CB148", VA = "0x11CB148")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000364")]
	public Transform RightHandBoltTransformTracker
	{
		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x11CB150", Offset = "0x11CB150", VA = "0x11CB150")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000365")]
	public Agent PlayerAgent
	{
		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x11CB158", Offset = "0x11CB158", VA = "0x11CB158")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000366")]
	public Transform Transform
	{
		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x11CB160", Offset = "0x11CB160", VA = "0x11CB160")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000367")]
	public Transform RootTransform
	{
		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x11CB168", Offset = "0x11CB168", VA = "0x11CB168")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000368")]
	public Transform HeadTransform
	{
		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x11CB170", Offset = "0x11CB170", VA = "0x11CB170")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000369")]
	public Transform RightHandTransform
	{
		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x11CB178", Offset = "0x11CB178", VA = "0x11CB178")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700036A")]
	public Transform LeftHandTransform
	{
		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x11CB180", Offset = "0x11CB180", VA = "0x11CB180")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700036B")]
	public BoltPlayerVRIK BoltPlayerVRIK
	{
		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x11CB188", Offset = "0x11CB188", VA = "0x11CB188")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700036C")]
	public GameObject FocusLostIcon
	{
		[Token(Token = "0x6001700")]
		[Address(RVA = "0x11CB190", Offset = "0x11CB190", VA = "0x11CB190")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700036D")]
	public bool IsLocalPlayer
	{
		[Token(Token = "0x6001701")]
		[Address(RVA = "0x11CB198", Offset = "0x11CB198", VA = "0x11CB198")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700036E")]
	public int CurrentPlayerHeight
	{
		[Token(Token = "0x6001702")]
		[Address(RVA = "0x11CB1A0", Offset = "0x11CB1A0", VA = "0x11CB1A0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700036F")]
	public int CurrentPlayerArmLength
	{
		[Token(Token = "0x6001703")]
		[Address(RVA = "0x11CB1A8", Offset = "0x11CB1A8", VA = "0x11CB1A8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000370")]
	public HandInputToken LastRightHandInput
	{
		[Token(Token = "0x6001704")]
		[Address(RVA = "0x11CB1B0", Offset = "0x11CB1B0", VA = "0x11CB1B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000371")]
	public HandInputToken LastLeftHandInput
	{
		[Token(Token = "0x6001705")]
		[Address(RVA = "0x11CB1B8", Offset = "0x11CB1B8", VA = "0x11CB1B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000372")]
	public VrHand RightHand
	{
		[Token(Token = "0x6001706")]
		[Address(RVA = "0x11CB1C0", Offset = "0x11CB1C0", VA = "0x11CB1C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000373")]
	public VrHand LeftHand
	{
		[Token(Token = "0x6001707")]
		[Address(RVA = "0x11CB1C8", Offset = "0x11CB1C8", VA = "0x11CB1C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000374")]
	public BoltEntity BoltEntity
	{
		[Token(Token = "0x6001709")]
		[Address(RVA = "0x11CB1D0", Offset = "0x11CB1D0", VA = "0x11CB1D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000375")]
	internal BoltPlayerContainer BoltPlayerContainer
	{
		[Token(Token = "0x600170A")]
		[Address(RVA = "0x11CB1EC", Offset = "0x11CB1EC", VA = "0x11CB1EC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600170B")]
		[Address(RVA = "0x11CB1F4", Offset = "0x11CB1F4", VA = "0x11CB1F4")]
		set
		{
		}
	}

	[Token(Token = "0x17000376")]
	public BoneVectorDataToken BoneVectorData
	{
		[Token(Token = "0x600170C")]
		[Address(RVA = "0x11CB1FC", Offset = "0x11CB1FC", VA = "0x11CB1FC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600170D")]
		[Address(RVA = "0x11CB204", Offset = "0x11CB204", VA = "0x11CB204")]
		set
		{
		}
	}

	[Token(Token = "0x17000377")]
	public BoneQuaternionDataToken BoneQuaternionData
	{
		[Token(Token = "0x600170E")]
		[Address(RVA = "0x11CB20C", Offset = "0x11CB20C", VA = "0x11CB20C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600170F")]
		[Address(RVA = "0x11CB214", Offset = "0x11CB214", VA = "0x11CB214")]
		set
		{
		}
	}

	[Token(Token = "0x17000378")]
	public PlayerVoiceController PlayerVoiceController
	{
		[Token(Token = "0x6001710")]
		[Address(RVA = "0x11CB21C", Offset = "0x11CB21C", VA = "0x11CB21C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000379")]
	public VOAudioPlayer PlayerVOAudioPlayer
	{
		[Token(Token = "0x6001723")]
		[Address(RVA = "0x11CC978", Offset = "0x11CC978", VA = "0x11CC978")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037A")]
	internal HealthStatus RootHealthStatus
	{
		[Token(Token = "0x6001724")]
		[Address(RVA = "0x11CC980", Offset = "0x11CC980", VA = "0x11CC980")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037B")]
	internal bool Attached
	{
		[Token(Token = "0x6001725")]
		[Address(RVA = "0x11CC988", Offset = "0x11CC988", VA = "0x11CC988")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001726")]
		[Address(RVA = "0x11CC990", Offset = "0x11CC990", VA = "0x11CC990")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700037C")]
	public InventorySlot_AmmoPouch AmmoPouch
	{
		[Token(Token = "0x6001727")]
		[Address(RVA = "0x11CC99C", Offset = "0x11CC99C", VA = "0x11CC99C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001708")]
	[Address(RVA = "0x11C8954", Offset = "0x11C8954", VA = "0x11C8954")]
	public List<VrHand> GetBothHands()
	{
		return null;
	}

	[Token(Token = "0x6001711")]
	[Address(RVA = "0x11CB224", Offset = "0x11CB224", VA = "0x11CB224")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001712")]
	[Address(RVA = "0x11CB4A0", Offset = "0x11CB4A0", VA = "0x11CB4A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001713")]
	[Address(RVA = "0x11CB664", Offset = "0x11CB664", VA = "0x11CB664")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001714")]
	[Address(RVA = "0x11CB74C", Offset = "0x11CB74C", VA = "0x11CB74C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6001715")]
	[Address(RVA = "0x11CB914", Offset = "0x11CB914", VA = "0x11CB914")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6001716")]
	[Address(RVA = "0x11CBA84", Offset = "0x11CBA84", VA = "0x11CBA84")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x6001717")]
	[Address(RVA = "0x11CBC0C", Offset = "0x11CBC0C", VA = "0x11CBC0C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001718")]
	[Address(RVA = "0x11CC004", Offset = "0x11CC004", VA = "0x11CC004")]
	private void Update()
	{
	}

	[Token(Token = "0x6001719")]
	[Address(RVA = "0x11CC1C8", Offset = "0x11CC1C8", VA = "0x11CC1C8")]
	private void HearthBeatUpdate()
	{
	}

	[Token(Token = "0x600171A")]
	[Address(RVA = "0x11C7FD4", Offset = "0x11C7FD4", VA = "0x11C7FD4")]
	public void Attach(BoltPlayerContainer container, PlayerAttachToken token, bool remote)
	{
	}

	[Token(Token = "0x600171B")]
	[Address(RVA = "0x11C8AC4", Offset = "0x11C8AC4", VA = "0x11C8AC4")]
	public void Detach(BoltPlayerContainer container, bool remote)
	{
	}

	[Token(Token = "0x600171C")]
	[Address(RVA = "0x11C8F94", Offset = "0x11C8F94", VA = "0x11C8F94")]
	public void SimulateController()
	{
	}

	[Token(Token = "0x600171D")]
	[Address(RVA = "0x11C9BF4", Offset = "0x11C9BF4", VA = "0x11C9BF4")]
	public void SimulateOwner()
	{
	}

	[Token(Token = "0x600171E")]
	[Address(RVA = "0x11CA270", Offset = "0x11CA270", VA = "0x11CA270")]
	public void ExecuteCommand(Command command, bool resetState)
	{
	}

	[Token(Token = "0x600171F")]
	[Address(RVA = "0x11CC320", Offset = "0x11CC320", VA = "0x11CC320")]
	public void UpdatePlayer(IVRPlayerCommandInput input)
	{
	}

	[Token(Token = "0x6001720")]
	[Address(RVA = "0x11CC850", Offset = "0x11CC850", VA = "0x11CC850")]
	public void SetPlayerPosition(Vector3 position)
	{
	}

	[Token(Token = "0x6001721")]
	[Address(RVA = "0x11CC86C", Offset = "0x11CC86C", VA = "0x11CC86C")]
	private void OnServerChangedName()
	{
	}

	[Token(Token = "0x6001722")]
	[Address(RVA = "0x11CC948", Offset = "0x11CC948", VA = "0x11CC948")]
	public VOAudioPlayer GetAudioPlayer(int index)
	{
		return null;
	}

	[Token(Token = "0x6001728")]
	[Address(RVA = "0x11CC9A4", Offset = "0x11CC9A4", VA = "0x11CC9A4")]
	private void OnServerChangedHealth()
	{
	}

	[Token(Token = "0x6001729")]
	[Address(RVA = "0x11CCABC", Offset = "0x11CCABC", VA = "0x11CCABC")]
	private void OnServerChangedHeight()
	{
	}

	[Token(Token = "0x600172A")]
	[Address(RVA = "0x11CCCB8", Offset = "0x11CCCB8", VA = "0x11CCCB8")]
	private void OnServerChangedArmLength()
	{
	}

	[Token(Token = "0x600172B")]
	[Address(RVA = "0x11CCD90", Offset = "0x11CCD90", VA = "0x11CCD90")]
	private void OnServerChangedRightHandInput()
	{
	}

	[Token(Token = "0x600172C")]
	[Address(RVA = "0x11CCF6C", Offset = "0x11CCF6C", VA = "0x11CCF6C")]
	private void OnServerChangedLeftHandInput()
	{
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0x11CD148", Offset = "0x11CD148", VA = "0x11CD148")]
	internal void SetRescuable(bool rescuable)
	{
	}

	[Token(Token = "0x600172E")]
	[Address(RVA = "0x11C7338", Offset = "0x11C7338", VA = "0x11C7338")]
	internal void SetInvincible(bool invincible)
	{
	}

	[Token(Token = "0x600172F")]
	[Address(RVA = "0x11CD168", Offset = "0x11CD168", VA = "0x11CD168")]
	public void OnSceneLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6001730")]
	[Address(RVA = "0x11CD240", Offset = "0x11CD240", VA = "0x11CD240")]
	[IteratorStateMachine(typeof(<DeathInvincibilityRoutine>d__132))]
	internal IEnumerator DeathInvincibilityRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001731")]
	[Address(RVA = "0x11CD2DC", Offset = "0x11CD2DC", VA = "0x11CD2DC")]
	public Transform GetInventoryTransformFromKey(string inventoryKey)
	{
		return null;
	}

	[Token(Token = "0x6001732")]
	[Address(RVA = "0x11CAC5C", Offset = "0x11CAC5C", VA = "0x11CAC5C")]
	public void SetInvincibleAfterTime(bool invincible)
	{
	}

	[Token(Token = "0x6001733")]
	[Address(RVA = "0x11CD36C", Offset = "0x11CD36C", VA = "0x11CD36C")]
	private void OnSendResetObjectReceived(SendResetObject resetObject)
	{
	}

	[Token(Token = "0x6001734")]
	[Address(RVA = "0x11CD420", Offset = "0x11CD420", VA = "0x11CD420")]
	public BoltPlayerController()
	{
	}
}
[Token(Token = "0x20003ED")]
public class BoltPlayerInterpolator : MonoBehaviour
{
	[Token(Token = "0x400126A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("This should be true on remote (target) and false on source (own rig)")]
	[SerializeField]
	private bool m_shouldLerp;

	[Token(Token = "0x400126B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float m_movementLerpSpeed;

	[Token(Token = "0x400126C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_rotationLerpSpeed;

	[Token(Token = "0x400126D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform m_rootTransform;

	[Token(Token = "0x400126E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform m_headTransform;

	[Token(Token = "0x400126F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform m_vrHandLeftTransform;

	[Token(Token = "0x4001270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_vrHandRightTransform;

	[Token(Token = "0x4001271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_wristBoneL;

	[Token(Token = "0x4001272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform m_wristBoneR;

	[Token(Token = "0x4001273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Vector3 m_handAdjustVector;

	[Token(Token = "0x4001274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 m_rootNextPosition;

	[Token(Token = "0x4001275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 m_vrHandLeftNextPosition;

	[Token(Token = "0x4001276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 m_vrHandRightNextPosition;

	[Token(Token = "0x4001277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Quaternion m_rootNextRotation;

	[Token(Token = "0x4001278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Quaternion m_headNextRotation;

	[Token(Token = "0x4001279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Quaternion m_vrHandLeftNextRotation;

	[Token(Token = "0x400127A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Quaternion m_vrHandRightNextRotation;

	[Token(Token = "0x400127B")]
	private const float m_maxDistance = 5f;

	[Token(Token = "0x400127C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool m_moveInstantNextFrame;

	[Token(Token = "0x1700037F")]
	public bool ShouldLerp
	{
		[Token(Token = "0x600173C")]
		[Address(RVA = "0x11CD790", Offset = "0x11CD790", VA = "0x11CD790")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600173D")]
		[Address(RVA = "0x11CD798", Offset = "0x11CD798", VA = "0x11CD798")]
		set
		{
		}
	}

	[Token(Token = "0x600173E")]
	[Address(RVA = "0x11CD7A4", Offset = "0x11CD7A4", VA = "0x11CD7A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600173F")]
	[Address(RVA = "0x11CD920", Offset = "0x11CD920", VA = "0x11CD920")]
	public void SetNextPositions(Vector3 v1, Vector3 v2, Vector3 v3)
	{
	}

	[Token(Token = "0x6001740")]
	[Address(RVA = "0x11CDAA8", Offset = "0x11CDAA8", VA = "0x11CDAA8")]
	public void SetNextRotations(Quaternion q1, Quaternion q2, Quaternion q3, Quaternion q4)
	{
	}

	[Token(Token = "0x6001741")]
	[Address(RVA = "0x11CDAC8", Offset = "0x11CDAC8", VA = "0x11CDAC8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001742")]
	[Address(RVA = "0x11CE180", Offset = "0x11CE180", VA = "0x11CE180")]
	public BoltPlayerInterpolator()
	{
	}
}
[Token(Token = "0x20003EE")]
public class BoltPlayerPhysicsController : CachedMonoBehaviour
{
	[Token(Token = "0x400127D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Colliders")]
	[SerializeField]
	[Min(0f)]
	private float m_footMoveMaxLean;

	[Token(Token = "0x400127E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x400127F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private CapsuleCollider m_bodyCollider;

	[Token(Token = "0x4001280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private CapsuleCollider m_bodyDamageCollider;

	[Token(Token = "0x4001281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Collider m_headCollider;

	[Token(Token = "0x4001282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_currentCapsuleHeight;

	[Token(Token = "0x4001283")]
	private const float c_heightUpdateThreshold = 0.2f;

	[Token(Token = "0x4001284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_groundLayer;

	[Token(Token = "0x6001743")]
	[Address(RVA = "0x11CE194", Offset = "0x11CE194", VA = "0x11CE194")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001744")]
	[Address(RVA = "0x11CE270", Offset = "0x11CE270", VA = "0x11CE270")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001745")]
	[Address(RVA = "0x11CE278", Offset = "0x11CE278", VA = "0x11CE278")]
	private void UpdateColliders(bool skipRailingLeanCorrection)
	{
	}

	[Token(Token = "0x6001746")]
	[Address(RVA = "0x11CE410", Offset = "0x11CE410", VA = "0x11CE410")]
	private bool CheckShouldFeetSnapFollow(Vector2 headPlanePosition, Vector3 headForward, Vector2 feetPlanePosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6001747")]
	[Address(RVA = "0x11CE438", Offset = "0x11CE438", VA = "0x11CE438")]
	public BoltPlayerPhysicsController()
	{
	}
}
[Token(Token = "0x20003EF")]
public enum NetworkPlayerVRIKType
{
	[Token(Token = "0x4001286")]
	Local,
	[Token(Token = "0x4001287")]
	Remote
}
[Token(Token = "0x20003F0")]
public class BoltPlayerVRIK : MonoBehaviour
{
	[Token(Token = "0x4001288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private NetworkPlayerVRIKType m_VRIKType;

	[Token(Token = "0x4001289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Local VRIK Setup")]
	[SerializeField]
	private VrPlayerAvatarIKController m_vrPlayerAvatarIKController;

	[Token(Token = "0x400128A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private VRIK m_vrik;

	[Token(Token = "0x400128B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform m_ikTargetHead;

	[Token(Token = "0x400128C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform m_ikTargetHandL;

	[Token(Token = "0x400128D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_ikTargetHandR;

	[Token(Token = "0x400128E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_ikTargetPelvis;

	[Token(Token = "0x400128F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform m_ikTargetBody;

	[Token(Token = "0x4001290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform m_ikTargetFootL;

	[Token(Token = "0x4001291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform m_ikTargetFootR;

	[Token(Token = "0x4001292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("This should be assigned on the PlayerRig prefab with the source bone transforms")]
	[Header("Remote VRIK Setup")]
	[SerializeField]
	private BoneReferenceContainer m_boneReferenceContainer;

	[Token(Token = "0x4001293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private BoltPlayerInterpolator m_boltPlayerInterpolator;

	[Token(Token = "0x4001294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Debug")]
	[SerializeField]
	private bool m_mirrorPlayerRig;

	[Token(Token = "0x4001295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private BoltPlayerController m_boltPlayerController;

	[Token(Token = "0x4001296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private BoltPlayerController m_playerRigController;

	[Token(Token = "0x17000380")]
	public VrPlayerAvatarIKController AvatarIKController
	{
		[Token(Token = "0x6001749")]
		[Address(RVA = "0x11CE48C", Offset = "0x11CE48C", VA = "0x11CE48C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600174A")]
		[Address(RVA = "0x11CE494", Offset = "0x11CE494", VA = "0x11CE494")]
		set
		{
		}
	}

	[Token(Token = "0x600174B")]
	[Address(RVA = "0x11CE49C", Offset = "0x11CE49C", VA = "0x11CE49C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600174C")]
	[Address(RVA = "0x11CE684", Offset = "0x11CE684", VA = "0x11CE684")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600174D")]
	[Address(RVA = "0x11CE688", Offset = "0x11CE688", VA = "0x11CE688")]
	private void OnBonePositionDataChanged(IState state, string path, ArrayIndices indices)
	{
	}

	[Token(Token = "0x600174E")]
	[Address(RVA = "0x11CE6FC", Offset = "0x11CE6FC", VA = "0x11CE6FC")]
	private void OnBoneRotationDataChanged(IState state, string path, ArrayIndices indices)
	{
	}

	[Token(Token = "0x600174F")]
	[Address(RVA = "0x11CE770", Offset = "0x11CE770", VA = "0x11CE770")]
	public BoltPlayerVRIK()
	{
	}
}
[Token(Token = "0x20003F1")]
public class BoneReferenceContainer : MonoBehaviour
{
	[Token(Token = "0x4001297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("This holds all bones to be synced, setup must be identical on source and remote")]
	private Transform[] m_bones;

	[Token(Token = "0x4001298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Specific bones setup")]
	private Transform m_headBone;

	[Token(Token = "0x4001299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform m_elbowL;

	[Token(Token = "0x400129A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform m_elbowR;

	[Token(Token = "0x400129B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform m_wristL;

	[Token(Token = "0x400129C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_wristR;

	[Token(Token = "0x400129D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("This should be true on remote (target) and false on source (own rig)")]
	private bool m_shouldLerp;

	[Token(Token = "0x400129E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float m_lerpSpeed;

	[Token(Token = "0x400129F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion m_headBoneNextRotation;

	[Token(Token = "0x40012A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] m_boneNextPositions;

	[Token(Token = "0x40012A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion[] m_boneNextRotations;

	[Token(Token = "0x17000381")]
	public Transform[] Bones
	{
		[Token(Token = "0x6001750")]
		[Address(RVA = "0x11CE778", Offset = "0x11CE778", VA = "0x11CE778")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000382")]
	public bool ShouldLerp
	{
		[Token(Token = "0x6001751")]
		[Address(RVA = "0x11CE780", Offset = "0x11CE780", VA = "0x11CE780")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001752")]
		[Address(RVA = "0x11CE788", Offset = "0x11CE788", VA = "0x11CE788")]
		set
		{
		}
	}

	[Token(Token = "0x6001753")]
	[Address(RVA = "0x11CE794", Offset = "0x11CE794", VA = "0x11CE794")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001754")]
	[Address(RVA = "0x11CE894", Offset = "0x11CE894", VA = "0x11CE894")]
	public BoneVectorDataToken GetPositionsAsProtocolToken()
	{
		return null;
	}

	[Token(Token = "0x6001755")]
	[Address(RVA = "0x11CE978", Offset = "0x11CE978", VA = "0x11CE978")]
	public BoneQuaternionDataToken GetRotationsAsProtocolToken()
	{
		return null;
	}

	[Token(Token = "0x6001756")]
	[Address(RVA = "0x11CEA5C", Offset = "0x11CEA5C", VA = "0x11CEA5C")]
	public void SetBoneNextLocalPositions(NetworkArray_Vector newPositions)
	{
	}

	[Token(Token = "0x6001757")]
	[Address(RVA = "0x11CEB18", Offset = "0x11CEB18", VA = "0x11CEB18")]
	public void SetBoneNextLocalRotations(NetworkArray_Quaternion newRotations)
	{
	}

	[Token(Token = "0x6001758")]
	[Address(RVA = "0x11CEBD4", Offset = "0x11CEBD4", VA = "0x11CEBD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001759")]
	[Address(RVA = "0x11CEF04", Offset = "0x11CEF04", VA = "0x11CEF04")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600175A")]
	[Address(RVA = "0x11CEF08", Offset = "0x11CEF08", VA = "0x11CEF08")]
	public void SetHeadNextRotations(Quaternion head)
	{
	}

	[Token(Token = "0x600175B")]
	[Address(RVA = "0x11CEF14", Offset = "0x11CEF14", VA = "0x11CEF14")]
	public BoneReferenceContainer()
	{
	}
}
[Token(Token = "0x20003F2")]
public class HandBoneReferenceContainer : MonoBehaviour
{
	[Token(Token = "0x40012A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Holds text indicating which hand this script is for, not used anywhere")]
	[SerializeField]
	private string m_hand;

	[Token(Token = "0x40012A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform b_r_root;

	[Token(Token = "0x40012A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform b_r_hand;

	[Token(Token = "0x40012A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform b_r_grip;

	[Token(Token = "0x40012A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform b_r_index1;

	[Token(Token = "0x40012A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform b_r_index2;

	[Token(Token = "0x40012A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform b_r_index3;

	[Token(Token = "0x40012A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform b_r_middle1;

	[Token(Token = "0x40012AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform b_r_middle2;

	[Token(Token = "0x40012AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform b_r_middle3;

	[Token(Token = "0x40012AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform b_r_pinky0;

	[Token(Token = "0x40012AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform b_r_pinky1;

	[Token(Token = "0x40012AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform b_r_pinky2;

	[Token(Token = "0x40012AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform b_r_pinky3;

	[Token(Token = "0x40012B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform b_r_ring1;

	[Token(Token = "0x40012B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform b_r_ring2;

	[Token(Token = "0x40012B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Transform b_r_ring3;

	[Token(Token = "0x40012B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Transform b_r_thumb1;

	[Token(Token = "0x40012B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Transform b_r_thumb2;

	[Token(Token = "0x40012B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Transform b_r_thumb3;

	[Token(Token = "0x17000383")]
	public Transform B_r_root
	{
		[Token(Token = "0x600175C")]
		[Address(RVA = "0x11CF050", Offset = "0x11CF050", VA = "0x11CF050")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000384")]
	public Transform B_r_hand
	{
		[Token(Token = "0x600175D")]
		[Address(RVA = "0x11CF058", Offset = "0x11CF058", VA = "0x11CF058")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000385")]
	public Transform B_r_grip
	{
		[Token(Token = "0x600175E")]
		[Address(RVA = "0x11CF060", Offset = "0x11CF060", VA = "0x11CF060")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000386")]
	public Transform B_r_index1
	{
		[Token(Token = "0x600175F")]
		[Address(RVA = "0x11CF068", Offset = "0x11CF068", VA = "0x11CF068")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000387")]
	public Transform B_r_index2
	{
		[Token(Token = "0x6001760")]
		[Address(RVA = "0x11CF070", Offset = "0x11CF070", VA = "0x11CF070")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000388")]
	public Transform B_r_index3
	{
		[Token(Token = "0x6001761")]
		[Address(RVA = "0x11CF078", Offset = "0x11CF078", VA = "0x11CF078")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000389")]
	public Transform B_r_middle1
	{
		[Token(Token = "0x6001762")]
		[Address(RVA = "0x11CF080", Offset = "0x11CF080", VA = "0x11CF080")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700038A")]
	public Transform B_r_middle2
	{
		[Token(Token = "0x6001763")]
		[Address(RVA = "0x11CF088", Offset = "0x11CF088", VA = "0x11CF088")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700038B")]
	public Transform B_r_middle3
	{
		[Token(Token = "0x6001764")]
		[Address(RVA = "0x11CF090", Offset = "0x11CF090", VA = "0x11CF090")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700038C")]
	public Transform B_r_pinky0
	{
		[Token(Token = "0x6001765")]
		[Address(RVA = "0x11CF098", Offset = "0x11CF098", VA = "0x11CF098")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700038D")]
	public Transform B_r_pinky1
	{
		[Token(Token = "0x6001766")]
		[Address(RVA = "0x11CF0A0", Offset = "0x11CF0A0", VA = "0x11CF0A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700038E")]
	public Transform B_r_pinky2
	{
		[Token(Token = "0x6001767")]
		[Address(RVA = "0x11CF0A8", Offset = "0x11CF0A8", VA = "0x11CF0A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700038F")]
	public Transform B_r_pinky3
	{
		[Token(Token = "0x6001768")]
		[Address(RVA = "0x11CF0B0", Offset = "0x11CF0B0", VA = "0x11CF0B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000390")]
	public Transform B_r_ring1
	{
		[Token(Token = "0x6001769")]
		[Address(RVA = "0x11CF0B8", Offset = "0x11CF0B8", VA = "0x11CF0B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000391")]
	public Transform B_r_ring2
	{
		[Token(Token = "0x600176A")]
		[Address(RVA = "0x11CF0C0", Offset = "0x11CF0C0", VA = "0x11CF0C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000392")]
	public Transform B_r_ring3
	{
		[Token(Token = "0x600176B")]
		[Address(RVA = "0x11CF0C8", Offset = "0x11CF0C8", VA = "0x11CF0C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000393")]
	public Transform B_r_thumb1
	{
		[Token(Token = "0x600176C")]
		[Address(RVA = "0x11CF0D0", Offset = "0x11CF0D0", VA = "0x11CF0D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000394")]
	public Transform B_r_thumb2
	{
		[Token(Token = "0x600176D")]
		[Address(RVA = "0x11CF0D8", Offset = "0x11CF0D8", VA = "0x11CF0D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000395")]
	public Transform B_r_thumb3
	{
		[Token(Token = "0x600176E")]
		[Address(RVA = "0x11CF0E0", Offset = "0x11CF0E0", VA = "0x11CF0E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600176F")]
	[Address(RVA = "0x11CF0E8", Offset = "0x11CF0E8", VA = "0x11CF0E8")]
	public HandBoneReferenceContainer()
	{
	}
}
[Token(Token = "0x20003F3")]
public class PlayerVoiceController : MonoBehaviour
{
	[Token(Token = "0x20003F4")]
	[CompilerGenerated]
	private sealed class <LoginAndJoinChannelRoutine>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerVoiceController <>4__this;

		[Token(Token = "0x17000396")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001778")]
			[Address(RVA = "0x11CF6E0", Offset = "0x11CF6E0", VA = "0x11CF6E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000397")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600177A")]
			[Address(RVA = "0x11CF728", Offset = "0x11CF728", VA = "0x11CF728", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0x11CF1B8", Offset = "0x11CF1B8", VA = "0x11CF1B8")]
		[DebuggerHidden]
		public <LoginAndJoinChannelRoutine>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0x11CF258", Offset = "0x11CF258", VA = "0x11CF258", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0x11CF278", Offset = "0x11CF278", VA = "0x11CF278", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0x11CF6B4", Offset = "0x11CF6B4", VA = "0x11CF6B4")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x11CF6E8", Offset = "0x11CF6E8", VA = "0x11CF6E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private WaitForSecondsRealtime WaitForSecondRealtime;

	[Token(Token = "0x40012B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Coroutine m_loginAndJoinCoroutine;

	[Token(Token = "0x6001770")]
	[Address(RVA = "0x11CF0F0", Offset = "0x11CF0F0", VA = "0x11CF0F0")]
	public void LoginAndJoinChannel()
	{
	}

	[Token(Token = "0x6001771")]
	[Address(RVA = "0x11CF144", Offset = "0x11CF144", VA = "0x11CF144")]
	[IteratorStateMachine(typeof(<LoginAndJoinChannelRoutine>d__3))]
	private IEnumerator LoginAndJoinChannelRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001772")]
	[Address(RVA = "0x11C8CF0", Offset = "0x11C8CF0", VA = "0x11C8CF0")]
	public void LeaveVoipChannel()
	{
	}

	[Token(Token = "0x6001773")]
	[Address(RVA = "0x11CF1E0", Offset = "0x11CF1E0", VA = "0x11CF1E0")]
	public PlayerVoiceController()
	{
	}
}
[Token(Token = "0x20003F5")]
public class RemoteButtonInput : IButtonInput
{
	[Token(Token = "0x17000398")]
	public bool Value
	{
		[Token(Token = "0x600177C")]
		[Address(RVA = "0x11CF774", Offset = "0x11CF774", VA = "0x11CF774", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600177D")]
		[Address(RVA = "0x11CF77C", Offset = "0x11CF77C", VA = "0x11CF77C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000399")]
	public bool Down
	{
		[Token(Token = "0x600177E")]
		[Address(RVA = "0x11CF788", Offset = "0x11CF788", VA = "0x11CF788", Slot = "5")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600177F")]
		[Address(RVA = "0x11CF790", Offset = "0x11CF790", VA = "0x11CF790")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700039A")]
	public bool Up
	{
		[Token(Token = "0x6001780")]
		[Address(RVA = "0x11CF79C", Offset = "0x11CF79C", VA = "0x11CF79C", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001781")]
		[Address(RVA = "0x11CF7A4", Offset = "0x11CF7A4", VA = "0x11CF7A4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600177B")]
	[Address(RVA = "0x11CF730", Offset = "0x11CF730", VA = "0x11CF730")]
	public RemoteButtonInput(HandInputToken.ButtonInput buttonInput)
	{
	}
}
[Token(Token = "0x20003F6")]
public class RemoteTriggerInput : ITriggerInput
{
	[Token(Token = "0x1700039B")]
	public float Value
	{
		[Token(Token = "0x6001783")]
		[Address(RVA = "0x11CF7FC", Offset = "0x11CF7FC", VA = "0x11CF7FC", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001784")]
		[Address(RVA = "0x11CF804", Offset = "0x11CF804", VA = "0x11CF804")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700039C")]
	public bool Down
	{
		[Token(Token = "0x6001785")]
		[Address(RVA = "0x11CF80C", Offset = "0x11CF80C", VA = "0x11CF80C", Slot = "5")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001786")]
		[Address(RVA = "0x11CF814", Offset = "0x11CF814", VA = "0x11CF814")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700039D")]
	public bool Up
	{
		[Token(Token = "0x6001787")]
		[Address(RVA = "0x11CF820", Offset = "0x11CF820", VA = "0x11CF820", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001788")]
		[Address(RVA = "0x11CF828", Offset = "0x11CF828", VA = "0x11CF828")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700039E")]
	public bool Held
	{
		[Token(Token = "0x6001789")]
		[Address(RVA = "0x11CF834", Offset = "0x11CF834", VA = "0x11CF834", Slot = "7")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600178A")]
		[Address(RVA = "0x11CF83C", Offset = "0x11CF83C", VA = "0x11CF83C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001782")]
	[Address(RVA = "0x11CF7B0", Offset = "0x11CF7B0", VA = "0x11CF7B0")]
	public RemoteTriggerInput(HandInputToken.TriggerInput triggerInput)
	{
	}
}
[Token(Token = "0x20003F7")]
public class RemoteVrHandInput : MonoBehaviour, IHandInput
{
	[Token(Token = "0x40012C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Handedness m_handedness;

	[Token(Token = "0x40012C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BoltPlayerContainer m_boltPlayerContainer;

	[Token(Token = "0x1700039F")]
	public ITriggerInput gripTrigger
	{
		[Token(Token = "0x600178B")]
		[Address(RVA = "0x11CF848", Offset = "0x11CF848", VA = "0x11CF848", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A0")]
	public ITriggerInput mainTrigger
	{
		[Token(Token = "0x600178C")]
		[Address(RVA = "0x11CF8D8", Offset = "0x11CF8D8", VA = "0x11CF8D8", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A1")]
	public IButtonInput primaryButton
	{
		[Token(Token = "0x600178D")]
		[Address(RVA = "0x11CF968", Offset = "0x11CF968", VA = "0x11CF968", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A2")]
	public IButtonInput secondaryButton
	{
		[Token(Token = "0x600178E")]
		[Address(RVA = "0x11CF9F8", Offset = "0x11CF9F8", VA = "0x11CF9F8", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A3")]
	public IButtonInput menuButton
	{
		[Token(Token = "0x600178F")]
		[Address(RVA = "0x11CFA88", Offset = "0x11CFA88", VA = "0x11CFA88", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A4")]
	public IButtonInput stickButton
	{
		[Token(Token = "0x6001790")]
		[Address(RVA = "0x11CFAC8", Offset = "0x11CFAC8", VA = "0x11CFAC8", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A5")]
	public float ThumbTouchValue
	{
		[Token(Token = "0x6001791")]
		[Address(RVA = "0x11CFB08", Offset = "0x11CFB08", VA = "0x11CFB08", Slot = "10")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003A6")]
	public IAxisInput stickAxis
	{
		[Token(Token = "0x6001792")]
		[Address(RVA = "0x11CFB48", Offset = "0x11CFB48", VA = "0x11CFB48", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001793")]
	[Address(RVA = "0x11CFB88", Offset = "0x11CFB88", VA = "0x11CFB88")]
	public RemoteVrHandInput()
	{
	}
}
[Token(Token = "0x20003F8")]
public class BoltPrefabDatabasePreloader : SceneSingleton<BoltPrefabDatabasePreloader>
{
	[Token(Token = "0x40012C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_manageMemory;

	[Token(Token = "0x40012C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PrefabDatabase m_databaseRef;

	[Token(Token = "0x40012C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ResourceRequest m_request;

	[Token(Token = "0x6001794")]
	[Address(RVA = "0x11CFB90", Offset = "0x11CFB90", VA = "0x11CFB90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001795")]
	[Address(RVA = "0x11CFBDC", Offset = "0x11CFBDC", VA = "0x11CFBDC")]
	public void LoadAssets()
	{
	}

	[Token(Token = "0x6001796")]
	[Address(RVA = "0x11CFC98", Offset = "0x11CFC98", VA = "0x11CFC98")]
	private void Update()
	{
	}

	[Token(Token = "0x6001797")]
	[Address(RVA = "0x11CFD8C", Offset = "0x11CFD8C", VA = "0x11CFD8C")]
	public void UnloadAssets()
	{
	}

	[Token(Token = "0x6001798")]
	[Address(RVA = "0x11CFE20", Offset = "0x11CFE20", VA = "0x11CFE20")]
	public BoltPrefabDatabasePreloader()
	{
	}
}
[Token(Token = "0x20003F9")]
public class NetworkGameObjectState : MonoBehaviour
{
	[Token(Token = "0x40012C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("If we dont detach on disable, then we should at least frezze the bolt entity to stop replication and simulation.")]
	[SerializeField]
	private bool m_freezeOnDisable;

	[Token(Token = "0x40012C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x40012C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_frozen;

	[Token(Token = "0x6001799")]
	[Address(RVA = "0x11CFE70", Offset = "0x11CFE70", VA = "0x11CFE70")]
	private void Awake()
	{
	}

	[Token(Token = "0x600179A")]
	[Address(RVA = "0x11CFEC8", Offset = "0x11CFEC8", VA = "0x11CFEC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600179B")]
	[Address(RVA = "0x11CFF0C", Offset = "0x11CFF0C", VA = "0x11CFF0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600179C")]
	[Address(RVA = "0x11CFFAC", Offset = "0x11CFFAC", VA = "0x11CFFAC", Slot = "4")]
	public virtual void ManualAttach(IProtocolToken token)
	{
	}

	[Token(Token = "0x600179D")]
	[Address(RVA = "0x11D00A4", Offset = "0x11D00A4", VA = "0x11D00A4")]
	public NetworkGameObjectState()
	{
	}
}
[Token(Token = "0x20003FA")]
[DisallowMultipleComponent]
[RequireComponent(typeof(BoltEntity))]
public class NetworkPoolable : MonoBehaviour
{
	[Token(Token = "0x40012CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("This can be disabled if you would like to manually attach this poolable object")]
	[SerializeField]
	private bool m_attachOnAlloc;

	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[UnityEngine.Tooltip("This can be disabled if you would like to manually detach this poolable object")]
	[SerializeField]
	private bool m_detachOnReturn;

	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x40012CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Poolable m_poolable;

	[Token(Token = "0x170003A7")]
	public static bool SkipAttachOnAllocFromPool
	{
		[Token(Token = "0x600179E")]
		[Address(RVA = "0x11D00B4", Offset = "0x11D00B4", VA = "0x11D00B4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600179F")]
		[Address(RVA = "0x11D00FC", Offset = "0x11D00FC", VA = "0x11D00FC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170003A8")]
	public bool AttachOnAlloc
	{
		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x11D0148", Offset = "0x11D0148", VA = "0x11D0148")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x11D0150", Offset = "0x11D0150", VA = "0x11D0150")]
		protected set
		{
		}
	}

	[Token(Token = "0x170003A9")]
	public bool DetachOnReturn
	{
		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x11D015C", Offset = "0x11D015C", VA = "0x11D015C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x11D0164", Offset = "0x11D0164", VA = "0x11D0164")]
		protected set
		{
		}
	}

	[Token(Token = "0x60017A4")]
	[Address(RVA = "0x11D0170", Offset = "0x11D0170", VA = "0x11D0170")]
	private void Awake()
	{
	}

	[Token(Token = "0x60017A5")]
	[Address(RVA = "0x11D0380", Offset = "0x11D0380", VA = "0x11D0380")]
	public void OnAllocFromPool()
	{
	}

	[Token(Token = "0x60017A6")]
	[Address(RVA = "0x11D0438", Offset = "0x11D0438", VA = "0x11D0438")]
	public void OnReturnToPool()
	{
	}

	[Token(Token = "0x60017A7")]
	[Address(RVA = "0x11D04B8", Offset = "0x11D04B8", VA = "0x11D04B8", Slot = "4")]
	public virtual void ManualAttach(IProtocolToken token)
	{
	}

	[Token(Token = "0x60017A8")]
	[Address(RVA = "0x11D05B0", Offset = "0x11D05B0", VA = "0x11D05B0", Slot = "5")]
	public virtual void ManualDetach(IProtocolToken token)
	{
	}

	[Token(Token = "0x60017A9")]
	[Address(RVA = "0x11D06A8", Offset = "0x11D06A8", VA = "0x11D06A8")]
	public NetworkPoolable()
	{
	}
}
[Token(Token = "0x20003FB")]
public class State_BoltPrefabDatabaseLoad : BaseStateAttachedLogic
{
	[Token(Token = "0x60017AA")]
	[Address(RVA = "0x11D06B8", Offset = "0x11D06B8", VA = "0x11D06B8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60017AB")]
	[Address(RVA = "0x11D0730", Offset = "0x11D0730", VA = "0x11D0730")]
	public State_BoltPrefabDatabaseLoad()
	{
	}
}
[Token(Token = "0x20003FC")]
public class State_BoltPrefabDatabaseUnload : BaseStateAttachedLogic
{
	[Token(Token = "0x60017AC")]
	[Address(RVA = "0x11D0738", Offset = "0x11D0738", VA = "0x11D0738", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60017AD")]
	[Address(RVA = "0x11D07B0", Offset = "0x11D07B0", VA = "0x11D07B0")]
	public State_BoltPrefabDatabaseUnload()
	{
	}
}
[Serializable]
[Token(Token = "0x20003FD")]
public class ShopCatalogueItem
{
	[Token(Token = "0x40012CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private Sprite m_buttonSprite;

	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Identifier m_schematicIdentifier;

	[Token(Token = "0x40012D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BoltEntity _entity;

	[Token(Token = "0x40012D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("When the entity is a magazine, this is the cost per bullet")]
	private int m_cost;

	[Token(Token = "0x40012D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool m_isConsumable;

	[Token(Token = "0x40012D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[SerializeField]
	private bool m_isAmmo;

	[Token(Token = "0x40012D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int m_ammoCount;

	[Token(Token = "0x170003AA")]
	public Sprite ButtonSprite
	{
		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x11D07B8", Offset = "0x11D07B8", VA = "0x11D07B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003AB")]
	public Identifier SchematicIdentifier
	{
		[Token(Token = "0x60017AF")]
		[Address(RVA = "0x11D07C0", Offset = "0x11D07C0", VA = "0x11D07C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003AC")]
	public BoltEntity Entity
	{
		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x11D07C8", Offset = "0x11D07C8", VA = "0x11D07C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003AD")]
	public int Cost
	{
		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x11D07D0", Offset = "0x11D07D0", VA = "0x11D07D0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170003AE")]
	public bool IsConsumable
	{
		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x11D07D8", Offset = "0x11D07D8", VA = "0x11D07D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003AF")]
	public bool IsAmmo
	{
		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x11D07E0", Offset = "0x11D07E0", VA = "0x11D07E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B0")]
	public int AmmoCount
	{
		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x11D07E8", Offset = "0x11D07E8", VA = "0x11D07E8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60017B5")]
	[Address(RVA = "0x11D07F0", Offset = "0x11D07F0", VA = "0x11D07F0")]
	public ShopCatalogueItem()
	{
	}
}
[Token(Token = "0x20003FE")]
public class ShopSchematic : MonoBehaviour
{
	[Token(Token = "0x60017B6")]
	[Address(RVA = "0x11D0808", Offset = "0x11D0808", VA = "0x11D0808")]
	public ShopSchematic()
	{
	}
}
[Token(Token = "0x20003FF")]
public enum LeaderboardMapName
{
	[Token(Token = "0x40012D7")]
	EMPTY,
	[Token(Token = "0x40012D8")]
	CABIN,
	[Token(Token = "0x40012D9")]
	CABIN_NIGHTMARE,
	[Token(Token = "0x40012DA")]
	CABIN_HARDCORE
}
[Token(Token = "0x2000400")]
public enum LeaderboardAPISuffix
{
	[Token(Token = "0x40012DC")]
	BESTSCORE,
	[Token(Token = "0x40012DD")]
	FASTESTRUN,
	[Token(Token = "0x40012DE")]
	TOTALSCORE,
	[Token(Token = "0x40012DF")]
	count
}
[Token(Token = "0x2000401")]
public enum LeaderboardStatus
{
	[Token(Token = "0x40012E1")]
	NOT_CACHED,
	[Token(Token = "0x40012E2")]
	WAITING_FOR_RESPONSE,
	[Token(Token = "0x40012E3")]
	ERROR,
	[Token(Token = "0x40012E4")]
	NOT_RANKED,
	[Token(Token = "0x40012E5")]
	READY
}
[Token(Token = "0x2000402")]
public class WaitForLeaderboard : CustomYieldInstruction
{
	[Token(Token = "0x40012E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool m_leaderboardReady;

	[Token(Token = "0x170003B1")]
	public override bool keepWaiting
	{
		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x11D0810", Offset = "0x11D0810", VA = "0x11D0810", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60017B8")]
	[Address(RVA = "0x11D0820", Offset = "0x11D0820", VA = "0x11D0820")]
	public WaitForLeaderboard(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly)
	{
	}
}
[Token(Token = "0x2000403")]
public class LeaderboardProvider
{
	[Token(Token = "0x60017BA")]
	[Address(RVA = "0x11D0A64", Offset = "0x11D0A64", VA = "0x11D0A64")]
	public void SendScore(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, long score)
	{
	}

	[Token(Token = "0x60017BB")]
	[Address(RVA = "0x11D09B8", Offset = "0x11D09B8", VA = "0x11D09B8")]
	public void Refresh(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly, Action<LeaderboardAPISuffix, LeaderboardMapName> onComplete)
	{
	}

	[Token(Token = "0x60017BC")]
	[Address(RVA = "0x11D0AD0", Offset = "0x11D0AD0", VA = "0x11D0AD0")]
	public static bool IsPlatformCoreInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x60017BD")]
	[Address(RVA = "0x11D0B58", Offset = "0x11D0B58", VA = "0x11D0B58")]
	public void PreloadAll()
	{
	}

	[Token(Token = "0x60017BE")]
	[Address(RVA = "0x11D0930", Offset = "0x11D0930", VA = "0x11D0930")]
	public bool Ready(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly)
	{
		return default(bool);
	}

	[Token(Token = "0x60017BF")]
	[Address(RVA = "0x11D0F94", Offset = "0x11D0F94", VA = "0x11D0F94")]
	public bool PlayerNotInResults(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly)
	{
		return default(bool);
	}

	[Token(Token = "0x60017C0")]
	[Address(RVA = "0x11D101C", Offset = "0x11D101C", VA = "0x11D101C")]
	public UILeaderboardPanelTable GetLeaderboard(LeaderboardAPISuffix lbName, LeaderboardMapName mapName, bool friendsOnly, bool nearMeOnly)
	{
		return null;
	}

	[Token(Token = "0x60017C1")]
	[Address(RVA = "0x11D0F40", Offset = "0x11D0F40", VA = "0x11D0F40")]
	public void ClearCache([Optional] LeaderboardMapName? mapName)
	{
	}

	[Token(Token = "0x60017C2")]
	[Address(RVA = "0x11D110C", Offset = "0x11D110C", VA = "0x11D110C")]
	public LeaderboardProvider()
	{
	}
}
[Token(Token = "0x2000404")]
public class State_InitializeLeaderboard : BaseStateAttachedLogic
{
	[Token(Token = "0x60017C3")]
	[Address(RVA = "0x11D1114", Offset = "0x11D1114", VA = "0x11D1114", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60017C4")]
	[Address(RVA = "0x11D11E4", Offset = "0x11D11E4", VA = "0x11D11E4")]
	public State_InitializeLeaderboard()
	{
	}
}
[Token(Token = "0x2000405")]
public class SocialUser
{
	[Token(Token = "0x40012E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string _noOculusUserName;

	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int _noOculusUserId;

	[Token(Token = "0x170003B2")]
	private static bool ValidPicoUser
	{
		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x11D14A0", Offset = "0x11D14A0", VA = "0x11D14A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B3")]
	public static ulong ID
	{
		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x11C457C", Offset = "0x11C457C", VA = "0x11C457C")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x170003B4")]
	public static string UserId
	{
		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x11BF60C", Offset = "0x11BF60C", VA = "0x11BF60C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x11D14F8", Offset = "0x11D14F8", VA = "0x11D14F8")]
		set
		{
		}
	}

	[Token(Token = "0x60017C5")]
	[Address(RVA = "0x11D11EC", Offset = "0x11D11EC", VA = "0x11D11EC")]
	static SocialUser()
	{
	}

	[Token(Token = "0x60017CA")]
	[Address(RVA = "0x11D15A8", Offset = "0x11D15A8", VA = "0x11D15A8")]
	public SocialUser()
	{
	}
}
[Token(Token = "0x2000406")]
public class A2SPing
{
	[Token(Token = "0x40012E9")]
	private const int kHeaderSize = 5;

	[Token(Token = "0x40012EA")]
	private const int kPayloadSize = 15;

	[Token(Token = "0x40012EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private byte[] _PingInfoBuffer;

	[Token(Token = "0x60017CB")]
	[Address(RVA = "0x11D15B0", Offset = "0x11D15B0", VA = "0x11D15B0")]
	public A2SPing()
	{
	}

	[Token(Token = "0x60017CC")]
	[Address(RVA = "0x11D16F8", Offset = "0x11D16F8", VA = "0x11D16F8")]
	public void Send(ref UdpClient port, ref IPEndPoint target)
	{
	}
}
[Token(Token = "0x2000407")]
public class A2SRules
{
	[Token(Token = "0x2000408")]
	public struct Rule
	{
		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string Name;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Value;
	}

	[Token(Token = "0x2000409")]
	public struct A2SRulesData
	{
		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte Header;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte Rules;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Rule Rule;
	}

	[Token(Token = "0x40012EC")]
	private const int kPacketSize = 1400;

	[Token(Token = "0x40012ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private byte[] _ResponceHeader;

	[Token(Token = "0x40012EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public A2SRulesData _Data;

	[Token(Token = "0x60017CD")]
	[Address(RVA = "0x11D1728", Offset = "0x11D1728", VA = "0x11D1728")]
	public void Initialise()
	{
	}

	[Token(Token = "0x60017CE")]
	[Address(RVA = "0x11D17B8", Offset = "0x11D17B8", VA = "0x11D17B8")]
	private byte[] GenerateBuffer()
	{
		return null;
	}

	[Token(Token = "0x60017CF")]
	[Address(RVA = "0x11D18F4", Offset = "0x11D18F4", VA = "0x11D18F4")]
	private byte[] AddRule()
	{
		return null;
	}

	[Token(Token = "0x60017D0")]
	[Address(RVA = "0x11D1A24", Offset = "0x11D1A24", VA = "0x11D1A24")]
	private byte[] ConvertStringToNullTerminatedBytes(string str)
	{
		return null;
	}

	[Token(Token = "0x60017D1")]
	[Address(RVA = "0x11D1B18", Offset = "0x11D1B18", VA = "0x11D1B18")]
	public void Send(ref UdpClient port, ref IPEndPoint target)
	{
	}

	[Token(Token = "0x60017D2")]
	[Address(RVA = "0x11D1B58", Offset = "0x11D1B58", VA = "0x11D1B58")]
	public A2SRules()
	{
	}
}
[Token(Token = "0x200040A")]
public class A2SServerInfo
{
	[Token(Token = "0x200040B")]
	public struct A2SServerInfoData
	{
		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte Header;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte Protocol;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string ServerName;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Map;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Folder;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string GameName;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public short ID;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public byte Players;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public byte MaxPlayers;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public byte Bots;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public byte ServerType;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public byte Environment;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public byte Visibility;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte VAC;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Version;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte EDF;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public short GamePort;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public long SteamID;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public short SourceTVPort;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string SourceTVName;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string Keywords;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public long GameID;
	}

	[Token(Token = "0x200040C")]
	public enum ServerType
	{
		[Token(Token = "0x400130E")]
		Dedicated,
		[Token(Token = "0x400130F")]
		NonDedicated,
		[Token(Token = "0x4001310")]
		Proxy
	}

	[Token(Token = "0x200040D")]
	public enum ServerOS
	{
		[Token(Token = "0x4001312")]
		Linux,
		[Token(Token = "0x4001313")]
		Windows,
		[Token(Token = "0x4001314")]
		Mac
	}

	[Token(Token = "0x40012F4")]
	private const int kPacketSize = 1400;

	[Token(Token = "0x40012F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private byte[] _ResponceHeader;

	[Token(Token = "0x40012F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public A2SServerInfoData _Data;

	[Token(Token = "0x60017D3")]
	[Address(RVA = "0x11D1B60", Offset = "0x11D1B60", VA = "0x11D1B60")]
	public void Initialise()
	{
	}

	[Token(Token = "0x60017D4")]
	[Address(RVA = "0x11D1BF4", Offset = "0x11D1BF4", VA = "0x11D1BF4")]
	private byte[] GenerateBuffer()
	{
		return null;
	}

	[Token(Token = "0x60017D5")]
	[Address(RVA = "0x11D221C", Offset = "0x11D221C", VA = "0x11D221C")]
	private byte[] ConvertStringToNullTerminatedBytes(string str)
	{
		return null;
	}

	[Token(Token = "0x60017D6")]
	[Address(RVA = "0x11D2310", Offset = "0x11D2310", VA = "0x11D2310")]
	public void Send(ref UdpClient port, ref IPEndPoint target)
	{
	}

	[Token(Token = "0x60017D7")]
	[Address(RVA = "0x11D2350", Offset = "0x11D2350", VA = "0x11D2350")]
	public void SetServerName(string value)
	{
	}

	[Token(Token = "0x60017D8")]
	[Address(RVA = "0x11D2358", Offset = "0x11D2358", VA = "0x11D2358")]
	public void SetCurrentMap(string value)
	{
	}

	[Token(Token = "0x60017D9")]
	[Address(RVA = "0x11D2360", Offset = "0x11D2360", VA = "0x11D2360")]
	public void SetFolder(string value)
	{
	}

	[Token(Token = "0x60017DA")]
	[Address(RVA = "0x11D2368", Offset = "0x11D2368", VA = "0x11D2368")]
	public void SetGameName(string value)
	{
	}

	[Token(Token = "0x60017DB")]
	[Address(RVA = "0x11D2370", Offset = "0x11D2370", VA = "0x11D2370")]
	public void SetServerGameVersion(string value)
	{
	}

	[Token(Token = "0x60017DC")]
	[Address(RVA = "0x11D2378", Offset = "0x11D2378", VA = "0x11D2378")]
	public void SetKeyWords(string value)
	{
	}

	[Token(Token = "0x60017DD")]
	[Address(RVA = "0x11D2390", Offset = "0x11D2390", VA = "0x11D2390")]
	public void SetProtocol(byte value)
	{
	}

	[Token(Token = "0x60017DE")]
	[Address(RVA = "0x11D2398", Offset = "0x11D2398", VA = "0x11D2398")]
	public void SetGameID(short value)
	{
	}

	[Token(Token = "0x60017DF")]
	[Address(RVA = "0x11D23A0", Offset = "0x11D23A0", VA = "0x11D23A0")]
	public void SetPlayers(byte value)
	{
	}

	[Token(Token = "0x60017E0")]
	[Address(RVA = "0x11D23A8", Offset = "0x11D23A8", VA = "0x11D23A8")]
	public void SetPlayers(int value)
	{
	}

	[Token(Token = "0x60017E1")]
	[Address(RVA = "0x11D2518", Offset = "0x11D2518", VA = "0x11D2518")]
	public void SetMaxPlayers(byte value)
	{
	}

	[Token(Token = "0x60017E2")]
	[Address(RVA = "0x11D2520", Offset = "0x11D2520", VA = "0x11D2520")]
	public void SetMaxPlayers(int value)
	{
	}

	[Token(Token = "0x60017E3")]
	[Address(RVA = "0x11D2690", Offset = "0x11D2690", VA = "0x11D2690")]
	public void SetBots(byte value)
	{
	}

	[Token(Token = "0x60017E4")]
	[Address(RVA = "0x11D2698", Offset = "0x11D2698", VA = "0x11D2698")]
	public void SetServerType(ServerType value)
	{
	}

	[Token(Token = "0x60017E5")]
	[Address(RVA = "0x11D26BC", Offset = "0x11D26BC", VA = "0x11D26BC")]
	public void SetServerOS(ServerOS value)
	{
	}

	[Token(Token = "0x60017E6")]
	[Address(RVA = "0x11D26E0", Offset = "0x11D26E0", VA = "0x11D26E0")]
	public void SetPrivate(bool value)
	{
	}

	[Token(Token = "0x60017E7")]
	[Address(RVA = "0x11D26EC", Offset = "0x11D26EC", VA = "0x11D26EC")]
	public void SetVac(bool value)
	{
	}

	[Token(Token = "0x60017E8")]
	[Address(RVA = "0x11D26F8", Offset = "0x11D26F8", VA = "0x11D26F8")]
	public void SetGamePort(short value)
	{
	}

	[Token(Token = "0x60017E9")]
	[Address(RVA = "0x11D2710", Offset = "0x11D2710", VA = "0x11D2710")]
	public void SetSteamServerID(long value)
	{
	}

	[Token(Token = "0x60017EA")]
	[Address(RVA = "0x11D2728", Offset = "0x11D2728", VA = "0x11D2728")]
	public void SetGameID(long value)
	{
	}

	[Token(Token = "0x60017EB")]
	[Address(RVA = "0x11D2740", Offset = "0x11D2740", VA = "0x11D2740")]
	public A2SServerInfo()
	{
	}
}
[Token(Token = "0x200040E")]
public class SQP : MonoBehaviour
{
	[Token(Token = "0x2000410")]
	[CompilerGenerated]
	private sealed class <PullLoop>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SQP <>4__this;

		[Token(Token = "0x170003B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017F9")]
			[Address(RVA = "0x11D325C", Offset = "0x11D325C", VA = "0x11D325C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017FB")]
			[Address(RVA = "0x11D32A4", Offset = "0x11D32A4", VA = "0x11D32A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x11D2DF4", Offset = "0x11D2DF4", VA = "0x11D2DF4")]
		[DebuggerHidden]
		public <PullLoop>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x11D3014", Offset = "0x11D3014", VA = "0x11D3014", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x11D3018", Offset = "0x11D3018", VA = "0x11D3018", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x11D3264", Offset = "0x11D3264", VA = "0x11D3264", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SqpA2sBase m_sqp;

	[Token(Token = "0x4001316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_RefeshRate;

	[Token(Token = "0x4001317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private WaitForSeconds m_waitForSeconds;

	[Token(Token = "0x4001318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public short port;

	[Token(Token = "0x60017EC")]
	[Address(RVA = "0x11D2748", Offset = "0x11D2748", VA = "0x11D2748")]
	public SQP(short listenerport)
	{
	}

	[Token(Token = "0x60017ED")]
	[Address(RVA = "0x11D2780", Offset = "0x11D2780", VA = "0x11D2780")]
	public void Start()
	{
	}

	[Token(Token = "0x60017EE")]
	[Address(RVA = "0x11D2DD8", Offset = "0x11D2DD8", VA = "0x11D2DD8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60017EF")]
	[Address(RVA = "0x11D2824", Offset = "0x11D2824", VA = "0x11D2824")]
	private void Setup()
	{
	}

	[Token(Token = "0x60017F0")]
	[Address(RVA = "0x11D2CC8", Offset = "0x11D2CC8", VA = "0x11D2CC8")]
	[IteratorStateMachine(typeof(<PullLoop>d__8))]
	private IEnumerator PullLoop()
	{
		return null;
	}

	[Token(Token = "0x60017F1")]
	[Address(RVA = "0x11D2B44", Offset = "0x11D2B44", VA = "0x11D2B44")]
	public void UpdateInfoOnce()
	{
	}

	[Token(Token = "0x60017F2")]
	[Address(RVA = "0x11D2E1C", Offset = "0x11D2E1C", VA = "0x11D2E1C")]
	public void UpdateInfo()
	{
	}
}
[Token(Token = "0x2000411")]
internal class UdpState
{
	[Token(Token = "0x400131E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IPEndPoint e;

	[Token(Token = "0x400131F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UdpClient u;

	[Token(Token = "0x60017FC")]
	[Address(RVA = "0x11D32AC", Offset = "0x11D32AC", VA = "0x11D32AC")]
	public UdpState()
	{
	}
}
[Token(Token = "0x2000412")]
public class SqpA2sBase
{
	[Token(Token = "0x4001320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public A2SServerInfo _ServerInfo;

	[Token(Token = "0x4001321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private A2SPing _Ping;

	[Token(Token = "0x4001322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private A2SRules _Rule;

	[Token(Token = "0x4001323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UdpClient _udpClient;

	[Token(Token = "0x4001324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IPEndPoint _ipEndPoint;

	[Token(Token = "0x60017FD")]
	[Address(RVA = "0x11D28C4", Offset = "0x11D28C4", VA = "0x11D28C4")]
	public SqpA2sBase(short queryPort)
	{
	}

	[Token(Token = "0x60017FE")]
	[Address(RVA = "0x11D2DF0", Offset = "0x11D2DF0", VA = "0x11D2DF0")]
	public void Destroy()
	{
	}

	[Token(Token = "0x60017FF")]
	[Address(RVA = "0x11D2D3C", Offset = "0x11D2D3C", VA = "0x11D2D3C")]
	public void StartListening()
	{
	}

	[Token(Token = "0x6001800")]
	[Address(RVA = "0x11D32B4", Offset = "0x11D32B4", VA = "0x11D32B4")]
	private void Cleanup()
	{
	}

	[Token(Token = "0x6001801")]
	[Address(RVA = "0x11D32E8", Offset = "0x11D32E8", VA = "0x11D32E8")]
	private void ReceiveMessage(IAsyncResult ar)
	{
	}

	[Token(Token = "0x6001802")]
	[Address(RVA = "0x11D33AC", Offset = "0x11D33AC", VA = "0x11D33AC")]
	private void ProcessMessage(byte[] message)
	{
	}
}
[Token(Token = "0x2000413")]
public enum MultiplayerGameState
{
	[Token(Token = "0x4001326")]
	Start,
	[Token(Token = "0x4001327")]
	Lobby,
	[Token(Token = "0x4001328")]
	LobbyReady,
	[Token(Token = "0x4001329")]
	Loading,
	[Token(Token = "0x400132A")]
	LoadingComplete,
	[Token(Token = "0x400132B")]
	Game,
	[Token(Token = "0x400132C")]
	PostGame
}
[Token(Token = "0x2000414")]
public class SimpleSceneLoaderTest : GlobalEventListener
{
	[Token(Token = "0x400132D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _sessionStarted;

	[Token(Token = "0x400132E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string[] _sceneNames;

	[Token(Token = "0x400132F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int _sceneIndex;

	[Token(Token = "0x6001803")]
	[Address(RVA = "0x11D343C", Offset = "0x11D343C", VA = "0x11D343C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001804")]
	[Address(RVA = "0x11D34A8", Offset = "0x11D34A8", VA = "0x11D34A8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6001805")]
	[Address(RVA = "0x11D36C0", Offset = "0x11D36C0", VA = "0x11D36C0")]
	private void HandleSceneLoaded(UnityEngine.AsyncOperation op)
	{
	}

	[Token(Token = "0x6001806")]
	[Address(RVA = "0x11D3758", Offset = "0x11D3758", VA = "0x11D3758", Slot = "12")]
	public override void BoltStartDone()
	{
	}

	[Token(Token = "0x6001807")]
	[Address(RVA = "0x11D37F4", Offset = "0x11D37F4", VA = "0x11D37F4", Slot = "38")]
	public override void SessionCreatedOrUpdated(UdpSession session)
	{
	}

	[Token(Token = "0x6001808")]
	[Address(RVA = "0x11D3874", Offset = "0x11D3874", VA = "0x11D3874")]
	public SimpleSceneLoaderTest()
	{
	}
}
[Token(Token = "0x2000415")]
public abstract class BaseUIScreen : CachedMonoBehaviour
{
	[Token(Token = "0x4001330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private CanvasGroup m_canvasGroup;

	[Token(Token = "0x4001331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PlayableDirector m_showTimeline;

	[Token(Token = "0x4001332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PlayableDirector m_hideTimeline;

	[Token(Token = "0x4001334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool m_isTransitioning;

	[Token(Token = "0x170003B7")]
	public bool IsVisible
	{
		[Token(Token = "0x6001809")]
		[Address(RVA = "0x11D387C", Offset = "0x11D387C", VA = "0x11D387C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600180A")]
		[Address(RVA = "0x11D3884", Offset = "0x11D3884", VA = "0x11D3884")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170003B8")]
	public bool IsTransitioning
	{
		[Token(Token = "0x600180B")]
		[Address(RVA = "0x11D3890", Offset = "0x11D3890", VA = "0x11D3890")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600180C")]
	[Address(RVA = "0x11D3898", Offset = "0x11D3898", VA = "0x11D3898", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600180D")]
	[Address(RVA = "0x11D3950", Offset = "0x11D3950", VA = "0x11D3950", Slot = "5")]
	public virtual void Show(bool instant = false)
	{
	}

	[Token(Token = "0x600180E")]
	[Address(RVA = "0x11D3AC8", Offset = "0x11D3AC8", VA = "0x11D3AC8")]
	public void Hide(bool instant = false)
	{
	}

	[Token(Token = "0x600180F")]
	[Address(RVA = "0x11D3B88", Offset = "0x11D3B88", VA = "0x11D3B88")]
	private void OnStateEnterTimelineStopped(PlayableDirector obj)
	{
	}

	[Token(Token = "0x6001810")]
	[Address(RVA = "0x11D3C0C", Offset = "0x11D3C0C", VA = "0x11D3C0C")]
	private void OnExitTimelineStopped(PlayableDirector obj)
	{
	}

	[Token(Token = "0x6001811")]
	[Address(RVA = "0x11D3C90", Offset = "0x11D3C90", VA = "0x11D3C90")]
	private void TimelineStateEnterEnded()
	{
	}

	[Token(Token = "0x6001812")]
	[Address(RVA = "0x11D3D28", Offset = "0x11D3D28", VA = "0x11D3D28")]
	private void TimelineStateExitEnded()
	{
	}

	[Token(Token = "0x6001813")]
	[Address(RVA = "0x11D3A10", Offset = "0x11D3A10", VA = "0x11D3A10")]
	private void EnableCanvasGroup(CanvasGroup panel)
	{
	}

	[Token(Token = "0x6001814")]
	[Address(RVA = "0x11D38A0", Offset = "0x11D38A0", VA = "0x11D38A0")]
	private void DisableCanvasGroup(CanvasGroup panel)
	{
	}

	[Token(Token = "0x6001815")]
	[Address(RVA = "0x11D3DC0", Offset = "0x11D3DC0", VA = "0x11D3DC0")]
	protected BaseUIScreen()
	{
	}
}
[Token(Token = "0x2000416")]
public class UI_LobbyCard : MonoBehaviour
{
	[Token(Token = "0x4001335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button m_button;

	[Token(Token = "0x4001336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TMP_Text m_lobbyName;

	[Token(Token = "0x4001337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TMP_Text[] m_debugInfo;

	[Token(Token = "0x4001338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TMP_Text m_currentPlayerCount;

	[Token(Token = "0x4001339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TMP_Text m_maxPlayerCount;

	[Token(Token = "0x400133A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Image m_isOpenImage;

	[Token(Token = "0x400133B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Image m_wanLanImage;

	[Token(Token = "0x400133C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string[] _debugValues;

	[Token(Token = "0x400133D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float _timer;

	[Token(Token = "0x400133E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int _debugIndex;

	[Token(Token = "0x170003B9")]
	internal Button Button
	{
		[Token(Token = "0x6001816")]
		[Address(RVA = "0x11D3DC8", Offset = "0x11D3DC8", VA = "0x11D3DC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BA")]
	internal TMP_Text LobbyName
	{
		[Token(Token = "0x6001817")]
		[Address(RVA = "0x11D3DD0", Offset = "0x11D3DD0", VA = "0x11D3DD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BB")]
	internal TMP_Text[] DebugInfo
	{
		[Token(Token = "0x6001818")]
		[Address(RVA = "0x11D3DD8", Offset = "0x11D3DD8", VA = "0x11D3DD8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BC")]
	internal TMP_Text CurrentPlayerCount
	{
		[Token(Token = "0x6001819")]
		[Address(RVA = "0x11D3DE0", Offset = "0x11D3DE0", VA = "0x11D3DE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BD")]
	internal TMP_Text MaxPlayerCount
	{
		[Token(Token = "0x600181A")]
		[Address(RVA = "0x11D3DE8", Offset = "0x11D3DE8", VA = "0x11D3DE8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BE")]
	internal Image IsOpenImage
	{
		[Token(Token = "0x600181B")]
		[Address(RVA = "0x11D3DF0", Offset = "0x11D3DF0", VA = "0x11D3DF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003BF")]
	internal Image WanLanImage
	{
		[Token(Token = "0x600181C")]
		[Address(RVA = "0x11D3DF8", Offset = "0x11D3DF8", VA = "0x11D3DF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003C0")]
	internal string[] DebugValues
	{
		[Token(Token = "0x600181D")]
		[Address(RVA = "0x11D3E00", Offset = "0x11D3E00", VA = "0x11D3E00")]
		private get
		{
			return null;
		}
		[Token(Token = "0x600181E")]
		[Address(RVA = "0x11D3E08", Offset = "0x11D3E08", VA = "0x11D3E08")]
		set
		{
		}
	}

	[Token(Token = "0x600181F")]
	[Address(RVA = "0x11D3EAC", Offset = "0x11D3EAC", VA = "0x11D3EAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001820")]
	[Address(RVA = "0x11D3F30", Offset = "0x11D3F30", VA = "0x11D3F30")]
	private void Update()
	{
	}

	[Token(Token = "0x6001821")]
	[Address(RVA = "0x11D3FE0", Offset = "0x11D3FE0", VA = "0x11D3FE0")]
	public UI_LobbyCard()
	{
	}
}
[Token(Token = "0x2000417")]
public class UI_PlayerCard : MonoBehaviour
{
	[Token(Token = "0x400133F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_playerNameText;

	[Token(Token = "0x4001340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image m_playerReadyImage;

	[Token(Token = "0x4001341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_ping;

	[Token(Token = "0x6001822")]
	[Address(RVA = "0x11D3FE8", Offset = "0x11D3FE8", VA = "0x11D3FE8")]
	public void Populate(string playerName)
	{
	}

	[Token(Token = "0x6001823")]
	[Address(RVA = "0x11D4048", Offset = "0x11D4048", VA = "0x11D4048")]
	public void ToggleReadyImageColor(Color color)
	{
	}

	[Token(Token = "0x6001824")]
	[Address(RVA = "0x11D4108", Offset = "0x11D4108", VA = "0x11D4108")]
	public void Update()
	{
	}

	[Token(Token = "0x6001825")]
	[Address(RVA = "0x11D46F8", Offset = "0x11D46F8", VA = "0x11D46F8")]
	public UI_PlayerCard()
	{
	}
}
[Token(Token = "0x2000418")]
public class PendingInvitationPanel : MonoBehaviour
{
	[Token(Token = "0x2000419")]
	[CompilerGenerated]
	private sealed class <CheckPicoInvitesRoutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PendingInvitationPanel <>4__this;

		[Token(Token = "0x170003C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001830")]
			[Address(RVA = "0x11D525C", Offset = "0x11D525C", VA = "0x11D525C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001832")]
			[Address(RVA = "0x11D52A4", Offset = "0x11D52A4", VA = "0x11D52A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x11D49F4", Offset = "0x11D49F4", VA = "0x11D49F4")]
		[DebuggerHidden]
		public <CheckPicoInvitesRoutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x11D512C", Offset = "0x11D512C", VA = "0x11D512C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x11D5130", Offset = "0x11D5130", VA = "0x11D5130", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x11D5264", Offset = "0x11D5264", VA = "0x11D5264", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PendingInviteEntry m_entryPrefab;

	[Token(Token = "0x4001343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform m_content;

	[Token(Token = "0x4001344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_noInvitesYetText;

	[Token(Token = "0x4001345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<PendingInviteEntry> m_inviteEntries;

	[Token(Token = "0x4001346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private State_UIMultiplayerMainMenu m_mainMenu;

	[Token(Token = "0x4001347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Coroutine m_picoInvitesRoutine;

	[Token(Token = "0x6001826")]
	[Address(RVA = "0x11D4700", Offset = "0x11D4700", VA = "0x11D4700")]
	public void SetMenuReference(State_UIMultiplayerMainMenu reference)
	{
	}

	[Token(Token = "0x6001827")]
	[Address(RVA = "0x11D47FC", Offset = "0x11D47FC", VA = "0x11D47FC")]
	public void ClearInvites()
	{
	}

	[Token(Token = "0x6001828")]
	[Address(RVA = "0x11D4788", Offset = "0x11D4788", VA = "0x11D4788")]
	[IteratorStateMachine(typeof(<CheckPicoInvitesRoutine>d__8))]
	private IEnumerator CheckPicoInvitesRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001829")]
	[Address(RVA = "0x11D4A1C", Offset = "0x11D4A1C", VA = "0x11D4A1C")]
	private void OnGetRoomInvites(Message<RoomInviteNotificationList> invites)
	{
	}

	[Token(Token = "0x600182A")]
	[Address(RVA = "0x11D4C0C", Offset = "0x11D4C0C", VA = "0x11D4C0C")]
	private void CreateInviteEntry(ulong inviteNotification)
	{
	}

	[Token(Token = "0x600182B")]
	[Address(RVA = "0x11D4CC8", Offset = "0x11D4CC8", VA = "0x11D4CC8")]
	private void RoomHandler(Message<Room> message)
	{
	}

	[Token(Token = "0x600182C")]
	[Address(RVA = "0x11D50A4", Offset = "0x11D50A4", VA = "0x11D50A4")]
	public PendingInvitationPanel()
	{
	}
}
[Token(Token = "0x200041B")]
[RequireComponent(typeof(Button))]
public class PendingInviteEntry : MonoBehaviour
{
	[Token(Token = "0x200041C")]
	public enum InviteState
	{
		[Token(Token = "0x400135A")]
		Pending,
		[Token(Token = "0x400135B")]
		Expired
	}

	[Token(Token = "0x400134C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<ulong> OnRoomJoined;

	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Setup")]
	[SerializeField]
	private Color m_invitePendingColor;

	[Token(Token = "0x400134F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color m_inviteExpiredColor;

	[Token(Token = "0x4001350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("UI References")]
	[SerializeField]
	private TextMeshProUGUI m_playerNameText;

	[Token(Token = "0x4001351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshProUGUI m_invitationDurationText;

	[Token(Token = "0x4001352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TextMeshProUGUI m_invitationText;

	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Image m_inviteStateIcon;

	[Token(Token = "0x4001354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float m_inviteLifetime;

	[Token(Token = "0x4001355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ulong _roomId;

	[Token(Token = "0x4001356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private InviteState m_inviteState;

	[Token(Token = "0x4001357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Button m_acceptInviteButton;

	[Token(Token = "0x4001358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_inviteTimer;

	[Token(Token = "0x170003C3")]
	public static ulong JoinRoomID
	{
		[Token(Token = "0x6001835")]
		[Address(RVA = "0x11D5360", Offset = "0x11D5360", VA = "0x11D5360")]
		[CompilerGenerated]
		get
		{
			return default(ulong);
		}
		[Token(Token = "0x6001836")]
		[Address(RVA = "0x11D53A8", Offset = "0x11D53A8", VA = "0x11D53A8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170003C4")]
	public static bool HasInvite
	{
		[Token(Token = "0x6001837")]
		[Address(RVA = "0x11D53F4", Offset = "0x11D53F4", VA = "0x11D53F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C5")]
	public InviteState State
	{
		[Token(Token = "0x6001838")]
		[Address(RVA = "0x11D543C", Offset = "0x11D543C", VA = "0x11D543C")]
		get
		{
			return default(InviteState);
		}
	}

	[Token(Token = "0x170003C6")]
	public ulong RoomId
	{
		[Token(Token = "0x6001839")]
		[Address(RVA = "0x11D5444", Offset = "0x11D5444", VA = "0x11D5444")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x600183A")]
	[Address(RVA = "0x11D544C", Offset = "0x11D544C", VA = "0x11D544C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600183B")]
	[Address(RVA = "0x11D5524", Offset = "0x11D5524", VA = "0x11D5524")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600183C")]
	[Address(RVA = "0x11D5548", Offset = "0x11D5548", VA = "0x11D5548")]
	private void Update()
	{
	}

	[Token(Token = "0x600183D")]
	[Address(RVA = "0x11D5618", Offset = "0x11D5618", VA = "0x11D5618")]
	private void Expire()
	{
	}

	[Token(Token = "0x600183E")]
	[Address(RVA = "0x11D4F78", Offset = "0x11D4F78", VA = "0x11D4F78")]
	public void PopulateEntry(string roomName, ulong roomId, UnityAction callback)
	{
	}

	[Token(Token = "0x600183F")]
	[Address(RVA = "0x11D56AC", Offset = "0x11D56AC", VA = "0x11D56AC")]
	private void OnClickAcceptInvite(ulong roomId)
	{
	}

	[Token(Token = "0x6001840")]
	[Address(RVA = "0x11D583C", Offset = "0x11D583C", VA = "0x11D583C")]
	public PendingInviteEntry()
	{
	}
}
[Token(Token = "0x200041E")]
public class State_FetchOculusInvitableUsers : BaseStateAttachedLogic
{
	[Token(Token = "0x6001843")]
	[Address(RVA = "0x11D5884", Offset = "0x11D5884", VA = "0x11D5884")]
	public State_FetchOculusInvitableUsers()
	{
	}
}
[Token(Token = "0x200041F")]
public class State_HordeExitState : BaseStateAttachedLogic
{
	[Token(Token = "0x400135F")]
	private const string c_hordeSoloExitPoint = "horde_solo";

	[Token(Token = "0x4001360")]
	private const string c_hordeMPExitPoint = "horde_mp";

	[Token(Token = "0x4001361")]
	private const string c_frontEndSinglePlayerExitPoint = "frontend_singleplayer";

	[Token(Token = "0x6001844")]
	[Address(RVA = "0x11D588C", Offset = "0x11D588C", VA = "0x11D588C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001845")]
	[Address(RVA = "0x11D5958", Offset = "0x11D5958", VA = "0x11D5958")]
	public State_HordeExitState()
	{
	}
}
[Token(Token = "0x2000420")]
public class State_MultiplayerLeaderboard : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x6001846")]
	[Address(RVA = "0x11D5960", Offset = "0x11D5960", VA = "0x11D5960", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001847")]
	[Address(RVA = "0x11D5964", Offset = "0x11D5964", VA = "0x11D5964")]
	private void PlaceAtMarker()
	{
	}

	[Token(Token = "0x6001848")]
	[Address(RVA = "0x11D5AA0", Offset = "0x11D5AA0", VA = "0x11D5AA0")]
	public State_MultiplayerLeaderboard()
	{
	}
}
[Token(Token = "0x2000421")]
public class State_UIMetaAvatarPrompt : State_UIMultiplayerMainMenuBase
{
	[Token(Token = "0x4001362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Button m_continueButton;

	[Token(Token = "0x4001363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Identifier m_avatarEditorButtonIdentifier;

	[Token(Token = "0x6001849")]
	[Address(RVA = "0x11D6AA8", Offset = "0x11D6AA8", VA = "0x11D6AA8", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600184A")]
	[Address(RVA = "0x11D6D24", Offset = "0x11D6D24", VA = "0x11D6D24", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600184B")]
	[Address(RVA = "0x11D6FA0", Offset = "0x11D6FA0", VA = "0x11D6FA0")]
	private void OnContinue()
	{
	}

	[Token(Token = "0x600184C")]
	[Address(RVA = "0x11D6FAC", Offset = "0x11D6FAC", VA = "0x11D6FAC")]
	private void OnGlobalButtonClicked(Identifier identifier, ButtonHandler handler)
	{
	}

	[Token(Token = "0x600184D")]
	[Address(RVA = "0x11D6FE8", Offset = "0x11D6FE8", VA = "0x11D6FE8")]
	public State_UIMetaAvatarPrompt()
	{
	}
}
[Token(Token = "0x2000422")]
public class State_UIMultiplayerLobbyMenu : State_UIMultiplayerMainMenuBase
{
	[Token(Token = "0x4001364")]
	private const string c_startGameExitPointName = "start";

	[Token(Token = "0x4001365")]
	private const string c_leaveLobbyExitPointName = "leave lobby";

	[Token(Token = "0x4001366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private UI_TopScreen m_topScreenPanel;

	[Token(Token = "0x4001367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private UI_MultiplayerLobby m_lobby;

	[Token(Token = "0x170003C7")]
	[StateConfig("LoadFTUE")]
	public bool LoadFTUE
	{
		[Token(Token = "0x600184E")]
		[Address(RVA = "0x11D6FF8", Offset = "0x11D6FF8", VA = "0x11D6FF8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600184F")]
		[Address(RVA = "0x11D7000", Offset = "0x11D7000", VA = "0x11D7000")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170003C8")]
	[StateConfig("Direct Start")]
	public bool DirectStart
	{
		[Token(Token = "0x6001850")]
		[Address(RVA = "0x11D700C", Offset = "0x11D700C", VA = "0x11D700C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001851")]
		[Address(RVA = "0x11D7014", Offset = "0x11D7014", VA = "0x11D7014")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001852")]
	[Address(RVA = "0x11D7020", Offset = "0x11D7020", VA = "0x11D7020", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001853")]
	[Address(RVA = "0x11D748C", Offset = "0x11D748C", VA = "0x11D748C")]
	private bool IsGameInProgress()
	{
		return default(bool);
	}

	[Token(Token = "0x6001854")]
	[Address(RVA = "0x11D7820", Offset = "0x11D7820", VA = "0x11D7820", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001855")]
	[Address(RVA = "0x11D784C", Offset = "0x11D784C", VA = "0x11D784C", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001856")]
	[Address(RVA = "0x11D7654", Offset = "0x11D7654", VA = "0x11D7654")]
	private void EnterLobbyOnline()
	{
	}

	[Token(Token = "0x6001857")]
	[Address(RVA = "0x11D73A4", Offset = "0x11D73A4", VA = "0x11D73A4")]
	private void EnterLobbyOffline(bool isFtue, bool directStart)
	{
	}

	[Token(Token = "0x6001858")]
	[Address(RVA = "0x11D7594", Offset = "0x11D7594", VA = "0x11D7594")]
	private void EnterStartedGame()
	{
	}

	[Token(Token = "0x6001859")]
	[Address(RVA = "0x11D8554", Offset = "0x11D8554", VA = "0x11D8554")]
	private void OnClickStartGameButton()
	{
	}

	[Token(Token = "0x600185A")]
	[Address(RVA = "0x11D8608", Offset = "0x11D8608", VA = "0x11D8608")]
	private void OnLeaveLobby()
	{
	}

	[Token(Token = "0x600185B")]
	[Address(RVA = "0x11D86BC", Offset = "0x11D86BC", VA = "0x11D86BC")]
	private void OnPlayerDisconnected(BoltConnection obj)
	{
	}

	[Token(Token = "0x600185C")]
	[Address(RVA = "0x11D87B8", Offset = "0x11D87B8", VA = "0x11D87B8")]
	public State_UIMultiplayerLobbyMenu()
	{
	}
}
[Token(Token = "0x2000423")]
public class State_UIMultiplayerMainMenu : State_UIMultiplayerMainMenuBase
{
	[Token(Token = "0x2000424")]
	public class state_ShowMenus : NestedStateBehavior<State_UIMultiplayerMainMenu>
	{
		[Token(Token = "0x6001879")]
		[Address(RVA = "0x11DABC4", Offset = "0x11DABC4", VA = "0x11DABC4", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x11DACE4", Offset = "0x11DACE4", VA = "0x11DACE4")]
		public state_ShowMenus()
		{
		}
	}

	[Token(Token = "0x2000425")]
	public class state_HideMenus : NestedStateBehavior<State_UIMultiplayerMainMenu>
	{
		[Token(Token = "0x600187B")]
		[Address(RVA = "0x11DAD2C", Offset = "0x11DAD2C", VA = "0x11DAD2C", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x11DAE4C", Offset = "0x11DAE4C", VA = "0x11DAE4C")]
		public state_HideMenus()
		{
		}
	}

	[Token(Token = "0x2000426")]
	public class state_Router : NestedStateBehavior<State_UIMultiplayerMainMenu>
	{
		[Token(Token = "0x600187D")]
		[Address(RVA = "0x11DAE94", Offset = "0x11DAE94", VA = "0x11DAE94", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x11DB298", Offset = "0x11DB298", VA = "0x11DB298")]
		public state_Router()
		{
		}
	}

	[Token(Token = "0x400136B")]
	public const string c_playFTUEExitPointName = "PlayFTUE";

	[Token(Token = "0x400136C")]
	public const string c_playSoloExitPointName = "PlaySolo";

	[Token(Token = "0x400136D")]
	public const string c_settingsExitPointName = "Settings";

	[Token(Token = "0x400136E")]
	public const string c_quickPlayExitPointName = "QuickPlay";

	[Token(Token = "0x400136F")]
	public const string c_createGameExitPointName = "CreateGame";

	[Token(Token = "0x4001370")]
	public const string c_joinLobbyExitPointName = "JoinLobby";

	[Token(Token = "0x4001371")]
	public const string c_joinSessionExitPointName = "JoinSession";

	[Token(Token = "0x4001372")]
	public const string c_showDevPanelExitPointName = "ShowDevPanel";

	[Token(Token = "0x4001373")]
	public const string c_hideDevPanelExitPointName = "HideDevPanel";

	[Token(Token = "0x4001374")]
	public const string c_joinInviteExitPointName = "JoinInvite";

	[Token(Token = "0x4001375")]
	public const string c_hordeMPErrorExitPointName = "HordeMPError";

	[Token(Token = "0x4001376")]
	public const string c_startClientExitPointName = "StartClient";

	[Token(Token = "0x4001377")]
	public const string c_p2pSoloExitPointName = "P2PSolo";

	[Token(Token = "0x4001378")]
	public const string c_p2pHostExitPointName = "P2PHost";

	[Token(Token = "0x4001379")]
	public const string c_exitGameExitPointName = "ExitGame";

	[Token(Token = "0x400137A")]
	public const string c_oculusInvite = "OculusInvite";

	[Token(Token = "0x400137B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("UI References")]
	[SerializeField]
	private GameObject m_menusRoot;

	[Token(Token = "0x400137C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private CabinMenuButton m_quickPlayButton;

	[Token(Token = "0x400137D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private CabinMenuButton m_createButton;

	[Token(Token = "0x400137E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Button m_ftueButton;

	[Token(Token = "0x400137F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Button m_soloButton;

	[Token(Token = "0x4001380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private CabinMenuButton m_p2pSolo;

	[Token(Token = "0x4001381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private CabinMenuButton m_p2pHostPrivate;

	[Token(Token = "0x4001382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private CabinMenuButton m_p2pHostPublic;

	[Token(Token = "0x4001383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private CabinMenuButton m_p2pJoin;

	[Token(Token = "0x4001384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Button m_exitGame;

	[Token(Token = "0x4001385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[FormerlySerializedAs("m_mainMenuButton")]
	[SerializeField]
	private Button m_settingsButton;

	[Token(Token = "0x4001386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Button m_devPanelButton;

	[Token(Token = "0x4001387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private Button m_showStatsButton;

	[Token(Token = "0x4001388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private UI_TopScreen m_topScreenPanel;

	[Token(Token = "0x4001389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private UI_MultiplayerLeaderboad m_globalLeaderboardPanel;

	[Token(Token = "0x400138A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private UI_NewsfeedPlacement m_newsfeedPlacement;

	[Token(Token = "0x400138B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private UI_MultiplayerRooms m_devRoomPanel;

	[Token(Token = "0x400138C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private PendingInvitationPanel m_PendingPendingInvitationPanel;

	[Token(Token = "0x400138D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private UI_MultiplayerRank m_rankDisplay;

	[Token(Token = "0x400138E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private Sprite _buttonDisabledSprite;

	[Token(Token = "0x400138F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Header("UI Config")]
	[SerializeField]
	private string m_newsPlacementID;

	[Token(Token = "0x4001390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool m_hasSeenNews;

	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
	private bool m_versionDifference;

	[Token(Token = "0x4001392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
	private bool m_networkReachability;

	[Token(Token = "0x4001393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float m_lastReachabilityRefreshTime;

	[Token(Token = "0x4001394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float m_delayRefreshNetworkReachability;

	[Token(Token = "0x4001395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private bool s_launchDetailsChecked;

	[Token(Token = "0x170003C9")]
	public static string MainMenuChoice
	{
		[Token(Token = "0x600185D")]
		[Address(RVA = "0x11D87C0", Offset = "0x11D87C0", VA = "0x11D87C0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600185E")]
		[Address(RVA = "0x11D8808", Offset = "0x11D8808", VA = "0x11D8808")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600185F")]
	[Address(RVA = "0x11D8860", Offset = "0x11D8860", VA = "0x11D8860", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001860")]
	[Address(RVA = "0x11D987C", Offset = "0x11D987C", VA = "0x11D987C", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001861")]
	[Address(RVA = "0x11D990C", Offset = "0x11D990C", VA = "0x11D990C", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001862")]
	[Address(RVA = "0x11D98A0", Offset = "0x11D98A0", VA = "0x11D98A0")]
	private void UpdateNetworkReachability()
	{
	}

	[Token(Token = "0x6001863")]
	[Address(RVA = "0x11D9F54", Offset = "0x11D9F54", VA = "0x11D9F54")]
	private void HandleOnFirstBootChanged()
	{
	}

	[Token(Token = "0x6001864")]
	[Address(RVA = "0x11D9478", Offset = "0x11D9478", VA = "0x11D9478")]
	private void SetButtonInteractability(bool disableButtons = false)
	{
	}

	[Token(Token = "0x6001865")]
	[Address(RVA = "0x11D966C", Offset = "0x11D966C", VA = "0x11D966C")]
	private void DisableButtonInteractability()
	{
	}

	[Token(Token = "0x6001866")]
	[Address(RVA = "0x11D9788", Offset = "0x11D9788", VA = "0x11D9788")]
	private void CheckJoinIntent()
	{
	}

	[Token(Token = "0x6001867")]
	[Address(RVA = "0x11D9FA8", Offset = "0x11D9FA8", VA = "0x11D9FA8")]
	private void HandleCoreDebugChanged(bool mode)
	{
	}

	[Token(Token = "0x6001868")]
	[Address(RVA = "0x11DA004", Offset = "0x11DA004", VA = "0x11DA004")]
	private void OnClickSolo()
	{
	}

	[Token(Token = "0x6001869")]
	[Address(RVA = "0x11DA094", Offset = "0x11DA094", VA = "0x11DA094")]
	private void OnClickFTUE()
	{
	}

	[Token(Token = "0x600186A")]
	[Address(RVA = "0x11DA138", Offset = "0x11DA138", VA = "0x11DA138")]
	private void OnClickP2PSolo()
	{
	}

	[Token(Token = "0x600186B")]
	[Address(RVA = "0x11DA1C8", Offset = "0x11DA1C8", VA = "0x11DA1C8")]
	private void OnClickP2PHost(bool isPublic)
	{
	}

	[Token(Token = "0x600186C")]
	[Address(RVA = "0x11DA29C", Offset = "0x11DA29C", VA = "0x11DA29C")]
	private void OnClickP2PHostPublic()
	{
	}

	[Token(Token = "0x600186D")]
	[Address(RVA = "0x11DA2A4", Offset = "0x11DA2A4", VA = "0x11DA2A4")]
	private void OnClickP2PHostPrivate()
	{
	}

	[Token(Token = "0x600186E")]
	[Address(RVA = "0x11DA2AC", Offset = "0x11DA2AC", VA = "0x11DA2AC")]
	private void OnClickP2PJoin()
	{
	}

	[Token(Token = "0x600186F")]
	[Address(RVA = "0x11DA3F0", Offset = "0x11DA3F0", VA = "0x11DA3F0")]
	private void OnClickSettings()
	{
	}

	[Token(Token = "0x6001870")]
	[Address(RVA = "0x11DA48C", Offset = "0x11DA48C", VA = "0x11DA48C")]
	private void OnClickQuickPlay()
	{
	}

	[Token(Token = "0x6001871")]
	[Address(RVA = "0x11DA700", Offset = "0x11DA700", VA = "0x11DA700")]
	private void OnClickCreateGame()
	{
	}

	[Token(Token = "0x6001872")]
	[Address(RVA = "0x11DA2B0", Offset = "0x11DA2B0", VA = "0x11DA2B0")]
	public void OnClickRoomsList()
	{
	}

	[Token(Token = "0x6001873")]
	[Address(RVA = "0x11DA90C", Offset = "0x11DA90C", VA = "0x11DA90C")]
	public void OnClickStats()
	{
	}

	[Token(Token = "0x6001874")]
	[Address(RVA = "0x11DA9BC", Offset = "0x11DA9BC", VA = "0x11DA9BC")]
	public void OnClickExitGame()
	{
	}

	[Token(Token = "0x6001875")]
	[Address(RVA = "0x11DAA08", Offset = "0x11DAA08", VA = "0x11DAA08")]
	public void OnClickNewsButton()
	{
	}

	[Token(Token = "0x6001876")]
	[Address(RVA = "0x11DAA58", Offset = "0x11DAA58", VA = "0x11DAA58")]
	private void OnSessionJoined()
	{
	}

	[Token(Token = "0x6001877")]
	[Address(RVA = "0x11DAB0C", Offset = "0x11DAB0C", VA = "0x11DAB0C")]
	public void OnInviteAccepted()
	{
	}

	[Token(Token = "0x6001878")]
	[Address(RVA = "0x11DAB64", Offset = "0x11DAB64", VA = "0x11DAB64")]
	public State_UIMultiplayerMainMenu()
	{
	}
}
[Token(Token = "0x2000427")]
public abstract class State_UIMultiplayerMainMenuBase : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private CanvasGroup m_mainPanel;

	[Token(Token = "0x4001397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private CanvasGroup m_sidePanel;

	[Token(Token = "0x4001398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PlayableDirector m_stateEnterTimeline;

	[Token(Token = "0x4001399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PlayableDirector m_stateExitTimeline;

	[Token(Token = "0x600187F")]
	[Address(RVA = "0x11DB2E0", Offset = "0x11DB2E0", VA = "0x11DB2E0", Slot = "15")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001880")]
	[Address(RVA = "0x11D6C4C", Offset = "0x11D6C4C", VA = "0x11D6C4C", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001881")]
	[Address(RVA = "0x11D6EC8", Offset = "0x11D6EC8", VA = "0x11D6EC8", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001882")]
	[Address(RVA = "0x11DB3A0", Offset = "0x11DB3A0", VA = "0x11DB3A0")]
	private void OnStateEnterTimelineStopped(PlayableDirector obj)
	{
	}

	[Token(Token = "0x6001883")]
	[Address(RVA = "0x11DB47C", Offset = "0x11DB47C", VA = "0x11DB47C")]
	private void OnExitTimelineStopped(PlayableDirector obj)
	{
	}

	[Token(Token = "0x6001884")]
	[Address(RVA = "0x11DB3E0", Offset = "0x11DB3E0", VA = "0x11DB3E0")]
	private void TimelineStateEnterEnded()
	{
	}

	[Token(Token = "0x6001885")]
	[Address(RVA = "0x11DB4BC", Offset = "0x11DB4BC", VA = "0x11DB4BC")]
	private void TimelineStateExitEnded()
	{
	}

	[Token(Token = "0x6001886")]
	[Address(RVA = "0x11DB558", Offset = "0x11DB558", VA = "0x11DB558")]
	private void EnableCanvasGroup(CanvasGroup panel)
	{
	}

	[Token(Token = "0x6001887")]
	[Address(RVA = "0x11DB2FC", Offset = "0x11DB2FC", VA = "0x11DB2FC")]
	private void DisableCanvasGroup(CanvasGroup panel)
	{
	}

	[Token(Token = "0x6001888")]
	[Address(RVA = "0x11D6FF0", Offset = "0x11D6FF0", VA = "0x11D6FF0")]
	protected State_UIMultiplayerMainMenuBase()
	{
	}
}
[Token(Token = "0x2000428")]
public class State_UIMultiplayerProfileMenu : State_UIMultiplayerMainMenuBase
{
	[Token(Token = "0x6001889")]
	[Address(RVA = "0x11DB5FC", Offset = "0x11DB5FC", VA = "0x11DB5FC")]
	public State_UIMultiplayerProfileMenu()
	{
	}
}
[Token(Token = "0x2000429")]
public class State_UIWaitingInfo : State_UIMultiplayerMainMenuBase
{
	[Token(Token = "0x400139A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private TMP_Text m_headerText;

	[Token(Token = "0x400139B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private TMP_Text m_messageText;

	[Token(Token = "0x400139C")]
	private const string c_pleaseWaitID = "STR_HUB_LEADERBOARD_LOADING";

	[Token(Token = "0x400139D")]
	private const string c_searchingMatchID = "STR_HUB_SEARCHING_MATCH";

	[Token(Token = "0x400139E")]
	private const string c_creatingMatchID = "STR_HUB_CREATING_MATCH";

	[Token(Token = "0x400139F")]
	private const string c_leavingMatchID = "STR_HUB_LEAVING_MATCH";

	[Token(Token = "0x40013A0")]
	private const string c_joiningMatchID = "STR_HUB_JOINING_MATCH";

	[Token(Token = "0x600188A")]
	[Address(RVA = "0x11DB604", Offset = "0x11DB604", VA = "0x11DB604", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600188B")]
	[Address(RVA = "0x11DB688", Offset = "0x11DB688", VA = "0x11DB688")]
	private void ShowCreatingMatch()
	{
	}

	[Token(Token = "0x600188C")]
	[Address(RVA = "0x11DB6D4", Offset = "0x11DB6D4", VA = "0x11DB6D4")]
	private void ShowLeavingMatch()
	{
	}

	[Token(Token = "0x600188D")]
	[Address(RVA = "0x11DB720", Offset = "0x11DB720", VA = "0x11DB720")]
	private void ShowJoiningMatch()
	{
	}

	[Token(Token = "0x600188E")]
	[Address(RVA = "0x11DB76C", Offset = "0x11DB76C", VA = "0x11DB76C")]
	private void ShowSearchingMatch()
	{
	}

	[Token(Token = "0x600188F")]
	[Address(RVA = "0x11DB7B8", Offset = "0x11DB7B8", VA = "0x11DB7B8")]
	private void SetInfoTexts(string headerID, string messageID)
	{
	}

	[Token(Token = "0x6001890")]
	[Address(RVA = "0x11DB898", Offset = "0x11DB898", VA = "0x11DB898")]
	public State_UIWaitingInfo()
	{
	}
}
[Token(Token = "0x200042A")]
[RequireComponent(typeof(Button))]
public class UIDifficultyButton : MonoBehaviour
{
	[Token(Token = "0x40013A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_difficultyNameText;

	[Token(Token = "0x40013A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image m_difficultyIcon;

	[Token(Token = "0x40013A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_difficultyID;

	[Token(Token = "0x40013A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Button m_button;

	[Token(Token = "0x6001891")]
	[Address(RVA = "0x11DB8A0", Offset = "0x11DB8A0", VA = "0x11DB8A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001892")]
	[Address(RVA = "0x11DB8F8", Offset = "0x11DB8F8", VA = "0x11DB8F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001893")]
	[Address(RVA = "0x11DB91C", Offset = "0x11DB91C", VA = "0x11DB91C")]
	public void Populate(string name, Action onClick, int difficultyID)
	{
	}

	[Token(Token = "0x6001894")]
	[Address(RVA = "0x11DBA60", Offset = "0x11DBA60", VA = "0x11DBA60")]
	public void AddListener(Action onClick)
	{
	}

	[Token(Token = "0x6001895")]
	[Address(RVA = "0x11DBB44", Offset = "0x11DBB44", VA = "0x11DBB44")]
	public void ToggleInteractable(bool interactive)
	{
	}

	[Token(Token = "0x6001896")]
	[Address(RVA = "0x11DBB64", Offset = "0x11DBB64", VA = "0x11DBB64")]
	public void SetActiveSelection(int activeID)
	{
	}

	[Token(Token = "0x6001897")]
	[Address(RVA = "0x11DBBF0", Offset = "0x11DBBF0", VA = "0x11DBBF0")]
	public UIDifficultyButton()
	{
	}
}
[Token(Token = "0x200042D")]
public class UIDifficultySelection : BaseUIScreen
{
	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UIDifficultyButton m_difficultyButtonPrefab;

	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private RectTransform m_content;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private TextMeshProUGUI m_DescriptionText;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<UIDifficultyButton> m_difficultyButtons;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LevelLoadManager m_levelLoadManager;

	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private UI_MultiplayerLeaderboad m_leaderboards;

	[Token(Token = "0x40013AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIDifficultySelection Instance;

	[Token(Token = "0x600189C")]
	[Address(RVA = "0x11DBC48", Offset = "0x11DBC48", VA = "0x11DBC48")]
	protected void Awake()
	{
	}

	[Token(Token = "0x600189D")]
	[Address(RVA = "0x11DBFA8", Offset = "0x11DBFA8", VA = "0x11DBFA8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600189E")]
	[Address(RVA = "0x11DC05C", Offset = "0x11DC05C", VA = "0x11DC05C", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600189F")]
	[Address(RVA = "0x11DC078", Offset = "0x11DC078", VA = "0x11DC078", Slot = "5")]
	public override void Show(bool instant = false)
	{
	}

	[Token(Token = "0x60018A0")]
	[Address(RVA = "0x11DBD3C", Offset = "0x11DBD3C", VA = "0x11DBD3C")]
	private void CreateDifficultyEntries()
	{
	}

	[Token(Token = "0x60018A1")]
	[Address(RVA = "0x11DBE78", Offset = "0x11DBE78", VA = "0x11DBE78")]
	public void RefreshRoomInfo()
	{
	}

	[Token(Token = "0x60018A2")]
	[Address(RVA = "0x11DC254", Offset = "0x11DC254", VA = "0x11DC254")]
	private void CreateDifficultyEntry(DifficultyLevel difficultyLevel)
	{
	}

	[Token(Token = "0x60018A3")]
	[Address(RVA = "0x11DC59C", Offset = "0x11DC59C", VA = "0x11DC59C")]
	private void OnClickDifficulty(int difficultyId)
	{
	}

	[Token(Token = "0x60018A4")]
	[Address(RVA = "0x11DC454", Offset = "0x11DC454", VA = "0x11DC454")]
	public void RefreshActiveSelection(int difficultyId)
	{
	}

	[Token(Token = "0x60018A5")]
	[Address(RVA = "0x11DC670", Offset = "0x11DC670", VA = "0x11DC670")]
	private void RefreshDescription(string name)
	{
	}

	[Token(Token = "0x60018A6")]
	[Address(RVA = "0x11DC718", Offset = "0x11DC718", VA = "0x11DC718")]
	public UIDifficultySelection()
	{
	}
}
[Token(Token = "0x200042F")]
[RequireComponent(typeof(Button))]
public class UIMapButton : MonoBehaviour
{
	[Token(Token = "0x40013B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_mapNameText;

	[Token(Token = "0x40013B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Image m_mapImage;

	[Token(Token = "0x40013B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Button m_button;

	[Token(Token = "0x60018A9")]
	[Address(RVA = "0x11DC7C4", Offset = "0x11DC7C4", VA = "0x11DC7C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018AA")]
	[Address(RVA = "0x11DC81C", Offset = "0x11DC81C", VA = "0x11DC81C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60018AB")]
	[Address(RVA = "0x11DC840", Offset = "0x11DC840", VA = "0x11DC840")]
	public void Populate(string name, Sprite thumbnail, Action onClick, string difficulty = "")
	{
	}

	[Token(Token = "0x60018AC")]
	[Address(RVA = "0x11DCA14", Offset = "0x11DCA14", VA = "0x11DCA14")]
	public void AddListener(Action onClick)
	{
	}

	[Token(Token = "0x60018AD")]
	[Address(RVA = "0x11DCAF8", Offset = "0x11DCAF8", VA = "0x11DCAF8")]
	public void ToggleInteractible(bool interactive)
	{
	}

	[Token(Token = "0x60018AE")]
	[Address(RVA = "0x11DCB18", Offset = "0x11DCB18", VA = "0x11DCB18")]
	public UIMapButton()
	{
	}
}
[Token(Token = "0x2000432")]
public class UIMapSelection : BaseUIScreen
{
	[Token(Token = "0x40013B5")]
	private const string c_comingSoon = "STR_HUB_MULTIPLAYER_MAP_SELECTION_MAP_COMING_SOON";

	[Token(Token = "0x40013B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UIMapButton m_mapButtonPrefab;

	[Token(Token = "0x40013B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private RectTransform m_content;

	[Token(Token = "0x40013B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<UIMapButton> m_mapButtons;

	[Token(Token = "0x60018B3")]
	[Address(RVA = "0x11DCB68", Offset = "0x11DCB68", VA = "0x11DCB68")]
	protected void Awake()
	{
	}

	[Token(Token = "0x60018B4")]
	[Address(RVA = "0x11DCCC4", Offset = "0x11DCCC4", VA = "0x11DCCC4", Slot = "5")]
	public override void Show(bool instant = false)
	{
	}

	[Token(Token = "0x60018B5")]
	[Address(RVA = "0x11DCB6C", Offset = "0x11DCB6C", VA = "0x11DCB6C")]
	private void CreateMapEntries()
	{
	}

	[Token(Token = "0x60018B6")]
	[Address(RVA = "0x11DCEA0", Offset = "0x11DCEA0", VA = "0x11DCEA0")]
	private void CreateMapEntry(GameLevel map)
	{
	}

	[Token(Token = "0x60018B7")]
	[Address(RVA = "0x11DD0B4", Offset = "0x11DD0B4", VA = "0x11DD0B4")]
	private void OnClickMap(int mapId)
	{
	}

	[Token(Token = "0x60018B8")]
	[Address(RVA = "0x11DD274", Offset = "0x11DD274", VA = "0x11DD274")]
	public UIMapSelection()
	{
	}
}
[Token(Token = "0x2000434")]
public class UI_InfoPanel : PT.Singleton<UI_InfoPanel>
{
	[Token(Token = "0x40013BB")]
	public const float DefaultMessageDuration = 1.5f;

	[Token(Token = "0x40013BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshProUGUI m_messageText;

	[Token(Token = "0x40013BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Queue<Tuple<string, float>> m_messageQueue;

	[Token(Token = "0x40013BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_currentMessageTime;

	[Token(Token = "0x40013BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_currentTimer;

	[Token(Token = "0x60018BB")]
	[Address(RVA = "0x11DD320", Offset = "0x11DD320", VA = "0x11DD320")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018BC")]
	[Address(RVA = "0x11D7AC0", Offset = "0x11D7AC0", VA = "0x11D7AC0")]
	public void SetMessage(string messageLocId, float duration)
	{
	}

	[Token(Token = "0x60018BD")]
	[Address(RVA = "0x11DD328", Offset = "0x11DD328", VA = "0x11DD328")]
	public void SetMessageFormatted(string messageLocId, float duration, params object[] args)
	{
	}

	[Token(Token = "0x60018BE")]
	[Address(RVA = "0x11DD3FC", Offset = "0x11DD3FC", VA = "0x11DD3FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60018BF")]
	[Address(RVA = "0x11DD4A4", Offset = "0x11DD4A4", VA = "0x11DD4A4")]
	private void UpdateMessage(Tuple<string, float> message)
	{
	}

	[Token(Token = "0x60018C0")]
	[Address(RVA = "0x11DD564", Offset = "0x11DD564", VA = "0x11DD564")]
	public UI_InfoPanel()
	{
	}
}
[Token(Token = "0x2000435")]
public static class InfoPanelLocIds
{
	[Token(Token = "0x40013C0")]
	public const string c_waitingForOtherPlayersLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_WAIT_FOR_OTHER_PLAYERS";

	[Token(Token = "0x40013C1")]
	public const string c_allReadyServerStartGameLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_SERVER_START_GAME";

	[Token(Token = "0x40013C2")]
	public const string c_allReadyClientWaitForServerLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_CLIENT_WAIT_FOR_SERVER";

	[Token(Token = "0x40013C3")]
	public const string c_joinRoomFailedLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_JOIN_ROOM_FAILED";

	[Token(Token = "0x40013C4")]
	public const string c_joinRoomSuccessLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_JOIN_ROOM_SUCCESS";

	[Token(Token = "0x40013C5")]
	public const string c_exitLobbyLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_EXIT_LOBBY";

	[Token(Token = "0x40013C6")]
	public const string c_mapPickedLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_MAP_CHOSEN";

	[Token(Token = "0x40013C7")]
	public const string c_connectionToServerLostLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_CONNECTION_LOST";

	[Token(Token = "0x40013C8")]
	public const string c_startMatchLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_START_MATCH";

	[Token(Token = "0x40013C9")]
	public const string c_quickMatchingLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_QUICK_MATCH";

	[Token(Token = "0x40013CA")]
	public const string c_selectModeLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_SELECT_MODE";

	[Token(Token = "0x40013CB")]
	public const string c_connectingToServerLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_CONNECT_TO_SERVER";

	[Token(Token = "0x40013CC")]
	public const string c_selectMapLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_SELECT_MAP";

	[Token(Token = "0x40013CD")]
	public const string c_areYouReadyLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_ARE_YOU_READY";

	[Token(Token = "0x40013CE")]
	public const string c_waitForGameStartSoloLocId = "STR_HUB_MULTIPLAYER_LOBBY_SOLO_WAIT_FOR_GAME_START";

	[Token(Token = "0x40013CF")]
	public const string c_joiningServerLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_JOINING_SERVER";

	[Token(Token = "0x40013D0")]
	public const string c_waitingForHostLocId = "STR_HUB_MULTIPLAYER_INFO_PANEL_WAITING_FOR_HOST";
}
[Token(Token = "0x2000436")]
public class UI_MatchStat : MonoBehaviour
{
	[Token(Token = "0x40013D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_matchStatNameText;

	[Token(Token = "0x40013D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_matchStatValueText;

	[Token(Token = "0x40013D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_newBestPanel;

	[Token(Token = "0x60018C1")]
	[Address(RVA = "0x11DD62C", Offset = "0x11DD62C", VA = "0x11DD62C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018C2")]
	[Address(RVA = "0x11DD64C", Offset = "0x11DD64C", VA = "0x11DD64C")]
	public void Populate(string locId, string value, bool isNewBest)
	{
	}

	[Token(Token = "0x60018C3")]
	[Address(RVA = "0x11DD6D0", Offset = "0x11DD6D0", VA = "0x11DD6D0")]
	public UI_MatchStat()
	{
	}
}
[Token(Token = "0x2000437")]
public class UI_MultiplayerDebug : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x40013D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Bolt Debug")]
	[SerializeField]
	private TMP_Text m_statusText;

	[Token(Token = "0x40013D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private TMP_Text m_hostText;

	[Token(Token = "0x40013D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private TMP_Text m_regionText;

	[Token(Token = "0x40013D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private TMP_Text m_boltDebugText;

	[Token(Token = "0x40013D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Image m_loadingBar;

	[Token(Token = "0x40013D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private TMP_Text m_messageText;

	[Token(Token = "0x40013DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Header("Oculus Debug")]
	private TMP_Text m_oculusDebug1;

	[Token(Token = "0x40013DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private TMP_Text m_oculusDebug2;

	[Token(Token = "0x40013DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private TMP_Text m_oculusDebug3;

	[Token(Token = "0x40013DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private CanvasGroup m_canvasGroup;

	[Token(Token = "0x170003CA")]
	private static Action<string> WriteMessage
	{
		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x11DD6D8", Offset = "0x11DD6D8", VA = "0x11DD6D8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x11DD720", Offset = "0x11DD720", VA = "0x11DD720")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60018C6")]
	[Address(RVA = "0x11DD778", Offset = "0x11DD778", VA = "0x11DD778")]
	private void Start()
	{
	}

	[Token(Token = "0x60018C7")]
	[Address(RVA = "0x11DD810", Offset = "0x11DD810", VA = "0x11DD810", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60018C8")]
	[Address(RVA = "0x11DDEE8", Offset = "0x11DDEE8", VA = "0x11DDEE8", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60018C9")]
	[Address(RVA = "0x11DE5C0", Offset = "0x11DE5C0", VA = "0x11DE5C0")]
	private void OnBoltStartBegin()
	{
	}

	[Token(Token = "0x60018CA")]
	[Address(RVA = "0x11DE74C", Offset = "0x11DE74C", VA = "0x11DE74C")]
	private void OnBoltStartDone()
	{
	}

	[Token(Token = "0x60018CB")]
	[Address(RVA = "0x11DE7C8", Offset = "0x11DE7C8", VA = "0x11DE7C8")]
	private void OnBoltShutdownBegin()
	{
	}

	[Token(Token = "0x60018CC")]
	[Address(RVA = "0x11DE844", Offset = "0x11DE844", VA = "0x11DE844")]
	private void OnBoltShutdownDone()
	{
	}

	[Token(Token = "0x60018CD")]
	[Address(RVA = "0x11DE8C0", Offset = "0x11DE8C0", VA = "0x11DE8C0")]
	private void OnSessionCreated(UdpSession udpSession)
	{
	}

	[Token(Token = "0x60018CE")]
	[Address(RVA = "0x11DE944", Offset = "0x11DE944", VA = "0x11DE944")]
	private void OnSessionConnected(UdpSession udpSession, IProtocolToken protocolToken)
	{
	}

	[Token(Token = "0x60018CF")]
	[Address(RVA = "0x11DE9C8", Offset = "0x11DE9C8", VA = "0x11DE9C8")]
	private void OnSessionConnectFailed(UdpSession udpSession, IProtocolToken protocolToken, UdpSessionError sessionError)
	{
	}

	[Token(Token = "0x60018D0")]
	[Address(RVA = "0x11DE65C", Offset = "0x11DE65C", VA = "0x11DE65C")]
	private void WriteBoltDebugInfos(string status, string host, string region)
	{
	}

	[Token(Token = "0x60018D1")]
	[Address(RVA = "0x11DEA4C", Offset = "0x11DEA4C", VA = "0x11DEA4C")]
	private void WriteBoltDebug(string text)
	{
	}

	[Token(Token = "0x60018D2")]
	[Address(RVA = "0x11DE640", Offset = "0x11DE640", VA = "0x11DE640")]
	private void SetLoadingBarFill(float fill)
	{
	}

	[Token(Token = "0x60018D3")]
	[Address(RVA = "0x11DEAD4", Offset = "0x11DEAD4", VA = "0x11DEAD4")]
	private void WriteMessageText(string text)
	{
	}

	[Token(Token = "0x60018D4")]
	[Address(RVA = "0x11DEAF8", Offset = "0x11DEAF8", VA = "0x11DEAF8")]
	private void WriteOculusDebugInfos(string evnt, NetworkResponse response, string data)
	{
	}

	[Token(Token = "0x60018D5")]
	[Address(RVA = "0x11DA608", Offset = "0x11DA608", VA = "0x11DA608")]
	public static void SetStatusMessage(NetworkResponse response, string message)
	{
	}

	[Token(Token = "0x60018D6")]
	[Address(RVA = "0x11DEC24", Offset = "0x11DEC24", VA = "0x11DEC24")]
	public UI_MultiplayerDebug()
	{
	}
}
[Token(Token = "0x2000438")]
public class UI_MultiplayerHubMessage : MonoBehaviour
{
	[Token(Token = "0x40013DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button _acceptButton;

	[Token(Token = "0x40013E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_messageText;

	[Token(Token = "0x40013E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_WarningOpen;

	[Token(Token = "0x60018D7")]
	[Address(RVA = "0x11DEC2C", Offset = "0x11DEC2C", VA = "0x11DEC2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018D8")]
	[Address(RVA = "0x11DECEC", Offset = "0x11DECEC", VA = "0x11DECEC")]
	public void Show()
	{
	}

	[Token(Token = "0x60018D9")]
	[Address(RVA = "0x11DECC8", Offset = "0x11DECC8", VA = "0x11DECC8")]
	public void Close()
	{
	}

	[Token(Token = "0x60018DA")]
	[Address(RVA = "0x11DED10", Offset = "0x11DED10", VA = "0x11DED10")]
	public void ForceMessage(string localizedMessage)
	{
	}

	[Token(Token = "0x60018DB")]
	[Address(RVA = "0x11DED34", Offset = "0x11DED34", VA = "0x11DED34")]
	public UI_MultiplayerHubMessage()
	{
	}
}
[Token(Token = "0x2000439")]
public class UILeaderboardPanelEntry
{
	[Token(Token = "0x40013E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int m_rank;

	[Token(Token = "0x40013E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_score;

	[Token(Token = "0x40013E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_displayName;

	[Token(Token = "0x40013E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_currentUser;

	[Token(Token = "0x60018DC")]
	[Address(RVA = "0x11DED3C", Offset = "0x11DED3C", VA = "0x11DED3C")]
	public UILeaderboardPanelEntry()
	{
	}
}
[Token(Token = "0x200043A")]
public class UILeaderboardPanelTable
{
	[Token(Token = "0x40013E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<UILeaderboardPanelEntry> entries;

	[Token(Token = "0x60018DD")]
	[Address(RVA = "0x11DED44", Offset = "0x11DED44", VA = "0x11DED44")]
	public UILeaderboardPanelTable()
	{
	}
}
[Token(Token = "0x200043B")]
public class UI_MultiplayerLeaderboad : BaseUIScreen, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[StructLayout(3)]
	[Token(Token = "0x200043C")]
	[CompilerGenerated]
	private struct <>c__DisplayClass43_0
	{
		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UI_MultiplayerLeaderboad <>4__this;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public LeaderboardProvider leaderboards;
	}

	[Token(Token = "0x200043D")]
	[CompilerGenerated]
	private sealed class <Populate>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UI_MultiplayerLeaderboad <>4__this;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass43_0 <>8__1;

		[Token(Token = "0x170003CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60018FA")]
			[Address(RVA = "0x11DFF2C", Offset = "0x11DFF2C", VA = "0x11DFF2C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60018FC")]
			[Address(RVA = "0x11DFF74", Offset = "0x11DFF74", VA = "0x11DFF74", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x11DF4AC", Offset = "0x11DF4AC", VA = "0x11DF4AC")]
		[DebuggerHidden]
		public <Populate>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x11DFD5C", Offset = "0x11DFD5C", VA = "0x11DFD5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x11DFD60", Offset = "0x11DFD60", VA = "0x11DFD60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0x11DFF34", Offset = "0x11DFF34", VA = "0x11DFF34", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013E7")]
	private const string c_totalScoreLeaderboardHeader = "STR_UI_LEADERBOARD_TOTAL_SCORE_HEADER";

	[Token(Token = "0x40013E8")]
	private const string c_bestScoreLeaderboardHeader = "STR_UI_LEADERBOARD_BEST_SCORE_HEADER";

	[Token(Token = "0x40013E9")]
	private const string c_fastestRunLeaderboardHeader = "STR_UI_LEADERBOARD_FASTEST_RUN_HEADER";

	[Token(Token = "0x40013EA")]
	private const string c_leaderboardHeaderGlobalSuffix = "STR_HUB_LEADERBOARD_GLOBAL";

	[Token(Token = "0x40013EB")]
	private const string c_leaderboardHeaderFriendsSuffix = "STR_HUB_LEADERBOARD_FRIENDS";

	[Token(Token = "0x40013EC")]
	private const string c_showGlobalLocId = "STR_HORDE_UI_LEADERBOARD_SCREEN_TOGGLE_GLOBAL_BUTTON";

	[Token(Token = "0x40013ED")]
	private const string c_showLocalLocId = "STR_HORDE_UI_LEADERBOARD_SCREEN_TOGGLE_FRIENDS_BUTTON";

	[Token(Token = "0x40013EE")]
	private const string c_showNearMeLocId = "STR_HORDE_UI_LEADERBOARD_SCREEN_TOGGLE_NEAR_ME_BUTTON";

	[Token(Token = "0x40013EF")]
	private const string c_showTopRanksLocId = "STR_HORDE_UI_LEADERBOARD_SCREEN_TOGGLE_TOP_RANKS_BUTTON";

	[Token(Token = "0x40013F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UI_MultiplayerLeaderboardScoreEntry[] m_entries;

	[Token(Token = "0x40013F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Link to an object to show while loading scores.")]
	[SerializeField]
	private GameObject m_waitingMessage;

	[Token(Token = "0x40013F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Link to an object to show if an error occurs while loading.")]
	[SerializeField]
	private GameObject m_errorMessage;

	[Token(Token = "0x40013F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Header("UI References")]
	private Button m_toggleGlobalFriends;

	[Token(Token = "0x40013F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Button m_toggleNearMe;

	[Token(Token = "0x40013F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Toggle m_totalScoresToggle;

	[Token(Token = "0x40013F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Toggle m_bestScoresToggle;

	[Token(Token = "0x40013F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Toggle m_fastestRunsToggle;

	[Token(Token = "0x40013F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Localized Texts")]
	[SerializeField]
	private TextMeshProUGUI m_toggleNearMeFilterText;

	[Token(Token = "0x40013F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private TextMeshProUGUI m_toggleGlobalFriendsFilterText;

	[Token(Token = "0x40013FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private TextMeshProUGUI m_leaderboardHeaderText;

	[Token(Token = "0x40013FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[Header("Leaderboard Configuration")]
	private bool m_showNearMeDefault;

	[Token(Token = "0x40013FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	[SerializeField]
	private bool m_showFriendsByDefault;

	[Token(Token = "0x40013FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	[SerializeField]
	private bool m_showScoresOnEnable;

	[Token(Token = "0x40013FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	private LeaderboardAPISuffix m_currentLeaderboard;

	[Token(Token = "0x40013FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Header("Auto Switch Leaderboards")]
	private bool m_autoSwitch;

	[Token(Token = "0x4001400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private float m_autoSwitchDuration;

	[Token(Token = "0x4001401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LeaderboardMapName m_currentLeaderboardMapName;

	[Token(Token = "0x4001402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<LeaderboardMapName> m_alreadyCachedLeaderboards;

	[Token(Token = "0x4001403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool m_isCurrentlyShowingNearMe;

	[Token(Token = "0x4001404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	private bool m_isCurrentlyShowingFriends;

	[Token(Token = "0x4001405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private ulong m_playerId;

	[Token(Token = "0x4001406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool m_lastAutoSwitch;

	[Token(Token = "0x4001407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float m_autoSwitchTimer;

	[Token(Token = "0x60018DE")]
	[Address(RVA = "0x11DEDCC", Offset = "0x11DEDCC", VA = "0x11DEDCC", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60018DF")]
	[Address(RVA = "0x11DEF54", Offset = "0x11DEF54", VA = "0x11DEF54", Slot = "8")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60018E0")]
	[Address(RVA = "0x11DF2B4", Offset = "0x11DF2B4", VA = "0x11DF2B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60018E1")]
	[Address(RVA = "0x11DF3B8", Offset = "0x11DF3B8", VA = "0x11DF3B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60018E2")]
	[Address(RVA = "0x11DF04C", Offset = "0x11DF04C", VA = "0x11DF04C")]
	private void SubscribeEvents()
	{
	}

	[Token(Token = "0x60018E3")]
	[Address(RVA = "0x11DF3BC", Offset = "0x11DF3BC", VA = "0x11DF3BC")]
	private void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x60018E4")]
	[Address(RVA = "0x11DF13C", Offset = "0x11DF13C", VA = "0x11DF13C")]
	private void SetDefaults()
	{
	}

	[Token(Token = "0x60018E5")]
	[Address(RVA = "0x11DEF7C", Offset = "0x11DEF7C", VA = "0x11DEF7C")]
	private void HideEntries()
	{
	}

	[Token(Token = "0x60018E6")]
	[Address(RVA = "0x11DC6F4", Offset = "0x11DC6F4", VA = "0x11DC6F4")]
	public void DifficultyChanged(LeaderboardMapName mapName)
	{
	}

	[Token(Token = "0x60018E7")]
	[Address(RVA = "0x11DEED4", Offset = "0x11DEED4", VA = "0x11DEED4")]
	public void ShowScores(LeaderboardAPISuffix lbName, LeaderboardMapName mapName)
	{
	}

	[Token(Token = "0x60018E8")]
	[Address(RVA = "0x11DF344", Offset = "0x11DF344", VA = "0x11DF344")]
	[IteratorStateMachine(typeof(<Populate>d__43))]
	protected IEnumerator Populate()
	{
		return null;
	}

	[Token(Token = "0x60018E9")]
	[Address(RVA = "0x11DF27C", Offset = "0x11DF27C", VA = "0x11DF27C")]
	private void DisableMessages()
	{
	}

	[Token(Token = "0x60018EA")]
	[Address(RVA = "0x11DF4D4", Offset = "0x11DF4D4", VA = "0x11DF4D4")]
	private void SetHeaderAndToggles()
	{
	}

	[Token(Token = "0x60018EB")]
	[Address(RVA = "0x11DF68C", Offset = "0x11DF68C", VA = "0x11DF68C")]
	private void FillTable(UILeaderboardPanelTable table)
	{
	}

	[Token(Token = "0x60018EC")]
	[Address(RVA = "0x11DF8E4", Offset = "0x11DF8E4", VA = "0x11DF8E4")]
	private void OnToggleLeaderboard(LeaderboardAPISuffix lbName)
	{
	}

	[Token(Token = "0x60018ED")]
	[Address(RVA = "0x11DF91C", Offset = "0x11DF91C", VA = "0x11DF91C")]
	private void OnClickToggleNearMe()
	{
	}

	[Token(Token = "0x60018EE")]
	[Address(RVA = "0x11DF9D0", Offset = "0x11DF9D0", VA = "0x11DF9D0")]
	private void OnClickToggleGlobalFriends()
	{
	}

	[Token(Token = "0x60018EF")]
	[Address(RVA = "0x11DFA84", Offset = "0x11DFA84", VA = "0x11DFA84")]
	public void OnClickToggleTotalScores(bool isOn)
	{
	}

	[Token(Token = "0x60018F0")]
	[Address(RVA = "0x11DFA94", Offset = "0x11DFA94", VA = "0x11DFA94")]
	public void OnClickToggleBestScore(bool isOn)
	{
	}

	[Token(Token = "0x60018F1")]
	[Address(RVA = "0x11DFAA4", Offset = "0x11DFAA4", VA = "0x11DFAA4")]
	public void OnClickToggleFastestRun(bool isOn)
	{
	}

	[Token(Token = "0x60018F2")]
	[Address(RVA = "0x11DFAB4", Offset = "0x11DFAB4", VA = "0x11DFAB4", Slot = "6")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60018F3")]
	[Address(RVA = "0x11DFAC8", Offset = "0x11DFAC8", VA = "0x11DFAC8", Slot = "7")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60018F4")]
	[Address(RVA = "0x11DFAD8", Offset = "0x11DFAD8", VA = "0x11DFAD8")]
	public UI_MultiplayerLeaderboad()
	{
	}
}
[Token(Token = "0x200043E")]
public class UI_MultiplayerLeaderboardScoreEntry : MonoBehaviour
{
	[Token(Token = "0x400140E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("UI References")]
	private TextMeshProUGUI m_leaderboardPositionText;

	[Token(Token = "0x400140F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_playerNameText;

	[Token(Token = "0x4001410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_scoreText;

	[Token(Token = "0x4001411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject m_localPlayerHighlight;

	[Token(Token = "0x60018FD")]
	[Address(RVA = "0x11DFF7C", Offset = "0x11DFF7C", VA = "0x11DFF7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018FE")]
	[Address(RVA = "0x11DF7B4", Offset = "0x11DF7B4", VA = "0x11DF7B4")]
	public void UpdateEntry(UILeaderboardPanelEntry entry, bool isLocalPlayer)
	{
	}

	[Token(Token = "0x60018FF")]
	[Address(RVA = "0x11E0004", Offset = "0x11E0004", VA = "0x11E0004")]
	public UI_MultiplayerLeaderboardScoreEntry()
	{
	}
}
[Token(Token = "0x200043F")]
public class UI_MultiplayerLobby : MonoBehaviour
{
	[Token(Token = "0x2000441")]
	[CompilerGenerated]
	private sealed class <LeaveLobbyRoutine>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UI_MultiplayerLobby <>4__this;

		[Token(Token = "0x170003D2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001929")]
			[Address(RVA = "0x11E35B4", Offset = "0x11E35B4", VA = "0x11E35B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600192B")]
			[Address(RVA = "0x11E35FC", Offset = "0x11E35FC", VA = "0x11E35FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x11E1428", Offset = "0x11E1428", VA = "0x11E1428")]
		[DebuggerHidden]
		public <LeaveLobbyRoutine>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x11E3370", Offset = "0x11E3370", VA = "0x11E3370", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x11E3374", Offset = "0x11E3374", VA = "0x11E3374", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x11E35BC", Offset = "0x11E35BC", VA = "0x11E35BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000442")]
	[CompilerGenerated]
	private sealed class <SwitchSidePanelFromTo>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BaseUIScreen to;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BaseUIScreen from;

		[Token(Token = "0x170003D4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600192F")]
			[Address(RVA = "0x11E36D4", Offset = "0x11E36D4", VA = "0x11E36D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001931")]
			[Address(RVA = "0x11E371C", Offset = "0x11E371C", VA = "0x11E371C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x11E1DE8", Offset = "0x11E1DE8", VA = "0x11E1DE8")]
		[DebuggerHidden]
		public <SwitchSidePanelFromTo>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x11E3604", Offset = "0x11E3604", VA = "0x11E3604", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x11E3608", Offset = "0x11E3608", VA = "0x11E3608", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x11E36DC", Offset = "0x11E36DC", VA = "0x11E36DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001412")]
	private const string c_readyUpLocId = "STR_HUB_MULTIPLAYER_LOBBY_READY_UP_TEXT";

	[Token(Token = "0x4001413")]
	private const string c_startGameLocId = "STR_HUB_MULTIPLAYER_LOBBY_START_GAME";

	[Token(Token = "0x4001414")]
	private const string c_lobbyPrivateLocId = "STR_HUB_MULTIPLAYER_LOBBY_PRIVATE";

	[Token(Token = "0x4001415")]
	private const string c_lobbyPublicLocId = "STR_HUB_MULTIPLAYER_LOBBY_PUBLIC";

	[Token(Token = "0x4001416")]
	private const string c_gamelobby = "STR_HUB_MULTIPLAYER_LOBBY_TITLE";

	[Token(Token = "0x400141A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Button")]
	private Button m_readyAndStartGameButton;

	[Token(Token = "0x400141B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Button m_changeMapButton;

	[Token(Token = "0x400141C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Button m_changeDifficultyButton;

	[Token(Token = "0x400141D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Button m_leaveLobbyButton;

	[Token(Token = "0x400141E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Button m_inviteFriendsButton;

	[Token(Token = "0x400141F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Button m_privateLobbyButton;

	[Token(Token = "0x4001420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Header("Lobby Panel & Prefabs")]
	private UI_PlayerCard m_playerCardPrefab;

	[Token(Token = "0x4001421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform m_content;

	[Token(Token = "0x4001422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private TextMeshProUGUI m_readyAndStartGameButtonText;

	[Token(Token = "0x4001423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private TextMeshProUGUI m_inviteFriendsText;

	[Token(Token = "0x4001424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Sprite m_publicIcon;

	[Token(Token = "0x4001425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Sprite m_privateIcon;

	[Token(Token = "0x4001426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Other References")]
	[SerializeField]
	private UIMapButton m_selectedMapButton;

	[Token(Token = "0x4001427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UIMapSelection m_mapSelection;

	[Token(Token = "0x4001428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private UIDifficultySelection m_difficultySelection;

	[Token(Token = "0x4001429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<LobbyPlayer> m_lobbyPlayers;

	[Token(Token = "0x400142A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool m_hasJoined;

	[Token(Token = "0x400142B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private LevelLoadManager m_levelLoadManager;

	[Token(Token = "0x400142C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool m_waitForPlayersFromServer;

	[Token(Token = "0x400142D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static bool s_tutorialSetSubtitle;

	[Token(Token = "0x170003CD")]
	public static UI_MultiplayerLobby Instance
	{
		[Token(Token = "0x6001900")]
		[Address(RVA = "0x11E000C", Offset = "0x11E000C", VA = "0x11E000C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001901")]
		[Address(RVA = "0x11E0054", Offset = "0x11E0054", VA = "0x11E0054")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170003CE")]
	private LobbyPlayer OwnPlayer
	{
		[Token(Token = "0x6001906")]
		[Address(RVA = "0x11E00AC", Offset = "0x11E00AC", VA = "0x11E00AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003CF")]
	private bool AllPlayersReady
	{
		[Token(Token = "0x6001907")]
		[Address(RVA = "0x11E01B0", Offset = "0x11E01B0", VA = "0x11E01B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003D0")]
	public bool IsInTransition
	{
		[Token(Token = "0x6001917")]
		[Address(RVA = "0x11E1C20", Offset = "0x11E1C20", VA = "0x11E1C20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003D1")]
	public bool WaitForPlayersFromServer
	{
		[Token(Token = "0x6001918")]
		[Address(RVA = "0x11E1D14", Offset = "0x11E1D14", VA = "0x11E1D14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000017")]
	public static event Action OnLeaveLobby
	{
		[Token(Token = "0x6001902")]
		[Address(RVA = "0x11D721C", Offset = "0x11D721C", VA = "0x11D721C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001903")]
		[Address(RVA = "0x11D7BC8", Offset = "0x11D7BC8", VA = "0x11D7BC8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000018")]
	public static event Action OnClickStartGameButton
	{
		[Token(Token = "0x6001904")]
		[Address(RVA = "0x11D72D8", Offset = "0x11D72D8", VA = "0x11D72D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001905")]
		[Address(RVA = "0x11D7C84", Offset = "0x11D7C84", VA = "0x11D7C84")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6001908")]
	[Address(RVA = "0x11E0248", Offset = "0x11E0248", VA = "0x11E0248")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001909")]
	[Address(RVA = "0x11E02F0", Offset = "0x11E02F0", VA = "0x11E02F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600190A")]
	[Address(RVA = "0x11E0400", Offset = "0x11E0400", VA = "0x11E0400")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600190B")]
	[Address(RVA = "0x11E0450", Offset = "0x11E0450", VA = "0x11E0450")]
	private void UnsubscribeEvents()
	{
	}

	[Token(Token = "0x600190C")]
	[Address(RVA = "0x11E0B3C", Offset = "0x11E0B3C", VA = "0x11E0B3C")]
	private void SubscribeEvents()
	{
	}

	[Token(Token = "0x600190D")]
	[Address(RVA = "0x11E1228", Offset = "0x11E1228", VA = "0x11E1228")]
	private void OnReceiveLobbyVisibilityChange(bool visible)
	{
	}

	[Token(Token = "0x600190E")]
	[Address(RVA = "0x11E1274", Offset = "0x11E1274", VA = "0x11E1274")]
	private void OnClickPrivatePublicLobby()
	{
	}

	[Token(Token = "0x600190F")]
	[Address(RVA = "0x11E13B0", Offset = "0x11E13B0", VA = "0x11E13B0")]
	private void OnClickLeaveLobby()
	{
	}

	[Token(Token = "0x6001910")]
	[Address(RVA = "0x11D7B8C", Offset = "0x11D7B8C", VA = "0x11D7B8C")]
	public void LeaveLobby()
	{
	}

	[Token(Token = "0x6001911")]
	[Address(RVA = "0x11E13B4", Offset = "0x11E13B4", VA = "0x11E13B4")]
	[IteratorStateMachine(typeof(<LeaveLobbyRoutine>d__48))]
	private IEnumerator LeaveLobbyRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001912")]
	[Address(RVA = "0x11D7D40", Offset = "0x11D7D40", VA = "0x11D7D40")]
	public void JoinLobby()
	{
	}

	[Token(Token = "0x6001913")]
	[Address(RVA = "0x11D81A4", Offset = "0x11D81A4", VA = "0x11D81A4")]
	public void JoinLobbyOffline(bool isFtue)
	{
	}

	[Token(Token = "0x6001914")]
	[Address(RVA = "0x11E19CC", Offset = "0x11E19CC", VA = "0x11E19CC")]
	private void OnClickReadyOrStartGame()
	{
	}

	[Token(Token = "0x6001915")]
	[Address(RVA = "0x11E1BD8", Offset = "0x11E1BD8", VA = "0x11E1BD8")]
	private void OnClickChangeMap()
	{
	}

	[Token(Token = "0x6001916")]
	[Address(RVA = "0x11E1CEC", Offset = "0x11E1CEC", VA = "0x11E1CEC")]
	private void OnClickChangeDifficulty()
	{
	}

	[Token(Token = "0x6001919")]
	[Address(RVA = "0x11E1D1C", Offset = "0x11E1D1C", VA = "0x11E1D1C")]
	private void NativeInvite()
	{
	}

	[Token(Token = "0x600191A")]
	[Address(RVA = "0x11E1C5C", Offset = "0x11E1C5C", VA = "0x11E1C5C")]
	[IteratorStateMachine(typeof(<SwitchSidePanelFromTo>d__59))]
	private IEnumerator SwitchSidePanelFromTo(BaseUIScreen from, BaseUIScreen to)
	{
		return null;
	}

	[Token(Token = "0x600191B")]
	[Address(RVA = "0x11E1E10", Offset = "0x11E1E10", VA = "0x11E1E10")]
	private void OnMapSelectionChanged(RequestChangeLevelEvent evnt)
	{
	}

	[Token(Token = "0x600191C")]
	[Address(RVA = "0x11E2274", Offset = "0x11E2274", VA = "0x11E2274")]
	private void OnDifficultySelectionChanged(RequestChangeDifficultyEvent evnt)
	{
	}

	[Token(Token = "0x600191D")]
	[Address(RVA = "0x11E2588", Offset = "0x11E2588", VA = "0x11E2588")]
	private void OnPlayerStateChanged(int playerName, MultiplayerGameState state)
	{
	}

	[Token(Token = "0x600191E")]
	[Address(RVA = "0x11E2E3C", Offset = "0x11E2E3C", VA = "0x11E2E3C")]
	private void OnPlayerAdded(int playerIndex, string playerName)
	{
	}

	[Token(Token = "0x600191F")]
	[Address(RVA = "0x11E2FB8", Offset = "0x11E2FB8", VA = "0x11E2FB8")]
	private void OnPlayerRemoved(int playerIndex, string playerName)
	{
	}

	[Token(Token = "0x6001920")]
	[Address(RVA = "0x11E1450", Offset = "0x11E1450", VA = "0x11E1450")]
	private void UpdatePlayerEntry(int playerIndex, string playerName, bool playerAdded)
	{
	}

	[Token(Token = "0x6001921")]
	[Address(RVA = "0x11E301C", Offset = "0x11E301C", VA = "0x11E301C")]
	private void ClearPlayerEntries()
	{
	}

	[Token(Token = "0x6001922")]
	[Address(RVA = "0x11E31FC", Offset = "0x11E31FC", VA = "0x11E31FC")]
	public UI_MultiplayerLobby()
	{
	}
}
[Token(Token = "0x2000445")]
public class LobbyPlayer
{
	[Token(Token = "0x4001439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MultiplayerGameState State;

	[Token(Token = "0x400143A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly UI_PlayerCard UICard;

	[Token(Token = "0x400143B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public readonly string Name;

	[Token(Token = "0x6001936")]
	[Address(RVA = "0x11E2FC8", Offset = "0x11E2FC8", VA = "0x11E2FC8")]
	public LobbyPlayer(MultiplayerGameState state, UI_PlayerCard card, string name)
	{
	}
}
[Token(Token = "0x2000446")]
public class UI_MultiplayerMonitor : MonoBehaviour
{
	[Token(Token = "0x2000447")]
	[CompilerGenerated]
	private sealed class <UpdateTexts>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UI_MultiplayerMonitor <>4__this;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <updating>5__2;

		[Token(Token = "0x170003D6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001940")]
			[Address(RVA = "0x11E3D5C", Offset = "0x11E3D5C", VA = "0x11E3D5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001942")]
			[Address(RVA = "0x11E3DA4", Offset = "0x11E3DA4", VA = "0x11E3DA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x11E3BF8", Offset = "0x11E3BF8", VA = "0x11E3BF8")]
		[DebuggerHidden]
		public <UpdateTexts>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x11E3CD0", Offset = "0x11E3CD0", VA = "0x11E3CD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x11E3CD4", Offset = "0x11E3CD4", VA = "0x11E3CD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x11E3D64", Offset = "0x11E3D64", VA = "0x11E3D64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400143C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UI_MonitorPlayerData[] m_monitorPlayerData;

	[Token(Token = "0x400143D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TMP_Text m_livesText;

	[Token(Token = "0x400143E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TMP_Text m_wavesText;

	[Token(Token = "0x400143F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WaitForSeconds WaitForSecond;

	[Token(Token = "0x4001440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine updateTextsRoutine;

	[Token(Token = "0x6001937")]
	[Address(RVA = "0x11E37CC", Offset = "0x11E37CC", VA = "0x11E37CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001938")]
	[Address(RVA = "0x11E3870", Offset = "0x11E3870", VA = "0x11E3870")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001939")]
	[Address(RVA = "0x11E3884", Offset = "0x11E3884", VA = "0x11E3884")]
	private void UpdateLivesText()
	{
	}

	[Token(Token = "0x600193A")]
	[Address(RVA = "0x11E39BC", Offset = "0x11E39BC", VA = "0x11E39BC")]
	private void UpdateWavesText()
	{
	}

	[Token(Token = "0x600193B")]
	[Address(RVA = "0x11E37FC", Offset = "0x11E37FC", VA = "0x11E37FC")]
	[IteratorStateMachine(typeof(<UpdateTexts>d__9))]
	private IEnumerator UpdateTexts()
	{
		return null;
	}

	[Token(Token = "0x600193C")]
	[Address(RVA = "0x11E3C20", Offset = "0x11E3C20", VA = "0x11E3C20")]
	public UI_MultiplayerMonitor()
	{
	}
}
[Serializable]
[Token(Token = "0x2000448")]
public class UI_MonitorPlayerData
{
	[Token(Token = "0x4001445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private TMP_Text m_playerNameText;

	[Token(Token = "0x4001446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text m_playerScoreText;

	[Token(Token = "0x170003D8")]
	public TMP_Text PlayerNameText
	{
		[Token(Token = "0x6001943")]
		[Address(RVA = "0x11E3DAC", Offset = "0x11E3DAC", VA = "0x11E3DAC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001944")]
		[Address(RVA = "0x11E3DB4", Offset = "0x11E3DB4", VA = "0x11E3DB4")]
		set
		{
		}
	}

	[Token(Token = "0x170003D9")]
	public TMP_Text PlayerScoreText
	{
		[Token(Token = "0x6001945")]
		[Address(RVA = "0x11E3DBC", Offset = "0x11E3DBC", VA = "0x11E3DBC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001946")]
		[Address(RVA = "0x11E3DC4", Offset = "0x11E3DC4", VA = "0x11E3DC4")]
		set
		{
		}
	}

	[Token(Token = "0x6001947")]
	[Address(RVA = "0x11E3DCC", Offset = "0x11E3DCC", VA = "0x11E3DCC")]
	public UI_MonitorPlayerData()
	{
	}
}
[Token(Token = "0x2000449")]
public class UI_MultiplayerPlay : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Button m_createLobbyButton;

	[Token(Token = "0x4001448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Button m_quickMatchButton;

	[Token(Token = "0x4001449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Invites panel")]
	[SerializeField]
	private RectTransform m_invitesPanel;

	[Token(Token = "0x400144A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private RectTransform m_invitesCard;

	[Token(Token = "0x400144B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Button m_refreshInvitesButton;

	[Token(Token = "0x400144C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Header("Warning panel")]
	private RectTransform m_warningPanel;

	[Token(Token = "0x400144D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private TMP_Text m_warningTitleText;

	[Token(Token = "0x400144E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private TMP_Text m_warningErrorText;

	[Token(Token = "0x400144F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<RectTransform> m_inviteEntries;

	[Token(Token = "0x6001948")]
	[Address(RVA = "0x11E3DD4", Offset = "0x11E3DD4", VA = "0x11E3DD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001949")]
	[Address(RVA = "0x11E3DD8", Offset = "0x11E3DD8", VA = "0x11E3DD8", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600194A")]
	[Address(RVA = "0x11E40F8", Offset = "0x11E40F8", VA = "0x11E40F8", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600194B")]
	[Address(RVA = "0x11E43D4", Offset = "0x11E43D4", VA = "0x11E43D4")]
	private void OnBoltStartDone()
	{
	}

	[Token(Token = "0x600194C")]
	[Address(RVA = "0x11E43D8", Offset = "0x11E43D8", VA = "0x11E43D8")]
	private void OnSessionConnected(UdpSession udpSession, IProtocolToken protocolToken)
	{
	}

	[Token(Token = "0x600194D")]
	[Address(RVA = "0x11E4424", Offset = "0x11E4424", VA = "0x11E4424")]
	private void OnClickCreateLobby()
	{
	}

	[Token(Token = "0x600194E")]
	[Address(RVA = "0x11E44B0", Offset = "0x11E44B0", VA = "0x11E44B0")]
	private void OnClickQuickMatch()
	{
	}

	[Token(Token = "0x600194F")]
	[Address(RVA = "0x11E40F4", Offset = "0x11E40F4", VA = "0x11E40F4")]
	private void OnClickRefreshInvites()
	{
	}

	[Token(Token = "0x6001950")]
	[Address(RVA = "0x11E453C", Offset = "0x11E453C", VA = "0x11E453C")]
	private void OnClickJoinInvite(ulong roomId)
	{
	}

	[Token(Token = "0x6001951")]
	[Address(RVA = "0x11E4540", Offset = "0x11E4540", VA = "0x11E4540")]
	private void OnRoomJoined(NetworkResponse response)
	{
	}

	[Token(Token = "0x6001952")]
	[Address(RVA = "0x11E45EC", Offset = "0x11E45EC", VA = "0x11E45EC")]
	private void DisplayErrorMessage(string title, string message)
	{
	}

	[Token(Token = "0x6001953")]
	[Address(RVA = "0x11E4664", Offset = "0x11E4664", VA = "0x11E4664")]
	private void CreateInviteEntry(string roomName, ulong roomId)
	{
	}

	[Token(Token = "0x6001954")]
	[Address(RVA = "0x11E4898", Offset = "0x11E4898", VA = "0x11E4898")]
	public UI_MultiplayerPlay()
	{
	}
}
[Token(Token = "0x200044B")]
public class UI_MultiplayerRankingScreen : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x200044C")]
	[CompilerGenerated]
	private sealed class <AwardExperiencePoints>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UI_MultiplayerRankingScreen <>4__this;

		[Token(Token = "0x170003DA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001964")]
			[Address(RVA = "0x11E5ED8", Offset = "0x11E5ED8", VA = "0x11E5ED8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003DB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001966")]
			[Address(RVA = "0x11E5F20", Offset = "0x11E5F20", VA = "0x11E5F20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x11E5A48", Offset = "0x11E5A48", VA = "0x11E5A48")]
		[DebuggerHidden]
		public <AwardExperiencePoints>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x11E5C88", Offset = "0x11E5C88", VA = "0x11E5C88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x11E5C8C", Offset = "0x11E5C8C", VA = "0x11E5C8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0x11E5EE0", Offset = "0x11E5EE0", VA = "0x11E5EE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001452")]
	private const string c_exitToHubHSMParamName = "exit hub";

	[Token(Token = "0x4001453")]
	private const string c_countdownLocId = "STR_HUB_MULTIPLAYER_COUNTDOWN";

	[Token(Token = "0x4001454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("UI References")]
	[SerializeField]
	private TextMeshProUGUI m_totalExperiencePointsValueText;

	[Token(Token = "0x4001455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UI_RankBar m_uiRankBar;

	[Token(Token = "0x4001456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("PlayerStats")]
	private UI_PlayerStat m_killStat;

	[Token(Token = "0x4001457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UI_PlayerStat m_headshotsStat;

	[Token(Token = "0x4001458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private UI_PlayerStat m_timeBonusStat;

	[Token(Token = "0x4001459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private UI_PlayerStat m_coopBonusStat;

	[Token(Token = "0x400145A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Button Panel")]
	[SerializeField]
	private Button m_backToHubButton;

	[Token(Token = "0x400145B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Timelines")]
	[SerializeField]
	private PlayableDirector m_statBoardTimeline;

	[Token(Token = "0x400145C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_serverSentLevelEndEvent;

	[Token(Token = "0x400145D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float m_totalExperienceReceived;

	[Token(Token = "0x400145E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Coroutine m_awardExperiencePointsRoutine;

	[Token(Token = "0x400145F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool m_awardGranted;

	[Token(Token = "0x6001957")]
	[Address(RVA = "0x11E4938", Offset = "0x11E4938", VA = "0x11E4938", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001958")]
	[Address(RVA = "0x11E4D3C", Offset = "0x11E4D3C", VA = "0x11E4D3C")]
	private void PopulatePlayerStats(ScoreBreakdown breakdown)
	{
	}

	[Token(Token = "0x6001959")]
	[Address(RVA = "0x11E50B0", Offset = "0x11E50B0", VA = "0x11E50B0")]
	public void InitAndShowXPBar()
	{
	}

	[Token(Token = "0x600195A")]
	[Address(RVA = "0x11E573C", Offset = "0x11E573C", VA = "0x11E573C")]
	public void TriggerXPBarFill()
	{
	}

	[Token(Token = "0x600195B")]
	[Address(RVA = "0x11E57E0", Offset = "0x11E57E0", VA = "0x11E57E0", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600195C")]
	[Address(RVA = "0x11E576C", Offset = "0x11E576C", VA = "0x11E576C")]
	[IteratorStateMachine(typeof(<AwardExperiencePoints>d__19))]
	private IEnumerator AwardExperiencePoints()
	{
		return null;
	}

	[Token(Token = "0x600195D")]
	[Address(RVA = "0x11E5A70", Offset = "0x11E5A70", VA = "0x11E5A70")]
	private void OnClickBackToHub()
	{
	}

	[Token(Token = "0x600195E")]
	[Address(RVA = "0x11E5B4C", Offset = "0x11E5B4C", VA = "0x11E5B4C")]
	private void OnReceivedLevelEndEvent(RequestLevelEndEvent evnt)
	{
	}

	[Token(Token = "0x600195F")]
	[Address(RVA = "0x11E5C34", Offset = "0x11E5C34", VA = "0x11E5C34")]
	private void OnReceivedServerLevelEndEvent(ServerLevelEndTypeEvent evnt)
	{
	}

	[Token(Token = "0x6001960")]
	[Address(RVA = "0x11E5C80", Offset = "0x11E5C80", VA = "0x11E5C80")]
	public UI_MultiplayerRankingScreen()
	{
	}
}
[Token(Token = "0x200044D")]
public class UI_MultiplayerResultScreen : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x200044F")]
	[CompilerGenerated]
	private sealed class <RefreshScores>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UI_MultiplayerResultScreen <>4__this;

		[Token(Token = "0x170003DC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001976")]
			[Address(RVA = "0x11E713C", Offset = "0x11E713C", VA = "0x11E713C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003DD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001978")]
			[Address(RVA = "0x11E7184", Offset = "0x11E7184", VA = "0x11E7184", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x11E6D3C", Offset = "0x11E6D3C", VA = "0x11E6D3C")]
		[DebuggerHidden]
		public <RefreshScores>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x11E7068", Offset = "0x11E7068", VA = "0x11E7068", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x11E706C", Offset = "0x11E706C", VA = "0x11E706C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x11E7144", Offset = "0x11E7144", VA = "0x11E7144", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001463")]
	private const string c_continueExitPointName = "continue";

	[Token(Token = "0x4001464")]
	private const string c_newBestLocId = "STR_HORDE_UI_MAP_RESULTS_MATCH_STAT_NEW_BEST";

	[Token(Token = "0x4001465")]
	private const string c_subHeaderDefeatLocId = "STR_HORDE_UI_MAP_RESULTS_SUBHEADER_DEFEAT_TITLE";

	[Token(Token = "0x4001466")]
	private const string c_subHeaderVictoryLocId = "STR_HORDE_UI_MAP_RESULTS_SUBHEADER_VICTORY_TITLE";

	[Token(Token = "0x4001467")]
	private const string c_subHeaderTutorialLocId = "STR_TUTORIAL_COMPLETED";

	[Token(Token = "0x4001468")]
	private const string c_matchStatScoreTitleLocId = "STR_HORDE_UI_MAP_RESULTS_MATCH_STAT_SCORE_TITLE";

	[Token(Token = "0x4001469")]
	private const string c_matchStatTimeTitleLocId = "STR_HORDE_UI_MAP_RESULTS_MATCH_STAT_TIME_TITLE";

	[Token(Token = "0x400146A")]
	private const string c_matchStatWaveTitleLocId = "STR_HORDE_UI_MAP_RESULTS_MATCH_STAT_WAVE_COUNT_TITLE";

	[Token(Token = "0x400146B")]
	private const string c_playerStatNameTitleLocId = "STR_HORDE_UI_MAP_RESULTS_NAME_TITLE";

	[Token(Token = "0x400146C")]
	private const string c_playerStatScoreTitleLocId = "STR_HORDE_UI_MAP_RESULTS_SCORE_TITLE";

	[Token(Token = "0x400146D")]
	private const string c_playerStatKillsTitleLocId = "STR_HORDE_UI_MAP_RESULTS_KILLS_TITLE";

	[Token(Token = "0x400146E")]
	private const string c_playerStatDeathsTitleLocId = "STR_HORDE_UI_MAP_RESULTS_DEATHS_TITLE";

	[Token(Token = "0x400146F")]
	private const string c_playerStatHeadshotsTitleLocId = "STR_HORDE_UI_MAP_RESULTS_HEADSHOTS_TITLE";

	[Token(Token = "0x4001470")]
	private const string c_playerStatTimeBonusTitleLocId = "STR_HORDE_UI_MAP_RESULTS_TIMEBONUS_TITLE";

	[Token(Token = "0x4001471")]
	private const string c_playerStatPingTitleLocId = "STR_HORDE_UI_MAP_RESULTS_PING_TITLE";

	[Token(Token = "0x4001472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Match Stats")]
	[SerializeField]
	private UI_MatchStat m_waveMatchStat;

	[Token(Token = "0x4001473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UI_MatchStat m_timeMatchStat;

	[Token(Token = "0x4001474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UI_MatchStat m_scoreMatchStat;

	[Token(Token = "0x4001475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Localize Texts")]
	[SerializeField]
	private TextMeshProUGUI m_mapResultSubHeaderText;

	[Token(Token = "0x4001476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private TextMeshProUGUI m_nameHeaderText;

	[Token(Token = "0x4001477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private TextMeshProUGUI m_scoreHeaderText;

	[Token(Token = "0x4001478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private TextMeshProUGUI m_killsHeaderText;

	[Token(Token = "0x4001479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private TextMeshProUGUI m_deathsHeaderText;

	[Token(Token = "0x400147A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private TextMeshProUGUI m_headshotsHeaderText;

	[Token(Token = "0x400147B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private TextMeshProUGUI m_timeBonusHeaderText;

	[Token(Token = "0x400147C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private TextMeshProUGUI m_pingHeaderText;

	[Token(Token = "0x400147D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Header("Players")]
	private List<UI_MultiplayerResultScreenPlayer> m_playerEntryList;

	[Token(Token = "0x400147E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private float m_screenDuration;

	[Token(Token = "0x400147F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private PlayableDirector m_director;

	[Token(Token = "0x4001480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float m_currentDuration;

	[Token(Token = "0x4001481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private MultiplayerScoreTracker m_multiplayerScoreTracker;

	[Token(Token = "0x6001967")]
	[Address(RVA = "0x11E5F28", Offset = "0x11E5F28", VA = "0x11E5F28", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001968")]
	[Address(RVA = "0x11E6574", Offset = "0x11E6574", VA = "0x11E6574", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001969")]
	[Address(RVA = "0x11E6360", Offset = "0x11E6360", VA = "0x11E6360")]
	private void LocalizeScoreboardHeaderRow()
	{
	}

	[Token(Token = "0x600196A")]
	[Address(RVA = "0x11E654C", Offset = "0x11E654C", VA = "0x11E654C")]
	private void PopulateWithData(List<MultiplayerScoreResult> scores)
	{
	}

	[Token(Token = "0x600196B")]
	[Address(RVA = "0x11E6940", Offset = "0x11E6940", VA = "0x11E6940")]
	private void PopulateScoreboard(List<MultiplayerScoreResult> scores)
	{
	}

	[Token(Token = "0x600196C")]
	[Address(RVA = "0x11E65F8", Offset = "0x11E65F8", VA = "0x11E65F8")]
	private void PopulateMatchStats(List<MultiplayerScoreResult> sendScores)
	{
	}

	[Token(Token = "0x600196D")]
	[Address(RVA = "0x11E6CA8", Offset = "0x11E6CA8", VA = "0x11E6CA8")]
	private void OnScoreReceived(SendScore score)
	{
	}

	[Token(Token = "0x600196E")]
	[Address(RVA = "0x11E6CC8", Offset = "0x11E6CC8", VA = "0x11E6CC8")]
	[IteratorStateMachine(typeof(<RefreshScores>d__38))]
	private IEnumerator RefreshScores()
	{
		return null;
	}

	[Token(Token = "0x600196F")]
	[Address(RVA = "0x11E6D64", Offset = "0x11E6D64", VA = "0x11E6D64", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6001970")]
	[Address(RVA = "0x11E7048", Offset = "0x11E7048", VA = "0x11E7048")]
	public UI_MultiplayerResultScreen()
	{
	}
}
[Token(Token = "0x2000450")]
public class UI_MultiplayerResultScreenPlayer : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000451")]
	public class PlayerInfo
	{
		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshProUGUI NameText;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshProUGUI RankText;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image AvatarImage;

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x11E76F8", Offset = "0x11E76F8", VA = "0x11E76F8")]
		public PlayerInfo()
		{
		}
	}

	[Token(Token = "0x4001486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PlayerInfo m_playerInfo;

	[Token(Token = "0x4001487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UI_MultiplayerResultScreenPlayerStat m_playerKills;

	[Token(Token = "0x4001488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UI_MultiplayerResultScreenPlayerStat m_playerDeaths;

	[Token(Token = "0x4001489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UI_MultiplayerResultScreenPlayerStat m_playerHeadshots;

	[Token(Token = "0x400148A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UI_MultiplayerResultScreenPlayerStat m_playerScore;

	[Token(Token = "0x400148B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UI_MultiplayerResultScreenPlayerStat m_playerTimeBonus;

	[Token(Token = "0x400148C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UI_MultiplayerResultScreenPlayerStat m_playerPing;

	[Token(Token = "0x400148D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject m_playerInfoParent;

	[Token(Token = "0x6001979")]
	[Address(RVA = "0x11E718C", Offset = "0x11E718C", VA = "0x11E718C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600197A")]
	[Address(RVA = "0x11E6B84", Offset = "0x11E6B84", VA = "0x11E6B84")]
	public void Populate(MultiplayerScoreResult own, MultiplayerScoreResult other)
	{
	}

	[Token(Token = "0x600197B")]
	[Address(RVA = "0x11E6BC4", Offset = "0x11E6BC4", VA = "0x11E6BC4")]
	public void Disable()
	{
	}

	[Token(Token = "0x600197C")]
	[Address(RVA = "0x11E74EC", Offset = "0x11E74EC", VA = "0x11E74EC")]
	private void PopulateSinglePlayer(MultiplayerScoreResult own)
	{
	}

	[Token(Token = "0x600197D")]
	[Address(RVA = "0x11E739C", Offset = "0x11E739C", VA = "0x11E739C")]
	private void PopulateCoop(MultiplayerScoreResult own, MultiplayerScoreResult other)
	{
	}

	[Token(Token = "0x600197E")]
	[Address(RVA = "0x11E71E8", Offset = "0x11E71E8", VA = "0x11E71E8")]
	private void PopulatePlayerInfo(MultiplayerScoreResult own)
	{
	}

	[Token(Token = "0x600197F")]
	[Address(RVA = "0x11E76F0", Offset = "0x11E76F0", VA = "0x11E76F0")]
	public UI_MultiplayerResultScreenPlayer()
	{
	}
}
[Token(Token = "0x2000452")]
public class UI_MultiplayerResultScreenPlayerStat : MonoBehaviour
{
	[Token(Token = "0x4001491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMeshProUGUI m_statValueText;

	[Token(Token = "0x4001492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Image m_highlightObject;

	[Token(Token = "0x6001981")]
	[Address(RVA = "0x11E7700", Offset = "0x11E7700", VA = "0x11E7700")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001982")]
	[Address(RVA = "0x11E75F8", Offset = "0x11E75F8", VA = "0x11E75F8")]
	public void Populate(string value, bool highlight)
	{
	}

	[Token(Token = "0x6001983")]
	[Address(RVA = "0x11E7800", Offset = "0x11E7800", VA = "0x11E7800")]
	public UI_MultiplayerResultScreenPlayerStat()
	{
	}
}
[Token(Token = "0x2000453")]
public class UI_MultiplayerRooms : MonoBehaviour
{
	[Token(Token = "0x4001494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Rooms Panel")]
	[SerializeField]
	private RectTransform m_roomsPanel;

	[Token(Token = "0x4001495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform m_roomCard;

	[Token(Token = "0x4001496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CanvasGroup m_canvasGroup;

	[Token(Token = "0x4001497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Color m_roomTextCorrectBuild;

	[Token(Token = "0x4001498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color m_roomTextIncorrectBuild;

	[Token(Token = "0x4001499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<Guid, RectTransform> m_existingRoomEntries;

	[Token(Token = "0x14000019")]
	public static event Action OnExitJoinLobby
	{
		[Token(Token = "0x6001984")]
		[Address(RVA = "0x11E7808", Offset = "0x11E7808", VA = "0x11E7808")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001985")]
		[Address(RVA = "0x11E78C0", Offset = "0x11E78C0", VA = "0x11E78C0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6001986")]
	[Address(RVA = "0x11E7978", Offset = "0x11E7978", VA = "0x11E7978")]
	private void Start()
	{
	}

	[Token(Token = "0x6001987")]
	[Address(RVA = "0x11DA8E4", Offset = "0x11DA8E4", VA = "0x11DA8E4")]
	public bool GetVisibility()
	{
		return default(bool);
	}

	[Token(Token = "0x6001988")]
	[Address(RVA = "0x11E7A38", Offset = "0x11E7A38", VA = "0x11E7A38")]
	private void ShowPanel(bool show)
	{
	}

	[Token(Token = "0x6001989")]
	[Address(RVA = "0x11D9238", Offset = "0x11D9238", VA = "0x11D9238")]
	public void SetVisibility(bool value)
	{
	}

	[Token(Token = "0x600198A")]
	[Address(RVA = "0x11DA818", Offset = "0x11DA818", VA = "0x11DA818")]
	public void ToggleVisibility(bool forceValue = false, bool value = false)
	{
	}

	[Token(Token = "0x600198B")]
	[Address(RVA = "0x11E7A68", Offset = "0x11E7A68", VA = "0x11E7A68")]
	public UI_MultiplayerRooms()
	{
	}
}
[Token(Token = "0x2000454")]
public class UI_NewsfeedPlacement : MonoBehaviour
{
	[Token(Token = "0x400149A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private State_UIMultiplayerMainMenu m_stateUIMultiplayerMainMenu;

	[Token(Token = "0x400149B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TMP_Text m_titleLabel;

	[Token(Token = "0x400149C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TMP_Text m_bodyLabel;

	[Token(Token = "0x400149D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Button m_button1;

	[Token(Token = "0x400149E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TMP_Text m_buttonLabel1;

	[Token(Token = "0x400149F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Button m_button2;

	[Token(Token = "0x40014A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TMP_Text m_buttonLabel2;

	[Token(Token = "0x40014A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private NewsPayload m_activeNewsPayload;

	[Token(Token = "0x600198C")]
	[Address(RVA = "0x11D92DC", Offset = "0x11D92DC", VA = "0x11D92DC")]
	public void SetPayload(NewsPayload newsPayload)
	{
	}

	[Token(Token = "0x600198D")]
	[Address(RVA = "0x11E7AF0", Offset = "0x11E7AF0", VA = "0x11E7AF0")]
	public void OnButtonClick(int buttonIndex)
	{
	}

	[Token(Token = "0x600198E")]
	[Address(RVA = "0x11E7B98", Offset = "0x11E7B98", VA = "0x11E7B98")]
	public UI_NewsfeedPlacement()
	{
	}
}
[Token(Token = "0x2000455")]
public class UI_PlayerStat : MonoBehaviour
{
	[Token(Token = "0x40014A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_countText;

	[Token(Token = "0x40014A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_expValueText;

	[Token(Token = "0x600198F")]
	[Address(RVA = "0x11E4FC4", Offset = "0x11E4FC4", VA = "0x11E4FC4")]
	public void Populate(string amount, int exp)
	{
	}

	[Token(Token = "0x6001990")]
	[Address(RVA = "0x11E7BA0", Offset = "0x11E7BA0", VA = "0x11E7BA0")]
	public void Populate(string amount, float expBonus)
	{
	}

	[Token(Token = "0x6001991")]
	[Address(RVA = "0x11E7C90", Offset = "0x11E7C90", VA = "0x11E7C90")]
	public void Populate(string amount, string text)
	{
	}

	[Token(Token = "0x6001992")]
	[Address(RVA = "0x11E7CE0", Offset = "0x11E7CE0", VA = "0x11E7CE0")]
	public UI_PlayerStat()
	{
	}
}
[Token(Token = "0x2000456")]
public class UI_RankBar : MonoBehaviour
{
	[Token(Token = "0x2000457")]
	[CompilerGenerated]
	private sealed class <AnimateBar>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float toXp;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fromXp;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UI_RankBar <>4__this;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI gameScoreTotalValueText;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <amount>5__2;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <currentExp>5__3;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RankConfig <config>5__4;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rank <currentRank>5__5;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rank <nextRank>5__6;

		[Token(Token = "0x170003DE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600199C")]
			[Address(RVA = "0x11E8264", Offset = "0x11E8264", VA = "0x11E8264", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003DF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600199E")]
			[Address(RVA = "0x11E82AC", Offset = "0x11E82AC", VA = "0x11E82AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x11E7EB0", Offset = "0x11E7EB0", VA = "0x11E7EB0")]
		[DebuggerHidden]
		public <AnimateBar>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x11E7EE8", Offset = "0x11E7EE8", VA = "0x11E7EE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x11E7EEC", Offset = "0x11E7EEC", VA = "0x11E7EEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0x11E826C", Offset = "0x11E826C", VA = "0x11E826C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014A4")]
	private const string c_currentRankTextLocId = "STR_HORDE_UI_HUB_RANK_DISPLAY_CURRENT_RANK_TITLE";

	[Token(Token = "0x40014A5")]
	private const string c_maxRankLocId = "STR_HORDE_UI_RANKING_SCREEN_PLAYER_STAT_MAX_RANK";

	[Token(Token = "0x40014A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_currentRankText;

	[Token(Token = "0x40014A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_nextRankText;

	[Token(Token = "0x40014A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_currentTotalExp;

	[Token(Token = "0x40014A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_expToNextLevel;

	[Token(Token = "0x40014AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image m_currentRankIcon;

	[Token(Token = "0x40014AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Image m_nextRankIcon;

	[Token(Token = "0x40014AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public Image m_rankFillImage;

	[Token(Token = "0x40014AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PlayableDirector m_onRankUpTimeline;

	[Token(Token = "0x40014AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float m_receiveXpSpeed;

	[Token(Token = "0x6001993")]
	[Address(RVA = "0x11E7CE8", Offset = "0x11E7CE8", VA = "0x11E7CE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001994")]
	[Address(RVA = "0x11E7D0C", Offset = "0x11E7D0C", VA = "0x11E7D0C")]
	private void OnRankChanged(Rank obj)
	{
	}

	[Token(Token = "0x6001995")]
	[Address(RVA = "0x11E51F4", Offset = "0x11E51F4", VA = "0x11E51F4")]
	public void ShowForRank(Rank currentRank, Rank nextRank, float normalizedRankProgress)
	{
	}

	[Token(Token = "0x6001996")]
	[Address(RVA = "0x11E7DB8", Offset = "0x11E7DB8", VA = "0x11E7DB8")]
	public void UpdateFillAmount(int currentXP, float totalRequiredCurrentRank, float totalRequiredNextRank)
	{
	}

	[Token(Token = "0x6001997")]
	[Address(RVA = "0x11E5E34", Offset = "0x11E5E34", VA = "0x11E5E34")]
	[IteratorStateMachine(typeof(<AnimateBar>d__15))]
	public IEnumerator AnimateBar(float fromXp, float toXp, TextMeshProUGUI gameScoreTotalValueText)
	{
		return null;
	}

	[Token(Token = "0x6001998")]
	[Address(RVA = "0x11E7ED8", Offset = "0x11E7ED8", VA = "0x11E7ED8")]
	public UI_RankBar()
	{
	}
}
[Token(Token = "0x2000458")]
public class UI_TopScreen : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x2000459")]
	private enum ActivePanel
	{
		[Token(Token = "0x40014C7")]
		VersionMismatch,
		[Token(Token = "0x40014C8")]
		VersionNumber,
		[Token(Token = "0x40014C9")]
		RegionSettings,
		[Token(Token = "0x40014CA")]
		NoInternet,
		[Token(Token = "0x40014CB")]
		ProfileUnlocks
	}

	[Token(Token = "0x40014BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Header("References")]
	private CanvasGroup m_canvasGroup;

	[Token(Token = "0x40014BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Header("Panel Objects")]
	private GameObject m_regionSettingsPanel;

	[Token(Token = "0x40014BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_noInternetPanel;

	[Token(Token = "0x40014BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject m_versionMismatch;

	[Token(Token = "0x40014BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject m_profileUnlockDetailsPanel;

	[Token(Token = "0x40014BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject m_versionNumberPanel;

	[Token(Token = "0x40014C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Settings Panel")]
	[SerializeField]
	private TMP_Text m_regionText;

	[Token(Token = "0x40014C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Button m_regionUpButton;

	[Token(Token = "0x40014C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Button m_regionDownButton;

	[Token(Token = "0x40014C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Button m_regionChangeButton;

	[Token(Token = "0x40014C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ActivePanel m_activePanel;

	[Token(Token = "0x40014C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool m_internetConnected;

	[Token(Token = "0x600199F")]
	[Address(RVA = "0x11E82B4", Offset = "0x11E82B4", VA = "0x11E82B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60019A0")]
	[Address(RVA = "0x11E83D8", Offset = "0x11E83D8", VA = "0x11E83D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60019A1")]
	[Address(RVA = "0x11E85F0", Offset = "0x11E85F0", VA = "0x11E85F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60019A2")]
	[Address(RVA = "0x11D7394", Offset = "0x11D7394", VA = "0x11D7394")]
	public void SetTopScreenVisibility(bool visible)
	{
	}

	[Token(Token = "0x60019A3")]
	[Address(RVA = "0x11E82B8", Offset = "0x11E82B8", VA = "0x11E82B8")]
	private void OnTargetRegionChanged()
	{
	}

	[Token(Token = "0x60019A4")]
	[Address(RVA = "0x11D9210", Offset = "0x11D9210", VA = "0x11D9210")]
	public void ShowRegionSettings(bool show)
	{
	}

	[Token(Token = "0x60019A5")]
	[Address(RVA = "0x11D9F5C", Offset = "0x11D9F5C", VA = "0x11D9F5C")]
	public void ShowNoInternetMessage(bool show)
	{
	}

	[Token(Token = "0x60019A6")]
	[Address(RVA = "0x11D9F94", Offset = "0x11D9F94", VA = "0x11D9F94")]
	public void ShowNoUpdatedVersion()
	{
	}

	[Token(Token = "0x60019A7")]
	[Address(RVA = "0x11DA98C", Offset = "0x11DA98C", VA = "0x11DA98C")]
	public void ShowProfileUnlockDetailsPanel(bool show)
	{
	}

	[Token(Token = "0x60019A8")]
	[Address(RVA = "0x11DA45C", Offset = "0x11DA45C", VA = "0x11DA45C")]
	public void ShowVersionNumber(bool show)
	{
	}

	[Token(Token = "0x60019A9")]
	[Address(RVA = "0x11E8808", Offset = "0x11E8808", VA = "0x11E8808")]
	private void CalculatePriorityPanel(ActivePanel callPanel, bool show)
	{
	}

	[Token(Token = "0x60019AA")]
	[Address(RVA = "0x11E8864", Offset = "0x11E8864", VA = "0x11E8864")]
	private void RefreshPanelActivation()
	{
	}

	[Token(Token = "0x60019AB")]
	[Address(RVA = "0x11E8944", Offset = "0x11E8944", VA = "0x11E8944")]
	private void ConfirmRegionChange()
	{
	}

	[Token(Token = "0x60019AC")]
	[Address(RVA = "0x11E8A1C", Offset = "0x11E8A1C", VA = "0x11E8A1C")]
	public void OnRegionUp()
	{
	}

	[Token(Token = "0x60019AD")]
	[Address(RVA = "0x11E8CAC", Offset = "0x11E8CAC", VA = "0x11E8CAC")]
	public void OnRegionDown()
	{
	}

	[Token(Token = "0x60019AE")]
	[Address(RVA = "0x11E8AAC", Offset = "0x11E8AAC", VA = "0x11E8AAC")]
	public void OnRegionChange(int value = 0)
	{
	}

	[Token(Token = "0x60019AF")]
	[Address(RVA = "0x11E8D3C", Offset = "0x11E8D3C", VA = "0x11E8D3C")]
	public UI_TopScreen()
	{
	}
}
[Token(Token = "0x200045B")]
public class BoltRemotePlayerCanvas : MonoBehaviour
{
	[Token(Token = "0x40014CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BoltPlayerController m_boltPlayerController;

	[Token(Token = "0x40014CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TMP_Text m_playerNameText;

	[Token(Token = "0x40014D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform m_trackedHeadTransform;

	[Token(Token = "0x40014D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform m_cachedTransform;

	[Token(Token = "0x40014D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform m_parent;

	[Token(Token = "0x60019B3")]
	[Address(RVA = "0x11E8E64", Offset = "0x11E8E64", VA = "0x11E8E64")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019B4")]
	[Address(RVA = "0x11E8EB8", Offset = "0x11E8EB8", VA = "0x11E8EB8")]
	private void Update()
	{
	}

	[Token(Token = "0x60019B5")]
	[Address(RVA = "0x11E8F60", Offset = "0x11E8F60", VA = "0x11E8F60")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60019B6")]
	[Address(RVA = "0x11E9034", Offset = "0x11E9034", VA = "0x11E9034")]
	public BoltRemotePlayerCanvas()
	{
	}
}
[Token(Token = "0x200045C")]
public class MultiplayerDebugBoot : MonoBehaviour
{
	[Token(Token = "0x200045D")]
	public enum BootTypeEnum
	{
		[Token(Token = "0x40014D6")]
		Server,
		[Token(Token = "0x40014D7")]
		JoinAny,
		[Token(Token = "0x40014D8")]
		Client
	}

	[Token(Token = "0x40014D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BootTypeEnum m_bootType;

	[Token(Token = "0x40014D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string m_sceneName;

	[Token(Token = "0x170003E0")]
	public BootTypeEnum BootType
	{
		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x11E903C", Offset = "0x11E903C", VA = "0x11E903C")]
		get
		{
			return default(BootTypeEnum);
		}
	}

	[Token(Token = "0x170003E1")]
	public string SceneName
	{
		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x11E9044", Offset = "0x11E9044", VA = "0x11E9044")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60019B9")]
	[Address(RVA = "0x11E904C", Offset = "0x11E904C", VA = "0x11E904C")]
	private void Start()
	{
	}

	[Token(Token = "0x60019BA")]
	[Address(RVA = "0x11E9124", Offset = "0x11E9124", VA = "0x11E9124")]
	public MultiplayerDebugBoot()
	{
	}
}
[Token(Token = "0x200045E")]
public class NetworkEnemySpawner : MonoBehaviour
{
	[Token(Token = "0x40014D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] m_agentPrefabs;

	[Token(Token = "0x40014DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int m_currentIndex;

	[Token(Token = "0x40014DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_maxIndex;

	[Token(Token = "0x60019BB")]
	[Address(RVA = "0x11E912C", Offset = "0x11E912C", VA = "0x11E912C")]
	private void Start()
	{
	}

	[Token(Token = "0x60019BC")]
	[Address(RVA = "0x11E9150", Offset = "0x11E9150", VA = "0x11E9150")]
	private void Update()
	{
	}

	[Token(Token = "0x60019BD")]
	[Address(RVA = "0x11E91A0", Offset = "0x11E91A0", VA = "0x11E91A0")]
	public void SpawnAgentOnGroundInFrontOfCamera()
	{
	}

	[Token(Token = "0x60019BE")]
	[Address(RVA = "0x11E9548", Offset = "0x11E9548", VA = "0x11E9548")]
	public void SpawnAgent(Transform t)
	{
	}

	[Token(Token = "0x60019BF")]
	[Address(RVA = "0x11E93CC", Offset = "0x11E93CC", VA = "0x11E93CC")]
	public void SpawnAgent(Vector3 pos)
	{
	}

	[Token(Token = "0x60019C0")]
	[Address(RVA = "0x11E9258", Offset = "0x11E9258", VA = "0x11E9258")]
	private bool GetGroundPlanePosition(Ray r, out Vector3 pos)
	{
		return default(bool);
	}

	[Token(Token = "0x60019C1")]
	[Address(RVA = "0x11E9570", Offset = "0x11E9570", VA = "0x11E9570")]
	public NetworkEnemySpawner()
	{
	}
}
[Token(Token = "0x200045F")]
public class NetworkPlayerHealthDisplay : MonoBehaviour
{
	[Token(Token = "0x2000460")]
	[CompilerGenerated]
	private sealed class <WaitForBoltPlayerAttach>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NetworkPlayerHealthDisplay <>4__this;

		[Token(Token = "0x170003E2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60019CA")]
			[Address(RVA = "0x11E9C28", Offset = "0x11E9C28", VA = "0x11E9C28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60019CC")]
			[Address(RVA = "0x11E9C70", Offset = "0x11E9C70", VA = "0x11E9C70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x11E9B10", Offset = "0x11E9B10", VA = "0x11E9B10")]
		[DebuggerHidden]
		public <WaitForBoltPlayerAttach>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x11E9B40", Offset = "0x11E9B40", VA = "0x11E9B40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x11E9B44", Offset = "0x11E9B44", VA = "0x11E9B44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x11E9C30", Offset = "0x11E9C30", VA = "0x11E9C30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private BoltPlayerController m_boltPlayerController;

	[Token(Token = "0x40014DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEngine.UI.Text m_healthText;

	[Token(Token = "0x40014DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image m_healthImage;

	[Token(Token = "0x60019C2")]
	[Address(RVA = "0x11E9578", Offset = "0x11E9578", VA = "0x11E9578")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019C3")]
	[Address(RVA = "0x11E9700", Offset = "0x11E9700", VA = "0x11E9700")]
	private void Update()
	{
	}

	[Token(Token = "0x60019C4")]
	[Address(RVA = "0x11E9824", Offset = "0x11E9824", VA = "0x11E9824")]
	private void OnHealthChanged()
	{
	}

	[Token(Token = "0x60019C5")]
	[Address(RVA = "0x11E968C", Offset = "0x11E968C", VA = "0x11E968C")]
	[IteratorStateMachine(typeof(<WaitForBoltPlayerAttach>d__6))]
	private IEnumerator WaitForBoltPlayerAttach()
	{
		return null;
	}

	[Token(Token = "0x60019C6")]
	[Address(RVA = "0x11E9B38", Offset = "0x11E9B38", VA = "0x11E9B38")]
	public NetworkPlayerHealthDisplay()
	{
	}
}
[Token(Token = "0x2000461")]
public class RemotePlayerSpawner : MonoBehaviour
{
	[Token(Token = "0x40014E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_agentPrefab;

	[Token(Token = "0x40014E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] m_agentSpawns;

	[Token(Token = "0x60019CD")]
	[Address(RVA = "0x11E9C78", Offset = "0x11E9C78", VA = "0x11E9C78")]
	public void Update()
	{
	}

	[Token(Token = "0x60019CE")]
	[Address(RVA = "0x11E9CFC", Offset = "0x11E9CFC", VA = "0x11E9CFC")]
	public void SpawnAgent(Vector3 pos)
	{
	}

	[Token(Token = "0x60019CF")]
	[Address(RVA = "0x11E9DB0", Offset = "0x11E9DB0", VA = "0x11E9DB0")]
	public RemotePlayerSpawner()
	{
	}
}
[Token(Token = "0x2000462")]
public class UI_FacePlayer : MonoBehaviour
{
	[Token(Token = "0x40014E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool xRotationOnly;

	[Token(Token = "0x40014E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform m_cameraTransform;

	[Token(Token = "0x60019D0")]
	[Address(RVA = "0x11E9DB8", Offset = "0x11E9DB8", VA = "0x11E9DB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60019D1")]
	[Address(RVA = "0x11E9DEC", Offset = "0x11E9DEC", VA = "0x11E9DEC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60019D2")]
	[Address(RVA = "0x11E9F28", Offset = "0x11E9F28", VA = "0x11E9F28")]
	public UI_FacePlayer()
	{
	}
}
[Token(Token = "0x2000463")]
public class NetworkedGameObjectSets : EntityEventListener<IGameObjectSetsState>, IGuidComponentData
{
	[Token(Token = "0x2000464")]
	public enum SetHint
	{
		[Token(Token = "0x40014EC")]
		None,
		[Token(Token = "0x40014ED")]
		ObjectiveSelection,
		[Token(Token = "0x40014EE")]
		ObjectivePermutation
	}

	[Serializable]
	[Token(Token = "0x2000465")]
	public class GameObjectSet
	{
		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string identifier;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The set hint is used for setting the test mask from Game Settings. See GameSettings.ObjectiveSelection and GameSettings.ObjectivePermutation.")]
		public SetHint setHint;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> gameObjects;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Sets to test, overrides any random selections, used in editor.")]
		public int testMask;

		[Token(Token = "0x170003E4")]
		public int defaultMask
		{
			[Token(Token = "0x60019EE")]
			[Address(RVA = "0x11EB654", Offset = "0x11EB654", VA = "0x11EB654")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60019EF")]
			[Address(RVA = "0x11EB65C", Offset = "0x11EB65C", VA = "0x11EB65C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003E5")]
		public int currentMask
		{
			[Token(Token = "0x60019F0")]
			[Address(RVA = "0x11EB664", Offset = "0x11EB664", VA = "0x11EB664")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60019F1")]
			[Address(RVA = "0x11EB66C", Offset = "0x11EB66C", VA = "0x11EB66C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60019F2")]
		[Address(RVA = "0x11EB674", Offset = "0x11EB674", VA = "0x11EB674")]
		public GameObjectSet()
		{
		}
	}

	[Token(Token = "0x40014E6")]
	private const int c_maxSets = 16;

	[Token(Token = "0x40014E7")]
	private const int c_maxGameObjectsPerSet = 8;

	[Token(Token = "0x40014E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<GameObjectSet> m_sets;

	[Token(Token = "0x40014E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GuidComponent m_guidComponent;

	[Token(Token = "0x40014EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BoltEntity m_entity;

	[Token(Token = "0x60019D3")]
	[Address(RVA = "0x11E9F30", Offset = "0x11E9F30", VA = "0x11E9F30")]
	private void Awake()
	{
	}

	[Token(Token = "0x60019D4")]
	[Address(RVA = "0x11EA154", Offset = "0x11EA154", VA = "0x11EA154")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60019D5")]
	[Address(RVA = "0x11EA24C", Offset = "0x11EA24C", VA = "0x11EA24C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60019D6")]
	[Address(RVA = "0x11EA344", Offset = "0x11EA344", VA = "0x11EA344")]
	private void Start()
	{
	}

	[Token(Token = "0x60019D7")]
	[Address(RVA = "0x11EA534", Offset = "0x11EA534", VA = "0x11EA534")]
	private void HandleLevelReset()
	{
	}

	[Token(Token = "0x60019D8")]
	[Address(RVA = "0x11EA698", Offset = "0x11EA698", VA = "0x11EA698", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x60019D9")]
	[Address(RVA = "0x11E9F90", Offset = "0x11E9F90", VA = "0x11E9F90")]
	private void GenerateDefaultMask()
	{
	}

	[Token(Token = "0x60019DA")]
	[Address(RVA = "0x11EAB1C", Offset = "0x11EAB1C", VA = "0x11EAB1C", Slot = "19")]
	public override void Detached()
	{
	}

	[Token(Token = "0x60019DB")]
	[Address(RVA = "0x11EAB24", Offset = "0x11EAB24", VA = "0x11EAB24")]
	private int NameToIndex(string name)
	{
		return default(int);
	}

	[Token(Token = "0x60019DC")]
	[Address(RVA = "0x11EAC14", Offset = "0x11EAC14", VA = "0x11EAC14")]
	public void EnableSet(string name)
	{
	}

	[Token(Token = "0x60019DD")]
	[Address(RVA = "0x11EAC48", Offset = "0x11EAC48", VA = "0x11EAC48")]
	public void ExclusivelyEnableSet(string name)
	{
	}

	[Token(Token = "0x60019DE")]
	[Address(RVA = "0x11EAD08", Offset = "0x11EAD08", VA = "0x11EAD08")]
	public void DisableSet(string name)
	{
	}

	[Token(Token = "0x60019DF")]
	[Address(RVA = "0x11EAD3C", Offset = "0x11EAD3C", VA = "0x11EAD3C")]
	public void EnableRandomInSet(string name)
	{
	}

	[Token(Token = "0x60019E0")]
	[Address(RVA = "0x11EADF8", Offset = "0x11EADF8", VA = "0x11EADF8")]
	public void EnableNthInSet(string name, int no)
	{
	}

	[Token(Token = "0x60019E1")]
	[Address(RVA = "0x11EAE44", Offset = "0x11EAE44", VA = "0x11EAE44")]
	public void ToggleSet(string name)
	{
	}

	[Token(Token = "0x60019E2")]
	[Address(RVA = "0x11EAC40", Offset = "0x11EAC40", VA = "0x11EAC40")]
	private void EnableSet(int index)
	{
	}

	[Token(Token = "0x60019E3")]
	[Address(RVA = "0x11EAC70", Offset = "0x11EAC70", VA = "0x11EAC70")]
	private void ExclusivelyEnableSet(int index)
	{
	}

	[Token(Token = "0x60019E4")]
	[Address(RVA = "0x11EAD34", Offset = "0x11EAD34", VA = "0x11EAD34")]
	private void DisableSet(int index)
	{
	}

	[Token(Token = "0x60019E5")]
	[Address(RVA = "0x11EAD64", Offset = "0x11EAD64", VA = "0x11EAD64")]
	private void EnableRandomInSet(int index)
	{
	}

	[Token(Token = "0x60019E6")]
	[Address(RVA = "0x11EAE38", Offset = "0x11EAE38", VA = "0x11EAE38")]
	private void EnableNthInSet(int index, int no)
	{
	}

	[Token(Token = "0x60019E7")]
	[Address(RVA = "0x11EAE8C", Offset = "0x11EAE8C", VA = "0x11EAE8C")]
	private void ToggleSet(int index)
	{
	}

	[Token(Token = "0x60019E8")]
	[Address(RVA = "0x11EB118", Offset = "0x11EB118", VA = "0x11EB118")]
	private int GetMask(int setIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60019E9")]
	[Address(RVA = "0x11EAEB8", Offset = "0x11EAEB8", VA = "0x11EAEB8")]
	private void SetMask(int setIndex, int mask)
	{
	}

	[Token(Token = "0x60019EA")]
	[Address(RVA = "0x11EB2AC", Offset = "0x11EB2AC", VA = "0x11EB2AC")]
	private void OnSetChanged(IState state, string path, ArrayIndices indices)
	{
	}

	[Token(Token = "0x60019EB")]
	[Address(RVA = "0x11EA96C", Offset = "0x11EA96C", VA = "0x11EA96C")]
	private void UpdateObjects(int mask, int index)
	{
	}

	[Token(Token = "0x60019EC")]
	[Address(RVA = "0x11EB3B4", Offset = "0x11EB3B4", VA = "0x11EB3B4", Slot = "147")]
	private void IGuidComponentData.ProcessEvent(GuidComponentDataEvent evnt)
	{
	}

	[Token(Token = "0x60019ED")]
	[Address(RVA = "0x11EB60C", Offset = "0x11EB60C", VA = "0x11EB60C")]
	public NetworkedGameObjectSets()
	{
	}
}
[Token(Token = "0x2000467")]
public abstract class Objective : CachedMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000468")]
	public class ItemToSpawn
	{
		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VrItem m_item;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform m_locationToSpawn;

		[NonSerialized]
		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Vector3 position;

		[NonSerialized]
		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public Quaternion rotation;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_locationIsValid;

		[NonSerialized]
		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Objective owner;

		[Token(Token = "0x170003F7")]
		public bool isValid
		{
			[Token(Token = "0x6001A23")]
			[Address(RVA = "0x11ECED4", Offset = "0x11ECED4", VA = "0x11ECED4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003F8")]
		public VrItem Item
		{
			[Token(Token = "0x6001A24")]
			[Address(RVA = "0x11ED514", Offset = "0x11ED514", VA = "0x11ED514")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x11EBB9C", Offset = "0x11EBB9C", VA = "0x11EBB9C")]
		public void CacheLocation(Objective _owner)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x11ED51C", Offset = "0x11ED51C", VA = "0x11ED51C")]
		public ItemToSpawn()
		{
		}
	}

	[Token(Token = "0x40014F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_title;

	[Token(Token = "0x40014F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private string m_textOnStart;

	[Token(Token = "0x40014F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private string m_textOnComplete;

	[Token(Token = "0x40014F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool m_displayedAsDiagnostic;

	[Token(Token = "0x40014FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[SerializeField]
	protected bool m_showLocationOnWatch;

	[Token(Token = "0x40014FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Location to highlight")]
	[Space(15f)]
	private Transform m_locationToHighlight;

	[Token(Token = "0x40014FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float m_radiusToHighlight;

	[Token(Token = "0x40014FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Space(15f)]
	[SerializeField]
	private bool m_canRunInParallel;

	[Token(Token = "0x40014FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private int m_objectivePoint;

	[Token(Token = "0x40014FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private bool m_returnToPool;

	[Token(Token = "0x4001500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[SerializeField]
	private bool m_enableStartOnReturnToPool;

	[Token(Token = "0x4001501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<ItemToSpawn> s_itemSpawnQueue;

	[Token(Token = "0x4001502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<ItemToSpawn> m_itemToSpawn1P;

	[Token(Token = "0x4001503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private List<ItemToSpawn> m_itemToSpawn2P;

	[Token(Token = "0x4001504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[UnityEngine.Tooltip("List of game events to invoke when the objective completes.")]
	[SerializeField]
	private List<GameEvent> m_completionsGameEvents;

	[Token(Token = "0x4001505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Color m_debug_color;

	[Token(Token = "0x4001506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected ObjectiveControllerViewModel m_controllerViewModel;

	[Token(Token = "0x4001507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected ObjectiveViewModel m_viewModel;

	[Token(Token = "0x4001508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool m_isStarted;

	[Token(Token = "0x4001509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool m_isCompleted;

	[Token(Token = "0x400150A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private WaveSpecifier m_waveSpecifier;

	[Token(Token = "0x400150B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private List<Identifier> m_waveGroupId;

	[Token(Token = "0x400150C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private List<GameObject> m_objectsToActivateAtStart;

	[Token(Token = "0x400150D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[UnityEngine.Tooltip("if checked, the objective won't beep when completing or activating compass")]
	[SerializeField]
	private bool m_silent;

	[Token(Token = "0x400150E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private ObjectiveDifficultyModifierTag m_difficultyTag;

	[Token(Token = "0x400150F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private GameObject m_debugSphere;

	[Token(Token = "0x4001511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private ObjectiveStage m_objectiveStage;

	[Token(Token = "0x4001512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected GameViewModel m_gameViewModel;

	[Token(Token = "0x170003E6")]
	public bool ReturnToPool
	{
		[Token(Token = "0x60019F5")]
		[Address(RVA = "0x11EB6A0", Offset = "0x11EB6A0", VA = "0x11EB6A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E7")]
	public bool EnableStartOnReturnToPool
	{
		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x11EB6A8", Offset = "0x11EB6A8", VA = "0x11EB6A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003E8")]
	public List<ItemToSpawn> itemsToSpawn1P
	{
		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x11EB7C4", Offset = "0x11EB7C4", VA = "0x11EB7C4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003E9")]
	public List<ItemToSpawn> itemsToSpawn2P
	{
		[Token(Token = "0x60019F9")]
		[Address(RVA = "0x11EB7CC", Offset = "0x11EB7CC", VA = "0x11EB7CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003EA")]
	public bool isStarted
	{
		[Token(Token = "0x60019FA")]
		[Address(RVA = "0x11EB7D4", Offset = "0x11EB7D4", VA = "0x11EB7D4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60019FB")]
		[Address(RVA = "0x11EB7DC", Offset = "0x11EB7DC", VA = "0x11EB7DC")]
		set
		{
		}
	}

	[Token(Token = "0x170003EB")]
	public bool isCompleted
	{
		[Token(Token = "0x60019FC")]
		[Address(RVA = "0x11EB8DC", Offset = "0x11EB8DC", VA = "0x11EB8DC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60019FD")]
		[Address(RVA = "0x11EB8E4", Offset = "0x11EB8E4", VA = "0x11EB8E4")]
		set
		{
		}
	}

	[Token(Token = "0x170003EC")]
	public bool isBlocking
	{
		[Token(Token = "0x60019FE")]
		[Address(RVA = "0x11EB8F8", Offset = "0x11EB8F8", VA = "0x11EB8F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003ED")]
	public ObjectiveControllerViewModel ViewModel
	{
		[Token(Token = "0x60019FF")]
		[Address(RVA = "0x11EB918", Offset = "0x11EB918", VA = "0x11EB918")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003EE")]
	public int Points
	{
		[Token(Token = "0x6001A00")]
		[Address(RVA = "0x11EB920", Offset = "0x11EB920", VA = "0x11EB920")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170003EF")]
	public WaveSpecifier WaveSpecifier
	{
		[Token(Token = "0x6001A01")]
		[Address(RVA = "0x11EB928", Offset = "0x11EB928", VA = "0x11EB928")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F0")]
	public ObjectiveViewModel viewModel
	{
		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x11EB930", Offset = "0x11EB930", VA = "0x11EB930")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x11EB938", Offset = "0x11EB938", VA = "0x11EB938")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170003F1")]
	public ObjectiveStage Stage
	{
		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x11EB940", Offset = "0x11EB940", VA = "0x11EB940")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x11EB948", Offset = "0x11EB948", VA = "0x11EB948")]
		private set
		{
		}
	}

	[Token(Token = "0x170003F2")]
	public string title
	{
		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x11EB950", Offset = "0x11EB950", VA = "0x11EB950")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F3")]
	public string textOnStart
	{
		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x11EB958", Offset = "0x11EB958", VA = "0x11EB958")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F4")]
	public string textOnComplete
	{
		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x11EB960", Offset = "0x11EB960", VA = "0x11EB960")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003F5")]
	public virtual bool showOnWatch
	{
		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x11EB968", Offset = "0x11EB968", VA = "0x11EB968", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x11EB970", Offset = "0x11EB970", VA = "0x11EB970", Slot = "5")]
		protected set
		{
		}
	}

	[Token(Token = "0x170003F6")]
	public bool IsSilent
	{
		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x11EB97C", Offset = "0x11EB97C", VA = "0x11EB97C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60019F7")]
	[Address(RVA = "0x11EB6B0", Offset = "0x11EB6B0", VA = "0x11EB6B0")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitializePlayerLoop()
	{
	}

	[Token(Token = "0x6001A0C")]
	[Address(RVA = "0x11EB984", Offset = "0x11EB984", VA = "0x11EB984")]
	[Conditional("LOG_OBJECTIVE")]
	public static void LogDebug(string log)
	{
	}

	[Token(Token = "0x6001A0D")]
	[Address(RVA = "0x11EB988", Offset = "0x11EB988", VA = "0x11EB988")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A0E")]
	[Address(RVA = "0x11EBCA8", Offset = "0x11EBCA8", VA = "0x11EBCA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A0F")]
	[Address(RVA = "0x11EBD00", Offset = "0x11EBD00", VA = "0x11EBD00", Slot = "6")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001A10")]
	[Address(RVA = "0x11EBD04", Offset = "0x11EBD04", VA = "0x11EBD04", Slot = "7")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x6001A11")]
	[Address(RVA = "0x11EBD08", Offset = "0x11EBD08", VA = "0x11EBD08")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A12")]
	[Address(RVA = "0x11EBE0C", Offset = "0x11EBE0C", VA = "0x11EBE0C", Slot = "8")]
	public virtual void StartObjective()
	{
	}

	[Token(Token = "0x6001A13")]
	[Address(RVA = "0x11EB7E8", Offset = "0x11EB7E8", VA = "0x11EB7E8")]
	private void OnObjectiveStateChangedToStarted()
	{
	}

	[Token(Token = "0x6001A14")]
	[Address(RVA = "0x11EC0C0", Offset = "0x11EC0C0", VA = "0x11EC0C0")]
	private void DisplayObjectives()
	{
	}

	[Token(Token = "0x6001A15")]
	[Address(RVA = "0x11EC19C", Offset = "0x11EC19C", VA = "0x11EC19C", Slot = "9")]
	public virtual void Reset(ObjectiveStage owner)
	{
	}

	[Token(Token = "0x6001A16")]
	[Address(RVA = "0x11EC1D0", Offset = "0x11EC1D0", VA = "0x11EC1D0", Slot = "10")]
	public virtual void UpdateObjective()
	{
	}

	[Token(Token = "0x6001A17")]
	[Address(RVA = "0x11EC1D4", Offset = "0x11EC1D4", VA = "0x11EC1D4", Slot = "11")]
	internal virtual void CompletedObjective()
	{
	}

	[Token(Token = "0x6001A18")]
	[Address(RVA = "0x11EC6B8", Offset = "0x11EC6B8", VA = "0x11EC6B8")]
	public void SetStartState(bool state)
	{
	}

	[Token(Token = "0x6001A19")]
	[Address(RVA = "0x11EC6C4", Offset = "0x11EC6C4", VA = "0x11EC6C4", Slot = "12")]
	protected virtual void OnObjectiveStateChangedToCompleted()
	{
	}

	[Token(Token = "0x6001A1A")]
	[Address(RVA = "0x11EC624", Offset = "0x11EC624", VA = "0x11EC624")]
	private void SpawnItems(int playerCount)
	{
	}

	[Token(Token = "0x6001A1B")]
	[Address(RVA = "0x11ECAE0", Offset = "0x11ECAE0", VA = "0x11ECAE0")]
	private static void ProcessSpawnItemsQueue()
	{
	}

	[Token(Token = "0x6001A1C")]
	[Address(RVA = "0x11EBD0C", Offset = "0x11EBD0C", VA = "0x11EBD0C")]
	private static void RemoveSpawnItemsFromQueue(Objective owner)
	{
	}

	[Token(Token = "0x6001A1D")]
	[Address(RVA = "0x11ECA50", Offset = "0x11ECA50", VA = "0x11ECA50")]
	internal void DestroyDebugSphere()
	{
	}

	[Token(Token = "0x6001A1E")]
	[Address(RVA = "0x11EBE98", Offset = "0x11EBE98", VA = "0x11EBE98")]
	private void HighlightLocation()
	{
	}

	[Token(Token = "0x6001A1F")]
	[Address(RVA = "0x11ECF50", Offset = "0x11ECF50", VA = "0x11ECF50")]
	public void ForceToCompleteManually()
	{
	}

	[Token(Token = "0x6001A20")]
	[Address(RVA = "0x11ECFC4", Offset = "0x11ECFC4", VA = "0x11ECFC4")]
	protected void GetNearestObject(ref float minSquareDist, ref Vector3 positionToDefend, Vector3 targetPosition, Vector3 feetPos)
	{
	}

	[Token(Token = "0x6001A21")]
	[Address(RVA = "0x11ED000", Offset = "0x11ED000", VA = "0x11ED000")]
	protected void UpdateWatchToClosestTarget(List<DestructibleTarget> _targetsList)
	{
	}

	[Token(Token = "0x6001A22")]
	[Address(RVA = "0x11ED350", Offset = "0x11ED350", VA = "0x11ED350")]
	protected Objective()
	{
	}
}
[Token(Token = "0x200046A")]
public class ObjectiveAddToStage : Objective
{
	[Token(Token = "0x400151A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private ObjectiveStage m_stageToUpdate;

	[Token(Token = "0x400151B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private int m_elementIndex;

	[Token(Token = "0x400151C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private Objective m_newObjective;

	[Token(Token = "0x6001A29")]
	[Address(RVA = "0x11ED594", Offset = "0x11ED594", VA = "0x11ED594", Slot = "10")]
	public override void UpdateObjective()
	{
	}

	[Token(Token = "0x6001A2A")]
	[Address(RVA = "0x11ED5E4", Offset = "0x11ED5E4", VA = "0x11ED5E4")]
	public ObjectiveAddToStage()
	{
	}
}
[Token(Token = "0x200046B")]
public class ObjectiveController : CachedMonoBehaviour
{
	[Token(Token = "0x400151D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private List<ObjectiveStage> m_stages;

	[Token(Token = "0x400151E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool m_alternate2PList;

	[Token(Token = "0x400151F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private List<ObjectiveStage> m_2PStages;

	[Token(Token = "0x4001520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool m_alternateDemoList;

	[Token(Token = "0x4001521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<ObjectiveStage> m_demoStages;

	[Token(Token = "0x4001522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<ObjectiveStage> m_2PDemoStages;

	[Token(Token = "0x4001524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool m_allObjectivesAttached;

	[Token(Token = "0x4001525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ObjectiveControllerViewModel m_controllerViewModel;

	[Token(Token = "0x4001526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private LevelLoadManager m_levelLoadManager;

	[Token(Token = "0x4001527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_isReady;

	[Token(Token = "0x4001528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool m_isCompleted;

	[Token(Token = "0x170003F9")]
	public bool Alternate2PList
	{
		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x11ED5E8", Offset = "0x11ED5E8", VA = "0x11ED5E8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x11ED5F0", Offset = "0x11ED5F0", VA = "0x11ED5F0")]
		set
		{
		}
	}

	[Token(Token = "0x170003FA")]
	public bool AlternateDemoList
	{
		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x11ED5FC", Offset = "0x11ED5FC", VA = "0x11ED5FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x11ED604", Offset = "0x11ED604", VA = "0x11ED604")]
		set
		{
		}
	}

	[Token(Token = "0x170003FB")]
	public List<ObjectiveStage> Stages
	{
		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x11ED610", Offset = "0x11ED610", VA = "0x11ED610")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003FC")]
	public bool IsRunning
	{
		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x11ED618", Offset = "0x11ED618", VA = "0x11ED618")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x11ED620", Offset = "0x11ED620", VA = "0x11ED620")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001A32")]
	[Address(RVA = "0x11ED62C", Offset = "0x11ED62C", VA = "0x11ED62C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A33")]
	[Address(RVA = "0x11ED6E8", Offset = "0x11ED6E8", VA = "0x11ED6E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A34")]
	[Address(RVA = "0x11EDBFC", Offset = "0x11EDBFC", VA = "0x11EDBFC")]
	private bool isReady()
	{
		return default(bool);
	}

	[Token(Token = "0x6001A35")]
	[Address(RVA = "0x11EDEFC", Offset = "0x11EDEFC", VA = "0x11EDEFC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A36")]
	[Address(RVA = "0x11EDA30", Offset = "0x11EDA30", VA = "0x11EDA30")]
	private bool AreAllStagesAndObjectivesAttached()
	{
		return default(bool);
	}

	[Token(Token = "0x6001A37")]
	[Address(RVA = "0x11EE07C", Offset = "0x11EE07C", VA = "0x11EE07C")]
	public bool IsAnyStageActivated()
	{
		return default(bool);
	}

	[Token(Token = "0x6001A38")]
	[Address(RVA = "0x11EE118", Offset = "0x11EE118", VA = "0x11EE118")]
	public ObjectiveController()
	{
	}
}
[Token(Token = "0x200046C")]
public class ObjectiveDebugger : MonoBehaviour
{
	[Token(Token = "0x4001529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_generalDebugObjectiveText;

	[Token(Token = "0x400152A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_stageText;

	[Token(Token = "0x400152B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_stagePoints;

	[Token(Token = "0x400152C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_stageTime;

	[Token(Token = "0x400152D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Canvas m_canvas;

	[Token(Token = "0x400152E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_showInHeadset;

	[Token(Token = "0x400152F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_lastTime;

	[Token(Token = "0x6001A39")]
	[Address(RVA = "0x11EF220", Offset = "0x11EF220", VA = "0x11EF220")]
	private void Start()
	{
	}

	[Token(Token = "0x6001A3A")]
	[Address(RVA = "0x11EF2CC", Offset = "0x11EF2CC", VA = "0x11EF2CC")]
	public void ShowObjectivesMsg(string msg, bool resetMsg)
	{
	}

	[Token(Token = "0x6001A3B")]
	[Address(RVA = "0x11EF33C", Offset = "0x11EF33C", VA = "0x11EF33C")]
	public void ShowStageMsg(string msg)
	{
	}

	[Token(Token = "0x6001A3C")]
	[Address(RVA = "0x11EF3DC", Offset = "0x11EF3DC", VA = "0x11EF3DC")]
	internal void ShowStagePoints(int stagePoints, int requiredPointsToComplete)
	{
	}

	[Token(Token = "0x6001A3D")]
	[Address(RVA = "0x11EF4B8", Offset = "0x11EF4B8", VA = "0x11EF4B8")]
	internal void ShowStageTime(float time)
	{
	}

	[Token(Token = "0x6001A3E")]
	[Address(RVA = "0x11EF5D4", Offset = "0x11EF5D4", VA = "0x11EF5D4")]
	public ObjectiveDebugger()
	{
	}
}
[Serializable]
[Token(Token = "0x200046D")]
public class DestructibleTarget
{
	[Token(Token = "0x4001530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public HealthStatus m_target;

	[Token(Token = "0x4001531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameEvent m_event;

	[Token(Token = "0x6001A3F")]
	[Address(RVA = "0x11EF5E4", Offset = "0x11EF5E4", VA = "0x11EF5E4")]
	public DestructibleTarget()
	{
	}
}
[Token(Token = "0x200046E")]
public class ObjectiveDefendObject : Objective
{
	[Token(Token = "0x4001532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private List<DestructibleTarget> m_targetToDefend;

	[Token(Token = "0x4001533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private List<GameEvent> m_deathEvent;

	[Token(Token = "0x4001534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private float m_timeToDefend;

	[Token(Token = "0x4001535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private GameEvent m_failedDefenseEvent;

	[Token(Token = "0x4001536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private List<DestructibleTarget> m_targetToDefendInternalList;

	[Token(Token = "0x4001537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<GameEvent> m_deathEventInternalList;

	[Token(Token = "0x4001538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float m_startedTime;

	[Token(Token = "0x4001539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private int m_totalObjects;

	[Token(Token = "0x170003FD")]
	public float RemaingTime
	{
		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x11EF5EC", Offset = "0x11EF5EC", VA = "0x11EF5EC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001A41")]
	[Address(RVA = "0x11EF69C", Offset = "0x11EF69C", VA = "0x11EF69C", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A42")]
	[Address(RVA = "0x11EFD5C", Offset = "0x11EFD5C", VA = "0x11EFD5C")]
	public void OverrideDefendTime(float defendTime)
	{
	}

	[Token(Token = "0x6001A43")]
	[Address(RVA = "0x11EFD70", Offset = "0x11EFD70", VA = "0x11EFD70", Slot = "11")]
	internal override void CompletedObjective()
	{
	}

	[Token(Token = "0x6001A44")]
	[Address(RVA = "0x11F009C", Offset = "0x11F009C", VA = "0x11F009C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A45")]
	[Address(RVA = "0x11F03BC", Offset = "0x11F03BC", VA = "0x11F03BC")]
	protected void OnHealthDecreased(HealthStatusInfo healthStatus)
	{
	}

	[Token(Token = "0x6001A46")]
	[Address(RVA = "0x11F0578", Offset = "0x11F0578", VA = "0x11F0578")]
	protected void OnDeath(HealthStatusInfo healthStatus)
	{
	}

	[Token(Token = "0x6001A47")]
	[Address(RVA = "0x11F0A58", Offset = "0x11F0A58", VA = "0x11F0A58")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A48")]
	[Address(RVA = "0x11F0D58", Offset = "0x11F0D58", VA = "0x11F0D58")]
	public ObjectiveDefendObject()
	{
	}
}
[Token(Token = "0x2000470")]
public class ObjectiveDestroyObject : Objective
{
	[Token(Token = "0x400153B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private List<DestructibleTarget> m_targetsToAttack;

	[Token(Token = "0x400153C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private List<GameEvent> m_deathEvent;

	[Token(Token = "0x400153D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private float m_timeToDestroy;

	[Token(Token = "0x400153E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private GameEvent m_failedAttackEvent;

	[Token(Token = "0x400153F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float m_startedTime;

	[Token(Token = "0x4001540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private int m_destroyedObjectsCount;

	[Token(Token = "0x4001541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<DestructibleTarget> m_targetsToAttackInternalList;

	[Token(Token = "0x4001542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private List<GameEvent> m_deathEventInternalList;

	[Token(Token = "0x170003FE")]
	public float RemaingTime
	{
		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x11F0DE8", Offset = "0x11F0DE8", VA = "0x11F0DE8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001A4C")]
	[Address(RVA = "0x11F0E98", Offset = "0x11F0E98", VA = "0x11F0E98", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A4D")]
	[Address(RVA = "0x11F155C", Offset = "0x11F155C", VA = "0x11F155C")]
	public void OverrideTimeToDestroy(float timeToDestroy)
	{
	}

	[Token(Token = "0x6001A4E")]
	[Address(RVA = "0x11F1570", Offset = "0x11F1570", VA = "0x11F1570")]
	protected void OnHealthDecreased(HealthStatusInfo healthStatus)
	{
	}

	[Token(Token = "0x6001A4F")]
	[Address(RVA = "0x11F1574", Offset = "0x11F1574", VA = "0x11F1574")]
	protected void OnDeath(HealthStatusInfo healthStatus)
	{
	}

	[Token(Token = "0x6001A50")]
	[Address(RVA = "0x11F1954", Offset = "0x11F1954", VA = "0x11F1954")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A51")]
	[Address(RVA = "0x11F1C90", Offset = "0x11F1C90", VA = "0x11F1C90", Slot = "11")]
	internal override void CompletedObjective()
	{
	}

	[Token(Token = "0x6001A52")]
	[Address(RVA = "0x11F1FBC", Offset = "0x11F1FBC", VA = "0x11F1FBC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A53")]
	[Address(RVA = "0x11F22DC", Offset = "0x11F22DC", VA = "0x11F22DC", Slot = "9")]
	public override void Reset(ObjectiveStage owner)
	{
	}

	[Token(Token = "0x6001A54")]
	[Address(RVA = "0x11F2610", Offset = "0x11F2610", VA = "0x11F2610")]
	public ObjectiveDestroyObject()
	{
	}
}
[Token(Token = "0x2000472")]
public class ObjectiveDifficultyModifierTag : MonoBehaviour
{
	[Token(Token = "0x2000473")]
	private enum ObjectiveType
	{
		[Token(Token = "0x4001546")]
		None,
		[Token(Token = "0x4001547")]
		FirstWaveStart,
		[Token(Token = "0x4001548")]
		EasyPathSpawnsTimer,
		[Token(Token = "0x4001549")]
		KillAllEnemiesObjectiveKillCount,
		[Token(Token = "0x400154A")]
		KingOfTheHillObjectiveTimerGoal,
		[Token(Token = "0x400154B")]
		DefendObjectiveTimer,
		[Token(Token = "0x400154C")]
		PressAllButtonsObjectiveTimer,
		[Token(Token = "0x400154D")]
		DestroyObjectsObjectiveTimer
	}

	[Token(Token = "0x4001544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ObjectiveType m_objectiveType;

	[Token(Token = "0x6001A57")]
	[Address(RVA = "0x11F26A0", Offset = "0x11F26A0", VA = "0x11F26A0")]
	public void Init(Objective objective)
	{
	}

	[Token(Token = "0x6001A58")]
	[Address(RVA = "0x11F2BC4", Offset = "0x11F2BC4", VA = "0x11F2BC4")]
	public ObjectiveDifficultyModifierTag()
	{
	}
}
[Token(Token = "0x2000474")]
public class ObjectiveDropToLocation : Objective
{
	[Token(Token = "0x400154E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Collider m_collider;

	[Token(Token = "0x400154F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private GuidReference m_itemToDrop;

	[Token(Token = "0x4001550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private WorldInteractionColliderMarkup m_worldInterCollider;

	[Token(Token = "0x170003FF")]
	public WorldInteractionColliderMarkup ItemToDrop
	{
		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x11F2BCC", Offset = "0x11F2BCC", VA = "0x11F2BCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A5A")]
	[Address(RVA = "0x11F2BD4", Offset = "0x11F2BD4", VA = "0x11F2BD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A5B")]
	[Address(RVA = "0x11F2C60", Offset = "0x11F2C60", VA = "0x11F2C60")]
	private void ClearReference()
	{
	}

	[Token(Token = "0x6001A5C")]
	[Address(RVA = "0x11F2C74", Offset = "0x11F2C74", VA = "0x11F2C74", Slot = "6")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6001A5D")]
	[Address(RVA = "0x11F2E84", Offset = "0x11F2E84", VA = "0x11F2E84", Slot = "7")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001A5E")]
	[Address(RVA = "0x11F2EB0", Offset = "0x11F2EB0", VA = "0x11F2EB0", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A5F")]
	[Address(RVA = "0x11F2CF8", Offset = "0x11F2CF8", VA = "0x11F2CF8")]
	private void SetupCrossSceneReference()
	{
	}

	[Token(Token = "0x6001A60")]
	[Address(RVA = "0x11F31F0", Offset = "0x11F31F0", VA = "0x11F31F0", Slot = "10")]
	public override void UpdateObjective()
	{
	}

	[Token(Token = "0x6001A61")]
	[Address(RVA = "0x11F320C", Offset = "0x11F320C", VA = "0x11F320C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001A62")]
	[Address(RVA = "0x11F3500", Offset = "0x11F3500", VA = "0x11F3500")]
	public ObjectiveDropToLocation()
	{
	}
}
[Token(Token = "0x2000475")]
[RequireComponent(typeof(MultiplayerZone))]
[RequireComponent(typeof(Collider))]
public class ObjectiveExtraction : Objective
{
	[Token(Token = "0x4001551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private PlayersInZone m_playersStates;

	[Token(Token = "0x4001552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private MultiplayerZone m_extractionZone;

	[Token(Token = "0x4001553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private GameEvent m_noneInZoneEvent;

	[Token(Token = "0x4001554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private GameEvent m_1PInZoneEvent;

	[Token(Token = "0x4001555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private GameEvent m_2PInZoneEvent;

	[Token(Token = "0x4001556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private GameEvent m_onlyOneInZoneEvent;

	[Token(Token = "0x4001557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private GameEvent m_needMorePlayersToEnter;

	[Token(Token = "0x6001A63")]
	[Address(RVA = "0x11F3574", Offset = "0x11F3574", VA = "0x11F3574", Slot = "7")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001A64")]
	[Address(RVA = "0x11F3578", Offset = "0x11F3578", VA = "0x11F3578")]
	private void UnhookActions()
	{
	}

	[Token(Token = "0x6001A65")]
	[Address(RVA = "0x11F3900", Offset = "0x11F3900", VA = "0x11F3900", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A66")]
	[Address(RVA = "0x11F3CA8", Offset = "0x11F3CA8", VA = "0x11F3CA8")]
	private void NeedMorePlayerToEnter()
	{
	}

	[Token(Token = "0x6001A67")]
	[Address(RVA = "0x11F3CBC", Offset = "0x11F3CBC", VA = "0x11F3CBC", Slot = "10")]
	public override void UpdateObjective()
	{
	}

	[Token(Token = "0x6001A68")]
	[Address(RVA = "0x11F3F60", Offset = "0x11F3F60", VA = "0x11F3F60")]
	private void OnChopperLeft()
	{
	}

	[Token(Token = "0x6001A69")]
	[Address(RVA = "0x11F4288", Offset = "0x11F4288", VA = "0x11F4288")]
	private void OnEnterZone(GameObject obj)
	{
	}

	[Token(Token = "0x6001A6A")]
	[Address(RVA = "0x11F433C", Offset = "0x11F433C", VA = "0x11F433C")]
	private void OnExitZone(GameObject obj)
	{
	}

	[Token(Token = "0x6001A6B")]
	[Address(RVA = "0x11F435C", Offset = "0x11F435C", VA = "0x11F435C")]
	public ObjectiveExtraction()
	{
	}
}
[Token(Token = "0x2000476")]
public class ObjectiveHitButton : Objective
{
	[Token(Token = "0x4001558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	[UnityEngine.Tooltip("Event of qualifying buttons to listen for.")]
	[Header("Buttons Objective")]
	private GameEvent m_buttonEventToListenFor;

	[Token(Token = "0x4001559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[UnityEngine.Tooltip("Number of buttons that have to be hit to complete the objective.")]
	[SerializeField]
	private int m_numButtonsToHit;

	[Token(Token = "0x400155A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[UnityEngine.Tooltip("Root game object of all possible buttons. Only thos left enabled will be considered.")]
	[SerializeField]
	private GameObject m_buttonsRootGameObject;

	[Token(Token = "0x400155B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	[UnityEngine.Tooltip("Events to trigger for each button hit in order.")]
	private List<GameEvent> m_hitEvent;

	[Token(Token = "0x400155C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private float m_timeToHit;

	[Token(Token = "0x400155D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private GameEvent m_failedHitEvent;

	[Token(Token = "0x400155E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float m_startedTime;

	[Token(Token = "0x400155F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private bool m_buttonListenersAdded;

	[Token(Token = "0x4001560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private HashSet<MechanismButton> m_buttonsHit;

	[Token(Token = "0x4001561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private HashSet<MechanismButton> m_allButtons;

	[Token(Token = "0x17000400")]
	public float RemaingTime
	{
		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0x11F4364", Offset = "0x11F4364", VA = "0x11F4364")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001A6D")]
	[Address(RVA = "0x11F4414", Offset = "0x11F4414", VA = "0x11F4414", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A6E")]
	[Address(RVA = "0x11F2BB0", Offset = "0x11F2BB0", VA = "0x11F2BB0")]
	public void OverrideTimeToHit(float timeToHit)
	{
	}

	[Token(Token = "0x6001A6F")]
	[Address(RVA = "0x11F4980", Offset = "0x11F4980", VA = "0x11F4980")]
	private void Update()
	{
	}

	[Token(Token = "0x6001A70")]
	[Address(RVA = "0x11F4FF8", Offset = "0x11F4FF8", VA = "0x11F4FF8", Slot = "11")]
	internal override void CompletedObjective()
	{
	}

	[Token(Token = "0x6001A71")]
	[Address(RVA = "0x11F50EC", Offset = "0x11F50EC", VA = "0x11F50EC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A72")]
	[Address(RVA = "0x11F47DC", Offset = "0x11F47DC", VA = "0x11F47DC")]
	private void AddButtonListeners()
	{
	}

	[Token(Token = "0x6001A73")]
	[Address(RVA = "0x11F5014", Offset = "0x11F5014", VA = "0x11F5014")]
	private void RemoveButtonListeners()
	{
	}

	[Token(Token = "0x6001A74")]
	[Address(RVA = "0x11F50F0", Offset = "0x11F50F0", VA = "0x11F50F0")]
	protected void OnHitButton(UnityEngine.Object hitObject)
	{
	}

	[Token(Token = "0x6001A75")]
	[Address(RVA = "0x11F4CF8", Offset = "0x11F4CF8", VA = "0x11F4CF8")]
	private void UpdateWatchToClosestButton()
	{
	}

	[Token(Token = "0x6001A76")]
	[Address(RVA = "0x11F5480", Offset = "0x11F5480", VA = "0x11F5480", Slot = "9")]
	public override void Reset(ObjectiveStage owner)
	{
	}

	[Token(Token = "0x6001A77")]
	[Address(RVA = "0x11F549C", Offset = "0x11F549C", VA = "0x11F549C")]
	public ObjectiveHitButton()
	{
	}
}
[Token(Token = "0x2000477")]
public class ObjectiveKillCount : Objective
{
	[Token(Token = "0x4001562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Min(1f)]
	[SerializeField]
	private int m_CountOfZombiesToKill;

	[Token(Token = "0x4001563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private int m_killCount;

	[Token(Token = "0x4001564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool m_subscribedToGlobalEvent;

	[Token(Token = "0x17000401")]
	public int KillCount
	{
		[Token(Token = "0x6001A78")]
		[Address(RVA = "0x11F54B4", Offset = "0x11F54B4", VA = "0x11F54B4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000402")]
	public int TotalToKill
	{
		[Token(Token = "0x6001A79")]
		[Address(RVA = "0x11F54BC", Offset = "0x11F54BC", VA = "0x11F54BC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001A7A")]
	[Address(RVA = "0x11F54C4", Offset = "0x11F54C4", VA = "0x11F54C4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001A7B")]
	[Address(RVA = "0x11F2B88", Offset = "0x11F2B88", VA = "0x11F2B88")]
	public void OverrideKillTarget(int target)
	{
	}

	[Token(Token = "0x6001A7C")]
	[Address(RVA = "0x11F557C", Offset = "0x11F557C", VA = "0x11F557C")]
	private void HandleKilled(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6001A7D")]
	[Address(RVA = "0x11F5808", Offset = "0x11F5808", VA = "0x11F5808", Slot = "9")]
	public override void Reset(ObjectiveStage owner)
	{
	}

	[Token(Token = "0x6001A7E")]
	[Address(RVA = "0x11F5824", Offset = "0x11F5824", VA = "0x11F5824", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A7F")]
	[Address(RVA = "0x11F5AD8", Offset = "0x11F5AD8", VA = "0x11F5AD8", Slot = "11")]
	internal override void CompletedObjective()
	{
	}

	[Token(Token = "0x6001A80")]
	[Address(RVA = "0x11F5BC0", Offset = "0x11F5BC0", VA = "0x11F5BC0", Slot = "12")]
	protected override void OnObjectiveStateChangedToCompleted()
	{
	}

	[Token(Token = "0x6001A81")]
	[Address(RVA = "0x11F5CF4", Offset = "0x11F5CF4", VA = "0x11F5CF4")]
	public ObjectiveKillCount()
	{
	}
}
[Token(Token = "0x2000478")]
internal enum PlayersInZone
{
	[Token(Token = "0x4001566")]
	NotStarted,
	[Token(Token = "0x4001567")]
	InZone,
	[Token(Token = "0x4001568")]
	OutOfZone
}
[Token(Token = "0x2000479")]
[RequireComponent(typeof(MultiplayerZone))]
[RequireComponent(typeof(Collider))]
public class ObjectiveKingOfTheHill : Objective
{
	[Token(Token = "0x4001569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	[Header("King of the hill parameters")]
	[Space(15f)]
	private MultiplayerZone m_kingOfTheHillZone;

	[Token(Token = "0x400156A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private float m_stayInZoneTimerGoal;

	[Token(Token = "0x400156B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[SerializeField]
	private bool m_resetStayTimerAfterUnpaused;

	[Token(Token = "0x400156C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private float m_exitFailTimerLimit;

	[Token(Token = "0x400156D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[SerializeField]
	private bool m_resetExitTimerAfterUnpaused;

	[Token(Token = "0x400156E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[UnityEngine.Tooltip("game event called when out of zone timer is reached")]
	[SerializeField]
	private GameEvent m_outOfZoneTimerExceedeEvent;

	[Token(Token = "0x400156F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	[UnityEngine.Tooltip("game events to invoke when the stay in zone timer reach the desired value.")]
	private List<TimedGameEvent> m_stayInZoneTimedGameEvents;

	[Token(Token = "0x4001570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<TimedGameEvent> m_stayInZoneTimedGameEventsInitialList;

	[Token(Token = "0x4001571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[UnityEngine.Tooltip("game events to invoke when the out of zone timer reach the desired value.")]
	[SerializeField]
	private List<TimedGameEvent> m_outOfZoneTimedGameEvents;

	[Token(Token = "0x4001572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private List<TimedGameEvent> m_outOfZoneTimedGameEventsInitialList;

	[Token(Token = "0x4001573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[UnityEngine.Tooltip("game event called when the player return to the zone after leaving it")]
	[SerializeField]
	private GameEvent m_returnToZoneGameEvent;

	[Token(Token = "0x4001574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float m_inZoneTimer;

	[Token(Token = "0x4001575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float m_outOfZoneTimer;

	[Token(Token = "0x4001576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool m_inZoneTimerPaused;

	[Token(Token = "0x4001577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
	private bool m_outOfZoneTimerPaused;

	[Token(Token = "0x4001578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private PlayersInZone m_playersStates;

	[Token(Token = "0x6001A82")]
	[Address(RVA = "0x11F5D04", Offset = "0x11F5D04", VA = "0x11F5D04", Slot = "6")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6001A83")]
	[Address(RVA = "0x11F5D28", Offset = "0x11F5D28", VA = "0x11F5D28", Slot = "7")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001A84")]
	[Address(RVA = "0x11F2B9C", Offset = "0x11F2B9C", VA = "0x11F2B9C")]
	public void OverrideStayInZzoneTimer(float time)
	{
	}

	[Token(Token = "0x6001A85")]
	[Address(RVA = "0x11F5EBC", Offset = "0x11F5EBC", VA = "0x11F5EBC", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A86")]
	[Address(RVA = "0x11F641C", Offset = "0x11F641C", VA = "0x11F641C", Slot = "10")]
	public override void UpdateObjective()
	{
	}

	[Token(Token = "0x6001A87")]
	[Address(RVA = "0x11F6BFC", Offset = "0x11F6BFC", VA = "0x11F6BFC", Slot = "9")]
	public override void Reset(ObjectiveStage owner)
	{
	}

	[Token(Token = "0x6001A88")]
	[Address(RVA = "0x11F6C20", Offset = "0x11F6C20", VA = "0x11F6C20")]
	private void OnEnterZone(GameObject obj)
	{
	}

	[Token(Token = "0x6001A89")]
	[Address(RVA = "0x11F6D2C", Offset = "0x11F6D2C", VA = "0x11F6D2C")]
	private void OnExitZone(GameObject obj)
	{
	}

	[Token(Token = "0x6001A8A")]
	[Address(RVA = "0x11F6DE0", Offset = "0x11F6DE0", VA = "0x11F6DE0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001A8B")]
	[Address(RVA = "0x11F6ED4", Offset = "0x11F6ED4", VA = "0x11F6ED4")]
	public void PauseInZoneTimer()
	{
	}

	[Token(Token = "0x6001A8C")]
	[Address(RVA = "0x11F6EE0", Offset = "0x11F6EE0", VA = "0x11F6EE0")]
	public void UnpauseInZoneTimer()
	{
	}

	[Token(Token = "0x6001A8D")]
	[Address(RVA = "0x11F6EE8", Offset = "0x11F6EE8", VA = "0x11F6EE8")]
	public void PauseOutOfZoneTimer()
	{
	}

	[Token(Token = "0x6001A8E")]
	[Address(RVA = "0x11F6EF4", Offset = "0x11F6EF4", VA = "0x11F6EF4")]
	public void UnpauseOutOFZoneTimer()
	{
	}

	[Token(Token = "0x6001A8F")]
	[Address(RVA = "0x11F6EFC", Offset = "0x11F6EFC", VA = "0x11F6EFC")]
	public void StopAndResetInZoneTimer()
	{
	}

	[Token(Token = "0x6001A90")]
	[Address(RVA = "0x11F6F0C", Offset = "0x11F6F0C", VA = "0x11F6F0C")]
	public void StopAndResetOutOfZoneTimer()
	{
	}

	[Token(Token = "0x6001A91")]
	[Address(RVA = "0x11F6F1C", Offset = "0x11F6F1C", VA = "0x11F6F1C")]
	public ObjectiveKingOfTheHill()
	{
	}
}
[Token(Token = "0x200047B")]
public class ObjectivePickupItem : Objective
{
	[Token(Token = "0x400157A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private GuidReference m_itemToGrip;

	[Token(Token = "0x400157B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private VrItem m_VrItem;

	[Token(Token = "0x17000403")]
	public VrItem ItemToPickUp
	{
		[Token(Token = "0x6001A94")]
		[Address(RVA = "0x11F7084", Offset = "0x11F7084", VA = "0x11F7084")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001A95")]
	[Address(RVA = "0x11F708C", Offset = "0x11F708C", VA = "0x11F708C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001A96")]
	[Address(RVA = "0x11F7118", Offset = "0x11F7118", VA = "0x11F7118")]
	private void ClearReference()
	{
	}

	[Token(Token = "0x6001A97")]
	[Address(RVA = "0x11F712C", Offset = "0x11F712C", VA = "0x11F712C", Slot = "6")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6001A98")]
	[Address(RVA = "0x11F7148", Offset = "0x11F7148", VA = "0x11F7148")]
	private void SetupCrossSceneReference()
	{
	}

	[Token(Token = "0x6001A99")]
	[Address(RVA = "0x11F72DC", Offset = "0x11F72DC", VA = "0x11F72DC", Slot = "7")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001A9A")]
	[Address(RVA = "0x11F73FC", Offset = "0x11F73FC", VA = "0x11F73FC")]
	public void ItemGripped()
	{
	}

	[Token(Token = "0x6001A9B")]
	[Address(RVA = "0x11F75FC", Offset = "0x11F75FC", VA = "0x11F75FC", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001A9C")]
	[Address(RVA = "0x11F793C", Offset = "0x11F793C", VA = "0x11F793C", Slot = "10")]
	public override void UpdateObjective()
	{
	}

	[Token(Token = "0x6001A9D")]
	[Address(RVA = "0x11F7958", Offset = "0x11F7958", VA = "0x11F7958")]
	public ObjectivePickupItem()
	{
	}
}
[Token(Token = "0x200047C")]
[RequireComponent(typeof(Collider))]
public class ObjectiveReachLocation : Objective
{
	[Token(Token = "0x400157C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Collider m_collider;

	[Token(Token = "0x6001A9E")]
	[Address(RVA = "0x11F79CC", Offset = "0x11F79CC", VA = "0x11F79CC", Slot = "6")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x6001A9F")]
	[Address(RVA = "0x11F7A48", Offset = "0x11F7A48", VA = "0x11F7A48", Slot = "7")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6001AA0")]
	[Address(RVA = "0x11F7A74", Offset = "0x11F7A74", VA = "0x11F7A74", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001AA1")]
	[Address(RVA = "0x11F7D90", Offset = "0x11F7D90", VA = "0x11F7D90")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001AA2")]
	[Address(RVA = "0x11F7EB4", Offset = "0x11F7EB4", VA = "0x11F7EB4", Slot = "9")]
	public override void Reset(ObjectiveStage owner)
	{
	}

	[Token(Token = "0x6001AA3")]
	[Address(RVA = "0x11F7EE0", Offset = "0x11F7EE0", VA = "0x11F7EE0")]
	public ObjectiveReachLocation()
	{
	}
}
[Serializable]
[Token(Token = "0x200047D")]
public class FloatEvent : UnityEvent<float>
{
	[Token(Token = "0x6001AA4")]
	[Address(RVA = "0x11F7EE8", Offset = "0x11F7EE8", VA = "0x11F7EE8")]
	public FloatEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x200047E")]
public class ObjectiveStage : CachedMonoBehaviour
{
	[Token(Token = "0x400157D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_completesExperience;

	[Token(Token = "0x400157E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int m_requiredPointsToComplete;

	[Token(Token = "0x400157F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_timeToWaitBetweenObjectives;

	[Token(Token = "0x4001580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float m_minTimeToWaitBetweenObjectives;

	[Token(Token = "0x4001581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float m_maxTimeToWaitBetweenObjectives;

	[Token(Token = "0x4001582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int m_currentStagePoints;

	[Token(Token = "0x4001583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_elapsedTime;

	[Token(Token = "0x4001584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_elapsedTimeWaiting;

	[Token(Token = "0x4001585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<Objective> m_objectives;

	[Token(Token = "0x4001586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent m_stageStarted;

	[Token(Token = "0x4001587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent m_stageEnded;

	[Token(Token = "0x4001588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent m_stageObjectiveCompleted;

	[Token(Token = "0x4001589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private WaveSpecifier m_waveSpecifier;

	[Token(Token = "0x400158A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private int m_maxObjectivesInParallel;

	[Token(Token = "0x400158B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	private bool m_shuffleObjectiveList;

	[Token(Token = "0x400158C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	[SerializeField]
	private bool m_canRunInParallel;

	[Token(Token = "0x400158D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
	private bool m_isStageStarted;

	[Token(Token = "0x400158E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8F")]
	private bool m_isFirstObjectiveCompleted;

	[Token(Token = "0x400158F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_isCompleted;

	[Token(Token = "0x4001590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<Objective> m_runningObjectives;

	[Token(Token = "0x4001591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<Objective> m_completedObjectives;

	[Token(Token = "0x17000404")]
	public List<Objective> Objectives
	{
		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x11F7F30", Offset = "0x11F7F30", VA = "0x11F7F30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000405")]
	public bool isStageStarted
	{
		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0x11F7F38", Offset = "0x11F7F38", VA = "0x11F7F38")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0x11F7F40", Offset = "0x11F7F40", VA = "0x11F7F40")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000406")]
	private bool isFirstObjectiveCompleted
	{
		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0x11F7F7C", Offset = "0x11F7F7C", VA = "0x11F7F7C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0x11F7F84", Offset = "0x11F7F84", VA = "0x11F7F84")]
		set
		{
		}
	}

	[Token(Token = "0x17000407")]
	private bool isStageCompleted
	{
		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x11F7FC0", Offset = "0x11F7FC0", VA = "0x11F7FC0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x11F7FC8", Offset = "0x11F7FC8", VA = "0x11F7FC8")]
		set
		{
		}
	}

	[Token(Token = "0x17000408")]
	public bool isRunning
	{
		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0x11F8078", Offset = "0x11F8078", VA = "0x11F8078")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000409")]
	public bool isBlocking
	{
		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0x11F8098", Offset = "0x11F8098", VA = "0x11F8098")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700040A")]
	public int RequiredPointsToComplete
	{
		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x11F80C0", Offset = "0x11F80C0", VA = "0x11F80C0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700040B")]
	public int CurrentScore
	{
		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x11F80C8", Offset = "0x11F80C8", VA = "0x11F80C8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700040C")]
	public WaveSpecifier WaveSpecifier
	{
		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x11F80D0", Offset = "0x11F80D0", VA = "0x11F80D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001AB1")]
	[Address(RVA = "0x11F80D8", Offset = "0x11F80D8", VA = "0x11F80D8", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001AB2")]
	[Address(RVA = "0x11F80DC", Offset = "0x11F80DC", VA = "0x11F80DC", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x6001AB3")]
	[Address(RVA = "0x11F7FA4", Offset = "0x11F7FA4", VA = "0x11F7FA4")]
	public void OnStageFirstObjectiveChangedToCompleted()
	{
	}

	[Token(Token = "0x6001AB4")]
	[Address(RVA = "0x11F7F60", Offset = "0x11F7F60", VA = "0x11F7F60")]
	public void OnStageChangedToStarted()
	{
	}

	[Token(Token = "0x6001AB5")]
	[Address(RVA = "0x11F7FD4", Offset = "0x11F7FD4", VA = "0x11F7FD4")]
	public void OnStageChangedToCompleted()
	{
	}

	[Token(Token = "0x6001AB6")]
	[Address(RVA = "0x11F811C", Offset = "0x11F811C", VA = "0x11F811C")]
	internal void StartStage(int index)
	{
	}

	[Token(Token = "0x6001AB7")]
	[Address(RVA = "0x11F80F4", Offset = "0x11F80F4", VA = "0x11F80F4")]
	internal void InvokeStageStartedEvent()
	{
	}

	[Token(Token = "0x6001AB8")]
	[Address(RVA = "0x11F8204", Offset = "0x11F8204", VA = "0x11F8204")]
	internal bool AreAllObjectivesAttached()
	{
		return default(bool);
	}

	[Token(Token = "0x6001AB9")]
	[Address(RVA = "0x11F8404", Offset = "0x11F8404", VA = "0x11F8404")]
	public void Update()
	{
	}

	[Token(Token = "0x6001ABA")]
	[Address(RVA = "0x11F80E0", Offset = "0x11F80E0", VA = "0x11F80E0")]
	internal void InvokeFirstObjectiveCompletedEvent()
	{
	}

	[Token(Token = "0x6001ABB")]
	[Address(RVA = "0x11F87BC", Offset = "0x11F87BC", VA = "0x11F87BC")]
	public void StageComplete()
	{
	}

	[Token(Token = "0x6001ABC")]
	[Address(RVA = "0x11F8108", Offset = "0x11F8108", VA = "0x11F8108")]
	internal void InvokeStageCompletedEvent()
	{
	}

	[Token(Token = "0x6001ABD")]
	[Address(RVA = "0x11F0980", Offset = "0x11F0980", VA = "0x11F0980")]
	internal void ReinjectObjective(Objective objective)
	{
	}

	[Token(Token = "0x6001ABE")]
	[Address(RVA = "0x11F89C0", Offset = "0x11F89C0", VA = "0x11F89C0")]
	internal void AddObjectivePoints(int points)
	{
	}

	[Token(Token = "0x6001ABF")]
	[Address(RVA = "0x11F8A10", Offset = "0x11F8A10", VA = "0x11F8A10")]
	internal void AddNewObjective(Objective newObjective, int elementIndex)
	{
	}

	[Token(Token = "0x6001AC0")]
	[Address(RVA = "0x11F8B2C", Offset = "0x11F8B2C", VA = "0x11F8B2C")]
	public ObjectiveStage()
	{
	}
}
[Token(Token = "0x200047F")]
public static class ListExtensions
{
	[Token(Token = "0x6001AC1")]
	public static void Shuffle<T>(this IList<T> list)
	{
	}
}
[Token(Token = "0x2000480")]
public class ObjectiveWaitForEndOfWave : Objective
{
	[Token(Token = "0x4001592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[UnityEngine.Tooltip("Instead of completing at the end of wave timer, the objective will complete when all Zs of the current wave are killed")]
	[SerializeField]
	private bool m_endWaveWhenAllKilled;

	[Token(Token = "0x4001593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private uint m_waveId;

	[Token(Token = "0x4001594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float m_oneSecElapsed;

	[Token(Token = "0x6001AC2")]
	[Address(RVA = "0x11F8C20", Offset = "0x11F8C20", VA = "0x11F8C20", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001AC3")]
	[Address(RVA = "0x11F909C", Offset = "0x11F909C", VA = "0x11F909C", Slot = "10")]
	public override void UpdateObjective()
	{
	}

	[Token(Token = "0x6001AC4")]
	[Address(RVA = "0x11F9348", Offset = "0x11F9348", VA = "0x11F9348")]
	private void OnWaveEnd(int waveIndex)
	{
	}

	[Token(Token = "0x6001AC5")]
	[Address(RVA = "0x11F947C", Offset = "0x11F947C", VA = "0x11F947C")]
	private void OnAllKilled(uint waveIndex)
	{
	}

	[Token(Token = "0x6001AC6")]
	[Address(RVA = "0x11F977C", Offset = "0x11F977C", VA = "0x11F977C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001AC7")]
	[Address(RVA = "0x11F994C", Offset = "0x11F994C", VA = "0x11F994C", Slot = "12")]
	protected override void OnObjectiveStateChangedToCompleted()
	{
	}

	[Token(Token = "0x6001AC8")]
	[Address(RVA = "0x11F9A80", Offset = "0x11F9A80", VA = "0x11F9A80")]
	public ObjectiveWaitForEndOfWave()
	{
	}
}
[Serializable]
[Token(Token = "0x2000481")]
public class TimedGameEvent
{
	[Token(Token = "0x4001595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public GameEvent m_eventToTrigger;

	[Token(Token = "0x4001596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public float m_time;

	[Token(Token = "0x6001AC9")]
	[Address(RVA = "0x11F9A88", Offset = "0x11F9A88", VA = "0x11F9A88")]
	public TimedGameEvent()
	{
	}
}
[Token(Token = "0x2000482")]
public class ObjectiveWaitForTimeToElapse : Objective
{
	[Token(Token = "0x4001597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private float m_timeToWaitInSec;

	[Token(Token = "0x4001598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[UnityEngine.Tooltip("game events to invoke when the timer reach desired value.")]
	[SerializeField]
	public List<TimedGameEvent> m_timedGameEvents;

	[Token(Token = "0x4001599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[UnityEngine.Tooltip("if checked the remaining time will be displayed on player's watch.")]
	[SerializeField]
	private bool m_showTimeOnWatch;

	[Token(Token = "0x400159A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float m_startedTime;

	[Token(Token = "0x400159B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float m_oneSecondElapsed;

	[Token(Token = "0x1700040D")]
	public float RemainingTime
	{
		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x11F9A90", Offset = "0x11F9A90", VA = "0x11F9A90")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700040E")]
	public override bool showOnWatch
	{
		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x11F9B40", Offset = "0x11F9B40", VA = "0x11F9B40", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001ACC")]
	[Address(RVA = "0x11F2B74", Offset = "0x11F2B74", VA = "0x11F2B74")]
	public void OverrideWaitTime(float time)
	{
	}

	[Token(Token = "0x6001ACD")]
	[Address(RVA = "0x11F9B60", Offset = "0x11F9B60", VA = "0x11F9B60", Slot = "8")]
	public override void StartObjective()
	{
	}

	[Token(Token = "0x6001ACE")]
	[Address(RVA = "0x11F9F5C", Offset = "0x11F9F5C", VA = "0x11F9F5C", Slot = "10")]
	public override void UpdateObjective()
	{
	}

	[Token(Token = "0x6001ACF")]
	[Address(RVA = "0x11FA29C", Offset = "0x11FA29C", VA = "0x11FA29C")]
	public ObjectiveWaitForTimeToElapse()
	{
	}
}
[Serializable]
[Token(Token = "0x2000483")]
public class ObjectData
{
	[Token(Token = "0x400159C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<ObjectDatum> DataList;

	[Token(Token = "0x6001AD0")]
	[Address(RVA = "0x11FA32C", Offset = "0x11FA32C", VA = "0x11FA32C")]
	public ObjectData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000484")]
public class ObjectDatum
{
	[Token(Token = "0x400159D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Key;

	[Token(Token = "0x400159E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string TypeName;

	[Token(Token = "0x400159F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string State;

	[Token(Token = "0x40015A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string SceneObjectGuid;

	[Token(Token = "0x40015A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string LocatedSceneName;

	[Token(Token = "0x6001AD1")]
	[Address(RVA = "0x11FA3B4", Offset = "0x11FA3B4", VA = "0x11FA3B4")]
	public ObjectDatum()
	{
	}

	[Token(Token = "0x6001AD2")]
	[Address(RVA = "0x11FA42C", Offset = "0x11FA42C", VA = "0x11FA42C")]
	public ObjectDatum(string key, string typeName, string state, string sceneObjectGuid = "", [Optional] string locatedSceneName)
	{
	}
}
[Serializable]
[Token(Token = "0x2000485")]
public class InventoryData
{
	[Token(Token = "0x40015A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<InventoryDatum> DataList;

	[Token(Token = "0x40015A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AmmoPouchDatum AmmoData;

	[Token(Token = "0x40015A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool RosaryEnabled;

	[Token(Token = "0x40015A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RosaryAbilitiesUnlocked;

	[Token(Token = "0x40015A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float FaithAmount;

	[Token(Token = "0x6001AD3")]
	[Address(RVA = "0x11FA52C", Offset = "0x11FA52C", VA = "0x11FA52C")]
	public InventoryData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000486")]
public class InventoryDatum
{
	[Token(Token = "0x40015A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string InventorySlotKey;

	[Token(Token = "0x40015A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string SceneObjectGuid;

	[Token(Token = "0x40015A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ObjectDatum HeldItem;

	[Token(Token = "0x6001AD4")]
	[Address(RVA = "0x11FA5BC", Offset = "0x11FA5BC", VA = "0x11FA5BC")]
	public InventoryDatum()
	{
	}

	[Token(Token = "0x6001AD5")]
	[Address(RVA = "0x11FA668", Offset = "0x11FA668", VA = "0x11FA668")]
	public InventoryDatum(string inventorySlotKey, string sceneObjectGuid, ObjectDatum heldItem)
	{
	}
}
[Serializable]
[Token(Token = "0x2000487")]
public class AmmoPouchDatum
{
	[Token(Token = "0x40015AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string InventorySlotKey;

	[Token(Token = "0x40015AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ObjectDatum> DataList;

	[Token(Token = "0x6001AD6")]
	[Address(RVA = "0x11FA6C8", Offset = "0x11FA6C8", VA = "0x11FA6C8")]
	public AmmoPouchDatum()
	{
	}

	[Token(Token = "0x6001AD7")]
	[Address(RVA = "0x11FA77C", Offset = "0x11FA77C", VA = "0x11FA77C")]
	public AmmoPouchDatum(string inventorySlotKey, List<ObjectDatum> dataList)
	{
	}
}
[Serializable]
[Token(Token = "0x2000488")]
public class ScoreData
{
	[Token(Token = "0x40015AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int GamesPlayed;

	[Token(Token = "0x40015AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int Kills;

	[Token(Token = "0x40015AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int HeadShots;

	[Token(Token = "0x40015AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<KillsPerEnemyTypeCount> EnemyKills;

	[Token(Token = "0x40015B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<KillsPerWeaponTypeCount> WeaponKills;

	[Token(Token = "0x40015B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<ScoreBreakdownData> LevelScores;

	[Token(Token = "0x40015B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ScoreBreakdownData> HordeModeScores;

	[Token(Token = "0x40015B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private long m_GlobalHordeModeScore;

	[Token(Token = "0x6001AD8")]
	[Address(RVA = "0x11FA820", Offset = "0x11FA820", VA = "0x11FA820")]
	public ScoreBreakdown GetLevelScore(int levelId)
	{
		return null;
	}

	[Token(Token = "0x6001AD9")]
	[Address(RVA = "0x11FA974", Offset = "0x11FA974", VA = "0x11FA974")]
	public void UpdateLevelScore(ScoreBreakdown newLevelScore)
	{
	}

	[Token(Token = "0x6001ADA")]
	[Address(RVA = "0x11FB2F4", Offset = "0x11FB2F4", VA = "0x11FB2F4")]
	public ScoreBreakdown GetHordeModeScore(int levelId)
	{
		return null;
	}

	[Token(Token = "0x6001ADB")]
	[Address(RVA = "0x11FB448", Offset = "0x11FB448", VA = "0x11FB448")]
	public void UpdateHordeModeScore(ScoreBreakdown newHordeModeScore)
	{
	}

	[Token(Token = "0x6001ADC")]
	[Address(RVA = "0x11FB6AC", Offset = "0x11FB6AC", VA = "0x11FB6AC")]
	public void UpdateHordeModeGlobalScore(long score)
	{
	}

	[Token(Token = "0x6001ADD")]
	[Address(RVA = "0x11FB6B4", Offset = "0x11FB6B4", VA = "0x11FB6B4")]
	public long GetHordeModeGlobalTotal()
	{
		return default(long);
	}

	[Token(Token = "0x6001ADE")]
	[Address(RVA = "0x11FABD8", Offset = "0x11FABD8", VA = "0x11FABD8")]
	private void UpdateScoreStatistics(ScoreBreakdown newScore)
	{
	}

	[Token(Token = "0x6001ADF")]
	[Address(RVA = "0x11FB744", Offset = "0x11FB744", VA = "0x11FB744")]
	public ScoreData()
	{
	}
}
[Serializable]
[Token(Token = "0x200048F")]
public class KillsPerEnemyTypeCount
{
	[Token(Token = "0x40015BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_id;

	[Token(Token = "0x40015BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_amount;

	[Token(Token = "0x6001AEC")]
	[Address(RVA = "0x11FB6C4", Offset = "0x11FB6C4", VA = "0x11FB6C4")]
	public KillsPerEnemyTypeCount(string id, int amount)
	{
	}
}
[Serializable]
[Token(Token = "0x2000490")]
public class KillsPerWeaponTypeCount
{
	[Token(Token = "0x40015BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_id;

	[Token(Token = "0x40015BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_amount;

	[Token(Token = "0x6001AED")]
	[Address(RVA = "0x11FB708", Offset = "0x11FB708", VA = "0x11FB708")]
	public KillsPerWeaponTypeCount(string id, int amount)
	{
	}
}
[Serializable]
[Token(Token = "0x2000491")]
public class ScoreBreakdownData
{
	[Token(Token = "0x40015BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int m_levelId;

	[Token(Token = "0x40015BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_enemyPointsJson;

	[Token(Token = "0x40015C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_headshotCount;

	[Token(Token = "0x40015C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_secondsElapsed;

	[Token(Token = "0x6001AEE")]
	[Address(RVA = "0x11FB9F0", Offset = "0x11FB9F0", VA = "0x11FB9F0")]
	public ScoreBreakdownData()
	{
	}

	[Token(Token = "0x6001AEF")]
	[Address(RVA = "0x11FB9F8", Offset = "0x11FB9F8", VA = "0x11FB9F8")]
	public ScoreBreakdownData(int levelId, string enemyPointsJson, int headshotCount, float secondsElapsed)
	{
	}

	[Token(Token = "0x6001AF0")]
	[Address(RVA = "0x11FB2B0", Offset = "0x11FB2B0", VA = "0x11FB2B0")]
	public void CopyFrom(ScoreBreakdownData source)
	{
	}
}
[Token(Token = "0x2000492")]
public enum XpTypes
{
	[Token(Token = "0x40015C3")]
	Total,
	[Token(Token = "0x40015C4")]
	Charater_1,
	[Token(Token = "0x40015C5")]
	Charater_2,
	[Token(Token = "0x40015C6")]
	Charater_3,
	[Token(Token = "0x40015C7")]
	Charater_4,
	[Token(Token = "0x40015C8")]
	Revolver,
	[Token(Token = "0x40015C9")]
	Pistol,
	[Token(Token = "0x40015CA")]
	Shotgun,
	[Token(Token = "0x40015CB")]
	MachineGun
}
[Serializable]
[Token(Token = "0x2000493")]
public class ExpData
{
	[Token(Token = "0x40015CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int CurrentTotalExperience;

	[Token(Token = "0x40015CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Xp_Data CharacterXP;

	[Token(Token = "0x40015CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Xp_Data WeaponXP;

	[Token(Token = "0x40015CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float CurrentTotalGametime;

	[Token(Token = "0x6001AF1")]
	[Address(RVA = "0x11FBA54", Offset = "0x11FBA54", VA = "0x11FBA54")]
	public ExpData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000494")]
public class Xp_Data
{
	[Token(Token = "0x40015D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<Xp_Store> XP;

	[Token(Token = "0x6001AF2")]
	[Address(RVA = "0x11FBA5C", Offset = "0x11FBA5C", VA = "0x11FBA5C")]
	public Xp_Data()
	{
	}
}
[Serializable]
[Token(Token = "0x2000495")]
public class Xp_Store
{
	[Token(Token = "0x40015D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string identifierName;

	[Token(Token = "0x40015D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int XP;

	[Token(Token = "0x6001AF3")]
	[Address(RVA = "0x11FBAE4", Offset = "0x11FBAE4", VA = "0x11FBAE4")]
	public Xp_Store(Identifier Id, int Xp)
	{
	}
}
[Token(Token = "0x2000496")]
public interface IStateSerializer<T>
{
	[Token(Token = "0x6001AF4")]
	T SerializeState();

	[Token(Token = "0x6001AF5")]
	void DeserializeState(T datum);
}
[Token(Token = "0x2000497")]
public class ItemRespawnHandHover : CachedMonoBehaviour
{
	[Token(Token = "0x40015D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform m_targetTransform;

	[Token(Token = "0x40015D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private VrItem m_item;

	[Token(Token = "0x40015D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WorldInteraction m_attachedInteraction;

	[Token(Token = "0x40015D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Rigidbody m_itemRigidBody;

	[Token(Token = "0x40015D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_localGraspPosition;

	[Token(Token = "0x40015D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion m_localGraspRotation;

	[Token(Token = "0x40015D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Bounds m_activeBounds;

	[Token(Token = "0x40015DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float m_remainingLifetime;

	[Token(Token = "0x40015DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool m_stuckInWorld;

	[Token(Token = "0x40015DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float m_stuckInWorldRefreshTimer;

	[Token(Token = "0x40015DD")]
	private const float c_stuckInWorldRefreshInterval = 0.5f;

	[Token(Token = "0x6001AF6")]
	[Address(RVA = "0x11FBB34", Offset = "0x11FBB34", VA = "0x11FBB34")]
	public void QueueHover(Transform targetTransform, float hoverDuration)
	{
	}

	[Token(Token = "0x6001AF7")]
	[Address(RVA = "0x11FBBEC", Offset = "0x11FBBEC", VA = "0x11FBBEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001AF8")]
	[Address(RVA = "0x11FBF2C", Offset = "0x11FBF2C", VA = "0x11FBF2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001AF9")]
	[Address(RVA = "0x11FBD04", Offset = "0x11FBD04", VA = "0x11FBD04")]
	private void StartHover()
	{
	}

	[Token(Token = "0x6001AFA")]
	[Address(RVA = "0x11FC33C", Offset = "0x11FC33C", VA = "0x11FC33C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001AFB")]
	[Address(RVA = "0x11FC340", Offset = "0x11FC340", VA = "0x11FC340")]
	private void StopHover()
	{
	}

	[Token(Token = "0x6001AFC")]
	[Address(RVA = "0x11FC03C", Offset = "0x11FC03C", VA = "0x11FC03C")]
	private void SetRigidBodyHoverState(bool hover)
	{
	}

	[Token(Token = "0x6001AFD")]
	[Address(RVA = "0x11FC118", Offset = "0x11FC118", VA = "0x11FC118")]
	private void Update()
	{
	}

	[Token(Token = "0x6001AFE")]
	[Address(RVA = "0x11FC454", Offset = "0x11FC454", VA = "0x11FC454")]
	private bool CheckBoundsIntersection()
	{
		return default(bool);
	}

	[Token(Token = "0x6001AFF")]
	[Address(RVA = "0x11FC6C0", Offset = "0x11FC6C0", VA = "0x11FC6C0")]
	public ItemRespawnHandHover()
	{
	}
}
[Token(Token = "0x2000498")]
public class PersistableIdentity : MonoBehaviour
{
	[Token(Token = "0x40015DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string m_key;

	[Token(Token = "0x1700040F")]
	public string Key
	{
		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x11FC6C8", Offset = "0x11FC6C8", VA = "0x11FC6C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001B01")]
	[Address(RVA = "0x11FC6D0", Offset = "0x11FC6D0", VA = "0x11FC6D0")]
	public PersistableIdentity()
	{
	}
}
[Token(Token = "0x2000499")]
public class PersistablesLoader : MonoBehaviour
{
	[Token(Token = "0x6001B02")]
	[Address(RVA = "0x11FC728", Offset = "0x11FC728", VA = "0x11FC728")]
	private void Start()
	{
	}

	[Token(Token = "0x6001B03")]
	[Address(RVA = "0x11FC82C", Offset = "0x11FC82C", VA = "0x11FC82C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001B04")]
	[Address(RVA = "0x11FC92C", Offset = "0x11FC92C", VA = "0x11FC92C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B05")]
	[Address(RVA = "0x11FCB6C", Offset = "0x11FCB6C", VA = "0x11FCB6C")]
	private void OnSceneUnloading()
	{
	}

	[Token(Token = "0x6001B06")]
	[Address(RVA = "0x11FD0EC", Offset = "0x11FD0EC", VA = "0x11FD0EC")]
	private bool IsObjectInScene(GameObject go)
	{
		return default(bool);
	}

	[Token(Token = "0x6001B07")]
	[Address(RVA = "0x11FD158", Offset = "0x11FD158", VA = "0x11FD158")]
	public PersistablesLoader()
	{
	}
}
[Token(Token = "0x200049A")]
public class PowerFieldAnimator : MonoBehaviour
{
	[Token(Token = "0x40015DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MeshRenderer m_meshRenderer;

	[Token(Token = "0x40015E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Color m_originalColor;

	[Token(Token = "0x40015E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_originalAlpha;

	[Token(Token = "0x40015E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_currentAlpha;

	[Token(Token = "0x40015E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_alphaStep;

	[Token(Token = "0x40015E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool m_increasing;

	[Token(Token = "0x6001B08")]
	[Address(RVA = "0x11FD160", Offset = "0x11FD160", VA = "0x11FD160")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B09")]
	[Address(RVA = "0x11FD2AC", Offset = "0x11FD2AC", VA = "0x11FD2AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001B0A")]
	[Address(RVA = "0x11FD2B0", Offset = "0x11FD2B0", VA = "0x11FD2B0")]
	private void UpdateGlow()
	{
	}

	[Token(Token = "0x6001B0B")]
	[Address(RVA = "0x11FD238", Offset = "0x11FD238", VA = "0x11FD238")]
	public void Show(bool show)
	{
	}

	[Token(Token = "0x6001B0C")]
	[Address(RVA = "0x11FD350", Offset = "0x11FD350", VA = "0x11FD350")]
	public PowerFieldAnimator()
	{
	}
}
[Token(Token = "0x200049B")]
[DisallowMultipleComponent]
public class ScenePersistable : GuidComponent, IPersistable
{
	[Token(Token = "0x40015E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_guidRegistered;

	[Token(Token = "0x6001B0D")]
	[Address(RVA = "0x11FD370", Offset = "0x11FD370", VA = "0x11FD370", Slot = "6")]
	protected override void CreateGuid()
	{
	}

	[Token(Token = "0x6001B0E")]
	[Address(RVA = "0x11FD61C", Offset = "0x11FD61C", VA = "0x11FD61C", Slot = "7")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001B0F")]
	[Address(RVA = "0x11FD630", Offset = "0x11FD630", VA = "0x11FD630", Slot = "8")]
	public string SerializeState()
	{
		return null;
	}

	[Token(Token = "0x6001B10")]
	[Address(RVA = "0x11FD638", Offset = "0x11FD638", VA = "0x11FD638", Slot = "9")]
	public void DeserializeState(string state)
	{
	}

	[Token(Token = "0x6001B11")]
	[Address(RVA = "0x11FD640", Offset = "0x11FD640", VA = "0x11FD640")]
	public static void DeserializeState(GameObject go, string state)
	{
	}

	[Token(Token = "0x6001B12")]
	[Address(RVA = "0x11FD644", Offset = "0x11FD644", VA = "0x11FD644")]
	public ScenePersistable()
	{
	}
}
[Token(Token = "0x200049C")]
[DisallowMultipleComponent]
public class ScenePersistableDirectory : PT.SceneContentsDirectory.SceneContentsDirectory<ScenePersistable, ScenePersistableDirectory>
{
	[Token(Token = "0x6001B13")]
	[Address(RVA = "0x11FD64C", Offset = "0x11FD64C", VA = "0x11FD64C")]
	public ScenePersistableDirectory()
	{
	}
}
[Token(Token = "0x200049D")]
[DisallowMultipleComponent]
public class SpawnedPersistable : MonoBehaviour, IPersistable
{
	[Token(Token = "0x6001B14")]
	[Address(RVA = "0x11FD6B8", Offset = "0x11FD6B8", VA = "0x11FD6B8", Slot = "6")]
	public virtual string SerializeState()
	{
		return null;
	}

	[Token(Token = "0x6001B15")]
	[Address(RVA = "0x11FD6C0", Offset = "0x11FD6C0", VA = "0x11FD6C0", Slot = "7")]
	public virtual void DeserializeState(string state)
	{
	}

	[Token(Token = "0x6001B16")]
	[Address(RVA = "0x11FD6C8", Offset = "0x11FD6C8", VA = "0x11FD6C8")]
	public static void DeserializeState(GameObject go, string state)
	{
	}

	[Token(Token = "0x6001B17")]
	[Address(RVA = "0x11FD6CC", Offset = "0x11FD6CC", VA = "0x11FD6CC")]
	public SpawnedPersistable()
	{
	}
}
[Token(Token = "0x200049E")]
public class State_ResetChapterProgressionData : BaseStateAttachedLogic
{
	[Token(Token = "0x6001B18")]
	[Address(RVA = "0x11FD6D4", Offset = "0x11FD6D4", VA = "0x11FD6D4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001B19")]
	[Address(RVA = "0x11FD724", Offset = "0x11FD724", VA = "0x11FD724")]
	public State_ResetChapterProgressionData()
	{
	}
}
[Token(Token = "0x200049F")]
public class State_ResetQuestData : BaseStateAttachedLogic
{
	[Token(Token = "0x6001B1A")]
	[Address(RVA = "0x11FD72C", Offset = "0x11FD72C", VA = "0x11FD72C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001B1B")]
	[Address(RVA = "0x11FD77C", Offset = "0x11FD77C", VA = "0x11FD77C")]
	public State_ResetQuestData()
	{
	}
}
[Token(Token = "0x20004A0")]
public class State_RestorePersistentData : BaseStateAttachedLogic
{
	[Token(Token = "0x6001B1C")]
	[Address(RVA = "0x11FD784", Offset = "0x11FD784", VA = "0x11FD784", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001B1D")]
	[Address(RVA = "0x11FD95C", Offset = "0x11FD95C", VA = "0x11FD95C", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6001B1E")]
	[Address(RVA = "0x11FD8E4", Offset = "0x11FD8E4", VA = "0x11FD8E4")]
	private void LoadData()
	{
	}

	[Token(Token = "0x6001B1F")]
	[Address(RVA = "0x11FDA2C", Offset = "0x11FDA2C", VA = "0x11FDA2C")]
	public State_RestorePersistentData()
	{
	}
}
[Token(Token = "0x20004A1")]
public class State_SavePersistentData : BaseStateAttachedLogic
{
	[Token(Token = "0x17000410")]
	[StateConfig("Skip Inventory Save")]
	public bool SkipInventorySave
	{
		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x11FDA34", Offset = "0x11FDA34", VA = "0x11FDA34")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x11FDA3C", Offset = "0x11FDA3C", VA = "0x11FDA3C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001B22")]
	[Address(RVA = "0x11FDA48", Offset = "0x11FDA48", VA = "0x11FDA48", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001B23")]
	[Address(RVA = "0x11FDB8C", Offset = "0x11FDB8C", VA = "0x11FDB8C")]
	public State_SavePersistentData()
	{
	}
}
[Token(Token = "0x20004A2")]
public class State_SaveProgressionData : BaseStateAttachedLogic
{
	[Token(Token = "0x17000411")]
	[StateConfig("Skip Inventory Save")]
	public bool SkipInventorySave
	{
		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x11FDB94", Offset = "0x11FDB94", VA = "0x11FDB94")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x11FDB9C", Offset = "0x11FDB9C", VA = "0x11FDB9C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6001B26")]
	[Address(RVA = "0x11FDBA8", Offset = "0x11FDBA8", VA = "0x11FDBA8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6001B27")]
	[Address(RVA = "0x11FDBF8", Offset = "0x11FDBF8", VA = "0x11FDBF8")]
	public State_SaveProgressionData()
	{
	}
}
[Token(Token = "0x20004A3")]
public class TrackedPersistable : CachedMonoBehaviour
{
	[Token(Token = "0x6001B28")]
	[Address(RVA = "0x11FDC00", Offset = "0x11FDC00", VA = "0x11FDC00")]
	public TrackedPersistable()
	{
	}
}
[Token(Token = "0x20004A4")]
[DisallowMultipleComponent]
public class TrackedPersistableDirectory : PT.SceneContentsDirectory.SceneContentsDirectory<TrackedPersistable, TrackedPersistableDirectory>
{
	[Token(Token = "0x6001B29")]
	[Address(RVA = "0x11FDC08", Offset = "0x11FDC08", VA = "0x11FDC08")]
	public TrackedPersistableDirectory()
	{
	}
}
[Token(Token = "0x20004A5")]
public class ApplyExplosiveForceOnEnable : CachedMonoBehaviour
{
	[Token(Token = "0x40015E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("The explosive force will only be applied to the rigid bodies listed here.")]
	private Rigidbody[] m_targetRigidBodies;

	[Token(Token = "0x40015E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("An offset for the origin of the explosion in the local space of this object.")]
	private Vector3 m_localOriginOffset;

	[Token(Token = "0x40015EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[UnityEngine.Tooltip("The force applied to bodies in the explosion. This tends to zero as we approach the outer radius.")]
	[SerializeField]
	[Min(0f)]
	private float m_explosionForce;

	[Token(Token = "0x40015EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("The radius of the explosion. Bodies outside the radius will be unaffected.")]
	[SerializeField]
	[Min(0f)]
	private float m_explosionRadius;

	[Token(Token = "0x6001B2A")]
	[Address(RVA = "0x11FDC74", Offset = "0x11FDC74", VA = "0x11FDC74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B2B")]
	[Address(RVA = "0x11FDD20", Offset = "0x11FDD20", VA = "0x11FDD20")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001B2C")]
	[Address(RVA = "0x11FDD88", Offset = "0x11FDD88", VA = "0x11FDD88")]
	public ApplyExplosiveForceOnEnable()
	{
	}
}
[Token(Token = "0x20004A6")]
public class ApplyPushBackOnImpact : MonoBehaviour
{
	[Token(Token = "0x20004A7")]
	private struct PushBackAgents
	{
		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IAgent m_agent;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_timePushedBack;

		[Token(Token = "0x6001B31")]
		[Address(RVA = "0x11FE458", Offset = "0x11FE458", VA = "0x11FE458")]
		public PushBackAgents(IAgent agent, float timePushedBack)
		{
		}
	}

	[Token(Token = "0x40015EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Damage object that can be associated with the push back to allow the player to be hurt at the same time")]
	private PhysicsDamage m_physicsDamageObject;

	[Token(Token = "0x40015ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Angle spread on push back to deviate from directly backwards")]
	private float m_maxAngleSpread;

	[Token(Token = "0x40015EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[UnityEngine.Tooltip("Amount of force to apply when being pushed back")]
	private float m_pushBackForce;

	[Token(Token = "0x40015EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("How long the push back will last for before the agent can regain control")]
	private float m_pushBackDuration;

	[Token(Token = "0x40015F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	[UnityEngine.Tooltip("Slow down player speed")]
	private bool m_applySlowDown;

	[Token(Token = "0x40015F1")]
	private const float k_pushBackTimeout = 0.25f;

	[Token(Token = "0x40015F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<PushBackAgents> m_pushedBackAgents;

	[Token(Token = "0x6001B2D")]
	[Address(RVA = "0x11FDD90", Offset = "0x11FDD90", VA = "0x11FDD90")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B2E")]
	[Address(RVA = "0x11FDEC0", Offset = "0x11FDEC0", VA = "0x11FDEC0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001B2F")]
	[Address(RVA = "0x11FDFF0", Offset = "0x11FDFF0", VA = "0x11FDFF0")]
	public void DamageDealtToAgent(IAgent otherAgent)
	{
	}

	[Token(Token = "0x6001B30")]
	[Address(RVA = "0x11FE480", Offset = "0x11FE480", VA = "0x11FE480")]
	public ApplyPushBackOnImpact()
	{
	}
}
[Token(Token = "0x20004A8")]
[CreateAssetMenu(menuName = "Battle Sister/Armor Descriptions")]
public class ArmorDescriptions : SingletonScriptableObject<ArmorDescriptions>
{
	[Token(Token = "0x40015F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PhysicMaterial[] m_armoredPhysicMaterials;

	[Token(Token = "0x6001B32")]
	[Address(RVA = "0x11FE524", Offset = "0x11FE524", VA = "0x11FE524")]
	public bool IsArmor(PhysicMaterial physicMaterial)
	{
		return default(bool);
	}

	[Token(Token = "0x6001B33")]
	[Address(RVA = "0x11FE608", Offset = "0x11FE608", VA = "0x11FE608")]
	public ArmorDescriptions()
	{
	}
}
[Token(Token = "0x20004A9")]
[DisallowMultipleComponent]
public class CollisionPropagator : MonoBehaviour
{
	[Token(Token = "0x40015F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ICollisionReceiver m_collisionReceiver;

	[Token(Token = "0x6001B34")]
	[Address(RVA = "0x11FE650", Offset = "0x11FE650", VA = "0x11FE650")]
	private void Start()
	{
	}

	[Token(Token = "0x6001B35")]
	[Address(RVA = "0x11FE708", Offset = "0x11FE708", VA = "0x11FE708")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6001B36")]
	[Address(RVA = "0x11FE7B8", Offset = "0x11FE7B8", VA = "0x11FE7B8")]
	private void OnCollisionStay(Collision other)
	{
	}

	[Token(Token = "0x6001B37")]
	[Address(RVA = "0x11FE86C", Offset = "0x11FE86C", VA = "0x11FE86C")]
	private void OnCollisionExit(Collision other)
	{
	}

	[Token(Token = "0x6001B38")]
	[Address(RVA = "0x11FE920", Offset = "0x11FE920", VA = "0x11FE920")]
	public CollisionPropagator()
	{
	}
}
[Token(Token = "0x20004AA")]
public interface ICollisionReceiver
{
	[Token(Token = "0x6001B39")]
	void OnCollisionEnter(Collision other);

	[Token(Token = "0x6001B3A")]
	void OnCollisionStay(Collision other);

	[Token(Token = "0x6001B3B")]
	void OnCollisionExit(Collision other);
}
[Token(Token = "0x20004AB")]
public class InterpolatedTransform : CachedMonoBehaviour
{
	[Token(Token = "0x20004AC")]
	private struct TransformData
	{
		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Position;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion Rotation;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 Scale;

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x11FEAA8", Offset = "0x11FEAA8", VA = "0x11FEAA8")]
		public TransformData(Vector3 position, Quaternion rotation, Vector3 scale)
		{
		}
	}

	[Token(Token = "0x20004AD")]
	[CompilerGenerated]
	private sealed class <LateFixedUpdateCycle>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InterpolatedTransform <>4__this;

		[Token(Token = "0x17000413")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001B4A")]
			[Address(RVA = "0x11FF428", Offset = "0x11FF428", VA = "0x11FF428", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000414")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001B4C")]
			[Address(RVA = "0x11FF470", Offset = "0x11FF470", VA = "0x11FF470", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x11FEDA8", Offset = "0x11FEDA8", VA = "0x11FEDA8")]
		[DebuggerHidden]
		public <LateFixedUpdateCycle>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x11FF320", Offset = "0x11FF320", VA = "0x11FF320", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x11FF324", Offset = "0x11FF324", VA = "0x11FF324", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x11FF430", Offset = "0x11FF430", VA = "0x11FF430", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40015F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_interpolateTranslation;

	[Token(Token = "0x40015F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	private bool m_interpolateRotation;

	[Token(Token = "0x40015F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	[SerializeField]
	private bool m_interpolateScale;

	[Token(Token = "0x40015FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	[Header("Debug")]
	[SerializeField]
	private bool m_displayDebugGizmos;

	[Token(Token = "0x40015FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TransformData[] m_lastTransforms;

	[Token(Token = "0x40015FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_newTransformIndex;

	[Token(Token = "0x40015FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool m_previouslyKinematic;

	[Token(Token = "0x40015FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Coroutine m_lateFixedUpdateCycleCoroutine;

	[Token(Token = "0x40015FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private WaitForFixedUpdate m_waitForFixedUpdateCachedYieldInstruction;

	[Token(Token = "0x17000412")]
	private int OldTransformIndex
	{
		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x11FF03C", Offset = "0x11FF03C", VA = "0x11FF03C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001B3C")]
	[Address(RVA = "0x11FE928", Offset = "0x11FE928", VA = "0x11FE928")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B3D")]
	[Address(RVA = "0x11FEB40", Offset = "0x11FEB40", VA = "0x11FEB40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001B3E")]
	[Address(RVA = "0x11FEB84", Offset = "0x11FEB84", VA = "0x11FEB84")]
	public void ForgetPreviousTransforms(bool forgetPosition, bool forgetRotation, bool forgetScale)
	{
	}

	[Token(Token = "0x6001B3F")]
	[Address(RVA = "0x11FEC98", Offset = "0x11FEC98", VA = "0x11FEC98")]
	public void AdjustCachedPositionForRotation(float angleDegrees, Vector3 about)
	{
	}

	[Token(Token = "0x6001B40")]
	[Address(RVA = "0x11FEACC", Offset = "0x11FEACC", VA = "0x11FEACC")]
	[IteratorStateMachine(typeof(<LateFixedUpdateCycle>d__13))]
	private IEnumerator LateFixedUpdateCycle()
	{
		return null;
	}

	[Token(Token = "0x6001B41")]
	[Address(RVA = "0x11FEDD0", Offset = "0x11FEDD0", VA = "0x11FEDD0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001B42")]
	[Address(RVA = "0x11FEF30", Offset = "0x11FEF30", VA = "0x11FEF30")]
	private void LateFixedUpdate()
	{
	}

	[Token(Token = "0x6001B43")]
	[Address(RVA = "0x11FF04C", Offset = "0x11FF04C", VA = "0x11FF04C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001B45")]
	[Address(RVA = "0x11FF308", Offset = "0x11FF308", VA = "0x11FF308")]
	public InterpolatedTransform()
	{
	}
}
[Token(Token = "0x20004AE")]
public class InterpolationController : PT.Singleton<InterpolationController>
{
	[Token(Token = "0x4001606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] m_lastFixedUpdateTimes;

	[Token(Token = "0x4001607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_newTimeIndex;

	[Token(Token = "0x4001608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_interpolationFactor;

	[Token(Token = "0x17000415")]
	public float InterpolationFactor
	{
		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x11FF478", Offset = "0x11FF478", VA = "0x11FF478")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000416")]
	private int OldTimeIndex
	{
		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x11FF628", Offset = "0x11FF628", VA = "0x11FF628")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001B4E")]
	[Address(RVA = "0x11FF480", Offset = "0x11FF480", VA = "0x11FF480")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B4F")]
	[Address(RVA = "0x11FF530", Offset = "0x11FF530", VA = "0x11FF530")]
	private void Start()
	{
	}

	[Token(Token = "0x6001B50")]
	[Address(RVA = "0x11FF5D0", Offset = "0x11FF5D0", VA = "0x11FF5D0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001B51")]
	[Address(RVA = "0x11FF638", Offset = "0x11FF638", VA = "0x11FF638")]
	private void Update()
	{
	}

	[Token(Token = "0x6001B53")]
	[Address(RVA = "0x11FF72C", Offset = "0x11FF72C", VA = "0x11FF72C")]
	public InterpolationController()
	{
	}
}
[Token(Token = "0x20004AF")]
[RequireComponent(typeof(Rigidbody))]
public class ForceTowardsLocalPosition : CachedMonoBehaviour
{
	[Token(Token = "0x4001609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_unitForceToApply;

	[Token(Token = "0x400160A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float m_unitTorqueToApply;

	[Token(Token = "0x400160B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 m_targetLocalPosition;

	[Token(Token = "0x400160C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion m_targetLocalRotation;

	[Token(Token = "0x6001B54")]
	[Address(RVA = "0x11FF798", Offset = "0x11FF798", VA = "0x11FF798")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B55")]
	[Address(RVA = "0x11FF7E8", Offset = "0x11FF7E8", VA = "0x11FF7E8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001B56")]
	[Address(RVA = "0x11FF9EC", Offset = "0x11FF9EC", VA = "0x11FF9EC")]
	public ForceTowardsLocalPosition()
	{
	}
}
[Token(Token = "0x20004B0")]
public class IgnoreCollisions : MonoBehaviour
{
	[Token(Token = "0x400160D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("List the colliders that the collider on this game object should not collide with.")]
	[SerializeField]
	private Collider[] m_ignoreCollisionsAgainst;

	[Token(Token = "0x6001B57")]
	[Address(RVA = "0x11FF9F4", Offset = "0x11FF9F4", VA = "0x11FF9F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B58")]
	[Address(RVA = "0x11FFB10", Offset = "0x11FFB10", VA = "0x11FFB10")]
	public IgnoreCollisions()
	{
	}
}
[Token(Token = "0x20004B1")]
public class IgnoreCollisionsGrouped : MonoBehaviour
{
	[Token(Token = "0x400160E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Collider> m_colliders;

	[Token(Token = "0x6001B59")]
	[Address(RVA = "0x11FFB18", Offset = "0x11FFB18", VA = "0x11FFB18")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B5A")]
	[Address(RVA = "0x11FFC08", Offset = "0x11FFC08", VA = "0x11FFC08")]
	public IgnoreCollisionsGrouped()
	{
	}
}
[Token(Token = "0x20004B2")]
public class Pendulum : CachedMonoBehaviour
{
	[Token(Token = "0x400160F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float mass;

	[Token(Token = "0x4001610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float ropeLength;

	[Token(Token = "0x4001611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 m_gravityDirection;

	[Token(Token = "0x4001612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 m_tensionDirection;

	[Token(Token = "0x4001613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_pendulumSideDirection;

	[Token(Token = "0x4001614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_tensionForce;

	[Token(Token = "0x4001615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_gravityForce;

	[Token(Token = "0x4001616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 m_lookUpVector;

	[Token(Token = "0x4001617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 m_currentVelocity;

	[Token(Token = "0x4001618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 m_currentStatePosition;

	[Token(Token = "0x4001619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 m_previousStatePosition;

	[Token(Token = "0x400161A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float m_dt;

	[Token(Token = "0x400161B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float m_currentTime;

	[Token(Token = "0x400161C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float m_accumulator;

	[Token(Token = "0x400161D")]
	private const float c_maxAccumulatorValue = 5f;

	[Token(Token = "0x6001B5B")]
	[Address(RVA = "0x11FFC10", Offset = "0x11FFC10", VA = "0x11FFC10")]
	private void Start()
	{
	}

	[Token(Token = "0x6001B5C")]
	[Address(RVA = "0x11FFDB4", Offset = "0x11FFDB4", VA = "0x11FFDB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001B5D")]
	[Address(RVA = "0x11FFF70", Offset = "0x11FFF70", VA = "0x11FFF70")]
	private Vector3 PendulumUpdate(Vector3 currentStatePosition, float deltaTime)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001B5E")]
	[Address(RVA = "0x120059C", Offset = "0x120059C", VA = "0x120059C")]
	private Vector3 GetPointOnLine(Vector3 start, Vector3 end, float distanceFromStart)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001B5F")]
	[Address(RVA = "0x12006B0", Offset = "0x12006B0", VA = "0x12006B0")]
	public Pendulum()
	{
	}
}
[Token(Token = "0x20004B3")]
public class PenetrationEdge : CachedMonoBehaviour
{
	[Token(Token = "0x20004B4")]
	public enum PenetrationType
	{
		[Token(Token = "0x4001628")]
		Pierce,
		[Token(Token = "0x4001629")]
		Embed
	}

	[Token(Token = "0x20004B5")]
	private struct PenetrationInfo
	{
		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ConfigurableJoint joint;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool hasSunk;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IImpaleable impaleable;
	}

	[Token(Token = "0x20004B6")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass18_0
	{
		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rigidbody otherRigidBody;

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0x1201FFC", Offset = "0x1201FFC", VA = "0x1201FFC")]
		public <>c__DisplayClass18_0()
		{
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0x1202004", Offset = "0x1202004", VA = "0x1202004")]
		internal void <StartPenetration>b__0(Rigidbody replacementRigidbody)
		{
		}
	}

	[Token(Token = "0x20004B7")]
	[CompilerGenerated]
	private sealed class <StartPenetration>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collision other;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PenetrationEdge <>4__this;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private <>c__DisplayClass18_0 <>8__1;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ContactPoint <firstContact>5__2;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IImpaleable <impaleable>5__3;

		[Token(Token = "0x17000419")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0x120287C", Offset = "0x120287C", VA = "0x120287C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001B75")]
			[Address(RVA = "0x12028C4", Offset = "0x12028C4", VA = "0x12028C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0x1200F14", Offset = "0x1200F14", VA = "0x1200F14")]
		[DebuggerHidden]
		public <StartPenetration>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0x120200C", Offset = "0x120200C", VA = "0x120200C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001B72")]
		[Address(RVA = "0x1202010", Offset = "0x1202010", VA = "0x1202010", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0x1202884", Offset = "0x1202884", VA = "0x1202884", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400161E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PenetrationType m_type;

	[Token(Token = "0x400161F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Min(0f)]
	[SerializeField]
	private float m_length;

	[Token(Token = "0x4001620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Min(0f)]
	[SerializeField]
	private float m_depth;

	[Token(Token = "0x4001621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("Damping value to apply once embedded in something. The higher the value, the more we'll resist sliding around. Set to zero for frictionless movement.")]
	private float m_movementDamping;

	[Token(Token = "0x4001622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PenetrationEdgeContainer m_parentContainer;

	[Token(Token = "0x4001623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action<PenetrationType, Transform, float> OnPenetrateStart;

	[Token(Token = "0x4001624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action<float> OnPenetrateStay;

	[Token(Token = "0x4001625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action OnPenetrateStop;

	[Token(Token = "0x4001626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<PenetrationInfo> m_activePenetrations;

	[Token(Token = "0x17000417")]
	public float Length
	{
		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x12006D0", Offset = "0x12006D0", VA = "0x12006D0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000418")]
	public int ActiveJointCount
	{
		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x1200750", Offset = "0x1200750", VA = "0x1200750")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001B61")]
	[Address(RVA = "0x12006D8", Offset = "0x12006D8", VA = "0x12006D8")]
	public void Init(PenetrationEdgeContainer parentContainer)
	{
	}

	[Token(Token = "0x6001B63")]
	[Address(RVA = "0x120079C", Offset = "0x120079C", VA = "0x120079C")]
	public bool HasActivePenetrationWith(Rigidbody rb)
	{
		return default(bool);
	}

	[Token(Token = "0x6001B64")]
	[Address(RVA = "0x1200960", Offset = "0x1200960", VA = "0x1200960")]
	public bool CanStartPenetration(Collision other, out float speedAlongAxis)
	{
		return default(bool);
	}

	[Token(Token = "0x6001B65")]
	[Address(RVA = "0x1200E84", Offset = "0x1200E84", VA = "0x1200E84")]
	[IteratorStateMachine(typeof(<StartPenetration>d__18))]
	public IEnumerator StartPenetration(Collision other)
	{
		return null;
	}

	[Token(Token = "0x6001B66")]
	[Address(RVA = "0x1200F3C", Offset = "0x1200F3C", VA = "0x1200F3C")]
	private void StopPenetration(PenetrationInfo penetration)
	{
	}

	[Token(Token = "0x6001B67")]
	[Address(RVA = "0x120148C", Offset = "0x120148C", VA = "0x120148C")]
	public void StopAllPenetrations()
	{
	}

	[Token(Token = "0x6001B68")]
	[Address(RVA = "0x120163C", Offset = "0x120163C", VA = "0x120163C")]
	public void StopAllPenetrationsWith(Rigidbody impaledBody)
	{
	}

	[Token(Token = "0x6001B69")]
	[Address(RVA = "0x12010CC", Offset = "0x12010CC", VA = "0x12010CC")]
	private void SetColliderIgnoresContainer(Rigidbody ignoringRigidBody, bool ignore)
	{
	}

	[Token(Token = "0x6001B6A")]
	[Address(RVA = "0x1201848", Offset = "0x1201848", VA = "0x1201848")]
	private void Update()
	{
	}

	[Token(Token = "0x6001B6B")]
	[Address(RVA = "0x1201CD4", Offset = "0x1201CD4", VA = "0x1201CD4")]
	private float GetDepth(ConfigurableJoint joint)
	{
		return default(float);
	}

	[Token(Token = "0x6001B6C")]
	[Address(RVA = "0x1201DA0", Offset = "0x1201DA0", VA = "0x1201DA0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001B6D")]
	[Address(RVA = "0x1201F64", Offset = "0x1201F64", VA = "0x1201F64")]
	public PenetrationEdge()
	{
	}
}
[Token(Token = "0x20004B8")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(VelocityTrackerComponent))]
public class PenetrationEdgeContainer : CachedMonoBehaviour
{
	[Token(Token = "0x20004B9")]
	[CompilerGenerated]
	private sealed class <get_ChildColliders>d__17 : IEnumerable<Collider>, IEnumerable, IEnumerator<Collider>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider <>2__current;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PenetrationEdgeContainer <>4__this;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] <>7__wrap1;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Token(Token = "0x17000421")]
		private Collider System.Collections.Generic.IEnumerator<UnityEngine.Collider>.Current
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0x1203348", Offset = "0x1203348", VA = "0x1203348", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000422")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0x1203390", Offset = "0x1203390", VA = "0x1203390", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0x1202C18", Offset = "0x1202C18", VA = "0x1202C18")]
		[DebuggerHidden]
		public <get_ChildColliders>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0x1203284", Offset = "0x1203284", VA = "0x1203284", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0x1203288", Offset = "0x1203288", VA = "0x1203288", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0x1203350", Offset = "0x1203350", VA = "0x1203350", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0x1203398", Offset = "0x1203398", VA = "0x1203398", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<Collider> System.Collections.Generic.IEnumerable<UnityEngine.Collider>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0x1203444", Offset = "0x1203444", VA = "0x1203444", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4001635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PenetrationEdge[] m_penetrationEdges;

	[Token(Token = "0x4001636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Collider[] m_childColliders;

	[Token(Token = "0x4001637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private VelocityTrackerComponent m_velocityTrackerComponent;

	[Token(Token = "0x4001638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private WorldInteraction m_associatedInteraction;

	[Token(Token = "0x4001639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_impactLayerMask;

	[Token(Token = "0x400163A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_canPenetrateArmor;

	[Token(Token = "0x1700041B")]
	public PenetrationEdge[] PenetrationEdges
	{
		[Token(Token = "0x6001B76")]
		[Address(RVA = "0x12028CC", Offset = "0x12028CC", VA = "0x12028CC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700041C")]
	public WorldInteraction AssociatedInteraction
	{
		[Token(Token = "0x6001B77")]
		[Address(RVA = "0x12028D4", Offset = "0x12028D4", VA = "0x12028D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700041D")]
	public int PenetrationCount
	{
		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0x1202AF8", Offset = "0x1202AF8", VA = "0x1202AF8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700041E")]
	public bool HasAnyPenetrations
	{
		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0x1202C00", Offset = "0x1202C00", VA = "0x1202C00")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700041F")]
	public IEnumerable<Collider> ChildColliders
	{
		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0x12017C4", Offset = "0x12017C4", VA = "0x12017C4")]
		[IteratorStateMachine(typeof(<get_ChildColliders>d__17))]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000420")]
	public Vector3 CurrentVelocity
	{
		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0x1200E6C", Offset = "0x1200E6C", VA = "0x1200E6C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001B78")]
	[Address(RVA = "0x12028DC", Offset = "0x12028DC", VA = "0x12028DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001B79")]
	[Address(RVA = "0x1202AF0", Offset = "0x1202AF0", VA = "0x1202AF0")]
	public void SetAssociatedInteraction(WorldInteraction interaction)
	{
	}

	[Token(Token = "0x6001B7E")]
	[Address(RVA = "0x12025A4", Offset = "0x12025A4", VA = "0x12025A4")]
	public ConfigurableJoint CreateNewPenetrationJoint(Transform edgeTransform, float edgeDepth, float damper, Vector3 edgeLocalHitPosition, Vector3 otherLocalHitPosition)
	{
		return null;
	}

	[Token(Token = "0x6001B7F")]
	[Address(RVA = "0x1202FB8", Offset = "0x1202FB8", VA = "0x1202FB8")]
	public void SetCanPenetrateArmor(bool canPenetrateArmor)
	{
	}

	[Token(Token = "0x6001B80")]
	[Address(RVA = "0x1202FC4", Offset = "0x1202FC4", VA = "0x1202FC4")]
	private bool PenetrationExists(Rigidbody rb)
	{
		return default(bool);
	}

	[Token(Token = "0x6001B81")]
	[Address(RVA = "0x12030A0", Offset = "0x12030A0", VA = "0x12030A0")]
	public void StopAllPenetrations()
	{
	}

	[Token(Token = "0x6001B82")]
	[Address(RVA = "0x120315C", Offset = "0x120315C", VA = "0x120315C")]
	public void StopAllPenetrationsWith(Rigidbody impaledBody)
	{
	}

	[Token(Token = "0x6001B83")]
	[Address(RVA = "0x1203228", Offset = "0x1203228", VA = "0x1203228")]
	public PenetrationEdgeContainer()
	{
	}
}
[Token(Token = "0x20004BA")]
public class PidController
{
	[Token(Token = "0x4001641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 m_lastError;

	[Token(Token = "0x4001642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_integral;

	[Token(Token = "0x4001643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_hasEverCalculated;

	[Token(Token = "0x4001644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_latestFixedCalculationTime;

	[Token(Token = "0x4001645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GlobalHoldProperties.ResolutionData m_resolutionData;

	[Token(Token = "0x4001646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 m_latestProportional;

	[Token(Token = "0x4001647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_latestIntegral;

	[Token(Token = "0x4001648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 m_latestDerivative;

	[Token(Token = "0x4001649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 m_gizmoOrigin;

	[Token(Token = "0x6001B8D")]
	[Address(RVA = "0x1203448", Offset = "0x1203448", VA = "0x1203448")]
	public PidController(GlobalHoldProperties.ResolutionData resolutionData)
	{
	}

	[Token(Token = "0x6001B8E")]
	[Address(RVA = "0x12034D8", Offset = "0x12034D8", VA = "0x12034D8")]
	public Vector3 CalculateControl(Vector3 error, float deltaTime, [Optional] Vector3? gizmoDrawOrigin)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001B8F")]
	[Address(RVA = "0x1203700", Offset = "0x1203700", VA = "0x1203700")]
	public void DrawGizmos()
	{
	}
}
[Token(Token = "0x20004BB")]
[DisallowMultipleComponent]
public class PlayerWindZone : CachedMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004BC")]
	private enum WindMode
	{
		[Token(Token = "0x400164D")]
		Spherical,
		[Token(Token = "0x400164E")]
		DirectionalForward,
		[Token(Token = "0x400164F")]
		DirectionalRight,
		[Token(Token = "0x4001650")]
		DirectionalBackward,
		[Token(Token = "0x4001651")]
		DirectionalLeft
	}

	[Token(Token = "0x400164A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Min(0f)]
	private float m_acceleration;

	[Token(Token = "0x400164B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private WindMode m_mode;

	[Token(Token = "0x6001B90")]
	[Address(RVA = "0x1203704", Offset = "0x1203704", VA = "0x1203704")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6001B91")]
	[Address(RVA = "0x1203BF0", Offset = "0x1203BF0", VA = "0x1203BF0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001B92")]
	[Address(RVA = "0x1203F6C", Offset = "0x1203F6C", VA = "0x1203F6C")]
	public PlayerWindZone()
	{
	}
}
[Token(Token = "0x20004BD")]
public class ToggledMotor : MonoBehaviour
{
	[Token(Token = "0x4001652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x4001653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HingeJoint m_hinge;

	[Token(Token = "0x4001654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool m_kinematicWhenNotActive;

	[Token(Token = "0x4001655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WorldInteraction m_interaciton;

	[Token(Token = "0x4001656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_desiredState;

	[Token(Token = "0x6001B93")]
	[Address(RVA = "0x1203F7C", Offset = "0x1203F7C", VA = "0x1203F7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B94")]
	[Address(RVA = "0x12041CC", Offset = "0x12041CC", VA = "0x12041CC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001B95")]
	[Address(RVA = "0x1204384", Offset = "0x1204384", VA = "0x1204384")]
	private void OnSelect()
	{
	}

	[Token(Token = "0x6001B96")]
	[Address(RVA = "0x1204390", Offset = "0x1204390", VA = "0x1204390")]
	private void OnStop()
	{
	}

	[Token(Token = "0x6001B97")]
	[Address(RVA = "0x120439C", Offset = "0x120439C", VA = "0x120439C")]
	public void SetMotorActive(bool active)
	{
	}

	[Token(Token = "0x6001B98")]
	[Address(RVA = "0x12043A8", Offset = "0x12043A8", VA = "0x12043A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001B99")]
	[Address(RVA = "0x120440C", Offset = "0x120440C", VA = "0x120440C")]
	public ToggledMotor()
	{
	}
}
[Token(Token = "0x20004BE")]
[RequireComponent(typeof(Collider))]
public class TriggerContainDetector : MonoBehaviour
{
	[Token(Token = "0x4001657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider m_cachedCollider;

	[Token(Token = "0x4001658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private HashSet<Collider> m_hitColliders;

	[Token(Token = "0x17000423")]
	public bool ContainsAnything
	{
		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x1204624", Offset = "0x1204624", VA = "0x1204624")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000424")]
	public Collider Collider
	{
		[Token(Token = "0x6001BA2")]
		[Address(RVA = "0x1204698", Offset = "0x1204698", VA = "0x1204698")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001B9A")]
	[Address(RVA = "0x1204414", Offset = "0x1204414", VA = "0x1204414")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001B9B")]
	[Address(RVA = "0x12044C8", Offset = "0x12044C8", VA = "0x12044C8")]
	private void Reset()
	{
	}

	[Token(Token = "0x6001B9C")]
	[Address(RVA = "0x1204518", Offset = "0x1204518", VA = "0x1204518")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001B9D")]
	[Address(RVA = "0x120451C", Offset = "0x120451C", VA = "0x120451C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001B9E")]
	[Address(RVA = "0x1204520", Offset = "0x1204520", VA = "0x1204520")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001B9F")]
	[Address(RVA = "0x1204598", Offset = "0x1204598", VA = "0x1204598")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001BA0")]
	[Address(RVA = "0x12045F0", Offset = "0x12045F0", VA = "0x12045F0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001BA3")]
	[Address(RVA = "0x12046A0", Offset = "0x12046A0", VA = "0x12046A0")]
	public TriggerContainDetector()
	{
	}
}
[Token(Token = "0x20004BF")]
public class VelocityTracker
{
	[Token(Token = "0x4001659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 m_reportedVelocity;

	[Token(Token = "0x400165A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly Transform m_transformToTrack;

	[Token(Token = "0x400165B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform m_frameOfReference;

	[Token(Token = "0x400165C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_hasFrameOfReference;

	[Token(Token = "0x400165D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool m_hasReceivedExtremityUpdate;

	[Token(Token = "0x400165E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_distanceTrackingSpeedThreshold;

	[Token(Token = "0x400165F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3[] m_extremityObjectPositions;

	[Token(Token = "0x4001660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] m_extremityFinalPositions;

	[Token(Token = "0x4001661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_showDebugInfo;

	[Token(Token = "0x4001662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] m_extremityVelocities;

	[Token(Token = "0x4001663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] m_extremityPastSpeedDisplacements;

	[Token(Token = "0x4001664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 m_lastVelocityDirection;

	[Token(Token = "0x4001665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float c_dumpingValue;

	[Token(Token = "0x17000425")]
	public Vector3[] ExtremityVelocities
	{
		[Token(Token = "0x6001BA4")]
		[Address(RVA = "0x12046A8", Offset = "0x12046A8", VA = "0x12046A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000426")]
	public Vector3 Velocity
	{
		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0x1205128", Offset = "0x1205128", VA = "0x1205128")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000427")]
	public float DistanceTravelled
	{
		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0x1205168", Offset = "0x1205168", VA = "0x1205168")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001BA5")]
	[Address(RVA = "0x12046B0", Offset = "0x12046B0", VA = "0x12046B0")]
	public VelocityTracker(Transform transformToTrack, float distanceTrackingSpeedThreshold = 0f)
	{
	}

	[Token(Token = "0x6001BA6")]
	[Address(RVA = "0x120477C", Offset = "0x120477C", VA = "0x120477C")]
	public VelocityTracker(Transform transformToTrack, float distanceTrackingSpeedThreshold, params Vector3[] localExtremityPoints)
	{
	}

	[Token(Token = "0x6001BA7")]
	[Address(RVA = "0x1204BB0", Offset = "0x1204BB0", VA = "0x1204BB0")]
	public void SetSpeedThreshold(float newThreshold)
	{
	}

	[Token(Token = "0x6001BA8")]
	[Address(RVA = "0x1204A10", Offset = "0x1204A10", VA = "0x1204A10")]
	private void ResetSpatialData()
	{
	}

	[Token(Token = "0x6001BA9")]
	[Address(RVA = "0x1204BB8", Offset = "0x1204BB8", VA = "0x1204BB8")]
	public void SetFrameOfReference(Transform frameOfReference)
	{
	}

	[Token(Token = "0x6001BAA")]
	[Address(RVA = "0x1204C80", Offset = "0x1204C80", VA = "0x1204C80")]
	public void ClearFrameOfReference()
	{
	}

	[Token(Token = "0x6001BAB")]
	[Address(RVA = "0x1204C88", Offset = "0x1204C88", VA = "0x1204C88")]
	public void SetDebugInfoShown(bool showDebugInfo)
	{
	}

	[Token(Token = "0x6001BAC")]
	[Address(RVA = "0x1204C94", Offset = "0x1204C94", VA = "0x1204C94")]
	public void UpdateVelocity()
	{
	}

	[Token(Token = "0x6001BAD")]
	[Address(RVA = "0x1204E74", Offset = "0x1204E74", VA = "0x1204E74")]
	private void UpdateExtremity(int extremityIndex, out Vector3 velocity, out Vector3 moveDelta)
	{
	}

	[Token(Token = "0x6001BAE")]
	[Address(RVA = "0x12050A4", Offset = "0x12050A4", VA = "0x12050A4")]
	public bool AllExtremitiesTravelledRequiredDistance(float requiredDistance)
	{
		return default(bool);
	}
}
[Token(Token = "0x20004C0")]
public class VelocityTrackerComponent : CachedMonoBehaviour
{
	[Token(Token = "0x20004C1")]
	private enum UpdateMode
	{
		[Token(Token = "0x4001675")]
		LateUpdate,
		[Token(Token = "0x4001676")]
		FixedUpdate
	}

	[Token(Token = "0x4001666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public VelocityTracker m_velocityTracker;

	[Token(Token = "0x4001667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x4001668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("When should the tracker update. FixedUpdate results in more accurate, less erratic data.")]
	[SerializeField]
	private UpdateMode m_updateMode;

	[Token(Token = "0x4001669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("When detecting velocity, we'll use whichever of these points in local space is moving the slowest. Use this to avoid jiggle tactics with melee weapons, etc. You'll usually want one at the base of the item and another at the tip.")]
	[SerializeField]
	private Vector3[] m_velocityTrackingPoints;

	[Token(Token = "0x400166A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("Only track distance covered for as long as the slowest tracking point is moving at least this fast.")]
	[SerializeField]
	[Min(0f)]
	private float m_distanceTrackingSpeedThreshold;

	[Token(Token = "0x400166B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[UnityEngine.Tooltip("Velocity will only be reported if the total cumulative distance travelled (while moving fast enough) is at least this much.")]
	[Min(0.01f)]
	private float m_minRequiredDistance;

	[Token(Token = "0x400166C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, debug information will be shown in the HUD reporting the velocity and current swing distance for this tracker.")]
	[Space]
	private bool m_showDebugInfo;

	[Token(Token = "0x400166D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int m_uniqueId;

	[Token(Token = "0x400166E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool m_active;

	[Token(Token = "0x400166F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private WorldInteraction_Hold m_attachedHoldable;

	[Token(Token = "0x4001670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[UnityEngine.Tooltip("The initial frame of reference. This can be changed later. The frame is set in a .NET object - updates will not be reflected here!")]
	private Transform m_initialFrameOfReference;

	[Token(Token = "0x4001671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[UnityEngine.Tooltip("Velocity and distance reports will give the lower of this object or the linked object, if not null. Reassigned as an attached holdable is grabbed and dropped.")]
	[FormerlySerializedAs("m_linkedVelocityTracker")]
	[SerializeField]
	private VelocityTrackerComponent m_linkedVelocityTrackerComponent;

	[Token(Token = "0x4001672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private VelocityTrackerComponent m_primaryHandVelocityTrackerComponent;

	[Token(Token = "0x4001673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private VelocityTrackerComponent m_secondaryHandVelocityTrackerComponent;

	[Token(Token = "0x17000428")]
	public int CurrentGestureId
	{
		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0x120529C", Offset = "0x120529C", VA = "0x120529C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000429")]
	public Vector3 Velocity
	{
		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0x1202C4C", Offset = "0x1202C4C", VA = "0x1202C4C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001BB2")]
	[Address(RVA = "0x12052A4", Offset = "0x12052A4", VA = "0x12052A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001BB3")]
	[Address(RVA = "0x1205808", Offset = "0x1205808", VA = "0x1205808")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001BB4")]
	[Address(RVA = "0x1205BF8", Offset = "0x1205BF8", VA = "0x1205BF8")]
	private void RefreshHeldTrackers()
	{
	}

	[Token(Token = "0x6001BB5")]
	[Address(RVA = "0x1205D7C", Offset = "0x1205D7C", VA = "0x1205D7C")]
	private void OnInteractionStart()
	{
	}

	[Token(Token = "0x6001BB6")]
	[Address(RVA = "0x1205E28", Offset = "0x1205E28", VA = "0x1205E28")]
	private void OnInteractionSelectSecondHand()
	{
	}

	[Token(Token = "0x6001BB7")]
	[Address(RVA = "0x1205E2C", Offset = "0x1205E2C", VA = "0x1205E2C")]
	private void OnInteractionSwap()
	{
	}

	[Token(Token = "0x6001BB8")]
	[Address(RVA = "0x1205E30", Offset = "0x1205E30", VA = "0x1205E30")]
	private void OnInteractionStop()
	{
	}

	[Token(Token = "0x6001BB9")]
	[Address(RVA = "0x1205E64", Offset = "0x1205E64", VA = "0x1205E64")]
	private void OnInteractionStopSecondHand()
	{
	}

	[Token(Token = "0x6001BBA")]
	[Address(RVA = "0x1205E68", Offset = "0x1205E68", VA = "0x1205E68")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001BBB")]
	[Address(RVA = "0x1205F98", Offset = "0x1205F98", VA = "0x1205F98")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001BBC")]
	[Address(RVA = "0x1205E78", Offset = "0x1205E78", VA = "0x1205E78")]
	private void UpdateTracker()
	{
	}

	[Token(Token = "0x6001BBD")]
	[Address(RVA = "0x1205E10", Offset = "0x1205E10", VA = "0x1205E10")]
	public void SetFrameOfReference(Transform frameOfReference)
	{
	}

	[Token(Token = "0x6001BBE")]
	[Address(RVA = "0x1205E48", Offset = "0x1205E48", VA = "0x1205E48")]
	public void ClearFrameOfReference()
	{
	}

	[Token(Token = "0x6001BC0")]
	[Address(RVA = "0x1205FAC", Offset = "0x1205FAC", VA = "0x1205FAC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001BC1")]
	[Address(RVA = "0x120608C", Offset = "0x120608C", VA = "0x120608C")]
	public VelocityTrackerComponent()
	{
	}
}
[Token(Token = "0x20004C2")]
public static class IOwnerExtensionMethods
{
	[Token(Token = "0x6001BC2")]
	[Address(RVA = "0x12060A0", Offset = "0x12060A0", VA = "0x12060A0")]
	public static HealthStatus RootHealthStatus(this IOwner owner)
	{
		return null;
	}

	[Token(Token = "0x6001BC3")]
	[Address(RVA = "0x1200D28", Offset = "0x1200D28", VA = "0x1200D28")]
	public static PriorityTarget PriorityTarget(this IOwner owner)
	{
		return null;
	}

	[Token(Token = "0x6001BC4")]
	[Address(RVA = "0x11FD034", Offset = "0x11FD034", VA = "0x11FD034")]
	public static bool IsHumanPlayer(this IOwner owner)
	{
		return default(bool);
	}
}
[Token(Token = "0x20004C3")]
public class RenderersVisibilityHelper : CachedMonoBehaviour
{
	[Token(Token = "0x4001677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Renderer[] m_renderers;

	[Token(Token = "0x1700042A")]
	public Renderer[] Renderers
	{
		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0x1206240", Offset = "0x1206240", VA = "0x1206240")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001BC6")]
	[Address(RVA = "0x1206248", Offset = "0x1206248", VA = "0x1206248")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001BC7")]
	[Address(RVA = "0x12063D4", Offset = "0x12063D4", VA = "0x12063D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001BC8")]
	[Address(RVA = "0x12063E8", Offset = "0x12063E8", VA = "0x12063E8")]
	public void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x6001BC9")]
	[Address(RVA = "0x12064CC", Offset = "0x12064CC", VA = "0x12064CC")]
	public void SetGameObjectLayer(int layer)
	{
	}

	[Token(Token = "0x6001BCA")]
	[Address(RVA = "0x12065B4", Offset = "0x12065B4", VA = "0x12065B4")]
	public RenderersVisibilityHelper()
	{
	}
}
[Token(Token = "0x20004C5")]
public class UseHealthItem : MonoBehaviour
{
	[Token(Token = "0x400167A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private VrHealthItem m_healthItem;

	[Token(Token = "0x400167B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int playerHeadLayer;

	[Token(Token = "0x6001BCE")]
	[Address(RVA = "0x1206690", Offset = "0x1206690", VA = "0x1206690")]
	private void Start()
	{
	}

	[Token(Token = "0x6001BCF")]
	[Address(RVA = "0x12066E0", Offset = "0x12066E0", VA = "0x12066E0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001BD0")]
	[Address(RVA = "0x1206868", Offset = "0x1206868", VA = "0x1206868")]
	public UseHealthItem()
	{
	}
}
[Token(Token = "0x20004C6")]
public class VrCurrencyItem : VrItem
{
	[Token(Token = "0x400167C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	[SerializeField]
	private int m_coinAmount;

	[Token(Token = "0x400167D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private ItemShop m_itemShop;

	[Token(Token = "0x1700042B")]
	public ItemShop ItemShop
	{
		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0x1206870", Offset = "0x1206870", VA = "0x1206870")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001BD2")]
	[Address(RVA = "0x1206918", Offset = "0x1206918", VA = "0x1206918", Slot = "31")]
	public override void OnItemGripped()
	{
	}

	[Token(Token = "0x6001BD3")]
	[Address(RVA = "0x1206FD0", Offset = "0x1206FD0", VA = "0x1206FD0")]
	public VrCurrencyItem()
	{
	}
}
[Token(Token = "0x20004C7")]
public class VrHealthItem : VrItem
{
	[Token(Token = "0x400167E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[Header("VrHealthItem")]
	[SerializeField]
	private HealthStatusInfo m_healthInfo;

	[Token(Token = "0x400167F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public Action ActionOnItemUsed;

	[Token(Token = "0x4001680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private bool m_itemUsed;

	[Token(Token = "0x1700042C")]
	protected override bool CanEmitItemDroppedEvent
	{
		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0x12070C4", Offset = "0x12070C4", VA = "0x12070C4", Slot = "44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001BD5")]
	[Address(RVA = "0x12070D4", Offset = "0x12070D4", VA = "0x12070D4", Slot = "25")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001BD6")]
	[Address(RVA = "0x1207A9C", Offset = "0x1207A9C", VA = "0x1207A9C", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001BD7")]
	[Address(RVA = "0x12067AC", Offset = "0x12067AC", VA = "0x12067AC")]
	public void TryUseHealthItem(HealthStatus playerHealth)
	{
	}

	[Token(Token = "0x6001BD8")]
	[Address(RVA = "0x1207D98", Offset = "0x1207D98", VA = "0x1207D98")]
	private void UseHealthItem(HealthStatus playerHealth)
	{
	}

	[Token(Token = "0x6001BD9")]
	[Address(RVA = "0x1207FE8", Offset = "0x1207FE8", VA = "0x1207FE8")]
	public VrHealthItem()
	{
	}
}
[Token(Token = "0x20004C8")]
[DisallowMultipleComponent]
public class VrItem : Poolable, IHideable, ICanHide, IPoolable
{
	[Token(Token = "0x20004C9")]
	public enum TriggerStateType
	{
		[Token(Token = "0x40016C3")]
		Inactive,
		[Token(Token = "0x40016C4")]
		Pressed,
		[Token(Token = "0x40016C5")]
		Held,
		[Token(Token = "0x40016C6")]
		Released
	}

	[Token(Token = "0x20004CA")]
	[CompilerGenerated]
	private sealed class <ReturnToPoolInTime>d__178 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VrItem <>4__this;

		[Token(Token = "0x17000455")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001C3C")]
			[Address(RVA = "0x120BE88", Offset = "0x120BE88", VA = "0x120BE88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000456")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001C3E")]
			[Address(RVA = "0x120BED0", Offset = "0x120BED0", VA = "0x120BED0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0x120BD7C", Offset = "0x120BD7C", VA = "0x120BD7C")]
		[DebuggerHidden]
		public <ReturnToPoolInTime>d__178(int <>1__state)
		{
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0x120BDA4", Offset = "0x120BDA4", VA = "0x120BDA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0x120BDA8", Offset = "0x120BDA8", VA = "0x120BDA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0x120BE90", Offset = "0x120BE90", VA = "0x120BE90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Base item setup")]
	public Identifier m_ID;

	[Token(Token = "0x4001682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected bool m_allowHaptics;

	[Token(Token = "0x4001683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected ManualHaptics m_actionHapticsDefinition;

	[Token(Token = "0x4001684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected ManualHaptics m_secondaryActionHapticsDefinition;

	[Token(Token = "0x4001685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	protected CollisionForwardingHaptics m_collisionHapticsDefinition;

	[Token(Token = "0x4001686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected Transform m_inventoryAnchorTransform;

	[Token(Token = "0x4001687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public WeaponUsageTracker.HolsterType m_holsterType;

	[Token(Token = "0x4001688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected Transform m_secondGripAudioTransform;

	[Token(Token = "0x4001689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[UnityEngine.Tooltip("Distance at which object will be disabled to help performance.")]
	private float m_hideDistance;

	[Token(Token = "0x400168A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[UnityEngine.Tooltip("Enable if the gun has more than one trigger.")]
	[SerializeField]
	private bool m_usesCompoundTriggerPresses;

	[Token(Token = "0x400168B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int m_compoundTriggerPresses;

	[Token(Token = "0x400168C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Fresnel m_visualHighlight;

	[Token(Token = "0x400168D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool m_hasVisualHighlight;

	[Token(Token = "0x400168E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private GlintController m_glint;

	[Token(Token = "0x400168F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private ItemEvents m_events;

	[Token(Token = "0x4001690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[UnityEngine.Tooltip("Remove time after dropped by a dead enemy")]
	[SerializeField]
	private bool m_removeAfterDropped;

	[Token(Token = "0x4001691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[SerializeField]
	private float m_removeAfterDroppedTime;

	[Token(Token = "0x4001692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private IEnumerator m_removeDropCoroutine;

	[Token(Token = "0x4001693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected TriggerStateInactive m_stateInactive;

	[Token(Token = "0x4001694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected TriggerStatePressed m_statePressed;

	[Token(Token = "0x4001695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected TriggerStateHeld m_stateHeld;

	[Token(Token = "0x4001696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected TriggerStateReleased m_stateReleased;

	[Token(Token = "0x4001697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private TriggerStateType m_triggerStateType;

	[Token(Token = "0x4001698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private TriggerStateType m_previousTriggerStateType;

	[Token(Token = "0x4001699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	protected TriggerState m_triggerState;

	[Token(Token = "0x400169A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	protected WorldInteraction m_attachedInteraction;

	[Token(Token = "0x400169B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	protected WorldInteraction_Hold m_attachedHoldInteraction;

	[Token(Token = "0x400169C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private bool m_hasAttachedInteraction;

	[Token(Token = "0x400169D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	private bool m_hasAttachedHoldInteraction;

	[Token(Token = "0x400169E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private PoweredAbility m_poweredAbility;

	[Token(Token = "0x400169F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	protected bool m_itemHeld;

	[Token(Token = "0x40016A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private INetworkVrItem m_networkVrItem;

	[Token(Token = "0x40016A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected bool m_itemSelected;

	[Token(Token = "0x40016A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
	private bool m_canBlockMeleeAttacks;

	[Token(Token = "0x40016A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x142")]
	private bool m_hasBulletBlockingVolume;

	[Token(Token = "0x40016A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x143")]
	private bool m_inInventorySlot;

	[Token(Token = "0x40016A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private Vector3 m_inventoryAnchorLocalPosition;

	[Token(Token = "0x40016A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Quaternion m_inventoryAnchorLocalRotation;

	[Token(Token = "0x40016A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Action OnPlacedInInventory;

	[Token(Token = "0x40016A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Action OnRemovedFromInventory;

	[Token(Token = "0x40016A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<VrItem> OnAnyItemPlacedInInventory;

	[Token(Token = "0x40016AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<VrItem> OnAnyItemRemovedFromInventory;

	[Token(Token = "0x40016AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	internal Action<TriggerStateType> OnSetTriggerState;

	[Token(Token = "0x40016AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float m_lastTimeDropped;

	[Token(Token = "0x40016AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private bool m_trackingFallAfterDrop;

	[Token(Token = "0x40016AE")]
	private const float c_maxFallTimeAfterDrop = 1.5f;

	[Token(Token = "0x40016AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<VrItem> OnAnyItemDroppedOntoGround;

	[Token(Token = "0x40016B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private IOwner m_owningNonPlayer;

	[Token(Token = "0x40016B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private string m_latestCollidedScene;

	[Token(Token = "0x40016B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	protected BoltEntity m_cachedBoltEntity;

	[Token(Token = "0x40016B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private VrItemAudioPlayer m_vrItemAudio;

	[Token(Token = "0x40016B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool m_isBeingBlendedIntoItemVaccum;

	[Token(Token = "0x40016B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	protected Dissolve m_dissolve;

	[Token(Token = "0x40016B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private IOwner m_lastOwner;

	[Token(Token = "0x40016B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private SectorMember m_sectorMember;

	[Token(Token = "0x40016B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Crate m_crate;

	[Token(Token = "0x40016B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x40016BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private RenderersVisibilityHelper m_renderersVisibility;

	[Token(Token = "0x40016BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private ICanHide m_canHideProvider;

	[Token(Token = "0x40016BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private CollisionDetectionMode m_collisionMode;

	[Token(Token = "0x40016BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	protected INetworkEntity m_networkEntity;

	[Token(Token = "0x40016BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	protected bool m_hasNetworkEntity;

	[Token(Token = "0x40016BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly ProfilerMarker s_profileMarker;

	[Token(Token = "0x40016C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly ProfilerMarker s_profileMarker2;

	[Token(Token = "0x40016C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static Action<VrItem, IAgent> OnItemCausedBlockReaction;

	[Token(Token = "0x1700042D")]
	public Transform InventoryAnchorTransform
	{
		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0x120803C", Offset = "0x120803C", VA = "0x120803C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700042E")]
	public Fresnel VisualHighlight
	{
		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x1208044", Offset = "0x1208044", VA = "0x1208044")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700042F")]
	public bool HasVisualHighlight
	{
		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x120804C", Offset = "0x120804C", VA = "0x120804C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000430")]
	public GlintController Glint
	{
		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0x1208054", Offset = "0x1208054", VA = "0x1208054")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000431")]
	public ItemEvents Events
	{
		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0x120805C", Offset = "0x120805C", VA = "0x120805C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000432")]
	protected TriggerStateType CurrentTriggerState
	{
		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0x1208064", Offset = "0x1208064", VA = "0x1208064")]
		get
		{
			return default(TriggerStateType);
		}
	}

	[Token(Token = "0x17000433")]
	public WorldInteraction AttachedInteraction
	{
		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0x120806C", Offset = "0x120806C", VA = "0x120806C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000434")]
	public WorldInteraction_Hold AttachedHoldInteraction
	{
		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0x1208074", Offset = "0x1208074", VA = "0x1208074")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000435")]
	public bool HasAttachedInteraction
	{
		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0x120807C", Offset = "0x120807C", VA = "0x120807C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000436")]
	public bool HasAttachedHoldInteraction
	{
		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0x1208084", Offset = "0x1208084", VA = "0x1208084")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000437")]
	public bool HasPoweredAbility
	{
		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0x120808C", Offset = "0x120808C", VA = "0x120808C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000438")]
	public bool PoweredAbilityIsSwitchedOn
	{
		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0x12080EC", Offset = "0x12080EC", VA = "0x12080EC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000439")]
	public bool CanBlockMeleeAttacks
	{
		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0x1208124", Offset = "0x1208124", VA = "0x1208124")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700043A")]
	public bool HasBulletBlockingVolume
	{
		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0x120812C", Offset = "0x120812C", VA = "0x120812C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700043B")]
	public bool IsInInventorySlot
	{
		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0x1208134", Offset = "0x1208134", VA = "0x1208134")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700043C")]
	public string LatestCollidedScene
	{
		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0x120813C", Offset = "0x120813C", VA = "0x120813C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700043D")]
	public VrItemAudioPlayer VrItemAudioPlayer
	{
		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0x1208144", Offset = "0x1208144", VA = "0x1208144")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700043E")]
	public bool IsBeingBlendedIntoItemVaccum
	{
		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0x120814C", Offset = "0x120814C", VA = "0x120814C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700043F")]
	public Crate crate
	{
		[Token(Token = "0x6001BEC")]
		[Address(RVA = "0x1208154", Offset = "0x1208154", VA = "0x1208154")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001BED")]
		[Address(RVA = "0x120815C", Offset = "0x120815C", VA = "0x120815C")]
		set
		{
		}
	}

	[Token(Token = "0x17000440")]
	public RenderersVisibilityHelper RenderersVisibility
	{
		[Token(Token = "0x6001BEE")]
		[Address(RVA = "0x120816C", Offset = "0x120816C", VA = "0x120816C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000441")]
	public Sector sector
	{
		[Token(Token = "0x6001BEF")]
		[Address(RVA = "0x1208174", Offset = "0x1208174", VA = "0x1208174")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000442")]
	public virtual bool isVisible
	{
		[Token(Token = "0x6001BF0")]
		[Address(RVA = "0x12081F0", Offset = "0x12081F0", VA = "0x12081F0", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000443")]
	public bool isSleeping
	{
		[Token(Token = "0x6001BF1")]
		[Address(RVA = "0x12082C0", Offset = "0x12082C0", VA = "0x12082C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000444")]
	public bool isDissolving
	{
		[Token(Token = "0x6001BF2")]
		[Address(RVA = "0x1208378", Offset = "0x1208378", VA = "0x1208378")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000445")]
	public bool isControlled
	{
		[Token(Token = "0x6001BF3")]
		[Address(RVA = "0x12083FC", Offset = "0x12083FC", VA = "0x12083FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000446")]
	public bool hasControl
	{
		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0x1208494", Offset = "0x1208494", VA = "0x1208494")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000447")]
	private bool ICanHide.canHide
	{
		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0x120852C", Offset = "0x120852C", VA = "0x120852C", Slot = "18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000448")]
	public virtual bool CanHide
	{
		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0x120853C", Offset = "0x120853C", VA = "0x120853C", Slot = "20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000449")]
	public virtual bool canHideVrItem
	{
		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0x12085EC", Offset = "0x12085EC", VA = "0x12085EC", Slot = "21")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700044A")]
	public virtual float hideDistance
	{
		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0x1208628", Offset = "0x1208628", VA = "0x1208628", Slot = "22")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700044B")]
	protected bool ItemControlled
	{
		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0x12087C8", Offset = "0x12087C8", VA = "0x12087C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700044C")]
	public bool ItemHeld
	{
		[Token(Token = "0x6001BFB")]
		[Address(RVA = "0x1208894", Offset = "0x1208894", VA = "0x1208894")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700044D")]
	public virtual IOwner Owner
	{
		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0x120889C", Offset = "0x120889C", VA = "0x120889C", Slot = "24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700044E")]
	public BoltEntity Entity
	{
		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0x1208BFC", Offset = "0x1208BFC", VA = "0x1208BFC", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700044F")]
	public IOwner LastOwner
	{
		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0x1208C04", Offset = "0x1208C04", VA = "0x1208C04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000450")]
	public bool IsOwnedByLocalPlayer
	{
		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0x1208C0C", Offset = "0x1208C0C", VA = "0x1208C0C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000451")]
	public bool AllowHaptics
	{
		[Token(Token = "0x6001C00")]
		[Address(RVA = "0x1208C14", Offset = "0x1208C14", VA = "0x1208C14")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001C01")]
		[Address(RVA = "0x1208C1C", Offset = "0x1208C1C", VA = "0x1208C1C")]
		set
		{
		}
	}

	[Token(Token = "0x17000452")]
	protected virtual bool CanEmitItemDroppedEvent
	{
		[Token(Token = "0x6001C1E")]
		[Address(RVA = "0x120B028", Offset = "0x120B028", VA = "0x120B028", Slot = "44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000453")]
	public float TimeLastDropped
	{
		[Token(Token = "0x6001C28")]
		[Address(RVA = "0x120B408", Offset = "0x120B408", VA = "0x120B408")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000454")]
	public bool IsTrackingFallAfterDrop
	{
		[Token(Token = "0x6001C29")]
		[Address(RVA = "0x120B410", Offset = "0x120B410", VA = "0x120B410")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001BF9")]
	[Address(RVA = "0x1208630", Offset = "0x1208630", VA = "0x1208630", Slot = "23")]
	public virtual void Initialise()
	{
	}

	[Token(Token = "0x6001C02")]
	[Address(RVA = "0x12070F0", Offset = "0x12070F0", VA = "0x12070F0", Slot = "25")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001C03")]
	[Address(RVA = "0x1208E24", Offset = "0x1208E24", VA = "0x1208E24", Slot = "26")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001C04")]
	[Address(RVA = "0x1208E28", Offset = "0x1208E28", VA = "0x1208E28", Slot = "27")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001C05")]
	[Address(RVA = "0x12091C0", Offset = "0x12091C0", VA = "0x12091C0", Slot = "28")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6001C06")]
	[Address(RVA = "0x12094D8", Offset = "0x12094D8", VA = "0x12094D8")]
	private void HandleCrateEnabled(Crate crate)
	{
	}

	[Token(Token = "0x6001C07")]
	[Address(RVA = "0x1209598", Offset = "0x1209598", VA = "0x1209598", Slot = "29")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6001C08")]
	[Address(RVA = "0x12095A0", Offset = "0x12095A0", VA = "0x12095A0", Slot = "8")]
	public override void OnAddedToPool()
	{
	}

	[Token(Token = "0x6001C09")]
	[Address(RVA = "0x12095C0", Offset = "0x12095C0", VA = "0x12095C0", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001C0A")]
	[Address(RVA = "0x1207AB4", Offset = "0x1207AB4", VA = "0x1207AB4", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001C0B")]
	[Address(RVA = "0x1209710", Offset = "0x1209710", VA = "0x1209710")]
	private void MonitorForSecondaryActionButtonPress()
	{
	}

	[Token(Token = "0x6001C0C")]
	[Address(RVA = "0x12097BC", Offset = "0x12097BC", VA = "0x12097BC", Slot = "30")]
	public virtual void OnItemSelected()
	{
	}

	[Token(Token = "0x6001C0D")]
	[Address(RVA = "0x1206A50", Offset = "0x1206A50", VA = "0x1206A50", Slot = "31")]
	public virtual void OnItemGripped()
	{
	}

	[Token(Token = "0x6001C0E")]
	[Address(RVA = "0x12099A0", Offset = "0x12099A0", VA = "0x12099A0", Slot = "32")]
	public virtual void OnItemGrippedWithSecondHand()
	{
	}

	[Token(Token = "0x6001C0F")]
	[Address(RVA = "0x1209AF8", Offset = "0x1209AF8", VA = "0x1209AF8", Slot = "33")]
	public virtual void OnItemReleasedFromSecondHand()
	{
	}

	[Token(Token = "0x6001C10")]
	[Address(RVA = "0x1206B9C", Offset = "0x1206B9C", VA = "0x1206B9C", Slot = "34")]
	public virtual void OnItemDropped()
	{
	}

	[Token(Token = "0x6001C11")]
	[Address(RVA = "0x1209C50", Offset = "0x1209C50", VA = "0x1209C50", Slot = "35")]
	public virtual void OnItemHandSwapped()
	{
	}

	[Token(Token = "0x6001C12")]
	[Address(RVA = "0x1209DA0", Offset = "0x1209DA0", VA = "0x1209DA0")]
	private bool ShouldAllowTriggerProcessing()
	{
		return default(bool);
	}

	[Token(Token = "0x6001C13")]
	[Address(RVA = "0x1209E24", Offset = "0x1209E24", VA = "0x1209E24", Slot = "36")]
	public virtual void OnItemTriggerPressed()
	{
	}

	[Token(Token = "0x6001C14")]
	[Address(RVA = "0x1209F54", Offset = "0x1209F54", VA = "0x1209F54", Slot = "37")]
	public virtual void OnItemTriggerReleased()
	{
	}

	[Token(Token = "0x6001C15")]
	[Address(RVA = "0x120A088", Offset = "0x120A088", VA = "0x120A088", Slot = "38")]
	public virtual void OnSecondaryActionStarted()
	{
	}

	[Token(Token = "0x6001C16")]
	[Address(RVA = "0x120A0C4", Offset = "0x120A0C4", VA = "0x120A0C4", Slot = "39")]
	public virtual void OnSecondaryActionStopped()
	{
	}

	[Token(Token = "0x6001C17")]
	[Address(RVA = "0x120A0F0", Offset = "0x120A0F0", VA = "0x120A0F0", Slot = "40")]
	public virtual bool OnItemPlacedInInventory(VrHand hand, Transform anchorTransform, string inventoryKey, bool fromEvent = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6001C18")]
	[Address(RVA = "0x120A7F0", Offset = "0x120A7F0", VA = "0x120A7F0", Slot = "41")]
	public virtual void OnItemRemovedFromInventory(VrHand hand, bool fromEvent = false)
	{
	}

	[Token(Token = "0x6001C19")]
	[Address(RVA = "0x120AC18", Offset = "0x120AC18", VA = "0x120AC18")]
	public void OnItemEnterVacuum()
	{
	}

	[Token(Token = "0x6001C1A")]
	[Address(RVA = "0x120AD40", Offset = "0x120AD40", VA = "0x120AD40")]
	public void OnItemExitVacuum()
	{
	}

	[Token(Token = "0x6001C1B")]
	[Address(RVA = "0x120A57C", Offset = "0x120A57C", VA = "0x120A57C")]
	public void OnItemPlacedInInventoryAudio(Transform transform)
	{
	}

	[Token(Token = "0x6001C1C")]
	[Address(RVA = "0x120ADFC", Offset = "0x120ADFC", VA = "0x120ADFC", Slot = "42")]
	protected virtual void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6001C1D")]
	[Address(RVA = "0x120AFB0", Offset = "0x120AFB0", VA = "0x120AFB0", Slot = "43")]
	protected virtual void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x6001C1F")]
	[Address(RVA = "0x120B030", Offset = "0x120B030", VA = "0x120B030", Slot = "45")]
	public virtual Transform GetRaycastTransform()
	{
		return null;
	}

	[Token(Token = "0x6001C20")]
	[Address(RVA = "0x1208D30", Offset = "0x1208D30", VA = "0x1208D30")]
	private bool DetermineHasBulletBlockingVolume(Transform currentTransform)
	{
		return default(bool);
	}

	[Token(Token = "0x6001C21")]
	[Address(RVA = "0x120B038", Offset = "0x120B038", VA = "0x120B038", Slot = "46")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6001C22")]
	[Address(RVA = "0x120B19C", Offset = "0x120B19C", VA = "0x120B19C")]
	public void SetRemoteTriggerState(TriggerStateType type)
	{
	}

	[Token(Token = "0x6001C23")]
	[Address(RVA = "0x120B1B0", Offset = "0x120B1B0", VA = "0x120B1B0", Slot = "47")]
	public virtual void SetTriggerState(TriggerStateType triggerStateTypes, bool fromRemote = false)
	{
	}

	[Token(Token = "0x6001C24")]
	[Address(RVA = "0x120B330", Offset = "0x120B330", VA = "0x120B330")]
	public void RemoveItemAfterTime()
	{
	}

	[Token(Token = "0x6001C25")]
	[Address(RVA = "0x120B384", Offset = "0x120B384", VA = "0x120B384")]
	[IteratorStateMachine(typeof(<ReturnToPoolInTime>d__178))]
	private IEnumerator ReturnToPoolInTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6001C26")]
	[Address(RVA = "0x120995C", Offset = "0x120995C", VA = "0x120995C")]
	private void StopDropByEnemyReturnToPool()
	{
	}

	[Token(Token = "0x6001C27")]
	[Address(RVA = "0x120B2F4", Offset = "0x120B2F4", VA = "0x120B2F4")]
	private TriggerState GetStateFromId(TriggerStateType state)
	{
		return null;
	}

	[Token(Token = "0x6001C2A")]
	[Address(RVA = "0x120B418", Offset = "0x120B418", VA = "0x120B418", Slot = "48")]
	protected virtual void TriggerHaptics()
	{
	}

	[Token(Token = "0x6001C2B")]
	[Address(RVA = "0x120B4A4", Offset = "0x120B4A4", VA = "0x120B4A4", Slot = "49")]
	protected virtual void TriggerSecondaryHaptics()
	{
	}

	[Token(Token = "0x6001C2C")]
	[Address(RVA = "0x120B530", Offset = "0x120B530", VA = "0x120B530", Slot = "50")]
	protected virtual void RegisterHaptics(bool value)
	{
	}

	[Token(Token = "0x6001C2D")]
	[Address(RVA = "0x120B688", Offset = "0x120B688", VA = "0x120B688")]
	private void RegisterHandForHaptics(VrHand hand, bool value)
	{
	}

	[Token(Token = "0x6001C2E")]
	[Address(RVA = "0x120B864", Offset = "0x120B864", VA = "0x120B864")]
	public bool IsItemGripped()
	{
		return default(bool);
	}

	[Token(Token = "0x6001C2F")]
	[Address(RVA = "0x120B86C", Offset = "0x120B86C", VA = "0x120B86C")]
	public bool TryStartBlock(PhysicsDamage attackingObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6001C30")]
	[Address(RVA = "0x120B9DC", Offset = "0x120B9DC", VA = "0x120B9DC")]
	public bool CheckLocalItemHeld()
	{
		return default(bool);
	}

	[Token(Token = "0x6001C31")]
	[Address(RVA = "0x120BADC", Offset = "0x120BADC", VA = "0x120BADC", Slot = "16")]
	private void IHideable.Hide()
	{
	}

	[Token(Token = "0x6001C32")]
	[Address(RVA = "0x120BBA8", Offset = "0x120BBA8", VA = "0x120BBA8", Slot = "17")]
	private void IHideable.Show()
	{
	}

	[Token(Token = "0x6001C33")]
	[Address(RVA = "0x120702C", Offset = "0x120702C", VA = "0x120702C")]
	public VrItem()
	{
	}

	[SpecialName]
	[Token(Token = "0x6001C35")]
	[Address(RVA = "0x120BD58", Offset = "0x120BD58", VA = "0x120BD58", Slot = "12")]
	private GameObject IHideable.get_gameObject()
	{
		return null;
	}

	[SpecialName]
	[Token(Token = "0x6001C36")]
	[Address(RVA = "0x120BD60", Offset = "0x120BD60", VA = "0x120BD60", Slot = "13")]
	private Transform IHideable.get_cachedTransform()
	{
		return null;
	}

	[SpecialName]
	[Token(Token = "0x6001C37")]
	[Address(RVA = "0x120BD68", Offset = "0x120BD68", VA = "0x120BD68", Slot = "4")]
	private GameObject PT.IPoolable.get_gameObject()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x20004CB")]
public class ItemEvents
{
	[Token(Token = "0x40016CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent OnItemInitialise;

	[Token(Token = "0x40016CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnItemSelected;

	[Token(Token = "0x40016CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnItemGripped;

	[Token(Token = "0x40016CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnItemGrippedWithSecondHand;

	[Token(Token = "0x40016CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnItemReleasedFromSecondHand;

	[Token(Token = "0x40016D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnItemDropped;

	[Token(Token = "0x40016D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnItemHandSwapped;

	[Token(Token = "0x40016D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent OnItemTriggerPressed;

	[Token(Token = "0x40016D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnItemTriggerReleased;

	[Token(Token = "0x40016D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent OnSecondaryAction;

	[Token(Token = "0x40016D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent OnSecondaryActionComplete;

	[Token(Token = "0x40016D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent OnItemPlacedInInventory;

	[Token(Token = "0x40016D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEvent OnItemRemovedFromInventory;

	[Token(Token = "0x6001C3F")]
	[Address(RVA = "0x120BED8", Offset = "0x120BED8", VA = "0x120BED8")]
	public ItemEvents()
	{
	}
}
[Token(Token = "0x20004CC")]
public class TriggerState
{
	[Token(Token = "0x40016D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected VrItem ItemReference;

	[Token(Token = "0x40016D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_debugPrintState;

	[Token(Token = "0x40016DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	protected bool m_enteredFromServer;

	[Token(Token = "0x6001C40")]
	[Address(RVA = "0x120C12C", Offset = "0x120C12C", VA = "0x120C12C")]
	public void SetItemReference(VrItem itemRef)
	{
	}

	[Token(Token = "0x6001C41")]
	[Address(RVA = "0x120C134", Offset = "0x120C134", VA = "0x120C134", Slot = "4")]
	public virtual void Enter()
	{
	}

	[Token(Token = "0x6001C42")]
	[Address(RVA = "0x120C138", Offset = "0x120C138", VA = "0x120C138", Slot = "5")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6001C43")]
	[Address(RVA = "0x120C13C", Offset = "0x120C13C", VA = "0x120C13C", Slot = "6")]
	public virtual void Exit()
	{
	}

	[Token(Token = "0x6001C44")]
	[Address(RVA = "0x120C144", Offset = "0x120C144", VA = "0x120C144")]
	protected void DebugPrintState(string message)
	{
	}

	[Token(Token = "0x6001C45")]
	[Address(RVA = "0x120C1B4", Offset = "0x120C1B4", VA = "0x120C1B4")]
	public void SetEnterFromServer()
	{
	}

	[Token(Token = "0x6001C46")]
	[Address(RVA = "0x120C1C0", Offset = "0x120C1C0", VA = "0x120C1C0")]
	public TriggerState()
	{
	}
}
[Token(Token = "0x20004CD")]
public class TriggerStateInactive : TriggerState
{
	[Token(Token = "0x6001C47")]
	[Address(RVA = "0x120C1D0", Offset = "0x120C1D0", VA = "0x120C1D0", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001C48")]
	[Address(RVA = "0x120C1D4", Offset = "0x120C1D4", VA = "0x120C1D4", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001C49")]
	[Address(RVA = "0x120C1D8", Offset = "0x120C1D8", VA = "0x120C1D8")]
	public TriggerStateInactive()
	{
	}
}
[Token(Token = "0x20004CE")]
public class TriggerStatePressed : TriggerState
{
	[Token(Token = "0x6001C4A")]
	[Address(RVA = "0x120C1E8", Offset = "0x120C1E8", VA = "0x120C1E8", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001C4B")]
	[Address(RVA = "0x120C214", Offset = "0x120C214", VA = "0x120C214", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001C4C")]
	[Address(RVA = "0x120C218", Offset = "0x120C218", VA = "0x120C218")]
	public TriggerStatePressed()
	{
	}
}
[Token(Token = "0x20004CF")]
public class TriggerStateHeld : TriggerState
{
	[Token(Token = "0x6001C4D")]
	[Address(RVA = "0x120C228", Offset = "0x120C228", VA = "0x120C228", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001C4E")]
	[Address(RVA = "0x120C22C", Offset = "0x120C22C", VA = "0x120C22C", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001C4F")]
	[Address(RVA = "0x120C230", Offset = "0x120C230", VA = "0x120C230")]
	public TriggerStateHeld()
	{
	}
}
[Token(Token = "0x20004D0")]
public class TriggerStateReleased : TriggerState
{
	[Token(Token = "0x6001C50")]
	[Address(RVA = "0x120C240", Offset = "0x120C240", VA = "0x120C240", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001C51")]
	[Address(RVA = "0x120C26C", Offset = "0x120C26C", VA = "0x120C26C", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001C52")]
	[Address(RVA = "0x120C270", Offset = "0x120C270", VA = "0x120C270")]
	public TriggerStateReleased()
	{
	}
}
[Token(Token = "0x20004D1")]
[RequireComponent(typeof(VrItem))]
public class VrItemMultiplayerBandAid : CachedMonoBehaviour
{
	[Token(Token = "0x40016DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private VrItem m_item;

	[Token(Token = "0x40016DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_controlFrameCount;

	[Token(Token = "0x40016DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_controlMaxFrameCount;

	[Token(Token = "0x6001C53")]
	[Address(RVA = "0x120C280", Offset = "0x120C280", VA = "0x120C280")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001C54")]
	[Address(RVA = "0x120C340", Offset = "0x120C340", VA = "0x120C340")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001C55")]
	[Address(RVA = "0x120C440", Offset = "0x120C440", VA = "0x120C440")]
	public VrItemMultiplayerBandAid()
	{
	}
}
[Token(Token = "0x20004D2")]
[RequireComponent(typeof(HealthStatus))]
public class VrGrenade : VrTimedExplosive
{
	[Token(Token = "0x40016DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private MechanismDetachable m_pinDetachable;

	[Token(Token = "0x40016DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	[SerializeField]
	private WorldInteraction_Hold m_pinHoldable;

	[Token(Token = "0x40016E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x40016E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[Space]
	[SerializeField]
	private bool m_startTimerOnArmedCollision;

	[Token(Token = "0x40016E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x299")]
	[Space]
	[SerializeField]
	private bool m_adjustDragValuesOnActiveCollision;

	[Token(Token = "0x40016E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
	[Min(0f)]
	[SerializeField]
	private float m_linearDragOnActiveCollision;

	[Token(Token = "0x40016E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[Min(0f)]
	[SerializeField]
	private float m_angularDragOnActiveCollision;

	[Token(Token = "0x40016E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	private float m_standardLinearDrag;

	[Token(Token = "0x40016E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private float m_standardAngularDrag;

	[Token(Token = "0x40016E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ContactPoint[] s_contactPointBuffer;

	[Token(Token = "0x6001C56")]
	[Address(RVA = "0x120C450", Offset = "0x120C450", VA = "0x120C450", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001C57")]
	[Address(RVA = "0x120C5C4", Offset = "0x120C5C4", VA = "0x120C5C4", Slot = "29")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001C58")]
	[Address(RVA = "0x120C708", Offset = "0x120C708", VA = "0x120C708", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001C59")]
	[Address(RVA = "0x120C7BC", Offset = "0x120C7BC", VA = "0x120C7BC", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001C5A")]
	[Address(RVA = "0x120C80C", Offset = "0x120C80C", VA = "0x120C80C", Slot = "31")]
	public override void OnItemGripped()
	{
	}

	[Token(Token = "0x6001C5B")]
	[Address(RVA = "0x120C8D8", Offset = "0x120C8D8", VA = "0x120C8D8", Slot = "34")]
	public override void OnItemDropped()
	{
	}

	[Token(Token = "0x6001C5C")]
	[Address(RVA = "0x120CA54", Offset = "0x120CA54", VA = "0x120CA54")]
	private void OnHealthDecreased(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6001C5D")]
	[Address(RVA = "0x120CB00", Offset = "0x120CB00", VA = "0x120CB00", Slot = "38")]
	public override void OnSecondaryActionStarted()
	{
	}

	[Token(Token = "0x6001C5E")]
	[Address(RVA = "0x120CB54", Offset = "0x120CB54", VA = "0x120CB54", Slot = "40")]
	public override bool OnItemPlacedInInventory(VrHand hand, Transform anchorTransform, string inventoryKey, bool fromServer = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6001C5F")]
	[Address(RVA = "0x120CBE4", Offset = "0x120CBE4", VA = "0x120CBE4", Slot = "42")]
	protected override void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6001C60")]
	[Address(RVA = "0x120CE08", Offset = "0x120CE08", VA = "0x120CE08")]
	public VrGrenade()
	{
	}
}
[Token(Token = "0x20004D3")]
public class VrIndicator : MonoBehaviour
{
	[Token(Token = "0x20004D4")]
	[CompilerGenerated]
	private sealed class <AnimateIntensity>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrIndicator <>4__this;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timePassed>5__2;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <endingTimeValue>5__3;

		[Token(Token = "0x17000457")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001C6C")]
			[Address(RVA = "0x120D554", Offset = "0x120D554", VA = "0x120D554", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000458")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001C6E")]
			[Address(RVA = "0x120D59C", Offset = "0x120D59C", VA = "0x120D59C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0x120D2B0", Offset = "0x120D2B0", VA = "0x120D2B0")]
		[DebuggerHidden]
		public <AnimateIntensity>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0x120D348", Offset = "0x120D348", VA = "0x120D348", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0x120D34C", Offset = "0x120D34C", VA = "0x120D34C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0x120D55C", Offset = "0x120D55C", VA = "0x120D55C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40016E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Light m_light;

	[Token(Token = "0x40016E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AnimationCurve m_intensityGraph;

	[Token(Token = "0x40016EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine m_coroutine;

	[Token(Token = "0x40016EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_hasLight;

	[Token(Token = "0x40016EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer m_renderer;

	[Token(Token = "0x40016ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_material;

	[Token(Token = "0x40016EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int alpha;

	[Token(Token = "0x6001C62")]
	[Address(RVA = "0x120CEE0", Offset = "0x120CEE0", VA = "0x120CEE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001C63")]
	[Address(RVA = "0x120D004", Offset = "0x120D004", VA = "0x120D004")]
	private void Start()
	{
	}

	[Token(Token = "0x6001C64")]
	[Address(RVA = "0x120D0FC", Offset = "0x120D0FC", VA = "0x120D0FC")]
	public void StartIndicator()
	{
	}

	[Token(Token = "0x6001C65")]
	[Address(RVA = "0x120D1C4", Offset = "0x120D1C4", VA = "0x120D1C4")]
	public void StopIndicator()
	{
	}

	[Token(Token = "0x6001C66")]
	[Address(RVA = "0x120D150", Offset = "0x120D150", VA = "0x120D150")]
	[IteratorStateMachine(typeof(<AnimateIntensity>d__11))]
	public IEnumerator AnimateIntensity()
	{
		return null;
	}

	[Token(Token = "0x6001C67")]
	[Address(RVA = "0x120D2D8", Offset = "0x120D2D8", VA = "0x120D2D8")]
	public VrIndicator()
	{
	}
}
[Token(Token = "0x20004D5")]
public class VrLaunchedGrenade : VrTimedExplosive
{
	[Token(Token = "0x20004D6")]
	[CompilerGenerated]
	private sealed class <WaitForAttachInit>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrLaunchedGrenade <>4__this;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BoltEntity <boltEntity>5__2;

		[Token(Token = "0x17000459")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001C77")]
			[Address(RVA = "0x120DE0C", Offset = "0x120DE0C", VA = "0x120DE0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700045A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001C79")]
			[Address(RVA = "0x120DE54", Offset = "0x120DE54", VA = "0x120DE54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0x120D700", Offset = "0x120D700", VA = "0x120D700")]
		[DebuggerHidden]
		public <WaitForAttachInit>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0x120DBC8", Offset = "0x120DBC8", VA = "0x120DBC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0x120DBCC", Offset = "0x120DBCC", VA = "0x120DBCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x120DE14", Offset = "0x120DE14", VA = "0x120DE14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6001C6F")]
	[Address(RVA = "0x120D5A4", Offset = "0x120D5A4", VA = "0x120D5A4", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001C70")]
	[Address(RVA = "0x120D68C", Offset = "0x120D68C", VA = "0x120D68C")]
	[IteratorStateMachine(typeof(<WaitForAttachInit>d__1))]
	private IEnumerator WaitForAttachInit()
	{
		return null;
	}

	[Token(Token = "0x6001C71")]
	[Address(RVA = "0x120D728", Offset = "0x120D728", VA = "0x120D728", Slot = "42")]
	protected override void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6001C72")]
	[Address(RVA = "0x120DB18", Offset = "0x120DB18", VA = "0x120DB18", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001C73")]
	[Address(RVA = "0x120DBC4", Offset = "0x120DBC4", VA = "0x120DBC4")]
	public VrLaunchedGrenade()
	{
	}
}
[Token(Token = "0x20004D7")]
public class VrTimedExplosive : VrItem
{
	[Token(Token = "0x40016F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private HealthStatusUpdate_ColliderTrigger m_explosionPrefab;

	[Token(Token = "0x40016F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	[FormerlySerializedAs("m_fuseTime")]
	private float m_fuzeTime;

	[Token(Token = "0x40016FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	[Header("Optional")]
	private VrBullet m_attachedBullet;

	[Token(Token = "0x40016FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	private Actor m_actor;

	[Token(Token = "0x40016FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[SerializeField]
	private bool m_returnToPool;

	[Token(Token = "0x40016FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x219")]
	private bool m_armed;

	[Token(Token = "0x40016FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private float? m_fuzeStartTime;

	[Token(Token = "0x40016FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public UnityEvent OnExplosiveArmed;

	[Token(Token = "0x4001700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public UnityEvent OnExplosiveDisarmed;

	[Token(Token = "0x4001701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	public UnityEvent OnTimerStarted;

	[Token(Token = "0x4001702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public UnityEvent OnTimerStopped;

	[Token(Token = "0x4001703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public UnityEvent OnExplode;

	[Token(Token = "0x4001704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public Action<bool> OnExplosiveArmedEvent;

	[Token(Token = "0x4001705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public Action<bool, float?> OnTimerChangedEvent;

	[Token(Token = "0x4001706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	public Action<bool> OnSecondaryAction;

	[Token(Token = "0x4001707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	public Action<bool> OnExplodeEvent;

	[Token(Token = "0x4001708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private IOwner m_ownerWhenFuzeStarted;

	[Token(Token = "0x4001709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	protected bool m_explode;

	[Token(Token = "0x400170A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x279")]
	protected bool m_exploded;

	[Token(Token = "0x1700045B")]
	public bool IsArmed
	{
		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0x120DE5C", Offset = "0x120DE5C", VA = "0x120DE5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700045C")]
	internal bool IsFuzeRunning
	{
		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x120CA18", Offset = "0x120CA18", VA = "0x120CA18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700045D")]
	protected override bool CanEmitItemDroppedEvent
	{
		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0x120DE64", Offset = "0x120DE64", VA = "0x120DE64", Slot = "44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700045E")]
	public override IOwner Owner
	{
		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0x120DE74", Offset = "0x120DE74", VA = "0x120DE74", Slot = "24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700045F")]
	public bool IsExploded
	{
		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0x120DE8C", Offset = "0x120DE8C", VA = "0x120DE8C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001C7F")]
	[Address(RVA = "0x120DE94", Offset = "0x120DE94", VA = "0x120DE94")]
	public void OverrideArmed(bool armed)
	{
	}

	[Token(Token = "0x6001C80")]
	[Address(RVA = "0x120DEB4", Offset = "0x120DEB4", VA = "0x120DEB4")]
	public void OverrideExplode(bool explode)
	{
	}

	[Token(Token = "0x6001C81")]
	[Address(RVA = "0x120DEC0", Offset = "0x120DEC0", VA = "0x120DEC0", Slot = "46")]
	protected override void LateUpdate()
	{
	}

	[Token(Token = "0x6001C82")]
	[Address(RVA = "0x120DDC0", Offset = "0x120DDC0", VA = "0x120DDC0")]
	public void Arm()
	{
	}

	[Token(Token = "0x6001C83")]
	[Address(RVA = "0x120CB9C", Offset = "0x120CB9C", VA = "0x120CB9C")]
	public void Disarm()
	{
	}

	[Token(Token = "0x6001C84")]
	[Address(RVA = "0x120C948", Offset = "0x120C948", VA = "0x120C948")]
	public void StartGrenadeTimer()
	{
	}

	[Token(Token = "0x6001C85")]
	[Address(RVA = "0x120C840", Offset = "0x120C840", VA = "0x120C840")]
	public void StopGrenadeTimer()
	{
	}

	[Token(Token = "0x6001C86")]
	[Address(RVA = "0x120CA80", Offset = "0x120CA80", VA = "0x120CA80")]
	public void SkipTimer()
	{
	}

	[Token(Token = "0x6001C87")]
	[Address(RVA = "0x120DF18", Offset = "0x120DF18", VA = "0x120DF18")]
	private bool HasFuzeExpired()
	{
		return default(bool);
	}

	[Token(Token = "0x6001C88")]
	[Address(RVA = "0x120D95C", Offset = "0x120D95C", VA = "0x120D95C")]
	public void Explode()
	{
	}

	[Token(Token = "0x6001C89")]
	[Address(RVA = "0x120E09C", Offset = "0x120E09C", VA = "0x120E09C")]
	private void ReturnToPool()
	{
	}

	[Token(Token = "0x6001C8A")]
	[Address(RVA = "0x120C788", Offset = "0x120C788", VA = "0x120C788", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001C8B")]
	[Address(RVA = "0x120C7E0", Offset = "0x120C7E0", VA = "0x120C7E0", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001C8C")]
	[Address(RVA = "0x120DFA8", Offset = "0x120DFA8", VA = "0x120DFA8")]
	private IOwner GetOwner()
	{
		return null;
	}

	[Token(Token = "0x6001C8D")]
	[Address(RVA = "0x120CE0C", Offset = "0x120CE0C", VA = "0x120CE0C")]
	public VrTimedExplosive()
	{
	}
}
[Token(Token = "0x20004D8")]
public class AnimationLODJobScheduler : CachedMonoBehaviour
{
	[Token(Token = "0x20004D9")]
	[BurstCompile]
	private struct SourceParallelJob : IJobParallelForTransform
	{
		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public NativeArray<float3> sourcePositions;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NativeArray<quaternion> sourceRotations;

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x120E938", Offset = "0x120E938", VA = "0x120E938", Slot = "4")]
		public void Execute(int index, TransformAccess transform)
		{
		}
	}

	[Token(Token = "0x20004DA")]
	[BurstCompile]
	private struct ConstrainParallelJob : IJobParallelForTransform
	{
		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[ReadOnly]
		public NativeArray<float3> sourcePositions;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[ReadOnly]
		public NativeArray<quaternion> sourceRotations;

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x120E9AC", Offset = "0x120E9AC", VA = "0x120E9AC", Slot = "4")]
		public void Execute(int index, TransformAccess transform)
		{
		}
	}

	[Token(Token = "0x400170B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AnimationLODJobScheduler s_instance;

	[Token(Token = "0x400170C")]
	private const int c_maxConstraints = 1000;

	[Token(Token = "0x400170D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<Transform, int> m_transformToIndex;

	[Token(Token = "0x400170E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<int, Transform> m_indexToTransform;

	[Token(Token = "0x400170F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private TransformAccessArray m_constrainedArray;

	[Token(Token = "0x4001710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TransformAccessArray m_sourceArray;

	[Token(Token = "0x4001711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private NativeArray<float3> m_sourcePositions;

	[Token(Token = "0x4001712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private NativeArray<quaternion> m_sourceRotations;

	[Token(Token = "0x4001713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private JobHandle m_handle;

	[Token(Token = "0x6001C8E")]
	[Address(RVA = "0x120E14C", Offset = "0x120E14C", VA = "0x120E14C")]
	public static void Add(Transform constrainedTransform, Transform sourceTransform)
	{
	}

	[Token(Token = "0x6001C8F")]
	[Address(RVA = "0x120E350", Offset = "0x120E350", VA = "0x120E350")]
	public static void Remove(Transform constrainedTransform)
	{
	}

	[Token(Token = "0x6001C90")]
	[Address(RVA = "0x120E5F8", Offset = "0x120E5F8", VA = "0x120E5F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001C91")]
	[Address(RVA = "0x120E790", Offset = "0x120E790", VA = "0x120E790")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001C92")]
	[Address(RVA = "0x120E854", Offset = "0x120E854", VA = "0x120E854")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001C93")]
	[Address(RVA = "0x120E930", Offset = "0x120E930", VA = "0x120E930")]
	public AnimationLODJobScheduler()
	{
	}
}
[Token(Token = "0x20004DB")]
public class GunAnimationAction : CachedMonoBehaviour
{
	[Token(Token = "0x20004DC")]
	[CompilerGenerated]
	private sealed class <AnimateActions>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GunAnimAction> actionList;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GunAnimationAction <>4__this;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__2;

		[Token(Token = "0x17000460")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0x120F4BC", Offset = "0x120F4BC", VA = "0x120F4BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000461")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0x120F504", Offset = "0x120F504", VA = "0x120F504", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x120ED58", Offset = "0x120ED58", VA = "0x120ED58")]
		[DebuggerHidden]
		public <AnimateActions>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0x120F1A8", Offset = "0x120F1A8", VA = "0x120F1A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0x120F1AC", Offset = "0x120F1AC", VA = "0x120F1AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x120F4C4", Offset = "0x120F4C4", VA = "0x120F4C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004DD")]
	[CompilerGenerated]
	private sealed class <Reset>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunAnimationAction <>4__this;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <currentTime>5__2;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <startLocalPosition>5__3;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 <destLocalPosition>5__4;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion <startLocalRotation>5__5;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion <destLocalRotation>5__6;

		[Token(Token = "0x17000462")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0x120F6D8", Offset = "0x120F6D8", VA = "0x120F6D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000463")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001CAB")]
			[Address(RVA = "0x120F720", Offset = "0x120F720", VA = "0x120F720", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0x120EE04", Offset = "0x120EE04", VA = "0x120EE04")]
		[DebuggerHidden]
		public <Reset>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0x120F50C", Offset = "0x120F50C", VA = "0x120F50C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0x120F510", Offset = "0x120F510", VA = "0x120F510", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0x120F6E0", Offset = "0x120F6E0", VA = "0x120F6E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004DE")]
	[CompilerGenerated]
	private sealed class <AnimatePosition>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunAnimationAction <>4__this;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GunAnimAction.animType animType;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float value;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float time;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <currentTime>5__2;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <startLocalPosition>5__3;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <destLocalPosition>5__4;

		[Token(Token = "0x17000464")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001CAF")]
			[Address(RVA = "0x120F8B4", Offset = "0x120F8B4", VA = "0x120F8B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000465")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001CB1")]
			[Address(RVA = "0x120F8FC", Offset = "0x120F8FC", VA = "0x120F8FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0x120EEC4", Offset = "0x120EEC4", VA = "0x120EEC4")]
		[DebuggerHidden]
		public <AnimatePosition>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0x120F728", Offset = "0x120F728", VA = "0x120F728", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0x120F72C", Offset = "0x120F72C", VA = "0x120F72C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0x120F8BC", Offset = "0x120F8BC", VA = "0x120F8BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20004DF")]
	[CompilerGenerated]
	private sealed class <AnimateRotation>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GunAnimationAction <>4__this;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GunAnimAction.animType animType;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float value;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float time;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <currentTime>5__2;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion <startLocalRotation>5__3;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion <destLocalRotation>5__4;

		[Token(Token = "0x17000466")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001CB5")]
			[Address(RVA = "0x120FAAC", Offset = "0x120FAAC", VA = "0x120FAAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000467")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001CB7")]
			[Address(RVA = "0x120FAF4", Offset = "0x120FAF4", VA = "0x120FAF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0x120EF88", Offset = "0x120EF88", VA = "0x120EF88")]
		[DebuggerHidden]
		public <AnimateRotation>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0x120F904", Offset = "0x120F904", VA = "0x120F904", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0x120F908", Offset = "0x120F908", VA = "0x120F908", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0x120FAB4", Offset = "0x120FAB4", VA = "0x120FAB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<GunAnimActionMap> m_animationActionList;

	[Token(Token = "0x4001719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_defaultTransformSet;

	[Token(Token = "0x400171A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion m_startRotation;

	[Token(Token = "0x400171B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 m_startPosition;

	[Token(Token = "0x400171C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion m_startAuxiliaryRotation;

	[Token(Token = "0x400171D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_destAuxiliaryRotation;

	[Token(Token = "0x400171E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Quaternion m_destLocalRotation;

	[Token(Token = "0x400171F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<int, GunAnimActionMap> m_animationActionDictionary;

	[Token(Token = "0x4001720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool m_animationActionListNull;

	[Token(Token = "0x6001C96")]
	[Address(RVA = "0x120EA20", Offset = "0x120EA20", VA = "0x120EA20")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001C97")]
	[Address(RVA = "0x120EB18", Offset = "0x120EB18", VA = "0x120EB18")]
	public void Play(string animName)
	{
	}

	[Token(Token = "0x6001C98")]
	[Address(RVA = "0x120EB50", Offset = "0x120EB50", VA = "0x120EB50")]
	public void Play(int hash, int spareHash = -1)
	{
	}

	[Token(Token = "0x6001C99")]
	[Address(RVA = "0x120ECC8", Offset = "0x120ECC8", VA = "0x120ECC8")]
	[IteratorStateMachine(typeof(<AnimateActions>d__12))]
	private IEnumerator AnimateActions(List<GunAnimAction> actionList)
	{
		return null;
	}

	[Token(Token = "0x6001C9A")]
	[Address(RVA = "0x120ED80", Offset = "0x120ED80", VA = "0x120ED80")]
	[IteratorStateMachine(typeof(<Reset>d__13))]
	private IEnumerator Reset(float time)
	{
		return null;
	}

	[Token(Token = "0x6001C9B")]
	[Address(RVA = "0x120EE2C", Offset = "0x120EE2C", VA = "0x120EE2C")]
	[IteratorStateMachine(typeof(<AnimatePosition>d__14))]
	private IEnumerator AnimatePosition(GunAnimAction.animType animType, float value, float time)
	{
		return null;
	}

	[Token(Token = "0x6001C9C")]
	[Address(RVA = "0x120EEEC", Offset = "0x120EEEC", VA = "0x120EEEC")]
	public void OverrideAnimationTime(float time)
	{
	}

	[Token(Token = "0x6001C9D")]
	[Address(RVA = "0x120EEF0", Offset = "0x120EEF0", VA = "0x120EEF0")]
	[IteratorStateMachine(typeof(<AnimateRotation>d__16))]
	private IEnumerator AnimateRotation(GunAnimAction.animType animType, float value, float time)
	{
		return null;
	}

	[Token(Token = "0x6001C9E")]
	[Address(RVA = "0x120EFB0", Offset = "0x120EFB0", VA = "0x120EFB0")]
	private float GetAnimAmount(GunAnimAction animAction)
	{
		return default(float);
	}

	[Token(Token = "0x6001C9F")]
	[Address(RVA = "0x120F0A8", Offset = "0x120F0A8", VA = "0x120F0A8")]
	public GunAnimationAction()
	{
	}
}
[Serializable]
[Token(Token = "0x20004E0")]
public class GunAnimActionMap
{
	[Token(Token = "0x4001741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_name;

	[Token(Token = "0x4001742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent m_animActionTriggered;

	[Token(Token = "0x4001743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GunAnimAction> m_animationActionList;

	[Token(Token = "0x6001CB8")]
	[Address(RVA = "0x120FAFC", Offset = "0x120FAFC", VA = "0x120FAFC")]
	public GunAnimActionMap()
	{
	}
}
[Serializable]
[Token(Token = "0x20004E1")]
public class GunAnimAction
{
	[Token(Token = "0x20004E2")]
	public enum animType
	{
		[Token(Token = "0x400174A")]
		delay,
		[Token(Token = "0x400174B")]
		reset,
		[Token(Token = "0x400174C")]
		posX,
		[Token(Token = "0x400174D")]
		posY,
		[Token(Token = "0x400174E")]
		posZ,
		[Token(Token = "0x400174F")]
		rotX,
		[Token(Token = "0x4001750")]
		rotY,
		[Token(Token = "0x4001751")]
		rotZ
	}

	[Token(Token = "0x20004E3")]
	public enum calcType
	{
		[Token(Token = "0x4001753")]
		absolute,
		[Token(Token = "0x4001754")]
		addition
	}

	[Token(Token = "0x4001744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_name;

	[Token(Token = "0x4001745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public animType m_animType;

	[Token(Token = "0x4001746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public calcType m_calcType;

	[Token(Token = "0x4001747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_animAmount;

	[Token(Token = "0x4001748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_animTime;

	[Token(Token = "0x6001CB9")]
	[Address(RVA = "0x120FB70", Offset = "0x120FB70", VA = "0x120FB70")]
	public GunAnimAction()
	{
	}
}
[Token(Token = "0x20004E4")]
public class GunAnimationLOD : CachedMonoBehaviour
{
	[Token(Token = "0x4001755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_transformToMimic;

	[Token(Token = "0x6001CBA")]
	[Address(RVA = "0x120FB78", Offset = "0x120FB78", VA = "0x120FB78")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001CBB")]
	[Address(RVA = "0x120FB94", Offset = "0x120FB94", VA = "0x120FB94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001CBC")]
	[Address(RVA = "0x120FBA8", Offset = "0x120FBA8", VA = "0x120FBA8")]
	public GunAnimationLOD()
	{
	}
}
[Token(Token = "0x20004E5")]
public class VrEmptyShell : Poolable
{
	[Token(Token = "0x4001756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Identifier m_ID;

	[Token(Token = "0x4001757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x4001758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float m_destroyDelay;

	[Token(Token = "0x6001CBD")]
	[Address(RVA = "0x120FBB0", Offset = "0x120FBB0", VA = "0x120FBB0")]
	public void LaunchObject(Vector3 vel)
	{
	}

	[Token(Token = "0x6001CBE")]
	[Address(RVA = "0x120FCD4", Offset = "0x120FCD4", VA = "0x120FCD4")]
	private void DestroyObject()
	{
	}

	[Token(Token = "0x6001CBF")]
	[Address(RVA = "0x120FD2C", Offset = "0x120FD2C", VA = "0x120FD2C", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001CC0")]
	[Address(RVA = "0x120FE00", Offset = "0x120FE00", VA = "0x120FE00")]
	public VrEmptyShell()
	{
	}
}
[Token(Token = "0x20004E6")]
public class VrShellEject : MonoBehaviour
{
	[Token(Token = "0x4001759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected float m_ejectForce;

	[Token(Token = "0x6001CC1")]
	[Address(RVA = "0x120FE10", Offset = "0x120FE10", VA = "0x120FE10")]
	public void Trigger(GameObject ejectedShell)
	{
	}

	[Token(Token = "0x6001CC2")]
	[Address(RVA = "0x120FEF4", Offset = "0x120FEF4", VA = "0x120FEF4")]
	protected GameObject CreateFromPool(GameObject ejectedShell)
	{
		return null;
	}

	[Token(Token = "0x6001CC3")]
	[Address(RVA = "0x120FFF0", Offset = "0x120FFF0", VA = "0x120FFF0")]
	public VrShellEject()
	{
	}
}
[Token(Token = "0x20004E7")]
public interface ITargetedLaunchable
{
	[Token(Token = "0x6001CC4")]
	VrBullet[] CreateAndLaunch(IOwner creator, Vector3 position, Vector3 direction, Vector3 launchTarget, bool fromEvent, float shotPower = 1f);
}
[Token(Token = "0x20004E8")]
public class VrBullet : Poolable, IDamageTypeProvider
{
	[Token(Token = "0x20004E9")]
	[CompilerGenerated]
	private sealed class <DelayDetach>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrBullet <>4__this;

		[Token(Token = "0x17000470")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001CF8")]
			[Address(RVA = "0x1212D1C", Offset = "0x1212D1C", VA = "0x1212D1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000471")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001CFA")]
			[Address(RVA = "0x1212D64", Offset = "0x1212D64", VA = "0x1212D64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0x12103C4", Offset = "0x12103C4", VA = "0x12103C4")]
		[DebuggerHidden]
		public <DelayDetach>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0x1212C1C", Offset = "0x1212C1C", VA = "0x1212C1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0x1212C20", Offset = "0x1212C20", VA = "0x1212C20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0x1212D24", Offset = "0x1212D24", VA = "0x1212D24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400175A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("m_ID")]
	public Identifier m_WeaponId;

	[Token(Token = "0x400175B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Health Info")]
	[SerializeField]
	protected HealthStatus m_healthStatus;

	[Token(Token = "0x400175C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected HealthStatusInfo m_healthStatusEffectOnImpact;

	[Token(Token = "0x400175D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Key Event Hooks")]
	[SerializeField]
	protected BulletEventHooks m_eventHooks;

	[Token(Token = "0x400175E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<VrBullet, Collider> OnBulletHit;

	[Token(Token = "0x400175F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Bullet Properties")]
	[UnityEngine.Tooltip("This should just be the layers of enemies etc so raycasts can prioritize.")]
	[SerializeField]
	protected LayerMask m_primaryShootingLayer;

	[Token(Token = "0x4001760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[UnityEngine.Tooltip("This should just be the layers of eveything else that projectives can hit.")]
	[FormerlySerializedAs("m_shootingLayer")]
	[SerializeField]
	protected LayerMask m_secondaryShootingLayer;

	[Token(Token = "0x4001761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	protected int m_numberOfShots;

	[Token(Token = "0x4001762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	protected Vector2 m_shotSpreadAngle;

	[Token(Token = "0x4001763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	protected float m_lifeTime;

	[Token(Token = "0x4001764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	protected float m_recoilAmount;

	[Token(Token = "0x4001765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	[Header("Damage over distance properties")]
	protected bool m_damageDistFalloff;

	[Token(Token = "0x4001766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	protected float m_falloff_startDist;

	[Token(Token = "0x4001767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	protected float m_falloff_endDist;

	[Token(Token = "0x4001768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	protected AnimationCurve m_falloffCurve;

	[Token(Token = "0x4001769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Header("VFX properties")]
	protected VrTracer m_tracerPrefabRef;

	[Token(Token = "0x400176A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	protected GameObject m_expendedBulletPrefab;

	[Token(Token = "0x400176B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	protected bool m_allowBulletDecal;

	[Token(Token = "0x400176C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private DamageType m_damageType;

	[Token(Token = "0x400176D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Header("Network")]
	private NetworkPoolable m_networkPoolable;

	[Token(Token = "0x400176E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private GameObject m_renderer;

	[Token(Token = "0x400176F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected int m_impactCount;

	[Token(Token = "0x4001770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected Transform m_transform;

	[Token(Token = "0x4001771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<Faction> m_undamagedFactions;

	[Token(Token = "0x4001772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected float m_shotDamage;

	[Token(Token = "0x4001773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	protected float m_normalizedForce;

	[Token(Token = "0x4001774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float m_fixedExpiryTime;

	[Token(Token = "0x4001775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	protected Vector3 m_firePos;

	[Token(Token = "0x4001776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private IOwner m_owner;

	[Token(Token = "0x4001777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private BoltEntity m_weapon;

	[Token(Token = "0x4001778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private NetworkVrBullet m_networkVRBullet;

	[Token(Token = "0x4001779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	protected int m_maxImpacts;

	[Token(Token = "0x400177A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private int m_bulletGroupId;

	[Token(Token = "0x400177B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected bool m_hasOwner;

	[Token(Token = "0x400177C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	protected IOwner m_ownerAtPointOfHasOwner;

	[Token(Token = "0x400177E")]
	protected const string c_ignoreBulletTag = "IgnoreBullets";

	[Token(Token = "0x400177F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected bool m_fromEvent;

	[Token(Token = "0x4001780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
	private bool m_hitMadeInLifetime;

	[Token(Token = "0x4001782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	protected WeaponConfig m_weaponConfig;

	[Token(Token = "0x17000468")]
	public int BulletGroupId
	{
		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0x1210000", Offset = "0x1210000", VA = "0x1210000")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0x1210008", Offset = "0x1210008", VA = "0x1210008")]
		set
		{
		}
	}

	[Token(Token = "0x17000469")]
	public BoltEntity m_firedFromEntity
	{
		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0x1210010", Offset = "0x1210010", VA = "0x1210010")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x1210018", Offset = "0x1210018", VA = "0x1210018")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700046A")]
	private DamageType IDamageTypeProvider.damageType
	{
		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0x1210028", Offset = "0x1210028", VA = "0x1210028", Slot = "11")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x1700046B")]
	public virtual bool ApplyDamage
	{
		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x1210030", Offset = "0x1210030", VA = "0x1210030", Slot = "12")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x1210038", Offset = "0x1210038", VA = "0x1210038", Slot = "13")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700046C")]
	internal Transform Transform
	{
		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x1210044", Offset = "0x1210044", VA = "0x1210044")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x121004C", Offset = "0x121004C", VA = "0x121004C")]
		set
		{
		}
	}

	[Token(Token = "0x1700046D")]
	public int shootingLayerMask
	{
		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x1210054", Offset = "0x1210054", VA = "0x1210054")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700046E")]
	public IOwner Owner
	{
		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0x121061C", Offset = "0x121061C", VA = "0x121061C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700046F")]
	public BoltEntity Entity
	{
		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0x1210624", Offset = "0x1210624", VA = "0x1210624")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001CCF")]
	[Address(RVA = "0x1210060", Offset = "0x1210060", VA = "0x1210060", Slot = "14")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6001CD0")]
	[Address(RVA = "0x1210064", Offset = "0x1210064", VA = "0x1210064")]
	public void initialize()
	{
	}

	[Token(Token = "0x6001CD1")]
	[Address(RVA = "0x1210238", Offset = "0x1210238", VA = "0x1210238", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001CD2")]
	[Address(RVA = "0x1210324", Offset = "0x1210324", VA = "0x1210324", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001CD3")]
	[Address(RVA = "0x1210350", Offset = "0x1210350", VA = "0x1210350")]
	[IteratorStateMachine(typeof(<DelayDetach>d__61))]
	private IEnumerator DelayDetach()
	{
		return null;
	}

	[Token(Token = "0x6001CD4")]
	[Address(RVA = "0x12103EC", Offset = "0x12103EC", VA = "0x12103EC", Slot = "15")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6001CD5")]
	[Address(RVA = "0x1210618", Offset = "0x1210618", VA = "0x1210618")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001CD8")]
	[Address(RVA = "0x12106C4", Offset = "0x12106C4", VA = "0x12106C4")]
	public void RedefineOwner(IOwner newOwner)
	{
	}

	[Token(Token = "0x6001CD9")]
	[Address(RVA = "0x12106D4", Offset = "0x12106D4", VA = "0x12106D4", Slot = "16")]
	public virtual VrBullet[] CreateAndFire(IOwner owningItem, BoltEntity weapon, Identifier weapon_Id, Vector3 position, Vector3 direction, float shotPower, bool ownedByNonPlayerAgent, bool fromEvent, int groupId = -1)
	{
		return null;
	}

	[Token(Token = "0x6001CDA")]
	[Address(RVA = "0x1210EE0", Offset = "0x1210EE0", VA = "0x1210EE0", Slot = "17")]
	protected virtual VrBullet Create(IOwner owner, BoltEntity weapon, Identifier weapon_Id, Vector3 position, Vector3 direction, bool fromEvent)
	{
		return null;
	}

	[Token(Token = "0x6001CDB")]
	[Address(RVA = "0x121132C", Offset = "0x121132C", VA = "0x121132C", Slot = "18")]
	public virtual void Fire(float damageScaler = 1f)
	{
	}

	[Token(Token = "0x6001CDC")]
	[Address(RVA = "0x12111D0", Offset = "0x12111D0", VA = "0x12111D0")]
	private PlayerAgent GetPlayerAgent()
	{
		return null;
	}

	[Token(Token = "0x6001CDD")]
	[Address(RVA = "0x1210300", Offset = "0x1210300", VA = "0x1210300")]
	protected void ResetLifeTime()
	{
	}

	[Token(Token = "0x6001CDE")]
	[Address(RVA = "0x1211424", Offset = "0x1211424", VA = "0x1211424")]
	public void GuaranteeMissFaction(Faction factionToMiss)
	{
	}

	[Token(Token = "0x6001CDF")]
	[Address(RVA = "0x1211510", Offset = "0x1211510", VA = "0x1211510", Slot = "19")]
	protected virtual HealthStatus GetHealthStatusForCollider(Collider col)
	{
		return null;
	}

	[Token(Token = "0x6001CE0")]
	[Address(RVA = "0x12117C0", Offset = "0x12117C0", VA = "0x12117C0", Slot = "20")]
	protected virtual void HandleHit(Collider collider, Rigidbody rigidbody, Vector3 hitPoint, Vector3 hitNormal, Vector3 velocity)
	{
	}

	[Token(Token = "0x6001CE1")]
	[Address(RVA = "0x1211874", Offset = "0x1211874", VA = "0x1211874", Slot = "21")]
	protected virtual void HandleHit(HealthStatus damageReceiver, Collider collider, Rigidbody rigidbody, Vector3 hitPoint, Vector3 hitNormal, Vector3 velocity)
	{
	}

	[Token(Token = "0x6001CE2")]
	[Address(RVA = "0x1211FA0", Offset = "0x1211FA0", VA = "0x1211FA0")]
	private bool MetaGunDamage(Identifier ID, out float damage)
	{
		return default(bool);
	}

	[Token(Token = "0x6001CE3")]
	[Address(RVA = "0x1212268", Offset = "0x1212268", VA = "0x1212268", Slot = "22")]
	protected virtual void CheckLifetime()
	{
	}

	[Token(Token = "0x6001CE4")]
	[Address(RVA = "0x12122BC", Offset = "0x12122BC", VA = "0x12122BC", Slot = "23")]
	protected virtual void ImpactAction()
	{
	}

	[Token(Token = "0x6001CE5")]
	[Address(RVA = "0x12122E0", Offset = "0x12122E0", VA = "0x12122E0", Slot = "24")]
	protected virtual void FinalAction()
	{
	}

	[Token(Token = "0x6001CE6")]
	[Address(RVA = "0x1212304", Offset = "0x1212304", VA = "0x1212304", Slot = "25")]
	protected virtual void Reset()
	{
	}

	[Token(Token = "0x6001CE7")]
	[Address(RVA = "0x12110E4", Offset = "0x12110E4", VA = "0x12110E4")]
	private GameObject CreateFromPool(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6001CE8")]
	[Address(RVA = "0x1212394", Offset = "0x1212394", VA = "0x1212394", Slot = "26")]
	protected virtual void OnKilled()
	{
	}

	[Token(Token = "0x6001CE9")]
	[Address(RVA = "0x12104A0", Offset = "0x12104A0", VA = "0x12104A0")]
	public void ReturnToPool()
	{
	}

	[Token(Token = "0x6001CEA")]
	[Address(RVA = "0x12113B0", Offset = "0x12113B0", VA = "0x12113B0")]
	public float CalculateBulletBaseDamage(Identifier ID, float damageScale)
	{
		return default(float);
	}

	[Token(Token = "0x6001CEB")]
	[Address(RVA = "0x1211404", Offset = "0x1211404", VA = "0x1211404")]
	public float CalculateBulletNormalizedForce(float damageScale = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x6001CEC")]
	[Address(RVA = "0x1212398", Offset = "0x1212398", VA = "0x1212398", Slot = "27")]
	public virtual float CalculateBulletDamageConsideringFalloff(HealthStatus healthReceiver, float damageValue, Vector3 firePos, Vector3 hitPos)
	{
		return default(float);
	}

	[Token(Token = "0x6001CED")]
	[Address(RVA = "0x12124A4", Offset = "0x12124A4", VA = "0x12124A4", Slot = "28")]
	public virtual void FireTracer(Transform transformToTrack, bool keepUpdated = false)
	{
	}

	[Token(Token = "0x6001CEE")]
	[Address(RVA = "0x1212640", Offset = "0x1212640", VA = "0x1212640", Slot = "29")]
	public virtual void FireTracer(Vector3 hitPos)
	{
	}

	[Token(Token = "0x6001CEF")]
	[Address(RVA = "0x12128B4", Offset = "0x12128B4", VA = "0x12128B4")]
	public float GetRecoilAmount()
	{
		return default(float);
	}

	[Token(Token = "0x6001CF0")]
	[Address(RVA = "0x12128BC", Offset = "0x12128BC", VA = "0x12128BC")]
	public GameObject GetEjectedShellPrefab()
	{
		return null;
	}

	[Token(Token = "0x6001CF1")]
	[Address(RVA = "0x12109C8", Offset = "0x12109C8", VA = "0x12109C8")]
	protected ShotDirectionInfo[] ShotSpread(int numberOfShots, Vector3 initialPosition, Vector3 initialDirection, Vector2 shotSpread)
	{
		return null;
	}

	[Token(Token = "0x6001CF2")]
	[Address(RVA = "0x1212978", Offset = "0x1212978", VA = "0x1212978")]
	public void SetFirePos(Vector3 value)
	{
	}

	[Token(Token = "0x6001CF3")]
	[Address(RVA = "0x1212984", Offset = "0x1212984", VA = "0x1212984")]
	public void EnableRendering(bool active)
	{
	}

	[Token(Token = "0x6001CF4")]
	[Address(RVA = "0x1212A28", Offset = "0x1212A28", VA = "0x1212A28")]
	public VrBullet()
	{
	}
}
[Serializable]
[Token(Token = "0x20004EA")]
public class BulletEventHooks
{
	[Token(Token = "0x4001786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEvent OnFire;

	[Token(Token = "0x4001787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnImpact;

	[Token(Token = "0x4001788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnFinalAction;

	[Token(Token = "0x6001CFB")]
	[Address(RVA = "0x1212B58", Offset = "0x1212B58", VA = "0x1212B58")]
	public BulletEventHooks()
	{
	}
}
[Serializable]
[Token(Token = "0x20004EB")]
public class ShotDirectionInfo
{
	[Token(Token = "0x4001789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 m_position;

	[Token(Token = "0x400178A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_direction;

	[Token(Token = "0x6001CFC")]
	[Address(RVA = "0x12128C4", Offset = "0x12128C4", VA = "0x12128C4")]
	public ShotDirectionInfo(Vector3 position, Vector3 direction)
	{
	}

	[Token(Token = "0x6001CFD")]
	[Address(RVA = "0x1212D6C", Offset = "0x1212D6C", VA = "0x1212D6C")]
	public Vector3 GetPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001CFE")]
	[Address(RVA = "0x1212D78", Offset = "0x1212D78", VA = "0x1212D78")]
	public Vector3 GetDirection()
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20004EC")]
public abstract class VrBullet_Colliding : VrBullet
{
	[Token(Token = "0x17000472")]
	protected abstract Vector3 CurrentBulletVelocity
	{
		[Token(Token = "0x6001D02")]
		get;
	}

	[Token(Token = "0x6001CFF")]
	[Address(RVA = "0x1212D84", Offset = "0x1212D84", VA = "0x1212D84")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001D00")]
	[Address(RVA = "0x1212EC0", Offset = "0x1212EC0", VA = "0x1212EC0")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001D01")]
	[Address(RVA = "0x1212F78", Offset = "0x1212F78", VA = "0x1212F78")]
	protected void OnTriggerEnter(Collider other, Vector3 bulletVelocity, Vector3 impactPosition)
	{
	}

	[Token(Token = "0x6001D03")]
	[Address(RVA = "0x1213350", Offset = "0x1213350", VA = "0x1213350")]
	protected VrBullet_Colliding()
	{
	}
}
[Token(Token = "0x20004ED")]
[RequireComponent(typeof(Rigidbody))]
public class VrBullet_Missile : VrBullet_Colliding, ITargetedLaunchable, IPushable
{
	[Token(Token = "0x20004EE")]
	private enum MissileState
	{
		[Token(Token = "0x400179E")]
		HomingOnTarget,
		[Token(Token = "0x400179F")]
		HomingOnShooter,
		[Token(Token = "0x40017A0")]
		FinalApproach,
		[Token(Token = "0x40017A1")]
		DeflectedOffshoot
	}

	[Token(Token = "0x400178B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[UnityEngine.Tooltip("Speed we fly forwards at in metres per scaled second.")]
	[SerializeField]
	[Min(0f)]
	private float m_moveSpeed;

	[Token(Token = "0x400178C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	[UnityEngine.Tooltip("Maximum turn angle towards the target in degrees per scaled second while homing.")]
	[SerializeField]
	[Min(0f)]
	private float m_maximumTurnSpeedHoming;

	[Token(Token = "0x400178D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[Min(0f)]
	[UnityEngine.Tooltip("Maximum turn angle towards the target in degrees per scaled second while deflected.")]
	[SerializeField]
	private float m_maximumTurnSpeedDeflected;

	[Token(Token = "0x400178E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	[UnityEngine.Tooltip("Speed of cosmetic roll.")]
	[SerializeField]
	private float m_rollSpeed;

	[Token(Token = "0x400178F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[UnityEngine.Tooltip("Stop turning to face towards the target once we've come within this distance of it. Useful to stop the missile eternally looping around the target point if it is empty.")]
	[SerializeField]
	[Min(0f)]
	private float m_homingDisableDistance;

	[Token(Token = "0x4001790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[UnityEngine.Tooltip("Prefab instanced for the explosion.")]
	[SerializeField]
	private HealthStatusUpdate_ColliderTrigger m_explosionPrefab;

	[Token(Token = "0x4001791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[Range(0f, 1f)]
	[SerializeField]
	[Header("Deflection")]
	[UnityEngine.Tooltip("Probability that successive deflected missiles get sent back at the target. Note that the first deflected missile will always get deflected back at them.")]
	private float m_deflectSuccessiveAtTargetChance;

	[Token(Token = "0x4001792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	[UnityEngine.Tooltip("Offset the target by this amount based on the position of the creating gun.")]
	[SerializeField]
	private Vector3 m_deflectTargetConstantOffset;

	[Token(Token = "0x4001793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[UnityEngine.Tooltip("Offset the target by up to this amount at random within a sphere.")]
	[SerializeField]
	[Min(0f)]
	private float m_deflectTargetRandomOffsetRadius;

	[Token(Token = "0x4001794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[UnityEngine.Tooltip("Child transform containing the mesh. This will be rapidly spun around if we're deflected as an offshoot to give the impression we're out of control (the root object still has to face forwards in the direction of travel).")]
	[SerializeField]
	private Transform m_meshTransform;

	[Token(Token = "0x4001795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Vector3 m_offshootSpinAxisLocal;

	[Token(Token = "0x4001796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private IOwner m_creator;

	[Token(Token = "0x4001797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Vector3 m_target;

	[Token(Token = "0x4001798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	private bool m_everDeflected;

	[Token(Token = "0x4001799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_frameOfLatestDeflection;

	[Token(Token = "0x400179A")]
	private const float c_deflectAddedPitch = 20f;

	[Token(Token = "0x400179B")]
	private const float c_deflectDisturbAngle = 5f;

	[Token(Token = "0x400179C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private MissileState m_state;

	[Token(Token = "0x17000473")]
	protected override Vector3 CurrentBulletVelocity
	{
		[Token(Token = "0x6001D09")]
		[Address(RVA = "0x1213B70", Offset = "0x1213B70", VA = "0x1213B70", Slot = "30")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000474")]
	private Vector3 IPushable.Position
	{
		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0x1213F14", Offset = "0x1213F14", VA = "0x1213F14", Slot = "37")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000475")]
	public bool IsPushed
	{
		[Token(Token = "0x6001D13")]
		[Address(RVA = "0x1214358", Offset = "0x1214358", VA = "0x1214358", Slot = "36")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000476")]
	private float IPushable.PushbackRadiusModifier
	{
		[Token(Token = "0x6001D14")]
		[Address(RVA = "0x1214360", Offset = "0x1214360", VA = "0x1214360", Slot = "38")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001D04")]
	[Address(RVA = "0x1213354", Offset = "0x1213354", VA = "0x1213354", Slot = "18")]
	public override void Fire(float damageScaler = 1f)
	{
	}

	[Token(Token = "0x6001D05")]
	[Address(RVA = "0x1213358", Offset = "0x1213358", VA = "0x1213358", Slot = "31")]
	public VrBullet[] CreateAndLaunch(IOwner creator, Vector3 position, Vector3 direction, Vector3 launchTarget, bool fromEvent, float shotPower = 1f)
	{
		return null;
	}

	[Token(Token = "0x6001D06")]
	[Address(RVA = "0x121365C", Offset = "0x121365C", VA = "0x121365C")]
	public void FireAtTarget(Vector3 target, float damageScaler = 1f)
	{
	}

	[Token(Token = "0x6001D07")]
	[Address(RVA = "0x12136A0", Offset = "0x12136A0", VA = "0x12136A0", Slot = "15")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001D08")]
	[Address(RVA = "0x12137BC", Offset = "0x12137BC", VA = "0x12137BC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001D0A")]
	[Address(RVA = "0x1213C1C", Offset = "0x1213C1C", VA = "0x1213C1C", Slot = "26")]
	protected override void OnKilled()
	{
	}

	[Token(Token = "0x6001D0B")]
	[Address(RVA = "0x1213CDC", Offset = "0x1213CDC", VA = "0x1213CDC", Slot = "20")]
	protected override void HandleHit(Collider collider, Rigidbody rigidbody, Vector3 hitPoint, Vector3 hitNormal, Vector3 velocity)
	{
	}

	[Token(Token = "0x6001D0C")]
	[Address(RVA = "0x1213C20", Offset = "0x1213C20", VA = "0x1213C20")]
	private void Explode()
	{
	}

	[Token(Token = "0x6001D0D")]
	[Address(RVA = "0x1213DA0", Offset = "0x1213DA0", VA = "0x1213DA0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001D0F")]
	[Address(RVA = "0x1213F34", Offset = "0x1213F34", VA = "0x1213F34", Slot = "32")]
	public bool AllowPush()
	{
		return default(bool);
	}

	[Token(Token = "0x6001D10")]
	[Address(RVA = "0x1213F44", Offset = "0x1213F44", VA = "0x1213F44", Slot = "33")]
	public bool StartPush(Vector3 impactPoint, Vector3 impactNormal, float strength)
	{
		return default(bool);
	}

	[Token(Token = "0x6001D11")]
	[Address(RVA = "0x1214310", Offset = "0x1214310", VA = "0x1214310", Slot = "34")]
	public void UnPush()
	{
	}

	[Token(Token = "0x6001D12")]
	[Address(RVA = "0x1214350", Offset = "0x1214350", VA = "0x1214350", Slot = "35")]
	public bool IsValid()
	{
		return default(bool);
	}

	[Token(Token = "0x6001D15")]
	[Address(RVA = "0x1214368", Offset = "0x1214368", VA = "0x1214368")]
	public VrBullet_Missile()
	{
	}
}
[Token(Token = "0x20004EF")]
public class VrBullet_Projectile : VrBullet_Colliding, ITargetedLaunchable
{
	[Token(Token = "0x20004F0")]
	[CompilerGenerated]
	private sealed class <EnableCollisionDelayed>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrBullet_Projectile <>4__this;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x17000478")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D26")]
			[Address(RVA = "0x12153B8", Offset = "0x12153B8", VA = "0x12153B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000479")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D28")]
			[Address(RVA = "0x1215400", Offset = "0x1215400", VA = "0x1215400", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0x1214C94", Offset = "0x1214C94", VA = "0x1214C94")]
		[DebuggerHidden]
		public <EnableCollisionDelayed>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0x1215100", Offset = "0x1215100", VA = "0x1215100", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0x1215104", Offset = "0x1215104", VA = "0x1215104", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x12153C0", Offset = "0x12153C0", VA = "0x12153C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40017A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[Header("Projectile Properties")]
	[SerializeField]
	protected float m_speed;

	[Token(Token = "0x40017A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	[SerializeField]
	protected bool m_modifyGravity;

	[Token(Token = "0x40017A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	protected float m_gravityModifier;

	[Token(Token = "0x40017A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[FormerlySerializedAs("m_collider")]
	[SerializeField]
	private Collider m_damageCollider;

	[Token(Token = "0x40017A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private Collider m_physicalCollider;

	[Token(Token = "0x40017A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SerializeField]
	private Collider m_shootableCollider;

	[Token(Token = "0x40017A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float m_currentModifier;

	[Token(Token = "0x40017A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x40017AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private List<Collider> m_colliders;

	[Token(Token = "0x17000477")]
	protected override Vector3 CurrentBulletVelocity
	{
		[Token(Token = "0x6001D1E")]
		[Address(RVA = "0x1214D58", Offset = "0x1214D58", VA = "0x1214D58", Slot = "30")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001D17")]
	[Address(RVA = "0x12143C4", Offset = "0x12143C4", VA = "0x12143C4", Slot = "14")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001D18")]
	[Address(RVA = "0x12146D4", Offset = "0x12146D4", VA = "0x12146D4", Slot = "31")]
	public VrBullet[] CreateAndLaunch(IOwner creator, Vector3 position, Vector3 direction, Vector3 launchTarget, bool fromEvent, float shotPower = 1f)
	{
		return null;
	}

	[Token(Token = "0x6001D19")]
	[Address(RVA = "0x1214710", Offset = "0x1214710", VA = "0x1214710")]
	public VrBullet[] CreateAndLaunchWithSpeed(IOwner creator, Vector3 position, Vector3 direction, Vector3 launchTarget, float speed, bool fromEvent, float shotPower = 1f)
	{
		return null;
	}

	[Token(Token = "0x6001D1A")]
	[Address(RVA = "0x1214A74", Offset = "0x1214A74", VA = "0x1214A74")]
	private void LaunchAtTarget(Vector3 launchTarget, float speed, float damageScaler = 1f)
	{
	}

	[Token(Token = "0x6001D1B")]
	[Address(RVA = "0x1214BF4", Offset = "0x1214BF4", VA = "0x1214BF4", Slot = "18")]
	public override void Fire(float damageScaler = 1f)
	{
	}

	[Token(Token = "0x6001D1C")]
	[Address(RVA = "0x1214B70", Offset = "0x1214B70", VA = "0x1214B70")]
	[IteratorStateMachine(typeof(<EnableCollisionDelayed>d__14))]
	private IEnumerator EnableCollisionDelayed(float delay)
	{
		return null;
	}

	[Token(Token = "0x6001D1D")]
	[Address(RVA = "0x1214CBC", Offset = "0x1214CBC", VA = "0x1214CBC", Slot = "32")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x6001D1F")]
	[Address(RVA = "0x1214D74", Offset = "0x1214D74", VA = "0x1214D74", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001D20")]
	[Address(RVA = "0x1214E18", Offset = "0x1214E18", VA = "0x1214E18", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001D21")]
	[Address(RVA = "0x121509C", Offset = "0x121509C", VA = "0x121509C")]
	public void Explode(HealthStatusUpdate_ColliderTrigger explosion)
	{
	}

	[Token(Token = "0x6001D22")]
	[Address(RVA = "0x12150E8", Offset = "0x12150E8", VA = "0x12150E8")]
	public VrBullet_Projectile()
	{
	}
}
[Token(Token = "0x20004F1")]
public class VrBullet_ProjectileKinematic : VrBullet_Colliding
{
	[Token(Token = "0x40017AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	protected float m_speed;

	[Token(Token = "0x40017B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	[SerializeField]
	protected bool m_modifyGravity;

	[Token(Token = "0x40017B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	protected float m_gravityModifier;

	[Token(Token = "0x40017B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float m_currentModifier;

	[Token(Token = "0x40017B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	protected Rigidbody m_rigidbody;

	[Token(Token = "0x40017B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	protected Collider m_collider;

	[Token(Token = "0x40017B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Vector3 m_forwardVector;

	[Token(Token = "0x40017B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private Transform m_cachedPlayerHeadAnchor;

	[Token(Token = "0x40017B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool m_hasCachedPlayerHeadAnchor;

	[Token(Token = "0x40017B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_lastCreationFrame;

	[Token(Token = "0x40017B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int s_countCreatedInFrame;

	[Token(Token = "0x40017BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static HashSet<VrBullet_ProjectileKinematic> s_activeNonPlayerInstances;

	[Token(Token = "0x1700047A")]
	protected override Vector3 CurrentBulletVelocity
	{
		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x12163B0", Offset = "0x12163B0", VA = "0x12163B0", Slot = "30")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6001D29")]
	[Address(RVA = "0x1215408", Offset = "0x1215408", VA = "0x1215408", Slot = "14")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001D2A")]
	[Address(RVA = "0x12154E8", Offset = "0x12154E8", VA = "0x12154E8")]
	private void CachePlayerHeadAnchorIfNeeded()
	{
	}

	[Token(Token = "0x6001D2B")]
	[Address(RVA = "0x1215578", Offset = "0x1215578", VA = "0x1215578")]
	private static bool IsBulletInactive(VrBullet_ProjectileKinematic bullet)
	{
		return default(bool);
	}

	[Token(Token = "0x6001D2C")]
	[Address(RVA = "0x121560C", Offset = "0x121560C", VA = "0x121560C", Slot = "16")]
	public override VrBullet[] CreateAndFire(IOwner owningItem, BoltEntity weapon, Identifier weapon_Id, Vector3 position, Vector3 direction, float shotPower, bool ownedByNonPlayerAgent, bool fromServer, int groupId = -1)
	{
		return null;
	}

	[Token(Token = "0x6001D2D")]
	[Address(RVA = "0x1215934", Offset = "0x1215934", VA = "0x1215934", Slot = "18")]
	public override void Fire(float damageScaler = 1f)
	{
	}

	[Token(Token = "0x6001D2E")]
	[Address(RVA = "0x1215A50", Offset = "0x1215A50", VA = "0x1215A50")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001D2F")]
	[Address(RVA = "0x1215FB4", Offset = "0x1215FB4", VA = "0x1215FB4", Slot = "20")]
	protected override void HandleHit(Collider collider, Rigidbody rigidbody, Vector3 hitPoint, Vector3 hitNormal, Vector3 velocity)
	{
	}

	[Token(Token = "0x6001D31")]
	[Address(RVA = "0x1216188", Offset = "0x1216188", VA = "0x1216188")]
	private void DrawCross(Vector3 point, Color color, float size)
	{
	}

	[Token(Token = "0x6001D32")]
	[Address(RVA = "0x12163CC", Offset = "0x12163CC", VA = "0x12163CC", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001D33")]
	[Address(RVA = "0x12165DC", Offset = "0x12165DC", VA = "0x12165DC")]
	public VrBullet_ProjectileKinematic()
	{
	}
}
[Token(Token = "0x20004F2")]
public class VrBullet_Raycast : VrBullet
{
	[Token(Token = "0x40017BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<RaycastHit> TriggerFireDamage;

	[Token(Token = "0x40017BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[Range(0f, 100f)]
	[SerializeField]
	protected float m_raycastDistance;

	[Token(Token = "0x40017BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	[UnityEngine.Tooltip("Raycast projectiles dont have a velocity. This is the scaler for the raycast direction to represent velocity.")]
	[SerializeField]
	protected float m_simulatedVelocitiyScaler;

	[Token(Token = "0x40017BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private RaycastHitDistanceComparer m_raycastHitDistanceComparer;

	[Token(Token = "0x40017BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private RaycastHit[] m_primaryHitBuffer;

	[Token(Token = "0x40017C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private RaycastHit[] m_secondaryHitBuffer;

	[Token(Token = "0x40017C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private List<RaycastHit[]> m_buffers;

	[Token(Token = "0x40017C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private List<RaycastHit> m_combinedBuffer;

	[Token(Token = "0x6001D35")]
	[Address(RVA = "0x1216694", Offset = "0x1216694", VA = "0x1216694", Slot = "14")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001D36")]
	[Address(RVA = "0x12168A0", Offset = "0x12168A0", VA = "0x12168A0", Slot = "18")]
	public override void Fire(float damageScaler = 1f)
	{
	}

	[Token(Token = "0x6001D37")]
	[Address(RVA = "0x121709C", Offset = "0x121709C", VA = "0x121709C", Slot = "27")]
	public override float CalculateBulletDamageConsideringFalloff(HealthStatus healthStatus, float damageValue, Vector3 firePos, Vector3 hitPos)
	{
		return default(float);
	}

	[Token(Token = "0x6001D38")]
	[Address(RVA = "0x12172BC", Offset = "0x12172BC", VA = "0x12172BC", Slot = "20")]
	protected override void HandleHit(Collider collider, Rigidbody rigidbody, Vector3 hitPoint, Vector3 hitNormal, Vector3 velocity)
	{
	}

	[Token(Token = "0x6001D39")]
	[Address(RVA = "0x1217400", Offset = "0x1217400", VA = "0x1217400")]
	public static void Sort(RaycastHit[] hits, int hitCount, IComparer<RaycastHit> distanceCompare)
	{
	}

	[Token(Token = "0x6001D3A")]
	[Address(RVA = "0x1217068", Offset = "0x1217068", VA = "0x1217068")]
	private Vector3 CalculateVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001D3B")]
	[Address(RVA = "0x1217464", Offset = "0x1217464", VA = "0x1217464")]
	public VrBullet_Raycast()
	{
	}
}
[Token(Token = "0x20004F3")]
internal class RaycastHitDistanceComparer : IComparer<RaycastHit>
{
	[Token(Token = "0x6001D3C")]
	[Address(RVA = "0x12174E8", Offset = "0x12174E8", VA = "0x12174E8", Slot = "4")]
	public int Compare(RaycastHit a, RaycastHit b)
	{
		return default(int);
	}

	[Token(Token = "0x6001D3D")]
	[Address(RVA = "0x12174E0", Offset = "0x12174E0", VA = "0x12174E0")]
	public RaycastHitDistanceComparer()
	{
	}
}
[Token(Token = "0x20004F4")]
public abstract class BaseAmmoDisplay : CachedMonoBehaviour
{
	[Token(Token = "0x40017C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private VrGun m_parentGun;

	[Token(Token = "0x40017C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private VrMagazine m_parentMagazine;

	[Token(Token = "0x1700047B")]
	protected int AmmoCount
	{
		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x1217528", Offset = "0x1217528", VA = "0x1217528")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700047C")]
	protected float NormalizedAmmoCount
	{
		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x1217664", Offset = "0x1217664", VA = "0x1217664")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001D40")]
	[Address(RVA = "0x12177C0", Offset = "0x12177C0", VA = "0x12177C0", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001D41")]
	[Address(RVA = "0x12178EC", Offset = "0x12178EC", VA = "0x12178EC")]
	protected BaseAmmoDisplay()
	{
	}
}
[Token(Token = "0x20004F5")]
public class DialNeedle : BaseAmmoDisplay
{
	[Token(Token = "0x40017C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Vector3 m_rotationAxis;

	[Token(Token = "0x40017C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float m_upperAngle;

	[Token(Token = "0x40017C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion m_restingRotation;

	[Token(Token = "0x6001D42")]
	[Address(RVA = "0x12178F4", Offset = "0x12178F4", VA = "0x12178F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001D43")]
	[Address(RVA = "0x1217924", Offset = "0x1217924", VA = "0x1217924")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001D44")]
	[Address(RVA = "0x1217A18", Offset = "0x1217A18", VA = "0x1217A18")]
	public DialNeedle()
	{
	}
}
[Token(Token = "0x20004F6")]
public class DrumAmmoDisplay : BaseAmmoDisplay
{
	[Token(Token = "0x40017C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer m_renderer;

	[Token(Token = "0x40017C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_currentValue;

	[Token(Token = "0x40017CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float m_speed;

	[Token(Token = "0x40017CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Color m_healthyAmmoColor;

	[Token(Token = "0x40017CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Color m_lowAmmoColor;

	[Token(Token = "0x40017CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Color m_emptyAmmoColor;

	[Token(Token = "0x40017CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Renderer m_glassRenderer;

	[Token(Token = "0x6001D45")]
	[Address(RVA = "0x1217A78", Offset = "0x1217A78", VA = "0x1217A78", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001D46")]
	[Address(RVA = "0x1217B40", Offset = "0x1217B40", VA = "0x1217B40")]
	private void Update()
	{
	}

	[Token(Token = "0x6001D47")]
	[Address(RVA = "0x1217F38", Offset = "0x1217F38", VA = "0x1217F38")]
	public DrumAmmoDisplay()
	{
	}
}
[Token(Token = "0x20004F7")]
public class GaugeAmmoDisplay : BaseAmmoDisplay
{
	[Token(Token = "0x40017CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Color m_healthyAmmoColor;

	[Token(Token = "0x40017D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Color m_lowAmmoColor;

	[Token(Token = "0x40017D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Color m_emptyAmmoColor;

	[Token(Token = "0x40017D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[FormerlySerializedAs("m_minAngle")]
	[SerializeField]
	private Vector3 m_emptyAngle;

	[Token(Token = "0x40017D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[SerializeField]
	[FormerlySerializedAs("m_maxAngle")]
	private Vector3 m_fullAngle;

	[Token(Token = "0x40017D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Transform[] m_needles;

	[Token(Token = "0x40017D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private float m_speed;

	[Token(Token = "0x40017D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float m_currentValue;

	[Token(Token = "0x40017D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Color32[] m_newColors;

	[Token(Token = "0x40017D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private VertexColorMappingSystem m_vertexColorMappingSystem;

	[Token(Token = "0x6001D48")]
	[Address(RVA = "0x1217F6C", Offset = "0x1217F6C", VA = "0x1217F6C", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001D49")]
	[Address(RVA = "0x1218004", Offset = "0x1218004", VA = "0x1218004")]
	private void Update()
	{
	}

	[Token(Token = "0x6001D4A")]
	[Address(RVA = "0x121871C", Offset = "0x121871C", VA = "0x121871C")]
	public GaugeAmmoDisplay()
	{
	}
}
[Token(Token = "0x20004F8")]
public class LasgunAmmoDisplay : BaseAmmoDisplay
{
	[Token(Token = "0x40017D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private MeshRenderer[] m_renderers;

	[Token(Token = "0x40017DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Color m_healthyAmmoColor;

	[Token(Token = "0x40017DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Color m_lowAmmoColor;

	[Token(Token = "0x40017DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Color m_emptyAmmoColor;

	[Token(Token = "0x40017DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Color m_offColor;

	[Token(Token = "0x40017DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Color32[] m_newColors;

	[Token(Token = "0x40017DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_currentValue;

	[Token(Token = "0x40017E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	private float m_speed;

	[Token(Token = "0x40017E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private VertexColorMappingSystem m_vertexColorMappingSystem;

	[Token(Token = "0x6001D4B")]
	[Address(RVA = "0x1218750", Offset = "0x1218750", VA = "0x1218750", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001D4C")]
	[Address(RVA = "0x12187E8", Offset = "0x12187E8", VA = "0x12187E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001D4D")]
	[Address(RVA = "0x12196FC", Offset = "0x12196FC", VA = "0x12196FC")]
	public LasgunAmmoDisplay()
	{
	}
}
[Token(Token = "0x20004F9")]
public class MagazineAmmoDisplay : BaseAmmoDisplay
{
	[Serializable]
	[Token(Token = "0x20004FA")]
	private class Mapping
	{
		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Mesh> MeshPerAmmoAmount;

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x1219AE8", Offset = "0x1219AE8", VA = "0x1219AE8")]
		public Mapping()
		{
		}
	}

	[Token(Token = "0x40017E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private LODGroup m_lodGroup;

	[Token(Token = "0x40017E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Generated Data (Do Not Edit)")]
	[SerializeField]
	private List<Mapping> m_lodMappings;

	[Token(Token = "0x40017E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<MeshFilter> m_eligibleLODMeshFilters;

	[Token(Token = "0x40017E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_currentValue;

	[Token(Token = "0x6001D4E")]
	[Address(RVA = "0x1219794", Offset = "0x1219794", VA = "0x1219794")]
	private void Update()
	{
	}

	[Token(Token = "0x6001D4F")]
	[Address(RVA = "0x12199EC", Offset = "0x12199EC", VA = "0x12199EC")]
	private int RedShadeComparison(Color32 x, Color32 y)
	{
		return default(int);
	}

	[Token(Token = "0x6001D50")]
	[Address(RVA = "0x1219A08", Offset = "0x1219A08", VA = "0x1219A08")]
	public MagazineAmmoDisplay()
	{
	}
}
[Token(Token = "0x20004FB")]
public class VertexColorMappingSystem : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20004FC")]
	private class MeshRange
	{
		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Start;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Count;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int RendererIndex;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int ColorIndex;

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0x121A26C", Offset = "0x121A26C", VA = "0x121A26C")]
		public MeshRange()
		{
		}
	}

	[Token(Token = "0x40017E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MeshRenderer[] m_renderers;

	[Token(Token = "0x40017E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color32[] m_mappingColors;

	[Token(Token = "0x40017E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("If enabled then mesh ranges will be ignored and the first supplied vertex colour will be applied to all verts in all mapped renderers")]
	[SerializeField]
	private bool m_mapToAllVertices;

	[Token(Token = "0x40017EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color32[] m_newColors;

	[Token(Token = "0x40017EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Mesh[] m_meshes;

	[Token(Token = "0x40017EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color32[][] m_meshColors;

	[Token(Token = "0x40017ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private List<MeshRange> m_meshRanges;

	[Token(Token = "0x40017EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly VertexAttributeDescriptor[] s_attributes;

	[Token(Token = "0x6001D52")]
	[Address(RVA = "0x1219B70", Offset = "0x1219B70", VA = "0x1219B70")]
	protected void Start()
	{
	}

	[Token(Token = "0x6001D53")]
	[Address(RVA = "0x1219B80", Offset = "0x1219B80", VA = "0x1219B80")]
	private void Init()
	{
	}

	[Token(Token = "0x6001D54")]
	[Address(RVA = "0x12184AC", Offset = "0x12184AC", VA = "0x12184AC")]
	public void UpdateColors(Color32[] newColors)
	{
	}

	[Token(Token = "0x6001D55")]
	[Address(RVA = "0x1219E30", Offset = "0x1219E30", VA = "0x1219E30")]
	[ContextMenu("Build Color Indexes")]
	private void BuildColorIndexes()
	{
	}

	[Token(Token = "0x6001D56")]
	[Address(RVA = "0x121A274", Offset = "0x121A274", VA = "0x121A274")]
	public VertexColorMappingSystem()
	{
	}
}
[Token(Token = "0x20004FD")]
public class VrAmmoBox : VrItem
{
	[Token(Token = "0x40017F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private List<AmmoBoxEntry> m_ammoEntryList;

	[Token(Token = "0x1700047D")]
	public List<AmmoBoxEntry> AmmoEntryList
	{
		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x121A410", Offset = "0x121A410", VA = "0x121A410")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001D5A")]
	[Address(RVA = "0x121A418", Offset = "0x121A418", VA = "0x121A418")]
	public void ConsumeAmmoBox()
	{
	}

	[Token(Token = "0x6001D5B")]
	[Address(RVA = "0x121A6A0", Offset = "0x121A6A0", VA = "0x121A6A0")]
	public VrAmmoBox()
	{
	}
}
[Serializable]
[Token(Token = "0x20004FE")]
public class AmmoBoxEntry
{
	[Token(Token = "0x20004FF")]
	public enum AmmoRewardType
	{
		[Token(Token = "0x40017FC")]
		None,
		[Token(Token = "0x40017FD")]
		Specified,
		[Token(Token = "0x40017FE")]
		Full,
		[Token(Token = "0x40017FF")]
		Dynamic
	}

	[Token(Token = "0x40017F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Header("Ammo reward definition")]
	public Identifier m_ID;

	[Token(Token = "0x40017F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Reward Type")]
	public AmmoRewardType m_rewardType;

	[Token(Token = "0x40017F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Config for specific")]
	public int m_specifiedAmmoCount;

	[Token(Token = "0x40017F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Config for dynamic")]
	public int m_specifiedDynamicPercentageTarget;

	[Token(Token = "0x40017F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_enableDynamicVariance;

	[Token(Token = "0x40017F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_dynamicPercentageVariance;

	[Token(Token = "0x40017FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int m_minSpecificToGrant;

	[Token(Token = "0x6001D5C")]
	[Address(RVA = "0x121A74C", Offset = "0x121A74C", VA = "0x121A74C")]
	public int GetAmmoCount(int currentAmmo, int maxAmmo)
	{
		return default(int);
	}

	[Token(Token = "0x6001D5D")]
	[Address(RVA = "0x121A788", Offset = "0x121A788", VA = "0x121A788")]
	public int CalculateDynamicAmmoCount(int currentAmmo, int maxAmmo, int maxPercentage)
	{
		return default(int);
	}

	[Token(Token = "0x6001D5E")]
	[Address(RVA = "0x121A818", Offset = "0x121A818", VA = "0x121A818")]
	public AmmoBoxEntry()
	{
	}
}
[Token(Token = "0x2000500")]
public class VrMagazine : VrItem, IDamageTypeProvider
{
	[Token(Token = "0x2000501")]
	[CompilerGenerated]
	private sealed class <DissolveRoutine>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrMagazine <>4__this;

		[Token(Token = "0x17000487")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D89")]
			[Address(RVA = "0x121C034", Offset = "0x121C034", VA = "0x121C034", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000488")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D8B")]
			[Address(RVA = "0x121C07C", Offset = "0x121C07C", VA = "0x121C07C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0x121BB14", Offset = "0x121BB14", VA = "0x121BB14")]
		[DebuggerHidden]
		public <DissolveRoutine>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0x121BD30", Offset = "0x121BD30", VA = "0x121BD30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0x121BD4C", Offset = "0x121BD4C", VA = "0x121BD4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0x121C008", Offset = "0x121C008", VA = "0x121C008")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0x121C03C", Offset = "0x121C03C", VA = "0x121C03C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	[Header("Vr Magazine - Object Setup")]
	private VrBullet m_bulletPrefab;

	[Token(Token = "0x4001801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private bool m_hasInfiniteAmmo;

	[Token(Token = "0x4001802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
	[FormerlySerializedAs("m_ammoCapacity")]
	[SerializeField]
	[UnityEngine.Tooltip("The amount of ammo in the clip if the amount is finite. Ignored if infinite.")]
	protected int m_finiteAmmoCapacity;

	[Token(Token = "0x4001803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	public int m_startingAmmoCount;

	[Token(Token = "0x4001804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	private NetworkVrMagazine m_networkVrMagazine;

	[Token(Token = "0x4001805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[SerializeField]
	private bool m_canManuallyPullOutMagazine;

	[Token(Token = "0x4001806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private Coroutine m_dissolveRoutine;

	[Token(Token = "0x4001807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	protected int m_currentAmmoCount;

	[Token(Token = "0x4001808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private VrGun m_gun;

	[Token(Token = "0x4001809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private MechanismKey m_attachedKey;

	[Token(Token = "0x400180A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private bool m_hasEjectCallback;

	[Token(Token = "0x400180B")]
	private const float c_ejectCollisionIgnoreDuration = 0.25f;

	[Token(Token = "0x400180C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	internal Action OnFired;

	[Token(Token = "0x400180D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public Identifier m_MagType;

	[Token(Token = "0x1700047E")]
	public bool HasInfiniteAmmo
	{
		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0x121A830", Offset = "0x121A830", VA = "0x121A830")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700047F")]
	public bool IsEmpty
	{
		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x121A838", Offset = "0x121A838", VA = "0x121A838")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000480")]
	protected override bool CanEmitItemDroppedEvent
	{
		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x121A848", Offset = "0x121A848", VA = "0x121A848", Slot = "44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000481")]
	public MechanismKey AttachedKey
	{
		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x121A850", Offset = "0x121A850", VA = "0x121A850")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000482")]
	public override bool CanHide
	{
		[Token(Token = "0x6001D63")]
		[Address(RVA = "0x121A858", Offset = "0x121A858", VA = "0x121A858", Slot = "20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000483")]
	public int StartingAmmoCount
	{
		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x121A96C", Offset = "0x121A96C", VA = "0x121A96C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000484")]
	public int FiniteAmmoCount
	{
		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x121A974", Offset = "0x121A974", VA = "0x121A974")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000485")]
	public DamageType damageType
	{
		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x121A97C", Offset = "0x121A97C", VA = "0x121A97C", Slot = "51")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x17000486")]
	public bool HasAttachedGun
	{
		[Token(Token = "0x6001D73")]
		[Address(RVA = "0x121B4AC", Offset = "0x121B4AC", VA = "0x121B4AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001D67")]
	[Address(RVA = "0x121AA1C", Offset = "0x121AA1C", VA = "0x121AA1C", Slot = "25")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001D68")]
	[Address(RVA = "0x121ABC8", Offset = "0x121ABC8", VA = "0x121ABC8", Slot = "29")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001D69")]
	[Address(RVA = "0x121AD38", Offset = "0x121AD38", VA = "0x121AD38", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001D6A")]
	[Address(RVA = "0x121AFB0", Offset = "0x121AFB0", VA = "0x121AFB0")]
	public void ForceAttachMagToGun(VrGun gun)
	{
	}

	[Token(Token = "0x6001D6B")]
	[Address(RVA = "0x121B15C", Offset = "0x121B15C", VA = "0x121B15C")]
	private void OnKeyInserted()
	{
	}

	[Token(Token = "0x6001D6C")]
	[Address(RVA = "0x121B1BC", Offset = "0x121B1BC", VA = "0x121B1BC")]
	private void OnKeyEjected()
	{
	}

	[Token(Token = "0x6001D6D")]
	[Address(RVA = "0x121AFA4", Offset = "0x121AFA4", VA = "0x121AFA4")]
	[ContextMenu("Reset Mag")]
	public void Reset()
	{
	}

	[Token(Token = "0x6001D6E")]
	[Address(RVA = "0x121B364", Offset = "0x121B364", VA = "0x121B364", Slot = "34")]
	public override void OnItemDropped()
	{
	}

	[Token(Token = "0x6001D6F")]
	[Address(RVA = "0x121B458", Offset = "0x121B458", VA = "0x121B458")]
	public void ReduceAmmo(int amount = 1)
	{
	}

	[Token(Token = "0x6001D70")]
	[Address(RVA = "0x121B47C", Offset = "0x121B47C", VA = "0x121B47C")]
	public void IncreaseAmmo(int amount = 1)
	{
	}

	[Token(Token = "0x6001D71")]
	[Address(RVA = "0x121B494", Offset = "0x121B494", VA = "0x121B494", Slot = "52")]
	public virtual void SetAmmo(int amount)
	{
	}

	[Token(Token = "0x6001D72")]
	[Address(RVA = "0x121B49C", Offset = "0x121B49C", VA = "0x121B49C")]
	public void SetGunReference(VrGun gun)
	{
	}

	[Token(Token = "0x6001D74")]
	[Address(RVA = "0x121B50C", Offset = "0x121B50C", VA = "0x121B50C")]
	public void ClearGunReference()
	{
	}

	[Token(Token = "0x6001D75")]
	[Address(RVA = "0x121B568", Offset = "0x121B568", VA = "0x121B568")]
	public int GetAmmoCount()
	{
		return default(int);
	}

	[Token(Token = "0x6001D76")]
	[Address(RVA = "0x121B570", Offset = "0x121B570", VA = "0x121B570")]
	public int GetAmmoCapacity()
	{
		return default(int);
	}

	[Token(Token = "0x6001D77")]
	[Address(RVA = "0x121B5D8", Offset = "0x121B5D8", VA = "0x121B5D8")]
	public VrBullet GetBulletPrefab()
	{
		return null;
	}

	[Token(Token = "0x6001D78")]
	[Address(RVA = "0x121B5E0", Offset = "0x121B5E0", VA = "0x121B5E0")]
	public ITargetedLaunchable GetTargetedLaunchable()
	{
		return null;
	}

	[Token(Token = "0x6001D79")]
	[Address(RVA = "0x121B628", Offset = "0x121B628", VA = "0x121B628", Slot = "53")]
	public virtual float GetNormalizedAmmoCount()
	{
		return default(float);
	}

	[Token(Token = "0x6001D7A")]
	[Address(RVA = "0x121AEF8", Offset = "0x121AEF8", VA = "0x121AEF8")]
	private void InitializeDissolver()
	{
	}

	[Token(Token = "0x6001D7B")]
	[Address(RVA = "0x121B650", Offset = "0x121B650", VA = "0x121B650")]
	private void ResetDissolver()
	{
	}

	[Token(Token = "0x6001D7C")]
	[Address(RVA = "0x121B6DC", Offset = "0x121B6DC", VA = "0x121B6DC", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001D7D")]
	[Address(RVA = "0x121B19C", Offset = "0x121B19C", VA = "0x121B19C")]
	public void SetCanBePickedUp(bool value)
	{
	}

	[Token(Token = "0x6001D7E")]
	[Address(RVA = "0x121B200", Offset = "0x121B200", VA = "0x121B200")]
	public void DisableGraspMarkerIfMagazineIsEmptyAndEjected()
	{
	}

	[Token(Token = "0x6001D7F")]
	[Address(RVA = "0x121B728", Offset = "0x121B728", VA = "0x121B728", Slot = "41")]
	public override void OnItemRemovedFromInventory(VrHand hand, bool fromServer = false)
	{
	}

	[Token(Token = "0x6001D80")]
	[Address(RVA = "0x121B388", Offset = "0x121B388", VA = "0x121B388")]
	private void DissolveTrigger()
	{
	}

	[Token(Token = "0x6001D81")]
	[Address(RVA = "0x121BA20", Offset = "0x121BA20", VA = "0x121BA20")]
	private void TriggerDissolver()
	{
	}

	[Token(Token = "0x6001D82")]
	[Address(RVA = "0x121B9AC", Offset = "0x121B9AC", VA = "0x121B9AC")]
	[IteratorStateMachine(typeof(<DissolveRoutine>d__58))]
	private IEnumerator DissolveRoutine()
	{
		return null;
	}

	[Token(Token = "0x6001D83")]
	[Address(RVA = "0x121BB3C", Offset = "0x121BB3C", VA = "0x121BB3C")]
	private void DissolveComplete()
	{
	}

	[Token(Token = "0x6001D84")]
	[Address(RVA = "0x121BCBC", Offset = "0x121BCBC", VA = "0x121BCBC")]
	public VrMagazine()
	{
	}
}
[Token(Token = "0x2000502")]
public class VrMagazineRegenerating : VrMagazine
{
	[Token(Token = "0x2000503")]
	private enum DepletionBehaviour
	{
		[Token(Token = "0x400181C")]
		NormalRegeneration,
		[Token(Token = "0x400181D")]
		UniqueRegeneration,
		[Token(Token = "0x400181E")]
		RemainEmpty
	}

	[Token(Token = "0x4001811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	[SerializeField]
	[Min(0.01f)]
	[UnityEngine.Tooltip("The time delay between regenerating each bullet in normal use.")]
	private float m_standardRegenerationPeriod;

	[Token(Token = "0x4001812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	[SerializeField]
	[UnityEngine.Tooltip("What should happen when we run out of ammo.\n\nNormal Regeneration: do nothing special, continue regenerating ammo normally.\n\nUniqueRegeneration: regenerate a set amount of ammo over a given amount of time.\n\nRemainEmpty: stop regenerating ammo and remain empty.")]
	private DepletionBehaviour m_depletionBehaviour;

	[Token(Token = "0x4001813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	[SerializeField]
	[UnityEngine.Tooltip("Alternative period to use after the final bullet has been fired. Used only if the depletion behaviour is UniqueRegeneration.")]
	[Min(0f)]
	private float m_depletedUniqueRegenerationPeriod;

	[Token(Token = "0x4001814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("After fully depleting all ammo, regenerate to this much ammo before allowing shots again. Used only if the depletion behaviour is UniqueRegeneration.")]
	private int m_depletedUniqueRegenerationTarget;

	[Token(Token = "0x4001815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	[UnityEngine.Tooltip("Invoked when our ammo count reaches zero.")]
	public UnityEvent OnDepleted;

	[Token(Token = "0x4001816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	[UnityEngine.Tooltip("Invoked when we regenerate any amount of ammo from having none. Will never trigger if the depletion behaviour is RemainEmpty.")]
	public UnityEvent OnDepletedRegenerationEnd;

	[Token(Token = "0x4001817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private float m_regenerationPeriod;

	[Token(Token = "0x4001818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
	private float m_regenerationTimer;

	[Token(Token = "0x4001819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private int m_regenerationTarget;

	[Token(Token = "0x400181A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	private bool m_running;

	[Token(Token = "0x6001D8C")]
	[Address(RVA = "0x121C084", Offset = "0x121C084", VA = "0x121C084", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001D8D")]
	[Address(RVA = "0x121C0B0", Offset = "0x121C0B0", VA = "0x121C0B0", Slot = "27")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6001D8E")]
	[Address(RVA = "0x121C0E4", Offset = "0x121C0E4", VA = "0x121C0E4", Slot = "52")]
	public override void SetAmmo(int amount)
	{
	}

	[Token(Token = "0x6001D8F")]
	[Address(RVA = "0x121C188", Offset = "0x121C188", VA = "0x121C188", Slot = "53")]
	public override float GetNormalizedAmmoCount()
	{
		return default(float);
	}

	[Token(Token = "0x6001D90")]
	[Address(RVA = "0x121C1F4", Offset = "0x121C1F4", VA = "0x121C1F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001D91")]
	[Address(RVA = "0x121C27C", Offset = "0x121C27C", VA = "0x121C27C")]
	public VrMagazineRegenerating()
	{
	}
}
[Token(Token = "0x2000504")]
public class VrMuzzleFlash : MonoBehaviour
{
	[Token(Token = "0x2000505")]
	[CompilerGenerated]
	private sealed class <DelayedMuzzleFlashRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delayTimeSeconds;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VrMuzzleFlash <>4__this;

		[Token(Token = "0x17000489")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001D9C")]
			[Address(RVA = "0x121CEDC", Offset = "0x121CEDC", VA = "0x121CEDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700048A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0x121CF24", Offset = "0x121CF24", VA = "0x121CF24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0x121CCA0", Offset = "0x121CCA0", VA = "0x121CCA0")]
		[DebuggerHidden]
		public <DelayedMuzzleFlashRoutine>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0x121CE20", Offset = "0x121CE20", VA = "0x121CE20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0x121CE24", Offset = "0x121CE24", VA = "0x121CE24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0x121CEE4", Offset = "0x121CEE4", VA = "0x121CEE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400181F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_firstFrame;

	[Token(Token = "0x4001820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool m_allowRotation;

	[Token(Token = "0x4001821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem[] m_particlesToTrigger;

	[Token(Token = "0x4001822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animation[] m_animationToTrigger;

	[Token(Token = "0x4001823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PTPointLight m_lightSource;

	[Token(Token = "0x4001824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private AnimationCurve m_lightFadeGraph;

	[Token(Token = "0x4001825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_muzzleFlashDelay;

	[Token(Token = "0x4001826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_startTime;

	[Token(Token = "0x6001D92")]
	[Address(RVA = "0x121C280", Offset = "0x121C280", VA = "0x121C280")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001D93")]
	[Address(RVA = "0x121C310", Offset = "0x121C310", VA = "0x121C310")]
	public void Reset()
	{
	}

	[Token(Token = "0x6001D94")]
	[Address(RVA = "0x121C744", Offset = "0x121C744", VA = "0x121C744")]
	[ContextMenu("Trigger")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6001D95")]
	[Address(RVA = "0x121C780", Offset = "0x121C780", VA = "0x121C780")]
	[IteratorStateMachine(typeof(<DelayedMuzzleFlashRoutine>d__11))]
	private IEnumerator DelayedMuzzleFlashRoutine(float delayTimeSeconds)
	{
		return null;
	}

	[Token(Token = "0x6001D96")]
	[Address(RVA = "0x121C804", Offset = "0x121C804", VA = "0x121C804")]
	private void DoTrigger()
	{
	}

	[Token(Token = "0x6001D97")]
	[Address(RVA = "0x121CCC8", Offset = "0x121CCC8", VA = "0x121CCC8")]
	public void Update()
	{
	}

	[Token(Token = "0x6001D98")]
	[Address(RVA = "0x121CDD8", Offset = "0x121CDD8", VA = "0x121CDD8")]
	public VrMuzzleFlash()
	{
	}
}
[Token(Token = "0x2000506")]
[ExecuteInEditMode]
public class VrTracer : Poolable
{
	[Token(Token = "0x400182B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform m_scaleTransform;

	[Token(Token = "0x400182C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[FormerlySerializedAs("m_mesh")]
	public MeshRenderer m_meshRenderer;

	[Token(Token = "0x400182D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve m_scaleOverTime;

	[Token(Token = "0x400182E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Gradient m_colorOverTime;

	[Token(Token = "0x400182F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float m_fadeRate;

	[Token(Token = "0x4001830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_beamLength;

	[Token(Token = "0x4001831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_fade;

	[Token(Token = "0x4001832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private MaterialPropertyBlock m_propertyBlock;

	[Token(Token = "0x4001833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_shaderPropertyColor;

	[Token(Token = "0x4001834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int s_shaderPropertyEffectControl;

	[Token(Token = "0x6001D9F")]
	[Address(RVA = "0x1212550", Offset = "0x1212550", VA = "0x1212550")]
	public GameObject CreateFromPool(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6001DA0")]
	[Address(RVA = "0x121CF2C", Offset = "0x121CF2C", VA = "0x121CF2C", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6001DA1")]
	[Address(RVA = "0x121274C", Offset = "0x121274C", VA = "0x121274C")]
	public void Init(Vector3 from, Vector3 to)
	{
	}

	[Token(Token = "0x6001DA2")]
	[Address(RVA = "0x121263C", Offset = "0x121263C", VA = "0x121263C")]
	public void Init(Vector3 from, Transform transformToTrack, bool keepUpdated)
	{
	}

	[Token(Token = "0x6001DA3")]
	[Address(RVA = "0x121D0B8", Offset = "0x121D0B8", VA = "0x121D0B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001DA4")]
	[Address(RVA = "0x121CF4C", Offset = "0x121CF4C", VA = "0x121CF4C")]
	private void UpdateShaderParam()
	{
	}

	[Token(Token = "0x6001DA5")]
	[Address(RVA = "0x121D1AC", Offset = "0x121D1AC", VA = "0x121D1AC")]
	public VrTracer()
	{
	}
}
[Token(Token = "0x2000507")]
[RequireComponent(typeof(WeaponMeta))]
public class VrGun : VrItem, IOwner, IStunnable, IFactionMember
{
	[Token(Token = "0x2000508")]
	public enum ShootingAvailability
	{
		[Token(Token = "0x4001868")]
		Allowed,
		[Token(Token = "0x4001869")]
		BlockedDueToExternalFactors,
		[Token(Token = "0x400186A")]
		BlockedAsNoMagInserted,
		[Token(Token = "0x400186B")]
		BlockedAsNoAmmoAvailable
	}

	[Token(Token = "0x2000509")]
	[CompilerGenerated]
	private sealed class <FireBullets>d__85 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrBullet[] bullets;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float shotPower;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__2;

		[Token(Token = "0x17000495")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001DEB")]
			[Address(RVA = "0x12205D4", Offset = "0x12205D4", VA = "0x12205D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000496")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001DED")]
			[Address(RVA = "0x122061C", Offset = "0x122061C", VA = "0x122061C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0x121F508", Offset = "0x121F508", VA = "0x121F508")]
		[DebuggerHidden]
		public <FireBullets>d__85(int <>1__state)
		{
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0x122052C", Offset = "0x122052C", VA = "0x122052C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0x1220530", Offset = "0x1220530", VA = "0x1220530", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0x12205DC", Offset = "0x12205DC", VA = "0x12205DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	private int animNameTriggerBlendHash;

	[Token(Token = "0x4001836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private int animNameTriggerPressedHash;

	[Token(Token = "0x4001837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	private int animNameTriggerReleasedHash;

	[Token(Token = "0x4001838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private int animNameFireHash;

	[Token(Token = "0x4001839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
	private int animNameFireLastHash;

	[Token(Token = "0x400183A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private int animNameSlotMagHash;

	[Token(Token = "0x400183B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
	private int animNameDetachMagHash;

	[Token(Token = "0x400183C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private int animNameSecondaryActionStartHash;

	[Token(Token = "0x400183D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	private int animNameSecondaryActionStopHash;

	[Token(Token = "0x400183E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<Identifier, ShootingAvailability> OnMagWithoutAmmo;

	[Token(Token = "0x400183F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	[SerializeField]
	private HitReactionConfig m_reactionProperties;

	[Token(Token = "0x4001840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	[Header("Base gun setup")]
	public UnityEvent OnGunFired;

	[Token(Token = "0x4001841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public UnityEvent OnGunDryFired;

	[Token(Token = "0x4001842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public UnityEvent OnGun10ConsecutiveDryFired;

	[Token(Token = "0x4001843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	public UnityEvent OnMagInserted;

	[Token(Token = "0x4001844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public UnityEvent OnMagRemoved;

	[Token(Token = "0x4001845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public UnityEvent OnStartFiring;

	[Token(Token = "0x4001846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public UnityEvent OnStopFiring;

	[Token(Token = "0x4001847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public UnityEvent OnUsageBlocked;

	[Token(Token = "0x4001848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	public UnityEvent OnUsageUnblocked;

	[Token(Token = "0x4001849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x400184A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<VrGun> OnAnyGunDryFired;

	[Token(Token = "0x400184B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	public Action<VrBullet[]> OnBulletsCreated;

	[Token(Token = "0x400184C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	[SerializeField]
	private WeaponMeta m_weaponMeta;

	[Token(Token = "0x400184D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	[SerializeField]
	private VrMagazine m_magazine;

	[Token(Token = "0x400184E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private VrMagazine m_runtimeMagazine;

	[Token(Token = "0x400184F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	[SerializeField]
	protected MechanismKeyhole m_magazineKeyhole;

	[Token(Token = "0x4001850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	[UnityEngine.Tooltip("The transform we'll use to determine if we have a clear line of sight from the gun to the target. Also used as the muzzle (where bullets are created) if none are defined below.")]
	[SerializeField]
	private Transform m_raycastTransform;

	[Token(Token = "0x4001851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	[UnityEngine.Tooltip("Dedicated transform to place the fire audio in a specific place.")]
	[SerializeField]
	private Transform m_audioFireTransform;

	[Token(Token = "0x4001852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	[SerializeField]
	private VrGunAudioPlayer m_vrGunAudioPlayer;

	[Token(Token = "0x4001853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	[UnityEngine.Tooltip("Stores gun muzzles. If this array is empty, the raycast transform above will be used as the muzzle. If it contains more than one transform, we'll cycle through them in order as we create bullets.")]
	[SerializeField]
	private Transform[] m_dedicatedMuzzles;

	[Token(Token = "0x4001854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private int m_currentMuzzleIndex;

	[Token(Token = "0x4001855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	[Header("Supporting systems for gun")]
	[SerializeField]
	protected VrRecoil m_recoil;

	[Token(Token = "0x4001856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	[SerializeField]
	protected GunAnimationController m_animControl;

	[Token(Token = "0x4001857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private bool m_hasAnimController;

	[Token(Token = "0x4001858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D1")]
	private bool m_runTriggerBlend;

	[Token(Token = "0x4001859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	[SerializeField]
	[HideInInspector]
	[Obsolete("For backwards compatibility only. Use the first element of m_muzzleFlashes instead.")]
	private VrMuzzleFlash m_muzzleFlash;

	[Token(Token = "0x400185A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	[UnityEngine.Tooltip("Stores muzzle flashes. These should be in the same order as the dedicated muzzles if there are any. In most cases, use a single element at index 0.")]
	[SerializeField]
	private VrMuzzleFlash[] m_muzzleFlashes;

	[Token(Token = "0x400185B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	[SerializeField]
	protected VrShellEject m_shellEject;

	[Token(Token = "0x400185C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	[SerializeField]
	protected bool m_secondaryActionEjectsMagEveryPress;

	[Token(Token = "0x400185D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F1")]
	[SerializeField]
	protected bool m_autoEjectMagWhenZero;

	[Token(Token = "0x400185E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F2")]
	private bool m_usageExternallyBlocked;

	[Token(Token = "0x400185F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private NetworkVrGun m_networkVrGun;

	[Token(Token = "0x4001860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool s_forceBlockAllBulletCreation;

	[Token(Token = "0x4001861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private static bool s_hasStaticLevelResetCallback;

	[Token(Token = "0x4001862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	private bool m_wasTriggereRelased;

	[Token(Token = "0x4001863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x301")]
	private bool m_secondaryActionAnimToggleState;

	[Token(Token = "0x4001864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
	private int m_bulletIdCounter;

	[Token(Token = "0x4001865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	private int m_bulletIdReset;

	[Token(Token = "0x4001866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
	private int m_dryFireCounter;

	[Token(Token = "0x1700048B")]
	private HitReactionConfig IStunnable.ReactionProperties
	{
		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0x121D258", Offset = "0x121D258", VA = "0x121D258", Slot = "53")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700048C")]
	public WeaponMeta WeaponMeta
	{
		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0x121D3AC", Offset = "0x121D3AC", VA = "0x121D3AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700048D")]
	public VrMagazine Magazine
	{
		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0x121D3B4", Offset = "0x121D3B4", VA = "0x121D3B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700048E")]
	internal MechanismKeyhole MagazineKeyhole
	{
		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0x121D3BC", Offset = "0x121D3BC", VA = "0x121D3BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700048F")]
	public int AmmoCount
	{
		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0x12175E4", Offset = "0x12175E4", VA = "0x12175E4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000490")]
	public virtual bool IsReadyToFire
	{
		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x121D3C4", Offset = "0x121D3C4", VA = "0x121D3C4", Slot = "55")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000491")]
	public NetworkVrGun NetworkVrGun
	{
		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x121D3CC", Offset = "0x121D3CC", VA = "0x121D3CC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x121D3D4", Offset = "0x121D3D4", VA = "0x121D3D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000492")]
	public bool IsUsageBlocked
	{
		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0x1220160", Offset = "0x1220160", VA = "0x1220160")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000493")]
	public bool IsHumanPlayer
	{
		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0x12203B0", Offset = "0x12203B0", VA = "0x12203B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000494")]
	public Faction faction
	{
		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0x12203D0", Offset = "0x12203D0", VA = "0x12203D0", Slot = "54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001DA8")]
	[Address(RVA = "0x121D260", Offset = "0x121D260", VA = "0x121D260", Slot = "52")]
	private BoltEntity IOwner.BoltEntity()
	{
		return null;
	}

	[Token(Token = "0x6001DB0")]
	[Address(RVA = "0x121D3E4", Offset = "0x121D3E4", VA = "0x121D3E4", Slot = "25")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001DB1")]
	[Address(RVA = "0x121D9A0", Offset = "0x121D9A0", VA = "0x121D9A0", Slot = "26")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001DB2")]
	[Address(RVA = "0x121DC10", Offset = "0x121DC10", VA = "0x121DC10", Slot = "29")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001DB3")]
	[Address(RVA = "0x121DF34", Offset = "0x121DF34", VA = "0x121DF34", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001DB4")]
	[Address(RVA = "0x121E0E8", Offset = "0x121E0E8", VA = "0x121E0E8", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6001DB5")]
	[Address(RVA = "0x121E144", Offset = "0x121E144", VA = "0x121E144", Slot = "30")]
	public override void OnItemSelected()
	{
	}

	[Token(Token = "0x6001DB6")]
	[Address(RVA = "0x121E1E8", Offset = "0x121E1E8", VA = "0x121E1E8", Slot = "31")]
	public override void OnItemGripped()
	{
	}

	[Token(Token = "0x6001DB7")]
	[Address(RVA = "0x121E3B0", Offset = "0x121E3B0", VA = "0x121E3B0", Slot = "34")]
	public override void OnItemDropped()
	{
	}

	[Token(Token = "0x6001DB8")]
	[Address(RVA = "0x121E53C", Offset = "0x121E53C", VA = "0x121E53C", Slot = "36")]
	public override void OnItemTriggerPressed()
	{
	}

	[Token(Token = "0x6001DB9")]
	[Address(RVA = "0x121E58C", Offset = "0x121E58C", VA = "0x121E58C", Slot = "37")]
	public override void OnItemTriggerReleased()
	{
	}

	[Token(Token = "0x6001DBA")]
	[Address(RVA = "0x121E5B0", Offset = "0x121E5B0", VA = "0x121E5B0", Slot = "47")]
	public override void SetTriggerState(TriggerStateType triggerStateTypes, bool fromRemote = false)
	{
	}

	[Token(Token = "0x6001DBB")]
	[Address(RVA = "0x121E6A8", Offset = "0x121E6A8", VA = "0x121E6A8")]
	public void PlayFireLoopAudio()
	{
	}

	[Token(Token = "0x6001DBC")]
	[Address(RVA = "0x121E6E8", Offset = "0x121E6E8", VA = "0x121E6E8")]
	public void StopFireLoopAudio()
	{
	}

	[Token(Token = "0x6001DBD")]
	[Address(RVA = "0x121E790", Offset = "0x121E790", VA = "0x121E790")]
	public void SendNormalizedAmmoToFmod()
	{
	}

	[Token(Token = "0x6001DBE")]
	[Address(RVA = "0x121E7B4", Offset = "0x121E7B4", VA = "0x121E7B4", Slot = "46")]
	protected override void LateUpdate()
	{
	}

	[Token(Token = "0x6001DBF")]
	[Address(RVA = "0x121E918", Offset = "0x121E918", VA = "0x121E918")]
	public static void SetBlockAllBulletCreation(bool blockAllBulletCreation)
	{
	}

	[Token(Token = "0x6001DC0")]
	[Address(RVA = "0x121E970", Offset = "0x121E970", VA = "0x121E970")]
	private static void OnLevelReset_Static()
	{
	}

	[Token(Token = "0x6001DC1")]
	[Address(RVA = "0x121E9C0", Offset = "0x121E9C0", VA = "0x121E9C0")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x6001DC2")]
	[Address(RVA = "0x121E9DC", Offset = "0x121E9DC", VA = "0x121E9DC")]
	public VrBullet[] Fire(Vector3 position, Vector3 direction, float shotPower = 1f, bool fromEvent = false, [Optional] Agent ownerOverride, int bulletGroupId = -1)
	{
		return null;
	}

	[Token(Token = "0x6001DC3")]
	[Address(RVA = "0x121F238", Offset = "0x121F238", VA = "0x121F238")]
	[IteratorStateMachine(typeof(<FireBullets>d__85))]
	private IEnumerator FireBullets(VrBullet[] bullets, float shotPower)
	{
		return null;
	}

	[Token(Token = "0x6001DC4")]
	[Address(RVA = "0x121F3B8", Offset = "0x121F3B8", VA = "0x121F3B8")]
	public void FireEffects(bool fromEvent)
	{
	}

	[Token(Token = "0x6001DC5")]
	[Address(RVA = "0x121F688", Offset = "0x121F688", VA = "0x121F688", Slot = "38")]
	public override void OnSecondaryActionStarted()
	{
	}

	[Token(Token = "0x6001DC6")]
	[Address(RVA = "0x121E83C", Offset = "0x121E83C", VA = "0x121E83C")]
	private void ManageAutoEject()
	{
	}

	[Token(Token = "0x6001DC7")]
	[Address(RVA = "0x121F214", Offset = "0x121F214", VA = "0x121F214")]
	private int GetBulletGroupId(bool fromEvent, int bulletGroupId)
	{
		return default(int);
	}

	[Token(Token = "0x6001DC8")]
	[Address(RVA = "0x121DBEC", Offset = "0x121DBEC", VA = "0x121DBEC")]
	private void PlayOpenGunAnimation()
	{
	}

	[Token(Token = "0x6001DC9")]
	[Address(RVA = "0x121F800", Offset = "0x121F800", VA = "0x121F800")]
	private void PlayCloseGunAnimation()
	{
	}

	[Token(Token = "0x6001DCA")]
	[Address(RVA = "0x121F74C", Offset = "0x121F74C", VA = "0x121F74C")]
	private void EjectMag()
	{
	}

	[Token(Token = "0x6001DCB")]
	[Address(RVA = "0x121F820", Offset = "0x121F820", VA = "0x121F820")]
	private void OnKeyStartedInsertionIntoMagazineSlot(MechanismKey key)
	{
	}

	[Token(Token = "0x6001DCC")]
	[Address(RVA = "0x121FB34", Offset = "0x121FB34", VA = "0x121FB34")]
	private void OnKeyInsertedIntoMagazineSlot(MechanismKey key)
	{
	}

	[Token(Token = "0x6001DCD")]
	[Address(RVA = "0x121FC68", Offset = "0x121FC68", VA = "0x121FC68")]
	public void OnKeyRemovedFromMagazineSlot(MechanismKey key)
	{
	}

	[Token(Token = "0x6001DCE")]
	[Address(RVA = "0x121DA98", Offset = "0x121DA98", VA = "0x121DA98")]
	internal void RegisterMagazine(VrMagazine mag)
	{
	}

	[Token(Token = "0x6001DCF")]
	[Address(RVA = "0x1220028", Offset = "0x1220028", VA = "0x1220028")]
	private void ClearMagazine()
	{
	}

	[Token(Token = "0x6001DD0")]
	[Address(RVA = "0x12200CC", Offset = "0x12200CC", VA = "0x12200CC", Slot = "56")]
	public virtual ShootingAvailability GetShootingAvailability()
	{
		return default(ShootingAvailability);
	}

	[Token(Token = "0x6001DD1")]
	[Address(RVA = "0x121E11C", Offset = "0x121E11C", VA = "0x121E11C")]
	public void SetUsageBlocked(bool blocked)
	{
	}

	[Token(Token = "0x6001DD2")]
	[Address(RVA = "0x121F7E0", Offset = "0x121F7E0", VA = "0x121F7E0")]
	public int GenerateBulletId()
	{
		return default(int);
	}

	[Token(Token = "0x6001DD4")]
	[Address(RVA = "0x121F2BC", Offset = "0x121F2BC", VA = "0x121F2BC")]
	public void DryFire()
	{
	}

	[Token(Token = "0x6001DD5")]
	[Address(RVA = "0x1220168", Offset = "0x1220168", VA = "0x1220168")]
	public void PlayDryFireAudio()
	{
	}

	[Token(Token = "0x6001DD6")]
	[Address(RVA = "0x12201A0", Offset = "0x12201A0", VA = "0x12201A0", Slot = "57")]
	protected virtual void TriggerRecoil(VrBullet bullet)
	{
	}

	[Token(Token = "0x6001DD7")]
	[Address(RVA = "0x122023C", Offset = "0x122023C", VA = "0x122023C", Slot = "58")]
	protected virtual void TriggerRecoil(float power)
	{
	}

	[Token(Token = "0x6001DD8")]
	[Address(RVA = "0x121E560", Offset = "0x121E560", VA = "0x121E560")]
	private void TriggerGunAnimation(int animHash, int spareAnimHash = -1)
	{
	}

	[Token(Token = "0x6001DD9")]
	[Address(RVA = "0x121E510", Offset = "0x121E510", VA = "0x121E510")]
	private void SetBlendedGunAnimation(int animHash, float blendValue)
	{
	}

	[Token(Token = "0x6001DDA")]
	[Address(RVA = "0x121F530", Offset = "0x121F530", VA = "0x121F530")]
	private void TriggerMuzzleFlash()
	{
	}

	[Token(Token = "0x6001DDB")]
	[Address(RVA = "0x121F5F4", Offset = "0x121F5F4", VA = "0x121F5F4")]
	private void TriggerShellEject()
	{
	}

	[Token(Token = "0x6001DDC")]
	[Address(RVA = "0x12202D4", Offset = "0x12202D4", VA = "0x12202D4", Slot = "45")]
	public override Transform GetRaycastTransform()
	{
		return null;
	}

	[Token(Token = "0x6001DDD")]
	[Address(RVA = "0x12202DC", Offset = "0x12202DC", VA = "0x12202DC")]
	public Transform GetMuzzle()
	{
		return null;
	}

	[Token(Token = "0x6001DDE")]
	[Address(RVA = "0x121E70C", Offset = "0x121E70C", VA = "0x121E70C")]
	public GameObject GetAudioFireTransform()
	{
		return null;
	}

	[Token(Token = "0x6001DDF")]
	[Address(RVA = "0x121F4E0", Offset = "0x121F4E0", VA = "0x121F4E0")]
	protected void CycleMuzzle()
	{
	}

	[Token(Token = "0x6001DE0")]
	[Address(RVA = "0x1217730", Offset = "0x1217730", VA = "0x1217730")]
	public float GetNormalizedAmmoCount()
	{
		return default(float);
	}

	[Token(Token = "0x6001DE1")]
	[Address(RVA = "0x1220324", Offset = "0x1220324", VA = "0x1220324")]
	[ContextMenu("StartFiring")]
	public void StartFiring()
	{
	}

	[Token(Token = "0x6001DE2")]
	[Address(RVA = "0x1220360", Offset = "0x1220360", VA = "0x1220360")]
	[ContextMenu("StopFiring")]
	public void StopFiring()
	{
	}

	[Token(Token = "0x6001DE3")]
	[Address(RVA = "0x122039C", Offset = "0x122039C", VA = "0x122039C", Slot = "59")]
	public virtual bool IsFiring()
	{
		return default(bool);
	}

	[Token(Token = "0x6001DE6")]
	[Address(RVA = "0x12204A4", Offset = "0x12204A4", VA = "0x12204A4")]
	public VrGun()
	{
	}

	[SpecialName]
	[Token(Token = "0x6001DE7")]
	[Address(RVA = "0x1220524", Offset = "0x1220524", VA = "0x1220524", Slot = "51")]
	private Transform IOwner.get_cachedTransform()
	{
		return null;
	}
}
[Token(Token = "0x200050A")]
public class VrGunAutomatic : VrGun
{
	[Token(Token = "0x4001871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	[SerializeField]
	[Header("Automatic gun setup")]
	protected float m_delayBetweenShots;

	[Token(Token = "0x4001872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
	[SerializeField]
	protected int m_maxSuccessiveShots;

	[Token(Token = "0x4001873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	protected int m_successiveShots;

	[Token(Token = "0x4001874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
	protected bool m_blockShootingUntilDepress;

	[Token(Token = "0x4001875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	protected float m_timeOfLastShot;

	[Token(Token = "0x6001DEE")]
	[Address(RVA = "0x1220624", Offset = "0x1220624", VA = "0x1220624", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001DEF")]
	[Address(RVA = "0x12207E0", Offset = "0x12207E0", VA = "0x12207E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001DF0")]
	[Address(RVA = "0x122084C", Offset = "0x122084C", VA = "0x122084C")]
	public void ModifyAutoBehaviour(float newDelayBetweenShots, int newMaxSuccessiveShots)
	{
	}

	[Token(Token = "0x6001DF1")]
	[Address(RVA = "0x1220858", Offset = "0x1220858", VA = "0x1220858", Slot = "60")]
	protected virtual bool HasWaitedForFireDelay()
	{
		return default(bool);
	}

	[Token(Token = "0x6001DF2")]
	[Address(RVA = "0x1220914", Offset = "0x1220914", VA = "0x1220914", Slot = "61")]
	public virtual VrBullet[] ProcessPotentialShot(Vector3 position, Vector3 direction, bool fromEvent = false)
	{
		return null;
	}

	[Token(Token = "0x6001DF3")]
	[Address(RVA = "0x1220A40", Offset = "0x1220A40", VA = "0x1220A40")]
	public void ResetAutomaticShooting()
	{
	}

	[Token(Token = "0x6001DF4")]
	[Address(RVA = "0x1220A50", Offset = "0x1220A50", VA = "0x1220A50")]
	public VrGunAutomatic()
	{
	}
}
[Token(Token = "0x200050B")]
public class TriggerStateHeld_Automatic : TriggerStateHeld
{
	[Token(Token = "0x4001876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrGunAutomatic m_gunReference;

	[Token(Token = "0x6001DF5")]
	[Address(RVA = "0x1220A60", Offset = "0x1220A60", VA = "0x1220A60", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001DF6")]
	[Address(RVA = "0x1220B38", Offset = "0x1220B38", VA = "0x1220B38", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001DF7")]
	[Address(RVA = "0x1220CCC", Offset = "0x1220CCC", VA = "0x1220CCC", Slot = "6")]
	public override void Exit()
	{
	}

	[Token(Token = "0x6001DF8")]
	[Address(RVA = "0x12207D0", Offset = "0x12207D0", VA = "0x12207D0")]
	public TriggerStateHeld_Automatic()
	{
	}
}
[Token(Token = "0x200050C")]
public class VrGunAutomaticRotary : VrGunAutomatic
{
	[Token(Token = "0x4001877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
	[UnityEngine.Tooltip("The transform to spin.")]
	[SerializeField]
	private Transform m_rotor;

	[Token(Token = "0x4001878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	[UnityEngine.Tooltip("The axis we'll rotate around in local space.")]
	[SerializeField]
	private Vector3 m_rotationAxis;

	[Token(Token = "0x4001879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
	[SerializeField]
	[UnityEngine.Tooltip("Our target RPS rate. Positive values rotate the rotor anti-clockwise when facing along the rotation axis.")]
	private float m_targetRotationsPerSecond;

	[Token(Token = "0x400187A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("The amount of time taken to fully spin up from nothing, in seconds.")]
	private float m_spinUpTime;

	[Token(Token = "0x400187B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x344")]
	[UnityEngine.Tooltip("The amount of time taken to fully spin down from full speed, in seconds.")]
	[SerializeField]
	[Min(0f)]
	private float m_spinDownTime;

	[Token(Token = "0x400187C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
	private float m_targetAngularSpeed;

	[Token(Token = "0x400187D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
	private float m_currentAngularSpeed;

	[Token(Token = "0x400187E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
	private float m_spinUpAngularAcceleration;

	[Token(Token = "0x400187F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
	private float m_spinDownAngularDeceleration;

	[Token(Token = "0x4001880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
	[SerializeField]
	[UnityEngine.Tooltip("Volume of the rotor audio. Set to 1 to match the source audio.")]
	[Min(0f)]
	private float m_rotorAudioVolume;

	[Token(Token = "0x4001881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
	[UnityEngine.Tooltip("Scale for the final pitch of the rotor audio. Set to 1 to match the source audio.")]
	[SerializeField]
	[Min(0f)]
	private float m_rotorAudioPitchScale;

	[Token(Token = "0x6001DF9")]
	[Address(RVA = "0x1220CD0", Offset = "0x1220CD0", VA = "0x1220CD0", Slot = "25")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001DFA")]
	[Address(RVA = "0x1220D34", Offset = "0x1220D34", VA = "0x1220D34", Slot = "29")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001DFB")]
	[Address(RVA = "0x1220D38", Offset = "0x1220D38", VA = "0x1220D38")]
	private void Update()
	{
	}

	[Token(Token = "0x6001DFC")]
	[Address(RVA = "0x1220E20", Offset = "0x1220E20", VA = "0x1220E20", Slot = "60")]
	protected override bool HasWaitedForFireDelay()
	{
		return default(bool);
	}

	[Token(Token = "0x6001DFD")]
	[Address(RVA = "0x1220E50", Offset = "0x1220E50", VA = "0x1220E50", Slot = "59")]
	public override bool IsFiring()
	{
		return default(bool);
	}

	[Token(Token = "0x6001DFE")]
	[Address(RVA = "0x1220E7C", Offset = "0x1220E7C", VA = "0x1220E7C")]
	public VrGunAutomaticRotary()
	{
	}
}
[Token(Token = "0x200050D")]
public class VrGunBurst : MonoBehaviour
{
	[Token(Token = "0x6001DFF")]
	[Address(RVA = "0x1220E94", Offset = "0x1220E94", VA = "0x1220E94")]
	private void Start()
	{
	}

	[Token(Token = "0x6001E00")]
	[Address(RVA = "0x1220E98", Offset = "0x1220E98", VA = "0x1220E98")]
	private void Update()
	{
	}

	[Token(Token = "0x6001E01")]
	[Address(RVA = "0x1220E9C", Offset = "0x1220E9C", VA = "0x1220E9C")]
	public VrGunBurst()
	{
	}
}
[Token(Token = "0x200050E")]
public class VrGunCharge : VrGun
{
	[Token(Token = "0x4001882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	[SerializeField]
	[Header("Charge gun setup")]
	protected float m_maxChargeTime;

	[Token(Token = "0x4001883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
	protected bool m_holdingShot;

	[Token(Token = "0x4001884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	protected DateTime m_shotStartTime;

	[Token(Token = "0x4001885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
	protected float m_shotPower;

	[Token(Token = "0x6001E02")]
	[Address(RVA = "0x1220EA4", Offset = "0x1220EA4", VA = "0x1220EA4", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001E03")]
	[Address(RVA = "0x1221040", Offset = "0x1221040", VA = "0x1221040", Slot = "60")]
	public virtual void FireChargedShot()
	{
	}

	[Token(Token = "0x6001E04")]
	[Address(RVA = "0x12211AC", Offset = "0x12211AC", VA = "0x12211AC", Slot = "61")]
	public virtual void StartChargingShot()
	{
	}

	[Token(Token = "0x6001E05")]
	[Address(RVA = "0x1221210", Offset = "0x1221210", VA = "0x1221210", Slot = "62")]
	public virtual void CancelChargedShot()
	{
	}

	[Token(Token = "0x6001E06")]
	[Address(RVA = "0x12210FC", Offset = "0x12210FC", VA = "0x12210FC")]
	public float GetCurrentChargePower(bool clamp = true)
	{
		return default(float);
	}

	[Token(Token = "0x6001E07")]
	[Address(RVA = "0x122127C", Offset = "0x122127C", VA = "0x122127C")]
	public VrGunCharge()
	{
	}
}
[Token(Token = "0x200050F")]
public class TriggerStatePressed_Charge : TriggerStatePressed
{
	[Token(Token = "0x4001886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrGunCharge m_gunReference;

	[Token(Token = "0x6001E08")]
	[Address(RVA = "0x12212EC", Offset = "0x12212EC", VA = "0x12212EC", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001E09")]
	[Address(RVA = "0x1221418", Offset = "0x1221418", VA = "0x1221418", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001E0A")]
	[Address(RVA = "0x122141C", Offset = "0x122141C", VA = "0x122141C", Slot = "6")]
	public override void Exit()
	{
	}

	[Token(Token = "0x6001E0B")]
	[Address(RVA = "0x1221030", Offset = "0x1221030", VA = "0x1221030")]
	public TriggerStatePressed_Charge()
	{
	}
}
[Token(Token = "0x2000510")]
public class TriggerStateReleased_Charge : TriggerStateReleased
{
	[Token(Token = "0x4001887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrGunCharge m_gunReference;

	[Token(Token = "0x4001888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_pendingShotAttempt;

	[Token(Token = "0x6001E0C")]
	[Address(RVA = "0x1221420", Offset = "0x1221420", VA = "0x1221420", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001E0D")]
	[Address(RVA = "0x12214E4", Offset = "0x12214E4", VA = "0x12214E4", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001E0E")]
	[Address(RVA = "0x122151C", Offset = "0x122151C", VA = "0x122151C", Slot = "6")]
	public override void Exit()
	{
	}

	[Token(Token = "0x6001E0F")]
	[Address(RVA = "0x1221038", Offset = "0x1221038", VA = "0x1221038")]
	public TriggerStateReleased_Charge()
	{
	}
}
[Token(Token = "0x2000511")]
public class VrGunFlamer : VrGunAutomatic
{
	[Token(Token = "0x4001889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
	[FormerlySerializedAs("FlameThrower")]
	[SerializeField]
	private FlameThrower m_flameThrower;

	[Token(Token = "0x6001E10")]
	[Address(RVA = "0x1221520", Offset = "0x1221520", VA = "0x1221520", Slot = "61")]
	public override VrBullet[] ProcessPotentialShot(Vector3 position, Vector3 direction, bool fromServer = false)
	{
		return null;
	}

	[Token(Token = "0x6001E11")]
	[Address(RVA = "0x1221634", Offset = "0x1221634", VA = "0x1221634")]
	public VrGunFlamer()
	{
	}
}
[Token(Token = "0x2000512")]
public class VrGunProjectile : VrGunSingleShot
{
	[Token(Token = "0x6001E12")]
	[Address(RVA = "0x122163C", Offset = "0x122163C", VA = "0x122163C", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001E13")]
	[Address(RVA = "0x12217D0", Offset = "0x12217D0", VA = "0x12217D0")]
	public VrGunProjectile()
	{
	}
}
[Token(Token = "0x2000513")]
public class VrGunSingleShot : VrGun
{
	[Token(Token = "0x400188A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	[SerializeField]
	private float m_delayBetweenShots;

	[Token(Token = "0x400188B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
	private float m_timeOfLastShot;

	[Token(Token = "0x6001E14")]
	[Address(RVA = "0x12217F8", Offset = "0x12217F8", VA = "0x12217F8", Slot = "23")]
	public override void Initialise()
	{
	}

	[Token(Token = "0x6001E15")]
	[Address(RVA = "0x1221984", Offset = "0x1221984", VA = "0x1221984")]
	private bool HasWaitedForFireDelay()
	{
		return default(bool);
	}

	[Token(Token = "0x6001E16")]
	[Address(RVA = "0x12219C4", Offset = "0x12219C4", VA = "0x12219C4")]
	public void ProcessPotentialShot(Vector3 position, Vector3 direction, bool fromServer = false)
	{
	}

	[Token(Token = "0x6001E17")]
	[Address(RVA = "0x12217E4", Offset = "0x12217E4", VA = "0x12217E4")]
	public VrGunSingleShot()
	{
	}
}
[Token(Token = "0x2000514")]
public class TriggerStatePressed_SingleShot : TriggerStatePressed
{
	[Token(Token = "0x400188C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrGunSingleShot m_gunReference;

	[Token(Token = "0x400188D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_pendingShotAttempt;

	[Token(Token = "0x6001E18")]
	[Address(RVA = "0x1221A80", Offset = "0x1221A80", VA = "0x1221A80", Slot = "4")]
	public override void Enter()
	{
	}

	[Token(Token = "0x6001E19")]
	[Address(RVA = "0x1221BB0", Offset = "0x1221BB0", VA = "0x1221BB0", Slot = "5")]
	public override void Update()
	{
	}

	[Token(Token = "0x6001E1A")]
	[Address(RVA = "0x12217C8", Offset = "0x12217C8", VA = "0x12217C8")]
	public TriggerStatePressed_SingleShot()
	{
	}
}
[Token(Token = "0x2000515")]
public class VrMeleeWeapon : VrItem, IOwner
{
	[Token(Token = "0x2000516")]
	private class EmbedTransform
	{
		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 position;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quaternion rotation;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HealthStatus healthStatus;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Rigidbody ragdollRigidbody;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Actor actor;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Collider collider;

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x1222770", Offset = "0x1222770", VA = "0x1222770")]
		public EmbedTransform(Transform tr, Vector3 pos, Quaternion rot, Collider col)
		{
		}
	}

	[Token(Token = "0x2000517")]
	[CompilerGenerated]
	private sealed class <ClearCandidate>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrMeleeWeapon <>4__this;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x1700049B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001E36")]
			[Address(RVA = "0x1223954", Offset = "0x1223954", VA = "0x1223954", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001E38")]
			[Address(RVA = "0x122399C", Offset = "0x122399C", VA = "0x122399C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x1223770", Offset = "0x1223770", VA = "0x1223770")]
		[DebuggerHidden]
		public <ClearCandidate>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x1223864", Offset = "0x1223864", VA = "0x1223864", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x1223868", Offset = "0x1223868", VA = "0x1223868", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0x122395C", Offset = "0x122395C", VA = "0x122395C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000518")]
	[CompilerGenerated]
	private sealed class <SetInterpolation>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrMeleeWeapon <>4__this;

		[Token(Token = "0x1700049D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0x1223AEC", Offset = "0x1223AEC", VA = "0x1223AEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700049E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001E3E")]
			[Address(RVA = "0x1223B34", Offset = "0x1223B34", VA = "0x1223B34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0x1223798", Offset = "0x1223798", VA = "0x1223798")]
		[DebuggerHidden]
		public <SetInterpolation>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x12239A4", Offset = "0x12239A4", VA = "0x12239A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0x12239A8", Offset = "0x12239A8", VA = "0x12239A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x1223AF4", Offset = "0x1223AF4", VA = "0x1223AF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400188E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
	[SerializeField]
	private bool m_embedMode;

	[Token(Token = "0x400188F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private Transform m_embedPosition;

	[Token(Token = "0x4001890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private PhysicsDamage m_physicsDamage;

	[Token(Token = "0x4001891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	private VelocityTrackerComponent m_velocityTracker;

	[Token(Token = "0x4001892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	[SerializeField]
	private bool m_enableEmbedOnThrust;

	[Token(Token = "0x4001893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
	[SerializeField]
	private bool m_enableEmbedOnThrow;

	[Token(Token = "0x4001894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private NetworkVrMelee m_networkMelee;

	[Token(Token = "0x4001895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private HealthStatus m_healthStatus;

	[Token(Token = "0x4001896")]
	private const float c_discardTime = 1f;

	[Token(Token = "0x4001897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	[SerializeField]
	private PhysicsDamageProfile m_embedDamageProfile;

	[Token(Token = "0x4001898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	[SerializeField]
	private PhysicsDamageProfile m_unembedDamageProfile;

	[Token(Token = "0x4001899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x400189A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private EmbedTransform m_candidateCollider;

	[Token(Token = "0x400189B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private float currentTime;

	[Token(Token = "0x400189C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	private float waitingTime;

	[Token(Token = "0x17000497")]
	public bool EmbedMode
	{
		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x1221CAC", Offset = "0x1221CAC", VA = "0x1221CAC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000498")]
	public Transform EmbedPosition
	{
		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x1221CB4", Offset = "0x1221CB4", VA = "0x1221CB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000499")]
	public PhysicsDamage PhysicsDamage
	{
		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0x1221CBC", Offset = "0x1221CBC", VA = "0x1221CBC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700049A")]
	public NetworkVrMelee NetworkMelee
	{
		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x1221CC4", Offset = "0x1221CC4", VA = "0x1221CC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001E1F")]
	[Address(RVA = "0x1221CCC", Offset = "0x1221CCC", VA = "0x1221CCC", Slot = "52")]
	private BoltEntity IOwner.BoltEntity()
	{
		return null;
	}

	[Token(Token = "0x6001E20")]
	[Address(RVA = "0x1221E18", Offset = "0x1221E18", VA = "0x1221E18", Slot = "25")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001E21")]
	[Address(RVA = "0x1221E34", Offset = "0x1221E34", VA = "0x1221E34", Slot = "26")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001E22")]
	[Address(RVA = "0x1222140", Offset = "0x1222140", VA = "0x1222140", Slot = "30")]
	public override void OnItemSelected()
	{
	}

	[Token(Token = "0x6001E23")]
	[Address(RVA = "0x12221E4", Offset = "0x12221E4", VA = "0x12221E4", Slot = "34")]
	public override void OnItemDropped()
	{
	}

	[Token(Token = "0x6001E24")]
	[Address(RVA = "0x122220C", Offset = "0x122220C", VA = "0x122220C")]
	public void SetEmbedPosition(Transform embedTransform)
	{
	}

	[Token(Token = "0x6001E25")]
	[Address(RVA = "0x122221C", Offset = "0x122221C", VA = "0x122221C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001E26")]
	[Address(RVA = "0x1222800", Offset = "0x1222800", VA = "0x1222800")]
	private void RequestEmbedMeleeWeapon()
	{
	}

	[Token(Token = "0x6001E27")]
	[Address(RVA = "0x1222ED0", Offset = "0x1222ED0", VA = "0x1222ED0")]
	public void ResetCandidate()
	{
	}

	[Token(Token = "0x6001E28")]
	[Address(RVA = "0x1222188", Offset = "0x1222188", VA = "0x1222188")]
	private void RequestUnembedMeleeWeapon()
	{
	}

	[Token(Token = "0x6001E29")]
	[Address(RVA = "0x1222EE4", Offset = "0x1222EE4", VA = "0x1222EE4")]
	public void EmbedWeapon(Transform root, int colliderIndex, Vector3 position, Quaternion rotation, BoltEntity boltEntity)
	{
	}

	[Token(Token = "0x6001E2A")]
	[Address(RVA = "0x1223410", Offset = "0x1223410", VA = "0x1223410")]
	public void ResetEmbedCandidateEvent()
	{
	}

	[Token(Token = "0x6001E2B")]
	[Address(RVA = "0x12230FC", Offset = "0x12230FC", VA = "0x12230FC")]
	private bool EmbedCandidate()
	{
		return default(bool);
	}

	[Token(Token = "0x6001E2C")]
	[Address(RVA = "0x1223440", Offset = "0x1223440", VA = "0x1223440")]
	public void UnembedCandidate([Optional] HealthStatusInfo healthStatusInfo)
	{
	}

	[Token(Token = "0x6001E2D")]
	[Address(RVA = "0x12236EC", Offset = "0x12236EC", VA = "0x12236EC")]
	[IteratorStateMachine(typeof(<ClearCandidate>d__37))]
	private IEnumerator ClearCandidate(float time)
	{
		return null;
	}

	[Token(Token = "0x6001E2E")]
	[Address(RVA = "0x122339C", Offset = "0x122339C", VA = "0x122339C")]
	[IteratorStateMachine(typeof(<SetInterpolation>d__38))]
	private IEnumerator SetInterpolation()
	{
		return null;
	}

	[Token(Token = "0x6001E2F")]
	[Address(RVA = "0x12237C0", Offset = "0x12237C0", VA = "0x12237C0")]
	public bool IsZombieDead()
	{
		return default(bool);
	}

	[Token(Token = "0x6001E30")]
	[Address(RVA = "0x12237F8", Offset = "0x12237F8", VA = "0x12237F8")]
	public VrMeleeWeapon()
	{
	}

	[SpecialName]
	[Token(Token = "0x6001E31")]
	[Address(RVA = "0x122385C", Offset = "0x122385C", VA = "0x122385C", Slot = "51")]
	private Transform IOwner.get_cachedTransform()
	{
		return null;
	}
}
[Token(Token = "0x2000519")]
public interface IStunnable
{
	[Token(Token = "0x1700049F")]
	HitReactionConfig ReactionProperties
	{
		[Token(Token = "0x6001E3F")]
		get;
	}
}
[Token(Token = "0x200051A")]
public interface IPhysicsDamageScaler
{
	[Token(Token = "0x170004A0")]
	float AppliedScale
	{
		[Token(Token = "0x6001E40")]
		get;
	}
}
[Serializable]
[Token(Token = "0x200051B")]
public class PhysicalImpactManager
{
	[Token(Token = "0x200051C")]
	private class PendingHit
	{
		[Token(Token = "0x170004A1")]
		public HealthStatusInfo info
		{
			[Token(Token = "0x6001E4A")]
			[Address(RVA = "0x1224868", Offset = "0x1224868", VA = "0x1224868")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E4B")]
			[Address(RVA = "0x1224870", Offset = "0x1224870", VA = "0x1224870")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004A2")]
		public GameObject victim
		{
			[Token(Token = "0x6001E4C")]
			[Address(RVA = "0x1224878", Offset = "0x1224878", VA = "0x1224878")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001E4D")]
			[Address(RVA = "0x1224880", Offset = "0x1224880", VA = "0x1224880")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004A3")]
		public bool controller
		{
			[Token(Token = "0x6001E4E")]
			[Address(RVA = "0x1224888", Offset = "0x1224888", VA = "0x1224888")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E4F")]
			[Address(RVA = "0x1224890", Offset = "0x1224890", VA = "0x1224890")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0x1224070", Offset = "0x1224070", VA = "0x1224070")]
		public PendingHit()
		{
		}
	}

	[Token(Token = "0x40018AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<HealthStatus, PendingHit> m_pendingImpacts;

	[Token(Token = "0x40018AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<object> m_staleVictims;

	[Token(Token = "0x40018AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<object, (int gestureId, float timeStamp)> m_satisfiedVictims;

	[Token(Token = "0x6001E41")]
	[Address(RVA = "0x1223B3C", Offset = "0x1223B3C", VA = "0x1223B3C")]
	public PhysicalImpactManager()
	{
	}

	[Token(Token = "0x6001E42")]
	[Address(RVA = "0x1223CB0", Offset = "0x1223CB0", VA = "0x1223CB0")]
	public void Reset()
	{
	}

	[Token(Token = "0x6001E43")]
	[Address(RVA = "0x1223D5C", Offset = "0x1223D5C", VA = "0x1223D5C")]
	public void ClearSatisfied()
	{
	}

	[Token(Token = "0x6001E44")]
	[Address(RVA = "0x1223DAC", Offset = "0x1223DAC", VA = "0x1223DAC")]
	public void ClearPending()
	{
	}

	[Token(Token = "0x6001E45")]
	[Address(RVA = "0x1223DFC", Offset = "0x1223DFC", VA = "0x1223DFC")]
	public bool HasPendingHit(HealthStatus other)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E46")]
	[Address(RVA = "0x1223E54", Offset = "0x1223E54", VA = "0x1223E54")]
	public void AddPendingHit(GameObject victim, HealthStatusUpdateRuntimeInfo hitInfo, bool triggerEnter, bool controller)
	{
	}

	[Token(Token = "0x6001E47")]
	[Address(RVA = "0x1224078", Offset = "0x1224078", VA = "0x1224078")]
	public void ProcessPendingHits(int impactId, float velocity)
	{
	}

	[Token(Token = "0x6001E48")]
	[Address(RVA = "0x1224338", Offset = "0x1224338", VA = "0x1224338")]
	public void RemoveSatisfiedHits(int impactId, float minTimeBetweenImpacts, bool allowMultipleImpacts)
	{
	}

	[Token(Token = "0x6001E49")]
	[Address(RVA = "0x12246B0", Offset = "0x12246B0", VA = "0x12246B0")]
	public bool HasPendingOrSatisfiedVictim(object victim)
	{
		return default(bool);
	}
}
[Token(Token = "0x200051D")]
[RequireComponent(typeof(VelocityTrackerComponent))]
[DisallowMultipleComponent]
public class PhysicsDamage : CachedMonoBehaviour, IHealthStatusEffector, IDamageTypeProvider, IStunnable
{
	[Token(Token = "0x40018B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PhysicsDamageProfile m_damageProfile;

	[Token(Token = "0x40018B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private HitReactionConfig m_hitReaction;

	[Token(Token = "0x40018B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("m_actor")]
	[InterfaceObject(typeof(IOwner))]
	[SerializeField]
	private UnityEngine.Object m_owner;

	[Token(Token = "0x40018B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private BoltEntity m_entity;

	[Token(Token = "0x40018B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private IPhysicsDamageScaler[] m_damageScalers;

	[Token(Token = "0x40018B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private VrItem m_attachedItem;

	[Token(Token = "0x40018B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool m_attachedItemPlacedInInventory;

	[Token(Token = "0x40018B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private IOwner m_overrideOwner;

	[Token(Token = "0x40018B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private ContactPoint[] m_contactBuffer;

	[Token(Token = "0x40018BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private VelocityTrackerComponent m_velocityTrackerComponent;

	[Token(Token = "0x40018BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PhysicalImpactManager m_impactManager;

	[Token(Token = "0x40018BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool m_impactAdded;

	[Token(Token = "0x40018BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float m_lastDamageTime;

	[Token(Token = "0x40018C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action<IAgent> OnDamageDealtToAgent;

	[Token(Token = "0x40018C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Collider m_primaryCollider;

	[Token(Token = "0x170004A4")]
	public PhysicsDamageProfile DamageProfile
	{
		[Token(Token = "0x6001E51")]
		[Address(RVA = "0x122489C", Offset = "0x122489C", VA = "0x122489C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004A5")]
	public VrItem AttachedItem
	{
		[Token(Token = "0x6001E52")]
		[Address(RVA = "0x12248A4", Offset = "0x12248A4", VA = "0x12248A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004A6")]
	public bool DisablePhysicsDamage
	{
		[Token(Token = "0x6001E53")]
		[Address(RVA = "0x12248AC", Offset = "0x12248AC", VA = "0x12248AC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001E54")]
		[Address(RVA = "0x12248B4", Offset = "0x12248B4", VA = "0x12248B4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170004A7")]
	private DamageType IDamageTypeProvider.damageType
	{
		[Token(Token = "0x6001E55")]
		[Address(RVA = "0x12248C0", Offset = "0x12248C0", VA = "0x12248C0", Slot = "4")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x170004A8")]
	public bool EnableContinuousDamage
	{
		[Token(Token = "0x6001E56")]
		[Address(RVA = "0x1224940", Offset = "0x1224940", VA = "0x1224940")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x1224948", Offset = "0x1224948", VA = "0x1224948")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170004A9")]
	public IOwner Owner
	{
		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0x1225364", Offset = "0x1225364", VA = "0x1225364")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004AA")]
	public bool ItemHeld
	{
		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0x1225420", Offset = "0x1225420", VA = "0x1225420")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170004AB")]
	public BoltEntity Entity
	{
		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x12254A8", Offset = "0x12254A8", VA = "0x12254A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004AC")]
	private IMeleeStrength CurrentOwningMeleeAgent
	{
		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0x12254F0", Offset = "0x12254F0", VA = "0x12254F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004AD")]
	private bool CanInflictContinuousDamageNow
	{
		[Token(Token = "0x6001E68")]
		[Address(RVA = "0x1225E3C", Offset = "0x1225E3C", VA = "0x1225E3C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170004AE")]
	private HitReactionConfig IStunnable.ReactionProperties
	{
		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x1226CC4", Offset = "0x1226CC4", VA = "0x1226CC4", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001E58")]
	[Address(RVA = "0x1224954", Offset = "0x1224954", VA = "0x1224954")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001E59")]
	[Address(RVA = "0x1224FAC", Offset = "0x1224FAC", VA = "0x1224FAC")]
	private void Reset()
	{
	}

	[Token(Token = "0x6001E5A")]
	[Address(RVA = "0x12250C8", Offset = "0x12250C8", VA = "0x12250C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001E5B")]
	[Address(RVA = "0x12251AC", Offset = "0x12251AC", VA = "0x12251AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001E60")]
	[Address(RVA = "0x12255C4", Offset = "0x12255C4", VA = "0x12255C4")]
	public bool HasPendingOrSatisfiedVictim(object victim)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E61")]
	[Address(RVA = "0x12255DC", Offset = "0x12255DC", VA = "0x12255DC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6001E62")]
	[Address(RVA = "0x1225610", Offset = "0x1225610", VA = "0x1225610")]
	private float GetInflictedDamage(IOwner owner, bool allowNpcDamage, bool continuousImpact)
	{
		return default(float);
	}

	[Token(Token = "0x6001E63")]
	[Address(RVA = "0x122269C", Offset = "0x122269C", VA = "0x122269C")]
	public bool CheckSpeedDamage()
	{
		return default(bool);
	}

	[Token(Token = "0x6001E64")]
	[Address(RVA = "0x1225A34", Offset = "0x1225A34", VA = "0x1225A34")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6001E65")]
	[Address(RVA = "0x1225DB8", Offset = "0x1225DB8", VA = "0x1225DB8")]
	private void OnCollisionStay(Collision other)
	{
	}

	[Token(Token = "0x6001E66")]
	[Address(RVA = "0x1225F30", Offset = "0x1225F30", VA = "0x1225F30")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001E67")]
	[Address(RVA = "0x1226204", Offset = "0x1226204", VA = "0x1226204")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6001E69")]
	[Address(RVA = "0x1225B40", Offset = "0x1225B40", VA = "0x1225B40")]
	private bool SetupCollisionImpact(Collision other, bool continuousImpact)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E6A")]
	[Address(RVA = "0x1225F88", Offset = "0x1225F88", VA = "0x1225F88")]
	private bool SetupTriggerImpact(Collider other, bool continuousImpact)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E6B")]
	[Address(RVA = "0x1226C48", Offset = "0x1226C48", VA = "0x1226C48")]
	private void SweepCallback(Collider other)
	{
	}

	[Token(Token = "0x6001E6C")]
	[Address(RVA = "0x1226288", Offset = "0x1226288", VA = "0x1226288")]
	public bool TryQueueImpact(Collider other, Vector3 effectPosition, Vector3 effectNormal, bool triggerEnter, bool allowNpcDamage, bool continuousImpact)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E6D")]
	[Address(RVA = "0x12229E8", Offset = "0x12229E8", VA = "0x12229E8")]
	public void ApplyDamage(PhysicsDamageProfile damageProfile, Transform trform, Collider col)
	{
	}

	[Token(Token = "0x6001E6E")]
	[Address(RVA = "0x1226C50", Offset = "0x1226C50", VA = "0x1226C50")]
	public void ProcessHit(IAgent otherAgent)
	{
	}

	[Token(Token = "0x6001E6F")]
	[Address(RVA = "0x1226C70", Offset = "0x1226C70", VA = "0x1226C70")]
	private void Update()
	{
	}

	[Token(Token = "0x6001E70")]
	[Address(RVA = "0x1226CB0", Offset = "0x1226CB0", VA = "0x1226CB0")]
	private void OnAttachedItemPlacedInInventory()
	{
	}

	[Token(Token = "0x6001E71")]
	[Address(RVA = "0x1226CBC", Offset = "0x1226CBC", VA = "0x1226CBC")]
	private void OnAttachedItemRemovedFromInventory()
	{
	}

	[Token(Token = "0x6001E72")]
	[Address(RVA = "0x1225A8C", Offset = "0x1225A8C", VA = "0x1225A8C")]
	private bool CanApplyPhysicsDamageToObject(GameObject collisionObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E74")]
	[Address(RVA = "0x1226CCC", Offset = "0x1226CCC", VA = "0x1226CCC")]
	public PhysicsDamage()
	{
	}
}
[Token(Token = "0x200051E")]
[RequireComponent(typeof(PhysicsDamage))]
[DisallowMultipleComponent]
public class PhysicsDamageCustomSweeper : CachedMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200051F")]
	private struct SweepPoint
	{
		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 localPosition1;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 localPosition2;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Min(0f)]
		public float radius;

		[NonSerialized]
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 previousWorldPosition;

		[NonSerialized]
		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool hasPreviousWorldPosition;
	}

	[Token(Token = "0x40018C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private SweepPoint[] m_sweepPoints;

	[Token(Token = "0x40018C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SweepPoint m_currentSweepPoint;

	[Token(Token = "0x40018C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PhysicsDamage m_physicsDamage;

	[Token(Token = "0x40018C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VrMeleeWeapon m_meleeWeapon;

	[Token(Token = "0x40018C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Action<Collider> m_impactCallback;

	[Token(Token = "0x40018C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_initialized;

	[Token(Token = "0x40018C8")]
	private const float c_playerSwingCastTriggerDistance = 0.2f;

	[Token(Token = "0x6001E75")]
	[Address(RVA = "0x1224EDC", Offset = "0x1224EDC", VA = "0x1224EDC")]
	public void Init(PhysicsDamage physicsDamage, Action<Collider> impactCallback)
	{
	}

	[Token(Token = "0x6001E76")]
	[Address(RVA = "0x1226CD4", Offset = "0x1226CD4", VA = "0x1226CD4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001E77")]
	[Address(RVA = "0x1226FBC", Offset = "0x1226FBC", VA = "0x1226FBC")]
	public void SetCustomSweeper(int index)
	{
	}

	[Token(Token = "0x6001E78")]
	[Address(RVA = "0x122700C", Offset = "0x122700C", VA = "0x122700C")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6001E79")]
	[Address(RVA = "0x1227144", Offset = "0x1227144", VA = "0x1227144")]
	public PhysicsDamageCustomSweeper()
	{
	}
}
[Serializable]
[Token(Token = "0x2000520")]
[CreateAssetMenu(menuName = "Battle Sister/Physics Damage Profile")]
public class PhysicsDamageProfile : ScriptableObject
{
	[Token(Token = "0x40018CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Category for damage type being applied, used for look-up into the ImpactManager for vfx.")]
	private DamageType m_damageType;

	[Token(Token = "0x40018CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("Min velocity to apply damage")]
	[SerializeField]
	private float unheldVelocityDamageMin;

	[Token(Token = "0x40018D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Min velocity to apply damage")]
	private float playerHeldVelocityDamageMin;

	[Token(Token = "0x40018D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Min velocity to apply damage bonus")]
	[SerializeField]
	private float playerHeldVelocityDamageBonusMin;

	[Token(Token = "0x40018D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("Defines how much damage this object deals when it is used by a non player agent.")]
	private float npcDamageInflicted;

	[Token(Token = "0x40018D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("Defines how much time must elapse between impacts on the same agent with the goal of reducing impact spamming.")]
	private float minTimeBetweenAgentImpacts;

	[Token(Token = "0x40018D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("If this weapons supports continuous damage, this is the amount of damage dealt per continuous hit.")]
	private float continuousDamageInflictedPerHit;

	[Token(Token = "0x40018D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("Time interval between damage (0.0 for always)")]
	[Min(0f)]
	[SerializeField]
	private float damageTimeInterval;

	[Token(Token = "0x40018D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[UnityEngine.Tooltip("Enable Damage applied to the root")]
	private bool m_bluntWeapon;

	[Token(Token = "0x40018D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	[UnityEngine.Tooltip("Damage applied to the root")]
	private float m_bluntDamage;

	[Token(Token = "0x40018D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Enable Damage applied to the limbs")]
	[SerializeField]
	[FormerlySerializedAs("m_bladedWeaopon")]
	private bool m_bladedWeapon;

	[Token(Token = "0x40018D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[UnityEngine.Tooltip("Damage applied to the limbs")]
	private float m_bladedDamage;

	[Token(Token = "0x40018DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Damage bonus added to the limbs or the root damage depending of configuration (Only in held weapons)")]
	[SerializeField]
	private float m_bonusDamage;

	[Token(Token = "0x40018DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("Absolute amount of bonus damage to apply if held with two hands. Warning, does not consider velocity in line with the existing approach in Cabin; will allow wiggle melee.")]
	[Min(0f)]
	[SerializeField]
	private float m_twoHandedDamageBonus;

	[Token(Token = "0x170004AF")]
	public DamageType damageType
	{
		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0x122714C", Offset = "0x122714C", VA = "0x122714C")]
		get
		{
			return default(DamageType);
		}
	}

	[Token(Token = "0x170004B0")]
	public float NpcDamageInflicted
	{
		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0x1227154", Offset = "0x1227154", VA = "0x1227154")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004B1")]
	public float ContinuousDamageInflictedPerHit
	{
		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0x122715C", Offset = "0x122715C", VA = "0x122715C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004B2")]
	public float MinTimeBetweenAgentImpacts
	{
		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0x1227164", Offset = "0x1227164", VA = "0x1227164")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004B3")]
	public float TimeIntervalBetweenDamageImpact
	{
		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0x122716C", Offset = "0x122716C", VA = "0x122716C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004B4")]
	public bool BluntWeapon
	{
		[Token(Token = "0x6001E80")]
		[Address(RVA = "0x1227174", Offset = "0x1227174", VA = "0x1227174")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170004B5")]
	public bool BladedWeapon
	{
		[Token(Token = "0x6001E81")]
		[Address(RVA = "0x122717C", Offset = "0x122717C", VA = "0x122717C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170004B6")]
	public float BluntDamage
	{
		[Token(Token = "0x6001E82")]
		[Address(RVA = "0x1227184", Offset = "0x1227184", VA = "0x1227184")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004B7")]
	public float BladedDamage
	{
		[Token(Token = "0x6001E83")]
		[Address(RVA = "0x122718C", Offset = "0x122718C", VA = "0x122718C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004B8")]
	public float TwoHandedDamageBonus
	{
		[Token(Token = "0x6001E84")]
		[Address(RVA = "0x1227194", Offset = "0x1227194", VA = "0x1227194")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001E7B")]
	[Address(RVA = "0x12258E4", Offset = "0x12258E4", VA = "0x12258E4")]
	public float GetInflictedDamageFromCurve(Vector3 velocity, bool held)
	{
		return default(float);
	}

	[Token(Token = "0x6001E85")]
	[Address(RVA = "0x122719C", Offset = "0x122719C", VA = "0x122719C")]
	public PhysicsDamageProfile()
	{
	}
}
[Token(Token = "0x2000521")]
public class PoweredAbility : MonoBehaviour, IPhysicsDamageScaler
{
	[Token(Token = "0x40018DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("If ticked, power will run out after the ability has been active for enough time. If unticked, the ability can be used forever.")]
	[SerializeField]
	private bool m_hasLimitedPower;

	[Token(Token = "0x40018DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Min(0f)]
	[UnityEngine.Tooltip("The total amount of time we can be switched on for. This is measured in unscaled seconds.")]
	[SerializeField]
	private float m_totalBatteryLife;

	[Token(Token = "0x40018DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("While powered, we'll scale attached physics damage by this amount. Set to 1 to apply no change.")]
	[SerializeField]
	[Min(0f)]
	private float m_poweredDamageScale;

	[Token(Token = "0x40018DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Animator m_animator;

	[Token(Token = "0x40018E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PhysicsDamage m_damageComponent;

	[Token(Token = "0x40018E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_remainingPower;

	[Token(Token = "0x40018E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool m_isSwitchedOn;

	[Token(Token = "0x40018E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int c_switchedOnAnimHash;

	[Token(Token = "0x40018E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int c_powerLevelAnimHash;

	[Token(Token = "0x40018E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int c_activatedAnimHash;

	[Token(Token = "0x40018E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent PoweredOn;

	[Token(Token = "0x40018E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent PoweredOff;

	[Token(Token = "0x40018E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public Identifier m_ID;

	[Token(Token = "0x170004B9")]
	public bool IsSwitchedOn
	{
		[Token(Token = "0x6001E86")]
		[Address(RVA = "0x12271D4", Offset = "0x12271D4", VA = "0x12271D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170004BA")]
	public bool OutOfPower
	{
		[Token(Token = "0x6001E88")]
		[Address(RVA = "0x1227360", Offset = "0x1227360", VA = "0x1227360")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170004BB")]
	private float IPhysicsDamageScaler.AppliedScale
	{
		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0x12274FC", Offset = "0x12274FC", VA = "0x12274FC", Slot = "4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001E87")]
	[Address(RVA = "0x12271DC", Offset = "0x12271DC", VA = "0x12271DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001E89")]
	[Address(RVA = "0x1227380", Offset = "0x1227380", VA = "0x1227380")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6001E8A")]
	[Address(RVA = "0x1227390", Offset = "0x1227390", VA = "0x1227390")]
	public void TrySwitchOn()
	{
	}

	[Token(Token = "0x6001E8B")]
	[Address(RVA = "0x1227260", Offset = "0x1227260", VA = "0x1227260")]
	public void SwitchOff()
	{
	}

	[Token(Token = "0x6001E8D")]
	[Address(RVA = "0x1227514", Offset = "0x1227514", VA = "0x1227514")]
	private void Update()
	{
	}

	[Token(Token = "0x6001E8E")]
	[Address(RVA = "0x1227650", Offset = "0x1227650", VA = "0x1227650")]
	public PoweredAbility()
	{
	}
}
[Token(Token = "0x2000522")]
public static class WeaponUsageTracker
{
	[Token(Token = "0x2000523")]
	private class GunStats
	{
		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_shotsFired;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_shotsMissed;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_shotsHit;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_shotsCrit;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int m_kills;

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0x1227AB0", Offset = "0x1227AB0", VA = "0x1227AB0")]
		public GunStats()
		{
		}
	}

	[Token(Token = "0x2000524")]
	private class AmmoStat
	{
		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_totalTime;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DateTime m_lastMaxStart;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_currentlyMax;

		[Token(Token = "0x170004BC")]
		public float MaxTime
		{
			[Token(Token = "0x6001E99")]
			[Address(RVA = "0x12284DC", Offset = "0x12284DC", VA = "0x12284DC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0x1228400", Offset = "0x1228400", VA = "0x1228400")]
		public void SetAtMax(bool atMax)
		{
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0x1227AB8", Offset = "0x1227AB8", VA = "0x1227AB8")]
		public AmmoStat()
		{
		}
	}

	[Token(Token = "0x2000525")]
	public enum GunType
	{
		[Token(Token = "0x40018FB")]
		Pistol,
		[Token(Token = "0x40018FC")]
		Revolver,
		[Token(Token = "0x40018FD")]
		Shotgun,
		[Token(Token = "0x40018FE")]
		AssaultRifle,
		[Token(Token = "0x40018FF")]
		Rifle
	}

	[Token(Token = "0x2000526")]
	public enum GunStatType
	{
		[Token(Token = "0x4001901")]
		Shot,
		[Token(Token = "0x4001902")]
		Hit,
		[Token(Token = "0x4001903")]
		Crit,
		[Token(Token = "0x4001904")]
		Kill,
		[Token(Token = "0x4001905")]
		Miss
	}

	[Token(Token = "0x2000527")]
	public enum AmmoType
	{
		[Token(Token = "0x4001907")]
		Handgun,
		[Token(Token = "0x4001908")]
		Shotgun,
		[Token(Token = "0x4001909")]
		AssaultRifle,
		[Token(Token = "0x400190A")]
		Rifle
	}

	[Token(Token = "0x2000528")]
	public enum HolsterType
	{
		[Token(Token = "0x400190C")]
		Melee,
		[Token(Token = "0x400190D")]
		Gun,
		[Token(Token = "0x400190E")]
		PowerCell,
		[Token(Token = "0x400190F")]
		Milk,
		[Token(Token = "0x4001910")]
		FloppyDisk,
		[Token(Token = "0x4001911")]
		Other
	}

	[Token(Token = "0x40018E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int m_gunHolsterCount;

	[Token(Token = "0x40018EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int m_meleeHolsterCount;

	[Token(Token = "0x40018EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int m_milkHolsterCount;

	[Token(Token = "0x40018EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int m_cellHolsterCount;

	[Token(Token = "0x40018ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int m_discHolsterCount;

	[Token(Token = "0x40018EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static int m_totalKills;

	[Token(Token = "0x40018EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int m_meleeKills;

	[Token(Token = "0x40018F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<GunType, GunStats> m_allGunStats;

	[Token(Token = "0x40018F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Dictionary<AmmoType, AmmoStat> m_ammoMaxedDurations;

	[Token(Token = "0x6001E90")]
	[Address(RVA = "0x122772C", Offset = "0x122772C", VA = "0x122772C")]
	static WeaponUsageTracker()
	{
	}

	[Token(Token = "0x6001E91")]
	[Address(RVA = "0x1227A64", Offset = "0x1227A64", VA = "0x1227A64")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x6001E92")]
	[Address(RVA = "0x1227730", Offset = "0x1227730", VA = "0x1227730")]
	public static void Reset()
	{
	}

	[Token(Token = "0x6001E93")]
	[Address(RVA = "0x1227AC0", Offset = "0x1227AC0", VA = "0x1227AC0")]
	public static Dictionary<string, object> ReturnUsage()
	{
		return null;
	}

	[Token(Token = "0x6001E94")]
	[Address(RVA = "0x1228588", Offset = "0x1228588", VA = "0x1228588")]
	public static void ReportGunStat(GunType gunType, GunStatType statType)
	{
	}

	[Token(Token = "0x6001E95")]
	[Address(RVA = "0x1228704", Offset = "0x1228704", VA = "0x1228704")]
	public static void ReportMeleeKill()
	{
	}

	[Token(Token = "0x6001E96")]
	[Address(RVA = "0x1228768", Offset = "0x1228768", VA = "0x1228768")]
	public static void ReportAmmoChange(AmmoType ammoType, bool atCap)
	{
	}

	[Token(Token = "0x6001E97")]
	[Address(RVA = "0x1228854", Offset = "0x1228854", VA = "0x1228854")]
	public static void ReportHolstering(HolsterType itemHolstered)
	{
	}
}
[Token(Token = "0x2000529")]
public class AIFollow : MonoBehaviour
{
	[Token(Token = "0x6001E9C")]
	[Address(RVA = "0x122897C", Offset = "0x122897C", VA = "0x122897C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001E9D")]
	[Address(RVA = "0x12289FC", Offset = "0x12289FC", VA = "0x12289FC")]
	public AIFollow()
	{
	}
}
[Token(Token = "0x200052A")]
public class CharacterMover : MonoBehaviour
{
	[Token(Token = "0x4001912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController characterController;

	[Token(Token = "0x4001913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4001914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float jumpSpeed;

	[Token(Token = "0x4001915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float gravity;

	[Token(Token = "0x4001916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 moveDirection;

	[Token(Token = "0x4001917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Camera targetCamera;

	[Token(Token = "0x4001918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool waitForBLAST;

	[Token(Token = "0x4001919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector2 inputSecondaryLastFrame;

	[Token(Token = "0x6001E9E")]
	[Address(RVA = "0x1228A04", Offset = "0x1228A04", VA = "0x1228A04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001E9F")]
	[Address(RVA = "0x1228A5C", Offset = "0x1228A5C", VA = "0x1228A5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001EA0")]
	[Address(RVA = "0x1228A68", Offset = "0x1228A68", VA = "0x1228A68")]
	private void Update()
	{
	}

	[Token(Token = "0x6001EA1")]
	[Address(RVA = "0x1228C3C", Offset = "0x1228C3C", VA = "0x1228C3C")]
	public CharacterMover()
	{
	}
}
[Token(Token = "0x200052B")]
public class DropPodTest : MonoBehaviour
{
	[Token(Token = "0x200052C")]
	[CompilerGenerated]
	private sealed class <PlaySequenceAsync>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DropPodTest <>4__this;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <displacement>5__3;

		[Token(Token = "0x170004BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001EA8")]
			[Address(RVA = "0x1229048", Offset = "0x1229048", VA = "0x1229048", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001EAA")]
			[Address(RVA = "0x1229090", Offset = "0x1229090", VA = "0x1229090", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0x1228D5C", Offset = "0x1228D5C", VA = "0x1228D5C")]
		[DebuggerHidden]
		public <PlaySequenceAsync>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0x1228D98", Offset = "0x1228D98", VA = "0x1228D98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0x1228D9C", Offset = "0x1228D9C", VA = "0x1228D9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0x1229050", Offset = "0x1229050", VA = "0x1229050", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400191A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SmoothTweener m_doorTweener;

	[Token(Token = "0x400191B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform m_podRootTransform;

	[Token(Token = "0x400191C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private WorldMovingPlatformInteraction m_platform;

	[Token(Token = "0x400191D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool everTriggered;

	[Token(Token = "0x400191E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x400191F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float distance;

	[Token(Token = "0x6001EA2")]
	[Address(RVA = "0x1228CB0", Offset = "0x1228CB0", VA = "0x1228CB0")]
	public void PlaySequence()
	{
	}

	[Token(Token = "0x6001EA3")]
	[Address(RVA = "0x1228CE8", Offset = "0x1228CE8", VA = "0x1228CE8")]
	[IteratorStateMachine(typeof(<PlaySequenceAsync>d__7))]
	private IEnumerator PlaySequenceAsync()
	{
		return null;
	}

	[Token(Token = "0x6001EA4")]
	[Address(RVA = "0x1228D84", Offset = "0x1228D84", VA = "0x1228D84")]
	public DropPodTest()
	{
	}
}
[Token(Token = "0x200052D")]
public class Rotate : MonoBehaviour
{
	[Token(Token = "0x4001925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 rotation;

	[Token(Token = "0x6001EAB")]
	[Address(RVA = "0x1229098", Offset = "0x1229098", VA = "0x1229098")]
	private void Update()
	{
	}

	[Token(Token = "0x6001EAC")]
	[Address(RVA = "0x12290F4", Offset = "0x12290F4", VA = "0x12290F4")]
	public Rotate()
	{
	}
}
[Token(Token = "0x200052E")]
public class RotateRandom : MonoBehaviour
{
	[Token(Token = "0x200052F")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RotateRandom <>4__this;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <randomAngle>5__2;

		[Token(Token = "0x170004BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001EB3")]
			[Address(RVA = "0x12296FC", Offset = "0x12296FC", VA = "0x12296FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001EB5")]
			[Address(RVA = "0x1229744", Offset = "0x1229744", VA = "0x1229744", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EB0")]
		[Address(RVA = "0x1229170", Offset = "0x1229170", VA = "0x1229170")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0x12292B0", Offset = "0x12292B0", VA = "0x12292B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0x12292B4", Offset = "0x12292B4", VA = "0x12292B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0x1229704", Offset = "0x1229704", VA = "0x1229704", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MinMaxRange m_minMaxTimeBetween;

	[Token(Token = "0x4001927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MinMaxRange m_minMaxAngle;

	[Token(Token = "0x4001928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_speed;

	[Token(Token = "0x4001929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 2f)]
	[SerializeField]
	private int m_rotationAxisIndex;

	[Token(Token = "0x400192A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool wrapAngles;

	[Token(Token = "0x6001EAD")]
	[Address(RVA = "0x12290FC", Offset = "0x12290FC", VA = "0x12290FC")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6001EAE")]
	[Address(RVA = "0x1229198", Offset = "0x1229198", VA = "0x1229198")]
	private static float WrapAngle(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x6001EAF")]
	[Address(RVA = "0x12291F4", Offset = "0x12291F4", VA = "0x12291F4")]
	public RotateRandom()
	{
	}
}
[Token(Token = "0x2000530")]
public class TestSlide : MonoBehaviour
{
	[Token(Token = "0x400192F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 m_maxDelta;

	[Token(Token = "0x4001930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_start;

	[Token(Token = "0x6001EB6")]
	[Address(RVA = "0x122974C", Offset = "0x122974C", VA = "0x122974C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001EB7")]
	[Address(RVA = "0x1229788", Offset = "0x1229788", VA = "0x1229788")]
	public void SetSlideValue(float val)
	{
	}

	[Token(Token = "0x6001EB8")]
	[Address(RVA = "0x1229860", Offset = "0x1229860", VA = "0x1229860")]
	public TestSlide()
	{
	}
}
[Token(Token = "0x2000531")]
public class PlatformDisabler : MonoBehaviour
{
	[Token(Token = "0x4001931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("GameObjects:")]
	private GameObject[] m_gameObjects;

	[Token(Token = "0x4001932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Platform:")]
	private bool m_disableOnRift;

	[Token(Token = "0x4001933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool m_disableOnQuest;

	[Token(Token = "0x4001934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	[SerializeField]
	[FormerlySerializedAs("m_disableOnDelMar")]
	private bool m_disableOnQuest2;

	[Token(Token = "0x4001935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	[SerializeField]
	private bool m_disableOnPico;

	[Token(Token = "0x6001EB9")]
	[Address(RVA = "0x1229868", Offset = "0x1229868", VA = "0x1229868")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001EBA")]
	[Address(RVA = "0x12299E4", Offset = "0x12299E4", VA = "0x12299E4")]
	public PlatformDisabler()
	{
	}
}
[Token(Token = "0x2000532")]
public class PlatformPermissions
{
	[Token(Token = "0x4001936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool? s_microphonePermission;

	[Token(Token = "0x4001937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	private static bool s_neverAskMicPermission;

	[Token(Token = "0x4001938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	private static bool s_permissionRequested;

	[Token(Token = "0x6001EBB")]
	[Address(RVA = "0x1229A48", Offset = "0x1229A48", VA = "0x1229A48")]
	public static void RequestMicrophonePermission(bool requestOncePerSession = true, [Optional] Action onGranted)
	{
	}

	[Token(Token = "0x6001EBC")]
	[Address(RVA = "0x1229CFC", Offset = "0x1229CFC", VA = "0x1229CFC")]
	public static bool HasMicrophonePermission()
	{
		return default(bool);
	}

	[Token(Token = "0x6001EBD")]
	[Address(RVA = "0x1229E14", Offset = "0x1229E14", VA = "0x1229E14")]
	public PlatformPermissions()
	{
	}
}
[Token(Token = "0x2000535")]
public class PlayerVision : CachedMonoBehaviour
{
	[Token(Token = "0x400193D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_focusRatio;

	[Token(Token = "0x400193E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float m_maximumDistance;

	[Token(Token = "0x400193F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<EnemyType> m_firstEnemyView;

	[Token(Token = "0x4001940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<EnemyType> OnFirtEnemySeen;

	[Token(Token = "0x4001941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<IAgent> m_agents;

	[Token(Token = "0x4001942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int m_currentAgentIndex;

	[Token(Token = "0x6001EC4")]
	[Address(RVA = "0x122A034", Offset = "0x122A034", VA = "0x122A034")]
	private void Start()
	{
	}

	[Token(Token = "0x6001EC5")]
	[Address(RVA = "0x122A4C4", Offset = "0x122A4C4", VA = "0x122A4C4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001EC6")]
	[Address(RVA = "0x122A584", Offset = "0x122A584", VA = "0x122A584")]
	private Actor FindNextActor()
	{
		return null;
	}

	[Token(Token = "0x6001EC7")]
	[Address(RVA = "0x122A704", Offset = "0x122A704", VA = "0x122A704")]
	private bool IsAgentInVision(Actor actor)
	{
		return default(bool);
	}

	[Token(Token = "0x6001EC8")]
	[Address(RVA = "0x122A9E8", Offset = "0x122A9E8", VA = "0x122A9E8")]
	public PlayerVision()
	{
	}
}
[Token(Token = "0x2000536")]
[ActionCategory(ActionCategory.Transform)]
[HutongGames.PlayMaker.Tooltip("Rotates a GameObject towards a euler angle given a normalized speed")]
public class RotateTo : FsmStateAction
{
	[Token(Token = "0x4001943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("The game object to translate.")]
	[RequiredField]
	public FsmOwnerDefault gameObject;

	[Token(Token = "0x4001944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 toRotation;

	[Token(Token = "0x4001945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion fromRotation;

	[Token(Token = "0x4001946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float speed;

	[Token(Token = "0x4001947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_normalizedValue;

	[Token(Token = "0x6001EC9")]
	[Address(RVA = "0x122A9FC", Offset = "0x122A9FC", VA = "0x122A9FC", Slot = "28")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6001ECA")]
	[Address(RVA = "0x122AA08", Offset = "0x122AA08", VA = "0x122AA08", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001ECB")]
	[Address(RVA = "0x122AAB4", Offset = "0x122AAB4", VA = "0x122AAB4", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6001ECC")]
	[Address(RVA = "0x122AAB8", Offset = "0x122AAB8", VA = "0x122AAB8")]
	private void DoRotate()
	{
	}

	[Token(Token = "0x6001ECD")]
	[Address(RVA = "0x122AC1C", Offset = "0x122AC1C", VA = "0x122AC1C")]
	public RotateTo()
	{
	}
}
[Token(Token = "0x2000537")]
public class GestureVisualizer : CachedMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000538")]
	private struct GesturePair
	{
		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Identifier gestureIdentifier;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string gestureParameter;
	}

	[Token(Token = "0x4001948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator m_attachedAnimator;

	[Token(Token = "0x4001949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject m_hand;

	[Token(Token = "0x400194A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_questController;

	[Token(Token = "0x400194B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_quest2Controller;

	[Token(Token = "0x400194C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AnimationCurve m_rotationCorrectionCurve;

	[Token(Token = "0x400194D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Min(0f)]
	private float m_verticalRootOffset;

	[Token(Token = "0x400194E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GesturePair[] m_gesturePairs;

	[Token(Token = "0x400194F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_playing;

	[Token(Token = "0x6001ECE")]
	[Address(RVA = "0x122AC3C", Offset = "0x122AC3C", VA = "0x122AC3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001ECF")]
	[Address(RVA = "0x122AE18", Offset = "0x122AE18", VA = "0x122AE18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001ED0")]
	[Address(RVA = "0x122AE88", Offset = "0x122AE88", VA = "0x122AE88")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001ED1")]
	[Address(RVA = "0x122AFA4", Offset = "0x122AFA4", VA = "0x122AFA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001ED2")]
	[Address(RVA = "0x122B428", Offset = "0x122B428", VA = "0x122B428")]
	private void OnGameplayPaused()
	{
	}

	[Token(Token = "0x6001ED3")]
	[Address(RVA = "0x122B458", Offset = "0x122B458", VA = "0x122B458")]
	private void OnGameplayUnpaused()
	{
	}

	[Token(Token = "0x6001ED4")]
	[Address(RVA = "0x122B488", Offset = "0x122B488", VA = "0x122B488")]
	public void Show(Identifier gestureIdentifier)
	{
	}

	[Token(Token = "0x6001ED5")]
	[Address(RVA = "0x122AD90", Offset = "0x122AD90", VA = "0x122AD90")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001ED6")]
	[Address(RVA = "0x122B550", Offset = "0x122B550", VA = "0x122B550")]
	public GestureVisualizer()
	{
	}
}
[Token(Token = "0x2000539")]
[HutongGames.PlayMaker.Tooltip("Waits until player is no longer using specified Sacred Rite ability. Pushback not included due to having no active duration")]
[ActionCategory("Sacred Rites")]
public class WaitUntilSacredRiteFinished : FsmStateAction
{
	[Token(Token = "0x4001952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[HutongGames.PlayMaker.Tooltip("Return true if slowdown is currently active")]
	public bool m_checkSlow;

	[Token(Token = "0x4001953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[HutongGames.PlayMaker.Tooltip("Return true if shield is currently active")]
	public bool m_checkShield;

	[Token(Token = "0x4001954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private HealthStatus m_playerRootHealthStatus;

	[Token(Token = "0x6001ED7")]
	[Address(RVA = "0x122B558", Offset = "0x122B558", VA = "0x122B558", Slot = "32")]
	public override void OnEnter()
	{
	}

	[Token(Token = "0x6001ED8")]
	[Address(RVA = "0x122B688", Offset = "0x122B688", VA = "0x122B688", Slot = "34")]
	public override void OnUpdate()
	{
	}

	[Token(Token = "0x6001ED9")]
	[Address(RVA = "0x122B718", Offset = "0x122B718", VA = "0x122B718")]
	public WaitUntilSacredRiteFinished()
	{
	}
}
[Token(Token = "0x200053A")]
[QuestDescriptor(displayColor = 4278255615u)]
[CreateAssetMenu(menuName = "Battle Sister/Quests/Base Quest")]
public class BattleSisterQuest : SerializableQuest
{
	[Token(Token = "0x6001EDA")]
	[Address(RVA = "0x122B720", Offset = "0x122B720", VA = "0x122B720")]
	public BattleSisterQuest()
	{
	}
}
[Token(Token = "0x200053B")]
[QuestRequirementDependency(new Type[] { typeof(ZoneTracker) })]
public class InZoneRequirement : QuestRequirement
{
	[Token(Token = "0x4001955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ExposedReference<Zone> m_targetZoneReference;

	[Token(Token = "0x4001956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Zone m_targetZone;

	[Token(Token = "0x4001957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_progress;

	[Token(Token = "0x170004C1")]
	public override string Title
	{
		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0x122B730", Offset = "0x122B730", VA = "0x122B730", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004C2")]
	public override float Progress
	{
		[Token(Token = "0x6001EDC")]
		[Address(RVA = "0x122B770", Offset = "0x122B770", VA = "0x122B770", Slot = "7")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001EDD")]
	[Address(RVA = "0x122B778", Offset = "0x122B778", VA = "0x122B778", Slot = "8")]
	public override void Reset(Quest owner)
	{
	}

	[Token(Token = "0x6001EDE")]
	[Address(RVA = "0x122B780", Offset = "0x122B780", VA = "0x122B780", Slot = "9")]
	public override void UpdateProgress(IQuestDataProvider data)
	{
	}

	[Token(Token = "0x6001EDF")]
	[Address(RVA = "0x122B8B4", Offset = "0x122B8B4", VA = "0x122B8B4")]
	public InZoneRequirement()
	{
	}
}
[Token(Token = "0x200053C")]
[CreateAssetMenu(menuName = "Battle Sister/Quests/Mission Quest")]
public class MissionQuest : BattleSisterQuest
{
	[Token(Token = "0x4001958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ExposedReference<PlayerSpawnPoint> m_playerSpawnPointReference;

	[Token(Token = "0x4001959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private PlayerSpawnPoint m_playerSpawnPoint;

	[Token(Token = "0x400195A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Inventory.InventoryBlockFlags m_inventoryBlockFlags;

	[Token(Token = "0x170004C3")]
	public PlayerSpawnPoint PlayerSpawnPoint
	{
		[Token(Token = "0x6001EE0")]
		[Address(RVA = "0x122B8BC", Offset = "0x122B8BC", VA = "0x122B8BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004C4")]
	public Inventory.InventoryBlockFlags InventoryBlockFlags
	{
		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0x122B978", Offset = "0x122B978", VA = "0x122B978")]
		get
		{
			return default(Inventory.InventoryBlockFlags);
		}
	}

	[Token(Token = "0x6001EE2")]
	[Address(RVA = "0x122B980", Offset = "0x122B980", VA = "0x122B980", Slot = "6")]
	public override void Reset()
	{
	}

	[Token(Token = "0x6001EE3")]
	[Address(RVA = "0x122B9F8", Offset = "0x122B9F8", VA = "0x122B9F8")]
	public MissionQuest()
	{
	}
}
[Token(Token = "0x200053D")]
public class MultiplayerZone : Zone
{
	[Token(Token = "0x200053E")]
	public enum EnterZonePlayerRule
	{
		[Token(Token = "0x400196B")]
		Ignore = -1,
		[Token(Token = "0x400196C")]
		None,
		[Token(Token = "0x400196D")]
		AnyPlayer,
		[Token(Token = "0x400196E")]
		AllPlayersTogether,
		[Token(Token = "0x400196F")]
		AllPlayersSeen,
		[Token(Token = "0x4001970")]
		FirstPlayer
	}

	[Token(Token = "0x200053F")]
	public enum ExitZonePlayerRule
	{
		[Token(Token = "0x4001972")]
		Ignore = -1,
		[Token(Token = "0x4001973")]
		None,
		[Token(Token = "0x4001974")]
		AnyPlayerExited,
		[Token(Token = "0x4001975")]
		AllPlayersExited,
		[Token(Token = "0x4001976")]
		AnyPlayersPassedThru,
		[Token(Token = "0x4001977")]
		AllPlayersPassedThru,
		[Token(Token = "0x4001978")]
		AnyPlayersPassedBack,
		[Token(Token = "0x4001979")]
		AllPlayersPassedBack
	}

	[Token(Token = "0x400195B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private EnterZonePlayerRule m_playerEnterRule;

	[Token(Token = "0x400195C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private ExitZonePlayerRule m_playerExitRule;

	[Token(Token = "0x400195D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("When the player exits the zone should we remove them from the player list?\r\nThis effectively toggles between two modes:\r\nenabled -> OnEnter/Oxit actions will only trigger when all players are in the zone\r\ndisabled -> OnEnter/Exit actions will trigger when all players have *touched* the zone at least once\r\nNOTE: This assumes that 'Requires Player Trigger' and 'Requires Multiple Players' are both enabled")]
	[SerializeField]
	private bool m_removePlayerOnExit;

	[Token(Token = "0x400195E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	[SerializeField]
	private bool m_triggerAudioZone;

	[Token(Token = "0x400195F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	[UnityEngine.Tooltip("Set this to true if you only want this sensor to work for FPS players to aid debugging.")]
	[SerializeField]
	private bool m_onlyForFPSControllerPlayer;

	[Token(Token = "0x4001960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UnityEvent m_needMorePlayersToEnter;

	[Token(Token = "0x4001961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UnityEvent m_needMorePlayersToExit;

	[Token(Token = "0x4001962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Event only called locally and triggered only by local player.")]
	public UnityEvent OnEnterLocal;

	[Token(Token = "0x4001963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEvent OnExitLocal;

	[Token(Token = "0x4001964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 m_zoneCenter;

	[Token(Token = "0x4001965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 m_zoneForward;

	[Token(Token = "0x4001966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<PlayerAgent> m_playersSeen;

	[Token(Token = "0x4001967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<PlayerAgent> m_playersPassedThru;

	[Token(Token = "0x4001968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<PlayerAgent> m_playersPassedBack;

	[Token(Token = "0x4001969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Dictionary<PlayerAgent, float> m_playersInZone;

	[Token(Token = "0x170004C5")]
	public UnityEvent NeedMorePlayersToEnter
	{
		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0x122BA00", Offset = "0x122BA00", VA = "0x122BA00")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004C6")]
	public Dictionary<PlayerAgent, float> PlayersInZone
	{
		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0x122BA08", Offset = "0x122BA08", VA = "0x122BA08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001EE6")]
	[Address(RVA = "0x122BA10", Offset = "0x122BA10", VA = "0x122BA10", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001EE7")]
	[Address(RVA = "0x122BCD0", Offset = "0x122BCD0", VA = "0x122BCD0", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6001EE8")]
	[Address(RVA = "0x122BE00", Offset = "0x122BE00", VA = "0x122BE00", Slot = "6")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6001EE9")]
	[Address(RVA = "0x122BFEC", Offset = "0x122BFEC", VA = "0x122BFEC")]
	private void HandlePlayerLeft(PlayerAgent player)
	{
	}

	[Token(Token = "0x6001EEA")]
	[Address(RVA = "0x122C680", Offset = "0x122C680", VA = "0x122C680", Slot = "7")]
	protected override void OnColliderEnterZone(Collider other)
	{
	}

	[Token(Token = "0x6001EEB")]
	[Address(RVA = "0x122C86C", Offset = "0x122C86C", VA = "0x122C86C", Slot = "8")]
	protected override void OnColliderExitZone(Collider other)
	{
	}

	[Token(Token = "0x6001EEC")]
	[Address(RVA = "0x122C808", Offset = "0x122C808", VA = "0x122C808")]
	private void OnTrigger(Collider other, bool triggerEnter, Action<GameObject> actionOnConditionsMet)
	{
	}

	[Token(Token = "0x6001EED")]
	[Address(RVA = "0x122C9F4", Offset = "0x122C9F4", VA = "0x122C9F4")]
	private bool UpdatePlayerZoneList(Collider other, bool triggerEntered)
	{
		return default(bool);
	}

	[Token(Token = "0x6001EEE")]
	[Address(RVA = "0x122CEA8", Offset = "0x122CEA8", VA = "0x122CEA8")]
	public void ResetPlayersSeen()
	{
	}

	[Token(Token = "0x6001EEF")]
	[Address(RVA = "0x122CF18", Offset = "0x122CF18", VA = "0x122CF18")]
	public void ResetPlayersPassedThru()
	{
	}

	[Token(Token = "0x6001EF0")]
	[Address(RVA = "0x122CF88", Offset = "0x122CF88", VA = "0x122CF88", Slot = "10")]
	protected override bool ConditionsMet(Collider other, bool triggerEnter)
	{
		return default(bool);
	}

	[Token(Token = "0x6001EF1")]
	[Address(RVA = "0x122D2EC", Offset = "0x122D2EC", VA = "0x122D2EC")]
	private bool ProcessEnterExitRules(bool triggerEnter)
	{
		return default(bool);
	}

	[Token(Token = "0x6001EF2")]
	[Address(RVA = "0x122D6B0", Offset = "0x122D6B0", VA = "0x122D6B0")]
	public MultiplayerZone()
	{
	}
}
[Token(Token = "0x2000540")]
public class ObjectiveManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000541")]
	private class ObjectiveMapping
	{
		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Quest sourceQuest;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform positionAnchor;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string text;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int minTimeForVisible;

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0x122DC20", Offset = "0x122DC20", VA = "0x122DC20")]
		public ObjectiveMapping()
		{
		}
	}

	[Token(Token = "0x400197A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_shaderPropUnityGuizTestMode;

	[Token(Token = "0x400197B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_objectiveMarker;

	[Token(Token = "0x400197C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ObjectiveMapping[] m_mappings;

	[Token(Token = "0x400197D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private QuestStateIdentifier m_questActiveState;

	[Token(Token = "0x400197E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quest m_activeQuest;

	[Token(Token = "0x400197F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_timeQuestActive;

	[Token(Token = "0x6001EF3")]
	[Address(RVA = "0x122D8EC", Offset = "0x122D8EC", VA = "0x122D8EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001EF4")]
	[Address(RVA = "0x122D978", Offset = "0x122D978", VA = "0x122D978")]
	private void Update()
	{
	}

	[Token(Token = "0x6001EF5")]
	[Address(RVA = "0x122DBB0", Offset = "0x122DBB0", VA = "0x122DBB0")]
	public ObjectiveManager()
	{
	}
}
[Token(Token = "0x2000542")]
[QuestRequirementDependency(new Type[] { typeof(MarkQuestComplete) })]
public class PlayMakerGraphComplete : QuestRequirement
{
	[Token(Token = "0x4001984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ExposedReference<PlayMakerFSM> m_targetFSMReference;

	[Token(Token = "0x4001985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PlayMakerFSM m_targetFSM;

	[Token(Token = "0x4001986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_progress;

	[Token(Token = "0x170004C7")]
	public override string Title
	{
		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0x122DC78", Offset = "0x122DC78", VA = "0x122DC78", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004C8")]
	public override float Progress
	{
		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0x122DCB8", Offset = "0x122DCB8", VA = "0x122DCB8", Slot = "7")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001EFA")]
	[Address(RVA = "0x122DCC0", Offset = "0x122DCC0", VA = "0x122DCC0", Slot = "8")]
	public override void Reset(Quest owner)
	{
	}

	[Token(Token = "0x6001EFB")]
	[Address(RVA = "0x122DCC8", Offset = "0x122DCC8", VA = "0x122DCC8", Slot = "9")]
	public override void UpdateProgress(IQuestDataProvider data)
	{
	}

	[Token(Token = "0x6001EFC")]
	[Address(RVA = "0x122DE14", Offset = "0x122DE14", VA = "0x122DE14")]
	public PlayMakerGraphComplete()
	{
	}
}
[Serializable]
[Token(Token = "0x2000543")]
public class QuestSavePacket
{
	[Token(Token = "0x4001987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4001988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string state;

	[Token(Token = "0x4001989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string data;

	[Token(Token = "0x6001EFD")]
	[Address(RVA = "0x122DE1C", Offset = "0x122DE1C", VA = "0x122DE1C")]
	public QuestSavePacket()
	{
	}
}
[Token(Token = "0x2000544")]
public class QuestSerializer : MonoBehaviour
{
	[Token(Token = "0x400198A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private QuestStateIdentifier m_questActiveState;

	[Token(Token = "0x400198B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private QuestStateIdentifier m_questInactiveState;

	[Token(Token = "0x400198C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private QuestStateIdentifier m_questCompleteState;

	[Token(Token = "0x400198D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<QuestStateIdentifier> m_knownStateIdentifiers;

	[Token(Token = "0x400198E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static QuestManager m_manager;

	[Token(Token = "0x400198F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static MissionQuest m_currentActiveQuest;

	[Token(Token = "0x4001990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static SerializableQuest.SaveType s_pendingSaveType;

	[Token(Token = "0x4001991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static int s_frameToSaveAt;

	[Token(Token = "0x170004C9")]
	public List<QuestStateIdentifier> KnownStateIdentifiers
	{
		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0x122DE24", Offset = "0x122DE24", VA = "0x122DE24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004CA")]
	public QuestStateIdentifier QuestActiveState
	{
		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0x122DE2C", Offset = "0x122DE2C", VA = "0x122DE2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004CB")]
	public QuestStateIdentifier QuestInactiveState
	{
		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x122DE34", Offset = "0x122DE34", VA = "0x122DE34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004CC")]
	public MissionQuest CurrentActiveQuest
	{
		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x122DE3C", Offset = "0x122DE3C", VA = "0x122DE3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001F02")]
	[Address(RVA = "0x122DE94", Offset = "0x122DE94", VA = "0x122DE94")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001F03")]
	[Address(RVA = "0x122E0E4", Offset = "0x122E0E4", VA = "0x122E0E4")]
	public void LoadData(string jsonStrings)
	{
	}

	[Token(Token = "0x6001F04")]
	[Address(RVA = "0x122E544", Offset = "0x122E544", VA = "0x122E544")]
	public void SetCurrentActiveQuest([Optional] MissionQuest quest)
	{
	}

	[Token(Token = "0x6001F05")]
	[Address(RVA = "0x122E828", Offset = "0x122E828", VA = "0x122E828")]
	public void SetQuestStateActive(MissionQuest quest)
	{
	}

	[Token(Token = "0x6001F06")]
	[Address(RVA = "0x122E8A4", Offset = "0x122E8A4", VA = "0x122E8A4")]
	public string SaveData()
	{
		return null;
	}

	[Token(Token = "0x6001F07")]
	[Address(RVA = "0x122EC58", Offset = "0x122EC58", VA = "0x122EC58")]
	private void Update()
	{
	}

	[Token(Token = "0x6001F08")]
	[Address(RVA = "0x122ED94", Offset = "0x122ED94", VA = "0x122ED94")]
	private static void HandleQuestStateChanged(Quest quest)
	{
	}

	[Token(Token = "0x6001F09")]
	[Address(RVA = "0x122EEE4", Offset = "0x122EEE4", VA = "0x122EEE4")]
	public QuestSerializer()
	{
	}
}
[Token(Token = "0x2000545")]
public class SerializableQuest : Quest
{
	[Token(Token = "0x2000546")]
	public enum SaveType
	{
		[Token(Token = "0x4001994")]
		None,
		[Token(Token = "0x4001995")]
		Memory,
		[Token(Token = "0x4001996")]
		Disk
	}

	[Token(Token = "0x4001992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private SaveType m_saveTypeOnComplete;

	[Token(Token = "0x170004CD")]
	public SaveType SaveTypeOnComplete
	{
		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0x122EF68", Offset = "0x122EF68", VA = "0x122EF68")]
		get
		{
			return default(SaveType);
		}
	}

	[Token(Token = "0x170004CE")]
	public string State
	{
		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0x122EF70", Offset = "0x122EF70", VA = "0x122EF70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001F0D")]
	[Address(RVA = "0x122E408", Offset = "0x122E408", VA = "0x122E408")]
	public void LoadFromPacket(QuestSavePacket packet, QuestSerializer questSerializer)
	{
	}

	[Token(Token = "0x6001F0E")]
	[Address(RVA = "0x122F000", Offset = "0x122F000", VA = "0x122F000")]
	public void Load(IDataset dataset)
	{
	}

	[Token(Token = "0x6001F0F")]
	[Address(RVA = "0x122F1D4", Offset = "0x122F1D4", VA = "0x122F1D4")]
	public void Save(IDataset dataset)
	{
	}

	[Token(Token = "0x6001F10")]
	[Address(RVA = "0x122EB88", Offset = "0x122EB88", VA = "0x122EB88")]
	public QuestSavePacket SaveAsPacket()
	{
		return null;
	}

	[Token(Token = "0x6001F11")]
	[Address(RVA = "0x122F354", Offset = "0x122F354", VA = "0x122F354", Slot = "10")]
	protected virtual void Load(string data)
	{
	}

	[Token(Token = "0x6001F12")]
	[Address(RVA = "0x122F358", Offset = "0x122F358", VA = "0x122F358", Slot = "11")]
	protected virtual string Save()
	{
		return null;
	}

	[Token(Token = "0x6001F13")]
	[Address(RVA = "0x122B728", Offset = "0x122B728", VA = "0x122B728")]
	public SerializableQuest()
	{
	}
}
[Token(Token = "0x2000549")]
[RequireComponent(typeof(Collider))]
public class Zone : MonoBehaviour
{
	[Token(Token = "0x4001999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Identifier m_ID;

	[Token(Token = "0x400199A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected LayerMask m_detectedLayers;

	[Token(Token = "0x400199B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	protected bool m_onlyLocalPlayerCanTrigger;

	[Token(Token = "0x400199C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected ZoneTracker m_zoneTracker;

	[Token(Token = "0x400199D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected int m_countValidAgentsInZone;

	[Token(Token = "0x400199E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnEnter;

	[Token(Token = "0x400199F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnExit;

	[Token(Token = "0x40019A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action<GameObject> OnSpecificZoneEnter;

	[Token(Token = "0x40019A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action<GameObject> OnSpecificZoneExit;

	[Token(Token = "0x40019A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<Zone, GameObject> OnZoneEnter;

	[Token(Token = "0x40019A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<Zone, GameObject> OnZoneExit;

	[Token(Token = "0x40019A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Collider> tempPrevious;

	[Token(Token = "0x40019A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Collider> tempCurrent;

	[Token(Token = "0x170004CF")]
	public Identifier Id
	{
		[Token(Token = "0x6001F18")]
		[Address(RVA = "0x122F404", Offset = "0x122F404", VA = "0x122F404")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004D0")]
	public bool AnythingInZone
	{
		[Token(Token = "0x6001F19")]
		[Address(RVA = "0x122B8A4", Offset = "0x122B8A4", VA = "0x122B8A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170004D1")]
	private bool allowAnyAgent
	{
		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0x122F40C", Offset = "0x122F40C", VA = "0x122F40C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001F1B")]
	[Address(RVA = "0x122F41C", Offset = "0x122F41C", VA = "0x122F41C")]
	private void Reset()
	{
	}

	[Token(Token = "0x6001F1C")]
	[Address(RVA = "0x122F4CC", Offset = "0x122F4CC", VA = "0x122F4CC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6001F1D")]
	[Address(RVA = "0x122BB28", Offset = "0x122BB28", VA = "0x122BB28", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001F1E")]
	[Address(RVA = "0x122F590", Offset = "0x122F590", VA = "0x122F590")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001F1F")]
	[Address(RVA = "0x122BDFC", Offset = "0x122BDFC", VA = "0x122BDFC", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6001F20")]
	[Address(RVA = "0x122BFE4", Offset = "0x122BFE4", VA = "0x122BFE4", Slot = "6")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6001F21")]
	[Address(RVA = "0x122F690", Offset = "0x122F690", VA = "0x122F690")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001F22")]
	[Address(RVA = "0x122F69C", Offset = "0x122F69C", VA = "0x122F69C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001F23")]
	[Address(RVA = "0x122F6A8", Offset = "0x122F6A8", VA = "0x122F6A8", Slot = "7")]
	protected virtual void OnColliderEnterZone(Collider other)
	{
	}

	[Token(Token = "0x6001F24")]
	[Address(RVA = "0x122F744", Offset = "0x122F744", VA = "0x122F744", Slot = "8")]
	protected virtual void OnColliderExitZone(Collider other)
	{
	}

	[Token(Token = "0x6001F25")]
	[Address(RVA = "0x122F688", Offset = "0x122F688", VA = "0x122F688")]
	private void Cleanup()
	{
	}

	[Token(Token = "0x6001F26")]
	[Address(RVA = "0x122F7E0", Offset = "0x122F7E0", VA = "0x122F7E0", Slot = "9")]
	protected virtual void CheckConditionsMet(Collider other, bool enter, Action<GameObject> actionOnConditionsMet)
	{
	}

	[Token(Token = "0x6001F27")]
	[Address(RVA = "0x122C5C4", Offset = "0x122C5C4", VA = "0x122C5C4")]
	internal void OnEnterConditionsMet(GameObject go)
	{
	}

	[Token(Token = "0x6001F28")]
	[Address(RVA = "0x122C504", Offset = "0x122C504", VA = "0x122C504")]
	internal void OnExitConditionsMet(GameObject go)
	{
	}

	[Token(Token = "0x6001F29")]
	[Address(RVA = "0x122FA28", Offset = "0x122FA28", VA = "0x122FA28")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6001F2A")]
	[Address(RVA = "0x122D168", Offset = "0x122D168", VA = "0x122D168", Slot = "10")]
	protected virtual bool ConditionsMet(Collider other, bool enter)
	{
		return default(bool);
	}

	[Token(Token = "0x6001F2B")]
	[Address(RVA = "0x122D850", Offset = "0x122D850", VA = "0x122D850")]
	public Zone()
	{
	}
}
[Token(Token = "0x200054A")]
[ServiceProvider(typeof(ZoneTracker))]
public class ZoneTracker : MonoBehaviour, IQuestDataProvider
{
	[Token(Token = "0x40019A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Identifier> m_containingZones;

	[Token(Token = "0x40019A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_hasChanged;

	[Token(Token = "0x40019A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action<Identifier, GameObject> OnZoneEnter;

	[Token(Token = "0x40019A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<Identifier, GameObject> OnZoneExit;

	[Token(Token = "0x170004D2")]
	public List<Identifier> ContainingZones
	{
		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x122FBF8", Offset = "0x122FBF8", VA = "0x122FBF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004D3")]
	private bool PT.QuestSystem.IQuestDataProvider.HasChanged
	{
		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x122FC00", Offset = "0x122FC00", VA = "0x122FC00", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x122FC08", Offset = "0x122FC08", VA = "0x122FC08", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6001F2F")]
	[Address(RVA = "0x122FC14", Offset = "0x122FC14", VA = "0x122FC14")]
	public bool IsInZone(Identifier id)
	{
		return default(bool);
	}

	[Token(Token = "0x6001F30")]
	[Address(RVA = "0x122FC6C", Offset = "0x122FC6C", VA = "0x122FC6C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001F31")]
	[Address(RVA = "0x122FDC4", Offset = "0x122FDC4", VA = "0x122FDC4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001F32")]
	[Address(RVA = "0x122F848", Offset = "0x122F848", VA = "0x122F848")]
	public void EnteredZone(Identifier id, GameObject go)
	{
	}

	[Token(Token = "0x6001F33")]
	[Address(RVA = "0x122F96C", Offset = "0x122F96C", VA = "0x122F96C")]
	public void ExitedZone(Identifier id, GameObject go)
	{
	}

	[Token(Token = "0x6001F34")]
	[Address(RVA = "0x122FE7C", Offset = "0x122FE7C", VA = "0x122FE7C")]
	public ZoneTracker()
	{
	}
}
[Token(Token = "0x200054B")]
public class ApplyShootTest : MonoBehaviour
{
	[Token(Token = "0x40019AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected float m_fCurrentHitPoints;

	[Token(Token = "0x40019AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float FlyBackForceScale;

	[Token(Token = "0x40019AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_lastHitDir;

	[Token(Token = "0x40019AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 m_lastPointHit;

	[Token(Token = "0x40019AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_lastWeaponForceMultiplier;

	[Token(Token = "0x170004D4")]
	public bool PartiallyUnderground
	{
		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x122FF04", Offset = "0x122FF04", VA = "0x122FF04")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x122FF0C", Offset = "0x122FF0C", VA = "0x122FF0C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170004D5")]
	public float CurrentHitPoints
	{
		[Token(Token = "0x6001F37")]
		[Address(RVA = "0x122FF18", Offset = "0x122FF18", VA = "0x122FF18")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6001F38")]
	[Address(RVA = "0x122FF20", Offset = "0x122FF20", VA = "0x122FF20")]
	public void Reset()
	{
	}

	[Token(Token = "0x6001F39")]
	[Address(RVA = "0x122FF24", Offset = "0x122FF24", VA = "0x122FF24")]
	public void SetHitData(Vector3 point, Vector3 direction, float weaponMult)
	{
	}

	[Token(Token = "0x6001F3A")]
	[Address(RVA = "0x122FF38", Offset = "0x122FF38", VA = "0x122FF38")]
	public void ApplyForceToRagDoll(bool wasAlive)
	{
	}

	[Token(Token = "0x6001F3B")]
	[Address(RVA = "0x12300AC", Offset = "0x12300AC", VA = "0x12300AC")]
	public void ResetHitPoints(float value)
	{
	}

	[Token(Token = "0x6001F3C")]
	[Address(RVA = "0x12300B4", Offset = "0x12300B4", VA = "0x12300B4")]
	public ApplyShootTest()
	{
	}
}
[Token(Token = "0x200054C")]
public class EnemyControllerTest : MonoBehaviour
{
	[Token(Token = "0x40019B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x40019B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float JumpHeight;

	[Token(Token = "0x40019B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GroundDistance;

	[Token(Token = "0x40019B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float DashDistance;

	[Token(Token = "0x40019B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LayerMask Ground;

	[Token(Token = "0x40019B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody m_body;

	[Token(Token = "0x40019B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Animator m_animator;

	[Token(Token = "0x40019B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 m_inputs;

	[Token(Token = "0x40019B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool m_isDead;

	[Token(Token = "0x40019B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform m_groundChecker;

	[Token(Token = "0x170004D6")]
	public bool IsDead
	{
		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x1230130", Offset = "0x1230130", VA = "0x1230130")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0x1230138", Offset = "0x1230138", VA = "0x1230138")]
		set
		{
		}
	}

	[Token(Token = "0x6001F3F")]
	[Address(RVA = "0x1230144", Offset = "0x1230144", VA = "0x1230144")]
	private void Start()
	{
	}

	[Token(Token = "0x6001F40")]
	[Address(RVA = "0x1230230", Offset = "0x1230230", VA = "0x1230230")]
	private void Update()
	{
	}

	[Token(Token = "0x6001F41")]
	[Address(RVA = "0x12302DC", Offset = "0x12302DC", VA = "0x12302DC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001F42")]
	[Address(RVA = "0x1230370", Offset = "0x1230370", VA = "0x1230370")]
	public EnemyControllerTest()
	{
	}
}
[Token(Token = "0x200054D")]
public class RagdollTester : MonoBehaviour
{
	[Token(Token = "0x200054E")]
	public class Character
	{
		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ApplyShootTest shootable;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PTRagdollToggler ragdoll;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 position;

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0x12313E4", Offset = "0x12313E4", VA = "0x12313E4")]
		public void Reset(PTRagdollToggler rdt)
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0x1230668", Offset = "0x1230668", VA = "0x1230668")]
		public Character()
		{
		}
	}

	[Token(Token = "0x200054F")]
	[CompilerGenerated]
	private sealed class <RiseOutOfGround>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RagdollTester <>4__this;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Character>.Enumerator <>7__wrap1;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator <a>5__3;

		[Token(Token = "0x170004D7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001F53")]
			[Address(RVA = "0x1231AFC", Offset = "0x1231AFC", VA = "0x1231AFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001F55")]
			[Address(RVA = "0x1231B44", Offset = "0x1231B44", VA = "0x1231B44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0x12311F8", Offset = "0x12311F8", VA = "0x12311F8")]
		[DebuggerHidden]
		public <RiseOutOfGround>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0x12315A4", Offset = "0x12315A4", VA = "0x12315A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0x12315C0", Offset = "0x12315C0", VA = "0x12315C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0x1231AAC", Offset = "0x1231AAC", VA = "0x1231AAC")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0x1231B04", Offset = "0x1231B04", VA = "0x1231B04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000550")]
	[CompilerGenerated]
	private sealed class <ResetRagdollsAsync>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RagdollTester <>4__this;

		[Token(Token = "0x170004D9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001F59")]
			[Address(RVA = "0x1231FBC", Offset = "0x1231FBC", VA = "0x1231FBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001F5B")]
			[Address(RVA = "0x1232004", Offset = "0x1232004", VA = "0x1232004", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0x12313AC", Offset = "0x12313AC", VA = "0x12313AC")]
		[DebuggerHidden]
		public <ResetRagdollsAsync>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0x1231B4C", Offset = "0x1231B4C", VA = "0x1231B4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0x1231B50", Offset = "0x1231B50", VA = "0x1231B50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0x1231FC4", Offset = "0x1231FC4", VA = "0x1231FC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40019BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_explosionPos;

	[Token(Token = "0x40019BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_weaponForce;

	[Token(Token = "0x40019BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_HipsBone;

	[Token(Token = "0x40019BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 m_hitPoint;

	[Token(Token = "0x40019BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 m_hitDir;

	[Token(Token = "0x40019BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Character> m_characters;

	[Token(Token = "0x6001F43")]
	[Address(RVA = "0x12303DC", Offset = "0x12303DC", VA = "0x12303DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001F44")]
	[Address(RVA = "0x1230670", Offset = "0x1230670", VA = "0x1230670")]
	private void Update()
	{
	}

	[Token(Token = "0x6001F45")]
	[Address(RVA = "0x1230B9C", Offset = "0x1230B9C", VA = "0x1230B9C")]
	private void PlayAnimation()
	{
	}

	[Token(Token = "0x6001F46")]
	[Address(RVA = "0x1230DD8", Offset = "0x1230DD8", VA = "0x1230DD8")]
	private void PauseAnimation(float dt)
	{
	}

	[Token(Token = "0x6001F47")]
	[Address(RVA = "0x1231184", Offset = "0x1231184", VA = "0x1231184")]
	[IteratorStateMachine(typeof(<RiseOutOfGround>d__11))]
	private IEnumerator RiseOutOfGround()
	{
		return null;
	}

	[Token(Token = "0x6001F48")]
	[Address(RVA = "0x1230FE0", Offset = "0x1230FE0", VA = "0x1230FE0")]
	public void SetBool(string paramName, bool mode)
	{
	}

	[Token(Token = "0x6001F49")]
	[Address(RVA = "0x1231220", Offset = "0x1231220", VA = "0x1231220")]
	public void ApplyForceToRagDoll(PTRagdollToggler rdt)
	{
	}

	[Token(Token = "0x6001F4A")]
	[Address(RVA = "0x1230DB8", Offset = "0x1230DB8", VA = "0x1230DB8")]
	[ContextMenu("Reset Ragdolls")]
	public void ResetRagdolls()
	{
	}

	[Token(Token = "0x6001F4B")]
	[Address(RVA = "0x1231338", Offset = "0x1231338", VA = "0x1231338")]
	[IteratorStateMachine(typeof(<ResetRagdollsAsync>d__15))]
	private IEnumerator ResetRagdollsAsync()
	{
		return null;
	}

	[Token(Token = "0x6001F4C")]
	[Address(RVA = "0x12313D4", Offset = "0x12313D4", VA = "0x12313D4")]
	public RagdollTester()
	{
	}
}
[Token(Token = "0x2000551")]
[CreateAssetMenu(menuName = "RankSystem/Exp Config", fileName = "ExpConfig")]
public class MultiplayerExpConfig : ScriptableObject
{
	[Token(Token = "0x40019CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private List<AgentIdentifier> m_enemies;

	[Token(Token = "0x40019CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private List<int> m_experiencePoints;

	[Token(Token = "0x40019CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Bonuses")]
	private int m_headshotBonus;

	[Token(Token = "0x40019CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int m_deathPenalty;

	[Token(Token = "0x40019CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int m_waveBonus;

	[Token(Token = "0x40019D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_timeBonusMultiplier;

	[Token(Token = "0x40019D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float m_coopBonus;

	[Token(Token = "0x40019D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<AgentIdentifier, int> m_enemyExperienceRewardMapping;

	[Token(Token = "0x170004DB")]
	public int HeadshotBonus
	{
		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0x123200C", Offset = "0x123200C", VA = "0x123200C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004DC")]
	public int DeathPenalty
	{
		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0x1232014", Offset = "0x1232014", VA = "0x1232014")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004DD")]
	public int WaveBonus
	{
		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0x123201C", Offset = "0x123201C", VA = "0x123201C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004DE")]
	public float CoopBonus
	{
		[Token(Token = "0x6001F5F")]
		[Address(RVA = "0x1232024", Offset = "0x1232024", VA = "0x1232024")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004DF")]
	public float TimeBonusMultiplier
	{
		[Token(Token = "0x6001F60")]
		[Address(RVA = "0x123202C", Offset = "0x123202C", VA = "0x123202C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004E0")]
	public Dictionary<AgentIdentifier, int> EnemyExperienceRewardMapping
	{
		[Token(Token = "0x6001F61")]
		[Address(RVA = "0x1232034", Offset = "0x1232034", VA = "0x1232034")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001F62")]
	[Address(RVA = "0x123218C", Offset = "0x123218C", VA = "0x123218C")]
	public MultiplayerExpConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000552")]
public class Rank : IDataSource
{
	[Token(Token = "0x40019D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private string m_title;

	[Token(Token = "0x40019D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Sprite m_icon;

	[Token(Token = "0x40019D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int m_rankLevel;

	[Token(Token = "0x40019D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int m_totalEXPRequired;

	[Token(Token = "0x40019D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PerkList m_Perk;

	[Token(Token = "0x40019D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int m_perkLevel;

	[Token(Token = "0x40019D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_perkValue;

	[Token(Token = "0x40019DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string m_perkName;

	[Token(Token = "0x40019DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_perkDescription;

	[Token(Token = "0x40019DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Action m_onUnlocked;

	[Token(Token = "0x40019DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action OnUnlocked;

	[Token(Token = "0x40019DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnRankUnlocked;

	[Token(Token = "0x40019DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_locked;

	[Token(Token = "0x170004E1")]
	public string Title
	{
		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x1232284", Offset = "0x1232284", VA = "0x1232284")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004E2")]
	public int rankLevel
	{
		[Token(Token = "0x6001F64")]
		[Address(RVA = "0x123228C", Offset = "0x123228C", VA = "0x123228C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001F65")]
		[Address(RVA = "0x1232294", Offset = "0x1232294", VA = "0x1232294")]
		set
		{
		}
	}

	[Token(Token = "0x170004E3")]
	public int TotalExpRequired
	{
		[Token(Token = "0x6001F66")]
		[Address(RVA = "0x123229C", Offset = "0x123229C", VA = "0x123229C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001F67")]
		[Address(RVA = "0x12322A4", Offset = "0x12322A4", VA = "0x12322A4")]
		set
		{
		}
	}

	[Token(Token = "0x170004E4")]
	public Sprite Icon
	{
		[Token(Token = "0x6001F68")]
		[Address(RVA = "0x12322AC", Offset = "0x12322AC", VA = "0x12322AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004E5")]
	public PerkList Perk
	{
		[Token(Token = "0x6001F69")]
		[Address(RVA = "0x12322B4", Offset = "0x12322B4", VA = "0x12322B4")]
		get
		{
			return default(PerkList);
		}
	}

	[Token(Token = "0x170004E6")]
	public int perkLevel
	{
		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0x12322BC", Offset = "0x12322BC", VA = "0x12322BC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004E7")]
	public float perkValue
	{
		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0x12322C4", Offset = "0x12322C4", VA = "0x12322C4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0x12322CC", Offset = "0x12322CC", VA = "0x12322CC")]
		set
		{
		}
	}

	[Token(Token = "0x170004E8")]
	public string perkName
	{
		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0x12322D4", Offset = "0x12322D4", VA = "0x12322D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x12322DC", Offset = "0x12322DC", VA = "0x12322DC")]
		set
		{
		}
	}

	[Token(Token = "0x170004E9")]
	public string perkDescription
	{
		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0x12322E4", Offset = "0x12322E4", VA = "0x12322E4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x12322EC", Offset = "0x12322EC", VA = "0x12322EC")]
		set
		{
		}
	}

	[Token(Token = "0x170004EA")]
	public bool locked
	{
		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x12322F4", Offset = "0x12322F4", VA = "0x12322F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001F72")]
		[Address(RVA = "0x12322FC", Offset = "0x12322FC", VA = "0x12322FC")]
		set
		{
		}
	}

	[Token(Token = "0x170004EB")]
	public bool unLocked
	{
		[Token(Token = "0x6001F73")]
		[Address(RVA = "0x12323D8", Offset = "0x12323D8", VA = "0x12323D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001F74")]
		[Address(RVA = "0x12323E8", Offset = "0x12323E8", VA = "0x12323E8")]
		set
		{
		}
	}

	[Token(Token = "0x6001F75")]
	[Address(RVA = "0x12323F4", Offset = "0x12323F4", VA = "0x12323F4")]
	public void Unlock()
	{
	}

	[Token(Token = "0x6001F76")]
	[Address(RVA = "0x1232480", Offset = "0x1232480", VA = "0x1232480")]
	public Rank()
	{
	}
}
[Serializable]
[Token(Token = "0x2000553")]
[CreateAssetMenu(menuName = "RankSystem/Rank Config", fileName = "RankConfig")]
public class RankConfig : ScriptableObject, IDataSource
{
	[Token(Token = "0x40019E0")]
	private const string c_rankAssetPath = "Assets/Data/RankSystem/";

	[Token(Token = "0x40019E1")]
	private const string c_assetFileEnding = ".asset";

	[Token(Token = "0x40019E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<Rank> m_availableRanks;

	[Token(Token = "0x40019E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_indexOfFirstUnlockableRank;

	[Token(Token = "0x170004EC")]
	public List<Rank> AvailableRanks
	{
		[Token(Token = "0x6001F77")]
		[Address(RVA = "0x1232488", Offset = "0x1232488", VA = "0x1232488")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001F78")]
		[Address(RVA = "0x1232490", Offset = "0x1232490", VA = "0x1232490")]
		set
		{
		}
	}

	[Token(Token = "0x170004ED")]
	public List<Rank> UnlockableRanks
	{
		[Token(Token = "0x6001F79")]
		[Address(RVA = "0x1232498", Offset = "0x1232498", VA = "0x1232498")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004EE")]
	public Rank lastRank
	{
		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0x1232500", Offset = "0x1232500", VA = "0x1232500")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004EF")]
	public int maximumXp
	{
		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0x1232564", Offset = "0x1232564", VA = "0x1232564")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004F0")]
	public int MaxRankIndex
	{
		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0x1232580", Offset = "0x1232580", VA = "0x1232580")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001F7D")]
	[Address(RVA = "0x12325CC", Offset = "0x12325CC", VA = "0x12325CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001F7E")]
	[Address(RVA = "0x1232654", Offset = "0x1232654", VA = "0x1232654")]
	public Rank RankForLevel(int level)
	{
		return null;
	}

	[Token(Token = "0x6001F7F")]
	[Address(RVA = "0x12326BC", Offset = "0x12326BC", VA = "0x12326BC")]
	public Rank NextRank(int currentRank)
	{
		return null;
	}

	[Token(Token = "0x6001F80")]
	[Address(RVA = "0x12326C4", Offset = "0x12326C4", VA = "0x12326C4")]
	public int GetRankIndexForExpAmount(int currentExperience)
	{
		return default(int);
	}

	[Token(Token = "0x6001F81")]
	[Address(RVA = "0x1232798", Offset = "0x1232798", VA = "0x1232798")]
	public Rank GetRankForExpAmount(int exp)
	{
		return null;
	}

	[Token(Token = "0x6001F82")]
	[Address(RVA = "0x1232818", Offset = "0x1232818", VA = "0x1232818")]
	public float GetNormalizedExp(int xp)
	{
		return default(float);
	}

	[Token(Token = "0x6001F83")]
	[Address(RVA = "0x1232844", Offset = "0x1232844", VA = "0x1232844")]
	public float GetTransformedNormalizeExp(int xp)
	{
		return default(float);
	}

	[Token(Token = "0x6001F84")]
	[Address(RVA = "0x1232990", Offset = "0x1232990", VA = "0x1232990")]
	public void LockRanksBelow(int rank)
	{
	}

	[Token(Token = "0x6001F85")]
	[Address(RVA = "0x1232A2C", Offset = "0x1232A2C", VA = "0x1232A2C")]
	public RankConfig()
	{
	}
}
[Token(Token = "0x2000554")]
public class RankingManager : CachedMonoBehaviour
{
	[Token(Token = "0x40019E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MetaUIViewModel m_metaUIViewModel;

	[Token(Token = "0x40019E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RankConfig m_rankConfig;

	[Token(Token = "0x40019E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ScorePoints m_expConfig;

	[Token(Token = "0x40019E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private int m_debugWeaponXPIncrease;

	[Token(Token = "0x40019E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private int m_debugPlayerXPIncrease;

	[Token(Token = "0x40019E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<Rank> OnPlayerGainRank;

	[Token(Token = "0x40019EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<Identifier, int> OnWeaponGainRank;

	[Token(Token = "0x40019EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int m_currentTotalExperience;

	[Token(Token = "0x40019EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float m_currentTotalGametime;

	[Token(Token = "0x40019ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_currentRankIndex;

	[Token(Token = "0x40019EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static RankingManager s_instance;

	[Token(Token = "0x40019EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Dictionary<PerkList, Rank> m_highestPerks;

	[Token(Token = "0x40019F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_xpOnStart;

	[Token(Token = "0x40019F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool m_usePerks;

	[Token(Token = "0x40019F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float m_playerXPScaler;

	[Token(Token = "0x40019F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_gunXPScaler;

	[Token(Token = "0x170004F1")]
	public MetaUIViewModel metaUIViewModel
	{
		[Token(Token = "0x6001F86")]
		[Address(RVA = "0x1232ABC", Offset = "0x1232ABC", VA = "0x1232ABC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004F2")]
	public RankConfig rankConfig
	{
		[Token(Token = "0x6001F87")]
		[Address(RVA = "0x1232AC4", Offset = "0x1232AC4", VA = "0x1232AC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004F3")]
	public int CurrentRankIndex
	{
		[Token(Token = "0x6001F88")]
		[Address(RVA = "0x1232ACC", Offset = "0x1232ACC", VA = "0x1232ACC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004F4")]
	public float CurrentTotalGametime
	{
		[Token(Token = "0x6001F89")]
		[Address(RVA = "0x1232AD4", Offset = "0x1232AD4", VA = "0x1232AD4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004F5")]
	public int NextRankIndex
	{
		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0x1232ADC", Offset = "0x1232ADC", VA = "0x1232ADC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004F6")]
	public int MaxRankIndex
	{
		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0x1232AE8", Offset = "0x1232AE8", VA = "0x1232AE8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004F7")]
	public int CurrentTotalExperience
	{
		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0x1232B3C", Offset = "0x1232B3C", VA = "0x1232B3C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0x1232B44", Offset = "0x1232B44", VA = "0x1232B44")]
		set
		{
		}
	}

	[Token(Token = "0x170004F8")]
	public int NextRankTotalExperience
	{
		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0x1232B4C", Offset = "0x1232B4C", VA = "0x1232B4C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004F9")]
	public Rank MaxRank
	{
		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0x1232B8C", Offset = "0x1232B8C", VA = "0x1232B8C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004FA")]
	public Rank CurrentRank
	{
		[Token(Token = "0x6001F90")]
		[Address(RVA = "0x1232BF4", Offset = "0x1232BF4", VA = "0x1232BF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004FB")]
	public Rank NextRank
	{
		[Token(Token = "0x6001F91")]
		[Address(RVA = "0x1232B68", Offset = "0x1232B68", VA = "0x1232B68")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170004FC")]
	public float NormalizedProgressToNextRank
	{
		[Token(Token = "0x6001F92")]
		[Address(RVA = "0x1232C50", Offset = "0x1232C50", VA = "0x1232C50")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170004FD")]
	public int ExperienceToNextLevel
	{
		[Token(Token = "0x6001F93")]
		[Address(RVA = "0x1232CB8", Offset = "0x1232CB8", VA = "0x1232CB8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170004FE")]
	public static RankingManager Instance
	{
		[Token(Token = "0x6001F94")]
		[Address(RVA = "0x1232CE0", Offset = "0x1232CE0", VA = "0x1232CE0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001F95")]
	[Address(RVA = "0x1232D28", Offset = "0x1232D28", VA = "0x1232D28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001F96")]
	[Address(RVA = "0x1232EF8", Offset = "0x1232EF8", VA = "0x1232EF8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001F97")]
	[Address(RVA = "0x12330B0", Offset = "0x12330B0", VA = "0x12330B0")]
	public void Initialize(ExpData xpData)
	{
	}

	[Token(Token = "0x6001F98")]
	[Address(RVA = "0x12336BC", Offset = "0x12336BC", VA = "0x12336BC")]
	public bool XpWasAlreadyAdded()
	{
		return default(bool);
	}

	[Token(Token = "0x6001F99")]
	[Address(RVA = "0x12336D0", Offset = "0x12336D0", VA = "0x12336D0")]
	private void OverrideRanks_RemoteConfig(RemoteRankData data)
	{
	}

	[Token(Token = "0x6001F9A")]
	[Address(RVA = "0x1233704", Offset = "0x1233704", VA = "0x1233704")]
	private void OverridePlayerRankXP_RemoteConfig(Dictionary<string, int> remotes)
	{
	}

	[Token(Token = "0x6001F9B")]
	[Address(RVA = "0x1233A84", Offset = "0x1233A84", VA = "0x1233A84")]
	private void OverrideWeaponRankXP_RemoteConfig(Dictionary<string, RemoteRankData.RemoteWeaponRankData[]> remotes)
	{
	}

	[Token(Token = "0x6001F9C")]
	[Address(RVA = "0x12333CC", Offset = "0x12333CC", VA = "0x12333CC")]
	public void LockRanks()
	{
	}

	[Token(Token = "0x6001F9D")]
	[Address(RVA = "0x1233FCC", Offset = "0x1233FCC", VA = "0x1233FCC")]
	private float NextRankUnlock()
	{
		return default(float);
	}

	[Token(Token = "0x6001F9E")]
	[Address(RVA = "0x123406C", Offset = "0x123406C", VA = "0x123406C")]
	public void AddPlayerExp(int amount)
	{
	}

	[Token(Token = "0x6001F9F")]
	[Address(RVA = "0x12341F8", Offset = "0x12341F8", VA = "0x12341F8")]
	public void AddPlayerGametime(float runTime)
	{
	}

	[Token(Token = "0x6001FA0")]
	[Address(RVA = "0x12336B4", Offset = "0x12336B4", VA = "0x12336B4")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x6001FA1")]
	[Address(RVA = "0x1234208", Offset = "0x1234208", VA = "0x1234208")]
	private void UpdateUI(int currentXp)
	{
	}

	[Token(Token = "0x6001FA2")]
	[Address(RVA = "0x1222084", Offset = "0x1222084", VA = "0x1222084")]
	public WeaponConfig GetWeaponConfig(Identifier ID)
	{
		return null;
	}

	[Token(Token = "0x6001FA3")]
	[Address(RVA = "0x1233404", Offset = "0x1233404", VA = "0x1233404")]
	public WeaponConfig GetWeaponConfig(string name)
	{
		return null;
	}

	[Token(Token = "0x6001FA4")]
	[Address(RVA = "0x12342A8", Offset = "0x12342A8", VA = "0x12342A8")]
	public void AddWeaponExp(int amount, Identifier ID)
	{
	}

	[Token(Token = "0x6001FA5")]
	[Address(RVA = "0x1234488", Offset = "0x1234488", VA = "0x1234488")]
	private void Update()
	{
	}

	[Token(Token = "0x6001FA6")]
	[Address(RVA = "0x123448C", Offset = "0x123448C", VA = "0x123448C")]
	public void SetDifficultyOptions(bool perksDisabled, bool unleveledWeapons, float playerXpScaler, float gunXpScaler)
	{
	}

	[Token(Token = "0x6001FA7")]
	[Address(RVA = "0x123467C", Offset = "0x123467C", VA = "0x123467C")]
	public void ApplyPerks()
	{
	}

	[Token(Token = "0x6001FA8")]
	[Address(RVA = "0x1234B54", Offset = "0x1234B54", VA = "0x1234B54")]
	private void ApplyPerk(PerkList Perk, Rank rank)
	{
	}

	[Token(Token = "0x6001FA9")]
	[Address(RVA = "0x1234E90", Offset = "0x1234E90", VA = "0x1234E90")]
	public float GetPerkValue(PerkList Perk)
	{
		return default(float);
	}

	[Token(Token = "0x6001FAA")]
	[Address(RVA = "0x1234F18", Offset = "0x1234F18", VA = "0x1234F18")]
	public bool GetPerk(PerkList Perk)
	{
		return default(bool);
	}

	[Token(Token = "0x6001FAB")]
	[Address(RVA = "0x1234F88", Offset = "0x1234F88", VA = "0x1234F88")]
	public void RemovePerk(PerkList Perk)
	{
	}

	[Token(Token = "0x6001FAC")]
	[Address(RVA = "0x1234FE8", Offset = "0x1234FE8", VA = "0x1234FE8")]
	public void RemoveAllPerks()
	{
	}

	[Token(Token = "0x6001FAD")]
	[Address(RVA = "0x12352E8", Offset = "0x12352E8", VA = "0x12352E8")]
	public string GetPerkList()
	{
		return null;
	}

	[Token(Token = "0x6001FAE")]
	[Address(RVA = "0x1235560", Offset = "0x1235560", VA = "0x1235560")]
	public void ResetXP()
	{
	}

	[Token(Token = "0x6001FAF")]
	[Address(RVA = "0x123558C", Offset = "0x123558C", VA = "0x123558C")]
	public void IncressWeaponXP()
	{
	}

	[Token(Token = "0x6001FB0")]
	[Address(RVA = "0x1235668", Offset = "0x1235668", VA = "0x1235668")]
	public RankingManager()
	{
	}
}
[Token(Token = "0x2000559")]
public enum PerkList
{
	[Token(Token = "0x40019FA")]
	Health = 1,
	[Token(Token = "0x40019FB")]
	HealthRegenPercentage = 2,
	[Token(Token = "0x40019FC")]
	Resistance = 3,
	[Token(Token = "0x40019FD")]
	DropRate = 21,
	[Token(Token = "0x40019FE")]
	AmmoVacuum = 50,
	[Token(Token = "0x40019FF")]
	HeathFood = 51,
	[Token(Token = "0x4001A00")]
	GenerousDrops = 52,
	[Token(Token = "0x4001A01")]
	DeepPockets = 53,
	[Token(Token = "0x4001A02")]
	Unlocksmith = 54,
	[Token(Token = "0x4001A03")]
	ThickSkin = 55,
	[Token(Token = "0x4001A04")]
	QuickHealer = 56,
	[Token(Token = "0x4001A05")]
	RapidBurst = 57,
	[Token(Token = "0x4001A06")]
	Rebound = 58,
	[Token(Token = "0x4001A07")]
	VipDiscount = 59,
	[Token(Token = "0x4001A08")]
	IronJaw = 60,
	[Token(Token = "0x4001A09")]
	Marathon = 61,
	[Token(Token = "0x4001A0A")]
	PunchingBag = 62,
	[Token(Token = "0x4001A0B")]
	GoldenRevolver = 63
}
[Token(Token = "0x200055A")]
public class UI_MultiplayerRank : MonoBehaviour
{
	[Token(Token = "0x4001A0C")]
	private const string c_currentRankTextLocId = "STR_HORDE_UI_HUB_RANK_DISPLAY_CURRENT_RANK_TITLE";

	[Token(Token = "0x4001A0D")]
	private const string c_totalExperienceLocId = "STR_HORDE_UI_HUB_RANK_DISPLAY_TOTAL_EXPERIENCE";

	[Token(Token = "0x4001A0E")]
	private const string c_experienceToNextLevelLocId = "STR_HORDE_UI_HUB_RANK_DISPLAY_NEXT_RANK_EXPERIENCE";

	[Token(Token = "0x4001A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Image m_rankIcon;

	[Token(Token = "0x4001A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_rankName;

	[Token(Token = "0x4001A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_totalExperiencePoints;

	[Token(Token = "0x4001A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_experiencePointsToNextLevel;

	[Token(Token = "0x4001A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image m_rankFillbar;

	[Token(Token = "0x6001FBA")]
	[Address(RVA = "0x12357E8", Offset = "0x12357E8", VA = "0x12357E8")]
	public void UpdateUI()
	{
	}

	[Token(Token = "0x6001FBB")]
	[Address(RVA = "0x1235BAC", Offset = "0x1235BAC", VA = "0x1235BAC")]
	public UI_MultiplayerRank()
	{
	}
}
[Token(Token = "0x200055B")]
[CreateAssetMenu(menuName = "RankSystem/Weapon Rank Config", fileName = "WeaponConfig")]
public class WeaponConfig : Identifier, IDataSource
{
	[Token(Token = "0x4001A14")]
	private const string c_rankAssetPath = "Assets/Data/RankSystem/";

	[Token(Token = "0x4001A15")]
	private const string c_assetFileEnding = ".asset";

	[Token(Token = "0x4001A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DamageType m_weaponDamageType;

	[Token(Token = "0x4001A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string m_weaponName;

	[Token(Token = "0x4001A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Sprite m_icon;

	[Token(Token = "0x4001A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Sprite m_detailedIcon;

	[Token(Token = "0x4001A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_baseWeaponDamage;

	[Token(Token = "0x4001A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float m_baseRecoilReduction;

	[Token(Token = "0x4001A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float m_baseBulletPenetration;

	[Token(Token = "0x4001A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private int m_baseMagazineCapacity;

	[Token(Token = "0x4001A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float m_baseDurability;

	[Token(Token = "0x4001A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private int m_baseProjectiles;

	[Token(Token = "0x4001A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private int m_baseRangeEffectiveness;

	[Token(Token = "0x4001A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private bool m_isGun;

	[Token(Token = "0x4001A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_currentWeaponDamage;

	[Token(Token = "0x4001A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float m_currentRecoilReduction;

	[Token(Token = "0x4001A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_currentBulletPenetration;

	[Token(Token = "0x4001A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int m_currentMagazineCapacity;

	[Token(Token = "0x4001A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int m_currentRangeEffectiveness;

	[Token(Token = "0x4001A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_currentDurability;

	[Token(Token = "0x4001A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_laserModule;

	[Token(Token = "0x4001A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int m_currentProjectiles;

	[Token(Token = "0x4001A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int m_rankOverride;

	[Token(Token = "0x4001A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool m_useRankOverride;

	[Token(Token = "0x4001A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	[SerializeField]
	private List<WeaponRank> m_availableRanks;

	[NonSerialized]
	[Token(Token = "0x4001A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private MetaUIViewModel m_metaUIViewModel;

	[Token(Token = "0x4001A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int m_initialWeaponXP;

	[Token(Token = "0x4001A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int m_currentweaponXP;

	[Token(Token = "0x170004FF")]
	public IReadOnlyList<WeaponRank> AvailableRanks
	{
		[Token(Token = "0x6001FBC")]
		[Address(RVA = "0x1235BB4", Offset = "0x1235BB4", VA = "0x1235BB4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000500")]
	public string WeaponName
	{
		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0x1235BBC", Offset = "0x1235BBC", VA = "0x1235BBC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000501")]
	public Sprite CurrentIcon
	{
		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0x1235BC4", Offset = "0x1235BC4", VA = "0x1235BC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000502")]
	public Sprite DetailedIcon
	{
		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0x1235C80", Offset = "0x1235C80", VA = "0x1235C80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000503")]
	public float BaseWeaponDamage
	{
		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0x1235C88", Offset = "0x1235C88", VA = "0x1235C88")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0x1235C90", Offset = "0x1235C90", VA = "0x1235C90")]
		set
		{
		}
	}

	[Token(Token = "0x17000504")]
	public float BaseRecoilReduction
	{
		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0x1235C98", Offset = "0x1235C98", VA = "0x1235C98")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0x1235CA0", Offset = "0x1235CA0", VA = "0x1235CA0")]
		set
		{
		}
	}

	[Token(Token = "0x17000505")]
	public float BaseBulletPenetration
	{
		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0x1235CA8", Offset = "0x1235CA8", VA = "0x1235CA8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0x1235CB0", Offset = "0x1235CB0", VA = "0x1235CB0")]
		set
		{
		}
	}

	[Token(Token = "0x17000506")]
	public int BaseMagazineCapacity
	{
		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0x1235CB8", Offset = "0x1235CB8", VA = "0x1235CB8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0x1235CC0", Offset = "0x1235CC0", VA = "0x1235CC0")]
		set
		{
		}
	}

	[Token(Token = "0x17000507")]
	public float BaseDurability
	{
		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0x1235CC8", Offset = "0x1235CC8", VA = "0x1235CC8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0x1235CD0", Offset = "0x1235CD0", VA = "0x1235CD0")]
		set
		{
		}
	}

	[Token(Token = "0x17000508")]
	public int BaseProjectiles
	{
		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0x1235CD8", Offset = "0x1235CD8", VA = "0x1235CD8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0x1235CE0", Offset = "0x1235CE0", VA = "0x1235CE0")]
		set
		{
		}
	}

	[Token(Token = "0x17000509")]
	public int BaseRangeEffectiveness
	{
		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0x1235CE8", Offset = "0x1235CE8", VA = "0x1235CE8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0x1235CF0", Offset = "0x1235CF0", VA = "0x1235CF0")]
		set
		{
		}
	}

	[Token(Token = "0x1700050A")]
	public float CurrentWeaponDamage
	{
		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0x1235CF8", Offset = "0x1235CF8", VA = "0x1235CF8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0x1235D00", Offset = "0x1235D00", VA = "0x1235D00")]
		set
		{
		}
	}

	[Token(Token = "0x1700050B")]
	public float CurrentRecoilReduction
	{
		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0x1235D08", Offset = "0x1235D08", VA = "0x1235D08")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0x1235D10", Offset = "0x1235D10", VA = "0x1235D10")]
		set
		{
		}
	}

	[Token(Token = "0x1700050C")]
	public float CurrentBulletPenetration
	{
		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0x1235D18", Offset = "0x1235D18", VA = "0x1235D18")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0x1235D20", Offset = "0x1235D20", VA = "0x1235D20")]
		set
		{
		}
	}

	[Token(Token = "0x1700050D")]
	public int CurrentMagazineCapacity
	{
		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0x1235D28", Offset = "0x1235D28", VA = "0x1235D28")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0x1235D30", Offset = "0x1235D30", VA = "0x1235D30")]
		set
		{
		}
	}

	[Token(Token = "0x1700050E")]
	public float CurrentDurability
	{
		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0x1235D38", Offset = "0x1235D38", VA = "0x1235D38")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0x1235D40", Offset = "0x1235D40", VA = "0x1235D40")]
		set
		{
		}
	}

	[Token(Token = "0x1700050F")]
	public bool CurrentLaserModule
	{
		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0x1235D48", Offset = "0x1235D48", VA = "0x1235D48")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0x1235D50", Offset = "0x1235D50", VA = "0x1235D50")]
		set
		{
		}
	}

	[Token(Token = "0x17000510")]
	public bool IsGun
	{
		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0x1235D5C", Offset = "0x1235D5C", VA = "0x1235D5C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0x1235D64", Offset = "0x1235D64", VA = "0x1235D64")]
		set
		{
		}
	}

	[Token(Token = "0x17000511")]
	public int CurrentProjectiles
	{
		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0x1235D70", Offset = "0x1235D70", VA = "0x1235D70")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0x1235D78", Offset = "0x1235D78", VA = "0x1235D78")]
		set
		{
		}
	}

	[Token(Token = "0x17000512")]
	public int CurrentRangeEffectiveness
	{
		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0x1235D80", Offset = "0x1235D80", VA = "0x1235D80")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0x1235D88", Offset = "0x1235D88", VA = "0x1235D88")]
		set
		{
		}
	}

	[Token(Token = "0x17000513")]
	public DamageType damageType
	{
		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0x1235D90", Offset = "0x1235D90", VA = "0x1235D90")]
		get
		{
			return default(DamageType);
		}
		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0x1235D98", Offset = "0x1235D98", VA = "0x1235D98")]
		set
		{
		}
	}

	[Token(Token = "0x17000514")]
	public int initialWeaponXP
	{
		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0x1235DA0", Offset = "0x1235DA0", VA = "0x1235DA0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0x1235DA8", Offset = "0x1235DA8", VA = "0x1235DA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000515")]
	public int currentWeaponXP
	{
		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0x1235DB0", Offset = "0x1235DB0", VA = "0x1235DB0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0x123350C", Offset = "0x123350C", VA = "0x123350C")]
		set
		{
		}
	}

	[Token(Token = "0x17000516")]
	public int currentRankLevel
	{
		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0x1234480", Offset = "0x1234480", VA = "0x1234480")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000517")]
	public int initialRankLevel
	{
		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0x123627C", Offset = "0x123627C", VA = "0x123627C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000518")]
	public WeaponRank InitialRank
	{
		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0x1236284", Offset = "0x1236284", VA = "0x1236284")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000519")]
	public WeaponRank CurrentRank
	{
		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0x1235BFC", Offset = "0x1235BFC", VA = "0x1235BFC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700051A")]
	public WeaponRank NextRank
	{
		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0x12363C0", Offset = "0x12363C0", VA = "0x12363C0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700051B")]
	public float nextRankUnlockProgress
	{
		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0x1235DB8", Offset = "0x1235DB8", VA = "0x1235DB8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700051C")]
	public string xpProgressionText
	{
		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0x1235E78", Offset = "0x1235E78", VA = "0x1235E78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700051D")]
	public int maxLevel
	{
		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0x1236490", Offset = "0x1236490", VA = "0x1236490")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001FEA")]
	[Address(RVA = "0x1234608", Offset = "0x1234608", VA = "0x1234608")]
	public void SetRankOverride(bool active, int rank = 0)
	{
	}

	[Token(Token = "0x6001FEB")]
	[Address(RVA = "0x1233D2C", Offset = "0x1233D2C", VA = "0x1233D2C")]
	public void SetRanksFromRemote(RemoteRankData.RemoteWeaponRankData[] data)
	{
	}

	[Token(Token = "0x6001FED")]
	[Address(RVA = "0x12364DC", Offset = "0x12364DC", VA = "0x12364DC")]
	public float GetTransformedNormalizeExp(int xp)
	{
		return default(float);
	}

	[Token(Token = "0x6001FF0")]
	[Address(RVA = "0x12361D8", Offset = "0x12361D8", VA = "0x12361D8")]
	public int GetRankForExpAmount(int currentExperience)
	{
		return default(int);
	}

	[Token(Token = "0x6001FF1")]
	[Address(RVA = "0x1236618", Offset = "0x1236618", VA = "0x1236618")]
	public int GetRankExperienceAmountForExpAmount(int currentExperience)
	{
		return default(int);
	}

	[Token(Token = "0x6001FF2")]
	[Address(RVA = "0x12366D0", Offset = "0x12366D0", VA = "0x12366D0")]
	public WeaponRank GetNextRankByXp(int currentExperience)
	{
		return null;
	}

	[Token(Token = "0x6001FF4")]
	[Address(RVA = "0x1236794", Offset = "0x1236794", VA = "0x1236794", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001FF5")]
	[Address(RVA = "0x1235F58", Offset = "0x1235F58", VA = "0x1235F58")]
	private void CalculateCurrentStats()
	{
	}

	[Token(Token = "0x6001FF6")]
	[Address(RVA = "0x12367B0", Offset = "0x12367B0", VA = "0x12367B0")]
	public WeaponConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x200055D")]
public class WeaponRank : IDataSource
{
	[Serializable]
	[Token(Token = "0x200055E")]
	public enum ImprovementType
	{
		[Token(Token = "0x4001A37")]
		Empty,
		[Token(Token = "0x4001A38")]
		WeaponDamage,
		[Token(Token = "0x4001A39")]
		RecoilReduction,
		[Token(Token = "0x4001A3A")]
		BulletPenetration,
		[Token(Token = "0x4001A3B")]
		MagazineCapacity,
		[Token(Token = "0x4001A3C")]
		Durability,
		[Token(Token = "0x4001A3D")]
		LaserModule,
		[Token(Token = "0x4001A3E")]
		RangeEffectiveness,
		[Token(Token = "0x4001A3F")]
		ProjectileCount
	}

	[Serializable]
	[Token(Token = "0x200055F")]
	public class ImprovementDefinition
	{
		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ImprovementType ImprovementType;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[DontSerialize]
		public Type ValueType;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FloatValue;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int IntValue;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool BoolValue;

		[Token(Token = "0x17000521")]
		[DontSerialize]
		public string NameID
		{
			[Token(Token = "0x6001FFF")]
			[Address(RVA = "0x1236B28", Offset = "0x1236B28", VA = "0x1236B28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0x12368C8", Offset = "0x12368C8", VA = "0x12368C8")]
		public ImprovementDefinition()
		{
		}
	}

	[Token(Token = "0x4001A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private Sprite m_icon;

	[Token(Token = "0x4001A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int m_totalEXPRequired;

	[Token(Token = "0x4001A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ImprovementDefinition m_Improvement;

	[Token(Token = "0x4001A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Dictionary<ImprovementType, Type> ImprovementTypeValues;

	[Token(Token = "0x1700051E")]
	public int TotalExpRequired
	{
		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0x12368D0", Offset = "0x12368D0", VA = "0x12368D0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700051F")]
	public Sprite Icon
	{
		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0x12368D8", Offset = "0x12368D8", VA = "0x12368D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000520")]
	public ImprovementDefinition Improvement
	{
		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0x12368E0", Offset = "0x12368E0", VA = "0x12368E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001FFA")]
	[Address(RVA = "0x1236308", Offset = "0x1236308", VA = "0x1236308")]
	public WeaponRank(Sprite icon, int expRequired, ImprovementDefinition improvement)
	{
	}
}
[Token(Token = "0x2000560")]
public enum MultiplayerLockOutReason
{
	[Token(Token = "0x4001A46")]
	None,
	[Token(Token = "0x4001A47")]
	VersionMisMatch
}
[Token(Token = "0x2000561")]
public class RemoteConfiguration : SceneSingleton<RemoteConfiguration>
{
	[Token(Token = "0x4001A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly string m_remoteDataKey;

	[Token(Token = "0x4001A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly string m_remoteDifficultyKey;

	[Token(Token = "0x4001A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly string m_remoteRankKey;

	[Token(Token = "0x4001A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Binary Version Data")]
	private int m_buildMultiplayerVersionOculus;

	[Token(Token = "0x4001A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private int m_buildMultiplayerVersionPico;

	[Token(Token = "0x4001A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("Set default remote values for this build")]
	public RemoteData m_retrievedData;

	[Token(Token = "0x4001A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public RemoteDifficulty m_retrievedDifficulty;

	[Token(Token = "0x4001A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public RemoteRankData m_retrievedRanks;

	[Token(Token = "0x4001A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private bool m_editorIgnoreRemotes;

	[Token(Token = "0x4001A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnRemoteDataProcessed;

	[Token(Token = "0x4001A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<RemoteDifficulty> OnRemoteDifficultyProcessed;

	[Token(Token = "0x4001A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action<RemoteRankData> OnRemoteRankProcessed;

	[Token(Token = "0x17000522")]
	public MultiplayerLockOutReason MultiplayerLockOutReason
	{
		[Token(Token = "0x6002001")]
		[Address(RVA = "0x1236BC8", Offset = "0x1236BC8", VA = "0x1236BC8")]
		get
		{
			return default(MultiplayerLockOutReason);
		}
	}

	[Token(Token = "0x17000523")]
	public int BuildMultiplayerVersion
	{
		[Token(Token = "0x6002002")]
		[Address(RVA = "0x1236C20", Offset = "0x1236C20", VA = "0x1236C20")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000524")]
	public string GameName
	{
		[Token(Token = "0x6002003")]
		[Address(RVA = "0x1236C28", Offset = "0x1236C28", VA = "0x1236C28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000525")]
	public bool AllowMultiplayer
	{
		[Token(Token = "0x6002004")]
		[Address(RVA = "0x1236C44", Offset = "0x1236C44", VA = "0x1236C44")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000526")]
	public ServerMatchingRule P2PServerMatchingRule
	{
		[Token(Token = "0x6002005")]
		[Address(RVA = "0x1236C04", Offset = "0x1236C04", VA = "0x1236C04")]
		get
		{
			return default(ServerMatchingRule);
		}
	}

	[Token(Token = "0x17000527")]
	public Dictionary<string, int> FocalPointWeights
	{
		[Token(Token = "0x6002006")]
		[Address(RVA = "0x1236C60", Offset = "0x1236C60", VA = "0x1236C60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002007")]
	[Address(RVA = "0x1236C7C", Offset = "0x1236C7C", VA = "0x1236C7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002008")]
	[Address(RVA = "0x1237308", Offset = "0x1237308", VA = "0x1237308")]
	public void RefreshRemoteSettings()
	{
	}

	[Token(Token = "0x6002009")]
	[Address(RVA = "0x1236E9C", Offset = "0x1236E9C", VA = "0x1236E9C")]
	private void ApplyRemoteSettings()
	{
	}

	[Token(Token = "0x600200A")]
	[Address(RVA = "0x12373B0", Offset = "0x12373B0", VA = "0x12373B0")]
	public RemoteConfiguration()
	{
	}
}
[Token(Token = "0x2000562")]
[Flags]
public enum ServerMatchingRule
{
	[Token(Token = "0x4001A55")]
	None = 0,
	[Token(Token = "0x4001A56")]
	BuildCommit = 1,
	[Token(Token = "0x4001A57")]
	MultiplayerVersion = 2,
	[Token(Token = "0x4001A58")]
	AppVersion = 4,
	[Token(Token = "0x4001A59")]
	AllowCrossPlay = 8,
	[Token(Token = "0x4001A5A")]
	DisableMultiplayerButtons = 0x10
}
[Serializable]
[Token(Token = "0x2000563")]
public class RemoteData
{
	[Token(Token = "0x4001A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[UnityEngine.Tooltip("Game name, server game names must match this")]
	[Header("General")]
	public string GameName;

	[Token(Token = "0x4001A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool MultiplayerEnabled;

	[Token(Token = "0x4001A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Multiplayer Versioning")]
	public int MultiplayerVersionOculus;

	[Token(Token = "0x4001A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MultiplayerVersionPico;

	[Token(Token = "0x4001A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Enforce that players have the same multiplayer build version number.")]
	public ServerMatchingRule P2PServerMatchingRule;

	[Token(Token = "0x4001A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<string, int> FocalPointWeights;

	[Token(Token = "0x17000528")]
	[DontSerialize]
	public int MultiplayerVersion
	{
		[Token(Token = "0x600200B")]
		[Address(RVA = "0x123852C", Offset = "0x123852C", VA = "0x123852C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600200C")]
	[Address(RVA = "0x1238534", Offset = "0x1238534", VA = "0x1238534")]
	public RemoteData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000564")]
public class RemoteDifficulty
{
	[Token(Token = "0x4001A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int DefaultDifficultyLevel;

	[Token(Token = "0x4001A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<DifficultyLevel> DifficultyLevels;

	[Token(Token = "0x600200D")]
	[Address(RVA = "0x1238608", Offset = "0x1238608", VA = "0x1238608")]
	public RemoteDifficulty()
	{
	}
}
[Serializable]
[Token(Token = "0x2000565")]
public class RemoteRankData
{
	[Serializable]
	[Token(Token = "0x2000566")]
	public class RemoteWeaponRankData
	{
		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int TotalEXPRequired;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WeaponRank.ImprovementDefinition Improvement;

		[Token(Token = "0x600200F")]
		[Address(RVA = "0x1238768", Offset = "0x1238768", VA = "0x1238768")]
		public RemoteWeaponRankData()
		{
		}
	}

	[Token(Token = "0x4001A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Dictionary<string, int> PlayerRanks;

	[Token(Token = "0x4001A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<string, RemoteWeaponRankData[]> WeaponRanks;

	[Token(Token = "0x600200E")]
	[Address(RVA = "0x1238690", Offset = "0x1238690", VA = "0x1238690")]
	public RemoteRankData()
	{
	}
}
[Token(Token = "0x2000567")]
public interface ISerializableData
{
	[Token(Token = "0x6002010")]
	void LoadData();
}
[Token(Token = "0x2000568")]
public class SaveManager : CachedMonoBehaviour
{
	[Token(Token = "0x2000569")]
	public enum SaveGameState
	{
		[Token(Token = "0x4001A6E")]
		Empty,
		[Token(Token = "0x4001A6F")]
		HasProgress,
		[Token(Token = "0x4001A70")]
		CampaignComplete
	}

	[Token(Token = "0x4001A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private EventMessage m_onLoadAllMessage;

	[Token(Token = "0x4001A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<ISerializableData> m_serializableData;

	[Token(Token = "0x4001A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_loaded;

	[Token(Token = "0x4001A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool m_usePlayerPrefs;

	[Token(Token = "0x4001A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<SaveGameSlotInfo> m_saveSlotInfo;

	[Token(Token = "0x4001A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int m_activeSaveGameIndex;

	[Token(Token = "0x17000529")]
	public int ActiveSaveGameIndex
	{
		[Token(Token = "0x6002018")]
		[Address(RVA = "0x1238E2C", Offset = "0x1238E2C", VA = "0x1238E2C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6002019")]
		[Address(RVA = "0x1238E34", Offset = "0x1238E34", VA = "0x1238E34")]
		set
		{
		}
	}

	[Token(Token = "0x6002011")]
	[Address(RVA = "0x12387DC", Offset = "0x12387DC", VA = "0x12387DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002012")]
	[Address(RVA = "0x1238824", Offset = "0x1238824", VA = "0x1238824")]
	public void CreateSaveSystemAndSlots()
	{
	}

	[Token(Token = "0x6002013")]
	[Address(RVA = "0x123882C", Offset = "0x123882C", VA = "0x123882C")]
	public void CreateSaveSystemAndSlots(bool usePlayerPrefs)
	{
	}

	[Token(Token = "0x6002014")]
	[Address(RVA = "0x1238B10", Offset = "0x1238B10", VA = "0x1238B10")]
	public void AddSerializableData(ISerializableData data)
	{
	}

	[Token(Token = "0x6002015")]
	[Address(RVA = "0x1238BF8", Offset = "0x1238BF8", VA = "0x1238BF8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002016")]
	[Address(RVA = "0x1238C0C", Offset = "0x1238C0C", VA = "0x1238C0C")]
	public bool LoadData()
	{
		return default(bool);
	}

	[Token(Token = "0x6002017")]
	[Address(RVA = "0x1238E24", Offset = "0x1238E24", VA = "0x1238E24")]
	private void DeleteData()
	{
	}

	[Token(Token = "0x600201A")]
	[Address(RVA = "0x12388E0", Offset = "0x12388E0", VA = "0x12388E0")]
	private void InitialiseSaveSlotInfo()
	{
	}

	[Token(Token = "0x600201B")]
	[Address(RVA = "0x1238E44", Offset = "0x1238E44", VA = "0x1238E44")]
	public bool IsFirstBoot()
	{
		return default(bool);
	}

	[Token(Token = "0x600201C")]
	[Address(RVA = "0x1238E4C", Offset = "0x1238E4C", VA = "0x1238E4C")]
	public void ClearSaveGame(int index)
	{
	}

	[Token(Token = "0x600201D")]
	[Address(RVA = "0x1238EB0", Offset = "0x1238EB0", VA = "0x1238EB0")]
	public SaveGameState GetSaveGameState(int index)
	{
		return default(SaveGameState);
	}

	[Token(Token = "0x600201E")]
	[Address(RVA = "0x1238F14", Offset = "0x1238F14", VA = "0x1238F14")]
	public bool IsCampaignComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600201F")]
	[Address(RVA = "0x1238F7C", Offset = "0x1238F7C", VA = "0x1238F7C")]
	public string ContinueCampaignLevelName()
	{
		return null;
	}

	[Token(Token = "0x6002020")]
	[Address(RVA = "0x1238FDC", Offset = "0x1238FDC", VA = "0x1238FDC")]
	public void SetLastCampaignLevelLoaded(string name)
	{
	}

	[Token(Token = "0x6002021")]
	[Address(RVA = "0x1239044", Offset = "0x1239044", VA = "0x1239044")]
	public SaveManager()
	{
	}
}
[Token(Token = "0x200056A")]
public class SaveGameSlotInfo
{
	[Token(Token = "0x4001A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SaveManager.SaveGameState m_saveGameState;

	[Token(Token = "0x4001A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string m_lastCampaignLevelLoaded;

	[Token(Token = "0x6002022")]
	[Address(RVA = "0x1238E3C", Offset = "0x1238E3C", VA = "0x1238E3C")]
	public SaveGameSlotInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x200056B")]
public class SerializableGUID : ISerializationCallbackReceiver
{
	[Token(Token = "0x4001A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Guid guid;

	[Token(Token = "0x4001A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private byte[] m_serializedGuid;

	[Token(Token = "0x6002023")]
	[Address(RVA = "0x123911C", Offset = "0x123911C", VA = "0x123911C")]
	public SerializableGUID()
	{
	}

	[Token(Token = "0x6002024")]
	[Address(RVA = "0x1239140", Offset = "0x1239140", VA = "0x1239140", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6002025")]
	[Address(RVA = "0x1239168", Offset = "0x1239168", VA = "0x1239168", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}
}
[Token(Token = "0x200056C")]
public enum Handedness
{
	[Token(Token = "0x4001A76")]
	LeftHanded,
	[Token(Token = "0x4001A77")]
	RightHanded
}
[Token(Token = "0x200056D")]
public enum GoreIntensity
{
	[Token(Token = "0x4001A79")]
	None,
	[Token(Token = "0x4001A7A")]
	Limited,
	[Token(Token = "0x4001A7B")]
	Full
}
[Token(Token = "0x200056E")]
public enum WristwatchOrientations
{
	[Token(Token = "0x4001A7D")]
	Inner,
	[Token(Token = "0x4001A7E")]
	Outer
}
[Token(Token = "0x200056F")]
public enum TurnMode
{
	[Token(Token = "0x4001A80")]
	SnapTurnWithoutBlink,
	[Token(Token = "0x4001A81")]
	SnapTurnWithBlink,
	[Token(Token = "0x4001A82")]
	SmoothTurn
}
[Token(Token = "0x2000570")]
public enum SettingsGroup
{
	[Token(Token = "0x4001A84")]
	Controls,
	[Token(Token = "0x4001A85")]
	Comfort,
	[Token(Token = "0x4001A86")]
	Graphics,
	[Token(Token = "0x4001A87")]
	Audio,
	[Token(Token = "0x4001A88")]
	Developer
}
[Token(Token = "0x2000571")]
public static class GameSettings
{
	[Token(Token = "0x2000572")]
	private interface ISetting
	{
		[Token(Token = "0x1700052A")]
		string key
		{
			[Token(Token = "0x600202B")]
			get;
		}

		[Token(Token = "0x600202C")]
		void DeleteValue();
	}

	[Token(Token = "0x2000573")]
	public abstract class Setting
	{
		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Enum m_group;

		[Token(Token = "0x1700052B")]
		public Enum Group
		{
			[Token(Token = "0x600202D")]
			[Address(RVA = "0x123C0F8", Offset = "0x123C0F8", VA = "0x123C0F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0x123C100", Offset = "0x123C100", VA = "0x123C100")]
		protected Setting()
		{
		}
	}

	[Token(Token = "0x2000574")]
	public abstract class Setting<T> : Setting, ISetting
	{
		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly string m_prefsKey;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_hasValidCachedValue;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T m_cachedValue;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T m_defaultValue;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly bool m_hasForcedReleaseValue;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T m_releaseValue;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action OnValueChanged;

		[Token(Token = "0x1700052C")]
		public string key
		{
			[Token(Token = "0x600202F")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700052D")]
		public T Value
		{
			[Token(Token = "0x6002032")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6002033")]
			set
			{
			}
		}

		[Token(Token = "0x1700052E")]
		public T ForceValue
		{
			[Token(Token = "0x6002034")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6002035")]
			set
			{
			}
		}

		[Token(Token = "0x1700052F")]
		public bool HasSavedValue
		{
			[Token(Token = "0x6002037")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002030")]
		protected Setting(string key, Enum group, [Optional] T defaultValue)
		{
		}

		[Token(Token = "0x6002031")]
		protected Setting(string key, Enum group, [Optional] T defaultValue, [Optional] T forcedValueInRelease)
		{
		}

		[Token(Token = "0x6002036")]
		private void CacheValueIfNeeded()
		{
		}

		[Token(Token = "0x6002038")]
		protected abstract T ReadValue(string key);

		[Token(Token = "0x6002039")]
		protected abstract T WriteValue(string key, T value);

		[Token(Token = "0x600203A")]
		public void DeleteValue()
		{
		}
	}

	[Token(Token = "0x2000575")]
	public class IntSetting : Setting<int>
	{
		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_minValue;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int m_maxValue;

		[Token(Token = "0x17000530")]
		public int MinimumValue
		{
			[Token(Token = "0x600203B")]
			[Address(RVA = "0x123C108", Offset = "0x123C108", VA = "0x123C108")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000531")]
		public int MaximumValue
		{
			[Token(Token = "0x600203C")]
			[Address(RVA = "0x123C110", Offset = "0x123C110", VA = "0x123C110")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0x123BA88", Offset = "0x123BA88", VA = "0x123BA88")]
		public IntSetting(string key, Enum group, int defaultValue, int minValue, int maxValue)
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0x123BC60", Offset = "0x123BC60", VA = "0x123BC60")]
		public IntSetting(string key, Enum group, int defaultValue, int minValue, int maxValue, int forcedValueInRelease)
		{
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0x123C118", Offset = "0x123C118", VA = "0x123C118", Slot = "6")]
		protected override int ReadValue(string key)
		{
			return default(int);
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0x123C148", Offset = "0x123C148", VA = "0x123C148", Slot = "7")]
		protected override int WriteValue(string key, int value)
		{
			return default(int);
		}
	}

	[Token(Token = "0x2000576")]
	public class FloatSetting : Setting<float>
	{
		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_minValue;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_maxValue;

		[Token(Token = "0x17000532")]
		public float MinimumValue
		{
			[Token(Token = "0x6002041")]
			[Address(RVA = "0x123C17C", Offset = "0x123C17C", VA = "0x123C17C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000533")]
		public float MaximumValue
		{
			[Token(Token = "0x6002042")]
			[Address(RVA = "0x123C184", Offset = "0x123C184", VA = "0x123C184")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0x123BA00", Offset = "0x123BA00", VA = "0x123BA00")]
		public FloatSetting(string key, Enum group, float defaultValue, float minValue, float maxValue)
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0x123BCF0", Offset = "0x123BCF0", VA = "0x123BCF0")]
		public FloatSetting(string key, Enum group, float defaultValue, float minValue, float maxValue, float forcedValueInRelease)
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0x123C18C", Offset = "0x123C18C", VA = "0x123C18C", Slot = "6")]
		protected override float ReadValue(string key)
		{
			return default(float);
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0x123C1BC", Offset = "0x123C1BC", VA = "0x123C1BC", Slot = "7")]
		protected override float WriteValue(string key, float value)
		{
			return default(float);
		}
	}

	[Token(Token = "0x2000577")]
	public class BoolSetting : Setting<bool>
	{
		[Token(Token = "0x6002047")]
		[Address(RVA = "0x123B990", Offset = "0x123B990", VA = "0x123B990")]
		public BoolSetting(string key, Enum group, bool defaultValue)
		{
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0x123B8A8", Offset = "0x123B8A8", VA = "0x123B8A8")]
		public BoolSetting(string key, Enum group, bool defaultValue, bool releaseValue)
		{
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0x123C1F8", Offset = "0x123C1F8", VA = "0x123C1F8", Slot = "6")]
		protected override bool ReadValue(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0x123C218", Offset = "0x123C218", VA = "0x123C218", Slot = "7")]
		protected override bool WriteValue(string key, bool value)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000578")]
	public class HandednessSetting : Setting<Handedness>
	{
		[Token(Token = "0x600204B")]
		[Address(RVA = "0x123B920", Offset = "0x123B920", VA = "0x123B920")]
		public HandednessSetting(string key, Enum group, Handedness defaultValue)
		{
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0x123C23C", Offset = "0x123C23C", VA = "0x123C23C", Slot = "6")]
		protected override Handedness ReadValue(string key)
		{
			return default(Handedness);
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0x123C248", Offset = "0x123C248", VA = "0x123C248", Slot = "7")]
		protected override Handedness WriteValue(string key, Handedness value)
		{
			return default(Handedness);
		}
	}

	[Token(Token = "0x2000579")]
	public class TurnModeSetting : Setting<TurnMode>
	{
		[Token(Token = "0x600204E")]
		[Address(RVA = "0x123BB10", Offset = "0x123BB10", VA = "0x123BB10")]
		public TurnModeSetting(string key, Enum group, TurnMode defaultValue)
		{
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0x123C26C", Offset = "0x123C26C", VA = "0x123C26C", Slot = "6")]
		protected override TurnMode ReadValue(string key)
		{
			return default(TurnMode);
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0x123C278", Offset = "0x123C278", VA = "0x123C278", Slot = "7")]
		protected override TurnMode WriteValue(string key, TurnMode value)
		{
			return default(TurnMode);
		}
	}

	[Token(Token = "0x200057A")]
	public class ThreadPrioritySetting : Setting<ThreadPriority>
	{
		[Token(Token = "0x6002051")]
		[Address(RVA = "0x123BD80", Offset = "0x123BD80", VA = "0x123BD80")]
		public ThreadPrioritySetting(string key, Enum group, ThreadPriority defaultValue)
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0x123C29C", Offset = "0x123C29C", VA = "0x123C29C")]
		public ThreadPrioritySetting(string key, Enum group, ThreadPriority defaultValue, ThreadPriority forcedValueInRelease)
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0x123C314", Offset = "0x123C314", VA = "0x123C314", Slot = "6")]
		protected override ThreadPriority ReadValue(string key)
		{
			return default(ThreadPriority);
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0x123C320", Offset = "0x123C320", VA = "0x123C320", Slot = "7")]
		protected override ThreadPriority WriteValue(string key, ThreadPriority value)
		{
			return default(ThreadPriority);
		}
	}

	[Token(Token = "0x200057B")]
	public class GoreIntensitySetting : Setting<GoreIntensity>
	{
		[Token(Token = "0x6002055")]
		[Address(RVA = "0x123BB80", Offset = "0x123BB80", VA = "0x123BB80")]
		public GoreIntensitySetting(string key, Enum group, GoreIntensity defaultValue)
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0x123C344", Offset = "0x123C344", VA = "0x123C344", Slot = "6")]
		protected override GoreIntensity ReadValue(string key)
		{
			return default(GoreIntensity);
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0x123C350", Offset = "0x123C350", VA = "0x123C350", Slot = "7")]
		protected override GoreIntensity WriteValue(string key, GoreIntensity value)
		{
			return default(GoreIntensity);
		}
	}

	[Token(Token = "0x200057C")]
	public class WristwatchOrientationSetting : Setting<WristwatchOrientations>
	{
		[Token(Token = "0x6002058")]
		[Address(RVA = "0x123BBF0", Offset = "0x123BBF0", VA = "0x123BBF0")]
		public WristwatchOrientationSetting(string key, Enum group, WristwatchOrientations defaultValue)
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0x123C374", Offset = "0x123C374", VA = "0x123C374", Slot = "6")]
		protected override WristwatchOrientations ReadValue(string key)
		{
			return default(WristwatchOrientations);
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0x123C380", Offset = "0x123C380", VA = "0x123C380", Slot = "7")]
		protected override WristwatchOrientations WriteValue(string key, WristwatchOrientations value)
		{
			return default(WristwatchOrientations);
		}
	}

	[Token(Token = "0x200057D")]
	public class StringSetting : Setting<string>
	{
		[Token(Token = "0x600205B")]
		[Address(RVA = "0x123C3A4", Offset = "0x123C3A4", VA = "0x123C3A4")]
		public StringSetting(string key, Enum group, string defaultValue)
		{
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0x123C414", Offset = "0x123C414", VA = "0x123C414", Slot = "6")]
		protected override string ReadValue(string key)
		{
			return null;
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0x123C420", Offset = "0x123C420", VA = "0x123C420", Slot = "7")]
		protected override string WriteValue(string key, string value)
		{
			return null;
		}
	}

	[Token(Token = "0x4001A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_hasAnyUnsavedChanges;

	[Token(Token = "0x4001A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static HashSet<ISetting> s_allSettings;

	[Token(Token = "0x4001A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly BoolSetting ArcadeReloadEnabled;

	[Token(Token = "0x4001A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly HandednessSetting PlayerHandedness;

	[Token(Token = "0x4001A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly BoolSetting PlaceBeadsOnPrimaryHand;

	[Token(Token = "0x4001A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly BoolSetting ForcePointWalkPhase;

	[Token(Token = "0x4001A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly FloatSetting StickUpwardConeThresholdAngle;

	[Token(Token = "0x4001A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly BoolSetting FreeWalkingCastFromHead;

	[Token(Token = "0x4001A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly BoolSetting AnalogueCrouching;

	[Token(Token = "0x4001A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static readonly BoolSetting InventoryHapticsEnabled;

	[Token(Token = "0x4001A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static readonly FloatSetting InputDeadZone;

	[Token(Token = "0x4001A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static readonly IntSetting PlayerHeight;

	[Token(Token = "0x4001A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static readonly IntSetting PlayerArmLength;

	[Token(Token = "0x4001A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static readonly IntSetting PlayerBeltHeight;

	[Token(Token = "0x4001A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static readonly IntSetting PlayerBeltScale;

	[Token(Token = "0x4001A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static readonly IntSetting PlayerBeltDepth;

	[Token(Token = "0x4001A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static readonly IntSetting PlayerBeltHipHolsterConfig;

	[Token(Token = "0x4001A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static readonly BoolSetting LocomotionVignetteEnabled;

	[Token(Token = "0x4001A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static readonly TurnModeSetting PlayerTurnMode;

	[Token(Token = "0x4001A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static readonly BoolSetting Subtitles;

	[Token(Token = "0x4001A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static readonly BoolSetting PlayerVO;

	[Token(Token = "0x4001A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static readonly BoolSetting DynamicTutorialsEnabled;

	[Token(Token = "0x4001A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static readonly BoolSetting InventoryHudEnabled;

	[Token(Token = "0x4001AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly GoreIntensitySetting GoreIntensityLevel;

	[Token(Token = "0x4001AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public static readonly WristwatchOrientationSetting WristwatchOrientation;

	[Token(Token = "0x4001AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public static readonly FloatSetting SmoothTurnSpeed;

	[Token(Token = "0x4001AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public static readonly BoolSetting GripToggle;

	[Token(Token = "0x4001AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public static readonly BoolSetting Debug_AiIgnorePlayer;

	[Token(Token = "0x4001AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public static readonly BoolSetting Debug_AutoKillEnemies;

	[Token(Token = "0x4001AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public static readonly BoolSetting Debug_EnableEnemies;

	[Token(Token = "0x4001AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public static readonly BoolSetting Debug_EnableDebugEnemies;

	[Token(Token = "0x4001AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public static readonly IntSetting Debug_ObjectiveSelection;

	[Token(Token = "0x4001AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public static readonly IntSetting Debug_ObjectivePermutation;

	[Token(Token = "0x4001AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public static readonly BoolSetting Performance_CharacterRenderersEnabled;

	[Token(Token = "0x4001AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public static readonly BoolSetting Performance_AiEnabled;

	[Token(Token = "0x4001AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public static readonly BoolSetting Performance_BlockAllNpcSpawning;

	[Token(Token = "0x4001AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static readonly BoolSetting Performance_BlockAgentTargeting;

	[Token(Token = "0x4001AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public static readonly BoolSetting Performance_BlockAgentShooting;

	[Token(Token = "0x4001AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public static readonly BoolSetting Performance_BlockAgentCover;

	[Token(Token = "0x4001AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public static readonly BoolSetting Performance_BlockAgentPathing;

	[Token(Token = "0x4001AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public static readonly IntSetting Performance_FixedUpdateRateIndex;

	[Token(Token = "0x4001AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public static readonly BoolSetting Performance_GunshotVisualsEnabled;

	[Token(Token = "0x4001AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public static readonly BoolSetting Performance_GunshotAudioEnabled;

	[Token(Token = "0x4001AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public static readonly IntSetting Performance_MaxNpaKinematicBullets;

	[Token(Token = "0x4001AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public static readonly IntSetting Performance_PerFrameNpaKinematicBullets;

	[Token(Token = "0x4001AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public static readonly IntSetting Performance_AgentRaycastMaxBatchWindow;

	[Token(Token = "0x4001AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public static readonly BoolSetting Debug_PlayerInvincible;

	[Token(Token = "0x4001AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public static readonly BoolSetting Debug_PlayerUndying;

	[Token(Token = "0x4001AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public static readonly BoolSetting Debug_InfiniteAmmo;

	[Token(Token = "0x4001ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public static readonly BoolSetting Debug_InfiniteResearchPoints;

	[Token(Token = "0x4001ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public static readonly BoolSetting Debug_ShowAgentDebugText;

	[Token(Token = "0x4001ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public static readonly BoolSetting Debug_DebugPanelEnabled;

	[Token(Token = "0x4001ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public static readonly BoolSetting Debug_ShowGeneratorDebugText;

	[Token(Token = "0x4001ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public static readonly IntSetting MaxNonPlayerAgentCount;

	[Token(Token = "0x4001ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public static readonly BoolSetting DynamicCulling;

	[Token(Token = "0x4001AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public static readonly FloatSetting PointWalkParabolaHorizontalCastDistance;

	[Token(Token = "0x4001AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public static readonly FloatSetting PointWalkZoomTransitionTime;

	[Token(Token = "0x4001AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public static readonly BoolSetting TurnAroundEnabled;

	[Token(Token = "0x4001AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public static readonly FloatSetting FreeLookTurnAngularSpeed;

	[Token(Token = "0x4001AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public static readonly FloatSetting FreeLookTurnAngularSpeedSubdivision;

	[Token(Token = "0x4001AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public static readonly FloatSetting TurnAroundDuration;

	[Token(Token = "0x4001AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public static readonly FloatSetting FreeLookCrouchSpeed;

	[Token(Token = "0x4001AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public static readonly IntSetting MSAAStrength;

	[Token(Token = "0x4001AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public static readonly FloatSetting ResolutionScaling;

	[Token(Token = "0x4001AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public static readonly BoolSetting DynamicResolutionScaling;

	[Token(Token = "0x4001ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public static readonly IntSetting FixedFoveatedRenderingStrength;

	[Token(Token = "0x4001ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public static readonly BoolSetting DynamicFoveation;

	[Token(Token = "0x4001ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	public static readonly FloatSetting TextureQuality;

	[Token(Token = "0x4001ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	public static readonly BoolSetting UsePersistentData;

	[Token(Token = "0x4001ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public static readonly BoolSetting BypassSacredRiteFaithRequirement;

	[Token(Token = "0x4001ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	public static readonly BoolSetting UseVelocityBasedSlowdown;

	[Token(Token = "0x4001AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	public static readonly FloatSetting SlowdownPercentage;

	[Token(Token = "0x4001AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	public static readonly BoolSetting EnableUserTestStops;

	[Token(Token = "0x4001AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	public static readonly BoolSetting StopDrawing;

	[Token(Token = "0x4001AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public static readonly BoolSetting EnableShaderPerformance;

	[Token(Token = "0x4001AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public static readonly BoolSetting EnableShaderAlbedoOnly;

	[Token(Token = "0x4001AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	public static readonly BoolSetting EnableWind;

	[Token(Token = "0x4001AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	public static readonly BoolSetting EnableColorCorrection;

	[Token(Token = "0x4001AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	public static readonly BoolSetting EnableDithering;

	[Token(Token = "0x4001AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	public static readonly BoolSetting DisableNetwork;

	[Token(Token = "0x4001AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	public static readonly BoolSetting DisableEntityCulling;

	[Token(Token = "0x4001ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	public static readonly BoolSetting SkipBootScreens;

	[Token(Token = "0x4001ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	public static readonly BoolSetting EnableTetrahedralizeOnSceneChange;

	[Token(Token = "0x4001ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	public static readonly ThreadPrioritySetting BackgroundLoadingPriority;

	[Token(Token = "0x4001ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	public static readonly IntSetting VoiceChatLevel;

	[Token(Token = "0x4001ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	public static readonly BoolSetting VoiceChatMute;

	[Token(Token = "0x4001ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	public static readonly BoolSetting ShortObjectivesGame;

	[Token(Token = "0x4001AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	public static readonly BoolSetting EnableFriendlyFire;

	[Token(Token = "0x4001AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	public static readonly BoolSetting ShowItemGrabLines;

	[Token(Token = "0x4001AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	public static readonly BoolSetting DisableFireplace;

	[Token(Token = "0x4001AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	public static readonly IntSetting StaticShaderOptimizations;

	[Token(Token = "0x4001AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	public static readonly IntSetting TerrainShaderOptimizations;

	[Token(Token = "0x6002026")]
	[Address(RVA = "0x1239200", Offset = "0x1239200", VA = "0x1239200")]
	static GameSettings()
	{
	}

	[Token(Token = "0x6002027")]
	[Address(RVA = "0x123BDF0", Offset = "0x123BDF0", VA = "0x123BDF0")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x6002028")]
	[Address(RVA = "0x123BE9C", Offset = "0x123BE9C", VA = "0x123BE9C")]
	public static void SaveChanges()
	{
	}

	[Token(Token = "0x6002029")]
	[Address(RVA = "0x123BF1C", Offset = "0x123BF1C", VA = "0x123BF1C")]
	public static void ResetAllToDefaults()
	{
	}

	[Token(Token = "0x600202A")]
	public static Setting<T> GetSetting<T>(string key)
	{
		return null;
	}
}
[Token(Token = "0x200057E")]
[CreateAssetMenu(fileName = "PoolingSettings", menuName = "Battle Sister/Pooling/Pooling Settings", order = 1)]
public class PoolingSettings : ScriptableObject
{
	[Token(Token = "0x4001AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Do we want to parent individually pooled objects to the root scene?")]
	public bool ParentToRootScene;

	[Token(Token = "0x4001AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[UnityEngine.Tooltip("Do we want to objects to all be placed in the DontDestroyOnLoad scene?")]
	public bool DdolObjects;

	[Token(Token = "0x4001AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[UnityEngine.Tooltip("Do we want to use pool groups? (combine with ParentToRoot to determine location of pool group containers)")]
	public bool UsePoolGroups;

	[Token(Token = "0x600205E")]
	[Address(RVA = "0x123C444", Offset = "0x123C444", VA = "0x123C444")]
	public PoolingSettings()
	{
	}
}
[Token(Token = "0x200057F")]
public class PoolingSettingsManager : MonoBehaviour
{
	[Token(Token = "0x4001AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PoolingSettingsManager Instance;

	[Token(Token = "0x4001AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PoolingSettings m_poolingSettings;

	[Token(Token = "0x600205F")]
	[Address(RVA = "0x123C454", Offset = "0x123C454", VA = "0x123C454")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002060")]
	[Address(RVA = "0x123C4AC", Offset = "0x123C4AC", VA = "0x123C4AC")]
	public bool ParentToRootScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6002061")]
	[Address(RVA = "0x123C4C8", Offset = "0x123C4C8", VA = "0x123C4C8")]
	public bool DdolObjects()
	{
		return default(bool);
	}

	[Token(Token = "0x6002062")]
	[Address(RVA = "0x123C4E4", Offset = "0x123C4E4", VA = "0x123C4E4")]
	public bool UsePoolGroups()
	{
		return default(bool);
	}

	[Token(Token = "0x6002063")]
	[Address(RVA = "0x123C500", Offset = "0x123C500", VA = "0x123C500")]
	public PoolingSettingsManager()
	{
	}
}
[Token(Token = "0x2000580")]
public class RigSwitcher : MonoBehaviour, IDataSource
{
	[Token(Token = "0x2000581")]
	[CompilerGenerated]
	private sealed class <EnableVRRigPhysics>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <time>5__2;

		[Token(Token = "0x17000537")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002075")]
			[Address(RVA = "0x123D4CC", Offset = "0x123D4CC", VA = "0x123D4CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000538")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002077")]
			[Address(RVA = "0x123D514", Offset = "0x123D514", VA = "0x123D514", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x123D250", Offset = "0x123D250", VA = "0x123D250")]
		[DebuggerHidden]
		public <EnableVRRigPhysics>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x123D324", Offset = "0x123D324", VA = "0x123D324", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0x123D328", Offset = "0x123D328", VA = "0x123D328", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0x123D4D4", Offset = "0x123D4D4", VA = "0x123D4D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000582")]
	[CompilerGenerated]
	private sealed class <LoadLevelManifest>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RigSwitcher <>4__this;

		[Token(Token = "0x17000539")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600207B")]
			[Address(RVA = "0x123D6B4", Offset = "0x123D6B4", VA = "0x123D6B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700053A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600207D")]
			[Address(RVA = "0x123D6FC", Offset = "0x123D6FC", VA = "0x123D6FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x123D278", Offset = "0x123D278", VA = "0x123D278")]
		[DebuggerHidden]
		public <LoadLevelManifest>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x123D51C", Offset = "0x123D51C", VA = "0x123D51C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0x123D520", Offset = "0x123D520", VA = "0x123D520", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x123D6BC", Offset = "0x123D6BC", VA = "0x123D6BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnRigChanged;

	[Token(Token = "0x4001AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> m_rigs;

	[Token(Token = "0x4001AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CabinPerformanceConfig[] m_performanceConfigs;

	[Token(Token = "0x4001AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool m_usePrefabs;

	[Token(Token = "0x4001AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform m_spawnPoint;

	[Token(Token = "0x4001AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform m_infoPanel;

	[Token(Token = "0x4001AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private LevelManifest m_levelManifest;

	[Token(Token = "0x4001AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int m_rigIndex;

	[Token(Token = "0x4001AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_performanceIndex;

	[Token(Token = "0x4001AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string m_rigName;

	[Token(Token = "0x4001B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string m_configDesc;

	[Token(Token = "0x4001B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject m_currentRig;

	[Token(Token = "0x4001B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Matrix4x4 m_infoPanelLocalPosition;

	[Token(Token = "0x17000534")]
	public string rigName
	{
		[Token(Token = "0x6002064")]
		[Address(RVA = "0x123C508", Offset = "0x123C508", VA = "0x123C508")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002065")]
		[Address(RVA = "0x123C510", Offset = "0x123C510", VA = "0x123C510")]
		set
		{
		}
	}

	[Token(Token = "0x17000535")]
	public string configDesc
	{
		[Token(Token = "0x6002066")]
		[Address(RVA = "0x123C57C", Offset = "0x123C57C", VA = "0x123C57C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002067")]
		[Address(RVA = "0x123C584", Offset = "0x123C584", VA = "0x123C584")]
		set
		{
		}
	}

	[Token(Token = "0x17000536")]
	private GameObject currentRig
	{
		[Token(Token = "0x6002068")]
		[Address(RVA = "0x123C5F0", Offset = "0x123C5F0", VA = "0x123C5F0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002069")]
		[Address(RVA = "0x123C5F8", Offset = "0x123C5F8", VA = "0x123C5F8")]
		set
		{
		}
	}

	[Token(Token = "0x600206A")]
	[Address(RVA = "0x123CACC", Offset = "0x123CACC", VA = "0x123CACC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600206B")]
	[Address(RVA = "0x123CD4C", Offset = "0x123CD4C", VA = "0x123CD4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600206C")]
	[Address(RVA = "0x123D0F8", Offset = "0x123D0F8", VA = "0x123D0F8")]
	private void Update()
	{
	}

	[Token(Token = "0x600206D")]
	[Address(RVA = "0x123CE5C", Offset = "0x123CE5C", VA = "0x123CE5C")]
	private void SelectRig(int index)
	{
	}

	[Token(Token = "0x600206E")]
	[Address(RVA = "0x123CA6C", Offset = "0x123CA6C", VA = "0x123CA6C")]
	[IteratorStateMachine(typeof(<EnableVRRigPhysics>d__26))]
	private IEnumerator EnableVRRigPhysics()
	{
		return null;
	}

	[Token(Token = "0x600206F")]
	[Address(RVA = "0x123D074", Offset = "0x123D074", VA = "0x123D074")]
	private void SetPerformanceConfig(int index)
	{
	}

	[Token(Token = "0x6002070")]
	[Address(RVA = "0x123CDE8", Offset = "0x123CDE8", VA = "0x123CDE8")]
	[IteratorStateMachine(typeof(<LoadLevelManifest>d__28))]
	private IEnumerator LoadLevelManifest()
	{
		return null;
	}

	[Token(Token = "0x6002071")]
	[Address(RVA = "0x123D2A0", Offset = "0x123D2A0", VA = "0x123D2A0")]
	public RigSwitcher()
	{
	}
}
[Token(Token = "0x2000583")]
public class SimplePlayerController : MonoBehaviour
{
	[Token(Token = "0x4001B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_headTransform;

	[Token(Token = "0x4001B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_movementSpeed;

	[Token(Token = "0x4001B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float m_rotationSpeed;

	[Token(Token = "0x4001B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool EnableRotation;

	[Token(Token = "0x4001B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x4001B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x4001B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float RotationAngle;

	[Token(Token = "0x4001B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody m_rigidBody;

	[Token(Token = "0x4001B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 m_movementDirection;

	[Token(Token = "0x4001B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 m_rotationDirection;

	[Token(Token = "0x4001B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_useRigidbody;

	[Token(Token = "0x4001B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x600207E")]
	[Address(RVA = "0x123D704", Offset = "0x123D704", VA = "0x123D704")]
	private void Awake()
	{
	}

	[Token(Token = "0x600207F")]
	[Address(RVA = "0x123D75C", Offset = "0x123D75C", VA = "0x123D75C")]
	public void OnMove(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6002080")]
	[Address(RVA = "0x123D760", Offset = "0x123D760", VA = "0x123D760")]
	public void OnRotate(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6002081")]
	[Address(RVA = "0x123D764", Offset = "0x123D764", VA = "0x123D764")]
	public void OnToggleRigidbody(InputAction.CallbackContext context)
	{
	}

	[Token(Token = "0x6002082")]
	[Address(RVA = "0x123D7A4", Offset = "0x123D7A4", VA = "0x123D7A4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6002083")]
	[Address(RVA = "0x123DD78", Offset = "0x123DD78", VA = "0x123DD78")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x6002084")]
	[Address(RVA = "0x123DD7C", Offset = "0x123DD7C", VA = "0x123DD7C")]
	public SimplePlayerController()
	{
	}
}
[Token(Token = "0x2000584")]
public interface ISpawnable
{
	[Token(Token = "0x1700053B")]
	string name
	{
		[Token(Token = "0x6002085")]
		get;
	}

	[Token(Token = "0x1700053C")]
	GameObject[] Prefabs
	{
		[Token(Token = "0x6002087")]
		get;
	}

	[Token(Token = "0x6002086")]
	GameObject Spawn(Vector3 position, Quaternion rotation);
}
[Token(Token = "0x2000585")]
[DisallowMultipleComponent]
public class ItemSpawn : CachedMonoBehaviour
{
	[Token(Token = "0x4001B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Identifier m_spawnedItemIdentifier;

	[Token(Token = "0x6002088")]
	[Address(RVA = "0x123DDA8", Offset = "0x123DDA8", VA = "0x123DDA8")]
	[ContextMenu("Trigger")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6002089")]
	[Address(RVA = "0x123DF80", Offset = "0x123DF80", VA = "0x123DF80")]
	public ItemSpawn()
	{
	}
}
[Token(Token = "0x2000586")]
public class ItemDropManager : SceneSingleton<ItemDropManager>
{
	[Token(Token = "0x2000587")]
	[CompilerGenerated]
	private sealed class <ReEnableItemCollisionAfterDelay>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int frameDelay;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody rb;

		[Token(Token = "0x1700053D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600209D")]
			[Address(RVA = "0x123F724", Offset = "0x123F724", VA = "0x123F724", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700053E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600209F")]
			[Address(RVA = "0x123F76C", Offset = "0x123F76C", VA = "0x123F76C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0x123F0B4", Offset = "0x123F0B4", VA = "0x123F0B4")]
		[DebuggerHidden]
		public <ReEnableItemCollisionAfterDelay>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0x123F5A0", Offset = "0x123F5A0", VA = "0x123F5A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0x123F5BC", Offset = "0x123F5BC", VA = "0x123F5BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0x123F6F8", Offset = "0x123F6F8", VA = "0x123F6F8")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0x123F72C", Offset = "0x123F72C", VA = "0x123F72C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<SpawnWaveDefinition, ItemDrop[]> m_spawnDrops;

	[Token(Token = "0x4001B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<Actor, ItemDrop[]> m_forcedItemDrops;

	[Token(Token = "0x4001B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<IPoolable> m_spawnedDrops;

	[Token(Token = "0x4001B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("Base radius to drop items")]
	[SerializeField]
	[Min(0f)]
	private float m_baseRadius;

	[Token(Token = "0x4001B1A")]
	private const float c_maxAngleSearchIterations = 8f;

	[Token(Token = "0x4001B1B")]
	private const float c_nearestAllowedSpawnAngle = 15f;

	[Token(Token = "0x600208A")]
	[Address(RVA = "0x123DF88", Offset = "0x123DF88", VA = "0x123DF88")]
	private void Awake()
	{
	}

	[Token(Token = "0x600208B")]
	[Address(RVA = "0x123E0D0", Offset = "0x123E0D0", VA = "0x123E0D0")]
	public void SetPendingItemDrops(Actor actor, [Optional] ItemDrop[] forcedDrops)
	{
	}

	[Token(Token = "0x600208C")]
	[Address(RVA = "0x123E154", Offset = "0x123E154", VA = "0x123E154")]
	public void RequesSpawnItemDrops(Actor actor, [Optional] SpawnWaveDefinition waveDef)
	{
	}

	[Token(Token = "0x600208D")]
	[Address(RVA = "0x123E95C", Offset = "0x123E95C", VA = "0x123E95C")]
	private void SpawnWaveItemDrop(Actor actor, SpawnWaveDefinition waveDef)
	{
	}

	[Token(Token = "0x600208E")]
	[Address(RVA = "0x123E250", Offset = "0x123E250", VA = "0x123E250")]
	private void SpawnItemDrops(Actor actor, ItemDrop[] drops, bool forcedItems = false)
	{
	}

	[Token(Token = "0x600208F")]
	[Address(RVA = "0x123F030", Offset = "0x123F030", VA = "0x123F030")]
	[IteratorStateMachine(typeof(<ReEnableItemCollisionAfterDelay>d__11))]
	private IEnumerator ReEnableItemCollisionAfterDelay(Rigidbody rb, int frameDelay)
	{
		return null;
	}

	[Token(Token = "0x6002090")]
	[Address(RVA = "0x123F0DC", Offset = "0x123F0DC", VA = "0x123F0DC")]
	public void AddtWaveDrops(SpawnWaveDefinition waveDef)
	{
	}

	[Token(Token = "0x6002091")]
	[Address(RVA = "0x123F160", Offset = "0x123F160", VA = "0x123F160")]
	public void RemoveWaveDrops(SpawnWaveDefinition waveDef)
	{
	}

	[Token(Token = "0x6002092")]
	[Address(RVA = "0x123F1B8", Offset = "0x123F1B8", VA = "0x123F1B8")]
	public void ClearWaveDrops()
	{
	}

	[Token(Token = "0x6002093")]
	[Address(RVA = "0x123F208", Offset = "0x123F208", VA = "0x123F208")]
	public void DespawnItemDrops()
	{
	}

	[Token(Token = "0x6002094")]
	[Address(RVA = "0x123EDE4", Offset = "0x123EDE4", VA = "0x123EDE4")]
	public GameObject SpawnItemDrops(ISpawnable item, Vector3 position, Quaternion rotation, bool despawnInNextWave = true)
	{
		return null;
	}

	[Token(Token = "0x6002095")]
	[Address(RVA = "0x123F334", Offset = "0x123F334", VA = "0x123F334")]
	public void RemoveSpawnedDrop(IPoolable poolObject)
	{
	}

	[Token(Token = "0x6002096")]
	[Address(RVA = "0x123F43C", Offset = "0x123F43C", VA = "0x123F43C")]
	private void RemoveDespawnItemByWave(IPoolable poolable)
	{
	}

	[Token(Token = "0x6002097")]
	[Address(RVA = "0x123EC6C", Offset = "0x123EC6C", VA = "0x123EC6C")]
	private bool IsPositionWithinItemDropArea(Vector3 launchPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6002098")]
	[Address(RVA = "0x123F504", Offset = "0x123F504", VA = "0x123F504")]
	public ItemDropManager()
	{
	}
}
[Token(Token = "0x2000588")]
[DisallowMultipleComponent]
public class MultiplayerSpawnPointDirectory : Cabin.SceneContentsDirectory.SceneContentsDirectory<MultiplayerSpawnPoint, MultiplayerSpawnPointDirectory>
{
	[Token(Token = "0x60020A0")]
	[Address(RVA = "0x123F774", Offset = "0x123F774", VA = "0x123F774")]
	public MultiplayerSpawnPointDirectory()
	{
	}
}
[Token(Token = "0x2000589")]
public class PlayerZoneDetection : MonoBehaviour
{
	[Token(Token = "0x4001B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Zone zone;

	[Token(Token = "0x4001B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> _playersInsideZone;

	[Token(Token = "0x60020A1")]
	[Address(RVA = "0x123F7E0", Offset = "0x123F7E0", VA = "0x123F7E0")]
	public void Start()
	{
	}

	[Token(Token = "0x60020A2")]
	[Address(RVA = "0x123FACC", Offset = "0x123FACC", VA = "0x123FACC")]
	private void OnPlayerEnterZone(GameObject go)
	{
	}

	[Token(Token = "0x60020A3")]
	[Address(RVA = "0x123FB7C", Offset = "0x123FB7C", VA = "0x123FB7C")]
	private void OnPlayerExitZone(GameObject go)
	{
	}

	[Token(Token = "0x60020A4")]
	[Address(RVA = "0x123FBD4", Offset = "0x123FBD4", VA = "0x123FBD4")]
	public bool[] GetPlayersState()
	{
		return null;
	}

	[Token(Token = "0x60020A5")]
	[Address(RVA = "0x123FE78", Offset = "0x123FE78", VA = "0x123FE78")]
	public bool[] GetPlayersState(GameObject go)
	{
		return null;
	}

	[Token(Token = "0x60020A6")]
	[Address(RVA = "0x124003C", Offset = "0x124003C", VA = "0x124003C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60020A7")]
	[Address(RVA = "0x1240210", Offset = "0x1240210", VA = "0x1240210")]
	public PlayerZoneDetection()
	{
	}
}
[Token(Token = "0x200058A")]
public class SpawnPointGroups : MonoBehaviour
{
	[Token(Token = "0x4001B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string[] m_groups;

	[Token(Token = "0x1700053F")]
	public string[] Groups
	{
		[Token(Token = "0x60020A8")]
		[Address(RVA = "0x1240218", Offset = "0x1240218", VA = "0x1240218")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60020A9")]
	[Address(RVA = "0x1240220", Offset = "0x1240220", VA = "0x1240220")]
	public SpawnPointGroups()
	{
	}
}
[Token(Token = "0x200058B")]
[Obsolete("This scriptable object is no longer used and is for reference only. It can be safely deleted. You should create a game object in your multiplayer level's root scene with a SpawnPointGroups component on it instead.")]
[CreateAssetMenu(menuName = "Pixel Toys/Multiplayer/SpawnPoint Groups")]
public class SpawnPointGroupsSO : ScriptableObject
{
	[Token(Token = "0x4001B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string[] m_groups;

	[Token(Token = "0x17000540")]
	public string[] Groups
	{
		[Token(Token = "0x60020AA")]
		[Address(RVA = "0x1240284", Offset = "0x1240284", VA = "0x1240284")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60020AB")]
	[Address(RVA = "0x124028C", Offset = "0x124028C", VA = "0x124028C")]
	public SpawnPointGroupsSO()
	{
	}
}
[Token(Token = "0x200058C")]
public class WaveManager : SceneSingleton<WaveManager>
{
	[Token(Token = "0x4001B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Time that the WaveManager waits before start the first wave")]
	private float _initialWaitTime;

	[Token(Token = "0x4001B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Active Time that the WaveManager is spawning a wave")]
	[SerializeField]
	private float _activeWaveTime;

	[Token(Token = "0x4001B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Time that the WaveManager waits between the end of the actual wave and the beggining of the next one")]
	[SerializeField]
	private float _waitingWaveTime;

	[Token(Token = "0x4001B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Waves")]
	[SerializeField]
	private List<WaveSpecifier> m_waveSpecifier;

	[Token(Token = "0x4001B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private List<WaveSpecifier> m_ftueWaveSpecifier;

	[Token(Token = "0x4001B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool _despawnInDeEscalation;

	[Token(Token = "0x4001B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Header("Debug info")]
	[SerializeField]
	private int m_currentWaveIndex;

	[Token(Token = "0x4001B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private uint _waveIdentifier;

	[Token(Token = "0x4001B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SpawnWaveDefinition _lastWaveDef;

	[Token(Token = "0x4001B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool _startSpawner;

	[Token(Token = "0x4001B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float _timer;

	[Token(Token = "0x4001B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float _waveTime;

	[Token(Token = "0x4001B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Action<int> OnWaveStart;

	[Token(Token = "0x4001B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Action<int> OnWaveEnd;

	[Token(Token = "0x4001B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Action<int> OnLastEnemiesOnWaveSpawned;

	[Token(Token = "0x4001B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Action<int> OnLastEnemiesOnWaveKilled;

	[Token(Token = "0x4001B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool _waveInProcess;

	[Token(Token = "0x4001B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool _waitingBetweenWaves;

	[Token(Token = "0x4001B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
	private bool _spawningEnemies;

	[Token(Token = "0x4001B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private MultiplayerGameplayEvent m_lastGameplayEvent;

	[Token(Token = "0x4001B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private SelectSpawnPointsByPlayerDistance _selectSpawnPoint;

	[Token(Token = "0x4001B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<WaveSpecifier> m_currentWaveSpecifier;

	[Token(Token = "0x17000541")]
	public int CurrentWave
	{
		[Token(Token = "0x60020AC")]
		[Address(RVA = "0x12402F0", Offset = "0x12402F0", VA = "0x12402F0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000542")]
	public int WavesComplete
	{
		[Token(Token = "0x60020AD")]
		[Address(RVA = "0x12402FC", Offset = "0x12402FC", VA = "0x12402FC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000543")]
	public float TimeToNextWave
	{
		[Token(Token = "0x60020AE")]
		[Address(RVA = "0x1240304", Offset = "0x1240304", VA = "0x1240304")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000544")]
	public float NormalizedTimeToNextWave
	{
		[Token(Token = "0x60020AF")]
		[Address(RVA = "0x1240310", Offset = "0x1240310", VA = "0x1240310")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000545")]
	public float TimeToWaitingTime
	{
		[Token(Token = "0x60020B0")]
		[Address(RVA = "0x1240320", Offset = "0x1240320", VA = "0x1240320")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000546")]
	public float NormalizedTimeToWaitingTime
	{
		[Token(Token = "0x60020B1")]
		[Address(RVA = "0x1240330", Offset = "0x1240330", VA = "0x1240330")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000547")]
	public WaveSpecifier CurrentWaveSpecifier
	{
		[Token(Token = "0x60020B2")]
		[Address(RVA = "0x1240344", Offset = "0x1240344", VA = "0x1240344")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60020B3")]
	[Address(RVA = "0x12403C8", Offset = "0x12403C8", VA = "0x12403C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60020B4")]
	[Address(RVA = "0x12404F0", Offset = "0x12404F0", VA = "0x12404F0")]
	private void Start()
	{
	}

	[Token(Token = "0x60020B5")]
	[Address(RVA = "0x12407E0", Offset = "0x12407E0", VA = "0x12407E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60020B6")]
	[Address(RVA = "0x12409DC", Offset = "0x12409DC", VA = "0x12409DC")]
	private void UpdateTimer()
	{
	}

	[Token(Token = "0x60020B7")]
	[Address(RVA = "0x1240EE4", Offset = "0x1240EE4", VA = "0x1240EE4")]
	public void StartLevel()
	{
	}

	[Token(Token = "0x60020B8")]
	[Address(RVA = "0x1240F50", Offset = "0x1240F50", VA = "0x1240F50")]
	public void PauseWaveManager()
	{
	}

	[Token(Token = "0x60020B9")]
	[Address(RVA = "0x12410EC", Offset = "0x12410EC", VA = "0x12410EC")]
	public void FocalPointFinished()
	{
	}

	[Token(Token = "0x60020BA")]
	[Address(RVA = "0x124114C", Offset = "0x124114C", VA = "0x124114C")]
	public void RestartWaveManager()
	{
	}

	[Token(Token = "0x60020BB")]
	[Address(RVA = "0x1241158", Offset = "0x1241158", VA = "0x1241158")]
	public void FinishLevel()
	{
	}

	[Token(Token = "0x60020BC")]
	[Address(RVA = "0x1240898", Offset = "0x1240898", VA = "0x1240898")]
	private void WaveStart()
	{
	}

	[Token(Token = "0x60020BD")]
	[Address(RVA = "0x1240D04", Offset = "0x1240D04", VA = "0x1240D04")]
	private void WaveEnd()
	{
	}

	[Token(Token = "0x60020BE")]
	[Address(RVA = "0x1241544", Offset = "0x1241544", VA = "0x1241544")]
	private void WaveEnemiesSpawned(uint waveIndex)
	{
	}

	[Token(Token = "0x60020BF")]
	[Address(RVA = "0x1241574", Offset = "0x1241574", VA = "0x1241574")]
	private void WaveEnemiesKilled(uint waveIndex)
	{
	}

	[Token(Token = "0x60020C0")]
	[Address(RVA = "0x1241484", Offset = "0x1241484", VA = "0x1241484")]
	private void RequestSpawn(int index)
	{
	}

	[Token(Token = "0x60020C1")]
	[Address(RVA = "0x1241904", Offset = "0x1241904", VA = "0x1241904")]
	public void PauseAndSkipWaveManager()
	{
	}

	[Token(Token = "0x60020C2")]
	[Address(RVA = "0x124199C", Offset = "0x124199C", VA = "0x124199C")]
	private void GiveRewards(int waveIndex)
	{
	}

	[Token(Token = "0x60020C3")]
	[Address(RVA = "0x1241B1C", Offset = "0x1241B1C", VA = "0x1241B1C")]
	public void SendWaveState(BoltConnection recipient)
	{
	}

	[Token(Token = "0x60020C4")]
	[Address(RVA = "0x1241C90", Offset = "0x1241C90", VA = "0x1241C90", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60020C5")]
	[Address(RVA = "0x1241EE0", Offset = "0x1241EE0", VA = "0x1241EE0")]
	public WaveManager()
	{
	}
}
[Token(Token = "0x200058D")]
[CreateAssetMenu(menuName = "Cabin/AI/Wave Specifier")]
public class WaveSpecifier : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x200058E")]
	public class Wave
	{
		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Used so design can put a helpful dev name on a wave")]
		public string DebugName;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SquadSequence[] SquadSequences;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Items to drop for each death")]
		public ItemDrop[] ItemDrops;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Despawn;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DespawnInEscalationTime;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("After the wave completes the shared lives pool will be incremented by this value (up to the lives limit)")]
		public int MaxLivesToRestore;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int CoinReward;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int CoinRewardCoop;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AmmoBoxEntry[] AmmoBoxEntries;

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x1241F94", Offset = "0x1241F94", VA = "0x1241F94")]
		public Wave()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200058F")]
	public class SquadSequence
	{
		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Used so design can put a helpful dev name on a squad spawn sequence")]
		public string DebugName;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SquadSpawnData[] SquadSpawnDatas;

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x124209C", Offset = "0x124209C", VA = "0x124209C")]
		public SquadSequence()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000590")]
	public class SquadSpawnData
	{
		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Min time since the last spawn (or wave start) for a squad to spawn")]
		public int MinTime;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[UnityEngine.Tooltip("Max enemies allowed before this squad can spawn")]
		public int EnemyCount;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("This squad spawn will be skipped if the player count at wave start is smaller than this value")]
		public int MinPlayerCount;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("This squad spawn will be skipped if the player count at wave start is larger than this value")]
		public int MaxPlayerCount;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string SpawnPointGroup;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemySpawn[] Spawns;

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x124212C", Offset = "0x124212C", VA = "0x124212C")]
		public bool ReadyToSpawn(float timeLastSquadSpawned, int hostileAgentCount)
		{
			return default(bool);
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x1242184", Offset = "0x1242184", VA = "0x1242184")]
		public float GetTimeUntilNextSpawn(float timeLastSquadSpawned)
		{
			return default(float);
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x12421A8", Offset = "0x12421A8", VA = "0x12421A8")]
		public bool ValidForPlayerCount(int playerCount)
		{
			return default(bool);
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x12421CC", Offset = "0x12421CC", VA = "0x12421CC")]
		public int GetTotalAgentsToSpawn(int playerCount)
		{
			return default(int);
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0x12422E0", Offset = "0x12422E0", VA = "0x12422E0")]
		public SquadSpawnData()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000591")]
	public class EnemySpawn
	{
		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[InterfaceObject(typeof(ISpawnable))]
		public UnityEngine.Object spawnable;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int CountToSpawnIfPlayer1;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int CountToSpawnIfPlayer2;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int CountToSpawnIfPlayer3;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int CountToSpawnIfPlayer4;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ItemDrop[] ForceItems;

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0x1242244", Offset = "0x1242244", VA = "0x1242244")]
		public int GetCount(int playerCount)
		{
			return default(int);
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0x1242344", Offset = "0x1242344", VA = "0x1242344")]
		public EnemySpawn()
		{
		}
	}

	[Token(Token = "0x4001B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Editor only feature to use MP wave spec when playing SP")]
	public bool UseMPWavesInSP;

	[Token(Token = "0x4001B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Wave[] Waves;

	[Token(Token = "0x60020C6")]
	[Address(RVA = "0x1241F30", Offset = "0x1241F30", VA = "0x1241F30")]
	public WaveSpecifier()
	{
	}
}
[Token(Token = "0x2000592")]
public struct MultiplayerData
{
	[Token(Token = "0x4001B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AbstractSpawnPoint MultiplayerSpawnPoint;
}
[Token(Token = "0x2000593")]
public struct QueuedSpawn
{
	[Token(Token = "0x4001B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public SquadDefinition SquadDefinition;

	[Token(Token = "0x4001B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Scene OwnerScene;

	[Token(Token = "0x4001B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public MultiplayerData MultiplayerData;

	[Token(Token = "0x17000548")]
	public AbstractSpawnPoint PreferredSpawnPoint
	{
		[Token(Token = "0x60020D0")]
		[Address(RVA = "0x12423B0", Offset = "0x12423B0", VA = "0x12423B0")]
		get
		{
			return null;
		}
	}
}
[Serializable]
[Token(Token = "0x2000594")]
[CreateAssetMenu(menuName = "Cabin/Spawnables/Enemy")]
public class SpawnableEnemy : ScriptableObject, ISpawnable, IDataSource, IEnemyType
{
	[Token(Token = "0x4001B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _enemyPrefab;

	[Token(Token = "0x4001B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] m_difficultyStepEnemyPrefabOverrides;

	[Token(Token = "0x4001B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Optional overrides.")]
	private AttackStateMatrix m_attackMatrixOverride;

	[Token(Token = "0x4001B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private StateDescription m_behaviourOverride;

	[NonSerialized]
	[Token(Token = "0x4001B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IEnemyType m_enemyTypeProvider;

	[Token(Token = "0x17000549")]
	public GameObject[] Prefabs
	{
		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x1242438", Offset = "0x1242438", VA = "0x1242438", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700054A")]
	public EnemyType enemyType
	{
		[Token(Token = "0x60020D2")]
		[Address(RVA = "0x12424D8", Offset = "0x12424D8", VA = "0x12424D8", Slot = "7")]
		get
		{
			return default(EnemyType);
		}
	}

	[Token(Token = "0x60020D3")]
	[Address(RVA = "0x12425B8", Offset = "0x12425B8", VA = "0x12425B8")]
	private GameObject GrabActiveDifficultyPrefab()
	{
		return null;
	}

	[Token(Token = "0x60020D4")]
	[Address(RVA = "0x12426BC", Offset = "0x12426BC", VA = "0x12426BC", Slot = "5")]
	private GameObject ISpawnable.Spawn(Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x60020D5")]
	[Address(RVA = "0x124290C", Offset = "0x124290C", VA = "0x124290C")]
	public SpawnableEnemy()
	{
	}

	[SpecialName]
	[Token(Token = "0x60020D6")]
	[Address(RVA = "0x1242914", Offset = "0x1242914", VA = "0x1242914", Slot = "4")]
	private string ISpawnable.get_name()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000595")]
[CreateAssetMenu(menuName = "Cabin/Spawnables/Item")]
public class SpawnableItem : ScriptableObject, ISpawnable
{
	[Token(Token = "0x4001B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _itemPrefab;

	[Token(Token = "0x1700054B")]
	public GameObject[] Prefabs
	{
		[Token(Token = "0x60020D7")]
		[Address(RVA = "0x124291C", Offset = "0x124291C", VA = "0x124291C", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60020D8")]
	[Address(RVA = "0x12429BC", Offset = "0x12429BC", VA = "0x12429BC", Slot = "5")]
	public GameObject Spawn(Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x60020D9")]
	[Address(RVA = "0x1242A84", Offset = "0x1242A84", VA = "0x1242A84")]
	public SpawnableItem()
	{
	}

	[SpecialName]
	[Token(Token = "0x60020DA")]
	[Address(RVA = "0x1242A8C", Offset = "0x1242A8C", VA = "0x1242A8C", Slot = "4")]
	private string ISpawnable.get_name()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000596")]
[CreateAssetMenu(menuName = "Cabin/Spawnables/Random Enemy")]
public class SpawnableRandomEnemy : ScriptableObject, ISpawnable, IEnemyType
{
	[Serializable]
	[Token(Token = "0x2000597")]
	public class EnemyChance
	{
		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpawnableEnemy spawnableEnemy;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxAllowed;

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0x124314C", Offset = "0x124314C", VA = "0x124314C")]
		public EnemyChance()
		{
		}
	}

	[Token(Token = "0x4001B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<EnemyChance> m_enemies;

	[Token(Token = "0x1700054C")]
	private GameObject[] ISpawnable.Prefabs
	{
		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x1242A94", Offset = "0x1242A94", VA = "0x1242A94", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700054D")]
	private EnemyType IEnemyType.enemyType
	{
		[Token(Token = "0x60020DC")]
		[Address(RVA = "0x1242C70", Offset = "0x1242C70", VA = "0x1242C70", Slot = "7")]
		get
		{
			return default(EnemyType);
		}
	}

	[Token(Token = "0x60020DD")]
	[Address(RVA = "0x1242CD4", Offset = "0x1242CD4", VA = "0x1242CD4", Slot = "5")]
	public GameObject Spawn(Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x60020DE")]
	[Address(RVA = "0x124313C", Offset = "0x124313C", VA = "0x124313C")]
	public SpawnableRandomEnemy()
	{
	}

	[SpecialName]
	[Token(Token = "0x60020DF")]
	[Address(RVA = "0x1243144", Offset = "0x1243144", VA = "0x1243144", Slot = "4")]
	private string ISpawnable.get_name()
	{
		return null;
	}
}
[Token(Token = "0x2000598")]
public class SpawnFunctionCaller : MonoBehaviour
{
	[Token(Token = "0x60020E1")]
	[Address(RVA = "0x124315C", Offset = "0x124315C", VA = "0x124315C")]
	public void StartLevel()
	{
	}

	[Token(Token = "0x60020E2")]
	[Address(RVA = "0x12431D4", Offset = "0x12431D4", VA = "0x12431D4")]
	public void PauseWaveManager()
	{
	}

	[Token(Token = "0x60020E3")]
	[Address(RVA = "0x124324C", Offset = "0x124324C", VA = "0x124324C")]
	public void RestartWaveManager()
	{
	}

	[Token(Token = "0x60020E4")]
	[Address(RVA = "0x12432CC", Offset = "0x12432CC", VA = "0x12432CC")]
	public void FinishLevel()
	{
	}

	[Token(Token = "0x60020E5")]
	[Address(RVA = "0x1243344", Offset = "0x1243344", VA = "0x1243344")]
	public void PauseWaveGroup(Identifier groupIdentifier)
	{
	}

	[Token(Token = "0x60020E6")]
	[Address(RVA = "0x1243598", Offset = "0x1243598", VA = "0x1243598")]
	public void RemoveWaveGroup(Identifier groupIdentifier)
	{
	}

	[Token(Token = "0x60020E7")]
	[Address(RVA = "0x12437EC", Offset = "0x12437EC", VA = "0x12437EC")]
	public void DespawnItemDrops()
	{
	}

	[Token(Token = "0x60020E8")]
	[Address(RVA = "0x12438AC", Offset = "0x12438AC", VA = "0x12438AC")]
	public SpawnFunctionCaller()
	{
	}
}
[Token(Token = "0x2000599")]
public class SpawnManagerByEnemy : SceneSingleton<SpawnManagerByEnemy>
{
	[Token(Token = "0x200059A")]
	[CompilerGenerated]
	private sealed class <WaveSpawnAgentInTime>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpawnManagerByEnemy <>4__this;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint waveId;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<uint, SpawnWaveDefinition.AgentSpawn> queuedAgent;

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SelectSpawnPointsByPlayerDistance selectSpawnPoint;

		[Token(Token = "0x17000553")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002117")]
			[Address(RVA = "0x1246904", Offset = "0x1246904", VA = "0x1246904", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000554")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002119")]
			[Address(RVA = "0x124694C", Offset = "0x124694C", VA = "0x124694C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x1244D60", Offset = "0x1244D60", VA = "0x1244D60")]
		[DebuggerHidden]
		public <WaveSpawnAgentInTime>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x1246628", Offset = "0x1246628", VA = "0x1246628", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x124662C", Offset = "0x124662C", VA = "0x124662C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0x124690C", Offset = "0x124690C", VA = "0x124690C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200059B")]
	[CompilerGenerated]
	private sealed class <SpawnAgentInTime>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpawnWaveDefinition.AgentSpawn spawnableObject;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpawnManagerByEnemy <>4__this;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpawnLocation location;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint waveId;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool comeFromWave;

		[Token(Token = "0x17000555")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600211D")]
			[Address(RVA = "0x1246B7C", Offset = "0x1246B7C", VA = "0x1246B7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000556")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600211F")]
			[Address(RVA = "0x1246BC4", Offset = "0x1246BC4", VA = "0x1246BC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0x1244D88", Offset = "0x1244D88", VA = "0x1244D88")]
		[DebuggerHidden]
		public <SpawnAgentInTime>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0x1246954", Offset = "0x1246954", VA = "0x1246954", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0x1246958", Offset = "0x1246958", VA = "0x1246958", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0x1246B84", Offset = "0x1246B84", VA = "0x1246B84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200059C")]
	[CompilerGenerated]
	private sealed class <SecureDespawnWave>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpawnManagerByEnemy <>4__this;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint waveId;

		[Token(Token = "0x17000557")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002123")]
			[Address(RVA = "0x1246C94", Offset = "0x1246C94", VA = "0x1246C94", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000558")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002125")]
			[Address(RVA = "0x1246CDC", Offset = "0x1246CDC", VA = "0x1246CDC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002120")]
		[Address(RVA = "0x1245AF8", Offset = "0x1245AF8", VA = "0x1245AF8")]
		[DebuggerHidden]
		public <SecureDespawnWave>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0x1246BCC", Offset = "0x1246BCC", VA = "0x1246BCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002122")]
		[Address(RVA = "0x1246BD0", Offset = "0x1246BD0", VA = "0x1246BD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0x1246C9C", Offset = "0x1246C9C", VA = "0x1246C9C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200059D")]
	[CompilerGenerated]
	private sealed class <DespawnEnemy>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] times;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpawnManagerByEnemy <>4__this;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Actor> actors;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <index>5__2;

		[Token(Token = "0x17000559")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002129")]
			[Address(RVA = "0x1246E58", Offset = "0x1246E58", VA = "0x1246E58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700055A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600212B")]
			[Address(RVA = "0x1246EA0", Offset = "0x1246EA0", VA = "0x1246EA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0x1245F44", Offset = "0x1245F44", VA = "0x1245F44")]
		[DebuggerHidden]
		public <DespawnEnemy>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x1246CE4", Offset = "0x1246CE4", VA = "0x1246CE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x1246CE8", Offset = "0x1246CE8", VA = "0x1246CE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x1246E60", Offset = "0x1246E60", VA = "0x1246E60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Maximum random range time between spawns")]
	[SerializeField]
	private float m_maxRandomTime;

	[Token(Token = "0x4001B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<KeyValuePair<uint, SpawnWaveDefinition>> m_queuedSpawns;

	[Token(Token = "0x4001B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<uint, SpawnWaveDefinition.AgentSpawn> m_queuedAgents;

	[Token(Token = "0x4001B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action<uint> OnWaveSpawnedCallbacks;

	[Token(Token = "0x4001B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action<uint> OnWaveKilledCallback;

	[Token(Token = "0x4001B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Dictionary<uint, List<Actor>> m_registeredAgentsByWave;

	[Token(Token = "0x4001B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Dictionary<Identifier, List<uint>> m_groupedWaves;

	[Token(Token = "0x4001B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<uint> m_spawnedWaves;

	[Token(Token = "0x4001B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private uint s_nextWaveIdentifier;

	[Token(Token = "0x4001B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int _queueIndex;

	[Token(Token = "0x4001B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<MultiplayerSpawnPoint> _usableSpawnPoints;

	[Token(Token = "0x4001B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SelectSpawnPointsByPlayerDistance _selectSpawnPoint;

	[Token(Token = "0x4001B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool m_canSpawn;

	[Token(Token = "0x4001B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float c_waitDespawnTime;

	[Token(Token = "0x1700054E")]
	private ISpawnable overrideSpawnable
	{
		[Token(Token = "0x60020E9")]
		[Address(RVA = "0x12438B4", Offset = "0x12438B4", VA = "0x12438B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700054F")]
	public SelectSpawnPointsByPlayerDistance SelectSpawnPoint
	{
		[Token(Token = "0x60020EA")]
		[Address(RVA = "0x12438BC", Offset = "0x12438BC", VA = "0x12438BC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60020EB")]
		[Address(RVA = "0x12438C4", Offset = "0x12438C4", VA = "0x12438C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000550")]
	internal uint CurrentWaveID
	{
		[Token(Token = "0x60020EC")]
		[Address(RVA = "0x12438CC", Offset = "0x12438CC", VA = "0x12438CC")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000551")]
	public bool AnyPendingSpawns
	{
		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x1244118", Offset = "0x1244118", VA = "0x1244118")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000552")]
	public bool AnyQueuedSpawns
	{
		[Token(Token = "0x60020F9")]
		[Address(RVA = "0x1244168", Offset = "0x1244168", VA = "0x1244168")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60020ED")]
	[Address(RVA = "0x12438D8", Offset = "0x12438D8", VA = "0x12438D8")]
	public void RequestSpawnAnon(WaveSpecifier specifier)
	{
	}

	[Token(Token = "0x60020EE")]
	[Address(RVA = "0x12415A4", Offset = "0x12415A4", VA = "0x12415A4")]
	public uint RequestSpawn(WaveSpecifier specifier, bool belongWaveManager = false)
	{
		return default(uint);
	}

	[Token(Token = "0x60020EF")]
	[Address(RVA = "0x1240FE0", Offset = "0x1240FE0", VA = "0x1240FE0")]
	public bool PauseSpawn(uint waveIdentifier)
	{
		return default(bool);
	}

	[Token(Token = "0x60020F0")]
	[Address(RVA = "0x124179C", Offset = "0x124179C", VA = "0x124179C")]
	public SpawnWaveDefinition GetWaveDefinition(uint waveid)
	{
		return null;
	}

	[Token(Token = "0x60020F1")]
	[Address(RVA = "0x12439FC", Offset = "0x12439FC", VA = "0x12439FC")]
	public bool RestartSpawn(uint waveIdentifier)
	{
		return default(bool);
	}

	[Token(Token = "0x60020F2")]
	[Address(RVA = "0x1240AFC", Offset = "0x1240AFC", VA = "0x1240AFC")]
	public bool RemoveSpawn(uint waveIdentifier)
	{
		return default(bool);
	}

	[Token(Token = "0x60020F3")]
	[Address(RVA = "0x12411B0", Offset = "0x12411B0", VA = "0x12411B0")]
	public void StopAllSpawns()
	{
	}

	[Token(Token = "0x60020F4")]
	[Address(RVA = "0x1243AD0", Offset = "0x1243AD0", VA = "0x1243AD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60020F5")]
	[Address(RVA = "0x1243C78", Offset = "0x1243C78", VA = "0x1243C78")]
	private void Start()
	{
	}

	[Token(Token = "0x60020F6")]
	[Address(RVA = "0x1243DD0", Offset = "0x1243DD0", VA = "0x1243DD0", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60020F7")]
	[Address(RVA = "0x1244064", Offset = "0x1244064", VA = "0x1244064")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x60020FA")]
	[Address(RVA = "0x12441B8", Offset = "0x12441B8", VA = "0x12441B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60020FB")]
	[Address(RVA = "0x1244A18", Offset = "0x1244A18", VA = "0x1244A18")]
	private bool SomethingToSpawn()
	{
		return default(bool);
	}

	[Token(Token = "0x60020FC")]
	[Address(RVA = "0x1244AC8", Offset = "0x1244AC8", VA = "0x1244AC8")]
	private int GetNextToSpawn()
	{
		return default(int);
	}

	[Token(Token = "0x60020FD")]
	[Address(RVA = "0x12438E0", Offset = "0x12438E0", VA = "0x12438E0")]
	private WaveSpecifier.SquadSequence SelectSequence(WaveSpecifier.Wave wave)
	{
		return null;
	}

	[Token(Token = "0x60020FE")]
	[Address(RVA = "0x1244CF8", Offset = "0x1244CF8", VA = "0x1244CF8")]
	public void SetSpawnPoints(MultiplayerSpawnPointDirectory dir)
	{
	}

	[Token(Token = "0x60020FF")]
	[Address(RVA = "0x1244B84", Offset = "0x1244B84", VA = "0x1244B84")]
	[IteratorStateMachine(typeof(<WaveSpawnAgentInTime>d__40))]
	private IEnumerator WaveSpawnAgentInTime(Dictionary<uint, SpawnWaveDefinition.AgentSpawn> queuedAgent, uint waveId, SelectSpawnPointsByPlayerDistance selectSpawnPoint)
	{
		return null;
	}

	[Token(Token = "0x6002100")]
	[Address(RVA = "0x1244C38", Offset = "0x1244C38", VA = "0x1244C38")]
	[IteratorStateMachine(typeof(<SpawnAgentInTime>d__41))]
	public IEnumerator SpawnAgentInTime(SpawnWaveDefinition.AgentSpawn spawnableObject, SpawnLocation location, uint waveId, bool comeFromWave = true)
	{
		return null;
	}

	[Token(Token = "0x6002101")]
	[Address(RVA = "0x1244DB0", Offset = "0x1244DB0", VA = "0x1244DB0")]
	public void SpawnAgent(SpawnWaveDefinition.AgentSpawn spawnableObject, SpawnLocation location, uint waveId, bool comeFromWave = true)
	{
	}

	[Token(Token = "0x6002102")]
	[Address(RVA = "0x124528C", Offset = "0x124528C", VA = "0x124528C")]
	public static GameObject SpawnAgent(PrefabId prefabId, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6002103")]
	[Address(RVA = "0x124547C", Offset = "0x124547C", VA = "0x124547C")]
	public static GameObject SpawnAgent(GameObject prefab, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6002104")]
	[Address(RVA = "0x1245530", Offset = "0x1245530", VA = "0x1245530")]
	public void UnregisterAgent(Actor actor)
	{
	}

	[Token(Token = "0x6002105")]
	[Address(RVA = "0x1243930", Offset = "0x1243930", VA = "0x1243930")]
	private void DespawnQueuedWave(uint waveId, int queuedIndex, bool forceInstantly = false)
	{
	}

	[Token(Token = "0x6002106")]
	[Address(RVA = "0x1245A64", Offset = "0x1245A64", VA = "0x1245A64")]
	[IteratorStateMachine(typeof(<SecureDespawnWave>d__48))]
	private IEnumerator SecureDespawnWave(float time, uint waveId)
	{
		return null;
	}

	[Token(Token = "0x6002107")]
	[Address(RVA = "0x1245B20", Offset = "0x1245B20", VA = "0x1245B20")]
	private float[] GetTimes(int amount, float totalTime)
	{
		return null;
	}

	[Token(Token = "0x6002108")]
	[Address(RVA = "0x1245BEC", Offset = "0x1245BEC", VA = "0x1245BEC")]
	private int GetFarFromPlayers(List<Actor> actors)
	{
		return default(int);
	}

	[Token(Token = "0x6002109")]
	[Address(RVA = "0x124575C", Offset = "0x124575C", VA = "0x124575C")]
	private void DespawnEnemiesInRandomTime(uint waveId, float totalTime)
	{
	}

	[Token(Token = "0x600210A")]
	[Address(RVA = "0x1245880", Offset = "0x1245880", VA = "0x1245880")]
	private void DespawnEnemiesInstantly(uint waveId)
	{
	}

	[Token(Token = "0x600210B")]
	[Address(RVA = "0x1245EA0", Offset = "0x1245EA0", VA = "0x1245EA0")]
	[IteratorStateMachine(typeof(<DespawnEnemy>d__53))]
	private IEnumerator DespawnEnemy(List<Actor> actors, float[] times)
	{
		return null;
	}

	[Token(Token = "0x600210C")]
	[Address(RVA = "0x1245F6C", Offset = "0x1245F6C", VA = "0x1245F6C")]
	public void RegisterWaveGroup(uint id, Identifier waveId)
	{
	}

	[Token(Token = "0x600210D")]
	[Address(RVA = "0x12460E4", Offset = "0x12460E4", VA = "0x12460E4")]
	public List<uint> GetWaveGroup(Identifier waveId)
	{
		return null;
	}

	[Token(Token = "0x600210E")]
	[Address(RVA = "0x12433C4", Offset = "0x12433C4", VA = "0x12433C4")]
	public void PauseWaveGroup(Identifier waveId)
	{
	}

	[Token(Token = "0x600210F")]
	[Address(RVA = "0x1246178", Offset = "0x1246178", VA = "0x1246178")]
	public float GetWaveEnemiesKilledPercentage(int waveId)
	{
		return default(float);
	}

	[Token(Token = "0x6002110")]
	[Address(RVA = "0x124627C", Offset = "0x124627C", VA = "0x124627C")]
	public float GetWaveEnemiesKilled(int waveId)
	{
		return default(float);
	}

	[Token(Token = "0x6002111")]
	[Address(RVA = "0x124635C", Offset = "0x124635C", VA = "0x124635C")]
	public float GetWaveAgentsCount(int waveId)
	{
		return default(float);
	}

	[Token(Token = "0x6002112")]
	[Address(RVA = "0x1243618", Offset = "0x1243618", VA = "0x1243618")]
	public void RemoveWaveGroup(Identifier waveId)
	{
	}

	[Token(Token = "0x6002113")]
	[Address(RVA = "0x124643C", Offset = "0x124643C", VA = "0x124643C")]
	public SpawnManagerByEnemy()
	{
	}
}
[Token(Token = "0x200059E")]
public class AirlockSpawnPoint : AbstractSpawnPoint
{
	[Token(Token = "0x200059F")]
	[CompilerGenerated]
	private sealed class <HandleAirlockDoor>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AirlockSpawnPoint <>4__this;

		[Token(Token = "0x1700055B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002132")]
			[Address(RVA = "0x1247258", Offset = "0x1247258", VA = "0x1247258", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700055C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002134")]
			[Address(RVA = "0x12472A0", Offset = "0x12472A0", VA = "0x12472A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0x1246F1C", Offset = "0x1246F1C", VA = "0x1246F1C")]
		[DebuggerHidden]
		public <HandleAirlockDoor>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6002130")]
		[Address(RVA = "0x1246FCC", Offset = "0x1246FCC", VA = "0x1246FCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0x1246FD0", Offset = "0x1246FD0", VA = "0x1246FD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0x1247260", Offset = "0x1247260", VA = "0x1247260", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	[UnityEngine.Tooltip("The door blocking off the spawn room.")]
	[SerializeField]
	private Door m_door;

	[Token(Token = "0x4001B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[UnityEngine.Tooltip("A zone that surrounds the spawn room. The door only shuts once all agents are out of this zone.")]
	private Zone m_containerZone;

	[Token(Token = "0x4001B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("The minimum amount of time to leave the door open for, in seconds. The door may remain open longer than this if agents need more time to get out.")]
	[Min(0f)]
	[SerializeField]
	private float m_minimumDoorOpeningTime;

	[Token(Token = "0x4001B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Coroutine m_doorCoroutine;

	[Token(Token = "0x600212C")]
	[Address(RVA = "0x1246EA8", Offset = "0x1246EA8", VA = "0x1246EA8")]
	[IteratorStateMachine(typeof(<HandleAirlockDoor>d__4))]
	private IEnumerator HandleAirlockDoor()
	{
		return null;
	}

	[Token(Token = "0x600212D")]
	[Address(RVA = "0x1246F44", Offset = "0x1246F44", VA = "0x1246F44")]
	private bool IsTriggerVolumeEmpty()
	{
		return default(bool);
	}

	[Token(Token = "0x600212E")]
	[Address(RVA = "0x1246F6C", Offset = "0x1246F6C", VA = "0x1246F6C")]
	public AirlockSpawnPoint()
	{
	}
}
[Token(Token = "0x20005A0")]
public class BasicSpawnPoint : AbstractSpawnPoint
{
	[Token(Token = "0x4001B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[UnityEngine.Tooltip("After spawning a squad, don't accept any further spawns until this much time has elapsed (seconds). Set to zero to allow immediate successive spawns.")]
	[FormerlySerializedAs("m_spawnCooldown")]
	[Space]
	[Min(0f)]
	private float m_postSpawnCooldown;

	[Token(Token = "0x4001B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float? m_latestSpawnTime;

	[Token(Token = "0x6002135")]
	[Address(RVA = "0x12472A8", Offset = "0x12472A8", VA = "0x12472A8")]
	public BasicSpawnPoint()
	{
	}
}
[Token(Token = "0x20005A1")]
public class CinematicSpawnPoint : BasicSpawnPoint, ITimelinePlayer
{
	[Token(Token = "0x20005A2")]
	public enum NonPlayerAgentMode
	{
		[Token(Token = "0x4001B98")]
		Gameplay,
		[Token(Token = "0x4001B99")]
		Cinematic
	}

	[Token(Token = "0x4001B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Cinematic Data")]
	[SerializeField]
	private PlayableDirector m_playable;

	[Token(Token = "0x4001B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Game object with PlayableDirector component in an other scene - optional.")]
	[SerializeField]
	private GuidReference m_externalPlayableReference;

	[Token(Token = "0x4001B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Signal to listen for that signifies end of cinematic.")]
	[SerializeField]
	private SignalAsset m_endSignal;

	[Token(Token = "0x4001B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform m_parentAgentTo;

	[Token(Token = "0x4001B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private UnityEvent m_onPlayableComplete;

	[Token(Token = "0x4001B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private IAgent m_agent;

	[Token(Token = "0x1700055D")]
	public PlayableDirector Playable
	{
		[Token(Token = "0x6002136")]
		[Address(RVA = "0x1247300", Offset = "0x1247300", VA = "0x1247300")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700055E")]
	public Action OnTimelineComplete
	{
		[Token(Token = "0x6002137")]
		[Address(RVA = "0x1247450", Offset = "0x1247450", VA = "0x1247450", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6002138")]
		[Address(RVA = "0x1247458", Offset = "0x1247458", VA = "0x1247458", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002139")]
	[Address(RVA = "0x1247460", Offset = "0x1247460", VA = "0x1247460")]
	public void Start()
	{
	}

	[Token(Token = "0x600213A")]
	[Address(RVA = "0x1247620", Offset = "0x1247620", VA = "0x1247620", Slot = "4")]
	public bool Play(TimelineGroup group, DirectorWrapMode wrapMode = DirectorWrapMode.None, [Optional] Animator animator)
	{
		return default(bool);
	}

	[Token(Token = "0x600213B")]
	[Address(RVA = "0x1247848", Offset = "0x1247848", VA = "0x1247848", Slot = "5")]
	public void Stop()
	{
	}

	[Token(Token = "0x600213C")]
	[Address(RVA = "0x1247864", Offset = "0x1247864", VA = "0x1247864")]
	private void OnCimematicComplete()
	{
	}

	[Token(Token = "0x600213D")]
	[Address(RVA = "0x12478A8", Offset = "0x12478A8", VA = "0x12478A8")]
	public CinematicSpawnPoint()
	{
	}
}
[Token(Token = "0x20005A3")]
public class MultiplayerSpawnPoint : BasicSpawnPoint
{
	[Token(Token = "0x20005A4")]
	private enum SpawnFilterMode
	{
		[Token(Token = "0x4001B9E")]
		ExcludeSpecificAgentPrefabs,
		[Token(Token = "0x4001B9F")]
		IncludeSpecificAgentPrefabs
	}

	[Token(Token = "0x4001B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private SpawnFilterMode m_spawnFilterMode;

	[Token(Token = "0x4001B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[FormerlySerializedAs("m_specificAgentPrefabs")]
	[SerializeField]
	private EnemyType[] m_specificSpawnables;

	[Token(Token = "0x4001B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	[SerializeField]
	private string[] m_spawnGroups;

	[Token(Token = "0x600213E")]
	[Address(RVA = "0x12478AC", Offset = "0x12478AC", VA = "0x12478AC")]
	public bool IsSquadDataValidForSpawn(SpawnWaveDefinition.AgentSpawn agent)
	{
		return default(bool);
	}

	[Token(Token = "0x600213F")]
	[Address(RVA = "0x1247A90", Offset = "0x1247A90", VA = "0x1247A90")]
	public bool IsSpawnBelongingToGroupList(string[] spawnGroups)
	{
		return default(bool);
	}

	[Token(Token = "0x6002140")]
	[Address(RVA = "0x1247B38", Offset = "0x1247B38", VA = "0x1247B38")]
	public void Start()
	{
	}

	[Token(Token = "0x6002141")]
	[Address(RVA = "0x1247BA0", Offset = "0x1247BA0", VA = "0x1247BA0")]
	public MultiplayerSpawnPoint()
	{
	}
}
[Token(Token = "0x20005A5")]
[CreateAssetMenu(menuName = "Cabin/Animation/SpawnTypes")]
public class SpawnAnimationType : ScriptableObject
{
	[Token(Token = "0x4001BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string animationType;

	[Token(Token = "0x4001BA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int m_spawnAnimation;

	[Token(Token = "0x1700055F")]
	public int SpawnAnimation
	{
		[Token(Token = "0x6002144")]
		[Address(RVA = "0x1247CB0", Offset = "0x1247CB0", VA = "0x1247CB0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6002145")]
		[Address(RVA = "0x1247CD4", Offset = "0x1247CD4", VA = "0x1247CD4")]
		set
		{
		}
	}

	[Token(Token = "0x6002142")]
	[Address(RVA = "0x1247C38", Offset = "0x1247C38", VA = "0x1247C38")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6002143")]
	[Address(RVA = "0x1247C3C", Offset = "0x1247C3C", VA = "0x1247C3C")]
	public void SetAnimationHash()
	{
	}

	[Token(Token = "0x6002146")]
	[Address(RVA = "0x1247CDC", Offset = "0x1247CDC", VA = "0x1247CDC")]
	public SpawnAnimationType()
	{
	}
}
[Token(Token = "0x20005A6")]
public class TestItemSpawner : MonoBehaviour
{
	[Token(Token = "0x20005A7")]
	[CompilerGenerated]
	private sealed class <SpawnItem>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TestItemSpawner <>4__this;

		[Token(Token = "0x17000560")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002150")]
			[Address(RVA = "0x12481CC", Offset = "0x12481CC", VA = "0x12481CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000561")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002152")]
			[Address(RVA = "0x1248214", Offset = "0x1248214", VA = "0x1248214", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600214D")]
		[Address(RVA = "0x1247FE0", Offset = "0x1247FE0", VA = "0x1247FE0")]
		[DebuggerHidden]
		public <SpawnItem>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600214E")]
		[Address(RVA = "0x1248068", Offset = "0x1248068", VA = "0x1248068", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600214F")]
		[Address(RVA = "0x124806C", Offset = "0x124806C", VA = "0x124806C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002151")]
		[Address(RVA = "0x12481D4", Offset = "0x12481D4", VA = "0x12481D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001BA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_prefab;

	[Token(Token = "0x4001BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_delay;

	[Token(Token = "0x6002147")]
	[Address(RVA = "0x1247CE4", Offset = "0x1247CE4", VA = "0x1247CE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002148")]
	[Address(RVA = "0x1247DDC", Offset = "0x1247DDC", VA = "0x1247DDC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002149")]
	[Address(RVA = "0x1247ED4", Offset = "0x1247ED4", VA = "0x1247ED4")]
	private void HandleLevelReset()
	{
	}

	[Token(Token = "0x600214A")]
	[Address(RVA = "0x1247F6C", Offset = "0x1247F6C", VA = "0x1247F6C")]
	[IteratorStateMachine(typeof(<SpawnItem>d__5))]
	private IEnumerator SpawnItem()
	{
		return null;
	}

	[Token(Token = "0x600214B")]
	[Address(RVA = "0x1248008", Offset = "0x1248008", VA = "0x1248008")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600214C")]
	[Address(RVA = "0x1248058", Offset = "0x1248058", VA = "0x1248058")]
	public TestItemSpawner()
	{
	}
}
[Token(Token = "0x20005A8")]
public class TestSpawner : MonoBehaviour
{
	[Token(Token = "0x20005A9")]
	[CompilerGenerated]
	private sealed class <ChildCoroutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000564")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002166")]
			[Address(RVA = "0x12495B8", Offset = "0x12495B8", VA = "0x12495B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000565")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002168")]
			[Address(RVA = "0x1249600", Offset = "0x1249600", VA = "0x1249600", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002163")]
		[Address(RVA = "0x1249304", Offset = "0x1249304", VA = "0x1249304")]
		[DebuggerHidden]
		public <ChildCoroutine>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6002164")]
		[Address(RVA = "0x12493DC", Offset = "0x12493DC", VA = "0x12493DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002165")]
		[Address(RVA = "0x12493E0", Offset = "0x12493E0", VA = "0x12493E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002167")]
		[Address(RVA = "0x12495C0", Offset = "0x12495C0", VA = "0x12495C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20005AA")]
	[CompilerGenerated]
	private sealed class <ParentCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TestSpawner <>4__this;

		[Token(Token = "0x17000566")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600216C")]
			[Address(RVA = "0x1249698", Offset = "0x1249698", VA = "0x1249698", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000567")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600216E")]
			[Address(RVA = "0x12496E0", Offset = "0x12496E0", VA = "0x12496E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002169")]
		[Address(RVA = "0x124932C", Offset = "0x124932C", VA = "0x124932C")]
		[DebuggerHidden]
		public <ParentCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x600216A")]
		[Address(RVA = "0x1249608", Offset = "0x1249608", VA = "0x1249608", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600216B")]
		[Address(RVA = "0x124960C", Offset = "0x124960C", VA = "0x124960C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600216D")]
		[Address(RVA = "0x12496A0", Offset = "0x12496A0", VA = "0x12496A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[InterfaceObject(typeof(ISpawnable))]
	[UnityEngine.Tooltip("Lis tof enemies that can be spawned kia a numberic key press.")]
	[SerializeField]
	private List<UnityEngine.Object> m_spawnableEnemies;

	[Token(Token = "0x4001BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool m_useKeyboardToSpawn;

	[Token(Token = "0x4001BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Gamne event to listen to for spawning enemies.")]
	private GameEvent m_spawnerGameEvent;

	[Token(Token = "0x4001BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_active;

	[Token(Token = "0x4001BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_timer;

	[Token(Token = "0x4001BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ISpawnable m_currentSpawnable;

	[Token(Token = "0x17000562")]
	public ItemDrop[] itemsToDrop
	{
		[Token(Token = "0x6002153")]
		[Address(RVA = "0x124821C", Offset = "0x124821C", VA = "0x124821C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6002154")]
		[Address(RVA = "0x1248224", Offset = "0x1248224", VA = "0x1248224")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000563")]
	public GuidComponent spitterAttackPositionsRoot
	{
		[Token(Token = "0x6002155")]
		[Address(RVA = "0x124822C", Offset = "0x124822C", VA = "0x124822C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6002156")]
		[Address(RVA = "0x1248234", Offset = "0x1248234", VA = "0x1248234")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002157")]
	[Address(RVA = "0x124823C", Offset = "0x124823C", VA = "0x124823C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002158")]
	[Address(RVA = "0x1248640", Offset = "0x1248640", VA = "0x1248640")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002159")]
	[Address(RVA = "0x1248818", Offset = "0x1248818", VA = "0x1248818")]
	private void HandleSpawnEvent(UnityEngine.Object value)
	{
	}

	[Token(Token = "0x600215A")]
	[Address(RVA = "0x1248890", Offset = "0x1248890", VA = "0x1248890")]
	public void Spawn(ISpawnable enemy)
	{
	}

	[Token(Token = "0x600215B")]
	[Address(RVA = "0x1248910", Offset = "0x1248910", VA = "0x1248910")]
	public void Stop()
	{
	}

	[Token(Token = "0x600215C")]
	[Address(RVA = "0x1248918", Offset = "0x1248918", VA = "0x1248918")]
	private void Update()
	{
	}

	[Token(Token = "0x600215D")]
	[Address(RVA = "0x1248C80", Offset = "0x1248C80", VA = "0x1248C80")]
	public void RequestSpawnAgent(ISpawnable spawnable, Vector3 pos, Quaternion rotation)
	{
	}

	[Token(Token = "0x600215E")]
	[Address(RVA = "0x1248DD8", Offset = "0x1248DD8", VA = "0x1248DD8")]
	private void HandleRequestSpawnAgent(RequestSpawnSpawnable evnt)
	{
	}

	[Token(Token = "0x600215F")]
	[Address(RVA = "0x1249210", Offset = "0x1249210", VA = "0x1249210")]
	private void SomeCode()
	{
	}

	[Token(Token = "0x6002160")]
	[Address(RVA = "0x12492A4", Offset = "0x12492A4", VA = "0x12492A4")]
	[IteratorStateMachine(typeof(<ChildCoroutine>d__23))]
	private IEnumerator ChildCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6002161")]
	[Address(RVA = "0x1249230", Offset = "0x1249230", VA = "0x1249230")]
	[IteratorStateMachine(typeof(<ParentCoroutine>d__24))]
	private IEnumerator ParentCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6002162")]
	[Address(RVA = "0x1249354", Offset = "0x1249354", VA = "0x1249354")]
	public TestSpawner()
	{
	}
}
[Token(Token = "0x20005AB")]
public class MultiplayerSpectatorManager : PT.Singleton<MultiplayerSpectatorManager>
{
	[Token(Token = "0x17000568")]
	public int CurrentSpectatorPointIndex
	{
		[Token(Token = "0x600216F")]
		[Address(RVA = "0x12496E8", Offset = "0x12496E8", VA = "0x12496E8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6002170")]
		[Address(RVA = "0x12496F0", Offset = "0x12496F0", VA = "0x12496F0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002171")]
	[Address(RVA = "0x12496F8", Offset = "0x12496F8", VA = "0x12496F8")]
	public MultiplayerSpectatorManager()
	{
	}
}
[Token(Token = "0x20005AC")]
[DisallowMultipleComponent]
public class MultiplayerSpectatorPointDirectory : PT.SceneContentsDirectory.SceneContentsDirectory<MultiplayerSpectatorPoint, MultiplayerSpectatorPointDirectory>
{
	[Token(Token = "0x6002172")]
	[Address(RVA = "0x1249764", Offset = "0x1249764", VA = "0x1249764")]
	public MultiplayerSpectatorPointDirectory()
	{
	}
}
[Token(Token = "0x20005AD")]
public class ButtonTextColorHandler : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
{
	[Token(Token = "0x4001BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Color m_defaultColor;

	[Token(Token = "0x4001BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color m_highlightedColor;

	[Token(Token = "0x4001BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Color m_selectedColor;

	[Token(Token = "0x4001BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Color m_disabledColor;

	[Token(Token = "0x4001BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TMP_Text m_text;

	[Token(Token = "0x4001BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Selectable m_selectable;

	[Token(Token = "0x4001BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_isPointerInside;

	[Token(Token = "0x4001BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool m_isSelected;

	[Token(Token = "0x6002173")]
	[Address(RVA = "0x12497D0", Offset = "0x12497D0", VA = "0x12497D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002174")]
	[Address(RVA = "0x12498D0", Offset = "0x12498D0", VA = "0x12498D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002175")]
	[Address(RVA = "0x124994C", Offset = "0x124994C", VA = "0x124994C", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6002176")]
	[Address(RVA = "0x12499B8", Offset = "0x12499B8", VA = "0x12499B8", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6002177")]
	[Address(RVA = "0x1249A20", Offset = "0x1249A20", VA = "0x1249A20", Slot = "6")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6002178")]
	[Address(RVA = "0x1249A58", Offset = "0x1249A58", VA = "0x1249A58", Slot = "7")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6002179")]
	[Address(RVA = "0x1249AC0", Offset = "0x1249AC0", VA = "0x1249AC0")]
	public ButtonTextColorHandler()
	{
	}
}
[Token(Token = "0x20005AE")]
public class CampaignLevelListDisplay : CachedMonoBehaviour
{
	[Token(Token = "0x4001BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private HubScene m_hubScene;

	[Token(Token = "0x4001BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public Transform m_buttonParent;

	[Token(Token = "0x4001BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_buttonTemplate;

	[Token(Token = "0x600217A")]
	[Address(RVA = "0x1249AF4", Offset = "0x1249AF4", VA = "0x1249AF4")]
	private void Start()
	{
	}

	[Token(Token = "0x600217B")]
	[Address(RVA = "0x1249D44", Offset = "0x1249D44", VA = "0x1249D44")]
	public CampaignLevelListDisplay()
	{
	}
}
[Token(Token = "0x20005AF")]
public class CheckpointPanel : Panel
{
	[Token(Token = "0x600217C")]
	[Address(RVA = "0x1249D4C", Offset = "0x1249D4C", VA = "0x1249D4C")]
	public CheckpointPanel()
	{
	}
}
[Token(Token = "0x20005B0")]
public class ControlsContent : MonoBehaviour
{
	[Token(Token = "0x4001BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Control Schemes")]
	[SerializeField]
	private GameObject m_freeLocomotionControls;

	[Token(Token = "0x4001BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject m_pointWalkControls;

	[Token(Token = "0x600217D")]
	[Address(RVA = "0x1249D54", Offset = "0x1249D54", VA = "0x1249D54")]
	private void Start()
	{
	}

	[Token(Token = "0x600217E")]
	[Address(RVA = "0x1249D58", Offset = "0x1249D58", VA = "0x1249D58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600217F")]
	[Address(RVA = "0x1249D90", Offset = "0x1249D90", VA = "0x1249D90")]
	public ControlsContent()
	{
	}
}
[Token(Token = "0x20005B1")]
public class ControlsPanel : Panel
{
	[Token(Token = "0x20005B2")]
	public class state_SelectControlsScreenOption : ButtonHandlerState<ControlsPanel>
	{
		[Token(Token = "0x6002181")]
		[Address(RVA = "0x1249DA0", Offset = "0x1249DA0", VA = "0x1249DA0", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x6002182")]
		[Address(RVA = "0x1249FC8", Offset = "0x1249FC8", VA = "0x1249FC8")]
		public state_SelectControlsScreenOption()
		{
		}
	}

	[Token(Token = "0x6002180")]
	[Address(RVA = "0x1249D98", Offset = "0x1249D98", VA = "0x1249D98")]
	public ControlsPanel()
	{
	}
}
[Token(Token = "0x20005B3")]
public class CreditsPanel : Panel
{
	[Token(Token = "0x20005B4")]
	public class state_SelectSettingScreenOption : ButtonHandlerState<SettingsPanel>
	{
		[Token(Token = "0x6002187")]
		[Address(RVA = "0x124A150", Offset = "0x124A150", VA = "0x124A150", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x124A278", Offset = "0x124A278", VA = "0x124A278")]
		public state_SelectSettingScreenOption()
		{
		}
	}

	[Token(Token = "0x4001BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ScrollRect m_scrollRect;

	[Token(Token = "0x4001BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float m_scrollSpeed;

	[Token(Token = "0x4001BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 m_scrollRectStartingPosition;

	[Token(Token = "0x6002183")]
	[Address(RVA = "0x124A010", Offset = "0x124A010", VA = "0x124A010")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002184")]
	[Address(RVA = "0x124A044", Offset = "0x124A044", VA = "0x124A044", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002185")]
	[Address(RVA = "0x124A07C", Offset = "0x124A07C", VA = "0x124A07C")]
	private void Update()
	{
	}

	[Token(Token = "0x6002186")]
	[Address(RVA = "0x124A140", Offset = "0x124A140", VA = "0x124A140")]
	public CreditsPanel()
	{
	}
}
[Token(Token = "0x20005B5")]
[AttributeUsage(AttributeTargets.Method)]
public class ButtonCreatorAttribute : Attribute
{
	[Token(Token = "0x4001BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Token(Token = "0x6002189")]
	[Address(RVA = "0x124A2C0", Offset = "0x124A2C0", VA = "0x124A2C0")]
	public ButtonCreatorAttribute(string name)
	{
	}
}
[Token(Token = "0x20005B6")]
public class ButtonCreator : MonoBehaviour
{
	[Token(Token = "0x4001BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x600218A")]
	[Address(RVA = "0x124A2F0", Offset = "0x124A2F0", VA = "0x124A2F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600218B")]
	[Address(RVA = "0x124A710", Offset = "0x124A710", VA = "0x124A710")]
	private void Update()
	{
	}

	[Token(Token = "0x600218C")]
	[Address(RVA = "0x124A714", Offset = "0x124A714", VA = "0x124A714")]
	public ButtonCreator()
	{
	}
}
[Serializable]
[Token(Token = "0x20005B8")]
public class ButtonViewModel : IDataSource
{
	[Token(Token = "0x4001BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private string m_buttonName;

	[Token(Token = "0x17000569")]
	public string ButtonName
	{
		[Token(Token = "0x600218F")]
		[Address(RVA = "0x124A784", Offset = "0x124A784", VA = "0x124A784")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002190")]
		[Address(RVA = "0x124A680", Offset = "0x124A680", VA = "0x124A680")]
		set
		{
		}
	}

	[Token(Token = "0x6002191")]
	[Address(RVA = "0x124A678", Offset = "0x124A678", VA = "0x124A678")]
	public ButtonViewModel()
	{
	}
}
[Token(Token = "0x20005B9")]
public interface IButtonFunctionality
{
}
[Token(Token = "0x20005BA")]
public class DebugButtons : MonoBehaviour, IButtonFunctionality
{
	[Token(Token = "0x6002192")]
	[Address(RVA = "0x124A78C", Offset = "0x124A78C", VA = "0x124A78C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002193")]
	[Address(RVA = "0x124A790", Offset = "0x124A790", VA = "0x124A790")]
	[ButtonCreator("Dec")]
	public void DecrementRate()
	{
	}

	[Token(Token = "0x6002194")]
	[Address(RVA = "0x124A794", Offset = "0x124A794", VA = "0x124A794")]
	public DebugButtons()
	{
	}
}
[Token(Token = "0x20005BB")]
public class DebugLevelLoading : CachedMonoBehaviour
{
	[Token(Token = "0x20005BC")]
	[CompilerGenerated]
	private sealed class <LoadSceneRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugLevelLoading <>4__this;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string sceneName;

		[Token(Token = "0x1700056A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600219D")]
			[Address(RVA = "0x124AC14", Offset = "0x124AC14", VA = "0x124AC14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700056B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600219F")]
			[Address(RVA = "0x124AC5C", Offset = "0x124AC5C", VA = "0x124AC5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x124AA84", Offset = "0x124AA84", VA = "0x124AA84")]
		[DebuggerHidden]
		public <LoadSceneRoutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x124AB8C", Offset = "0x124AB8C", VA = "0x124AB8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x124AB90", Offset = "0x124AB90", VA = "0x124AB90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600219E")]
		[Address(RVA = "0x124AC1C", Offset = "0x124AC1C", VA = "0x124AC1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public List<string> m_actionGameScenes;

	[Token(Token = "0x4001BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public Transform m_buttonParent;

	[Token(Token = "0x4001BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_buttonTemplate;

	[Token(Token = "0x4001BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_sceneLoadingRoutineActive;

	[Token(Token = "0x6002195")]
	[Address(RVA = "0x124A79C", Offset = "0x124A79C", VA = "0x124A79C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002196")]
	[Address(RVA = "0x124A960", Offset = "0x124A960", VA = "0x124A960")]
	public void OnButtonClicked(GameObject button)
	{
	}

	[Token(Token = "0x6002197")]
	[Address(RVA = "0x124A9F4", Offset = "0x124A9F4", VA = "0x124A9F4")]
	[IteratorStateMachine(typeof(<LoadSceneRoutine>d__6))]
	private IEnumerator LoadSceneRoutine(string sceneName)
	{
		return null;
	}

	[Token(Token = "0x6002198")]
	[Address(RVA = "0x124AAAC", Offset = "0x124AAAC", VA = "0x124AAAC")]
	private void LoadScene(string sceneName)
	{
	}

	[Token(Token = "0x6002199")]
	[Address(RVA = "0x124AB04", Offset = "0x124AB04", VA = "0x124AB04")]
	public DebugLevelLoading()
	{
	}
}
[Token(Token = "0x20005BD")]
public class DebugPanelManager : MonoBehaviour
{
	[Token(Token = "0x4001BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_panelRoot;

	[Token(Token = "0x4001BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Transform> m_panels;

	[Token(Token = "0x4001BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_currentPanelIndex;

	[Token(Token = "0x60021A0")]
	[Address(RVA = "0x124AC64", Offset = "0x124AC64", VA = "0x124AC64")]
	private void Awake()
	{
	}

	[Token(Token = "0x60021A1")]
	[Address(RVA = "0x124AE80", Offset = "0x124AE80", VA = "0x124AE80")]
	public void ShowLeftPanel()
	{
	}

	[Token(Token = "0x60021A2")]
	[Address(RVA = "0x124AEEC", Offset = "0x124AEEC", VA = "0x124AEEC")]
	public void ShowRightPanel()
	{
	}

	[Token(Token = "0x60021A3")]
	[Address(RVA = "0x124AD8C", Offset = "0x124AD8C", VA = "0x124AD8C")]
	private void ShowPanel()
	{
	}

	[Token(Token = "0x60021A4")]
	[Address(RVA = "0x124AF58", Offset = "0x124AF58", VA = "0x124AF58")]
	public DebugPanelManager()
	{
	}
}
[Token(Token = "0x20005BE")]
public class DebugPlaceItemInFrontOfPlayer : MonoBehaviour
{
	[Token(Token = "0x4001BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_transformToMove;

	[Token(Token = "0x4001BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_distanceInFrontOfPlayer;

	[Token(Token = "0x4001BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool m_flip;

	[Token(Token = "0x60021A5")]
	[Address(RVA = "0x124AFE0", Offset = "0x124AFE0", VA = "0x124AFE0")]
	public void UpdatePosition()
	{
	}

	[Token(Token = "0x60021A6")]
	[Address(RVA = "0x124B150", Offset = "0x124B150", VA = "0x124B150")]
	public DebugPlaceItemInFrontOfPlayer()
	{
	}
}
[Token(Token = "0x20005BF")]
public class DebugToggleAssetActive : MonoBehaviour
{
	[Token(Token = "0x4001BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_asset;

	[Token(Token = "0x60021A7")]
	[Address(RVA = "0x124B168", Offset = "0x124B168", VA = "0x124B168")]
	public void ToggleActive()
	{
	}

	[Token(Token = "0x60021A8")]
	[Address(RVA = "0x124B19C", Offset = "0x124B19C", VA = "0x124B19C")]
	public DebugToggleAssetActive()
	{
	}
}
[Token(Token = "0x20005C0")]
public class DemoEndSlatePanel : Panel
{
	[Token(Token = "0x20005C1")]
	public class state_SelectDemoEndSlateScreenOption : ButtonHandlerState<DemoEndSlatePanel>
	{
		[Token(Token = "0x60021AA")]
		[Address(RVA = "0x124B1AC", Offset = "0x124B1AC", VA = "0x124B1AC", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0x124B2D4", Offset = "0x124B2D4", VA = "0x124B2D4")]
		public state_SelectDemoEndSlateScreenOption()
		{
		}
	}

	[Token(Token = "0x60021A9")]
	[Address(RVA = "0x124B1A4", Offset = "0x124B1A4", VA = "0x124B1A4")]
	public DemoEndSlatePanel()
	{
	}
}
[Token(Token = "0x20005C2")]
public class DevelopmentWarningScreen : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x60021AC")]
	[Address(RVA = "0x124B31C", Offset = "0x124B31C", VA = "0x124B31C")]
	public DevelopmentWarningScreen()
	{
	}
}
[Token(Token = "0x20005C3")]
public class DevPanel : Panel
{
	[Token(Token = "0x60021AD")]
	[Address(RVA = "0x124B324", Offset = "0x124B324", VA = "0x124B324")]
	public DevPanel()
	{
	}
}
[Token(Token = "0x20005C4")]
[AddComponentMenu("UI/Effects/TiledFill", 16)]
public class TiledFill : BaseMeshEffect
{
	[Token(Token = "0x4001BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector2 m_tiling;

	[Token(Token = "0x60021AE")]
	[Address(RVA = "0x124B32C", Offset = "0x124B32C", VA = "0x124B32C", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x60021AF")]
	[Address(RVA = "0x124B4E4", Offset = "0x124B4E4", VA = "0x124B4E4")]
	public TiledFill()
	{
	}
}
[Token(Token = "0x20005C5")]
[ExecuteInEditMode]
public class GraphicUVCreator : BaseMeshEffect
{
	[Token(Token = "0x4001BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform m_parentRect;

	[Token(Token = "0x1700056C")]
	public RectTransform ParentRect
	{
		[Token(Token = "0x60021B0")]
		[Address(RVA = "0x124B53C", Offset = "0x124B53C", VA = "0x124B53C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60021B1")]
		[Address(RVA = "0x124B544", Offset = "0x124B544", VA = "0x124B544")]
		set
		{
		}
	}

	[Token(Token = "0x60021B2")]
	[Address(RVA = "0x124B61C", Offset = "0x124B61C", VA = "0x124B61C", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x60021B3")]
	[Address(RVA = "0x124B894", Offset = "0x124B894", VA = "0x124B894")]
	public GraphicUVCreator()
	{
	}
}
[Token(Token = "0x20005C6")]
[ExecuteInEditMode]
public class ParentUVCreator : MonoBehaviour
{
	[Token(Token = "0x4001BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_excludeThis;

	[Token(Token = "0x60021B4")]
	[Address(RVA = "0x124B89C", Offset = "0x124B89C", VA = "0x124B89C")]
	private void Start()
	{
	}

	[Token(Token = "0x60021B5")]
	[Address(RVA = "0x124B8A0", Offset = "0x124B8A0", VA = "0x124B8A0")]
	private void AddChildUVCreators()
	{
	}

	[Token(Token = "0x60021B6")]
	[Address(RVA = "0x124BA74", Offset = "0x124BA74", VA = "0x124BA74")]
	public ParentUVCreator()
	{
	}
}
[Token(Token = "0x20005C7")]
public class EndGameCharacterStats : AutoTweenPanel<EndGameCharacterStats>
{
	[Token(Token = "0x4001BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private MetaUIViewModel m_metaViewModel;

	[Token(Token = "0x4001BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[UnityEngine.Tooltip("Speed players normalized xp bar will grow in xp units per second.")]
	private float m_xpBarSpeed;

	[Token(Token = "0x4001BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float m_minXpBarLevelUpDuration;

	[Token(Token = "0x4001BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float m_maxXpBarLevelUpDuration;

	[Token(Token = "0x4001BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private ScrollRect m_scrollRect;

	[Token(Token = "0x4001BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Button Panel")]
	[SerializeField]
	private Button m_backToHubButton;

	[Token(Token = "0x4001BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Header("Button Panel")]
	private Button m_retryButton;

	[Token(Token = "0x4001BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int m_previousXp;

	[Token(Token = "0x4001BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private int m_currentXp;

	[Token(Token = "0x4001BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_duration;

	[Token(Token = "0x4001BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float m_timer;

	[Token(Token = "0x4001BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool m_introFinished;

	[Token(Token = "0x4001BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int m_previousRank;

	[Token(Token = "0x1700056D")]
	private int maxXp
	{
		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x124BA84", Offset = "0x124BA84", VA = "0x124BA84")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60021B8")]
	[Address(RVA = "0x124BAD8", Offset = "0x124BAD8", VA = "0x124BAD8", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60021B9")]
	[Address(RVA = "0x124BFE4", Offset = "0x124BFE4", VA = "0x124BFE4", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60021BA")]
	[Address(RVA = "0x124C0B8", Offset = "0x124C0B8", VA = "0x124C0B8", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60021BB")]
	[Address(RVA = "0x124BF44", Offset = "0x124BF44", VA = "0x124BF44")]
	private void UpadateXpProgress(int xp)
	{
	}

	[Token(Token = "0x60021BC")]
	[Address(RVA = "0x124C28C", Offset = "0x124C28C", VA = "0x124C28C")]
	private void OnClickBackToHub()
	{
	}

	[Token(Token = "0x60021BD")]
	[Address(RVA = "0x124C308", Offset = "0x124C308", VA = "0x124C308")]
	private void OnClickRetry()
	{
	}

	[Token(Token = "0x60021BE")]
	[Address(RVA = "0x124C3B4", Offset = "0x124C3B4", VA = "0x124C3B4", Slot = "18")]
	protected override void OnTweenInFinished(IPanelTweener tweener)
	{
	}

	[Token(Token = "0x60021BF")]
	[Address(RVA = "0x124C418", Offset = "0x124C418", VA = "0x124C418")]
	public EndGameCharacterStats()
	{
	}
}
[Token(Token = "0x20005C8")]
public class EndGameWeaponStats : AutoTweenPanel<EndGameCharacterStats>
{
	[Token(Token = "0x4001BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private MetaUIViewModel m_metaViewModel;

	[Token(Token = "0x4001BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("Speed weapon normalized xp bar will grow in xp units per second.")]
	[SerializeField]
	private float m_barSpeed;

	[Token(Token = "0x4001BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float m_maxBarLevelUpDuration;

	[Token(Token = "0x4001BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_introFinished;

	[Token(Token = "0x4001BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float m_duration;

	[Token(Token = "0x4001BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float m_timer;

	[Token(Token = "0x60021C0")]
	[Address(RVA = "0x124C474", Offset = "0x124C474", VA = "0x124C474", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60021C1")]
	[Address(RVA = "0x124C99C", Offset = "0x124C99C", VA = "0x124C99C", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60021C2")]
	[Address(RVA = "0x124CB98", Offset = "0x124CB98", VA = "0x124CB98", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60021C3")]
	[Address(RVA = "0x124CDD4", Offset = "0x124CDD4", VA = "0x124CDD4", Slot = "18")]
	protected override void OnTweenInFinished(IPanelTweener tweener)
	{
	}

	[Token(Token = "0x60021C4")]
	[Address(RVA = "0x124CE38", Offset = "0x124CE38", VA = "0x124CE38")]
	public EndGameWeaponStats()
	{
	}
}
[Token(Token = "0x20005C9")]
public class EndGameWeaponUsed : AutoTweenPanel<EndGameCharacterStats>
{
	[Token(Token = "0x4001BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private MetaUIViewModel m_metaViewModel;

	[Token(Token = "0x60021C5")]
	[Address(RVA = "0x124CE8C", Offset = "0x124CE8C", VA = "0x124CE8C", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60021C6")]
	[Address(RVA = "0x124D384", Offset = "0x124D384", VA = "0x124D384", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60021C7")]
	[Address(RVA = "0x124D48C", Offset = "0x124D48C", VA = "0x124D48C")]
	public EndGameWeaponUsed()
	{
	}
}
[Token(Token = "0x20005CA")]
public class UI_CabinEndGame : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x20005CB")]
	public class state_ShowResults : ButtonHandlerState<UI_CabinEndGame>
	{
		[Token(Token = "0x60021C9")]
		[Address(RVA = "0x124D4DC", Offset = "0x124D4DC", VA = "0x124D4DC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x124D578", Offset = "0x124D578", VA = "0x124D578", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0x124D5EC", Offset = "0x124D5EC", VA = "0x124D5EC")]
		public state_ShowResults()
		{
		}
	}

	[Token(Token = "0x4001BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private MetaUIViewModel m_metaViewModel;

	[Token(Token = "0x60021C8")]
	[Address(RVA = "0x124D4D4", Offset = "0x124D4D4", VA = "0x124D4D4")]
	public UI_CabinEndGame()
	{
	}
}
[Token(Token = "0x20005CC")]
public class FrontEndScreen : ParentPanel
{
	[Token(Token = "0x4001BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_panelRoot;

	[Token(Token = "0x4001BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_controlRoot;

	[Token(Token = "0x4001BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public bool m_hideControlButtonsWhenSettingsPanelShown;

	[Token(Token = "0x4001BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	public Identifier m_settingsButtonID;

	[Token(Token = "0x4001BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public Identifier m_levelSelectButtonID;

	[Token(Token = "0x4001BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	public Identifier m_continueButtonID;

	[Token(Token = "0x4001BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public Identifier m_demoEndSlateButtonID;

	[Token(Token = "0x4001BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	public Identifier m_creditsButtonID;

	[Token(Token = "0x4001BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	public Button m_continueButton;

	[Token(Token = "0x4001BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	public Button m_hubButton;

	[Token(Token = "0x4001BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	public UI_MultiplayerHubMessage m_hordeMaintenance;

	[Token(Token = "0x4001BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	public UI_MultiplayerHubMessage m_versionMisMatch;

	[Token(Token = "0x4001BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	public UI_MultiplayerHubMessage m_HordeBeta;

	[Token(Token = "0x4001BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Identifier m_desiredPanel;

	[Token(Token = "0x60021CC")]
	[Address(RVA = "0x124D634", Offset = "0x124D634", VA = "0x124D634", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60021CD")]
	[Address(RVA = "0x124D7CC", Offset = "0x124D7CC", VA = "0x124D7CC", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60021CE")]
	[Address(RVA = "0x124D7D4", Offset = "0x124D7D4", VA = "0x124D7D4", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60021CF")]
	[Address(RVA = "0x124D838", Offset = "0x124D838", VA = "0x124D838")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60021D0")]
	[Address(RVA = "0x1249F70", Offset = "0x1249F70", VA = "0x1249F70")]
	public void ShowNavButtons(bool value)
	{
	}

	[Token(Token = "0x60021D1")]
	[Address(RVA = "0x124D6A0", Offset = "0x124D6A0", VA = "0x124D6A0")]
	public void RefreshContinueButton()
	{
	}

	[Token(Token = "0x60021D2")]
	[Address(RVA = "0x124D83C", Offset = "0x124D83C", VA = "0x124D83C")]
	public void ShowBetaWarning()
	{
	}

	[Token(Token = "0x60021D3")]
	[Address(RVA = "0x124D860", Offset = "0x124D860", VA = "0x124D860")]
	public FrontEndScreen()
	{
	}
}
[Token(Token = "0x20005CD")]
public class HeightCalibrationInlineButton : MonoBehaviour
{
	[Token(Token = "0x4001BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HeightCalibrator m_heightCalibrator;

	[Token(Token = "0x60021D4")]
	[Address(RVA = "0x124D870", Offset = "0x124D870", VA = "0x124D870")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x60021D5")]
	[Address(RVA = "0x124D8C0", Offset = "0x124D8C0", VA = "0x124D8C0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60021D6")]
	[Address(RVA = "0x124D8EC", Offset = "0x124D8EC", VA = "0x124D8EC")]
	public HeightCalibrationInlineButton()
	{
	}
}
[Token(Token = "0x20005CE")]
public class HeightCalibrationPanel : Panel
{
	[Token(Token = "0x20005CF")]
	public class State_HeightCalibration : ButtonHandlerState<HeightCalibrationPanel>
	{
		[Token(Token = "0x60021D8")]
		[Address(RVA = "0x124D8FC", Offset = "0x124D8FC", VA = "0x124D8FC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0x124DC68", Offset = "0x124DC68", VA = "0x124DC68")]
		private void OnRetryClicked()
		{
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x124DCE0", Offset = "0x124DCE0", VA = "0x124DCE0")]
		private void OnContinueClicked()
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x124DD4C", Offset = "0x124DD4C", VA = "0x124DD4C")]
		public State_HeightCalibration()
		{
		}
	}

	[Token(Token = "0x4001C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private HeightCalibrator m_heightCalibrator;

	[Token(Token = "0x60021D7")]
	[Address(RVA = "0x124D8F4", Offset = "0x124D8F4", VA = "0x124D8F4")]
	public HeightCalibrationPanel()
	{
	}
}
[Token(Token = "0x20005D0")]
public class HeightCalibrator : MonoBehaviour
{
	[Token(Token = "0x20005D1")]
	private enum CalibrationStep
	{
		[Token(Token = "0x4001C18")]
		Inactive,
		[Token(Token = "0x4001C19")]
		WaitForTPose,
		[Token(Token = "0x4001C1A")]
		ConfirmTPose,
		[Token(Token = "0x4001C1B")]
		FinalAdjustments
	}

	[Token(Token = "0x4001C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CalibrationStep m_currentStep;

	[Token(Token = "0x4001C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Vector3 m_uIScenePos;

	[Token(Token = "0x4001C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 m_uISceneRot;

	[Token(Token = "0x4001C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UIStringID m_instructionText;

	[Token(Token = "0x4001C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_instructionStringIdInactive;

	[Token(Token = "0x4001C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private string m_instructionStringIdWaitForTPose;

	[Token(Token = "0x4001C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private string m_instructionStringIdConfirmTPose;

	[Token(Token = "0x4001C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private string m_instructionStringIdFinalAdjustments;

	[Token(Token = "0x4001C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool m_immediatelyActive;

	[Token(Token = "0x4001C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject m_tPosePanel;

	[Token(Token = "0x4001C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject m_finalAdjustmentsParent;

	[Token(Token = "0x4001C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Button m_retryButton;

	[Token(Token = "0x4001C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Button m_continueButton;

	[Token(Token = "0x4001C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("How long to wait to confirm the T pose (the user must stay still for this duration).")]
	private float m_poseConfirmationDuration;

	[Token(Token = "0x4001C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[UnityEngine.Tooltip("Only accept poses where the margin the player moved their hands around in while calibrating is less than this. Smaller values are less forgiving.")]
	[Min(0f)]
	[SerializeField]
	private float m_poseMaximumMargin;

	[Token(Token = "0x4001C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_poseConfirmationTimer;

	[Token(Token = "0x4001C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool m_waitingForTriggerRelease;

	[Token(Token = "0x4001C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<float> m_poseConfirmationSamples;

	[Token(Token = "0x4001C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float? m_currentEstimatedArmBreadth;

	[Token(Token = "0x4001C14")]
	private const int c_minRequiredSamples = 10;

	[Token(Token = "0x4001C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action OnRetryClicked;

	[Token(Token = "0x4001C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Action OnContinueClicked;

	[Token(Token = "0x1700056E")]
	private bool BothTriggersHeld
	{
		[Token(Token = "0x60021E3")]
		[Address(RVA = "0x124E1E8", Offset = "0x124E1E8", VA = "0x124E1E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60021DC")]
	[Address(RVA = "0x124DD94", Offset = "0x124DD94", VA = "0x124DD94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60021DD")]
	[Address(RVA = "0x124DE18", Offset = "0x124DE18", VA = "0x124DE18")]
	private void Start()
	{
	}

	[Token(Token = "0x60021DE")]
	[Address(RVA = "0x124DE3C", Offset = "0x124DE3C", VA = "0x124DE3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60021DF")]
	[Address(RVA = "0x124DF2C", Offset = "0x124DF2C", VA = "0x124DF2C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60021E0")]
	[Address(RVA = "0x124D8A4", Offset = "0x124D8A4", VA = "0x124D8A4")]
	public void Activate()
	{
	}

	[Token(Token = "0x60021E1")]
	[Address(RVA = "0x124D8E0", Offset = "0x124D8E0", VA = "0x124D8E0")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x60021E2")]
	[Address(RVA = "0x124DF6C", Offset = "0x124DF6C", VA = "0x124DF6C")]
	private void Update()
	{
	}

	[Token(Token = "0x60021E4")]
	[Address(RVA = "0x124E2BC", Offset = "0x124E2BC", VA = "0x124E2BC")]
	private bool DetermineArmBreadth(out float? armBreadth)
	{
		return default(bool);
	}

	[Token(Token = "0x60021E5")]
	[Address(RVA = "0x124DE34", Offset = "0x124DE34", VA = "0x124DE34")]
	private void SetActiveStep(CalibrationStep newStep)
	{
	}

	[Token(Token = "0x60021E6")]
	[Address(RVA = "0x124E650", Offset = "0x124E650", VA = "0x124E650")]
	private void EnterStep(CalibrationStep step)
	{
	}

	[Token(Token = "0x60021E7")]
	[Address(RVA = "0x124DCD0", Offset = "0x124DCD0", VA = "0x124DCD0")]
	public void Retry()
	{
	}

	[Token(Token = "0x60021E8")]
	[Address(RVA = "0x124E408", Offset = "0x124E408", VA = "0x124E408")]
	private void RefreshInstructionText()
	{
	}

	[Token(Token = "0x60021E9")]
	[Address(RVA = "0x124E634", Offset = "0x124E634", VA = "0x124E634")]
	private float EstimateHeightFromArmBreadth(float armBreadth)
	{
		return default(float);
	}

	[Token(Token = "0x60021EA")]
	[Address(RVA = "0x124DAE4", Offset = "0x124DAE4", VA = "0x124DAE4")]
	public void RepositionCanvas(int inPoint)
	{
	}

	[Token(Token = "0x60021EB")]
	[Address(RVA = "0x124E758", Offset = "0x124E758", VA = "0x124E758")]
	public HeightCalibrator()
	{
	}
}
[Token(Token = "0x20005D2")]
public class HubLeaderboardEntry : MonoBehaviour
{
	[Token(Token = "0x4001C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Text field that displays the rank")]
	[SerializeField]
	private TextMeshProUGUI m_rankField;

	[Token(Token = "0x4001C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Text field that displays the name")]
	[SerializeField]
	private TextMeshProUGUI m_nameField;

	[Token(Token = "0x4001C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("Text field that displays the score")]
	[SerializeField]
	private TextMeshProUGUI m_scoreField;

	[Token(Token = "0x1700056F")]
	public int Rank
	{
		[Token(Token = "0x60021EE")]
		[Address(RVA = "0x124E7A4", Offset = "0x124E7A4", VA = "0x124E7A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000570")]
	public string DisplayName
	{
		[Token(Token = "0x60021EF")]
		[Address(RVA = "0x124E7EC", Offset = "0x124E7EC", VA = "0x124E7EC")]
		set
		{
		}
	}

	[Token(Token = "0x17000571")]
	public long Score
	{
		[Token(Token = "0x60021F0")]
		[Address(RVA = "0x124E810", Offset = "0x124E810", VA = "0x124E810")]
		set
		{
		}
	}

	[Token(Token = "0x60021F1")]
	[Address(RVA = "0x124E858", Offset = "0x124E858", VA = "0x124E858")]
	public HubLeaderboardEntry()
	{
	}
}
[Token(Token = "0x20005D3")]
public class HubScene : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x20005D4")]
	public class state_ButtonResponseOption : ButtonHandlerState<HubScene>
	{
		[Token(Token = "0x60021F5")]
		[Address(RVA = "0x124E948", Offset = "0x124E948", VA = "0x124E948", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0x124E9A0", Offset = "0x124E9A0", VA = "0x124E9A0", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0x124E9F8", Offset = "0x124E9F8", VA = "0x124E9F8", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0x124EBBC", Offset = "0x124EBBC", VA = "0x124EBBC")]
		public state_ButtonResponseOption()
		{
		}
	}

	[Token(Token = "0x4001C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject m_continueCampaignButton;

	[Token(Token = "0x4001C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Identifier m_continueSinglePlayer;

	[Token(Token = "0x4001C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Identifier m_loadSinglePlayerLevel;

	[Token(Token = "0x4001C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Identifier m_loadMultiPlayerLevel;

	[Token(Token = "0x4001C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Identifier m_returnToFrontEnd;

	[Token(Token = "0x60021F2")]
	[Address(RVA = "0x124E860", Offset = "0x124E860", VA = "0x124E860", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60021F3")]
	[Address(RVA = "0x124E8F0", Offset = "0x124E8F0", VA = "0x124E8F0")]
	public bool IsCampaignComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x60021F4")]
	[Address(RVA = "0x124E940", Offset = "0x124E940", VA = "0x124E940")]
	public HubScene()
	{
	}
}
[Token(Token = "0x20005D5")]
public class HubScoreBreakdownPanel : MonoBehaviour
{
	[Token(Token = "0x4001C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Object that contains the score info - used to hide score breakdown when there isn't one to display")]
	[SerializeField]
	private GameObject m_scoreHolder;

	[Token(Token = "0x4001C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Message shown to player when there is no score breakdown to show the player")]
	[SerializeField]
	private GameObject m_noScoresMessage;

	[Token(Token = "0x4001C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_killsCount;

	[Token(Token = "0x4001C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_killsSubtotal;

	[Token(Token = "0x4001C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshProUGUI m_headshotsCount;

	[Token(Token = "0x4001C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshProUGUI m_headshotsSubtotal;

	[Token(Token = "0x4001C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TextMeshProUGUI m_deathsCount;

	[Token(Token = "0x4001C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private TextMeshProUGUI m_deathsSubtotal;

	[Token(Token = "0x4001C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private TextMeshProUGUI m_timeTaken;

	[Token(Token = "0x4001C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private TextMeshProUGUI m_timeBonusSubtotal;

	[Token(Token = "0x4001C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private TextMeshProUGUI m_total;

	[Token(Token = "0x4001C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int m_currentLevelId;

	[Token(Token = "0x60021F9")]
	[Address(RVA = "0x124EC04", Offset = "0x124EC04", VA = "0x124EC04")]
	private void Awake()
	{
	}

	[Token(Token = "0x60021FA")]
	[Address(RVA = "0x124EC3C", Offset = "0x124EC3C", VA = "0x124EC3C")]
	public void ShowChapterScore(int levelId)
	{
	}

	[Token(Token = "0x60021FB")]
	[Address(RVA = "0x124ED00", Offset = "0x124ED00", VA = "0x124ED00")]
	private void Populate()
	{
	}

	[Token(Token = "0x60021FC")]
	[Address(RVA = "0x124EF5C", Offset = "0x124EF5C", VA = "0x124EF5C")]
	public HubScoreBreakdownPanel()
	{
	}
}
[Token(Token = "0x20005D6")]
public class CabinMenuButton : Button
{
	[Token(Token = "0x4001C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int m_connectionIssueHash;

	[Token(Token = "0x60021FD")]
	[Address(RVA = "0x124EF64", Offset = "0x124EF64", VA = "0x124EF64", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60021FE")]
	[Address(RVA = "0x124EFC0", Offset = "0x124EFC0", VA = "0x124EFC0")]
	public void SetInteractable(bool isInteractable, bool isConnection)
	{
	}

	[Token(Token = "0x60021FF")]
	[Address(RVA = "0x124F0A0", Offset = "0x124F0A0", VA = "0x124F0A0")]
	public CabinMenuButton()
	{
	}
}
[Token(Token = "0x20005D7")]
public class ChapterIntro : MonoBehaviour
{
	[Token(Token = "0x4001C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_contentRoot;

	[Token(Token = "0x4001C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_chapterIndexLabel;

	[Token(Token = "0x4001C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_chapterNameLabel;

	[Token(Token = "0x4001C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_locationNameLabel;

	[Token(Token = "0x4001C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshProUGUI m_locationName2Label;

	[Token(Token = "0x4001C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PlayableDirector m_playableDirector;

	[Token(Token = "0x17000572")]
	public bool IsComplete
	{
		[Token(Token = "0x6002200")]
		[Address(RVA = "0x124F0A8", Offset = "0x124F0A8", VA = "0x124F0A8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002201")]
	[Address(RVA = "0x124F0D0", Offset = "0x124F0D0", VA = "0x124F0D0")]
	public void Show(GameLevel currentGameLevel)
	{
	}

	[Token(Token = "0x6002202")]
	[Address(RVA = "0x124F284", Offset = "0x124F284", VA = "0x124F284")]
	public ChapterIntro()
	{
	}
}
[Token(Token = "0x20005D8")]
public class HeadlockedDisplayController : MonoBehaviour
{
	[Token(Token = "0x20005D9")]
	[CompilerGenerated]
	private sealed class <ShowMessage>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshProUGUI textLabel;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string message;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HeadlockedDisplayController <>4__this;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float duration;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float postDelay;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color <color>5__2;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <fadeSpeed>5__3;

		[Token(Token = "0x17000573")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600220F")]
			[Address(RVA = "0x124FBCC", Offset = "0x124FBCC", VA = "0x124FBCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000574")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002211")]
			[Address(RVA = "0x124FC14", Offset = "0x124FC14", VA = "0x124FC14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x124F65C", Offset = "0x124F65C", VA = "0x124F65C")]
		[DebuggerHidden]
		public <ShowMessage>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0x124F8B0", Offset = "0x124F8B0", VA = "0x124F8B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0x124F8B4", Offset = "0x124F8B4", VA = "0x124F8B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0x124FBD4", Offset = "0x124FBD4", VA = "0x124FBD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_mainRoot;

	[Token(Token = "0x4001C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	[SerializeField]
	private TextMeshProUGUI m_errorTextLabel;

	[Token(Token = "0x4001C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_debugTextLabel;

	[Token(Token = "0x4001C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject m_errorNotification;

	[Token(Token = "0x4001C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Min(0f)]
	private float m_errorNotificationLingerTime;

	[Token(Token = "0x4001C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshProUGUI m_objectiveTextLabel;

	[Token(Token = "0x4001C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool m_showObjective;

	[Token(Token = "0x4001C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_loadingImage;

	[Token(Token = "0x4001C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_latestErrorNotificationTime;

	[Token(Token = "0x4001C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_debugTextLabelAlpha;

	[Token(Token = "0x4001C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Queue<string> m_objectiveTextQueue;

	[Token(Token = "0x6002203")]
	[Address(RVA = "0x124F28C", Offset = "0x124F28C", VA = "0x124F28C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002204")]
	[Address(RVA = "0x124F404", Offset = "0x124F404", VA = "0x124F404")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002205")]
	[Address(RVA = "0x124F318", Offset = "0x124F318", VA = "0x124F318")]
	private void RefreshMainRootVisibility()
	{
	}

	[Token(Token = "0x6002206")]
	[Address(RVA = "0x124F408", Offset = "0x124F408", VA = "0x124F408")]
	private void HandleLogMessage(string condition, string stacktrace, LogType type)
	{
	}

	[Token(Token = "0x6002207")]
	[Address(RVA = "0x124F4C4", Offset = "0x124F4C4", VA = "0x124F4C4")]
	public void ShowDebugText(string text)
	{
	}

	[Token(Token = "0x6002208")]
	[Address(RVA = "0x124F4FC", Offset = "0x124F4FC", VA = "0x124F4FC")]
	public void ShowObjectiveText(string msg, bool resetQueue = false)
	{
	}

	[Token(Token = "0x6002209")]
	[Address(RVA = "0x124F5A0", Offset = "0x124F5A0", VA = "0x124F5A0")]
	[IteratorStateMachine(typeof(<ShowMessage>d__17))]
	private IEnumerator ShowMessage(TextMeshProUGUI textLabel, float duration, string message, float postDelay)
	{
		return null;
	}

	[Token(Token = "0x600220A")]
	[Address(RVA = "0x124F684", Offset = "0x124F684", VA = "0x124F684")]
	private void Update()
	{
	}

	[Token(Token = "0x600220B")]
	[Address(RVA = "0x124F820", Offset = "0x124F820", VA = "0x124F820")]
	public HeadlockedDisplayController()
	{
	}
}
[Token(Token = "0x20005DA")]
public class HUD : MonoBehaviour
{
	[Token(Token = "0x20005DB")]
	private enum ActiveDialog
	{
		[Token(Token = "0x4001C6D")]
		None,
		[Token(Token = "0x4001C6E")]
		Hud,
		[Token(Token = "0x4001C6F")]
		World
	}

	[Token(Token = "0x20005DC")]
	[CompilerGenerated]
	private sealed class <DisplayAndSplitSubtitleRoutine>d__69 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string localizedSubtitle;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float duration;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HUD <>4__this;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string subtitleId;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string[] <splits>5__2;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <i>5__3;

		[Token(Token = "0x17000582")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002238")]
			[Address(RVA = "0x1251D74", Offset = "0x1251D74", VA = "0x1251D74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000583")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600223A")]
			[Address(RVA = "0x1251DBC", Offset = "0x1251DBC", VA = "0x1251DBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0x1251B74", Offset = "0x1251B74", VA = "0x1251B74")]
		[DebuggerHidden]
		public <DisplayAndSplitSubtitleRoutine>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0x1251B9C", Offset = "0x1251B9C", VA = "0x1251B9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0x1251BA0", Offset = "0x1251BA0", VA = "0x1251BA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002239")]
		[Address(RVA = "0x1251D7C", Offset = "0x1251D7C", VA = "0x1251D7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("m_debugHud")]
	[SerializeField]
	private HeadlockedDisplayController m_headlockedDisplayController;

	[Token(Token = "0x4001C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PlayTestStopScreen m_playTestStopScreen;

	[Token(Token = "0x4001C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private StandaloneHUDMessage m_standaloneHudMessage;

	[Token(Token = "0x4001C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private MultiplayerHUD m_multiplayerHud;

	[Token(Token = "0x4001C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ObjectiveDebugger m_objectiveDebugger;

	[Token(Token = "0x4001C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Tutorial display")]
	[SerializeField]
	private TutorialDialog m_tutorialDialogHUDPrefab;

	[Token(Token = "0x4001C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TutorialDialog m_tutorialDialogWorldPrefab;

	[Token(Token = "0x4001C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform m_hudTutorialDialogParent;

	[Token(Token = "0x4001C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Vector3 m_inWorldDialogScale;

	[Token(Token = "0x4001C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject m_defaultImageObject;

	[Token(Token = "0x4001C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private bool m_useInWorldFallbackImage;

	[Token(Token = "0x4001C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	[SerializeField]
	private bool m_useHudFallbackImage;

	[Token(Token = "0x4001C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Material m_hudImageMaterial;

	[Token(Token = "0x4001C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Material m_worldImageMaterial;

	[Token(Token = "0x4001C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private TutorialDialog m_tutorialDialogHUDInstance;

	[Token(Token = "0x4001C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private TutorialDialog m_tutorialDialogWorldInstance;

	[Token(Token = "0x4001C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ActiveDialog m_activeDialog;

	[Token(Token = "0x4001C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform m_transform;

	[Token(Token = "0x4001C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Subtitles")]
	[SerializeField]
	private GameObject m_subtitleOverlay;

	[Token(Token = "0x4001C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private TMP_Text m_subtitleText;

	[Token(Token = "0x4001C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Camera m_subtitleCamera;

	[Token(Token = "0x4001C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private string m_latestSubtitleId;

	[Token(Token = "0x4001C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Coroutine m_displaySubtitleRoutine;

	[Token(Token = "0x4001C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Header("Vignette")]
	[SerializeField]
	private CircularVignette m_circularVignette;

	[Token(Token = "0x4001C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	[FormerlySerializedAs("m_locomotionVignette")]
	private VrVignette m_locomotionStandardVignette;

	[Token(Token = "0x4001C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private VrVignette m_locomotionZoomVignette;

	[Token(Token = "0x4001C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private VrVignette m_damageVignette;

	[Token(Token = "0x4001C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("Full screen fades and blackouts")]
	[SerializeField]
	private ScreenFade m_screenFade;

	[Token(Token = "0x4001C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private ScreenFade m_chapterIntroScreenFade;

	[Token(Token = "0x4001C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private ScreenFade m_blinkFade;

	[Token(Token = "0x4001C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ScreenFade m_damageFade;

	[Token(Token = "0x4001C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private ScreenFade m_fsmFade;

	[Token(Token = "0x4001C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Header("Lut")]
	[Header("Audio")]
	[SerializeField]
	private Identifier m_ID;

	[Token(Token = "0x17000575")]
	public HeadlockedDisplayController HeadlockedDisplayController
	{
		[Token(Token = "0x6002212")]
		[Address(RVA = "0x124FC1C", Offset = "0x124FC1C", VA = "0x124FC1C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000576")]
	public PlayTestStopScreen PlayTestStopScreen
	{
		[Token(Token = "0x6002213")]
		[Address(RVA = "0x124FC24", Offset = "0x124FC24", VA = "0x124FC24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000577")]
	public CircularVignette CircularVignette
	{
		[Token(Token = "0x6002214")]
		[Address(RVA = "0x124FC2C", Offset = "0x124FC2C", VA = "0x124FC2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000578")]
	public VrVignette LocomotionStandardVignette
	{
		[Token(Token = "0x6002215")]
		[Address(RVA = "0x124FC34", Offset = "0x124FC34", VA = "0x124FC34")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000579")]
	public VrVignette LocomotionZoomVignette
	{
		[Token(Token = "0x6002216")]
		[Address(RVA = "0x124FC3C", Offset = "0x124FC3C", VA = "0x124FC3C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700057A")]
	public VrVignette DamageVignette
	{
		[Token(Token = "0x6002217")]
		[Address(RVA = "0x124FC44", Offset = "0x124FC44", VA = "0x124FC44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700057B")]
	public ScreenFade ScreenFade
	{
		[Token(Token = "0x6002218")]
		[Address(RVA = "0x124FC4C", Offset = "0x124FC4C", VA = "0x124FC4C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700057C")]
	public ScreenFade ChapterIntroScreenFade
	{
		[Token(Token = "0x6002219")]
		[Address(RVA = "0x124FC54", Offset = "0x124FC54", VA = "0x124FC54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700057D")]
	public ScreenFade BlinkFade
	{
		[Token(Token = "0x600221A")]
		[Address(RVA = "0x124FC5C", Offset = "0x124FC5C", VA = "0x124FC5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700057E")]
	public ScreenFade DamageFade
	{
		[Token(Token = "0x600221B")]
		[Address(RVA = "0x124FC64", Offset = "0x124FC64", VA = "0x124FC64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700057F")]
	public ScreenFade FsmFade
	{
		[Token(Token = "0x600221C")]
		[Address(RVA = "0x124FC6C", Offset = "0x124FC6C", VA = "0x124FC6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000580")]
	public MultiplayerHUD Multiplayer
	{
		[Token(Token = "0x600221D")]
		[Address(RVA = "0x124FC74", Offset = "0x124FC74", VA = "0x124FC74")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000581")]
	private bool HasActiveTutorialDialog
	{
		[Token(Token = "0x600222E")]
		[Address(RVA = "0x12509C8", Offset = "0x12509C8", VA = "0x12509C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600221E")]
	[Address(RVA = "0x124FC7C", Offset = "0x124FC7C", VA = "0x124FC7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600221F")]
	[Address(RVA = "0x125014C", Offset = "0x125014C", VA = "0x125014C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002220")]
	[Address(RVA = "0x1250268", Offset = "0x1250268", VA = "0x1250268")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002221")]
	[Address(RVA = "0x1250384", Offset = "0x1250384", VA = "0x1250384")]
	private void OnPaused()
	{
	}

	[Token(Token = "0x6002222")]
	[Address(RVA = "0x1250448", Offset = "0x1250448", VA = "0x1250448")]
	private void OnUnpaused()
	{
	}

	[Token(Token = "0x6002223")]
	[Address(RVA = "0x12504BC", Offset = "0x12504BC", VA = "0x12504BC")]
	public void DisplayStandaloneMessage(string locId, Sprite image, [Optional] float? displayTimeOverride, [Optional] string[] formattedStringValues)
	{
	}

	[Token(Token = "0x6002224")]
	[Address(RVA = "0x1250578", Offset = "0x1250578", VA = "0x1250578")]
	public void DisplayObjectiveMessage(string text, bool resetMsg = false)
	{
	}

	[Token(Token = "0x6002225")]
	[Address(RVA = "0x1250618", Offset = "0x1250618", VA = "0x1250618")]
	public void DisplayStageMessage(string text, bool resetMsg = false)
	{
	}

	[Token(Token = "0x6002226")]
	[Address(RVA = "0x12506B0", Offset = "0x12506B0", VA = "0x12506B0")]
	internal void DisplayStageTime(float time)
	{
	}

	[Token(Token = "0x6002227")]
	[Address(RVA = "0x1250748", Offset = "0x1250748", VA = "0x1250748")]
	internal void DisplayStagePoints(int stagePoints, int requiredPointsToComplete)
	{
	}

	[Token(Token = "0x6002228")]
	[Address(RVA = "0x12507E8", Offset = "0x12507E8", VA = "0x12507E8")]
	public void DisplaySubtitle(string localizedSubtitle, float duration, string subtitleId = "")
	{
	}

	[Token(Token = "0x6002229")]
	[Address(RVA = "0x12508E4", Offset = "0x12508E4", VA = "0x12508E4")]
	[IteratorStateMachine(typeof(<DisplayAndSplitSubtitleRoutine>d__69))]
	private IEnumerator DisplayAndSplitSubtitleRoutine(string localizedSubtitle, float duration, string subtitleId)
	{
		return null;
	}

	[Token(Token = "0x600222A")]
	[Address(RVA = "0x1250080", Offset = "0x1250080", VA = "0x1250080")]
	private void RemoveSubtitle(string subtitleId, bool forceHide = false)
	{
	}

	[Token(Token = "0x600222B")]
	[Address(RVA = "0x1250404", Offset = "0x1250404", VA = "0x1250404")]
	public void ToggleSubtitle(bool enable)
	{
	}

	[Token(Token = "0x600222C")]
	[Address(RVA = "0x124FD08", Offset = "0x124FD08", VA = "0x124FD08")]
	private void CreateTutorialDialogInstances()
	{
	}

	[Token(Token = "0x600222D")]
	[Address(RVA = "0x1250998", Offset = "0x1250998", VA = "0x1250998")]
	private TutorialDialog GetActiveTutorialDialog()
	{
		return null;
	}

	[Token(Token = "0x600222F")]
	[Address(RVA = "0x124FE08", Offset = "0x124FE08", VA = "0x124FE08")]
	public void DisplayTutorialDialog(string mainLocId, [Optional] string timeoutLocId, float timeoutDuration = 0f, [Optional] GameObject imageObject, [Optional] GameObject parent)
	{
	}

	[Token(Token = "0x6002230")]
	[Address(RVA = "0x1250A28", Offset = "0x1250A28", VA = "0x1250A28")]
	public void DestroyTutorialDialog()
	{
	}

	[Token(Token = "0x6002231")]
	[Address(RVA = "0x12509D8", Offset = "0x12509D8", VA = "0x12509D8")]
	public bool IsShowingTutorialDialogWithLocId(string locId)
	{
		return default(bool);
	}

	[Token(Token = "0x6002232")]
	[Address(RVA = "0x12503AC", Offset = "0x12503AC", VA = "0x12503AC")]
	private void HideTutorialDialog()
	{
	}

	[Token(Token = "0x6002233")]
	[Address(RVA = "0x1250464", Offset = "0x1250464", VA = "0x1250464")]
	private void ShowTutorialDialog()
	{
	}

	[Token(Token = "0x6002234")]
	[Address(RVA = "0x1250B00", Offset = "0x1250B00", VA = "0x1250B00")]
	public HUD()
	{
	}
}
[Token(Token = "0x20005DD")]
public class InventoryCameraController : MonoBehaviour
{
	[Token(Token = "0x20005DE")]
	[CompilerGenerated]
	private sealed class <DisableCamera>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InventoryCameraController <>4__this;

		[Token(Token = "0x17000584")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002243")]
			[Address(RVA = "0x12524EC", Offset = "0x12524EC", VA = "0x12524EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000585")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002245")]
			[Address(RVA = "0x1252534", Offset = "0x1252534", VA = "0x1252534", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0x125219C", Offset = "0x125219C", VA = "0x125219C")]
		[DebuggerHidden]
		public <DisableCamera>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0x12521CC", Offset = "0x12521CC", VA = "0x12521CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x12521D0", Offset = "0x12521D0", VA = "0x12521D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0x12524F4", Offset = "0x12524F4", VA = "0x12524F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InventoryHUD m_inventoryHud;

	[Token(Token = "0x4001C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private StandaloneHUDMessage m_standAloneHudMessage;

	[Token(Token = "0x4001C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_inventoryOverlay;

	[Token(Token = "0x4001C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Camera m_camera;

	[Token(Token = "0x600223B")]
	[Address(RVA = "0x1251DC4", Offset = "0x1251DC4", VA = "0x1251DC4")]
	private void Start()
	{
	}

	[Token(Token = "0x600223C")]
	[Address(RVA = "0x1251F64", Offset = "0x1251F64", VA = "0x1251F64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600223D")]
	[Address(RVA = "0x12520BC", Offset = "0x12520BC", VA = "0x12520BC")]
	private void EnableCamera()
	{
	}

	[Token(Token = "0x600223E")]
	[Address(RVA = "0x1252128", Offset = "0x1252128", VA = "0x1252128")]
	[IteratorStateMachine(typeof(<DisableCamera>d__7))]
	private IEnumerator DisableCamera()
	{
		return null;
	}

	[Token(Token = "0x600223F")]
	[Address(RVA = "0x12521C4", Offset = "0x12521C4", VA = "0x12521C4")]
	public InventoryCameraController()
	{
	}
}
[Token(Token = "0x20005DF")]
public class InventoryHUD : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20005E0")]
	public class SlotData
	{
		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public InventorySlot Slot;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform RootTransform;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SpriteRenderer ItemRenderer;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SpriteRenderer EmptyRenderer;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SpriteRenderer AmmoRenderer;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TMP_Text AmmoText;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool AllowDisplay;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float TargetAlpha;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color Color;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool IsTransitioning;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float TransitionTimeElapsed;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool IsHovering;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float HoverDuration;

		[Token(Token = "0x600225B")]
		[Address(RVA = "0x1254AE4", Offset = "0x1254AE4", VA = "0x1254AE4")]
		public SlotData()
		{
		}
	}

	[Token(Token = "0x4001C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private InventorySlot_AmmoPouch m_ammoSlot;

	[Token(Token = "0x4001C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<SlotData> m_slots;

	[Token(Token = "0x4001C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string m_pickedUpAmmoLocId;

	[Token(Token = "0x4001C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_pickedUpAmmoDisplayDuration;

	[Token(Token = "0x4001C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_fadeSpeed;

	[Token(Token = "0x4001C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float m_hoverTimerThreshold;

	[Token(Token = "0x4001C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_hoverTimer;

	[Token(Token = "0x4001C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color m_validColor;

	[Token(Token = "0x4001C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Color m_invalidColor;

	[Token(Token = "0x4001C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Images")]
	private Sprite m_emptySlotSprite_R;

	[Token(Token = "0x4001C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Sprite m_emptySlotSprite_L;

	[Token(Token = "0x4001C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool m_pendingRefresh;

	[Token(Token = "0x4001C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool m_settingEnabled;

	[Token(Token = "0x4001C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action OnInventoryHudMessage;

	[Token(Token = "0x17000586")]
	public bool InventoryHudEnabled
	{
		[Token(Token = "0x6002246")]
		[Address(RVA = "0x12522DC", Offset = "0x12522DC", VA = "0x12522DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002247")]
	[Address(RVA = "0x125253C", Offset = "0x125253C", VA = "0x125253C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002248")]
	[Address(RVA = "0x1253704", Offset = "0x1253704", VA = "0x1253704")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002249")]
	[Address(RVA = "0x1253898", Offset = "0x1253898", VA = "0x1253898")]
	private void RequestRefresh()
	{
	}

	[Token(Token = "0x600224A")]
	[Address(RVA = "0x12538A4", Offset = "0x12538A4", VA = "0x12538A4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600224B")]
	[Address(RVA = "0x125413C", Offset = "0x125413C", VA = "0x125413C")]
	private void DisplaySettingsChanged()
	{
	}

	[Token(Token = "0x600224C")]
	[Address(RVA = "0x12541DC", Offset = "0x12541DC", VA = "0x12541DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600224D")]
	[Address(RVA = "0x1253A64", Offset = "0x1253A64", VA = "0x1253A64")]
	private void RefreshInventoryHUD()
	{
	}

	[Token(Token = "0x600224E")]
	[Address(RVA = "0x125354C", Offset = "0x125354C", VA = "0x125354C")]
	public void HideAllSlots(bool instant = false)
	{
	}

	[Token(Token = "0x600224F")]
	[Address(RVA = "0x1254614", Offset = "0x1254614", VA = "0x1254614")]
	private void SetSlotColor(SlotData slotData, Color color)
	{
	}

	[Token(Token = "0x6002250")]
	[Address(RVA = "0x12546C0", Offset = "0x12546C0", VA = "0x12546C0")]
	public void OnInvalidItemHover(SlotData slotData)
	{
	}

	[Token(Token = "0x6002251")]
	[Address(RVA = "0x125472C", Offset = "0x125472C", VA = "0x125472C")]
	public void OnValidItemHover(SlotData slotData)
	{
	}

	[Token(Token = "0x6002252")]
	[Address(RVA = "0x1254748", Offset = "0x1254748", VA = "0x1254748")]
	public void OnValidItemReleased(SlotData slotData)
	{
	}

	[Token(Token = "0x6002253")]
	[Address(RVA = "0x125479C", Offset = "0x125479C", VA = "0x125479C")]
	public void OnHandValidHover(SlotData slotData)
	{
	}

	[Token(Token = "0x6002254")]
	[Address(RVA = "0x1253FC8", Offset = "0x1253FC8", VA = "0x1253FC8")]
	public void OnHandStoppedHovering(SlotData slotData)
	{
	}

	[Token(Token = "0x6002255")]
	[Address(RVA = "0x12547B8", Offset = "0x12547B8", VA = "0x12547B8")]
	private void OnAmmoCountAdjusted(AmmoCount ammoCount, int adjustment)
	{
	}

	[Token(Token = "0x6002256")]
	[Address(RVA = "0x1254A40", Offset = "0x1254A40", VA = "0x1254A40")]
	public InventoryHUD()
	{
	}
}
[Token(Token = "0x20005E3")]
[CreateAssetMenu(menuName = "Cabin/Loading FTUE Screen Content", fileName = "Generic Loading FTUE Screen Content Data")]
public class LoadingFTUEScreenContentData : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20005E4")]
	public class LoadingFTUEScreenTextDescription
	{
		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string m_text;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Rect m_rectangle;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool m_autoSize;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		public float m_fontSize;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public float m_fontSizeMin;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public float m_fontSizeMax;

		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public TextAlignmentOptions m_textAlignment;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public Color m_color;

		[Token(Token = "0x6002267")]
		[Address(RVA = "0x1254D24", Offset = "0x1254D24", VA = "0x1254D24")]
		public LoadingFTUEScreenTextDescription()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20005E5")]
	public class LoadingFTUEScreenDescription
	{
		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string m_loadingScreenImagePath;

		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<LoadingFTUEScreenTextDescription> m_textDescription;

		[Token(Token = "0x6002268")]
		[Address(RVA = "0x1254D58", Offset = "0x1254D58", VA = "0x1254D58")]
		public LoadingFTUEScreenDescription()
		{
		}
	}

	[Token(Token = "0x4001C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public List<LoadingFTUEScreenDescription> m_loadingFTUEScreens;

	[Token(Token = "0x6002266")]
	[Address(RVA = "0x1254D1C", Offset = "0x1254D1C", VA = "0x1254D1C")]
	public LoadingFTUEScreenContentData()
	{
	}
}
[Token(Token = "0x20005E6")]
public class LoadingScreen : MonoBehaviour
{
	[Token(Token = "0x4001CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly GameSettings.IntSetting LoadCount;

	[Token(Token = "0x4001CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly GameSettings.IntSetting FTUEScreenIndex;

	[Token(Token = "0x4001CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_mainRoot;

	[Token(Token = "0x4001CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject m_loadingContentRoot;

	[Token(Token = "0x4001CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SpriteRenderer m_mainImage;

	[Token(Token = "0x4001CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private SpriteRenderer m_LoadingAnimation;

	[Token(Token = "0x4001CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public TMP_Text m_descriptionText;

	[Token(Token = "0x4001CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TMP_Text m_headerText;

	[Token(Token = "0x4001CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TMP_Text m_continueText;

	[Token(Token = "0x4001CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("FTUE Loading Screen Data")]
	[SerializeField]
	private int m_maxShownFTUEScreenCount;

	[Token(Token = "0x4001CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private Vector3 m_FTUEImagesPosition;

	[Token(Token = "0x4001CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Vector3 m_FTUELoadingAnimationPosition;

	[Token(Token = "0x4001CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Generic Loading Screen Data")]
	[SerializeField]
	private List<LoadingScreenContentData> m_genericLoadingScreenData;

	[Token(Token = "0x4001CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Fallback Data")]
	[SerializeField]
	private LoadingScreenContentData m_fallBackData;

	[Token(Token = "0x4001CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Header("FTUE Loading Screen Data")]
	private LoadingFTUEScreenContentData m_loadingFTUEScreenData;

	[Token(Token = "0x4001CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[HideInInspector]
	[Header("Control Schemes")]
	private GameObject m_freeLocomotionControls;

	[Token(Token = "0x4001CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[HideInInspector]
	private GameObject m_pointWalkControls;

	[Token(Token = "0x4001CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 m_oldMainImagePosition;

	[Token(Token = "0x4001CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 m_oldLoadingAnimationPosition;

	[Token(Token = "0x4001CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector2 m_loadingTextInitialPosition;

	[Token(Token = "0x4001CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector2 m_loadingTextInitialSize;

	[Token(Token = "0x4001CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Color m_loadingTextInitialColor;

	[Token(Token = "0x4001CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private TextAlignmentOptions m_loadingTextInitialAlignment;

	[Token(Token = "0x4001CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private bool m_loadingTextInitialEnableAutoSizing;

	[Token(Token = "0x4001CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float m_loadingTextInitialFontSizeMin;

	[Token(Token = "0x4001CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float m_loadingTextInitialFontSizeMax;

	[Token(Token = "0x4001CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float m_loadingTextInitialfontSize;

	[Token(Token = "0x4001CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private List<GameObject> m_textsToRemove;

	[Token(Token = "0x17000587")]
	public LoadingFTUEScreenContentData LoadingFTUEScreenData
	{
		[Token(Token = "0x6002269")]
		[Address(RVA = "0x1254D60", Offset = "0x1254D60", VA = "0x1254D60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000588")]
	public SpriteRenderer MainImage
	{
		[Token(Token = "0x600226A")]
		[Address(RVA = "0x1254D68", Offset = "0x1254D68", VA = "0x1254D68")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000589")]
	public SpriteRenderer LoadingAnimation
	{
		[Token(Token = "0x600226B")]
		[Address(RVA = "0x1254D70", Offset = "0x1254D70", VA = "0x1254D70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700058A")]
	public Vector3 FTUEImagePosition
	{
		[Token(Token = "0x600226C")]
		[Address(RVA = "0x1254D78", Offset = "0x1254D78", VA = "0x1254D78")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700058B")]
	public Vector3 FTUEAnimationPosition
	{
		[Token(Token = "0x600226D")]
		[Address(RVA = "0x1254D84", Offset = "0x1254D84", VA = "0x1254D84")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700058C")]
	public bool ShowFTUEScreen
	{
		[Token(Token = "0x600226E")]
		[Address(RVA = "0x1254D90", Offset = "0x1254D90", VA = "0x1254D90")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600226F")]
	[Address(RVA = "0x1254E1C", Offset = "0x1254E1C", VA = "0x1254E1C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002270")]
	[Address(RVA = "0x1254FD0", Offset = "0x1254FD0", VA = "0x1254FD0")]
	public void ShowContinueText(bool value)
	{
	}

	[Token(Token = "0x6002271")]
	[Address(RVA = "0x125507C", Offset = "0x125507C", VA = "0x125507C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002272")]
	[Address(RVA = "0x125592C", Offset = "0x125592C", VA = "0x125592C")]
	public void ShowGenericLoadingScreenContent(bool show, int dataIndex)
	{
	}

	[Token(Token = "0x6002273")]
	[Address(RVA = "0x1255084", Offset = "0x1255084", VA = "0x1255084")]
	public void ShowLevelLoadingContent(bool show)
	{
	}

	[Token(Token = "0x6002274")]
	[Address(RVA = "0x1255C20", Offset = "0x1255C20", VA = "0x1255C20")]
	public void SetTextProperties(TMP_Text tmpText, LoadingFTUEScreenContentData.LoadingFTUEScreenTextDescription textDescription)
	{
	}

	[Token(Token = "0x6002275")]
	[Address(RVA = "0x12559E4", Offset = "0x12559E4", VA = "0x12559E4")]
	public void ShowLoadingScreenContentsInternal(Sprite mainSprite, string loadingHeader, string loadingDescription, bool show, bool fromResources)
	{
	}

	[Token(Token = "0x6002276")]
	[Address(RVA = "0x1254F64", Offset = "0x1254F64", VA = "0x1254F64")]
	private void RefreshMainRootVisibility()
	{
	}

	[Token(Token = "0x6002277")]
	[Address(RVA = "0x1255E0C", Offset = "0x1255E0C", VA = "0x1255E0C")]
	public LoadingScreen()
	{
	}
}
[Token(Token = "0x20005E7")]
[CreateAssetMenu(menuName = "Battle Sister/Loading Screen Content", fileName = "Generic Loading Screen Content Data")]
public class LoadingScreenContentData : ScriptableObject
{
	[Token(Token = "0x4001CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Sprite m_mainImage;

	[Token(Token = "0x4001CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string m_descriptionText;

	[Token(Token = "0x4001CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string m_headerText;

	[Token(Token = "0x1700058D")]
	public Sprite MainImage
	{
		[Token(Token = "0x600227A")]
		[Address(RVA = "0x1255FF4", Offset = "0x1255FF4", VA = "0x1255FF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700058E")]
	public string DescriptionText
	{
		[Token(Token = "0x600227B")]
		[Address(RVA = "0x1255FFC", Offset = "0x1255FFC", VA = "0x1255FFC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700058F")]
	public string HeaderText
	{
		[Token(Token = "0x600227C")]
		[Address(RVA = "0x1256004", Offset = "0x1256004", VA = "0x1256004")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600227D")]
	[Address(RVA = "0x125600C", Offset = "0x125600C", VA = "0x125600C")]
	public LoadingScreenContentData()
	{
	}
}
[Token(Token = "0x20005E8")]
public class MatchPlayerHeadForward : CachedMonoBehaviour
{
	[Token(Token = "0x4001CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("The transform we pivot around. Defaults to the player's head at runtime if left unassigned.")]
	private Transform m_pivot;

	[Token(Token = "0x4001CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 m_standardLocalPosition;

	[Token(Token = "0x4001CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion m_standardLocalRotation;

	[Token(Token = "0x4001CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private bool m_dynamic;

	[Token(Token = "0x4001CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 m_previousPivotPosition;

	[Token(Token = "0x600227E")]
	[Address(RVA = "0x1256014", Offset = "0x1256014", VA = "0x1256014")]
	private void Awake()
	{
	}

	[Token(Token = "0x600227F")]
	[Address(RVA = "0x1256108", Offset = "0x1256108", VA = "0x1256108")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002280")]
	[Address(RVA = "0x1256430", Offset = "0x1256430", VA = "0x1256430")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002281")]
	[Address(RVA = "0x1256190", Offset = "0x1256190", VA = "0x1256190")]
	private void MatchHeadForward()
	{
	}

	[Token(Token = "0x6002282")]
	[Address(RVA = "0x12564B0", Offset = "0x12564B0", VA = "0x12564B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6002283")]
	[Address(RVA = "0x1256558", Offset = "0x1256558", VA = "0x1256558")]
	public MatchPlayerHeadForward()
	{
	}
}
[Token(Token = "0x20005E9")]
public class DeathScreen : MonoBehaviour
{
	[Token(Token = "0x4001CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshProUGUI m_headingLabel;

	[Token(Token = "0x4001CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_livesLabel;

	[Token(Token = "0x4001CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PlayableDirector m_playableDirector;

	[Token(Token = "0x4001CD0")]
	private const string c_headingLocId = "STR_HORDE_UI_PLAYER_DEATH_TITLE";

	[Token(Token = "0x4001CD1")]
	private const string c_livesRemainingLocId = "STR_HORDE_UI_PLAYER_DEATH_LIVES_REMAINING";

	[Token(Token = "0x4001CD2")]
	private const string c_noMoreLivesLocId = "STR_HORDE_UI_PLAYER_DEATH_NO_MORE_LIVES";

	[Token(Token = "0x17000590")]
	public bool IsComplete
	{
		[Token(Token = "0x6002284")]
		[Address(RVA = "0x1256560", Offset = "0x1256560", VA = "0x1256560")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000591")]
	public bool IsVisible
	{
		[Token(Token = "0x6002285")]
		[Address(RVA = "0x1256588", Offset = "0x1256588", VA = "0x1256588")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002286")]
	[Address(RVA = "0x12565B0", Offset = "0x12565B0", VA = "0x12565B0")]
	public void Show()
	{
	}

	[Token(Token = "0x6002287")]
	[Address(RVA = "0x1256690", Offset = "0x1256690", VA = "0x1256690")]
	public double GetClipDuration()
	{
		return default(double);
	}

	[Token(Token = "0x6002288")]
	[Address(RVA = "0x12566AC", Offset = "0x12566AC", VA = "0x12566AC")]
	public DeathScreen()
	{
	}
}
[Token(Token = "0x20005EA")]
public class MultiplayerHUD : MonoBehaviour
{
	[Token(Token = "0x20005EB")]
	[CompilerGenerated]
	private sealed class <DisableCamera>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4001CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MultiplayerHUD <>4__this;

		[Token(Token = "0x17000593")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002292")]
			[Address(RVA = "0x1256CA8", Offset = "0x1256CA8", VA = "0x1256CA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000594")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002294")]
			[Address(RVA = "0x1256CF0", Offset = "0x1256CF0", VA = "0x1256CF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0x1256B74", Offset = "0x1256B74", VA = "0x1256B74")]
		[DebuggerHidden]
		public <DisableCamera>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0x1256BA4", Offset = "0x1256BA4", VA = "0x1256BA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x1256BA8", Offset = "0x1256BA8", VA = "0x1256BA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0x1256CB0", Offset = "0x1256CB0", VA = "0x1256CB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private DeathScreen m_deathScreen;

	[Token(Token = "0x4001CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Dialogs")]
	[SerializeField]
	private RectTransform m_dialogRoot;

	[Token(Token = "0x4001CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PlayerKilledMultiplayerDialog _playerKilledDialogPrefab;

	[Token(Token = "0x4001CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform m_dialogHeadRoot;

	[Token(Token = "0x4001CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PlayerKilledMultiplayerDialog _playerKilledDialogHeadPrefab;

	[Token(Token = "0x4001CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Camera m_renderCamera;

	[Token(Token = "0x4001CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject m_deathOverlay;

	[Token(Token = "0x4001CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Coroutine m_disableCamera;

	[Token(Token = "0x4001CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private PlayerKilledMultiplayerDialog m_dialog;

	[Token(Token = "0x4001CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_deathScreenEnabled;

	[Token(Token = "0x4001CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool m_playerKilledEnabled;

	[Token(Token = "0x17000592")]
	public DeathScreen DeathScreen
	{
		[Token(Token = "0x6002289")]
		[Address(RVA = "0x12566B4", Offset = "0x12566B4", VA = "0x12566B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600228A")]
	[Address(RVA = "0x12566BC", Offset = "0x12566BC", VA = "0x12566BC")]
	private void Start()
	{
	}

	[Token(Token = "0x600228B")]
	[Address(RVA = "0x12566F4", Offset = "0x12566F4", VA = "0x12566F4")]
	public void ShowPlayerKilled(string playerName, BoltConnection playerConnection)
	{
	}

	[Token(Token = "0x600228C")]
	[Address(RVA = "0x1256A28", Offset = "0x1256A28", VA = "0x1256A28")]
	public void ShowDeathScreen()
	{
	}

	[Token(Token = "0x600228D")]
	[Address(RVA = "0x12569A4", Offset = "0x12569A4", VA = "0x12569A4")]
	[IteratorStateMachine(typeof(<DisableCamera>d__16))]
	private IEnumerator DisableCamera(float time)
	{
		return null;
	}

	[Token(Token = "0x600228E")]
	[Address(RVA = "0x1256B9C", Offset = "0x1256B9C", VA = "0x1256B9C")]
	public MultiplayerHUD()
	{
	}
}
[Token(Token = "0x20005EC")]
public class PlayerKilledMultiplayerDialog : CachedMonoBehaviour
{
	[Token(Token = "0x4001CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TMP_Text m_playerText;

	[Token(Token = "0x4001CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TMP_Text m_livesText;

	[Token(Token = "0x4001CE4")]
	private const string c_playerTextLocId = "STR_HORDE_UI_TEAM_MATE_DEATH_DIALOG";

	[Token(Token = "0x4001CE5")]
	private const string c_livesRemainingLocId = "STR_HORDE_UI_PLAYER_DEATH_LIVES_REMAINING";

	[Token(Token = "0x4001CE6")]
	private const string c_noMoreLivesLocId = "STR_HORDE_UI_PLAYER_DEATH_NO_MORE_LIVES";

	[Token(Token = "0x4001CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float m_selfDestructTime;

	[Token(Token = "0x4001CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_timeElapsed;

	[Token(Token = "0x17000595")]
	public float SelfDestructTime
	{
		[Token(Token = "0x6002295")]
		[Address(RVA = "0x1256CF8", Offset = "0x1256CF8", VA = "0x1256CF8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6002296")]
	[Address(RVA = "0x1256D00", Offset = "0x1256D00", VA = "0x1256D00")]
	private void Update()
	{
	}

	[Token(Token = "0x6002297")]
	[Address(RVA = "0x1256864", Offset = "0x1256864", VA = "0x1256864")]
	public void Refresh(string playerName, BoltConnection playerConnection)
	{
	}

	[Token(Token = "0x6002298")]
	[Address(RVA = "0x1256DA4", Offset = "0x1256DA4", VA = "0x1256DA4")]
	public PlayerKilledMultiplayerDialog()
	{
	}
}
[Token(Token = "0x20005ED")]
[RequireComponent(typeof(Camera))]
public class OverlayCameraHelper : MonoBehaviour
{
	[Token(Token = "0x4001CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_renderWhileLoading;

	[Token(Token = "0x4001CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera m_camera;

	[Token(Token = "0x4001CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_standardCullingMask;

	[Token(Token = "0x6002299")]
	[Address(RVA = "0x1256DB4", Offset = "0x1256DB4", VA = "0x1256DB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600229A")]
	[Address(RVA = "0x1256F8C", Offset = "0x1256F8C", VA = "0x1256F8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600229B")]
	[Address(RVA = "0x1256F4C", Offset = "0x1256F4C", VA = "0x1256F4C")]
	private void OnPlayerActiveStateChanged(bool active)
	{
	}

	[Token(Token = "0x600229C")]
	[Address(RVA = "0x12570A8", Offset = "0x12570A8", VA = "0x12570A8")]
	public OverlayCameraHelper()
	{
	}
}
[Token(Token = "0x20005EE")]
public class PlayTestStopScreen : CachedMonoBehaviour
{
	[Token(Token = "0x4001CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject m_continuePrompt;

	[Token(Token = "0x4001CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Min(0f)]
	private float m_maxDurationBeforeContinuePrompt;

	[Token(Token = "0x4001CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool m_promptingContinue;

	[Token(Token = "0x4001CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_promptTime;

	[Token(Token = "0x4001CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_countActive;

	[Token(Token = "0x17000596")]
	public static bool IsActive
	{
		[Token(Token = "0x600229D")]
		[Address(RVA = "0x12570B0", Offset = "0x12570B0", VA = "0x12570B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600229E")]
	[Address(RVA = "0x1257100", Offset = "0x1257100", VA = "0x1257100")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600229F")]
	[Address(RVA = "0x12572F0", Offset = "0x12572F0", VA = "0x12572F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60022A0")]
	[Address(RVA = "0x125741C", Offset = "0x125741C", VA = "0x125741C")]
	private void UserPresent()
	{
	}

	[Token(Token = "0x60022A1")]
	[Address(RVA = "0x12572C8", Offset = "0x12572C8", VA = "0x12572C8")]
	private void SetPromptingContinue(bool prompt)
	{
	}

	[Token(Token = "0x60022A2")]
	[Address(RVA = "0x1257424", Offset = "0x1257424", VA = "0x1257424")]
	private void Update()
	{
	}

	[Token(Token = "0x60022A3")]
	[Address(RVA = "0x1257248", Offset = "0x1257248", VA = "0x1257248")]
	private void SetTimePaused(bool paused)
	{
	}

	[Token(Token = "0x60022A4")]
	[Address(RVA = "0x12574FC", Offset = "0x12574FC", VA = "0x12574FC")]
	public PlayTestStopScreen()
	{
	}
}
[Token(Token = "0x20005EF")]
public class ScreenFade : CachedMonoBehaviour
{
	[Token(Token = "0x4001CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("fadeTime")]
	[UnityEngine.Tooltip("Fade duration")]
	[SerializeField]
	[FormerlySerializedAs("m_fadeTime")]
	private float m_defaultFadeDuration;

	[Token(Token = "0x4001CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[FormerlySerializedAs("m_fadeColor")]
	[FormerlySerializedAs("fadeColor")]
	[SerializeField]
	[UnityEngine.Tooltip("Screen color at maximum fade")]
	private Color m_defaultFadeColor;

	[Token(Token = "0x4001CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[FormerlySerializedAs("renderQueue")]
	[SerializeField]
	private int m_renderQueue;

	[Token(Token = "0x4001CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool m_useMeshRenderer;

	[Token(Token = "0x4001CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float m_uiFadeAlpha;

	[Token(Token = "0x4001CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private MeshRenderer m_fadeRenderer;

	[Token(Token = "0x4001CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private MeshFilter m_fadeMesh;

	[Token(Token = "0x4001CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material m_fadeMaterial;

	[Token(Token = "0x4001CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color m_activeColor;

	[Token(Token = "0x4001CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_activeDuration;

	[Token(Token = "0x4001CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float m_currentAlpha;

	[Token(Token = "0x4001CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_fade;

	[Token(Token = "0x4001CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float m_endAlpha;

	[Token(Token = "0x60022A5")]
	[Address(RVA = "0x125750C", Offset = "0x125750C", VA = "0x125750C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60022A6")]
	[Address(RVA = "0x1257990", Offset = "0x1257990", VA = "0x1257990")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60022A7")]
	[Address(RVA = "0x12575A4", Offset = "0x12575A4", VA = "0x12575A4")]
	public void InitialiseFadeQuad()
	{
	}

	[Token(Token = "0x60022A8")]
	[Address(RVA = "0x1257B78", Offset = "0x1257B78", VA = "0x1257B78")]
	public void SetEnabled(bool isEnabled)
	{
	}

	[Token(Token = "0x60022A9")]
	[Address(RVA = "0x1257BA0", Offset = "0x1257BA0", VA = "0x1257BA0")]
	public float FadeIn([Optional] Color? fadeColor, [Optional] float? fadeDuration)
	{
		return default(float);
	}

	[Token(Token = "0x60022AA")]
	[Address(RVA = "0x1257D5C", Offset = "0x1257D5C", VA = "0x1257D5C")]
	public float FadeOut([Optional] Color? fadeColor, [Optional] float? fadeDuration)
	{
		return default(float);
	}

	[Token(Token = "0x60022AB")]
	[Address(RVA = "0x1257E70", Offset = "0x1257E70", VA = "0x1257E70")]
	public void SetFullyVisible()
	{
	}

	[Token(Token = "0x60022AC")]
	[Address(RVA = "0x1257E84", Offset = "0x1257E84", VA = "0x1257E84")]
	public void SetFullyInvisible()
	{
	}

	[Token(Token = "0x60022AD")]
	[Address(RVA = "0x1257AB8", Offset = "0x1257AB8", VA = "0x1257AB8")]
	private void SetFadeLevel(float level, bool force)
	{
	}

	[Token(Token = "0x60022AE")]
	[Address(RVA = "0x1257F9C", Offset = "0x1257F9C", VA = "0x1257F9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60022AF")]
	[Address(RVA = "0x1257CB4", Offset = "0x1257CB4", VA = "0x1257CB4")]
	private void FadeTo(float endAlpha)
	{
	}

	[Token(Token = "0x60022B0")]
	[Address(RVA = "0x1257E98", Offset = "0x1257E98", VA = "0x1257E98")]
	private void SetMaterialAlpha()
	{
	}

	[Token(Token = "0x60022B1")]
	[Address(RVA = "0x12580AC", Offset = "0x12580AC", VA = "0x12580AC")]
	public ScreenFade()
	{
	}
}
[Token(Token = "0x20005F0")]
public class StandaloneHUDMessage : MonoBehaviour
{
	[Token(Token = "0x20005F1")]
	private struct QueuedMessage
	{
		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LocId;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Sprite Image;

		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float? DisplayTimeOverride;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] FormattedTextValues;
	}

	[Token(Token = "0x4001CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text m_textField;

	[Token(Token = "0x4001CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SpriteRenderer m_itemImage;

	[Token(Token = "0x4001D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Min(0f)]
	private float m_displayDuration;

	[Token(Token = "0x4001D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AnimationCurve m_alphaCurve;

	[Token(Token = "0x4001D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Space]
	private string m_checkpointTriggeredLocId;

	[Token(Token = "0x4001D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_itemDroppedLocId;

	[Token(Token = "0x4001D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_displayTimer;

	[Token(Token = "0x4001D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool m_currentMessageHasImage;

	[Token(Token = "0x4001D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<QueuedMessage> m_queuedMessages;

	[Token(Token = "0x4001D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action OnStandAloneHudMessage;

	[Token(Token = "0x17000597")]
	public bool HUDMessageEnabled
	{
		[Token(Token = "0x60022B2")]
		[Address(RVA = "0x1252488", Offset = "0x1252488", VA = "0x1252488")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60022B3")]
	[Address(RVA = "0x12580CC", Offset = "0x12580CC", VA = "0x12580CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60022B4")]
	[Address(RVA = "0x1258250", Offset = "0x1258250", VA = "0x1258250")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60022B5")]
	[Address(RVA = "0x125837C", Offset = "0x125837C", VA = "0x125837C")]
	private void OnAnyItemDroppedOntoGround(VrItem item)
	{
	}

	[Token(Token = "0x60022B6")]
	[Address(RVA = "0x12585BC", Offset = "0x12585BC", VA = "0x12585BC")]
	public void QueueMessage(string locId, Sprite image, [Optional] float? displayTimeOverride, [Optional] string[] formattedStringValues)
	{
	}

	[Token(Token = "0x60022B7")]
	[Address(RVA = "0x1258720", Offset = "0x1258720", VA = "0x1258720")]
	public void Display(string locId, Sprite image, [Optional] float? displayTimeOverride, [Optional] string[] formattedStringValues)
	{
	}

	[Token(Token = "0x60022B8")]
	[Address(RVA = "0x1258A34", Offset = "0x1258A34", VA = "0x1258A34")]
	private void Update()
	{
	}

	[Token(Token = "0x60022B9")]
	[Address(RVA = "0x1258850", Offset = "0x1258850", VA = "0x1258850")]
	private void Refresh()
	{
	}

	[Token(Token = "0x60022BA")]
	[Address(RVA = "0x1258A6C", Offset = "0x1258A6C", VA = "0x1258A6C")]
	public StandaloneHUDMessage()
	{
	}
}
[Token(Token = "0x20005F2")]
public class TutorialDialog : CachedMonoBehaviour
{
	[Token(Token = "0x4001D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TMP_Text m_text;

	[Token(Token = "0x4001D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_imageParent;

	[Token(Token = "0x4001D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform m_imageFrameParent;

	[Token(Token = "0x4001D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string m_mainLocId;

	[Token(Token = "0x4001D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string m_timeoutLocId;

	[Token(Token = "0x4001D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_timeout;

	[Token(Token = "0x17000598")]
	public string MainLocId
	{
		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x1258A74", Offset = "0x1258A74", VA = "0x1258A74")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60022BC")]
	[Address(RVA = "0x1258A7C", Offset = "0x1258A7C", VA = "0x1258A7C")]
	public void Init(string mainLocId, string timeoutLocId, float timeoutDuration, bool disableZTest, [Optional] GameObject imageObject)
	{
	}

	[Token(Token = "0x60022BD")]
	[Address(RVA = "0x125903C", Offset = "0x125903C", VA = "0x125903C")]
	private void Update()
	{
	}

	[Token(Token = "0x60022BE")]
	[Address(RVA = "0x1258F1C", Offset = "0x1258F1C", VA = "0x1258F1C")]
	private void RefreshShownText()
	{
	}

	[Token(Token = "0x60022BF")]
	[Address(RVA = "0x1259098", Offset = "0x1259098", VA = "0x1259098")]
	public TutorialDialog()
	{
	}
}
[Token(Token = "0x20005F3")]
public class UIFaceCamera : MonoBehaviour
{
	[Token(Token = "0x4001D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_inverse;

	[Token(Token = "0x4001D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera m_camera;

	[Token(Token = "0x60022C0")]
	[Address(RVA = "0x12590A0", Offset = "0x12590A0", VA = "0x12590A0")]
	private void Start()
	{
	}

	[Token(Token = "0x60022C1")]
	[Address(RVA = "0x125916C", Offset = "0x125916C", VA = "0x125916C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60022C2")]
	[Address(RVA = "0x1259280", Offset = "0x1259280", VA = "0x1259280")]
	public UIFaceCamera()
	{
	}
}
[Token(Token = "0x20005F4")]
public class CircularVignette : MonoBehaviour
{
	[Token(Token = "0x4001D14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MeshRenderer[] m_meshRenderers;

	[Token(Token = "0x4001D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool m_automaticallyFadeOutWhenIdle;

	[Token(Token = "0x4001D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[Min(0.1f)]
	private float m_fadeInRate;

	[Token(Token = "0x4001D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Min(0.1f)]
	private float m_fadeOutRate;

	[Token(Token = "0x4001D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int s_alpha;

	[Token(Token = "0x4001D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_desiredAlpha;

	[Token(Token = "0x4001D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_currentAlpha;

	[Token(Token = "0x4001D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_highestSeenFadeInCurrentFrame;

	[Token(Token = "0x4001D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_lastRegisteredFrame;

	[Token(Token = "0x4001D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MaterialPropertyBlock m_mpb;

	[Token(Token = "0x17000599")]
	private MaterialPropertyBlock m_propertyBlock
	{
		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x1259288", Offset = "0x1259288", VA = "0x1259288")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60022C4")]
	[Address(RVA = "0x1259300", Offset = "0x1259300", VA = "0x1259300")]
	private void SetFloatProperty(int property, float value)
	{
	}

	[Token(Token = "0x60022C5")]
	[Address(RVA = "0x12593B0", Offset = "0x12593B0", VA = "0x12593B0")]
	private bool SetVisible(bool isVisible)
	{
		return default(bool);
	}

	[Token(Token = "0x60022C6")]
	[Address(RVA = "0x125942C", Offset = "0x125942C", VA = "0x125942C")]
	public void SetAlpha(float alpha)
	{
	}

	[Token(Token = "0x60022C7")]
	[Address(RVA = "0x1259500", Offset = "0x1259500", VA = "0x1259500")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60022C8")]
	[Address(RVA = "0x125962C", Offset = "0x125962C", VA = "0x125962C")]
	public CircularVignette()
	{
	}
}
[Token(Token = "0x20005F5")]
public class VrVignette : MonoBehaviour
{
	[Token(Token = "0x4001D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera m_camera;

	[Token(Token = "0x4001D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MeshFilter m_filter;

	[Token(Token = "0x4001D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshRenderer m_renderer;

	[Token(Token = "0x4001D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Space]
	private bool m_automaticallyFadeOutWhenIdle;

	[Token(Token = "0x4001D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Min(0.1f)]
	[SerializeField]
	private float m_fadeInRate;

	[Token(Token = "0x4001D23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Min(0.1f)]
	private float m_fadeOutRate;

	[Token(Token = "0x4001D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 1f)]
	[SerializeField]
	private float m_lowestApproachFactor;

	[Token(Token = "0x4001D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_edgeDarknessUvScale;

	[Token(Token = "0x4001D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int m_edgeVertexCount;

	[Token(Token = "0x4001D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh m_mesh;

	[Token(Token = "0x4001D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_desiredEdgeScale;

	[Token(Token = "0x4001D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_currentEdgeScale;

	[Token(Token = "0x4001D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float m_highestSeenFadeInCurrentFrame;

	[Token(Token = "0x4001D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int m_lastRegisteredFrame;

	[Token(Token = "0x4001D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Circle m_innerEdge;

	[Token(Token = "0x4001D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Circle m_outerEdge;

	[Token(Token = "0x60022CA")]
	[Address(RVA = "0x12596AC", Offset = "0x12596AC", VA = "0x12596AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60022CB")]
	[Address(RVA = "0x12597F8", Offset = "0x12597F8", VA = "0x12597F8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60022CC")]
	[Address(RVA = "0x12598F4", Offset = "0x12598F4", VA = "0x12598F4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60022CD")]
	[Address(RVA = "0x1259750", Offset = "0x1259750", VA = "0x1259750")]
	private Mesh ConstructInitialMesh()
	{
		return null;
	}

	[Token(Token = "0x60022CE")]
	[Address(RVA = "0x1259A88", Offset = "0x1259A88", VA = "0x1259A88")]
	public static Mesh CreateFullScreenVignetteMesh(float nearDistance, float fov, float cameraAspectRatio, float stereoSeparation, int vertexCount, float edgeDarknessUvScale, out Circle innerEdge, out Circle outerEdge)
	{
		return null;
	}

	[Token(Token = "0x60022CF")]
	[Address(RVA = "0x1259F5C", Offset = "0x1259F5C", VA = "0x1259F5C")]
	public void ShowImmediately()
	{
	}

	[Token(Token = "0x60022D0")]
	[Address(RVA = "0x1259800", Offset = "0x1259800", VA = "0x1259800")]
	public void SetFadeAmount(float fadeAmount)
	{
	}

	[Token(Token = "0x60022D1")]
	[Address(RVA = "0x1259A04", Offset = "0x1259A04", VA = "0x1259A04")]
	private Mesh ScaleInnerEdge(Mesh mesh, float scale)
	{
		return null;
	}

	[Token(Token = "0x60022D2")]
	[Address(RVA = "0x1259F64", Offset = "0x1259F64", VA = "0x1259F64")]
	public VrVignette()
	{
	}
}
[Token(Token = "0x20005F6")]
[ExecuteAlways]
public class InterlacedColorChanger : MonoBehaviour
{
	[Token(Token = "0x4001D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Color m_evenColor;

	[Token(Token = "0x4001D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Color m_oddColor;

	[Token(Token = "0x4001D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Image> m_images;

	[Token(Token = "0x60022D3")]
	[Address(RVA = "0x1259F88", Offset = "0x1259F88", VA = "0x1259F88")]
	private void Start()
	{
	}

	[Token(Token = "0x60022D4")]
	[Address(RVA = "0x125A350", Offset = "0x125A350", VA = "0x125A350")]
	private void SetImageProperties()
	{
	}

	[Token(Token = "0x60022D5")]
	[Address(RVA = "0x125A47C", Offset = "0x125A47C", VA = "0x125A47C")]
	public InterlacedColorChanger()
	{
	}
}
[Token(Token = "0x20005F7")]
public class LabelFadeController : MonoBehaviour
{
	[Token(Token = "0x4001D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(-1f, 1f)]
	[SerializeField]
	private float m_dissolveThreshold;

	[Token(Token = "0x4001D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int ShaderPropertyID;

	[Token(Token = "0x60022D6")]
	[Address(RVA = "0x125A504", Offset = "0x125A504", VA = "0x125A504")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60022D7")]
	[Address(RVA = "0x125A600", Offset = "0x125A600", VA = "0x125A600")]
	public LabelFadeController()
	{
	}
}
[Token(Token = "0x20005F8")]
public class LevelHologramComponent : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
{
	[Token(Token = "0x4001D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<int> m_chapterNumbers;

	[Token(Token = "0x4001D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<Hologram> m_holograms;

	[Token(Token = "0x4001D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TMP_Text m_chapterNamesHeader;

	[Token(Token = "0x4001D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TMP_Text m_chapterNumbersHeader;

	[Token(Token = "0x4001D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TweenScale m_extraInfoScaler;

	[Token(Token = "0x4001D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color m_hologramDisabledColor;

	[Token(Token = "0x4001D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Color m_hologramHighlightedColor;

	[Token(Token = "0x4001D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public HologramInteractEvent OnInteractEvent;

	[Token(Token = "0x4001D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_interactable;

	[Token(Token = "0x4001D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool m_isPointerInside;

	[Token(Token = "0x4001D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Color m_hologramDefaultColor;

	[Token(Token = "0x4001D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Color m_hologramDefaultFresnel;

	[Token(Token = "0x1700059A")]
	public List<int> ChapterNumbers
	{
		[Token(Token = "0x60022D9")]
		[Address(RVA = "0x125A670", Offset = "0x125A670", VA = "0x125A670")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700059B")]
	public bool IsHologramIteractable
	{
		[Token(Token = "0x60022DA")]
		[Address(RVA = "0x125A678", Offset = "0x125A678", VA = "0x125A678")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60022DB")]
	[Address(RVA = "0x125A680", Offset = "0x125A680", VA = "0x125A680")]
	private void Awake()
	{
	}

	[Token(Token = "0x60022DC")]
	[Address(RVA = "0x125A780", Offset = "0x125A780", VA = "0x125A780")]
	private void Start()
	{
	}

	[Token(Token = "0x60022DD")]
	[Address(RVA = "0x125A8CC", Offset = "0x125A8CC", VA = "0x125A8CC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60022DE")]
	[Address(RVA = "0x125AE8C", Offset = "0x125AE8C", VA = "0x125AE8C")]
	public void OnClick()
	{
	}

	[Token(Token = "0x60022DF")]
	[Address(RVA = "0x125B02C", Offset = "0x125B02C", VA = "0x125B02C")]
	public void UnselectHologram()
	{
	}

	[Token(Token = "0x60022E0")]
	[Address(RVA = "0x125B1AC", Offset = "0x125B1AC", VA = "0x125B1AC")]
	public void SetInteractable(bool interative)
	{
	}

	[Token(Token = "0x60022E1")]
	[Address(RVA = "0x125B360", Offset = "0x125B360", VA = "0x125B360")]
	public bool HasValidChapters(int highestReachedChapter = -1)
	{
		return default(bool);
	}

	[Token(Token = "0x60022E2")]
	[Address(RVA = "0x125B474", Offset = "0x125B474", VA = "0x125B474", Slot = "4")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60022E3")]
	[Address(RVA = "0x125B4A8", Offset = "0x125B4A8", VA = "0x125B4A8", Slot = "5")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60022E4")]
	[Address(RVA = "0x125B4D4", Offset = "0x125B4D4", VA = "0x125B4D4")]
	public LevelHologramComponent()
	{
	}
}
[Serializable]
[Token(Token = "0x20005FA")]
public class HologramInteractEvent : UnityEvent<List<int>, LevelHologramComponent>
{
	[Token(Token = "0x60022E7")]
	[Address(RVA = "0x125B560", Offset = "0x125B560", VA = "0x125B560")]
	public HologramInteractEvent()
	{
	}
}
[Token(Token = "0x20005FB")]
public class LevelListDisplay : CachedMonoBehaviour
{
	[Token(Token = "0x4001D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private LevelSet m_levelSet;

	[Token(Token = "0x4001D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool m_debugOnly;

	[Token(Token = "0x4001D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform m_buttonParent;

	[Token(Token = "0x4001D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_buttonTemplate;

	[Token(Token = "0x60022E8")]
	[Address(RVA = "0x125B5B8", Offset = "0x125B5B8", VA = "0x125B5B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60022E9")]
	[Address(RVA = "0x125B888", Offset = "0x125B888", VA = "0x125B888")]
	public LevelListDisplay()
	{
	}
}
[Token(Token = "0x20005FC")]
public class LevelSelectButton : MonoBehaviour
{
	[Token(Token = "0x4001D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text m_headerText;

	[Token(Token = "0x4001D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TMP_Text m_descriptionText;

	[Token(Token = "0x4001D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image m_levelImage;

	[Token(Token = "0x1700059C")]
	public TMP_Text HeaderText
	{
		[Token(Token = "0x60022EA")]
		[Address(RVA = "0x125B890", Offset = "0x125B890", VA = "0x125B890")]
		get
		{
			return null;
		}
		[Token(Token = "0x60022EB")]
		[Address(RVA = "0x125B898", Offset = "0x125B898", VA = "0x125B898")]
		set
		{
		}
	}

	[Token(Token = "0x1700059D")]
	public TMP_Text DescriptionText
	{
		[Token(Token = "0x60022EC")]
		[Address(RVA = "0x125B8A0", Offset = "0x125B8A0", VA = "0x125B8A0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60022ED")]
		[Address(RVA = "0x125B8A8", Offset = "0x125B8A8", VA = "0x125B8A8")]
		set
		{
		}
	}

	[Token(Token = "0x1700059E")]
	public Image LevelImage
	{
		[Token(Token = "0x60022EE")]
		[Address(RVA = "0x125B8B0", Offset = "0x125B8B0", VA = "0x125B8B0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60022EF")]
		[Address(RVA = "0x125B8B8", Offset = "0x125B8B8", VA = "0x125B8B8")]
		set
		{
		}
	}

	[Token(Token = "0x60022F0")]
	[Address(RVA = "0x125B8C0", Offset = "0x125B8C0", VA = "0x125B8C0")]
	public LevelSelectButton()
	{
	}
}
[Token(Token = "0x20005FD")]
public class LevelSelectPanel : Panel
{
	[Token(Token = "0x20005FE")]
	public class state_SelectLevelSelectScreenOption : ButtonHandlerState<LevelSelectPanel>
	{
		[Token(Token = "0x60022F2")]
		[Address(RVA = "0x125B8D8", Offset = "0x125B8D8", VA = "0x125B8D8", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x60022F3")]
		[Address(RVA = "0x125BABC", Offset = "0x125BABC", VA = "0x125BABC")]
		public state_SelectLevelSelectScreenOption()
		{
		}
	}

	[Token(Token = "0x4001D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Identifier m_loadSinglePlayerLevel;

	[Token(Token = "0x60022F1")]
	[Address(RVA = "0x125B8C8", Offset = "0x125B8C8", VA = "0x125B8C8")]
	public LevelSelectPanel()
	{
	}
}
[Token(Token = "0x20005FF")]
public class LocalizedFontOverride : MonoBehaviour
{
	[Token(Token = "0x4001D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TMP_Text m_text;

	[Token(Token = "0x4001D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_fontName;

	[Token(Token = "0x4001D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string m_fontVariant;

	[Token(Token = "0x4001D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int m_fontNameIndex;

	[Token(Token = "0x4001D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int m_fontVariantIndex;

	[Token(Token = "0x1700059F")]
	private TMP_Text Text
	{
		[Token(Token = "0x60022F4")]
		[Address(RVA = "0x125BB04", Offset = "0x125BB04", VA = "0x125BB04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170005A0")]
	private string fontName
	{
		[Token(Token = "0x60022F5")]
		[Address(RVA = "0x125BBAC", Offset = "0x125BBAC", VA = "0x125BBAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170005A1")]
	private string fontVariant
	{
		[Token(Token = "0x60022F6")]
		[Address(RVA = "0x125BC04", Offset = "0x125BC04", VA = "0x125BC04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60022F7")]
	[Address(RVA = "0x125BC5C", Offset = "0x125BC5C", VA = "0x125BC5C")]
	private void Start()
	{
	}

	[Token(Token = "0x60022F8")]
	[Address(RVA = "0x125BC64", Offset = "0x125BC64", VA = "0x125BC64")]
	private void SetFont(bool forceLatin = false)
	{
	}

	[Token(Token = "0x60022F9")]
	[Address(RVA = "0x125BDA8", Offset = "0x125BDA8", VA = "0x125BDA8")]
	private TMP_FontAsset GetFontAsset(PT.CharSet charSet)
	{
		return null;
	}

	[Token(Token = "0x60022FA")]
	[Address(RVA = "0x125BEDC", Offset = "0x125BEDC", VA = "0x125BEDC")]
	private Material GetFontMaterial(PT.CharSet charSet)
	{
		return null;
	}

	[Token(Token = "0x60022FB")]
	[Address(RVA = "0x125BF54", Offset = "0x125BF54", VA = "0x125BF54")]
	public LocalizedFontOverride()
	{
	}
}
[Token(Token = "0x2000600")]
public class LogoScreen : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_oldFarClip;

	[Token(Token = "0x4001D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public VideoPlayer m_videoPlayer;

	[Token(Token = "0x60022FC")]
	[Address(RVA = "0x125BF5C", Offset = "0x125BF5C", VA = "0x125BF5C", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60022FD")]
	[Address(RVA = "0x125BFFC", Offset = "0x125BFFC", VA = "0x125BFFC", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60022FE")]
	[Address(RVA = "0x125C0CC", Offset = "0x125C0CC", VA = "0x125C0CC")]
	public LogoScreen()
	{
	}
}
[Token(Token = "0x2000601")]
public class MenuButtonPress_UnityEventHook : MonoBehaviour
{
	[Token(Token = "0x4001D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent OnMenuButtonPressed;

	[Token(Token = "0x4001D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent OnMenuButtonReleased;

	[Token(Token = "0x60022FF")]
	[Address(RVA = "0x125C0D4", Offset = "0x125C0D4", VA = "0x125C0D4")]
	private void Update()
	{
	}

	[Token(Token = "0x6002300")]
	[Address(RVA = "0x125C170", Offset = "0x125C170", VA = "0x125C170")]
	public MenuButtonPress_UnityEventHook()
	{
	}
}
[Token(Token = "0x2000602")]
public class PauseMenuScreen : ParentPanel
{
	[Token(Token = "0x2000603")]
	public class state_SelectPauseOption : ButtonHandlerState<PauseMenuScreen>
	{
		[Token(Token = "0x6002308")]
		[Address(RVA = "0x125C78C", Offset = "0x125C78C", VA = "0x125C78C", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002309")]
		[Address(RVA = "0x125C7E4", Offset = "0x125C7E4", VA = "0x125C7E4", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x600230A")]
		[Address(RVA = "0x125C83C", Offset = "0x125C83C", VA = "0x125C83C", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x600230B")]
		[Address(RVA = "0x125C9F4", Offset = "0x125C9F4", VA = "0x125C9F4")]
		public state_SelectPauseOption()
		{
		}
	}

	[Token(Token = "0x2000604")]
	public class state_PanelRouter : NestedStateBehavior<PauseMenuScreen>
	{
		[Token(Token = "0x600230C")]
		[Address(RVA = "0x125CA3C", Offset = "0x125CA3C", VA = "0x125CA3C", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600230D")]
		[Address(RVA = "0x125CB50", Offset = "0x125CB50", VA = "0x125CB50")]
		public state_PanelRouter()
		{
		}
	}

	[Token(Token = "0x4001D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_invitePanel;

	[Token(Token = "0x4001D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Identifier m_desiredPanel;

	[Token(Token = "0x4001D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject m_controlRoot;

	[Token(Token = "0x4001D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool m_hideControlButtonsWhenPanelShown;

	[Token(Token = "0x6002301")]
	[Address(RVA = "0x125C20C", Offset = "0x125C20C", VA = "0x125C20C", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002302")]
	[Address(RVA = "0x125C388", Offset = "0x125C388", VA = "0x125C388", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6002303")]
	[Address(RVA = "0x125C4B8", Offset = "0x125C4B8", VA = "0x125C4B8", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6002304")]
	[Address(RVA = "0x125C5DC", Offset = "0x125C5DC", VA = "0x125C5DC")]
	public void AcceptInvite()
	{
	}

	[Token(Token = "0x6002305")]
	[Address(RVA = "0x125C688", Offset = "0x125C688", VA = "0x125C688")]
	public void DenyInvite()
	{
	}

	[Token(Token = "0x6002306")]
	[Address(RVA = "0x125C71C", Offset = "0x125C71C", VA = "0x125C71C")]
	public void ShowNavButtons(bool value)
	{
	}

	[Token(Token = "0x6002307")]
	[Address(RVA = "0x125C774", Offset = "0x125C774", VA = "0x125C774")]
	public PauseMenuScreen()
	{
	}
}
[Token(Token = "0x2000605")]
public class ParentPanel : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Transform m_subPanelTransform;

	[Token(Token = "0x600230E")]
	[Address(RVA = "0x125CB98", Offset = "0x125CB98", VA = "0x125CB98")]
	public ParentPanel GetAttachedParentPanel()
	{
		return null;
	}

	[Token(Token = "0x600230F")]
	[Address(RVA = "0x125CB9C", Offset = "0x125CB9C", VA = "0x125CB9C")]
	public Transform GetSubPanelTransform()
	{
		return null;
	}

	[Token(Token = "0x6002310")]
	[Address(RVA = "0x125C784", Offset = "0x125C784", VA = "0x125C784")]
	public ParentPanel()
	{
	}
}
[Token(Token = "0x2000606")]
public class Panel : MonoBehaviourBaseStateAttachedLogic
{
	[Token(Token = "0x4001D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ParentPanel m_parentPanel;

	[Token(Token = "0x6002311")]
	[Address(RVA = "0x125CBA4", Offset = "0x125CBA4", VA = "0x125CBA4", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002312")]
	[Address(RVA = "0x125CCB0", Offset = "0x125CCB0", VA = "0x125CCB0")]
	public void PositionPanel(Transform anchor)
	{
	}

	[Token(Token = "0x6002313")]
	[Address(RVA = "0x125B8D0", Offset = "0x125B8D0", VA = "0x125B8D0")]
	public Panel()
	{
	}
}
[Token(Token = "0x2000607")]
public class PlayFabInitializer : MonoBehaviour
{
	[Token(Token = "0x6002314")]
	[Address(RVA = "0x125CD24", Offset = "0x125CD24", VA = "0x125CD24")]
	private void Start()
	{
	}

	[Token(Token = "0x6002315")]
	[Address(RVA = "0x125CE5C", Offset = "0x125CE5C", VA = "0x125CE5C")]
	public PlayFabInitializer()
	{
	}
}
[Token(Token = "0x2000608")]
public class PlayUnlockAnimation : CachedMonoBehaviour
{
	[Token(Token = "0x4001D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UnityEvent m_onUnlock;

	[Token(Token = "0x4001D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PlayableDirector m_director;

	[Token(Token = "0x6002316")]
	[Address(RVA = "0x125CE64", Offset = "0x125CE64", VA = "0x125CE64")]
	public void PlayUnlockAnim()
	{
	}

	[Token(Token = "0x6002317")]
	[Address(RVA = "0x125CE78", Offset = "0x125CE78", VA = "0x125CE78")]
	public void UpdateUIMasking(bool enableMaskable)
	{
	}

	[Token(Token = "0x6002318")]
	[Address(RVA = "0x125D054", Offset = "0x125D054", VA = "0x125D054")]
	public PlayUnlockAnimation()
	{
	}
}
[Token(Token = "0x2000609")]
public class SavePanel : Panel
{
	[Token(Token = "0x4001D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_panelRoot;

	[Token(Token = "0x4001D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SaveManager m_saveManager;

	[Token(Token = "0x6002319")]
	[Address(RVA = "0x125D05C", Offset = "0x125D05C", VA = "0x125D05C", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600231A")]
	[Address(RVA = "0x125D0CC", Offset = "0x125D0CC", VA = "0x125D0CC", Slot = "12")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600231B")]
	[Address(RVA = "0x125D0D4", Offset = "0x125D0D4", VA = "0x125D0D4", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600231C")]
	[Address(RVA = "0x125D0DC", Offset = "0x125D0DC", VA = "0x125D0DC")]
	public void OnNewGameButtonPressed(SaveSlotPanel saveSlot)
	{
	}

	[Token(Token = "0x600231D")]
	[Address(RVA = "0x125D144", Offset = "0x125D144", VA = "0x125D144")]
	public void OnContinueGameButtonPressed(SaveSlotPanel saveSlot)
	{
	}

	[Token(Token = "0x600231E")]
	[Address(RVA = "0x125D1AC", Offset = "0x125D1AC", VA = "0x125D1AC")]
	public void OnClearGameButtonPressed(SaveSlotPanel saveSlot)
	{
	}

	[Token(Token = "0x600231F")]
	[Address(RVA = "0x125D2B0", Offset = "0x125D2B0", VA = "0x125D2B0")]
	public SavePanel()
	{
	}
}
[Token(Token = "0x200060A")]
public class SaveSlotPanel : CachedMonoBehaviour
{
	[Token(Token = "0x4001D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private SavePanel m_savePanel;

	[Token(Token = "0x4001D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private int m_saveSlotIndex;

	[Token(Token = "0x4001D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_newGameButton;

	[Token(Token = "0x4001D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_continueGameButton;

	[Token(Token = "0x4001D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject m_clearGameButton;

	[Token(Token = "0x170005A2")]
	public int SaveSlotIndex
	{
		[Token(Token = "0x6002320")]
		[Address(RVA = "0x125D2B8", Offset = "0x125D2B8", VA = "0x125D2B8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6002321")]
	[Address(RVA = "0x125D2C0", Offset = "0x125D2C0", VA = "0x125D2C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002322")]
	[Address(RVA = "0x125D1DC", Offset = "0x125D1DC", VA = "0x125D1DC")]
	public void UpdateSlotDisplay()
	{
	}

	[Token(Token = "0x6002323")]
	[Address(RVA = "0x125D2C4", Offset = "0x125D2C4", VA = "0x125D2C4")]
	public void OnNewGameButtonPressed()
	{
	}

	[Token(Token = "0x6002324")]
	[Address(RVA = "0x125D2E0", Offset = "0x125D2E0", VA = "0x125D2E0")]
	public void OnContinueGameButtonPressed()
	{
	}

	[Token(Token = "0x6002325")]
	[Address(RVA = "0x125D2FC", Offset = "0x125D2FC", VA = "0x125D2FC")]
	public void OnClearGameButtonPressed()
	{
	}

	[Token(Token = "0x6002326")]
	[Address(RVA = "0x125D318", Offset = "0x125D318", VA = "0x125D318")]
	public SaveSlotPanel()
	{
	}
}
[Token(Token = "0x200060B")]
public class ScoringTest : MonoBehaviour
{
	[Token(Token = "0x200060C")]
	public class state_GenerateTestScores : NestedStateBehavior<ScoringTest>
	{
		[Token(Token = "0x600232A")]
		[Address(RVA = "0x125D928", Offset = "0x125D928", VA = "0x125D928", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600232B")]
		[Address(RVA = "0x125D9E8", Offset = "0x125D9E8", VA = "0x125D9E8")]
		public state_GenerateTestScores()
		{
		}
	}

	[NonSerialized]
	[Token(Token = "0x4001D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MultiplayerScoreTracker m_scoring;

	[Token(Token = "0x4001D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<Identifier> m_enemyIds;

	[Token(Token = "0x4001D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<Identifier> m_weaponIds;

	[Token(Token = "0x4001D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int m_minNumKills;

	[Token(Token = "0x4001D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private int m_maxNumKills;

	[Token(Token = "0x4001D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float m_headShotAccuracy;

	[Token(Token = "0x4001D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int m_maxWeaponsUsed;

	[Token(Token = "0x6002327")]
	[Address(RVA = "0x125D320", Offset = "0x125D320", VA = "0x125D320")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002328")]
	[Address(RVA = "0x125D3BC", Offset = "0x125D3BC", VA = "0x125D3BC")]
	private void GenerateScores()
	{
	}

	[Token(Token = "0x6002329")]
	[Address(RVA = "0x125D904", Offset = "0x125D904", VA = "0x125D904")]
	public ScoringTest()
	{
	}
}
[Token(Token = "0x200060D")]
public abstract class AbstractSettingsButton<T> : MonoBehaviour
{
	[Token(Token = "0x4001D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[SerializeField]
	private TMP_Text m_text;

	[Token(Token = "0x4001D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected GameSettings.Setting<T> m_controlledSetting;

	[Token(Token = "0x4001D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected Action m_onSettingChanged;

	[Token(Token = "0x170005A3")]
	protected abstract string StateString
	{
		[Token(Token = "0x600232F")]
		get;
	}

	[Token(Token = "0x600232C")]
	public virtual void Init(GameSettings.Setting<T> controlledSetting, [Optional] Action onSettingChanged)
	{
	}

	[Token(Token = "0x600232D")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600232E")]
	public void RefreshLabel()
	{
	}

	[Token(Token = "0x6002330")]
	protected AbstractSettingsButton()
	{
	}
}
[Token(Token = "0x200060E")]
public class FixedIntervalSettingsButton : AbstractSettingsButton<int>
{
	[Token(Token = "0x4001D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int[] s_availableIntervals;

	[Token(Token = "0x170005A4")]
	protected override string StateString
	{
		[Token(Token = "0x6002332")]
		[Address(RVA = "0x125DBCC", Offset = "0x125DBCC", VA = "0x125DBCC", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002331")]
	[Address(RVA = "0x125DA30", Offset = "0x125DA30", VA = "0x125DA30")]
	public void OnClicked(bool increase)
	{
	}

	[Token(Token = "0x6002333")]
	[Address(RVA = "0x125DCC4", Offset = "0x125DCC4", VA = "0x125DCC4")]
	public FixedIntervalSettingsButton()
	{
	}
}
[Token(Token = "0x200060F")]
public class GoreIntensitySettingsButton : AbstractSettingsButton<GoreIntensity>
{
	[Token(Token = "0x4001D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_modeCount;

	[Token(Token = "0x170005A5")]
	protected override string StateString
	{
		[Token(Token = "0x6002337")]
		[Address(RVA = "0x125DF3C", Offset = "0x125DF3C", VA = "0x125DF3C", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002335")]
	[Address(RVA = "0x125DDAC", Offset = "0x125DDAC", VA = "0x125DDAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002336")]
	[Address(RVA = "0x125DE70", Offset = "0x125DE70", VA = "0x125DE70")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x6002338")]
	[Address(RVA = "0x125E014", Offset = "0x125E014", VA = "0x125E014")]
	public GoreIntensitySettingsButton()
	{
	}
}
[Token(Token = "0x2000610")]
public class HandednessSettingsButton : AbstractSettingsButton<Handedness>
{
	[Token(Token = "0x170005A6")]
	protected override string StateString
	{
		[Token(Token = "0x600233A")]
		[Address(RVA = "0x125E150", Offset = "0x125E150", VA = "0x125E150", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002339")]
	[Address(RVA = "0x125E05C", Offset = "0x125E05C", VA = "0x125E05C")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x600233B")]
	[Address(RVA = "0x125E1DC", Offset = "0x125E1DC", VA = "0x125E1DC")]
	public HandednessSettingsButton()
	{
	}
}
[Token(Token = "0x2000611")]
public class IntSpinnerSettingsButton : AbstractSettingsButton<int>
{
	[Token(Token = "0x4001D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Min(1f)]
	private int m_delta;

	[Token(Token = "0x170005A7")]
	protected override string StateString
	{
		[Token(Token = "0x600233D")]
		[Address(RVA = "0x125E2F4", Offset = "0x125E2F4", VA = "0x125E2F4", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170005A8")]
	public int delta
	{
		[Token(Token = "0x600233E")]
		[Address(RVA = "0x125E374", Offset = "0x125E374", VA = "0x125E374")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600233F")]
		[Address(RVA = "0x125E37C", Offset = "0x125E37C", VA = "0x125E37C")]
		set
		{
		}
	}

	[Token(Token = "0x600233C")]
	[Address(RVA = "0x125E224", Offset = "0x125E224", VA = "0x125E224")]
	public void OnClicked(bool increase)
	{
	}

	[Token(Token = "0x6002340")]
	[Address(RVA = "0x125E384", Offset = "0x125E384", VA = "0x125E384")]
	public IntSpinnerSettingsButton()
	{
	}
}
[Token(Token = "0x2000612")]
public class LanguageSelect : MonoBehaviour
{
	[Token(Token = "0x4001D6D")]
	private const string c_keyLanguageId = "languageId";

	[Token(Token = "0x4001D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_restartWarningTransform;

	[Token(Token = "0x4001D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string m_languageIdAtOpen;

	[Token(Token = "0x4001D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string m_currentLanguageId;

	[Token(Token = "0x6002341")]
	[Address(RVA = "0x125E3D4", Offset = "0x125E3D4", VA = "0x125E3D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002342")]
	[Address(RVA = "0x125E44C", Offset = "0x125E44C", VA = "0x125E44C")]
	public void UpdateSelectedLanguage(string requestedLanguageId)
	{
	}

	[Token(Token = "0x6002343")]
	[Address(RVA = "0x125E454", Offset = "0x125E454", VA = "0x125E454")]
	public void OnConfirmButtonPressed()
	{
	}

	[Token(Token = "0x6002344")]
	[Address(RVA = "0x125E4AC", Offset = "0x125E4AC", VA = "0x125E4AC")]
	public void OnCancelButtonPressed()
	{
	}

	[Token(Token = "0x6002345")]
	[Address(RVA = "0x125E4D0", Offset = "0x125E4D0", VA = "0x125E4D0")]
	public void ConfirmLanguageChange()
	{
	}

	[Token(Token = "0x6002346")]
	[Address(RVA = "0x125E64C", Offset = "0x125E64C", VA = "0x125E64C")]
	public static void SaveLanguagePlayerPrefs(Language language)
	{
	}

	[Token(Token = "0x6002347")]
	[Address(RVA = "0x125E6E0", Offset = "0x125E6E0", VA = "0x125E6E0")]
	public static Language GetSavedLanguagePlayerPrefs()
	{
		return default(Language);
	}

	[Token(Token = "0x6002348")]
	[Address(RVA = "0x125E818", Offset = "0x125E818", VA = "0x125E818")]
	public LanguageSelect()
	{
	}
}
[Token(Token = "0x2000613")]
public class PlayerBeltHeightButton : IntSpinnerSettingsButton
{
	[Token(Token = "0x170005A9")]
	protected override string StateString
	{
		[Token(Token = "0x6002349")]
		[Address(RVA = "0x125E820", Offset = "0x125E820", VA = "0x125E820", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600234A")]
	[Address(RVA = "0x125E8B8", Offset = "0x125E8B8", VA = "0x125E8B8")]
	public PlayerBeltHeightButton()
	{
	}
}
[Token(Token = "0x2000614")]
public class PlayerBeltScaleButton : IntSpinnerSettingsButton
{
	[Token(Token = "0x170005AA")]
	protected override string StateString
	{
		[Token(Token = "0x600234B")]
		[Address(RVA = "0x125E8BC", Offset = "0x125E8BC", VA = "0x125E8BC", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600234C")]
	[Address(RVA = "0x125E954", Offset = "0x125E954", VA = "0x125E954")]
	public PlayerBeltScaleButton()
	{
	}
}
[Token(Token = "0x2000615")]
public class PlayerHeightSettingsButton : IntSpinnerSettingsButton
{
	[Token(Token = "0x170005AB")]
	protected override string StateString
	{
		[Token(Token = "0x600234D")]
		[Address(RVA = "0x125E958", Offset = "0x125E958", VA = "0x125E958", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600234E")]
	[Address(RVA = "0x125E9E0", Offset = "0x125E9E0", VA = "0x125E9E0")]
	public PlayerHeightSettingsButton()
	{
	}
}
[Token(Token = "0x2000616")]
public class CheatsAndHelpers : MonoBehaviour
{
	[Token(Token = "0x600234F")]
	[Address(RVA = "0x125E9E4", Offset = "0x125E9E4", VA = "0x125E9E4")]
	public void AddTenResearchPoints(SettingsAutoContent.HelperButtonData helper)
	{
	}

	[Token(Token = "0x6002350")]
	[Address(RVA = "0x125E9F0", Offset = "0x125E9F0", VA = "0x125E9F0")]
	public void AddHundredResearchPoints(SettingsAutoContent.HelperButtonData helper)
	{
	}

	[Token(Token = "0x6002351")]
	[Address(RVA = "0x125E9FC", Offset = "0x125E9FC", VA = "0x125E9FC")]
	public CheatsAndHelpers()
	{
	}
}
[Token(Token = "0x2000617")]
public class HelperButton : MonoBehaviour, IDataSource
{
	[Token(Token = "0x4001D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string m_label;

	[Token(Token = "0x4001D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string m_buttonLabel;

	[Token(Token = "0x170005AC")]
	public string label
	{
		[Token(Token = "0x6002352")]
		[Address(RVA = "0x125EA04", Offset = "0x125EA04", VA = "0x125EA04")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002353")]
		[Address(RVA = "0x125EA0C", Offset = "0x125EA0C", VA = "0x125EA0C")]
		set
		{
		}
	}

	[Token(Token = "0x170005AD")]
	public string buttonLabel
	{
		[Token(Token = "0x6002354")]
		[Address(RVA = "0x125EA78", Offset = "0x125EA78", VA = "0x125EA78")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002355")]
		[Address(RVA = "0x125EA80", Offset = "0x125EA80", VA = "0x125EA80")]
		set
		{
		}
	}

	[Token(Token = "0x6002356")]
	[Address(RVA = "0x125EAEC", Offset = "0x125EAEC", VA = "0x125EAEC")]
	public HelperButton()
	{
	}
}
[Token(Token = "0x2000618")]
public class SettingsAutoContent : SettingsContent
{
	[Serializable]
	[Token(Token = "0x2000619")]
	public class SettingsData
	{
		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string gameSettingsName;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string label;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject buttonPrefab;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delta;

		[Token(Token = "0x600235B")]
		[Address(RVA = "0x125F398", Offset = "0x125F398", VA = "0x125F398")]
		public SettingsData()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200061A")]
	public class HelperButtonData
	{
		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string label;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject buttonPrefab;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent<HelperButtonData> buttonEvent;

		[Token(Token = "0x600235C")]
		[Address(RVA = "0x125F3A8", Offset = "0x125F3A8", VA = "0x125F3A8")]
		public void onClicked()
		{
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0x125F404", Offset = "0x125F404", VA = "0x125F404")]
		public HelperButtonData()
		{
		}
	}

	[Token(Token = "0x4001D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_panelRoot;

	[Token(Token = "0x4001D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<SettingsData> m_settingsData;

	[Token(Token = "0x4001D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<HelperButtonData> m_buttonHelpers;

	[Token(Token = "0x6002357")]
	[Address(RVA = "0x125EAF4", Offset = "0x125EAF4", VA = "0x125EAF4", Slot = "4")]
	protected override void Init()
	{
	}

	[Token(Token = "0x6002358")]
	[Address(RVA = "0x125F2B8", Offset = "0x125F2B8", VA = "0x125F2B8")]
	public SettingsAutoContent()
	{
	}
}
[Token(Token = "0x200061C")]
public abstract class SettingsContent : MonoBehaviour
{
	[Token(Token = "0x6002360")]
	[Address(RVA = "0x125F448", Offset = "0x125F448", VA = "0x125F448")]
	private void Start()
	{
	}

	[Token(Token = "0x6002361")]
	protected abstract void Init();

	[Token(Token = "0x6002362")]
	[Address(RVA = "0x125F454", Offset = "0x125F454", VA = "0x125F454")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002363")]
	[Address(RVA = "0x125F390", Offset = "0x125F390", VA = "0x125F390")]
	protected SettingsContent()
	{
	}
}
[Token(Token = "0x200061D")]
public class SettingsContentDeveloper : SettingsContent
{
	[Token(Token = "0x4001D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ToggleSettingsButton m_forcePointWalkPhaseButton;

	[Token(Token = "0x4001D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ToggleSettingsButton m_aiIgnorePlayerButton;

	[Token(Token = "0x4001D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ToggleSettingsButton m_friendyFireButton;

	[Token(Token = "0x4001D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ToggleSettingsButton m_handScanLineButton;

	[Token(Token = "0x4001D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ToggleSettingsButton m_characterRenderersEnabledButton;

	[Token(Token = "0x4001D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ToggleSettingsButton m_aiEnabledButton;

	[Token(Token = "0x4001D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ToggleSettingsButton m_blockAllNpcSpawningButton;

	[Token(Token = "0x4001D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ToggleSettingsButton m_blockAgentTargetingButton;

	[Token(Token = "0x4001D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ToggleSettingsButton m_blockAgentShootingButton;

	[Token(Token = "0x4001D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ToggleSettingsButton m_blockAgentCoverButton;

	[Token(Token = "0x4001D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ToggleSettingsButton m_blockAgentPathingButton;

	[Token(Token = "0x4001D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private FixedIntervalSettingsButton m_fixedUpdateRateButton;

	[Token(Token = "0x4001D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private ToggleSettingsButton m_gunshotVisualsEnabled;

	[Token(Token = "0x4001D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private ToggleSettingsButton m_gunshotAudioEnabled;

	[Token(Token = "0x4001D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private IntSpinnerSettingsButton m_maxKinematicBulletsButton;

	[Token(Token = "0x4001D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private IntSpinnerSettingsButton m_perFrameKinematicBulletsButton;

	[Token(Token = "0x4001D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private IntSpinnerSettingsButton m_agentRaycastMaxBatchWindowButton;

	[Token(Token = "0x4001D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private ToggleSettingsButton m_playerInvincibleButton;

	[Token(Token = "0x4001D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private ToggleSettingsButton m_playerUndyingButton;

	[Token(Token = "0x4001D91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private ToggleSettingsButton m_infiniteAmmoButton;

	[Token(Token = "0x4001D92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private ToggleSettingsButton m_agentDebugTextButton;

	[Token(Token = "0x4001D93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private SpinnerSettingsButton m_pointWalkParabolaHorizontalCastSpeedButton;

	[Token(Token = "0x4001D94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private SpinnerSettingsButton m_pointWalkZoomTransitionTimeButton;

	[Token(Token = "0x4001D95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private ToggleSettingsButton m_usePersistentDataButton;

	[Token(Token = "0x4001D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private ToggleSettingsButton m_bypassSacredRiteFaithRequirementButton;

	[Token(Token = "0x4001D97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private ToggleSettingsButton m_useVelocityBasedSlowdownButton;

	[Token(Token = "0x4001D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private SpinnerSettingsButton m_slowdownPercentage;

	[Token(Token = "0x4001D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private IntSpinnerSettingsButton m_maxNonPlayerAgentsButton;

	[Token(Token = "0x4001D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private ToggleSettingsButton m_shaderPerformanceButton;

	[Token(Token = "0x4001D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private ToggleSettingsButton m_shaderAlbedoOnlyButton;

	[Token(Token = "0x4001D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ToggleSettingsButton m_colorCorrectionButton;

	[Token(Token = "0x4001D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private ToggleSettingsButton m_ditheringButton;

	[Token(Token = "0x4001D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private ToggleSettingsButton m_dynamicCullingButton;

	[Token(Token = "0x4001D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private SpinnerSettingsButton m_resolutionScaling;

	[Token(Token = "0x4001DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private ToggleSettingsButton m_stopRendering;

	[Token(Token = "0x4001DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private ToggleSettingsButton m_enableStreamingTetrahedralize;

	[Token(Token = "0x4001DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private ThreadPrioritySettingsButton m_backgroundLoadingPriority;

	[Token(Token = "0x4001DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private ToggleSettingsButton m_enableWindButton;

	[Token(Token = "0x6002364")]
	[Address(RVA = "0x125F4A4", Offset = "0x125F4A4", VA = "0x125F4A4", Slot = "4")]
	protected override void Init()
	{
	}

	[Token(Token = "0x6002365")]
	[Address(RVA = "0x12602B8", Offset = "0x12602B8", VA = "0x12602B8")]
	public void OnResetPersistentDataClicked()
	{
	}

	[Token(Token = "0x6002366")]
	[Address(RVA = "0x1260308", Offset = "0x1260308", VA = "0x1260308")]
	public SettingsContentDeveloper()
	{
	}
}
[Token(Token = "0x200061E")]
public class SettingsContentPlayer : SettingsContent
{
	[Token(Token = "0x4001DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Controls")]
	[SerializeField]
	private ToggleSettingsButton m_toggleGripButton;

	[Token(Token = "0x4001DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PlayerHeightSettingsButton m_heightAdjustmentButton;

	[Token(Token = "0x4001DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PlayerHeightSettingsButton m_armLengthAdjustmentButton;

	[Token(Token = "0x4001DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlayerBeltHeightButton m_beltHeightAdjustmentButton;

	[Token(Token = "0x4001DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PlayerBeltScaleButton m_beltScaleAdjustmentButton;

	[Token(Token = "0x4001DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PlayerBeltScaleButton m_beltDepthAdjustmentButton;

	[Token(Token = "0x4001DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private IntSpinnerSettingsButton m_beltHipHolsterAdjustmentButton;

	[Token(Token = "0x4001DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Space]
	[SerializeField]
	private HandednessSettingsButton m_handednessButton;

	[Token(Token = "0x4001DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ToggleSettingsButton m_arcadeReloadButton;

	[Token(Token = "0x4001DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ToggleSettingsButton m_toggleUserTestingStops;

	[Token(Token = "0x4001DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ToggleSettingsButton m_turnAroundEnabledButton;

	[Token(Token = "0x4001DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private SpinnerSettingsButton m_turnAroundDurationButton;

	[Token(Token = "0x4001DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private SpinnerSettingsButton m_freeLookTurnAngularSpeedButton;

	[Token(Token = "0x4001DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private SpinnerSettingsButton m_freeLookTurnAngularSpeedSubdivisionButton;

	[Token(Token = "0x4001DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private SpinnerSettingsButton m_freeLookCrouchSpeedButton;

	[Token(Token = "0x4001DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Comfort")]
	[SerializeField]
	private ToggleSettingsButton m_vignetteButton;

	[Token(Token = "0x4001DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private TurnModeSettingsButton m_turnModeButton;

	[Token(Token = "0x4001DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private SpinnerSettingsButton m_stickUpwardConeThresholdAngleButton;

	[Token(Token = "0x4001DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private ToggleSettingsButton m_toggleInventoryHaptics;

	[Token(Token = "0x4001DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private GoreIntensitySettingsButton m_goreIntensitySettingsButton;

	[Token(Token = "0x4001DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private WristwatchOrientationSettingsButton m_wristwatchOrientationSettingsButton;

	[Token(Token = "0x4001DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private SpinnerSettingsButton m_smoothTurnSpeedButton;

	[Token(Token = "0x4001DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Space]
	private ToggleSettingsButton m_freeWalkCastFromHeadButton;

	[Token(Token = "0x4001DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private ToggleSettingsButton m_analogueCrouchingButton;

	[Token(Token = "0x4001DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private SpinnerSettingsButton m_deadzoneButton;

	[Token(Token = "0x4001DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private ToggleSettingsButton m_toggleInventoryHud;

	[Token(Token = "0x4001DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private ToggleSettingsButton m_dynamicTutorialsButton;

	[Token(Token = "0x4001DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("Audio")]
	[SerializeField]
	private ToggleSettingsButton m_subtitlesButton;

	[Token(Token = "0x4001DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private VivoxVolumeSlider m_voiceChatLevel;

	[Token(Token = "0x4001DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private VivoxMuteButton m_voiceChatMute;

	[Token(Token = "0x4001DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ToggleSettingsButton m_playerVOButton;

	[Token(Token = "0x4001DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Header("Display")]
	[SerializeField]
	private ToggleSettingsButton m_dynamicResolutionScalingButton;

	[Token(Token = "0x4001DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private IntSpinnerSettingsButton m_msaaStrengthButton;

	[Token(Token = "0x4001DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private IntSpinnerSettingsButton m_fixedFoveatedRenderingStrengthButton;

	[Token(Token = "0x4001DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private SpinnerSettingsButton m_textureQualityButton;

	[Token(Token = "0x4001DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[Header("Dev")]
	private ToggleSettingsButton m_debugPanelButton;

	[Token(Token = "0x4001DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private ToggleSettingsButton m_shortGamePanelButton;

	[Token(Token = "0x6002367")]
	[Address(RVA = "0x1260310", Offset = "0x1260310", VA = "0x1260310", Slot = "4")]
	protected override void Init()
	{
	}

	[Token(Token = "0x6002368")]
	[Address(RVA = "0x12612B8", Offset = "0x12612B8", VA = "0x12612B8")]
	public void OnResetClicked()
	{
	}

	[Token(Token = "0x6002369")]
	[Address(RVA = "0x1261384", Offset = "0x1261384", VA = "0x1261384")]
	public SettingsContentPlayer()
	{
	}
}
[Token(Token = "0x200061F")]
public class SettingsPanel : Panel
{
	[Token(Token = "0x2000620")]
	public class state_SelectSettingScreenOption : ButtonHandlerState<SettingsPanel>
	{
		[Token(Token = "0x6002370")]
		[Address(RVA = "0x1261604", Offset = "0x1261604", VA = "0x1261604", Slot = "13")]
		protected override bool OnButtonClicked(Identifier buttonID, ButtonHandler button)
		{
			return default(bool);
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0x1261854", Offset = "0x1261854", VA = "0x1261854")]
		public state_SelectSettingScreenOption()
		{
		}
	}

	[Token(Token = "0x4001DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Identifier m_heightCalibrationId;

	[Token(Token = "0x4001DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Identifier m_creditsID;

	[Token(Token = "0x170005AE")]
	public static SettingsPanel ActiveSettingsPanel
	{
		[Token(Token = "0x600236A")]
		[Address(RVA = "0x126138C", Offset = "0x126138C", VA = "0x126138C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600236B")]
		[Address(RVA = "0x12613D4", Offset = "0x12613D4", VA = "0x12613D4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600236C")]
	[Address(RVA = "0x126142C", Offset = "0x126142C", VA = "0x126142C", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600236D")]
	[Address(RVA = "0x12614EC", Offset = "0x12614EC", VA = "0x12614EC", Slot = "13")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600236E")]
	[Address(RVA = "0x12615B0", Offset = "0x12615B0", VA = "0x12615B0")]
	public void ExitSettingsMenu()
	{
	}

	[Token(Token = "0x600236F")]
	[Address(RVA = "0x12615FC", Offset = "0x12615FC", VA = "0x12615FC")]
	public SettingsPanel()
	{
	}
}
[Token(Token = "0x2000621")]
public class SpinnerSettingsButton : AbstractSettingsButton<float>
{
	[Serializable]
	[Token(Token = "0x2000622")]
	private enum StringFormat
	{
		[Token(Token = "0x4001DCF")]
		Percentage,
		[Token(Token = "0x4001DD0")]
		Fixed,
		[Token(Token = "0x4001DD1")]
		Angle
	}

	[Token(Token = "0x4001DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Min(0.01f)]
	private float m_delta;

	[Token(Token = "0x4001DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private StringFormat m_stringFormat;

	[Token(Token = "0x170005AF")]
	public float delta
	{
		[Token(Token = "0x6002372")]
		[Address(RVA = "0x126189C", Offset = "0x126189C", VA = "0x126189C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6002373")]
		[Address(RVA = "0x12618A4", Offset = "0x12618A4", VA = "0x12618A4")]
		set
		{
		}
	}

	[Token(Token = "0x170005B0")]
	protected override string StateString
	{
		[Token(Token = "0x6002375")]
		[Address(RVA = "0x126197C", Offset = "0x126197C", VA = "0x126197C", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002374")]
	[Address(RVA = "0x12618AC", Offset = "0x12618AC", VA = "0x12618AC")]
	public void OnClicked(bool increase)
	{
	}

	[Token(Token = "0x6002376")]
	[Address(RVA = "0x1261B2C", Offset = "0x1261B2C", VA = "0x1261B2C")]
	public SpinnerSettingsButton()
	{
	}
}
[Token(Token = "0x2000623")]
public class ThreadPrioritySettingsButton : AbstractSettingsButton<ThreadPriority>
{
	[Token(Token = "0x4001DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_modeCount;

	[Token(Token = "0x170005B1")]
	protected override string StateString
	{
		[Token(Token = "0x6002379")]
		[Address(RVA = "0x1261D10", Offset = "0x1261D10", VA = "0x1261D10", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002377")]
	[Address(RVA = "0x1261B80", Offset = "0x1261B80", VA = "0x1261B80")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002378")]
	[Address(RVA = "0x1261C44", Offset = "0x1261C44", VA = "0x1261C44")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x600237A")]
	[Address(RVA = "0x1261D9C", Offset = "0x1261D9C", VA = "0x1261D9C")]
	public ThreadPrioritySettingsButton()
	{
	}
}
[Token(Token = "0x2000624")]
public class ToggleSettingsButton : AbstractSettingsButton<bool>
{
	[Token(Token = "0x4001DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[FormerlySerializedAs("m_enabledString")]
	[SerializeField]
	private string m_enabledStringLocId;

	[Token(Token = "0x4001DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[FormerlySerializedAs("m_disabledString")]
	[SerializeField]
	private string m_disabledStringLocId;

	[Token(Token = "0x170005B2")]
	protected override string StateString
	{
		[Token(Token = "0x600237C")]
		[Address(RVA = "0x1261EB0", Offset = "0x1261EB0", VA = "0x1261EB0", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600237B")]
	[Address(RVA = "0x1261DE4", Offset = "0x1261DE4", VA = "0x1261DE4")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x600237D")]
	[Address(RVA = "0x1261F1C", Offset = "0x1261F1C", VA = "0x1261F1C")]
	public ToggleSettingsButton()
	{
	}
}
[Token(Token = "0x2000625")]
public class TurnModeSettingsButton : AbstractSettingsButton<TurnMode>
{
	[Token(Token = "0x4001DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_modeCount;

	[Token(Token = "0x170005B3")]
	protected override string StateString
	{
		[Token(Token = "0x6002380")]
		[Address(RVA = "0x1262144", Offset = "0x1262144", VA = "0x1262144", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600237E")]
	[Address(RVA = "0x1261FB4", Offset = "0x1261FB4", VA = "0x1261FB4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600237F")]
	[Address(RVA = "0x1262078", Offset = "0x1262078", VA = "0x1262078")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x6002381")]
	[Address(RVA = "0x126221C", Offset = "0x126221C", VA = "0x126221C")]
	public TurnModeSettingsButton()
	{
	}
}
[Token(Token = "0x2000626")]
[RequireComponent(typeof(TMP_Text))]
public class VersionDisplay : MonoBehaviour
{
	[Token(Token = "0x4001DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AutoComponent]
	private TMP_Text m_label;

	[Token(Token = "0x6002382")]
	[Address(RVA = "0x1262264", Offset = "0x1262264", VA = "0x1262264")]
	private void Start()
	{
	}

	[Token(Token = "0x6002383")]
	[Address(RVA = "0x1262314", Offset = "0x1262314", VA = "0x1262314")]
	public VersionDisplay()
	{
	}
}
[Token(Token = "0x2000627")]
public class WristwatchOrientationSettingsButton : AbstractSettingsButton<WristwatchOrientations>
{
	[Token(Token = "0x4001DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_modeCount;

	[Token(Token = "0x170005B4")]
	protected override string StateString
	{
		[Token(Token = "0x6002386")]
		[Address(RVA = "0x126264C", Offset = "0x126264C", VA = "0x126264C", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002384")]
	[Address(RVA = "0x126231C", Offset = "0x126231C", VA = "0x126231C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002385")]
	[Address(RVA = "0x12623E0", Offset = "0x12623E0", VA = "0x12623E0")]
	public void OnClicked()
	{
	}

	[Token(Token = "0x6002387")]
	[Address(RVA = "0x1262704", Offset = "0x1262704", VA = "0x1262704")]
	public WristwatchOrientationSettingsButton()
	{
	}
}
[Token(Token = "0x2000628")]
public class State_BootDecision : BaseStateAttachedLogic
{
	[Token(Token = "0x6002388")]
	[Address(RVA = "0x126274C", Offset = "0x126274C", VA = "0x126274C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002389")]
	[Address(RVA = "0x1262924", Offset = "0x1262924", VA = "0x1262924", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600238A")]
	[Address(RVA = "0x126292C", Offset = "0x126292C", VA = "0x126292C", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600238B")]
	[Address(RVA = "0x1262934", Offset = "0x1262934", VA = "0x1262934")]
	public State_BootDecision()
	{
	}
}
[Token(Token = "0x2000629")]
public class State_CheckDeviceSupported : BaseStateAttachedLogic
{
	[Token(Token = "0x600238C")]
	[Address(RVA = "0x126293C", Offset = "0x126293C", VA = "0x126293C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600238D")]
	[Address(RVA = "0x12629A8", Offset = "0x12629A8", VA = "0x12629A8")]
	public State_CheckDeviceSupported()
	{
	}
}
[Token(Token = "0x200062A")]
public class State_ClearAssetsAndMemory : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.AsyncOperation unloadAssetsOp;

	[Token(Token = "0x600238E")]
	[Address(RVA = "0x12629B0", Offset = "0x12629B0", VA = "0x12629B0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600238F")]
	[Address(RVA = "0x12629D4", Offset = "0x12629D4", VA = "0x12629D4", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6002390")]
	[Address(RVA = "0x1262A44", Offset = "0x1262A44", VA = "0x1262A44")]
	public State_ClearAssetsAndMemory()
	{
	}
}
[Token(Token = "0x200062B")]
public class State_ClearDynamicGameplayObjects : BaseStateAttachedLogic
{
	[Token(Token = "0x6002391")]
	[Address(RVA = "0x1262A4C", Offset = "0x1262A4C", VA = "0x1262A4C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002392")]
	[Address(RVA = "0x1262B04", Offset = "0x1262B04", VA = "0x1262B04")]
	public State_ClearDynamicGameplayObjects()
	{
	}
}
[Token(Token = "0x200062C")]
public class State_ClearPlayerInventory : BaseStateAttachedLogic
{
	[Token(Token = "0x6002393")]
	[Address(RVA = "0x1262B0C", Offset = "0x1262B0C", VA = "0x1262B0C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002394")]
	[Address(RVA = "0x1262C70", Offset = "0x1262C70", VA = "0x1262C70")]
	public State_ClearPlayerInventory()
	{
	}
}
[Token(Token = "0x200062D")]
public class State_ClearPoolManager : BaseStateAttachedLogic
{
	[Token(Token = "0x6002395")]
	[Address(RVA = "0x1262C78", Offset = "0x1262C78", VA = "0x1262C78", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002396")]
	[Address(RVA = "0x1262E64", Offset = "0x1262E64", VA = "0x1262E64")]
	public State_ClearPoolManager()
	{
	}
}
[Token(Token = "0x200062E")]
public class State_DisableUnityOcclusion : BaseStateAttachedLogic
{
	[Token(Token = "0x6002397")]
	[Address(RVA = "0x1262E6C", Offset = "0x1262E6C", VA = "0x1262E6C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002398")]
	[Address(RVA = "0x1262F14", Offset = "0x1262F14", VA = "0x1262F14")]
	public State_DisableUnityOcclusion()
	{
	}
}
[Token(Token = "0x200062F")]
public class State_ExitGame : BaseStateAttachedLogic
{
	[Token(Token = "0x6002399")]
	[Address(RVA = "0x1262F1C", Offset = "0x1262F1C", VA = "0x1262F1C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600239A")]
	[Address(RVA = "0x1262F34", Offset = "0x1262F34", VA = "0x1262F34")]
	public State_ExitGame()
	{
	}
}
[Token(Token = "0x2000630")]
public class State_FadeIn : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_waitTime;

	[Token(Token = "0x4001DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_waitCounter;

	[Token(Token = "0x170005B5")]
	[StateConfig("Should Override Duration")]
	public bool ShouldOverrideDuration
	{
		[Token(Token = "0x600239B")]
		[Address(RVA = "0x1262F3C", Offset = "0x1262F3C", VA = "0x1262F3C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600239C")]
		[Address(RVA = "0x1262F44", Offset = "0x1262F44", VA = "0x1262F44")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005B6")]
	[StateConfig("Overriden Duration")]
	public float OverridenDuration
	{
		[Token(Token = "0x600239D")]
		[Address(RVA = "0x1262F50", Offset = "0x1262F50", VA = "0x1262F50")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600239E")]
		[Address(RVA = "0x1262F58", Offset = "0x1262F58", VA = "0x1262F58")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005B7")]
	[StateConfig("Use ChapterIntro Screen Fade")]
	public bool UseChapterIntroScreenFade
	{
		[Token(Token = "0x600239F")]
		[Address(RVA = "0x1262F60", Offset = "0x1262F60", VA = "0x1262F60")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023A0")]
		[Address(RVA = "0x1262F68", Offset = "0x1262F68", VA = "0x1262F68")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023A1")]
	[Address(RVA = "0x1262F74", Offset = "0x1262F74", VA = "0x1262F74", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023A2")]
	[Address(RVA = "0x1263118", Offset = "0x1263118", VA = "0x1263118", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60023A3")]
	[Address(RVA = "0x12631AC", Offset = "0x12631AC", VA = "0x12631AC", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60023A4")]
	[Address(RVA = "0x12631B4", Offset = "0x12631B4", VA = "0x12631B4")]
	public State_FadeIn()
	{
	}
}
[Token(Token = "0x2000631")]
public class State_FadeInNoWait : BaseStateAttachedLogic
{
	[Token(Token = "0x60023A5")]
	[Address(RVA = "0x12631BC", Offset = "0x12631BC", VA = "0x12631BC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023A6")]
	[Address(RVA = "0x126328C", Offset = "0x126328C", VA = "0x126328C")]
	public State_FadeInNoWait()
	{
	}
}
[Token(Token = "0x2000632")]
public class State_FadeInstant : BaseStateAttachedLogic
{
	[Token(Token = "0x60023A7")]
	[Address(RVA = "0x1263294", Offset = "0x1263294", VA = "0x1263294", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023A8")]
	[Address(RVA = "0x1263378", Offset = "0x1263378", VA = "0x1263378", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60023A9")]
	[Address(RVA = "0x1263380", Offset = "0x1263380", VA = "0x1263380", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60023AA")]
	[Address(RVA = "0x1263388", Offset = "0x1263388", VA = "0x1263388")]
	public State_FadeInstant()
	{
	}
}
[Token(Token = "0x2000633")]
public class State_FadeOut : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_waitTime;

	[Token(Token = "0x4001DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_waitCounter;

	[Token(Token = "0x170005B8")]
	[StateConfig("Should Override Duration")]
	public bool ShouldOverrideDuration
	{
		[Token(Token = "0x60023AB")]
		[Address(RVA = "0x1263390", Offset = "0x1263390", VA = "0x1263390")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023AC")]
		[Address(RVA = "0x1263398", Offset = "0x1263398", VA = "0x1263398")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005B9")]
	[StateConfig("Overriden Duration")]
	public float OverridenDuration
	{
		[Token(Token = "0x60023AD")]
		[Address(RVA = "0x12633A4", Offset = "0x12633A4", VA = "0x12633A4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60023AE")]
		[Address(RVA = "0x12633AC", Offset = "0x12633AC", VA = "0x12633AC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005BA")]
	[StateConfig("Use ChapterIntro Screen Fade")]
	public bool UseChapterIntroScreenFade
	{
		[Token(Token = "0x60023AF")]
		[Address(RVA = "0x12633B4", Offset = "0x12633B4", VA = "0x12633B4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023B0")]
		[Address(RVA = "0x12633BC", Offset = "0x12633BC", VA = "0x12633BC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023B1")]
	[Address(RVA = "0x12633C8", Offset = "0x12633C8", VA = "0x12633C8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023B2")]
	[Address(RVA = "0x126356C", Offset = "0x126356C", VA = "0x126356C", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60023B3")]
	[Address(RVA = "0x1263600", Offset = "0x1263600", VA = "0x1263600", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60023B4")]
	[Address(RVA = "0x1263608", Offset = "0x1263608", VA = "0x1263608")]
	public State_FadeOut()
	{
	}
}
[Token(Token = "0x2000634")]
public class State_FadeOutNoWait : BaseStateAttachedLogic
{
	[Token(Token = "0x60023B5")]
	[Address(RVA = "0x1263610", Offset = "0x1263610", VA = "0x1263610", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023B6")]
	[Address(RVA = "0x12636E0", Offset = "0x12636E0", VA = "0x12636E0")]
	public State_FadeOutNoWait()
	{
	}
}
[Token(Token = "0x2000635")]
public class State_FirstBootDecision : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly GameSettings.BoolSetting FirstBoot;

	[Token(Token = "0x4001DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool? s_firstBootForThisSession;

	[Token(Token = "0x170005BB")]
	public static bool FirstBootForSession
	{
		[Token(Token = "0x60023B7")]
		[Address(RVA = "0x12636E8", Offset = "0x12636E8", VA = "0x12636E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170005BC")]
	[StateConfig("Check FTUE Loaded")]
	public bool CheckFTUELoaded
	{
		[Token(Token = "0x60023B8")]
		[Address(RVA = "0x126375C", Offset = "0x126375C", VA = "0x126375C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023B9")]
		[Address(RVA = "0x1263764", Offset = "0x1263764", VA = "0x1263764")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023BA")]
	[Address(RVA = "0x1263770", Offset = "0x1263770", VA = "0x1263770", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023BB")]
	[Address(RVA = "0x1263A14", Offset = "0x1263A14", VA = "0x1263A14")]
	public State_FirstBootDecision()
	{
	}
}
[Token(Token = "0x2000636")]
public class State_InitializeHeightDelta : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int m_completionFrame;

	[Token(Token = "0x170005BD")]
	[StateConfig("Frame delay")]
	public int FrameDelay
	{
		[Token(Token = "0x60023BD")]
		[Address(RVA = "0x1263B08", Offset = "0x1263B08", VA = "0x1263B08")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60023BE")]
		[Address(RVA = "0x1263B10", Offset = "0x1263B10", VA = "0x1263B10")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023BF")]
	[Address(RVA = "0x1263B18", Offset = "0x1263B18", VA = "0x1263B18", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023C0")]
	[Address(RVA = "0x1263B44", Offset = "0x1263B44", VA = "0x1263B44", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60023C1")]
	[Address(RVA = "0x1263BEC", Offset = "0x1263BEC", VA = "0x1263BEC")]
	public State_InitializeHeightDelta()
	{
	}
}
[Token(Token = "0x2000637")]
public class State_InitializeLocalisation : BaseStateAttachedLogic
{
	[Token(Token = "0x60023C2")]
	[Address(RVA = "0x1263BF4", Offset = "0x1263BF4", VA = "0x1263BF4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023C3")]
	[Address(RVA = "0x1263C90", Offset = "0x1263C90", VA = "0x1263C90")]
	public State_InitializeLocalisation()
	{
	}
}
[Token(Token = "0x2000638")]
public class State_LoreIntroChoice : BaseStateAttachedLogic
{
	[Token(Token = "0x170005BE")]
	[StateConfig("Lore Intro Exists?")]
	public bool LoreIntroExists
	{
		[Token(Token = "0x60023C4")]
		[Address(RVA = "0x1263C98", Offset = "0x1263C98", VA = "0x1263C98")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023C5")]
		[Address(RVA = "0x1263CA0", Offset = "0x1263CA0", VA = "0x1263CA0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023C6")]
	[Address(RVA = "0x1263CAC", Offset = "0x1263CAC", VA = "0x1263CAC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023C7")]
	[Address(RVA = "0x1263D90", Offset = "0x1263D90", VA = "0x1263D90")]
	public State_LoreIntroChoice()
	{
	}
}
[Token(Token = "0x2000639")]
public class State_MonitorForInviteAccepted : BaseStateAttachedLogic
{
	[Token(Token = "0x60023C8")]
	[Address(RVA = "0x1263D98", Offset = "0x1263D98", VA = "0x1263D98", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023C9")]
	[Address(RVA = "0x1263EC8", Offset = "0x1263EC8", VA = "0x1263EC8", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60023CA")]
	[Address(RVA = "0x1263FF8", Offset = "0x1263FF8", VA = "0x1263FF8")]
	private void OnInviteAccepted(ulong inviteId)
	{
	}

	[Token(Token = "0x60023CB")]
	[Address(RVA = "0x1264048", Offset = "0x1264048", VA = "0x1264048")]
	public State_MonitorForInviteAccepted()
	{
	}
}
[Token(Token = "0x200063A")]
public class State_MonitorForMenuPress : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_allPausingBlocked;

	[Token(Token = "0x170005BF")]
	public static bool AllPausingBlocked
	{
		[Token(Token = "0x60023CC")]
		[Address(RVA = "0x1264050", Offset = "0x1264050", VA = "0x1264050")]
		set
		{
		}
	}

	[Token(Token = "0x60023CD")]
	[Address(RVA = "0x126409C", Offset = "0x126409C", VA = "0x126409C", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60023CE")]
	[Address(RVA = "0x12640B8", Offset = "0x12640B8", VA = "0x12640B8")]
	private void MonitorForMenuPress()
	{
	}

	[Token(Token = "0x60023CF")]
	[Address(RVA = "0x126437C", Offset = "0x126437C", VA = "0x126437C")]
	public State_MonitorForMenuPress()
	{
	}
}
[Token(Token = "0x200063B")]
public class State_MonitorForPlayerDeath : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HealthStatus m_playerHealthStatus;

	[Token(Token = "0x60023D0")]
	[Address(RVA = "0x1264384", Offset = "0x1264384", VA = "0x1264384", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023D1")]
	[Address(RVA = "0x1264448", Offset = "0x1264448", VA = "0x1264448", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60023D2")]
	[Address(RVA = "0x1264464", Offset = "0x1264464", VA = "0x1264464")]
	private void MonitorForPlayerDeath()
	{
	}

	[Token(Token = "0x60023D3")]
	[Address(RVA = "0x1264780", Offset = "0x1264780", VA = "0x1264780")]
	public State_MonitorForPlayerDeath()
	{
	}
}
[Token(Token = "0x200063C")]
public class State_NewGame : BaseStateAttachedLogic
{
	[Token(Token = "0x60023D4")]
	[Address(RVA = "0x1264788", Offset = "0x1264788", VA = "0x1264788", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023D5")]
	[Address(RVA = "0x126486C", Offset = "0x126486C", VA = "0x126486C", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x60023D6")]
	[Address(RVA = "0x1264874", Offset = "0x1264874", VA = "0x1264874", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60023D7")]
	[Address(RVA = "0x126487C", Offset = "0x126487C", VA = "0x126487C")]
	public State_NewGame()
	{
	}
}
[Token(Token = "0x200063D")]
public class State_OverrideXREyeResolutionScale : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_previousScale;

	[Token(Token = "0x170005C0")]
	[StateConfig("Resolution Scale Value")]
	public float ResolutionScale
	{
		[Token(Token = "0x60023D8")]
		[Address(RVA = "0x1264884", Offset = "0x1264884", VA = "0x1264884")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60023D9")]
		[Address(RVA = "0x126488C", Offset = "0x126488C", VA = "0x126488C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023DA")]
	[Address(RVA = "0x1264894", Offset = "0x1264894", VA = "0x1264894", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023DB")]
	[Address(RVA = "0x126489C", Offset = "0x126489C", VA = "0x126489C", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x60023DC")]
	[Address(RVA = "0x12648A4", Offset = "0x12648A4", VA = "0x12648A4")]
	public State_OverrideXREyeResolutionScale()
	{
	}
}
[Token(Token = "0x200063E")]
public class State_PositionPlayer : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C1")]
	[StateConfig("Align Forward To Root")]
	public bool AlignForwardToRoot
	{
		[Token(Token = "0x60023DD")]
		[Address(RVA = "0x12648B4", Offset = "0x12648B4", VA = "0x12648B4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023DE")]
		[Address(RVA = "0x12648BC", Offset = "0x12648BC", VA = "0x12648BC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023DF")]
	[Address(RVA = "0x12648C8", Offset = "0x12648C8", VA = "0x12648C8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023E0")]
	[Address(RVA = "0x126497C", Offset = "0x126497C", VA = "0x126497C")]
	private void PositionPlayer()
	{
	}

	[Token(Token = "0x60023E1")]
	[Address(RVA = "0x1264F60", Offset = "0x1264F60", VA = "0x1264F60")]
	private void PositionNetworkPlayer()
	{
	}

	[Token(Token = "0x60023E2")]
	[Address(RVA = "0x1265690", Offset = "0x1265690", VA = "0x1265690")]
	private void PositionMultiplayerLeaderboardPlayer()
	{
	}

	[Token(Token = "0x60023E3")]
	[Address(RVA = "0x1265DA8", Offset = "0x1265DA8", VA = "0x1265DA8")]
	private void PositionSpectatorModePlayer()
	{
	}

	[Token(Token = "0x60023E4")]
	[Address(RVA = "0x12660D0", Offset = "0x12660D0", VA = "0x12660D0")]
	private void ResetFpsController(Vector3 resetPosition)
	{
	}

	[Token(Token = "0x60023E5")]
	[Address(RVA = "0x12661C8", Offset = "0x12661C8", VA = "0x12661C8")]
	public State_PositionPlayer()
	{
	}
}
[Token(Token = "0x2000641")]
public class State_PositionPlayerFar : BaseStateAttachedLogic
{
	[Token(Token = "0x60023ED")]
	[Address(RVA = "0x1266380", Offset = "0x1266380", VA = "0x1266380", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023EE")]
	[Address(RVA = "0x1266570", Offset = "0x1266570", VA = "0x1266570")]
	private static void ResetFpsController(Vector3 resetPosition)
	{
	}

	[Token(Token = "0x60023EF")]
	[Address(RVA = "0x1266660", Offset = "0x1266660", VA = "0x1266660")]
	public State_PositionPlayerFar()
	{
	}
}
[Token(Token = "0x2000642")]
public class State_RecordPlayerPositionForPauseReturn : BaseStateAttachedLogic
{
	[Token(Token = "0x60023F0")]
	[Address(RVA = "0x1266668", Offset = "0x1266668", VA = "0x1266668", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023F1")]
	[Address(RVA = "0x1266700", Offset = "0x1266700", VA = "0x1266700")]
	public State_RecordPlayerPositionForPauseReturn()
	{
	}
}
[Token(Token = "0x2000643")]
public class State_ResetPlayerHeightDelta : BaseStateAttachedLogic
{
	[Token(Token = "0x60023F2")]
	[Address(RVA = "0x1266708", Offset = "0x1266708", VA = "0x1266708", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023F3")]
	[Address(RVA = "0x12667C0", Offset = "0x12667C0", VA = "0x12667C0")]
	public State_ResetPlayerHeightDelta()
	{
	}
}
[Token(Token = "0x2000644")]
public class State_ReturnVrItemsToPool : BaseStateAttachedLogic
{
	[Token(Token = "0x60023F4")]
	[Address(RVA = "0x12667C8", Offset = "0x12667C8", VA = "0x12667C8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023F5")]
	[Address(RVA = "0x1266944", Offset = "0x1266944", VA = "0x1266944")]
	public State_ReturnVrItemsToPool()
	{
	}
}
[Token(Token = "0x2000645")]
public class State_SetPausingBlocked : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C2")]
	[StateConfig("Pausing Blocked")]
	public bool PausingBlocked
	{
		[Token(Token = "0x60023F6")]
		[Address(RVA = "0x126694C", Offset = "0x126694C", VA = "0x126694C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023F7")]
		[Address(RVA = "0x1266954", Offset = "0x1266954", VA = "0x1266954")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023F8")]
	[Address(RVA = "0x1266960", Offset = "0x1266960", VA = "0x1266960", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023F9")]
	[Address(RVA = "0x1266A04", Offset = "0x1266A04", VA = "0x1266A04")]
	public State_SetPausingBlocked()
	{
	}
}
[Token(Token = "0x2000646")]
public class State_SetPlayerActiveInLevel : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C3")]
	[StateConfig("Player Active")]
	public bool PlayerActive
	{
		[Token(Token = "0x60023FA")]
		[Address(RVA = "0x1266A0C", Offset = "0x1266A0C", VA = "0x1266A0C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60023FB")]
		[Address(RVA = "0x1266A14", Offset = "0x1266A14", VA = "0x1266A14")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60023FC")]
	[Address(RVA = "0x1266A20", Offset = "0x1266A20", VA = "0x1266A20", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x60023FD")]
	[Address(RVA = "0x1266A98", Offset = "0x1266A98", VA = "0x1266A98")]
	public State_SetPlayerActiveInLevel()
	{
	}
}
[Token(Token = "0x2000647")]
public class State_SetPlayerHandsRenderQueue : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C4")]
	[StateConfig("Hands Render Queue")]
	public int HandsRenderQueue
	{
		[Token(Token = "0x60023FE")]
		[Address(RVA = "0x1266AA0", Offset = "0x1266AA0", VA = "0x1266AA0")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60023FF")]
		[Address(RVA = "0x1266AA8", Offset = "0x1266AA8", VA = "0x1266AA8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002400")]
	[Address(RVA = "0x1266AB0", Offset = "0x1266AB0", VA = "0x1266AB0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002401")]
	[Address(RVA = "0x1266CB4", Offset = "0x1266CB4", VA = "0x1266CB4")]
	public State_SetPlayerHandsRenderQueue()
	{
	}
}
[Token(Token = "0x2000648")]
public class State_SetPlayerHandsVisible : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C5")]
	[StateConfig("Hands Visible")]
	public bool HandsVisible
	{
		[Token(Token = "0x6002402")]
		[Address(RVA = "0x1266CBC", Offset = "0x1266CBC", VA = "0x1266CBC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002403")]
		[Address(RVA = "0x1266CC4", Offset = "0x1266CC4", VA = "0x1266CC4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002404")]
	[Address(RVA = "0x1266CD0", Offset = "0x1266CD0", VA = "0x1266CD0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002405")]
	[Address(RVA = "0x1266EAC", Offset = "0x1266EAC", VA = "0x1266EAC")]
	public State_SetPlayerHandsVisible()
	{
	}
}
[Token(Token = "0x2000649")]
public class State_SetPlayerInPauseMenu : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C6")]
	[StateConfig("Entering Pause")]
	public bool EnteringPause
	{
		[Token(Token = "0x6002406")]
		[Address(RVA = "0x1266EB4", Offset = "0x1266EB4", VA = "0x1266EB4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002407")]
		[Address(RVA = "0x1266EBC", Offset = "0x1266EBC", VA = "0x1266EBC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002408")]
	[Address(RVA = "0x1266EC8", Offset = "0x1266EC8", VA = "0x1266EC8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002409")]
	[Address(RVA = "0x1266F64", Offset = "0x1266F64", VA = "0x1266F64")]
	public State_SetPlayerInPauseMenu()
	{
	}
}
[Token(Token = "0x200064A")]
public class State_SetPlayerInvincibility : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C7")]
	[StateConfig("Invincible")]
	public bool Invincible
	{
		[Token(Token = "0x600240A")]
		[Address(RVA = "0x1266F6C", Offset = "0x1266F6C", VA = "0x1266F6C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600240B")]
		[Address(RVA = "0x1266F74", Offset = "0x1266F74", VA = "0x1266F74")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600240C")]
	[Address(RVA = "0x1266F80", Offset = "0x1266F80", VA = "0x1266F80", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600240D")]
	[Address(RVA = "0x12670BC", Offset = "0x12670BC", VA = "0x12670BC")]
	public State_SetPlayerInvincibility()
	{
	}
}
[Token(Token = "0x200064B")]
public class State_SetPlayerLocomotionAllowed : BaseStateAttachedLogic
{
	[Token(Token = "0x170005C8")]
	[StateConfig("Allow Locomotion")]
	public bool AllowLocomotion
	{
		[Token(Token = "0x600240E")]
		[Address(RVA = "0x12670C4", Offset = "0x12670C4", VA = "0x12670C4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600240F")]
		[Address(RVA = "0x12670CC", Offset = "0x12670CC", VA = "0x12670CC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005C9")]
	[StateConfig("Force Reset")]
	public bool ForceReset
	{
		[Token(Token = "0x6002410")]
		[Address(RVA = "0x12670D8", Offset = "0x12670D8", VA = "0x12670D8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002411")]
		[Address(RVA = "0x12670E0", Offset = "0x12670E0", VA = "0x12670E0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002412")]
	[Address(RVA = "0x12670EC", Offset = "0x12670EC", VA = "0x12670EC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002413")]
	[Address(RVA = "0x1267198", Offset = "0x1267198", VA = "0x1267198")]
	public State_SetPlayerLocomotionAllowed()
	{
	}
}
[Token(Token = "0x200064C")]
public class State_SetPlayerPhysicsActive : BaseStateAttachedLogic
{
	[Token(Token = "0x170005CA")]
	[StateConfig("Physics Active")]
	public bool PhysicsActive
	{
		[Token(Token = "0x6002414")]
		[Address(RVA = "0x12671A0", Offset = "0x12671A0", VA = "0x12671A0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002415")]
		[Address(RVA = "0x12671A8", Offset = "0x12671A8", VA = "0x12671A8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002416")]
	[Address(RVA = "0x12671B4", Offset = "0x12671B4", VA = "0x12671B4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002417")]
	[Address(RVA = "0x126729C", Offset = "0x126729C", VA = "0x126729C")]
	public State_SetPlayerPhysicsActive()
	{
	}
}
[Token(Token = "0x200064D")]
public class State_SetPlayerVisibility : BaseStateAttachedLogic
{
	[Token(Token = "0x170005CB")]
	[StateConfig("Show Local")]
	public bool ShowLocal
	{
		[Token(Token = "0x6002418")]
		[Address(RVA = "0x12672A4", Offset = "0x12672A4", VA = "0x12672A4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002419")]
		[Address(RVA = "0x12672AC", Offset = "0x12672AC", VA = "0x12672AC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005CC")]
	[StateConfig("Show Remote")]
	public bool ShowRemote
	{
		[Token(Token = "0x600241A")]
		[Address(RVA = "0x12672B8", Offset = "0x12672B8", VA = "0x12672B8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600241B")]
		[Address(RVA = "0x12672C0", Offset = "0x12672C0", VA = "0x12672C0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600241C")]
	[Address(RVA = "0x12672CC", Offset = "0x12672CC", VA = "0x12672CC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600241D")]
	[Address(RVA = "0x1267414", Offset = "0x1267414", VA = "0x1267414")]
	public State_SetPlayerVisibility()
	{
	}
}
[Token(Token = "0x200064E")]
public class State_SetTimeScale : BaseStateAttachedLogic
{
	[Token(Token = "0x170005CD")]
	[StateConfig("Time Scale Value")]
	public float TimeScale
	{
		[Token(Token = "0x600241E")]
		[Address(RVA = "0x126741C", Offset = "0x126741C", VA = "0x126741C")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600241F")]
		[Address(RVA = "0x1267424", Offset = "0x1267424", VA = "0x1267424")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002420")]
	[Address(RVA = "0x126742C", Offset = "0x126742C", VA = "0x126742C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002421")]
	[Address(RVA = "0x12674D8", Offset = "0x12674D8", VA = "0x12674D8")]
	public State_SetTimeScale()
	{
	}
}
[Token(Token = "0x200064F")]
public class State_ShowChapterIntro : BaseStateAttachedLogic
{
	[Token(Token = "0x6002422")]
	[Address(RVA = "0x12674E0", Offset = "0x12674E0", VA = "0x12674E0", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002423")]
	[Address(RVA = "0x12675D8", Offset = "0x12675D8", VA = "0x12675D8", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6002424")]
	[Address(RVA = "0x1267678", Offset = "0x1267678", VA = "0x1267678")]
	public State_ShowChapterIntro()
	{
	}
}
[Token(Token = "0x2000650")]
public class State_ShowContinueText : BaseStateAttachedLogic
{
	[Token(Token = "0x4001DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool playerHasSkipped;

	[Token(Token = "0x170005CE")]
	[StateConfig("Show ")]
	public bool Show
	{
		[Token(Token = "0x6002426")]
		[Address(RVA = "0x12676C8", Offset = "0x12676C8", VA = "0x12676C8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002427")]
		[Address(RVA = "0x12676D0", Offset = "0x12676D0", VA = "0x12676D0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002425")]
	[Address(RVA = "0x1267680", Offset = "0x1267680", VA = "0x1267680")]
	public static void ResetFromLoad()
	{
	}

	[Token(Token = "0x6002428")]
	[Address(RVA = "0x12676DC", Offset = "0x12676DC", VA = "0x12676DC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002429")]
	[Address(RVA = "0x1267804", Offset = "0x1267804", VA = "0x1267804", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600242A")]
	[Address(RVA = "0x12678C8", Offset = "0x12678C8", VA = "0x12678C8")]
	public State_ShowContinueText()
	{
	}
}
[Token(Token = "0x2000651")]
public class State_ShowDeathScreen : BaseStateAttachedLogic
{
	[Token(Token = "0x600242B")]
	[Address(RVA = "0x12678D8", Offset = "0x12678D8", VA = "0x12678D8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600242C")]
	[Address(RVA = "0x1267980", Offset = "0x1267980", VA = "0x1267980", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600242D")]
	[Address(RVA = "0x1267A20", Offset = "0x1267A20", VA = "0x1267A20")]
	public State_ShowDeathScreen()
	{
	}
}
[Token(Token = "0x2000652")]
public class State_ShowLoadingScreenContent : BaseStateAttachedLogic
{
	[Token(Token = "0x4001E01")]
	public const int FallbackDataIndex = -1;

	[Token(Token = "0x170005CF")]
	[StateConfig("Show")]
	public bool Show
	{
		[Token(Token = "0x600242E")]
		[Address(RVA = "0x1267A28", Offset = "0x1267A28", VA = "0x1267A28")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600242F")]
		[Address(RVA = "0x1267A30", Offset = "0x1267A30", VA = "0x1267A30")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005D0")]
	[StateConfig("Load Screen Content Index")]
	public int LoadingScreenContentDataIndex
	{
		[Token(Token = "0x6002430")]
		[Address(RVA = "0x1267A3C", Offset = "0x1267A3C", VA = "0x1267A3C")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6002431")]
		[Address(RVA = "0x1267A44", Offset = "0x1267A44", VA = "0x1267A44")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002432")]
	[Address(RVA = "0x1267A4C", Offset = "0x1267A4C", VA = "0x1267A4C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002433")]
	[Address(RVA = "0x1267B14", Offset = "0x1267B14", VA = "0x1267B14")]
	private void ShowLevelLoadingScreen()
	{
	}

	[Token(Token = "0x6002434")]
	[Address(RVA = "0x1267B70", Offset = "0x1267B70", VA = "0x1267B70")]
	private void ShowGenericLoadingScreen()
	{
	}

	[Token(Token = "0x6002435")]
	[Address(RVA = "0x1267BD0", Offset = "0x1267BD0", VA = "0x1267BD0")]
	public State_ShowLoadingScreenContent()
	{
	}
}
[Token(Token = "0x2000653")]
public class State_ShowLoreIntro : MonoBehaviourBaseStateAttachedLogic
{
	[Serializable]
	[Token(Token = "0x2000654")]
	private class LorePage
	{
		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string m_stringID;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_audioDuration;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Sprite m_loreSprite;

		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioSimplePlayer m_audioSimplePlayer;

		[Token(Token = "0x170005D2")]
		public string StringID
		{
			[Token(Token = "0x600243D")]
			[Address(RVA = "0x1268000", Offset = "0x1268000", VA = "0x1268000")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005D3")]
		public float AudioDuration
		{
			[Token(Token = "0x600243E")]
			[Address(RVA = "0x1268008", Offset = "0x1268008", VA = "0x1268008")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005D4")]
		public Sprite LoreSprite
		{
			[Token(Token = "0x600243F")]
			[Address(RVA = "0x1268010", Offset = "0x1268010", VA = "0x1268010")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002440")]
		[Address(RVA = "0x1268018", Offset = "0x1268018", VA = "0x1268018")]
		public void PlayAudio()
		{
		}

		[Token(Token = "0x6002441")]
		[Address(RVA = "0x1267F10", Offset = "0x1267F10", VA = "0x1267F10")]
		internal void StopAudio()
		{
		}

		[Token(Token = "0x6002442")]
		[Address(RVA = "0x126809C", Offset = "0x126809C", VA = "0x126809C")]
		public LorePage()
		{
		}
	}

	[Token(Token = "0x2000655")]
	[CompilerGenerated]
	private sealed class <PlayAsync>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public State_ShowLoreIntro <>4__this;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <pageIndex>5__2;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LorePage <activePage>5__3;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <startTime>5__4;

		[Token(Token = "0x170005D5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002446")]
			[Address(RVA = "0x12684A4", Offset = "0x12684A4", VA = "0x12684A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005D6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002448")]
			[Address(RVA = "0x12684EC", Offset = "0x12684EC", VA = "0x12684EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002443")]
		[Address(RVA = "0x1267D14", Offset = "0x1267D14", VA = "0x1267D14")]
		[DebuggerHidden]
		public <PlayAsync>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6002444")]
		[Address(RVA = "0x12680A4", Offset = "0x12680A4", VA = "0x12680A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002445")]
		[Address(RVA = "0x12680A8", Offset = "0x12680A8", VA = "0x12680A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002447")]
		[Address(RVA = "0x12684AC", Offset = "0x12684AC", VA = "0x12684AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine m_coroutine;

	[Token(Token = "0x4001E05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int m_currentPageIndex;

	[Token(Token = "0x4001E06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UIStringID m_labelStringID;

	[Token(Token = "0x4001E07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Image m_image;

	[Token(Token = "0x4001E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float m_blendDuration;

	[Token(Token = "0x4001E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private Color m_blendColor;

	[Token(Token = "0x4001E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private LorePage[] m_lorePages;

	[Token(Token = "0x4001E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_skip;

	[Token(Token = "0x170005D1")]
	public bool Skip
	{
		[Token(Token = "0x6002436")]
		[Address(RVA = "0x1267BE8", Offset = "0x1267BE8", VA = "0x1267BE8")]
		set
		{
		}
	}

	[Token(Token = "0x6002437")]
	[Address(RVA = "0x1267BF4", Offset = "0x1267BF4", VA = "0x1267BF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002438")]
	[Address(RVA = "0x1267C60", Offset = "0x1267C60", VA = "0x1267C60", Slot = "10")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002439")]
	[Address(RVA = "0x1267CA0", Offset = "0x1267CA0", VA = "0x1267CA0")]
	[IteratorStateMachine(typeof(<PlayAsync>d__13))]
	private IEnumerator PlayAsync()
	{
		return null;
	}

	[Token(Token = "0x600243A")]
	[Address(RVA = "0x1267D3C", Offset = "0x1267D3C", VA = "0x1267D3C")]
	private void ExitLoreState()
	{
	}

	[Token(Token = "0x600243B")]
	[Address(RVA = "0x1267E9C", Offset = "0x1267E9C", VA = "0x1267E9C")]
	private void Update()
	{
	}

	[Token(Token = "0x600243C")]
	[Address(RVA = "0x1267F94", Offset = "0x1267F94", VA = "0x1267F94")]
	public State_ShowLoreIntro()
	{
	}
}
[Token(Token = "0x2000656")]
public class State_ShowPlayerAvatar : BaseStateAttachedLogic
{
	[Token(Token = "0x170005D7")]
	[StateConfig("Show")]
	public bool Show
	{
		[Token(Token = "0x6002449")]
		[Address(RVA = "0x12694F4", Offset = "0x12694F4", VA = "0x12694F4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600244A")]
		[Address(RVA = "0x12694FC", Offset = "0x12694FC", VA = "0x12694FC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600244B")]
	[Address(RVA = "0x1269508", Offset = "0x1269508", VA = "0x1269508", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600244C")]
	[Address(RVA = "0x126962C", Offset = "0x126962C", VA = "0x126962C")]
	public State_ShowPlayerAvatar()
	{
	}
}
[Token(Token = "0x2000657")]
public class State_ShowPlayerAvatarMultiplayer : BaseStateAttachedLogic
{
	[Token(Token = "0x170005D8")]
	[StateConfig("Show Local")]
	public bool ShowLocal
	{
		[Token(Token = "0x600244D")]
		[Address(RVA = "0x1269634", Offset = "0x1269634", VA = "0x1269634")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600244E")]
		[Address(RVA = "0x126963C", Offset = "0x126963C", VA = "0x126963C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005D9")]
	[StateConfig("Show Remote")]
	public bool ShowRemote
	{
		[Token(Token = "0x600244F")]
		[Address(RVA = "0x1269648", Offset = "0x1269648", VA = "0x1269648")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002450")]
		[Address(RVA = "0x1269650", Offset = "0x1269650", VA = "0x1269650")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002451")]
	[Address(RVA = "0x126965C", Offset = "0x126965C", VA = "0x126965C", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002452")]
	[Address(RVA = "0x12697A4", Offset = "0x12697A4", VA = "0x12697A4")]
	public State_ShowPlayerAvatarMultiplayer()
	{
	}
}
[Token(Token = "0x2000658")]
public class State_SignalLevelReset : BaseStateAttachedLogic
{
	[Token(Token = "0x4001E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static QuestSerializer s_questSerializerReference;

	[Token(Token = "0x6002453")]
	[Address(RVA = "0x12697AC", Offset = "0x12697AC", VA = "0x12697AC", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002454")]
	[Address(RVA = "0x1269930", Offset = "0x1269930", VA = "0x1269930")]
	public State_SignalLevelReset()
	{
	}
}
[Token(Token = "0x2000659")]
public class State_UpdatePlatformPresenceGame : BaseStateAttachedLogic
{
	[Token(Token = "0x4001E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_done;

	[Token(Token = "0x6002455")]
	[Address(RVA = "0x1269938", Offset = "0x1269938", VA = "0x1269938", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002456")]
	[Address(RVA = "0x1269AE0", Offset = "0x1269AE0", VA = "0x1269AE0", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6002457")]
	[Address(RVA = "0x1269B50", Offset = "0x1269B50", VA = "0x1269B50")]
	public State_UpdatePlatformPresenceGame()
	{
	}
}
[Token(Token = "0x200065A")]
[Obsolete]
public class State_WaitForBLASTReadiness : BaseStateAttachedLogic
{
	[Token(Token = "0x6002459")]
	[Address(RVA = "0x1269B64", Offset = "0x1269B64", VA = "0x1269B64", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600245A")]
	[Address(RVA = "0x1269BC0", Offset = "0x1269BC0", VA = "0x1269BC0")]
	public State_WaitForBLASTReadiness()
	{
	}
}
[Token(Token = "0x200065B")]
public class State_WaitForDeathScreen : BaseStateAttachedLogic
{
	[Token(Token = "0x600245B")]
	[Address(RVA = "0x1269BC8", Offset = "0x1269BC8", VA = "0x1269BC8", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600245C")]
	[Address(RVA = "0x1269C6C", Offset = "0x1269C6C", VA = "0x1269C6C")]
	public State_WaitForDeathScreen()
	{
	}
}
[Token(Token = "0x200065C")]
public class State_WaitForLevelLoadComplete : BaseStateAttachedLogic
{
	[Token(Token = "0x4001E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_latestFrameWithoutFocus;

	[Token(Token = "0x4001E1C")]
	private const int c_requiredFramesWithFocusBeforeContinue = 36;

	[Token(Token = "0x4001E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LevelLoadManager m_levelLoadManager;

	[Token(Token = "0x600245D")]
	[Address(RVA = "0x1269C74", Offset = "0x1269C74", VA = "0x1269C74", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600245E")]
	[Address(RVA = "0x1269CF4", Offset = "0x1269CF4", VA = "0x1269CF4", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600245F")]
	[Address(RVA = "0x1269F00", Offset = "0x1269F00", VA = "0x1269F00")]
	public State_WaitForLevelLoadComplete()
	{
	}
}
[Token(Token = "0x200065D")]
public class State_WaitNoPendingAiSpawns : BaseStateAttachedLogic
{
	[Token(Token = "0x4001E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_frameYielded;

	[Token(Token = "0x6002460")]
	[Address(RVA = "0x1269F08", Offset = "0x1269F08", VA = "0x1269F08", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002461")]
	[Address(RVA = "0x1269F24", Offset = "0x1269F24", VA = "0x1269F24", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6002462")]
	[Address(RVA = "0x1269F9C", Offset = "0x1269F9C", VA = "0x1269F9C")]
	public State_WaitNoPendingAiSpawns()
	{
	}
}
[Token(Token = "0x200065E")]
public class State_WaitState : BaseStateAttachedLogic
{
	[Token(Token = "0x4001E20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_waitCounter;

	[Token(Token = "0x170005DA")]
	[StateConfig("Wait Time")]
	public float WaitTime
	{
		[Token(Token = "0x6002463")]
		[Address(RVA = "0x1269FA4", Offset = "0x1269FA4", VA = "0x1269FA4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6002464")]
		[Address(RVA = "0x1269FAC", Offset = "0x1269FAC", VA = "0x1269FAC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002465")]
	[Address(RVA = "0x1269FB4", Offset = "0x1269FB4", VA = "0x1269FB4", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002466")]
	[Address(RVA = "0x1269FD0", Offset = "0x1269FD0", VA = "0x1269FD0", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x6002467")]
	[Address(RVA = "0x126A064", Offset = "0x126A064", VA = "0x126A064", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x6002468")]
	[Address(RVA = "0x126A06C", Offset = "0x126A06C", VA = "0x126A06C")]
	public State_WaitState()
	{
	}
}
[Token(Token = "0x200065F")]
public class State_WaitWithAllowedSkip : BaseStateAttachedLogic
{
	[Token(Token = "0x4001E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_waitCounter;

	[Token(Token = "0x170005DB")]
	[StateConfig("Wait Time")]
	public float WaitTime
	{
		[Token(Token = "0x6002469")]
		[Address(RVA = "0x126A074", Offset = "0x126A074", VA = "0x126A074")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600246A")]
		[Address(RVA = "0x126A07C", Offset = "0x126A07C", VA = "0x126A07C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600246B")]
	[Address(RVA = "0x126A084", Offset = "0x126A084", VA = "0x126A084", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600246C")]
	[Address(RVA = "0x126A0A0", Offset = "0x126A0A0", VA = "0x126A0A0", Slot = "11")]
	public override void StateUpdate()
	{
	}

	[Token(Token = "0x600246D")]
	[Address(RVA = "0x126A20C", Offset = "0x126A20C", VA = "0x126A20C", Slot = "12")]
	public override void StateExit(int? exitPoint)
	{
	}

	[Token(Token = "0x600246E")]
	[Address(RVA = "0x126A214", Offset = "0x126A214", VA = "0x126A214")]
	public State_WaitWithAllowedSkip()
	{
	}
}
[Token(Token = "0x2000660")]
[RequireComponent(typeof(Toggle))]
[ExecuteInEditMode]
public class ToggleSelectedSprite : MonoBehaviour
{
	[Token(Token = "0x4001E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Toggle m_toggle;

	[Token(Token = "0x4001E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Sprite m_selectedSprite;

	[Token(Token = "0x4001E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Image m_targetImage;

	[Token(Token = "0x600246F")]
	[Address(RVA = "0x126A21C", Offset = "0x126A21C", VA = "0x126A21C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002470")]
	[Address(RVA = "0x126A334", Offset = "0x126A334", VA = "0x126A334")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002471")]
	[Address(RVA = "0x126A374", Offset = "0x126A374", VA = "0x126A374")]
	public ToggleSelectedSprite()
	{
	}
}
[Token(Token = "0x2000661")]
public class UIGraphicBlink : MonoBehaviour
{
	[Token(Token = "0x4001E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Graphic m_ui;

	[Token(Token = "0x4001E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Min alpha value")]
	private float m_minValue;

	[Token(Token = "0x4001E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[UnityEngine.Tooltip("Max alpha value")]
	private float m_maxValue;

	[Token(Token = "0x4001E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Number of blink per sec")]
	private float m_blinkPerSecond;

	[Token(Token = "0x4001E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool m_isStarted;

	[Token(Token = "0x4001E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color m_currentColor;

	[Token(Token = "0x4001E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_goingUp;

	[Token(Token = "0x6002472")]
	[Address(RVA = "0x126A37C", Offset = "0x126A37C", VA = "0x126A37C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002473")]
	[Address(RVA = "0x126A3B0", Offset = "0x126A3B0", VA = "0x126A3B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6002474")]
	[Address(RVA = "0x126A474", Offset = "0x126A474", VA = "0x126A474")]
	internal void StartBlink(bool v, Color startColor)
	{
	}

	[Token(Token = "0x6002475")]
	[Address(RVA = "0x126A490", Offset = "0x126A490", VA = "0x126A490")]
	internal void StopBlink()
	{
	}

	[Token(Token = "0x6002476")]
	[Address(RVA = "0x126A498", Offset = "0x126A498", VA = "0x126A498")]
	public UIGraphicBlink()
	{
	}
}
[Token(Token = "0x2000662")]
[RequireComponent(typeof(XRLineRenderer))]
[ExecuteInEditMode]
public class XRLineController : MonoBehaviour
{
	[Token(Token = "0x4001E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private XRLineRenderer m_xrLineRenderer;

	[Token(Token = "0x4001E2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform m_startTransform;

	[Token(Token = "0x4001E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform m_optionalMidTransform;

	[Token(Token = "0x4001E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform m_endTransform;

	[Token(Token = "0x6002477")]
	[Address(RVA = "0x126A4A8", Offset = "0x126A4A8", VA = "0x126A4A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6002478")]
	[Address(RVA = "0x126A508", Offset = "0x126A508", VA = "0x126A508")]
	private void Refresh()
	{
	}

	[Token(Token = "0x6002479")]
	[Address(RVA = "0x126A78C", Offset = "0x126A78C", VA = "0x126A78C")]
	public XRLineController()
	{
	}
}
[Token(Token = "0x2000663")]
public class State_DisableUILaser : BaseStateAttachedLogic
{
	[Token(Token = "0x600247A")]
	[Address(RVA = "0x126A794", Offset = "0x126A794", VA = "0x126A794", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x600247B")]
	[Address(RVA = "0x126A868", Offset = "0x126A868", VA = "0x126A868")]
	public State_DisableUILaser()
	{
	}
}
[Token(Token = "0x2000664")]
public class State_EnableULaser : BaseStateAttachedLogic
{
	[Token(Token = "0x170005DC")]
	[StateConfig("On canvas only")]
	public bool HiddenWhenNotAimingAtCanvas
	{
		[Token(Token = "0x600247C")]
		[Address(RVA = "0x126A870", Offset = "0x126A870", VA = "0x126A870")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600247D")]
		[Address(RVA = "0x126A878", Offset = "0x126A878", VA = "0x126A878")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005DD")]
	[StateConfig("Render Queue")]
	public int LaserBeamRenderQueue
	{
		[Token(Token = "0x600247E")]
		[Address(RVA = "0x126A884", Offset = "0x126A884", VA = "0x126A884")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600247F")]
		[Address(RVA = "0x126A88C", Offset = "0x126A88C", VA = "0x126A88C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005DE")]
	[StateConfig("No Z Test")]
	public bool NoZTest
	{
		[Token(Token = "0x6002480")]
		[Address(RVA = "0x126A894", Offset = "0x126A894", VA = "0x126A894")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002481")]
		[Address(RVA = "0x126A89C", Offset = "0x126A89C", VA = "0x126A89C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002482")]
	[Address(RVA = "0x126A8A8", Offset = "0x126A8A8", VA = "0x126A8A8", Slot = "9")]
	public override void StateEnter(int inPoint)
	{
	}

	[Token(Token = "0x6002483")]
	[Address(RVA = "0x126A988", Offset = "0x126A988", VA = "0x126A988")]
	public State_EnableULaser()
	{
	}
}
[Token(Token = "0x2000665")]
[ExecuteInEditMode]
public class VrPointer : MonoBehaviour
{
	[Token(Token = "0x4001E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_startPoint;

	[Token(Token = "0x4001E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_endPoint;

	[Token(Token = "0x4001E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int StartPoint;

	[Token(Token = "0x4001E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int EndPoint;

	[Token(Token = "0x4001E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_validMaterial;

	[Token(Token = "0x6002484")]
	[Address(RVA = "0x126A990", Offset = "0x126A990", VA = "0x126A990")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002485")]
	[Address(RVA = "0x126A9FC", Offset = "0x126A9FC", VA = "0x126A9FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6002486")]
	[Address(RVA = "0x126AA78", Offset = "0x126AA78", VA = "0x126AA78")]
	public void UpdatePoints(Vector3 start, Vector3 end, bool continuousUpdate = false)
	{
	}

	[Token(Token = "0x6002487")]
	[Address(RVA = "0x126AD20", Offset = "0x126AD20", VA = "0x126AD20")]
	public VrPointer()
	{
	}
}
[Token(Token = "0x2000666")]
[RequireComponent(typeof(Canvas))]
public class VrRaycaster : GraphicRaycaster, IPointerEnterHandler, IEventSystemHandler
{
	[Token(Token = "0x2000667")]
	private struct RaycastHit
	{
		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Graphic graphic;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 worldPos;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool fromMouse;
	}

	[Token(Token = "0x4001E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("A world space pointer for this canvas")]
	public GameObject pointer;

	[Token(Token = "0x4001E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int sortOrder;

	[NonSerialized]
	[Token(Token = "0x4001E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Canvas m_Canvas;

	[NonSerialized]
	[Token(Token = "0x4001E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<RaycastHit> m_RaycastResults;

	[NonSerialized]
	[Token(Token = "0x4001E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<RaycastHit> s_SortedGraphics;

	[Token(Token = "0x170005DF")]
	private Canvas canvas
	{
		[Token(Token = "0x600248A")]
		[Address(RVA = "0x126AE70", Offset = "0x126AE70", VA = "0x126AE70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170005E0")]
	public override Camera eventCamera
	{
		[Token(Token = "0x600248B")]
		[Address(RVA = "0x126AF18", Offset = "0x126AF18", VA = "0x126AF18", Slot = "18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170005E1")]
	public override int sortOrderPriority
	{
		[Token(Token = "0x600248C")]
		[Address(RVA = "0x126AF34", Offset = "0x126AF34", VA = "0x126AF34", Slot = "20")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6002489")]
	[Address(RVA = "0x126ADC4", Offset = "0x126ADC4", VA = "0x126ADC4")]
	protected VrRaycaster()
	{
	}

	[Token(Token = "0x600248D")]
	[Address(RVA = "0x126AF3C", Offset = "0x126AF3C", VA = "0x126AF3C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600248E")]
	[Address(RVA = "0x126B19C", Offset = "0x126B19C", VA = "0x126B19C")]
	private void HandleVrRigReady()
	{
	}

	[Token(Token = "0x600248F")]
	[Address(RVA = "0x126B2DC", Offset = "0x126B2DC", VA = "0x126B2DC")]
	private void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList, Ray ray, bool checkForBlocking)
	{
	}

	[Token(Token = "0x6002490")]
	[Address(RVA = "0x126BFE8", Offset = "0x126BFE8", VA = "0x126BFE8", Slot = "17")]
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x6002491")]
	[Address(RVA = "0x126C054", Offset = "0x126C054", VA = "0x126C054")]
	public void RaycastPointer(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x6002492")]
	[Address(RVA = "0x126B97C", Offset = "0x126B97C", VA = "0x126B97C")]
	private void GraphicRaycast(Canvas canvas, Ray ray, List<RaycastHit> results)
	{
	}

	[Token(Token = "0x6002493")]
	[Address(RVA = "0x126C4E0", Offset = "0x126C4E0", VA = "0x126C4E0")]
	public Vector2 GetScreenPosition(RaycastResult raycastResult)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6002494")]
	[Address(RVA = "0x126C2A4", Offset = "0x126C2A4", VA = "0x126C2A4")]
	private static bool RayIntersectsRectTransform(RectTransform rectTransform, Ray ray, out Vector3 worldPos)
	{
		return default(bool);
	}

	[Token(Token = "0x6002495")]
	[Address(RVA = "0x126C518", Offset = "0x126C518", VA = "0x126C518")]
	public bool IsFocussed()
	{
		return default(bool);
	}

	[Token(Token = "0x6002496")]
	[Address(RVA = "0x126C630", Offset = "0x126C630", VA = "0x126C630", Slot = "22")]
	public void OnPointerEnter(PointerEventData e)
	{
	}
}
[Token(Token = "0x2000669")]
public class VrUserInterfaceInputController : CachedMonoBehaviour
{
	[Token(Token = "0x4001E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private VrHand m_hand;

	[Token(Token = "0x4001E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VrHandController? s_activeController;

	[Token(Token = "0x170005E2")]
	public static VrHandController? ActiveController
	{
		[Token(Token = "0x600249B")]
		[Address(RVA = "0x126C8AC", Offset = "0x126C8AC", VA = "0x126C8AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600249C")]
	[Address(RVA = "0x126C8F4", Offset = "0x126C8F4", VA = "0x126C8F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600249D")]
	[Address(RVA = "0x126CB84", Offset = "0x126CB84", VA = "0x126CB84")]
	private void Update()
	{
	}

	[Token(Token = "0x600249E")]
	[Address(RVA = "0x126CC34", Offset = "0x126CC34", VA = "0x126CC34")]
	private PointerEventData.FramePressState UpdateButtonState()
	{
		return default(PointerEventData.FramePressState);
	}

	[Token(Token = "0x600249F")]
	[Address(RVA = "0x126CAF0", Offset = "0x126CAF0", VA = "0x126CAF0")]
	private void ActivateController()
	{
	}

	[Token(Token = "0x60024A0")]
	[Address(RVA = "0x126CD34", Offset = "0x126CD34", VA = "0x126CD34")]
	private void SetControllerButtonState(PointerEventData.FramePressState uiInputButtonState)
	{
	}

	[Token(Token = "0x60024A1")]
	[Address(RVA = "0x126CDC0", Offset = "0x126CDC0", VA = "0x126CDC0")]
	private void SetControllerTransform()
	{
	}

	[Token(Token = "0x60024A2")]
	[Address(RVA = "0x126CE64", Offset = "0x126CE64", VA = "0x126CE64")]
	private void SetControllerActive(bool active)
	{
	}

	[Token(Token = "0x60024A3")]
	[Address(RVA = "0x126CEF4", Offset = "0x126CEF4", VA = "0x126CEF4")]
	public VrUserInterfaceInputController()
	{
	}
}
[Token(Token = "0x200066A")]
public static class VrUserInterfaceInputControllerManager
{
	[Token(Token = "0x4001E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool m_isKeyPressed;

	[Token(Token = "0x4001E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Transform m_controllerTransform;

	[Token(Token = "0x4001E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool m_controllerActive;

	[Token(Token = "0x4001E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static PointerEventData.FramePressState m_uiInputButtonState;

	[Token(Token = "0x60024A4")]
	[Address(RVA = "0x126CEFC", Offset = "0x126CEFC", VA = "0x126CEFC")]
	public static void SetControllerButtonState(PointerEventData.FramePressState uiInputButtonState)
	{
	}

	[Token(Token = "0x60024A5")]
	[Address(RVA = "0x126CF58", Offset = "0x126CF58", VA = "0x126CF58")]
	public static PointerEventData.FramePressState GetControllerButtonState()
	{
		return default(PointerEventData.FramePressState);
	}

	[Token(Token = "0x60024A6")]
	[Address(RVA = "0x126CFB0", Offset = "0x126CFB0", VA = "0x126CFB0")]
	public static void SetControllerTransform(Transform transform)
	{
	}

	[Token(Token = "0x60024A7")]
	[Address(RVA = "0x126D010", Offset = "0x126D010", VA = "0x126D010")]
	public static Transform GetControllerTransform()
	{
		return null;
	}

	[Token(Token = "0x60024A8")]
	[Address(RVA = "0x126D068", Offset = "0x126D068", VA = "0x126D068")]
	public static void SetControllerActive(bool active)
	{
	}

	[Token(Token = "0x60024A9")]
	[Address(RVA = "0x126D0C4", Offset = "0x126D0C4", VA = "0x126D0C4")]
	public static bool GetControllerActive()
	{
		return default(bool);
	}
}
[Token(Token = "0x200066B")]
public class VrUserInterfaceOptimiser : SceneSingleton<VrUserInterfaceOptimiser>
{
	[Token(Token = "0x200066C")]
	public enum LaserPointerActiveState
	{
		[Token(Token = "0x4001E4F")]
		Hidden,
		[Token(Token = "0x4001E50")]
		VisibleAlways,
		[Token(Token = "0x4001E51")]
		VisibleWhenPointingAtCanvas
	}

	[Token(Token = "0x4001E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private EventSystem m_eventSystem;

	[Token(Token = "0x4001E4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private CurvedUILaserBeam m_laserPointer;

	[Token(Token = "0x4001E4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LaserPointerActiveState m_laserPointerActiveState;

	[Token(Token = "0x4001E4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int m_laserPointerRenderQueue;

	[Token(Token = "0x4001E4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_noZTest;

	[Token(Token = "0x60024AB")]
	[Address(RVA = "0x126D174", Offset = "0x126D174", VA = "0x126D174")]
	private void Awake()
	{
	}

	[Token(Token = "0x60024AC")]
	[Address(RVA = "0x126D280", Offset = "0x126D280", VA = "0x126D280")]
	private void Update()
	{
	}

	[Token(Token = "0x60024AD")]
	[Address(RVA = "0x126D284", Offset = "0x126D284", VA = "0x126D284")]
	private void RunOptimisationCheck()
	{
	}

	[Token(Token = "0x60024AE")]
	[Address(RVA = "0x126D1C8", Offset = "0x126D1C8", VA = "0x126D1C8")]
	private void RefreshLaserPointer()
	{
	}

	[Token(Token = "0x60024AF")]
	[Address(RVA = "0x126A858", Offset = "0x126A858", VA = "0x126A858")]
	public void SetLaserPointerActive(LaserPointerActiveState activeState, int renderQueue, bool noZTest = false)
	{
	}

	[Token(Token = "0x60024B0")]
	[Address(RVA = "0x126D2A4", Offset = "0x126D2A4", VA = "0x126D2A4")]
	public VrUserInterfaceOptimiser()
	{
	}
}
[Token(Token = "0x200066D")]
public class VrUserInterfacePointerRenderer : CachedMonoBehaviour
{
	[Token(Token = "0x4001E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_pointObject;

	[Token(Token = "0x4001E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_tailObject;

	[Token(Token = "0x4001E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool m_scaleTailWithDistance;

	[Token(Token = "0x4001E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private VrPointer m_pointer;

	[Token(Token = "0x60024B1")]
	[Address(RVA = "0x126D2F4", Offset = "0x126D2F4", VA = "0x126D2F4")]
	public void UpdateCursor(bool show, Vector3 pos, Transform lookAt, Vector3 normal, float distance)
	{
	}

	[Token(Token = "0x60024B2")]
	[Address(RVA = "0x126D690", Offset = "0x126D690", VA = "0x126D690")]
	public void HideCursor()
	{
	}

	[Token(Token = "0x60024B3")]
	[Address(RVA = "0x126D6F4", Offset = "0x126D6F4", VA = "0x126D6F4")]
	public VrUserInterfacePointerRenderer()
	{
	}
}
[Token(Token = "0x200066E")]
public class ZombieThreatLevel : MonoBehaviour
{
	[Token(Token = "0x4001E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameViewModel m_gameViewModel;

	[Token(Token = "0x4001E57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("above this value light turns to lot of Z alert color")]
	[SerializeField]
	private int m_lotOfZombiesCount;

	[Token(Token = "0x4001E58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[UnityEngine.Tooltip("at this value light flashes")]
	private int m_flashZombiesCount;

	[Token(Token = "0x4001E59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_zombiesCount;

	[Token(Token = "0x4001E5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color m_currentColor;

	[Token(Token = "0x4001E5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UIGraphicBlink m_blinker;

	[Token(Token = "0x4001E5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("Color displayed when there is no zombie")]
	private Color m_noZombieColor;

	[Token(Token = "0x4001E5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[UnityEngine.Tooltip("Color displayed when zombies count is positive and below(or equal) the lot of Z alert threshold")]
	private Color m_someZombieAlertColor;

	[Token(Token = "0x4001E5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Color displayed when zombies count is above the lot of Z alert threshold")]
	[SerializeField]
	private Color m_lotOfZombiesColor;

	[Token(Token = "0x60024B4")]
	[Address(RVA = "0x126D6FC", Offset = "0x126D6FC", VA = "0x126D6FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60024B5")]
	[Address(RVA = "0x126D718", Offset = "0x126D718", VA = "0x126D718")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60024B6")]
	[Address(RVA = "0x126DA9C", Offset = "0x126DA9C", VA = "0x126DA9C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60024B7")]
	[Address(RVA = "0x126DC8C", Offset = "0x126DC8C", VA = "0x126DC8C")]
	private void Update()
	{
	}

	[Token(Token = "0x60024B8")]
	[Address(RVA = "0x126DC90", Offset = "0x126DC90", VA = "0x126DC90")]
	private void AgentAdded(IAgent agent)
	{
	}

	[Token(Token = "0x60024B9")]
	[Address(RVA = "0x126D9A4", Offset = "0x126D9A4", VA = "0x126D9A4")]
	private void UpdateThreatColor()
	{
	}

	[Token(Token = "0x60024BA")]
	[Address(RVA = "0x126DD68", Offset = "0x126DD68", VA = "0x126DD68")]
	private void AgentRemoved(IAgent agent)
	{
	}

	[Token(Token = "0x60024BB")]
	[Address(RVA = "0x126DE40", Offset = "0x126DE40", VA = "0x126DE40")]
	public ZombieThreatLevel()
	{
	}
}
[Serializable]
[Token(Token = "0x200066F")]
public class AverageValue<T>
{
	[Token(Token = "0x4001E5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected T[] m_values;

	[Token(Token = "0x4001E60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected MethodInfo m_additionOp;

	[Token(Token = "0x4001E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected MethodInfo m_subtractOp;

	[Token(Token = "0x4001E62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected MethodInfo m_divisionOp;

	[Token(Token = "0x4001E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected int sampleSize;

	[Token(Token = "0x4001E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected T m_total;

	[Token(Token = "0x4001E65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected T m_average;

	[Token(Token = "0x4001E66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected int m_index;

	[Token(Token = "0x170005E3")]
	public T Average
	{
		[Token(Token = "0x60024BD")]
		get
		{
			return (T)null;
		}
	}

	[Token(Token = "0x170005E4")]
	public T Value
	{
		[Token(Token = "0x60024BE")]
		set
		{
		}
	}

	[Token(Token = "0x60024BC")]
	public AverageValue(int sampleSize)
	{
	}

	[Token(Token = "0x60024BF")]
	public virtual void AddValue(T value)
	{
	}
}
[Serializable]
[Token(Token = "0x2000670")]
public class AverageVector3 : AverageValue<Vector3>
{
	[Token(Token = "0x60024C0")]
	[Address(RVA = "0x126DE78", Offset = "0x126DE78", VA = "0x126DE78")]
	public AverageVector3(int sampleSize)
	{
	}

	[Token(Token = "0x60024C1")]
	[Address(RVA = "0x126DED0", Offset = "0x126DED0", VA = "0x126DED0", Slot = "4")]
	public override void AddValue(Vector3 value)
	{
	}
}
[Token(Token = "0x2000671")]
[RequireComponent(typeof(BillboardTransform))]
public class BillboardText : MonoBehaviour
{
	[Token(Token = "0x4001E67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text m_text;

	[Token(Token = "0x4001E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SortedDictionary<string, string> m_textGroups;

	[Token(Token = "0x4001E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private StringBuilder m_stringBuilder;

	[Token(Token = "0x4001E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string m_groupForcedToBottom;

	[Token(Token = "0x60024C2")]
	[Address(RVA = "0x126DFD4", Offset = "0x126DFD4", VA = "0x126DFD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60024C3")]
	[Address(RVA = "0x126E2F8", Offset = "0x126E2F8", VA = "0x126E2F8")]
	public void SetColor(Color col)
	{
	}

	[Token(Token = "0x60024C4")]
	[Address(RVA = "0x126E31C", Offset = "0x126E31C", VA = "0x126E31C")]
	public void SetTextGroup(string textGroup, string text, bool forceToBottom = false)
	{
	}

	[Token(Token = "0x60024C5")]
	[Address(RVA = "0x126E464", Offset = "0x126E464", VA = "0x126E464")]
	public void ClearTextGroup(string textGroup)
	{
	}

	[Token(Token = "0x60024C6")]
	[Address(RVA = "0x126E4FC", Offset = "0x126E4FC", VA = "0x126E4FC")]
	public void ClearAllText()
	{
	}

	[Token(Token = "0x60024C7")]
	[Address(RVA = "0x126DFD8", Offset = "0x126DFD8", VA = "0x126DFD8")]
	private void RebuildText()
	{
	}

	[Token(Token = "0x60024C8")]
	[Address(RVA = "0x126E554", Offset = "0x126E554", VA = "0x126E554")]
	public BillboardText()
	{
	}
}
[Token(Token = "0x2000672")]
public class BillboardTransform : CachedMonoBehaviour
{
	[Token(Token = "0x4001E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[FormerlySerializedAs("scale")]
	[SerializeField]
	private float m_scale;

	[Token(Token = "0x4001E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private bool m_applyScale;

	[Token(Token = "0x4001E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AnimationCurve m_scaleFallOffCurve;

	[Token(Token = "0x4001E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform m_cameraTransform;

	[Token(Token = "0x4001E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Camera m_camera;

	[Token(Token = "0x4001E70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float m_runtimeSizeScale;

	[Token(Token = "0x60024C9")]
	[Address(RVA = "0x126E618", Offset = "0x126E618", VA = "0x126E618")]
	private void Start()
	{
	}

	[Token(Token = "0x60024CA")]
	[Address(RVA = "0x126E744", Offset = "0x126E744", VA = "0x126E744")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60024CB")]
	[Address(RVA = "0x126E934", Offset = "0x126E934", VA = "0x126E934")]
	public void SetRuntimeSizeScale(float scale)
	{
	}

	[Token(Token = "0x60024CC")]
	[Address(RVA = "0x126E93C", Offset = "0x126E93C", VA = "0x126E93C")]
	public BillboardTransform()
	{
	}
}
[Token(Token = "0x2000673")]
public class DeactivatedWhenNotLookedAt : MonoBehaviour
{
	[Token(Token = "0x4001E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Root of the display content")]
	[SerializeField]
	private Transform m_contentRoot;

	[Token(Token = "0x4001E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_angle;

	[Token(Token = "0x4001E73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_cos;

	[Token(Token = "0x60024CD")]
	[Address(RVA = "0x126E990", Offset = "0x126E990", VA = "0x126E990")]
	private void Start()
	{
	}

	[Token(Token = "0x60024CE")]
	[Address(RVA = "0x126EA44", Offset = "0x126EA44", VA = "0x126EA44")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60024CF")]
	[Address(RVA = "0x126ED78", Offset = "0x126ED78", VA = "0x126ED78")]
	public DeactivatedWhenNotLookedAt()
	{
	}
}
[Token(Token = "0x2000674")]
public class DelayedPrefabLoad : MonoBehaviour
{
	[Token(Token = "0x2000675")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DelayedPrefabLoad <>4__this;

		[Token(Token = "0x170005E5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60024D5")]
			[Address(RVA = "0x126EF78", Offset = "0x126EF78", VA = "0x126EF78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005E6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024D7")]
			[Address(RVA = "0x126EFC0", Offset = "0x126EFC0", VA = "0x126EFC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0x126EDF4", Offset = "0x126EDF4", VA = "0x126EDF4")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0x126EE2C", Offset = "0x126EE2C", VA = "0x126EE2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0x126EE30", Offset = "0x126EE30", VA = "0x126EE30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0x126EF80", Offset = "0x126EF80", VA = "0x126EF80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001E74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float m_loadingDelay;

	[Token(Token = "0x4001E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string m_assetPath;

	[Token(Token = "0x4001E76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform m_itemRoot;

	[Token(Token = "0x4001E77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_loadedItem;

	[Token(Token = "0x60024D0")]
	[Address(RVA = "0x126ED80", Offset = "0x126ED80", VA = "0x126ED80")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60024D1")]
	[Address(RVA = "0x126EE1C", Offset = "0x126EE1C", VA = "0x126EE1C")]
	public DelayedPrefabLoad()
	{
	}
}
[Token(Token = "0x2000676")]
public class DemoObjectToggle : MonoBehaviour
{
	[Token(Token = "0x4001E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_enabledInDemo;

	[Token(Token = "0x4001E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool m_enabledOutsideDemo;

	[Token(Token = "0x60024D8")]
	[Address(RVA = "0x126EFC8", Offset = "0x126EFC8", VA = "0x126EFC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60024D9")]
	[Address(RVA = "0x126EFF0", Offset = "0x126EFF0", VA = "0x126EFF0")]
	public DemoObjectToggle()
	{
	}
}
[Token(Token = "0x2000677")]
public class DestroyIfSubmission : MonoBehaviour
{
	[Token(Token = "0x60024DA")]
	[Address(RVA = "0x126F000", Offset = "0x126F000", VA = "0x126F000")]
	private void Awake()
	{
	}

	[Token(Token = "0x60024DB")]
	[Address(RVA = "0x126F06C", Offset = "0x126F06C", VA = "0x126F06C")]
	public DestroyIfSubmission()
	{
	}
}
[Token(Token = "0x2000678")]
public class DestroyWhenNotInDebug : MonoBehaviour
{
	[Token(Token = "0x60024DC")]
	[Address(RVA = "0x126F074", Offset = "0x126F074", VA = "0x126F074")]
	private void Awake()
	{
	}

	[Token(Token = "0x60024DD")]
	[Address(RVA = "0x126F0E0", Offset = "0x126F0E0", VA = "0x126F0E0")]
	public DestroyWhenNotInDebug()
	{
	}
}
[Token(Token = "0x2000679")]
public static class DistinctColors
{
}
[Token(Token = "0x200067A")]
public class DotMathUtils
{
	[Token(Token = "0x60024DE")]
	[Address(RVA = "0x126F0E8", Offset = "0x126F0E8", VA = "0x126F0E8")]
	[BurstCompile]
	public static float angleDifference(float3 from, float3 dest)
	{
		return default(float);
	}

	[Token(Token = "0x60024DF")]
	[Address(RVA = "0x126F178", Offset = "0x126F178", VA = "0x126F178")]
	[BurstCompile]
	public static float3 rotateTowards(float3 current, float3 desired, float turnSpeed)
	{
		return default(float3);
	}

	[Token(Token = "0x60024E0")]
	[Address(RVA = "0x126F3A0", Offset = "0x126F3A0", VA = "0x126F3A0")]
	public DotMathUtils()
	{
	}
}
[Token(Token = "0x200067B")]
public class GizmoHelper
{
	[Token(Token = "0x4001E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Mesh m_discMesh;

	[Token(Token = "0x60024E1")]
	[Address(RVA = "0x126F3A8", Offset = "0x126F3A8", VA = "0x126F3A8")]
	public static void DrawStrip(Vector3[] vertices, Color c)
	{
	}

	[Token(Token = "0x60024E2")]
	[Address(RVA = "0x126F54C", Offset = "0x126F54C", VA = "0x126F54C")]
	public static void DrawSolidDisc(Vector3 pos, float radius, Color fillColor)
	{
	}

	[Token(Token = "0x60024E3")]
	[Address(RVA = "0x126F5F4", Offset = "0x126F5F4", VA = "0x126F5F4")]
	public static void DrawSolidDisc(Vector3 pos, Quaternion rotation, float radius, Color fillColor)
	{
	}

	[Token(Token = "0x60024E4")]
	[Address(RVA = "0x126FA08", Offset = "0x126FA08", VA = "0x126FA08")]
	public static void DrawWireDisc(Vector3 pos, float radius, Vector3 normal, Color color)
	{
	}

	[Token(Token = "0x60024E5")]
	[Address(RVA = "0x126FCE4", Offset = "0x126FCE4", VA = "0x126FCE4")]
	public static void DrawWireArc(Vector3 pos, float radius, Vector3 normal, float startAngleDegrees, float endAngleDegrees, Color color)
	{
	}

	[Token(Token = "0x60024E6")]
	[Address(RVA = "0x1270040", Offset = "0x1270040", VA = "0x1270040")]
	public static void DrawDirection(Vector3 startPos, Quaternion rotation, float length, float size, Color color)
	{
	}

	[Token(Token = "0x60024E7")]
	[Address(RVA = "0x1270150", Offset = "0x1270150", VA = "0x1270150")]
	public static void DrawDirection(Vector3 startPos, Vector3 endPos, float size, Color color)
	{
	}

	[Token(Token = "0x60024E8")]
	[Address(RVA = "0x12706B8", Offset = "0x12706B8", VA = "0x12706B8")]
	public static void DrawSolidBand(Vector3 pos, Quaternion rotation, float innerRadius, float outerRadius, Color fillColor, Color outlineColor)
	{
	}

	[Token(Token = "0x60024E9")]
	[Address(RVA = "0x1270ADC", Offset = "0x1270ADC", VA = "0x1270ADC")]
	public static void DrawGameObject(GameObject obj, Transform t)
	{
	}

	[Token(Token = "0x60024EA")]
	[Address(RVA = "0x1270C50", Offset = "0x1270C50", VA = "0x1270C50")]
	public static void DrawMeshes(GameObject obj, Transform t)
	{
	}

	[Token(Token = "0x60024EB")]
	[Address(RVA = "0x1271234", Offset = "0x1271234", VA = "0x1271234")]
	public GizmoHelper()
	{
	}
}
[Token(Token = "0x200067C")]
public class IKTestSpawner : PoolableMonoBehaviour
{
	[Token(Token = "0x4001E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject prefabToSpawn;

	[Token(Token = "0x4001E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool spawned;

	[Token(Token = "0x60024EC")]
	[Address(RVA = "0x127123C", Offset = "0x127123C", VA = "0x127123C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60024ED")]
	[Address(RVA = "0x127127C", Offset = "0x127127C", VA = "0x127127C")]
	private void Start()
	{
	}

	[Token(Token = "0x60024EE")]
	[Address(RVA = "0x12712E8", Offset = "0x12712E8", VA = "0x12712E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60024EF")]
	[Address(RVA = "0x1271370", Offset = "0x1271370", VA = "0x1271370")]
	public IKTestSpawner()
	{
	}
}
[Token(Token = "0x200067D")]
public class MathUtil
{
	[Token(Token = "0x200067E")]
	public static class CONSTANTS
	{
		[Token(Token = "0x4001E80")]
		public const float PI = (float)Math.PI;

		[Token(Token = "0x4001E81")]
		public const float ZERO = 0f;

		[Token(Token = "0x4001E82")]
		public const float HALF = 0.5f;

		[Token(Token = "0x4001E83")]
		public const float ONE = 1f;

		[Token(Token = "0x4001E84")]
		public const float TWO = 2f;

		[Token(Token = "0x4001E85")]
		public const float THREE = 3f;
	}

	[Token(Token = "0x60024F0")]
	[Address(RVA = "0x1271378", Offset = "0x1271378", VA = "0x1271378")]
	public static float EaseIn(float fIn)
	{
		return default(float);
	}

	[Token(Token = "0x60024F1")]
	[Address(RVA = "0x12713B8", Offset = "0x12713B8", VA = "0x12713B8")]
	public static string Md5Sum(string strToEncrypt)
	{
		return null;
	}

	[Token(Token = "0x60024F2")]
	[Address(RVA = "0x1271548", Offset = "0x1271548", VA = "0x1271548")]
	public static float BounceIn(float fIn)
	{
		return default(float);
	}

	[Token(Token = "0x60024F3")]
	[Address(RVA = "0x1271584", Offset = "0x1271584", VA = "0x1271584")]
	public static float BounceInSmall(float fIn)
	{
		return default(float);
	}

	[Token(Token = "0x60024F4")]
	[Address(RVA = "0x12715C0", Offset = "0x12715C0", VA = "0x12715C0")]
	public static float BounceInSmaller(float fIn)
	{
		return default(float);
	}

	[Token(Token = "0x60024F5")]
	[Address(RVA = "0x12715FC", Offset = "0x12715FC", VA = "0x12715FC")]
	public static float SmoothStep(float fIn)
	{
		return default(float);
	}

	[Token(Token = "0x60024F6")]
	[Address(RVA = "0x1271628", Offset = "0x1271628", VA = "0x1271628")]
	public static float SinStep(float fT)
	{
		return default(float);
	}

	[Token(Token = "0x60024F7")]
	[Address(RVA = "0x12713A4", Offset = "0x12713A4", VA = "0x12713A4")]
	public static float Clamp(float fValue, float fMin, float fMax)
	{
		return default(float);
	}

	[Token(Token = "0x60024F8")]
	[Address(RVA = "0x1271660", Offset = "0x1271660", VA = "0x1271660")]
	public static float Lerp(float fSrc, float fDest, float fLerp)
	{
		return default(float);
	}

	[Token(Token = "0x60024F9")]
	[Address(RVA = "0x1271688", Offset = "0x1271688", VA = "0x1271688")]
	public static float Min(float fA, float fB)
	{
		return default(float);
	}

	[Token(Token = "0x60024FA")]
	[Address(RVA = "0x1271694", Offset = "0x1271694", VA = "0x1271694")]
	public static int Min(int iA, int iB)
	{
		return default(int);
	}

	[Token(Token = "0x60024FB")]
	[Address(RVA = "0x12716A0", Offset = "0x12716A0", VA = "0x12716A0")]
	public static long Min(long lA, long lB)
	{
		return default(long);
	}

	[Token(Token = "0x60024FC")]
	[Address(RVA = "0x12716AC", Offset = "0x12716AC", VA = "0x12716AC")]
	public static float Max(float fA, float fB)
	{
		return default(float);
	}

	[Token(Token = "0x60024FD")]
	[Address(RVA = "0x12716B8", Offset = "0x12716B8", VA = "0x12716B8")]
	public static int Max(int iA, int iB)
	{
		return default(int);
	}

	[Token(Token = "0x60024FE")]
	[Address(RVA = "0x12716C4", Offset = "0x12716C4", VA = "0x12716C4")]
	public static long Max(long lA, long lB)
	{
		return default(long);
	}

	[Token(Token = "0x60024FF")]
	[Address(RVA = "0x12716D0", Offset = "0x12716D0", VA = "0x12716D0")]
	public static float HorizFOVfromVertFOV(float fVerticalFOV, float fAspect)
	{
		return default(float);
	}

	[Token(Token = "0x6002500")]
	[Address(RVA = "0x1271718", Offset = "0x1271718", VA = "0x1271718")]
	public MathUtil()
	{
	}
}
[Serializable]
[Token(Token = "0x200067F")]
public struct MinMax
{
	[Token(Token = "0x4001E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float min;

	[Token(Token = "0x4001E87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float max;
}
[Token(Token = "0x2000680")]
public class MouseClickListener : MonoBehaviour
{
	[Token(Token = "0x4001E88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEvent m_onLeftClick;

	[Token(Token = "0x4001E89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEvent m_onRightClick;

	[Token(Token = "0x6002501")]
	[Address(RVA = "0x1271720", Offset = "0x1271720", VA = "0x1271720")]
	private void Update()
	{
	}

	[Token(Token = "0x6002502")]
	[Address(RVA = "0x1271774", Offset = "0x1271774", VA = "0x1271774")]
	public MouseClickListener()
	{
	}
}
[Token(Token = "0x2000681")]
[RequireComponent(typeof(Button))]
public class MouseClickSimulator : MonoBehaviour
{
	[Token(Token = "0x4001E8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Button m_button;

	[Token(Token = "0x4001E8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("If ticked, this component will try to ignore signals given in an invalid order (e.g. try to lift the mouse up before it has gone down).")]
	[SerializeField]
	private bool m_enforceLegalTransitions;

	[Token(Token = "0x4001E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool m_isEntered;

	[Token(Token = "0x4001E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool m_isDown;

	[Token(Token = "0x6002503")]
	[Address(RVA = "0x127177C", Offset = "0x127177C", VA = "0x127177C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002504")]
	[Address(RVA = "0x12717DC", Offset = "0x12717DC", VA = "0x12717DC")]
	public void SimulateMouseEnter()
	{
	}

	[Token(Token = "0x6002505")]
	[Address(RVA = "0x127192C", Offset = "0x127192C", VA = "0x127192C")]
	public void SimulateMouseExit()
	{
	}

	[Token(Token = "0x6002506")]
	[Address(RVA = "0x1271A78", Offset = "0x1271A78", VA = "0x1271A78")]
	public void SimulateMouseDown()
	{
	}

	[Token(Token = "0x6002507")]
	[Address(RVA = "0x1271BC8", Offset = "0x1271BC8", VA = "0x1271BC8")]
	public void SimulateMouseUp()
	{
	}

	[Token(Token = "0x6002508")]
	[Address(RVA = "0x1271D88", Offset = "0x1271D88", VA = "0x1271D88")]
	public MouseClickSimulator()
	{
	}
}
[Token(Token = "0x2000682")]
public class MultiplayerObjectToggle : MonoBehaviour
{
	[Token(Token = "0x4001E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_enabledInEditor;

	[Token(Token = "0x4001E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool m_enabledInMultiplayer;

	[Token(Token = "0x4001E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	private bool m_enabledOutsideMultiplayer;

	[Token(Token = "0x6002509")]
	[Address(RVA = "0x1271D90", Offset = "0x1271D90", VA = "0x1271D90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600250A")]
	[Address(RVA = "0x1271E4C", Offset = "0x1271E4C", VA = "0x1271E4C")]
	public MultiplayerObjectToggle()
	{
	}
}
[Token(Token = "0x2000683")]
public class NonPlayerHoldPlayerItemHelper
{
	[Token(Token = "0x2000684")]
	[CompilerGenerated]
	private sealed class <SetIgnoreCollisionAgainstAgentAfterDelay>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int frameDelay;

		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NonPlayerHoldPlayerItemHelper <>4__this;

		[Token(Token = "0x4001E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ignoreCollision;

		[Token(Token = "0x4001E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WaitForEndOfFrame <yieldInstruction>5__2;

		[Token(Token = "0x170005E7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002513")]
			[Address(RVA = "0x12722D0", Offset = "0x12722D0", VA = "0x12722D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005E8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002515")]
			[Address(RVA = "0x1272318", Offset = "0x1272318", VA = "0x1272318", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002510")]
		[Address(RVA = "0x1272180", Offset = "0x1272180", VA = "0x1272180")]
		[DebuggerHidden]
		public <SetIgnoreCollisionAgainstAgentAfterDelay>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6002511")]
		[Address(RVA = "0x12721A8", Offset = "0x12721A8", VA = "0x12721A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002512")]
		[Address(RVA = "0x12721AC", Offset = "0x12721AC", VA = "0x12721AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002514")]
		[Address(RVA = "0x12722D8", Offset = "0x12722D8", VA = "0x12722D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IAgent m_agent;

	[Token(Token = "0x4001E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VrItem m_activeItem;

	[Token(Token = "0x4001E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform m_nonPlayerAgentHoldParent;

	[Token(Token = "0x4001E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform m_normalParent;

	[Token(Token = "0x4001E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_ignoringAgentCollision;

	[Token(Token = "0x600250B")]
	[Address(RVA = "0x1271E5C", Offset = "0x1271E5C", VA = "0x1271E5C")]
	public NonPlayerHoldPlayerItemHelper(IAgent agent, Transform nonPlayerAgentHoldParent)
	{
	}

	[Token(Token = "0x600250C")]
	[Address(RVA = "0x1271EC8", Offset = "0x1271EC8", VA = "0x1271EC8")]
	public void SetActiveItem(VrItem item)
	{
	}

	[Token(Token = "0x600250D")]
	[Address(RVA = "0x1271F18", Offset = "0x1271F18", VA = "0x1271F18")]
	public void SetItemHeld(bool held)
	{
	}

	[Token(Token = "0x600250E")]
	[Address(RVA = "0x12720D8", Offset = "0x12720D8", VA = "0x12720D8")]
	private void SetIgnoreCollisionAgainstAgent(bool ignoreCollision)
	{
	}

	[Token(Token = "0x600250F")]
	[Address(RVA = "0x12720F0", Offset = "0x12720F0", VA = "0x12720F0")]
	[IteratorStateMachine(typeof(<SetIgnoreCollisionAgainstAgentAfterDelay>d__9))]
	private IEnumerator SetIgnoreCollisionAgainstAgentAfterDelay(bool ignoreCollision, int frameDelay)
	{
		return null;
	}
}
[Token(Token = "0x2000685")]
public class ObjectHashSet<T, U>
{
	[Token(Token = "0x4001E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Dictionary<T, HashSet<U>> m_dataSetsByObject;

	[Token(Token = "0x6002516")]
	public ObjectHashSet()
	{
	}

	[Token(Token = "0x6002517")]
	public void Add(T owner, U callback)
	{
	}

	[Token(Token = "0x6002518")]
	public void Remove(T owner, U data)
	{
	}

	[Token(Token = "0x6002519")]
	public HashSet<U> Get(T owner)
	{
		return null;
	}
}
[Token(Token = "0x2000686")]
public class ParentPoolable : Poolable
{
	[Token(Token = "0x4001E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<ParentPoolable> AllParentPoolables;

	[Token(Token = "0x4001E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<IPoolable, ParentPoolable> s_childrenToParentMap;

	[Token(Token = "0x4001E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<IPoolable> m_childPoolables;

	[Token(Token = "0x4001EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_allocatedFromPool;

	[Token(Token = "0x600251A")]
	[Address(RVA = "0x1272320", Offset = "0x1272320", VA = "0x1272320")]
	static ParentPoolable()
	{
	}

	[Token(Token = "0x600251B")]
	[Address(RVA = "0x127240C", Offset = "0x127240C", VA = "0x127240C")]
	public static void ReturnToPool(UnityEngine.Component inst)
	{
	}

	[Token(Token = "0x600251C")]
	[Address(RVA = "0x1272560", Offset = "0x1272560", VA = "0x1272560")]
	private static void AddChildPoolables(ParentPoolable container)
	{
	}

	[Token(Token = "0x600251D")]
	[Address(RVA = "0x127266C", Offset = "0x127266C", VA = "0x127266C")]
	private static void RemoveChildPoolables(ParentPoolable container)
	{
	}

	[Token(Token = "0x600251E")]
	[Address(RVA = "0x1272780", Offset = "0x1272780", VA = "0x1272780")]
	private void Awake()
	{
	}

	[Token(Token = "0x600251F")]
	[Address(RVA = "0x12729C8", Offset = "0x12729C8", VA = "0x12729C8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002520")]
	[Address(RVA = "0x1272860", Offset = "0x1272860", VA = "0x1272860")]
	private List<IPoolable> GetPoolables()
	{
		return null;
	}

	[Token(Token = "0x6002521")]
	[Address(RVA = "0x1272A1C", Offset = "0x1272A1C", VA = "0x1272A1C")]
	public static void DestroyAllParentPoolables()
	{
	}

	[Token(Token = "0x6002522")]
	[Address(RVA = "0x1272C78", Offset = "0x1272C78", VA = "0x1272C78")]
	public void ReturnToPool()
	{
	}

	[Token(Token = "0x6002523")]
	[Address(RVA = "0x1272CD0", Offset = "0x1272CD0", VA = "0x1272CD0", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6002524")]
	[Address(RVA = "0x1272EB8", Offset = "0x1272EB8", VA = "0x1272EB8", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6002525")]
	[Address(RVA = "0x1273090", Offset = "0x1273090", VA = "0x1273090", Slot = "8")]
	public override void OnAddedToPool()
	{
	}

	[Token(Token = "0x6002526")]
	[Address(RVA = "0x1273278", Offset = "0x1273278", VA = "0x1273278")]
	public ParentPoolable()
	{
	}
}
[Token(Token = "0x2000687")]
[CreateAssetMenu]
public class ProjectileUtils : ScriptableObject
{
	[Token(Token = "0x4001EA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 m_jumpFrom;

	[Token(Token = "0x4001EA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Vector3 m_jumpTo;

	[Token(Token = "0x4001EA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_minJumpHeight;

	[Token(Token = "0x4001EA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_jumpSpeed;

	[Token(Token = "0x4001EA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float m_timeStep;

	[Token(Token = "0x6002528")]
	[Address(RVA = "0x127336C", Offset = "0x127336C", VA = "0x127336C")]
	public static Vector3 CalculateVelocity(Vector3 fromPos, Vector3 toPos, float speed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002529")]
	[Address(RVA = "0x12735C4", Offset = "0x12735C4", VA = "0x12735C4")]
	public static Vector3 CalculateVelocityVectorGivenTime(Vector3 fromPos, Vector3 toPos, float time)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600252A")]
	[Address(RVA = "0x1273634", Offset = "0x1273634", VA = "0x1273634")]
	public static float CalculateJumpVelocity(Vector3 pos, Vector3 jumpTo, float minJumpHeight, out Vector3 velocity, float jumpSpeed = 5f)
	{
		return default(float);
	}

	[Token(Token = "0x600252B")]
	[Address(RVA = "0x1273780", Offset = "0x1273780", VA = "0x1273780")]
	[ContextMenu("Test Jump")]
	public void TestJumpCalc()
	{
	}

	[Token(Token = "0x600252C")]
	[Address(RVA = "0x12737F0", Offset = "0x12737F0", VA = "0x12737F0")]
	public static void SimulateJump(Vector3 pos, Vector3 velocity, float t, float dt)
	{
	}

	[Token(Token = "0x600252D")]
	[Address(RVA = "0x1273ABC", Offset = "0x1273ABC", VA = "0x1273ABC")]
	public ProjectileUtils()
	{
	}
}
[Token(Token = "0x2000688")]
public class QuestTest : MonoBehaviour
{
	[Token(Token = "0x4001EA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public QuestManager manager;

	[Token(Token = "0x4001EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public QuestStateIdentifier m_completeIdentifier;

	[Token(Token = "0x600252E")]
	[Address(RVA = "0x1273AE0", Offset = "0x1273AE0", VA = "0x1273AE0")]
	private void Start()
	{
	}

	[Token(Token = "0x600252F")]
	[Address(RVA = "0x12740D4", Offset = "0x12740D4", VA = "0x12740D4")]
	public QuestTest()
	{
	}
}
[Token(Token = "0x200068A")]
public class RotateYComponent : CachedMonoBehaviour
{
	[Token(Token = "0x4001EA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_minValue;

	[Token(Token = "0x4001EAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float m_maxValue;

	[Token(Token = "0x4001EAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool m_rotateOnEnable;

	[Token(Token = "0x6002532")]
	[Address(RVA = "0x1274148", Offset = "0x1274148", VA = "0x1274148")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002533")]
	[Address(RVA = "0x1274158", Offset = "0x1274158", VA = "0x1274158")]
	public void RotateObject()
	{
	}

	[Token(Token = "0x6002534")]
	[Address(RVA = "0x12741CC", Offset = "0x12741CC", VA = "0x12741CC")]
	public RotateYComponent()
	{
	}
}
[Token(Token = "0x200068B")]
public interface IShape
{
	[Token(Token = "0x6002535")]
	Vector3[] GetCorners(float scale = 1f);
}
[Token(Token = "0x200068C")]
public class Rectangle : IShape
{
	[Token(Token = "0x4001EAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 m_topLeft;

	[Token(Token = "0x4001EAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 m_topRight;

	[Token(Token = "0x4001EAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_bottomLeft;

	[Token(Token = "0x4001EAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 m_bottomRight;

	[Token(Token = "0x4001EB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] m_cornersBuffer;

	[Token(Token = "0x6002536")]
	[Address(RVA = "0x12741E4", Offset = "0x12741E4", VA = "0x12741E4")]
	public Rectangle(float halfWidth, float halfHeight)
	{
	}

	[Token(Token = "0x6002537")]
	[Address(RVA = "0x1274280", Offset = "0x1274280", VA = "0x1274280", Slot = "4")]
	public Vector3[] GetCorners(float scale = 1f)
	{
		return null;
	}
}
[Token(Token = "0x200068D")]
public class Circle : IShape
{
	[Token(Token = "0x4001EB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3[] m_vertices;

	[Token(Token = "0x4001EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3[] m_verticesScaled;

	[Token(Token = "0x6002538")]
	[Address(RVA = "0x1274348", Offset = "0x1274348", VA = "0x1274348")]
	public Circle(float radius, int vertexCount)
	{
	}

	[Token(Token = "0x6002539")]
	[Address(RVA = "0x1274500", Offset = "0x1274500", VA = "0x1274500", Slot = "4")]
	public Vector3[] GetCorners(float scale = 1f)
	{
		return null;
	}
}
[Token(Token = "0x200068E")]
[ExecuteInEditMode]
public class SkinnedMeshAnimationConverter : MonoBehaviour
{
	[Token(Token = "0x4001EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string m_saveLocation;

	[Token(Token = "0x4001EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SkinnedMeshRenderer m_skinMeshRender;

	[Token(Token = "0x4001EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshFilter m_meshRenderForUV2;

	[Token(Token = "0x4001EB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[ReadOnly]
	private Mesh m_outputMesh;

	[Token(Token = "0x600253A")]
	[Address(RVA = "0x1274594", Offset = "0x1274594", VA = "0x1274594")]
	public SkinnedMeshAnimationConverter()
	{
	}
}
[Token(Token = "0x200068F")]
public class SmoothedValue<T>
{
	[Token(Token = "0x2000690")]
	public delegate T SmoothedValueDelegate(T current, T desired, ref T velocity, float t, float maxSpeed, float dt);

	[Token(Token = "0x4001EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T desired;

	[Token(Token = "0x4001EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T current;

	[Token(Token = "0x4001EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public T velocity;

	[Token(Token = "0x4001EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float duration;

	[Token(Token = "0x4001EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float maxSpeed;

	[Token(Token = "0x600253B")]
	public void Update(SmoothedValueDelegate func, T _desired, float _duration)
	{
	}

	[Token(Token = "0x600253C")]
	public void Update(SmoothedValueDelegate func, T _desired)
	{
	}

	[Token(Token = "0x600253D")]
	public void Update(SmoothedValueDelegate func)
	{
	}

	[Token(Token = "0x600253E")]
	public void Update(SmoothedValueDelegate func, float dt)
	{
	}

	[Token(Token = "0x600253F")]
	public void Set(T value)
	{
	}

	[Token(Token = "0x6002540")]
	public SmoothedValue(float _duration)
	{
	}
}
[Token(Token = "0x2000691")]
public enum TimeLayer
{
	[Token(Token = "0x4001EBD")]
	InputLost,
	[Token(Token = "0x4001EBE")]
	PausedNative,
	[Token(Token = "0x4001EBF")]
	PausedPlatform,
	[Token(Token = "0x4001EC0")]
	Frozen,
	[Token(Token = "0x4001EC1")]
	SlowMotion,
	[Token(Token = "0x4001EC2")]
	Dev,
	[Token(Token = "0x4001EC3")]
	PlayTestStop
}
[Token(Token = "0x2000692")]
public class ToggleReferencedObjects : MonoBehaviour
{
	[Token(Token = "0x4001EC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> m_objectsToToggle;

	[Token(Token = "0x6002545")]
	[Address(RVA = "0x12745EC", Offset = "0x12745EC", VA = "0x12745EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002546")]
	[Address(RVA = "0x127473C", Offset = "0x127473C", VA = "0x127473C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002547")]
	[Address(RVA = "0x127488C", Offset = "0x127488C", VA = "0x127488C")]
	public ToggleReferencedObjects()
	{
	}
}
[Token(Token = "0x2000693")]
public class TransformTracker : CachedMonoBehaviour
{
	[Token(Token = "0x2000694")]
	public enum TrackingType
	{
		[Token(Token = "0x4001ED5")]
		Stop,
		[Token(Token = "0x4001ED6")]
		Update,
		[Token(Token = "0x4001ED7")]
		LateUpdate,
		[Token(Token = "0x4001ED8")]
		FixedUpdate
	}

	[Token(Token = "0x4001EC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected Transform m_transformToTrack;

	[Token(Token = "0x4001EC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Vector3 m_positionOffset;

	[Token(Token = "0x4001EC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	protected Vector3 m_rotationOffset;

	[Token(Token = "0x4001EC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	protected TrackingType m_updateType;

	[Token(Token = "0x4001EC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	protected bool3 m_trackPos;

	[Token(Token = "0x4001ECA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	[SerializeField]
	protected bool3 m_trackRot;

	[Token(Token = "0x4001ECB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 m_lastPos;

	[Token(Token = "0x4001ECC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_calculatedPos;

	[Token(Token = "0x4001ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Quaternion m_lastRot;

	[Token(Token = "0x4001ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Quaternion m_calculatedRot;

	[Token(Token = "0x4001ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 m_tempRot;

	[Token(Token = "0x4001ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool m_filteredPosTracking;

	[Token(Token = "0x4001ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool m_filteredRotTracking;

	[Token(Token = "0x4001ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	private bool m_rotationTracking;

	[Token(Token = "0x4001ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Action<bool> OnTrackingStateChange;

	[Token(Token = "0x170005E9")]
	public TrackingType UpdateType
	{
		[Token(Token = "0x6002548")]
		[Address(RVA = "0x1274894", Offset = "0x1274894", VA = "0x1274894")]
		get
		{
			return default(TrackingType);
		}
	}

	[Token(Token = "0x6002549")]
	[Address(RVA = "0x127489C", Offset = "0x127489C", VA = "0x127489C")]
	private void Start()
	{
	}

	[Token(Token = "0x600254A")]
	[Address(RVA = "0x12748F0", Offset = "0x12748F0", VA = "0x12748F0", Slot = "4")]
	public virtual void SetTracking(TrackingType tracking, Transform toTrack)
	{
	}

	[Token(Token = "0x600254B")]
	[Address(RVA = "0x12749F4", Offset = "0x12749F4", VA = "0x12749F4")]
	public void SetOffsets(Vector3 posOffset, Vector3 rotOffset)
	{
	}

	[Token(Token = "0x600254C")]
	[Address(RVA = "0x1274A04", Offset = "0x1274A04", VA = "0x1274A04", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600254D")]
	[Address(RVA = "0x1274A20", Offset = "0x1274A20", VA = "0x1274A20", Slot = "6")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x600254E")]
	[Address(RVA = "0x1274A3C", Offset = "0x1274A3C", VA = "0x1274A3C", Slot = "7")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x600254F")]
	[Address(RVA = "0x1274A58", Offset = "0x1274A58", VA = "0x1274A58", Slot = "8")]
	protected virtual void UpdateTransform()
	{
	}

	[Token(Token = "0x6002550")]
	[Address(RVA = "0x1274D3C", Offset = "0x1274D3C", VA = "0x1274D3C")]
	public TransformTracker()
	{
	}
}
[Token(Token = "0x2000695")]
public class TransformTrackerWithLimit : TransformTracker
{
	[Token(Token = "0x4001ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Transform m_relativeTransform;

	[Token(Token = "0x4001EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float m_limit;

	[Token(Token = "0x4001EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private Vector3 m_restPosition;

	[Token(Token = "0x4001EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private Vector3 m_restRotation;

	[Token(Token = "0x4001EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool b_isResting;

	[Token(Token = "0x4001EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Quaternion m_restRotationQuat;

	[Token(Token = "0x6002551")]
	[Address(RVA = "0x1274D50", Offset = "0x1274D50", VA = "0x1274D50")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002552")]
	[Address(RVA = "0x1274D8C", Offset = "0x1274D8C", VA = "0x1274D8C")]
	public void SetLimit(float limit)
	{
	}

	[Token(Token = "0x6002553")]
	[Address(RVA = "0x1274D94", Offset = "0x1274D94", VA = "0x1274D94")]
	public void SetLimit(float limit, Vector3 restPos, Quaternion restRot)
	{
	}

	[Token(Token = "0x6002554")]
	[Address(RVA = "0x1274E0C", Offset = "0x1274E0C", VA = "0x1274E0C", Slot = "8")]
	protected override void UpdateTransform()
	{
	}

	[Token(Token = "0x6002555")]
	[Address(RVA = "0x1274F08", Offset = "0x1274F08", VA = "0x1274F08")]
	private bool CheckLimit()
	{
		return default(bool);
	}

	[Token(Token = "0x6002556")]
	[Address(RVA = "0x1274F88", Offset = "0x1274F88", VA = "0x1274F88")]
	public void SetResting(bool rest)
	{
	}

	[Token(Token = "0x6002557")]
	[Address(RVA = "0x1274F94", Offset = "0x1274F94", VA = "0x1274F94")]
	public TransformTrackerWithLimit()
	{
	}
}
[Token(Token = "0x2000696")]
public class TransformTrackerXZ : CachedMonoBehaviour
{
	[Token(Token = "0x4001EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_transformToTrack;

	[Token(Token = "0x6002558")]
	[Address(RVA = "0x1274FA8", Offset = "0x1274FA8", VA = "0x1274FA8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002559")]
	[Address(RVA = "0x1274FAC", Offset = "0x1274FAC", VA = "0x1274FAC")]
	private void UpdatePosition()
	{
	}

	[Token(Token = "0x600255A")]
	[Address(RVA = "0x1275030", Offset = "0x1275030", VA = "0x1275030")]
	public TransformTrackerXZ()
	{
	}
}
[Token(Token = "0x2000697")]
public class UnityEventLogHelper : MonoBehaviour
{
	[Token(Token = "0x600255B")]
	[Address(RVA = "0x1275038", Offset = "0x1275038", VA = "0x1275038")]
	public void LogInfo(string s)
	{
	}

	[Token(Token = "0x600255C")]
	[Address(RVA = "0x127503C", Offset = "0x127503C", VA = "0x127503C")]
	public void LogImportantInfo(string s)
	{
	}

	[Token(Token = "0x600255D")]
	[Address(RVA = "0x1275040", Offset = "0x1275040", VA = "0x1275040")]
	public void LogWarning(string s)
	{
	}

	[Token(Token = "0x600255E")]
	[Address(RVA = "0x1275044", Offset = "0x1275044", VA = "0x1275044")]
	public void LogError(string s)
	{
	}

	[Token(Token = "0x600255F")]
	[Address(RVA = "0x1275048", Offset = "0x1275048", VA = "0x1275048")]
	public UnityEventLogHelper()
	{
	}
}
[Token(Token = "0x2000698")]
public class UpdateScheduler : PT.Singleton<UpdateScheduler>
{
	[Token(Token = "0x2000699")]
	public class MemberUpdateInfo
	{
		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int id;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float lastUpdated;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ticket;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool queued;

		[Token(Token = "0x6002564")]
		[Address(RVA = "0x1275808", Offset = "0x1275808", VA = "0x1275808")]
		public MemberUpdateInfo()
		{
		}
	}

	[Token(Token = "0x200069A")]
	public class Scheduler
	{
		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxPerFrame;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float minDeltaTime;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_processedThisFrame;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int m_nextTicket;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_head;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, MemberUpdateInfo> m_memberData;

		[Token(Token = "0x6002565")]
		[Address(RVA = "0x1275314", Offset = "0x1275314", VA = "0x1275314")]
		public Scheduler()
		{
		}

		[Token(Token = "0x6002566")]
		[Address(RVA = "0x1275810", Offset = "0x1275810", VA = "0x1275810")]
		public bool CanUpdate(int id, out float dt)
		{
			return default(bool);
		}

		[Token(Token = "0x6002567")]
		[Address(RVA = "0x12755F8", Offset = "0x12755F8", VA = "0x12755F8")]
		public void OnEndFrame()
		{
		}

		[Token(Token = "0x6002568")]
		[Address(RVA = "0x12753A0", Offset = "0x12753A0", VA = "0x12753A0")]
		public void AddMember(int id)
		{
		}

		[Token(Token = "0x6002569")]
		[Address(RVA = "0x1275910", Offset = "0x1275910", VA = "0x1275910")]
		public void RemoveMember(int id)
		{
		}
	}

	[Token(Token = "0x4001EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, Scheduler> s_schedulersMap;

	[Token(Token = "0x4001EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<Scheduler> s_schedulers;

	[Token(Token = "0x6002560")]
	[Address(RVA = "0x1275050", Offset = "0x1275050", VA = "0x1275050")]
	static UpdateScheduler()
	{
	}

	[Token(Token = "0x6002561")]
	[Address(RVA = "0x1275144", Offset = "0x1275144", VA = "0x1275144")]
	public Scheduler AddToSchedule(string scheduleName, int memberId, int maxPerFrame = 2, float minDeltaTime = 0.1f)
	{
		return null;
	}

	[Token(Token = "0x6002562")]
	[Address(RVA = "0x1275488", Offset = "0x1275488", VA = "0x1275488")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6002563")]
	[Address(RVA = "0x127579C", Offset = "0x127579C", VA = "0x127579C")]
	public UpdateScheduler()
	{
	}
}
[Token(Token = "0x200069B")]
public class CanvasCull : CachedMonoBehaviour
{
	[Token(Token = "0x4001EED")]
	private const int c_maxPerFrame = 10;

	[Token(Token = "0x4001EEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Graphic elements to enable/disable. Only used if no Disable Object is provided.")]
	private List<Graphic> m_graphics;

	[Token(Token = "0x4001EEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("Graphic elements to enable/disable. Only used if no Disable Object is provided.")]
	private List<Canvas> m_uiCanvases;

	[Token(Token = "0x4001EF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Optional game object to enable/disable. If one is set, then Graphics will be ignore.")]
	[SerializeField]
	private GameObject m_disableObject;

	[Token(Token = "0x4001EF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private List<Renderer> m_renderers;

	[Token(Token = "0x4001EF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float m_farCullDistance;

	[Token(Token = "0x4001EF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private Vector3 m_localForwardVector;

	[Token(Token = "0x4001EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<CanvasCull> s_canvases;

	[Token(Token = "0x4001EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int s_index;

	[Token(Token = "0x4001EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static bool s_active;

	[Token(Token = "0x4001EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool m_hidden;

	[Token(Token = "0x170005EA")]
	private Vector3 forwardDirection
	{
		[Token(Token = "0x600256A")]
		[Address(RVA = "0x1275B04", Offset = "0x1275B04", VA = "0x1275B04")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x600256B")]
		[Address(RVA = "0x1275B10", Offset = "0x1275B10", VA = "0x1275B10")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600256C")]
	[Address(RVA = "0x1275B1C", Offset = "0x1275B1C", VA = "0x1275B1C")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitializePlayerLoop()
	{
	}

	[Token(Token = "0x600256D")]
	[Address(RVA = "0x1275BBC", Offset = "0x1275BBC", VA = "0x1275BBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600256E")]
	[Address(RVA = "0x1275BF4", Offset = "0x1275BF4", VA = "0x1275BF4")]
	[ContextMenu("Find Graphics")]
	public void FindGraphics()
	{
	}

	[Token(Token = "0x600256F")]
	[Address(RVA = "0x1275CCC", Offset = "0x1275CCC", VA = "0x1275CCC")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x6002570")]
	[Address(RVA = "0x1275D8C", Offset = "0x1275D8C", VA = "0x1275D8C")]
	static CanvasCull()
	{
	}

	[Token(Token = "0x6002571")]
	[Address(RVA = "0x1275DDC", Offset = "0x1275DDC", VA = "0x1275DDC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002572")]
	[Address(RVA = "0x1275EB4", Offset = "0x1275EB4", VA = "0x1275EB4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002573")]
	[Address(RVA = "0x1275F34", Offset = "0x1275F34", VA = "0x1275F34")]
	private void Show(bool show)
	{
	}

	[Token(Token = "0x6002574")]
	[Address(RVA = "0x12763BC", Offset = "0x12763BC", VA = "0x12763BC")]
	public static void TurnOff()
	{
	}

	[Token(Token = "0x6002575")]
	[Address(RVA = "0x127657C", Offset = "0x127657C", VA = "0x127657C")]
	public static void TurnOn()
	{
	}

	[Token(Token = "0x6002576")]
	[Address(RVA = "0x12765D8", Offset = "0x12765D8", VA = "0x12765D8")]
	private static void UpdateInstancesVisibility()
	{
	}

	[Token(Token = "0x6002577")]
	[Address(RVA = "0x12768A8", Offset = "0x12768A8", VA = "0x12768A8")]
	public CanvasCull()
	{
	}
}
[Token(Token = "0x200069C")]
public class CollisionTest : MonoBehaviour
{
	[Token(Token = "0x6002578")]
	[Address(RVA = "0x1276910", Offset = "0x1276910", VA = "0x1276910")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6002579")]
	[Address(RVA = "0x1276B58", Offset = "0x1276B58", VA = "0x1276B58")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600257A")]
	[Address(RVA = "0x1276C6C", Offset = "0x1276C6C", VA = "0x1276C6C")]
	public CollisionTest()
	{
	}
}
[Token(Token = "0x200069D")]
public class ForceLayers : MonoBehaviour
{
	[Token(Token = "0x4001EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject m_root;

	[Token(Token = "0x4001EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool m_applyToChildren;

	[Token(Token = "0x4001EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool m_collidersOnly;

	[Token(Token = "0x4001EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int m_desiredLayer;

	[Token(Token = "0x600257B")]
	[Address(RVA = "0x1276C74", Offset = "0x1276C74", VA = "0x1276C74")]
	private void Start()
	{
	}

	[Token(Token = "0x600257C")]
	[Address(RVA = "0x1276D3C", Offset = "0x1276D3C", VA = "0x1276D3C")]
	private void ApplyLayer(Transform root)
	{
	}

	[Token(Token = "0x600257D")]
	[Address(RVA = "0x12770A4", Offset = "0x12770A4", VA = "0x12770A4")]
	public ForceLayers()
	{
	}
}
[Token(Token = "0x200069E")]
public class HideableHelper : MonoBehaviour
{
	[Token(Token = "0x4001EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody[] m_rigidBodies;

	[Token(Token = "0x4001EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BoltEntity[] m_boltEntities;

	[Token(Token = "0x4001EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer[] m_renderers;

	[Token(Token = "0x600257E")]
	[Address(RVA = "0x12770B4", Offset = "0x12770B4", VA = "0x12770B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600257F")]
	[Address(RVA = "0x1277180", Offset = "0x1277180", VA = "0x1277180")]
	public void Hide()
	{
	}

	[Token(Token = "0x6002580")]
	[Address(RVA = "0x127733C", Offset = "0x127733C", VA = "0x127733C")]
	public void Show()
	{
	}

	[Token(Token = "0x6002581")]
	[Address(RVA = "0x12774F8", Offset = "0x12774F8", VA = "0x12774F8")]
	public HideableHelper()
	{
	}
}
[Token(Token = "0x200069F")]
public class HideableManager : SceneSingleton<HideableManager>
{
	[Token(Token = "0x4001F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int c_maxPerFrame;

	[Token(Token = "0x4001F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int c_maxChangesPerFrame;

	[Token(Token = "0x4001F02")]
	private const int c_maxPlayers = 4;

	[Token(Token = "0x4001F03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<IHideable> m_hiddenItems;

	[Token(Token = "0x4001F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<IHideable> m_visibleItems;

	[Token(Token = "0x4001F05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<IHideable> m_allItems;

	[Token(Token = "0x4001F07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[UnityEngine.Tooltip("Distance at which objects will become visible again if hidden, irrespective of if they are infront or behind the player.")]
	[SerializeField]
	private float m_forceShowDistance;

	[Token(Token = "0x4001F08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("Distance at which an object will be hidden, unless the object defines a further distance.")]
	[SerializeField]
	private float m_defaulHideDistance;

	[Token(Token = "0x4001F09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private ProfilingViewModel m_viewModel;

	[Token(Token = "0x4001F0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_hideIndex;

	[Token(Token = "0x4001F0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int m_showIndex;

	[Token(Token = "0x4001F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3[] m_playerPos;

	[Token(Token = "0x4001F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3[] m_playerFwd;

	[Token(Token = "0x4001F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float m_sqrForceShowDistance;

	[Token(Token = "0x4001F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<IHideable, int> m_showFrameCount;

	[Token(Token = "0x170005EB")]
	public bool Active
	{
		[Token(Token = "0x6002582")]
		[Address(RVA = "0x1277500", Offset = "0x1277500", VA = "0x1277500")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002583")]
		[Address(RVA = "0x1277508", Offset = "0x1277508", VA = "0x1277508")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170005EC")]
	private int numPlayers
	{
		[Token(Token = "0x6002584")]
		[Address(RVA = "0x1277514", Offset = "0x1277514", VA = "0x1277514")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6002585")]
		[Address(RVA = "0x127751C", Offset = "0x127751C", VA = "0x127751C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002586")]
	[Address(RVA = "0x1277524", Offset = "0x1277524", VA = "0x1277524")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002587")]
	[Address(RVA = "0x12776D0", Offset = "0x12776D0", VA = "0x12776D0", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6002588")]
	[Address(RVA = "0x1277720", Offset = "0x1277720", VA = "0x1277720")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002589")]
	[Address(RVA = "0x1277D64", Offset = "0x1277D64", VA = "0x1277D64")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600258A")]
	[Address(RVA = "0x127795C", Offset = "0x127795C", VA = "0x127795C")]
	public static void Register(IHideable item)
	{
	}

	[Token(Token = "0x600258B")]
	[Address(RVA = "0x1277FF4", Offset = "0x1277FF4", VA = "0x1277FF4")]
	public static void UnRegister(IHideable item)
	{
	}

	[Token(Token = "0x600258C")]
	[Address(RVA = "0x1278100", Offset = "0x1278100", VA = "0x1278100")]
	public static void StopTracking(IHideable item)
	{
	}

	[Token(Token = "0x600258D")]
	[Address(RVA = "0x1278220", Offset = "0x1278220", VA = "0x1278220")]
	private void HandleEntityCullingChanged()
	{
	}

	[Token(Token = "0x600258E")]
	[Address(RVA = "0x1277AEC", Offset = "0x1277AEC", VA = "0x1277AEC")]
	private void CountBoltEntities()
	{
	}

	[Token(Token = "0x600258F")]
	[Address(RVA = "0x12785B4", Offset = "0x12785B4", VA = "0x12785B4")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x6002590")]
	[Address(RVA = "0x12785C0", Offset = "0x12785C0", VA = "0x12785C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6002591")]
	private int ProcessItems<T>(List<T> items, int index, bool desiredVisibility, Func<T, bool> itemFunc) where T : IHideable
	{
		return default(int);
	}

	[Token(Token = "0x6002592")]
	[Address(RVA = "0x1278950", Offset = "0x1278950", VA = "0x1278950")]
	private bool inRange(Vector3 pos, float sqrLongRangeDistance)
	{
		return default(bool);
	}

	[Token(Token = "0x6002593")]
	[Address(RVA = "0x1278B54", Offset = "0x1278B54", VA = "0x1278B54")]
	private bool inRange(Vector3 pos, Transform viewerTransform, float sqrLongRangeDistance)
	{
		return default(bool);
	}

	[Token(Token = "0x6002594")]
	[Address(RVA = "0x1278C0C", Offset = "0x1278C0C", VA = "0x1278C0C")]
	private bool HideItem(IHideable item)
	{
		return default(bool);
	}

	[Token(Token = "0x6002595")]
	[Address(RVA = "0x12783AC", Offset = "0x12783AC", VA = "0x12783AC")]
	private bool ShowItem(IHideable instance)
	{
		return default(bool);
	}

	[Token(Token = "0x6002596")]
	[Address(RVA = "0x1277F14", Offset = "0x1277F14", VA = "0x1277F14")]
	private static void AddToList(List<IHideable> items, IHideable item)
	{
	}

	[Token(Token = "0x6002597")]
	[Address(RVA = "0x1278D64", Offset = "0x1278D64", VA = "0x1278D64")]
	public HideableManager()
	{
	}
}
[Token(Token = "0x20006A1")]
public class ItemKillBox : MonoBehaviour
{
	[Token(Token = "0x600259B")]
	[Address(RVA = "0x1278E64", Offset = "0x1278E64", VA = "0x1278E64")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x600259C")]
	[Address(RVA = "0x1278F84", Offset = "0x1278F84", VA = "0x1278F84")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600259D")]
	[Address(RVA = "0x1278E68", Offset = "0x1278E68", VA = "0x1278E68")]
	private void RemoveItem(Collider collider)
	{
	}

	[Token(Token = "0x600259E")]
	[Address(RVA = "0x1278FA8", Offset = "0x1278FA8", VA = "0x1278FA8")]
	public ItemKillBox()
	{
	}
}
[Serializable]
[Token(Token = "0x20006A2")]
[CreateAssetMenu]
public class ShaderList : ScriptableObject
{
	[Token(Token = "0x4001F13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Shader> usedShaders;

	[Token(Token = "0x4001F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Material> materials;

	[Token(Token = "0x600259F")]
	[Address(RVA = "0x1278FB0", Offset = "0x1278FB0", VA = "0x1278FB0")]
	[ContextMenu("Find Shaders")]
	public void FindShaders()
	{
	}

	[Token(Token = "0x60025A0")]
	[Address(RVA = "0x12791B4", Offset = "0x12791B4", VA = "0x12791B4")]
	public ShaderList()
	{
	}
}
[Token(Token = "0x20006A3")]
public class SimpleRigidbodyCharacter : EntityBehaviour<ITestPlayerState>
{
	[Token(Token = "0x4001F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DebugDataViewModel _degugData;

	[Token(Token = "0x4001F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody _body;

	[Token(Token = "0x4001F17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_falling;

	[Token(Token = "0x4001F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_fallVelocity;

	[Token(Token = "0x4001F19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SmoothedValue<Vector3> m_playerVelocity;

	[Token(Token = "0x4001F1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HealthStatus _healthStatus;

	[Token(Token = "0x4001F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CharacterController _controller;

	[Token(Token = "0x4001F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_desiredfFacingDirection;

	[Token(Token = "0x4001F1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private VrRigFPSBotBuddy m_botBuddy;

	[Token(Token = "0x60025A1")]
	[Address(RVA = "0x12791BC", Offset = "0x12791BC", VA = "0x12791BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60025A2")]
	[Address(RVA = "0x1279370", Offset = "0x1279370", VA = "0x1279370", Slot = "18")]
	public override void Attached()
	{
	}

	[Token(Token = "0x60025A3")]
	[Address(RVA = "0x12794DC", Offset = "0x12794DC", VA = "0x12794DC")]
	private void Update()
	{
	}

	[Token(Token = "0x60025A4")]
	[Address(RVA = "0x1279C10", Offset = "0x1279C10", VA = "0x1279C10", Slot = "20")]
	public override void SimulateOwner()
	{
	}

	[Token(Token = "0x60025A5")]
	[Address(RVA = "0x1279D40", Offset = "0x1279D40", VA = "0x1279D40")]
	private void OnPlayerMovement(InputValue value)
	{
	}

	[Token(Token = "0x60025A6")]
	[Address(RVA = "0x12795C0", Offset = "0x12795C0", VA = "0x12795C0")]
	private void MovePlayer()
	{
	}

	[Token(Token = "0x60025A7")]
	[Address(RVA = "0x1279FA4", Offset = "0x1279FA4", VA = "0x1279FA4")]
	public SimpleRigidbodyCharacter()
	{
	}
}
[Serializable]
[Token(Token = "0x20006A4")]
[CreateAssetMenu]
public class ComputerAbilityViewModel : ScriptableObject, IDataSource
{
	[Token(Token = "0x4001F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_rechargeTimer;

	[Token(Token = "0x170005ED")]
	public float RechargeTimer
	{
		[Token(Token = "0x60025A9")]
		[Address(RVA = "0x1279FF4", Offset = "0x1279FF4", VA = "0x1279FF4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60025AA")]
		[Address(RVA = "0x1279FFC", Offset = "0x1279FFC", VA = "0x1279FFC")]
		set
		{
		}
	}

	[Token(Token = "0x170005EE")]
	public string RechargeTimerFormatted
	{
		[Token(Token = "0x60025AB")]
		[Address(RVA = "0x127A11C", Offset = "0x127A11C", VA = "0x127A11C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170005EF")]
	public bool IsRecharging
	{
		[Token(Token = "0x60025AC")]
		[Address(RVA = "0x127A1E8", Offset = "0x127A1E8", VA = "0x127A1E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60025A8")]
	[Address(RVA = "0x1279FEC", Offset = "0x1279FEC", VA = "0x1279FEC")]
	public void ResetViewModel()
	{
	}

	[Token(Token = "0x60025AD")]
	[Address(RVA = "0x127A1F8", Offset = "0x127A1F8", VA = "0x127A1F8")]
	public ComputerAbilityViewModel()
	{
	}
}
[Serializable]
[Token(Token = "0x20006A5")]
[CreateAssetMenu]
public class ObjectiveControllerViewModel : ScriptableObject, IDataSource
{
	[NonSerialized]
	[Token(Token = "0x4001F1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<ObjectiveViewModel> m_objectivesList;

	[NonSerialized]
	[Token(Token = "0x4001F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ObjectiveViewModel m_currentWatchObjective;

	[Token(Token = "0x170005F0")]
	public int CurrentIndex
	{
		[Token(Token = "0x60025AE")]
		[Address(RVA = "0x127A200", Offset = "0x127A200", VA = "0x127A200")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170005F1")]
	public ObjectiveViewModel currentWatchObjective
	{
		[Token(Token = "0x60025AF")]
		[Address(RVA = "0x127A24C", Offset = "0x127A24C", VA = "0x127A24C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60025B0")]
		[Address(RVA = "0x127A254", Offset = "0x127A254", VA = "0x127A254")]
		set
		{
		}
	}

	[Token(Token = "0x60025B1")]
	[Address(RVA = "0x127A2C0", Offset = "0x127A2C0", VA = "0x127A2C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60025B2")]
	[Address(RVA = "0x127A2C4", Offset = "0x127A2C4", VA = "0x127A2C4")]
	public void ClearObjectivesList()
	{
	}

	[Token(Token = "0x60025B3")]
	[Address(RVA = "0x127A334", Offset = "0x127A334", VA = "0x127A334")]
	public ObjectiveViewModel CreateObjectiveViewModel(Objective objective)
	{
		return null;
	}

	[Token(Token = "0x60025B4")]
	[Address(RVA = "0x127A58C", Offset = "0x127A58C", VA = "0x127A58C")]
	public ObjectiveControllerViewModel()
	{
	}
}
[Serializable]
[Token(Token = "0x20006A6")]
public class ObjectiveViewModel : IDataSource
{
	[Token(Token = "0x4001F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private bool m_completed;

	[Token(Token = "0x4001F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string m_title;

	[Token(Token = "0x4001F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string m_text;

	[Token(Token = "0x4001F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string m_completedText;

	[Token(Token = "0x4001F26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Vector3 m_objectivePosition;

	[Token(Token = "0x170005F2")]
	public bool Completed
	{
		[Token(Token = "0x60025B6")]
		[Address(RVA = "0x127AA00", Offset = "0x127AA00", VA = "0x127AA00")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60025B7")]
		[Address(RVA = "0x127A75C", Offset = "0x127A75C", VA = "0x127A75C")]
		set
		{
		}
	}

	[Token(Token = "0x170005F3")]
	public Objective objective
	{
		[Token(Token = "0x60025B8")]
		[Address(RVA = "0x127AA08", Offset = "0x127AA08", VA = "0x127AA08")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60025B9")]
		[Address(RVA = "0x127AA10", Offset = "0x127AA10", VA = "0x127AA10")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170005F4")]
	public string Title
	{
		[Token(Token = "0x60025BA")]
		[Address(RVA = "0x127AA18", Offset = "0x127AA18", VA = "0x127AA18")]
		get
		{
			return null;
		}
		[Token(Token = "0x60025BB")]
		[Address(RVA = "0x127A618", Offset = "0x127A618", VA = "0x127A618")]
		set
		{
		}
	}

	[Token(Token = "0x170005F5")]
	public string Text
	{
		[Token(Token = "0x60025BC")]
		[Address(RVA = "0x127AA20", Offset = "0x127AA20", VA = "0x127AA20")]
		get
		{
			return null;
		}
		[Token(Token = "0x60025BD")]
		[Address(RVA = "0x127A684", Offset = "0x127A684", VA = "0x127A684")]
		set
		{
		}
	}

	[Token(Token = "0x170005F6")]
	public string CompletedText
	{
		[Token(Token = "0x60025BE")]
		[Address(RVA = "0x127AA28", Offset = "0x127AA28", VA = "0x127AA28")]
		get
		{
			return null;
		}
		[Token(Token = "0x60025BF")]
		[Address(RVA = "0x127A6F0", Offset = "0x127A6F0", VA = "0x127A6F0")]
		set
		{
		}
	}

	[Token(Token = "0x170005F7")]
	public Vector3 ObjectivePosition
	{
		[Token(Token = "0x60025C0")]
		[Address(RVA = "0x127AA30", Offset = "0x127AA30", VA = "0x127AA30")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60025C1")]
		[Address(RVA = "0x127A7EC", Offset = "0x127A7EC", VA = "0x127A7EC")]
		set
		{
		}
	}

	[Token(Token = "0x60025B5")]
	[Address(RVA = "0x127A478", Offset = "0x127A478", VA = "0x127A478")]
	internal ObjectiveViewModel(Objective _objective)
	{
	}
}
[Serializable]
[Token(Token = "0x20006A7")]
[CreateAssetMenu]
public class PowerSystemViewModel : ScriptableObject, IDataSource
{
	[Token(Token = "0x4001F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_normalizedHealth;

	[Token(Token = "0x4001F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_charge;

	[Token(Token = "0x4001F29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool m_broken;

	[Token(Token = "0x4001F2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool m_active;

	[Token(Token = "0x4001F2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool m_running;

	[Token(Token = "0x170005F8")]
	public float NormalizedHealth
	{
		[Token(Token = "0x60025C2")]
		[Address(RVA = "0x127AA3C", Offset = "0x127AA3C", VA = "0x127AA3C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60025C3")]
		[Address(RVA = "0x127AA44", Offset = "0x127AA44", VA = "0x127AA44")]
		set
		{
		}
	}

	[Token(Token = "0x170005F9")]
	public float Charge
	{
		[Token(Token = "0x60025C4")]
		[Address(RVA = "0x127AADC", Offset = "0x127AADC", VA = "0x127AADC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60025C5")]
		[Address(RVA = "0x127AAE4", Offset = "0x127AAE4", VA = "0x127AAE4")]
		set
		{
		}
	}

	[Token(Token = "0x170005FA")]
	public bool Broken
	{
		[Token(Token = "0x60025C6")]
		[Address(RVA = "0x127ABAC", Offset = "0x127ABAC", VA = "0x127ABAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60025C7")]
		[Address(RVA = "0x127ABB4", Offset = "0x127ABB4", VA = "0x127ABB4")]
		set
		{
		}
	}

	[Token(Token = "0x170005FB")]
	public bool Active
	{
		[Token(Token = "0x60025C8")]
		[Address(RVA = "0x127AC7C", Offset = "0x127AC7C", VA = "0x127AC7C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60025C9")]
		[Address(RVA = "0x127AC84", Offset = "0x127AC84", VA = "0x127AC84")]
		set
		{
		}
	}

	[Token(Token = "0x170005FC")]
	public bool Working
	{
		[Token(Token = "0x60025CA")]
		[Address(RVA = "0x127AD14", Offset = "0x127AD14", VA = "0x127AD14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170005FD")]
	public bool Running
	{
		[Token(Token = "0x60025CB")]
		[Address(RVA = "0x127AD24", Offset = "0x127AD24", VA = "0x127AD24")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60025CC")]
		[Address(RVA = "0x127AD2C", Offset = "0x127AD2C", VA = "0x127AD2C")]
		set
		{
		}
	}

	[Token(Token = "0x170005FE")]
	public bool NotRunning
	{
		[Token(Token = "0x60025CD")]
		[Address(RVA = "0x127ADF4", Offset = "0x127ADF4", VA = "0x127ADF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170005FF")]
	public float OneMinusNormalizedHealth
	{
		[Token(Token = "0x60025CE")]
		[Address(RVA = "0x127AE04", Offset = "0x127AE04", VA = "0x127AE04")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000600")]
	public float OneMinusCharge
	{
		[Token(Token = "0x60025CF")]
		[Address(RVA = "0x127AE20", Offset = "0x127AE20", VA = "0x127AE20")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60025D0")]
	[Address(RVA = "0x127AE3C", Offset = "0x127AE3C", VA = "0x127AE3C")]
	public PowerSystemViewModel()
	{
	}
}
[Token(Token = "0x20006A8")]
public class VoiceResponder : EntityEventListener<IVoiceResponderState>
{
	[Serializable]
	[Token(Token = "0x20006A9")]
	private struct VoiceResponseMapping
	{
		[Token(Token = "0x4001F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[UnityEngine.Tooltip("The associated intent. To see all intents, find the Wit configuration and click Intents.")]
		public string intent;

		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("The minimum confidence needed for this mapping to trigger.")]
		public float requiredConfidence;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("When this mapping is triggered, we will always raise this response.")]
		public UnityEvent response;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("When this mapping is triggered, we will raise this response with the dictionary of entities (name to value) only if any entities exist for this intent.")]
		public UnityEvent<System.Collections.Generic.IReadOnlyDictionary<string, string>> entitiesResponse;
	}

	[Token(Token = "0x4001F2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private VoiceResponseMapping[] m_voiceResponseMappings;

	[Token(Token = "0x4001F2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("Event raised when no intents can be recognised, or when an error occurs.")]
	[SerializeField]
	private UnityEvent m_failureResponse;

	[Token(Token = "0x4001F2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("Event raised when this voice responder starts listening to the player.")]
	private UnityEvent m_startListeningResponse;

	[Token(Token = "0x4001F2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("Event raised when this voice responder stops listening to the player.")]
	[SerializeField]
	private UnityEvent m_stopListeningResponse;

	[Token(Token = "0x4001F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameEvent m_failureEvent;

	[Token(Token = "0x4001F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameEvent m_startListeningEvent;

	[Token(Token = "0x4001F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameEvent m_stopListeningEvent;

	[Token(Token = "0x4001F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_locallyListening;

	[Token(Token = "0x4001F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool m_voiceServiceRunning;

	[Token(Token = "0x4001F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Dictionary<string, string> m_entityMap;

	[Token(Token = "0x4001F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float m_localTimeoutTimer;

	[Token(Token = "0x4001F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[UnityEngine.Tooltip("If greater than zero, only respond to the player's voice if their head is at least this close to this game object. If zero, listen regardless of distance.")]
	[SerializeField]
	[Min(0f)]
	private float m_listenRadius;

	[Token(Token = "0x4001F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x4001F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<ComputerAbility> m_computerAbilities;

	[Token(Token = "0x4001F3A")]
	private const string KEY_NAME = "name";

	[Token(Token = "0x4001F3B")]
	private const string KEY_VALUE = "value";

	[Token(Token = "0x4001F3C")]
	private const string KEY_CONFIDENCE = "confidence";

	[Token(Token = "0x4001F3D")]
	private const string KEY_ENTITIES = "entities";

	[Token(Token = "0x4001F3E")]
	private const string KEY_CABIN_EMP = "cabin_emp";

	[Token(Token = "0x60025D1")]
	[Address(RVA = "0x127AE44", Offset = "0x127AE44", VA = "0x127AE44")]
	private void Awake()
	{
	}

	[Token(Token = "0x60025D2")]
	[Address(RVA = "0x127AEC0", Offset = "0x127AEC0", VA = "0x127AEC0")]
	public void RequestStartListening()
	{
	}

	[Token(Token = "0x60025D3")]
	[Address(RVA = "0x127B190", Offset = "0x127B190", VA = "0x127B190")]
	public void RequestStopListening()
	{
	}

	[Token(Token = "0x60025D4")]
	[Address(RVA = "0x127B2E0", Offset = "0x127B2E0", VA = "0x127B2E0", Slot = "126")]
	public override void OnEvent(VoiceResponderSetListeningEvent evnt)
	{
	}

	[Token(Token = "0x60025D5")]
	[Address(RVA = "0x127AF6C", Offset = "0x127AF6C", VA = "0x127AF6C")]
	private void StartListening()
	{
	}

	[Token(Token = "0x60025D6")]
	[Address(RVA = "0x127B23C", Offset = "0x127B23C", VA = "0x127B23C")]
	private void StopListening()
	{
	}

	[Token(Token = "0x60025D7")]
	[Address(RVA = "0x127B4CC", Offset = "0x127B4CC", VA = "0x127B4CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60025D8")]
	[Address(RVA = "0x127B4D0", Offset = "0x127B4D0", VA = "0x127B4D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60025D9")]
	[Address(RVA = "0x127B5DC", Offset = "0x127B5DC", VA = "0x127B5DC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60025DA")]
	[Address(RVA = "0x127B3CC", Offset = "0x127B3CC", VA = "0x127B3CC")]
	private void RefreshVoiceServiceState()
	{
	}

	[Token(Token = "0x60025DB")]
	[Address(RVA = "0x127B5F0", Offset = "0x127B5F0", VA = "0x127B5F0")]
	private void BeginVoiceService()
	{
	}

	[Token(Token = "0x60025DC")]
	[Address(RVA = "0x127B5E0", Offset = "0x127B5E0", VA = "0x127B5E0")]
	private void EndVoiceService()
	{
	}

	[Token(Token = "0x60025DD")]
	[Address(RVA = "0x127B554", Offset = "0x127B554", VA = "0x127B554")]
	private void HandleLocalResponse(string response)
	{
	}

	[Token(Token = "0x60025DE")]
	[Address(RVA = "0x127B7B4", Offset = "0x127B7B4", VA = "0x127B7B4")]
	private void HandleLocalError(string error, string message)
	{
	}

	[Token(Token = "0x60025DF")]
	[Address(RVA = "0x127B610", Offset = "0x127B610", VA = "0x127B610")]
	private void HandleResponse(string response, [Optional] string value)
	{
	}

	[Token(Token = "0x60025E0")]
	[Address(RVA = "0x127B9F0", Offset = "0x127B9F0", VA = "0x127B9F0")]
	private void PopulateEntityMap(string response, string value, ref Dictionary<string, string> results)
	{
	}

	[Token(Token = "0x60025E1")]
	[Address(RVA = "0x127BAC8", Offset = "0x127BAC8", VA = "0x127BAC8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60025E2")]
	[Address(RVA = "0x127BB28", Offset = "0x127BB28", VA = "0x127BB28")]
	public VoiceResponder()
	{
	}
}
[Token(Token = "0x20006AA")]
public class VoiceServiceLanguageSwitcher : MonoBehaviour
{
	[Token(Token = "0x60025E3")]
	[Address(RVA = "0x127BB70", Offset = "0x127BB70", VA = "0x127BB70")]
	public VoiceServiceLanguageSwitcher()
	{
	}
}
[Token(Token = "0x20006AB")]
internal class PermissionSafeMicrophone
{
	[Token(Token = "0x17000601")]
	public static string[] devices
	{
		[Token(Token = "0x60025E4")]
		[Address(RVA = "0x127BB78", Offset = "0x127BB78", VA = "0x127BB78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60025E5")]
	[Address(RVA = "0x127BBA0", Offset = "0x127BBA0", VA = "0x127BBA0")]
	public static AudioClip Start(string deviceName, bool loop, int lengthSec, int frequency)
	{
		return null;
	}

	[Token(Token = "0x60025E6")]
	[Address(RVA = "0x127BC00", Offset = "0x127BC00", VA = "0x127BC00")]
	public static void End(string deviceName)
	{
	}

	[Token(Token = "0x60025E7")]
	[Address(RVA = "0x127BC2C", Offset = "0x127BC2C", VA = "0x127BC2C")]
	public static int GetPosition(string deviceName)
	{
		return default(int);
	}

	[Token(Token = "0x60025E8")]
	[Address(RVA = "0x127BC5C", Offset = "0x127BC5C", VA = "0x127BC5C")]
	public static bool IsRecording(string deviceName)
	{
		return default(bool);
	}

	[Token(Token = "0x60025E9")]
	[Address(RVA = "0x127BC8C", Offset = "0x127BC8C", VA = "0x127BC8C")]
	public PermissionSafeMicrophone()
	{
	}
}
[Token(Token = "0x20006AC")]
public class VoiceServiceTestHarness : MonoBehaviour
{
	[Token(Token = "0x4001F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private VoiceService appVoiceExperience;

	[Token(Token = "0x60025EA")]
	[Address(RVA = "0x127BC94", Offset = "0x127BC94", VA = "0x127BC94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60025EB")]
	[Address(RVA = "0x127BECC", Offset = "0x127BECC", VA = "0x127BECC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60025EC")]
	[Address(RVA = "0x127C104", Offset = "0x127C104", VA = "0x127C104")]
	private void StartListen()
	{
	}

	[Token(Token = "0x60025ED")]
	[Address(RVA = "0x127C16C", Offset = "0x127C16C", VA = "0x127C16C")]
	private void StopListen()
	{
	}

	[Token(Token = "0x60025EE")]
	[Address(RVA = "0x127C1D4", Offset = "0x127C1D4", VA = "0x127C1D4")]
	private void Respond(WitResponseNode node)
	{
	}

	[Token(Token = "0x60025EF")]
	[Address(RVA = "0x127C858", Offset = "0x127C858", VA = "0x127C858")]
	private void HandleError(string error, string message)
	{
	}

	[Token(Token = "0x60025F0")]
	[Address(RVA = "0x127CA84", Offset = "0x127CA84", VA = "0x127CA84")]
	private void Update()
	{
	}

	[Token(Token = "0x60025F1")]
	[Address(RVA = "0x127CAF0", Offset = "0x127CAF0", VA = "0x127CAF0")]
	public VoiceServiceTestHarness()
	{
	}
}
[Token(Token = "0x20006AD")]
public class VoiceServiceWrapper : PT.Singleton<VoiceServiceWrapper>
{
	[Token(Token = "0x60025F2")]
	[Address(RVA = "0x127CAF8", Offset = "0x127CAF8", VA = "0x127CAF8")]
	public void AddVoiceListener(Core.state_InitialiseGameSystems stateInitialiseGameSystems)
	{
	}

	[Token(Token = "0x60025F3")]
	[Address(RVA = "0x127CAFC", Offset = "0x127CAFC", VA = "0x127CAFC")]
	public void RemoveVoiceListener(Core.state_InitialiseGameSystems stateInitialiseGameSystems)
	{
	}

	[Token(Token = "0x60025F4")]
	[Address(RVA = "0x127CB00", Offset = "0x127CB00", VA = "0x127CB00")]
	public VoiceServiceWrapper()
	{
	}
}
[Token(Token = "0x20006AE")]
public class DebugPositionRigAtSceneLoad : MonoBehaviour
{
	[Token(Token = "0x20006AF")]
	private enum LoadType
	{
		[Token(Token = "0x4001F45")]
		StartFresh,
		[Token(Token = "0x4001F46")]
		ContinueExisting
	}

	[Token(Token = "0x60025F5")]
	[Address(RVA = "0x127CB6C", Offset = "0x127CB6C", VA = "0x127CB6C")]
	public DebugPositionRigAtSceneLoad()
	{
	}
}
[Token(Token = "0x20006B0")]
public class EditorToggleFPS : MonoBehaviour
{
	[Token(Token = "0x60025F6")]
	[Address(RVA = "0x127CB74", Offset = "0x127CB74", VA = "0x127CB74")]
	public EditorToggleFPS()
	{
	}
}
[Token(Token = "0x20006B1")]
public class HeadsetManager
{
	[Token(Token = "0x4001F47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action InputFocusAcquired;

	[Token(Token = "0x4001F48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action InputFocusLost;

	[Token(Token = "0x4001F49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action VrFocusAcquired;

	[Token(Token = "0x4001F4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action VrFocusLost;

	[Token(Token = "0x60025F7")]
	[Address(RVA = "0x127CB7C", Offset = "0x127CB7C", VA = "0x127CB7C")]
	public static void Init()
	{
	}

	[Token(Token = "0x60025F8")]
	[Address(RVA = "0x127CD18", Offset = "0x127CD18", VA = "0x127CD18", Slot = "1")]
	~HeadsetManager()
	{
	}

	[Token(Token = "0x60025F9")]
	[Address(RVA = "0x127CF04", Offset = "0x127CF04", VA = "0x127CF04")]
	public static bool IsHmdPresent()
	{
		return default(bool);
	}

	[Token(Token = "0x60025FA")]
	[Address(RVA = "0x127D100", Offset = "0x127D100", VA = "0x127D100")]
	private static void FocusAcquired()
	{
	}

	[Token(Token = "0x60025FB")]
	[Address(RVA = "0x127D164", Offset = "0x127D164", VA = "0x127D164")]
	private static void FocusLost()
	{
	}

	[Token(Token = "0x60025FC")]
	[Address(RVA = "0x127D1C8", Offset = "0x127D1C8", VA = "0x127D1C8")]
	private static void InputAcquired()
	{
	}

	[Token(Token = "0x60025FD")]
	[Address(RVA = "0x127D22C", Offset = "0x127D22C", VA = "0x127D22C")]
	private static void InputLost()
	{
	}

	[Token(Token = "0x60025FE")]
	[Address(RVA = "0x127D290", Offset = "0x127D290", VA = "0x127D290")]
	public static bool HasVrFocus()
	{
		return default(bool);
	}

	[Token(Token = "0x60025FF")]
	[Address(RVA = "0x127D2E0", Offset = "0x127D2E0", VA = "0x127D2E0")]
	public static void RegisterOnRecenter(Action onRecenter)
	{
	}

	[Token(Token = "0x6002600")]
	[Address(RVA = "0x127D3A8", Offset = "0x127D3A8", VA = "0x127D3A8")]
	public static void UnRegisterOnRecenter(Action onRecenter)
	{
	}

	[Token(Token = "0x6002601")]
	[Address(RVA = "0x127D470", Offset = "0x127D470", VA = "0x127D470")]
	public HeadsetManager()
	{
	}
}
[Token(Token = "0x20006B2")]
public class VrHandInput : MonoBehaviour, IHandInput
{
	[Token(Token = "0x20006B3")]
	private struct InputDeviceStruct
	{
		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private UnityEngine.XR.InputDevice inputDevice;

		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int frameLastCheckedDeviceValidity;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool cachedValidity;

		[Token(Token = "0x6002615")]
		[Address(RVA = "0x127E054", Offset = "0x127E054", VA = "0x127E054")]
		public InputDeviceStruct(XRNode xrNode)
		{
		}

		[Token(Token = "0x6002616")]
		[Address(RVA = "0x127DF84", Offset = "0x127DF84", VA = "0x127DF84")]
		public bool IsDeviceValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6002617")]
		[Address(RVA = "0x127DFD4", Offset = "0x127DFD4", VA = "0x127DFD4")]
		public bool TryGetFeatureValue(InputFeatureUsage<float> usage, out float result)
		{
			return default(bool);
		}

		[Token(Token = "0x6002618")]
		[Address(RVA = "0x127DFDC", Offset = "0x127DFDC", VA = "0x127DFDC")]
		public bool TryGetFeatureValue(InputFeatureUsage<bool> usage, out bool result)
		{
			return default(bool);
		}

		[Token(Token = "0x6002619")]
		[Address(RVA = "0x127E04C", Offset = "0x127E04C", VA = "0x127E04C")]
		public bool TryGetFeatureValue(InputFeatureUsage<Vector2> usage, out Vector2 result)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x20006B4")]
	public class VrAxisInput : IAxisInput
	{
		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VrHandInput m_owner;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputFeatureUsage<Vector2> m_axisUsage;

		[Token(Token = "0x1700060C")]
		private Vector2? IAxisInput.value
		{
			[Token(Token = "0x600261C")]
			[Address(RVA = "0x127E218", Offset = "0x127E218", VA = "0x127E218", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600261A")]
		[Address(RVA = "0x127D9D8", Offset = "0x127D9D8", VA = "0x127D9D8")]
		public VrAxisInput(VrHandInput owner, InputFeatureUsage<Vector2> axisUsage)
		{
		}

		[Token(Token = "0x600261B")]
		[Address(RVA = "0x127E0CC", Offset = "0x127E0CC", VA = "0x127E0CC")]
		public Vector2? GetThumbStickValue()
		{
			return null;
		}
	}

	[Token(Token = "0x20006B5")]
	public class VrButtonInput : IButtonInput
	{
		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private InputFeatureUsage<bool> m_touchUsage;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VrHandInput m_owner;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_latestButtonDown;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool m_maintainValueWhenDeviceLost;

		[Token(Token = "0x1700060D")]
		private bool IButtonInput.Value
		{
			[Token(Token = "0x6002622")]
			[Address(RVA = "0x127E2E8", Offset = "0x127E2E8", VA = "0x127E2E8", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700060E")]
		private bool IButtonInput.Down
		{
			[Token(Token = "0x6002623")]
			[Address(RVA = "0x127E2EC", Offset = "0x127E2EC", VA = "0x127E2EC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700060F")]
		private bool IButtonInput.Up
		{
			[Token(Token = "0x6002624")]
			[Address(RVA = "0x127E300", Offset = "0x127E300", VA = "0x127E300", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600261D")]
		[Address(RVA = "0x127D980", Offset = "0x127D980", VA = "0x127D980")]
		public VrButtonInput(VrHandInput owner, InputFeatureUsage<bool> touchUsage, bool maintainValueWhenDeviceLost)
		{
		}

		[Token(Token = "0x600261E")]
		[Address(RVA = "0x127E22C", Offset = "0x127E22C", VA = "0x127E22C")]
		public bool GetValue()
		{
			return default(bool);
		}

		[Token(Token = "0x600261F")]
		[Address(RVA = "0x127E2B4", Offset = "0x127E2B4", VA = "0x127E2B4")]
		public bool GetValueDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6002620")]
		[Address(RVA = "0x127E2C8", Offset = "0x127E2C8", VA = "0x127E2C8")]
		public bool GetValueUp()
		{
			return default(bool);
		}

		[Token(Token = "0x6002621")]
		[Address(RVA = "0x127DE08", Offset = "0x127DE08", VA = "0x127DE08")]
		public void LateUpdate()
		{
		}
	}

	[Token(Token = "0x20006B6")]
	public class VrTriggerInput : ITriggerInput
	{
		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_latestTriggerValue;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool m_latestTriggerDown;

		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VrHandInput m_owner;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private InputFeatureUsage<float> m_triggerUsage;

		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InputFeatureUsage<bool> m_touchUsage;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_maintainValueWhenDeviceLost;

		[Token(Token = "0x4001F6D")]
		private const float c_triggerEdgeMarginSize = 0.05f;

		[Token(Token = "0x17000610")]
		private float ITriggerInput.Value
		{
			[Token(Token = "0x600262B")]
			[Address(RVA = "0x127E450", Offset = "0x127E450", VA = "0x127E450", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000611")]
		private bool ITriggerInput.Down
		{
			[Token(Token = "0x600262C")]
			[Address(RVA = "0x127E454", Offset = "0x127E454", VA = "0x127E454", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000612")]
		private bool ITriggerInput.Up
		{
			[Token(Token = "0x600262D")]
			[Address(RVA = "0x127E468", Offset = "0x127E468", VA = "0x127E468", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000613")]
		private bool ITriggerInput.Held
		{
			[Token(Token = "0x600262E")]
			[Address(RVA = "0x127E488", Offset = "0x127E488", VA = "0x127E488", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002625")]
		[Address(RVA = "0x127D914", Offset = "0x127D914", VA = "0x127D914")]
		public VrTriggerInput(VrHandInput owner, InputFeatureUsage<float> triggerUsage, InputFeatureUsage<bool> touchUsage, bool maintainValueWhenDeviceLost)
		{
		}

		[Token(Token = "0x6002626")]
		[Address(RVA = "0x127E320", Offset = "0x127E320", VA = "0x127E320")]
		public float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6002627")]
		[Address(RVA = "0x127E398", Offset = "0x127E398", VA = "0x127E398")]
		public bool GetValueDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6002628")]
		[Address(RVA = "0x127E3AC", Offset = "0x127E3AC", VA = "0x127E3AC")]
		public bool GetValueHeld()
		{
			return default(bool);
		}

		[Token(Token = "0x6002629")]
		[Address(RVA = "0x127E430", Offset = "0x127E430", VA = "0x127E430")]
		public bool GetValueUp()
		{
			return default(bool);
		}

		[Token(Token = "0x600262A")]
		[Address(RVA = "0x127DDB4", Offset = "0x127DDB4", VA = "0x127DDB4")]
		public void LateUpdate()
		{
		}
	}

	[Token(Token = "0x4001F4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_analogueActivationThreshold;

	[Token(Token = "0x4001F4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_analogueDeactivationThreshold;

	[Token(Token = "0x4001F4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrHand m_hand;

	[Token(Token = "0x4001F4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_frameAnchorLastMoved;

	[Token(Token = "0x4001F4F")]
	private const float c_staticAnchorTimeout = 0.5f;

	[Token(Token = "0x4001F50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_staticAnchorTimeoutFrames;

	[Token(Token = "0x4001F51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 m_previousHandAnchorLocalPosition;

	[Token(Token = "0x4001F52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion m_previousHandAnchorLocalRotation;

	[Token(Token = "0x4001F53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<VrHand> OnInputValuesUpdated;

	[Token(Token = "0x4001F54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private InputDeviceStruct m_handInputDeviceStruct;

	[Token(Token = "0x4001F55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_hasHandInputDeviceStruct;

	[Token(Token = "0x4001F56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int m_frameLastGainedFocus;

	[Token(Token = "0x4001F57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private IAxisInput m_stickAxis;

	[Token(Token = "0x4001F58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IButtonInput m_primaryButton;

	[Token(Token = "0x4001F59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private IButtonInput m_secondaryButton;

	[Token(Token = "0x4001F5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private IButtonInput m_menuButton;

	[Token(Token = "0x4001F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private IButtonInput m_thumbStickButton;

	[Token(Token = "0x4001F5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ITriggerInput m_gripTrigger;

	[Token(Token = "0x4001F5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ITriggerInput m_mainTrigger;

	[Token(Token = "0x17000602")]
	public bool DeviceAppearsToBeMissing
	{
		[Token(Token = "0x6002602")]
		[Address(RVA = "0x127D478", Offset = "0x127D478", VA = "0x127D478")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000603")]
	private float IHandInput.ThumbTouchValue
	{
		[Token(Token = "0x6002603")]
		[Address(RVA = "0x127D4EC", Offset = "0x127D4EC", VA = "0x127D4EC", Slot = "10")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000604")]
	private bool ShouldLingerInputs
	{
		[Token(Token = "0x6002606")]
		[Address(RVA = "0x127DA48", Offset = "0x127DA48", VA = "0x127DA48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000605")]
	private IAxisInput IHandInput.stickAxis
	{
		[Token(Token = "0x600260D")]
		[Address(RVA = "0x127E080", Offset = "0x127E080", VA = "0x127E080", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000606")]
	private IButtonInput IHandInput.primaryButton
	{
		[Token(Token = "0x600260E")]
		[Address(RVA = "0x127E088", Offset = "0x127E088", VA = "0x127E088", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000607")]
	private IButtonInput IHandInput.secondaryButton
	{
		[Token(Token = "0x600260F")]
		[Address(RVA = "0x127E090", Offset = "0x127E090", VA = "0x127E090", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000608")]
	private IButtonInput IHandInput.menuButton
	{
		[Token(Token = "0x6002610")]
		[Address(RVA = "0x127E098", Offset = "0x127E098", VA = "0x127E098", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000609")]
	private IButtonInput IHandInput.stickButton
	{
		[Token(Token = "0x6002611")]
		[Address(RVA = "0x127E0A0", Offset = "0x127E0A0", VA = "0x127E0A0", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700060A")]
	private ITriggerInput IHandInput.gripTrigger
	{
		[Token(Token = "0x6002612")]
		[Address(RVA = "0x127E0A8", Offset = "0x127E0A8", VA = "0x127E0A8", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700060B")]
	private ITriggerInput IHandInput.mainTrigger
	{
		[Token(Token = "0x6002613")]
		[Address(RVA = "0x127E0B0", Offset = "0x127E0B0", VA = "0x127E0B0", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002604")]
	[Address(RVA = "0x127D610", Offset = "0x127D610", VA = "0x127D610")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002605")]
	[Address(RVA = "0x127DA1C", Offset = "0x127DA1C", VA = "0x127DA1C")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6002607")]
	[Address(RVA = "0x127DA88", Offset = "0x127DA88", VA = "0x127DA88")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002608")]
	[Address(RVA = "0x127D4F0", Offset = "0x127D4F0", VA = "0x127D4F0")]
	public float GetThumbTouchValue()
	{
		return default(float);
	}

	[Token(Token = "0x6002609")]
	[Address(RVA = "0x127DE84", Offset = "0x127DE84", VA = "0x127DE84")]
	private float GetInputValue_Float(InputFeatureUsage<float> triggerUsage, InputFeatureUsage<bool> touchUsage, float defaultValue = 0f)
	{
		return default(float);
	}

	[Token(Token = "0x600260A")]
	[Address(RVA = "0x127DE24", Offset = "0x127DE24", VA = "0x127DE24")]
	private bool GetInputValue_Bool(InputFeatureUsage<bool> usage, bool defaultValue = false)
	{
		return default(bool);
	}

	[Token(Token = "0x600260B")]
	[Address(RVA = "0x127DFE4", Offset = "0x127DFE4", VA = "0x127DFE4")]
	private Vector2 GetInputValue_Vector2(InputFeatureUsage<Vector2> usage, Vector2 defaultValue)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600260C")]
	[Address(RVA = "0x127DEE4", Offset = "0x127DEE4", VA = "0x127DEE4")]
	private InputDeviceStruct GetInputDeviceStruct()
	{
		return default(InputDeviceStruct);
	}

	[Token(Token = "0x6002614")]
	[Address(RVA = "0x127E0B8", Offset = "0x127E0B8", VA = "0x127E0B8")]
	public VrHandInput()
	{
	}
}
[Token(Token = "0x20006B7")]
public class VrRemoteHandInput : MonoBehaviour, IHandInput
{
	[Token(Token = "0x20006B8")]
	private class VrRemoteTriggerInput : ITriggerInput
	{
		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_currentValue;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float m_previousValue;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_latestUpdateFrame;

		[Token(Token = "0x1700061C")]
		public float Value
		{
			[Token(Token = "0x600263B")]
			[Address(RVA = "0x127E6C8", Offset = "0x127E6C8", VA = "0x127E6C8", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600263C")]
			[Address(RVA = "0x127E650", Offset = "0x127E650", VA = "0x127E650")]
			set
			{
			}
		}

		[Token(Token = "0x1700061D")]
		public bool Down
		{
			[Token(Token = "0x600263D")]
			[Address(RVA = "0x127E6D0", Offset = "0x127E6D0", VA = "0x127E6D0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061E")]
		public bool Up
		{
			[Token(Token = "0x600263E")]
			[Address(RVA = "0x127E714", Offset = "0x127E714", VA = "0x127E714", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061F")]
		public bool Held
		{
			[Token(Token = "0x600263F")]
			[Address(RVA = "0x127E758", Offset = "0x127E758", VA = "0x127E758", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600263A")]
		[Address(RVA = "0x127E5B0", Offset = "0x127E5B0", VA = "0x127E5B0")]
		public VrRemoteTriggerInput()
		{
		}
	}

	[Token(Token = "0x20006B9")]
	private class VrRemoteButtonInput : IButtonInput
	{
		[Token(Token = "0x17000620")]
		public bool Value
		{
			[Token(Token = "0x6002640")]
			[Address(RVA = "0x127E768", Offset = "0x127E768", VA = "0x127E768", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000621")]
		public bool Down
		{
			[Token(Token = "0x6002641")]
			[Address(RVA = "0x127E770", Offset = "0x127E770", VA = "0x127E770", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000622")]
		public bool Up
		{
			[Token(Token = "0x6002642")]
			[Address(RVA = "0x127E778", Offset = "0x127E778", VA = "0x127E778", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002643")]
		[Address(RVA = "0x127E5D0", Offset = "0x127E5D0", VA = "0x127E5D0")]
		public VrRemoteButtonInput()
		{
		}
	}

	[Token(Token = "0x20006BA")]
	private class VrRemoteAxisInput : IAxisInput
	{
		[Token(Token = "0x17000623")]
		public Vector2? value
		{
			[Token(Token = "0x6002644")]
			[Address(RVA = "0x127E780", Offset = "0x127E780", VA = "0x127E780", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002645")]
		[Address(RVA = "0x127E5D8", Offset = "0x127E5D8", VA = "0x127E5D8")]
		public VrRemoteAxisInput()
		{
		}
	}

	[Token(Token = "0x4001F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VrRemoteTriggerInput m_gripTrigger;

	[Token(Token = "0x4001F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VrRemoteTriggerInput m_mainTrigger;

	[Token(Token = "0x4001F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private VrRemoteButtonInput m_buttonsImpostor;

	[Token(Token = "0x4001F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private VrRemoteAxisInput m_axisImpostor;

	[Token(Token = "0x4001F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_thumbValue;

	[Token(Token = "0x17000614")]
	public ITriggerInput gripTrigger
	{
		[Token(Token = "0x6002631")]
		[Address(RVA = "0x127E678", Offset = "0x127E678", VA = "0x127E678", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000615")]
	public ITriggerInput mainTrigger
	{
		[Token(Token = "0x6002632")]
		[Address(RVA = "0x127E680", Offset = "0x127E680", VA = "0x127E680", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000616")]
	public float ThumbTouchValue
	{
		[Token(Token = "0x6002633")]
		[Address(RVA = "0x127E688", Offset = "0x127E688", VA = "0x127E688", Slot = "10")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000617")]
	public IButtonInput primaryButton
	{
		[Token(Token = "0x6002634")]
		[Address(RVA = "0x127E698", Offset = "0x127E698", VA = "0x127E698", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000618")]
	public IButtonInput secondaryButton
	{
		[Token(Token = "0x6002635")]
		[Address(RVA = "0x127E6A0", Offset = "0x127E6A0", VA = "0x127E6A0", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000619")]
	public IButtonInput menuButton
	{
		[Token(Token = "0x6002636")]
		[Address(RVA = "0x127E6A8", Offset = "0x127E6A8", VA = "0x127E6A8", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700061A")]
	public IButtonInput stickButton
	{
		[Token(Token = "0x6002637")]
		[Address(RVA = "0x127E6B0", Offset = "0x127E6B0", VA = "0x127E6B0", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700061B")]
	public IAxisInput stickAxis
	{
		[Token(Token = "0x6002638")]
		[Address(RVA = "0x127E6B8", Offset = "0x127E6B8", VA = "0x127E6B8", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600262F")]
	[Address(RVA = "0x127E48C", Offset = "0x127E48C", VA = "0x127E48C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002630")]
	[Address(RVA = "0x127E5E0", Offset = "0x127E5E0", VA = "0x127E5E0")]
	public void SetRemoteSignals(float gripValue, float mainValue, float thumbValue)
	{
	}

	[Token(Token = "0x6002639")]
	[Address(RVA = "0x127E6C0", Offset = "0x127E6C0", VA = "0x127E6C0")]
	public VrRemoteHandInput()
	{
	}
}
[Token(Token = "0x20006BB")]
public static class VrInputSemantics
{
	[Token(Token = "0x6002646")]
	[Address(RVA = "0x126A154", Offset = "0x126A154", VA = "0x126A154")]
	public static bool GetSkippedDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6002647")]
	[Address(RVA = "0x127E78C", Offset = "0x127E78C", VA = "0x127E78C")]
	public static bool GetBothTriggerHeld()
	{
		return default(bool);
	}
}
[Token(Token = "0x20006BC")]
public class VrDebugPanelContainer : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20006BD")]
	private struct TabMapping
	{
		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Button m_tabButton;

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject m_attachedPanelPrefab;
	}

	[Token(Token = "0x4001F76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Min(0f)]
	private float m_foldInAfterTimeUnseen;

	[Token(Token = "0x4001F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform m_panelParent;

	[Token(Token = "0x4001F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_tabsSection;

	[Token(Token = "0x4001F79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject m_foldOutButton;

	[Token(Token = "0x4001F7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float? m_timeLastDisabled;

	[Token(Token = "0x4001F7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TabMapping[] m_tabMappings;

	[Token(Token = "0x4001F7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<GameObject> m_instancedPanels;

	[Token(Token = "0x6002648")]
	[Address(RVA = "0x127E824", Offset = "0x127E824", VA = "0x127E824")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002649")]
	[Address(RVA = "0x127EAA8", Offset = "0x127EAA8", VA = "0x127EAA8")]
	private void DisplayTab(int index)
	{
	}

	[Token(Token = "0x600264A")]
	[Address(RVA = "0x127EB48", Offset = "0x127EB48", VA = "0x127EB48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600264B")]
	[Address(RVA = "0x127EC54", Offset = "0x127EC54", VA = "0x127EC54")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600264C")]
	[Address(RVA = "0x127EBE8", Offset = "0x127EBE8", VA = "0x127EBE8")]
	public void SetFoldedState(bool folded)
	{
	}

	[Token(Token = "0x600264D")]
	[Address(RVA = "0x127ECBC", Offset = "0x127ECBC", VA = "0x127ECBC")]
	public VrDebugPanelContainer()
	{
	}
}
[Token(Token = "0x20006BF")]
public class VrMotionInputDebugPanel : VrMotionInput
{
	[Token(Token = "0x4001F81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("We'll attach the panel to this.")]
	[SerializeField]
	private Transform m_attachmentPoint;

	[Token(Token = "0x4001F82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject m_panelPrefab;

	[Token(Token = "0x4001F83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 m_attachmentInitLocalPos;

	[Token(Token = "0x4001F84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion m_attachmentInitLocalRot;

	[Token(Token = "0x17000624")]
	protected override bool AllowedToRun
	{
		[Token(Token = "0x6002650")]
		[Address(RVA = "0x127ECEC", Offset = "0x127ECEC", VA = "0x127ECEC", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002651")]
	[Address(RVA = "0x127EDDC", Offset = "0x127EDDC", VA = "0x127EDDC", Slot = "7")]
	public override void Initialize(VrHand hand)
	{
	}

	[Token(Token = "0x6002652")]
	[Address(RVA = "0x127EF14", Offset = "0x127EF14", VA = "0x127EF14", Slot = "9")]
	protected override void StopProcessing()
	{
	}

	[Token(Token = "0x6002653")]
	[Address(RVA = "0x127EFA8", Offset = "0x127EFA8", VA = "0x127EFA8", Slot = "14")]
	protected override void LateProcess()
	{
	}

	[Token(Token = "0x6002654")]
	[Address(RVA = "0x127F1DC", Offset = "0x127F1DC", VA = "0x127F1DC")]
	public VrMotionInputDebugPanel()
	{
	}
}
[Token(Token = "0x20006C0")]
public class GestureDispatcher : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20006C1")]
	private struct GestureDescription
	{
		[Serializable]
		[Token(Token = "0x20006C2")]
		public struct GestureStep
		{
			[Token(Token = "0x4001F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GestureMarker[] markers;

			[Token(Token = "0x4001F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float holdTime;
		}

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GestureStep[] steps;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float maximumIntervalTime;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float cooldown;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent completionEvent;
	}

	[Token(Token = "0x20006C3")]
	private class Gesture
	{
		[Token(Token = "0x20006C4")]
		private enum GestureState
		{
			[Token(Token = "0x4001F97")]
			Inactive,
			[Token(Token = "0x4001F98")]
			Tracking,
			[Token(Token = "0x4001F99")]
			Cooldown
		}

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GestureDescription m_description;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_currentStepIndex;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_currentStepTrackingTime;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_cooldownTime;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private GestureState m_state;

		[Token(Token = "0x17000625")]
		public bool IsTracking
		{
			[Token(Token = "0x6002659")]
			[Address(RVA = "0x127F608", Offset = "0x127F608", VA = "0x127F608")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600265A")]
		[Address(RVA = "0x127F348", Offset = "0x127F348", VA = "0x127F348")]
		public Gesture(GestureDescription desc)
		{
		}

		[Token(Token = "0x600265B")]
		[Address(RVA = "0x127F620", Offset = "0x127F620", VA = "0x127F620")]
		private void SetState(GestureState newState)
		{
		}

		[Token(Token = "0x600265C")]
		[Address(RVA = "0x127F598", Offset = "0x127F598", VA = "0x127F598")]
		public void Tick()
		{
		}

		[Token(Token = "0x600265D")]
		[Address(RVA = "0x127F648", Offset = "0x127F648", VA = "0x127F648")]
		private void TickInactive()
		{
		}

		[Token(Token = "0x600265E")]
		[Address(RVA = "0x127F6E0", Offset = "0x127F6E0", VA = "0x127F6E0")]
		private void TickTracking()
		{
		}

		[Token(Token = "0x600265F")]
		[Address(RVA = "0x127F944", Offset = "0x127F944", VA = "0x127F944")]
		private void TickCooldown()
		{
		}
	}

	[Token(Token = "0x4001F85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Allow more than one gesture to progress at any one time")]
	[SerializeField]
	private bool m_allowMultitasking;

	[Token(Token = "0x4001F86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GestureDescription[] m_descriptions;

	[Token(Token = "0x4001F87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HashSet<Gesture> m_gestures;

	[Token(Token = "0x4001F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Gesture m_trackedGesture;

	[Token(Token = "0x4001F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<string> OnGesturePerformed;

	[Token(Token = "0x6002655")]
	[Address(RVA = "0x127F1E4", Offset = "0x127F1E4", VA = "0x127F1E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002656")]
	[Address(RVA = "0x127F384", Offset = "0x127F384", VA = "0x127F384")]
	private void Start()
	{
	}

	[Token(Token = "0x6002657")]
	[Address(RVA = "0x127F3F8", Offset = "0x127F3F8", VA = "0x127F3F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6002658")]
	[Address(RVA = "0x127F618", Offset = "0x127F618", VA = "0x127F618")]
	public GestureDispatcher()
	{
	}
}
[Token(Token = "0x20006C5")]
public abstract class GestureMarker : CachedMonoBehaviour
{
	[Token(Token = "0x20006C6")]
	private enum RequiredHands
	{
		[Token(Token = "0x4001FA9")]
		Left,
		[Token(Token = "0x4001FAA")]
		Right,
		[Token(Token = "0x4001FAB")]
		Primary,
		[Token(Token = "0x4001FAC")]
		Secondary,
		[Token(Token = "0x4001FAD")]
		Both,
		[Token(Token = "0x4001FAE")]
		Either
	}

	[Token(Token = "0x20006C7")]
	private enum ActivationButton
	{
		[Token(Token = "0x4001FB0")]
		Primary,
		[Token(Token = "0x4001FB1")]
		Secondary
	}

	[Token(Token = "0x4001F9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("Specify whether this marker is triggered by the left hand only, right hand only, or both hands at the same time.")]
	private RequiredHands m_requiredHand;

	[Token(Token = "0x4001F9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Specify which controller button should be responsible for activating this gesture")]
	[SerializeField]
	private ActivationButton m_activationButton;

	[Token(Token = "0x4001F9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("If enabled, only trigger if the hand is empty (more specifically, if it's in the idle state).")]
	[SerializeField]
	private bool m_requiresEmptyHand;

	[Token(Token = "0x4001F9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, this marker will track the position of the head.")]
	private bool m_trackHeadPosition;

	[Token(Token = "0x4001F9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	[UnityEngine.Tooltip("If enabled, this marker will track the pitch of the head. Only takes effect when we're also tracking the head's position.")]
	[SerializeField]
	private bool m_trackHeadPitch;

	[Token(Token = "0x4001F9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	[UnityEngine.Tooltip("If enabled, this marker will track the yaw of the head. Only takes effect when we're also tracking the head's position.")]
	[SerializeField]
	private bool m_trackHeadYaw;

	[Token(Token = "0x4001FA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("If enabled, this marker will track the roll of the head. Only takes effect when we're also tracking the head's position.")]
	[SerializeField]
	private bool m_trackHeadRoll;

	[Token(Token = "0x4001FA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_headRelativePosition;

	[Token(Token = "0x4001FA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion m_headRelativeRotation;

	[Token(Token = "0x4001FA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool m_triggered;

	[Token(Token = "0x4001FA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<VrHand> m_triggeredHands;

	[Token(Token = "0x4001FA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool m_requiredButtonPressed;

	[Token(Token = "0x4001FA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<VrHand> m_requiredHandObjects;

	[Token(Token = "0x4001FA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_updatedThisFrame;

	[Token(Token = "0x17000626")]
	public bool IsTriggered
	{
		[Token(Token = "0x6002660")]
		[Address(RVA = "0x127F97C", Offset = "0x127F97C", VA = "0x127F97C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000627")]
	public bool IsButtonPressed
	{
		[Token(Token = "0x6002661")]
		[Address(RVA = "0x127F9A0", Offset = "0x127F9A0", VA = "0x127F9A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002662")]
	[Address(RVA = "0x12801C8", Offset = "0x12801C8", VA = "0x12801C8", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6002663")]
	[Address(RVA = "0x1280594", Offset = "0x1280594", VA = "0x1280594")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002664")]
	[Address(RVA = "0x127F9C4", Offset = "0x127F9C4", VA = "0x127F9C4")]
	private void UpdateState()
	{
	}

	[Token(Token = "0x6002665")]
	public abstract bool HandIsInRange(VrHand hand);

	[Token(Token = "0x6002666")]
	[Address(RVA = "0x128059C", Offset = "0x128059C", VA = "0x128059C")]
	protected GestureMarker()
	{
	}
}
[Token(Token = "0x20006C8")]
public class HandScanManager : MonoBehaviour
{
	[Token(Token = "0x20006C9")]
	public struct CreateRaycastCommand : IJob
	{
		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[ReadOnly]
		public float3 rightHandPosition;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[ReadOnly]
		public float3 leftHandPosition;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[ReadOnly]
		public int layer;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[ReadOnly]
		public int commandsSize;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[ReadOnly]
		public NativeArray<RaycastHit> hits;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NativeArray<RaycastCommand> commands;

		[Token(Token = "0x6002674")]
		[Address(RVA = "0x128157C", Offset = "0x128157C", VA = "0x128157C", Slot = "4")]
		public void Execute()
		{
		}
	}

	[Token(Token = "0x4001FB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Scan volume setup (mouse over labels for info)")]
	[UnityEngine.Tooltip("The radius of the scan volume at the start of the range (near the hand).")]
	private float m_scanVolumeBaseRadius;

	[Token(Token = "0x4001FB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[UnityEngine.Tooltip("The radius of the scan volume at the end of the range (far away from the hand).")]
	private float m_scanVolumeCapRadius;

	[Token(Token = "0x4001FB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("The distance covered by the scan volume. This is how far away the player can grab items from.")]
	[SerializeField]
	private float m_scanVolumeDistance;

	[Token(Token = "0x4001FB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool m_scanEnabled;

	[Token(Token = "0x4001FB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_timeBetweenChecks;

	[Token(Token = "0x4001FB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_timer;

	[Token(Token = "0x4001FB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private VrHand m_rightHand;

	[Token(Token = "0x4001FB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<WorldInteraction> m_rightWorldInteraction;

	[Token(Token = "0x4001FBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<WorldInteraction> m_LeftWorldInteraction;

	[Token(Token = "0x4001FBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_checkedRightHand;

	[Token(Token = "0x4001FBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool m_checkedLeftHand;

	[Token(Token = "0x4001FBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private VrHand m_leftHand;

	[Token(Token = "0x4001FBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private NativeArray<RaycastHit>[] m_sphereCastResults;

	[Token(Token = "0x4001FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private NativeArray<RaycastHit>[] m_rayCastResults;

	[Token(Token = "0x4001FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private NativeArray<SpherecastCommand> m_sphereCommands;

	[Token(Token = "0x4001FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private NativeArray<RaycastCommand> m_raycastCommands;

	[Token(Token = "0x4001FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private JobHandle m_handle;

	[Token(Token = "0x4001FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int m_resultIndex;

	[Token(Token = "0x4001FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int m_lastResultIndex;

	[Token(Token = "0x4001FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private CreateRaycastCommand jobData;

	[Token(Token = "0x4001FC6")]
	private const int m_resultsCount = 4;

	[Token(Token = "0x4001FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool m_setHands;

	[Token(Token = "0x17000628")]
	public bool ScanEnabled
	{
		[Token(Token = "0x6002667")]
		[Address(RVA = "0x12805A4", Offset = "0x12805A4", VA = "0x12805A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002668")]
		[Address(RVA = "0x12805AC", Offset = "0x12805AC", VA = "0x12805AC")]
		set
		{
		}
	}

	[Token(Token = "0x6002669")]
	[Address(RVA = "0x12805B8", Offset = "0x12805B8", VA = "0x12805B8")]
	private void Start()
	{
	}

	[Token(Token = "0x600266A")]
	[Address(RVA = "0x1280780", Offset = "0x1280780", VA = "0x1280780")]
	public void SetHands(VrHand rightHand, VrHand leftHand)
	{
	}

	[Token(Token = "0x600266B")]
	[Address(RVA = "0x12807BC", Offset = "0x12807BC", VA = "0x12807BC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600266C")]
	[Address(RVA = "0x12807C0", Offset = "0x12807C0", VA = "0x12807C0")]
	public void CleanUp()
	{
	}

	[Token(Token = "0x600266D")]
	[Address(RVA = "0x12808BC", Offset = "0x12808BC", VA = "0x12808BC")]
	private void Update()
	{
	}

	[Token(Token = "0x600266E")]
	[Address(RVA = "0x12805BC", Offset = "0x12805BC", VA = "0x12805BC")]
	private void InitSphereCast()
	{
	}

	[Token(Token = "0x600266F")]
	[Address(RVA = "0x12809F8", Offset = "0x12809F8", VA = "0x12809F8")]
	private JobHandle QueryHandScan()
	{
		return default(JobHandle);
	}

	[Token(Token = "0x6002670")]
	[Address(RVA = "0x128100C", Offset = "0x128100C", VA = "0x128100C")]
	public IEnumerable<WorldInteraction> GetInteraction(VrHandController controller)
	{
		return null;
	}

	[Token(Token = "0x6002671")]
	[Address(RVA = "0x128119C", Offset = "0x128119C", VA = "0x128119C")]
	private WorldInteraction GetInteractionByIndex(int index)
	{
		return null;
	}

	[Token(Token = "0x6002672")]
	[Address(RVA = "0x12808C0", Offset = "0x12808C0", VA = "0x12808C0")]
	public void HandsScan()
	{
	}

	[Token(Token = "0x6002673")]
	[Address(RVA = "0x1281464", Offset = "0x1281464", VA = "0x1281464")]
	public HandScanManager()
	{
	}
}
[Token(Token = "0x20006CA")]
public class HandScanVolume : CachedMonoBehaviour
{
	[Token(Token = "0x20006CB")]
	[CompilerGenerated]
	private sealed class <CollateNearbyTargets>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandScanVolume <>4__this;

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <counter>5__2;

		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<WorldInteraction> <buffer0>5__3;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<WorldInteraction> <buffer1>5__4;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<WorldInteraction> <tempList>5__5;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 <optimizedPosition>5__6;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<WorldInteraction>.Enumerator <>7__wrap6;

		[Token(Token = "0x17000629")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002686")]
			[Address(RVA = "0x1282A84", Offset = "0x1282A84", VA = "0x1282A84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700062A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002688")]
			[Address(RVA = "0x1282ACC", Offset = "0x1282ACC", VA = "0x1282ACC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002682")]
		[Address(RVA = "0x1281CFC", Offset = "0x1281CFC", VA = "0x1281CFC")]
		[DebuggerHidden]
		public <CollateNearbyTargets>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6002683")]
		[Address(RVA = "0x1282330", Offset = "0x1282330", VA = "0x1282330", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002684")]
		[Address(RVA = "0x128234C", Offset = "0x128234C", VA = "0x128234C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002685")]
		[Address(RVA = "0x1282A34", Offset = "0x1282A34", VA = "0x1282A34")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6002687")]
		[Address(RVA = "0x1282A8C", Offset = "0x1282A8C", VA = "0x1282A8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Scan volume setup (mouse over labels for info)")]
	[UnityEngine.Tooltip("The radius of the scan volume at the start of the range (near the hand).")]
	[SerializeField]
	private float m_scanVolumeBaseRadius;

	[Token(Token = "0x4001FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("The radius of the scan volume at the end of the range (far away from the hand).")]
	[SerializeField]
	private float m_scanVolumeCapRadius;

	[Token(Token = "0x4001FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("The distance covered by the scan volume. This is how far away the player can grab items from.")]
	private float m_scanVolumeDistance;

	[Token(Token = "0x4001FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[UnityEngine.Tooltip("The forwards offset for the scan volume. This moves the entire scan volume forwards and backwards.")]
	private float m_scanVolumeOffset;

	[Token(Token = "0x4001FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("The position along the scan volume where we turn the cone into a cylinder.")]
	[SerializeField]
	[Range(0.05f, 0.95f)]
	private float m_coneCrimpPosition;

	[Token(Token = "0x4001FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[UnityEngine.Tooltip("Consider the distance of interactions directly ahead of where we're pointing to be this much closer than they actually are. This falls off linearly towards the edges of the volume.")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_pointBiasFactor;

	[Token(Token = "0x4001FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject m_debugLineObject;

	[Token(Token = "0x4001FD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private VrHand m_hand;

	[Token(Token = "0x4001FD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 m_scanVolumeOffsetVector;

	[Token(Token = "0x4001FD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SortedList<float, WorldInteraction> s_interactionsInVolumeBuffer;

	[Token(Token = "0x4001FD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 m_mostRecentTransformPosition;

	[Token(Token = "0x4001FD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int m_mostRecentTransformPositionFrame;

	[Token(Token = "0x4001FDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<WorldInteraction> m_worldInteractions;

	[Token(Token = "0x4001FDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<WorldInteraction> m_inRangeInteractions;

	[Token(Token = "0x4001FDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<WorldInteraction> m_interactionCandidates;

	[Token(Token = "0x6002675")]
	[Address(RVA = "0x12817D8", Offset = "0x12817D8", VA = "0x12817D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002676")]
	[Address(RVA = "0x128183C", Offset = "0x128183C", VA = "0x128183C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002677")]
	[Address(RVA = "0x12818D0", Offset = "0x12818D0", VA = "0x12818D0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002678")]
	[Address(RVA = "0x12818D8", Offset = "0x12818D8", VA = "0x12818D8")]
	public void AssociateHand(VrHand hand)
	{
	}

	[Token(Token = "0x6002679")]
	[Address(RVA = "0x12818E0", Offset = "0x12818E0", VA = "0x12818E0")]
	private bool IsTransformWithinVolume(Transform objectTransform, out float normalizedDistanceFromEdge)
	{
		return default(bool);
	}

	[Token(Token = "0x600267A")]
	[Address(RVA = "0x1281BB4", Offset = "0x1281BB4", VA = "0x1281BB4")]
	private Vector3 GetPositionOptimized()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600267B")]
	[Address(RVA = "0x1281C10", Offset = "0x1281C10", VA = "0x1281C10")]
	private bool IsTransformWithinRange(Transform objectTransform)
	{
		return default(bool);
	}

	[Token(Token = "0x600267C")]
	[Address(RVA = "0x1281C8C", Offset = "0x1281C8C", VA = "0x1281C8C")]
	private bool IsTransformWithinRange(Transform objectTransform, Vector3 referencePosition)
	{
		return default(bool);
	}

	[Token(Token = "0x600267D")]
	[Address(RVA = "0x128185C", Offset = "0x128185C", VA = "0x128185C")]
	[IteratorStateMachine(typeof(<CollateNearbyTargets>d__23))]
	private IEnumerator CollateNearbyTargets()
	{
		return null;
	}

	[Token(Token = "0x600267E")]
	[Address(RVA = "0x1281D24", Offset = "0x1281D24", VA = "0x1281D24")]
	public void UpdateInRangeInteractions()
	{
	}

	[Token(Token = "0x600267F")]
	[Address(RVA = "0x1281DB0", Offset = "0x1281DB0", VA = "0x1281DB0")]
	public IEnumerable<WorldInteraction> InteractionsWithinVolume(bool checkDistanceOnly = false)
	{
		return null;
	}

	[Token(Token = "0x6002680")]
	[Address(RVA = "0x12821A8", Offset = "0x12821A8", VA = "0x12821A8")]
	public HandScanVolume()
	{
	}
}
[Token(Token = "0x20006CC")]
public class HandTrigger : StandardHapticsBase
{
	[Token(Token = "0x4001FE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEvent TriggerEnter;

	[Token(Token = "0x6002689")]
	[Address(RVA = "0x1282AD4", Offset = "0x1282AD4", VA = "0x1282AD4", Slot = "5")]
	protected override void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600268A")]
	[Address(RVA = "0x1282C60", Offset = "0x1282C60", VA = "0x1282C60")]
	public HandTrigger()
	{
	}
}
[Token(Token = "0x20006CD")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(SphereCollider))]
public class PlayerHarness : CachedMonoBehaviour
{
	[Token(Token = "0x4001FE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("When the harness is mounted, move this quickly from the player's initial position on the harness to the target position. Set to 0 for an instant transition.")]
	[SerializeField]
	[Min(0f)]
	private float m_easeInSpeed;

	[Token(Token = "0x4001FE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 m_standardLocalPosition;

	[Token(Token = "0x1700062B")]
	public bool IsMountedByLocalPlayer
	{
		[Token(Token = "0x600268F")]
		[Address(RVA = "0x128306C", Offset = "0x128306C", VA = "0x128306C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600268B")]
	[Address(RVA = "0x1282C68", Offset = "0x1282C68", VA = "0x1282C68")]
	private void Awake()
	{
	}

	[Token(Token = "0x600268C")]
	[Address(RVA = "0x1282C98", Offset = "0x1282C98", VA = "0x1282C98")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600268D")]
	[Address(RVA = "0x1282D34", Offset = "0x1282D34", VA = "0x1282D34")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600268E")]
	[Address(RVA = "0x1282EE8", Offset = "0x1282EE8", VA = "0x1282EE8")]
	private void Update()
	{
	}

	[Token(Token = "0x6002690")]
	[Address(RVA = "0x128310C", Offset = "0x128310C", VA = "0x128310C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6002691")]
	[Address(RVA = "0x12831F0", Offset = "0x12831F0", VA = "0x12831F0")]
	public PlayerHarness()
	{
	}
}
[Token(Token = "0x20006CE")]
public class VrLocomotionInputDispatcher : MonoBehaviour
{
	[Token(Token = "0x20006CF")]
	private enum TiltDirection
	{
		[Token(Token = "0x4001FEF")]
		None,
		[Token(Token = "0x4001FF0")]
		Up,
		[Token(Token = "0x4001FF1")]
		Left,
		[Token(Token = "0x4001FF2")]
		Down,
		[Token(Token = "0x4001FF3")]
		Right
	}

	[Token(Token = "0x20006D0")]
	public enum RotateRequest
	{
		[Token(Token = "0x4001FF5")]
		None,
		[Token(Token = "0x4001FF6")]
		StepLeft,
		[Token(Token = "0x4001FF7")]
		StepRight,
		[Token(Token = "0x4001FF8")]
		Turn180
	}

	[Token(Token = "0x20006D1")]
	public enum CrouchRequest
	{
		[Token(Token = "0x4001FFA")]
		None,
		[Token(Token = "0x4001FFB")]
		CrouchDown,
		[Token(Token = "0x4001FFC")]
		StandUp,
		[Token(Token = "0x4001FFD")]
		ToggleCrouch
	}

	[Token(Token = "0x4001FE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Range(0f, 1f)]
	[UnityEngine.Tooltip("Only trigger once the stick is pushed this percentage away from the centre. Applied on top of the global input deadzone.")]
	private float m_stickTriggerThreshold;

	[Token(Token = "0x4001FEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool m_previouslyHadHybridCrouchSignal;

	[Token(Token = "0x4001FEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_hybridCrouchRequestStartTime;

	[Token(Token = "0x4001FEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool m_hybridCrouchRequestComplete;

	[Token(Token = "0x4001FED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool m_zoomSelectionMode;

	[Token(Token = "0x1700062C")]
	public float StickTriggerThreshold
	{
		[Token(Token = "0x6002692")]
		[Address(RVA = "0x1283200", Offset = "0x1283200", VA = "0x1283200")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6002693")]
	[Address(RVA = "0x1283208", Offset = "0x1283208", VA = "0x1283208")]
	private TiltDirection GetStickTilt(Vector2? stickValue)
	{
		return default(TiltDirection);
	}

	[Token(Token = "0x6002694")]
	[Address(RVA = "0x128328C", Offset = "0x128328C", VA = "0x128328C")]
	private TiltDirection GetStickTilt(Vector2 stickValue)
	{
		return default(TiltDirection);
	}

	[Token(Token = "0x6002695")]
	[Address(RVA = "0x128339C", Offset = "0x128339C", VA = "0x128339C")]
	public Vector2? GetFreeWalkingInput()
	{
		return null;
	}

	[Token(Token = "0x6002696")]
	[Address(RVA = "0x1283404", Offset = "0x1283404", VA = "0x1283404")]
	public bool GetSprintToggleInput()
	{
		return default(bool);
	}

	[Token(Token = "0x6002697")]
	[Address(RVA = "0x1283464", Offset = "0x1283464", VA = "0x1283464")]
	public RotateRequest GetRotateRequest()
	{
		return default(RotateRequest);
	}

	[Token(Token = "0x6002698")]
	[Address(RVA = "0x1283500", Offset = "0x1283500", VA = "0x1283500")]
	public VrLocomotionInputDispatcher()
	{
	}
}
[Token(Token = "0x20006D2")]
public class VrMotionInputFreeLook : VrMotionInputLocomotion
{
	[Token(Token = "0x4001FFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("The amount of time we should blind the player for after they perform a digital movement. The player can optionally disable this.")]
	private float m_blinkDuration;

	[Token(Token = "0x4001FFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float? m_mostRecentBlinkStartTime;

	[Token(Token = "0x4002000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[UnityEngine.Tooltip("After a look action completes, the player must wait for at least this many seconds to pass before they can do another look action.")]
	[Min(0f)]
	[SerializeField]
	private float m_lookIntervalDuration;

	[Token(Token = "0x4002001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Whether to allow crouching. If disabled, tilting will auto-calibrate the user's height instead.")]
	[SerializeField]
	private bool m_crouchingEnabled;

	[Token(Token = "0x4002002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[UnityEngine.Tooltip("Scale for how quickly the player turns when using smoothed digital rotation compared to how quickly they would move when using analogue rotation.")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_smoothSnapTurnSpeedScale;

	[Token(Token = "0x4002003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_applicationTimer;

	[Token(Token = "0x4002004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool m_applicationIsTurn;

	[Token(Token = "0x4002005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	private bool m_applicationRequiresVignette;

	[Token(Token = "0x4002006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float m_intervalTimer;

	[Token(Token = "0x6002699")]
	[Address(RVA = "0x1283514", Offset = "0x1283514", VA = "0x1283514")]
	private void Awake()
	{
	}

	[Token(Token = "0x600269A")]
	[Address(RVA = "0x1283630", Offset = "0x1283630", VA = "0x1283630")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600269B")]
	[Address(RVA = "0x128374C", Offset = "0x128374C", VA = "0x128374C")]
	private void OnPlayerActiveStateChanged(bool active)
	{
	}

	[Token(Token = "0x600269C")]
	[Address(RVA = "0x1283750", Offset = "0x1283750", VA = "0x1283750", Slot = "8")]
	protected override void StartProcessing()
	{
	}

	[Token(Token = "0x600269D")]
	[Address(RVA = "0x1283768", Offset = "0x1283768", VA = "0x1283768", Slot = "9")]
	protected override void StopProcessing()
	{
	}

	[Token(Token = "0x600269E")]
	[Address(RVA = "0x12837F8", Offset = "0x12837F8", VA = "0x12837F8", Slot = "10")]
	protected override void Process()
	{
	}

	[Token(Token = "0x600269F")]
	[Address(RVA = "0x1283D08", Offset = "0x1283D08", VA = "0x1283D08")]
	private bool PerformCrouchRequest(VrLocomotionInputDispatcher.CrouchRequest crouchRequest)
	{
		return default(bool);
	}

	[Token(Token = "0x60026A0")]
	[Address(RVA = "0x1283F6C", Offset = "0x1283F6C", VA = "0x1283F6C", Slot = "14")]
	protected override void LateProcess()
	{
	}

	[Token(Token = "0x60026A1")]
	[Address(RVA = "0x1284118", Offset = "0x1284118", VA = "0x1284118")]
	public VrMotionInputFreeLook()
	{
	}
}
[Token(Token = "0x20006D3")]
public class VrMotionInputFreeWalking : VrMotionInputLocomotion
{
	[Token(Token = "0x4002007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Min(0.01f)]
	[UnityEngine.Tooltip("Standard/base speed for walking in metres per second.")]
	private float m_standardSpeed;

	[Token(Token = "0x4002008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[UnityEngine.Tooltip("When sprinting, we will multiply the standard speed by this value to get the sprinting speed.")]
	[SerializeField]
	[Min(1f)]
	private float m_sprintSpeedMultiplier;

	[Token(Token = "0x4002009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("How long it takes to completely drain the stamina bar from full. This is how long you can sprint for in a single go.")]
	[SerializeField]
	[Min(0f)]
	private float m_sprintDepletionTime;

	[Token(Token = "0x400200A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[UnityEngine.Tooltip("How long it takes to completely regenerate the stamina bar from empty. This is the cooldown after sprinting for as long as possible. The actual time taken will scale with how long you spent sprinting, e.g. if you deplete half the bar, it will take half this amount of time to completely refill.")]
	[SerializeField]
	[Min(0f)]
	private float m_sprintRegenerationTime;

	[Token(Token = "0x400200B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Range(0f, 1f)]
	[UnityEngine.Tooltip("End the sprint if walk modifiers sink below this level. The lower the number, the higher the tolerance. 0 disables completely, 1 requires the player to stay at full speed at all times (not recommended).")]
	[SerializeField]
	private float m_sprintWalkRatioMinimumTolerance;

	[Token(Token = "0x400200C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float m_currentSpeed;

	[Token(Token = "0x400200D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float m_currentSpeedWalkRatio;

	[Token(Token = "0x400200E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool m_sprintActive;

	[Token(Token = "0x400200F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float m_sprintRemainingStamina;

	[Token(Token = "0x4002010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float m_lastSprintRemainingStamina;

	[Token(Token = "0x4002011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool m_regenerationActive;

	[Token(Token = "0x4002012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool m_previouslyMoving;

	[Token(Token = "0x4002013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
	private bool m_grounded;

	[Token(Token = "0x4002014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector2 m_stickInput;

	[Token(Token = "0x4002015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action StaminaRegenerationStarted;

	[Token(Token = "0x4002016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action StaminaRegenerationFinished;

	[Token(Token = "0x1700062D")]
	protected override bool AllowedToRun
	{
		[Token(Token = "0x60026A2")]
		[Address(RVA = "0x1284144", Offset = "0x1284144", VA = "0x1284144", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700062E")]
	private Transform FreeWalkCastTransform
	{
		[Token(Token = "0x60026A3")]
		[Address(RVA = "0x1284340", Offset = "0x1284340", VA = "0x1284340")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60026A4")]
	[Address(RVA = "0x12843FC", Offset = "0x12843FC", VA = "0x12843FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60026A5")]
	[Address(RVA = "0x1284410", Offset = "0x1284410", VA = "0x1284410")]
	private void Start()
	{
	}

	[Token(Token = "0x60026A6")]
	[Address(RVA = "0x1284528", Offset = "0x1284528", VA = "0x1284528", Slot = "8")]
	protected override void StartProcessing()
	{
	}

	[Token(Token = "0x60026A7")]
	[Address(RVA = "0x1284534", Offset = "0x1284534", VA = "0x1284534", Slot = "9")]
	protected override void StopProcessing()
	{
	}

	[Token(Token = "0x60026A8")]
	[Address(RVA = "0x1284548", Offset = "0x1284548", VA = "0x1284548", Slot = "10")]
	protected override void Process()
	{
	}

	[Token(Token = "0x60026A9")]
	[Address(RVA = "0x1284860", Offset = "0x1284860", VA = "0x1284860", Slot = "11")]
	protected override void Idle()
	{
	}

	[Token(Token = "0x60026AA")]
	[Address(RVA = "0x12849B4", Offset = "0x12849B4", VA = "0x12849B4", Slot = "12")]
	protected override void FixedProcess()
	{
	}

	[Token(Token = "0x60026AB")]
	[Address(RVA = "0x12846A8", Offset = "0x12846A8", VA = "0x12846A8")]
	private void UpdateSpeed(bool currentlyGrounded)
	{
	}

	[Token(Token = "0x60026AC")]
	[Address(RVA = "0x1284DC8", Offset = "0x1284DC8", VA = "0x1284DC8")]
	private void ProcessSprintState()
	{
	}

	[Token(Token = "0x60026AD")]
	[Address(RVA = "0x1284880", Offset = "0x1284880", VA = "0x1284880")]
	private void TickSprintStaminaBar(float deltaTime)
	{
	}

	[Token(Token = "0x60026AE")]
	[Address(RVA = "0x1284AC8", Offset = "0x1284AC8", VA = "0x1284AC8")]
	private Vector3 CalculateInputMovementDirection(Vector2 stickAxis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60026AF")]
	[Address(RVA = "0x12849BC", Offset = "0x12849BC", VA = "0x12849BC")]
	private void Move()
	{
	}

	[Token(Token = "0x60026B0")]
	[Address(RVA = "0x1284E40", Offset = "0x1284E40", VA = "0x1284E40")]
	public VrMotionInputFreeWalking()
	{
	}
}
[Token(Token = "0x20006D4")]
public abstract class VrMotionInputLocomotion : VrMotionInput
{
	[Token(Token = "0x4002017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private VrLocomotionInputDispatcher m_locomotionInputDispatcher;

	[Token(Token = "0x1700062F")]
	protected VrLocomotionInputDispatcher InputDispatcher
	{
		[Token(Token = "0x60026B1")]
		[Address(RVA = "0x1284E60", Offset = "0x1284E60", VA = "0x1284E60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000630")]
	protected override bool AllowedToRun
	{
		[Token(Token = "0x60026B2")]
		[Address(RVA = "0x1284228", Offset = "0x1284228", VA = "0x1284228", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60026B3")]
	[Address(RVA = "0x1284EB0", Offset = "0x1284EB0", VA = "0x1284EB0")]
	public void SetInputDispatcher(VrLocomotionInputDispatcher inputDispatcher)
	{
	}

	[Token(Token = "0x60026B4")]
	[Address(RVA = "0x128413C", Offset = "0x128413C", VA = "0x128413C")]
	protected VrMotionInputLocomotion()
	{
	}
}
[Token(Token = "0x20006D5")]
public class VrMotionInputNoClip : VrMotionInput
{
	[Token(Token = "0x4002018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float m_flySpeed;

	[Token(Token = "0x17000631")]
	protected override bool AllowedToRun
	{
		[Token(Token = "0x60026B5")]
		[Address(RVA = "0x1284EC0", Offset = "0x1284EC0", VA = "0x1284EC0", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60026B6")]
	[Address(RVA = "0x1284F00", Offset = "0x1284F00", VA = "0x1284F00", Slot = "8")]
	protected override void StartProcessing()
	{
	}

	[Token(Token = "0x60026B7")]
	[Address(RVA = "0x1284F58", Offset = "0x1284F58", VA = "0x1284F58", Slot = "9")]
	protected override void StopProcessing()
	{
	}

	[Token(Token = "0x60026B8")]
	[Address(RVA = "0x1284FB8", Offset = "0x1284FB8", VA = "0x1284FB8", Slot = "10")]
	protected override void Process()
	{
	}

	[Token(Token = "0x60026B9")]
	[Address(RVA = "0x1285270", Offset = "0x1285270", VA = "0x1285270")]
	public VrMotionInputNoClip()
	{
	}
}
[Token(Token = "0x20006D6")]
[RequireComponent(typeof(GuidComponent))]
public abstract class AbstractTriggeredMechanism : TrackedPersistable
{
	[Token(Token = "0x20006D7")]
	public enum Trigger
	{
		[Token(Token = "0x400202A")]
		None,
		[Token(Token = "0x400202B")]
		Low,
		[Token(Token = "0x400202C")]
		High
	}

	[Token(Token = "0x4002019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Identifier m_ID;

	[Token(Token = "0x400201A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("If set to anything other than None, this mechanism will become frozen in place once it hits the selected trigger.")]
	[FormerlySerializedAs("m_lockDownWhenTriggerHit")]
	private Trigger m_lockWhenTriggerHit;

	[Token(Token = "0x400201B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent OnMechanismLowThreshold;

	[Token(Token = "0x400201C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEvent OnMechanismHighThreshold;

	[Token(Token = "0x400201D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEvent OnMechanismLocked;

	[Token(Token = "0x400201E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent OnMechanismUnLocked;

	[Token(Token = "0x400201F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action<Identifier> OnAnyMechanismLowThreshold;

	[Token(Token = "0x4002020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action<Identifier> OnAnyMechanismHighThreshold;

	[Token(Token = "0x4002022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	protected MechanismAudioPlayer m_audioPlayer;

	[Token(Token = "0x4002023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_isLocked;

	[Token(Token = "0x4002024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Trigger m_triggerState;

	[Token(Token = "0x4002025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Trigger? m_overrideTriggerState;

	[Token(Token = "0x4002026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_overrideTriggerTimer;

	[Token(Token = "0x4002027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GuidComponent m_guidComponent;

	[Token(Token = "0x4002028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool m_levelLoaded;

	[Token(Token = "0x17000632")]
	public Trigger latestTrigger
	{
		[Token(Token = "0x60026BC")]
		[Address(RVA = "0x12853E0", Offset = "0x12853E0", VA = "0x12853E0")]
		get
		{
			return default(Trigger);
		}
		[Token(Token = "0x60026BD")]
		[Address(RVA = "0x12853E8", Offset = "0x12853E8", VA = "0x12853E8")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000633")]
	public bool IsLocked
	{
		[Token(Token = "0x60026C7")]
		[Address(RVA = "0x1285B14", Offset = "0x1285B14", VA = "0x1285B14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1400001A")]
	public event Action<Trigger> OnMechanismThresholdChange
	{
		[Token(Token = "0x60026BA")]
		[Address(RVA = "0x1285280", Offset = "0x1285280", VA = "0x1285280")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60026BB")]
		[Address(RVA = "0x1285330", Offset = "0x1285330", VA = "0x1285330")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60026BE")]
	[Address(RVA = "0x1285400", Offset = "0x1285400", VA = "0x1285400", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60026BF")]
	[Address(RVA = "0x1285474", Offset = "0x1285474", VA = "0x1285474")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60026C0")]
	[Address(RVA = "0x1285560", Offset = "0x1285560", VA = "0x1285560")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60026C1")]
	[Address(RVA = "0x128569C", Offset = "0x128569C", VA = "0x128569C", Slot = "5")]
	protected virtual void OnLevelReset()
	{
	}

	[Token(Token = "0x60026C2")]
	[Address(RVA = "0x12856A8", Offset = "0x12856A8", VA = "0x12856A8", Slot = "6")]
	protected virtual void TriggerStateChanged(Trigger prevValue, Trigger newValue)
	{
	}

	[Token(Token = "0x60026C3")]
	[Address(RVA = "0x12856AC", Offset = "0x12856AC", VA = "0x12856AC", Slot = "7")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60026C4")]
	[Address(RVA = "0x12857D0", Offset = "0x12857D0", VA = "0x12857D0")]
	public void RequestChangeState(Trigger newState)
	{
	}

	[Token(Token = "0x60026C5")]
	[Address(RVA = "0x128589C", Offset = "0x128589C", VA = "0x128589C")]
	public void ChangeTriggerState(Trigger newState)
	{
	}

	[Token(Token = "0x60026C6")]
	[Address(RVA = "0x1285B10", Offset = "0x1285B10", VA = "0x1285B10", Slot = "8")]
	public virtual void OnBeforeChangeTriggerState(Trigger newState)
	{
	}

	[Token(Token = "0x60026C8")]
	[Address(RVA = "0x1285B1C", Offset = "0x1285B1C", VA = "0x1285B1C", Slot = "9")]
	protected virtual void DoLock()
	{
	}

	[Token(Token = "0x60026C9")]
	[Address(RVA = "0x1285BC0", Offset = "0x1285BC0", VA = "0x1285BC0", Slot = "10")]
	protected virtual void DoUnlock()
	{
	}

	[Token(Token = "0x60026CA")]
	[Address(RVA = "0x1285BE4", Offset = "0x1285BE4", VA = "0x1285BE4")]
	public void Lock()
	{
	}

	[Token(Token = "0x60026CB")]
	[Address(RVA = "0x1285BF0", Offset = "0x1285BF0", VA = "0x1285BF0")]
	public void Unlock()
	{
	}

	[Token(Token = "0x60026CC")]
	[Address(RVA = "0x1285BFC", Offset = "0x1285BFC", VA = "0x1285BFC")]
	public void ForceState(Trigger trigger, Vector3 position, Quaternion rotation, bool changeTransform = true)
	{
	}

	[Token(Token = "0x60026CD")]
	[Address(RVA = "0x1285D24", Offset = "0x1285D24", VA = "0x1285D24")]
	public void SetTriggerOverride(Trigger triggerOverride, float timeout = 0f)
	{
	}

	[Token(Token = "0x60026CE")]
	[Address(RVA = "0x1285750", Offset = "0x1285750", VA = "0x1285750")]
	public void ClearTriggerOverride()
	{
	}

	[Token(Token = "0x60026CF")]
	[Address(RVA = "0x128575C", Offset = "0x128575C", VA = "0x128575C")]
	protected Trigger CheckCurrentTriggerWithOverride()
	{
		return default(Trigger);
	}

	[Token(Token = "0x60026D0")]
	protected abstract Trigger CheckCurrentTrigger();

	[Token(Token = "0x60026D1")]
	[Address(RVA = "0x1285DA4", Offset = "0x1285DA4", VA = "0x1285DA4", Slot = "12")]
	protected virtual void OnDeserializedMechanism()
	{
	}

	[Token(Token = "0x60026D2")]
	[Address(RVA = "0x1285DA8", Offset = "0x1285DA8", VA = "0x1285DA8")]
	protected AbstractTriggeredMechanism()
	{
	}
}
[Token(Token = "0x20006D8")]
public class MechanismKey : CachedMonoBehaviour
{
	[Token(Token = "0x20006D9")]
	public enum KeyEjectionContext
	{
		[Token(Token = "0x4002041")]
		Action,
		[Token(Token = "0x4002042")]
		Manual,
		[Token(Token = "0x4002043")]
		Knockout
	}

	[Token(Token = "0x400202D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string m_keyId;

	[Token(Token = "0x400202E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private WorldInteraction_Hold m_holdInteraction;

	[Token(Token = "0x400202F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private VrItem m_vrItem;

	[Token(Token = "0x4002030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool m_heldByPlayer;

	[Token(Token = "0x4002031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool m_canLandInKeyhole;

	[Token(Token = "0x4002032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	[UnityEngine.Tooltip("If ticked, allow this key to be knocked out of a keyhole if the player touches it with another key of the same type. If unticked, do not allow that to happen.")]
	[SerializeField]
	private bool m_canBeKnockedOutByCollisions;

	[Token(Token = "0x4002033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x4002034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action<KeyEjectionContext?> OnEjected;

	[Token(Token = "0x4002035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Action KeyholeChanged;

	[Token(Token = "0x4002036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEvent OnPlacedInKeyhole;

	[Token(Token = "0x4002037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEvent OnRemovedFromKeyhole;

	[Token(Token = "0x4002038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent OnBlendedIntoKeyhole;

	[Token(Token = "0x4002039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Action OnPlacedInKeyholeAction;

	[Token(Token = "0x400203A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Action OnRemovedFromKeyholeAction;

	[Token(Token = "0x400203B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Action OnBlendedIntoKeyholeAction;

	[Token(Token = "0x400203C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private MechanismKeyhole m_attachedKeyhole;

	[Token(Token = "0x400203D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private MechanismKeyhole m_keyholePendingEscape;

	[Token(Token = "0x400203E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private VelocityTracker m_attachedKeyholeVelocityTracker;

	[Token(Token = "0x400203F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool m_pendingChangeKeyEvent;

	[Token(Token = "0x17000634")]
	public string KeyId
	{
		[Token(Token = "0x60026D3")]
		[Address(RVA = "0x1285DB0", Offset = "0x1285DB0", VA = "0x1285DB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000635")]
	internal BoltEntity BoltEntity
	{
		[Token(Token = "0x60026D4")]
		[Address(RVA = "0x1285DB8", Offset = "0x1285DB8", VA = "0x1285DB8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60026D5")]
		[Address(RVA = "0x1285E5C", Offset = "0x1285E5C", VA = "0x1285E5C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000636")]
	public MechanismKeyhole AttachedKeyhole
	{
		[Token(Token = "0x60026D6")]
		[Address(RVA = "0x1285E64", Offset = "0x1285E64", VA = "0x1285E64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000637")]
	public bool IsAttachedToKeyhole
	{
		[Token(Token = "0x60026D7")]
		[Address(RVA = "0x1285E6C", Offset = "0x1285E6C", VA = "0x1285E6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000638")]
	public WorldInteraction_Hold holdInteraction
	{
		[Token(Token = "0x60026D8")]
		[Address(RVA = "0x1285ECC", Offset = "0x1285ECC", VA = "0x1285ECC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000639")]
	public bool IsBeingBlended
	{
		[Token(Token = "0x60026E3")]
		[Address(RVA = "0x1286888", Offset = "0x1286888", VA = "0x1286888")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60026D9")]
	[Address(RVA = "0x1285ED4", Offset = "0x1285ED4", VA = "0x1285ED4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60026DA")]
	[Address(RVA = "0x1286314", Offset = "0x1286314", VA = "0x1286314")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60026DB")]
	[Address(RVA = "0x128660C", Offset = "0x128660C", VA = "0x128660C")]
	public void SetAttachedKeyhole(MechanismKeyhole keyhole)
	{
	}

	[Token(Token = "0x60026DC")]
	[Address(RVA = "0x1286754", Offset = "0x1286754", VA = "0x1286754")]
	private void InvokeOnPlacedInKeyhole()
	{
	}

	[Token(Token = "0x60026DD")]
	[Address(RVA = "0x1286788", Offset = "0x1286788", VA = "0x1286788")]
	private void InvokeOnRemovedFromKeyhole()
	{
	}

	[Token(Token = "0x60026DE")]
	[Address(RVA = "0x12867BC", Offset = "0x12867BC", VA = "0x12867BC")]
	public void RemoveFromKeyhole()
	{
	}

	[Token(Token = "0x60026DF")]
	[Address(RVA = "0x1286834", Offset = "0x1286834", VA = "0x1286834")]
	public void InvokeOnBlendedIntoKeyhole()
	{
	}

	[Token(Token = "0x60026E0")]
	[Address(RVA = "0x1286868", Offset = "0x1286868", VA = "0x1286868")]
	private void OnInteractionStart()
	{
	}

	[Token(Token = "0x60026E1")]
	[Address(RVA = "0x1286874", Offset = "0x1286874", VA = "0x1286874")]
	private void OnInteractionStop()
	{
	}

	[Token(Token = "0x60026E2")]
	[Address(RVA = "0x128687C", Offset = "0x128687C", VA = "0x128687C")]
	private void KeyholeEscape()
	{
	}

	[Token(Token = "0x60026E4")]
	[Address(RVA = "0x1286988", Offset = "0x1286988", VA = "0x1286988")]
	public void Eject([Optional] Vector3? localEjectVelocity, [Optional] KeyEjectionContext? context)
	{
	}

	[Token(Token = "0x60026E5")]
	[Address(RVA = "0x1286BE0", Offset = "0x1286BE0", VA = "0x1286BE0")]
	public void Eject(Vector3 worldLinearVelocity, Vector3 worldAngularVelocity, [Optional] KeyEjectionContext? context)
	{
	}

	[Token(Token = "0x60026E6")]
	[Address(RVA = "0x1286CA0", Offset = "0x1286CA0", VA = "0x1286CA0")]
	public void ApplyEjectVelocity(Vector3 velocity, Vector3 angularVelocity, MechanismKeyhole leavingKeyhole)
	{
	}

	[Token(Token = "0x60026E7")]
	[Address(RVA = "0x1286DC4", Offset = "0x1286DC4", VA = "0x1286DC4")]
	public void UpdateLocalTransform(Vector3 localPosition, Quaternion localRotation)
	{
	}

	[Token(Token = "0x60026E8")]
	[Address(RVA = "0x1286E4C", Offset = "0x1286E4C", VA = "0x1286E4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60026E9")]
	[Address(RVA = "0x1287528", Offset = "0x1287528", VA = "0x1287528")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60026EA")]
	[Address(RVA = "0x1287698", Offset = "0x1287698", VA = "0x1287698")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60026EB")]
	[Address(RVA = "0x12876B0", Offset = "0x12876B0", VA = "0x12876B0")]
	public static MechanismKeyhole ProcessChange(BoltEntity keyEntity, BoltEntity keyholeEntity, bool insertion, KeyEjectionContext? context)
	{
		return null;
	}

	[Token(Token = "0x60026EC")]
	[Address(RVA = "0x1288278", Offset = "0x1288278", VA = "0x1288278")]
	public MechanismKey()
	{
	}
}
[Token(Token = "0x20006DA")]
public class MechanismKeyhole : MonoBehaviour
{
	[Token(Token = "0x20006DB")]
	private enum AlignmentAxis
	{
		[Token(Token = "0x400205C")]
		All,
		[Token(Token = "0x400205D")]
		X,
		[Token(Token = "0x400205E")]
		Y,
		[Token(Token = "0x400205F")]
		Z
	}

	[Token(Token = "0x4002044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<string> m_applicableKeyIds;

	[Token(Token = "0x4002045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_minDistanceForLock;

	[Token(Token = "0x4002046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float m_minRotationForLock;

	[Token(Token = "0x4002047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("The axis you want to have aligned between the key and keyhole. The angle difference between the axis must lie within the MinRotationForLock angle.")]
	[SerializeField]
	private AlignmentAxis m_alignmentAxis;

	[Token(Token = "0x4002048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Min(0f)]
	[UnityEngine.Tooltip("When a new key is attached, we'll blend it into position over this much time. Measured in game-time seconds. Set this to zero to immediately snap into position.")]
	[SerializeField]
	private float m_attachmentBlendTime;

	[Token(Token = "0x4002049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float m_blendTimer;

	[Token(Token = "0x400204A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 m_blendStartPosition;

	[Token(Token = "0x400204B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion m_blendStartRotation;

	[Token(Token = "0x400204C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[UnityEngine.Tooltip("Switch this on if there's a wrapping collider around the location of the key that's only switched on when the key is inserted. This stops the two colliders from fighting eachother and also lets the player knock the other key out with another key with the same ID.")]
	private bool m_switchKeyToTriggerWhenInserted;

	[Token(Token = "0x400204D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private TriggerContainDetector m_containDetector;

	[Token(Token = "0x400204E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private MechanismKey m_attachedKey;

	[Token(Token = "0x400204F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("When force ejecting the key, if it is a physics body, it will be ejected with this immediate velocity in local space. Setting to (0, 0, 0) turns this off.")]
	[SerializeField]
	private Vector3 m_ejectionVelocityLocalSpace;

	[Token(Token = "0x4002050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool m_allowKeyGrab;

	[Token(Token = "0x4002051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private INetworkMechanismKeyhole _networkMechanismKeyhole;

	[Token(Token = "0x4002052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private BoltEntity m_boltEntity;

	[Token(Token = "0x4002053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEvent<GameObject> OnKeyPreInsertionStarted;

	[Token(Token = "0x4002054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEvent<GameObject> OnKeyInsertionStarted;

	[Token(Token = "0x4002055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Action<MechanismKey> OnKeyInsertionStartedAction;

	[Token(Token = "0x4002056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEvent<GameObject> OnKeyInserted;

	[Token(Token = "0x4002057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action<MechanismKey> OnKeyInsertedAction;

	[Token(Token = "0x4002058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEvent<GameObject> OnKeyRemoved;

	[Token(Token = "0x4002059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[FormerlySerializedAs("OnKeyRemovedInstant")]
	public Action<MechanismKey> OnKeyRemovedAction;

	[Token(Token = "0x400205A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<MechanismKeyhole> s_allActiveKeyholes;

	[Token(Token = "0x1700063A")]
	internal INetworkMechanismKeyhole NetworkKeyhole
	{
		[Token(Token = "0x60026ED")]
		[Address(RVA = "0x1288288", Offset = "0x1288288", VA = "0x1288288")]
		get
		{
			return null;
		}
		[Token(Token = "0x60026EE")]
		[Address(RVA = "0x128832C", Offset = "0x128832C", VA = "0x128832C")]
		set
		{
		}
	}

	[Token(Token = "0x1700063B")]
	internal BoltEntity BoltEntity
	{
		[Token(Token = "0x60026EF")]
		[Address(RVA = "0x1288334", Offset = "0x1288334", VA = "0x1288334")]
		get
		{
			return null;
		}
		[Token(Token = "0x60026F0")]
		[Address(RVA = "0x12884A4", Offset = "0x12884A4", VA = "0x12884A4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700063C")]
	public bool IsBlendInProgress
	{
		[Token(Token = "0x60026FA")]
		[Address(RVA = "0x128690C", Offset = "0x128690C", VA = "0x128690C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700063D")]
	public bool ContainsKey
	{
		[Token(Token = "0x6002700")]
		[Address(RVA = "0x12874C8", Offset = "0x12874C8", VA = "0x12874C8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700063E")]
	public MechanismKey AttachedKey
	{
		[Token(Token = "0x6002701")]
		[Address(RVA = "0x1288CA4", Offset = "0x1288CA4", VA = "0x1288CA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700063F")]
	public bool IsSpaceEmpty
	{
		[Token(Token = "0x6002702")]
		[Address(RVA = "0x1288CAC", Offset = "0x1288CAC", VA = "0x1288CAC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60026F1")]
	[Address(RVA = "0x12884AC", Offset = "0x12884AC", VA = "0x12884AC")]
	public static HashSet<MechanismKeyhole> GetActiveKeyholes()
	{
		return null;
	}

	[Token(Token = "0x60026F2")]
	[Address(RVA = "0x1288504", Offset = "0x1288504", VA = "0x1288504")]
	public void AddToActiveKeyholeHashSet()
	{
	}

	[Token(Token = "0x60026F3")]
	[Address(RVA = "0x1288584", Offset = "0x1288584", VA = "0x1288584")]
	public void RemoveFromActiveKeyholeHashSet()
	{
	}

	[Token(Token = "0x60026F4")]
	[Address(RVA = "0x1288604", Offset = "0x1288604", VA = "0x1288604")]
	private void Awake()
	{
	}

	[Token(Token = "0x60026F5")]
	[Address(RVA = "0x1288608", Offset = "0x1288608", VA = "0x1288608")]
	private void Start()
	{
	}

	[Token(Token = "0x60026F6")]
	[Address(RVA = "0x1288628", Offset = "0x1288628", VA = "0x1288628")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60026F7")]
	[Address(RVA = "0x128862C", Offset = "0x128862C", VA = "0x128862C")]
	private void Update()
	{
	}

	[Token(Token = "0x60026F8")]
	[Address(RVA = "0x12878EC", Offset = "0x12878EC", VA = "0x12878EC")]
	public bool RegisterKey(MechanismKey key, bool skipBlend)
	{
		return default(bool);
	}

	[Token(Token = "0x60026F9")]
	[Address(RVA = "0x1287E94", Offset = "0x1287E94", VA = "0x1287E94")]
	public void DeregisterKey(MechanismKey key)
	{
	}

	[Token(Token = "0x60026FB")]
	[Address(RVA = "0x1288618", Offset = "0x1288618", VA = "0x1288618")]
	public void SetKeyGrabbable(bool grabbable)
	{
	}

	[Token(Token = "0x60026FC")]
	[Address(RVA = "0x1288A08", Offset = "0x1288A08", VA = "0x1288A08")]
	private void RefreshKeyGrabbableState(bool isRemoving = false)
	{
	}

	[Token(Token = "0x60026FD")]
	[Address(RVA = "0x1288AF0", Offset = "0x1288AF0", VA = "0x1288AF0")]
	public void GrabEjectFromKeyhole()
	{
	}

	[Token(Token = "0x60026FE")]
	[Address(RVA = "0x1288AF8", Offset = "0x1288AF8", VA = "0x1288AF8")]
	public void ForceEjectKeyFromKeyhole(MechanismKey.KeyEjectionContext context)
	{
	}

	[Token(Token = "0x60026FF")]
	[Address(RVA = "0x1288BE4", Offset = "0x1288BE4", VA = "0x1288BE4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6002703")]
	[Address(RVA = "0x1287174", Offset = "0x1287174", VA = "0x1287174")]
	public bool IsKeyMatchedInValidRange(MechanismKey key, float distanceToleranceScale = 1f, float rotationToleranceScale = 1f)
	{
		return default(bool);
	}

	[Token(Token = "0x6002704")]
	[Address(RVA = "0x1288D38", Offset = "0x1288D38", VA = "0x1288D38")]
	public MechanismKeyhole()
	{
	}
}
[Token(Token = "0x20006DC")]
[RequireComponent(typeof(ConfigurableJoint))]
public class MechanismButton : AbstractTriggeredMechanism
{
	[Token(Token = "0x20006DD")]
	private enum TrackedAxis
	{
		[Token(Token = "0x400206D")]
		X,
		[Token(Token = "0x400206E")]
		Y,
		[Token(Token = "0x400206F")]
		Z
	}

	[Token(Token = "0x4002060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[UnityEngine.Tooltip("The point where we trigger the press. 0.5 is half way, 0 is all the way down.")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_triggerThreshold;

	[Token(Token = "0x4002061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private MeshRenderer[] m_renderers;

	[Token(Token = "0x4002062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Material m_defaultMaterial;

	[Token(Token = "0x4002063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Material m_pressedMaterial;

	[Token(Token = "0x4002064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Material m_lockedMaterial;

	[Token(Token = "0x4002065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private TrackedAxis m_trackedAxis;

	[Token(Token = "0x4002066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float m_mostRecentUnlockedEffectivePositionInTrackedAxis;

	[Token(Token = "0x4002067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float m_localPositionTrackedAxisLow;

	[Token(Token = "0x4002068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float m_localPositionTrackedAxisHigh;

	[Token(Token = "0x4002069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 m_standardLocalPosition;

	[Token(Token = "0x400206A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 m_resetLocalPosition;

	[Token(Token = "0x400206B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private ConfigurableJoint m_slider;

	[Token(Token = "0x6002706")]
	[Address(RVA = "0x1288DF0", Offset = "0x1288DF0", VA = "0x1288DF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002707")]
	[Address(RVA = "0x12891D0", Offset = "0x12891D0", VA = "0x12891D0", Slot = "5")]
	protected override void OnLevelReset()
	{
	}

	[Token(Token = "0x6002708")]
	[Address(RVA = "0x128927C", Offset = "0x128927C", VA = "0x128927C")]
	private void UpdateMaterial()
	{
	}

	[Token(Token = "0x6002709")]
	[Address(RVA = "0x12893A0", Offset = "0x12893A0", VA = "0x12893A0", Slot = "6")]
	protected override void TriggerStateChanged(Trigger prevValue, Trigger newValue)
	{
	}

	[Token(Token = "0x600270A")]
	[Address(RVA = "0x12893A4", Offset = "0x12893A4", VA = "0x12893A4", Slot = "9")]
	protected override void DoLock()
	{
	}

	[Token(Token = "0x600270B")]
	[Address(RVA = "0x12893BC", Offset = "0x12893BC", VA = "0x12893BC", Slot = "10")]
	protected override void DoUnlock()
	{
	}

	[Token(Token = "0x600270C")]
	[Address(RVA = "0x12892AC", Offset = "0x12892AC", VA = "0x12892AC")]
	private void SetMaterial(Material m)
	{
	}

	[Token(Token = "0x600270D")]
	[Address(RVA = "0x12893E4", Offset = "0x12893E4", VA = "0x12893E4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600270E")]
	[Address(RVA = "0x1289540", Offset = "0x1289540", VA = "0x1289540", Slot = "11")]
	protected override Trigger CheckCurrentTrigger()
	{
		return default(Trigger);
	}

	[Token(Token = "0x600270F")]
	[Address(RVA = "0x1289718", Offset = "0x1289718", VA = "0x1289718")]
	public MechanismButton()
	{
	}
}
[Token(Token = "0x20006DE")]
public class MechanismCrank : AbstractTriggeredMechanism
{
	[Token(Token = "0x4002070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent<float> OnAngleChangedNormalized;

	[Token(Token = "0x4002072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[MinMaxRange(0f, 1f)]
	[SerializeField]
	[UnityEngine.Tooltip("We will trigger the lower event when the angle falls below the lower boundary and the upper event when it rises above the upper boundary.")]
	private MinMaxRange m_triggerDeadzoneLimits;

	[Token(Token = "0x4002073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float m_maxAngle;

	[Token(Token = "0x4002074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private float m_minAngle;

	[Token(Token = "0x4002075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Debug")]
	[SerializeField]
	[ReadOnly]
	private float m_cumulativeAngle;

	[Token(Token = "0x4002076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	[ReadOnly]
	private Trigger m_trigger;

	[Token(Token = "0x4002077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private HingeJoint m_hingeJoint;

	[Token(Token = "0x4002078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x4002079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private WorldInteraction m_attachedInteraction;

	[Token(Token = "0x400207A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_previousRawHingeAngle;

	[Token(Token = "0x400207B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Quaternion m_initialRotation;

	[Token(Token = "0x400207C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float m_triggerPercent;

	[Token(Token = "0x1400001B")]
	public event Action<float> OnAngleChangedNormalizedEvent
	{
		[Token(Token = "0x6002710")]
		[Address(RVA = "0x1289728", Offset = "0x1289728", VA = "0x1289728")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6002711")]
		[Address(RVA = "0x12897D8", Offset = "0x12897D8", VA = "0x12897D8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6002712")]
	[Address(RVA = "0x1289888", Offset = "0x1289888", VA = "0x1289888")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002713")]
	[Address(RVA = "0x1289AB0", Offset = "0x1289AB0", VA = "0x1289AB0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002714")]
	[Address(RVA = "0x1289C1C", Offset = "0x1289C1C", VA = "0x1289C1C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6002715")]
	[Address(RVA = "0x1289EE8", Offset = "0x1289EE8", VA = "0x1289EE8", Slot = "5")]
	protected override void OnLevelReset()
	{
	}

	[Token(Token = "0x6002716")]
	[Address(RVA = "0x1289EF4", Offset = "0x1289EF4", VA = "0x1289EF4", Slot = "11")]
	protected override Trigger CheckCurrentTrigger()
	{
		return default(Trigger);
	}

	[Token(Token = "0x6002717")]
	[Address(RVA = "0x1289F44", Offset = "0x1289F44", VA = "0x1289F44")]
	private void ActionOnInteractionStart()
	{
	}

	[Token(Token = "0x6002718")]
	[Address(RVA = "0x1289F48", Offset = "0x1289F48", VA = "0x1289F48")]
	private void ActionOnInteractionStop()
	{
	}

	[Token(Token = "0x6002719")]
	[Address(RVA = "0x1289F4C", Offset = "0x1289F4C", VA = "0x1289F4C")]
	public MechanismCrank()
	{
	}
}
[Token(Token = "0x20006DF")]
public class MechanismDetachable : MonoBehaviour
{
	[Token(Token = "0x20006E0")]
	private struct ReattachData
	{
		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Transform transform;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3 standardLocalPosition;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Quaternion standardLocalRotation;
	}

	[Token(Token = "0x400207D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent OnDetachedEvent;

	[Token(Token = "0x400207E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnReattachedEvent;

	[Token(Token = "0x400207F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ConfigurableJoint m_physicsJoint;

	[Token(Token = "0x4002080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool m_enableDetach;

	[Token(Token = "0x4002081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	[Min(0f)]
	private float m_detachForce;

	[Token(Token = "0x4002082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private WorldInteraction_Hold m_holdInteraction;

	[Token(Token = "0x4002083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("If not null, make the nearest parent world interaction a SIBLING (not a CHILD) of this transform when it is detached and move it back again when reattached.")]
	[HideInInspector]
	[SerializeField]
	private Transform m_siblingOnDetach;

	[Token(Token = "0x4002084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform m_standardParent;

	[Token(Token = "0x4002085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform[] m_restoreLocalPositionOnReattach;

	[Token(Token = "0x4002086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ReattachData[] m_reattachDataArray;

	[Token(Token = "0x4002087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public Identifier m_ID;

	[Token(Token = "0x4002088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool m_initialized;

	[Token(Token = "0x4002089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool m_detached;

	[Token(Token = "0x17000640")]
	public bool EnableDetach
	{
		[Token(Token = "0x600271A")]
		[Address(RVA = "0x128A01C", Offset = "0x128A01C", VA = "0x128A01C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600271B")]
		[Address(RVA = "0x128A024", Offset = "0x128A024", VA = "0x128A024")]
		set
		{
		}
	}

	[Token(Token = "0x600271C")]
	[Address(RVA = "0x128A030", Offset = "0x128A030", VA = "0x128A030")]
	private void Awake()
	{
	}

	[Token(Token = "0x600271D")]
	[Address(RVA = "0x128A034", Offset = "0x128A034", VA = "0x128A034")]
	private void Start()
	{
	}

	[Token(Token = "0x600271E")]
	[Address(RVA = "0x128A25C", Offset = "0x128A25C", VA = "0x128A25C")]
	public void ForceDetach()
	{
	}

	[Token(Token = "0x600271F")]
	[Address(RVA = "0x128A364", Offset = "0x128A364", VA = "0x128A364")]
	public void ForceReattach()
	{
	}

	[Token(Token = "0x6002720")]
	[Address(RVA = "0x128A700", Offset = "0x128A700", VA = "0x128A700")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6002721")]
	[Address(RVA = "0x128A7CC", Offset = "0x128A7CC", VA = "0x128A7CC")]
	public MechanismDetachable()
	{
	}
}
[Token(Token = "0x20006E1")]
public class MechanismHandHover : AbstractTriggeredMechanism
{
	[Token(Token = "0x400208D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GraspMarker m_hoveredGraspMarker;

	[Token(Token = "0x400208E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[MinMaxRange(0f, 1f)]
	[SerializeField]
	private MinMaxRange m_triggerThresholds;

	[Token(Token = "0x6002722")]
	[Address(RVA = "0x128A7DC", Offset = "0x128A7DC", VA = "0x128A7DC", Slot = "5")]
	protected override void OnLevelReset()
	{
	}

	[Token(Token = "0x6002723")]
	[Address(RVA = "0x128A7E8", Offset = "0x128A7E8", VA = "0x128A7E8", Slot = "11")]
	protected override Trigger CheckCurrentTrigger()
	{
		return default(Trigger);
	}

	[Token(Token = "0x6002724")]
	[Address(RVA = "0x128A884", Offset = "0x128A884", VA = "0x128A884")]
	public MechanismHandHover()
	{
	}
}
[Token(Token = "0x20006E2")]
[RequireComponent(typeof(HingeJoint))]
public class MechanismHinge : AbstractTriggeredMechanism
{
	[Token(Token = "0x400208F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent<float> OnHingeAngleChanged;

	[Token(Token = "0x4002091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEvent<float> OnHingeAngleDelta;

	[Token(Token = "0x4002092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[UnityEngine.Tooltip("We will trigger the lower event when the angle falls below the lower boundary and the upper event when it rises above the upper boundary.")]
	[SerializeField]
	[MinMaxRange(0f, 1f)]
	private MinMaxRange m_triggerDeadzoneLimits;

	[Token(Token = "0x4002093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float m_minLimit;

	[Token(Token = "0x4002094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private float m_maxLimit;

	[Token(Token = "0x4002095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Range(-1f, 1f)]
	[SerializeField]
	[UnityEngine.Tooltip("The initial position of the hinge. -1 is at the bottom, +1 is at the top, 0 is exactly in the middle.")]
	private float m_initialHingePosition;

	[Token(Token = "0x4002096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[UnityEngine.Tooltip("If ticked, allow the attached interaction to be grabbed while this mechanism is locked in place.")]
	[SerializeField]
	private bool m_allowGrabWhileLocked;

	[Token(Token = "0x4002097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private HingeJoint m_hinge;

	[Token(Token = "0x4002098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float m_previousRawHingeAngle;

	[Token(Token = "0x4002099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float m_currentCumulativeAngle;

	[Token(Token = "0x400209A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_triggerAngleLower;

	[Token(Token = "0x400209B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float m_triggerAngleUpper;

	[Token(Token = "0x400209C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Vector3 m_initialLocalPosition;

	[Token(Token = "0x400209D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private Quaternion m_initialLocalRotation;

	[Token(Token = "0x400209E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float m_initialAngle;

	[Token(Token = "0x1400001C")]
	public event Action<float> OnHingeAngleChangedEvent
	{
		[Token(Token = "0x6002725")]
		[Address(RVA = "0x128A88C", Offset = "0x128A88C", VA = "0x128A88C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6002726")]
		[Address(RVA = "0x128A93C", Offset = "0x128A93C", VA = "0x128A93C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6002727")]
	[Address(RVA = "0x128A9EC", Offset = "0x128A9EC", VA = "0x128A9EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002728")]
	[Address(RVA = "0x128AC80", Offset = "0x128AC80", VA = "0x128AC80", Slot = "5")]
	protected override void OnLevelReset()
	{
	}

	[Token(Token = "0x6002729")]
	[Address(RVA = "0x128ACC4", Offset = "0x128ACC4", VA = "0x128ACC4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600272A")]
	[Address(RVA = "0x128AE74", Offset = "0x128AE74", VA = "0x128AE74")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600272B")]
	[Address(RVA = "0x128AB80", Offset = "0x128AB80", VA = "0x128AB80")]
	private void ManuallyOffsetBodyAngle(float angleDelta)
	{
	}

	[Token(Token = "0x600272C")]
	[Address(RVA = "0x128AECC", Offset = "0x128AECC", VA = "0x128AECC", Slot = "11")]
	protected override Trigger CheckCurrentTrigger()
	{
		return default(Trigger);
	}

	[Token(Token = "0x600272D")]
	[Address(RVA = "0x128AF7C", Offset = "0x128AF7C", VA = "0x128AF7C", Slot = "8")]
	public override void OnBeforeChangeTriggerState(Trigger newState)
	{
	}

	[Token(Token = "0x600272E")]
	[Address(RVA = "0x128B0F8", Offset = "0x128B0F8", VA = "0x128B0F8", Slot = "12")]
	protected override void OnDeserializedMechanism()
	{
	}

	[Token(Token = "0x600272F")]
	[Address(RVA = "0x128B14C", Offset = "0x128B14C", VA = "0x128B14C", Slot = "9")]
	protected override void DoLock()
	{
	}

	[Token(Token = "0x6002730")]
	[Address(RVA = "0x128B2DC", Offset = "0x128B2DC", VA = "0x128B2DC", Slot = "10")]
	protected override void DoUnlock()
	{
	}

	[Token(Token = "0x6002731")]
	[Address(RVA = "0x128B414", Offset = "0x128B414", VA = "0x128B414")]
	public MechanismHinge()
	{
	}
}
[Token(Token = "0x20006E3")]
public class MechanismSlide : AbstractTriggeredMechanism
{
	[Token(Token = "0x20006E4")]
	private enum Axis
	{
		[Token(Token = "0x40020A9")]
		X,
		[Token(Token = "0x40020AA")]
		Y,
		[Token(Token = "0x40020AB")]
		Z
	}

	[Token(Token = "0x400209F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[MinMaxRange(0f, 1f)]
	[UnityEngine.Tooltip("Low Trigger area is to the area to the left of the slider, represented with the Red Line Gizmo. The High Trigger area is represented with the Green Line Gizmo")]
	[SerializeField]
	private MinMaxRange m_triggerBounds;

	[Token(Token = "0x40020A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float m_maxDistance;

	[Token(Token = "0x40020A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[UnityEngine.Tooltip("The initial position of the slider. -1 is at the bottom, +1 is at the top, 0 is exactly in the middle.")]
	[SerializeField]
	[Range(-1f, 1f)]
	private float m_sliderPosition;

	[Token(Token = "0x40020A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[UnityEngine.Tooltip("The local axis this object will slide along.")]
	[SerializeField]
	private Axis m_slideAxis;

	[Token(Token = "0x40020A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	[ReadOnly]
	private Trigger m_lastTrigger;

	[Token(Token = "0x40020A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Header("Object Setup")]
	private Transform m_targetTransform;

	[Token(Token = "0x40020A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[FormerlySerializedAs("m_configJoint")]
	[SerializeField]
	private ConfigurableJoint m_configurableJoint;

	[Token(Token = "0x40020A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 m_lowEndPos;

	[Token(Token = "0x40020A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Vector3 m_highEndPos;

	[Token(Token = "0x17000641")]
	public Vector3 LowEndPosition
	{
		[Token(Token = "0x6002732")]
		[Address(RVA = "0x128B4D8", Offset = "0x128B4D8", VA = "0x128B4D8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000642")]
	public Vector3 HighEndPosition
	{
		[Token(Token = "0x6002733")]
		[Address(RVA = "0x128B4E4", Offset = "0x128B4E4", VA = "0x128B4E4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000643")]
	public Transform TargetTransform
	{
		[Token(Token = "0x6002734")]
		[Address(RVA = "0x128B4F0", Offset = "0x128B4F0", VA = "0x128B4F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000644")]
	private Vector3 SlideDirVector
	{
		[Token(Token = "0x6002735")]
		[Address(RVA = "0x128B4F8", Offset = "0x128B4F8", VA = "0x128B4F8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6002736")]
	[Address(RVA = "0x128B57C", Offset = "0x128B57C", VA = "0x128B57C", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6002737")]
	[Address(RVA = "0x128B684", Offset = "0x128B684", VA = "0x128B684")]
	private void UpdateSliderAdjustedPosition()
	{
	}

	[Token(Token = "0x6002738")]
	[Address(RVA = "0x128B7E8", Offset = "0x128B7E8", VA = "0x128B7E8")]
	public Vector3 CalculateSliderAdjustedPosition(float sliderPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002739")]
	[Address(RVA = "0x128B8A4", Offset = "0x128B8A4", VA = "0x128B8A4", Slot = "11")]
	protected override Trigger CheckCurrentTrigger()
	{
		return default(Trigger);
	}

	[Token(Token = "0x600273A")]
	[Address(RVA = "0x128B958", Offset = "0x128B958", VA = "0x128B958", Slot = "5")]
	protected override void OnLevelReset()
	{
	}

	[Token(Token = "0x600273B")]
	[Address(RVA = "0x128B964", Offset = "0x128B964", VA = "0x128B964")]
	public MechanismSlide()
	{
	}
}
[Token(Token = "0x20006E5")]
public class PickupDisplayManager : MonoBehaviour
{
	[Token(Token = "0x40020AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AnimationCurve m_dotAlphaCurve;

	[Token(Token = "0x40020AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_speedCircleExpand;

	[Token(Token = "0x40020AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float m_speedCircleCollapse;

	[Token(Token = "0x40020AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_maxTimeOnCurves;

	[Token(Token = "0x40020B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<WorldInteraction, float> m_interactionTimes;

	[Token(Token = "0x40020B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem m_particleSystem;

	[Token(Token = "0x40020B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem.Particle[] m_particles;

	[Token(Token = "0x40020B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<WorldInteraction> m_unengagedWorldInteractions;

	[Token(Token = "0x40020B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private HashSet<WorldInteraction> m_engagedInteractions;

	[Token(Token = "0x40020B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private HashSet<WorldInteraction> m_leftHandInRangeInteractions;

	[Token(Token = "0x40020B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private HashSet<WorldInteraction> m_rightHandInRangeInteractions;

	[Token(Token = "0x600273C")]
	[Address(RVA = "0x128B9F4", Offset = "0x128B9F4", VA = "0x128B9F4")]
	private void Start()
	{
	}

	[Token(Token = "0x600273D")]
	[Address(RVA = "0x128BAB8", Offset = "0x128BAB8", VA = "0x128BAB8")]
	private void Update()
	{
	}

	[Token(Token = "0x600273E")]
	[Address(RVA = "0x128C628", Offset = "0x128C628", VA = "0x128C628")]
	private int DrawParticlesForInteractions(HashSet<WorldInteraction> interactions, VrHand hand, int particleIndex)
	{
		return default(int);
	}

	[Token(Token = "0x600273F")]
	[Address(RVA = "0x128CE34", Offset = "0x128CE34", VA = "0x128CE34")]
	private void StartUnhovering(List<WorldInteraction> interactions)
	{
	}

	[Token(Token = "0x6002740")]
	[Address(RVA = "0x128D05C", Offset = "0x128D05C", VA = "0x128D05C")]
	public PickupDisplayManager()
	{
	}
}
[Token(Token = "0x20006E6")]
[DefaultExecutionOrder(-30)]
public abstract class VrMotionInput : CachedMonoBehaviour
{
	[Token(Token = "0x20006E7")]
	public enum HandednessPreference
	{
		[Token(Token = "0x40020BD")]
		DontCare,
		[Token(Token = "0x40020BE")]
		DominantHandOnly,
		[Token(Token = "0x40020BF")]
		NonDominantHandOnly
	}

	[Token(Token = "0x20006E8")]
	public enum PartnerFixedOrderPreference
	{
		[Token(Token = "0x40020C1")]
		DontCare,
		[Token(Token = "0x40020C2")]
		Before,
		[Token(Token = "0x40020C3")]
		After
	}

	[Token(Token = "0x20006E9")]
	public enum MethodType
	{
		[Token(Token = "0x40020C5")]
		Process,
		[Token(Token = "0x40020C6")]
		Idle,
		[Token(Token = "0x40020C7")]
		LateProcess,
		[Token(Token = "0x40020C8")]
		LateIdle,
		[Token(Token = "0x40020C9")]
		FixedProcess,
		[Token(Token = "0x40020CA")]
		FixedIdle
	}

	[Token(Token = "0x40020B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected VrHand m_hand;

	[Token(Token = "0x40020B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Allow us to only run if we're on the dominant or non-dominant hand. Set to \"Dont Care\" to run regardless of left or right handedness.")]
	[FormerlySerializedAs("m_handedness")]
	[SerializeField]
	private HandednessPreference m_handednessPreference;

	[Token(Token = "0x40020B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	[UnityEngine.Tooltip("Local execution order for motion input scripts. Lower value scripts are executed first. Scripts with equal execution order values are executed in an undefined order.")]
	private int m_executionOrder;

	[Token(Token = "0x40020BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_switchedOn;

	[Token(Token = "0x40020BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool m_processing;

	[Token(Token = "0x17000645")]
	public VrHandController HandController
	{
		[Token(Token = "0x6002741")]
		[Address(RVA = "0x128D214", Offset = "0x128D214", VA = "0x128D214")]
		get
		{
			return default(VrHandController);
		}
	}

	[Token(Token = "0x17000646")]
	public virtual HandednessPreference Handedness
	{
		[Token(Token = "0x6002742")]
		[Address(RVA = "0x128D230", Offset = "0x128D230", VA = "0x128D230", Slot = "4")]
		get
		{
			return default(HandednessPreference);
		}
	}

	[Token(Token = "0x17000647")]
	public int ExecutionOrder
	{
		[Token(Token = "0x6002743")]
		[Address(RVA = "0x128D238", Offset = "0x128D238", VA = "0x128D238")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000648")]
	public virtual PartnerFixedOrderPreference FixedOrderPreference
	{
		[Token(Token = "0x6002744")]
		[Address(RVA = "0x128D240", Offset = "0x128D240", VA = "0x128D240", Slot = "5")]
		get
		{
			return default(PartnerFixedOrderPreference);
		}
	}

	[Token(Token = "0x17000649")]
	public bool IsSwitchedOn
	{
		[Token(Token = "0x6002745")]
		[Address(RVA = "0x128D248", Offset = "0x128D248", VA = "0x128D248")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700064A")]
	public bool Processing
	{
		[Token(Token = "0x6002746")]
		[Address(RVA = "0x128D250", Offset = "0x128D250", VA = "0x128D250")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700064B")]
	protected virtual bool AllowedToRun
	{
		[Token(Token = "0x6002747")]
		[Address(RVA = "0x1284E68", Offset = "0x1284E68", VA = "0x1284E68", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700064C")]
	public bool IsHandednessValid
	{
		[Token(Token = "0x6002749")]
		[Address(RVA = "0x128D2D4", Offset = "0x128D2D4", VA = "0x128D2D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002748")]
	[Address(RVA = "0x128D258", Offset = "0x128D258", VA = "0x128D258", Slot = "7")]
	public virtual void Initialize(VrHand hand)
	{
	}

	[Token(Token = "0x600274A")]
	[Address(RVA = "0x128D2A4", Offset = "0x128D2A4", VA = "0x128D2A4")]
	public void SwitchOn()
	{
	}

	[Token(Token = "0x600274B")]
	[Address(RVA = "0x128D33C", Offset = "0x128D33C", VA = "0x128D33C")]
	public void SwitchOff()
	{
	}

	[Token(Token = "0x600274C")]
	[Address(RVA = "0x1283764", Offset = "0x1283764", VA = "0x1283764", Slot = "8")]
	protected virtual void StartProcessing()
	{
	}

	[Token(Token = "0x600274D")]
	[Address(RVA = "0x12837F4", Offset = "0x12837F4", VA = "0x12837F4", Slot = "9")]
	protected virtual void StopProcessing()
	{
	}

	[Token(Token = "0x600274E")]
	[Address(RVA = "0x128D34C", Offset = "0x128D34C", VA = "0x128D34C")]
	public void DispatchProcess()
	{
	}

	[Token(Token = "0x600274F")]
	[Address(RVA = "0x128D494", Offset = "0x128D494", VA = "0x128D494")]
	public void DispatchLateProcess()
	{
	}

	[Token(Token = "0x6002750")]
	[Address(RVA = "0x128D4A0", Offset = "0x128D4A0", VA = "0x128D4A0")]
	public void DispatchFixedProcess()
	{
	}

	[Token(Token = "0x6002751")]
	[Address(RVA = "0x128D4AC", Offset = "0x128D4AC", VA = "0x128D4AC")]
	private void CallMethodFromType(MethodType type)
	{
	}

	[Token(Token = "0x6002752")]
	[Address(RVA = "0x128D358", Offset = "0x128D358", VA = "0x128D358")]
	private void DispatchUpdates(MethodType processType, MethodType idleType)
	{
	}

	[Token(Token = "0x6002753")]
	[Address(RVA = "0x12846A4", Offset = "0x12846A4", VA = "0x12846A4", Slot = "10")]
	protected virtual void Process()
	{
	}

	[Token(Token = "0x6002754")]
	[Address(RVA = "0x128487C", Offset = "0x128487C", VA = "0x128487C", Slot = "11")]
	protected virtual void Idle()
	{
	}

	[Token(Token = "0x6002755")]
	[Address(RVA = "0x12849B8", Offset = "0x12849B8", VA = "0x12849B8", Slot = "12")]
	protected virtual void FixedProcess()
	{
	}

	[Token(Token = "0x6002756")]
	[Address(RVA = "0x128D5A4", Offset = "0x128D5A4", VA = "0x128D5A4", Slot = "13")]
	protected virtual void FixedIdle()
	{
	}

	[Token(Token = "0x6002757")]
	[Address(RVA = "0x128D5A8", Offset = "0x128D5A8", VA = "0x128D5A8", Slot = "14")]
	protected virtual void LateProcess()
	{
	}

	[Token(Token = "0x6002758")]
	[Address(RVA = "0x128D5AC", Offset = "0x128D5AC", VA = "0x128D5AC", Slot = "15")]
	protected virtual void LateIdle()
	{
	}

	[Token(Token = "0x6002759")]
	[Address(RVA = "0x128D5B0", Offset = "0x128D5B0", VA = "0x128D5B0", Slot = "16")]
	protected virtual void Reset()
	{
	}

	[Token(Token = "0x600275A")]
	[Address(RVA = "0x128D5B4", Offset = "0x128D5B4", VA = "0x128D5B4", Slot = "17")]
	protected virtual void Complete()
	{
	}

	[Token(Token = "0x600275B")]
	[Address(RVA = "0x128D5B8", Offset = "0x128D5B8", VA = "0x128D5B8", Slot = "18")]
	protected virtual void Fail()
	{
	}

	[Token(Token = "0x600275C")]
	[Address(RVA = "0x1284EB8", Offset = "0x1284EB8", VA = "0x1284EB8")]
	protected VrMotionInput()
	{
	}
}
[Token(Token = "0x20006EA")]
public class VrMotionInputController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20006EB")]
	private struct MotionInputSet
	{
		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VrMotionInputWorldInteraction worldInteraction;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public VrMotionInputFreeWalking freeWalking;
	}

	[Token(Token = "0x20006EC")]
	public enum LocomotionDisableSource
	{
		[Token(Token = "0x40020D6")]
		HSM,
		[Token(Token = "0x40020D7")]
		FSM
	}

	[Token(Token = "0x40020CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly List<VrMotionInput> m_motionList;

	[Token(Token = "0x40020CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MotionInputSet m_motionInputSetLeft;

	[Token(Token = "0x40020CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MotionInputSet m_motionInputSetRight;

	[Token(Token = "0x40020CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_motionCount;

	[Token(Token = "0x40020CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_noClipActive;

	[Token(Token = "0x40020D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float m_timeOfNoClipToggle;

	[Token(Token = "0x40020D1")]
	private const KeyCode c_noclipKeyboardButton = KeyCode.N;

	[Token(Token = "0x40020D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private HashSet<LocomotionDisableSource> m_locomotionDisableSources;

	[Token(Token = "0x1700064D")]
	public static bool NoclipActive
	{
		[Token(Token = "0x600275D")]
		[Address(RVA = "0x128D5BC", Offset = "0x128D5BC", VA = "0x128D5BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600275E")]
	[Address(RVA = "0x128D604", Offset = "0x128D604", VA = "0x128D604")]
	public void Initialize(VrLocomotionInputDispatcher locomotionInputDispatcher)
	{
	}

	[Token(Token = "0x600275F")]
	[Address(RVA = "0x128DB58", Offset = "0x128DB58", VA = "0x128DB58")]
	public void SetGlobalMonitoringState(bool globalMonitoringState)
	{
	}

	[Token(Token = "0x6002760")]
	[Address(RVA = "0x128DB64", Offset = "0x128DB64", VA = "0x128DB64")]
	private void Update()
	{
	}

	[Token(Token = "0x6002761")]
	[Address(RVA = "0x128DBEC", Offset = "0x128DBEC", VA = "0x128DBEC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002762")]
	[Address(RVA = "0x128DC74", Offset = "0x128DC74", VA = "0x128DC74")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6002763")]
	[Address(RVA = "0x128A5BC", Offset = "0x128A5BC", VA = "0x128A5BC")]
	public VrMotionInputWorldInteraction GetMotionInput_WorldInteraction(VrHandController handController)
	{
		return null;
	}

	[Token(Token = "0x6002764")]
	[Address(RVA = "0x128DD7C", Offset = "0x128DD7C", VA = "0x128DD7C")]
	public void SetLocomotionAllowed(bool isAllowed, LocomotionDisableSource source, bool forceReset = false)
	{
	}

	[Token(Token = "0x6002765")]
	[Address(RVA = "0x128DE3C", Offset = "0x128DE3C", VA = "0x128DE3C")]
	private void RefreshLocomotionAllowed()
	{
	}

	[Token(Token = "0x6002766")]
	[Address(RVA = "0x128DF7C", Offset = "0x128DF7C", VA = "0x128DF7C")]
	public VrMotionInputController()
	{
	}
}
[Token(Token = "0x20006ED")]
public class VrMotionInputWatch : VrMotionInput
{
	[Token(Token = "0x40020D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[UnityEngine.Tooltip("Where to bind the watch to")]
	[SerializeField]
	private Transform m_attachmentPoint;

	[Token(Token = "0x40020D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[UnityEngine.Tooltip("the watch prefab")]
	private GameObject m_watchPrefab;

	[Token(Token = "0x6002767")]
	[Address(RVA = "0x128E054", Offset = "0x128E054", VA = "0x128E054", Slot = "7")]
	public override void Initialize(VrHand hand)
	{
	}

	[Token(Token = "0x6002768")]
	[Address(RVA = "0x128E164", Offset = "0x128E164", VA = "0x128E164", Slot = "8")]
	protected override void StartProcessing()
	{
	}

	[Token(Token = "0x6002769")]
	[Address(RVA = "0x128E1F8", Offset = "0x128E1F8", VA = "0x128E1F8", Slot = "9")]
	protected override void StopProcessing()
	{
	}

	[Token(Token = "0x600276A")]
	[Address(RVA = "0x128E28C", Offset = "0x128E28C", VA = "0x128E28C")]
	public VrMotionInputWatch()
	{
	}
}
[Token(Token = "0x20006EE")]
[RequireComponent(typeof(BoxCollider))]
public class ButtonMechanismLockVolume : CachedMonoBehaviour
{
	[Token(Token = "0x40020DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly HashSet<Collider> m_colliders;

	[Token(Token = "0x1700064E")]
	public bool IsPlayerInside
	{
		[Token(Token = "0x600276E")]
		[Address(RVA = "0x128E440", Offset = "0x128E440", VA = "0x128E440")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600276B")]
	[Address(RVA = "0x128E294", Offset = "0x128E294", VA = "0x128E294")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600276C")]
	[Address(RVA = "0x128E360", Offset = "0x128E360", VA = "0x128E360")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600276D")]
	[Address(RVA = "0x128E3F0", Offset = "0x128E3F0", VA = "0x128E3F0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600276F")]
	[Address(RVA = "0x128E490", Offset = "0x128E490", VA = "0x128E490")]
	public ButtonMechanismLockVolume()
	{
	}
}
[Token(Token = "0x20006EF")]
[CreateAssetMenu(menuName = "Battle Sister/Interaction/Global Climb Properties")]
public class GlobalClimbProperties : SingletonScriptableObject<GlobalClimbProperties>
{
	[Token(Token = "0x40020DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("The maximum speed at which the player can throw themselves off of climbables by moving their hand as they let go. Setting this to zero effectively disables flings.")]
	private float m_maxFlingSpeed;

	[Token(Token = "0x40020DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Min(0f)]
	[UnityEngine.Tooltip("Break the climb if the player's real world hand moves at least this far from where their virtual hand is holding on as a result of trying to climb through objects. Set to zero to break immediately.")]
	private float m_breakDistance;

	[Token(Token = "0x40020DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Multiplier applied when flinging. The X axis is the number of degrees between the up axis and the direction we've been flung in.")]
	[SerializeField]
	private AnimationCurve m_flingSpeedMultiplierCurve;

	[Token(Token = "0x40020DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("We'll assume the player is trying to fling themselves directly upwards if their fling velocity is no more than this many degrees from up. Larger values are more generous.")]
	[SerializeField]
	[Range(0f, 90f)]
	private float m_upwardFlingThresholdAngle;

	[Token(Token = "0x40020DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("The amount by which we'll push the player's fling velocity up if it looks like they're trying to go up. 0 means we don't adjust it at all, 1 means we'll force them to go straight up the axis.")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_upwardFlingCorrectionStrength;

	[Token(Token = "0x1700064F")]
	public float MaxFlingSpeed
	{
		[Token(Token = "0x6002770")]
		[Address(RVA = "0x128E518", Offset = "0x128E518", VA = "0x128E518")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000650")]
	public float BreakDistance
	{
		[Token(Token = "0x6002771")]
		[Address(RVA = "0x128E520", Offset = "0x128E520", VA = "0x128E520")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000651")]
	public float UpwardFlingThresholdAngle
	{
		[Token(Token = "0x6002773")]
		[Address(RVA = "0x128E544", Offset = "0x128E544", VA = "0x128E544")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000652")]
	public float UpwardFlingCorrectionStrength
	{
		[Token(Token = "0x6002774")]
		[Address(RVA = "0x128E54C", Offset = "0x128E54C", VA = "0x128E54C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6002772")]
	[Address(RVA = "0x128E528", Offset = "0x128E528", VA = "0x128E528")]
	public float GetFlingMultiplier(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x6002775")]
	[Address(RVA = "0x128E554", Offset = "0x128E554", VA = "0x128E554")]
	public GlobalClimbProperties()
	{
	}
}
[Token(Token = "0x20006F0")]
[CreateAssetMenu(menuName = "Battle Sister/Interaction/Global Hold Properties")]
public class GlobalHoldProperties : SingletonScriptableObject<GlobalHoldProperties>
{
	[Serializable]
	[Token(Token = "0x20006F1")]
	public struct ResolutionData
	{
		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Min(0f)]
		[SerializeField]
		[UnityEngine.Tooltip("The proportional control constant (counters immediate error)")]
		[Header("Translation")]
		private float m_proportionalControl;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[UnityEngine.Tooltip("The integral control constant (counters cumulative error)")]
		[Min(0f)]
		[SerializeField]
		private float m_integralControl;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[UnityEngine.Tooltip("The derivative control constant (counters oscillation)")]
		[SerializeField]
		[Min(0f)]
		private float m_derivativeControl;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[Min(0f)]
		[SerializeField]
		[UnityEngine.Tooltip("Upper limit on the magnitude of the force applied to the rigid body in any fixed frame - set to \"Infinity\" to remove the limit.")]
		private float m_maximumForceMagnitude;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Min(0f)]
		[SerializeField]
		[UnityEngine.Tooltip("Scale of the torque applied to rotate the rigid body towards the desired orientation")]
		[Header("Rotation")]
		private float m_disparityTorque;

		[Token(Token = "0x17000655")]
		public float ProportionalControl
		{
			[Token(Token = "0x6002780")]
			[Address(RVA = "0x128E7E8", Offset = "0x128E7E8", VA = "0x128E7E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000656")]
		public float IntegralControl
		{
			[Token(Token = "0x6002781")]
			[Address(RVA = "0x128E7F0", Offset = "0x128E7F0", VA = "0x128E7F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000657")]
		public float DerivativeControl
		{
			[Token(Token = "0x6002782")]
			[Address(RVA = "0x128E7F8", Offset = "0x128E7F8", VA = "0x128E7F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000658")]
		public float MaximumForceMagitude
		{
			[Token(Token = "0x6002783")]
			[Address(RVA = "0x128E800", Offset = "0x128E800", VA = "0x128E800")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000659")]
		public float DisparityTorque
		{
			[Token(Token = "0x6002784")]
			[Address(RVA = "0x128E808", Offset = "0x128E808", VA = "0x128E808")]
			get
			{
				return default(float);
			}
		}
	}

	[Token(Token = "0x40020E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("All grabs will take this much unscaled time in seconds.")]
	private float m_snapToHandTime;

	[Token(Token = "0x40020E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Maps normalised progress of the lerp (X) to the normalised position of the item between the start and the end (Y) when snapping by distance.")]
	private AnimationCurve m_snapToHandNormPositionByNormProgress;

	[Token(Token = "0x40020E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("When determining average throw velocities, only consider immediate hand speeds above this value.")]
	[SerializeField]
	[Min(0f)]
	[Space]
	private float m_throwThresholdSpeed;

	[Token(Token = "0x40020E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("When throwing, scale the linear speed by this amount.")]
	[Min(0f)]
	[SerializeField]
	private float m_throwLinearSpeedScale;

	[Token(Token = "0x40020E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("When throwing, do not allow the linear speed to rise above this value. Metres per second.")]
	[SerializeField]
	[Min(0f)]
	private float m_throwLinearSpeedMax;

	[Token(Token = "0x40020E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("When throwing, scale the angular speed by this amount.")]
	[Min(0f)]
	[SerializeField]
	private float m_throwAngularSpeedScale;

	[Token(Token = "0x40020E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("When throwing, do not allow the angular speed to rise above this value. Degrees per second.")]
	[Min(0f)]
	[SerializeField]
	private float m_throwAngularSpeedMax;

	[Token(Token = "0x40020E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Min(0f)]
	[Space]
	[UnityEngine.Tooltip("After a throw, adjust the velocity of the thrown object based on the current motion of the hand this many frames after the player lets go. Set to 0 to disable.")]
	[SerializeField]
	private int m_postThrowVelocityAdjustmentFrameDuration;

	[Token(Token = "0x40020E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0f, 1f)]
	[SerializeField]
	[UnityEngine.Tooltip("The higher this value, the more of an influence the post-throw velocity check will have on the current velocity.")]
	private float m_postThrowVelocityAdjustmentLerpFactor;

	[Token(Token = "0x40020E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Space]
	[UnityEngine.Tooltip("After a collision stops, we'll keep physics behaviour going until this many seconds have passed without any contacts.")]
	[SerializeField]
	[Min(0f)]
	private float m_contactLingerDuration;

	[Token(Token = "0x40020EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Standard resolution settings")]
	[UnityEngine.Tooltip("Used to resolve held objects that are touching any number of colliders.")]
	[SerializeField]
	private ResolutionData m_contactingResolutionData;

	[Token(Token = "0x40020EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[UnityEngine.Tooltip("Used to resolve held objects that are not touching anything.")]
	[SerializeField]
	private ResolutionData m_uncontactingResolutionData;

	[Token(Token = "0x40020EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Used to resolve the player's hand colliders when they get separated from the hand anchors.")]
	[SerializeField]
	private ResolutionData m_handResolutionData;

	[Token(Token = "0x40020ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	[UnityEngine.Tooltip("Used to resolve held objects while the player is climbing.")]
	[Header("Special navigation resolution settings")]
	private ResolutionData m_climbingResolutionData;

	[Token(Token = "0x40020EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[UnityEngine.Tooltip("Used to move held items when mounted on a harness.")]
	[SerializeField]
	private ResolutionData m_harnessItemResolutionData;

	[Token(Token = "0x40020EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	[UnityEngine.Tooltip("Used to move the entire player rig towards a mounted harness.")]
	private ResolutionData m_harnessBodyResolutionData;

	[Token(Token = "0x17000653")]
	public float SnapToHandTime
	{
		[Token(Token = "0x6002778")]
		[Address(RVA = "0x128E630", Offset = "0x128E630", VA = "0x128E630")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000654")]
	public float ContactLingerDuration
	{
		[Token(Token = "0x600277A")]
		[Address(RVA = "0x128E650", Offset = "0x128E650", VA = "0x128E650")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6002776")]
	[Address(RVA = "0x128E5DC", Offset = "0x128E5DC", VA = "0x128E5DC")]
	public void GetGlobalThrowProperties(out float throwThresholdSpeed, out float throwLinearSpeedScale, out float throwLinearSpeedMax, out float throwAngularSpeedScale, out float throwAngularSpeedMax)
	{
	}

	[Token(Token = "0x6002777")]
	[Address(RVA = "0x128E614", Offset = "0x128E614", VA = "0x128E614")]
	public float GetSnapToHandNormalizedPosition(float normalizedProgress)
	{
		return default(float);
	}

	[Token(Token = "0x6002779")]
	[Address(RVA = "0x128E638", Offset = "0x128E638", VA = "0x128E638")]
	public void GetPostThrowAdjustmentProperties(out float postThrowVelocityAdjustmentFrameDuration, out float postThrowVelocityAdjustmentLerpFactor)
	{
	}

	[Token(Token = "0x600277B")]
	[Address(RVA = "0x128E658", Offset = "0x128E658", VA = "0x128E658")]
	public ResolutionData GetContactResolutionData(bool hasAnyContacts)
	{
		return default(ResolutionData);
	}

	[Token(Token = "0x600277C")]
	[Address(RVA = "0x128E710", Offset = "0x128E710", VA = "0x128E710")]
	public ResolutionData GetHandResolutionData()
	{
		return default(ResolutionData);
	}

	[Token(Token = "0x600277D")]
	[Address(RVA = "0x128E724", Offset = "0x128E724", VA = "0x128E724")]
	public ResolutionData GetItemHarnessResolutionData()
	{
		return default(ResolutionData);
	}

	[Token(Token = "0x600277E")]
	[Address(RVA = "0x128E738", Offset = "0x128E738", VA = "0x128E738")]
	public ResolutionData GetBodyHarnessResolutionData()
	{
		return default(ResolutionData);
	}

	[Token(Token = "0x600277F")]
	[Address(RVA = "0x128E74C", Offset = "0x128E74C", VA = "0x128E74C")]
	public GlobalHoldProperties()
	{
	}
}
[Token(Token = "0x20006F2")]
public abstract class GraspMarker : CachedMonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20006F3")]
	public enum HandIdentifier
	{
		[Token(Token = "0x4002111")]
		Neither,
		[Token(Token = "0x4002112")]
		Left,
		[Token(Token = "0x4002113")]
		Right
	}

	[Serializable]
	[Token(Token = "0x20006F4")]
	public enum PoseInput
	{
		[Token(Token = "0x4002115")]
		Trigger,
		[Token(Token = "0x4002116")]
		PrimaryButton
	}

	[Token(Token = "0x20006F5")]
	private enum TriggerEvent
	{
		[Token(Token = "0x4002118")]
		None,
		[Token(Token = "0x4002119")]
		Up,
		[Token(Token = "0x400211A")]
		Down
	}

	[Token(Token = "0x40020F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, the object will snap straight to where the player's actual real world hand is.")]
	private bool m_snapHandToAnchor;

	[Token(Token = "0x40020F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, it won't be possible to grasp this marker at all. Useful if you just care about hovering.")]
	private bool m_completelyDisableGrasps;

	[Token(Token = "0x40020F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	[UnityEngine.Tooltip("If enabled, the hand will be flipped over 180 degrees around the forward (blue) axis if the player tries to grab this marker upside down.")]
	[SerializeField]
	protected bool m_allowHandFlip;

	[Token(Token = "0x40020F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("When grabbing with the selected hand, it will always be rolled 180 degrees in Z. This stacks on top of the option above.")]
	[SerializeField]
	protected HandIdentifier m_invertHand;

	[Token(Token = "0x40020F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("If set to a hand, only that hand will be able to grab this marker.")]
	[SerializeField]
	private HandIdentifier m_filterToHand;

	[Token(Token = "0x40020FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("The input used to lerp to the secondary hand pose on this grasp marker if there is one.")]
	[SerializeField]
	private PoseInput m_secondaryPoseInput;

	[Token(Token = "0x40020FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("Determines if this grasp can take priority over other nearby grasp markers. Useful for items such as revolvers, where the markers are very close and you always want the trigger to be grabbed first.")]
	[SerializeField]
	[FormerlySerializedAs("m_isPrimaryGrasp")]
	private bool m_isPrioritizedGrasp;

	[Token(Token = "0x40020FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, this marker will have no effect on the object if it's being held by the secondary hand.")]
	private bool m_isUntrackedAsSecondary;

	[Token(Token = "0x40020FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, when this marker is grabbed with both hands, whichever hand is closer to the marker root will become the primary hand.")]
	private bool m_twoHandedGraspPrimaryByDistance;

	[Token(Token = "0x40020FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, it won't be possible to grab this at range with a hand scan - it will only be grabbable close up.")]
	private bool m_ignoreHandScans;

	[Token(Token = "0x40020FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[UnityEngine.Tooltip("A scriptable object defining how we'll override the physics behaviour of this item when it is released. If unset, we'll never override physics behaviour.")]
	private ThrowOverrideDefinition m_throwOverrideDefinition;

	[Token(Token = "0x4002100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("m_avoidDistance")]
	[UnityEngine.Tooltip("If grabbing with the other hand within this distance of the first, force a swap, even if we're configured to grab with both hands. Useful for long poles/spears etc. Only applicable if we can grab this object with both hands at once.")]
	[Min(0f)]
	private float m_swapGrabRadius;

	[Token(Token = "0x4002101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float m_hoverValue;

	[Token(Token = "0x4002102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_hoverLatestFrame;

	[Token(Token = "0x4002103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool m_leftHandCurrentlyFlipped;

	[Token(Token = "0x4002104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool m_rightHandCurrentlyFlipped;

	[Token(Token = "0x4002105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private HandPoseHelper m_activeHandPoseHelper;

	[Token(Token = "0x4002106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private HandPoseData m_handPoseData;

	[Token(Token = "0x4002107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool m_hasRuntimeHandPoseData;

	[Token(Token = "0x4002108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform m_movingGraspTransformLeft;

	[Token(Token = "0x4002109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform m_movingGraspTransformRight;

	[Token(Token = "0x400210A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<VrHand> m_attachedHands;

	[Token(Token = "0x400210B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private WorldInteraction m_parentWorldInteraction;

	[Token(Token = "0x400210C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private VrItem m_parentItem;

	[Token(Token = "0x400210D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool m_previousTriggerValue;

	[Token(Token = "0x400210E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEvent OnTriggerDown;

	[Token(Token = "0x400210F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public UnityEvent OnTriggerUp;

	[Token(Token = "0x1700065A")]
	public bool CompletelyDisableGrasps
	{
		[Token(Token = "0x6002785")]
		[Address(RVA = "0x128E810", Offset = "0x128E810", VA = "0x128E810")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700065B")]
	public PoseInput SecondaryPoseInput
	{
		[Token(Token = "0x6002786")]
		[Address(RVA = "0x128E818", Offset = "0x128E818", VA = "0x128E818")]
		get
		{
			return default(PoseInput);
		}
	}

	[Token(Token = "0x1700065C")]
	public bool IsPrioritizedGrasp
	{
		[Token(Token = "0x6002787")]
		[Address(RVA = "0x128E820", Offset = "0x128E820", VA = "0x128E820")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700065D")]
	public bool IsUntrackedAsSecondary
	{
		[Token(Token = "0x6002788")]
		[Address(RVA = "0x128E828", Offset = "0x128E828", VA = "0x128E828")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700065E")]
	public bool TwoHandedGraspPrimaryByDistance
	{
		[Token(Token = "0x6002789")]
		[Address(RVA = "0x128E830", Offset = "0x128E830", VA = "0x128E830")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700065F")]
	public bool IgnoreHandScans
	{
		[Token(Token = "0x600278A")]
		[Address(RVA = "0x128E838", Offset = "0x128E838", VA = "0x128E838")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000660")]
	public ThrowOverrideDefinition ThrowOverrideDefinition
	{
		[Token(Token = "0x600278B")]
		[Address(RVA = "0x128E840", Offset = "0x128E840", VA = "0x128E840")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000661")]
	public float SwapGrabRadius
	{
		[Token(Token = "0x600278C")]
		[Address(RVA = "0x128E848", Offset = "0x128E848", VA = "0x128E848")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000662")]
	public float HoverValue
	{
		[Token(Token = "0x600278D")]
		[Address(RVA = "0x128A854", Offset = "0x128A854", VA = "0x128A854")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000663")]
	public List<VrHand> AttachedHands
	{
		[Token(Token = "0x600278E")]
		[Address(RVA = "0x128E850", Offset = "0x128E850", VA = "0x128E850")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000664")]
	public WorldInteraction ParentWorldInteraction
	{
		[Token(Token = "0x600278F")]
		[Address(RVA = "0x128E858", Offset = "0x128E858", VA = "0x128E858")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002790")]
		[Address(RVA = "0x128E860", Offset = "0x128E860", VA = "0x128E860")]
		set
		{
		}
	}

	[Token(Token = "0x17000665")]
	public VrItem ParentItem
	{
		[Token(Token = "0x6002791")]
		[Address(RVA = "0x128E8D8", Offset = "0x128E8D8", VA = "0x128E8D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000666")]
	public abstract Quaternion ToFreedomOrientationSpace
	{
		[Token(Token = "0x6002792")]
		get;
	}

	[Token(Token = "0x17000667")]
	public bool IsHeld
	{
		[Token(Token = "0x60027A6")]
		[Address(RVA = "0x128F8BC", Offset = "0x128F8BC", VA = "0x128F8BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002793")]
	[Address(RVA = "0x128E8E0", Offset = "0x128E8E0", VA = "0x128E8E0", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6002794")]
	[Address(RVA = "0x128EB98", Offset = "0x128EB98", VA = "0x128EB98")]
	public Matrix4x4[] GetGraspPoseData(float poseLerp)
	{
		return null;
	}

	[Token(Token = "0x6002795")]
	[Address(RVA = "0x128EA34", Offset = "0x128EA34", VA = "0x128EA34")]
	private Transform SetupGraspTransform(string gameObjectName)
	{
		return null;
	}

	[Token(Token = "0x6002796")]
	[Address(RVA = "0x128EBEC", Offset = "0x128EBEC", VA = "0x128EBEC")]
	public Transform GetGraspTransformForHand(VrHandController controller)
	{
		return null;
	}

	[Token(Token = "0x6002797")]
	[Address(RVA = "0x128EC04", Offset = "0x128EC04", VA = "0x128EC04")]
	public bool CanGraspWithHand(VrHandController controller)
	{
		return default(bool);
	}

	[Token(Token = "0x6002798")]
	[Address(RVA = "0x128EC80", Offset = "0x128EC80", VA = "0x128EC80")]
	public bool TryApproachHand(VrHand hand, bool approachPosition, bool approachRotation, bool refreshHandFlip)
	{
		return default(bool);
	}

	[Token(Token = "0x6002799")]
	protected abstract bool ApproachHand(VrHand hand, bool approachPosition, bool approachRotation, bool refreshHandFlip);

	[Token(Token = "0x600279A")]
	[Address(RVA = "0x128ECE4", Offset = "0x128ECE4", VA = "0x128ECE4")]
	protected Quaternion AdjustHandRotationForFlip(Quaternion baseRotation, Transform targetTransform, VrHandController handController)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600279B")]
	[Address(RVA = "0x128EF60", Offset = "0x128EF60", VA = "0x128EF60", Slot = "7")]
	public virtual Vector3 GetLocalForwardAxis()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600279C")]
	[Address(RVA = "0x128EFA4", Offset = "0x128EFA4", VA = "0x128EFA4", Slot = "8")]
	public virtual Vector3 GetLocalUpAxis()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600279D")]
	[Address(RVA = "0x128EFE8", Offset = "0x128EFE8", VA = "0x128EFE8")]
	protected bool IsHandCurrentlyFlipped(VrHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x600279E")]
	[Address(RVA = "0x128F08C", Offset = "0x128F08C", VA = "0x128F08C")]
	public void AssignHand(VrHand hand)
	{
	}

	[Token(Token = "0x600279F")]
	[Address(RVA = "0x128F1DC", Offset = "0x128F1DC", VA = "0x128F1DC")]
	public void ClearHands()
	{
	}

	[Token(Token = "0x60027A0")]
	[Address(RVA = "0x128F360", Offset = "0x128F360", VA = "0x128F360")]
	public void ClearHand(VrHand hand)
	{
	}

	[Token(Token = "0x60027A1")]
	[Address(RVA = "0x128F4D0", Offset = "0x128F4D0", VA = "0x128F4D0")]
	protected float SignAngle(float angDegs)
	{
		return default(float);
	}

	[Token(Token = "0x60027A2")]
	[Address(RVA = "0x128F4F0", Offset = "0x128F4F0", VA = "0x128F4F0")]
	public void CheckForTriggerEvents()
	{
	}

	[Token(Token = "0x60027A3")]
	[Address(RVA = "0x128F530", Offset = "0x128F530", VA = "0x128F530")]
	private TriggerEvent GetCurrentTriggerEvent()
	{
		return default(TriggerEvent);
	}

	[Token(Token = "0x60027A4")]
	[Address(RVA = "0x128F7E4", Offset = "0x128F7E4", VA = "0x128F7E4")]
	public void RecordHoverValue(float hoverValue)
	{
	}

	[Token(Token = "0x60027A5")]
	[Address(RVA = "0x128F864", Offset = "0x128F864", VA = "0x128F864")]
	public bool IsHeldByHand(VrHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x60027A7")]
	[Address(RVA = "0x128F90C", Offset = "0x128F90C", VA = "0x128F90C")]
	public static int FindGraspMarkerIndex(GraspMarker marker, IEnumerable<GraspMarker> graspMarkers)
	{
		return default(int);
	}

	[Token(Token = "0x60027A8")]
	[Address(RVA = "0x128FC80", Offset = "0x128FC80", VA = "0x128FC80")]
	protected GraspMarker()
	{
	}
}
[Token(Token = "0x20006F6")]
public class GraspMarkerLinear : GraspMarker
{
	[Token(Token = "0x400211B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private bool m_freePositionX;

	[Token(Token = "0x400211C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[SerializeField]
	private bool m_freePositionY;

	[Token(Token = "0x400211D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
	[SerializeField]
	private bool m_freePositionZ;

	[Token(Token = "0x400211E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private Vector3 m_positionDegreesOfFreedom;

	[Token(Token = "0x400211F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[UnityEngine.Tooltip("If ticked, scale will affect degrees of freedom for position.")]
	[SerializeField]
	private bool m_scaleDegreesOfFreedom;

	[Token(Token = "0x4002120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	[SerializeField]
	private bool m_freeRotationX;

	[Token(Token = "0x4002121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
	[SerializeField]
	private bool m_freeRotationY;

	[Token(Token = "0x4002122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
	[SerializeField]
	private bool m_freeRotationZ;

	[Token(Token = "0x4002123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[SerializeField]
	private Vector3 m_rotationDegreesOfFreedomMin;

	[Token(Token = "0x4002124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private Vector3 m_rotationDegreesOfFreedomMax;

	[Token(Token = "0x4002125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[SerializeField]
	private Vector3 m_forwardVector;

	[Token(Token = "0x4002126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private Vector3 m_upVector;

	[Token(Token = "0x4002127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private Vector3 m_rightVector;

	[Token(Token = "0x4002128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[UnityEngine.Tooltip("If enabled, the held object will slip from the player's hand if the grip pressure is between two limits.")]
	[SerializeField]
	private bool m_slipFromHand;

	[Token(Token = "0x4002129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	[SerializeField]
	private float m_gripLowerLimit;

	[Token(Token = "0x400212A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private float m_gripUpperLimit;

	[Token(Token = "0x17000668")]
	public override Quaternion ToFreedomOrientationSpace
	{
		[Token(Token = "0x60027A9")]
		[Address(RVA = "0x128FD18", Offset = "0x128FD18", VA = "0x128FD18", Slot = "4")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000669")]
	private Vector3 PositionDegreesOfFreedomScaled
	{
		[Token(Token = "0x60027AA")]
		[Address(RVA = "0x128FD30", Offset = "0x128FD30", VA = "0x128FD30")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x60027AB")]
	[Address(RVA = "0x128FDB8", Offset = "0x128FDB8", VA = "0x128FDB8", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60027AC")]
	[Address(RVA = "0x12900C4", Offset = "0x12900C4", VA = "0x12900C4", Slot = "6")]
	protected override bool ApproachHand(VrHand hand, bool approachPosition, bool approachRotation, bool refreshHandFlip)
	{
		return default(bool);
	}

	[Token(Token = "0x60027AD")]
	[Address(RVA = "0x12909EC", Offset = "0x12909EC", VA = "0x12909EC", Slot = "7")]
	public override Vector3 GetLocalForwardAxis()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60027AE")]
	[Address(RVA = "0x12909F8", Offset = "0x12909F8", VA = "0x12909F8", Slot = "8")]
	public override Vector3 GetLocalUpAxis()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60027AF")]
	[Address(RVA = "0x129088C", Offset = "0x129088C", VA = "0x129088C")]
	private Vector3 CalculateFreedomPositionOffset(float maxFreedomInAxis, Vector3 targetPositionLocal, Vector3 projectionVector)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60027B0")]
	[Address(RVA = "0x1290A08", Offset = "0x1290A08", VA = "0x1290A08")]
	public void SlipFromHand(VrHand hand)
	{
	}

	[Token(Token = "0x60027B1")]
	[Address(RVA = "0x1290EB4", Offset = "0x1290EB4", VA = "0x1290EB4")]
	private float CalculateSlipInOneDimension(Vector3 gravityVector, Vector3 localObjectVector, float fixedDeltaTime)
	{
		return default(float);
	}

	[Token(Token = "0x60027B2")]
	[Address(RVA = "0x1290EDC", Offset = "0x1290EDC", VA = "0x1290EDC")]
	public GraspMarkerLinear()
	{
	}
}
[Token(Token = "0x20006F7")]
public class GraspMarkerRadial : GraspMarker
{
	[Token(Token = "0x400212B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[UnityEngine.Tooltip("A vector that is a normal to our plane (in local space). This should normally point inward through the circle.")]
	private Vector3 m_normal;

	[Token(Token = "0x400212C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[SerializeField]
	[UnityEngine.Tooltip("A vector that is a tangent to our plane (in local space). This should normally point to the right of the circle.")]
	private Vector3 m_tangent;

	[Token(Token = "0x400212D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private Vector3 m_localOriginOffset;

	[Token(Token = "0x400212E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private Transform m_testProjection;

	[Token(Token = "0x1700066A")]
	public override Quaternion ToFreedomOrientationSpace
	{
		[Token(Token = "0x60027B3")]
		[Address(RVA = "0x1290F7C", Offset = "0x1290F7C", VA = "0x1290F7C", Slot = "4")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x60027B4")]
	[Address(RVA = "0x1290FC0", Offset = "0x1290FC0", VA = "0x1290FC0", Slot = "6")]
	protected override bool ApproachHand(VrHand hand, bool approachPosition, bool approachRotation, bool refreshHandFlip)
	{
		return default(bool);
	}

	[Token(Token = "0x60027B5")]
	[Address(RVA = "0x1291234", Offset = "0x1291234", VA = "0x1291234")]
	private Vector3 CalculateClosestPositionOnCircle(Vector3 worldPosition, out float projectionAngle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60027B6")]
	[Address(RVA = "0x1291630", Offset = "0x1291630", VA = "0x1291630")]
	public GraspMarkerRadial()
	{
	}
}
[Token(Token = "0x20006F8")]
public class HandPoseData : ScriptableObject
{
	[Token(Token = "0x400212F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("m_bonePoses")]
	private Matrix4x4[] m_primaryPose;

	[Token(Token = "0x4002130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Matrix4x4[] m_secondaryPose;

	[Token(Token = "0x60027B7")]
	[Address(RVA = "0x128EBC4", Offset = "0x128EBC4", VA = "0x128EBC4")]
	public Matrix4x4[] GetBonePoses(float blendValue)
	{
		return null;
	}

	[Token(Token = "0x60027B8")]
	[Address(RVA = "0x12916C0", Offset = "0x12916C0", VA = "0x12916C0")]
	public Matrix4x4[] GetPrimaryPose()
	{
		return null;
	}

	[Token(Token = "0x60027B9")]
	[Address(RVA = "0x12916C8", Offset = "0x12916C8", VA = "0x12916C8")]
	public Matrix4x4[] GetSecondaryPose()
	{
		return null;
	}

	[Token(Token = "0x60027BA")]
	[Address(RVA = "0x12916D0", Offset = "0x12916D0", VA = "0x12916D0")]
	public HandPoseData()
	{
	}
}
[Token(Token = "0x20006F9")]
public class HandPoseHelper : MonoBehaviour
{
	[Token(Token = "0x4002131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_root;

	[Token(Token = "0x4002132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3? m_baseScale;

	[Token(Token = "0x4002133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int m_currentBoneIndex;

	[Token(Token = "0x4002134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool m_previewingLeft;

	[Token(Token = "0x4002135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool m_previewingInverted;

	[Token(Token = "0x4002136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 m_localInversionAxis;

	[Token(Token = "0x1700066B")]
	public Transform Root
	{
		[Token(Token = "0x60027BB")]
		[Address(RVA = "0x12916D8", Offset = "0x12916D8", VA = "0x12916D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700066C")]
	public bool IsPreviewingLeft
	{
		[Token(Token = "0x60027C3")]
		[Address(RVA = "0x1291BA0", Offset = "0x1291BA0", VA = "0x1291BA0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700066D")]
	public bool IsPreviewingInverted
	{
		[Token(Token = "0x60027C4")]
		[Address(RVA = "0x1291BA8", Offset = "0x1291BA8", VA = "0x1291BA8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60027BC")]
	[Address(RVA = "0x12916E0", Offset = "0x12916E0", VA = "0x12916E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60027BD")]
	[Address(RVA = "0x1291798", Offset = "0x1291798", VA = "0x1291798")]
	public void ApplyPoseData(Matrix4x4[] data)
	{
	}

	[Token(Token = "0x60027BE")]
	[Address(RVA = "0x1291974", Offset = "0x1291974", VA = "0x1291974")]
	public void InitializePreview(bool left, bool invert, Vector3 invertAxis)
	{
	}

	[Token(Token = "0x60027BF")]
	[Address(RVA = "0x1291AE8", Offset = "0x1291AE8", VA = "0x1291AE8")]
	public void SetPreviewingLeft(bool left)
	{
	}

	[Token(Token = "0x60027C0")]
	[Address(RVA = "0x1291AF4", Offset = "0x1291AF4", VA = "0x1291AF4")]
	public void SetPreviewingInverted(bool invert)
	{
	}

	[Token(Token = "0x60027C1")]
	[Address(RVA = "0x1291990", Offset = "0x1291990", VA = "0x1291990")]
	private void RefreshPreview()
	{
	}

	[Token(Token = "0x60027C2")]
	[Address(RVA = "0x1291B00", Offset = "0x1291B00", VA = "0x1291B00")]
	private void EnsureBaseScale()
	{
	}

	[Token(Token = "0x60027C5")]
	[Address(RVA = "0x1291818", Offset = "0x1291818", VA = "0x1291818")]
	private void ApplyPoseData(Transform joint, Matrix4x4[] dataIn)
	{
	}

	[Token(Token = "0x60027C6")]
	[Address(RVA = "0x1291BB0", Offset = "0x1291BB0", VA = "0x1291BB0")]
	public Matrix4x4[] ExtractPoseData()
	{
		return null;
	}

	[Token(Token = "0x60027C7")]
	[Address(RVA = "0x1291C5C", Offset = "0x1291C5C", VA = "0x1291C5C")]
	private void ExtractPoseData(Transform joint, ref List<Matrix4x4> dataOut)
	{
	}

	[Token(Token = "0x60027C8")]
	[Address(RVA = "0x1291EB4", Offset = "0x1291EB4", VA = "0x1291EB4")]
	public HandPoseHelper()
	{
	}
}
[Token(Token = "0x20006FA")]
public class InteractionSelector : CachedMonoBehaviour
{
	[Token(Token = "0x20006FB")]
	private struct HoverData
	{
		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float weight;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 positionDelta;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Quaternion rotationDelta;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix4x4[] poseData;
	}

	[Token(Token = "0x4002137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("The maximum distance from which we can actually interact with world interactive objects near this hand.")]
	[SerializeField]
	private float m_grabInteractionRadius;

	[Token(Token = "0x4002138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[UnityEngine.Tooltip("The maximum distance from which we can detect world interactive objects near this hand.")]
	private float m_grabDetectionRadius;

	[Token(Token = "0x4002139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[UnityEngine.Tooltip("An offset to apply to the origin position used by the grab interaction and grab detection radii.")]
	private Vector3 m_grabOriginOffset;

	[Token(Token = "0x400213A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	protected bool m_renderGizmos;

	[Token(Token = "0x400213B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_proximityCheckLayer;

	[Token(Token = "0x400213C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private VrHand m_hand;

	[Token(Token = "0x400213D")]
	private const int c_bufferSize = 16;

	[Token(Token = "0x400213E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Collider[] s_detectionRangeColliderBuffer;

	[Token(Token = "0x400213F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Collider[] s_interactionRangeColliderBuffer;

	[Token(Token = "0x4002140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private WorldInteraction[] m_detectionRangeWorldInteractionBuffer;

	[Token(Token = "0x4002141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int m_detectionRangeWorldInteractionCount;

	[Token(Token = "0x4002142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private WorldInteraction[] m_interactionRangeWorldInteractionBuffer;

	[Token(Token = "0x4002143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_interactionRangeWorldInteractionCount;

	[Token(Token = "0x4002144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static HoverData[] s_hoverDataBuffer;

	[Token(Token = "0x4002145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<KeyValuePair<GraspMarker, float>> m_hoverMarkers;

	[Token(Token = "0x4002146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<WorldInteraction> m_prioritizedInteractions;

	[Token(Token = "0x4002147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_rangedGrab;

	[Token(Token = "0x4002148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private HashSet<WorldInteraction> m_worldInteractionsSet;

	[Token(Token = "0x1700066E")]
	public float GrabDetectionRadius
	{
		[Token(Token = "0x60027C9")]
		[Address(RVA = "0x1291EBC", Offset = "0x1291EBC", VA = "0x1291EBC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60027CA")]
	[Address(RVA = "0x1291EC4", Offset = "0x1291EC4", VA = "0x1291EC4")]
	public void Initialize(VrHand hand)
	{
	}

	[Token(Token = "0x60027CB")]
	[Address(RVA = "0x12920C8", Offset = "0x12920C8", VA = "0x12920C8")]
	private void UpdateNearbyWorldInteractionBuffers()
	{
	}

	[Token(Token = "0x60027CC")]
	[Address(RVA = "0x1292238", Offset = "0x1292238", VA = "0x1292238")]
	private int PopulateBuffer(ref WorldInteraction[] buffer, Collider[] inputColliders, int inputCollidersCount)
	{
		return default(int);
	}

	[Token(Token = "0x60027CD")]
	[Address(RVA = "0x128C5F0", Offset = "0x128C5F0", VA = "0x128C5F0")]
	public void GetPrioritizedInteractions(out List<WorldInteraction> prioritizedInteractions, out bool rangedGrab)
	{
	}

	[Token(Token = "0x60027CE")]
	[Address(RVA = "0x1292AEC", Offset = "0x1292AEC", VA = "0x1292AEC")]
	public void Process()
	{
	}

	[Token(Token = "0x60027CF")]
	[Address(RVA = "0x1293048", Offset = "0x1293048", VA = "0x1293048")]
	private bool IsReactiveToHandScans(WorldInteraction interactionInVolume)
	{
		return default(bool);
	}

	[Token(Token = "0x60027D0")]
	[Address(RVA = "0x12930C0", Offset = "0x12930C0", VA = "0x12930C0")]
	public void LateProcess()
	{
	}

	[Token(Token = "0x60027D1")]
	[Address(RVA = "0x1293318", Offset = "0x1293318", VA = "0x1293318")]
	private static void HoverMarkers(VrHand hand, in List<KeyValuePair<GraspMarker, float>> markers, float minDistance, float maxDistance)
	{
	}

	[Token(Token = "0x60027D2")]
	[Address(RVA = "0x1293BBC", Offset = "0x1293BBC", VA = "0x1293BBC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60027D3")]
	[Address(RVA = "0x1293BDC", Offset = "0x1293BDC", VA = "0x1293BDC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60027D4")]
	[Address(RVA = "0x1293D74", Offset = "0x1293D74", VA = "0x1293D74")]
	public InteractionSelector()
	{
	}
}
[Token(Token = "0x20006FC")]
public interface IWorldInteractionOffset
{
	[Token(Token = "0x60027D6")]
	void GetCurrentOffset(out Vector3 positionOffset, out Quaternion rotationOffset);
}
[Token(Token = "0x20006FD")]
[CreateAssetMenu(menuName = "Battle Sister/Interaction/Throw Override Definition")]
public class ThrowOverrideDefinition : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20006FE")]
	public class ThrowOverride
	{
		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool m_filterByLinearSpeed;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		[Min(0f)]
		private float m_thresholdLinearSpeed;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_filterByAngularSpeed;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Min(0f)]
		[SerializeField]
		private float m_thresholdAngularSpeed;

		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_enableAutoLockOn;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Min(0f)]
		[SerializeField]
		[UnityEngine.Tooltip("Automatically lock on if the object is thrown towards a target with an Y angle no greater than this (degrees)")]
		private float m_maxAutoLockOnAngle;

		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("Automatically lock on if the object is thrown towards a target with an Y angle no greater than this (degrees)")]
		private float m_maxAutoLockOnXAngle;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Automatically stop auto aim if the target moves horizontally more than X degrees")]
		[SerializeField]
		private float m_maxAutoLockOnXAngleOnAir;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool m_enableVelocityOverride;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[UnityEngine.Tooltip("Multiply the velocity by this factor (2 is double it, 0.5f is half of it)")]
		private float m_increasingSpeedFactor;

		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[UnityEngine.Tooltip("Automatically multiply the velocity by a factor if the object is thrown towards a target with an angle no greater than this (degrees)")]
		private float m_maxVelocityOverrideAngle;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool m_enableAngularVelocityOverride;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The angular velocity to apply when thrown. Set to (0, 0, 0) to disable this and just use the angular velocity of the hand on release.")]
		[SerializeField]
		private Vector3 m_appliedAngularVelocity;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("The difference between the magnitude of the speed given and the speed auto aimed should be less than")]
		[SerializeField]
		private float m_maxSpeedDifference;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_maxVerticalAngleDifference;

		[Token(Token = "0x1700066F")]
		public bool EnableAutoLockOn
		{
			[Token(Token = "0x60027DA")]
			[Address(RVA = "0x1294078", Offset = "0x1294078", VA = "0x1294078")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000670")]
		public float AutoTargetMaxAngle
		{
			[Token(Token = "0x60027DB")]
			[Address(RVA = "0x1294080", Offset = "0x1294080", VA = "0x1294080")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000671")]
		public float AutoTargetMaxXAngle
		{
			[Token(Token = "0x60027DC")]
			[Address(RVA = "0x1294088", Offset = "0x1294088", VA = "0x1294088")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000672")]
		public float MaxAutoLockOnXAngleOnAir
		{
			[Token(Token = "0x60027DD")]
			[Address(RVA = "0x12940A0", Offset = "0x12940A0", VA = "0x12940A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000673")]
		public bool EnableVelocityOverride
		{
			[Token(Token = "0x60027DE")]
			[Address(RVA = "0x12940B8", Offset = "0x12940B8", VA = "0x12940B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000674")]
		public float IncreasingSpeedFactor
		{
			[Token(Token = "0x60027DF")]
			[Address(RVA = "0x12940C0", Offset = "0x12940C0", VA = "0x12940C0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000675")]
		public Vector3? ThrowOverrideAppliedAngularVelocity
		{
			[Token(Token = "0x60027E0")]
			[Address(RVA = "0x12940C8", Offset = "0x12940C8", VA = "0x12940C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000676")]
		public float MaxVerticalAngleDifference
		{
			[Token(Token = "0x60027E1")]
			[Address(RVA = "0x129413C", Offset = "0x129413C", VA = "0x129413C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000677")]
		public float MaxVelocityOverrideAngle
		{
			[Token(Token = "0x60027E2")]
			[Address(RVA = "0x1294144", Offset = "0x1294144", VA = "0x1294144")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000678")]
		public float MaxSpeedDifference
		{
			[Token(Token = "0x60027E3")]
			[Address(RVA = "0x129414C", Offset = "0x129414C", VA = "0x129414C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60027D9")]
		[Address(RVA = "0x1294004", Offset = "0x1294004", VA = "0x1294004")]
		public bool ConditionsSatisfied(Vector3 linearVelocity, Vector3 angularVelocity)
		{
			return default(bool);
		}

		[Token(Token = "0x60027E4")]
		[Address(RVA = "0x1294154", Offset = "0x1294154", VA = "0x1294154")]
		public ThrowOverride()
		{
		}
	}

	[Token(Token = "0x400214D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ThrowOverride[] m_throwOverrides;

	[Token(Token = "0x60027D7")]
	[Address(RVA = "0x1293F48", Offset = "0x1293F48", VA = "0x1293F48")]
	public ThrowOverride SelectOverride(Vector3 linearVelocity, Vector3 angularVelocity)
	{
		return null;
	}

	[Token(Token = "0x60027D8")]
	[Address(RVA = "0x1294070", Offset = "0x1294070", VA = "0x1294070")]
	public ThrowOverrideDefinition()
	{
	}
}
[Token(Token = "0x20006FF")]
[RequireComponent(typeof(BoxCollider))]
public class TouchScreenHintVolume : CachedMonoBehaviour
{
	[Token(Token = "0x400215D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float m_marginWidth;

	[Token(Token = "0x400215E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private HandPoseData m_pointPose;

	[Token(Token = "0x400215F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<VrHandWorldCollider, float> m_interpValues;

	[Token(Token = "0x4002160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 m_triggerHalfSize;

	[Token(Token = "0x4002161")]
	private const float c_forwardPointStartAngle = 80f;

	[Token(Token = "0x4002162")]
	private const float c_forwardPointEndAngle = 50f;

	[Token(Token = "0x60027E5")]
	[Address(RVA = "0x1294170", Offset = "0x1294170", VA = "0x1294170")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60027E6")]
	[Address(RVA = "0x1294294", Offset = "0x1294294", VA = "0x1294294")]
	private void Awake()
	{
	}

	[Token(Token = "0x60027E7")]
	[Address(RVA = "0x1294358", Offset = "0x1294358", VA = "0x1294358")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60027E8")]
	[Address(RVA = "0x12943A8", Offset = "0x12943A8", VA = "0x12943A8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60027E9")]
	[Address(RVA = "0x12948F8", Offset = "0x12948F8", VA = "0x12948F8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60027EA")]
	[Address(RVA = "0x12945F0", Offset = "0x12945F0", VA = "0x12945F0")]
	private float CalculateInterp(VrHandWorldCollider worldCollider)
	{
		return default(float);
	}

	[Token(Token = "0x60027EB")]
	[Address(RVA = "0x1294A88", Offset = "0x1294A88", VA = "0x1294A88")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60027EC")]
	[Address(RVA = "0x1294BEC", Offset = "0x1294BEC", VA = "0x1294BEC")]
	public TouchScreenHintVolume()
	{
	}
}
[Token(Token = "0x2000700")]
public class VrMotionInputWorldInteraction : VrMotionInput
{
	[Token(Token = "0x2000701")]
	[CompilerGenerated]
	private sealed class <RestoreSuspendedInteractionRoutine>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrMotionInputWorldInteraction <>4__this;

		[Token(Token = "0x17000684")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002813")]
			[Address(RVA = "0x12B242C", Offset = "0x12B242C", VA = "0x12B242C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000685")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002815")]
			[Address(RVA = "0x12B2474", Offset = "0x12B2474", VA = "0x12B2474", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002810")]
		[Address(RVA = "0x12B2180", Offset = "0x12B2180", VA = "0x12B2180")]
		[DebuggerHidden]
		public <RestoreSuspendedInteractionRoutine>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x6002811")]
		[Address(RVA = "0x12B21A8", Offset = "0x12B21A8", VA = "0x12B21A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002812")]
		[Address(RVA = "0x12B21AC", Offset = "0x12B21AC", VA = "0x12B21AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002814")]
		[Address(RVA = "0x12B2434", Offset = "0x12B2434", VA = "0x12B2434", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4002163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private WorldInteraction m_activeInteraction;

	[Token(Token = "0x4002164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool m_activeInteractionIsClimb;

	[Token(Token = "0x4002165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private WorldInteraction m_pendingInteraction;

	[Token(Token = "0x4002166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private WorldInteraction m_suspendedInteraction;

	[Token(Token = "0x4002167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GraspMarker m_suspendedPrimaryMarker;

	[Token(Token = "0x4002168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GraspMarker m_suspendedSecondaryMarker;

	[Token(Token = "0x4002169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private VrHandController m_suspendedPrimaryController;

	[Token(Token = "0x400216A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private InteractionSelector m_interactionSelector;

	[Token(Token = "0x400216B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Type m_attemptRegripType;

	[Token(Token = "0x400216C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private InventorySlot_Hand m_inventorySlotHands;

	[Token(Token = "0x400216D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool m_inputUpToDate;

	[Token(Token = "0x400216E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	private bool m_gripStickedOnFocusLost;

	[Token(Token = "0x400216F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
	private bool m_gripLock;

	[Token(Token = "0x4002170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
	private bool m_stopSignal;

	[Token(Token = "0x4002171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool m_startSignal;

	[Token(Token = "0x4002172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	[SerializeField]
	private bool m_onlyHoldOn;

	[Token(Token = "0x4002173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly ProfilerMarker s_marker0;

	[Token(Token = "0x4002174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly ProfilerMarker s_marker1;

	[Token(Token = "0x4002175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly ProfilerMarker s_marker2;

	[Token(Token = "0x4002176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly ProfilerMarker s_marker3;

	[Token(Token = "0x4002177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly ProfilerMarker s_marker4;

	[Token(Token = "0x17000679")]
	public WorldInteraction ActiveInteraction
	{
		[Token(Token = "0x60027ED")]
		[Address(RVA = "0x1294BF4", Offset = "0x1294BF4", VA = "0x1294BF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700067A")]
	public bool HasActiveInteraction
	{
		[Token(Token = "0x60027EE")]
		[Address(RVA = "0x1294BFC", Offset = "0x1294BFC", VA = "0x1294BFC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700067B")]
	public bool CurrentInteractionIsClimb
	{
		[Token(Token = "0x60027EF")]
		[Address(RVA = "0x1294C5C", Offset = "0x1294C5C", VA = "0x1294C5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700067C")]
	public override PartnerFixedOrderPreference FixedOrderPreference
	{
		[Token(Token = "0x60027F0")]
		[Address(RVA = "0x1294C64", Offset = "0x1294C64", VA = "0x1294C64", Slot = "5")]
		get
		{
			return default(PartnerFixedOrderPreference);
		}
	}

	[Token(Token = "0x1700067D")]
	public VrItem CurrentHeldItem
	{
		[Token(Token = "0x60027F1")]
		[Address(RVA = "0x1294C78", Offset = "0x1294C78", VA = "0x1294C78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700067E")]
	public WorldInteraction PendingInteraction
	{
		[Token(Token = "0x60027F2")]
		[Address(RVA = "0x1294D54", Offset = "0x1294D54", VA = "0x1294D54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700067F")]
	public bool StopSignal
	{
		[Token(Token = "0x60027F3")]
		[Address(RVA = "0x1294D5C", Offset = "0x1294D5C", VA = "0x1294D5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000680")]
	public bool StartSignal
	{
		[Token(Token = "0x60027F4")]
		[Address(RVA = "0x1294D64", Offset = "0x1294D64", VA = "0x1294D64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000681")]
	protected override bool AllowedToRun
	{
		[Token(Token = "0x60027F5")]
		[Address(RVA = "0x1294D6C", Offset = "0x1294D6C", VA = "0x1294D6C", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000682")]
	public InteractionSelector InteractionSelector
	{
		[Token(Token = "0x60027F6")]
		[Address(RVA = "0x1294DF0", Offset = "0x1294DF0", VA = "0x1294DF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000683")]
	public bool OnlyHoldOn
	{
		[Token(Token = "0x60027F7")]
		[Address(RVA = "0x1294DF8", Offset = "0x1294DF8", VA = "0x1294DF8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60027F8")]
	[Address(RVA = "0x1294E00", Offset = "0x1294E00", VA = "0x1294E00")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60027F9")]
	[Address(RVA = "0x129500C", Offset = "0x129500C", VA = "0x129500C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60027FA")]
	[Address(RVA = "0x1295280", Offset = "0x1295280", VA = "0x1295280", Slot = "7")]
	public override void Initialize(VrHand hand)
	{
	}

	[Token(Token = "0x60027FB")]
	public void TryRegripInNextFrame<T>() where T : WorldInteraction
	{
	}

	[Token(Token = "0x60027FC")]
	[Address(RVA = "0x129535C", Offset = "0x129535C", VA = "0x129535C", Slot = "14")]
	protected override void LateProcess()
	{
	}

	[Token(Token = "0x60027FD")]
	[Address(RVA = "0x12953E4", Offset = "0x12953E4", VA = "0x12953E4", Slot = "10")]
	protected override void Process()
	{
	}

	[Token(Token = "0x60027FE")]
	[Address(RVA = "0x129648C", Offset = "0x129648C", VA = "0x129648C", Slot = "12")]
	protected override void FixedProcess()
	{
	}

	[Token(Token = "0x60027FF")]
	[Address(RVA = "0x129651C", Offset = "0x129651C", VA = "0x129651C", Slot = "11")]
	protected override void Idle()
	{
	}

	[Token(Token = "0x6002800")]
	[Address(RVA = "0x12962B8", Offset = "0x12962B8", VA = "0x12962B8")]
	public bool TryStartInteractionWithNearestGraspMarker(WorldInteraction interaction, bool isHandScan)
	{
		return default(bool);
	}

	[Token(Token = "0x6002801")]
	[Address(RVA = "0x12965F8", Offset = "0x12965F8", VA = "0x12965F8")]
	public bool TryStartInteraction(WorldInteraction interaction, GraspMarker marker, bool isHandScan)
	{
		return default(bool);
	}

	[Token(Token = "0x6002802")]
	[Address(RVA = "0x1296A70", Offset = "0x1296A70", VA = "0x1296A70")]
	private static bool ShouldStopOtherInteraction(in WorldInteraction interaction, in GraspMarker marker, in VrHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6002803")]
	[Address(RVA = "0x1296E24", Offset = "0x1296E24", VA = "0x1296E24")]
	public void SetOnlyToHoldOn(bool onlyToHoldOn)
	{
	}

	[Token(Token = "0x6002804")]
	[Address(RVA = "0x128A5D4", Offset = "0x128A5D4", VA = "0x128A5D4")]
	public void StopInteracting(bool isSwapping, bool fromGripRelease, bool isKeyInsertion)
	{
	}

	[Token(Token = "0x6002805")]
	[Address(RVA = "0x1296E30", Offset = "0x1296E30", VA = "0x1296E30")]
	public void AbortInteraction()
	{
	}

	[Token(Token = "0x6002806")]
	[Address(RVA = "0x1296E74", Offset = "0x1296E74", VA = "0x1296E74")]
	public void ConfirmInteraction()
	{
	}

	[Token(Token = "0x6002807")]
	[Address(RVA = "0x1296C90", Offset = "0x1296C90", VA = "0x1296C90")]
	private bool OnOtherInteractionStarted(VrMotionInputWorldInteraction other)
	{
		return default(bool);
	}

	[Token(Token = "0x6002808")]
	[Address(RVA = "0x1296F18", Offset = "0x1296F18", VA = "0x1296F18")]
	private void SuspendCurrentInteraction()
	{
	}

	[Token(Token = "0x6002809")]
	[Address(RVA = "0x1297014", Offset = "0x1297014", VA = "0x1297014")]
	[IteratorStateMachine(typeof(<RestoreSuspendedInteractionRoutine>d__60))]
	private IEnumerator RestoreSuspendedInteractionRoutine()
	{
		return null;
	}

	[Token(Token = "0x600280A")]
	[Address(RVA = "0x1297088", Offset = "0x1297088", VA = "0x1297088")]
	public static bool IsPendingInteraction(WorldInteraction interaction)
	{
		return default(bool);
	}

	[Token(Token = "0x600280B")]
	[Address(RVA = "0x1297168", Offset = "0x1297168", VA = "0x1297168")]
	private void OnFocusRefreshed(bool focus)
	{
	}

	[Token(Token = "0x600280C")]
	[Address(RVA = "0x12971B0", Offset = "0x12971B0", VA = "0x12971B0")]
	private void OnInputValuesUpdated(VrHand hand)
	{
	}

	[Token(Token = "0x600280D")]
	[Address(RVA = "0x129727C", Offset = "0x129727C", VA = "0x129727C")]
	public VrMotionInputWorldInteraction()
	{
	}
}
[Token(Token = "0x2000702")]
[DisallowMultipleComponent]
public abstract class WorldInteraction : Poolable
{
	[Token(Token = "0x2000703")]
	private class GraspData
	{
		[Token(Token = "0x2000704")]
		private struct GraspLineSegment
		{
			[Token(Token = "0x40021B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Vector3 m_start;

			[Token(Token = "0x40021B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly Vector3 m_end;

			[Token(Token = "0x40021B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly Vector3 m_up;

			[Token(Token = "0x40021B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private readonly Quaternion m_zeroLengthFacing;

			[Token(Token = "0x170006A6")]
			public Vector3 MidPoint
			{
				[Token(Token = "0x6002869")]
				[Address(RVA = "0x12B7C54", Offset = "0x12B7C54", VA = "0x12B7C54")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170006A7")]
			public Quaternion Facing
			{
				[Token(Token = "0x600286A")]
				[Address(RVA = "0x12B7BF8", Offset = "0x12B7BF8", VA = "0x12B7BF8")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x600286B")]
			[Address(RVA = "0x12B7930", Offset = "0x12B7930", VA = "0x12B7930")]
			public GraspLineSegment(Vector3 segmentStart, Vector3 segmentEnd, Vector3 segmentUp)
			{
			}

			[Token(Token = "0x600286C")]
			[Address(RVA = "0x12B799C", Offset = "0x12B799C", VA = "0x12B799C")]
			public GraspLineSegment(Vector3 segmentStart, Quaternion facing)
			{
			}

			[Token(Token = "0x600286D")]
			[Address(RVA = "0x12B7A40", Offset = "0x12B7A40", VA = "0x12B7A40")]
			public GraspLineSegment Transformed(Matrix4x4 matrix)
			{
				return default(GraspLineSegment);
			}

			[Token(Token = "0x600286E")]
			[Address(RVA = "0x12B7D50", Offset = "0x12B7D50", VA = "0x12B7D50")]
			public void Draw(Color c)
			{
			}
		}

		[Token(Token = "0x40021AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VrHand m_hand;

		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GraspMarker m_graspMarker;

		[Token(Token = "0x40021AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform m_graspTransform;

		[Token(Token = "0x40021AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 m_localGrabPosition;

		[Token(Token = "0x40021B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 m_localGrabToCenter;

		[Token(Token = "0x40021B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_currentFlexPosition;

		[Token(Token = "0x40021B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_primaryFlexTarget;

		[Token(Token = "0x40021B3")]
		private const float c_flexPositionChangeSpeed = 5f;

		[Token(Token = "0x170006A5")]
		public float CurrentFlexPosition
		{
			[Token(Token = "0x6002864")]
			[Address(RVA = "0x12B7864", Offset = "0x12B7864", VA = "0x12B7864")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002865")]
		[Address(RVA = "0x12B4EE4", Offset = "0x12B4EE4", VA = "0x12B4EE4")]
		public GraspData(VrHand hand, GraspMarker graspMarker, Matrix4x4 worldToLocalMatrix, Vector3 worldBoundsCenter, bool shouldHandAnchorSnapToVirtualHand)
		{
		}

		[Token(Token = "0x6002866")]
		[Address(RVA = "0x12B4F80", Offset = "0x12B4F80", VA = "0x12B4F80")]
		public void SwitchToHand(VrHand hand, Matrix4x4 worldToLocalMatrix, Vector3 worldBoundsCenter, bool shouldHandAnchorSnapToVirtualHand)
		{
		}

		[Token(Token = "0x6002867")]
		[Address(RVA = "0x12B5FF0", Offset = "0x12B5FF0", VA = "0x12B5FF0")]
		public void UpdatePoseOverride(float dt)
		{
		}

		[Token(Token = "0x6002868")]
		[Address(RVA = "0x12B707C", Offset = "0x12B707C", VA = "0x12B707C")]
		public static void GetPreferredPositionAndRotationForGrasp(Quaternion currentRotation, Matrix4x4 localToWorldMatrix, bool shouldHandAnchorSnapToVirtualHand, GraspData primary, GraspData secondary, out Vector3 graspPositionDifference, out Quaternion graspRotationDifference, out Vector3 desiredPosition, out Quaternion desiredRotation)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000705")]
	public enum MultiHandBehavior
	{
		[Token(Token = "0x40021B9")]
		ReplaceExisting,
		[Token(Token = "0x40021BA")]
		GrabWithBothHands,
		[Token(Token = "0x40021BB")]
		IgnoreWhenHeld
	}

	[Token(Token = "0x2000706")]
	protected enum BreakResponse
	{
		[Token(Token = "0x40021BD")]
		Wait,
		[Token(Token = "0x40021BE")]
		LetGo,
		[Token(Token = "0x40021BF")]
		Warp
	}

	[Token(Token = "0x400217B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<GraspMarker> m_graspMarkers;

	[Token(Token = "0x400217C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Rigidbody m_rigidbody;

	[Token(Token = "0x400217D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IWorldInteractionOffset m_interactionOffset;

	[Token(Token = "0x400217E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GraspData m_primaryGrasp;

	[Token(Token = "0x400217F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GraspData m_secondaryGrasp;

	[Token(Token = "0x4002180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GlintController m_glintController;

	[Token(Token = "0x4002181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_hasPerformedUpdateOnPrimaryGrasp;

	[Token(Token = "0x4002182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	[SerializeField]
	[UnityEngine.Tooltip("On this interaction we will always grab the PrimaryGrasp (if available) regardless of distance.\nThis is useful for 2-handed grips on weapons like the Revolver, where the Trigger/PrimaryGrasp and the DoubleGrasp are on top of each other.")]
	private bool m_prioritizePrimaryGrasp;

	[Token(Token = "0x4002183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	[UnityEngine.Tooltip("If enabled, the position of the virtual hand will update to match the real hand while the player is holding on. This setting only affects grasp markers that snap the hand to the anchor.")]
	[SerializeField]
	private bool m_constantlyTrackGraspPosition;

	[Token(Token = "0x4002184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
	[UnityEngine.Tooltip("If enabled, the rotation of the virtual hand will update to match the real hand while the player is holding on. This setting has no effect if there are no grasp markers.")]
	[SerializeField]
	private bool m_constantlyTrackGraspRotation;

	[Token(Token = "0x4002185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[UnityEngine.Tooltip("How to behave when a new hand tries to grab this while another hand is already grabbing it. ReplaceExisting: make the other hand let go. GrabWithBothHands: allow both hands to hold on at once. IgnoreWhenHeld: don't allow the other hand to grab.")]
	[SerializeField]
	[FormerlySerializedAs("m_allowMultiHandGrabs")]
	private MultiHandBehavior m_multiHandBehavior;

	[Token(Token = "0x4002186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[UnityEngine.Tooltip("The amount by which we scale offsets when the interaction is being done with two hands compared to being done with only one hand. 1 means don't adjust recoil at all, 0 means we cancel recoil completely.")]
	[Range(0f, 1f)]
	[SerializeField]
	private float m_twoHandedRecoilScale;

	[Token(Token = "0x4002187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	[UnityEngine.Tooltip("If ticked, the player will be able to grab this with their hand at any angle. If unticked, they'll only be able to grab it if their hand is approximately at the correct angle.")]
	private bool m_allowGrabsFromAnyAngle;

	[Token(Token = "0x4002188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	[SerializeField]
	[UnityEngine.Tooltip("If ticked, only grab if any marker is close enough. Short term solution to inprecise grabs. I am not exposing this in the default inspector because I don't really want people using it.")]
	private bool m_proximityByGraspMarkersOnly;

	[Token(Token = "0x4002189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
	private bool m_isRunning;

	[Token(Token = "0x400218A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
	private bool m_latestGrabWasHandSwap;

	[Token(Token = "0x400218B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int m_firstUpdateFrame;

	[Token(Token = "0x400218C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 m_currentObjectWorldPosition;

	[Token(Token = "0x400218D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool _reactiveToHandScans;

	[Token(Token = "0x400218E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private List<GameObject> m_childColliderGameObjects;

	[Token(Token = "0x400218F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private List<Collider> m_childColliders;

	[Token(Token = "0x4002190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<Collider> m_contactingObjects;

	[Token(Token = "0x4002191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private int[] m_contactCountBuffer;

	[Token(Token = "0x4002192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int m_contactCountBufferHighestIndex;

	[Token(Token = "0x4002193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private int m_contactCountBufferCurrentIndex;

	[Token(Token = "0x4002194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private int m_contactCounterBufferLength;

	[Token(Token = "0x4002195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Bounds m_boundingBox;

	[Token(Token = "0x4002196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int m_boundingBoxMostRecentGenerationFrame;

	[Token(Token = "0x4002197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private PenetrationEdgeContainer m_penetrationEdgeContainer;

	[Token(Token = "0x4002198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool m_levelResetReleaseQueued;

	[Token(Token = "0x4002199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Collider[] m_warpOverlapCheckBuffer;

	[Token(Token = "0x400219A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool m_graspingExternallyBlocked;

	[Token(Token = "0x400219B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private int m_frameLastAcquiredPrimary;

	[Token(Token = "0x400219C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private int m_frameLastAcquiredSecondary;

	[Token(Token = "0x400219D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	protected bool m_remoteInteraction;

	[Token(Token = "0x400219E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	protected INetworkInteractableEntity m_networkInteractableEntity;

	[Token(Token = "0x400219F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Action ActionOnInteractionSelect;

	[Token(Token = "0x40021A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public UnityEvent EventOnInteractionSelect;

	[Token(Token = "0x40021A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Action ActionOnInteractionSelectSecondHand;

	[Token(Token = "0x40021A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Action ActionOnInteractionStart;

	[Token(Token = "0x40021A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool m_dispatchedInteractionStart;

	[Token(Token = "0x40021A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Action ActionOnInteractionSwap;

	[Token(Token = "0x40021A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Action ActionOnInteractionStop;

	[Token(Token = "0x40021A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Action ActionOnInteractionStopSecondHand;

	[Token(Token = "0x40021A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private VrItem m_vrItem;

	[Token(Token = "0x40021A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<WorldInteraction> s_enabledScanTargets;

	[Token(Token = "0x40021A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public InventorySlot m_hoveredInventorySlot;

	[Token(Token = "0x40021AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	protected GraspMarker m_stopInteractionLostGraspMarker;

	[Token(Token = "0x17000686")]
	public Rigidbody Rigidbody
	{
		[Token(Token = "0x6002816")]
		[Address(RVA = "0x12B247C", Offset = "0x12B247C", VA = "0x12B247C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002817")]
		[Address(RVA = "0x12B2484", Offset = "0x12B2484", VA = "0x12B2484")]
		set
		{
		}
	}

	[Token(Token = "0x17000687")]
	public GlintController GlintController
	{
		[Token(Token = "0x6002818")]
		[Address(RVA = "0x12B248C", Offset = "0x12B248C", VA = "0x12B248C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000688")]
	public bool HasPrimaryGrasp
	{
		[Token(Token = "0x6002819")]
		[Address(RVA = "0x12B2494", Offset = "0x12B2494", VA = "0x12B2494")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000689")]
	public bool HasSecondaryGrasp
	{
		[Token(Token = "0x600281A")]
		[Address(RVA = "0x12B24A4", Offset = "0x12B24A4", VA = "0x12B24A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700068A")]
	public bool AllowMultiHandGrabs
	{
		[Token(Token = "0x600281B")]
		[Address(RVA = "0x12B24B4", Offset = "0x12B24B4", VA = "0x12B24B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700068B")]
	public bool ProximityByGraspMarkersOnly
	{
		[Token(Token = "0x600281C")]
		[Address(RVA = "0x12B24C4", Offset = "0x12B24C4", VA = "0x12B24C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700068C")]
	private bool FirstUpdate
	{
		[Token(Token = "0x600281D")]
		[Address(RVA = "0x12B24CC", Offset = "0x12B24CC", VA = "0x12B24CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700068D")]
	public bool ReactiveToHandScans
	{
		[Token(Token = "0x600281E")]
		[Address(RVA = "0x12B24EC", Offset = "0x12B24EC", VA = "0x12B24EC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600281F")]
		[Address(RVA = "0x12B24F4", Offset = "0x12B24F4", VA = "0x12B24F4")]
		set
		{
		}
	}

	[Token(Token = "0x1700068E")]
	protected List<GameObject> ChildColliderGameObjects
	{
		[Token(Token = "0x6002820")]
		[Address(RVA = "0x12B264C", Offset = "0x12B264C", VA = "0x12B264C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700068F")]
	public List<Collider> ChildColliders
	{
		[Token(Token = "0x6002821")]
		[Address(RVA = "0x12B2654", Offset = "0x12B2654", VA = "0x12B2654")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000690")]
	protected PenetrationEdgeContainer AttachedPenetrationEdgeContainer
	{
		[Token(Token = "0x6002822")]
		[Address(RVA = "0x12B265C", Offset = "0x12B265C", VA = "0x12B265C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000691")]
	public VrHand ActivePrimaryHand
	{
		[Token(Token = "0x6002823")]
		[Address(RVA = "0x12B2664", Offset = "0x12B2664", VA = "0x12B2664")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000692")]
	public VrHand ActiveSecondaryHand
	{
		[Token(Token = "0x6002824")]
		[Address(RVA = "0x12B267C", Offset = "0x12B267C", VA = "0x12B267C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000693")]
	public GraspMarker ActivePrimaryGraspMarker
	{
		[Token(Token = "0x6002825")]
		[Address(RVA = "0x12B2694", Offset = "0x12B2694", VA = "0x12B2694")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000694")]
	public GraspMarker ActiveSecondaryGraspMarker
	{
		[Token(Token = "0x6002826")]
		[Address(RVA = "0x12B26AC", Offset = "0x12B26AC", VA = "0x12B26AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000695")]
	public float ActivePrimaryHandFlexPosition
	{
		[Token(Token = "0x6002827")]
		[Address(RVA = "0x12B26C4", Offset = "0x12B26C4", VA = "0x12B26C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000696")]
	public float ActiveSecondaryHandFlexPosition
	{
		[Token(Token = "0x6002828")]
		[Address(RVA = "0x12B26DC", Offset = "0x12B26DC", VA = "0x12B26DC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000697")]
	private bool LastReceivedPrimary
	{
		[Token(Token = "0x6002829")]
		[Address(RVA = "0x12B26F4", Offset = "0x12B26F4", VA = "0x12B26F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000698")]
	public bool IsRemoteInteraction
	{
		[Token(Token = "0x600282A")]
		[Address(RVA = "0x12B2708", Offset = "0x12B2708", VA = "0x12B2708")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000699")]
	public INetworkInteractableEntity NetworkInteractableEntity
	{
		[Token(Token = "0x600282B")]
		[Address(RVA = "0x12B2710", Offset = "0x12B2710", VA = "0x12B2710")]
		get
		{
			return null;
		}
		[Token(Token = "0x600282C")]
		[Address(RVA = "0x12B2718", Offset = "0x12B2718", VA = "0x12B2718")]
		set
		{
		}
	}

	[Token(Token = "0x1700069A")]
	public VrItem VrItem
	{
		[Token(Token = "0x6002830")]
		[Address(RVA = "0x12B28A8", Offset = "0x12B28A8", VA = "0x12B28A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700069B")]
	public static List<WorldInteraction> EnabledScanTargets
	{
		[Token(Token = "0x6002835")]
		[Address(RVA = "0x12B2BA8", Offset = "0x12B2BA8", VA = "0x12B2BA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700069C")]
	protected abstract int DefaultCollisionLayer
	{
		[Token(Token = "0x600283A")]
		get;
	}

	[Token(Token = "0x1700069D")]
	protected virtual float GripBreakAngleDegrees
	{
		[Token(Token = "0x6002842")]
		[Address(RVA = "0x12B4254", Offset = "0x12B4254", VA = "0x12B4254", Slot = "14")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700069E")]
	protected abstract bool ShouldHandAnchorSnapToVirtualHand
	{
		[Token(Token = "0x6002846")]
		get;
	}

	[Token(Token = "0x1700069F")]
	public bool IsInRespawnHover
	{
		[Token(Token = "0x600284C")]
		[Address(RVA = "0x12B5AC8", Offset = "0x12B5AC8", VA = "0x12B5AC8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600284D")]
		[Address(RVA = "0x12B5AD0", Offset = "0x12B5AD0", VA = "0x12B5AD0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170006A0")]
	private int MaxRecentContactCount
	{
		[Token(Token = "0x6002852")]
		[Address(RVA = "0x12B5D88", Offset = "0x12B5D88", VA = "0x12B5D88")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170006A1")]
	public virtual bool ForceCurrentInteractionToContinue
	{
		[Token(Token = "0x6002854")]
		[Address(RVA = "0x12B622C", Offset = "0x12B622C", VA = "0x12B622C", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006A2")]
	protected abstract bool CanDispatchInteractionStart
	{
		[Token(Token = "0x600285C")]
		get;
	}

	[Token(Token = "0x170006A3")]
	public abstract bool CanMoveFreely
	{
		[Token(Token = "0x6002861")]
		get;
	}

	[Token(Token = "0x170006A4")]
	public bool CanBePickedUp
	{
		[Token(Token = "0x6002862")]
		[Address(RVA = "0x12B7798", Offset = "0x12B7798", VA = "0x12B7798")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600282D")]
	[Address(RVA = "0x12B2728", Offset = "0x12B2728", VA = "0x12B2728", Slot = "11")]
	public virtual bool IsBlockingGrasping(VrHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x600282E")]
	[Address(RVA = "0x12B2730", Offset = "0x12B2730", VA = "0x12B2730")]
	public void SetGraspingExternallyBlocked(bool externallyBlocked)
	{
	}

	[Token(Token = "0x600282F")]
	[Address(RVA = "0x12B273C", Offset = "0x12B273C", VA = "0x12B273C")]
	public void SetCanBePickedUp(bool canPickup)
	{
	}

	[Token(Token = "0x6002831")]
	[Address(RVA = "0x12B28B0", Offset = "0x12B28B0", VA = "0x12B28B0")]
	static WorldInteraction()
	{
	}

	[Token(Token = "0x6002832")]
	[Address(RVA = "0x12B294C", Offset = "0x12B294C", VA = "0x12B294C")]
	[AutoInitializeStatics]
	private static void ResetStatics()
	{
	}

	[Token(Token = "0x6002833")]
	[Address(RVA = "0x12B29F8", Offset = "0x12B29F8", VA = "0x12B29F8")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x6002834")]
	[Address(RVA = "0x12B2B28", Offset = "0x12B2B28", VA = "0x12B2B28")]
	protected void OnDisable()
	{
	}

	[Token(Token = "0x6002836")]
	[Address(RVA = "0x12B2C00", Offset = "0x12B2C00", VA = "0x12B2C00", Slot = "12")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6002837")]
	[Address(RVA = "0x12B3324", Offset = "0x12B3324", VA = "0x12B3324")]
	public bool EnsureGatheredChildColliderGameObjects(bool force = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6002838")]
	[Address(RVA = "0x12B317C", Offset = "0x12B317C", VA = "0x12B317C")]
	public void GatherGraspMarkers(Transform currentTransform, ref List<GraspMarker> results)
	{
	}

	[Token(Token = "0x6002839")]
	[Address(RVA = "0x12B345C", Offset = "0x12B345C", VA = "0x12B345C")]
	private void GatherColliders(Transform currentTransform)
	{
	}

	[Token(Token = "0x600283B")]
	[Address(RVA = "0x12B37DC", Offset = "0x12B37DC", VA = "0x12B37DC")]
	public bool OwnsGraspMarker(GraspMarker graspMarker)
	{
		return default(bool);
	}

	[Token(Token = "0x600283C")]
	[Address(RVA = "0x12B3064", Offset = "0x12B3064", VA = "0x12B3064")]
	private void ResizeContactBuffer()
	{
	}

	[Token(Token = "0x600283D")]
	[Address(RVA = "0x12B3884", Offset = "0x12B3884", VA = "0x12B3884")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600283E")]
	[Address(RVA = "0x12B3A90", Offset = "0x12B3A90", VA = "0x12B3A90", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x600283F")]
	[Address(RVA = "0x12B3BF8", Offset = "0x12B3BF8", VA = "0x12B3BF8")]
	public void ForceReleaseGrasp()
	{
	}

	[Token(Token = "0x6002840")]
	[Address(RVA = "0x12B399C", Offset = "0x12B399C", VA = "0x12B399C")]
	protected void ReleaseGrasp()
	{
	}

	[Token(Token = "0x6002841")]
	[Address(RVA = "0x12B3BFC", Offset = "0x12B3BFC", VA = "0x12B3BFC")]
	public List<KeyValuePair<GraspMarker, float>> ApproachAndSortMarkers(VrHand hand, bool isHandScan, out float breakAngle)
	{
		return null;
	}

	[Token(Token = "0x6002843")]
	[Address(RVA = "0x12B4260", Offset = "0x12B4260", VA = "0x12B4260")]
	public GraspMarker SelectNearestGraspMarker(VrHand hand, bool isHandScan)
	{
		return null;
	}

	[Token(Token = "0x6002844")]
	[Address(RVA = "0x12B44A0", Offset = "0x12B44A0", VA = "0x12B44A0")]
	public GraspMarker GetFirstPrioritizedGraspMarker()
	{
		return null;
	}

	[Token(Token = "0x6002845")]
	[Address(RVA = "0x12B4608", Offset = "0x12B4608", VA = "0x12B4608")]
	public GraspMarker GetGraspMarkerForHand(VrHand hand)
	{
		return null;
	}

	[Token(Token = "0x6002847")]
	[Address(RVA = "0x12B47DC", Offset = "0x12B47DC", VA = "0x12B47DC", Slot = "16")]
	public virtual void StartInteraction(VrHand hand, GraspMarker graspMarker, bool isSwapping, bool isFromHandScan, out bool newlyGrabbed, bool remoteInteraction = false)
	{
	}

	[Token(Token = "0x6002848")]
	[Address(RVA = "0x12B50F0", Offset = "0x12B50F0", VA = "0x12B50F0", Slot = "17")]
	public virtual bool StopInteraction(VrHand hand, bool isSwapping, bool fromGripRelease, bool isKeyInsertion, bool remoteInteraction)
	{
		return default(bool);
	}

	[Token(Token = "0x6002849")]
	[Address(RVA = "0x12B5760", Offset = "0x12B5760", VA = "0x12B5760")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600284A")]
	[Address(RVA = "0x12B57D0", Offset = "0x12B57D0", VA = "0x12B57D0")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x600284B")]
	[Address(RVA = "0x12B5AC0", Offset = "0x12B5AC0", VA = "0x12B5AC0")]
	public void SetReactiveToHandScans(bool isReactive)
	{
	}

	[Token(Token = "0x600284E")]
	[Address(RVA = "0x12B5ADC", Offset = "0x12B5ADC", VA = "0x12B5ADC")]
	private void FilterContactList()
	{
	}

	[Token(Token = "0x600284F")]
	[Address(RVA = "0x12B5A1C", Offset = "0x12B5A1C", VA = "0x12B5A1C")]
	private bool IsChild(Transform targetTransform)
	{
		return default(bool);
	}

	[Token(Token = "0x6002850")]
	[Address(RVA = "0x12B5BBC", Offset = "0x12B5BBC", VA = "0x12B5BBC")]
	protected int CalculateContactingObjectCount(bool includeLingeringContacts, int directContactExclusionMask = -1)
	{
		return default(int);
	}

	[Token(Token = "0x6002851")]
	[Address(RVA = "0x12B5DE8", Offset = "0x12B5DE8", VA = "0x12B5DE8")]
	protected void ClearRecentContacts()
	{
	}

	[Token(Token = "0x6002853")]
	[Address(RVA = "0x12B5E38", Offset = "0x12B5E38", VA = "0x12B5E38", Slot = "18")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6002855")]
	[Address(RVA = "0x12B6274", Offset = "0x12B6274", VA = "0x12B6274")]
	public bool PerformUpdate(VrHand hand, bool alreadyCalled = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6002856")]
	[Address(RVA = "0x12B69DC", Offset = "0x12B69DC", VA = "0x12B69DC")]
	public void ForceImmediateWarp()
	{
	}

	[Token(Token = "0x6002857")]
	[Address(RVA = "0x12B4D78", Offset = "0x12B4D78", VA = "0x12B4D78")]
	protected Bounds GetFullBoundingBox()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6002858")]
	[Address(RVA = "0x12B6A54", Offset = "0x12B6A54", VA = "0x12B6A54", Slot = "20")]
	protected virtual BreakResponse DetermineBreakResponse(Vector3 desiredPosition, Quaternion desiredRotation)
	{
		return default(BreakResponse);
	}

	[Token(Token = "0x6002859")]
	[Address(RVA = "0x12B6D94", Offset = "0x12B6D94", VA = "0x12B6D94", Slot = "21")]
	protected virtual void Warp(Vector3 warpPosition, Quaternion warpRotation)
	{
	}

	[Token(Token = "0x600285A")]
	[Address(RVA = "0x12B6EAC", Offset = "0x12B6EAC", VA = "0x12B6EAC")]
	public void PerformFixedUpdate(VrHand hand)
	{
	}

	[Token(Token = "0x600285B")]
	[Address(RVA = "0x12B66BC", Offset = "0x12B66BC", VA = "0x12B66BC")]
	private void ExtractInteractionData(out Vector3 currentPosition, out Vector3 desiredPosition, out Quaternion currentRotation, out Quaternion desiredRotation, out Vector3 graspPositionDifference, out Quaternion graspRotationDifference)
	{
	}

	[Token(Token = "0x600285D")]
	[Address(RVA = "0x12B774C", Offset = "0x12B774C", VA = "0x12B774C")]
	private void OnLevelReset()
	{
	}

	[Token(Token = "0x600285E")]
	[Address(RVA = "0x12B7788", Offset = "0x12B7788", VA = "0x12B7788", Slot = "23")]
	protected virtual bool ShouldBreakInteraction(Vector3 bodyDesiredPosition, Vector3 graspPositionDifference, Quaternion graspRotationDifference, bool isSecondary)
	{
		return default(bool);
	}

	[Token(Token = "0x600285F")]
	protected abstract void UpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference);

	[Token(Token = "0x6002860")]
	protected abstract void FixedUpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference);

	[Token(Token = "0x6002863")]
	[Address(RVA = "0x12B77F4", Offset = "0x12B77F4", VA = "0x12B77F4")]
	protected WorldInteraction()
	{
	}
}
[Token(Token = "0x2000707")]
[DisallowMultipleComponent]
public class WorldInteractionColliderMarkup : MonoBehaviour
{
	[Token(Token = "0x40021C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private WorldInteraction m_parentWorldInteraction;

	[Token(Token = "0x170006A8")]
	public WorldInteraction ParentWorldInteraction
	{
		[Token(Token = "0x600286F")]
		[Address(RVA = "0x12B7E4C", Offset = "0x12B7E4C", VA = "0x12B7E4C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002870")]
	[Address(RVA = "0x12B7E54", Offset = "0x12B7E54", VA = "0x12B7E54")]
	public void AssignParentWorldInteraction(WorldInteraction interaction)
	{
	}

	[Token(Token = "0x6002871")]
	[Address(RVA = "0x12B7E5C", Offset = "0x12B7E5C", VA = "0x12B7E5C")]
	public WorldInteractionColliderMarkup()
	{
	}
}
[Token(Token = "0x2000708")]
public class WorldInteraction_Climb : WorldInteraction
{
	[Token(Token = "0x40021C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	[UnityEngine.Tooltip("If ticked (default), stop the player being able to climb through walls and objects while climbing on this.")]
	[SerializeField]
	private bool m_checkBodyOverlapsDuringClimb;

	[Token(Token = "0x40021C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
	[UnityEngine.Tooltip("Allow player to retain height position while not actively holding")]
	[SerializeField]
	private bool m_proximityHoldEnabled;

	[Token(Token = "0x40021C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float m_proximityHoldTimer;

	[Token(Token = "0x40021C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float m_proximityLeftDelay;

	[Token(Token = "0x40021C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private bool m_proximityHoldActive;

	[Token(Token = "0x40021C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Collider m_proximityCollider;

	[Token(Token = "0x40021C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float m_flingMagnitudeProxyHoldBreakThreshold;

	[Token(Token = "0x40021C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float m_proximityHoldLookThreshold;

	[Token(Token = "0x40021C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Vector2 m_ladderForward;

	[Token(Token = "0x40021CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private bool m_previousSweepSucceeded;

	[Token(Token = "0x170006A9")]
	private Transform rootTransform
	{
		[Token(Token = "0x6002872")]
		[Address(RVA = "0x12B7E64", Offset = "0x12B7E64", VA = "0x12B7E64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006AA")]
	private Transform m_playerTransform
	{
		[Token(Token = "0x6002873")]
		[Address(RVA = "0x12B7EDC", Offset = "0x12B7EDC", VA = "0x12B7EDC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006AB")]
	protected override int DefaultCollisionLayer
	{
		[Token(Token = "0x6002878")]
		[Address(RVA = "0x12B902C", Offset = "0x12B902C", VA = "0x12B902C", Slot = "13")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170006AC")]
	public override bool ForceCurrentInteractionToContinue
	{
		[Token(Token = "0x6002879")]
		[Address(RVA = "0x12B9084", Offset = "0x12B9084", VA = "0x12B9084", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006AD")]
	protected override bool CanDispatchInteractionStart
	{
		[Token(Token = "0x600287C")]
		[Address(RVA = "0x12B93A8", Offset = "0x12B93A8", VA = "0x12B93A8", Slot = "22")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006AE")]
	protected override bool ShouldHandAnchorSnapToVirtualHand
	{
		[Token(Token = "0x600287D")]
		[Address(RVA = "0x12B93B0", Offset = "0x12B93B0", VA = "0x12B93B0", Slot = "15")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006AF")]
	public override bool CanMoveFreely
	{
		[Token(Token = "0x6002884")]
		[Address(RVA = "0x12B96F0", Offset = "0x12B96F0", VA = "0x12B96F0", Slot = "26")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002874")]
	[Address(RVA = "0x12B7F64", Offset = "0x12B7F64", VA = "0x12B7F64")]
	private void Start()
	{
	}

	[Token(Token = "0x6002875")]
	[Address(RVA = "0x12B8274", Offset = "0x12B8274", VA = "0x12B8274", Slot = "16")]
	public override void StartInteraction(VrHand hand, GraspMarker marker, bool isSwapping, bool isFromHandScan, out bool newlyGrabbed, bool remoteInteraction = false)
	{
	}

	[Token(Token = "0x6002876")]
	[Address(RVA = "0x12B837C", Offset = "0x12B837C", VA = "0x12B837C", Slot = "17")]
	public override bool StopInteraction(VrHand hand, bool isSwapping, bool fromGripRelease, bool isKeyInsertion, bool remoteInteraction)
	{
		return default(bool);
	}

	[Token(Token = "0x6002877")]
	[Address(RVA = "0x12B8F1C", Offset = "0x12B8F1C", VA = "0x12B8F1C", Slot = "23")]
	protected override bool ShouldBreakInteraction(Vector3 bodyDesiredPosition, Vector3 graspPositionDifference, Quaternion graspRotationDifference, bool isSecondary)
	{
		return default(bool);
	}

	[Token(Token = "0x600287A")]
	[Address(RVA = "0x12B908C", Offset = "0x12B908C", VA = "0x12B908C", Slot = "24")]
	protected override void UpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference)
	{
	}

	[Token(Token = "0x600287B")]
	[Address(RVA = "0x12B93A4", Offset = "0x12B93A4", VA = "0x12B93A4", Slot = "25")]
	protected override void FixedUpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference)
	{
	}

	[Token(Token = "0x600287E")]
	[Address(RVA = "0x12B93B8", Offset = "0x12B93B8", VA = "0x12B93B8", Slot = "0")]
	public override bool Equals(object other)
	{
		return default(bool);
	}

	[Token(Token = "0x600287F")]
	[Address(RVA = "0x12B9448", Offset = "0x12B9448", VA = "0x12B9448", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6002880")]
	[Address(RVA = "0x12B8E5C", Offset = "0x12B8E5C", VA = "0x12B8E5C")]
	private void SetProximityHold()
	{
	}

	[Token(Token = "0x6002881")]
	[Address(RVA = "0x12B9450", Offset = "0x12B9450", VA = "0x12B9450")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6002882")]
	[Address(RVA = "0x12B9534", Offset = "0x12B9534", VA = "0x12B9534")]
	private bool IsPlayerFacingObjectInThreshold()
	{
		return default(bool);
	}

	[Token(Token = "0x6002883")]
	[Address(RVA = "0x12B9640", Offset = "0x12B9640", VA = "0x12B9640")]
	private void Update()
	{
	}

	[Token(Token = "0x6002885")]
	[Address(RVA = "0x12B96F8", Offset = "0x12B96F8", VA = "0x12B96F8")]
	public WorldInteraction_Climb()
	{
	}
}
[Token(Token = "0x2000709")]
public class WorldInteraction_Hold : WorldInteraction
{
	[Token(Token = "0x200070A")]
	private class PhysicsThrowData
	{
		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VrHand m_hand;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_isSwapping;

		[Token(Token = "0x60028BB")]
		[Address(RVA = "0x12BB450", Offset = "0x12BB450", VA = "0x12BB450")]
		public PhysicsThrowData()
		{
		}
	}

	[Token(Token = "0x200070B")]
	[CompilerGenerated]
	private sealed class <DoPostThrowVelocityAdjustment>d__92 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WorldInteraction_Hold <>4__this;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ThrowOverrideDefinition.ThrowOverride throwOverride;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 velocity;

		[Token(Token = "0x170006BB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60028BF")]
			[Address(RVA = "0x12BEDB8", Offset = "0x12BEDB8", VA = "0x12BEDB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60028C1")]
			[Address(RVA = "0x12BEE00", Offset = "0x12BEE00", VA = "0x12BEE00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60028BC")]
		[Address(RVA = "0x12BC8E0", Offset = "0x12BC8E0", VA = "0x12BC8E0")]
		[DebuggerHidden]
		public <DoPostThrowVelocityAdjustment>d__92(int <>1__state)
		{
		}

		[Token(Token = "0x60028BD")]
		[Address(RVA = "0x12BE4E4", Offset = "0x12BE4E4", VA = "0x12BE4E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60028BE")]
		[Address(RVA = "0x12BE4E8", Offset = "0x12BE4E8", VA = "0x12BE4E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60028C0")]
		[Address(RVA = "0x12BEDC0", Offset = "0x12BEDC0", VA = "0x12BEDC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40021CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	[UnityEngine.Tooltip("If enabled, the object will snap to the player's hand.")]
	[SerializeField]
	private bool m_useSnapping;

	[Token(Token = "0x40021CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
	private bool? m_snappingOverride;

	[Token(Token = "0x40021CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private bool m_isCurrentlySnappedToHand;

	[Token(Token = "0x40021CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
	[UnityEngine.Tooltip("If enabled, the object will automatically be released if the player's hand moves or rotates too far from the object. Note that differences in rotation are ignored for secondary hands when grabbing an object with two hands at once.")]
	[SerializeField]
	private bool m_useBreaking;

	[Token(Token = "0x40021CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18E")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, break by both distance and angle. If disabled, break by distance only.")]
	private bool m_breakByAngle;

	[Token(Token = "0x40021D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private float m_moveDeltaBreakDistance;

	[Token(Token = "0x40021D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	[SerializeField]
	private float m_rotDeltaBreakAngle;

	[Token(Token = "0x40021D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[UnityEngine.Tooltip("If enabled, we'll use separate values for the break distance and angle when the object is penetrating something (embedded, pierced, etc.).")]
	[SerializeField]
	private bool m_useSeparateBreakParametersForPenetrations;

	[Token(Token = "0x40021D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	[SerializeField]
	private float m_penetratedMoveDeltaBreakDistance;

	[Token(Token = "0x40021D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private float m_penetratedRotDeltaBreakAngle;

	[Token(Token = "0x40021D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("Mass independent scale for the inertia tensor when the object is held. Set to 1 for physically realistic behaviour. Higher values make the object more resistant to being spun by physics torques while held and physics driven.")]
	private float m_heldInertiaTensorScale;

	[Token(Token = "0x40021D6")]
	private const float c_minInertiaTensor = 0.001f;

	[Token(Token = "0x40021D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[UnityEngine.Tooltip("If ticked (recommended), allow applying physics torques based on the orientation of the hand to rotate the object. You may want to disable this when the object is on a hinge and should not spin as the hand does.")]
	[SerializeField]
	private bool m_applyResolutionTorque;

	[Token(Token = "0x40021D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	[UnityEngine.Tooltip("Multiplier applied to throws of this object. Applied on top of the project wide global throw speed multiplier.")]
	[SerializeField]
	[Min(0f)]
	private float m_throwSpeedMultiplier;

	[Token(Token = "0x40021D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private bool m_disableInterpolationOnRelease;

	[Token(Token = "0x40021DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	private Joint m_definedConstrainingJoint;

	[Token(Token = "0x40021DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private bool m_forceHeldLayerWhileHeld;

	[Token(Token = "0x40021DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
	private int m_assignedCollisionLayer;

	[Token(Token = "0x40021DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private float m_collisionLayerRefreshTimer;

	[Token(Token = "0x40021DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private float m_collisionIgnoreRevertTimer;

	[Token(Token = "0x40021DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private List<Collider> m_collisionIgnoreTargets;

	[Token(Token = "0x40021E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private bool m_collisionIgnoreState;

	[Token(Token = "0x40021E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
	private bool m_isConstrainedToWorld;

	[Token(Token = "0x40021E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DA")]
	private bool m_isOnJointWithTranslationFreedom;

	[Token(Token = "0x40021E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DB")]
	private bool m_snappingByTime;

	[Token(Token = "0x40021E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private float m_snapToHandNormalizedProgress;

	[Token(Token = "0x40021E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private float m_snapToHandNormalizedDistance;

	[Token(Token = "0x40021E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	private bool m_lerpedInCurrentFrame;

	[Token(Token = "0x40021E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
	private bool m_physicsInteractionInPreviousFixedUpdate;

	[Token(Token = "0x40021E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private Vector3 m_bodySnapStartPositionLocal;

	[Token(Token = "0x40021E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
	private Quaternion m_bodySnapStartRotationLocal;

	[Token(Token = "0x40021EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private Collider[] m_boundingBoxOverlapBuffer;

	[Token(Token = "0x40021EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_snapSweepTestLayer;

	[Token(Token = "0x40021EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private PidController m_pidControllerContacting;

	[Token(Token = "0x40021ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private PidController m_pidControllerUncontacting;

	[Token(Token = "0x40021EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private PidController m_pidControllerHarnessMount;

	[Token(Token = "0x40021EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private Vector3 m_latestUnadjustedLinearReleaseVelocity;

	[Token(Token = "0x40021F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
	private Vector3 m_latestUnadjustedAngularReleaseVelocity;

	[Token(Token = "0x40021F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private Dictionary<VrHandController, float> m_latestReleaseTimeDictionary;

	[Token(Token = "0x40021F2")]
	private const float c_regrabBlockDuration = 0.4f;

	[Token(Token = "0x40021F3")]
	private const float c_rigidbodyLinearDragWhenHeld = 0f;

	[Token(Token = "0x40021F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	[SerializeField]
	private float m_rigidbodyAngularDragWhenHeld;

	[Token(Token = "0x40021F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
	[SerializeField]
	private bool m_changeRigidbodyConstrainsWhenHeld;

	[Token(Token = "0x40021F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	[SerializeField]
	private RigidbodyConstraints m_rigidbodyConstraintsWhenHeld;

	[Token(Token = "0x40021F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	private bool m_normalBodyUseGravity;

	[Token(Token = "0x40021F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private float m_normalBodyLinearDrag;

	[Token(Token = "0x40021F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	private float m_normalBodyAngularDrag;

	[Token(Token = "0x40021FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private RigidbodyConstraints m_normalBodyConstraints;

	[Token(Token = "0x40021FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	private bool m_kinematicBeforeInteraction;

	[Token(Token = "0x40021FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private MechanismKey m_key;

	[Token(Token = "0x40021FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private bool m_isMechanism;

	[Token(Token = "0x40021FE")]
	private const int c_rigidbodyHeldSolverIterationCount = 6;

	[Token(Token = "0x40021FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	private float m_initialDrag;

	[Token(Token = "0x4002200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private float m_initialAngularDrag;

	[Token(Token = "0x4002201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
	private bool m_resetDrags;

	[Token(Token = "0x4002202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private PhysicsThrowData m_pendingPhysicsThrow;

	[Token(Token = "0x4002204")]
	private const float c_snapSweepTestThresholdDistance = 0.1f;

	[Token(Token = "0x170006B0")]
	public bool DisableInterpolationOnRelease
	{
		[Token(Token = "0x6002886")]
		[Address(RVA = "0x12B976C", Offset = "0x12B976C", VA = "0x12B976C")]
		set
		{
		}
	}

	[Token(Token = "0x170006B1")]
	public bool CurrentlySnappedToHand
	{
		[Token(Token = "0x6002887")]
		[Address(RVA = "0x12B9778", Offset = "0x12B9778", VA = "0x12B9778")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006B2")]
	public bool RequestInteraction
	{
		[Token(Token = "0x6002888")]
		[Address(RVA = "0x12B9780", Offset = "0x12B9780", VA = "0x12B9780")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002889")]
		[Address(RVA = "0x12B9788", Offset = "0x12B9788", VA = "0x12B9788")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170006B3")]
	protected override bool ShouldHandAnchorSnapToVirtualHand
	{
		[Token(Token = "0x6002890")]
		[Address(RVA = "0x12BA280", Offset = "0x12BA280", VA = "0x12BA280", Slot = "15")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006B4")]
	private bool UseSnapping
	{
		[Token(Token = "0x6002893")]
		[Address(RVA = "0x12BA470", Offset = "0x12BA470", VA = "0x12BA470")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006B5")]
	protected override int DefaultCollisionLayer
	{
		[Token(Token = "0x600289B")]
		[Address(RVA = "0x12BAA48", Offset = "0x12BAA48", VA = "0x12BAA48", Slot = "13")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170006B6")]
	private float CurrentBreakAngle
	{
		[Token(Token = "0x60028AC")]
		[Address(RVA = "0x12BCC98", Offset = "0x12BCC98", VA = "0x12BCC98")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170006B7")]
	public override bool ForceCurrentInteractionToContinue
	{
		[Token(Token = "0x60028B0")]
		[Address(RVA = "0x12BD444", Offset = "0x12BD444", VA = "0x12BD444", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006B8")]
	protected override bool CanDispatchInteractionStart
	{
		[Token(Token = "0x60028B6")]
		[Address(RVA = "0x12BE324", Offset = "0x12BE324", VA = "0x12BE324", Slot = "22")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006B9")]
	protected override float GripBreakAngleDegrees
	{
		[Token(Token = "0x60028B7")]
		[Address(RVA = "0x12BE338", Offset = "0x12BE338", VA = "0x12BE338", Slot = "14")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170006BA")]
	public override bool CanMoveFreely
	{
		[Token(Token = "0x60028B8")]
		[Address(RVA = "0x12BE350", Offset = "0x12BE350", VA = "0x12BE350", Slot = "26")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600288A")]
	[Address(RVA = "0x12B9794", Offset = "0x12B9794", VA = "0x12B9794", Slot = "11")]
	public override bool IsBlockingGrasping(VrHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x600288B")]
	[Address(RVA = "0x12B9880", Offset = "0x12B9880", VA = "0x12B9880", Slot = "12")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600288C")]
	[Address(RVA = "0x12B9E4C", Offset = "0x12B9E4C", VA = "0x12B9E4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600288D")]
	[Address(RVA = "0x12BA018", Offset = "0x12BA018", VA = "0x12BA018")]
	protected void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x600288E")]
	[Address(RVA = "0x12BA130", Offset = "0x12BA130", VA = "0x12BA130")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600288F")]
	[Address(RVA = "0x12BA248", Offset = "0x12BA248", VA = "0x12BA248")]
	public void SetGravityEnabled(bool useGravity)
	{
	}

	[Token(Token = "0x6002891")]
	[Address(RVA = "0x12B9BEC", Offset = "0x12B9BEC", VA = "0x12B9BEC")]
	public void RefreshConstrainedToWorldState()
	{
	}

	[Token(Token = "0x6002892")]
	[Address(RVA = "0x12BA288", Offset = "0x12BA288", VA = "0x12BA288")]
	private void CheckIsConstrainedToWorld(Joint curJoint, out bool isConstrainedToWorld, out bool isOnJointWithTranslationFreedom)
	{
	}

	[Token(Token = "0x6002894")]
	[Address(RVA = "0x12B9C90", Offset = "0x12B9C90", VA = "0x12B9C90")]
	public void RefreshHeldLayer()
	{
	}

	[Token(Token = "0x6002895")]
	[Address(RVA = "0x12BA4D4", Offset = "0x12BA4D4", VA = "0x12BA4D4")]
	public void SetColliderLayers(int newLayer)
	{
	}

	[Token(Token = "0x6002896")]
	[Address(RVA = "0x12BA518", Offset = "0x12BA518", VA = "0x12BA518")]
	private void SetColliderLayers(int newLayer, bool performChildCheck)
	{
	}

	[Token(Token = "0x6002897")]
	[Address(RVA = "0x12BA760", Offset = "0x12BA760", VA = "0x12BA760")]
	public void SetCollidersEnabled(bool collidersEnabled)
	{
	}

	[Token(Token = "0x6002898")]
	[Address(RVA = "0x12BA8B8", Offset = "0x12BA8B8", VA = "0x12BA8B8")]
	public void SetCollidersIgnoreCollisionsWith(List<Collider> ignoredColliders, bool ignore, float revertDelay)
	{
	}

	[Token(Token = "0x6002899")]
	[Address(RVA = "0x12BA910", Offset = "0x12BA910", VA = "0x12BA910")]
	public void SetCollidersIgnoreCollisionsWith(List<Collider> ignoredColliders, bool ignore)
	{
	}

	[Token(Token = "0x600289A")]
	[Address(RVA = "0x12BAA40", Offset = "0x12BAA40", VA = "0x12BAA40")]
	public void RefreshHeldLayerWithDelay(float delayRealtimeSeconds)
	{
	}

	[Token(Token = "0x600289C")]
	[Address(RVA = "0x12BAAB8", Offset = "0x12BAAB8", VA = "0x12BAAB8", Slot = "16")]
	public override void StartInteraction(VrHand hand, GraspMarker marker, bool isSwapping, bool isFromHandScan, out bool newlyGrabbed, bool remoteInteraction = false)
	{
	}

	[Token(Token = "0x600289D")]
	[Address(RVA = "0x12BABFC", Offset = "0x12BABFC", VA = "0x12BABFC")]
	public void StartInteractionActual(VrHand hand, GraspMarker marker, bool isSwapping, bool isFromHandScan, bool remoteInteraction = false)
	{
	}

	[Token(Token = "0x600289E")]
	[Address(RVA = "0x12BB14C", Offset = "0x12BB14C", VA = "0x12BB14C", Slot = "17")]
	public override bool StopInteraction(VrHand hand, bool isSwapping, bool fromGripRelease, bool isKeyInsertion, bool remoteInteraction)
	{
		return default(bool);
	}

	[Token(Token = "0x600289F")]
	[Address(RVA = "0x12BB458", Offset = "0x12BB458", VA = "0x12BB458")]
	private void ApplyStopInteractionPhysicsThrow(VrHand hand, bool isSwapping)
	{
	}

	[Token(Token = "0x60028A0")]
	[Address(RVA = "0x12BB7F0", Offset = "0x12BB7F0", VA = "0x12BB7F0")]
	private void ApplyPhysicsThrow(Vector3 releaseVelocityLinear, Vector3 releaseVelocityAngular)
	{
	}

	[Token(Token = "0x60028A1")]
	[Address(RVA = "0x12BC644", Offset = "0x12BC644", VA = "0x12BC644")]
	public float GetVerticalAngle(Vector3 a, Vector3 b)
	{
		return default(float);
	}

	[Token(Token = "0x60028A2")]
	[Address(RVA = "0x12BC818", Offset = "0x12BC818", VA = "0x12BC818")]
	[IteratorStateMachine(typeof(<DoPostThrowVelocityAdjustment>d__92))]
	private IEnumerator DoPostThrowVelocityAdjustment(Vector3 velocity, Transform target, ThrowOverrideDefinition.ThrowOverride throwOverride)
	{
		return null;
	}

	[Token(Token = "0x60028A3")]
	[Address(RVA = "0x12BC908", Offset = "0x12BC908", VA = "0x12BC908")]
	private float GetHorizontalAngle(Vector3 dir1, Vector3 dir2)
	{
		return default(float);
	}

	[Token(Token = "0x60028A4")]
	[Address(RVA = "0x12BCA10", Offset = "0x12BCA10", VA = "0x12BCA10")]
	private float GetHorizontalDistance(Vector3 position1, Vector3 position2)
	{
		return default(float);
	}

	[Token(Token = "0x60028A5")]
	[Address(RVA = "0x12BCA94", Offset = "0x12BCA94", VA = "0x12BCA94")]
	public void AbortInteraction(VrHand hand)
	{
	}

	[Token(Token = "0x60028A6")]
	[Address(RVA = "0x12BCB44", Offset = "0x12BCB44", VA = "0x12BCB44")]
	public void SetSnapOverride(bool snapOverride)
	{
	}

	[Token(Token = "0x60028A7")]
	[Address(RVA = "0x12BCBAC", Offset = "0x12BCBAC", VA = "0x12BCBAC")]
	public void ClearSnapOverride()
	{
	}

	[Token(Token = "0x60028A8")]
	[Address(RVA = "0x12BCBB4", Offset = "0x12BCBB4", VA = "0x12BCBB4", Slot = "20")]
	protected override BreakResponse DetermineBreakResponse(Vector3 desiredPosition, Quaternion desiredRotation)
	{
		return default(BreakResponse);
	}

	[Token(Token = "0x60028A9")]
	[Address(RVA = "0x12BAF84", Offset = "0x12BAF84", VA = "0x12BAF84")]
	private void StartBlend(bool snapByTime)
	{
	}

	[Token(Token = "0x60028AA")]
	[Address(RVA = "0x12BCBC8", Offset = "0x12BCBC8", VA = "0x12BCBC8")]
	private void BlendImmediately()
	{
	}

	[Token(Token = "0x60028AB")]
	[Address(RVA = "0x12BCBDC", Offset = "0x12BCBDC", VA = "0x12BCBDC")]
	private void GetCurrentBreakParameters(out float breakDistance, out float breakAngle)
	{
	}

	[Token(Token = "0x60028AD")]
	[Address(RVA = "0x12BCD30", Offset = "0x12BCD30", VA = "0x12BCD30", Slot = "23")]
	protected override bool ShouldBreakInteraction(Vector3 bodyDesiredPosition, Vector3 graspPositionDifference, Quaternion graspRotationDifference, bool isSecondary)
	{
		return default(bool);
	}

	[Token(Token = "0x60028AE")]
	[Address(RVA = "0x12BCE78", Offset = "0x12BCE78", VA = "0x12BCE78")]
	private bool ShouldBreakByAngle(float maxBreakAngle)
	{
		return default(bool);
	}

	[Token(Token = "0x60028AF")]
	[Address(RVA = "0x12BD1C4", Offset = "0x12BD1C4", VA = "0x12BD1C4")]
	private bool ShouldBreakByDistance(float maxBreakDistance)
	{
		return default(bool);
	}

	[Token(Token = "0x60028B1")]
	[Address(RVA = "0x12BD4AC", Offset = "0x12BD4AC", VA = "0x12BD4AC", Slot = "24")]
	protected override void UpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference)
	{
	}

	[Token(Token = "0x60028B2")]
	[Address(RVA = "0x12BDD30", Offset = "0x12BDD30", VA = "0x12BDD30", Slot = "18")]
	protected override void LateUpdate()
	{
	}

	[Token(Token = "0x60028B3")]
	[Address(RVA = "0x12BDF78", Offset = "0x12BDF78", VA = "0x12BDF78", Slot = "25")]
	protected override void FixedUpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference)
	{
	}

	[Token(Token = "0x60028B4")]
	[Address(RVA = "0x12BDA8C", Offset = "0x12BDA8C", VA = "0x12BDA8C")]
	private bool CanSnap(Vector3 graspPositionDifference)
	{
		return default(bool);
	}

	[Token(Token = "0x60028B5")]
	[Address(RVA = "0x12BE304", Offset = "0x12BE304", VA = "0x12BE304", Slot = "21")]
	protected override void Warp(Vector3 warpPosition, Quaternion warpRotation)
	{
	}

	[Token(Token = "0x60028B9")]
	[Address(RVA = "0x12BE3CC", Offset = "0x12BE3CC", VA = "0x12BE3CC")]
	public WorldInteraction_Hold()
	{
	}
}
[Token(Token = "0x200070C")]
public class WorldInteraction_HoldStatic : WorldInteraction
{
	[Token(Token = "0x400220D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	[SerializeField]
	private bool m_useBreaking;

	[Token(Token = "0x400220E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
	[SerializeField]
	[UnityEngine.Tooltip("If enabled, break by both distance and angle. If disabled, break by distance only.")]
	private bool m_breakByAngle;

	[Token(Token = "0x400220F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[SerializeField]
	private float m_moveDeltaBreakDistance;

	[Token(Token = "0x4002210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private float m_rotDeltaBreakAngle;

	[Token(Token = "0x170006BD")]
	protected override int DefaultCollisionLayer
	{
		[Token(Token = "0x60028C6")]
		[Address(RVA = "0x12BEFE8", Offset = "0x12BEFE8", VA = "0x12BEFE8", Slot = "13")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170006BE")]
	public override bool ForceCurrentInteractionToContinue
	{
		[Token(Token = "0x60028C7")]
		[Address(RVA = "0x12BF040", Offset = "0x12BF040", VA = "0x12BF040", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006BF")]
	protected override bool CanDispatchInteractionStart
	{
		[Token(Token = "0x60028CA")]
		[Address(RVA = "0x12BF050", Offset = "0x12BF050", VA = "0x12BF050", Slot = "22")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006C0")]
	protected override bool ShouldHandAnchorSnapToVirtualHand
	{
		[Token(Token = "0x60028CB")]
		[Address(RVA = "0x12BF058", Offset = "0x12BF058", VA = "0x12BF058", Slot = "15")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006C1")]
	public override bool CanMoveFreely
	{
		[Token(Token = "0x60028CC")]
		[Address(RVA = "0x12BF060", Offset = "0x12BF060", VA = "0x12BF060", Slot = "26")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60028C2")]
	[Address(RVA = "0x12BEE08", Offset = "0x12BEE08", VA = "0x12BEE08")]
	private void Start()
	{
	}

	[Token(Token = "0x60028C3")]
	[Address(RVA = "0x12BEE58", Offset = "0x12BEE58", VA = "0x12BEE58", Slot = "16")]
	public override void StartInteraction(VrHand hand, GraspMarker marker, bool isSwapping, bool isFromHandScan, out bool newlyGrabbed, bool remoteInteraction = false)
	{
	}

	[Token(Token = "0x60028C4")]
	[Address(RVA = "0x12BEF08", Offset = "0x12BEF08", VA = "0x12BEF08", Slot = "17")]
	public override bool StopInteraction(VrHand hand, bool isSwapping, bool fromGripRelease, bool isKeyInsertion, bool remoteInteraction)
	{
		return default(bool);
	}

	[Token(Token = "0x60028C5")]
	[Address(RVA = "0x12BEF1C", Offset = "0x12BEF1C", VA = "0x12BEF1C", Slot = "23")]
	protected override bool ShouldBreakInteraction(Vector3 bodyDesiredPosition, Vector3 graspPositionDifference, Quaternion graspRotationDifference, bool isSecondary)
	{
		return default(bool);
	}

	[Token(Token = "0x60028C8")]
	[Address(RVA = "0x12BF048", Offset = "0x12BF048", VA = "0x12BF048", Slot = "24")]
	protected override void UpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference)
	{
	}

	[Token(Token = "0x60028C9")]
	[Address(RVA = "0x12BF04C", Offset = "0x12BF04C", VA = "0x12BF04C", Slot = "25")]
	protected override void FixedUpdateInteraction(Vector3 bodyCurrentPosition, Vector3 bodyDesiredPosition, Quaternion bodyCurrentRotation, Quaternion bodyDesiredRotation, Vector3 graspPositionDifference, Quaternion graspRotationDifference)
	{
	}

	[Token(Token = "0x60028CD")]
	[Address(RVA = "0x12BF068", Offset = "0x12BF068", VA = "0x12BF068")]
	public WorldInteraction_HoldStatic()
	{
	}
}
[Token(Token = "0x200070D")]
[RequireComponent(typeof(Rigidbody))]
[Obsolete("A new approach is used for moving platforms that allows them to be driven by a physics joint - see existing moving platforms for example setup.", false)]
public class WorldMovingPlatformInteraction : CachedMonoBehaviour
{
	[Token(Token = "0x4002212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<MovingPlatform_TrackedObject> m_targets;

	[Token(Token = "0x170006C2")]
	public bool DontAllowDisconnect
	{
		[Token(Token = "0x60028CE")]
		[Address(RVA = "0x12BF0D8", Offset = "0x12BF0D8", VA = "0x12BF0D8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60028CF")]
		[Address(RVA = "0x12BF0E0", Offset = "0x12BF0E0", VA = "0x12BF0E0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60028D0")]
	[Address(RVA = "0x12BF0EC", Offset = "0x12BF0EC", VA = "0x12BF0EC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60028D1")]
	[Address(RVA = "0x12BF15C", Offset = "0x12BF15C", VA = "0x12BF15C")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x60028D2")]
	[Address(RVA = "0x12BF418", Offset = "0x12BF418", VA = "0x12BF418")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60028D3")]
	[Address(RVA = "0x12BF55C", Offset = "0x12BF55C", VA = "0x12BF55C")]
	private void Update()
	{
	}

	[Token(Token = "0x60028D4")]
	[Address(RVA = "0x12BF560", Offset = "0x12BF560", VA = "0x12BF560")]
	private void UpdateTargetPosition()
	{
	}

	[Token(Token = "0x60028D5")]
	[Address(RVA = "0x12BF2C8", Offset = "0x12BF2C8", VA = "0x12BF2C8")]
	private MovingPlatform_TrackedObject GetOrAddTargetList(GameObject target)
	{
		return null;
	}

	[Token(Token = "0x60028D6")]
	[Address(RVA = "0x12BF4E8", Offset = "0x12BF4E8", VA = "0x12BF4E8")]
	private void RemoveFromTargetList(GameObject target)
	{
	}

	[Token(Token = "0x60028D7")]
	[Address(RVA = "0x12BF804", Offset = "0x12BF804", VA = "0x12BF804")]
	private MovingPlatform_TrackedObject GetTrackedObjectFromList(GameObject target)
	{
		return null;
	}

	[Token(Token = "0x60028D8")]
	[Address(RVA = "0x12BFA2C", Offset = "0x12BFA2C", VA = "0x12BFA2C")]
	public WorldMovingPlatformInteraction()
	{
	}
}
[Token(Token = "0x200070E")]
public class MovingPlatform_TrackedObject
{
	[Token(Token = "0x4002213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject m_trackedGameObject;

	[Token(Token = "0x4002214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_offset;

	[Token(Token = "0x4002215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody m_rigidbody;

	[Token(Token = "0x4002216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InterpolatedTransform[] m_interpolatedTransforms;

	[Token(Token = "0x60028D9")]
	[Address(RVA = "0x12BF908", Offset = "0x12BF908", VA = "0x12BF908")]
	public MovingPlatform_TrackedObject(GameObject target, Vector3 offset)
	{
	}

	[Token(Token = "0x60028DA")]
	[Address(RVA = "0x12BFAB4", Offset = "0x12BFAB4", VA = "0x12BFAB4")]
	public void UpdateOffset(Vector3 offset)
	{
	}

	[Token(Token = "0x60028DB")]
	[Address(RVA = "0x12BF72C", Offset = "0x12BF72C", VA = "0x12BF72C")]
	public bool CanUpdatePosition()
	{
		return default(bool);
	}
}
[Token(Token = "0x200070F")]
public enum VrDeviceModel
{
	[Token(Token = "0x4002218")]
	Unknown,
	[Token(Token = "0x4002219")]
	OculusRift,
	[Token(Token = "0x400221A")]
	OculusRiftS,
	[Token(Token = "0x400221B")]
	OculusQuest1,
	[Token(Token = "0x400221C")]
	OculusQuest2,
	[Token(Token = "0x400221D")]
	PicoNeo3
}
[Token(Token = "0x2000710")]
public static class VrDeviceModelDetector
{
	[Token(Token = "0x400221E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VrDeviceModel s_cachedModel;

	[Token(Token = "0x170006C3")]
	public static VrDeviceModel CurrentModel
	{
		[Token(Token = "0x60028DC")]
		[Address(RVA = "0x12BFAC0", Offset = "0x12BFAC0", VA = "0x12BFAC0")]
		get
		{
			return default(VrDeviceModel);
		}
	}
}
[Token(Token = "0x2000711")]
public class VrGloveIK : MonoBehaviour
{
	[Token(Token = "0x400221F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_mover;

	[Token(Token = "0x4002220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_correction;

	[Token(Token = "0x4002221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 m_correctionVector;

	[Token(Token = "0x4002222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform m_up;

	[Token(Token = "0x4002223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform m_target;

	[Token(Token = "0x60028DD")]
	[Address(RVA = "0x12BFC48", Offset = "0x12BFC48", VA = "0x12BFC48")]
	private void Start()
	{
	}

	[Token(Token = "0x60028DE")]
	[Address(RVA = "0x12BFD34", Offset = "0x12BFD34", VA = "0x12BFD34")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60028DF")]
	[Address(RVA = "0x12BFC74", Offset = "0x12BFC74", VA = "0x12BFC74")]
	private void UpdateIk()
	{
	}

	[Token(Token = "0x60028E0")]
	[Address(RVA = "0x12BFD38", Offset = "0x12BFD38", VA = "0x12BFD38")]
	public VrGloveIK()
	{
	}
}
[Token(Token = "0x2000712")]
public enum VrHandState
{
	[Token(Token = "0x4002225")]
	Invalid,
	[Token(Token = "0x4002226")]
	Hidden,
	[Token(Token = "0x4002227")]
	Idle,
	[Token(Token = "0x4002228")]
	HoldWorldInteractiveItem
}
[Token(Token = "0x2000713")]
public enum VrHandController
{
	[Token(Token = "0x400222A")]
	Left,
	[Token(Token = "0x400222B")]
	Right
}
[Token(Token = "0x2000714")]
[RequireComponent(typeof(IHandInput))]
[RequireComponent(typeof(HandPoseHelper))]
public class VrHand : MonoBehaviour
{
	[Token(Token = "0x2000715")]
	private struct VelocityData
	{
		[Token(Token = "0x4002263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float FrameTime;

		[Token(Token = "0x4002264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Vector3 Velocity;

		[Token(Token = "0x4002265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float SqrSpeed;

		[Token(Token = "0x6002929")]
		[Address(RVA = "0x12C1350", Offset = "0x12C1350", VA = "0x12C1350")]
		public VelocityData(Vector3 velocity)
		{
		}
	}

	[Token(Token = "0x400222C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VrHand s_localLeftHand;

	[Token(Token = "0x400222D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static VrHand s_localRightHand;

	[Token(Token = "0x400222E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<bool> OnVisibilityChanged;

	[Token(Token = "0x400222F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<VrHand, GraspMarker> ActionOnRemoteGraspSet;

	[Token(Token = "0x4002230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Identifier m_identifier;

	[Token(Token = "0x4002231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private VrHandController m_controller;

	[Token(Token = "0x4002232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Animator m_animator;

	[Token(Token = "0x4002233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Renderer[] m_hideableMeshRenderers;

	[Token(Token = "0x4002234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_hasEverEscapedZeroLocalPosition;

	[Token(Token = "0x4002235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int m_meshExternallyHidden;

	[Token(Token = "0x4002236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_lastHandVisibility;

	[Token(Token = "0x4002237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int m_defaultRenderQueue;

	[Token(Token = "0x4002238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform m_raycastTransform;

	[Token(Token = "0x4002239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform m_uiLaserTransform;

	[Token(Token = "0x400223A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform m_touchFingertipTransform;

	[Token(Token = "0x400223B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_handSkeletonHandTransform;

	[Token(Token = "0x400223C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private IHandInput m_input;

	[Token(Token = "0x400223D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VrHandWorldCollider m_worldCollider;

	[Token(Token = "0x400223E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private VrHandTransformOverride m_transformOverrideControl;

	[Token(Token = "0x400223F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private HandPoseHelper m_handPoseOverrideHelper;

	[Token(Token = "0x4002240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform m_overrideTransform;

	[Token(Token = "0x4002241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float? m_overrideTransformMaxDistance;

	[Token(Token = "0x4002242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Watch m_watch;

	[Token(Token = "0x4002243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool m_isPrimaryHand;

	[Token(Token = "0x4002244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private VrHandState m_handState;

	[Token(Token = "0x4002245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private VrHandState m_anticipatedHandState;

	[Token(Token = "0x4002247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 linearVelocity;

	[Token(Token = "0x4002248")]
	private const int c_maxFramesToTrackRecentVelocity = 50;

	[Token(Token = "0x4002249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Queue<VelocityData> m_previousVelocities;

	[Token(Token = "0x400224A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private float m_velocityLookbackTime;

	[Token(Token = "0x400224B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[HideInInspector]
	public Transform m_transform;

	[Token(Token = "0x400224C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float m_currentHandIndexBlendValue;

	[Token(Token = "0x400224D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float m_currentHandThumbBlendValue;

	[Token(Token = "0x400224E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float m_currentHandGripBlendValue;

	[Token(Token = "0x400224F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private VrItem m_remoteHeldItem;

	[Token(Token = "0x4002250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Dictionary<Renderer, bool> m_renderersDefaultVisibility;

	[Token(Token = "0x4002251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private VrRigFPSController m_vrRigFPSController;

	[Token(Token = "0x4002252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private string m_mostRecentAnimatorBooleanName;

	[Token(Token = "0x4002253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private float m_indexBlendSpeed;

	[Token(Token = "0x4002254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[SerializeField]
	private float m_thumbBlendSpeed;

	[Token(Token = "0x4002255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private float m_gripBlendSpeed;

	[Token(Token = "0x4002256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Transform m_anchorTransform;

	[Token(Token = "0x4002257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private Transform m_ikTransform;

	[Token(Token = "0x4002258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private VrGloveIK m_ikGloveTarget;

	[Token(Token = "0x4002259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private HandHaptics m_handHaptics;

	[Token(Token = "0x400225A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private InventorySlot_Hand m_inventorySlot;

	[Token(Token = "0x400225B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int GripAnimParam;

	[Token(Token = "0x400225C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly int TriggerAnimParam;

	[Token(Token = "0x400225D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly int ThumbAnimParam;

	[Token(Token = "0x400225E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static readonly int PickupHover;

	[Token(Token = "0x400225F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[Header("Multiplayer")]
	[UnityEngine.Tooltip("If this hand belongs to a remote player, assign the remote player here. If this hand belongs to the local player, leave this empty.")]
	[SerializeField]
	private RemotePlayerAgent m_ownerRemoteAgent;

	[Token(Token = "0x4002260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[UnityEngine.Tooltip("If defined, use this IK controller. If undefined, use the controller on the local player (VrRig).")]
	[SerializeField]
	private VrPlayerAvatarIKController m_fullbodyIKControllerOverride;

	[Token(Token = "0x4002261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	[UnityEngine.Tooltip("Transform to sync hand position over the network")]
	private Transform m_networkHandSyncTransform;

	[Token(Token = "0x170006C4")]
	public bool IsVisible
	{
		[Token(Token = "0x60028E1")]
		[Address(RVA = "0x12BFD98", Offset = "0x12BFD98", VA = "0x12BFD98")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006C5")]
	public VrHandController Controller
	{
		[Token(Token = "0x60028E2")]
		[Address(RVA = "0x12BFDA0", Offset = "0x12BFDA0", VA = "0x12BFDA0")]
		get
		{
			return default(VrHandController);
		}
	}

	[Token(Token = "0x170006C6")]
	public Transform TouchFingertipTransform
	{
		[Token(Token = "0x60028E3")]
		[Address(RVA = "0x12BFDA8", Offset = "0x12BFDA8", VA = "0x12BFDA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006C7")]
	public Transform HandSkeletonHandTransform
	{
		[Token(Token = "0x60028E4")]
		[Address(RVA = "0x12BFDB0", Offset = "0x12BFDB0", VA = "0x12BFDB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006C8")]
	public HandPoseHelper HandPoseOverrideHelper
	{
		[Token(Token = "0x60028E5")]
		[Address(RVA = "0x12BFDB8", Offset = "0x12BFDB8", VA = "0x12BFDB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006C9")]
	public Watch AssociatedWatch
	{
		[Token(Token = "0x60028E6")]
		[Address(RVA = "0x12BFDC0", Offset = "0x12BFDC0", VA = "0x12BFDC0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006CA")]
	public VrHandWorldCollider WorldCollider
	{
		[Token(Token = "0x60028E7")]
		[Address(RVA = "0x12BFDC8", Offset = "0x12BFDC8", VA = "0x12BFDC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006CB")]
	public bool TransformOverrideRunning
	{
		[Token(Token = "0x60028E8")]
		[Address(RVA = "0x12B6210", Offset = "0x12B6210", VA = "0x12B6210")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006CC")]
	public VrMotionInputWorldInteraction VRWorldInteraction
	{
		[Token(Token = "0x60028E9")]
		[Address(RVA = "0x12BFDD0", Offset = "0x12BFDD0", VA = "0x12BFDD0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60028EA")]
		[Address(RVA = "0x12BFDD8", Offset = "0x12BFDD8", VA = "0x12BFDD8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170006CD")]
	public Transform IKTransform
	{
		[Token(Token = "0x60028EE")]
		[Address(RVA = "0x12C0140", Offset = "0x12C0140", VA = "0x12C0140")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006CE")]
	public VrGloveIK IKGloveTarget
	{
		[Token(Token = "0x60028EF")]
		[Address(RVA = "0x12C0148", Offset = "0x12C0148", VA = "0x12C0148")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006CF")]
	public HandHaptics HandHaptics
	{
		[Token(Token = "0x60028F0")]
		[Address(RVA = "0x12C0150", Offset = "0x12C0150", VA = "0x12C0150")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006D0")]
	public IHandInput Input
	{
		[Token(Token = "0x60028F1")]
		[Address(RVA = "0x12C0158", Offset = "0x12C0158", VA = "0x12C0158")]
		get
		{
			return null;
		}
		[Token(Token = "0x60028F2")]
		[Address(RVA = "0x12C0160", Offset = "0x12C0160", VA = "0x12C0160")]
		set
		{
		}
	}

	[Token(Token = "0x170006D1")]
	public InventorySlot_Hand InventorySlot
	{
		[Token(Token = "0x60028F3")]
		[Address(RVA = "0x12C0168", Offset = "0x12C0168", VA = "0x12C0168")]
		get
		{
			return null;
		}
		[Token(Token = "0x60028F4")]
		[Address(RVA = "0x12C0170", Offset = "0x12C0170", VA = "0x12C0170")]
		set
		{
		}
	}

	[Token(Token = "0x170006D2")]
	public bool IsRemoteHand
	{
		[Token(Token = "0x60028F5")]
		[Address(RVA = "0x12C0180", Offset = "0x12C0180", VA = "0x12C0180")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006D3")]
	public PlayerAgent OwningPlayerAgent
	{
		[Token(Token = "0x60028F6")]
		[Address(RVA = "0x12B7C84", Offset = "0x12B7C84", VA = "0x12B7C84")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006D4")]
	public Transform NetworkHandSyncTransform
	{
		[Token(Token = "0x60028F7")]
		[Address(RVA = "0x12C01E0", Offset = "0x12C01E0", VA = "0x12C01E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006D5")]
	public bool IsPrimaryHand
	{
		[Token(Token = "0x6002915")]
		[Address(RVA = "0x12C18D8", Offset = "0x12C18D8", VA = "0x12C18D8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002916")]
		[Address(RVA = "0x12C18E0", Offset = "0x12C18E0", VA = "0x12C18E0")]
		set
		{
		}
	}

	[Token(Token = "0x170006D6")]
	public Transform AnchorTransform
	{
		[Token(Token = "0x6002917")]
		[Address(RVA = "0x12C18EC", Offset = "0x12C18EC", VA = "0x12C18EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006D7")]
	public VrItem RemoteHeldItem
	{
		[Token(Token = "0x6002918")]
		[Address(RVA = "0x12C18F4", Offset = "0x12C18F4", VA = "0x12C18F4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006D8")]
	public WorldInteraction JustStoppedInteraction
	{
		[Token(Token = "0x6002919")]
		[Address(RVA = "0x12C18FC", Offset = "0x12C18FC", VA = "0x12C18FC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600291A")]
		[Address(RVA = "0x12C1904", Offset = "0x12C1904", VA = "0x12C1904")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60028EB")]
	[Address(RVA = "0x12BFDE0", Offset = "0x12BFDE0", VA = "0x12BFDE0")]
	public Vector3 ExtractFingerBlendValues()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60028EC")]
	[Address(RVA = "0x12BFDEC", Offset = "0x12BFDEC", VA = "0x12BFDEC")]
	public void ApplyFingerBlendValues(Vector3 blendValues)
	{
	}

	[Token(Token = "0x60028ED")]
	[Address(RVA = "0x12BFEAC", Offset = "0x12BFEAC", VA = "0x12BFEAC")]
	public HandInputToken ExtractHandInputValues()
	{
		return null;
	}

	[Token(Token = "0x60028F8")]
	[Address(RVA = "0x12C01E8", Offset = "0x12C01E8", VA = "0x12C01E8")]
	public void Awake()
	{
	}

	[Token(Token = "0x60028F9")]
	[Address(RVA = "0x12C087C", Offset = "0x12C087C", VA = "0x12C087C")]
	public void AssociateAnchorTransform(Transform anchorTransform)
	{
	}

	[Token(Token = "0x60028FA")]
	[Address(RVA = "0x12C0A18", Offset = "0x12C0A18", VA = "0x12C0A18")]
	public void AssociateWorldCollider(VrHandWorldCollider worldCollider)
	{
	}

	[Token(Token = "0x60028FB")]
	[Address(RVA = "0x12B5070", Offset = "0x12B5070", VA = "0x12B5070")]
	public void SetHandTransformOverride(Transform overrideTransform, [Optional] float? maxHandDistance)
	{
	}

	[Token(Token = "0x60028FC")]
	[Address(RVA = "0x12C0A20", Offset = "0x12C0A20", VA = "0x12C0A20")]
	public void AssociateWatch(Watch watch)
	{
	}

	[Token(Token = "0x60028FD")]
	[Address(RVA = "0x12C0A28", Offset = "0x12C0A28", VA = "0x12C0A28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60028FE")]
	[Address(RVA = "0x12C0AA0", Offset = "0x12C0AA0", VA = "0x12C0AA0")]
	public void EnterGameplayState()
	{
	}

	[Token(Token = "0x60028FF")]
	[Address(RVA = "0x12B509C", Offset = "0x12B509C", VA = "0x12B509C")]
	public bool RequestHandState(VrHandState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6002900")]
	[Address(RVA = "0x12C0B6C", Offset = "0x12C0B6C", VA = "0x12C0B6C")]
	private void ChangeHandState(VrHandState state)
	{
	}

	[Token(Token = "0x6002901")]
	[Address(RVA = "0x12C0B78", Offset = "0x12C0B78", VA = "0x12C0B78")]
	private void OnHandStateEnter(VrHandState state)
	{
	}

	[Token(Token = "0x6002902")]
	[Address(RVA = "0x12C0B74", Offset = "0x12C0B74", VA = "0x12C0B74")]
	private void OnHandStateExit(VrHandState state)
	{
	}

	[Token(Token = "0x6002903")]
	[Address(RVA = "0x12BDA10", Offset = "0x12BDA10", VA = "0x12BDA10")]
	public void ForceCurrentOverrideOntoTarget()
	{
	}

	[Token(Token = "0x6002904")]
	[Address(RVA = "0x12C0E14", Offset = "0x12C0E14", VA = "0x12C0E14")]
	private void Update()
	{
	}

	[Token(Token = "0x6002905")]
	[Address(RVA = "0x12C10D4", Offset = "0x12C10D4", VA = "0x12C10D4")]
	private void UpdateState_Idle()
	{
	}

	[Token(Token = "0x6002906")]
	[Address(RVA = "0x12C06C4", Offset = "0x12C06C4", VA = "0x12C06C4")]
	private void DetermineHandMeshVisibility()
	{
	}

	[Token(Token = "0x6002907")]
	[Address(RVA = "0x12C13A4", Offset = "0x12C13A4", VA = "0x12C13A4")]
	public bool GetCurrentHandMeshVisibility()
	{
		return default(bool);
	}

	[Token(Token = "0x6002908")]
	[Address(RVA = "0x12C0698", Offset = "0x12C0698", VA = "0x12C0698")]
	public void SetMeshExternallyHidden(bool hidden)
	{
	}

	[Token(Token = "0x6002909")]
	[Address(RVA = "0x12C156C", Offset = "0x12C156C", VA = "0x12C156C")]
	public void SetMeshExternallyHidden(bool hidden, int mask)
	{
	}

	[Token(Token = "0x600290A")]
	[Address(RVA = "0x12C1598", Offset = "0x12C1598", VA = "0x12C1598")]
	public void ResetRenderQueue()
	{
	}

	[Token(Token = "0x600290B")]
	[Address(RVA = "0x12C160C", Offset = "0x12C160C", VA = "0x12C160C")]
	public void SetRenderQueue(int renderQueue)
	{
	}

	[Token(Token = "0x600290C")]
	[Address(RVA = "0x12C1680", Offset = "0x12C1680", VA = "0x12C1680")]
	public void SetHandHoverPoseActive(bool hoverPose)
	{
	}

	[Token(Token = "0x600290D")]
	[Address(RVA = "0x12C174C", Offset = "0x12C174C", VA = "0x12C174C")]
	private void OnGameplayPaused()
	{
	}

	[Token(Token = "0x600290E")]
	[Address(RVA = "0x12B786C", Offset = "0x12B786C", VA = "0x12B786C")]
	public void SetHandPoseOverride(Matrix4x4[] poseData, bool allowEnabledAnimator = false)
	{
	}

	[Token(Token = "0x600290F")]
	[Address(RVA = "0x12C1754", Offset = "0x12C1754", VA = "0x12C1754")]
	public Matrix4x4[] LerpHandPoseOverride(Matrix4x4[] endPoseData, float interpolant)
	{
		return null;
	}

	[Token(Token = "0x6002910")]
	[Address(RVA = "0x12C1760", Offset = "0x12C1760", VA = "0x12C1760")]
	public Matrix4x4[] LerpHandPoseOverride(Matrix4x4[] startPoseData, Matrix4x4[] endPoseData, float interpolant)
	{
		return null;
	}

	[Token(Token = "0x6002911")]
	[Address(RVA = "0x12C1818", Offset = "0x12C1818", VA = "0x12C1818")]
	public Transform GetCurrentRaycastTransform()
	{
		return null;
	}

	[Token(Token = "0x6002912")]
	[Address(RVA = "0x12C1820", Offset = "0x12C1820", VA = "0x12C1820")]
	public void UpdateRaycastTransform(Transform t)
	{
	}

	[Token(Token = "0x6002913")]
	[Address(RVA = "0x12C0AE8", Offset = "0x12C0AE8", VA = "0x12C0AE8")]
	private void ClearAnimatorBools()
	{
	}

	[Token(Token = "0x6002914")]
	[Address(RVA = "0x12C0A58", Offset = "0x12C0A58", VA = "0x12C0A58")]
	private void SetAnimatorBool(string animatorBooleanName)
	{
	}

	[Token(Token = "0x600291B")]
	[Address(RVA = "0x12C1284", Offset = "0x12C1284", VA = "0x12C1284")]
	private PXR_Controller GetPXRController()
	{
		return null;
	}

	[Token(Token = "0x600291C")]
	[Address(RVA = "0x12C1914", Offset = "0x12C1914", VA = "0x12C1914")]
	public Vector3 DetermineThrowVelocity2(float thresholdSpeed = 0f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600291D")]
	[Address(RVA = "0x12B8AEC", Offset = "0x12B8AEC", VA = "0x12B8AEC")]
	public Vector3 DetermineThrowVelocity(float thresholdSpeed = 0f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600291E")]
	[Address(RVA = "0x12BB718", Offset = "0x12BB718", VA = "0x12BB718")]
	public Vector3 GetAngularVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600291F")]
	[Address(RVA = "0x12C1C2C", Offset = "0x12C1C2C", VA = "0x12C1C2C")]
	public VrHandState GetState()
	{
		return default(VrHandState);
	}

	[Token(Token = "0x6002920")]
	[Address(RVA = "0x12C1C34", Offset = "0x12C1C34", VA = "0x12C1C34")]
	public VrHandState GetAnticipatedState()
	{
		return default(VrHandState);
	}

	[Token(Token = "0x6002921")]
	[Address(RVA = "0x12B56BC", Offset = "0x12B56BC", VA = "0x12B56BC")]
	public void BlendHandBackToDefault()
	{
	}

	[Token(Token = "0x6002922")]
	[Address(RVA = "0x12C1C3C", Offset = "0x12C1C3C", VA = "0x12C1C3C")]
	public Ray GetInteractionRay()
	{
		return default(Ray);
	}

	[Token(Token = "0x6002923")]
	[Address(RVA = "0x12C1CB4", Offset = "0x12C1CB4", VA = "0x12C1CB4")]
	public Ray GetInteractionRay(Vector3 offset)
	{
		return default(Ray);
	}

	[Token(Token = "0x6002924")]
	[Address(RVA = "0x12B23C0", Offset = "0x12B23C0", VA = "0x12B23C0")]
	public VrHand GetOtherHand()
	{
		return null;
	}

	[Token(Token = "0x6002925")]
	[Address(RVA = "0x12C1DB8", Offset = "0x12C1DB8", VA = "0x12C1DB8")]
	public void SetRemoteHeldItem(VrItem item)
	{
	}

	[Token(Token = "0x6002926")]
	[Address(RVA = "0x12B50C8", Offset = "0x12B50C8", VA = "0x12B50C8")]
	public void SetRemoteGrasp(GraspMarker graspMarker)
	{
	}

	[Token(Token = "0x6002927")]
	[Address(RVA = "0x12C1DC8", Offset = "0x12C1DC8", VA = "0x12C1DC8")]
	public VrHand()
	{
	}
}
[Token(Token = "0x2000716")]
[RequireComponent(typeof(Collider))]
public class VrHandHighFiveTrigger : MonoBehaviour
{
	[Token(Token = "0x4002266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PlayerAgent m_playerAgent;

	[Token(Token = "0x600292A")]
	[Address(RVA = "0x12C1FA4", Offset = "0x12C1FA4", VA = "0x12C1FA4")]
	private void Start()
	{
	}

	[Token(Token = "0x600292B")]
	[Address(RVA = "0x12C2084", Offset = "0x12C2084", VA = "0x12C2084")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600292C")]
	[Address(RVA = "0x12C21CC", Offset = "0x12C21CC", VA = "0x12C21CC")]
	public VrHandHighFiveTrigger()
	{
	}
}
[Token(Token = "0x2000717")]
public class VrHandTransformOverride : MonoBehaviour
{
	[Token(Token = "0x4002267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VrHand m_hand;

	[Token(Token = "0x4002268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform m_handRoot;

	[Token(Token = "0x4002269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform m_rigRoot;

	[Token(Token = "0x400226A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform m_goalTransform;

	[Token(Token = "0x400226B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float m_timeCounter;

	[Token(Token = "0x400226C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float m_animationTime;

	[Token(Token = "0x400226D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float m_maxSqrDistanceFromRoot;

	[Token(Token = "0x400226E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool m_runAnimation;

	[Token(Token = "0x400226F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool m_runForever;

	[Token(Token = "0x4002270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	private bool m_passedCloseEnough;

	[Token(Token = "0x4002271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	private bool m_firstUpdate;

	[Token(Token = "0x4002272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 m_basePositionLocal;

	[Token(Token = "0x4002273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion m_baseRotationLocal;

	[Token(Token = "0x170006D9")]
	public bool IsRunning
	{
		[Token(Token = "0x600292D")]
		[Address(RVA = "0x12C21D4", Offset = "0x12C21D4", VA = "0x12C21D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600292E")]
	[Address(RVA = "0x12C09C0", Offset = "0x12C09C0", VA = "0x12C09C0")]
	public void Setup(Transform rig, VrHand hand, float animationTime)
	{
	}

	[Token(Token = "0x600292F")]
	[Address(RVA = "0x12C0C0C", Offset = "0x12C0C0C", VA = "0x12C0C0C")]
	public void StartBlendHandToTransform(Transform goal, [Optional] float? maxDistanceFromRoot, bool runForever = false)
	{
	}

	[Token(Token = "0x6002930")]
	[Address(RVA = "0x12C0E08", Offset = "0x12C0E08", VA = "0x12C0E08")]
	public void ForceCurrentOverrideOntoTarget()
	{
	}

	[Token(Token = "0x6002931")]
	[Address(RVA = "0x12C21DC", Offset = "0x12C21DC", VA = "0x12C21DC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002932")]
	[Address(RVA = "0x12C2588", Offset = "0x12C2588", VA = "0x12C2588")]
	public VrHandTransformOverride()
	{
	}
}
[Token(Token = "0x2000718")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(SphereCollider))]
public class VrHandWorldCollider : CachedMonoBehaviour
{
	[Token(Token = "0x4002274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private VrHand m_trackedHand;

	[Token(Token = "0x4002275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_trackedAnchor;

	[Token(Token = "0x4002276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform m_touchFingertipCollider;

	[Token(Token = "0x4002277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float m_contactLingerTime;

	[Token(Token = "0x4002278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Min(0.1f)]
	[SerializeField]
	private float m_maximumAllowedAnchorErrorDistance;

	[Token(Token = "0x4002279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SphereCollider m_collider;

	[Token(Token = "0x400227A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SphereCollider[] m_colliders;

	[Token(Token = "0x400227B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 m_anchorPositionOffset;

	[Token(Token = "0x400227C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private InterpolatedTransform m_interpolatedTransform;

	[Token(Token = "0x400227D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PidController m_pidController;

	[Token(Token = "0x400227E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private HashSet<GameObject> m_directContacts;

	[Token(Token = "0x400227F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<int, float> m_removalTimes;

	[Token(Token = "0x4002280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private HashSet<int> m_pendingRemovalsBuffer;

	[Token(Token = "0x170006DA")]
	public VrHand TrackedHand
	{
		[Token(Token = "0x6002933")]
		[Address(RVA = "0x12C2598", Offset = "0x12C2598", VA = "0x12C2598")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006DB")]
	public Agent Owner
	{
		[Token(Token = "0x6002936")]
		[Address(RVA = "0x12C2AB8", Offset = "0x12C2AB8", VA = "0x12C2AB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006DC")]
	public BoltEntity Entity
	{
		[Token(Token = "0x6002937")]
		[Address(RVA = "0x12C2B2C", Offset = "0x12C2B2C", VA = "0x12C2B2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006DD")]
	private Vector3 CurrentTargetPosition
	{
		[Token(Token = "0x600293F")]
		[Address(RVA = "0x12C2F3C", Offset = "0x12C2F3C", VA = "0x12C2F3C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170006DE")]
	private Quaternion CurrentTargetRotation
	{
		[Token(Token = "0x6002940")]
		[Address(RVA = "0x12C30A0", Offset = "0x12C30A0", VA = "0x12C30A0")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x6002934")]
	[Address(RVA = "0x12C25A0", Offset = "0x12C25A0", VA = "0x12C25A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002935")]
	[Address(RVA = "0x12C297C", Offset = "0x12C297C", VA = "0x12C297C")]
	public void SetColliderEnabled(bool colliderEnabled)
	{
	}

	[Token(Token = "0x6002938")]
	[Address(RVA = "0x12C2B34", Offset = "0x12C2B34", VA = "0x12C2B34")]
	private void Update()
	{
	}

	[Token(Token = "0x6002939")]
	[Address(RVA = "0x12C2B4C", Offset = "0x12C2B4C", VA = "0x12C2B4C")]
	private void UpdateRootPosition()
	{
	}

	[Token(Token = "0x600293A")]
	[Address(RVA = "0x12C2F00", Offset = "0x12C2F00", VA = "0x12C2F00")]
	private void UpdateTouchPosition()
	{
	}

	[Token(Token = "0x600293B")]
	[Address(RVA = "0x12C30BC", Offset = "0x12C30BC", VA = "0x12C30BC")]
	public void UpdatePositionInPlayerRotation(Vector3 initialPosition)
	{
	}

	[Token(Token = "0x600293C")]
	[Address(RVA = "0x12C2FB4", Offset = "0x12C2FB4", VA = "0x12C2FB4")]
	public void ImmediatelyWarpToTarget()
	{
	}

	[Token(Token = "0x600293D")]
	[Address(RVA = "0x12C32F8", Offset = "0x12C32F8", VA = "0x12C32F8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600293E")]
	[Address(RVA = "0x12C3448", Offset = "0x12C3448", VA = "0x12C3448")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002941")]
	[Address(RVA = "0x12C37EC", Offset = "0x12C37EC", VA = "0x12C37EC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6002942")]
	[Address(RVA = "0x12C3900", Offset = "0x12C3900", VA = "0x12C3900")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x6002943")]
	[Address(RVA = "0x12C2A54", Offset = "0x12C2A54", VA = "0x12C2A54")]
	private void RefreshColliderState()
	{
	}

	[Token(Token = "0x6002944")]
	[Address(RVA = "0x12C39E8", Offset = "0x12C39E8", VA = "0x12C39E8")]
	public VrHandWorldCollider()
	{
	}
}
[Token(Token = "0x200071A")]
public class VrHeadHeightLimiter : CachedMonoBehaviour
{
	[Token(Token = "0x4002283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[MinMaxRange(0.2f, 3f)]
	[UnityEngine.Tooltip("The minimum and maximum allowed heights for the player. Measured in metres (1 metre is roughly 3.3 feet).")]
	private MinMaxRange m_heightLimits;

	[Token(Token = "0x170006DF")]
	public float MinHeight
	{
		[Token(Token = "0x6002949")]
		[Address(RVA = "0x12C3B04", Offset = "0x12C3B04", VA = "0x12C3B04")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170006E0")]
	public float MaxHeight
	{
		[Token(Token = "0x600294A")]
		[Address(RVA = "0x12C3B20", Offset = "0x12C3B20", VA = "0x12C3B20")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600294B")]
	[Address(RVA = "0x12C3B3C", Offset = "0x12C3B3C", VA = "0x12C3B3C")]
	private float GetRequiredAdjustmentForHeight(float heightOffFloor)
	{
		return default(float);
	}

	[Token(Token = "0x600294C")]
	[Address(RVA = "0x12C3B70", Offset = "0x12C3B70", VA = "0x12C3B70")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600294D")]
	[Address(RVA = "0x12C3CF8", Offset = "0x12C3CF8", VA = "0x12C3CF8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600294E")]
	[Address(RVA = "0x12C3D08", Offset = "0x12C3D08", VA = "0x12C3D08")]
	public void DrawGizmos(float? crouchStartHeightOverMin, float? crouchFinishHeightOverMin, float? playerHeight)
	{
	}

	[Token(Token = "0x600294F")]
	[Address(RVA = "0x12C417C", Offset = "0x12C417C", VA = "0x12C417C")]
	private void DrawGizmoCrossAtHeight(float height)
	{
	}

	[Token(Token = "0x6002950")]
	[Address(RVA = "0x12C3FF0", Offset = "0x12C3FF0", VA = "0x12C3FF0")]
	private void DrawGizmoCrossAtPosition(Vector3 crossPosition)
	{
	}

	[Token(Token = "0x6002951")]
	[Address(RVA = "0x12C4254", Offset = "0x12C4254", VA = "0x12C4254")]
	public VrHeadHeightLimiter()
	{
	}
}
[Token(Token = "0x200071B")]
public class VrPlayerAvatarIKController : MonoBehaviour
{
	[Token(Token = "0x200071C")]
	private enum LocomotionActivationState
	{
		[Token(Token = "0x40022A1")]
		Normal,
		[Token(Token = "0x40022A2")]
		Airborne
	}

	[Token(Token = "0x4002284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SkinnedMeshRenderer m_renderer;

	[Token(Token = "0x4002285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SkinnedMeshRenderer[] m_renderers;

	[Token(Token = "0x4002286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("IK Controller Reference")]
	[SerializeField]
	private VRIK m_fullbodyIKController;

	[Token(Token = "0x4002287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlayerShadowHandler m_shadowHandler;

	[Token(Token = "0x4002288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool m_allowDynamicLOD;

	[Token(Token = "0x4002289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int m_spineLOD;

	[Token(Token = "0x400228A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int m_legLOD;

	[Token(Token = "0x400228B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int m_armLOD_L;

	[Token(Token = "0x400228C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private int m_armLOD_R;

	[Token(Token = "0x400228D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float m_headAngle_LookingDown_Small;

	[Token(Token = "0x400228E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float m_headAngle_LookingDown_Medium;

	[Token(Token = "0x400228F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[Min(0f)]
	private float m_airborneLocomotionWeightChangeSpeed;

	[Token(Token = "0x4002290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Avatar Height Calculation")]
	[SerializeField]
	private Transform m_avatarRoot;

	[Token(Token = "0x4002291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform m_avatarHead;

	[Token(Token = "0x4002292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform m_avatarGloveTarget_L;

	[Token(Token = "0x4002293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_avatarGloveTarget_R;

	[Token(Token = "0x4002294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Header("IK Target Helpers")]
	private Transform m_ikTarget_pelvis;

	[Token(Token = "0x4002295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform m_ikTarget_head;

	[Token(Token = "0x4002296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform m_ikTarget_hand_L;

	[Token(Token = "0x4002297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform m_ikTarget_hand_R;

	[Token(Token = "0x4002298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Tweakers")]
	[SerializeField]
	private float m_additionalHeightBoost;

	[Token(Token = "0x4002299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[Space(20f)]
	[Header("Remote Player Avatar Setup")]
	[SerializeField]
	private bool m_isRemotePlayerAvatar;

	[Token(Token = "0x400229A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_avatarOriginalHeight;

	[Token(Token = "0x400229B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private IKSolverVR m_solver;

	[Token(Token = "0x400229C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private LocomotionActivationState m_locomotionActivationState;

	[Token(Token = "0x400229D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float m_currentHeadAngle;

	[Token(Token = "0x400229E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float m_dot;

	[Token(Token = "0x400229F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float m_lastHeight;

	[Token(Token = "0x170006E1")]
	public bool AnyMeshVisible
	{
		[Token(Token = "0x6002952")]
		[Address(RVA = "0x12C425C", Offset = "0x12C425C", VA = "0x12C425C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006E2")]
	public float LastHeight
	{
		[Token(Token = "0x6002953")]
		[Address(RVA = "0x12C4334", Offset = "0x12C4334", VA = "0x12C4334")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170006E3")]
	public float AvatarOriginalHeight
	{
		[Token(Token = "0x6002954")]
		[Address(RVA = "0x12C433C", Offset = "0x12C433C", VA = "0x12C433C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6002955")]
	[Address(RVA = "0x12C4344", Offset = "0x12C4344", VA = "0x12C4344")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002956")]
	[Address(RVA = "0x12C4670", Offset = "0x12C4670", VA = "0x12C4670")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002957")]
	[Address(RVA = "0x12C4690", Offset = "0x12C4690", VA = "0x12C4690")]
	private void Update()
	{
	}

	[Token(Token = "0x6002958")]
	[Address(RVA = "0x12C44C0", Offset = "0x12C44C0", VA = "0x12C44C0")]
	public void ShowAvatar(bool value)
	{
	}

	[Token(Token = "0x6002959")]
	[Address(RVA = "0x12C45D0", Offset = "0x12C45D0", VA = "0x12C45D0")]
	public void SetHeadControllerTarget(Transform head)
	{
	}

	[Token(Token = "0x600295A")]
	[Address(RVA = "0x12C461C", Offset = "0x12C461C", VA = "0x12C461C")]
	public void SetPelvisControllerTarget(Transform pelvis)
	{
	}

	[Token(Token = "0x600295B")]
	[Address(RVA = "0x12C45A0", Offset = "0x12C45A0", VA = "0x12C45A0")]
	public void SetHandControllerTargets(Transform leftHand, Transform rightHand)
	{
	}

	[Token(Token = "0x600295C")]
	[Address(RVA = "0x12C4B90", Offset = "0x12C4B90", VA = "0x12C4B90")]
	private void SetHandControllerTarget(Transform handTransform, bool isLeft)
	{
	}

	[Token(Token = "0x600295D")]
	[Address(RVA = "0x12C0644", Offset = "0x12C0644", VA = "0x12C0644")]
	public void SetHandControllerTarget(VrHand hand)
	{
	}

	[Token(Token = "0x600295E")]
	[Address(RVA = "0x12C4C10", Offset = "0x12C4C10", VA = "0x12C4C10")]
	public void SetFootControllerTargets(Transform leftFoot, Transform rightFoot)
	{
	}

	[Token(Token = "0x600295F")]
	[Address(RVA = "0x12C4C9C", Offset = "0x12C4C9C", VA = "0x12C4C9C")]
	public void SetAvatarHeight(float heightMeters)
	{
	}

	[Token(Token = "0x6002960")]
	[Address(RVA = "0x12C4D30", Offset = "0x12C4D30", VA = "0x12C4D30")]
	public void SetAvatarArmLength(float lengthMeters)
	{
	}

	[Token(Token = "0x6002961")]
	[Address(RVA = "0x12C4D90", Offset = "0x12C4D90", VA = "0x12C4D90")]
	[ContextMenu("Reset Avatar")]
	public void ResetAvatar()
	{
	}

	[Token(Token = "0x6002962")]
	[Address(RVA = "0x12C48D0", Offset = "0x12C48D0", VA = "0x12C48D0")]
	private void UpdateSolverLods()
	{
	}

	[Token(Token = "0x6002963")]
	[Address(RVA = "0x12C470C", Offset = "0x12C470C", VA = "0x12C470C")]
	private void UpdateLocomotionActivationState()
	{
	}

	[Token(Token = "0x6002964")]
	[Address(RVA = "0x12C4A88", Offset = "0x12C4A88", VA = "0x12C4A88")]
	private void UpdateLocomotionInjectedVelocity()
	{
	}

	[Token(Token = "0x6002965")]
	[Address(RVA = "0x12C4DB4", Offset = "0x12C4DB4", VA = "0x12C4DB4")]
	public void SetOriginalAvatarHeight(float avatarOriginalHeight)
	{
	}

	[Token(Token = "0x6002966")]
	[Address(RVA = "0x12C4DBC", Offset = "0x12C4DBC", VA = "0x12C4DBC")]
	public VrPlayerAvatarIKController()
	{
	}
}
[Token(Token = "0x200071D")]
public class VrPlayerAvatarIKFootHelper : CachedMonoBehaviour
{
	[Token(Token = "0x40022A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_headTransform;

	[Token(Token = "0x40022A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private VRIK m_vrik;

	[Token(Token = "0x40022A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Min(0f)]
	private float m_timeForStep;

	[Token(Token = "0x40022A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private bool m_isRightFoot;

	[Token(Token = "0x40022A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Quaternion m_baseRotation;

	[Token(Token = "0x40022A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Quaternion m_stepStartRotation;

	[Token(Token = "0x40022A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion m_stepTargetRotation;

	[Token(Token = "0x40022AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float m_stepTimer;

	[Token(Token = "0x6002967")]
	[Address(RVA = "0x12C4DF4", Offset = "0x12C4DF4", VA = "0x12C4DF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002968")]
	[Address(RVA = "0x12C4F18", Offset = "0x12C4F18", VA = "0x12C4F18")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002969")]
	[Address(RVA = "0x12C4FD4", Offset = "0x12C4FD4", VA = "0x12C4FD4")]
	private void OnFootstep()
	{
	}

	[Token(Token = "0x600296A")]
	[Address(RVA = "0x12C516C", Offset = "0x12C516C", VA = "0x12C516C")]
	private void Update()
	{
	}

	[Token(Token = "0x600296B")]
	[Address(RVA = "0x12C51A8", Offset = "0x12C51A8", VA = "0x12C51A8")]
	public VrPlayerAvatarIKFootHelper()
	{
	}
}
[Token(Token = "0x200071E")]
[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(CapsuleCollider))]
public class VrPlayerPhysicsController : CachedMonoBehaviour
{
	[Token(Token = "0x200071F")]
	public enum PhysicsControlSource
	{
		[Token(Token = "0x40022DB")]
		StateMachine,
		[Token(Token = "0x40022DC")]
		Locomotion,
		[Token(Token = "0x40022DD")]
		Developer
	}

	[Token(Token = "0x2000720")]
	public enum MoveTrigger
	{
		[Token(Token = "0x40022DF")]
		Invalid,
		[Token(Token = "0x40022E0")]
		FreeWalk,
		[Token(Token = "0x40022E1")]
		PushBack
	}

	[Token(Token = "0x2000721")]
	[CompilerGenerated]
	private sealed class <KillRampingVelocityLoop>d__105 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40022E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40022E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40022E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VrPlayerPhysicsController <>4__this;

		[Token(Token = "0x170006EF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60029AE")]
			[Address(RVA = "0x12C94AC", Offset = "0x12C94AC", VA = "0x12C94AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006F0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60029B0")]
			[Address(RVA = "0x12C94F4", Offset = "0x12C94F4", VA = "0x12C94F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60029AB")]
		[Address(RVA = "0x12C92D8", Offset = "0x12C92D8", VA = "0x12C92D8")]
		[DebuggerHidden]
		public <KillRampingVelocityLoop>d__105(int <>1__state)
		{
		}

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0x12C9300", Offset = "0x12C9300", VA = "0x12C9300", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60029AD")]
		[Address(RVA = "0x12C9304", Offset = "0x12C9304", VA = "0x12C9304", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60029AF")]
		[Address(RVA = "0x12C94B4", Offset = "0x12C94B4", VA = "0x12C94B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000722")]
	[CompilerGenerated]
	private sealed class <ResetPushedBack>d__118 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40022E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40022E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40022E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float resetTime;

		[Token(Token = "0x40022E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VrPlayerPhysicsController <>4__this;

		[Token(Token = "0x170006F1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60029B4")]
			[Address(RVA = "0x12C95E8", Offset = "0x12C95E8", VA = "0x12C95E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006F2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60029B6")]
			[Address(RVA = "0x12C9630", Offset = "0x12C9630", VA = "0x12C9630", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60029B1")]
		[Address(RVA = "0x12C94FC", Offset = "0x12C94FC", VA = "0x12C94FC")]
		[DebuggerHidden]
		public <ResetPushedBack>d__118(int <>1__state)
		{
		}

		[Token(Token = "0x60029B2")]
		[Address(RVA = "0x12C9524", Offset = "0x12C9524", VA = "0x12C9524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60029B3")]
		[Address(RVA = "0x12C9528", Offset = "0x12C9528", VA = "0x12C9528", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60029B5")]
		[Address(RVA = "0x12C95F0", Offset = "0x12C95F0", VA = "0x12C95F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40022AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Object references")]
	[SerializeField]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x40022AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private SphereCollider m_headCollider;

	[Token(Token = "0x40022AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private CapsuleCollider m_bodyCollider;

	[Token(Token = "0x40022AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private CapsuleCollider m_bodyDamageCollider;

	[Token(Token = "0x40022AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Avoidance")]
	[SerializeField]
	[Min(0f)]
	private float m_avoidanceRadius;

	[Token(Token = "0x40022B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	[Header("Grounding force")]
	[UnityEngine.Tooltip("Additional downwards force to apply to the object when the player is grounded. Helps with going down ramps very quickly.")]
	[Min(0f)]
	private float m_additionalGroundedForce;

	[Token(Token = "0x40022B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("Only apply the additional grounded force when they've been grounded for at least this much real time.")]
	private float m_additionalGroundedForceDelay;

	[Token(Token = "0x40022B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Min(0f)]
	[Header("Lean estimation")]
	[SerializeField]
	private float m_footMoveMaxLean;

	[Token(Token = "0x40022B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[HideInInspector]
	[Min(0f)]
	private float m_footMoveSpeed;

	[Token(Token = "0x40022B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	[Min(0f)]
	[HideInInspector]
	private float m_footMoveEndRadius;

	[Token(Token = "0x40022B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Min(0f)]
	[HideInInspector]
	private float m_footMoveStableTime;

	[Token(Token = "0x40022B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Min(0f)]
	[Header("Inner shapes")]
	[SerializeField]
	private float m_innerSphereRadiusScale;

	[Token(Token = "0x40022B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Min(0f)]
	[SerializeField]
	private float m_innerCapsuleRadiusScale;

	[Token(Token = "0x40022B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[MinMaxRange(-1f, 1f)]
	private MinMaxRange m_innerAnchorPositions;

	[Token(Token = "0x40022B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Stepping")]
	[SerializeField]
	[Min(0f)]
	private float m_maxFreeWalkSlopeDegrees;

	[Token(Token = "0x40022BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	[Min(0f)]
	private float m_maxStepHeighGap;

	[Token(Token = "0x40022BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Min(0f)]
	[SerializeField]
	private float m_maxStepDistanceGap;

	[Token(Token = "0x40022BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	[Min(0f)]
	private float m_stepRiseAcceleration;

	[Token(Token = "0x40022BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Min(0f)]
	[SerializeField]
	private float m_stepRiseMaxSpeed;

	[Token(Token = "0x40022BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float m_stepRiseCurrentSpeed;

	[Token(Token = "0x40022BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	[Min(0f)]
	private float m_stepCapsuleStartHeight;

	[Token(Token = "0x40022C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	[Min(0f)]
	private float m_stepCapsuleEndHeight;

	[Token(Token = "0x40022C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Min(0f)]
	private float m_stepCapsuleRadius;

	[Token(Token = "0x40022C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	[Min(0f)]
	private float m_stepDenialSphereHeight;

	[Token(Token = "0x40022C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Min(0f)]
	[SerializeField]
	private float m_stepDenialSphereRadius;

	[Token(Token = "0x40022C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[Min(0f)]
	[SerializeField]
	private float m_stepDenialDiscRadius;

	[Token(Token = "0x40022C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 m_latestDenialSphereOffset;

	[Token(Token = "0x40022C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private PhysicMaterial m_bodyPhysicMaterial;

	[Token(Token = "0x40022C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Collider[] m_overlapResultsBuffer;

	[Token(Token = "0x40022C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private RaycastHit[] m_raycastResultsBuffer;

	[Token(Token = "0x40022C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float m_timeLastOffGround;

	[Token(Token = "0x40022CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool m_groundedOverride;

	[Token(Token = "0x40022CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	private bool m_pendingCompleteFootReset;

	[Token(Token = "0x40022CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float m_currentCapsuleHeight;

	[Token(Token = "0x40022CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Dictionary<PhysicsControlSource, bool> m_disablingSources;

	[Token(Token = "0x40022CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Rigidbody m_harnessBody;

	[Token(Token = "0x40022CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool m_hasHarnessBody;

	[Token(Token = "0x40022D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	private bool? m_physicsCurrentlyActive;

	[Token(Token = "0x40022D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private PidController m_harnessPidController;

	[Token(Token = "0x40022D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_groundLayer;

	[Token(Token = "0x40022D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Coroutine m_killRampingVelocityCoroutine;

	[Token(Token = "0x40022D4")]
	private const float c_heightUpdateThreshold = 0.2f;

	[Token(Token = "0x40022D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private Vector3? m_headPositionAtFocusLost;

	[Token(Token = "0x40022D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private bool m_playerUnmovingInFrame;

	[Token(Token = "0x40022D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private MoveTrigger m_latestMoveTrigger;

	[Token(Token = "0x40022D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private WaitForFixedUpdate m_waitForFixedUpdateCachedYieldInstruction;

	[Token(Token = "0x170006E4")]
	public Rigidbody Body
	{
		[Token(Token = "0x600296C")]
		[Address(RVA = "0x12C51BC", Offset = "0x12C51BC", VA = "0x12C51BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006E5")]
	public float BodyRadius
	{
		[Token(Token = "0x600296D")]
		[Address(RVA = "0x12C51C4", Offset = "0x12C51C4", VA = "0x12C51C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170006E6")]
	public Collider HeadCollider
	{
		[Token(Token = "0x600296E")]
		[Address(RVA = "0x12C51E0", Offset = "0x12C51E0", VA = "0x12C51E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006E7")]
	public Collider DamageCollider
	{
		[Token(Token = "0x600296F")]
		[Address(RVA = "0x12C51E8", Offset = "0x12C51E8", VA = "0x12C51E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006E8")]
	public bool PhysicsCurrentlyActive
	{
		[Token(Token = "0x6002970")]
		[Address(RVA = "0x12C51F0", Offset = "0x12C51F0", VA = "0x12C51F0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006E9")]
	public bool BeingPushedBack
	{
		[Token(Token = "0x6002971")]
		[Address(RVA = "0x12C522C", Offset = "0x12C522C", VA = "0x12C522C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002972")]
		[Address(RVA = "0x12C5234", Offset = "0x12C5234", VA = "0x12C5234")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170006EA")]
	public bool IsAttachedToAnyHarness
	{
		[Token(Token = "0x6002980")]
		[Address(RVA = "0x12C613C", Offset = "0x12C613C", VA = "0x12C613C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006EB")]
	public Rigidbody AttachedHarness
	{
		[Token(Token = "0x6002981")]
		[Address(RVA = "0x12C6144", Offset = "0x12C6144", VA = "0x12C6144")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006EC")]
	public MoveTrigger LatestMoveTrigger
	{
		[Token(Token = "0x6002986")]
		[Address(RVA = "0x12C6948", Offset = "0x12C6948", VA = "0x12C6948")]
		get
		{
			return default(MoveTrigger);
		}
	}

	[Token(Token = "0x170006ED")]
	public bool IsPhysicsActive
	{
		[Token(Token = "0x600298B")]
		[Address(RVA = "0x12C6EC4", Offset = "0x12C6EC4", VA = "0x12C6EC4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006EE")]
	public float NavMeshObstacleRadius
	{
		[Token(Token = "0x600298C")]
		[Address(RVA = "0x12C6F30", Offset = "0x12C6F30", VA = "0x12C6F30")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6002973")]
	[Address(RVA = "0x12C5240", Offset = "0x12C5240", VA = "0x12C5240")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002974")]
	[Address(RVA = "0x12C552C", Offset = "0x12C552C", VA = "0x12C552C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002975")]
	[Address(RVA = "0x12C5640", Offset = "0x12C5640", VA = "0x12C5640")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002976")]
	[Address(RVA = "0x12C56E4", Offset = "0x12C56E4", VA = "0x12C56E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002977")]
	[Address(RVA = "0x12C5728", Offset = "0x12C5728", VA = "0x12C5728")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002978")]
	[Address(RVA = "0x12C5844", Offset = "0x12C5844", VA = "0x12C5844")]
	private void OnGameplayPaused()
	{
	}

	[Token(Token = "0x6002979")]
	[Address(RVA = "0x12C5848", Offset = "0x12C5848", VA = "0x12C5848")]
	public void RefreshFocusLostHeadPosition()
	{
	}

	[Token(Token = "0x600297A")]
	[Address(RVA = "0x12C58CC", Offset = "0x12C58CC", VA = "0x12C58CC")]
	public void ClearFocusLostHeadPosition()
	{
	}

	[Token(Token = "0x600297B")]
	[Address(RVA = "0x12C58E0", Offset = "0x12C58E0", VA = "0x12C58E0")]
	private void OnGameplayUnpaused()
	{
	}

	[Token(Token = "0x600297C")]
	[Address(RVA = "0x12C5544", Offset = "0x12C5544", VA = "0x12C5544")]
	public void SetPhysicsActive(PhysicsControlSource source, bool active, bool includeHands, Vector3? appliedVelocity)
	{
	}

	[Token(Token = "0x600297D")]
	[Address(RVA = "0x12C6060", Offset = "0x12C6060", VA = "0x12C6060")]
	public void AttachToHarness(Rigidbody harnessBody)
	{
	}

	[Token(Token = "0x600297E")]
	[Address(RVA = "0x12C6090", Offset = "0x12C6090", VA = "0x12C6090")]
	public void DetachFromHarness(Rigidbody harnessBody)
	{
	}

	[Token(Token = "0x600297F")]
	[Address(RVA = "0x12C6130", Offset = "0x12C6130", VA = "0x12C6130")]
	public void SetGroundedOverride(bool groundedOverride)
	{
	}

	[Token(Token = "0x6002982")]
	[Address(RVA = "0x12C5BF4", Offset = "0x12C5BF4", VA = "0x12C5BF4")]
	private void InternalRefreshPhysicsActiveState(Vector3? appliedVelocity)
	{
	}

	[Token(Token = "0x6002983")]
	[Address(RVA = "0x12C614C", Offset = "0x12C614C", VA = "0x12C614C")]
	public void SetLocalBodyVelocity(float xVelocity, float zVelocity, MoveTrigger moveTrigger)
	{
	}

	[Token(Token = "0x6002984")]
	[Address(RVA = "0x12C619C", Offset = "0x12C619C", VA = "0x12C619C")]
	public void SetLocalBodyVelocity(float xVelocity, float yVelocity, float zVelocity, MoveTrigger moveTrigger)
	{
	}

	[Token(Token = "0x6002985")]
	[Address(RVA = "0x12C61A0", Offset = "0x12C61A0", VA = "0x12C61A0")]
	public void SetLocalBodyVelocity(Vector3 localVelocity, MoveTrigger moveTrigger)
	{
	}

	[Token(Token = "0x6002987")]
	[Address(RVA = "0x12C66B8", Offset = "0x12C66B8", VA = "0x12C66B8")]
	private bool CheckStepOverlap(Vector3 desiredMoveDirection)
	{
		return default(bool);
	}

	[Token(Token = "0x6002988")]
	[Address(RVA = "0x12C69A8", Offset = "0x12C69A8", VA = "0x12C69A8")]
	private Vector3 GetStepDenialSphereOffsetInDisc(Vector3 desiredMoveDirection)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002989")]
	[Address(RVA = "0x12C6AE8", Offset = "0x12C6AE8", VA = "0x12C6AE8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600298A")]
	[Address(RVA = "0x12C6AFC", Offset = "0x12C6AFC", VA = "0x12C6AFC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600298D")]
	[Address(RVA = "0x12C6F38", Offset = "0x12C6F38", VA = "0x12C6F38")]
	public Vector3 GetHeadLocalFloorPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600298E")]
	[Address(RVA = "0x12C6F98", Offset = "0x12C6F98", VA = "0x12C6F98")]
	public Vector3 GetPlayerHeadPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600298F")]
	[Address(RVA = "0x12C6FC0", Offset = "0x12C6FC0", VA = "0x12C6FC0")]
	public Vector3 GetPlayerHeadPositionLocal()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002990")]
	[Address(RVA = "0x12C7038", Offset = "0x12C7038", VA = "0x12C7038")]
	public float GetPlayerHeadRadius()
	{
		return default(float);
	}

	[Token(Token = "0x6002991")]
	[Address(RVA = "0x12C7054", Offset = "0x12C7054", VA = "0x12C7054")]
	public float GetPlayerHeadHeightOffVirtualFloor()
	{
		return default(float);
	}

	[Token(Token = "0x6002992")]
	[Address(RVA = "0x12C3C88", Offset = "0x12C3C88", VA = "0x12C3C88")]
	public float GetPlayerDesiredVirtualHeight()
	{
		return default(float);
	}

	[Token(Token = "0x6002993")]
	[Address(RVA = "0x12C70E0", Offset = "0x12C70E0", VA = "0x12C70E0")]
	public float GetPlayerHeadHeightOffRealFloor()
	{
		return default(float);
	}

	[Token(Token = "0x6002994")]
	[Address(RVA = "0x12C3F64", Offset = "0x12C3F64", VA = "0x12C3F64")]
	public Vector3 GetPlayerHeadPositionAtFloor()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002995")]
	[Address(RVA = "0x12C6950", Offset = "0x12C6950", VA = "0x12C6950")]
	public Vector3 GetPlayerFeetPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002996")]
	[Address(RVA = "0x12B91A8", Offset = "0x12B91A8", VA = "0x12B91A8")]
	public Vector3 GetPlayerFeetPositionLocal()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002997")]
	[Address(RVA = "0x12C7110", Offset = "0x12C7110", VA = "0x12C7110")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6002998")]
	[Address(RVA = "0x12C7118", Offset = "0x12C7118", VA = "0x12C7118")]
	private void UpdateCollider(bool skipRailingLeanCorrection)
	{
	}

	[Token(Token = "0x6002999")]
	[Address(RVA = "0x12C5670", Offset = "0x12C5670", VA = "0x12C5670")]
	[IteratorStateMachine(typeof(<KillRampingVelocityLoop>d__105))]
	private IEnumerator KillRampingVelocityLoop()
	{
		return null;
	}

	[Token(Token = "0x600299A")]
	[Address(RVA = "0x12C78E8", Offset = "0x12C78E8", VA = "0x12C78E8")]
	private bool CheckShouldFeetSnapFollow(Vector2 headPlanePosition, Vector3 headForward, Vector2 feetPlanePosition)
	{
		return default(bool);
	}

	[Token(Token = "0x600299B")]
	[Address(RVA = "0x12B8364", Offset = "0x12B8364", VA = "0x12B8364")]
	public void ResetLocalFootPosition(bool immediate = false)
	{
	}

	[Token(Token = "0x600299C")]
	[Address(RVA = "0x12C7910", Offset = "0x12C7910", VA = "0x12C7910")]
	public bool CheckForHeadOverlap()
	{
		return default(bool);
	}

	[Token(Token = "0x600299D")]
	[Address(RVA = "0x12C792C", Offset = "0x12C792C", VA = "0x12C792C")]
	public bool CheckForHeadOverlap(Vector3 proposedWorldPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x600299E")]
	[Address(RVA = "0x12B9010", Offset = "0x12B9010", VA = "0x12B9010")]
	public bool CheckForHeadInnerSphereOverlap()
	{
		return default(bool);
	}

	[Token(Token = "0x600299F")]
	[Address(RVA = "0x12C7A38", Offset = "0x12C7A38", VA = "0x12C7A38")]
	public bool CheckForHeadInnerSphereOverlap(Vector3 proposedWorldPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x60029A0")]
	[Address(RVA = "0x12C7934", Offset = "0x12C7934", VA = "0x12C7934")]
	private bool DoInnerSphereOverlapTest(Vector3 proposedWorldPosition, float radiusScale)
	{
		return default(bool);
	}

	[Token(Token = "0x60029A1")]
	[Address(RVA = "0x12C7A40", Offset = "0x12C7A40", VA = "0x12C7A40")]
	public bool CheckForBodyOverlap(Vector3 proposedWorldPosition, float bodyScale = 1f)
	{
		return default(bool);
	}

	[Token(Token = "0x60029A2")]
	[Address(RVA = "0x12B8974", Offset = "0x12B8974", VA = "0x12B8974")]
	public bool SearchForFloorBeneathHead(out float floorYPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x60029A3")]
	[Address(RVA = "0x12B929C", Offset = "0x12B929C", VA = "0x12B929C")]
	public bool CheckForBodyInnerCapsuleOverlap(Vector3 proposedWorldPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x60029A4")]
	[Address(RVA = "0x12C7E08", Offset = "0x12C7E08", VA = "0x12C7E08")]
	public void TriggerPushBack(Vector3 direction, float yAngleSpread, float force, float duration)
	{
	}

	[Token(Token = "0x60029A5")]
	[Address(RVA = "0x12C7F6C", Offset = "0x12C7F6C", VA = "0x12C7F6C")]
	private void PushPlayerBack(float velocityX, float velocityZ, float duration)
	{
	}

	[Token(Token = "0x60029A6")]
	[Address(RVA = "0x12C7FB0", Offset = "0x12C7FB0", VA = "0x12C7FB0")]
	[IteratorStateMachine(typeof(<ResetPushedBack>d__118))]
	private IEnumerator ResetPushedBack(float resetTime)
	{
		return null;
	}

	[Token(Token = "0x60029A7")]
	[Address(RVA = "0x12C7C24", Offset = "0x12C7C24", VA = "0x12C7C24")]
	private void CalculateInnerCapsule(out Vector3 lowerPoint, out Vector3 upperPoint, out float radius)
	{
	}

	[Token(Token = "0x60029A8")]
	[Address(RVA = "0x12C8034", Offset = "0x12C8034", VA = "0x12C8034")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60029A9")]
	[Address(RVA = "0x12C81CC", Offset = "0x12C81CC", VA = "0x12C81CC")]
	public VrPlayerPhysicsController()
	{
	}
}
[Token(Token = "0x2000723")]
[RequireComponent(typeof(VrRigPausePositioner))]
[RequireComponent(typeof(VrPlayerPhysicsController))]
[DefaultExecutionOrder(-50)]
public class VrRig : SceneSingleton<VrRig>
{
	[Token(Token = "0x2000724")]
	[CompilerGenerated]
	private sealed class <ResetHeightDelta_Internal>d__135 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool hmdEnabled;

		[Token(Token = "0x4002331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VrRig <>4__this;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <realWorldPlayerHeight>5__2;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <realWorldHmdHeight>5__3;

		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <totalAttempts>5__4;

		[Token(Token = "0x1700070A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002A0C")]
			[Address(RVA = "0x12CE738", Offset = "0x12CE738", VA = "0x12CE738", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700070B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002A0E")]
			[Address(RVA = "0x12CE780", Offset = "0x12CE780", VA = "0x12CE780", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A08")]
		[Address(RVA = "0x12CD60C", Offset = "0x12CD60C", VA = "0x12CD60C")]
		[DebuggerHidden]
		public <ResetHeightDelta_Internal>d__135(int <>1__state)
		{
		}

		[Token(Token = "0x6002A09")]
		[Address(RVA = "0x12CE27C", Offset = "0x12CE27C", VA = "0x12CE27C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002A0A")]
		[Address(RVA = "0x12CE2A8", Offset = "0x12CE2A8", VA = "0x12CE2A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A0B")]
		[Address(RVA = "0x12CE704", Offset = "0x12CE704", VA = "0x12CE704")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6002A0D")]
		[Address(RVA = "0x12CE740", Offset = "0x12CE740", VA = "0x12CE740", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40022E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Action OnVrRigReady;

	[Token(Token = "0x40022EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform m_rigRoot;

	[Token(Token = "0x40022EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform m_heightParent;

	[Token(Token = "0x40022EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform m_headAnchor;

	[Token(Token = "0x40022ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform m_leftHandAnchor;

	[Token(Token = "0x40022EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform m_rightHandAnchor;

	[Token(Token = "0x40022EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private VrHandWorldCollider m_leftHandParent;

	[Token(Token = "0x40022F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private VrHandWorldCollider m_rightHandParent;

	[Token(Token = "0x40022F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private VrHand m_leftHandPrefab;

	[Token(Token = "0x40022F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private VrHand m_rightHandPrefab;

	[Token(Token = "0x40022F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private InventoryTransformTracker m_beltTracker;

	[Token(Token = "0x40022F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform m_beltTransformManipulator;

	[Token(Token = "0x40022F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private BeltSlotTransformConfiguration m_beltHipHolsterConfiguration_L;

	[Token(Token = "0x40022F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private BeltSlotTransformConfiguration m_beltHipHolsterConfiguration_R;

	[Token(Token = "0x40022F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private HandScanManager m_handsScanManager;

	[Token(Token = "0x40022F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Space]
	[SerializeField]
	private VrMotionInputController m_motionInputController;

	[Token(Token = "0x40022F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private VrLocomotionInputDispatcher m_locomotionInputDispatcher;

	[Token(Token = "0x40022FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private VrHeadHeightLimiter m_heightLimiter;

	[Token(Token = "0x40022FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private HUD m_headsUpDisplay;

	[Token(Token = "0x40022FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private LoadingScreen m_loadingScreen;

	[Token(Token = "0x40022FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private ChapterIntro m_chapterIntro;

	[Token(Token = "0x40022FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private VrPlayerPhysicsController m_playerPhysics;

	[Token(Token = "0x40022FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private GestureDispatcher m_gestureContainer;

	[Token(Token = "0x4002300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[FormerlySerializedAs("agentSensoryAudio")]
	[SerializeField]
	private AgentSensoryAudio m_agentSensoryAudio;

	[Token(Token = "0x4002301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private VrRigPausePositioner m_pausePositioner;

	[Token(Token = "0x4002302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private VrPlayerAvatarIKController m_fullbodyIKController;

	[Token(Token = "0x4002303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private GestureVisualizer m_gestureVisualizer;

	[Token(Token = "0x4002304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool m_hasAgentSensoryAudio;

	[Token(Token = "0x4002305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	[Range(0f, 1f)]
	[UnityEngine.Tooltip("The speed multiplier to be applied as the player crouches down. We'll lerp to this value from one as the player approaches the configured crouch height and use the value itself when the player is at or below the configured crouch height.")]
	[SerializeField]
	[Header("Speed modifiers")]
	private float m_crouchModifier;

	[Token(Token = "0x4002306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[UnityEngine.Tooltip("The speed multiplier to be applied when the player is NOT grounded.")]
	[SerializeField]
	[Range(0f, 1f)]
	private float m_fallingSpeedModifier;

	[Token(Token = "0x4002307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[UnityEngine.Tooltip("Modifies our speed based on how closely the player is looking at the direction they're moving in. X=0 means the player is looking directly forwards, X=1 means the player is looking directly backwards. We multiply our base movement speed by the corresponding value at Y.")]
	[SerializeField]
	private AnimationCurve m_faceDirectionMultiplier;

	[Token(Token = "0x4002308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[UnityEngine.Tooltip("The max vertical (y) distance between a hand and the head to be considered as a decreasing modifier")]
	[SerializeField]
	private float m_maxHandHeadDistance;

	[Token(Token = "0x4002309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	[UnityEngine.Tooltip("The max angle between the weapon and the floor to be considered as a decreasing modifier")]
	[SerializeField]
	private float m_maxAngle;

	[Token(Token = "0x400230A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[UnityEngine.Tooltip("The speed multiplier to be applied when there is one hand inside the max vertical hand - head distance")]
	private float m_oneHandMultiplier;

	[Token(Token = "0x400230B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[UnityEngine.Tooltip("The speed multiplier to be applied when there is two hands inside the max vertical hand - head distance")]
	[SerializeField]
	private float m_twoHandsMultiplier;

	[Token(Token = "0x400230C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	[UnityEngine.Tooltip("Animation curve to apply a stun multiplier")]
	private AnimationCurve m_stunMultiplier;

	[Token(Token = "0x400230D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float m_stunTime;

	[Token(Token = "0x400230E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Camera m_headCamera;

	[Token(Token = "0x400230F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private VrHand m_leftHand;

	[Token(Token = "0x4002310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private VrHand m_rightHand;

	[Token(Token = "0x4002311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private List<VrHand> m_hands;

	[Token(Token = "0x4002312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private InterpolatedTransform m_rootTransformInterpolation;

	[Token(Token = "0x4002313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private bool m_waitingForInitialTracking;

	[Token(Token = "0x4002314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
	private bool m_xrUserPresence;

	[Token(Token = "0x4002315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float m_appliedRotation;

	[Token(Token = "0x4002316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float m_rotationDuration;

	[Token(Token = "0x4002317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private float m_rotationTimer;

	[Token(Token = "0x4002318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float m_previousRotationNormalizedProgress;

	[Token(Token = "0x4002319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private bool m_currentRotationCanTriggerTurnAction;

	[Token(Token = "0x400231A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
	private bool m_executingRotation;

	[Token(Token = "0x400231B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x186")]
	private bool m_groundedOverrideActive;

	[Token(Token = "0x400231C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private float m_minAutoCalibratedPhysicalHeightAllowed;

	[Token(Token = "0x400231D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	[SerializeField]
	[Min(0f)]
	[Header("Crouching")]
	[UnityEngine.Tooltip("The start height for crouching. This is where we start applying the crouch modifier to the player's movement speed.")]
	private float m_crouchStartHeightOverMin;

	[Token(Token = "0x400231E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[Min(0f)]
	[SerializeField]
	[UnityEngine.Tooltip("The final height for crouching. This is where we finish fully applying the crouch modifier to the player's movement speed. It's also the height we move the player's head to when crouching.")]
	private float m_crouchFinishHeightOverMin;

	[Token(Token = "0x400231F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private float m_crouchSpeed;

	[Token(Token = "0x4002320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private bool m_crouchingDown;

	[Token(Token = "0x4002321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x199")]
	private bool m_useAnalogueCrouching;

	[Token(Token = "0x4002322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19A")]
	private bool m_crouchMoving;

	[Token(Token = "0x4002323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private TrackedPoseDriver m_headPoseDriver;

	[Token(Token = "0x4002324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private Handedness? m_handedness;

	[Token(Token = "0x4002325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Quaternion m_targetRotationAfterMostRecentTeleport;

	[Token(Token = "0x4002326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Vector3 m_targetPositionAfterMostRecentTeleport;

	[Token(Token = "0x4002327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private Vector3? m_positionAtPresenceLost;

	[Token(Token = "0x4002328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Action OnUserPresent;

	[Token(Token = "0x4002329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Action OnUserNotPresent;

	[Token(Token = "0x400232A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public Action<float> OnRotatedAboutY;

	[Token(Token = "0x400232B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private Vector3? m_previousHeadFloorPosition;

	[Token(Token = "0x400232C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private VrHand m_handWearingWatch;

	[Token(Token = "0x400232D")]
	private const float c_assumedChestWidthProportion = 0f;

	[Token(Token = "0x170006F3")]
	public HandScanManager HandsScanManager
	{
		[Token(Token = "0x60029B7")]
		[Address(RVA = "0x12C9638", Offset = "0x12C9638", VA = "0x12C9638")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006F4")]
	public bool BlockInventoryInteractions
	{
		[Token(Token = "0x60029B8")]
		[Address(RVA = "0x12C9640", Offset = "0x12C9640", VA = "0x12C9640")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006F5")]
	public Transform Root
	{
		[Token(Token = "0x60029B9")]
		[Address(RVA = "0x12C9648", Offset = "0x12C9648", VA = "0x12C9648")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006F6")]
	public Transform HeadAnchor
	{
		[Token(Token = "0x60029BA")]
		[Address(RVA = "0x12C9650", Offset = "0x12C9650", VA = "0x12C9650")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006F7")]
	public Transform LeftHandAnchor
	{
		[Token(Token = "0x60029BB")]
		[Address(RVA = "0x12C9658", Offset = "0x12C9658", VA = "0x12C9658")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006F8")]
	public Transform RightHandAnchor
	{
		[Token(Token = "0x60029BC")]
		[Address(RVA = "0x12C9660", Offset = "0x12C9660", VA = "0x12C9660")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006F9")]
	public Camera HeadCamera
	{
		[Token(Token = "0x60029BD")]
		[Address(RVA = "0x12C9668", Offset = "0x12C9668", VA = "0x12C9668")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006FA")]
	public VrHand LeftHand
	{
		[Token(Token = "0x60029BE")]
		[Address(RVA = "0x12C9670", Offset = "0x12C9670", VA = "0x12C9670")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006FB")]
	public VrHand RightHand
	{
		[Token(Token = "0x60029BF")]
		[Address(RVA = "0x12C9678", Offset = "0x12C9678", VA = "0x12C9678")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006FC")]
	public VrHand PrimaryHand
	{
		[Token(Token = "0x60029C0")]
		[Address(RVA = "0x12C9680", Offset = "0x12C9680", VA = "0x12C9680")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006FD")]
	public VrHand SecondaryHand
	{
		[Token(Token = "0x60029C1")]
		[Address(RVA = "0x12C96E0", Offset = "0x12C96E0", VA = "0x12C96E0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170006FE")]
	public bool HasPendingLook
	{
		[Token(Token = "0x60029E6")]
		[Address(RVA = "0x12CD2B4", Offset = "0x12CD2B4", VA = "0x12CD2B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170006FF")]
	public float HeightDelta
	{
		[Token(Token = "0x60029E8")]
		[Address(RVA = "0x12CD2EC", Offset = "0x12CD2EC", VA = "0x12CD2EC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000700")]
	public bool IsIKAvatarVisible
	{
		[Token(Token = "0x60029F5")]
		[Address(RVA = "0x12CD9F8", Offset = "0x12CD9F8", VA = "0x12CD9F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000701")]
	public bool IsUserPresent
	{
		[Token(Token = "0x60029F6")]
		[Address(RVA = "0x12CDA14", Offset = "0x12CDA14", VA = "0x12CDA14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000702")]
	public VrHeadHeightLimiter HeightLimiter
	{
		[Token(Token = "0x60029FF")]
		[Address(RVA = "0x12CE0E8", Offset = "0x12CE0E8", VA = "0x12CE0E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000703")]
	public VrPlayerPhysicsController PlayerPhysicsController
	{
		[Token(Token = "0x6002A00")]
		[Address(RVA = "0x12CE0F0", Offset = "0x12CE0F0", VA = "0x12CE0F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000704")]
	public HUD HeadsUpDisplay
	{
		[Token(Token = "0x6002A01")]
		[Address(RVA = "0x12CE0F8", Offset = "0x12CE0F8", VA = "0x12CE0F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000705")]
	public VrPlayerAvatarIKController FullbodyIkController
	{
		[Token(Token = "0x6002A02")]
		[Address(RVA = "0x12CE100", Offset = "0x12CE100", VA = "0x12CE100")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000706")]
	public GestureDispatcher GestureContainer
	{
		[Token(Token = "0x6002A03")]
		[Address(RVA = "0x12CE108", Offset = "0x12CE108", VA = "0x12CE108")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000707")]
	public LoadingScreen LoadingScreen
	{
		[Token(Token = "0x6002A04")]
		[Address(RVA = "0x12CE110", Offset = "0x12CE110", VA = "0x12CE110")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000708")]
	public ChapterIntro ChapterIntro
	{
		[Token(Token = "0x6002A05")]
		[Address(RVA = "0x12CE118", Offset = "0x12CE118", VA = "0x12CE118")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000709")]
	public GestureVisualizer GestureVisualizer
	{
		[Token(Token = "0x6002A06")]
		[Address(RVA = "0x12CE120", Offset = "0x12CE120", VA = "0x12CE120")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60029C2")]
	[Address(RVA = "0x12C9740", Offset = "0x12C9740", VA = "0x12C9740")]
	public List<VrHand> GetBothHands()
	{
		return null;
	}

	[Token(Token = "0x60029C3")]
	[Address(RVA = "0x12C9748", Offset = "0x12C9748", VA = "0x12C9748")]
	public VrHand GetHandWearingWatch()
	{
		return null;
	}

	[Token(Token = "0x60029C4")]
	[Address(RVA = "0x12C9910", Offset = "0x12C9910", VA = "0x12C9910")]
	private void Awake()
	{
	}

	[Token(Token = "0x60029C5")]
	[Address(RVA = "0x12C9D20", Offset = "0x12C9D20", VA = "0x12C9D20")]
	private void Start()
	{
	}

	[Token(Token = "0x60029C6")]
	[Address(RVA = "0x12CA52C", Offset = "0x12CA52C", VA = "0x12CA52C", Slot = "4")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60029C7")]
	[Address(RVA = "0x12C9B4C", Offset = "0x12C9B4C", VA = "0x12C9B4C")]
	public void SetHandedness(Handedness handedness)
	{
	}

	[Token(Token = "0x60029C8")]
	[Address(RVA = "0x12CA7DC", Offset = "0x12CA7DC", VA = "0x12CA7DC")]
	private void InstantiateHands()
	{
	}

	[Token(Token = "0x60029C9")]
	[Address(RVA = "0x12CAD08", Offset = "0x12CAD08", VA = "0x12CAD08")]
	private void RefreshHandOrder()
	{
	}

	[Token(Token = "0x60029CA")]
	[Address(RVA = "0x12CADDC", Offset = "0x12CADDC", VA = "0x12CADDC")]
	public void ResetNodeRaycastTransform()
	{
	}

	[Token(Token = "0x60029CB")]
	[Address(RVA = "0x12CAE14", Offset = "0x12CAE14", VA = "0x12CAE14")]
	public void ActivatePlayerPhysics(VrPlayerPhysicsController.PhysicsControlSource source, bool includeHands = true, [Optional] Vector3? initialVelocity)
	{
	}

	[Token(Token = "0x60029CC")]
	[Address(RVA = "0x12CAED4", Offset = "0x12CAED4", VA = "0x12CAED4")]
	public void DeactivatePlayerPhysics(VrPlayerPhysicsController.PhysicsControlSource source, bool includeHands = true)
	{
	}

	[Token(Token = "0x60029CD")]
	[Address(RVA = "0x12CAF80", Offset = "0x12CAF80", VA = "0x12CAF80")]
	public void SetLadderOverride(bool isActive)
	{
	}

	[Token(Token = "0x60029CE")]
	[Address(RVA = "0x12CB00C", Offset = "0x12CB00C", VA = "0x12CB00C")]
	public void ClearRootTransformInterpolation(bool position, bool rotation, bool scale)
	{
	}

	[Token(Token = "0x60029CF")]
	[Address(RVA = "0x12CB0C0", Offset = "0x12CB0C0", VA = "0x12CB0C0")]
	public bool EitherHandIsClimbing()
	{
		return default(bool);
	}

	[Token(Token = "0x60029D0")]
	[Address(RVA = "0x12CB120", Offset = "0x12CB120", VA = "0x12CB120")]
	private float GetBearingRatio(Vector3 checkedVector)
	{
		return default(float);
	}

	[Token(Token = "0x60029D1")]
	[Address(RVA = "0x12CB31C", Offset = "0x12CB31C", VA = "0x12CB31C")]
	public float GetStunModifier()
	{
		return default(float);
	}

	[Token(Token = "0x60029D2")]
	[Address(RVA = "0x12CB358", Offset = "0x12CB358", VA = "0x12CB358")]
	public void TriggerSlowDown()
	{
	}

	[Token(Token = "0x60029D3")]
	[Address(RVA = "0x12CB374", Offset = "0x12CB374", VA = "0x12CB374")]
	public float GetHandPositionRatio()
	{
		return default(float);
	}

	[Token(Token = "0x60029D4")]
	[Address(RVA = "0x12CB464", Offset = "0x12CB464", VA = "0x12CB464")]
	private bool IsHandHoldingGunAimingDownSights(VrHand hand, out VrGun gun)
	{
		return default(bool);
	}

	[Token(Token = "0x60029D5")]
	[Address(RVA = "0x12CB3AC", Offset = "0x12CB3AC", VA = "0x12CB3AC")]
	private int GetHeldAimedGunCount()
	{
		return default(int);
	}

	[Token(Token = "0x60029D6")]
	[Address(RVA = "0x12CB75C", Offset = "0x12CB75C", VA = "0x12CB75C")]
	public float CalculateCurrentSpeedModifier(bool isGrounded, Vector3 worldMoveVector)
	{
		return default(float);
	}

	[Token(Token = "0x60029D7")]
	[Address(RVA = "0x12CB8B4", Offset = "0x12CB8B4", VA = "0x12CB8B4")]
	public void TeleportPlayer(Vector3 targetPosition, Vector3 targetForward, bool alignRootToForward)
	{
	}

	[Token(Token = "0x60029D8")]
	[Address(RVA = "0x12CC114", Offset = "0x12CC114", VA = "0x12CC114")]
	public void StartRotate(float rotationAngle, float timeTaken, bool shouldTriggerTurnAction)
	{
	}

	[Token(Token = "0x60029D9")]
	[Address(RVA = "0x12CC138", Offset = "0x12CC138", VA = "0x12CC138")]
	private void ProcessRotation()
	{
	}

	[Token(Token = "0x60029DA")]
	[Address(RVA = "0x12CBF1C", Offset = "0x12CBF1C", VA = "0x12CBF1C")]
	public void RotatePlayerByAmount(float rotationToApplyAboutY, bool canTriggerRotateAction)
	{
	}

	[Token(Token = "0x60029DB")]
	[Address(RVA = "0x12CC3B8", Offset = "0x12CC3B8", VA = "0x12CC3B8")]
	private void SetPlayerRotation(Quaternion rotationToApply)
	{
	}

	[Token(Token = "0x60029DC")]
	[Address(RVA = "0x12CC524", Offset = "0x12CC524", VA = "0x12CC524")]
	public bool StartCrouch(bool analogueCrouching, float analogueCrouchSpeed)
	{
		return default(bool);
	}

	[Token(Token = "0x60029DD")]
	[Address(RVA = "0x12CC53C", Offset = "0x12CC53C", VA = "0x12CC53C")]
	public bool StartCrouch(bool crouchDown, bool analogueCrouching, float analogueCrouchSpeed)
	{
		return default(bool);
	}

	[Token(Token = "0x60029DE")]
	[Address(RVA = "0x12CC758", Offset = "0x12CC758", VA = "0x12CC758")]
	public void StopCrouch()
	{
	}

	[Token(Token = "0x60029DF")]
	[Address(RVA = "0x12CC760", Offset = "0x12CC760", VA = "0x12CC760")]
	private void ProcessCrouch()
	{
	}

	[Token(Token = "0x60029E0")]
	[Address(RVA = "0x12CCB4C", Offset = "0x12CCB4C", VA = "0x12CCB4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60029E1")]
	[Address(RVA = "0x12CCB64", Offset = "0x12CCB64", VA = "0x12CCB64")]
	[ContextMenu("OnViewRecentered")]
	private void OnViewRecentered()
	{
	}

	[Token(Token = "0x60029E2")]
	[Address(RVA = "0x12CCCFC", Offset = "0x12CCCFC", VA = "0x12CCCFC")]
	private void OnFocusRecovered(bool hasFocus)
	{
	}

	[Token(Token = "0x60029E3")]
	[Address(RVA = "0x12CCF4C", Offset = "0x12CCF4C", VA = "0x12CCF4C")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x60029E4")]
	[Address(RVA = "0x12CD1B8", Offset = "0x12CD1B8", VA = "0x12CD1B8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60029E5")]
	[Address(RVA = "0x12CCF50", Offset = "0x12CCF50", VA = "0x12CCF50")]
	private void RefreshUserPresence()
	{
	}

	[Token(Token = "0x60029E7")]
	[Address(RVA = "0x12CC6B4", Offset = "0x12CC6B4", VA = "0x12CC6B4")]
	private void ApplyHeightDelta(float delta)
	{
	}

	[Token(Token = "0x60029E9")]
	[Address(RVA = "0x12CD310", Offset = "0x12CD310", VA = "0x12CD310")]
	public void Editor_SetHeightDelta(float heightDelta)
	{
	}

	[Token(Token = "0x60029EA")]
	[Address(RVA = "0x12CCCD8", Offset = "0x12CCCD8", VA = "0x12CCCD8")]
	public void ResetHeightDelta()
	{
	}

	[Token(Token = "0x60029EB")]
	[Address(RVA = "0x12CD410", Offset = "0x12CD410", VA = "0x12CD410")]
	public void ResetHeightDelta(bool hmdEnabled)
	{
	}

	[Token(Token = "0x60029EC")]
	[Address(RVA = "0x12CD434", Offset = "0x12CD434", VA = "0x12CD434")]
	public bool IsLookingAt(Vector3 position, float focusRatio, float maxDistance, bool checkLineOfSight)
	{
		return default(bool);
	}

	[Token(Token = "0x60029ED")]
	[Address(RVA = "0x12CD388", Offset = "0x12CD388", VA = "0x12CD388")]
	[IteratorStateMachine(typeof(<ResetHeightDelta_Internal>d__135))]
	private IEnumerator ResetHeightDelta_Internal(bool hmdEnabled = true)
	{
		return null;
	}

	[Token(Token = "0x60029EE")]
	[Address(RVA = "0x12CD634", Offset = "0x12CD634", VA = "0x12CD634")]
	public void SetArmLength()
	{
	}

	[Token(Token = "0x60029EF")]
	[Address(RVA = "0x12CA108", Offset = "0x12CA108", VA = "0x12CA108")]
	public void SetBeltHeight()
	{
	}

	[Token(Token = "0x60029F0")]
	[Address(RVA = "0x12CA1E4", Offset = "0x12CA1E4", VA = "0x12CA1E4")]
	public void SetBeltScale()
	{
	}

	[Token(Token = "0x60029F1")]
	[Address(RVA = "0x12CA2E0", Offset = "0x12CA2E0", VA = "0x12CA2E0")]
	public void SetBeltDepth()
	{
	}

	[Token(Token = "0x60029F2")]
	[Address(RVA = "0x12CA40C", Offset = "0x12CA40C", VA = "0x12CA40C")]
	public void SetBeltHipHolsterConfiguration()
	{
	}

	[Token(Token = "0x60029F3")]
	[Address(RVA = "0x12CD788", Offset = "0x12CD788", VA = "0x12CD788")]
	public void SetPlayerHeightAndArmLength(float distanceBetweenHands, float estimatedPlayerHeight)
	{
	}

	[Token(Token = "0x60029F4")]
	[Address(RVA = "0x12CD6F0", Offset = "0x12CD6F0", VA = "0x12CD6F0")]
	private void SetAvatarProportions(float height, float armLength)
	{
	}

	[Token(Token = "0x60029F7")]
	[Address(RVA = "0x12CDA78", Offset = "0x12CDA78", VA = "0x12CDA78")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60029F8")]
	[Address(RVA = "0x12CDB80", Offset = "0x12CDB80", VA = "0x12CDB80")]
	public void CapturePauseMenuReturnPosition()
	{
	}

	[Token(Token = "0x60029F9")]
	[Address(RVA = "0x12CDCB8", Offset = "0x12CDCB8", VA = "0x12CDCB8")]
	public void SetInSinglePlayerPauseMenu(bool paused)
	{
	}

	[Token(Token = "0x60029FA")]
	[Address(RVA = "0x12CDF20", Offset = "0x12CDF20", VA = "0x12CDF20")]
	public Transform GetHandParent(VrHandController hand)
	{
		return null;
	}

	[Token(Token = "0x60029FB")]
	[Address(RVA = "0x12CDF48", Offset = "0x12CDF48", VA = "0x12CDF48")]
	public VrMotionInputController GetMotionInputController()
	{
		return null;
	}

	[Token(Token = "0x60029FC")]
	[Address(RVA = "0x12CA058", Offset = "0x12CA058", VA = "0x12CA058")]
	private bool StartPlayerNoise([Optional] float? stopAfterSeconds)
	{
		return default(bool);
	}

	[Token(Token = "0x60029FD")]
	[Address(RVA = "0x12CA758", Offset = "0x12CA758", VA = "0x12CA758")]
	internal void StopPlayerNoise()
	{
	}

	[Token(Token = "0x60029FE")]
	[Address(RVA = "0x12CDF50", Offset = "0x12CDF50", VA = "0x12CDF50")]
	public void SafeDestroy()
	{
	}

	[Token(Token = "0x6002A07")]
	[Address(RVA = "0x12CE128", Offset = "0x12CE128", VA = "0x12CE128")]
	public VrRig()
	{
	}
}
[Token(Token = "0x2000725")]
public class VrRigPausePositioner : MonoBehaviour
{
	[Token(Token = "0x4002335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("The location in the world that we'll send the player to as they pause the game.")]
	private Vector3 m_pausePosition;

	[Token(Token = "0x4002336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool m_inPauseMenu;

	[Token(Token = "0x4002337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool m_hasValidReturnData;

	[Token(Token = "0x4002338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_pausedReturnPosition;

	[Token(Token = "0x4002339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion m_pausedRootRotation;

	[Token(Token = "0x400233A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 m_pausedRootForward;

	[Token(Token = "0x400233B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 m_pausedLocalHeadPosition;

	[Token(Token = "0x6002A0F")]
	[Address(RVA = "0x12CE788", Offset = "0x12CE788", VA = "0x12CE788")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002A10")]
	[Address(RVA = "0x12CDB98", Offset = "0x12CDB98", VA = "0x12CDB98")]
	public void CaptureReturnPosition()
	{
	}

	[Token(Token = "0x6002A11")]
	[Address(RVA = "0x12CDD10", Offset = "0x12CDD10", VA = "0x12CDD10")]
	public void PlaceInPauseMenu()
	{
	}

	[Token(Token = "0x6002A12")]
	[Address(RVA = "0x12CDE14", Offset = "0x12CDE14", VA = "0x12CDE14")]
	public void PlaceBackInWorld()
	{
	}

	[Token(Token = "0x6002A13")]
	[Address(RVA = "0x12CE790", Offset = "0x12CE790", VA = "0x12CE790")]
	public VrRigPausePositioner()
	{
	}
}
[Token(Token = "0x2000726")]
public class AlertSystem : MonoBehaviour
{
	[Token(Token = "0x2000727")]
	[CompilerGenerated]
	private sealed class <PlayAlarm>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AlertSystem <>4__this;

		[Token(Token = "0x1700070C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002A1D")]
			[Address(RVA = "0x12CEBB4", Offset = "0x12CEBB4", VA = "0x12CEBB4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700070D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002A1F")]
			[Address(RVA = "0x12CEBFC", Offset = "0x12CEBFC", VA = "0x12CEBFC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A1A")]
		[Address(RVA = "0x12CEAAC", Offset = "0x12CEAAC", VA = "0x12CEAAC")]
		[DebuggerHidden]
		public <PlayAlarm>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6002A1B")]
		[Address(RVA = "0x12CEADC", Offset = "0x12CEADC", VA = "0x12CEADC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002A1C")]
		[Address(RVA = "0x12CEAE0", Offset = "0x12CEAE0", VA = "0x12CEAE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A1E")]
		[Address(RVA = "0x12CEBBC", Offset = "0x12CEBBC", VA = "0x12CEBBC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400233C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("The raised event that will start the system")]
	[SerializeField]
	private GameEvent m_startAlertGameEvent;

	[Token(Token = "0x400233D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("The raised event that will stop the system")]
	private GameEvent m_stopAlertGameEvent;

	[Token(Token = "0x400233E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("light effect animation")]
	private Animation m_animation;

	[Token(Token = "0x400233F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("the audio player used to play the alert sound")]
	private WatchAudioPlayer m_audioPlayer;

	[Token(Token = "0x4002340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine m_alaramCoroutine;

	[Token(Token = "0x6002A14")]
	[Address(RVA = "0x12CE7A8", Offset = "0x12CE7A8", VA = "0x12CE7A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002A15")]
	[Address(RVA = "0x12CE888", Offset = "0x12CE888", VA = "0x12CE888")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002A16")]
	[Address(RVA = "0x12CE968", Offset = "0x12CE968", VA = "0x12CE968")]
	public void OnAlertRaised()
	{
	}

	[Token(Token = "0x6002A17")]
	[Address(RVA = "0x12CEA24", Offset = "0x12CEA24", VA = "0x12CEA24")]
	public void OnAlertStopped()
	{
	}

	[Token(Token = "0x6002A18")]
	[Address(RVA = "0x12CE9B0", Offset = "0x12CE9B0", VA = "0x12CE9B0")]
	[IteratorStateMachine(typeof(<PlayAlarm>d__9))]
	private IEnumerator PlayAlarm()
	{
		return null;
	}

	[Token(Token = "0x6002A19")]
	[Address(RVA = "0x12CEAD4", Offset = "0x12CEAD4", VA = "0x12CEAD4")]
	public AlertSystem()
	{
	}
}
[Token(Token = "0x2000728")]
public class TriggerWhenLookedAt : MonoBehaviour
{
	[Token(Token = "0x4002344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("The event to trigger when looked at")]
	[Header("Look at watch event")]
	private GameEvent m_gameEvent;

	[Token(Token = "0x4002345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("Whether the event will trigger once or infinitely")]
	private bool m_triggerOnce;

	[Token(Token = "0x4002346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[UnityEngine.Tooltip("Whether the watch will be tested to be looked at")]
	[SerializeField]
	private bool m_activeLookedAt;

	[Token(Token = "0x4002347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("A value between 0 and 1 that describes how close to the centre of our view the object must be. 0 means everywhere on screen and 1 means on the screen center.")]
	[SerializeField]
	private float m_focusRatio;

	[Token(Token = "0x1700070E")]
	public bool ActiveLookedAtEvent
	{
		[Token(Token = "0x6002A20")]
		[Address(RVA = "0x12CEC04", Offset = "0x12CEC04", VA = "0x12CEC04")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002A21")]
		[Address(RVA = "0x12CEC0C", Offset = "0x12CEC0C", VA = "0x12CEC0C")]
		set
		{
		}
	}

	[Token(Token = "0x6002A22")]
	[Address(RVA = "0x12CEC18", Offset = "0x12CEC18", VA = "0x12CEC18")]
	private void Start()
	{
	}

	[Token(Token = "0x6002A23")]
	[Address(RVA = "0x12CEC1C", Offset = "0x12CEC1C", VA = "0x12CEC1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6002A24")]
	[Address(RVA = "0x12CED38", Offset = "0x12CED38", VA = "0x12CED38")]
	public TriggerWhenLookedAt()
	{
	}
}
[Token(Token = "0x2000729")]
public class Watch : MonoBehaviour
{
	[Token(Token = "0x200072A")]
	public enum RightPaneModeEnum
	{
		[Token(Token = "0x4002360")]
		rightPaneModeObjective,
		[Token(Token = "0x4002361")]
		rightPaneModeFallen,
		[Token(Token = "0x4002362")]
		rightPaneModeSurvival,
		[Token(Token = "0x4002363")]
		rightPaneModeExtraction
	}

	[Token(Token = "0x200072B")]
	[CompilerGenerated]
	private sealed class <PlayHapticsWithDelay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Watch <>4__this;

		[Token(Token = "0x17000710")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002A45")]
			[Address(RVA = "0x12D09C4", Offset = "0x12D09C4", VA = "0x12D09C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000711")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002A47")]
			[Address(RVA = "0x12D0A0C", Offset = "0x12D0A0C", VA = "0x12D0A0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A42")]
		[Address(RVA = "0x12CFD64", Offset = "0x12CFD64", VA = "0x12CFD64")]
		[DebuggerHidden]
		public <PlayHapticsWithDelay>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6002A43")]
		[Address(RVA = "0x12D08FC", Offset = "0x12D08FC", VA = "0x12D08FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002A44")]
		[Address(RVA = "0x12D0900", Offset = "0x12D0900", VA = "0x12D0900", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A46")]
		[Address(RVA = "0x12D09CC", Offset = "0x12D09CC", VA = "0x12D09CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200072D")]
	[CompilerGenerated]
	private sealed class <BeepHapticRoutine>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400236C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400236D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400236E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Watch <>4__this;

		[Token(Token = "0x400236F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x4002370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <j>5__3;

		[Token(Token = "0x17000712")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002A50")]
			[Address(RVA = "0x12D0CE4", Offset = "0x12D0CE4", VA = "0x12D0CE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000713")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002A52")]
			[Address(RVA = "0x12D0D2C", Offset = "0x12D0D2C", VA = "0x12D0D2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A4D")]
		[Address(RVA = "0x12D02A0", Offset = "0x12D02A0", VA = "0x12D02A0")]
		[DebuggerHidden]
		public <BeepHapticRoutine>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x6002A4E")]
		[Address(RVA = "0x12D0AE4", Offset = "0x12D0AE4", VA = "0x12D0AE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002A4F")]
		[Address(RVA = "0x12D0AE8", Offset = "0x12D0AE8", VA = "0x12D0AE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A51")]
		[Address(RVA = "0x12D0CEC", Offset = "0x12D0CEC", VA = "0x12D0CEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4002348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private VrMotionInput.HandednessPreference m_preferedHandedness;

	[Token(Token = "0x4002349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform m_forwardsReference;

	[Token(Token = "0x400234A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<GameObject> m_watchObjects;

	[Token(Token = "0x400234B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ManualHaptics m_haptics;

	[Token(Token = "0x400234C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameEvent m_beepEvent;

	[Token(Token = "0x400234D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameEvent m_lookedAtEvent;

	[Token(Token = "0x400234E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private WatchAudioPlayer m_watchAudioPlayer;

	[Token(Token = "0x400234F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject m_debugPanel;

	[Token(Token = "0x4002350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	[SerializeField]
	private Vector3 m_outerWatchRotationAngle;

	[Token(Token = "0x4002351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private Vector3 m_outerWatchPositionOffset;

	[Token(Token = "0x4002352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform m_pivot;

	[Token(Token = "0x4002353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ObjectiveControllerViewModel m_objectiveControllerViewModel;

	[Token(Token = "0x4002354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameViewModel m_gameViewModel;

	[Token(Token = "0x4002355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private VrHand m_hand;

	[Token(Token = "0x4002356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_showFallen;

	[Token(Token = "0x4002357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private HealthStatus m_fallenHealthStatus;

	[Token(Token = "0x4002358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform m_fallenTransform;

	[Token(Token = "0x4002359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Coroutine m_beepHapticRoutine;

	[Token(Token = "0x400235A")]
	public const string m_rightPaneModeObjective = "ObjectiveCompass";

	[Token(Token = "0x400235B")]
	public const string m_rightPaneModeFallen = "FallenPlayerCompass";

	[Token(Token = "0x400235C")]
	public const string m_rightPaneModeSurvival = "SurvivalCompass";

	[Token(Token = "0x400235D")]
	public const string m_rightPaneModeExtraction = "ExtractionCompass";

	[Token(Token = "0x400235E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int m_oldIndex;

	[Token(Token = "0x1700070F")]
	public GameViewModel GameViewModel
	{
		[Token(Token = "0x6002A2E")]
		[Address(RVA = "0x12CFE04", Offset = "0x12CFE04", VA = "0x12CFE04")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A2F")]
		[Address(RVA = "0x12CFE0C", Offset = "0x12CFE0C", VA = "0x12CFE0C")]
		set
		{
		}
	}

	[Token(Token = "0x6002A25")]
	[Address(RVA = "0x12CED50", Offset = "0x12CED50", VA = "0x12CED50")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002A26")]
	[Address(RVA = "0x12CEEFC", Offset = "0x12CEEFC", VA = "0x12CEEFC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6002A27")]
	[Address(RVA = "0x12CF02C", Offset = "0x12CF02C", VA = "0x12CF02C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002A28")]
	[Address(RVA = "0x12CF4B4", Offset = "0x12CF4B4", VA = "0x12CF4B4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002A29")]
	[Address(RVA = "0x12CF930", Offset = "0x12CF930", VA = "0x12CF930")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002A2A")]
	[Address(RVA = "0x12CF124", Offset = "0x12CF124", VA = "0x12CF124")]
	public void SetWatchOrientation()
	{
	}

	[Token(Token = "0x6002A2B")]
	[Address(RVA = "0x12CFC1C", Offset = "0x12CFC1C", VA = "0x12CFC1C")]
	public void PlayHaptics(float delay = 0f)
	{
	}

	[Token(Token = "0x6002A2C")]
	[Address(RVA = "0x12CFCE0", Offset = "0x12CFCE0", VA = "0x12CFCE0")]
	[IteratorStateMachine(typeof(<PlayHapticsWithDelay>d__30))]
	private IEnumerator PlayHapticsWithDelay(float delay)
	{
		return null;
	}

	[Token(Token = "0x6002A2D")]
	[Address(RVA = "0x12CFD8C", Offset = "0x12CFD8C", VA = "0x12CFD8C")]
	private void ResetWatch()
	{
	}

	[Token(Token = "0x6002A30")]
	[Address(RVA = "0x12CF2B8", Offset = "0x12CF2B8", VA = "0x12CF2B8")]
	private void HandleHandVisibility(bool handVisible)
	{
	}

	[Token(Token = "0x6002A31")]
	[Address(RVA = "0x12CF898", Offset = "0x12CF898", VA = "0x12CF898")]
	private bool ShouldShowWatch()
	{
		return default(bool);
	}

	[Token(Token = "0x6002A32")]
	[Address(RVA = "0x12CFE14", Offset = "0x12CFE14", VA = "0x12CFE14")]
	private void Update()
	{
	}

	[Token(Token = "0x6002A33")]
	[Address(RVA = "0x12CFFF4", Offset = "0x12CFFF4", VA = "0x12CFFF4")]
	public float GetDirectionToPosition(Vector3 pos)
	{
		return default(float);
	}

	[Token(Token = "0x6002A34")]
	[Address(RVA = "0x12D022C", Offset = "0x12D022C", VA = "0x12D022C")]
	[IteratorStateMachine(typeof(<BeepHapticRoutine>d__40))]
	private IEnumerator BeepHapticRoutine()
	{
		return null;
	}

	[Token(Token = "0x6002A35")]
	[Address(RVA = "0x12D02C8", Offset = "0x12D02C8", VA = "0x12D02C8")]
	private void OnBeepEvent()
	{
	}

	[Token(Token = "0x6002A36")]
	[Address(RVA = "0x12D031C", Offset = "0x12D031C", VA = "0x12D031C")]
	private void OnLookedAtEvent()
	{
	}

	[Token(Token = "0x6002A37")]
	[Address(RVA = "0x12D0360", Offset = "0x12D0360", VA = "0x12D0360")]
	private void OnGlobalActionOnFallen(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x6002A38")]
	[Address(RVA = "0x12D0534", Offset = "0x12D0534", VA = "0x12D0534")]
	private void OnGlobalActionOnRescue(HealthStatusInfo obj)
	{
	}

	[Token(Token = "0x6002A39")]
	[Address(RVA = "0x12D0538", Offset = "0x12D0538", VA = "0x12D0538")]
	private void OnGameStateChanged()
	{
	}

	[Token(Token = "0x6002A3A")]
	[Address(RVA = "0x12D0624", Offset = "0x12D0624", VA = "0x12D0624")]
	public void PlayAlarm()
	{
	}

	[Token(Token = "0x6002A3B")]
	[Address(RVA = "0x12D06C4", Offset = "0x12D06C4", VA = "0x12D06C4")]
	public void PlayCompass()
	{
	}

	[Token(Token = "0x6002A3C")]
	[Address(RVA = "0x12D06F0", Offset = "0x12D06F0", VA = "0x12D06F0")]
	internal void PlayTimer(float normalizedTimer, int timerIndex)
	{
	}

	[Token(Token = "0x6002A3D")]
	[Address(RVA = "0x12D073C", Offset = "0x12D073C", VA = "0x12D073C")]
	internal void PlayHealthRegen()
	{
	}

	[Token(Token = "0x6002A3E")]
	[Address(RVA = "0x12D0768", Offset = "0x12D0768", VA = "0x12D0768")]
	internal void PlayPoints(int numPoints)
	{
	}

	[Token(Token = "0x6002A3F")]
	[Address(RVA = "0x12D07A4", Offset = "0x12D07A4", VA = "0x12D07A4")]
	private void OnDeath(HealthStatusInfo info)
	{
	}

	[Token(Token = "0x6002A40")]
	[Address(RVA = "0x12D08C0", Offset = "0x12D08C0", VA = "0x12D08C0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6002A41")]
	[Address(RVA = "0x12D08C4", Offset = "0x12D08C4", VA = "0x12D08C4")]
	public Watch()
	{
	}
}
[Token(Token = "0x200072E")]
[ExecuteInEditMode]
public class SkyboxFogBlend : MonoBehaviour
{
	[Token(Token = "0x4002371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject m_playerChar;

	[Token(Token = "0x4002372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_distBetweenObj;

	[Token(Token = "0x4002373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_fadeBetween;

	[Token(Token = "0x4002374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float m_fadeStartAmount;

	[Token(Token = "0x4002375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float m_fadeEndAmount;

	[Token(Token = "0x6002A53")]
	[Address(RVA = "0x12D0D34", Offset = "0x12D0D34", VA = "0x12D0D34")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6002A54")]
	[Address(RVA = "0x12D0DCC", Offset = "0x12D0DCC", VA = "0x12D0DCC")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6002A55")]
	[Address(RVA = "0x12D0E20", Offset = "0x12D0E20", VA = "0x12D0E20")]
	private static Vector3 GetContributionPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002A56")]
	[Address(RVA = "0x12D0F00", Offset = "0x12D0F00", VA = "0x12D0F00")]
	public float GetBlend()
	{
		return default(float);
	}

	[Token(Token = "0x6002A57")]
	[Address(RVA = "0x12D0FF8", Offset = "0x12D0FF8", VA = "0x12D0FF8")]
	public SkyboxFogBlend()
	{
	}
}
[Token(Token = "0x200072F")]
public static class SkyboxManager
{
	[Token(Token = "0x4002376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SkyboxFogBlend s_skyboxFogBlend;

	[Token(Token = "0x4002377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int Blend;

	[Token(Token = "0x6002A58")]
	[Address(RVA = "0x12D100C", Offset = "0x12D100C", VA = "0x12D100C")]
	[RuntimeInitializeOnLoadMethod]
	private static void InitRuntime()
	{
	}

	[Token(Token = "0x6002A59")]
	[Address(RVA = "0x12D1010", Offset = "0x12D1010", VA = "0x12D1010")]
	private static void Update()
	{
	}

	[Token(Token = "0x6002A5A")]
	[Address(RVA = "0x12D1130", Offset = "0x12D1130", VA = "0x12D1130")]
	public static void Register(SkyboxFogBlend skyboxFogBlend)
	{
	}
}
[Token(Token = "0x2000730")]
[TrackColor(0.1f, 0.8f, 0.8f)]
[TrackBindingType(typeof(VertexVATController))]
[TrackClipType(typeof(VATControlAsset))]
public class VATAnimationTrack : TrackAsset, IIdentifableBinding
{
	[Token(Token = "0x4002378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Identifier m_identifier;

	[Token(Token = "0x17000714")]
	public Identifier Identifier
	{
		[Token(Token = "0x6002A5C")]
		[Address(RVA = "0x12D1200", Offset = "0x12D1200", VA = "0x12D1200", Slot = "36")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000715")]
	public Type BindingType
	{
		[Token(Token = "0x6002A5D")]
		[Address(RVA = "0x12D1208", Offset = "0x12D1208", VA = "0x12D1208", Slot = "37")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002A5E")]
	[Address(RVA = "0x12D1274", Offset = "0x12D1274", VA = "0x12D1274")]
	public VATAnimationTrack()
	{
	}
}
[Token(Token = "0x2000731")]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
[ExecuteInEditMode]
[DisallowMultipleComponent]
public abstract class MeshChainRenderer : MonoBehaviour
{
	[Token(Token = "0x4002379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly GradientColorKey k_DefaultStartColor;

	[Token(Token = "0x400237A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly GradientColorKey k_DefaultEndColor;

	[Token(Token = "0x400237B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly GradientAlphaKey k_DefaultStartAlpha;

	[Token(Token = "0x400237C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly GradientAlphaKey k_DefaultEndAlpha;

	[Token(Token = "0x400237D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("Materials to use when rendering.")]
	protected Material[] m_Materials;

	[Token(Token = "0x400237E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("The multiplier applied to the curve, describing the width (in world space) along the line.")]
	protected float m_Width;

	[Token(Token = "0x400237F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("The curve describing the width of the line at various points along its length.")]
	protected AnimationCurve m_WidthCurve;

	[Token(Token = "0x4002380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("The gradient describing color along the line.")]
	protected Gradient m_Color;

	[Token(Token = "0x4002381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[HideInInspector]
	protected MeshRenderer m_MeshRenderer;

	[Token(Token = "0x4002382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected XRMeshChain m_XRMeshData;

	[Token(Token = "0x4002383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected bool m_MeshNeedsRefreshing;

	[Token(Token = "0x4002384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected float m_StepSize;

	[Token(Token = "0x17000716")]
	public virtual Material material
	{
		[Token(Token = "0x6002A5F")]
		[Address(RVA = "0x12D12CC", Offset = "0x12D12CC", VA = "0x12D12CC", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A60")]
		[Address(RVA = "0x12D12E8", Offset = "0x12D12E8", VA = "0x12D12E8", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000717")]
	public virtual Material[] materials
	{
		[Token(Token = "0x6002A61")]
		[Address(RVA = "0x12D1304", Offset = "0x12D1304", VA = "0x12D1304", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A62")]
		[Address(RVA = "0x12D1320", Offset = "0x12D1320", VA = "0x12D1320", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000718")]
	public virtual Material sharedMaterial
	{
		[Token(Token = "0x6002A63")]
		[Address(RVA = "0x12D133C", Offset = "0x12D133C", VA = "0x12D133C", Slot = "8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A64")]
		[Address(RVA = "0x12D1358", Offset = "0x12D1358", VA = "0x12D1358", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000719")]
	public virtual Material[] SharedMaterials
	{
		[Token(Token = "0x6002A65")]
		[Address(RVA = "0x12D1374", Offset = "0x12D1374", VA = "0x12D1374", Slot = "10")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A66")]
		[Address(RVA = "0x12D1390", Offset = "0x12D1390", VA = "0x12D1390", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x1700071A")]
	public float widthStart
	{
		[Token(Token = "0x6002A67")]
		[Address(RVA = "0x12D13AC", Offset = "0x12D13AC", VA = "0x12D13AC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6002A68")]
		[Address(RVA = "0x12D13DC", Offset = "0x12D13DC", VA = "0x12D13DC")]
		set
		{
		}
	}

	[Token(Token = "0x1700071B")]
	public float widthEnd
	{
		[Token(Token = "0x6002A69")]
		[Address(RVA = "0x12D145C", Offset = "0x12D145C", VA = "0x12D145C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6002A6A")]
		[Address(RVA = "0x12D148C", Offset = "0x12D148C", VA = "0x12D148C")]
		set
		{
		}
	}

	[Token(Token = "0x1700071C")]
	public float widthMultiplier
	{
		[Token(Token = "0x6002A6B")]
		[Address(RVA = "0x12D1520", Offset = "0x12D1520", VA = "0x12D1520")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6002A6C")]
		[Address(RVA = "0x12D1528", Offset = "0x12D1528", VA = "0x12D1528")]
		set
		{
		}
	}

	[Token(Token = "0x1700071D")]
	public AnimationCurve widthCurve
	{
		[Token(Token = "0x6002A6D")]
		[Address(RVA = "0x12D153C", Offset = "0x12D153C", VA = "0x12D153C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A6E")]
		[Address(RVA = "0x12D1544", Offset = "0x12D1544", VA = "0x12D1544")]
		set
		{
		}
	}

	[Token(Token = "0x1700071E")]
	public Gradient colorGradient
	{
		[Token(Token = "0x6002A6F")]
		[Address(RVA = "0x12D1650", Offset = "0x12D1650", VA = "0x12D1650")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A70")]
		[Address(RVA = "0x12D1658", Offset = "0x12D1658", VA = "0x12D1658")]
		set
		{
		}
	}

	[Token(Token = "0x1700071F")]
	public Color colorStart
	{
		[Token(Token = "0x6002A71")]
		[Address(RVA = "0x12D1864", Offset = "0x12D1864", VA = "0x12D1864")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6002A72")]
		[Address(RVA = "0x12D1884", Offset = "0x12D1884", VA = "0x12D1884")]
		set
		{
		}
	}

	[Token(Token = "0x17000720")]
	public Color colorEnd
	{
		[Token(Token = "0x6002A73")]
		[Address(RVA = "0x12D1954", Offset = "0x12D1954", VA = "0x12D1954")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6002A74")]
		[Address(RVA = "0x12D1974", Offset = "0x12D1974", VA = "0x12D1974")]
		set
		{
		}
	}

	[Token(Token = "0x6002A75")]
	[Address(RVA = "0x12D1A68", Offset = "0x12D1A68", VA = "0x12D1A68")]
	public void SetTotalWidth(float newWidth)
	{
	}

	[Token(Token = "0x6002A76")]
	[Address(RVA = "0x12D1B78", Offset = "0x12D1B78", VA = "0x12D1B78")]
	public void SetTotalColor(Color newColor)
	{
	}

	[Token(Token = "0x6002A77")]
	[Address(RVA = "0x12D1DA8", Offset = "0x12D1DA8", VA = "0x12D1DA8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6002A78")]
	[Address(RVA = "0x12D1DE0", Offset = "0x12D1DE0", VA = "0x12D1DE0")]
	private void SetupMeshBackend()
	{
	}

	[Token(Token = "0x6002A79")]
	[Address(RVA = "0x12D21D0", Offset = "0x12D21D0", VA = "0x12D21D0", Slot = "12")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6002A7A")]
	[Address(RVA = "0x12D21F4", Offset = "0x12D21F4", VA = "0x12D21F4")]
	private void Reset()
	{
	}

	[Token(Token = "0x6002A7B")]
	[Address(RVA = "0x12D2218", Offset = "0x12D2218", VA = "0x12D2218")]
	private void Start()
	{
	}

	[Token(Token = "0x6002A7C")]
	[Address(RVA = "0x12D2228", Offset = "0x12D2228", VA = "0x12D2228", Slot = "13")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6002A7D")]
	[Address(RVA = "0x12D23D4", Offset = "0x12D23D4", VA = "0x12D23D4")]
	public static implicit operator Renderer(MeshChainRenderer lr)
	{
		return null;
	}

	[Token(Token = "0x6002A7E")]
	[Address(RVA = "0x12D2150", Offset = "0x12D2150", VA = "0x12D2150")]
	private void EditorCheckForUpdate()
	{
	}

	[Token(Token = "0x6002A7F")]
	[Address(RVA = "0x12D23EC", Offset = "0x12D23EC", VA = "0x12D23EC", Slot = "14")]
	protected virtual void UpdateColors()
	{
	}

	[Token(Token = "0x6002A80")]
	[Address(RVA = "0x12D23F0", Offset = "0x12D23F0", VA = "0x12D23F0", Slot = "15")]
	protected virtual void UpdateWidth()
	{
	}

	[Token(Token = "0x6002A81")]
	[Address(RVA = "0x12D23F4", Offset = "0x12D23F4", VA = "0x12D23F4", Slot = "16")]
	protected virtual void Initialize()
	{
	}

	[Token(Token = "0x6002A82")]
	[Address(RVA = "0x12D23F8", Offset = "0x12D23F8", VA = "0x12D23F8", Slot = "17")]
	protected virtual bool NeedsReinitialize()
	{
		return default(bool);
	}

	[Token(Token = "0x6002A83")]
	[Address(RVA = "0x12D2400", Offset = "0x12D2400", VA = "0x12D2400", Slot = "18")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6002A84")]
	[Address(RVA = "0x12D2420", Offset = "0x12D2420", VA = "0x12D2420", Slot = "19")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6002A85")]
	[Address(RVA = "0x12D2440", Offset = "0x12D2440", VA = "0x12D2440")]
	protected MeshChainRenderer()
	{
	}
}
[Token(Token = "0x2000732")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshFilter))]
[RequireComponent(typeof(MeshRenderer))]
public class XRLineRenderer : MeshChainRenderer
{
	[Token(Token = "0x4002385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[UnityEngine.Tooltip("All of the connected points to render as a line.")]
	[SerializeField]
	private Vector3[] m_Positions;

	[Token(Token = "0x4002386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[FormerlySerializedAs("m_WorldSpaceData")]
	[UnityEngine.Tooltip("Draw lines in worldspace (or local space) - driven via shader.")]
	private bool m_UseWorldSpace;

	[Token(Token = "0x4002387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	[SerializeField]
	[UnityEngine.Tooltip("Connect the first and last vertices, to create a loop.")]
	private bool m_Loop;

	[Token(Token = "0x17000721")]
	public bool loop
	{
		[Token(Token = "0x6002A87")]
		[Address(RVA = "0x12D2620", Offset = "0x12D2620", VA = "0x12D2620")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002A88")]
		[Address(RVA = "0x12D2628", Offset = "0x12D2628", VA = "0x12D2628")]
		set
		{
		}
	}

	[Token(Token = "0x17000722")]
	public bool useWorldSpace
	{
		[Token(Token = "0x6002A89")]
		[Address(RVA = "0x12D266C", Offset = "0x12D266C", VA = "0x12D266C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000723")]
	public override Material material
	{
		[Token(Token = "0x6002A8A")]
		[Address(RVA = "0x12D2674", Offset = "0x12D2674", VA = "0x12D2674", Slot = "4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A8B")]
		[Address(RVA = "0x12D2690", Offset = "0x12D2690", VA = "0x12D2690", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000724")]
	public override Material[] materials
	{
		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0x12D27F4", Offset = "0x12D27F4", VA = "0x12D27F4", Slot = "6")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A8D")]
		[Address(RVA = "0x12D2810", Offset = "0x12D2810", VA = "0x12D2810", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000725")]
	public override Material sharedMaterial
	{
		[Token(Token = "0x6002A8E")]
		[Address(RVA = "0x12D2838", Offset = "0x12D2838", VA = "0x12D2838", Slot = "8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A8F")]
		[Address(RVA = "0x12D2854", Offset = "0x12D2854", VA = "0x12D2854", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x17000726")]
	public override Material[] SharedMaterials
	{
		[Token(Token = "0x6002A90")]
		[Address(RVA = "0x12D287C", Offset = "0x12D287C", VA = "0x12D287C", Slot = "10")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002A91")]
		[Address(RVA = "0x12D2898", Offset = "0x12D2898", VA = "0x12D2898", Slot = "11")]
		set
		{
		}
	}

	[Token(Token = "0x6002A92")]
	[Address(RVA = "0x12D26B8", Offset = "0x12D26B8", VA = "0x12D26B8")]
	private void CopyWorldSpaceDataFromMaterial()
	{
	}

	[Token(Token = "0x6002A93")]
	[Address(RVA = "0x12D28C0", Offset = "0x12D28C0", VA = "0x12D28C0")]
	public Vector3 GetPosition(int index)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002A94")]
	[Address(RVA = "0x12D28FC", Offset = "0x12D28FC", VA = "0x12D28FC")]
	public void SetPosition(int index, Vector3 position)
	{
	}

	[Token(Token = "0x6002A95")]
	[Address(RVA = "0x12D2DB8", Offset = "0x12D2DB8", VA = "0x12D2DB8")]
	public int GetPositions(Vector3[] positions)
	{
		return default(int);
	}

	[Token(Token = "0x6002A96")]
	[Address(RVA = "0x12D2DEC", Offset = "0x12D2DEC", VA = "0x12D2DEC")]
	public void SetPositions(Vector3[] newPositions, bool knownSizeChange = false)
	{
	}

	[Token(Token = "0x6002A97")]
	[Address(RVA = "0x12D2FD4", Offset = "0x12D2FD4", VA = "0x12D2FD4")]
	public void SetVertexCount(int count)
	{
	}

	[Token(Token = "0x6002A98")]
	[Address(RVA = "0x12D30E4", Offset = "0x12D30E4", VA = "0x12D30E4")]
	public int GetVertexCount()
	{
		return default(int);
	}

	[Token(Token = "0x6002A99")]
	[Address(RVA = "0x12D3100", Offset = "0x12D3100", VA = "0x12D3100", Slot = "14")]
	protected override void UpdateColors()
	{
	}

	[Token(Token = "0x6002A9A")]
	[Address(RVA = "0x12D3C20", Offset = "0x12D3C20", VA = "0x12D3C20", Slot = "15")]
	protected override void UpdateWidth()
	{
	}

	[Token(Token = "0x6002A9B")]
	[Address(RVA = "0x12D3F84", Offset = "0x12D3F84", VA = "0x12D3F84", Slot = "16")]
	protected override void Initialize()
	{
	}

	[Token(Token = "0x6002A9C")]
	[Address(RVA = "0x12D4CEC", Offset = "0x12D4CEC", VA = "0x12D4CEC", Slot = "17")]
	protected override bool NeedsReinitialize()
	{
		return default(bool);
	}

	[Token(Token = "0x6002A9D")]
	[Address(RVA = "0x12D4D2C", Offset = "0x12D4D2C", VA = "0x12D4D2C")]
	public XRLineRenderer()
	{
	}
}
[Token(Token = "0x2000733")]
public class XRMeshChain
{
	[Token(Token = "0x2000734")]
	[Flags]
	public enum MeshRefreshFlag
	{
		[Token(Token = "0x4002393")]
		None = 0,
		[Token(Token = "0x4002394")]
		Positions = 1,
		[Token(Token = "0x4002395")]
		Colors = 2,
		[Token(Token = "0x4002396")]
		Sizes = 4,
		[Token(Token = "0x4002397")]
		All = 7
	}

	[Token(Token = "0x4002388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3[] m_Verts;

	[Token(Token = "0x4002389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color32[] m_Colors;

	[Token(Token = "0x400238A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Vector4> m_ShapeData;

	[Token(Token = "0x400238B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector3> m_NeighborPoints;

	[Token(Token = "0x400238C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRefreshFlag m_DataThatNeedsUpdate;

	[Token(Token = "0x400238D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Mesh m_Mesh;

	[Token(Token = "0x400238E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform m_OwnerTransform;

	[Token(Token = "0x400238F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool m_WorldSpaceData;

	[Token(Token = "0x17000727")]
	public bool worldSpaceData
	{
		[Token(Token = "0x6002A9E")]
		[Address(RVA = "0x12D4D80", Offset = "0x12D4D80", VA = "0x12D4D80")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002A9F")]
		[Address(RVA = "0x12D4D88", Offset = "0x12D4D88", VA = "0x12D4D88")]
		set
		{
		}
	}

	[Token(Token = "0x17000728")]
	public int reservedElements
	{
		[Token(Token = "0x6002AA0")]
		[Address(RVA = "0x12D4D94", Offset = "0x12D4D94", VA = "0x12D4D94")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6002AA1")]
		[Address(RVA = "0x12D4D9C", Offset = "0x12D4D9C", VA = "0x12D4D9C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000729")]
	public bool centerAtRoot
	{
		[Token(Token = "0x6002AA2")]
		[Address(RVA = "0x12D4DA4", Offset = "0x12D4DA4", VA = "0x12D4DA4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002AA3")]
		[Address(RVA = "0x12D4DAC", Offset = "0x12D4DAC", VA = "0x12D4DAC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6002AA4")]
	[Address(RVA = "0x12D43BC", Offset = "0x12D43BC", VA = "0x12D43BC")]
	public XRMeshChain()
	{
	}

	[Token(Token = "0x6002AA5")]
	[Address(RVA = "0x12D43E0", Offset = "0x12D43E0", VA = "0x12D43E0")]
	public void GenerateMesh(GameObject owner, bool dynamic, int totalElements)
	{
	}

	[Token(Token = "0x6002AA6")]
	[Address(RVA = "0x12D2254", Offset = "0x12D2254", VA = "0x12D2254")]
	public void RefreshMesh()
	{
	}

	[Token(Token = "0x6002AA7")]
	[Address(RVA = "0x12D2DA8", Offset = "0x12D2DA8", VA = "0x12D2DA8")]
	public void SetMeshDataDirty(MeshRefreshFlag dataThatNeedsUpdate)
	{
	}

	[Token(Token = "0x6002AA8")]
	[Address(RVA = "0x12D2C1C", Offset = "0x12D2C1C", VA = "0x12D2C1C")]
	public void SetElementPosition(int elementIndex, ref Vector3 position)
	{
	}

	[Token(Token = "0x6002AA9")]
	[Address(RVA = "0x12D2A8C", Offset = "0x12D2A8C", VA = "0x12D2A8C")]
	public void SetElementPipe(int elementIndex, ref Vector3 startPoint, ref Vector3 endPoint)
	{
	}

	[Token(Token = "0x6002AAA")]
	[Address(RVA = "0x12D3DB8", Offset = "0x12D3DB8", VA = "0x12D3DB8")]
	public void SetElementSize(int elementIndex, float sizeModification)
	{
	}

	[Token(Token = "0x6002AAB")]
	[Address(RVA = "0x12D3E9C", Offset = "0x12D3E9C", VA = "0x12D3E9C")]
	public void SetElementSize(int elementIndex, float startSize, float endSize)
	{
	}

	[Token(Token = "0x6002AAC")]
	[Address(RVA = "0x12D3294", Offset = "0x12D3294", VA = "0x12D3294")]
	public void SetElementColor(int elementIndex, ref Color color)
	{
	}

	[Token(Token = "0x6002AAD")]
	[Address(RVA = "0x12D4DB8", Offset = "0x12D4DB8", VA = "0x12D4DB8")]
	public void SetElementColor32(int elementIndex, ref Color32 color)
	{
	}

	[Token(Token = "0x6002AAE")]
	[Address(RVA = "0x12D361C", Offset = "0x12D361C", VA = "0x12D361C")]
	public void SetElementColor(int elementIndex, ref Color startColor, ref Color endColor)
	{
	}

	[Token(Token = "0x6002AAF")]
	[Address(RVA = "0x12D4E60", Offset = "0x12D4E60", VA = "0x12D4E60")]
	public void SetElementColor32(int elementIndex, ref Color32 startColor, ref Color32 endColor)
	{
	}
}
[Token(Token = "0x2000735")]
[ExecuteInEditMode]
[RequireComponent(typeof(MeshFilter))]
[RequireComponent(typeof(MeshRenderer))]
public class XRTrailRenderer : MeshChainRenderer
{
	[Token(Token = "0x4002398")]
	private const float k_AbsoluteMinVertexDistance = 0.01f;

	[Token(Token = "0x4002399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[UnityEngine.Tooltip("How many points to store for tracing.")]
	private int m_MaxTrailPoints;

	[Token(Token = "0x400239A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	[UnityEngine.Tooltip("Whether to use the last point or the first point of the trail when more are needed and none are available.")]
	private bool m_StealLastPointWhenEmpty;

	[Token(Token = "0x400239B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[UnityEngine.Tooltip("How long the tail should be (second) [ 0, infinity ].")]
	private float m_Time;

	[Token(Token = "0x400239C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	[UnityEngine.Tooltip("The minimum distance to spawn a new point on the trail [ 0, infinity ].")]
	private float m_MinVertexDistance;

	[Token(Token = "0x400239D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("Destroy GameObject when there is no trail?")]
	[SerializeField]
	private bool m_Autodestruct;

	[Token(Token = "0x400239E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[UnityEngine.Tooltip("With this enabled, the last point will smooth lerp between the last recorded anchor point and the one after it")]
	[SerializeField]
	private bool m_SmoothInterpolation;

	[Token(Token = "0x400239F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] m_Points;

	[Token(Token = "0x40023A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float[] m_PointTimes;

	[Token(Token = "0x40023A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_PointIndexStart;

	[Token(Token = "0x40023A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int m_PointIndexEnd;

	[Token(Token = "0x40023A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 m_LastRecordedPoint;

	[Token(Token = "0x40023A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float m_LastPointTime;

	[Token(Token = "0x40023A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_EditorDeltaHelper;

	[Token(Token = "0x1700072A")]
	public float time
	{
		[Token(Token = "0x6002AB0")]
		[Address(RVA = "0x12D4F18", Offset = "0x12D4F18", VA = "0x12D4F18")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6002AB1")]
		[Address(RVA = "0x12D4F20", Offset = "0x12D4F20", VA = "0x12D4F20")]
		set
		{
		}
	}

	[Token(Token = "0x1700072B")]
	public float minVertexDistance
	{
		[Token(Token = "0x6002AB2")]
		[Address(RVA = "0x12D4F30", Offset = "0x12D4F30", VA = "0x12D4F30")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6002AB3")]
		[Address(RVA = "0x12D4F38", Offset = "0x12D4F38", VA = "0x12D4F38")]
		set
		{
		}
	}

	[Token(Token = "0x1700072C")]
	public int positionCount
	{
		[Token(Token = "0x6002AB4")]
		[Address(RVA = "0x12D4F4C", Offset = "0x12D4F4C", VA = "0x12D4F4C")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6002AB5")]
		[Address(RVA = "0x12D4F54", Offset = "0x12D4F54", VA = "0x12D4F54")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700072D")]
	public bool autodestruct
	{
		[Token(Token = "0x6002AB6")]
		[Address(RVA = "0x12D4F5C", Offset = "0x12D4F5C", VA = "0x12D4F5C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002AB7")]
		[Address(RVA = "0x12D4F64", Offset = "0x12D4F64", VA = "0x12D4F64")]
		set
		{
		}
	}

	[Token(Token = "0x1700072E")]
	public bool smoothInterpolation
	{
		[Token(Token = "0x6002AB8")]
		[Address(RVA = "0x12D4F70", Offset = "0x12D4F70", VA = "0x12D4F70")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002AB9")]
		[Address(RVA = "0x12D4F78", Offset = "0x12D4F78", VA = "0x12D4F78")]
		set
		{
		}
	}

	[Token(Token = "0x6002ABA")]
	[Address(RVA = "0x12D4F84", Offset = "0x12D4F84", VA = "0x12D4F84", Slot = "13")]
	protected override void LateUpdate()
	{
	}

	[Token(Token = "0x6002ABB")]
	[Address(RVA = "0x12D5744", Offset = "0x12D5744", VA = "0x12D5744")]
	public void EditorCheckForUpdate()
	{
	}

	[Token(Token = "0x6002ABC")]
	[Address(RVA = "0x12D5754", Offset = "0x12D5754", VA = "0x12D5754")]
	public void Clear()
	{
	}

	[Token(Token = "0x6002ABD")]
	[Address(RVA = "0x12D58A0", Offset = "0x12D58A0", VA = "0x12D58A0", Slot = "16")]
	protected override void Initialize()
	{
	}

	[Token(Token = "0x6002ABE")]
	[Address(RVA = "0x12D5A54", Offset = "0x12D5A54", VA = "0x12D5A54", Slot = "17")]
	protected override bool NeedsReinitialize()
	{
		return default(bool);
	}

	[Token(Token = "0x6002ABF")]
	[Address(RVA = "0x12D5AA4", Offset = "0x12D5AA4", VA = "0x12D5AA4", Slot = "18")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6002AC0")]
	[Address(RVA = "0x12D5AD0", Offset = "0x12D5AD0", VA = "0x12D5AD0")]
	public XRTrailRenderer()
	{
	}
}
[Token(Token = "0x2000736")]
public struct BlendInfo
{
	[Token(Token = "0x40023A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int weight;

	[Token(Token = "0x40023A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float time;

	[Token(Token = "0x40023A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int index;
}
[Token(Token = "0x2000737")]
public interface AnimationInfo
{
	[Token(Token = "0x6002AC1")]
	BlendInfo GetBlendInfo(string control_param);
}
[Token(Token = "0x2000738")]
public class ExtendedMonoBehaviour : MonoBehaviour
{
	[Token(Token = "0x6002AC2")]
	[Address(RVA = "0x12D5B84", Offset = "0x12D5B84", VA = "0x12D5B84")]
	public static GameObject AddVisualGuide(Transform t)
	{
		return null;
	}

	[Token(Token = "0x6002AC3")]
	[Address(RVA = "0x12D5B98", Offset = "0x12D5B98", VA = "0x12D5B98")]
	public static GameObject AddVisualGuide(Transform t, Color c)
	{
		return null;
	}

	[Token(Token = "0x6002AC4")]
	[Address(RVA = "0x12D5DC4", Offset = "0x12D5DC4", VA = "0x12D5DC4")]
	public static string FormatVector(Vector3 v)
	{
		return null;
	}

	[Token(Token = "0x6002AC5")]
	[Address(RVA = "0x12D5E94", Offset = "0x12D5E94", VA = "0x12D5E94")]
	public static string FormatFloat(float f)
	{
		return null;
	}

	[Token(Token = "0x6002AC6")]
	[Address(RVA = "0x12D5F14", Offset = "0x12D5F14", VA = "0x12D5F14")]
	public ExtendedMonoBehaviour()
	{
	}
}
[Token(Token = "0x2000739")]
public class AS_CameraFPSControl : MonoBehaviour
{
	[Token(Token = "0x40023AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sensitivityX;

	[Token(Token = "0x40023AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityY;

	[Token(Token = "0x40023AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float force;

	[Token(Token = "0x40023AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float mHdg;

	[Token(Token = "0x40023AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float mPitch;

	[Token(Token = "0x6002AC7")]
	[Address(RVA = "0x12D5F1C", Offset = "0x12D5F1C", VA = "0x12D5F1C")]
	private void Start()
	{
	}

	[Token(Token = "0x6002AC8")]
	[Address(RVA = "0x12D5F64", Offset = "0x12D5F64", VA = "0x12D5F64")]
	private void Update()
	{
	}

	[Token(Token = "0x6002AC9")]
	[Address(RVA = "0x12D611C", Offset = "0x12D611C", VA = "0x12D611C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6002ACA")]
	[Address(RVA = "0x12D6264", Offset = "0x12D6264", VA = "0x12D6264")]
	private void MoveForwards(float aVal)
	{
	}

	[Token(Token = "0x6002ACB")]
	[Address(RVA = "0x12D6394", Offset = "0x12D6394", VA = "0x12D6394")]
	private void Strafe(float aVal)
	{
	}

	[Token(Token = "0x6002ACC")]
	[Address(RVA = "0x12D6420", Offset = "0x12D6420", VA = "0x12D6420")]
	private void ChangeHeight(float aVal)
	{
	}

	[Token(Token = "0x6002ACD")]
	[Address(RVA = "0x12D6028", Offset = "0x12D6028", VA = "0x12D6028")]
	private void ChangeHeading(float aVal)
	{
	}

	[Token(Token = "0x6002ACE")]
	[Address(RVA = "0x12D6090", Offset = "0x12D6090", VA = "0x12D6090")]
	private void ChangePitch(float aVal)
	{
	}

	[Token(Token = "0x6002ACF")]
	[Address(RVA = "0x12D64C8", Offset = "0x12D64C8", VA = "0x12D64C8")]
	public static void WrapAngle(ref float angle)
	{
	}

	[Token(Token = "0x6002AD0")]
	[Address(RVA = "0x12D6524", Offset = "0x12D6524", VA = "0x12D6524")]
	public AS_CameraFPSControl()
	{
	}
}
[Token(Token = "0x200073A")]
public class IkHitResponseBone : MonoBehaviour
{
	[Token(Token = "0x200073B")]
	public enum BoneId
	{
		[Token(Token = "0x40023B7")]
		None,
		[Token(Token = "0x40023B8")]
		Head,
		[Token(Token = "0x40023B9")]
		Chest,
		[Token(Token = "0x40023BA")]
		Hips,
		[Token(Token = "0x40023BB")]
		LeftArm,
		[Token(Token = "0x40023BC")]
		LeftForeArm,
		[Token(Token = "0x40023BD")]
		RightArm,
		[Token(Token = "0x40023BE")]
		RightForeArm,
		[Token(Token = "0x40023BF")]
		LeftLegUpper,
		[Token(Token = "0x40023C0")]
		LeftLegLower,
		[Token(Token = "0x40023C1")]
		RightLegUpper,
		[Token(Token = "0x40023C2")]
		RightLegLower,
		[Token(Token = "0x40023C3")]
		LeftChest,
		[Token(Token = "0x40023C4")]
		RightChest
	}

	[Token(Token = "0x40023AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BoneId m_partId;

	[Token(Token = "0x40023B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_allowIk;

	[Token(Token = "0x40023B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IkHitResponseHelper m_ikHitResponseHelper;

	[Token(Token = "0x40023B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ApplyShootTest m_waypointedCharacter;

	[Token(Token = "0x40023B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_triggerActivatedThisFrame;

	[Token(Token = "0x40023B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool m_updatedThisFrame;

	[Token(Token = "0x40023B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<MeleeIKBlock> m_meleeIKBlock;

	[Token(Token = "0x1700072F")]
	public ApplyShootTest WaypointedCharacter
	{
		[Token(Token = "0x6002AD2")]
		[Address(RVA = "0x12D6544", Offset = "0x12D6544", VA = "0x12D6544")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002AD1")]
	[Address(RVA = "0x12D653C", Offset = "0x12D653C", VA = "0x12D653C")]
	public void Initialise(ApplyShootTest wpc)
	{
	}

	[Token(Token = "0x6002AD3")]
	[Address(RVA = "0x12D654C", Offset = "0x12D654C", VA = "0x12D654C")]
	public IkHitResponseBone()
	{
	}
}
[Token(Token = "0x200073C")]
public class MeleeIKBlock
{
	[Token(Token = "0x40023C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool m_blockContinuedContact;

	[Token(Token = "0x40023C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private float m_maxContactTime;

	[Token(Token = "0x40023C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_contactTimeCounter;

	[Token(Token = "0x40023C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_prevContactTime;

	[Token(Token = "0x40023C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_maxElapsedTimeForContinuedHit;

	[Token(Token = "0x40023CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_blockStartTime;

	[Token(Token = "0x40023CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_blockTimeLimit;

	[Token(Token = "0x6002AD4")]
	[Address(RVA = "0x12D65DC", Offset = "0x12D65DC", VA = "0x12D65DC")]
	public void UpdatePreviousContactControl(float prevContactTime)
	{
	}

	[Token(Token = "0x6002AD5")]
	[Address(RVA = "0x12D65E4", Offset = "0x12D65E4", VA = "0x12D65E4")]
	public void UpdateContactLock(bool updatedThisFrame, bool triggeredThisFrame)
	{
	}

	[Token(Token = "0x6002AD6")]
	[Address(RVA = "0x12D669C", Offset = "0x12D669C", VA = "0x12D669C")]
	public bool IsInteractionBlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x6002AD7")]
	[Address(RVA = "0x12D6690", Offset = "0x12D6690", VA = "0x12D6690")]
	public void ResetContactLock()
	{
	}

	[Token(Token = "0x6002AD8")]
	[Address(RVA = "0x12D66A4", Offset = "0x12D66A4", VA = "0x12D66A4")]
	public MeleeIKBlock()
	{
	}
}
[Token(Token = "0x200073D")]
[RequireComponent(typeof(FullBodyBipedIK))]
public class IkHitResponseHelper : MonoBehaviour
{
	[Token(Token = "0x40023CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool m_allowIkHitResponse;

	[Token(Token = "0x40023CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<IkHitResponseItem> m_hitResponseItems;

	[Token(Token = "0x40023CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HitReaction hitReaction;

	[Token(Token = "0x40023CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float hitForce;

	[NonSerialized]
	[Token(Token = "0x40023D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FullBodyBipedIK m_IkReference;

	[Token(Token = "0x40023D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform m_IkTargetNodeContainer;

	[Token(Token = "0x40023D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private IkHitResponseBone[] m_boneMarkerList;

	[Token(Token = "0x40023D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_IkSystemActivated;

	[Token(Token = "0x40023D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float m_meleeStrikeVelForRagdoll_blunt;

	[Token(Token = "0x40023D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float m_meleeStrikeVelForRagdoll_blade;

	[Token(Token = "0x40023D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float m_meleeStrikeVelForRagdoll_Scaler;

	[Token(Token = "0x40023D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float m_meleePlayerDirScaler;

	[Token(Token = "0x40023D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float m_magClamp_min;

	[Token(Token = "0x40023D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_magClamp_max;

	[Token(Token = "0x40023DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float m_damageStrike_scaler;

	[Token(Token = "0x40023DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float m_firstContact_scaler;

	[Token(Token = "0x40023DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float m_passiveContact_scaler;

	[Token(Token = "0x40023DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_damageVelMag_hand;

	[Token(Token = "0x40023DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float m_damageVelMag_item;

	[Token(Token = "0x6002AD9")]
	[Address(RVA = "0x12D66C8", Offset = "0x12D66C8", VA = "0x12D66C8")]
	public void ActivateIkSystems()
	{
	}

	[Token(Token = "0x6002ADA")]
	[Address(RVA = "0x12D6838", Offset = "0x12D6838", VA = "0x12D6838")]
	public void DeactivateIkSystems()
	{
	}

	[Token(Token = "0x6002ADB")]
	[Address(RVA = "0x12D6814", Offset = "0x12D6814", VA = "0x12D6814")]
	private void SetIterations(int numIteration)
	{
	}

	[Token(Token = "0x6002ADC")]
	[Address(RVA = "0x12D6860", Offset = "0x12D6860", VA = "0x12D6860")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002ADD")]
	[Address(RVA = "0x12D6864", Offset = "0x12D6864", VA = "0x12D6864")]
	private bool ShouldAllowHitIk()
	{
		return default(bool);
	}

	[Token(Token = "0x6002ADE")]
	[Address(RVA = "0x12D6724", Offset = "0x12D6724", VA = "0x12D6724")]
	private void GetReferences()
	{
	}

	[Token(Token = "0x6002ADF")]
	[Address(RVA = "0x12D686C", Offset = "0x12D686C", VA = "0x12D686C")]
	public Quaternion[] ListCurrentBoneLocalOrientations()
	{
		return null;
	}

	[Token(Token = "0x6002AE0")]
	[Address(RVA = "0x12D694C", Offset = "0x12D694C", VA = "0x12D694C")]
	public void ApplyBoneLocalOrientations(Quaternion[] oris)
	{
	}

	[Token(Token = "0x6002AE1")]
	[Address(RVA = "0x12D6C34", Offset = "0x12D6C34", VA = "0x12D6C34")]
	private void Start()
	{
	}

	[Token(Token = "0x6002AE2")]
	[Address(RVA = "0x12D6A10", Offset = "0x12D6A10", VA = "0x12D6A10")]
	private void InitBones()
	{
	}

	[Token(Token = "0x6002AE3")]
	[Address(RVA = "0x12D6C44", Offset = "0x12D6C44", VA = "0x12D6C44")]
	private void CreateHitResponseItemList()
	{
	}

	[Token(Token = "0x6002AE4")]
	[Address(RVA = "0x12D7CB0", Offset = "0x12D7CB0", VA = "0x12D7CB0")]
	public void TriggerHitResponse_Gun(IkHitResponseBone hitResponseBone, Vector3 movementVector)
	{
	}

	[Token(Token = "0x6002AE5")]
	[Address(RVA = "0x12D7F90", Offset = "0x12D7F90", VA = "0x12D7F90")]
	private void Update()
	{
	}

	[Token(Token = "0x6002AE6")]
	[Address(RVA = "0x12D8330", Offset = "0x12D8330", VA = "0x12D8330")]
	public IkHitResponseHelper()
	{
	}
}
[Serializable]
[Token(Token = "0x200073E")]
public class IkHitResponseItem
{
	[Token(Token = "0x40023DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_identifier;

	[Token(Token = "0x40023E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<IkHitResponseBone.BoneId> m_triggerFromBoneIds;

	[Token(Token = "0x40023E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 m_targetOffsetFromCharacterBase;

	[Token(Token = "0x40023E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool m_activeAnimation;

	[Token(Token = "0x40023E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool m_animatePosition;

	[Token(Token = "0x40023E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool m_animateRotation;

	[Token(Token = "0x40023E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 1f)]
	public float m_weight;

	[Token(Token = "0x40023E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public IKEffector m_solver;

	[Token(Token = "0x40023E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Transform m_bone;

	[Token(Token = "0x40023E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform m_target;

	[Token(Token = "0x40023E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float m_currentWeight;

	[Token(Token = "0x40023EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float m_targetWeight;

	[Token(Token = "0x40023EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float m_additionalWeight;

	[Token(Token = "0x40023EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float m_weightBlendSpeed;

	[Token(Token = "0x40023ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float m_weightReturnToZeroSpeed;

	[Token(Token = "0x40023EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform m_nodeContainer;

	[Token(Token = "0x40023EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform m_baseCharacterTransform;

	[Token(Token = "0x40023F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 m_blendTargetPosition;

	[Token(Token = "0x6002AE7")]
	[Address(RVA = "0x12D79C0", Offset = "0x12D79C0", VA = "0x12D79C0")]
	public void FindReferences(IKSolverFullBodyBiped solver, Transform baseCharacterTransform, Transform targetNodeContainer)
	{
	}

	[Token(Token = "0x6002AE8")]
	[Address(RVA = "0x12D7BF0", Offset = "0x12D7BF0", VA = "0x12D7BF0")]
	public void SetInitialGoalPosition()
	{
	}

	[Token(Token = "0x6002AE9")]
	[Address(RVA = "0x12D7E40", Offset = "0x12D7E40", VA = "0x12D7E40")]
	public void StartAnimation(Vector3 movementVector)
	{
	}

	[Token(Token = "0x6002AEA")]
	[Address(RVA = "0x12D88C0", Offset = "0x12D88C0", VA = "0x12D88C0")]
	public void AddWeight()
	{
	}

	[Token(Token = "0x6002AEB")]
	[Address(RVA = "0x12D8060", Offset = "0x12D8060", VA = "0x12D8060")]
	public void UpdateAnimation(float deltaTime)
	{
	}

	[Token(Token = "0x6002AEC")]
	[Address(RVA = "0x12D88E4", Offset = "0x12D88E4", VA = "0x12D88E4")]
	private void CumulativeEffectThenReturnToRest(float deltaTime)
	{
	}

	[Token(Token = "0x6002AED")]
	[Address(RVA = "0x12D8784", Offset = "0x12D8784", VA = "0x12D8784")]
	private Transform CreateGameobjectFromPosition(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6002AEE")]
	[Address(RVA = "0x12D83F4", Offset = "0x12D83F4", VA = "0x12D83F4")]
	public Transform FindDeepChild(Transform aParent, string aName)
	{
		return null;
	}

	[Token(Token = "0x6002AEF")]
	[Address(RVA = "0x12D7930", Offset = "0x12D7930", VA = "0x12D7930")]
	public IkHitResponseItem()
	{
	}
}
[Token(Token = "0x200073F")]
public class PTRagdollToggler : Poolable
{
	[Token(Token = "0x2000740")]
	public delegate void RagdollCallbackHandler(PTRagdollToggler rdt);

	[Token(Token = "0x2000741")]
	public class SkinData
	{
		[Token(Token = "0x4002412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SkinnedMeshRenderer skin;

		[Token(Token = "0x4002413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] normalBones;

		[Token(Token = "0x4002414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] ragdollBones;

		[Token(Token = "0x6002B2F")]
		[Address(RVA = "0x12DF2C4", Offset = "0x12DF2C4", VA = "0x12DF2C4")]
		public void SetRagdoll(Transform root, bool ragdoll)
		{
		}

		[Token(Token = "0x6002B30")]
		[Address(RVA = "0x12DF314", Offset = "0x12DF314", VA = "0x12DF314")]
		public SkinData()
		{
		}
	}

	[Token(Token = "0x2000742")]
	public class RigData
	{
		[Token(Token = "0x4002415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject m_hips;

		[Token(Token = "0x4002416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject m_head;

		[Token(Token = "0x4002417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject m_spine;

		[Token(Token = "0x4002418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string m_HipsName;

		[Token(Token = "0x4002419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Transform> m_transforms;

		[Token(Token = "0x6002B31")]
		[Address(RVA = "0x12DF31C", Offset = "0x12DF31C", VA = "0x12DF31C")]
		public RigData(GameObject root, string hipsName)
		{
		}

		[Token(Token = "0x6002B32")]
		[Address(RVA = "0x12DF470", Offset = "0x12DF470", VA = "0x12DF470")]
		public RigData(RigData source, string hipsName, string newHipsName)
		{
		}

		[Token(Token = "0x6002B33")]
		[Address(RVA = "0x12DF350", Offset = "0x12DF350", VA = "0x12DF350")]
		public void Initialise(GameObject root, string hipsName)
		{
		}

		[Token(Token = "0x6002B34")]
		[Address(RVA = "0x12DF674", Offset = "0x12DF674", VA = "0x12DF674")]
		private List<Transform> GetTransforms(Transform root)
		{
			return null;
		}

		[Token(Token = "0x6002B35")]
		[Address(RVA = "0x12DF71C", Offset = "0x12DF71C", VA = "0x12DF71C")]
		public void CopyTransforms(RigData from)
		{
		}
	}

	[Token(Token = "0x2000743")]
	public class RagdollNode
	{
		[Token(Token = "0x400241A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float mass;

		[Token(Token = "0x400241B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject go;

		[Token(Token = "0x400241C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody rb;

		[Token(Token = "0x400241D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Collider collider;

		[Token(Token = "0x400241E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CharacterJoint joint;

		[Token(Token = "0x400241F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool defaultEnableProjection;

		[Token(Token = "0x4002420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion originalLocalRotation;

		[Token(Token = "0x4002421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 originalLocalPosition;

		[Token(Token = "0x6002B36")]
		[Address(RVA = "0x12DF980", Offset = "0x12DF980", VA = "0x12DF980")]
		public RagdollNode()
		{
		}
	}

	[Token(Token = "0x2000744")]
	public class ForceData
	{
		[Token(Token = "0x4002422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 force;

		[Token(Token = "0x4002423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 origin;

		[Token(Token = "0x4002424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float range;

		[Token(Token = "0x4002425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool explosion;

		[Token(Token = "0x6002B37")]
		[Address(RVA = "0x12DF988", Offset = "0x12DF988", VA = "0x12DF988")]
		public ForceData()
		{
		}
	}

	[Token(Token = "0x2000746")]
	[CompilerGenerated]
	private sealed class <SetRagdollDelayed>d__83 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4002427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4002428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4002429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bRagDoll;

		[Token(Token = "0x400242A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PTRagdollToggler <>4__this;

		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RagdollCallbackHandler callback;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IkHitResponseHelper <ikHelper>5__2;

		[Token(Token = "0x17000735")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6002B3D")]
			[Address(RVA = "0x12E019C", Offset = "0x12E019C", VA = "0x12E019C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000736")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002B3F")]
			[Address(RVA = "0x12E01E4", Offset = "0x12E01E4", VA = "0x12E01E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002B3A")]
		[Address(RVA = "0x12DFA1C", Offset = "0x12DFA1C", VA = "0x12DFA1C")]
		[DebuggerHidden]
		public <SetRagdollDelayed>d__83(int <>1__state)
		{
		}

		[Token(Token = "0x6002B3B")]
		[Address(RVA = "0x12DFA44", Offset = "0x12DFA44", VA = "0x12DFA44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6002B3C")]
		[Address(RVA = "0x12DFA48", Offset = "0x12DFA48", VA = "0x12DFA48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B3E")]
		[Address(RVA = "0x12E01A4", Offset = "0x12E01A4", VA = "0x12E01A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40023F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action<bool> OnRagdollChangeMode;

	[Token(Token = "0x40023F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool m_RagDoll;

	[Token(Token = "0x40023F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string m_HipsName;

	[Token(Token = "0x40023F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string m_SpineName;

	[Token(Token = "0x40023F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public string m_LeftLegName;

	[Token(Token = "0x40023F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string m_LeftLegLowerName;

	[Token(Token = "0x40023F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public string m_LeftFootName;

	[Token(Token = "0x40023F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public string m_RightLegName;

	[Token(Token = "0x40023F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public string m_RightLegLowerName;

	[Token(Token = "0x40023FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public string m_RightFootName;

	[Token(Token = "0x40023FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected bool m_isRagDoll;

	[Token(Token = "0x40023FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	protected bool m_bFrozen;

	[Token(Token = "0x40023FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	protected bool m_delayedStateSwitchInProgress;

	[Token(Token = "0x40023FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected int m_ragDollLayer;

	[Token(Token = "0x40023FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected int m_dissolveRagdollLayer;

	[Token(Token = "0x4002400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected int m_shootableLayer;

	[Token(Token = "0x4002401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected Dictionary<GameObject, BoneState> m_TPose;

	[Token(Token = "0x4002402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected List<RagdollNode> m_RagdollNodes;

	[Token(Token = "0x4002403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected List<BoneIntersectionTest> m_BoneIntersectionTests;

	[Token(Token = "0x4002404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected List<Joint> m_TempJoints;

	[Token(Token = "0x4002405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected List<RagdollNode> m_passiveLimbs;

	[Token(Token = "0x4002406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	protected List<Rigidbody> m_MovementTestBodies;

	[Token(Token = "0x4002407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected Animator m_animator;

	[Token(Token = "0x4002408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private RigData m_ragdollRig;

	[Token(Token = "0x4002409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private RigData m_activeRig;

	[Token(Token = "0x400240A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private RigData m_normalRig;

	[Token(Token = "0x400240B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private List<SkinData> m_skinData;

	[Token(Token = "0x400240C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private HashSet<Transform> m_usedSkinBones;

	[Token(Token = "0x400240D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private RagdollHelper m_ragdollHelper;

	[Token(Token = "0x400240E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private List<ForceData> m_forces;

	[Token(Token = "0x400240F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int m_numForcesApplied;

	[Token(Token = "0x4002410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Action OnInitialized;

	[Token(Token = "0x4002411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int m_ragdollCount;

	[Token(Token = "0x17000730")]
	public RigData ActiveRig
	{
		[Token(Token = "0x6002AF0")]
		[Address(RVA = "0x12D8A1C", Offset = "0x12D8A1C", VA = "0x12D8A1C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002AF1")]
		[Address(RVA = "0x12D8A24", Offset = "0x12D8A24", VA = "0x12D8A24")]
		set
		{
		}
	}

	[Token(Token = "0x17000731")]
	public Transform HeadNode
	{
		[Token(Token = "0x6002AF2")]
		[Address(RVA = "0x12D8AA0", Offset = "0x12D8AA0", VA = "0x12D8AA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000732")]
	public Transform SpineNode
	{
		[Token(Token = "0x6002AF3")]
		[Address(RVA = "0x12D8B30", Offset = "0x12D8B30", VA = "0x12D8B30")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000733")]
	public GameObject RagdollHips
	{
		[Token(Token = "0x6002AF4")]
		[Address(RVA = "0x12D8BC0", Offset = "0x12D8BC0", VA = "0x12D8BC0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000734")]
	public bool Initialized
	{
		[Token(Token = "0x6002AF5")]
		[Address(RVA = "0x12D8BDC", Offset = "0x12D8BDC", VA = "0x12D8BDC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6002AF6")]
	[Address(RVA = "0x12D8BEC", Offset = "0x12D8BEC", VA = "0x12D8BEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002AF7")]
	[Address(RVA = "0x12D8E60", Offset = "0x12D8E60", VA = "0x12D8E60")]
	private void Start()
	{
	}

	[Token(Token = "0x6002AF8")]
	[Address(RVA = "0x12D8E64", Offset = "0x12D8E64", VA = "0x12D8E64")]
	[ContextMenu("Create Ragdoll")]
	private void InitializeRagdoll()
	{
	}

	[Token(Token = "0x6002AF9")]
	[Address(RVA = "0x12D9620", Offset = "0x12D9620", VA = "0x12D9620")]
	public bool IsRagdoll()
	{
		return default(bool);
	}

	[Token(Token = "0x6002AFA")]
	[Address(RVA = "0x12D9628", Offset = "0x12D9628", VA = "0x12D9628")]
	public Transform GetRagdollBone(Transform originalTransform)
	{
		return null;
	}

	[Token(Token = "0x6002AFB")]
	[Address(RVA = "0x12D8F88", Offset = "0x12D8F88", VA = "0x12D8F88")]
	private void ConvertToNonRagdoll()
	{
	}

	[Token(Token = "0x6002AFC")]
	[Address(RVA = "0x12D9738", Offset = "0x12D9738", VA = "0x12D9738")]
	private void BuildSkinData()
	{
	}

	[Token(Token = "0x6002AFD")]
	[Address(RVA = "0x12DA360", Offset = "0x12DA360", VA = "0x12DA360")]
	private void DestroyComponent(UnityEngine.Component c)
	{
	}

	[Token(Token = "0x6002AFE")]
	[Address(RVA = "0x12DA3D8", Offset = "0x12DA3D8", VA = "0x12DA3D8")]
	private void DestroyGameObject(GameObject obj)
	{
	}

	[Token(Token = "0x6002AFF")]
	[Address(RVA = "0x12DA0C0", Offset = "0x12DA0C0", VA = "0x12DA0C0")]
	private void CleanNormalRig()
	{
	}

	[Token(Token = "0x6002B00")]
	[Address(RVA = "0x12D9BAC", Offset = "0x12D9BAC", VA = "0x12D9BAC")]
	private RigData CleanRagdollRig()
	{
		return null;
	}

	[Token(Token = "0x6002B01")]
	[Address(RVA = "0x12DA550", Offset = "0x12DA550", VA = "0x12DA550")]
	private void RemoveGameObjects(GameObject root, params Type[] componentTypes)
	{
	}

	[Token(Token = "0x6002B02")]
	[Address(RVA = "0x12D94CC", Offset = "0x12D94CC", VA = "0x12D94CC")]
	private void RemoveDamageSensorColliders(GameObject root)
	{
	}

	[Token(Token = "0x6002B03")]
	[Address(RVA = "0x12DA848", Offset = "0x12DA848", VA = "0x12DA848")]
	private void RagdollRigInterpolate(bool value)
	{
	}

	[Token(Token = "0x6002B04")]
	[Address(RVA = "0x12DA8FC", Offset = "0x12DA8FC", VA = "0x12DA8FC")]
	private void ReplaceTags(Transform obj, string tagName, [Optional] string replaceWith)
	{
	}

	[Token(Token = "0x6002B05")]
	[Address(RVA = "0x12DA450", Offset = "0x12DA450", VA = "0x12DA450")]
	private void RemoveTaggedObjects(Transform obj, string tagName)
	{
	}

	[Token(Token = "0x6002B06")]
	[Address(RVA = "0x12DA9E0", Offset = "0x12DA9E0", VA = "0x12DA9E0")]
	public GameObject GetRagdollNode(GameObject obj, bool recurseUpHeirarchy = false)
	{
		return null;
	}

	[Token(Token = "0x6002B07")]
	[Address(RVA = "0x12DAB4C", Offset = "0x12DAB4C", VA = "0x12DAB4C")]
	public GameObject GetHeadNode(bool dead)
	{
		return null;
	}

	[Token(Token = "0x6002B08")]
	[Address(RVA = "0x12D9068", Offset = "0x12D9068", VA = "0x12D9068")]
	private void CacheRagdollData(RigData ragdoll)
	{
	}

	[Token(Token = "0x6002B09")]
	[Address(RVA = "0x12DB118", Offset = "0x12DB118", VA = "0x12DB118")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6002B0A")]
	[Address(RVA = "0x12DB5A0", Offset = "0x12DB5A0", VA = "0x12DB5A0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6002B0B")]
	[Address(RVA = "0x12DBD58", Offset = "0x12DBD58", VA = "0x12DBD58")]
	public void AddImpulseToAll(Vector3 vForce, Vector3 vOrigin, float fRange)
	{
	}

	[Token(Token = "0x6002B0C")]
	[Address(RVA = "0x12DBA7C", Offset = "0x12DBA7C", VA = "0x12DBA7C")]
	public void ApplyImpulseForceNow(Vector3 force, Vector3 origin, float range)
	{
	}

	[Token(Token = "0x6002B0D")]
	[Address(RVA = "0x12DBE90", Offset = "0x12DBE90", VA = "0x12DBE90")]
	public void ApplyExplosiveForce(Vector3 vForce)
	{
	}

	[Token(Token = "0x6002B0E")]
	[Address(RVA = "0x12DB944", Offset = "0x12DB944", VA = "0x12DB944")]
	public void ApplyExplosiveForceNow(Vector3 force)
	{
	}

	[Token(Token = "0x6002B0F")]
	[Address(RVA = "0x12DBF9C", Offset = "0x12DBF9C", VA = "0x12DBF9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6002B10")]
	[Address(RVA = "0x12DBFC4", Offset = "0x12DBFC4", VA = "0x12DBFC4", Slot = "8")]
	public override void OnAddedToPool()
	{
	}

	[Token(Token = "0x6002B11")]
	[Address(RVA = "0x12DBFE0", Offset = "0x12DBFE0", VA = "0x12DBFE0", Slot = "9")]
	public override void OnAllocFromPool()
	{
	}

	[Token(Token = "0x6002B12")]
	[Address(RVA = "0x12DC010", Offset = "0x12DC010", VA = "0x12DC010", Slot = "10")]
	public override void OnReturnToPool()
	{
	}

	[Token(Token = "0x6002B13")]
	[Address(RVA = "0x12DB3FC", Offset = "0x12DB3FC", VA = "0x12DB3FC")]
	private void ForceTPose()
	{
	}

	[Token(Token = "0x6002B14")]
	[Address(RVA = "0x12D8D4C", Offset = "0x12D8D4C", VA = "0x12D8D4C")]
	private void StoreTPose(GameObject go)
	{
	}

	[Token(Token = "0x6002B15")]
	[Address(RVA = "0x12DAB74", Offset = "0x12DAB74", VA = "0x12DAB74")]
	private void FindRagdollNodes(GameObject go)
	{
	}

	[Token(Token = "0x6002B16")]
	[Address(RVA = "0x12D95C8", Offset = "0x12D95C8", VA = "0x12D95C8")]
	public void SetRagdoll(bool bRagDoll, [Optional] RagdollCallbackHandler callback, bool noDelay = false)
	{
	}

	[Token(Token = "0x6002B17")]
	[Address(RVA = "0x12DC5C4", Offset = "0x12DC5C4", VA = "0x12DC5C4")]
	public void HandleEmbeddedPickups(bool ragdoll, bool remove = false)
	{
	}

	[Token(Token = "0x6002B18")]
	[Address(RVA = "0x12DC528", Offset = "0x12DC528", VA = "0x12DC528")]
	[IteratorStateMachine(typeof(<SetRagdollDelayed>d__83))]
	public IEnumerator SetRagdollDelayed(bool bRagDoll, [Optional] RagdollCallbackHandler callback)
	{
		return null;
	}

	[Token(Token = "0x6002B19")]
	[Address(RVA = "0x12DC5C8", Offset = "0x12DC5C8", VA = "0x12DC5C8")]
	public void ToggleRagdollAnimationRestoreHelper(bool value)
	{
	}

	[Token(Token = "0x6002B1A")]
	[Address(RVA = "0x12DC3F0", Offset = "0x12DC3F0", VA = "0x12DC3F0")]
	private void SetHips(bool ragdoll)
	{
	}

	[Token(Token = "0x6002B1B")]
	[Address(RVA = "0x12DC660", Offset = "0x12DC660", VA = "0x12DC660")]
	public void UpdateRagdollLimbScale(Transform source)
	{
	}

	[Token(Token = "0x6002B1C")]
	[Address(RVA = "0x12DC7E8", Offset = "0x12DC7E8", VA = "0x12DC7E8")]
	private void DoBoneIntersectionTests()
	{
	}

	[Token(Token = "0x6002B1D")]
	[Address(RVA = "0x12DCDA0", Offset = "0x12DCDA0", VA = "0x12DCDA0")]
	private void FindEmbeddedLimbs()
	{
	}

	[Token(Token = "0x6002B1E")]
	[Address(RVA = "0x12DD20C", Offset = "0x12DD20C", VA = "0x12DD20C")]
	private void IgnoreCollisions(RagdollNode node, bool ignore)
	{
	}

	[Token(Token = "0x6002B1F")]
	[Address(RVA = "0x12DD35C", Offset = "0x12DD35C", VA = "0x12DD35C")]
	private void LockJoint(CharacterJoint joint)
	{
	}

	[Token(Token = "0x6002B20")]
	[Address(RVA = "0x12DC028", Offset = "0x12DC028", VA = "0x12DC028")]
	public void FreezeRagdoll()
	{
	}

	[Token(Token = "0x6002B21")]
	[Address(RVA = "0x12DD934", Offset = "0x12DD934", VA = "0x12DD934")]
	public void OnDissolveStart()
	{
	}

	[Token(Token = "0x6002B22")]
	[Address(RVA = "0x12DDADC", Offset = "0x12DDADC", VA = "0x12DDADC")]
	public bool IsFrozen()
	{
		return default(bool);
	}

	[Token(Token = "0x6002B23")]
	[Address(RVA = "0x12DD5A4", Offset = "0x12DD5A4", VA = "0x12DD5A4")]
	private void RemoveTempJoints()
	{
	}

	[Token(Token = "0x6002B24")]
	[Address(RVA = "0x12DCCA8", Offset = "0x12DCCA8", VA = "0x12DCCA8")]
	private void EnableJointProjection()
	{
	}

	[Token(Token = "0x6002B25")]
	[Address(RVA = "0x12DDAE4", Offset = "0x12DDAE4", VA = "0x12DDAE4")]
	private void ToggleJointAutoConfigureAnchor(bool value)
	{
	}

	[Token(Token = "0x6002B26")]
	[Address(RVA = "0x12DD73C", Offset = "0x12DD73C", VA = "0x12DD73C")]
	private void RestoreJointStates()
	{
	}

	[Token(Token = "0x6002B27")]
	[Address(RVA = "0x12DDBEC", Offset = "0x12DDBEC", VA = "0x12DDBEC")]
	public bool IsAnythingMoving()
	{
		return default(bool);
	}

	[Token(Token = "0x6002B28")]
	[Address(RVA = "0x12DDD98", Offset = "0x12DDD98", VA = "0x12DDD98")]
	public bool IsChangingState()
	{
		return default(bool);
	}

	[Token(Token = "0x6002B29")]
	[Address(RVA = "0x12DDDA0", Offset = "0x12DDDA0", VA = "0x12DDDA0")]
	public PTRagdollToggler()
	{
	}
}
[Token(Token = "0x2000747")]
public class BoneState
{
	[Token(Token = "0x400242D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 localPos;

	[Token(Token = "0x400242E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Quaternion localRot;

	[Token(Token = "0x400242F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 localScale;

	[Token(Token = "0x6002B40")]
	[Address(RVA = "0x12E01EC", Offset = "0x12E01EC", VA = "0x12E01EC")]
	public void Store(GameObject src)
	{
	}

	[Token(Token = "0x6002B41")]
	[Address(RVA = "0x12E0270", Offset = "0x12E0270", VA = "0x12E0270")]
	public void Restore(GameObject dst)
	{
	}

	[Token(Token = "0x6002B42")]
	[Address(RVA = "0x12E035C", Offset = "0x12E035C", VA = "0x12E035C")]
	public BoneState()
	{
	}
}
[Token(Token = "0x2000748")]
public class BoneIntersectionTest
{
	[Token(Token = "0x4002430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string m_strNode;

	[Token(Token = "0x4002431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject m_Node;

	[Token(Token = "0x4002432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject m_RaySrc;

	[Token(Token = "0x4002433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_RayDest;

	[Token(Token = "0x4002434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fRayScale;

	[Token(Token = "0x4002435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool m_bNextIsChild;

	[Token(Token = "0x6002B43")]
	[Address(RVA = "0x12E0364", Offset = "0x12E0364", VA = "0x12E0364")]
	public BoneIntersectionTest(GameObject parent, string strNode, string strRaySrc, string strRayDest, float fRayScale, bool bNextIsChild)
	{
	}
}
[Token(Token = "0x2000749")]
public class RagdollHelper : MonoBehaviour
{
	[Token(Token = "0x200074A")]
	private enum RagdollState
	{
		[Token(Token = "0x4002443")]
		animated,
		[Token(Token = "0x4002444")]
		ragdolled,
		[Token(Token = "0x4002445")]
		blendToAnim
	}

	[Token(Token = "0x200074B")]
	public class BodyPart
	{
		[Token(Token = "0x4002446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4002447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform transformToManipulate;

		[Token(Token = "0x4002448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 storedPosition;

		[Token(Token = "0x4002449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion storedRotation;

		[Token(Token = "0x6002B4E")]
		[Address(RVA = "0x12E10E8", Offset = "0x12E10E8", VA = "0x12E10E8")]
		public BodyPart()
		{
		}
	}

	[Token(Token = "0x4002436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RagdollState state;

	[Token(Token = "0x4002437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ragdollToMecanimBlendTime;

	[Token(Token = "0x4002438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float mecanimToGetUpTransitionTime;

	[Token(Token = "0x4002439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float ragdollingEndTime;

	[Token(Token = "0x400243A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_normalRoot;

	[Token(Token = "0x400243B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_ragDollRoot;

	[Token(Token = "0x400243C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 ragdolledHipPosition;

	[Token(Token = "0x400243D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 ragdolledHeadPosition;

	[Token(Token = "0x400243E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 ragdolledFeetPosition;

	[Token(Token = "0x400243F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<BodyPart> bodyPartsRagDoll;

	[Token(Token = "0x4002440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<BodyPart> bodyPartsNormal;

	[Token(Token = "0x4002441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Animator anim;

	[Token(Token = "0x17000737")]
	public bool ragdolled
	{
		[Token(Token = "0x6002B44")]
		[Address(RVA = "0x12E048C", Offset = "0x12E048C", VA = "0x12E048C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6002B45")]
		[Address(RVA = "0x12E049C", Offset = "0x12E049C", VA = "0x12E049C")]
		set
		{
		}
	}

	[Token(Token = "0x6002B46")]
	[Address(RVA = "0x12E08F8", Offset = "0x12E08F8", VA = "0x12E08F8")]
	private void setKinematic(bool newValue)
	{
	}

	[Token(Token = "0x6002B47")]
	[Address(RVA = "0x12E0C04", Offset = "0x12E0C04", VA = "0x12E0C04")]
	public void Init(GameObject normalRoot, GameObject ragDollRoot)
	{
	}

	[Token(Token = "0x6002B48")]
	[Address(RVA = "0x12E1258", Offset = "0x12E1258", VA = "0x12E1258")]
	private void Update()
	{
	}

	[Token(Token = "0x6002B49")]
	[Address(RVA = "0x12E125C", Offset = "0x12E125C", VA = "0x12E125C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6002B4A")]
	[Address(RVA = "0x12E1AF8", Offset = "0x12E1AF8", VA = "0x12E1AF8")]
	public Transform GetCorrispondingBoneInNormal(Transform boneToMatch)
	{
		return null;
	}

	[Token(Token = "0x6002B4B")]
	[Address(RVA = "0x12E0A50", Offset = "0x12E0A50", VA = "0x12E0A50")]
	public Transform GetCorrispondingBoneInRagDoll(Transform boneToMatch)
	{
		return null;
	}

	[Token(Token = "0x6002B4C")]
	[Address(RVA = "0x12E10F0", Offset = "0x12E10F0", VA = "0x12E10F0")]
	private void CalculateMatchingTransforms()
	{
	}

	[Token(Token = "0x6002B4D")]
	[Address(RVA = "0x12E1C34", Offset = "0x12E1C34", VA = "0x12E1C34")]
	public RagdollHelper()
	{
	}
}
[Serializable]
[Token(Token = "0x200074C")]
[ExecuteInEditMode]
public class RagdollRecorder : MonoBehaviour
{
	[Token(Token = "0x200074D")]
	public enum ColliderType
	{
		[Token(Token = "0x400244E")]
		Capsule,
		[Token(Token = "0x400244F")]
		Box,
		[Token(Token = "0x4002450")]
		None
	}

	[Serializable]
	[Token(Token = "0x200074E")]
	public class RigidBodyData
	{
		[Token(Token = "0x4002451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 velocity;

		[Token(Token = "0x4002452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 angularVelocity;

		[Token(Token = "0x4002453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isKinematic;

		[Token(Token = "0x4002454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool useGravity;

		[Token(Token = "0x4002455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float mass;

		[Token(Token = "0x4002456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float drag;

		[Token(Token = "0x4002457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 force;

		[Token(Token = "0x6002B57")]
		[Address(RVA = "0x12E24BC", Offset = "0x12E24BC", VA = "0x12E24BC")]
		public RigidBodyData(Rigidbody body)
		{
		}
	}

	[Token(Token = "0x200074F")]
	public class SaveData
	{
		[Token(Token = "0x4002458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<RagdollLimb> limbs;

		[Token(Token = "0x6002B58")]
		[Address(RVA = "0x12E2598", Offset = "0x12E2598", VA = "0x12E2598")]
		public SaveData()
		{
		}
	}

	[Token(Token = "0x2000750")]
	public interface IColliderDefinition
	{
		[Token(Token = "0x6002B59")]
		void Draw();

		[Token(Token = "0x6002B5A")]
		void DrawGizmos();
	}

	[Serializable]
	[Token(Token = "0x2000751")]
	public class CapsuleDefinition : IColliderDefinition
	{
		[Token(Token = "0x4002459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 v0;

		[Token(Token = "0x400245A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 v1;

		[Token(Token = "0x400245B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float radius;

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0x12E25A0", Offset = "0x12E25A0", VA = "0x12E25A0")]
		public CapsuleDefinition(CapsuleCollider collider, float scaleAdjust = 1f)
		{
		}

		[Token(Token = "0x6002B5C")]
		[Address(RVA = "0x12E28AC", Offset = "0x12E28AC", VA = "0x12E28AC", Slot = "4")]
		public void Draw()
		{
		}

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0x12E28B0", Offset = "0x12E28B0", VA = "0x12E28B0", Slot = "5")]
		public void DrawGizmos()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000752")]
	public class BoxDefinition : IColliderDefinition
	{
		[Token(Token = "0x400245C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Quaternion rotation;

		[Token(Token = "0x400245D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 center;

		[Token(Token = "0x400245E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 size;

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0x12E28B4", Offset = "0x12E28B4", VA = "0x12E28B4")]
		public BoxDefinition(BoxCollider collider, float scaleAdjust = 1f)
		{
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0x12E2A4C", Offset = "0x12E2A4C", VA = "0x12E2A4C", Slot = "4")]
		public void Draw()
		{
		}

		[Token(Token = "0x6002B60")]
		[Address(RVA = "0x12E2A50", Offset = "0x12E2A50", VA = "0x12E2A50", Slot = "5")]
		public void DrawGizmos()
		{
		}
	}

	[Token(Token = "0x2000753")]
	public interface ITimeStampData
	{
		[Token(Token = "0x17000739")]
		float TimeStamp
		{
			[Token(Token = "0x6002B61")]
			get;
			[Token(Token = "0x6002B62")]
			set;
		}
	}

	[Serializable]
	[Token(Token = "0x2000754")]
	public class FrameData : ITimeStampData
	{
		[Token(Token = "0x400245F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float timeStamp;

		[Token(Token = "0x4002460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 position;

		[Token(Token = "0x4002461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion rotation;

		[Token(Token = "0x4002462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 localScale;

		[Token(Token = "0x4002463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RigidBodyData rigidBodyData;

		[Token(Token = "0x4002464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CapsuleDefinition capsule;

		[Token(Token = "0x4002465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public BoxDefinition box;

		[Token(Token = "0x1700073A")]
		public float TimeStamp
		{
			[Token(Token = "0x6002B63")]
			[Address(RVA = "0x12E2A54", Offset = "0x12E2A54", VA = "0x12E2A54", Slot = "4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002B64")]
			[Address(RVA = "0x12E2A5C", Offset = "0x12E2A5C", VA = "0x12E2A5C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700073B")]
		public IColliderDefinition definition
		{
			[Token(Token = "0x6002B65")]
			[Address(RVA = "0x12E2A64", Offset = "0x12E2A64", VA = "0x12E2A64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B66")]
			[Address(RVA = "0x12E2A80", Offset = "0x12E2A80", VA = "0x12E2A80")]
			set
			{
			}
		}

		[Token(Token = "0x6002B67")]
		[Address(RVA = "0x12E2BB0", Offset = "0x12E2BB0", VA = "0x12E2BB0")]
		public FrameData(Collider collider, float t)
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000755")]
	public class RagdollLimb
	{
		[NonSerialized]
		[Token(Token = "0x4002466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool foldout;

		[NonSerialized]
		[Token(Token = "0x4002467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform source;

		[Token(Token = "0x4002468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x4002469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ColliderType colliderType;

		[Token(Token = "0x400246A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<FrameData> frames;

		[Token(Token = "0x6002B68")]
		[Address(RVA = "0x12E20C0", Offset = "0x12E20C0", VA = "0x12E20C0")]
		public RagdollLimb(Collider collider)
		{
		}

		[Token(Token = "0x6002B69")]
		[Address(RVA = "0x12E21D8", Offset = "0x12E21D8", VA = "0x12E21D8")]
		public void AddFrame(Collider collider, float t)
		{
		}

		[Token(Token = "0x6002B6A")]
		[Address(RVA = "0x12E2470", Offset = "0x12E2470", VA = "0x12E2470")]
		public void AddForce(Vector3 force, float t)
		{
		}

		[Token(Token = "0x6002B6B")]
		[Address(RVA = "0x12E2E68", Offset = "0x12E2E68", VA = "0x12E2E68")]
		public FrameData GetFrameData(float time)
		{
			return null;
		}

		[Token(Token = "0x6002B6C")]
		public T GetFrame<T>(List<T> data, float time) where T : ITimeStampData
		{
			return (T)null;
		}

		[Token(Token = "0x6002B6D")]
		[Address(RVA = "0x12E2EC4", Offset = "0x12E2EC4", VA = "0x12E2EC4")]
		public FrameData GetFrameData(int time)
		{
			return null;
		}

		[Token(Token = "0x6002B6E")]
		public T GetFrame<T>(List<T> data, int index) where T : ITimeStampData
		{
			return (T)null;
		}
	}

	[Token(Token = "0x400244A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform m_testTransform;

	[Token(Token = "0x400244B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<RagdollLimb> m_limbs;

	[Token(Token = "0x400244C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_startTime;

	[Token(Token = "0x17000738")]
	public List<RagdollLimb> Limbs
	{
		[Token(Token = "0x6002B50")]
		[Address(RVA = "0x12E1DB0", Offset = "0x12E1DB0", VA = "0x12E1DB0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6002B51")]
		[Address(RVA = "0x12E1DB8", Offset = "0x12E1DB8", VA = "0x12E1DB8")]
		set
		{
		}
	}

	[Token(Token = "0x6002B4F")]
	[Address(RVA = "0x12E1D00", Offset = "0x12E1D00", VA = "0x12E1D00")]
	public static RagdollRecorder Create(string name)
	{
		return null;
	}

	[Token(Token = "0x6002B52")]
	[Address(RVA = "0x12E1DC0", Offset = "0x12E1DC0", VA = "0x12E1DC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6002B53")]
	[Address(RVA = "0x12E1DC4", Offset = "0x12E1DC4", VA = "0x12E1DC4")]
	public void Reset()
	{
	}

	[Token(Token = "0x6002B54")]
	[Address(RVA = "0x12E1DD0", Offset = "0x12E1DD0", VA = "0x12E1DD0")]
	public void AddFrame(Transform root, float timeStamp)
	{
	}

	[Token(Token = "0x6002B55")]
	[Address(RVA = "0x12E232C", Offset = "0x12E232C", VA = "0x12E232C")]
	public void AddForce(Transform source, Vector3 force, float t)
	{
	}

	[Token(Token = "0x6002B56")]
	[Address(RVA = "0x12E24B4", Offset = "0x12E24B4", VA = "0x12E24B4")]
	public RagdollRecorder()
	{
	}
}
[Token(Token = "0x2000758")]
public static class SceneUtil
{
	[Token(Token = "0x6002B73")]
	[Address(RVA = "0x12E3000", Offset = "0x12E3000", VA = "0x12E3000")]
	public static void CopyTransform(Transform dst, Transform src)
	{
	}

	[Token(Token = "0x6002B74")]
	[Address(RVA = "0x12DF670", Offset = "0x12DF670", VA = "0x12DF670")]
	public static GameObject FindChildGameObject(GameObject parent, string strName, bool bAssertIfNotFound = true)
	{
		return null;
	}

	[Token(Token = "0x6002B75")]
	[Address(RVA = "0x12E3088", Offset = "0x12E3088", VA = "0x12E3088")]
	public static GameObject FindChildGameObjectRecursive(GameObject parent, string strName)
	{
		return null;
	}

	[Token(Token = "0x6002B76")]
	[Address(RVA = "0x12E30AC", Offset = "0x12E30AC", VA = "0x12E30AC")]
	public static GameObject FindChildGameObjectRecursive(Transform parent, string strName)
	{
		return null;
	}

	[Token(Token = "0x6002B77")]
	[Address(RVA = "0x12E31BC", Offset = "0x12E31BC", VA = "0x12E31BC")]
	public static bool CheckIfIsChildRecursive(GameObject parent, GameObject objToTest)
	{
		return default(bool);
	}

	[Token(Token = "0x6002B78")]
	[Address(RVA = "0x12E32BC", Offset = "0x12E32BC", VA = "0x12E32BC")]
	public static Bounds GetRenderBoundsRecursive(GameObject obj)
	{
		return default(Bounds);
	}

	[Token(Token = "0x6002B79")]
	[Address(RVA = "0x12E337C", Offset = "0x12E337C", VA = "0x12E337C")]
	public static void GetRenderBoundsRecursive(GameObject obj, ref Vector3 vMin, ref Vector3 vMax)
	{
	}

	[Token(Token = "0x6002B7A")]
	[Address(RVA = "0x12E3578", Offset = "0x12E3578", VA = "0x12E3578")]
	public static GameObject FindGameObject(string strName, bool bAssertIfNotFound = true)
	{
		return null;
	}

	[Token(Token = "0x6002B7B")]
	[Address(RVA = "0x12E3580", Offset = "0x12E3580", VA = "0x12E3580")]
	public static void SetActive(string strParent, string strObj, bool bActive)
	{
	}

	[Token(Token = "0x6002B7C")]
	[Address(RVA = "0x12E3664", Offset = "0x12E3664", VA = "0x12E3664")]
	public static void RecursiveSetActive(GameObject obj, bool active)
	{
	}

	[Token(Token = "0x6002B7D")]
	[Address(RVA = "0x12E3958", Offset = "0x12E3958", VA = "0x12E3958")]
	public static void ParentPreservingLocalTransform(GameObject obj, Transform parent)
	{
	}

	[Token(Token = "0x6002B7E")]
	[Address(RVA = "0x12E3A88", Offset = "0x12E3A88", VA = "0x12E3A88")]
	public static void SetX(GameObject obj, float fX)
	{
	}

	[Token(Token = "0x6002B7F")]
	[Address(RVA = "0x12E3AF0", Offset = "0x12E3AF0", VA = "0x12E3AF0")]
	public static void SetY(GameObject obj, float fY)
	{
	}
}
namespace Mixamo
{
	[Token(Token = "0x2000759")]
	public class JSON
	{
		[Token(Token = "0x400246D")]
		public const int TOKEN_NONE = 0;

		[Token(Token = "0x400246E")]
		public const int TOKEN_CURLY_OPEN = 1;

		[Token(Token = "0x400246F")]
		public const int TOKEN_CURLY_CLOSE = 2;

		[Token(Token = "0x4002470")]
		public const int TOKEN_SQUARED_OPEN = 3;

		[Token(Token = "0x4002471")]
		public const int TOKEN_SQUARED_CLOSE = 4;

		[Token(Token = "0x4002472")]
		public const int TOKEN_COLON = 5;

		[Token(Token = "0x4002473")]
		public const int TOKEN_COMMA = 6;

		[Token(Token = "0x4002474")]
		public const int TOKEN_STRING = 7;

		[Token(Token = "0x4002475")]
		public const int TOKEN_NUMBER = 8;

		[Token(Token = "0x4002476")]
		public const int TOKEN_TRUE = 9;

		[Token(Token = "0x4002477")]
		public const int TOKEN_FALSE = 10;

		[Token(Token = "0x4002478")]
		public const int TOKEN_NULL = 11;

		[Token(Token = "0x4002479")]
		private const int BUILDER_CAPACITY = 2000;

		[Token(Token = "0x400247A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static JSON instance;

		[Token(Token = "0x400247B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected int lastErrorIndex;

		[Token(Token = "0x400247C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string lastDecode;

		[Token(Token = "0x6002B80")]
		[Address(RVA = "0x12E3B58", Offset = "0x12E3B58", VA = "0x12E3B58")]
		public static object JsonDecode(string json)
		{
			return null;
		}

		[Token(Token = "0x6002B81")]
		[Address(RVA = "0x12E3E4C", Offset = "0x12E3E4C", VA = "0x12E3E4C")]
		public static string JsonEncode(object json)
		{
			return null;
		}

		[Token(Token = "0x6002B82")]
		[Address(RVA = "0x12E4130", Offset = "0x12E4130", VA = "0x12E4130")]
		public static bool LastDecodeSuccessful()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B83")]
		[Address(RVA = "0x12E419C", Offset = "0x12E419C", VA = "0x12E419C")]
		public static int GetLastErrorIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6002B84")]
		[Address(RVA = "0x12E4200", Offset = "0x12E4200", VA = "0x12E4200")]
		public static string GetLastErrorSnippet()
		{
			return null;
		}

		[Token(Token = "0x6002B85")]
		[Address(RVA = "0x12E4348", Offset = "0x12E4348", VA = "0x12E4348")]
		protected Hashtable ParseObject(char[] json, ref int index)
		{
			return null;
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0x12E4A90", Offset = "0x12E4A90", VA = "0x12E4A90")]
		protected ArrayList ParseArray(char[] json, ref int index)
		{
			return null;
		}

		[Token(Token = "0x6002B87")]
		[Address(RVA = "0x12E3C74", Offset = "0x12E3C74", VA = "0x12E3C74")]
		protected object ParseValue(char[] json, ref int index, ref bool success)
		{
			return null;
		}

		[Token(Token = "0x6002B88")]
		[Address(RVA = "0x12E4718", Offset = "0x12E4718", VA = "0x12E4718")]
		protected string ParseString(char[] json, ref int index)
		{
			return null;
		}

		[Token(Token = "0x6002B89")]
		[Address(RVA = "0x12E4BB4", Offset = "0x12E4BB4", VA = "0x12E4BB4")]
		protected double ParseNumber(char[] json, ref int index)
		{
			return default(double);
		}

		[Token(Token = "0x6002B8A")]
		[Address(RVA = "0x12E4D58", Offset = "0x12E4D58", VA = "0x12E4D58")]
		protected int GetLastIndexOfNumber(char[] json, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6002B8B")]
		[Address(RVA = "0x12E4CB8", Offset = "0x12E4CB8", VA = "0x12E4CB8")]
		protected void EatWhitespace(char[] json, ref int index)
		{
		}

		[Token(Token = "0x6002B8C")]
		[Address(RVA = "0x12E4700", Offset = "0x12E4700", VA = "0x12E4700")]
		protected int LookAhead(char[] json, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6002B8D")]
		[Address(RVA = "0x12E44A0", Offset = "0x12E44A0", VA = "0x12E44A0")]
		protected int NextToken(char[] json, ref int index)
		{
			return default(int);
		}

		[Token(Token = "0x6002B8E")]
		[Address(RVA = "0x12E4E00", Offset = "0x12E4E00", VA = "0x12E4E00")]
		protected bool SerializeObjectOrArray(object objectOrArray, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B8F")]
		[Address(RVA = "0x12E4EF4", Offset = "0x12E4EF4", VA = "0x12E4EF4")]
		protected bool SerializeObject(Hashtable anObject, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B90")]
		[Address(RVA = "0x12E518C", Offset = "0x12E518C", VA = "0x12E518C")]
		protected bool SerializeArray(ArrayList anArray, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B91")]
		[Address(RVA = "0x12E3F0C", Offset = "0x12E3F0C", VA = "0x12E3F0C")]
		protected bool SerializeValue(object value, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B92")]
		[Address(RVA = "0x12E52D0", Offset = "0x12E52D0", VA = "0x12E52D0")]
		protected void SerializeString(string aString, StringBuilder builder)
		{
		}

		[Token(Token = "0x6002B93")]
		[Address(RVA = "0x12E560C", Offset = "0x12E560C", VA = "0x12E560C")]
		protected void SerializeNumber(double number, StringBuilder builder)
		{
		}

		[Token(Token = "0x6002B94")]
		[Address(RVA = "0x12E5560", Offset = "0x12E5560", VA = "0x12E5560")]
		protected bool IsNumeric(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B95")]
		[Address(RVA = "0x12E56C0", Offset = "0x12E56C0", VA = "0x12E56C0")]
		public JSON()
		{
		}
	}
	[Token(Token = "0x200075A")]
	public class Util
	{
		[Token(Token = "0x6002B97")]
		[Address(RVA = "0x12E578C", Offset = "0x12E578C", VA = "0x12E578C")]
		public static float CrossFadeUp(float weight, float fade_time)
		{
			return default(float);
		}

		[Token(Token = "0x6002B98")]
		[Address(RVA = "0x12E57CC", Offset = "0x12E57CC", VA = "0x12E57CC")]
		public static float CrossFadeDown(float weight, float fade_time)
		{
			return default(float);
		}

		[Token(Token = "0x6002B99")]
		[Address(RVA = "0x12E580C", Offset = "0x12E580C", VA = "0x12E580C")]
		public static void CrossFade(ref float weight_in, ref float weight_out, float fade_time)
		{
		}

		[Token(Token = "0x6002B9A")]
		[Address(RVA = "0x12E5878", Offset = "0x12E5878", VA = "0x12E5878")]
		public Util()
		{
		}
	}
}
namespace Facebook.WitAi.Lib
{
	[Token(Token = "0x200075B")]
	[RequireComponent(typeof(AudioSource))]
	public class VoiceServiceMic : MicBase, IAudioInputSource
	{
		[Token(Token = "0x200075C")]
		[CompilerGenerated]
		private sealed class <ReadRawAudio>d__66 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400248A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400248B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400248C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VoiceServiceMic <>4__this;

			[Token(Token = "0x400248D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <loops>5__2;

			[Token(Token = "0x400248E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <readAbsPos>5__3;

			[Token(Token = "0x400248F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <prevPos>5__4;

			[Token(Token = "0x4002490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float[] <temp>5__5;

			[Token(Token = "0x17000748")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002BCC")]
				[Address(RVA = "0x12E6E14", Offset = "0x12E6E14", VA = "0x12E6E14", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000749")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002BCE")]
				[Address(RVA = "0x12E6E5C", Offset = "0x12E6E5C", VA = "0x12E6E5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002BC9")]
			[Address(RVA = "0x12E6AC4", Offset = "0x12E6AC4", VA = "0x12E6AC4")]
			[DebuggerHidden]
			public <ReadRawAudio>d__66(int <>1__state)
			{
			}

			[Token(Token = "0x6002BCA")]
			[Address(RVA = "0x12E6B68", Offset = "0x12E6B68", VA = "0x12E6B68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002BCB")]
			[Address(RVA = "0x12E6B6C", Offset = "0x12E6B6C", VA = "0x12E6B6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002BCD")]
			[Address(RVA = "0x12E6E1C", Offset = "0x12E6E1C", VA = "0x12E6E1C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<string> _devices;

		[Token(Token = "0x4002484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int m_SampleCount;

		[Token(Token = "0x4002489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mic m_Instance;

		[Token(Token = "0x1700073C")]
		public new bool IsRecording
		{
			[Token(Token = "0x6002B9B")]
			[Address(RVA = "0x12E5880", Offset = "0x12E5880", VA = "0x12E5880", Slot = "14")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B9C")]
			[Address(RVA = "0x12E5888", Offset = "0x12E5888", VA = "0x12E5888")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700073D")]
		public new AudioEncoding AudioEncoding
		{
			[Token(Token = "0x6002B9D")]
			[Address(RVA = "0x12E5894", Offset = "0x12E5894", VA = "0x12E5894", Slot = "15")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700073E")]
		public float[] Sample
		{
			[Token(Token = "0x6002B9E")]
			[Address(RVA = "0x12E589C", Offset = "0x12E589C", VA = "0x12E589C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B9F")]
			[Address(RVA = "0x12E58A4", Offset = "0x12E58A4", VA = "0x12E58A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700073F")]
		public int SampleDurationMS
		{
			[Token(Token = "0x6002BA0")]
			[Address(RVA = "0x12E58AC", Offset = "0x12E58AC", VA = "0x12E58AC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002BA1")]
			[Address(RVA = "0x12E58B4", Offset = "0x12E58B4", VA = "0x12E58B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000740")]
		public new bool IsInputAvailable
		{
			[Token(Token = "0x6002BA2")]
			[Address(RVA = "0x12E58BC", Offset = "0x12E58BC", VA = "0x12E58BC", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000741")]
		public int SampleLength
		{
			[Token(Token = "0x6002BA4")]
			[Address(RVA = "0x12E5A94", Offset = "0x12E5A94", VA = "0x12E5A94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000742")]
		public AudioClip AudioClip
		{
			[Token(Token = "0x6002BA5")]
			[Address(RVA = "0x12E5AD0", Offset = "0x12E5AD0", VA = "0x12E5AD0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BA6")]
			[Address(RVA = "0x12E5AD8", Offset = "0x12E5AD8", VA = "0x12E5AD8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000743")]
		public List<string> Devices
		{
			[Token(Token = "0x6002BA7")]
			[Address(RVA = "0x12E5AE0", Offset = "0x12E5AE0", VA = "0x12E5AE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000744")]
		public int CurrentDeviceIndex
		{
			[Token(Token = "0x6002BA8")]
			[Address(RVA = "0x12E5C94", Offset = "0x12E5C94", VA = "0x12E5C94")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002BA9")]
			[Address(RVA = "0x12E5C9C", Offset = "0x12E5C9C", VA = "0x12E5C9C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000745")]
		public string CurrentDeviceName
		{
			[Token(Token = "0x6002BAA")]
			[Address(RVA = "0x12E5CA4", Offset = "0x12E5CA4", VA = "0x12E5CA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000746")]
		public override int MicPosition
		{
			[Token(Token = "0x6002BAE")]
			[Address(RVA = "0x12E5D78", Offset = "0x12E5D78", VA = "0x12E5D78", Slot = "21")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000747")]
		public static Mic Instance
		{
			[Token(Token = "0x6002BB7")]
			[Address(RVA = "0x12E6294", Offset = "0x12E6294", VA = "0x12E6294")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400001D")]
		public new event Action OnStartRecording
		{
			[Token(Token = "0x6002BAF")]
			[Address(RVA = "0x12E5D8C", Offset = "0x12E5D8C", VA = "0x12E5D8C", Slot = "4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002BB0")]
			[Address(RVA = "0x12E5E28", Offset = "0x12E5E28", VA = "0x12E5E28", Slot = "5")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public new event Action OnStartRecordingFailed
		{
			[Token(Token = "0x6002BB1")]
			[Address(RVA = "0x12E5EC4", Offset = "0x12E5EC4", VA = "0x12E5EC4", Slot = "6")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002BB2")]
			[Address(RVA = "0x12E5F60", Offset = "0x12E5F60", VA = "0x12E5F60", Slot = "7")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001F")]
		public new event Action<int, float[], float> OnSampleReady
		{
			[Token(Token = "0x6002BB3")]
			[Address(RVA = "0x12E5FFC", Offset = "0x12E5FFC", VA = "0x12E5FFC", Slot = "8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002BB4")]
			[Address(RVA = "0x12E60AC", Offset = "0x12E60AC", VA = "0x12E60AC", Slot = "9")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000020")]
		public new event Action OnStopRecording
		{
			[Token(Token = "0x6002BB5")]
			[Address(RVA = "0x12E615C", Offset = "0x12E615C", VA = "0x12E615C", Slot = "10")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002BB6")]
			[Address(RVA = "0x12E61F8", Offset = "0x12E61F8", VA = "0x12E61F8", Slot = "11")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002BA3")]
		[Address(RVA = "0x12E5A90", Offset = "0x12E5A90", VA = "0x12E5A90", Slot = "23")]
		public override void CheckForInput()
		{
		}

		[Token(Token = "0x6002BAB")]
		[Address(RVA = "0x12E5D54", Offset = "0x12E5D54", VA = "0x12E5D54", Slot = "18")]
		public override string GetMicName()
		{
			return null;
		}

		[Token(Token = "0x6002BAC")]
		[Address(RVA = "0x12E5D58", Offset = "0x12E5D58", VA = "0x12E5D58", Slot = "19")]
		public override int GetMicSampleRate()
		{
			return default(int);
		}

		[Token(Token = "0x6002BAD")]
		[Address(RVA = "0x12E5D70", Offset = "0x12E5D70", VA = "0x12E5D70", Slot = "20")]
		public override AudioClip GetMicClip()
		{
			return null;
		}

		[Token(Token = "0x6002BB8")]
		[Address(RVA = "0x12E646C", Offset = "0x12E646C", VA = "0x12E646C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002BB9")]
		[Address(RVA = "0x12E6470", Offset = "0x12E6470", VA = "0x12E6470")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002BBA")]
		[Address(RVA = "0x12E6570", Offset = "0x12E6570", VA = "0x12E6570")]
		private void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6002BBB")]
		[Address(RVA = "0x12E66E4", Offset = "0x12E66E4", VA = "0x12E66E4")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6002BBC")]
		[Address(RVA = "0x12E6778", Offset = "0x12E6778", VA = "0x12E6778")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002BBD")]
		[Address(RVA = "0x12E5944", Offset = "0x12E5944", VA = "0x12E5944")]
		public void SafeStartMicrophone()
		{
		}

		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0x12E5B04", Offset = "0x12E5B04", VA = "0x12E5B04")]
		public void RefreshMicDevices()
		{
		}

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0x12E6788", Offset = "0x12E6788", VA = "0x12E6788")]
		public void ChangeDevice(int index)
		{
		}

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0x12E67B8", Offset = "0x12E67B8", VA = "0x12E67B8")]
		private void StartMicrophone()
		{
		}

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0x12E6474", Offset = "0x12E6474", VA = "0x12E6474")]
		private void StopMicrophone()
		{
		}

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0x12E6874", Offset = "0x12E6874", VA = "0x12E6874", Slot = "24")]
		public override void StartRecording(int sampleLen = 10)
		{
		}

		[Token(Token = "0x6002BC3")]
		[Address(RVA = "0x12E6A1C", Offset = "0x12E6A1C", VA = "0x12E6A1C", Slot = "26")]
		public override void StopRecording()
		{
		}

		[Token(Token = "0x6002BC4")]
		[Address(RVA = "0x12E6670", Offset = "0x12E6670", VA = "0x12E6670")]
		[IteratorStateMachine(typeof(<ReadRawAudio>d__66))]
		private IEnumerator ReadRawAudio()
		{
			return null;
		}

		[Token(Token = "0x6002BC5")]
		[Address(RVA = "0x12E677C", Offset = "0x12E677C", VA = "0x12E677C")]
		private bool MicrophoneIsRecording(string device)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BC6")]
		[Address(RVA = "0x12E67B0", Offset = "0x12E67B0", VA = "0x12E67B0")]
		private string[] MicrophoneGetDevices()
		{
			return null;
		}

		[Token(Token = "0x6002BC7")]
		[Address(RVA = "0x12E6A10", Offset = "0x12E6A10", VA = "0x12E6A10")]
		private int MicrophoneGetPosition(string device)
		{
			return default(int);
		}

		[Token(Token = "0x6002BC8")]
		[Address(RVA = "0x12E6AEC", Offset = "0x12E6AEC", VA = "0x12E6AEC")]
		public VoiceServiceMic()
		{
		}
	}
}
namespace CabinViewModelsModule
{
	[Serializable]
	[Token(Token = "0x200075D")]
	public class AgentViewModel : IDataSource
	{
		[Token(Token = "0x4002491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string m_name;

		[Token(Token = "0x4002492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_health;

		[Token(Token = "0x4002493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_normalizedHealth;

		[Token(Token = "0x4002494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_speed;

		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 m_velocity;

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string m_agentState;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string m_emotion;

		[Token(Token = "0x4002498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string m_movementMode;

		[Token(Token = "0x4002499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string m_debugText;

		[Token(Token = "0x400249A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float m_deathForce;

		[Token(Token = "0x400249B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool m_selected;

		[Token(Token = "0x400249C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string m_instanceName;

		[Token(Token = "0x400249D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ScriptableObject m_spawnable;

		[Token(Token = "0x1700074A")]
		public string Name
		{
			[Token(Token = "0x6002BCF")]
			[Address(RVA = "0x12E6E64", Offset = "0x12E6E64", VA = "0x12E6E64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BD0")]
			[Address(RVA = "0x12E6E6C", Offset = "0x12E6E6C", VA = "0x12E6E6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700074B")]
		public float Health
		{
			[Token(Token = "0x6002BD1")]
			[Address(RVA = "0x12E6ED8", Offset = "0x12E6ED8", VA = "0x12E6ED8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BD2")]
			[Address(RVA = "0x12E6EE0", Offset = "0x12E6EE0", VA = "0x12E6EE0")]
			set
			{
			}
		}

		[Token(Token = "0x1700074C")]
		public float NormalizedHealth
		{
			[Token(Token = "0x6002BD3")]
			[Address(RVA = "0x12E6F78", Offset = "0x12E6F78", VA = "0x12E6F78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BD4")]
			[Address(RVA = "0x12E6F80", Offset = "0x12E6F80", VA = "0x12E6F80")]
			set
			{
			}
		}

		[Token(Token = "0x1700074D")]
		public float Speed
		{
			[Token(Token = "0x6002BD5")]
			[Address(RVA = "0x12E7018", Offset = "0x12E7018", VA = "0x12E7018")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BD6")]
			[Address(RVA = "0x12E7020", Offset = "0x12E7020", VA = "0x12E7020")]
			set
			{
			}
		}

		[Token(Token = "0x1700074E")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6002BD7")]
			[Address(RVA = "0x12E70B8", Offset = "0x12E70B8", VA = "0x12E70B8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002BD8")]
			[Address(RVA = "0x12E70C4", Offset = "0x12E70C4", VA = "0x12E70C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700074F")]
		public string AgentState
		{
			[Token(Token = "0x6002BD9")]
			[Address(RVA = "0x12E7174", Offset = "0x12E7174", VA = "0x12E7174")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BDA")]
			[Address(RVA = "0x12E717C", Offset = "0x12E717C", VA = "0x12E717C")]
			set
			{
			}
		}

		[Token(Token = "0x17000750")]
		public string Emotion
		{
			[Token(Token = "0x6002BDB")]
			[Address(RVA = "0x12E71E8", Offset = "0x12E71E8", VA = "0x12E71E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BDC")]
			[Address(RVA = "0x12E71F0", Offset = "0x12E71F0", VA = "0x12E71F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000751")]
		public string MovementMode
		{
			[Token(Token = "0x6002BDD")]
			[Address(RVA = "0x12E725C", Offset = "0x12E725C", VA = "0x12E725C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BDE")]
			[Address(RVA = "0x12E7264", Offset = "0x12E7264", VA = "0x12E7264")]
			set
			{
			}
		}

		[Token(Token = "0x17000752")]
		public string DebugText
		{
			[Token(Token = "0x6002BDF")]
			[Address(RVA = "0x12E72D0", Offset = "0x12E72D0", VA = "0x12E72D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BE0")]
			[Address(RVA = "0x12E72D8", Offset = "0x12E72D8", VA = "0x12E72D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000753")]
		public float DeathForce
		{
			[Token(Token = "0x6002BE1")]
			[Address(RVA = "0x12E7344", Offset = "0x12E7344", VA = "0x12E7344")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002BE2")]
			[Address(RVA = "0x12E734C", Offset = "0x12E734C", VA = "0x12E734C")]
			set
			{
			}
		}

		[Token(Token = "0x17000754")]
		public bool Selected
		{
			[Token(Token = "0x6002BE3")]
			[Address(RVA = "0x12E73E4", Offset = "0x12E73E4", VA = "0x12E73E4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002BE4")]
			[Address(RVA = "0x12E73EC", Offset = "0x12E73EC", VA = "0x12E73EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000755")]
		public string InstanceName
		{
			[Token(Token = "0x6002BE5")]
			[Address(RVA = "0x12E747C", Offset = "0x12E747C", VA = "0x12E747C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BE6")]
			[Address(RVA = "0x12E7484", Offset = "0x12E7484", VA = "0x12E7484")]
			set
			{
			}
		}

		[Token(Token = "0x17000756")]
		public ScriptableObject Spawnable
		{
			[Token(Token = "0x6002BE7")]
			[Address(RVA = "0x12E74F0", Offset = "0x12E74F0", VA = "0x12E74F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BE8")]
			[Address(RVA = "0x12E74F8", Offset = "0x12E74F8", VA = "0x12E74F8")]
			set
			{
			}
		}

		[Token(Token = "0x6002BE9")]
		[Address(RVA = "0x12E7564", Offset = "0x12E7564", VA = "0x12E7564")]
		public AgentViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200075E")]
	[CreateAssetMenu]
	public class DebugDataViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x400249E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int m_mirrorPerm;

		[Token(Token = "0x400249F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<AgentViewModel> m_agentPrefabs;

		[Token(Token = "0x40024A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AgentViewModel m_selectedAgent;

		[Token(Token = "0x40024A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string m_defaultAgent;

		[Token(Token = "0x40024A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool m_testMode;

		[Token(Token = "0x40024A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[SerializeField]
		private bool m_agentsInvulnerable;

		[Token(Token = "0x40024A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private VelocityTrackerViewModel m_velocityTracker;

		[Token(Token = "0x40024A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string m_debugText;

		[Token(Token = "0x40024A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_cinematicMode;

		[Token(Token = "0x40024A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<HealthStatusViewModel> m_healthStatuses;

		[Token(Token = "0x40024A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private HealthStatusViewModel m_playerHealth;

		[Token(Token = "0x17000757")]
		public int MirrorPerm
		{
			[Token(Token = "0x6002BEA")]
			[Address(RVA = "0x12E756C", Offset = "0x12E756C", VA = "0x12E756C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002BEB")]
			[Address(RVA = "0x12E7574", Offset = "0x12E7574", VA = "0x12E7574")]
			set
			{
			}
		}

		[Token(Token = "0x17000758")]
		public List<AgentViewModel> AgentPrefabs
		{
			[Token(Token = "0x6002BEC")]
			[Address(RVA = "0x12E7604", Offset = "0x12E7604", VA = "0x12E7604")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BED")]
			[Address(RVA = "0x12E760C", Offset = "0x12E760C", VA = "0x12E760C")]
			set
			{
			}
		}

		[Token(Token = "0x17000759")]
		public AgentViewModel SelectedAgent
		{
			[Token(Token = "0x6002BEE")]
			[Address(RVA = "0x12E7678", Offset = "0x12E7678", VA = "0x12E7678")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BEF")]
			[Address(RVA = "0x12E7680", Offset = "0x12E7680", VA = "0x12E7680")]
			set
			{
			}
		}

		[Token(Token = "0x1700075A")]
		public string DefaultAgent
		{
			[Token(Token = "0x6002BF0")]
			[Address(RVA = "0x12E76EC", Offset = "0x12E76EC", VA = "0x12E76EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BF1")]
			[Address(RVA = "0x12E76F4", Offset = "0x12E76F4", VA = "0x12E76F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700075B")]
		public bool TestMode
		{
			[Token(Token = "0x6002BF2")]
			[Address(RVA = "0x12E7760", Offset = "0x12E7760", VA = "0x12E7760")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002BF3")]
			[Address(RVA = "0x12E7768", Offset = "0x12E7768", VA = "0x12E7768")]
			set
			{
			}
		}

		[Token(Token = "0x1700075C")]
		public bool AgentsInvulnerable
		{
			[Token(Token = "0x6002BF4")]
			[Address(RVA = "0x12E77F8", Offset = "0x12E77F8", VA = "0x12E77F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002BF5")]
			[Address(RVA = "0x12E7800", Offset = "0x12E7800", VA = "0x12E7800")]
			set
			{
			}
		}

		[Token(Token = "0x1700075D")]
		public VelocityTrackerViewModel VelocityTracker
		{
			[Token(Token = "0x6002BF6")]
			[Address(RVA = "0x12E7890", Offset = "0x12E7890", VA = "0x12E7890")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BF7")]
			[Address(RVA = "0x12E7898", Offset = "0x12E7898", VA = "0x12E7898")]
			set
			{
			}
		}

		[Token(Token = "0x1700075E")]
		public string DebugText
		{
			[Token(Token = "0x6002BF8")]
			[Address(RVA = "0x12E7904", Offset = "0x12E7904", VA = "0x12E7904")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BF9")]
			[Address(RVA = "0x12E790C", Offset = "0x12E790C", VA = "0x12E790C")]
			set
			{
			}
		}

		[Token(Token = "0x1700075F")]
		public bool CinematicMode
		{
			[Token(Token = "0x6002BFA")]
			[Address(RVA = "0x12E7978", Offset = "0x12E7978", VA = "0x12E7978")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002BFB")]
			[Address(RVA = "0x12E7980", Offset = "0x12E7980", VA = "0x12E7980")]
			set
			{
			}
		}

		[Token(Token = "0x17000760")]
		public List<HealthStatusViewModel> HealthStatuses
		{
			[Token(Token = "0x6002BFC")]
			[Address(RVA = "0x12E7A10", Offset = "0x12E7A10", VA = "0x12E7A10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BFD")]
			[Address(RVA = "0x12E7A18", Offset = "0x12E7A18", VA = "0x12E7A18")]
			set
			{
			}
		}

		[Token(Token = "0x17000761")]
		public HealthStatusViewModel PlayerHealth
		{
			[Token(Token = "0x6002BFE")]
			[Address(RVA = "0x12E7A84", Offset = "0x12E7A84", VA = "0x12E7A84")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BFF")]
			[Address(RVA = "0x12E7A8C", Offset = "0x12E7A8C", VA = "0x12E7A8C")]
			set
			{
			}
		}

		[Token(Token = "0x6002C00")]
		[Address(RVA = "0x12E7AF8", Offset = "0x12E7AF8", VA = "0x12E7AF8")]
		public DebugDataViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200075F")]
	[CreateAssetMenu]
	public class DebugUIViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x40024A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 m_mouseDelta;

		[Token(Token = "0x40024AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_debugPauseEnabled;

		[Token(Token = "0x40024AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HandInputViewModel m_leftHand;

		[Token(Token = "0x40024AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HandInputViewModel m_rightHand;

		[Token(Token = "0x40024AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_noClip;

		[Token(Token = "0x40024AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string m_debugText;

		[Token(Token = "0x40024AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int m_debugStatic;

		[Token(Token = "0x40024B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool m_debugTerrain;

		[Token(Token = "0x40024B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_terrainQueue;

		[Token(Token = "0x40024B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_selected;

		[Token(Token = "0x40024B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_foveated;

		[Token(Token = "0x40024B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_render;

		[Token(Token = "0x40024B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_optimized;

		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_mSAA;

		[Token(Token = "0x40024B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string m_cameraClear;

		[Token(Token = "0x40024B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_renderScale;

		[Token(Token = "0x17000762")]
		public Vector2 MouseDelta
		{
			[Token(Token = "0x6002C01")]
			[Address(RVA = "0x12E7B00", Offset = "0x12E7B00", VA = "0x12E7B00")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6002C02")]
			[Address(RVA = "0x12E7B08", Offset = "0x12E7B08", VA = "0x12E7B08")]
			set
			{
			}
		}

		[Token(Token = "0x17000763")]
		public bool DebugPauseEnabled
		{
			[Token(Token = "0x6002C03")]
			[Address(RVA = "0x12E7B9C", Offset = "0x12E7B9C", VA = "0x12E7B9C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C04")]
			[Address(RVA = "0x12E7BA4", Offset = "0x12E7BA4", VA = "0x12E7BA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000764")]
		public HandInputViewModel LeftHand
		{
			[Token(Token = "0x6002C05")]
			[Address(RVA = "0x12E7C34", Offset = "0x12E7C34", VA = "0x12E7C34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C06")]
			[Address(RVA = "0x12E7C3C", Offset = "0x12E7C3C", VA = "0x12E7C3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000765")]
		public HandInputViewModel RightHand
		{
			[Token(Token = "0x6002C07")]
			[Address(RVA = "0x12E7CA8", Offset = "0x12E7CA8", VA = "0x12E7CA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C08")]
			[Address(RVA = "0x12E7CB0", Offset = "0x12E7CB0", VA = "0x12E7CB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000766")]
		public bool NoClip
		{
			[Token(Token = "0x6002C09")]
			[Address(RVA = "0x12E7D1C", Offset = "0x12E7D1C", VA = "0x12E7D1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C0A")]
			[Address(RVA = "0x12E7D24", Offset = "0x12E7D24", VA = "0x12E7D24")]
			set
			{
			}
		}

		[Token(Token = "0x17000767")]
		public string DebugText
		{
			[Token(Token = "0x6002C0B")]
			[Address(RVA = "0x12E7DB4", Offset = "0x12E7DB4", VA = "0x12E7DB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C0C")]
			[Address(RVA = "0x12E7DBC", Offset = "0x12E7DBC", VA = "0x12E7DBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000768")]
		public int DebugStatic
		{
			[Token(Token = "0x6002C0D")]
			[Address(RVA = "0x12E7E28", Offset = "0x12E7E28", VA = "0x12E7E28")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C0E")]
			[Address(RVA = "0x12E7E30", Offset = "0x12E7E30", VA = "0x12E7E30")]
			set
			{
			}
		}

		[Token(Token = "0x17000769")]
		public bool DebugTerrain
		{
			[Token(Token = "0x6002C0F")]
			[Address(RVA = "0x12E7EC0", Offset = "0x12E7EC0", VA = "0x12E7EC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C10")]
			[Address(RVA = "0x12E7EC8", Offset = "0x12E7EC8", VA = "0x12E7EC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700076A")]
		public int TerrainQueue
		{
			[Token(Token = "0x6002C11")]
			[Address(RVA = "0x12E7F58", Offset = "0x12E7F58", VA = "0x12E7F58")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C12")]
			[Address(RVA = "0x12E7F60", Offset = "0x12E7F60", VA = "0x12E7F60")]
			set
			{
			}
		}

		[Token(Token = "0x1700076B")]
		public int Selected
		{
			[Token(Token = "0x6002C13")]
			[Address(RVA = "0x12E7FF0", Offset = "0x12E7FF0", VA = "0x12E7FF0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C14")]
			[Address(RVA = "0x12E7FF8", Offset = "0x12E7FF8", VA = "0x12E7FF8")]
			set
			{
			}
		}

		[Token(Token = "0x1700076C")]
		public int Foveated
		{
			[Token(Token = "0x6002C15")]
			[Address(RVA = "0x12E8088", Offset = "0x12E8088", VA = "0x12E8088")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C16")]
			[Address(RVA = "0x12E8090", Offset = "0x12E8090", VA = "0x12E8090")]
			set
			{
			}
		}

		[Token(Token = "0x1700076D")]
		public int Render
		{
			[Token(Token = "0x6002C17")]
			[Address(RVA = "0x12E8120", Offset = "0x12E8120", VA = "0x12E8120")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C18")]
			[Address(RVA = "0x12E8128", Offset = "0x12E8128", VA = "0x12E8128")]
			set
			{
			}
		}

		[Token(Token = "0x1700076E")]
		public int Optimized
		{
			[Token(Token = "0x6002C19")]
			[Address(RVA = "0x12E81B8", Offset = "0x12E81B8", VA = "0x12E81B8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C1A")]
			[Address(RVA = "0x12E81C0", Offset = "0x12E81C0", VA = "0x12E81C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700076F")]
		public int MSAA
		{
			[Token(Token = "0x6002C1B")]
			[Address(RVA = "0x12E8250", Offset = "0x12E8250", VA = "0x12E8250")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C1C")]
			[Address(RVA = "0x12E8258", Offset = "0x12E8258", VA = "0x12E8258")]
			set
			{
			}
		}

		[Token(Token = "0x17000770")]
		public string CameraClear
		{
			[Token(Token = "0x6002C1D")]
			[Address(RVA = "0x12E82E8", Offset = "0x12E82E8", VA = "0x12E82E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C1E")]
			[Address(RVA = "0x12E82F0", Offset = "0x12E82F0", VA = "0x12E82F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000771")]
		public float RenderScale
		{
			[Token(Token = "0x6002C1F")]
			[Address(RVA = "0x12E835C", Offset = "0x12E835C", VA = "0x12E835C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C20")]
			[Address(RVA = "0x12E8364", Offset = "0x12E8364", VA = "0x12E8364")]
			set
			{
			}
		}

		[Token(Token = "0x6002C21")]
		[Address(RVA = "0x12E83FC", Offset = "0x12E83FC", VA = "0x12E83FC")]
		public DebugUIViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000760")]
	[CreateAssetMenu]
	public class GameViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x40024B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_playerHealth;

		[Token(Token = "0x40024BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int m_enemyCount;

		[Token(Token = "0x40024BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int m_researchPoints;

		[Token(Token = "0x40024BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_extractionTimer;

		[Token(Token = "0x40024BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_objectiveDirection;

		[Token(Token = "0x40024BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private bool m_showObjectiveCompass;

		[Token(Token = "0x40024BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_objectiveCompletion;

		[Token(Token = "0x40024C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int m_totalRescues;

		[Token(Token = "0x40024C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int m_rescueResearchPointNeed;

		[Token(Token = "0x40024C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private string m_rightPaneMode;

		[Token(Token = "0x40024C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_fallenPlayerDirection;

		[Token(Token = "0x40024C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_fallenDeathTimer;

		[Token(Token = "0x40024C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private int m_currentRescueResearchPointNeed;

		[Token(Token = "0x40024C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float m_normalizedExtractionTimer;

		[Token(Token = "0x40024C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float m_watchTimer;

		[Token(Token = "0x40024C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float m_normalizedWatchTimer;

		[Token(Token = "0x40024C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private int m_totalObjectiveTarget;

		[Token(Token = "0x40024CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private int m_currentObjectiveCount;

		[Token(Token = "0x40024CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool m_showObjectiveProgress;

		[Token(Token = "0x40024CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[SerializeField]
		private bool m_showPilotSpeaking;

		[Token(Token = "0x40024CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[SerializeField]
		private bool m_showGILESSpeaking;

		[Token(Token = "0x40024CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[SerializeField]
		private bool m_showShaderWarmUp;

		[Token(Token = "0x40024CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float m_warmUpProgress;

		[Token(Token = "0x40024D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_zombieCount;

		[Token(Token = "0x40024D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Color m_zombieThreatColor;

		[Token(Token = "0x17000772")]
		public float PlayerHealth
		{
			[Token(Token = "0x6002C22")]
			[Address(RVA = "0x12E8404", Offset = "0x12E8404", VA = "0x12E8404")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C23")]
			[Address(RVA = "0x12E840C", Offset = "0x12E840C", VA = "0x12E840C")]
			set
			{
			}
		}

		[Token(Token = "0x17000773")]
		public int EnemyCount
		{
			[Token(Token = "0x6002C24")]
			[Address(RVA = "0x12E84A4", Offset = "0x12E84A4", VA = "0x12E84A4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C25")]
			[Address(RVA = "0x12E84AC", Offset = "0x12E84AC", VA = "0x12E84AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000774")]
		public int ResearchPoints
		{
			[Token(Token = "0x6002C26")]
			[Address(RVA = "0x12E853C", Offset = "0x12E853C", VA = "0x12E853C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C27")]
			[Address(RVA = "0x12E8544", Offset = "0x12E8544", VA = "0x12E8544")]
			set
			{
			}
		}

		[Token(Token = "0x17000775")]
		public float ExtractionTimer
		{
			[Token(Token = "0x6002C28")]
			[Address(RVA = "0x12E85D4", Offset = "0x12E85D4", VA = "0x12E85D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C29")]
			[Address(RVA = "0x12E85DC", Offset = "0x12E85DC", VA = "0x12E85DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000776")]
		public float ObjectiveDirection
		{
			[Token(Token = "0x6002C2A")]
			[Address(RVA = "0x12E8674", Offset = "0x12E8674", VA = "0x12E8674")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C2B")]
			[Address(RVA = "0x12E867C", Offset = "0x12E867C", VA = "0x12E867C")]
			set
			{
			}
		}

		[Token(Token = "0x17000777")]
		public bool ShowObjectiveCompass
		{
			[Token(Token = "0x6002C2C")]
			[Address(RVA = "0x12E8714", Offset = "0x12E8714", VA = "0x12E8714")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C2D")]
			[Address(RVA = "0x12E871C", Offset = "0x12E871C", VA = "0x12E871C")]
			set
			{
			}
		}

		[Token(Token = "0x17000778")]
		public float ObjectiveCompletion
		{
			[Token(Token = "0x6002C2E")]
			[Address(RVA = "0x12E87AC", Offset = "0x12E87AC", VA = "0x12E87AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C2F")]
			[Address(RVA = "0x12E87B4", Offset = "0x12E87B4", VA = "0x12E87B4")]
			set
			{
			}
		}

		[Token(Token = "0x17000779")]
		public int TotalRescues
		{
			[Token(Token = "0x6002C30")]
			[Address(RVA = "0x12E884C", Offset = "0x12E884C", VA = "0x12E884C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C31")]
			[Address(RVA = "0x12E8854", Offset = "0x12E8854", VA = "0x12E8854")]
			set
			{
			}
		}

		[Token(Token = "0x1700077A")]
		public int RescueResearchPointNeed
		{
			[Token(Token = "0x6002C32")]
			[Address(RVA = "0x12E88E4", Offset = "0x12E88E4", VA = "0x12E88E4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C33")]
			[Address(RVA = "0x12E88EC", Offset = "0x12E88EC", VA = "0x12E88EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700077B")]
		public string RightPaneMode
		{
			[Token(Token = "0x6002C34")]
			[Address(RVA = "0x12E897C", Offset = "0x12E897C", VA = "0x12E897C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C35")]
			[Address(RVA = "0x12E8984", Offset = "0x12E8984", VA = "0x12E8984")]
			set
			{
			}
		}

		[Token(Token = "0x1700077C")]
		public float FallenPlayerDirection
		{
			[Token(Token = "0x6002C36")]
			[Address(RVA = "0x12E89F0", Offset = "0x12E89F0", VA = "0x12E89F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C37")]
			[Address(RVA = "0x12E89F8", Offset = "0x12E89F8", VA = "0x12E89F8")]
			set
			{
			}
		}

		[Token(Token = "0x1700077D")]
		public float FallenDeathTimer
		{
			[Token(Token = "0x6002C38")]
			[Address(RVA = "0x12E8A90", Offset = "0x12E8A90", VA = "0x12E8A90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C39")]
			[Address(RVA = "0x12E8A98", Offset = "0x12E8A98", VA = "0x12E8A98")]
			set
			{
			}
		}

		[Token(Token = "0x1700077E")]
		public int CurrentRescueResearchPointNeed
		{
			[Token(Token = "0x6002C3A")]
			[Address(RVA = "0x12E8B30", Offset = "0x12E8B30", VA = "0x12E8B30")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C3B")]
			[Address(RVA = "0x12E8B38", Offset = "0x12E8B38", VA = "0x12E8B38")]
			set
			{
			}
		}

		[Token(Token = "0x1700077F")]
		public float NormalizedExtractionTimer
		{
			[Token(Token = "0x6002C3C")]
			[Address(RVA = "0x12E8BC8", Offset = "0x12E8BC8", VA = "0x12E8BC8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C3D")]
			[Address(RVA = "0x12E8BD0", Offset = "0x12E8BD0", VA = "0x12E8BD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000780")]
		public float WatchTimer
		{
			[Token(Token = "0x6002C3E")]
			[Address(RVA = "0x12E8C68", Offset = "0x12E8C68", VA = "0x12E8C68")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C3F")]
			[Address(RVA = "0x12E8C70", Offset = "0x12E8C70", VA = "0x12E8C70")]
			set
			{
			}
		}

		[Token(Token = "0x17000781")]
		public float NormalizedWatchTimer
		{
			[Token(Token = "0x6002C40")]
			[Address(RVA = "0x12E8D08", Offset = "0x12E8D08", VA = "0x12E8D08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C41")]
			[Address(RVA = "0x12E8D10", Offset = "0x12E8D10", VA = "0x12E8D10")]
			set
			{
			}
		}

		[Token(Token = "0x17000782")]
		public int TotalObjectiveTarget
		{
			[Token(Token = "0x6002C42")]
			[Address(RVA = "0x12E8DA8", Offset = "0x12E8DA8", VA = "0x12E8DA8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C43")]
			[Address(RVA = "0x12E8DB0", Offset = "0x12E8DB0", VA = "0x12E8DB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000783")]
		public int CurrentObjectiveCount
		{
			[Token(Token = "0x6002C44")]
			[Address(RVA = "0x12E8E40", Offset = "0x12E8E40", VA = "0x12E8E40")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C45")]
			[Address(RVA = "0x12E8E48", Offset = "0x12E8E48", VA = "0x12E8E48")]
			set
			{
			}
		}

		[Token(Token = "0x17000784")]
		public bool ShowObjectiveProgress
		{
			[Token(Token = "0x6002C46")]
			[Address(RVA = "0x12E8ED8", Offset = "0x12E8ED8", VA = "0x12E8ED8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C47")]
			[Address(RVA = "0x12E8EE0", Offset = "0x12E8EE0", VA = "0x12E8EE0")]
			set
			{
			}
		}

		[Token(Token = "0x17000785")]
		public bool ShowPilotSpeaking
		{
			[Token(Token = "0x6002C48")]
			[Address(RVA = "0x12E8F70", Offset = "0x12E8F70", VA = "0x12E8F70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C49")]
			[Address(RVA = "0x12E8F78", Offset = "0x12E8F78", VA = "0x12E8F78")]
			set
			{
			}
		}

		[Token(Token = "0x17000786")]
		public bool ShowGILESSpeaking
		{
			[Token(Token = "0x6002C4A")]
			[Address(RVA = "0x12E9008", Offset = "0x12E9008", VA = "0x12E9008")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C4B")]
			[Address(RVA = "0x12E9010", Offset = "0x12E9010", VA = "0x12E9010")]
			set
			{
			}
		}

		[Token(Token = "0x17000787")]
		public bool ShowShaderWarmUp
		{
			[Token(Token = "0x6002C4C")]
			[Address(RVA = "0x12E90A0", Offset = "0x12E90A0", VA = "0x12E90A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C4D")]
			[Address(RVA = "0x12E90A8", Offset = "0x12E90A8", VA = "0x12E90A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000788")]
		public float WarmUpProgress
		{
			[Token(Token = "0x6002C4E")]
			[Address(RVA = "0x12E9138", Offset = "0x12E9138", VA = "0x12E9138")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C4F")]
			[Address(RVA = "0x12E9140", Offset = "0x12E9140", VA = "0x12E9140")]
			set
			{
			}
		}

		[Token(Token = "0x17000789")]
		public string ExtractionTimerSeconds
		{
			[Token(Token = "0x6002C51")]
			[Address(RVA = "0x12E9358", Offset = "0x12E9358", VA = "0x12E9358")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700078A")]
		public string ExtractionTimerMilliSeconds
		{
			[Token(Token = "0x6002C52")]
			[Address(RVA = "0x12E9438", Offset = "0x12E9438", VA = "0x12E9438")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700078B")]
		[SerializeField]
		public string WatchTimerSeconds
		{
			[Token(Token = "0x6002C53")]
			[Address(RVA = "0x12E955C", Offset = "0x12E955C", VA = "0x12E955C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700078C")]
		public int ZombieCount
		{
			[Token(Token = "0x6002C54")]
			[Address(RVA = "0x12E963C", Offset = "0x12E963C", VA = "0x12E963C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C55")]
			[Address(RVA = "0x12E9644", Offset = "0x12E9644", VA = "0x12E9644")]
			set
			{
			}
		}

		[Token(Token = "0x1700078D")]
		public Color ZombieThreatColor
		{
			[Token(Token = "0x6002C56")]
			[Address(RVA = "0x12E96D4", Offset = "0x12E96D4", VA = "0x12E96D4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6002C57")]
			[Address(RVA = "0x12E96E0", Offset = "0x12E96E0", VA = "0x12E96E0")]
			set
			{
			}
		}

		[Token(Token = "0x1700078E")]
		public float OneMinusNormalizedExtractionTimer
		{
			[Token(Token = "0x6002C58")]
			[Address(RVA = "0x12E9794", Offset = "0x12E9794", VA = "0x12E9794")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002C50")]
		[Address(RVA = "0x12E91D8", Offset = "0x12E91D8", VA = "0x12E91D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002C59")]
		[Address(RVA = "0x12E97A4", Offset = "0x12E97A4", VA = "0x12E97A4")]
		public GameViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000761")]
	public class HandInputViewModel : IDataSource
	{
		[Token(Token = "0x40024D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float m_gripValue;

		[Token(Token = "0x40024D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool m_interactionAvailable;

		[Token(Token = "0x40024D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 m_interactionLocation;

		[Token(Token = "0x1700078F")]
		public float GripValue
		{
			[Token(Token = "0x6002C5D")]
			[Address(RVA = "0x12E98F4", Offset = "0x12E98F4", VA = "0x12E98F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C5E")]
			[Address(RVA = "0x12E98FC", Offset = "0x12E98FC", VA = "0x12E98FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000790")]
		public bool InteractionAvailable
		{
			[Token(Token = "0x6002C5F")]
			[Address(RVA = "0x12E9994", Offset = "0x12E9994", VA = "0x12E9994")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002C60")]
			[Address(RVA = "0x12E999C", Offset = "0x12E999C", VA = "0x12E999C")]
			set
			{
			}
		}

		[Token(Token = "0x17000791")]
		public Vector3 InteractionLocation
		{
			[Token(Token = "0x6002C61")]
			[Address(RVA = "0x12E9A2C", Offset = "0x12E9A2C", VA = "0x12E9A2C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002C62")]
			[Address(RVA = "0x12E9A38", Offset = "0x12E9A38", VA = "0x12E9A38")]
			set
			{
			}
		}

		[Token(Token = "0x6002C63")]
		[Address(RVA = "0x12E9AE8", Offset = "0x12E9AE8", VA = "0x12E9AE8")]
		public HandInputViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000762")]
	[CreateAssetMenu]
	public class HealthStatusViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x40024D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_name;

		[Token(Token = "0x40024D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_startingHealth;

		[Token(Token = "0x40024D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_currentHealth;

		[Token(Token = "0x40024D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_normalizedHealth;

		[Token(Token = "0x17000792")]
		public string Name
		{
			[Token(Token = "0x6002C64")]
			[Address(RVA = "0x12E9AF0", Offset = "0x12E9AF0", VA = "0x12E9AF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C65")]
			[Address(RVA = "0x12E9AF8", Offset = "0x12E9AF8", VA = "0x12E9AF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000793")]
		public float StartingHealth
		{
			[Token(Token = "0x6002C66")]
			[Address(RVA = "0x12E9B64", Offset = "0x12E9B64", VA = "0x12E9B64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C67")]
			[Address(RVA = "0x12E9B6C", Offset = "0x12E9B6C", VA = "0x12E9B6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000794")]
		public float CurrentHealth
		{
			[Token(Token = "0x6002C68")]
			[Address(RVA = "0x12E9C04", Offset = "0x12E9C04", VA = "0x12E9C04")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C69")]
			[Address(RVA = "0x12E9C0C", Offset = "0x12E9C0C", VA = "0x12E9C0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000795")]
		public float NormalizedHealth
		{
			[Token(Token = "0x6002C6A")]
			[Address(RVA = "0x12E9CA4", Offset = "0x12E9CA4", VA = "0x12E9CA4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C6B")]
			[Address(RVA = "0x12E9CAC", Offset = "0x12E9CAC", VA = "0x12E9CAC")]
			set
			{
			}
		}

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0x12E9D44", Offset = "0x12E9D44", VA = "0x12E9D44")]
		public HealthStatusViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000763")]
	[CreateAssetMenu]
	public class MetaUIViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x40024D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Rank m_selectedUnlock;

		[Token(Token = "0x40024DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Rank m_latestUnlock;

		[Token(Token = "0x40024DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Rank m_nextUnlock;

		[Token(Token = "0x40024DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_profileUnlockProgress;

		[Token(Token = "0x40024DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private List<WeaponConfig> m_weaponConfig;

		[Token(Token = "0x40024DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private WeaponConfig m_selectedWeapon;

		[Token(Token = "0x40024DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private WeaponConfig m_latestWeapon;

		[Token(Token = "0x40024E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private WeaponConfig m_nextWeapon;

		[Token(Token = "0x40024E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private List<WeaponConfig> m_paginatedWeaponConfigs;

		[Token(Token = "0x40024E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string m_playerName;

		[Token(Token = "0x40024E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private int m_leaderboardGlobalPos;

		[Token(Token = "0x40024E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private int m_leaderboardLocalPos;

		[Token(Token = "0x40024E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private string m_latestUnlockType;

		[Token(Token = "0x40024E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private string m_nextUnlockType;

		[Token(Token = "0x40024E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private int m_totalPageNumber;

		[Token(Token = "0x40024E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private int m_currentPageNumber;

		[Token(Token = "0x40024E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private string m_paginationInfo;

		[Token(Token = "0x40024EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int m_currentXp;

		[Token(Token = "0x40024EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string m_xpProgressionText;

		[Token(Token = "0x40024EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int m_nextRankXp;

		[Token(Token = "0x40024ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float m_normalizedProgressToNextRank;

		[Token(Token = "0x40024EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private string m_rankTitle;

		[Token(Token = "0x40024EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private List<UsedWeapon> m_usedWeapons;

		[Token(Token = "0x40024F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private List<WeaponUnlock> m_weaponsUnlock;

		[Token(Token = "0x40024F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private RankConfig m_rankConfig;

		[Token(Token = "0x17000796")]
		public Rank SelectedUnlock
		{
			[Token(Token = "0x6002C6D")]
			[Address(RVA = "0x12E9D4C", Offset = "0x12E9D4C", VA = "0x12E9D4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C6E")]
			[Address(RVA = "0x12E9D54", Offset = "0x12E9D54", VA = "0x12E9D54")]
			set
			{
			}
		}

		[Token(Token = "0x17000797")]
		public Rank LatestUnlock
		{
			[Token(Token = "0x6002C6F")]
			[Address(RVA = "0x12E9DC0", Offset = "0x12E9DC0", VA = "0x12E9DC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C70")]
			[Address(RVA = "0x12E9DC8", Offset = "0x12E9DC8", VA = "0x12E9DC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000798")]
		public Rank NextUnlock
		{
			[Token(Token = "0x6002C71")]
			[Address(RVA = "0x12E9E34", Offset = "0x12E9E34", VA = "0x12E9E34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C72")]
			[Address(RVA = "0x12E9E3C", Offset = "0x12E9E3C", VA = "0x12E9E3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000799")]
		public float ProfileUnlockProgress
		{
			[Token(Token = "0x6002C73")]
			[Address(RVA = "0x12E9EA8", Offset = "0x12E9EA8", VA = "0x12E9EA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C74")]
			[Address(RVA = "0x12E9EB0", Offset = "0x12E9EB0", VA = "0x12E9EB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700079A")]
		public List<WeaponConfig> WeaponConfig
		{
			[Token(Token = "0x6002C75")]
			[Address(RVA = "0x12E9F48", Offset = "0x12E9F48", VA = "0x12E9F48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C76")]
			[Address(RVA = "0x12E9F50", Offset = "0x12E9F50", VA = "0x12E9F50")]
			set
			{
			}
		}

		[Token(Token = "0x1700079B")]
		public WeaponConfig SelectedWeapon
		{
			[Token(Token = "0x6002C77")]
			[Address(RVA = "0x12E9FBC", Offset = "0x12E9FBC", VA = "0x12E9FBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C78")]
			[Address(RVA = "0x12E9FC4", Offset = "0x12E9FC4", VA = "0x12E9FC4")]
			set
			{
			}
		}

		[Token(Token = "0x1700079C")]
		public WeaponConfig LatestWeapon
		{
			[Token(Token = "0x6002C79")]
			[Address(RVA = "0x12EA030", Offset = "0x12EA030", VA = "0x12EA030")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C7A")]
			[Address(RVA = "0x12EA038", Offset = "0x12EA038", VA = "0x12EA038")]
			set
			{
			}
		}

		[Token(Token = "0x1700079D")]
		public WeaponConfig NextWeapon
		{
			[Token(Token = "0x6002C7B")]
			[Address(RVA = "0x12EA0A4", Offset = "0x12EA0A4", VA = "0x12EA0A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C7C")]
			[Address(RVA = "0x12EA0AC", Offset = "0x12EA0AC", VA = "0x12EA0AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700079E")]
		public List<WeaponConfig> PaginatedWeaponConfigs
		{
			[Token(Token = "0x6002C7D")]
			[Address(RVA = "0x12EA118", Offset = "0x12EA118", VA = "0x12EA118")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C7E")]
			[Address(RVA = "0x12EA120", Offset = "0x12EA120", VA = "0x12EA120")]
			set
			{
			}
		}

		[Token(Token = "0x1700079F")]
		public string PlayerName
		{
			[Token(Token = "0x6002C7F")]
			[Address(RVA = "0x12EA18C", Offset = "0x12EA18C", VA = "0x12EA18C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C80")]
			[Address(RVA = "0x12EA194", Offset = "0x12EA194", VA = "0x12EA194")]
			set
			{
			}
		}

		[Token(Token = "0x170007A0")]
		public int LeaderboardGlobalPos
		{
			[Token(Token = "0x6002C81")]
			[Address(RVA = "0x12EA200", Offset = "0x12EA200", VA = "0x12EA200")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C82")]
			[Address(RVA = "0x12EA208", Offset = "0x12EA208", VA = "0x12EA208")]
			set
			{
			}
		}

		[Token(Token = "0x170007A1")]
		public int LeaderboardLocalPos
		{
			[Token(Token = "0x6002C83")]
			[Address(RVA = "0x12EA298", Offset = "0x12EA298", VA = "0x12EA298")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C84")]
			[Address(RVA = "0x12EA2A0", Offset = "0x12EA2A0", VA = "0x12EA2A0")]
			set
			{
			}
		}

		[Token(Token = "0x170007A2")]
		public string LatestUnlockType
		{
			[Token(Token = "0x6002C85")]
			[Address(RVA = "0x12EA330", Offset = "0x12EA330", VA = "0x12EA330")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C86")]
			[Address(RVA = "0x12EA338", Offset = "0x12EA338", VA = "0x12EA338")]
			set
			{
			}
		}

		[Token(Token = "0x170007A3")]
		public string NextUnlockType
		{
			[Token(Token = "0x6002C87")]
			[Address(RVA = "0x12EA3A4", Offset = "0x12EA3A4", VA = "0x12EA3A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C88")]
			[Address(RVA = "0x12EA3AC", Offset = "0x12EA3AC", VA = "0x12EA3AC")]
			set
			{
			}
		}

		[Token(Token = "0x170007A4")]
		public int TotalPageNumber
		{
			[Token(Token = "0x6002C89")]
			[Address(RVA = "0x12EA418", Offset = "0x12EA418", VA = "0x12EA418")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C8A")]
			[Address(RVA = "0x12EA420", Offset = "0x12EA420", VA = "0x12EA420")]
			set
			{
			}
		}

		[Token(Token = "0x170007A5")]
		public int CurrentPageNumber
		{
			[Token(Token = "0x6002C8B")]
			[Address(RVA = "0x12EA4B0", Offset = "0x12EA4B0", VA = "0x12EA4B0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C8C")]
			[Address(RVA = "0x12EA4B8", Offset = "0x12EA4B8", VA = "0x12EA4B8")]
			set
			{
			}
		}

		[Token(Token = "0x170007A6")]
		public string PaginationInfo
		{
			[Token(Token = "0x6002C8D")]
			[Address(RVA = "0x12EA548", Offset = "0x12EA548", VA = "0x12EA548")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C8E")]
			[Address(RVA = "0x12EA550", Offset = "0x12EA550", VA = "0x12EA550")]
			set
			{
			}
		}

		[Token(Token = "0x170007A7")]
		public int currentXp
		{
			[Token(Token = "0x6002C8F")]
			[Address(RVA = "0x12EA5BC", Offset = "0x12EA5BC", VA = "0x12EA5BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C90")]
			[Address(RVA = "0x12EA5C4", Offset = "0x12EA5C4", VA = "0x12EA5C4")]
			set
			{
			}
		}

		[Token(Token = "0x170007A8")]
		public string xpProgressionText
		{
			[Token(Token = "0x6002C91")]
			[Address(RVA = "0x12EA654", Offset = "0x12EA654", VA = "0x12EA654")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C92")]
			[Address(RVA = "0x12EA65C", Offset = "0x12EA65C", VA = "0x12EA65C")]
			set
			{
			}
		}

		[Token(Token = "0x170007A9")]
		public int nextRankXp
		{
			[Token(Token = "0x6002C93")]
			[Address(RVA = "0x12EA6C8", Offset = "0x12EA6C8", VA = "0x12EA6C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002C94")]
			[Address(RVA = "0x12EA6D0", Offset = "0x12EA6D0", VA = "0x12EA6D0")]
			set
			{
			}
		}

		[Token(Token = "0x170007AA")]
		public float normalizedProgressToNextRank
		{
			[Token(Token = "0x6002C95")]
			[Address(RVA = "0x12EA760", Offset = "0x12EA760", VA = "0x12EA760")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002C96")]
			[Address(RVA = "0x12EA768", Offset = "0x12EA768", VA = "0x12EA768")]
			set
			{
			}
		}

		[Token(Token = "0x170007AB")]
		public string rankTitle
		{
			[Token(Token = "0x6002C97")]
			[Address(RVA = "0x12EA800", Offset = "0x12EA800", VA = "0x12EA800")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C98")]
			[Address(RVA = "0x12EA808", Offset = "0x12EA808", VA = "0x12EA808")]
			set
			{
			}
		}

		[Token(Token = "0x170007AC")]
		public List<UsedWeapon> usedWeapons
		{
			[Token(Token = "0x6002C99")]
			[Address(RVA = "0x12EA874", Offset = "0x12EA874", VA = "0x12EA874")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C9A")]
			[Address(RVA = "0x12EA87C", Offset = "0x12EA87C", VA = "0x12EA87C")]
			set
			{
			}
		}

		[Token(Token = "0x170007AD")]
		public List<WeaponUnlock> weaponsUnlock
		{
			[Token(Token = "0x6002C9B")]
			[Address(RVA = "0x12EA8E8", Offset = "0x12EA8E8", VA = "0x12EA8E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002C9C")]
			[Address(RVA = "0x12EA8F0", Offset = "0x12EA8F0", VA = "0x12EA8F0")]
			set
			{
			}
		}

		[Token(Token = "0x170007AE")]
		public RankConfig RankConfig
		{
			[Token(Token = "0x6002C9D")]
			[Address(RVA = "0x12EA95C", Offset = "0x12EA95C", VA = "0x12EA95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170007AF")]
		public List<Rank> unlockableRanks
		{
			[Token(Token = "0x6002C9E")]
			[Address(RVA = "0x12EA964", Offset = "0x12EA964", VA = "0x12EA964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002C9F")]
		[Address(RVA = "0x12EA980", Offset = "0x12EA980", VA = "0x12EA980")]
		public int SetCurrentXp(int xp)
		{
			return default(int);
		}

		[Token(Token = "0x6002CA0")]
		[Address(RVA = "0x12EABDC", Offset = "0x12EABDC", VA = "0x12EABDC")]
		public MetaUIViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000764")]
	[CreateAssetMenu]
	public class MetaWeaponDisplayViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x40024F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Sprite m_icon;

		[Token(Token = "0x40024F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string m_weaponName;

		[Token(Token = "0x40024F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string m_damage;

		[Token(Token = "0x40024F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string m_recoil;

		[Token(Token = "0x40024F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string m_ammo;

		[Token(Token = "0x40024F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private string m_levelUp;

		[Token(Token = "0x40024F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private int m_currentXP;

		[Token(Token = "0x40024F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Gradient m_xP_Bar;

		[Token(Token = "0x40024FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float m_xP_Bar2;

		[Token(Token = "0x170007B0")]
		public Sprite Icon
		{
			[Token(Token = "0x6002CA1")]
			[Address(RVA = "0x12EABE4", Offset = "0x12EABE4", VA = "0x12EABE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CA2")]
			[Address(RVA = "0x12EABEC", Offset = "0x12EABEC", VA = "0x12EABEC")]
			set
			{
			}
		}

		[Token(Token = "0x170007B1")]
		public string WeaponName
		{
			[Token(Token = "0x6002CA3")]
			[Address(RVA = "0x12EAC58", Offset = "0x12EAC58", VA = "0x12EAC58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CA4")]
			[Address(RVA = "0x12EAC60", Offset = "0x12EAC60", VA = "0x12EAC60")]
			set
			{
			}
		}

		[Token(Token = "0x170007B2")]
		public string Damage
		{
			[Token(Token = "0x6002CA5")]
			[Address(RVA = "0x12EACCC", Offset = "0x12EACCC", VA = "0x12EACCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CA6")]
			[Address(RVA = "0x12EACD4", Offset = "0x12EACD4", VA = "0x12EACD4")]
			set
			{
			}
		}

		[Token(Token = "0x170007B3")]
		public string Recoil
		{
			[Token(Token = "0x6002CA7")]
			[Address(RVA = "0x12EAD40", Offset = "0x12EAD40", VA = "0x12EAD40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CA8")]
			[Address(RVA = "0x12EAD48", Offset = "0x12EAD48", VA = "0x12EAD48")]
			set
			{
			}
		}

		[Token(Token = "0x170007B4")]
		public string Ammo
		{
			[Token(Token = "0x6002CA9")]
			[Address(RVA = "0x12EADB4", Offset = "0x12EADB4", VA = "0x12EADB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CAA")]
			[Address(RVA = "0x12EADBC", Offset = "0x12EADBC", VA = "0x12EADBC")]
			set
			{
			}
		}

		[Token(Token = "0x170007B5")]
		public string LevelUp
		{
			[Token(Token = "0x6002CAB")]
			[Address(RVA = "0x12EAE28", Offset = "0x12EAE28", VA = "0x12EAE28")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CAC")]
			[Address(RVA = "0x12EAE30", Offset = "0x12EAE30", VA = "0x12EAE30")]
			set
			{
			}
		}

		[Token(Token = "0x170007B6")]
		public int CurrentXP
		{
			[Token(Token = "0x6002CAD")]
			[Address(RVA = "0x12EAE9C", Offset = "0x12EAE9C", VA = "0x12EAE9C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CAE")]
			[Address(RVA = "0x12EAEA4", Offset = "0x12EAEA4", VA = "0x12EAEA4")]
			set
			{
			}
		}

		[Token(Token = "0x170007B7")]
		public Gradient XP_Bar
		{
			[Token(Token = "0x6002CAF")]
			[Address(RVA = "0x12EAF34", Offset = "0x12EAF34", VA = "0x12EAF34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CB0")]
			[Address(RVA = "0x12EAF3C", Offset = "0x12EAF3C", VA = "0x12EAF3C")]
			set
			{
			}
		}

		[Token(Token = "0x170007B8")]
		public float XP_Bar2
		{
			[Token(Token = "0x6002CB1")]
			[Address(RVA = "0x12EAFA8", Offset = "0x12EAFA8", VA = "0x12EAFA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CB2")]
			[Address(RVA = "0x12EAFB0", Offset = "0x12EAFB0", VA = "0x12EAFB0")]
			set
			{
			}
		}

		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0x12EB048", Offset = "0x12EB048", VA = "0x12EB048")]
		public MetaWeaponDisplayViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000765")]
	[CreateAssetMenu]
	public class ProfilingViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_drawCalls;

		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int m_triangleCount;

		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_liveItems;

		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int m_totalItems;

		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_totalEntities;

		[Token(Token = "0x4002500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_totalActiveEntities;

		[Token(Token = "0x4002501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_disableEntityCulling;

		[Token(Token = "0x4002502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_ping;

		[Token(Token = "0x4002503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string m_connectionType;

		[Token(Token = "0x4002504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool m_boltDebugDll;

		[Token(Token = "0x170007B9")]
		public int DrawCalls
		{
			[Token(Token = "0x6002CB4")]
			[Address(RVA = "0x12EB050", Offset = "0x12EB050", VA = "0x12EB050")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CB5")]
			[Address(RVA = "0x12EB058", Offset = "0x12EB058", VA = "0x12EB058")]
			set
			{
			}
		}

		[Token(Token = "0x170007BA")]
		public int TriangleCount
		{
			[Token(Token = "0x6002CB6")]
			[Address(RVA = "0x12EB0E8", Offset = "0x12EB0E8", VA = "0x12EB0E8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CB7")]
			[Address(RVA = "0x12EB0F0", Offset = "0x12EB0F0", VA = "0x12EB0F0")]
			set
			{
			}
		}

		[Token(Token = "0x170007BB")]
		public int LiveItems
		{
			[Token(Token = "0x6002CB8")]
			[Address(RVA = "0x12EB180", Offset = "0x12EB180", VA = "0x12EB180")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CB9")]
			[Address(RVA = "0x12EB188", Offset = "0x12EB188", VA = "0x12EB188")]
			set
			{
			}
		}

		[Token(Token = "0x170007BC")]
		public int TotalItems
		{
			[Token(Token = "0x6002CBA")]
			[Address(RVA = "0x12EB218", Offset = "0x12EB218", VA = "0x12EB218")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CBB")]
			[Address(RVA = "0x12EB220", Offset = "0x12EB220", VA = "0x12EB220")]
			set
			{
			}
		}

		[Token(Token = "0x170007BD")]
		public int TotalEntities
		{
			[Token(Token = "0x6002CBC")]
			[Address(RVA = "0x12EB2B0", Offset = "0x12EB2B0", VA = "0x12EB2B0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CBD")]
			[Address(RVA = "0x12EB2B8", Offset = "0x12EB2B8", VA = "0x12EB2B8")]
			set
			{
			}
		}

		[Token(Token = "0x170007BE")]
		public int TotalActiveEntities
		{
			[Token(Token = "0x6002CBE")]
			[Address(RVA = "0x12EB348", Offset = "0x12EB348", VA = "0x12EB348")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CBF")]
			[Address(RVA = "0x12EB350", Offset = "0x12EB350", VA = "0x12EB350")]
			set
			{
			}
		}

		[Token(Token = "0x170007BF")]
		public bool DisableEntityCulling
		{
			[Token(Token = "0x6002CC0")]
			[Address(RVA = "0x12EB3E0", Offset = "0x12EB3E0", VA = "0x12EB3E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002CC1")]
			[Address(RVA = "0x12EB3E8", Offset = "0x12EB3E8", VA = "0x12EB3E8")]
			set
			{
			}
		}

		[Token(Token = "0x170007C0")]
		public float Ping
		{
			[Token(Token = "0x6002CC2")]
			[Address(RVA = "0x12EB478", Offset = "0x12EB478", VA = "0x12EB478")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CC3")]
			[Address(RVA = "0x12EB480", Offset = "0x12EB480", VA = "0x12EB480")]
			set
			{
			}
		}

		[Token(Token = "0x170007C1")]
		public string ConnectionType
		{
			[Token(Token = "0x6002CC4")]
			[Address(RVA = "0x12EB518", Offset = "0x12EB518", VA = "0x12EB518")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CC5")]
			[Address(RVA = "0x12EB520", Offset = "0x12EB520", VA = "0x12EB520")]
			set
			{
			}
		}

		[Token(Token = "0x170007C2")]
		public bool BoltDebugDll
		{
			[Token(Token = "0x6002CC6")]
			[Address(RVA = "0x12EB58C", Offset = "0x12EB58C", VA = "0x12EB58C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002CC7")]
			[Address(RVA = "0x12EB594", Offset = "0x12EB594", VA = "0x12EB594")]
			set
			{
			}
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0x12EB624", Offset = "0x12EB624", VA = "0x12EB624")]
		public ProfilingViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000766")]
	[CreateAssetMenu]
	public class ProgressionViewModel : ScriptableObject, IDataSource
	{
		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0x12EB62C", Offset = "0x12EB62C", VA = "0x12EB62C")]
		public ProgressionViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000767")]
	public class ResearchPointConsumerViewModel : IDataSource
	{
		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int m_numPoints;

		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float m_unlockProgress;

		[Token(Token = "0x4002507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_canUse;

		[Token(Token = "0x4002508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string m_state;

		[Token(Token = "0x4002509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool m_active;

		[Token(Token = "0x170007C3")]
		public int NumPoints
		{
			[Token(Token = "0x6002CCA")]
			[Address(RVA = "0x12EB634", Offset = "0x12EB634", VA = "0x12EB634")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CCB")]
			[Address(RVA = "0x12EB63C", Offset = "0x12EB63C", VA = "0x12EB63C")]
			set
			{
			}
		}

		[Token(Token = "0x170007C4")]
		public float UnlockProgress
		{
			[Token(Token = "0x6002CCC")]
			[Address(RVA = "0x12EB6CC", Offset = "0x12EB6CC", VA = "0x12EB6CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CCD")]
			[Address(RVA = "0x12EB6D4", Offset = "0x12EB6D4", VA = "0x12EB6D4")]
			set
			{
			}
		}

		[Token(Token = "0x170007C5")]
		public bool CanUse
		{
			[Token(Token = "0x6002CCE")]
			[Address(RVA = "0x12EB76C", Offset = "0x12EB76C", VA = "0x12EB76C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002CCF")]
			[Address(RVA = "0x12EB774", Offset = "0x12EB774", VA = "0x12EB774")]
			set
			{
			}
		}

		[Token(Token = "0x170007C6")]
		public string State
		{
			[Token(Token = "0x6002CD0")]
			[Address(RVA = "0x12EB804", Offset = "0x12EB804", VA = "0x12EB804")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CD1")]
			[Address(RVA = "0x12EB80C", Offset = "0x12EB80C", VA = "0x12EB80C")]
			set
			{
			}
		}

		[Token(Token = "0x170007C7")]
		public bool Active
		{
			[Token(Token = "0x6002CD2")]
			[Address(RVA = "0x12EB878", Offset = "0x12EB878", VA = "0x12EB878")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002CD3")]
			[Address(RVA = "0x12EB880", Offset = "0x12EB880", VA = "0x12EB880")]
			set
			{
			}
		}

		[Token(Token = "0x6002CD4")]
		[Address(RVA = "0x12EB910", Offset = "0x12EB910", VA = "0x12EB910")]
		public ResearchPointConsumerViewModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000768")]
	public class UsedWeapon : IDataSource
	{
		[Token(Token = "0x400250A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_name;

		[Token(Token = "0x400250B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Sprite m_image;

		[Token(Token = "0x400250C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string m_numKills;

		[Token(Token = "0x170007C8")]
		public string Name
		{
			[Token(Token = "0x6002CD5")]
			[Address(RVA = "0x12EB918", Offset = "0x12EB918", VA = "0x12EB918")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CD6")]
			[Address(RVA = "0x12EB920", Offset = "0x12EB920", VA = "0x12EB920")]
			set
			{
			}
		}

		[Token(Token = "0x170007C9")]
		public Sprite Image
		{
			[Token(Token = "0x6002CD7")]
			[Address(RVA = "0x12EB98C", Offset = "0x12EB98C", VA = "0x12EB98C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CD8")]
			[Address(RVA = "0x12EB994", Offset = "0x12EB994", VA = "0x12EB994")]
			set
			{
			}
		}

		[Token(Token = "0x170007CA")]
		public string NumKills
		{
			[Token(Token = "0x6002CD9")]
			[Address(RVA = "0x12EBA00", Offset = "0x12EBA00", VA = "0x12EBA00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CDA")]
			[Address(RVA = "0x12EBA08", Offset = "0x12EBA08", VA = "0x12EBA08")]
			set
			{
			}
		}

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0x12EBA74", Offset = "0x12EBA74", VA = "0x12EBA74")]
		public UsedWeapon()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000769")]
	public class VelocityTrackerViewModel : IDataSource
	{
		[Token(Token = "0x400250D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private float m_speed0;

		[Token(Token = "0x400250E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Vector3 m_velocity0;

		[Token(Token = "0x400250F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_speed1;

		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 m_velocity1;

		[Token(Token = "0x4002511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_distanceTravelled;

		[Token(Token = "0x4002512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private Vector3 m_velocity;

		[Token(Token = "0x4002513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color m_color;

		[Token(Token = "0x170007CB")]
		public float Speed0
		{
			[Token(Token = "0x6002CDC")]
			[Address(RVA = "0x12EBA7C", Offset = "0x12EBA7C", VA = "0x12EBA7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CDD")]
			[Address(RVA = "0x12EBA84", Offset = "0x12EBA84", VA = "0x12EBA84")]
			set
			{
			}
		}

		[Token(Token = "0x170007CC")]
		public Vector3 Velocity0
		{
			[Token(Token = "0x6002CDE")]
			[Address(RVA = "0x12EBB1C", Offset = "0x12EBB1C", VA = "0x12EBB1C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002CDF")]
			[Address(RVA = "0x12EBB28", Offset = "0x12EBB28", VA = "0x12EBB28")]
			set
			{
			}
		}

		[Token(Token = "0x170007CD")]
		public float Speed1
		{
			[Token(Token = "0x6002CE0")]
			[Address(RVA = "0x12EBBD8", Offset = "0x12EBBD8", VA = "0x12EBBD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CE1")]
			[Address(RVA = "0x12EBBE0", Offset = "0x12EBBE0", VA = "0x12EBBE0")]
			set
			{
			}
		}

		[Token(Token = "0x170007CE")]
		public Vector3 Velocity1
		{
			[Token(Token = "0x6002CE2")]
			[Address(RVA = "0x12EBC78", Offset = "0x12EBC78", VA = "0x12EBC78")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002CE3")]
			[Address(RVA = "0x12EBC84", Offset = "0x12EBC84", VA = "0x12EBC84")]
			set
			{
			}
		}

		[Token(Token = "0x170007CF")]
		public float DistanceTravelled
		{
			[Token(Token = "0x6002CE4")]
			[Address(RVA = "0x12EBD34", Offset = "0x12EBD34", VA = "0x12EBD34")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CE5")]
			[Address(RVA = "0x12EBD3C", Offset = "0x12EBD3C", VA = "0x12EBD3C")]
			set
			{
			}
		}

		[Token(Token = "0x170007D0")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6002CE6")]
			[Address(RVA = "0x12EBDD4", Offset = "0x12EBDD4", VA = "0x12EBDD4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002CE7")]
			[Address(RVA = "0x12EBDE0", Offset = "0x12EBDE0", VA = "0x12EBDE0")]
			set
			{
			}
		}

		[Token(Token = "0x170007D1")]
		public Color Color
		{
			[Token(Token = "0x6002CE8")]
			[Address(RVA = "0x12EBE90", Offset = "0x12EBE90", VA = "0x12EBE90")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6002CE9")]
			[Address(RVA = "0x12EBE9C", Offset = "0x12EBE9C", VA = "0x12EBE9C")]
			set
			{
			}
		}

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0x12EBF50", Offset = "0x12EBF50", VA = "0x12EBF50")]
		public VelocityTrackerViewModel()
		{
		}
	}
	[Token(Token = "0x200076A")]
	public class WeaponUnlock : IDataSource
	{
		[Token(Token = "0x4002514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string m_unlockName;

		[Token(Token = "0x4002515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string m_weaponName;

		[Token(Token = "0x4002516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Sprite m_image;

		[Token(Token = "0x4002517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_stars;

		[Token(Token = "0x4002518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int m_currentExperience;

		[Token(Token = "0x4002519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_initialExperience;

		[Token(Token = "0x400251A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_finalExperience;

		[Token(Token = "0x400251B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_normalizeProgress;

		[Token(Token = "0x400251C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WeaponConfig m_weaponConfig;

		[Token(Token = "0x400251D")]
		private const float c_starsAmount = 5f;

		[Token(Token = "0x170007D2")]
		public string UnlockName
		{
			[Token(Token = "0x6002CEB")]
			[Address(RVA = "0x12EBF58", Offset = "0x12EBF58", VA = "0x12EBF58")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CEC")]
			[Address(RVA = "0x12EBF60", Offset = "0x12EBF60", VA = "0x12EBF60")]
			set
			{
			}
		}

		[Token(Token = "0x170007D3")]
		public string WeaponName
		{
			[Token(Token = "0x6002CED")]
			[Address(RVA = "0x12EBFCC", Offset = "0x12EBFCC", VA = "0x12EBFCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CEE")]
			[Address(RVA = "0x12EBFD4", Offset = "0x12EBFD4", VA = "0x12EBFD4")]
			set
			{
			}
		}

		[Token(Token = "0x170007D4")]
		public Sprite Image
		{
			[Token(Token = "0x6002CEF")]
			[Address(RVA = "0x12EC040", Offset = "0x12EC040", VA = "0x12EC040")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CF0")]
			[Address(RVA = "0x12EC048", Offset = "0x12EC048", VA = "0x12EC048")]
			set
			{
			}
		}

		[Token(Token = "0x170007D5")]
		public float Stars
		{
			[Token(Token = "0x6002CF1")]
			[Address(RVA = "0x12EC0B4", Offset = "0x12EC0B4", VA = "0x12EC0B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CF2")]
			[Address(RVA = "0x12EC0BC", Offset = "0x12EC0BC", VA = "0x12EC0BC")]
			set
			{
			}
		}

		[Token(Token = "0x170007D6")]
		public int CurrentExperience
		{
			[Token(Token = "0x6002CF3")]
			[Address(RVA = "0x12EC154", Offset = "0x12EC154", VA = "0x12EC154")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002CF4")]
			[Address(RVA = "0x12EC15C", Offset = "0x12EC15C", VA = "0x12EC15C")]
			set
			{
			}
		}

		[Token(Token = "0x170007D7")]
		public float InitialExperience
		{
			[Token(Token = "0x6002CF5")]
			[Address(RVA = "0x12EC164", Offset = "0x12EC164", VA = "0x12EC164")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CF6")]
			[Address(RVA = "0x12EC16C", Offset = "0x12EC16C", VA = "0x12EC16C")]
			set
			{
			}
		}

		[Token(Token = "0x170007D8")]
		public float FinalExperience
		{
			[Token(Token = "0x6002CF7")]
			[Address(RVA = "0x12EC174", Offset = "0x12EC174", VA = "0x12EC174")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CF8")]
			[Address(RVA = "0x12EC17C", Offset = "0x12EC17C", VA = "0x12EC17C")]
			set
			{
			}
		}

		[Token(Token = "0x170007D9")]
		public float NormalizedProgress
		{
			[Token(Token = "0x6002CF9")]
			[Address(RVA = "0x12EC184", Offset = "0x12EC184", VA = "0x12EC184")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CFA")]
			[Address(RVA = "0x12EC18C", Offset = "0x12EC18C", VA = "0x12EC18C")]
			set
			{
			}
		}

		[Token(Token = "0x170007DA")]
		public float Duration
		{
			[Token(Token = "0x6002CFE")]
			[Address(RVA = "0x12EC450", Offset = "0x12EC450", VA = "0x12EC450")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002CFF")]
			[Address(RVA = "0x12EC458", Offset = "0x12EC458", VA = "0x12EC458")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002CFB")]
		[Address(RVA = "0x12EC224", Offset = "0x12EC224", VA = "0x12EC224")]
		public void Initialize(WeaponConfig weaponConfig, float barSpeed, float maxBarLevelUpDuration)
		{
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0x12EC2AC", Offset = "0x12EC2AC", VA = "0x12EC2AC")]
		public int SetXp(int xp)
		{
			return default(int);
		}

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0x12EC430", Offset = "0x12EC430", VA = "0x12EC430")]
		public void UpdateExperience()
		{
		}

		[Token(Token = "0x6002D00")]
		[Address(RVA = "0x12EC460", Offset = "0x12EC460", VA = "0x12EC460")]
		public WeaponUnlock()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200076B")]
	public class WeaponUpgradeViewModel : IDataSource
	{
		[Token(Token = "0x400251F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string m_name;

		[Token(Token = "0x4002520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Texture2D m_image;

		[Token(Token = "0x4002521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int m_level;

		[Token(Token = "0x170007DB")]
		public string Name
		{
			[Token(Token = "0x6002D01")]
			[Address(RVA = "0x12EC468", Offset = "0x12EC468", VA = "0x12EC468")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D02")]
			[Address(RVA = "0x12EC470", Offset = "0x12EC470", VA = "0x12EC470")]
			set
			{
			}
		}

		[Token(Token = "0x170007DC")]
		public Texture2D Image
		{
			[Token(Token = "0x6002D03")]
			[Address(RVA = "0x12EC4DC", Offset = "0x12EC4DC", VA = "0x12EC4DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D04")]
			[Address(RVA = "0x12EC4E4", Offset = "0x12EC4E4", VA = "0x12EC4E4")]
			set
			{
			}
		}

		[Token(Token = "0x170007DD")]
		public int Level
		{
			[Token(Token = "0x6002D05")]
			[Address(RVA = "0x12EC550", Offset = "0x12EC550", VA = "0x12EC550")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002D06")]
			[Address(RVA = "0x12EC558", Offset = "0x12EC558", VA = "0x12EC558")]
			set
			{
			}
		}

		[Token(Token = "0x6002D07")]
		[Address(RVA = "0x12EC5E8", Offset = "0x12EC5E8", VA = "0x12EC5E8")]
		public WeaponUpgradeViewModel()
		{
		}
	}
}
namespace Shooter.Example.Utilities
{
	[Token(Token = "0x200076C")]
	public class SmoothedValues : MonoBehaviour
	{
		[Token(Token = "0x200076D")]
		public abstract class SmoothedValue<T>
		{
			[Token(Token = "0x4002522")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T desired;

			[Token(Token = "0x4002523")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T velocity;

			[Token(Token = "0x4002524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T current;

			[Token(Token = "0x6002D09")]
			public abstract T SmoothDamp(T current, T desired, ref T velocity, float smoothTime);

			[Token(Token = "0x6002D0A")]
			public T Update(T _desired, float smoothTime)
			{
				return (T)null;
			}

			[Token(Token = "0x6002D0B")]
			public T Update(float smoothTime)
			{
				return (T)null;
			}

			[Token(Token = "0x6002D0C")]
			protected SmoothedValue()
			{
			}
		}

		[Token(Token = "0x200076E")]
		public class SmoothedFloat : SmoothedValue<float>
		{
			[Token(Token = "0x6002D0D")]
			[Address(RVA = "0x12EC5F8", Offset = "0x12EC5F8", VA = "0x12EC5F8", Slot = "4")]
			public override float SmoothDamp(float current, float desired, ref float velocity, float smoothTime)
			{
				return default(float);
			}

			[Token(Token = "0x6002D0E")]
			[Address(RVA = "0x12EC64C", Offset = "0x12EC64C", VA = "0x12EC64C")]
			public SmoothedFloat()
			{
			}
		}

		[Token(Token = "0x200076F")]
		public class SmoothedVector2 : SmoothedValue<Vector2>
		{
			[Token(Token = "0x6002D0F")]
			[Address(RVA = "0x12EC694", Offset = "0x12EC694", VA = "0x12EC694", Slot = "4")]
			public override Vector2 SmoothDamp(Vector2 current, Vector2 desired, ref Vector2 velocity, float smoothTime)
			{
				return default(Vector2);
			}

			[Token(Token = "0x6002D10")]
			[Address(RVA = "0x12EC700", Offset = "0x12EC700", VA = "0x12EC700")]
			public SmoothedVector2()
			{
			}
		}

		[Token(Token = "0x6002D08")]
		[Address(RVA = "0x12EC5F0", Offset = "0x12EC5F0", VA = "0x12EC5F0")]
		public SmoothedValues()
		{
		}
	}
}
namespace Util.Events
{
	[Token(Token = "0x2000770")]
	public static class EventHelper
	{
		[Token(Token = "0x6002D11")]
		[Address(RVA = "0x12EC748", Offset = "0x12EC748", VA = "0x12EC748")]
		public static void SafeInvoke(this UnityEvent unityEvent)
		{
		}

		[Token(Token = "0x6002D12")]
		public static void SafeInvoke<T>(this UnityEvent<T> unityEvent, T param)
		{
		}

		[Token(Token = "0x6002D13")]
		public static void SafeInvoke<T1, T2>(this UnityEvent<T1, T2> unityEvent, T1 param1, T2 param2)
		{
		}

		[Token(Token = "0x6002D14")]
		public static void SafeInvoke<T1, T2, T3>(this UnityEvent<T1, T2, T3> unityEvent, T1 param1, T2 param2, T3 param3)
		{
		}

		[Token(Token = "0x6002D15")]
		[Address(RVA = "0x12EC758", Offset = "0x12EC758", VA = "0x12EC758")]
		public static void SafeInvoke(this Action action)
		{
		}

		[Token(Token = "0x6002D16")]
		public static void SafeInvoke<T>(this Action<T> action, T obj)
		{
		}

		[Token(Token = "0x6002D17")]
		public static void SafeInvoke<T, U>(this Action<T, U> action, T obj1, U obj2)
		{
		}

		[Token(Token = "0x6002D18")]
		public static void SafeInvoke<T, U, V>(this Action<T, U, V> action, T obj1, U obj2, V obj3)
		{
		}
	}
}
namespace SA.DeviceTests
{
	[Token(Token = "0x2000771")]
	public class TestSnapshot
	{
		[Token(Token = "0x170007DE")]
		public string uid
		{
			[Token(Token = "0x6002D19")]
			[Address(RVA = "0x12EC774", Offset = "0x12EC774", VA = "0x12EC774")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D1A")]
			[Address(RVA = "0x12EC77C", Offset = "0x12EC77C", VA = "0x12EC77C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007DF")]
		public string project
		{
			[Token(Token = "0x6002D1B")]
			[Address(RVA = "0x12EC784", Offset = "0x12EC784", VA = "0x12EC784")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D1C")]
			[Address(RVA = "0x12EC78C", Offset = "0x12EC78C", VA = "0x12EC78C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007E0")]
		public string device
		{
			[Token(Token = "0x6002D1D")]
			[Address(RVA = "0x12EC794", Offset = "0x12EC794", VA = "0x12EC794")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D1E")]
			[Address(RVA = "0x12EC79C", Offset = "0x12EC79C", VA = "0x12EC79C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007E1")]
		public DateTime date_time
		{
			[Token(Token = "0x6002D1F")]
			[Address(RVA = "0x12EC7A4", Offset = "0x12EC7A4", VA = "0x12EC7A4")]
			[CompilerGenerated]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002D20")]
			[Address(RVA = "0x12EC7AC", Offset = "0x12EC7AC", VA = "0x12EC7AC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007E2")]
		public string json_data
		{
			[Token(Token = "0x6002D21")]
			[Address(RVA = "0x12EC7B4", Offset = "0x12EC7B4", VA = "0x12EC7B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D22")]
			[Address(RVA = "0x12EC7BC", Offset = "0x12EC7BC", VA = "0x12EC7BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007E3")]
		public string build_metadata
		{
			[Token(Token = "0x6002D23")]
			[Address(RVA = "0x12EC7C4", Offset = "0x12EC7C4", VA = "0x12EC7C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D24")]
			[Address(RVA = "0x12EC7CC", Offset = "0x12EC7CC", VA = "0x12EC7CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002D25")]
		[Address(RVA = "0x12EC7D4", Offset = "0x12EC7D4", VA = "0x12EC7D4")]
		public TestSnapshot()
		{
		}
	}
}
namespace Spawner
{
	[Token(Token = "0x2000772")]
	public class SelectSpawnPointsByPlayerDistance : CachedMonoBehaviour
	{
		[Token(Token = "0x2000773")]
		[BurstCompile]
		public struct DistanceJob : IJobParallelFor
		{
			[Token(Token = "0x400254A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ReadOnly]
			public float3 playersPosition;

			[Token(Token = "0x400254B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[ReadOnly]
			[NativeDisableParallelForRestriction]
			public NativeArray<SpawnLocationDistance> spawnsPosition;

			[Token(Token = "0x400254C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NativeArray<float> distances;

			[Token(Token = "0x6002D35")]
			[Address(RVA = "0x12EE904", Offset = "0x12EE904", VA = "0x12EE904", Slot = "4")]
			public void Execute(int index)
			{
			}
		}

		[Token(Token = "0x2000774")]
		[BurstCompile]
		public struct MaxDistanceJob : IJob
		{
			[Token(Token = "0x400254D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ReadOnly]
			public NativeArray<float> distances;

			[Token(Token = "0x400254E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[ReadOnly]
			public float spawnsPositionLenght;

			[Token(Token = "0x400254F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public NativeArray<float> maxDistance;

			[Token(Token = "0x6002D36")]
			[Address(RVA = "0x12EE9B0", Offset = "0x12EE9B0", VA = "0x12EE9B0", Slot = "4")]
			public void Execute()
			{
			}
		}

		[Token(Token = "0x2000775")]
		[BurstCompile]
		public struct GetWeightJob : IJobParallelFor
		{
			[Token(Token = "0x4002550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ReadOnly]
			public float minimumRadius;

			[Token(Token = "0x4002551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[ReadOnly]
			public float maximumRadius;

			[Token(Token = "0x4002552")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[NativeDisableParallelForRestriction]
			[ReadOnly]
			public NativeArray<float> maxDistance;

			[Token(Token = "0x4002553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[NativeDisableParallelForRestriction]
			public NativeArray<SpawnLocationDistance> spawnsPosition;

			[Token(Token = "0x4002554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[ReadOnly]
			public NativeArray<float> distances;

			[Token(Token = "0x6002D37")]
			[Address(RVA = "0x12EEA00", Offset = "0x12EEA00", VA = "0x12EEA00", Slot = "4")]
			public void Execute(int index)
			{
			}
		}

		[Token(Token = "0x2000776")]
		[BurstCompile]
		public struct SortWeightJob : IJob
		{
			[Token(Token = "0x4002555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ReadOnly]
			public NativeArray<SpawnLocationDistance> spawnsPosition;

			[Token(Token = "0x4002556")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NativeArray<SpawnLocationDistance> result;

			[Token(Token = "0x6002D38")]
			[Address(RVA = "0x12EEAF4", Offset = "0x12EEAF4", VA = "0x12EEAF4", Slot = "4")]
			public void Execute()
			{
			}
		}

		[Token(Token = "0x400252B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private string[] m_spawnGroupsInsideCabin;

		[Token(Token = "0x400252C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private string[] m_spawnGroupsOutsideCabin;

		[Token(Token = "0x400252D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float _insideMinRadius;

		[Token(Token = "0x400252E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float _insideMaxRadius;

		[Token(Token = "0x400252F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float _outsideMinRadius;

		[Token(Token = "0x4002530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float _outsideMaxRadius;

		[Token(Token = "0x4002531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float _multiplierLightsOff;

		[Token(Token = "0x4002532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private bool _enableMultiplierLighsOffInside;

		[Token(Token = "0x4002533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		[SerializeField]
		private bool _enableMultiplierLighsOffOutside;

		[Token(Token = "0x4002534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AnimationCurve _radiusByWaveCurve;

		[Token(Token = "0x4002535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[UnityEngine.Tooltip("Time needed to check again the distance between spawn locations and the players")]
		private float _timeBetweenChecks;

		[Token(Token = "0x4002536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("Time needed to be able to select a spawn location that has being used to spawn")]
		[SerializeField]
		private int _timeToReuseSameLocation;

		[Token(Token = "0x4002537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _testPlayer;

		[Token(Token = "0x4002538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private NativeArray<float>[] _distances;

		[Token(Token = "0x4002539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private NativeArray<SpawnLocationDistance>[][] _bestSpawnLocations;

		[Token(Token = "0x400253A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NativeArray<SpawnLocationDistance> _insideSpawnLocations;

		[Token(Token = "0x400253B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private NativeArray<SpawnLocationDistance> _outsideSpawnLocations;

		[Token(Token = "0x400253C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<RecentlyUsed> _recentlyUsed;

		[Token(Token = "0x400253D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private NativeArray<float>[] _maxDistances;

		[Token(Token = "0x400253E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private JobHandle[] _handlers;

		[Token(Token = "0x400253F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int _lastResultIndex;

		[Token(Token = "0x4002540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int _actualResultIndex;

		[Token(Token = "0x4002541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _lastTimeCheck;

		[Token(Token = "0x4002542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int _numPlayers;

		[Token(Token = "0x4002543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int _lastNumPlayers;

		[Token(Token = "0x4002544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private int _actualPlayerIndex;

		[Token(Token = "0x4002545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private PlayerZoneDetection _playerZoneDetection;

		[Token(Token = "0x4002546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float[] _minRadius;

		[Token(Token = "0x4002547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float[] _maxRadius;

		[Token(Token = "0x4002548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector3[] _playerPosition;

		[Token(Token = "0x4002549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private List<SpawnLocation> m_usableSpawnPoints;

		[Token(Token = "0x6002D26")]
		[Address(RVA = "0x12EC7DC", Offset = "0x12EC7DC", VA = "0x12EC7DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D27")]
		[Address(RVA = "0x12ED144", Offset = "0x12ED144", VA = "0x12ED144")]
		private void UpdateRadius(int wave)
		{
		}

		[Token(Token = "0x6002D28")]
		[Address(RVA = "0x12ED204", Offset = "0x12ED204", VA = "0x12ED204")]
		private void UpdateRadius(float multiplier, float initialMinRadius, float initialMaxRadius, out float minRadius, out float maxRadius, bool enableMultiplierWithLightsOff)
		{
		}

		[Token(Token = "0x6002D29")]
		[Address(RVA = "0x12ECA9C", Offset = "0x12ECA9C", VA = "0x12ECA9C")]
		private void GetSpawnsLocations()
		{
		}

		[Token(Token = "0x6002D2A")]
		[Address(RVA = "0x12ED2E4", Offset = "0x12ED2E4", VA = "0x12ED2E4")]
		public SpawnLocation GetBestSpawnLocation(SpawnWaveDefinition.AgentSpawn agent)
		{
			return null;
		}

		[Token(Token = "0x6002D2B")]
		[Address(RVA = "0x12ED844", Offset = "0x12ED844", VA = "0x12ED844")]
		private void AddRecentlyUsed(int id)
		{
		}

		[Token(Token = "0x6002D2C")]
		[Address(RVA = "0x12ED6F0", Offset = "0x12ED6F0", VA = "0x12ED6F0")]
		private bool SpawnLocationFree(SpawnLocationDistance location)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D2D")]
		[Address(RVA = "0x12ED8F4", Offset = "0x12ED8F4", VA = "0x12ED8F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002D2E")]
		[Address(RVA = "0x12ED93C", Offset = "0x12ED93C", VA = "0x12ED93C")]
		private void GetWeights()
		{
		}

		[Token(Token = "0x6002D2F")]
		[Address(RVA = "0x12EDE18", Offset = "0x12EDE18", VA = "0x12EDE18")]
		private void UpdateRecentlyUsed()
		{
		}

		[Token(Token = "0x6002D30")]
		[Address(RVA = "0x12EDF50", Offset = "0x12EDF50", VA = "0x12EDF50")]
		private JobHandle QueryDistanceJob(NativeArray<float> distances, NativeArray<SpawnLocationDistance> bestLocations, NativeArray<SpawnLocationDistance> selectedLocations, NativeArray<float> maxDistance, float3 playersPosition, float minRadius, float maxRadius, [Optional] JobHandle dependency)
		{
			return default(JobHandle);
		}

		[Token(Token = "0x6002D31")]
		[Address(RVA = "0x12EE118", Offset = "0x12EE118", VA = "0x12EE118")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002D32")]
		[Address(RVA = "0x12EE24C", Offset = "0x12EE24C", VA = "0x12EE24C")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002D33")]
		[Address(RVA = "0x12EE380", Offset = "0x12EE380", VA = "0x12EE380")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6002D34")]
		[Address(RVA = "0x12EE708", Offset = "0x12EE708", VA = "0x12EE708")]
		public SelectSpawnPointsByPlayerDistance()
		{
		}
	}
	[Token(Token = "0x2000777")]
	public struct SpawnLocationDistance : IComparable<SpawnLocationDistance>
	{
		[Token(Token = "0x4002557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int id;

		[Token(Token = "0x4002558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float weight;

		[Token(Token = "0x4002559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float3 spawnPosition;

		[Token(Token = "0x400255A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public quaternion spawnRotation;

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0x12EEBE0", Offset = "0x12EEBE0", VA = "0x12EEBE0", Slot = "4")]
		public int CompareTo(SpawnLocationDistance other)
		{
			return default(int);
		}

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0x12ED2CC", Offset = "0x12ED2CC", VA = "0x12ED2CC")]
		public SpawnLocationDistance(int id, float3 position, quaternion rotation)
		{
		}

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0x12EE95C", Offset = "0x12EE95C", VA = "0x12EE95C")]
		public SpawnLocationDistance(SpawnLocationDistance location)
		{
		}
	}
	[Token(Token = "0x2000778")]
	public struct RecentlyUsed
	{
		[Token(Token = "0x400255B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int id;

		[Token(Token = "0x400255C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int time;

		[Token(Token = "0x6002D3C")]
		[Address(RVA = "0x12ED8EC", Offset = "0x12ED8EC", VA = "0x12ED8EC")]
		public RecentlyUsed(int index, int time)
		{
		}

		[Token(Token = "0x6002D3D")]
		[Address(RVA = "0x12EE0F8", Offset = "0x12EE0F8", VA = "0x12EE0F8")]
		public RecentlyUsed IncreaseTime()
		{
			return default(RecentlyUsed);
		}

		[Token(Token = "0x6002D3E")]
		[Address(RVA = "0x12EE108", Offset = "0x12EE108", VA = "0x12EE108")]
		public bool ChechTime(int actualTime)
		{
			return default(bool);
		}
	}
}
namespace EnemyDetection
{
	[Token(Token = "0x2000779")]
	public class PlayerEnemyDetection : CachedMonoBehaviour
	{
		[Token(Token = "0x400255D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Set the radius from bigger to smaller")]
		[SerializeField]
		private List<float> m_detectionRadius;

		[Token(Token = "0x400255E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] m_enemiesCount;

		[Token(Token = "0x400255F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_detectionTime;

		[Token(Token = "0x4002560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float m_lastTime;

		[Token(Token = "0x6002D3F")]
		[Address(RVA = "0x12EEBF0", Offset = "0x12EEBF0", VA = "0x12EEBF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D40")]
		[Address(RVA = "0x12EEC64", Offset = "0x12EEC64", VA = "0x12EEC64")]
		private void Update()
		{
		}

		[Token(Token = "0x6002D41")]
		[Address(RVA = "0x12EECA8", Offset = "0x12EECA8", VA = "0x12EECA8")]
		private void CheckEnemies()
		{
		}

		[Token(Token = "0x6002D42")]
		[Address(RVA = "0x12EF278", Offset = "0x12EF278", VA = "0x12EF278")]
		public PlayerEnemyDetection()
		{
		}
	}
}
namespace VrWeaponManager
{
	[Token(Token = "0x200077B")]
	public class GunAnimationController : MonoBehaviour
	{
		[Token(Token = "0x4002563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GunAnimationAction[] m_gunAnimationActions;

		[Token(Token = "0x4002564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GunBlendedAnimationAction[] m_gunBlendedAnimationActions;

		[Token(Token = "0x6002D45")]
		[Address(RVA = "0x12EF360", Offset = "0x12EF360", VA = "0x12EF360")]
		public void TriggerAnimation(int hash, int spareHash = -1)
		{
		}

		[Token(Token = "0x6002D46")]
		[Address(RVA = "0x12EF3EC", Offset = "0x12EF3EC", VA = "0x12EF3EC")]
		public void SetAnimationBlend(int animHash, float blendValue)
		{
		}

		[Token(Token = "0x6002D47")]
		[Address(RVA = "0x12EF610", Offset = "0x12EF610", VA = "0x12EF610")]
		public GunAnimationController()
		{
		}
	}
	[Token(Token = "0x200077C")]
	public class GunBlendedAnimationAction : CachedMonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200077D")]
		private struct BlendedAnimation
		{
			[Token(Token = "0x4002569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x400256A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 startLocalPosition;

			[Token(Token = "0x400256B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 endLocalPosition;
		}

		[Token(Token = "0x4002565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<BlendedAnimation> m_blendedAnimations;

		[Token(Token = "0x4002566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<int, float> m_latestBlendValues;

		[Token(Token = "0x4002567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<int, BlendedAnimation> m_blendedAnimationsDictionary;

		[Token(Token = "0x4002568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_blendedAnimationsNull;

		[Token(Token = "0x6002D48")]
		[Address(RVA = "0x12EF618", Offset = "0x12EF618", VA = "0x12EF618")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D49")]
		[Address(RVA = "0x12EF61C", Offset = "0x12EF61C", VA = "0x12EF61C")]
		private void CacheNullChecks()
		{
		}

		[Token(Token = "0x6002D4A")]
		[Address(RVA = "0x12EF47C", Offset = "0x12EF47C", VA = "0x12EF47C")]
		public void SetBlend(int actionHash, float blendValue)
		{
		}

		[Token(Token = "0x6002D4B")]
		[Address(RVA = "0x12EF738", Offset = "0x12EF738", VA = "0x12EF738")]
		private void DoSetBlend(BlendedAnimation anim, float blendValue)
		{
		}

		[Token(Token = "0x6002D4C")]
		[Address(RVA = "0x12EF7A8", Offset = "0x12EF7A8", VA = "0x12EF7A8")]
		public GunBlendedAnimationAction()
		{
		}
	}
	[Token(Token = "0x200077E")]
	[DefaultExecutionOrder(100)]
	public class VrRecoil : MonoBehaviour, IWorldInteractionOffset
	{
		[Token(Token = "0x200077F")]
		[CompilerGenerated]
		private sealed class <DoRecoilDelayRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400257C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400257D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400257E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VrRecoil <>4__this;

			[Token(Token = "0x400257F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float recoilStrength;

			[Token(Token = "0x170007E4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D5B")]
				[Address(RVA = "0x12F07EC", Offset = "0x12F07EC", VA = "0x12F07EC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170007E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D5D")]
				[Address(RVA = "0x12F0834", Offset = "0x12F0834", VA = "0x12F0834", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D58")]
			[Address(RVA = "0x12EFAE0", Offset = "0x12EFAE0", VA = "0x12EFAE0")]
			[DebuggerHidden]
			public <DoRecoilDelayRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6002D59")]
			[Address(RVA = "0x12F0728", Offset = "0x12F0728", VA = "0x12F0728", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D5A")]
			[Address(RVA = "0x12F072C", Offset = "0x12F072C", VA = "0x12F072C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D5C")]
			[Address(RVA = "0x12F07F4", Offset = "0x12F07F4", VA = "0x12F07F4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400256C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[UnityEngine.Tooltip("Lose this percentage of accumulated recoil every unscaled second. This is a NORMALISED PERCENTAGE, so a value of 45 means we lose 4500% per second. 45 corresponds to a 50% loss per frame at 90FPS.")]
		public float m_standardRecoilFalloffPerSecond;

		[Token(Token = "0x400256D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Range(0f, 1f)]
		private float m_completionTolerance;

		[Token(Token = "0x400256E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_recoilDelay;

		[Token(Token = "0x400256F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Position recoil")]
		[SerializeField]
		private bool m_enablePositionChange;

		[Token(Token = "0x4002570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Min(0f)]
		private float m_standardRecoilSlideDistance;

		[Token(Token = "0x4002571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_cumulativeRecoilSlideDistance;

		[Token(Token = "0x4002572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Pitch recoil")]
		[FormerlySerializedAs("m_enableRotationChange")]
		[SerializeField]
		private bool m_enablePitchChange;

		[Token(Token = "0x4002573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Min(0f)]
		public float m_standardRecoilPitchAngle;

		[Token(Token = "0x4002574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_cumulativeRecoilPitchAngle;

		[Token(Token = "0x4002575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Yaw recoil")]
		[SerializeField]
		private bool m_enableYawChange;

		[Token(Token = "0x4002576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_standardRecoilYawAngle;

		[Token(Token = "0x4002577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Min(0.1f)]
		[SerializeField]
		private float m_yawPeriod;

		[Token(Token = "0x4002578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_cumulativeRecoilYawAngle;

		[Token(Token = "0x4002579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform m_controlledTransform;

		[Token(Token = "0x400257A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform m_anchorTransform;

		[Token(Token = "0x400257B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 m_relativePositionOffset;

		[Token(Token = "0x6002D4D")]
		[Address(RVA = "0x12EF880", Offset = "0x12EF880", VA = "0x12EF880")]
		public void SetControlledTransform(Transform controlledTransform, Transform handAnchorTransform, [Optional] Transform relativeTo)
		{
		}

		[Token(Token = "0x6002D4E")]
		[Address(RVA = "0x12EF9D0", Offset = "0x12EF9D0", VA = "0x12EF9D0")]
		public void Recoil(float recoilStrength)
		{
		}

		[Token(Token = "0x6002D4F")]
		[Address(RVA = "0x12EFA0C", Offset = "0x12EFA0C", VA = "0x12EFA0C")]
		[IteratorStateMachine(typeof(<DoRecoilDelayRoutine>d__18))]
		private IEnumerator DoRecoilDelayRoutine(float recoilStrength)
		{
			return null;
		}

		[Token(Token = "0x6002D50")]
		[Address(RVA = "0x12EFA90", Offset = "0x12EFA90", VA = "0x12EFA90")]
		private void DoRecoil(float recoilStrength)
		{
		}

		[Token(Token = "0x6002D51")]
		[Address(RVA = "0x12EFB08", Offset = "0x12EFB08", VA = "0x12EFB08")]
		private void Update()
		{
		}

		[Token(Token = "0x6002D52")]
		[Address(RVA = "0x12EFBD8", Offset = "0x12EFBD8", VA = "0x12EFBD8")]
		private void DecayTimer(ref float timer, float completionTolerance, float dt)
		{
		}

		[Token(Token = "0x6002D53")]
		[Address(RVA = "0x12EFC0C", Offset = "0x12EFC0C", VA = "0x12EFC0C", Slot = "4")]
		private void IWorldInteractionOffset.GetCurrentOffset(out Vector3 positionOffset, out Quaternion rotationOffset)
		{
		}

		[Token(Token = "0x6002D54")]
		[Address(RVA = "0x12EFEC4", Offset = "0x12EFEC4", VA = "0x12EFEC4")]
		private Quaternion CalculateRotationOffset()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002D55")]
		[Address(RVA = "0x12F00E8", Offset = "0x12F00E8", VA = "0x12F00E8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002D56")]
		[Address(RVA = "0x12F06CC", Offset = "0x12F06CC", VA = "0x12F06CC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002D57")]
		[Address(RVA = "0x12F06E4", Offset = "0x12F06E4", VA = "0x12F06E4")]
		public VrRecoil()
		{
		}
	}
}
namespace Pickups
{
	[Token(Token = "0x2000780")]
	public class VrSchematic : VrItem
	{
		[Token(Token = "0x4002580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private Identifier m_schematicItemIdentifier;

		[Token(Token = "0x170007E6")]
		public Identifier SchematicItemIdentifier
		{
			[Token(Token = "0x6002D5E")]
			[Address(RVA = "0x12F083C", Offset = "0x12F083C", VA = "0x12F083C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002D5F")]
		[Address(RVA = "0x12F0844", Offset = "0x12F0844", VA = "0x12F0844")]
		public VrSchematic()
		{
		}
	}
}
namespace HotSource.Maths
{
	[Token(Token = "0x2000781")]
	public class ProjectileUtils
	{
		[Token(Token = "0x2000782")]
		public class ProjectileData
		{
			[Token(Token = "0x4002581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 fireFrom;

			[Token(Token = "0x4002582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 relativeVelocity;

			[Token(Token = "0x4002583")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float maxDistance;

			[Token(Token = "0x4002584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float maxElevation;

			[Token(Token = "0x4002585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 target;

			[Token(Token = "0x4002586")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 velocity;

			[Token(Token = "0x4002587")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float projectileSpeed;

			[Token(Token = "0x4002588")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float time;

			[Token(Token = "0x6002D77")]
			[Address(RVA = "0x12F1DA8", Offset = "0x12F1DA8", VA = "0x12F1DA8")]
			public ProjectileData()
			{
			}

			[Token(Token = "0x6002D78")]
			[Address(RVA = "0x12F1DB0", Offset = "0x12F1DB0", VA = "0x12F1DB0")]
			public ProjectileData(Vector3 _fireFrom, Vector3 _relativeVelocity, Vector3 _target, float _maxDistance, float _maxElevation)
			{
			}

			[Token(Token = "0x6002D79")]
			[Address(RVA = "0x12F1E3C", Offset = "0x12F1E3C", VA = "0x12F1E3C")]
			public void Set(Vector3 _fireFrom, Vector3 _relativeVelocity, Vector3 _target, float _maxDistance, float _maxElevation)
			{
			}
		}

		[Token(Token = "0x6002D60")]
		[Address(RVA = "0x12F089C", Offset = "0x12F089C", VA = "0x12F089C")]
		public static Vector3 CalculateVelocityVector(Vector3 fireFrom, Vector3 target, float maxDistance, float maxElevation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D61")]
		[Address(RVA = "0x12F0960", Offset = "0x12F0960", VA = "0x12F0960")]
		public static Vector3 CalculateVelocityVector(Vector3 direction, float distance, float elevation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D62")]
		[Address(RVA = "0x12F08BC", Offset = "0x12F08BC", VA = "0x12F08BC")]
		public static Vector3 CalculateVelocityVector(Vector3 fireFrom, Vector3 target, float minDistance, float maxDistance, float maxElevation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D63")]
		[Address(RVA = "0x12F09F4", Offset = "0x12F09F4", VA = "0x12F09F4")]
		public static float CalculateReducedMaxDistance(Vector3 fireFrom, Vector3 target, float minDistance, float maxDistance, float maxElevation)
		{
			return default(float);
		}

		[Token(Token = "0x6002D64")]
		[Address(RVA = "0x12F0ED0", Offset = "0x12F0ED0", VA = "0x12F0ED0")]
		public static Vector3 CalculateVelocityVectorGivenTime(Vector3 fromPos, Vector3 toPos, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D65")]
		[Address(RVA = "0x12F0AF8", Offset = "0x12F0AF8", VA = "0x12F0AF8")]
		public static Vector3 CalculateVelocityVectorGivenSpeed(Vector3 fromPos, Vector3 toPos, float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D66")]
		[Address(RVA = "0x12F0F40", Offset = "0x12F0F40", VA = "0x12F0F40")]
		public static Vector3 CalculateVelocityVectorGivenLaunchAngle(Vector3 fromPos, Vector3 toPos, float angle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D67")]
		[Address(RVA = "0x12F10C8", Offset = "0x12F10C8", VA = "0x12F10C8")]
		public static float DistanceToVelocity(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x6002D68")]
		[Address(RVA = "0x12F10F0", Offset = "0x12F10F0", VA = "0x12F10F0")]
		public static float DistanceToVelocity(Vector3 from, Vector3 to, float launchAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6002D69")]
		[Address(RVA = "0x12F0AAC", Offset = "0x12F0AAC", VA = "0x12F0AAC")]
		public static float DistanceToVelocity(float distance, float launchAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6002D6A")]
		[Address(RVA = "0x12F11FC", Offset = "0x12F11FC", VA = "0x12F11FC")]
		public static float DistanceToLaunchAngle(float distance, float launchVelocity)
		{
			return default(float);
		}

		[Token(Token = "0x6002D6B")]
		[Address(RVA = "0x12F0D50", Offset = "0x12F0D50", VA = "0x12F0D50")]
		public static Vector3 LimitElevation(Vector3 velocity, float maxElevation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D6C")]
		[Address(RVA = "0x12F1244", Offset = "0x12F1244", VA = "0x12F1244")]
		public static Vector3 CalculatePosition(Vector3 start, Vector3 velocity, Vector3 acceleration, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D6D")]
		[Address(RVA = "0x12F12A0", Offset = "0x12F12A0", VA = "0x12F12A0")]
		public static float CalculateTime(float initialVelocity, float distance, float acceleration)
		{
			return default(float);
		}

		[Token(Token = "0x6002D6E")]
		[Address(RVA = "0x12F13BC", Offset = "0x12F13BC", VA = "0x12F13BC")]
		public static void SolveQuadratic(float a, float b, float c, out float x0, out float x1)
		{
		}

		[Token(Token = "0x6002D6F")]
		[Address(RVA = "0x12F13F8", Offset = "0x12F13F8", VA = "0x12F13F8")]
		public static float CalculateInterceptPoint(Vector3 source_position, float source_speed, Vector3 target_position, Vector3 target_velocity, float minT, float maxT, out Vector3 impact_point)
		{
			return default(float);
		}

		[Token(Token = "0x6002D70")]
		[Address(RVA = "0x12F179C", Offset = "0x12F179C", VA = "0x12F179C")]
		public static float CalculateInterceptPoint_old(Vector3 source_position, float source_speed, Vector3 target_position, Vector3 target_velocity, float minT, float maxT, out Vector3 impact_point)
		{
			return default(float);
		}

		[Token(Token = "0x6002D71")]
		[Address(RVA = "0x12F1700", Offset = "0x12F1700", VA = "0x12F1700")]
		public static Vector3 PredictPosition(Vector3 position, Vector3 velocity, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D72")]
		[Address(RVA = "0x12F19A0", Offset = "0x12F19A0", VA = "0x12F19A0")]
		private static void InternalCalculateMovingTarget(ProjectileData data)
		{
		}

		[Token(Token = "0x6002D73")]
		[Address(RVA = "0x12F1BFC", Offset = "0x12F1BFC", VA = "0x12F1BFC")]
		public static Vector3 CalculateMovingTarget(ProjectileData data)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D74")]
		[Address(RVA = "0x12F1CDC", Offset = "0x12F1CDC", VA = "0x12F1CDC")]
		public static Vector3 CalculateGroundPoint(ProjectileData data)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002D75")]
		[Address(RVA = "0x12F1D88", Offset = "0x12F1D88", VA = "0x12F1D88")]
		public static float CalculateVerticalVelocity(float heightDiff, float gravity, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6002D76")]
		[Address(RVA = "0x12F1DA0", Offset = "0x12F1DA0", VA = "0x12F1DA0")]
		public ProjectileUtils()
		{
		}
	}
}
namespace Multiplay
{
	[Token(Token = "0x2000783")]
	public class APIClient
	{
		[Token(Token = "0x2000784")]
		[CompilerGenerated]
		private sealed class <Deallocate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400258F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002590")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002591")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public APIClient <>4__this;

			[Token(Token = "0x4002592")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string uuid;

			[Token(Token = "0x4002593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170007E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D84")]
				[Address(RVA = "0x12F2790", Offset = "0x12F2790", VA = "0x12F2790", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170007E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D86")]
				[Address(RVA = "0x12F27D8", Offset = "0x12F27D8", VA = "0x12F27D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D81")]
			[Address(RVA = "0x12F20C4", Offset = "0x12F20C4", VA = "0x12F20C4")]
			[DebuggerHidden]
			public <Deallocate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002D82")]
			[Address(RVA = "0x12F23B8", Offset = "0x12F23B8", VA = "0x12F23B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D83")]
			[Address(RVA = "0x12F23BC", Offset = "0x12F23BC", VA = "0x12F23BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D85")]
			[Address(RVA = "0x12F2798", Offset = "0x12F2798", VA = "0x12F2798", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000785")]
		[CompilerGenerated]
		private sealed class <Reserve>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002596")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int machineId;

			[Token(Token = "0x4002597")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int serverId;

			[Token(Token = "0x4002598")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public APIClient <>4__this;

			[Token(Token = "0x4002599")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170007E9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D8A")]
				[Address(RVA = "0x12F297C", Offset = "0x12F297C", VA = "0x12F297C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170007EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D8C")]
				[Address(RVA = "0x12F29C4", Offset = "0x12F29C4", VA = "0x12F29C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D87")]
			[Address(RVA = "0x12F2174", Offset = "0x12F2174", VA = "0x12F2174")]
			[DebuggerHidden]
			public <Reserve>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6002D88")]
			[Address(RVA = "0x12F27E0", Offset = "0x12F27E0", VA = "0x12F27E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D89")]
			[Address(RVA = "0x12F27E4", Offset = "0x12F27E4", VA = "0x12F27E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D8B")]
			[Address(RVA = "0x12F2984", Offset = "0x12F2984", VA = "0x12F2984", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000786")]
		[CompilerGenerated]
		private sealed class <Unreserve>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400259A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400259B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400259C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int machineId;

			[Token(Token = "0x400259D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int serverId;

			[Token(Token = "0x400259E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public APIClient <>4__this;

			[Token(Token = "0x400259F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170007EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D90")]
				[Address(RVA = "0x12F2B68", Offset = "0x12F2B68", VA = "0x12F2B68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170007EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D92")]
				[Address(RVA = "0x12F2BB0", Offset = "0x12F2BB0", VA = "0x12F2BB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D8D")]
			[Address(RVA = "0x12F2224", Offset = "0x12F2224", VA = "0x12F2224")]
			[DebuggerHidden]
			public <Unreserve>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6002D8E")]
			[Address(RVA = "0x12F29CC", Offset = "0x12F29CC", VA = "0x12F29CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D8F")]
			[Address(RVA = "0x12F29D0", Offset = "0x12F29D0", VA = "0x12F29D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D91")]
			[Address(RVA = "0x12F2B70", Offset = "0x12F2B70", VA = "0x12F2B70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000787")]
		[CompilerGenerated]
		private sealed class <SwitchProfileStatus>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public APIClient <>4__this;

			[Token(Token = "0x40025A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170007ED")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D96")]
				[Address(RVA = "0x12F2D50", Offset = "0x12F2D50", VA = "0x12F2D50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170007EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D98")]
				[Address(RVA = "0x12F2D98", Offset = "0x12F2D98", VA = "0x12F2D98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D93")]
			[Address(RVA = "0x12F22C0", Offset = "0x12F22C0", VA = "0x12F22C0")]
			[DebuggerHidden]
			public <SwitchProfileStatus>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6002D94")]
			[Address(RVA = "0x12F2BB8", Offset = "0x12F2BB8", VA = "0x12F2BB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D95")]
			[Address(RVA = "0x12F2BBC", Offset = "0x12F2BBC", VA = "0x12F2BBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D97")]
			[Address(RVA = "0x12F2D58", Offset = "0x12F2D58", VA = "0x12F2D58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000788")]
		[CompilerGenerated]
		private sealed class <SwitchProfile>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public APIClient <>4__this;

			[Token(Token = "0x40025A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int profileId;

			[Token(Token = "0x40025A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public string timeout;

			[Token(Token = "0x40025A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int maxMachines;

			[Token(Token = "0x40025AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170007EF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002D9C")]
				[Address(RVA = "0x12F3050", Offset = "0x12F3050", VA = "0x12F3050", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170007F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002D9E")]
				[Address(RVA = "0x12F3098", Offset = "0x12F3098", VA = "0x12F3098", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002D99")]
			[Address(RVA = "0x12F2390", Offset = "0x12F2390", VA = "0x12F2390")]
			[DebuggerHidden]
			public <SwitchProfile>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6002D9A")]
			[Address(RVA = "0x12F2DA0", Offset = "0x12F2DA0", VA = "0x12F2DA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002D9B")]
			[Address(RVA = "0x12F2DA4", Offset = "0x12F2DA4", VA = "0x12F2DA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002D9D")]
			[Address(RVA = "0x12F3058", Offset = "0x12F3058", VA = "0x12F3058", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002589")]
		private const string DeallocateRoute = "/cfp/v1/server/deallocate";

		[Token(Token = "0x400258A")]
		private const string ReserveRoute = "/cfp/v1/machine/{0}/reserve_server";

		[Token(Token = "0x400258B")]
		private const string UnreserveRoute = "/cfp/v1/machine/{0}/unreserve_server";

		[Token(Token = "0x400258C")]
		private const string FleetProfileSwitchRoute = "/cfp/v2/fleet/{0}/switchprofile";

		[Token(Token = "0x400258D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _fleetId;

		[Token(Token = "0x400258E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly RequestBuilder RequestBuilder;

		[Token(Token = "0x6002D7A")]
		[Address(RVA = "0x12F1E68", Offset = "0x12F1E68", VA = "0x12F1E68")]
		public APIClient(string apiAccessToken, string apiSecretKey, string fleetId = "")
		{
		}

		[Token(Token = "0x6002D7B")]
		[Address(RVA = "0x12F1F50", Offset = "0x12F1F50", VA = "0x12F1F50")]
		private static void CheckResponse(UnityWebRequest request)
		{
		}

		[Token(Token = "0x6002D7C")]
		[Address(RVA = "0x12F2034", Offset = "0x12F2034", VA = "0x12F2034")]
		[IteratorStateMachine(typeof(<Deallocate>d__8))]
		public IEnumerator Deallocate(string uuid)
		{
			return null;
		}

		[Token(Token = "0x6002D7D")]
		[Address(RVA = "0x12F20EC", Offset = "0x12F20EC", VA = "0x12F20EC")]
		[IteratorStateMachine(typeof(<Reserve>d__9))]
		public IEnumerator Reserve(int machineId, int serverId)
		{
			return null;
		}

		[Token(Token = "0x6002D7E")]
		[Address(RVA = "0x12F219C", Offset = "0x12F219C", VA = "0x12F219C")]
		[IteratorStateMachine(typeof(<Unreserve>d__10))]
		public IEnumerator Unreserve(int machineId, int serverId)
		{
			return null;
		}

		[Token(Token = "0x6002D7F")]
		[Address(RVA = "0x12F224C", Offset = "0x12F224C", VA = "0x12F224C")]
		[IteratorStateMachine(typeof(<SwitchProfileStatus>d__11))]
		public IEnumerator SwitchProfileStatus()
		{
			return null;
		}

		[Token(Token = "0x6002D80")]
		[Address(RVA = "0x12F22E8", Offset = "0x12F22E8", VA = "0x12F22E8")]
		[IteratorStateMachine(typeof(<SwitchProfile>d__12))]
		public IEnumerator SwitchProfile(int profileId, string timeout, int maxMachines = 0)
		{
			return null;
		}
	}
	[Token(Token = "0x2000789")]
	public class RequestBuilder
	{
		[Token(Token = "0x40025AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string _apiAccess;

		[Token(Token = "0x40025AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly string _apiSecret;

		[Token(Token = "0x6002D9F")]
		[Address(RVA = "0x12F1F0C", Offset = "0x12F1F0C", VA = "0x12F1F0C")]
		public RequestBuilder(string apiAccess, string apiSecret)
		{
		}

		[Token(Token = "0x6002DA0")]
		[Address(RVA = "0x12F2704", Offset = "0x12F2704", VA = "0x12F2704")]
		public UnityWebRequest Request(Uri endpoint, string method)
		{
			return null;
		}

		[Token(Token = "0x6002DA1")]
		[Address(RVA = "0x12F35BC", Offset = "0x12F35BC", VA = "0x12F35BC")]
		public UnityWebRequest Request(Uri endpoint, string method, WWWForm body)
		{
			return null;
		}

		[Token(Token = "0x6002DA2")]
		[Address(RVA = "0x12F2FC4", Offset = "0x12F2FC4", VA = "0x12F2FC4")]
		public UnityWebRequest Request(Uri endpoint, string method, string body)
		{
			return null;
		}

		[Token(Token = "0x6002DA3")]
		[Address(RVA = "0x12F30A0", Offset = "0x12F30A0", VA = "0x12F30A0")]
		private UnityWebRequest SignedRequest(Uri endpoint, string method, byte[] body, string contentType = "")
		{
			return null;
		}
	}
	[Token(Token = "0x200078A")]
	public class UriBuilder
	{
		[Token(Token = "0x40025AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NameValueCollection RequestParams_;

		[Token(Token = "0x40025AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Uri Endpoint_;

		[Token(Token = "0x40025AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string MultiplayBaseUrl;

		[Token(Token = "0x6002DA4")]
		[Address(RVA = "0x12F2528", Offset = "0x12F2528", VA = "0x12F2528")]
		public UriBuilder()
		{
		}

		[Token(Token = "0x6002DA5")]
		[Address(RVA = "0x12F259C", Offset = "0x12F259C", VA = "0x12F259C")]
		public UriBuilder WithEndpoint(string endpoint)
		{
			return null;
		}

		[Token(Token = "0x6002DA6")]
		[Address(RVA = "0x12F2660", Offset = "0x12F2660", VA = "0x12F2660")]
		public UriBuilder WithQueryParameter(string queryString, string value)
		{
			return null;
		}

		[Token(Token = "0x6002DA7")]
		[Address(RVA = "0x12F26FC", Offset = "0x12F26FC", VA = "0x12F26FC")]
		public Uri Build()
		{
			return null;
		}
	}
	[Token(Token = "0x200078B")]
	public static class UriExtensions
	{
		[Token(Token = "0x6002DA9")]
		[Address(RVA = "0x12F44C4", Offset = "0x12F44C4", VA = "0x12F44C4")]
		public static Uri AttachParameters(this Uri uri, NameValueCollection parameters)
		{
			return null;
		}
	}
}
namespace Multiplay.AWSSignatureV4.Util
{
	[Token(Token = "0x200078C")]
	public static class HttpHelpers
	{
		[Token(Token = "0x6002DAA")]
		[Address(RVA = "0x12F470C", Offset = "0x12F470C", VA = "0x12F470C")]
		public static string UrlEncode(string data, bool isPath = false)
		{
			return null;
		}
	}
}
namespace Multiplay.AWSSignatureV4.Signers
{
	[Token(Token = "0x200078D")]
	public abstract class AWS4SignerBase
	{
		[Token(Token = "0x40025B0")]
		public const string EMPTY_BODY_SHA256 = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";

		[Token(Token = "0x40025B1")]
		public const string SCHEME = "AWS4";

		[Token(Token = "0x40025B2")]
		public const string ALGORITHM = "HMAC-SHA256";

		[Token(Token = "0x40025B3")]
		public const string TERMINATOR = "aws4_request";

		[Token(Token = "0x40025B4")]
		public const string ISO8601BasicFormat = "yyyyMMddTHHmmssZ";

		[Token(Token = "0x40025B5")]
		public const string DateStringFormat = "yyyyMMdd";

		[Token(Token = "0x40025B6")]
		public const string X_Amz_Algorithm = "X-Amz-Algorithm";

		[Token(Token = "0x40025B7")]
		public const string X_Amz_Credential = "X-Amz-Credential";

		[Token(Token = "0x40025B8")]
		public const string X_Amz_SignedHeaders = "X-Amz-SignedHeaders";

		[Token(Token = "0x40025B9")]
		public const string X_Amz_Date = "X-Amz-Date";

		[Token(Token = "0x40025BA")]
		public const string X_Amz_Signature = "X-Amz-Signature";

		[Token(Token = "0x40025BB")]
		public const string X_Amz_Expires = "X-Amz-Expires";

		[Token(Token = "0x40025BC")]
		public const string X_Amz_Content_SHA256 = "X-Amz-Content-SHA256";

		[Token(Token = "0x40025BD")]
		public const string X_Amz_Decoded_Content_Length = "X-Amz-Decoded-Content-Length";

		[Token(Token = "0x40025BE")]
		public const string X_Amz_Meta_UUID = "X-Amz-Meta-UUID";

		[Token(Token = "0x40025BF")]
		public const string HMACSHA256 = "HMACSHA256";

		[Token(Token = "0x40025C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Regex CompressWhitespaceRegex;

		[Token(Token = "0x40025C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static HashAlgorithm CanonicalRequestHashAlgorithm;

		[Token(Token = "0x170007F1")]
		public Uri EndpointUri
		{
			[Token(Token = "0x6002DAB")]
			[Address(RVA = "0x12F4918", Offset = "0x12F4918", VA = "0x12F4918")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DAC")]
			[Address(RVA = "0x12F4920", Offset = "0x12F4920", VA = "0x12F4920")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007F2")]
		public string HttpMethod
		{
			[Token(Token = "0x6002DAD")]
			[Address(RVA = "0x12F4928", Offset = "0x12F4928", VA = "0x12F4928")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DAE")]
			[Address(RVA = "0x12F4930", Offset = "0x12F4930", VA = "0x12F4930")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007F3")]
		public string Service
		{
			[Token(Token = "0x6002DAF")]
			[Address(RVA = "0x12F4938", Offset = "0x12F4938", VA = "0x12F4938")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DB0")]
			[Address(RVA = "0x12F4940", Offset = "0x12F4940", VA = "0x12F4940")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007F4")]
		public string Region
		{
			[Token(Token = "0x6002DB1")]
			[Address(RVA = "0x12F4948", Offset = "0x12F4948", VA = "0x12F4948")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DB2")]
			[Address(RVA = "0x12F4950", Offset = "0x12F4950", VA = "0x12F4950")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002DB3")]
		[Address(RVA = "0x12F4958", Offset = "0x12F4958", VA = "0x12F4958")]
		protected string CanonicalizeHeaderNames(IDictionary<string, string> headers)
		{
			return null;
		}

		[Token(Token = "0x6002DB4")]
		[Address(RVA = "0x12F4C70", Offset = "0x12F4C70", VA = "0x12F4C70", Slot = "4")]
		protected virtual string CanonicalizeHeaders(IDictionary<string, string> headers)
		{
			return null;
		}

		[Token(Token = "0x6002DB5")]
		[Address(RVA = "0x12F539C", Offset = "0x12F539C", VA = "0x12F539C")]
		protected string CanonicalizeRequest(Uri endpointUri, string httpMethod, string queryParameters, string canonicalizedHeaderNames, string canonicalizedHeaders, string bodyHash)
		{
			return null;
		}

		[Token(Token = "0x6002DB6")]
		[Address(RVA = "0x12F54C0", Offset = "0x12F54C0", VA = "0x12F54C0")]
		protected string CanonicalResourcePath(Uri endpointUri)
		{
			return null;
		}

		[Token(Token = "0x6002DB7")]
		[Address(RVA = "0x12F5540", Offset = "0x12F5540", VA = "0x12F5540")]
		protected byte[] DeriveSigningKey(string algorithm, string awsSecretAccessKey, string region, string date, string service)
		{
			return null;
		}

		[Token(Token = "0x6002DB8")]
		[Address(RVA = "0x12F56C4", Offset = "0x12F56C4", VA = "0x12F56C4")]
		protected byte[] ComputeKeyedHash(string algorithm, byte[] key, byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6002DB9")]
		[Address(RVA = "0x12F3638", Offset = "0x12F3638", VA = "0x12F3638")]
		public static string ToHexString(byte[] data, bool lowercase)
		{
			return null;
		}

		[Token(Token = "0x6002DBA")]
		[Address(RVA = "0x12F5718", Offset = "0x12F5718", VA = "0x12F5718")]
		protected AWS4SignerBase()
		{
		}
	}
	[Token(Token = "0x200078E")]
	public class AWS4SignerForAuthorizationHeader : AWS4SignerBase
	{
		[Token(Token = "0x6002DBC")]
		[Address(RVA = "0x12F3794", Offset = "0x12F3794", VA = "0x12F3794")]
		public string ComputeSignature(IDictionary<string, string> headers, string queryParameters, string bodyHash, string awsAccessKey, string awsSecretKey)
		{
			return null;
		}

		[Token(Token = "0x6002DBD")]
		[Address(RVA = "0x12F373C", Offset = "0x12F373C", VA = "0x12F373C")]
		public AWS4SignerForAuthorizationHeader()
		{
		}
	}
}
namespace Networking
{
	[Token(Token = "0x2000790")]
	public class State_AttemptBoltReconnect : BaseStateAttachedLogic
	{
		[Token(Token = "0x40025CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_timeout;

		[Token(Token = "0x40025CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float m_timer;

		[Token(Token = "0x6002DC3")]
		[Address(RVA = "0x12F5934", Offset = "0x12F5934", VA = "0x12F5934", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002DC4")]
		[Address(RVA = "0x12F5B94", Offset = "0x12F5B94", VA = "0x12F5B94", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002DC5")]
		[Address(RVA = "0x12F5C24", Offset = "0x12F5C24", VA = "0x12F5C24", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6002DC6")]
		[Address(RVA = "0x12F5C28", Offset = "0x12F5C28", VA = "0x12F5C28")]
		private void ReconnectSuccess(UdpSession arg1, IProtocolToken arg2)
		{
		}

		[Token(Token = "0x6002DC7")]
		[Address(RVA = "0x12F5BDC", Offset = "0x12F5BDC", VA = "0x12F5BDC")]
		private void ReconnectFailed()
		{
		}

		[Token(Token = "0x6002DC8")]
		[Address(RVA = "0x12F5C70", Offset = "0x12F5C70", VA = "0x12F5C70")]
		private void ExitStateRemoveListeners(string exit)
		{
		}

		[Token(Token = "0x6002DC9")]
		[Address(RVA = "0x12F5E5C", Offset = "0x12F5E5C", VA = "0x12F5E5C")]
		public State_AttemptBoltReconnect()
		{
		}
	}
	[Token(Token = "0x2000791")]
	public class State_DedicatedServerLevelEnd : MonoBehaviourBaseStateAttachedLogic
	{
		[Token(Token = "0x40025CC")]
		private const string c_exitPoint = "exit";

		[Token(Token = "0x40025CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_serverSentLevelEndEvent;

		[Token(Token = "0x6002DCA")]
		[Address(RVA = "0x12F5E6C", Offset = "0x12F5E6C", VA = "0x12F5E6C", Slot = "10")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002DCB")]
		[Address(RVA = "0x12F5F8C", Offset = "0x12F5F8C", VA = "0x12F5F8C", Slot = "12")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002DCC")]
		[Address(RVA = "0x12F6014", Offset = "0x12F6014", VA = "0x12F6014", Slot = "13")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6002DCD")]
		[Address(RVA = "0x12F6180", Offset = "0x12F6180", VA = "0x12F6180")]
		private void OnReceivedLevelEndEvent(RequestLevelEndEvent evnt)
		{
		}

		[Token(Token = "0x6002DCE")]
		[Address(RVA = "0x12F61FC", Offset = "0x12F61FC", VA = "0x12F61FC")]
		public State_DedicatedServerLevelEnd()
		{
		}
	}
	[Token(Token = "0x2000792")]
	public class State_DedicatedServerRestartListener : MonoBehaviourBaseStateAttachedLogic
	{
		[Token(Token = "0x40025CE")]
		private const string c_exitPoint = "exit";

		[Token(Token = "0x40025CF")]
		private const string c_restartExitPoint = "restart";

		[Token(Token = "0x40025D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_waitTime;

		[Token(Token = "0x40025D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float m_currentTime;

		[Token(Token = "0x40025D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool conditionsMetThisFrame;

		[Token(Token = "0x6002DCF")]
		[Address(RVA = "0x12F6204", Offset = "0x12F6204", VA = "0x12F6204", Slot = "10")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002DD0")]
		[Address(RVA = "0x12F620C", Offset = "0x12F620C", VA = "0x12F620C", Slot = "13")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6002DD1")]
		[Address(RVA = "0x12F6214", Offset = "0x12F6214", VA = "0x12F6214", Slot = "12")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002DD2")]
		[Address(RVA = "0x12F6378", Offset = "0x12F6378", VA = "0x12F6378")]
		public bool InRestartableState()
		{
			return default(bool);
		}

		[Token(Token = "0x6002DD3")]
		[Address(RVA = "0x12F6408", Offset = "0x12F6408", VA = "0x12F6408")]
		public State_DedicatedServerRestartListener()
		{
		}
	}
	[Token(Token = "0x2000793")]
	public class State_MPDisconnectListener : BaseStateAttachedLogic
	{
		[Token(Token = "0x40025D3")]
		private const string m_attemptReconnectString = "exit_to_hub";

		[Token(Token = "0x40025D4")]
		private const string m_exitToHubString = "exit_to_hub";

		[Token(Token = "0x40025D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Message;

		[Token(Token = "0x40025D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_shouldAttemptReconnect;

		[Token(Token = "0x6002DD4")]
		[Address(RVA = "0x12F6418", Offset = "0x12F6418", VA = "0x12F6418", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002DD5")]
		[Address(RVA = "0x12F6560", Offset = "0x12F6560", VA = "0x12F6560", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6002DD6")]
		[Address(RVA = "0x12F667C", Offset = "0x12F667C", VA = "0x12F667C", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002DD7")]
		[Address(RVA = "0x12F6930", Offset = "0x12F6930", VA = "0x12F6930")]
		private void OnDisconnected(BoltConnection conn)
		{
		}

		[Token(Token = "0x6002DD8")]
		[Address(RVA = "0x12F67B0", Offset = "0x12F67B0", VA = "0x12F67B0")]
		private void ExitToMainMenu()
		{
		}

		[Token(Token = "0x6002DD9")]
		[Address(RVA = "0x12F6AB4", Offset = "0x12F6AB4", VA = "0x12F6AB4")]
		public State_MPDisconnectListener()
		{
		}
	}
	[Token(Token = "0x2000794")]
	public class State_MPEndGameListener : BaseStateAttachedLogic
	{
		[Token(Token = "0x6002DDA")]
		[Address(RVA = "0x12F6B0C", Offset = "0x12F6B0C", VA = "0x12F6B0C", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002DDB")]
		[Address(RVA = "0x12F6BCC", Offset = "0x12F6BCC", VA = "0x12F6BCC")]
		public State_MPEndGameListener()
		{
		}
	}
	[Token(Token = "0x2000795")]
	public enum LevelEndType
	{
		[Token(Token = "0x40025D8")]
		Continue,
		[Token(Token = "0x40025D9")]
		Retry,
		[Token(Token = "0x40025DA")]
		Lobby
	}
	[Token(Token = "0x2000796")]
	public class State_MPLevelEndListener : BaseStateAttachedLogic
	{
		[Token(Token = "0x40025DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_conditionMetMaxTime;

		[Token(Token = "0x40025DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<UdpIPv6Address, float> m_playerDeadTimer;

		[Token(Token = "0x40025DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UdpIPv6Address> m_playerPostGame;

		[Token(Token = "0x6002DDC")]
		[Address(RVA = "0x12F6BD4", Offset = "0x12F6BD4", VA = "0x12F6BD4", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002DDD")]
		[Address(RVA = "0x12F6E60", Offset = "0x12F6E60", VA = "0x12F6E60", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6002DDE")]
		[Address(RVA = "0x12F704C", Offset = "0x12F704C", VA = "0x12F704C", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002DDF")]
		[Address(RVA = "0x12F7B38", Offset = "0x12F7B38", VA = "0x12F7B38")]
		private void ServerEndedLevelEvent(bool isAlive, bool isExtracted)
		{
		}

		[Token(Token = "0x6002DE0")]
		[Address(RVA = "0x12F7F40", Offset = "0x12F7F40", VA = "0x12F7F40")]
		private void ClientRequestedGameEndEvent(RequestEndGameEvent requestEndGameEvent)
		{
		}

		[Token(Token = "0x6002DE1")]
		[Address(RVA = "0x12F7E04", Offset = "0x12F7E04", VA = "0x12F7E04")]
		private void EndGameClient(bool isAlive, bool isExtracted)
		{
		}

		[Token(Token = "0x6002DE2")]
		[Address(RVA = "0x12F7C60", Offset = "0x12F7C60", VA = "0x12F7C60")]
		private void EndGameServer(bool isAlive, bool isExtracted)
		{
		}

		[Token(Token = "0x6002DE3")]
		[Address(RVA = "0x12F81A4", Offset = "0x12F81A4", VA = "0x12F81A4")]
		public State_MPLevelEndListener()
		{
		}
	}
	[Token(Token = "0x2000797")]
	public class State_MPOnPlayerAttachedDetached : BaseStateAttachedLogic
	{
		[Token(Token = "0x40025DE")]
		private const string m_playerAttached = "playerAttached";

		[Token(Token = "0x40025DF")]
		private const string m_playerDetached = "playerDetached";

		[Token(Token = "0x6002DE4")]
		[Address(RVA = "0x12F81B4", Offset = "0x12F81B4", VA = "0x12F81B4", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002DE5")]
		[Address(RVA = "0x12F83B8", Offset = "0x12F83B8", VA = "0x12F83B8")]
		private void OnPlayerDetached(BoltPlayerContainer boltPlayer)
		{
		}

		[Token(Token = "0x6002DE6")]
		[Address(RVA = "0x12F8408", Offset = "0x12F8408", VA = "0x12F8408")]
		private void OnPlayerAttached(BoltPlayerContainer boltPlayer)
		{
		}

		[Token(Token = "0x6002DE7")]
		[Address(RVA = "0x12F8458", Offset = "0x12F8458", VA = "0x12F8458", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6002DE8")]
		[Address(RVA = "0x12F865C", Offset = "0x12F865C", VA = "0x12F865C")]
		public State_MPOnPlayerAttachedDetached()
		{
		}
	}
	[Token(Token = "0x2000798")]
	public class State_MPOnUpdatePlayers : BaseStateAttachedLogic
	{
		[Token(Token = "0x40025E0")]
		private const string c_onePlayer = "onePlayer";

		[Token(Token = "0x40025E1")]
		private const string c_multiplePlayers = "multiplePlayers";

		[Token(Token = "0x40025E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_lastPlayerCount;

		[Token(Token = "0x6002DE9")]
		[Address(RVA = "0x12F8664", Offset = "0x12F8664", VA = "0x12F8664", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002DEA")]
		[Address(RVA = "0x12F87CC", Offset = "0x12F87CC", VA = "0x12F87CC")]
		private void OnUpdatePlayers()
		{
		}

		[Token(Token = "0x6002DEB")]
		[Address(RVA = "0x12F88D0", Offset = "0x12F88D0", VA = "0x12F88D0", Slot = "12")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x6002DEC")]
		[Address(RVA = "0x12F89EC", Offset = "0x12F89EC", VA = "0x12F89EC")]
		public State_MPOnUpdatePlayers()
		{
		}
	}
	[Token(Token = "0x2000799")]
	public class State_MultiplayerServerStart
	{
		[Token(Token = "0x6002DED")]
		[Address(RVA = "0x12F89F4", Offset = "0x12F89F4", VA = "0x12F89F4")]
		public State_MultiplayerServerStart()
		{
		}
	}
	[Token(Token = "0x200079A")]
	public class MultiplayerGameManager : EntityEventListener<IGameManagerState>
	{
		[Token(Token = "0x40025E3")]
		public const int MaxLives = 1;

		[Token(Token = "0x40025E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Multiplayer_GlobalEnemyConfig m_MultiplayerGlobalEnemyConfig;

		[Token(Token = "0x40025E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnGameStarted;

		[Token(Token = "0x40025E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action OnGameEnded;

		[Token(Token = "0x40025EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static MultiplayerGameState s_gameState;

		[Token(Token = "0x40025EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Dictionary<UdpIPv6Address, int> s_remainingLives;

		[Token(Token = "0x40025F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static int s_currentWave;

		[Token(Token = "0x40025F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static Action OnGameStateChanged;

		[Token(Token = "0x40025F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Action OnCurrentWaveChanged;

		[Token(Token = "0x170007F5")]
		public static MultiplayerGameManager Instance
		{
			[Token(Token = "0x6002DEE")]
			[Address(RVA = "0x12F89FC", Offset = "0x12F89FC", VA = "0x12F89FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DEF")]
			[Address(RVA = "0x12F8A54", Offset = "0x12F8A54", VA = "0x12F8A54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170007F6")]
		public static MultiplayerMapDefinition MapDefinition
		{
			[Token(Token = "0x6002DF0")]
			[Address(RVA = "0x12F8AB4", Offset = "0x12F8AB4", VA = "0x12F8AB4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DF1")]
			[Address(RVA = "0x12F8B0C", Offset = "0x12F8B0C", VA = "0x12F8B0C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170007F7")]
		public static PlayerLifeSystem LifeSystem
		{
			[Token(Token = "0x6002DF2")]
			[Address(RVA = "0x12F8B6C", Offset = "0x12F8B6C", VA = "0x12F8B6C")]
			[CompilerGenerated]
			get
			{
				return default(PlayerLifeSystem);
			}
			[Token(Token = "0x6002DF3")]
			[Address(RVA = "0x12F8BC4", Offset = "0x12F8BC4", VA = "0x12F8BC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170007F8")]
		public static bool IsAlive
		{
			[Token(Token = "0x6002DF4")]
			[Address(RVA = "0x12F8C20", Offset = "0x12F8C20", VA = "0x12F8C20")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002DF5")]
			[Address(RVA = "0x12F8C78", Offset = "0x12F8C78", VA = "0x12F8C78")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007F9")]
		public static bool IsExtracted
		{
			[Token(Token = "0x6002DF6")]
			[Address(RVA = "0x12F8CD4", Offset = "0x12F8CD4", VA = "0x12F8CD4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002DF7")]
			[Address(RVA = "0x12F8D2C", Offset = "0x12F8D2C", VA = "0x12F8D2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007FA")]
		public static bool GameEnded
		{
			[Token(Token = "0x6002DF8")]
			[Address(RVA = "0x12F8D88", Offset = "0x12F8D88", VA = "0x12F8D88")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002DF9")]
			[Address(RVA = "0x12F8DE0", Offset = "0x12F8DE0", VA = "0x12F8DE0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007FB")]
		public static bool GameRestated
		{
			[Token(Token = "0x6002DFA")]
			[Address(RVA = "0x12F8E3C", Offset = "0x12F8E3C", VA = "0x12F8E3C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002DFB")]
			[Address(RVA = "0x12F8E94", Offset = "0x12F8E94", VA = "0x12F8E94")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170007FC")]
		public static MultiplayerGameState GameState
		{
			[Token(Token = "0x6002DFC")]
			[Address(RVA = "0x12F8EF0", Offset = "0x12F8EF0", VA = "0x12F8EF0")]
			get
			{
				return default(MultiplayerGameState);
			}
		}

		[Token(Token = "0x170007FD")]
		public static Dictionary<UdpIPv6Address, int> RemainingLives
		{
			[Token(Token = "0x6002DFD")]
			[Address(RVA = "0x12F8F48", Offset = "0x12F8F48", VA = "0x12F8F48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170007FE")]
		public static int CurrentWave
		{
			[Token(Token = "0x6002DFF")]
			[Address(RVA = "0x12F9354", Offset = "0x12F9354", VA = "0x12F9354")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170007FF")]
		public Multiplayer_GlobalEnemyConfig MultiplayerGlobalEnemyConfig
		{
			[Token(Token = "0x6002E00")]
			[Address(RVA = "0x12F93AC", Offset = "0x12F93AC", VA = "0x12F93AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002DFE")]
		[Address(RVA = "0x12F8FA0", Offset = "0x12F8FA0", VA = "0x12F8FA0")]
		public static void RemoveDeadPlayers()
		{
		}

		[Token(Token = "0x6002E01")]
		[Address(RVA = "0x12F93B4", Offset = "0x12F93B4", VA = "0x12F93B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002E02")]
		[Address(RVA = "0x12F940C", Offset = "0x12F940C", VA = "0x12F940C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002E03")]
		[Address(RVA = "0x12F949C", Offset = "0x12F949C", VA = "0x12F949C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002E04")]
		[Address(RVA = "0x12F9528", Offset = "0x12F9528", VA = "0x12F9528")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002E05")]
		[Address(RVA = "0x12F98F0", Offset = "0x12F98F0", VA = "0x12F98F0", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6002E06")]
		[Address(RVA = "0x12F9C64", Offset = "0x12F9C64", VA = "0x12F9C64", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x6002E07")]
		[Address(RVA = "0x12F805C", Offset = "0x12F805C", VA = "0x12F805C")]
		public void SetGameState(MultiplayerGameState gameState, [Optional] BoltConnection targetConnection)
		{
		}

		[Token(Token = "0x6002E08")]
		[Address(RVA = "0x12F79E4", Offset = "0x12F79E4", VA = "0x12F79E4")]
		public static void SendGameState(MultiplayerGameState gameState, [Optional] BoltConnection targetConnection)
		{
		}

		[Token(Token = "0x6002E09")]
		[Address(RVA = "0x12F96C8", Offset = "0x12F96C8", VA = "0x12F96C8")]
		public void SetRemainingLives(int remainingLives)
		{
		}

		[Token(Token = "0x6002E0A")]
		[Address(RVA = "0x12F9F28", Offset = "0x12F9F28", VA = "0x12F9F28")]
		public static void RemovePlayers()
		{
		}

		[Token(Token = "0x6002E0B")]
		[Address(RVA = "0x12F9FA0", Offset = "0x12F9FA0", VA = "0x12F9FA0")]
		public static bool HasPlayer(UdpIPv6Address address)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E0C")]
		[Address(RVA = "0x12FA030", Offset = "0x12FA030", VA = "0x12FA030")]
		public static void AddServerPlayer()
		{
		}

		[Token(Token = "0x6002E0D")]
		[Address(RVA = "0x12FA080", Offset = "0x12FA080", VA = "0x12FA080")]
		public static void AddServerPlayer(int life)
		{
		}

		[Token(Token = "0x6002E0E")]
		[Address(RVA = "0x12FA248", Offset = "0x12FA248", VA = "0x12FA248")]
		public static void AddPlayer(int life, BoltConnection connection)
		{
		}

		[Token(Token = "0x6002E0F")]
		[Address(RVA = "0x12FA148", Offset = "0x12FA148", VA = "0x12FA148")]
		public static void AddPlayer(int life, UdpIPv6Address address)
		{
		}

		[Token(Token = "0x6002E10")]
		[Address(RVA = "0x12FA364", Offset = "0x12FA364", VA = "0x12FA364")]
		public void SetRemainingLives(int remainingLives, BoltConnection connection)
		{
		}

		[Token(Token = "0x6002E11")]
		[Address(RVA = "0x12F9DD0", Offset = "0x12F9DD0", VA = "0x12F9DD0")]
		public void SetRemainingLives(int remainingLives, UdpIPv6Address address, bool updateSession = true)
		{
		}

		[Token(Token = "0x6002E12")]
		[Address(RVA = "0x12FA458", Offset = "0x12FA458", VA = "0x12FA458")]
		public void DecreaseLife(BoltConnection connection)
		{
		}

		[Token(Token = "0x6002E13")]
		[Address(RVA = "0x12FA538", Offset = "0x12FA538", VA = "0x12FA538")]
		public void DecreaseLife(UdpIPv6Address address)
		{
		}

		[Token(Token = "0x6002E14")]
		[Address(RVA = "0x12FA5DC", Offset = "0x12FA5DC", VA = "0x12FA5DC")]
		public void IncreaseLife(BoltConnection connection)
		{
		}

		[Token(Token = "0x6002E15")]
		[Address(RVA = "0x12FA730", Offset = "0x12FA730", VA = "0x12FA730")]
		public void SetCurrentWave(int currentWave)
		{
		}

		[Token(Token = "0x6002E16")]
		[Address(RVA = "0x12FA7DC", Offset = "0x12FA7DC", VA = "0x12FA7DC")]
		public static bool AllPlayerHaveMaxHealth()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E17")]
		[Address(RVA = "0x12FA9DC", Offset = "0x12FA9DC", VA = "0x12FA9DC")]
		public static bool AllPlayersHaveLivesRemaining()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E18")]
		[Address(RVA = "0x12FABD8", Offset = "0x12FABD8", VA = "0x12FABD8")]
		public static bool AtLeastOnePlayerIsAlive()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E19")]
		[Address(RVA = "0x12FADCC", Offset = "0x12FADCC", VA = "0x12FADCC")]
		public static bool AllPlayersHaveNoMoreLives()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1A")]
		[Address(RVA = "0x12FAFC8", Offset = "0x12FAFC8", VA = "0x12FAFC8")]
		private void CurrentWaveChanged()
		{
		}

		[Token(Token = "0x6002E1B")]
		[Address(RVA = "0x12FB0E4", Offset = "0x12FB0E4", VA = "0x12FB0E4", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x6002E1C")]
		[Address(RVA = "0x12FB2A4", Offset = "0x12FB2A4", VA = "0x12FB2A4")]
		public static void SetMap(MultiplayerMapDefinition mapDefinition)
		{
		}

		[Token(Token = "0x6002E1D")]
		[Address(RVA = "0x12FB43C", Offset = "0x12FB43C", VA = "0x12FB43C")]
		public static bool IsMultiplayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1E")]
		[Address(RVA = "0x12FB48C", Offset = "0x12FB48C", VA = "0x12FB48C")]
		public static bool IsCoop()
		{
			return default(bool);
		}

		[Token(Token = "0x6002E1F")]
		[Address(RVA = "0x12FB52C", Offset = "0x12FB52C", VA = "0x12FB52C")]
		[ContextMenu("Add life")]
		public void IncrementLives()
		{
		}

		[Token(Token = "0x6002E20")]
		[Address(RVA = "0x12FB81C", Offset = "0x12FB81C", VA = "0x12FB81C")]
		[ContextMenu("Remove life")]
		public void DecrementLives()
		{
		}

		[Token(Token = "0x6002E21")]
		[Address(RVA = "0x12FB57C", Offset = "0x12FB57C", VA = "0x12FB57C")]
		public static void ChangeLives(int delta)
		{
		}

		[Token(Token = "0x6002E22")]
		[Address(RVA = "0x12FB86C", Offset = "0x12FB86C", VA = "0x12FB86C")]
		public static void ChangeLife(int delta, BoltConnection connection)
		{
		}

		[Token(Token = "0x6002E23")]
		[Address(RVA = "0x12FBA10", Offset = "0x12FBA10", VA = "0x12FBA10")]
		public MultiplayerGameManager()
		{
		}
	}
	[Token(Token = "0x200079B")]
	public class MultiplayerGameStateIndicator : MonoBehaviour
	{
		[Token(Token = "0x200079C")]
		[CompilerGenerated]
		private sealed class <WaveCountdownBeginRoutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40025F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40025F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40025F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MultiplayerGameStateIndicator <>4__this;

			[Token(Token = "0x40025FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int i;

			[Token(Token = "0x17000800")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002E3A")]
				[Address(RVA = "0x12FDDEC", Offset = "0x12FDDEC", VA = "0x12FDDEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000801")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002E3C")]
				[Address(RVA = "0x12FDE34", Offset = "0x12FDE34", VA = "0x12FDE34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002E37")]
			[Address(RVA = "0x12FDA1C", Offset = "0x12FDA1C", VA = "0x12FDA1C")]
			[DebuggerHidden]
			public <WaveCountdownBeginRoutine>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6002E38")]
			[Address(RVA = "0x12FDD08", Offset = "0x12FDD08", VA = "0x12FDD08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002E39")]
			[Address(RVA = "0x12FDD0C", Offset = "0x12FDD0C", VA = "0x12FDD0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002E3B")]
			[Address(RVA = "0x12FDDF4", Offset = "0x12FDDF4", VA = "0x12FDDF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40025F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The transform in the world we'll play 3D sounds from.")]
		[SerializeField]
		private Transform m_speakerTransform;

		[Token(Token = "0x40025F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("A map of default events fired per multiplayer wave")]
		[Header("Default Gameplay Events (Fired every wave)")]
		[SerializeField]
		private MultiplayerGameplayUnityEvents m_multiplayerGameplayEvents;

		[Token(Token = "0x40025F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_currentWaveIndex;

		[Token(Token = "0x40025F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_waveCountdownTime;

		[Token(Token = "0x6002E25")]
		[Address(RVA = "0x12FBB08", Offset = "0x12FBB08", VA = "0x12FBB08")]
		private void Start()
		{
		}

		[Token(Token = "0x6002E26")]
		[Address(RVA = "0x12FC468", Offset = "0x12FC468", VA = "0x12FC468")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002E27")]
		[Address(RVA = "0x12FCBFC", Offset = "0x12FCBFC", VA = "0x12FCBFC")]
		private void LevelStart(int i)
		{
		}

		[Token(Token = "0x6002E28")]
		[Address(RVA = "0x12FCC6C", Offset = "0x12FCC6C", VA = "0x12FCC6C")]
		private void PlayBreakMusic()
		{
		}

		[Token(Token = "0x6002E29")]
		[Address(RVA = "0x12FCCBC", Offset = "0x12FCCBC", VA = "0x12FCCBC")]
		private void LevelComplete(int i)
		{
		}

		[Token(Token = "0x6002E2A")]
		[Address(RVA = "0x12FD208", Offset = "0x12FD208", VA = "0x12FD208")]
		private void WaveStart(int i)
		{
		}

		[Token(Token = "0x6002E2B")]
		[Address(RVA = "0x12FD564", Offset = "0x12FD564", VA = "0x12FD564")]
		private void WavePaused(int i)
		{
		}

		[Token(Token = "0x6002E2C")]
		[Address(RVA = "0x12FD588", Offset = "0x12FD588", VA = "0x12FD588")]
		private void WaveRestarted(int i)
		{
		}

		[Token(Token = "0x6002E2D")]
		[Address(RVA = "0x12FD5AC", Offset = "0x12FD5AC", VA = "0x12FD5AC")]
		private void WaveComplete(int i)
		{
		}

		[Token(Token = "0x6002E2E")]
		[Address(RVA = "0x12FD978", Offset = "0x12FD978", VA = "0x12FD978")]
		private void WaveCountdownBegin(int i)
		{
		}

		[Token(Token = "0x6002E2F")]
		[Address(RVA = "0x12FD998", Offset = "0x12FD998", VA = "0x12FD998")]
		[IteratorStateMachine(typeof(<WaveCountdownBeginRoutine>d__14))]
		private IEnumerator WaveCountdownBeginRoutine(int i)
		{
			return null;
		}

		[Token(Token = "0x6002E30")]
		[Address(RVA = "0x12FDA44", Offset = "0x12FDA44", VA = "0x12FDA44")]
		private void FirstSpawn(int i)
		{
		}

		[Token(Token = "0x6002E31")]
		[Address(RVA = "0x12FDAB4", Offset = "0x12FDAB4", VA = "0x12FDAB4")]
		private void PlayerJoin(int i)
		{
		}

		[Token(Token = "0x6002E32")]
		[Address(RVA = "0x12FDB24", Offset = "0x12FDB24", VA = "0x12FDB24")]
		private void PlayerLeave(int i)
		{
		}

		[Token(Token = "0x6002E33")]
		[Address(RVA = "0x12FDB94", Offset = "0x12FDB94", VA = "0x12FDB94")]
		private void PlayerDeath(int connectionId)
		{
		}

		[Token(Token = "0x6002E34")]
		[Address(RVA = "0x12FDCB0", Offset = "0x12FDCB0", VA = "0x12FDCB0")]
		private void FocalPointComplete(int i)
		{
		}

		[Token(Token = "0x6002E35")]
		[Address(RVA = "0x12FDCD4", Offset = "0x12FDCD4", VA = "0x12FDCD4")]
		private void GameStateChanged(int i)
		{
		}

		[Token(Token = "0x6002E36")]
		[Address(RVA = "0x12FDCF8", Offset = "0x12FDCF8", VA = "0x12FDCF8")]
		public MultiplayerGameStateIndicator()
		{
		}
	}
	[Token(Token = "0x200079D")]
	public class MultiplayerItemDropArea : MonoBehaviour
	{
		[Token(Token = "0x40025FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _radius;

		[Token(Token = "0x17000802")]
		public float Radius
		{
			[Token(Token = "0x6002E3D")]
			[Address(RVA = "0x12FDE3C", Offset = "0x12FDE3C", VA = "0x12FDE3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002E3E")]
		[Address(RVA = "0x12FDE44", Offset = "0x12FDE44", VA = "0x12FDE44")]
		public bool IsPointWithinRadius(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E3F")]
		[Address(RVA = "0x12FDF0C", Offset = "0x12FDF0C", VA = "0x12FDF0C")]
		public MultiplayerItemDropArea()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200079E")]
	public class NetworkInventoryData
	{
		[Token(Token = "0x40025FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Identifier m_key;

		[Token(Token = "0x40025FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform m_transform;

		[Token(Token = "0x17000803")]
		public Identifier Key
		{
			[Token(Token = "0x6002E40")]
			[Address(RVA = "0x12FDF1C", Offset = "0x12FDF1C", VA = "0x12FDF1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E41")]
			[Address(RVA = "0x12FDF24", Offset = "0x12FDF24", VA = "0x12FDF24")]
			set
			{
			}
		}

		[Token(Token = "0x17000804")]
		public Transform SlotTransform
		{
			[Token(Token = "0x6002E42")]
			[Address(RVA = "0x12FDF2C", Offset = "0x12FDF2C", VA = "0x12FDF2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E43")]
			[Address(RVA = "0x12FDF34", Offset = "0x12FDF34", VA = "0x12FDF34")]
			set
			{
			}
		}

		[Token(Token = "0x6002E44")]
		[Address(RVA = "0x12FDF3C", Offset = "0x12FDF3C", VA = "0x12FDF3C")]
		public NetworkInventoryData()
		{
		}
	}
}
namespace Networking._Placeholder
{
	[Token(Token = "0x200079F")]
	public static class NetLog
	{
		[Token(Token = "0x17000805")]
		public static Action<string> OnLog
		{
			[Token(Token = "0x6002E45")]
			[Address(RVA = "0x12FDF44", Offset = "0x12FDF44", VA = "0x12FDF44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E46")]
			[Address(RVA = "0x12FDF8C", Offset = "0x12FDF8C", VA = "0x12FDF8C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002E47")]
		[Address(RVA = "0x12FDFE4", Offset = "0x12FDFE4", VA = "0x12FDFE4")]
		[Conditional("PT_DEBUG")]
		public static void Write(object msg, PT.LogLevel eLevel = PT.LogLevel.Info)
		{
		}

		[Token(Token = "0x6002E48")]
		[Address(RVA = "0x12FE1B8", Offset = "0x12FE1B8", VA = "0x12FE1B8")]
		[Conditional("PT_DEBUG")]
		public static void WriteWarning(object msg)
		{
		}

		[Token(Token = "0x6002E49")]
		[Address(RVA = "0x12FE290", Offset = "0x12FE290", VA = "0x12FE290")]
		[Conditional("PT_DEBUG")]
		public static void WriteError(object msg)
		{
		}

		[Token(Token = "0x6002E4A")]
		[Address(RVA = "0x12FE0BC", Offset = "0x12FE0BC", VA = "0x12FE0BC")]
		private static string AttachDebugString(string msg)
		{
			return null;
		}
	}
	[Token(Token = "0x20007A0")]
	public class NetworkDebugger : GlobalEventListener
	{
		[Token(Token = "0x40025FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TMP_Text m_generalDebugText;

		[Token(Token = "0x4002600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TMP_Text m_photonDebugText;

		[Token(Token = "0x4002601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TMP_Text m_photonInfoText;

		[Token(Token = "0x4002602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TMP_Text m_oculusDebugText;

		[Token(Token = "0x4002603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TMP_Text m_oculusInfoText;

		[Token(Token = "0x4002604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TMP_Text m_managerInfoText;

		[Token(Token = "0x6002E4B")]
		[Address(RVA = "0x12FE368", Offset = "0x12FE368", VA = "0x12FE368")]
		private void Update()
		{
		}

		[Token(Token = "0x6002E4C")]
		[Address(RVA = "0x12FEFA4", Offset = "0x12FEFA4", VA = "0x12FEFA4")]
		private void WriteGeneralDebugInfo(string str)
		{
		}

		[Token(Token = "0x6002E4D")]
		[Address(RVA = "0x12FEFC8", Offset = "0x12FEFC8", VA = "0x12FEFC8")]
		private void WritePhotonDebugInfo(string str)
		{
		}

		[Token(Token = "0x6002E4E")]
		[Address(RVA = "0x12FE434", Offset = "0x12FE434", VA = "0x12FE434")]
		private void WritePhotonInfo()
		{
		}

		[Token(Token = "0x6002E4F")]
		[Address(RVA = "0x12FEFEC", Offset = "0x12FEFEC", VA = "0x12FEFEC")]
		private void ShowInfo(BoltConnection connection)
		{
		}

		[Token(Token = "0x6002E50")]
		[Address(RVA = "0x12FF764", Offset = "0x12FF764", VA = "0x12FF764")]
		private void WriteOculusDebugInfo(string str)
		{
		}

		[Token(Token = "0x6002E51")]
		[Address(RVA = "0x12FE944", Offset = "0x12FE944", VA = "0x12FE944")]
		private void WriteOculusInfo()
		{
		}

		[Token(Token = "0x6002E52")]
		[Address(RVA = "0x12FE9A0", Offset = "0x12FE9A0", VA = "0x12FE9A0")]
		private void WriteManagerInfo()
		{
		}

		[Token(Token = "0x6002E53")]
		[Address(RVA = "0x12FF788", Offset = "0x12FF788", VA = "0x12FF788")]
		public NetworkDebugger()
		{
		}
	}
}
namespace Networking.VoiceChat
{
	[Token(Token = "0x20007A1")]
	public class VivoxManager : MonoBehaviour
	{
		[Token(Token = "0x20007A2")]
		public delegate void ParticipantValueChangedHandler(string participantId, string username, ChannelId channel, bool value);

		[Token(Token = "0x20007A3")]
		public delegate void ParticipantStatusChangedHandler(string username, ChannelId channel, IParticipant participant);

		[Token(Token = "0x20007A4")]
		public delegate void ChannelTextMessageChangedHandler(string sender, IChannelTextMessage channelTextMessage);

		[Token(Token = "0x20007A5")]
		public delegate void SessionArchiveMessageChangedHandler(string sender, ISessionArchiveMessage channelTextMessage);

		[Token(Token = "0x20007A7")]
		[CompilerGenerated]
		private sealed class <LeaveChannelCoroutine>d__67 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VivoxManager <>4__this;

			[Token(Token = "0x4002625")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AsyncCallback leaveChannelCallback;

			[Token(Token = "0x4002626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private IAsyncResult <result>5__2;

			[Token(Token = "0x1700080A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002E93")]
				[Address(RVA = "0x1305874", Offset = "0x1305874", VA = "0x1305874", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700080B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002E95")]
				[Address(RVA = "0x13058BC", Offset = "0x13058BC", VA = "0x13058BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002E90")]
			[Address(RVA = "0x1304378", Offset = "0x1304378", VA = "0x1304378")]
			[DebuggerHidden]
			public <LeaveChannelCoroutine>d__67(int <>1__state)
			{
			}

			[Token(Token = "0x6002E91")]
			[Address(RVA = "0x13056C8", Offset = "0x13056C8", VA = "0x13056C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002E92")]
			[Address(RVA = "0x13056CC", Offset = "0x13056CC", VA = "0x13056CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002E94")]
			[Address(RVA = "0x130587C", Offset = "0x130587C", VA = "0x130587C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400260A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly Uri Server;

		[Token(Token = "0x400260B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly string Domain;

		[Token(Token = "0x400260C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly string TokenIssuer;

		[Token(Token = "0x400260D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly string TokenKey;

		[Token(Token = "0x400260E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static TimeSpan TokenExpiration;

		[Token(Token = "0x400260F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static VivoxManager m_instance;

		[Token(Token = "0x4002610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static AccountId AccountId;

		[Token(Token = "0x4002611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static Client Client;

		[Token(Token = "0x4002612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static ILoginSession LoginSession;

		[Token(Token = "0x4002613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static IChannelSession ChannelSession;

		[Token(Token = "0x4002614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static Channel3DProperties ChannelProperties;

		[Token(Token = "0x4002615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static int m_failedLoginAttempts;

		[Token(Token = "0x4002616")]
		private const int m_maxFailedLoginAttempts = 3;

		[Token(Token = "0x4002617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_leavingChannel;

		[Token(Token = "0x4002618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int AudibleDistance;

		[Token(Token = "0x4002619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int ConversationalDistance;

		[Token(Token = "0x400261A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float AudioFadeIntensityByDistance;

		[Token(Token = "0x400261B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioFadeModel AudioFadeModel;

		[Token(Token = "0x400261C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_monitorPlayers;

		[Token(Token = "0x400261D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static Action VivoxLoginSessionPropertyChange;

		[Token(Token = "0x17000806")]
		public static VivoxUnity.IReadOnlyDictionary<ChannelId, IChannelSession> ActiveChannels
		{
			[Token(Token = "0x6002E5E")]
			[Address(RVA = "0x1300020", Offset = "0x1300020", VA = "0x1300020")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000807")]
		public static bool Initialized
		{
			[Token(Token = "0x6002E5F")]
			[Address(RVA = "0x13000F4", Offset = "0x13000F4", VA = "0x13000F4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002E60")]
			[Address(RVA = "0x130014C", Offset = "0x130014C", VA = "0x130014C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000808")]
		public bool LeavingChannel
		{
			[Token(Token = "0x6002E61")]
			[Address(RVA = "0x13001A8", Offset = "0x13001A8", VA = "0x13001A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000809")]
		public static VivoxManager Instance
		{
			[Token(Token = "0x6002E62")]
			[Address(RVA = "0x13001B0", Offset = "0x13001B0", VA = "0x13001B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000021")]
		public static event ChannelTextMessageChangedHandler OnTextMessageLogReceivedEvent
		{
			[Token(Token = "0x6002E54")]
			[Address(RVA = "0x12FF790", Offset = "0x12FF790", VA = "0x12FF790")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002E55")]
			[Address(RVA = "0x12FF868", Offset = "0x12FF868", VA = "0x12FF868")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000022")]
		public static event SessionArchiveMessageChangedHandler OnSessionArchiveMessageReceivedEvent
		{
			[Token(Token = "0x6002E56")]
			[Address(RVA = "0x12FF940", Offset = "0x12FF940", VA = "0x12FF940")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002E57")]
			[Address(RVA = "0x12FFA1C", Offset = "0x12FFA1C", VA = "0x12FFA1C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000023")]
		public static event ParticipantValueChangedHandler OnSpeechDetectedEvent
		{
			[Token(Token = "0x6002E58")]
			[Address(RVA = "0x12FFAF8", Offset = "0x12FFAF8", VA = "0x12FFAF8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002E59")]
			[Address(RVA = "0x12FFBD4", Offset = "0x12FFBD4", VA = "0x12FFBD4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public static event ParticipantStatusChangedHandler OnParticipantAddedEvent
		{
			[Token(Token = "0x6002E5A")]
			[Address(RVA = "0x12FFCB0", Offset = "0x12FFCB0", VA = "0x12FFCB0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002E5B")]
			[Address(RVA = "0x12FFD8C", Offset = "0x12FFD8C", VA = "0x12FFD8C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public static event ParticipantStatusChangedHandler OnParticipantRemovedEvent
		{
			[Token(Token = "0x6002E5C")]
			[Address(RVA = "0x12FFE68", Offset = "0x12FFE68", VA = "0x12FFE68")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002E5D")]
			[Address(RVA = "0x12FFF44", Offset = "0x12FFF44", VA = "0x12FFF44")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002E63")]
		[Address(RVA = "0x130037C", Offset = "0x130037C", VA = "0x130037C")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002E64")]
		[Address(RVA = "0x1300C60", Offset = "0x1300C60", VA = "0x1300C60")]
		public void UninitializeAsync(AsyncCallback unitializeCallback)
		{
		}

		[Token(Token = "0x6002E65")]
		[Address(RVA = "0x1300E84", Offset = "0x1300E84", VA = "0x1300E84")]
		private static void ClientUninitialize()
		{
		}

		[Token(Token = "0x6002E66")]
		[Address(RVA = "0x1300A9C", Offset = "0x1300A9C", VA = "0x1300A9C")]
		public static void SetAudioDevicesMuted(bool muted)
		{
		}

		[Token(Token = "0x6002E67")]
		[Address(RVA = "0x1301120", Offset = "0x1301120", VA = "0x1301120")]
		private static void OnApplicationFocusRefreshed(bool focus)
		{
		}

		[Token(Token = "0x6002E68")]
		[Address(RVA = "0x13011D4", Offset = "0x13011D4", VA = "0x13011D4")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6002E69")]
		[Address(RVA = "0x13011DC", Offset = "0x13011DC", VA = "0x13011DC")]
		private static void LoginSessionPropertyChanged(object sender, PropertyChangedEventArgs propertyChangedEventArgs)
		{
		}

		[Token(Token = "0x6002E6A")]
		[Address(RVA = "0x1301358", Offset = "0x1301358", VA = "0x1301358")]
		private static void OnLoginUser(IAsyncResult asyncResult)
		{
		}

		[Token(Token = "0x6002E6B")]
		[Address(RVA = "0x1301780", Offset = "0x1301780", VA = "0x1301780")]
		private static void OnChannelPropertyChanged(object sender, PropertyChangedEventArgs eventArgs)
		{
		}

		[Token(Token = "0x6002E6C")]
		[Address(RVA = "0x1302234", Offset = "0x1302234", VA = "0x1302234")]
		private static void InvokeOnSpeechDetectedEvent(string participantID, string accountName, ChannelId channel, bool speechDetected)
		{
		}

		[Token(Token = "0x6002E6D")]
		[Address(RVA = "0x1302B70", Offset = "0x1302B70", VA = "0x1302B70")]
		private static void OnParticipantAdded(object sender, KeyEventArg<string> keyEventArg)
		{
		}

		[Token(Token = "0x6002E6E")]
		[Address(RVA = "0x13030AC", Offset = "0x13030AC", VA = "0x13030AC")]
		private static void OnParticipantRemoved(object sender, KeyEventArg<string> keyEventArg)
		{
		}

		[Token(Token = "0x6002E6F")]
		[Address(RVA = "0x13032D0", Offset = "0x13032D0", VA = "0x13032D0")]
		private static void OnParticipantValueUpdated(object sender, ValueEventArg<string, IParticipant> valueEventArg)
		{
		}

		[Token(Token = "0x6002E70")]
		[Address(RVA = "0x130390C", Offset = "0x130390C", VA = "0x130390C")]
		private static void OnMessageLogReceived(object sender, QueueItemAddedEventArgs<IChannelTextMessage> textMessage)
		{
		}

		[Token(Token = "0x6002E71")]
		[Address(RVA = "0x1303BA4", Offset = "0x1303BA4", VA = "0x1303BA4")]
		private static void OnSessionArchiveAdded(object sender, QueueItemAddedEventArgs<ISessionArchiveMessage> archiveMessage)
		{
		}

		[Token(Token = "0x6002E72")]
		[Address(RVA = "0x130152C", Offset = "0x130152C", VA = "0x130152C")]
		public void LoginUserAsync()
		{
		}

		[Token(Token = "0x6002E73")]
		[Address(RVA = "0x1303E3C", Offset = "0x1303E3C", VA = "0x1303E3C")]
		public void JoinChannelAsync(Guid photonSessionGuid, ChannelType channelType, bool switchTransmission)
		{
		}

		[Token(Token = "0x6002E74")]
		[Address(RVA = "0x1300DB8", Offset = "0x1300DB8", VA = "0x1300DB8")]
		public void LeaveChannelAsync(AsyncCallback leaveChannelCallback)
		{
		}

		[Token(Token = "0x6002E75")]
		[Address(RVA = "0x13042E8", Offset = "0x13042E8", VA = "0x13042E8")]
		[IteratorStateMachine(typeof(<LeaveChannelCoroutine>d__67))]
		private IEnumerator LeaveChannelCoroutine(AsyncCallback leaveChannelCallback)
		{
			return null;
		}

		[Token(Token = "0x6002E76")]
		[Address(RVA = "0x13043A0", Offset = "0x13043A0", VA = "0x13043A0")]
		private static void SubscribeToChannelEvents()
		{
		}

		[Token(Token = "0x6002E77")]
		[Address(RVA = "0x1302378", Offset = "0x1302378", VA = "0x1302378")]
		private static void UnsubscribeFromChannelEvents()
		{
		}

		[Token(Token = "0x6002E78")]
		[Address(RVA = "0x1302170", Offset = "0x1302170", VA = "0x1302170")]
		private static void ValidateArgs(object[] objs)
		{
		}

		[Token(Token = "0x6002E79")]
		[Address(RVA = "0x13041FC", Offset = "0x13041FC", VA = "0x13041FC")]
		public static string GetSafeVivoxName(Guid photonGuid)
		{
			return null;
		}

		[Token(Token = "0x6002E7A")]
		[Address(RVA = "0x1304B88", Offset = "0x1304B88", VA = "0x1304B88")]
		public VivoxManager()
		{
		}
	}
	[Token(Token = "0x20007A8")]
	public class ParticipantData
	{
		[Token(Token = "0x1700080C")]
		public VivoxUnity.IReadOnlyDictionary<string, IParticipant> Source
		{
			[Token(Token = "0x6002E96")]
			[Address(RVA = "0x13058C4", Offset = "0x13058C4", VA = "0x13058C4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E97")]
			[Address(RVA = "0x13058CC", Offset = "0x13058CC", VA = "0x13058CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700080D")]
		public IParticipant Participant
		{
			[Token(Token = "0x6002E98")]
			[Address(RVA = "0x13058D4", Offset = "0x13058D4", VA = "0x13058D4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E99")]
			[Address(RVA = "0x13058DC", Offset = "0x13058DC", VA = "0x13058DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700080E")]
		public string Username
		{
			[Token(Token = "0x6002E9A")]
			[Address(RVA = "0x13058E4", Offset = "0x13058E4", VA = "0x13058E4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E9B")]
			[Address(RVA = "0x13058EC", Offset = "0x13058EC", VA = "0x13058EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700080F")]
		public ChannelId Channel
		{
			[Token(Token = "0x6002E9C")]
			[Address(RVA = "0x13058F4", Offset = "0x13058F4", VA = "0x13058F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E9D")]
			[Address(RVA = "0x13058FC", Offset = "0x13058FC", VA = "0x13058FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000810")]
		public IChannelSession ChannelSession
		{
			[Token(Token = "0x6002E9E")]
			[Address(RVA = "0x1305904", Offset = "0x1305904", VA = "0x1305904")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002E9F")]
			[Address(RVA = "0x130590C", Offset = "0x130590C", VA = "0x130590C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000811")]
		public string Property
		{
			[Token(Token = "0x6002EA0")]
			[Address(RVA = "0x1305914", Offset = "0x1305914", VA = "0x1305914")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EA1")]
			[Address(RVA = "0x130591C", Offset = "0x130591C", VA = "0x130591C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002EA2")]
		[Address(RVA = "0x1302D94", Offset = "0x1302D94", VA = "0x1302D94")]
		public ParticipantData(object sender, KeyEventArg<string> keyEventArg)
		{
		}

		[Token(Token = "0x6002EA3")]
		[Address(RVA = "0x130364C", Offset = "0x130364C", VA = "0x130364C")]
		public ParticipantData(object sender, ValueEventArg<string, IParticipant> valueEventArg)
		{
		}
	}
}
namespace Networking.Shop
{
	[Token(Token = "0x20007A9")]
	public class ItemShop : MonoBehaviour
	{
		[Token(Token = "0x400262F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Setup")]
		private NetworkItemShop _networkItemShop;

		[Token(Token = "0x4002630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ShopCatalogue m_shopCatalogue;

		[Token(Token = "0x4002631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private CoinAwardData m_coinAwardData;

		[Token(Token = "0x4002632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<BoltEntity> m_meleeWeaponPrefabs;

		[Token(Token = "0x4002633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Vector3 m_meleeSpawnRotationOffset;

		[Token(Token = "0x4002634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private ItemShopTerminal[] m_terminals;

		[Token(Token = "0x4002635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform[] m_lidTransforms1;

		[Token(Token = "0x4002636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform[] m_lidTransforms2;

		[Token(Token = "0x4002637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private WeaponDetector m_weaponDetector1;

		[Token(Token = "0x4002638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private WeaponDetector m_weaponDetector2;

		[Token(Token = "0x4002639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float m_lidSpeed;

		[Token(Token = "0x400263A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private ItemShopAudio m_shopAudio;

		[Token(Token = "0x400263B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Score config")]
		[SerializeField]
		private float m_headshotScoreMultiplier;

		[Token(Token = "0x400263C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly HashSet<PrefabId> m_unlockedItemPrefabIds;

		[Token(Token = "0x400263D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion[] previousRotations;

		[Token(Token = "0x17000812")]
		public ShopCatalogue Catalogue
		{
			[Token(Token = "0x6002EA8")]
			[Address(RVA = "0x1305C0C", Offset = "0x1305C0C", VA = "0x1305C0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000813")]
		public CoinAwardData CoinAwardData
		{
			[Token(Token = "0x6002EA9")]
			[Address(RVA = "0x1305C14", Offset = "0x1305C14", VA = "0x1305C14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000814")]
		public ItemShopTerminal[] Terminals
		{
			[Token(Token = "0x6002EAA")]
			[Address(RVA = "0x1305C1C", Offset = "0x1305C1C", VA = "0x1305C1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000815")]
		public float HeadshotScoreMultiplier
		{
			[Token(Token = "0x6002EAB")]
			[Address(RVA = "0x1305C24", Offset = "0x1305C24", VA = "0x1305C24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000816")]
		public NetworkItemShop NetworkItemShop
		{
			[Token(Token = "0x6002EAC")]
			[Address(RVA = "0x1305C2C", Offset = "0x1305C2C", VA = "0x1305C2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000026")]
		public static event Action WeaponPurchaseEvent
		{
			[Token(Token = "0x6002EA4")]
			[Address(RVA = "0x1305924", Offset = "0x1305924", VA = "0x1305924")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002EA5")]
			[Address(RVA = "0x13059DC", Offset = "0x13059DC", VA = "0x13059DC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public static event Action AmmoPurchaseEvent
		{
			[Token(Token = "0x6002EA6")]
			[Address(RVA = "0x1305A94", Offset = "0x1305A94", VA = "0x1305A94")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002EA7")]
			[Address(RVA = "0x1305B50", Offset = "0x1305B50", VA = "0x1305B50")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002EAD")]
		[Address(RVA = "0x1305C34", Offset = "0x1305C34", VA = "0x1305C34")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002EAE")]
		[Address(RVA = "0x1305EA8", Offset = "0x1305EA8", VA = "0x1305EA8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002EAF")]
		[Address(RVA = "0x1305FD4", Offset = "0x1305FD4", VA = "0x1305FD4")]
		private float GetRotationDelta(Quaternion currentRotation, int index)
		{
			return default(float);
		}

		[Token(Token = "0x6002EB0")]
		[Address(RVA = "0x1306184", Offset = "0x1306184", VA = "0x1306184")]
		public void ClearItemUnlocks()
		{
		}

		[Token(Token = "0x6002EB1")]
		[Address(RVA = "0x13061D4", Offset = "0x13061D4", VA = "0x13061D4")]
		public void UnlockItem(PrefabId prefabId)
		{
		}

		[Token(Token = "0x6002EB2")]
		[Address(RVA = "0x130630C", Offset = "0x130630C", VA = "0x130630C")]
		public bool HasUnlockedItem(PrefabId prefabId)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EB3")]
		[Address(RVA = "0x1306364", Offset = "0x1306364", VA = "0x1306364")]
		private void HandleCurrencyCollected(string playerName, CurrencyCollectedEvent evnt)
		{
		}

		[Token(Token = "0x6002EB4")]
		[Address(RVA = "0x13063C0", Offset = "0x13063C0", VA = "0x13063C0")]
		public void ModifyCoinBalance(string playerName, int value, bool setValue = false)
		{
		}

		[Token(Token = "0x6002EB5")]
		[Address(RVA = "0x1306750", Offset = "0x1306750", VA = "0x1306750")]
		public int GetCoinBalance(int balanceIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6002EB6")]
		[Address(RVA = "0x1306878", Offset = "0x1306878", VA = "0x1306878")]
		public int GetCoinBalance(string playerName = "")
		{
			return default(int);
		}

		[Token(Token = "0x6002EB7")]
		[Address(RVA = "0x1306AFC", Offset = "0x1306AFC", VA = "0x1306AFC")]
		public void RefreshTerminals()
		{
		}

		[Token(Token = "0x6002EB8")]
		[Address(RVA = "0x1306BA8", Offset = "0x1306BA8", VA = "0x1306BA8")]
		public void PurchaseAmmo(int entryIndex, int itemIndex, int terminalIndex)
		{
		}

		[Token(Token = "0x6002EB9")]
		[Address(RVA = "0x1306FC4", Offset = "0x1306FC4", VA = "0x1306FC4")]
		public void PurchaseItem(ShopCatalogueItem item, int terminalIndex)
		{
		}

		[Token(Token = "0x6002EBA")]
		[Address(RVA = "0x1307484", Offset = "0x1307484", VA = "0x1307484")]
		public void ExecuteShopTransaction(PrefabId prefabId, int terminalIndex, BoltPlayerContainer playerContainer)
		{
		}

		[Token(Token = "0x6002EBB")]
		[Address(RVA = "0x13076EC", Offset = "0x13076EC", VA = "0x13076EC")]
		public void ExecuteShopAmmoTransaction(int entryIndex, int itemIndex, int terminalIndex, int ammoAmount, BoltPlayerContainer playerContainer)
		{
		}

		[Token(Token = "0x6002EBC")]
		[Address(RVA = "0x13071B4", Offset = "0x13071B4", VA = "0x13071B4")]
		private void SpawnItem(ItemShopTerminal terminal, PrefabId prefabId)
		{
		}

		[Token(Token = "0x6002EBD")]
		[Address(RVA = "0x1306F20", Offset = "0x1306F20", VA = "0x1306F20")]
		public void ChangeLocalAmmo(Identifier id, int amount)
		{
		}

		[Token(Token = "0x6002EBE")]
		[Address(RVA = "0x13078F8", Offset = "0x13078F8", VA = "0x13078F8")]
		public int GetAmmoAmount(BoltPlayerContainer playerContainer, VrMagazine magazine)
		{
			return default(int);
		}

		[Token(Token = "0x6002EBF")]
		[Address(RVA = "0x1306EB4", Offset = "0x1306EB4", VA = "0x1306EB4")]
		public int GetMaxPossibleAmmo(BoltPlayerContainer playerContainer, VrMagazine magazine)
		{
			return default(int);
		}

		[Token(Token = "0x6002EC0")]
		[Address(RVA = "0x1306EFC", Offset = "0x1306EFC", VA = "0x1306EFC")]
		public int GetTotalPurchasableAmmo(BoltPlayerContainer playerContainer, int costPerBullet)
		{
			return default(int);
		}

		[Token(Token = "0x6002EC1")]
		[Address(RVA = "0x130793C", Offset = "0x130793C", VA = "0x130793C")]
		public int GetMaxPurchasableAmmo(BoltPlayerContainer playerContainer, VrMagazine magazine, int costPerBullet)
		{
			return default(int);
		}

		[Token(Token = "0x6002EC2")]
		[Address(RVA = "0x130798C", Offset = "0x130798C", VA = "0x130798C")]
		public int GetAmmoBeltSpace(BoltPlayerContainer playerContainer, VrMagazine magazine)
		{
			return default(int);
		}

		[Token(Token = "0x6002EC3")]
		[Address(RVA = "0x13079D4", Offset = "0x13079D4", VA = "0x13079D4")]
		public ItemShop()
		{
		}
	}
	[Token(Token = "0x20007AB")]
	public class ItemShopAudio : MonoBehaviour
	{
		[Token(Token = "0x6002EC6")]
		[Address(RVA = "0x1307B34", Offset = "0x1307B34", VA = "0x1307B34")]
		private void Start()
		{
		}

		[Token(Token = "0x6002EC7")]
		[Address(RVA = "0x13080B8", Offset = "0x13080B8", VA = "0x13080B8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002EC8")]
		[Address(RVA = "0x130863C", Offset = "0x130863C", VA = "0x130863C")]
		private void WeaponPurchaseEvent()
		{
		}

		[Token(Token = "0x6002EC9")]
		[Address(RVA = "0x130868C", Offset = "0x130868C", VA = "0x130868C")]
		private void AmmoPurchaseEvent()
		{
		}

		[Token(Token = "0x6002ECA")]
		[Address(RVA = "0x13086DC", Offset = "0x13086DC", VA = "0x13086DC")]
		private void UnavailablePurchaseEvent()
		{
		}

		[Token(Token = "0x6002ECB")]
		[Address(RVA = "0x130872C", Offset = "0x130872C", VA = "0x130872C")]
		private void SelectButtonEvent()
		{
		}

		[Token(Token = "0x6002ECC")]
		[Address(RVA = "0x130877C", Offset = "0x130877C", VA = "0x130877C")]
		private void BackButtonEvent()
		{
		}

		[Token(Token = "0x6002ECD")]
		[Address(RVA = "0x13087CC", Offset = "0x13087CC", VA = "0x13087CC")]
		private void OnLocalPlayerGainedCoins()
		{
		}

		[Token(Token = "0x6002ECE")]
		[Address(RVA = "0x130881C", Offset = "0x130881C", VA = "0x130881C")]
		private void OnLocalPlayerLostCoins()
		{
		}

		[Token(Token = "0x6002ECF")]
		[Address(RVA = "0x130886C", Offset = "0x130886C", VA = "0x130886C")]
		public void LidMovementLoop1(Transform transform, bool play, float speed)
		{
		}

		[Token(Token = "0x6002ED0")]
		[Address(RVA = "0x13088BC", Offset = "0x13088BC", VA = "0x13088BC")]
		public void LidMovementLoop2(Transform transform, bool play, float speed)
		{
		}

		[Token(Token = "0x6002ED1")]
		[Address(RVA = "0x130890C", Offset = "0x130890C", VA = "0x130890C")]
		public ItemShopAudio()
		{
		}
	}
	[Token(Token = "0x20007AC")]
	public class ItemShopTerminal : MonoBehaviour
	{
		[Token(Token = "0x400263F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Position and rotation that item will spawn at")]
		[SerializeField]
		private Transform m_itemLocation;

		[Token(Token = "0x4002640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Root of the display content")]
		[SerializeField]
		private Transform m_contentRoot;

		[Token(Token = "0x4002641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Space(10f)]
		private PurchaseTerminalDisplay m_purchaseDisplay;

		[Token(Token = "0x4002642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private WaveInfoTerminalDisplay m_waveInfoDisplay;

		[Token(Token = "0x4002643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_localFacePosition;

		[Token(Token = "0x17000817")]
		public Transform ItemLocation
		{
			[Token(Token = "0x6002ED2")]
			[Address(RVA = "0x1308914", Offset = "0x1308914", VA = "0x1308914")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000818")]
		public ItemShop ItemShop
		{
			[Token(Token = "0x6002ED3")]
			[Address(RVA = "0x130891C", Offset = "0x130891C", VA = "0x130891C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002ED4")]
			[Address(RVA = "0x1308924", Offset = "0x1308924", VA = "0x1308924")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000819")]
		public int TerminalIndex
		{
			[Token(Token = "0x6002ED5")]
			[Address(RVA = "0x130892C", Offset = "0x130892C", VA = "0x130892C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002ED6")]
			[Address(RVA = "0x1308934", Offset = "0x1308934", VA = "0x1308934")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700081A")]
		public BoltPlayerContainer OwningPlayer
		{
			[Token(Token = "0x6002ED7")]
			[Address(RVA = "0x130893C", Offset = "0x130893C", VA = "0x130893C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002ED8")]
		[Address(RVA = "0x1305DB4", Offset = "0x1305DB4", VA = "0x1305DB4")]
		public void Initialise(ItemShop itemShop, int terminalIndex)
		{
		}

		[Token(Token = "0x6002ED9")]
		[Address(RVA = "0x1306278", Offset = "0x1306278", VA = "0x1306278")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6002EDA")]
		[Address(RVA = "0x1308AFC", Offset = "0x1308AFC", VA = "0x1308AFC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002EDB")]
		[Address(RVA = "0x1308BF8", Offset = "0x1308BF8", VA = "0x1308BF8")]
		public void SetAsInteractable(bool value)
		{
		}

		[Token(Token = "0x6002EDC")]
		[Address(RVA = "0x1308BFC", Offset = "0x1308BFC", VA = "0x1308BFC")]
		public ItemShopTerminal()
		{
		}
	}
	[Token(Token = "0x20007AD")]
	public class WeaponDetector : MonoBehaviour
	{
		[Token(Token = "0x4002646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool m_containsWeapon;

		[Token(Token = "0x4002647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool m_containsAnything;

		[Token(Token = "0x1700081B")]
		public bool ContainsWeapon
		{
			[Token(Token = "0x6002EDD")]
			[Address(RVA = "0x1308C5C", Offset = "0x1308C5C", VA = "0x1308C5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002EDE")]
		[Address(RVA = "0x1308C64", Offset = "0x1308C64", VA = "0x1308C64")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002EDF")]
		[Address(RVA = "0x1308E04", Offset = "0x1308E04", VA = "0x1308E04")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6002EE0")]
		[Address(RVA = "0x1308E44", Offset = "0x1308E44", VA = "0x1308E44")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002EE1")]
		[Address(RVA = "0x1308D78", Offset = "0x1308D78", VA = "0x1308D78")]
		private bool IsWeapon(GameObject other)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EE2")]
		[Address(RVA = "0x1308CCC", Offset = "0x1308CCC", VA = "0x1308CCC")]
		private bool ValidLayer(int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EE3")]
		[Address(RVA = "0x1308E58", Offset = "0x1308E58", VA = "0x1308E58")]
		public WeaponDetector()
		{
		}
	}
}
namespace Networking.Shop.TerminalDisplay
{
	[Token(Token = "0x20007AE")]
	public class PurchaseTerminalDisplay : MonoBehaviour
	{
		[Token(Token = "0x400264A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TextMeshProUGUI m_coinCountTextMesh;

		[Token(Token = "0x400264B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ItemSelectionButton m_selectionButtonPrefab;

		[Token(Token = "0x400264C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ItemPurchaseButton m_purchaseButtonPrefab;

		[Token(Token = "0x400264D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AmmoPurchaseButton m_ammoPurchaseButtonPrefab;

		[Token(Token = "0x400264E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private GameObject m_selectionObject;

		[Token(Token = "0x400264F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private RectTransform m_selectionContainer;

		[Token(Token = "0x4002650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject m_purchaseObject;

		[Token(Token = "0x4002651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private RectTransform m_purchaseContainer;

		[Token(Token = "0x4002652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private ButtonMechanismLockVolume m_buttonMechanismLockVolume;

		[Token(Token = "0x4002653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float m_cooldownTime;

		[Token(Token = "0x4002654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<ItemPurchaseButton> m_itemButtonList;

		[Token(Token = "0x4002655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_itemsActiveCount;

		[Token(Token = "0x4002656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<AmmoPurchaseButton> m_ammoButtonList;

		[Token(Token = "0x4002657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int m_ammoActiveCount;

		[Token(Token = "0x1700081C")]
		private bool IsCoolingDown
		{
			[Token(Token = "0x6002EE8")]
			[Address(RVA = "0x1308E60", Offset = "0x1308E60", VA = "0x1308E60")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002EE9")]
			[Address(RVA = "0x1308E68", Offset = "0x1308E68", VA = "0x1308E68")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700081D")]
		private float TimeElapsed
		{
			[Token(Token = "0x6002EEA")]
			[Address(RVA = "0x1308E74", Offset = "0x1308E74", VA = "0x1308E74")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002EEB")]
			[Address(RVA = "0x1308E7C", Offset = "0x1308E7C", VA = "0x1308E7C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700081E")]
		private ShopCatalogueEntry SelectedEntry
		{
			[Token(Token = "0x6002EEC")]
			[Address(RVA = "0x1308E84", Offset = "0x1308E84", VA = "0x1308E84")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EED")]
			[Address(RVA = "0x1308E8C", Offset = "0x1308E8C", VA = "0x1308E8C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700081F")]
		private ItemShopTerminal Terminal
		{
			[Token(Token = "0x6002EEE")]
			[Address(RVA = "0x1308E94", Offset = "0x1308E94", VA = "0x1308E94")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EEF")]
			[Address(RVA = "0x1308E9C", Offset = "0x1308E9C", VA = "0x1308E9C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000820")]
		private ShopCatalogue Catalogue
		{
			[Token(Token = "0x6002EF0")]
			[Address(RVA = "0x1308EA4", Offset = "0x1308EA4", VA = "0x1308EA4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EF1")]
			[Address(RVA = "0x1308EAC", Offset = "0x1308EAC", VA = "0x1308EAC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x14000028")]
		public static event Action UnavailablePurchaseEvent
		{
			[Token(Token = "0x6002EE4")]
			[Address(RVA = "0x1307D18", Offset = "0x1307D18", VA = "0x1307D18")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002EE5")]
			[Address(RVA = "0x130829C", Offset = "0x130829C", VA = "0x130829C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000029")]
		public static event Action BackButtonEvent
		{
			[Token(Token = "0x6002EE6")]
			[Address(RVA = "0x1307DD0", Offset = "0x1307DD0", VA = "0x1307DD0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002EE7")]
			[Address(RVA = "0x1308354", Offset = "0x1308354", VA = "0x1308354")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002EF2")]
		[Address(RVA = "0x1308994", Offset = "0x1308994", VA = "0x1308994")]
		public void Initialise(ItemShopTerminal terminal, ShopCatalogue catalogue)
		{
		}

		[Token(Token = "0x6002EF3")]
		[Address(RVA = "0x1308F8C", Offset = "0x1308F8C", VA = "0x1308F8C")]
		private void RefreshSelectionItems()
		{
		}

		[Token(Token = "0x6002EF4")]
		[Address(RVA = "0x1309480", Offset = "0x1309480", VA = "0x1309480")]
		private void RefreshPurchaseItems()
		{
		}

		[Token(Token = "0x6002EF5")]
		[Address(RVA = "0x1308EB4", Offset = "0x1308EB4", VA = "0x1308EB4")]
		public void ShowSelectionDisplay()
		{
		}

		[Token(Token = "0x6002EF6")]
		[Address(RVA = "0x130A038", Offset = "0x130A038", VA = "0x130A038")]
		public void ShowPurchaseDisplay()
		{
		}

		[Token(Token = "0x6002EF7")]
		[Address(RVA = "0x130A0B0", Offset = "0x130A0B0", VA = "0x130A0B0")]
		private void OnSelectionClicked(ShopCatalogueEntry selectionEntry)
		{
		}

		[Token(Token = "0x6002EF8")]
		[Address(RVA = "0x130A0E8", Offset = "0x130A0E8", VA = "0x130A0E8")]
		private void OnPurchaseClicked(ShopCatalogueItem item)
		{
		}

		[Token(Token = "0x6002EF9")]
		[Address(RVA = "0x130A140", Offset = "0x130A140", VA = "0x130A140")]
		private void OnAmmoClicked(int entryIndex, int itemIndex)
		{
		}

		[Token(Token = "0x6002EFA")]
		[Address(RVA = "0x130A198", Offset = "0x130A198", VA = "0x130A198")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002EFB")]
		[Address(RVA = "0x130A220", Offset = "0x130A220", VA = "0x130A220")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002EFC")]
		[Address(RVA = "0x130A2A0", Offset = "0x130A2A0", VA = "0x130A2A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002EFD")]
		[Address(RVA = "0x13089CC", Offset = "0x13089CC", VA = "0x13089CC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6002EFE")]
		[Address(RVA = "0x130A31C", Offset = "0x130A31C", VA = "0x130A31C")]
		public PurchaseTerminalDisplay()
		{
		}
	}
	[Token(Token = "0x20007AF")]
	public class WaveInfoTerminalDisplay : MonoBehaviour
	{
		[Token(Token = "0x400265D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[UnityEngine.Tooltip("Root of the display content")]
		private Transform m_contentRoot;

		[Token(Token = "0x400265E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TextMeshProUGUI m_remainingLivesText;

		[Token(Token = "0x400265F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI[] m_playerNameText;

		[Token(Token = "0x4002660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI[] m_playerScoreText;

		[Token(Token = "0x4002661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshProUGUI m_waveCountText;

		[Token(Token = "0x4002662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ItemShop m_itemShop;

		[Token(Token = "0x4002663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 m_localFacePosition;

		[Token(Token = "0x4002664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MultiplayerScoreTracker m_scoreTracker;

		[Token(Token = "0x6002EFF")]
		[Address(RVA = "0x130A400", Offset = "0x130A400", VA = "0x130A400")]
		private void Start()
		{
		}

		[Token(Token = "0x6002F00")]
		[Address(RVA = "0x130A5C0", Offset = "0x130A5C0", VA = "0x130A5C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F01")]
		[Address(RVA = "0x130AD78", Offset = "0x130AD78", VA = "0x130AD78")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002F02")]
		[Address(RVA = "0x130AC40", Offset = "0x130AC40", VA = "0x130AC40")]
		private void UpdateLivesText()
		{
		}

		[Token(Token = "0x6002F03")]
		[Address(RVA = "0x130AA04", Offset = "0x130AA04", VA = "0x130AA04")]
		private void UpdateWavesText()
		{
		}

		[Token(Token = "0x6002F04")]
		[Address(RVA = "0x130AEAC", Offset = "0x130AEAC", VA = "0x130AEAC")]
		public void SetItemShop(ItemShop itemShop)
		{
		}

		[Token(Token = "0x6002F05")]
		[Address(RVA = "0x130AEB4", Offset = "0x130AEB4", VA = "0x130AEB4")]
		public WaveInfoTerminalDisplay()
		{
		}
	}
}
namespace Networking.Shop.TerminalDisplay.Buttons
{
	[Token(Token = "0x20007B0")]
	public class AmmoPurchaseButton : AShopButton
	{
		[Token(Token = "0x4002665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI m_amountTextMesh;

		[Token(Token = "0x4002666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private TextMeshProUGUI m_costTextMesh;

		[Token(Token = "0x17000821")]
		public TextMeshProUGUI AmountTextMesh
		{
			[Token(Token = "0x6002F06")]
			[Address(RVA = "0x130AF14", Offset = "0x130AF14", VA = "0x130AF14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000822")]
		public TextMeshProUGUI CostTextMesh
		{
			[Token(Token = "0x6002F07")]
			[Address(RVA = "0x130AF1C", Offset = "0x130AF1C", VA = "0x130AF1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000823")]
		private int EntryIndex
		{
			[Token(Token = "0x6002F08")]
			[Address(RVA = "0x130AF24", Offset = "0x130AF24", VA = "0x130AF24")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002F09")]
			[Address(RVA = "0x130AF2C", Offset = "0x130AF2C", VA = "0x130AF2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000824")]
		private int ItemIndex
		{
			[Token(Token = "0x6002F0A")]
			[Address(RVA = "0x130AF34", Offset = "0x130AF34", VA = "0x130AF34")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002F0B")]
			[Address(RVA = "0x130AF3C", Offset = "0x130AF3C", VA = "0x130AF3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000825")]
		private Action<int, int> Callback
		{
			[Token(Token = "0x6002F0C")]
			[Address(RVA = "0x130AF44", Offset = "0x130AF44", VA = "0x130AF44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F0D")]
			[Address(RVA = "0x130AF4C", Offset = "0x130AF4C", VA = "0x130AF4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002F0E")]
		[Address(RVA = "0x1309DB0", Offset = "0x1309DB0", VA = "0x1309DB0")]
		public void SetData(int entryIndex, int itemIndex, Action<int, int> callback)
		{
		}

		[Token(Token = "0x6002F0F")]
		[Address(RVA = "0x1309DC0", Offset = "0x1309DC0", VA = "0x1309DC0")]
		public void RefreshState(bool canAfford, bool hasWeapon, bool isCoolingDown, bool beltSpace)
		{
		}

		[Token(Token = "0x6002F10")]
		[Address(RVA = "0x130B098", Offset = "0x130B098", VA = "0x130B098", Slot = "4")]
		protected override void OnButtonClicked()
		{
		}

		[Token(Token = "0x6002F11")]
		[Address(RVA = "0x130B0B8", Offset = "0x130B0B8", VA = "0x130B0B8")]
		public AmmoPurchaseButton()
		{
		}
	}
	[Token(Token = "0x20007B1")]
	public abstract class AShopButton : MonoBehaviour
	{
		[Token(Token = "0x400266A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button m_button;

		[Token(Token = "0x400266B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Color m_ownedColor;

		[Token(Token = "0x400266C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color m_cantAffordColor;

		[Token(Token = "0x400266D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color m_canAffordColor;

		[Token(Token = "0x400266E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Color m_coolingDownColor;

		[Token(Token = "0x400266F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private RectTransform m_rectTransform;

		[Token(Token = "0x4002670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private BoxCollider m_boxCollider;

		[Token(Token = "0x17000826")]
		protected Button Button
		{
			[Token(Token = "0x6002F12")]
			[Address(RVA = "0x130B0C8", Offset = "0x130B0C8", VA = "0x130B0C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000827")]
		protected Color OwnedColor
		{
			[Token(Token = "0x6002F13")]
			[Address(RVA = "0x130B0D0", Offset = "0x130B0D0", VA = "0x130B0D0")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000828")]
		protected Color CantAffordColor
		{
			[Token(Token = "0x6002F14")]
			[Address(RVA = "0x130B0DC", Offset = "0x130B0DC", VA = "0x130B0DC")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x17000829")]
		protected Color CanAffordColor
		{
			[Token(Token = "0x6002F15")]
			[Address(RVA = "0x130B0E8", Offset = "0x130B0E8", VA = "0x130B0E8")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700082A")]
		protected Color CoolingDownColor
		{
			[Token(Token = "0x6002F16")]
			[Address(RVA = "0x130B0F4", Offset = "0x130B0F4", VA = "0x130B0F4")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x6002F17")]
		[Address(RVA = "0x1309380", Offset = "0x1309380", VA = "0x1309380")]
		public void SetSprite(Sprite sprite)
		{
		}

		[Token(Token = "0x6002F18")]
		[Address(RVA = "0x130AF90", Offset = "0x130AF90", VA = "0x130AF90")]
		protected void EnableButton()
		{
		}

		[Token(Token = "0x6002F19")]
		[Address(RVA = "0x130AF54", Offset = "0x130AF54", VA = "0x130AF54")]
		protected void DisableButton()
		{
		}

		[Token(Token = "0x6002F1A")]
		[Address(RVA = "0x130B100", Offset = "0x130B100", VA = "0x130B100")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002F1B")]
		[Address(RVA = "0x130B104", Offset = "0x130B104", VA = "0x130B104")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002F1C")]
		protected abstract void OnButtonClicked();

		[Token(Token = "0x6002F1D")]
		[Address(RVA = "0x130B0C0", Offset = "0x130B0C0", VA = "0x130B0C0")]
		protected AShopButton()
		{
		}
	}
	[Token(Token = "0x20007B2")]
	public class ItemPurchaseButton : AShopButton
	{
		[Token(Token = "0x4002671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI m_costTextMesh;

		[Token(Token = "0x1700082B")]
		public TextMeshProUGUI CostTextMesh
		{
			[Token(Token = "0x6002F1E")]
			[Address(RVA = "0x130B108", Offset = "0x130B108", VA = "0x130B108")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700082C")]
		private ShopCatalogueItem Item
		{
			[Token(Token = "0x6002F1F")]
			[Address(RVA = "0x130B110", Offset = "0x130B110", VA = "0x130B110")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F20")]
			[Address(RVA = "0x130B118", Offset = "0x130B118", VA = "0x130B118")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700082D")]
		private Action<ShopCatalogueItem> Callback
		{
			[Token(Token = "0x6002F21")]
			[Address(RVA = "0x130B120", Offset = "0x130B120", VA = "0x130B120")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F22")]
			[Address(RVA = "0x130B128", Offset = "0x130B128", VA = "0x130B128")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002F23")]
		[Address(RVA = "0x1309EF8", Offset = "0x1309EF8", VA = "0x1309EF8")]
		public void SetData(ShopCatalogueItem item, Action<ShopCatalogueItem> callback)
		{
		}

		[Token(Token = "0x6002F24")]
		[Address(RVA = "0x1309F28", Offset = "0x1309F28", VA = "0x1309F28")]
		public void RefreshState(bool canAfford, bool isOwned, bool isConsumable, bool isCoolingDown)
		{
		}

		[Token(Token = "0x6002F25")]
		[Address(RVA = "0x130B130", Offset = "0x130B130", VA = "0x130B130", Slot = "4")]
		protected override void OnButtonClicked()
		{
		}

		[Token(Token = "0x6002F26")]
		[Address(RVA = "0x130B150", Offset = "0x130B150", VA = "0x130B150")]
		public ItemPurchaseButton()
		{
		}
	}
	[Token(Token = "0x20007B3")]
	public class ItemSelectionButton : AShopButton
	{
		[Token(Token = "0x4002674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private TextMeshProUGUI m_textMesh;

		[Token(Token = "0x1700082E")]
		private ShopCatalogueEntry Entry
		{
			[Token(Token = "0x6002F29")]
			[Address(RVA = "0x130B158", Offset = "0x130B158", VA = "0x130B158")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F2A")]
			[Address(RVA = "0x130B160", Offset = "0x130B160", VA = "0x130B160")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700082F")]
		private Action<ShopCatalogueEntry> Callback
		{
			[Token(Token = "0x6002F2B")]
			[Address(RVA = "0x130B168", Offset = "0x130B168", VA = "0x130B168")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F2C")]
			[Address(RVA = "0x130B170", Offset = "0x130B170", VA = "0x130B170")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public static event Action SelectEvent
		{
			[Token(Token = "0x6002F27")]
			[Address(RVA = "0x1307E8C", Offset = "0x1307E8C", VA = "0x1307E8C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002F28")]
			[Address(RVA = "0x1308410", Offset = "0x1308410", VA = "0x1308410")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002F2D")]
		[Address(RVA = "0x1309350", Offset = "0x1309350", VA = "0x1309350")]
		public void SetData(ShopCatalogueEntry entry, Action<ShopCatalogueEntry> callback)
		{
		}

		[Token(Token = "0x6002F2E")]
		[Address(RVA = "0x13093B0", Offset = "0x13093B0", VA = "0x13093B0")]
		public void RefreshState(bool canAfford, bool isOwned, bool isConsumable, bool isCoolingDown)
		{
		}

		[Token(Token = "0x6002F2F")]
		[Address(RVA = "0x130B178", Offset = "0x130B178", VA = "0x130B178", Slot = "4")]
		protected override void OnButtonClicked()
		{
		}

		[Token(Token = "0x6002F30")]
		[Address(RVA = "0x130B1FC", Offset = "0x130B1FC", VA = "0x130B1FC")]
		public ItemSelectionButton()
		{
		}
	}
}
namespace Networking.Shop.Data
{
	[Token(Token = "0x20007B4")]
	[CreateAssetMenu(menuName = "Pixel Toys/Multiplayer/Shop Catalogue")]
	public class ShopCatalogue : ScriptableObject
	{
		[Token(Token = "0x4002678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_lockDuringWave;

		[Token(Token = "0x4002679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<ShopCatalogueEntry> m_entries;

		[Token(Token = "0x17000830")]
		public bool LockDuringWave
		{
			[Token(Token = "0x6002F31")]
			[Address(RVA = "0x130B204", Offset = "0x130B204", VA = "0x130B204")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000831")]
		public List<ShopCatalogueEntry> Entries
		{
			[Token(Token = "0x6002F32")]
			[Address(RVA = "0x130B20C", Offset = "0x130B20C", VA = "0x130B20C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002F33")]
		[Address(RVA = "0x1307578", Offset = "0x1307578", VA = "0x1307578")]
		public ShopCatalogueItem GetCatalogueItemByPrefabId(PrefabId prefabId)
		{
			return null;
		}

		[Token(Token = "0x6002F34")]
		[Address(RVA = "0x130B214", Offset = "0x130B214", VA = "0x130B214")]
		public ShopCatalogue()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007B5")]
	public class ShopCatalogueEntry
	{
		[Token(Token = "0x400267A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Sprite m_buttonSprite;

		[Token(Token = "0x400267B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ShopCatalogueItem[] m_items;

		[Token(Token = "0x400267C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_isConsumable;

		[Token(Token = "0x400267D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool m_excludeFromCoop;

		[Token(Token = "0x17000832")]
		public Sprite ButtonSprite
		{
			[Token(Token = "0x6002F35")]
			[Address(RVA = "0x130B21C", Offset = "0x130B21C", VA = "0x130B21C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000833")]
		public ShopCatalogueItem[] Items
		{
			[Token(Token = "0x6002F36")]
			[Address(RVA = "0x130B224", Offset = "0x130B224", VA = "0x130B224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000834")]
		public bool IsConsumable
		{
			[Token(Token = "0x6002F37")]
			[Address(RVA = "0x130B22C", Offset = "0x130B22C", VA = "0x130B22C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000835")]
		public bool ExcludeFromCoop
		{
			[Token(Token = "0x6002F38")]
			[Address(RVA = "0x130B234", Offset = "0x130B234", VA = "0x130B234")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002F39")]
		[Address(RVA = "0x130B23C", Offset = "0x130B23C", VA = "0x130B23C")]
		public ShopCatalogueEntry()
		{
		}
	}
}
namespace Networking.PlatformShared
{
	[Token(Token = "0x20007B6")]
	public static class PlatformShared
	{
		[Token(Token = "0x6002F3A")]
		[Address(RVA = "0x130B244", Offset = "0x130B244", VA = "0x130B244")]
		public static void SetPresence(bool joinable, string destinationName, string lobbySessionID, bool launchInvitePanel, [Optional] Action onComplete)
		{
		}

		[Token(Token = "0x6002F3B")]
		[Address(RVA = "0x130B3D4", Offset = "0x130B3D4", VA = "0x130B3D4")]
		public static void SetPrecence(bool joinable)
		{
		}
	}
}
namespace Networking.Pico
{
	[Token(Token = "0x20007B9")]
	public class PicoJoinIntent
	{
		[Token(Token = "0x4002683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string DeeplinkMessage;

		[Token(Token = "0x4002684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string DestinationApiName;

		[Token(Token = "0x4002685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string LobbySessionId;

		[Token(Token = "0x4002686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly string MatchSessionId;

		[Token(Token = "0x6002F41")]
		[Address(RVA = "0x130B60C", Offset = "0x130B60C", VA = "0x130B60C")]
		public PicoJoinIntent(string deeplinkMessage, string destinationApiName, string lobbySessionId, string matchSessionId)
		{
		}

		[Token(Token = "0x6002F42")]
		[Address(RVA = "0x130B680", Offset = "0x130B680", VA = "0x130B680")]
		public PicoJoinIntent(LaunchDetails launchDetails)
		{
		}
	}
	[Token(Token = "0x20007BA")]
	public static class PicoJoinIntentHandler
	{
		[Token(Token = "0x20007BC")]
		[CompilerGenerated]
		private sealed class <WaitUntilGameHasLoadedThenReturnToMainMenuRoutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400268B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400268C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000837")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002F52")]
				[Address(RVA = "0x130C2FC", Offset = "0x130C2FC", VA = "0x130C2FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000838")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F54")]
				[Address(RVA = "0x130C344", Offset = "0x130C344", VA = "0x130C344", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F4F")]
			[Address(RVA = "0x130C090", Offset = "0x130C090", VA = "0x130C090")]
			[DebuggerHidden]
			public <WaitUntilGameHasLoadedThenReturnToMainMenuRoutine>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6002F50")]
			[Address(RVA = "0x130C208", Offset = "0x130C208", VA = "0x130C208", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F51")]
			[Address(RVA = "0x130C20C", Offset = "0x130C20C", VA = "0x130C20C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F53")]
			[Address(RVA = "0x130C304", Offset = "0x130C304", VA = "0x130C304", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x17000836")]
		public static PicoJoinIntent JoinIntent
		{
			[Token(Token = "0x6002F43")]
			[Address(RVA = "0x130B6E8", Offset = "0x130B6E8", VA = "0x130B6E8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002F44")]
			[Address(RVA = "0x130B730", Offset = "0x130B730", VA = "0x130B730")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002F45")]
		[Address(RVA = "0x130B788", Offset = "0x130B788", VA = "0x130B788")]
		public static void HandleJoinIntent()
		{
		}

		[Token(Token = "0x6002F46")]
		[Address(RVA = "0x130BA08", Offset = "0x130BA08", VA = "0x130BA08")]
		public static void SetJoinIntentCallbacks()
		{
		}

		[Token(Token = "0x6002F47")]
		[Address(RVA = "0x130BA84", Offset = "0x130BA84", VA = "0x130BA84")]
		public static void OnLaunchDetails(LaunchDetails launchDetails)
		{
		}

		[Token(Token = "0x6002F48")]
		[Address(RVA = "0x130BFB4", Offset = "0x130BFB4", VA = "0x130BFB4")]
		[IteratorStateMachine(typeof(<WaitUntilGameHasLoadedThenReturnToMainMenuRoutine>d__7))]
		private static IEnumerator WaitUntilGameHasLoadedThenReturnToMainMenuRoutine()
		{
			return null;
		}

		[Token(Token = "0x6002F49")]
		[Address(RVA = "0x130C014", Offset = "0x130C014", VA = "0x130C014")]
		private static void ExitGame()
		{
		}

		[Token(Token = "0x6002F4A")]
		[Address(RVA = "0x130C0B8", Offset = "0x130C0B8", VA = "0x130C0B8")]
		private static void OnLaunchIntentChanged(Message<string> message)
		{
		}
	}
	[Token(Token = "0x20007BD")]
	public static class PicoRooms
	{
		[Token(Token = "0x400268D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<Room> OnRoomCreated;

		[Token(Token = "0x400268E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<Room> OnRoomCreatedFailed;

		[Token(Token = "0x400268F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Action<Room> OnRoomJoined;

		[Token(Token = "0x4002690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action<Room> OnRoomJoinedFailed;

		[Token(Token = "0x4002691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action<ulong> OnRoomLeft;

		[Token(Token = "0x4002692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Action<ulong> OnRoomLeftFailed;

		[Token(Token = "0x17000839")]
		public static ulong CurrentRoomID
		{
			[Token(Token = "0x6002F55")]
			[Address(RVA = "0x130C34C", Offset = "0x130C34C", VA = "0x130C34C")]
			[CompilerGenerated]
			get
			{
				return default(ulong);
			}
			[Token(Token = "0x6002F56")]
			[Address(RVA = "0x130C394", Offset = "0x130C394", VA = "0x130C394")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002F57")]
		[Address(RVA = "0x130C3E0", Offset = "0x130C3E0", VA = "0x130C3E0")]
		public static void SetCallbacks()
		{
		}

		[Token(Token = "0x6002F58")]
		[Address(RVA = "0x130C45C", Offset = "0x130C45C", VA = "0x130C45C")]
		public static void CreateRoomAsync([Optional] Action<bool> createRoomCallback)
		{
		}

		[Token(Token = "0x6002F59")]
		[Address(RVA = "0x130C704", Offset = "0x130C704", VA = "0x130C704")]
		public static void JoinRoomAsync(ulong roomID, [Optional] Action<Room> joinRoomAsyncCallback)
		{
		}

		[Token(Token = "0x6002F5A")]
		[Address(RVA = "0x130C810", Offset = "0x130C810", VA = "0x130C810")]
		public static void LeaveCurrentRoomAsync()
		{
		}

		[Token(Token = "0x6002F5B")]
		[Address(RVA = "0x130C854", Offset = "0x130C854", VA = "0x130C854")]
		public static void LeaveRoomAsync(ulong roomID, [Optional] Action<bool> leaveRoomCallback)
		{
		}

		[Token(Token = "0x6002F5C")]
		private static bool ValidateMessage<T>(Message<T> message)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F5D")]
		[Address(RVA = "0x130C95C", Offset = "0x130C95C", VA = "0x130C95C")]
		private static void RoomInviteAccepted(Message<string> message)
		{
		}
	}
}
namespace Networking.Multiplay
{
	[Token(Token = "0x20007C1")]
	public static class MultiplayApiBridge
	{
		[Token(Token = "0x20007C3")]
		[CompilerGenerated]
		private sealed class <UnreserveServer>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400269F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700083A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002F6F")]
				[Address(RVA = "0x130D4DC", Offset = "0x130D4DC", VA = "0x130D4DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700083B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F71")]
				[Address(RVA = "0x130D524", Offset = "0x130D524", VA = "0x130D524", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F6C")]
			[Address(RVA = "0x130D24C", Offset = "0x130D24C", VA = "0x130D24C")]
			[DebuggerHidden]
			public <UnreserveServer>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6002F6D")]
			[Address(RVA = "0x130D394", Offset = "0x130D394", VA = "0x130D394", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F6E")]
			[Address(RVA = "0x130D398", Offset = "0x130D398", VA = "0x130D398", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F70")]
			[Address(RVA = "0x130D4E4", Offset = "0x130D4E4", VA = "0x130D4E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20007C4")]
		[CompilerGenerated]
		private sealed class <ReserveServer>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40026A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40026A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700083C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002F75")]
				[Address(RVA = "0x130D674", Offset = "0x130D674", VA = "0x130D674", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700083D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002F77")]
				[Address(RVA = "0x130D6BC", Offset = "0x130D6BC", VA = "0x130D6BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002F72")]
			[Address(RVA = "0x130D2D4", Offset = "0x130D2D4", VA = "0x130D2D4")]
			[DebuggerHidden]
			public <ReserveServer>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6002F73")]
			[Address(RVA = "0x130D52C", Offset = "0x130D52C", VA = "0x130D52C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002F74")]
			[Address(RVA = "0x130D530", Offset = "0x130D530", VA = "0x130D530", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002F76")]
			[Address(RVA = "0x130D67C", Offset = "0x130D67C", VA = "0x130D67C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static APIClient _multiplayClient;

		[Token(Token = "0x400269A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string MultiplayAccessKey;

		[Token(Token = "0x400269B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string MultiplaySecretKey;

		[Token(Token = "0x400269C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int MachineId;

		[Token(Token = "0x400269D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static int ServerId;

		[Token(Token = "0x6002F64")]
		[Address(RVA = "0x130CD54", Offset = "0x130CD54", VA = "0x130CD54")]
		[RuntimeInitializeOnLoadMethod]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6002F65")]
		[Address(RVA = "0x130D138", Offset = "0x130D138", VA = "0x130D138")]
		private static void ReadCLI(string name, out int result)
		{
		}

		[Token(Token = "0x6002F66")]
		[Address(RVA = "0x130CFB8", Offset = "0x130CFB8", VA = "0x130CFB8")]
		private static void ReadCLI(string name, out string result)
		{
		}

		[Token(Token = "0x6002F67")]
		[Address(RVA = "0x130D1EC", Offset = "0x130D1EC", VA = "0x130D1EC")]
		[IteratorStateMachine(typeof(<UnreserveServer>d__8))]
		public static IEnumerator UnreserveServer()
		{
			return null;
		}

		[Token(Token = "0x6002F68")]
		[Address(RVA = "0x130D274", Offset = "0x130D274", VA = "0x130D274")]
		[IteratorStateMachine(typeof(<ReserveServer>d__9))]
		public static IEnumerator ReserveServer()
		{
			return null;
		}
	}
}
namespace Networking.Interactables
{
	[Token(Token = "0x20007C5")]
	public sealed class NetworkItemShop : NetworkEntityBase<IItemShopState>
	{
		[Token(Token = "0x40026A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private ItemShop m_itemShop;

		[Token(Token = "0x40026A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private WaveManager m_waveManager;

		[Token(Token = "0x40026A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int m_localPlayerLastCoinValue;

		[Token(Token = "0x1400002B")]
		public static event Action OnLocalPlayerGainedCoins
		{
			[Token(Token = "0x6002F78")]
			[Address(RVA = "0x1307F44", Offset = "0x1307F44", VA = "0x1307F44")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002F79")]
			[Address(RVA = "0x13084C8", Offset = "0x13084C8", VA = "0x13084C8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public static event Action OnLocalPlayerLostCoins
		{
			[Token(Token = "0x6002F7A")]
			[Address(RVA = "0x1307FFC", Offset = "0x1307FFC", VA = "0x1307FFC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002F7B")]
			[Address(RVA = "0x1308580", Offset = "0x1308580", VA = "0x1308580")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002F7C")]
		[Address(RVA = "0x130D6C4", Offset = "0x130D6C4", VA = "0x130D6C4", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6002F7D")]
		[Address(RVA = "0x130DF34", Offset = "0x130DF34", VA = "0x130DF34", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x6002F7E")]
		[Address(RVA = "0x130E1A8", Offset = "0x130E1A8", VA = "0x130E1A8")]
		private void OnPlayerAttached(BoltPlayerContainer player)
		{
		}

		[Token(Token = "0x6002F7F")]
		[Address(RVA = "0x130E1C0", Offset = "0x130E1C0", VA = "0x130E1C0")]
		private void OnPlayerDetached(BoltPlayerContainer player)
		{
		}

		[Token(Token = "0x6002F80")]
		[Address(RVA = "0x130DB08", Offset = "0x130DB08", VA = "0x130DB08")]
		public void InitialiseCoins(string playerName)
		{
		}

		[Token(Token = "0x6002F81")]
		[Address(RVA = "0x130646C", Offset = "0x130646C", VA = "0x130646C")]
		public void ModifyCoinBalance(string playerName, int value, bool setValue)
		{
		}

		[Token(Token = "0x6002F82")]
		[Address(RVA = "0x130E618", Offset = "0x130E618", VA = "0x130E618")]
		private void OnWaveStart(int waveIndex)
		{
		}

		[Token(Token = "0x6002F83")]
		[Address(RVA = "0x130E670", Offset = "0x130E670", VA = "0x130E670")]
		private void OnWaveEnd(int waveIndex, bool b)
		{
		}

		[Token(Token = "0x6002F84")]
		[Address(RVA = "0x130E86C", Offset = "0x130E86C", VA = "0x130E86C")]
		private void OnGlobalDamage(HealthStatusInfo info)
		{
		}

		[Token(Token = "0x6002F85")]
		[Address(RVA = "0x130ED40", Offset = "0x130ED40", VA = "0x130ED40")]
		private void OnStateCallback(IState baseState, string propertyPath, ArrayIndices arrayIndices)
		{
		}

		[Token(Token = "0x6002F86")]
		[Address(RVA = "0x130ED60", Offset = "0x130ED60", VA = "0x130ED60")]
		public void OnCoinBalancesChanged()
		{
		}

		[Token(Token = "0x6002F87")]
		[Address(RVA = "0x130EC7C", Offset = "0x130EC7C", VA = "0x130EC7C")]
		private int GetCoinAward(Identifier id)
		{
			return default(int);
		}

		[Token(Token = "0x6002F88")]
		[Address(RVA = "0x130E5C8", Offset = "0x130E5C8", VA = "0x130E5C8")]
		public int GetCoinAwardByWave(int wave)
		{
			return default(int);
		}

		[Token(Token = "0x6002F89")]
		[Address(RVA = "0x130F360", Offset = "0x130F360", VA = "0x130F360")]
		public NetworkItemShop()
		{
		}
	}
}
namespace Networking.Flow
{
	[Token(Token = "0x20007C6")]
	public class State_IncrementSpectatorPositionIndex : BaseStateAttachedLogic
	{
		[Token(Token = "0x1700083E")]
		[StateConfig("Increment")]
		public int Value
		{
			[Token(Token = "0x6002F8A")]
			[Address(RVA = "0x130F3CC", Offset = "0x130F3CC", VA = "0x130F3CC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002F8B")]
			[Address(RVA = "0x130F3D4", Offset = "0x130F3D4", VA = "0x130F3D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002F8C")]
		[Address(RVA = "0x130F3DC", Offset = "0x130F3DC", VA = "0x130F3DC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002F8D")]
		[Address(RVA = "0x130F520", Offset = "0x130F520", VA = "0x130F520")]
		public State_IncrementSpectatorPositionIndex()
		{
		}
	}
	[Token(Token = "0x20007C7")]
	public class State_PrimaryButtonDown : BaseStateAttachedLogic
	{
		[Token(Token = "0x6002F8E")]
		[Address(RVA = "0x130F528", Offset = "0x130F528", VA = "0x130F528", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002F8F")]
		[Address(RVA = "0x130F608", Offset = "0x130F608", VA = "0x130F608", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002F90")]
		[Address(RVA = "0x130F52C", Offset = "0x130F52C", VA = "0x130F52C")]
		private void CheckInput()
		{
		}

		[Token(Token = "0x6002F91")]
		[Address(RVA = "0x130F60C", Offset = "0x130F60C", VA = "0x130F60C")]
		public State_PrimaryButtonDown()
		{
		}
	}
	[Token(Token = "0x20007C8")]
	public class State_SecondaryButtonDown : BaseStateAttachedLogic
	{
		[Token(Token = "0x6002F92")]
		[Address(RVA = "0x130F614", Offset = "0x130F614", VA = "0x130F614", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x6002F93")]
		[Address(RVA = "0x130F6F4", Offset = "0x130F6F4", VA = "0x130F6F4", Slot = "11")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x6002F94")]
		[Address(RVA = "0x130F618", Offset = "0x130F618", VA = "0x130F618")]
		private void CheckInput()
		{
		}

		[Token(Token = "0x6002F95")]
		[Address(RVA = "0x130F6F8", Offset = "0x130F6F8", VA = "0x130F6F8")]
		public State_SecondaryButtonDown()
		{
		}
	}
}
namespace Score
{
	[Token(Token = "0x20007C9")]
	[CreateAssetMenu(menuName = "Score")]
	public class ScorePoints : ScriptableObject
	{
		[Token(Token = "0x40026A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<EnemyScore> m_enemyPointsPerKill;

		[Token(Token = "0x40026AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<ExtractionTimerScore> m_scoreByExtractionTime;

		[Token(Token = "0x40026AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int m_headshotBonus;

		[Token(Token = "0x40026AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private int m_levelCompletedBonus;

		[Token(Token = "0x40026AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_twoPlayerModifier;

		[Token(Token = "0x40026AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<string, EnemyScore> m_enemyMap;

		[Token(Token = "0x1700083F")]
		public int HeadshotBonus
		{
			[Token(Token = "0x6002F96")]
			[Address(RVA = "0x130F700", Offset = "0x130F700", VA = "0x130F700")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000840")]
		public int LevelCompletedBonus
		{
			[Token(Token = "0x6002F97")]
			[Address(RVA = "0x130F708", Offset = "0x130F708", VA = "0x130F708")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000841")]
		public float TwoPlayerModifier
		{
			[Token(Token = "0x6002F98")]
			[Address(RVA = "0x130F710", Offset = "0x130F710", VA = "0x130F710")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002F99")]
		[Address(RVA = "0x130F718", Offset = "0x130F718", VA = "0x130F718")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002F9A")]
		[Address(RVA = "0x130F910", Offset = "0x130F910", VA = "0x130F910")]
		public int GetScoreByEnemy(string identifier)
		{
			return default(int);
		}

		[Token(Token = "0x6002F9B")]
		[Address(RVA = "0x130F9A8", Offset = "0x130F9A8", VA = "0x130F9A8")]
		public float GetTimeBonusMultiplier(float time)
		{
			return default(float);
		}

		[Token(Token = "0x6002F9C")]
		[Address(RVA = "0x130FA94", Offset = "0x130FA94", VA = "0x130FA94")]
		public ScorePoints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007CA")]
	public class EnemyScore
	{
		[Token(Token = "0x40026AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public Identifier enemyId;

		[Token(Token = "0x40026B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public int scorePoints;

		[Token(Token = "0x6002F9D")]
		[Address(RVA = "0x130FB74", Offset = "0x130FB74", VA = "0x130FB74")]
		public EnemyScore()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007CB")]
	public class ExtractionTimerScore
	{
		[Token(Token = "0x40026B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public int minutes;

		[Token(Token = "0x40026B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public int seconds;

		[Token(Token = "0x40026B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float scoreMultiplier;

		[Token(Token = "0x6002F9E")]
		[Address(RVA = "0x130FA80", Offset = "0x130FA80", VA = "0x130FA80")]
		public float GetTimeInSeconds()
		{
			return default(float);
		}

		[Token(Token = "0x6002F9F")]
		[Address(RVA = "0x130FB7C", Offset = "0x130FB7C", VA = "0x130FB7C")]
		public ExtractionTimerScore()
		{
		}
	}
}
namespace Gamekit3D.Cameras
{
	[Token(Token = "0x20007CC")]
	[CreateAssetMenu(fileName = "GlobalCullLayerSetup", menuName = "Pixel Toys/Culling/Global Cull Layer Setup")]
	public class GlobalLayerCullSetup : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20007CD")]
		public class QualitySpecificSettings
		{
			[Token(Token = "0x40026B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int minimumQualitySetting;

			[Token(Token = "0x40026BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float nearPlane;

			[Token(Token = "0x40026BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float farPlane;

			[Token(Token = "0x40026BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float[] distances;

			[Token(Token = "0x6002FA9")]
			[Address(RVA = "0x1310208", Offset = "0x1310208", VA = "0x1310208")]
			public QualitySpecificSettings()
			{
			}
		}

		[Token(Token = "0x40026B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float layerDistanceBias;

		[Token(Token = "0x40026B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public QualitySpecificSettings[] settings;

		[Token(Token = "0x40026B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Enable this if you want to visualize dynamic layer culling in the scene view at edit time.")]
		private bool m_enableInSceneView;

		[Token(Token = "0x40026B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_pickedSetting;

		[Token(Token = "0x40026B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] m_computedDistances;

		[Token(Token = "0x17000842")]
		public bool EnableInSceneView
		{
			[Token(Token = "0x6002FA0")]
			[Address(RVA = "0x130FB84", Offset = "0x130FB84", VA = "0x130FB84")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002FA1")]
			[Address(RVA = "0x130FB8C", Offset = "0x130FB8C", VA = "0x130FB8C")]
			set
			{
			}
		}

		[Token(Token = "0x6002FA2")]
		[Address(RVA = "0x130FB98", Offset = "0x130FB98", VA = "0x130FB98")]
		[ContextMenu("Apply to Mani Camera")]
		public void ApplyToMainCamera()
		{
		}

		[Token(Token = "0x6002FA3")]
		[Address(RVA = "0x130FC04", Offset = "0x130FC04", VA = "0x130FC04")]
		public void ComputeLayerCullDistances()
		{
		}

		[Token(Token = "0x6002FA4")]
		[Address(RVA = "0x1310040", Offset = "0x1310040", VA = "0x1310040")]
		public void ResetLayerCullDistances()
		{
		}

		[Token(Token = "0x6002FA5")]
		[Address(RVA = "0x130FEDC", Offset = "0x130FEDC", VA = "0x130FEDC")]
		private void FindSettings()
		{
		}

		[Token(Token = "0x6002FA6")]
		[Address(RVA = "0x130FF70", Offset = "0x130FF70", VA = "0x130FF70")]
		private static void CacheActiveCamera()
		{
		}

		[Token(Token = "0x6002FA7")]
		[Address(RVA = "0x1310158", Offset = "0x1310158", VA = "0x1310158")]
		public GlobalLayerCullSetup()
		{
		}
	}
}
namespace Cinematics
{
	[Token(Token = "0x20007CE")]
	public interface IIdentifableBinding
	{
		[Token(Token = "0x17000843")]
		Identifier Identifier
		{
			[Token(Token = "0x6002FAA")]
			get;
		}

		[Token(Token = "0x17000844")]
		Type BindingType
		{
			[Token(Token = "0x6002FAB")]
			get;
		}
	}
}
namespace HungarianAlgorithm.Extensions
{
	[Token(Token = "0x20007CF")]
	public static class ArrayExtensions
	{
		[Token(Token = "0x6002FAC")]
		public static T[,] SquareArray<T>(this T[][] array) where T : class
		{
			return null;
		}
	}
}
namespace Ballistics
{
	[Token(Token = "0x20007D1")]
	public class ImpactTest : MonoBehaviour
	{
		[Token(Token = "0x40026BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ParticleSystem m_referenceParticleSystem;

		[Token(Token = "0x40026C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ParticleSystem[] m_particleSystems;

		[Token(Token = "0x40026C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform[] m_transformsToSpawnAt;

		[Token(Token = "0x40026C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ImpactParticlePlayer m_particlePlayer;

		[Token(Token = "0x6002FB0")]
		[Address(RVA = "0x1310278", Offset = "0x1310278", VA = "0x1310278")]
		public void PlayTest()
		{
		}

		[Token(Token = "0x6002FB1")]
		[Address(RVA = "0x1310444", Offset = "0x1310444", VA = "0x1310444")]
		private void Update()
		{
		}

		[Token(Token = "0x6002FB2")]
		[Address(RVA = "0x1310480", Offset = "0x1310480", VA = "0x1310480")]
		public ImpactTest()
		{
		}
	}
}
namespace BattleSister
{
	[Token(Token = "0x20007D2")]
	[HutongGames.PlayMaker.Tooltip("Causes this agent to wait for a certain enemy count. NOTE: you should ideally use CheckEnemyCount instead.")]
	[ActionCategory("BattleSister Scripted Sequences")]
	public class AgentWaitForEnemyCount : FsmStateAction
	{
		[Token(Token = "0x20007D3")]
		public enum EvaluationType
		{
			[Token(Token = "0x40026C8")]
			GreaterThan,
			[Token(Token = "0x40026C9")]
			EqualTo,
			[Token(Token = "0x40026CA")]
			LessThan
		}

		[Token(Token = "0x40026C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public EvaluationType Evaluation;

		[Token(Token = "0x40026C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int EnemyCount;

		[Token(Token = "0x40026C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HutongGames.PlayMaker.Tooltip("How frequently to check the enemy count (in seconds).")]
		[Min(1f)]
		public float m_checkInterval;

		[Token(Token = "0x40026C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float m_lastCheckTime;

		[Token(Token = "0x6002FB3")]
		[Address(RVA = "0x1310488", Offset = "0x1310488", VA = "0x1310488", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FB4")]
		[Address(RVA = "0x13104AC", Offset = "0x13104AC", VA = "0x13104AC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FB5")]
		[Address(RVA = "0x13105EC", Offset = "0x13105EC", VA = "0x13105EC")]
		public AgentWaitForEnemyCount()
		{
		}
	}
	[Token(Token = "0x20007D4")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Sends one of two events depending on whether the current device type is in the defined array.")]
	public class CheckCurrentDevice : FsmStateAction
	{
		[Token(Token = "0x40026CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ArrayEditor(typeof(VrDeviceModel), "", 0, 0, 65536)]
		[HutongGames.PlayMaker.Tooltip("Array of valid device models. If the current model matches any of these, we'll send the success event. Otherwise, we'll send the failure event.")]
		public FsmArray ValidDeviceModels;

		[Token(Token = "0x40026CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent successEvent;

		[Token(Token = "0x40026CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent failureEvent;

		[Token(Token = "0x6002FB6")]
		[Address(RVA = "0x1310604", Offset = "0x1310604", VA = "0x1310604", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FB7")]
		[Address(RVA = "0x13106E0", Offset = "0x13106E0", VA = "0x13106E0")]
		public CheckCurrentDevice()
		{
		}
	}
	[Token(Token = "0x20007D5")]
	[HutongGames.PlayMaker.Tooltip("Waits until an interaction or an identifier matching it is within long distance grab range.")]
	[ActionCategory("BattleSister Tutorials")]
	public class CheckGameObjectsActive : FsmStateAction
	{
		[Token(Token = "0x40026CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The game objects to check.")]
		[ArrayEditor(typeof(GameObject), "", 0, 0, 65536)]
		public FsmArray CheckedGameObjects;

		[Token(Token = "0x40026CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("If ticked, check if they're active. If unticked, check if they're inactive.")]
		[RequiredField]
		public FsmBool CheckIfActive;

		[Token(Token = "0x40026D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("Only pass if at least this many objects match the required active state. Clamped at the length of the array.")]
		public FsmInt RequiredMatchingCount;

		[Token(Token = "0x40026D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmEvent successEvent;

		[Token(Token = "0x40026D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmEvent failureEvent;

		[Token(Token = "0x6002FB8")]
		[Address(RVA = "0x13106E8", Offset = "0x13106E8", VA = "0x13106E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FB9")]
		[Address(RVA = "0x1310744", Offset = "0x1310744", VA = "0x1310744", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FBA")]
		[Address(RVA = "0x13108AC", Offset = "0x13108AC", VA = "0x13108AC")]
		public CheckGameObjectsActive()
		{
		}
	}
	[Token(Token = "0x20007D6")]
	[HutongGames.PlayMaker.Tooltip("Gets the gameObject of an agent from an Identifier")]
	[ActionCategory("BattleSister Scripted Sequences")]
	public class GetAgentFromIdentifier : FsmStateAction
	{
		[Token(Token = "0x40026D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[ObjectType(typeof(Identifier))]
		[HutongGames.PlayMaker.Tooltip("Identifier for the agent to get.")]
		public FsmObject Identifier;

		[Token(Token = "0x40026D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("Agent we want to store a reference to.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmGameObject Agent;

		[Token(Token = "0x6002FBB")]
		[Address(RVA = "0x13108B4", Offset = "0x13108B4", VA = "0x13108B4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FBC")]
		[Address(RVA = "0x13108DC", Offset = "0x13108DC", VA = "0x13108DC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FBD")]
		[Address(RVA = "0x1310A60", Offset = "0x1310A60", VA = "0x1310A60")]
		public GetAgentFromIdentifier()
		{
		}
	}
	[Token(Token = "0x20007D7")]
	[ActionCategory("BattleSister Play Testing")]
	[HutongGames.PlayMaker.Tooltip("If this is a play test, this node stops the game and asks the player to answer questions outside of the headset. Otherwise, it does nothing.")]
	public class TriggerPlayTestStop : FsmStateAction
	{
		[Token(Token = "0x40026D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PlayTestStopScreen m_stopScreen;

		[Token(Token = "0x6002FBE")]
		[Address(RVA = "0x1310A68", Offset = "0x1310A68", VA = "0x1310A68", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FBF")]
		[Address(RVA = "0x1310BCC", Offset = "0x1310BCC", VA = "0x1310BCC", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FC0")]
		[Address(RVA = "0x1310C18", Offset = "0x1310C18", VA = "0x1310C18")]
		public TriggerPlayTestStop()
		{
		}
	}
	[Token(Token = "0x20007D8")]
	[HutongGames.PlayMaker.Tooltip("Used to toggle whether or not the player can interact with their inventory in various ways. Please be careful with this or you could block player progression. Read the tooltips to understand what each option does. Please note that all locks will be cleared when the user dies and respawns or exits the level to avoid softlocks - do not use this across checkpoints.")]
	[ActionCategory("BattleSister Tutorials")]
	public class BlockInventoryInteraction : FsmStateAction
	{
		[Token(Token = "0x40026D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("If ticked, do not allow the player to place general items (guns and melee weapons) into the inventory.")]
		[RequiredField]
		public FsmBool BlockItemPlacement;

		[Token(Token = "0x40026D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("If ticked, do not allow the player to remove general items (guns and melee weapons) from the inventory.")]
		[RequiredField]
		public FsmBool BlockItemRemoval;

		[Token(Token = "0x40026D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("If ticked, do not allow the player to place ammunition into the inventory. This affects both manual placement and the ammo vacuum.")]
		public FsmBool BlockAmmoPlacement;

		[Token(Token = "0x40026D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HutongGames.PlayMaker.Tooltip("If ticked, do not allow the player to MANUALLY remove ammunition from the inventory. They can still arcade reload unless you also tick the box below.")]
		[RequiredField]
		public FsmBool BlockManualAmmoRemoval;

		[Token(Token = "0x40026DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("If ticked, do not allow the player to arcade reload from the inventory. They can still pull ammo out manually unless you also tick the box above.")]
		public FsmBool BlockAutomaticAmmoRemoval;

		[Token(Token = "0x6002FC1")]
		[Address(RVA = "0x1310C20", Offset = "0x1310C20", VA = "0x1310C20", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FC2")]
		[Address(RVA = "0x1310D4C", Offset = "0x1310D4C", VA = "0x1310D4C")]
		public BlockInventoryInteraction()
		{
		}
	}
	[Token(Token = "0x20007D9")]
	[HutongGames.PlayMaker.Tooltip("Tries to find an item with a given identifier in the player's inventory. If it is found, a reference to it will be stored. Finishes immediately.")]
	[ActionCategory("BattleSister Tutorials")]
	public class FindItemInPlayerInventory : FsmStateAction
	{
		[Token(Token = "0x40026DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The identifier of the item to search for.")]
		[RequiredField]
		public Identifier m_identifier;

		[Token(Token = "0x40026DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(VrItem))]
		public FsmObject ItemObject;

		[Token(Token = "0x40026DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[ObjectType(typeof(VrItem))]
		public FsmGameObject ItemGameObject;

		[Token(Token = "0x40026DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[ObjectType(typeof(WorldInteraction_Hold))]
		[UIHint(UIHint.Variable)]
		public FsmObject InteractionObject;

		[Token(Token = "0x40026DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[HutongGames.PlayMaker.Tooltip("This will be used to store the index of the slot the item was found in. The index matches the Inventory Slots list in the player's Inventory component. Set to -1 if the item could not be found.")]
		public FsmInt InventorySlotIndex;

		[Token(Token = "0x6002FC3")]
		[Address(RVA = "0x1310D54", Offset = "0x1310D54", VA = "0x1310D54", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FC4")]
		[Address(RVA = "0x1310EFC", Offset = "0x1310EFC", VA = "0x1310EFC")]
		private void SetReferences(VrItem item, int inventoryIndex)
		{
		}

		[Token(Token = "0x6002FC5")]
		[Address(RVA = "0x131105C", Offset = "0x131105C", VA = "0x131105C")]
		public FindItemInPlayerInventory()
		{
		}
	}
	[Token(Token = "0x20007DA")]
	[HutongGames.PlayMaker.Tooltip("Get the distance between the local player's feet and a transform in the world. Similar to GetDistance except it bases it on the player's feet rather than their root (which is incorrect as they can physically walk away from the root).")]
	[ActionCategory("BattleSister Tutorials")]
	public class GetPlayerDistance : FsmStateAction
	{
		[Token(Token = "0x40026E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("Target GameObject.")]
		public FsmGameObject target;

		[Token(Token = "0x40026E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[HutongGames.PlayMaker.Tooltip("Store the distance in a float variable.")]
		public FsmFloat storeResult;

		[Token(Token = "0x40026E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("Repeat every frame.")]
		public bool everyFrame;

		[Token(Token = "0x6002FC6")]
		[Address(RVA = "0x1311064", Offset = "0x1311064", VA = "0x1311064", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FC7")]
		[Address(RVA = "0x1311098", Offset = "0x1311098", VA = "0x1311098", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FC8")]
		[Address(RVA = "0x1311204", Offset = "0x1311204", VA = "0x1311204", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FC9")]
		[Address(RVA = "0x13110C4", Offset = "0x13110C4", VA = "0x13110C4")]
		private void DoGetDistance()
		{
		}

		[Token(Token = "0x6002FCA")]
		[Address(RVA = "0x1311208", Offset = "0x1311208", VA = "0x1311208")]
		public GetPlayerDistance()
		{
		}
	}
	[Token(Token = "0x20007DB")]
	[HutongGames.PlayMaker.Tooltip("Immediately determines whether or not a specified gun can be fired and invokes the appropriate event.")]
	[ActionCategory("BattleSister Tutorials")]
	public class CheckGunShootingAvailability : FsmStateAction
	{
		[Token(Token = "0x40026E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The checked gun.")]
		[ObjectType(typeof(VrGun))]
		[RequiredField]
		public FsmGameObject MonitoredGun;

		[Token(Token = "0x40026E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent allowedEvent;

		[Token(Token = "0x40026E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent blockedAsContainsEmptyMagazineEvent;

		[Token(Token = "0x40026E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmEvent blockedAsContainsNoMagazineEvent;

		[Token(Token = "0x40026E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmEvent blockedUnknownReasonEvent;

		[Token(Token = "0x6002FCB")]
		[Address(RVA = "0x1311210", Offset = "0x1311210", VA = "0x1311210", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FCC")]
		[Address(RVA = "0x1311358", Offset = "0x1311358", VA = "0x1311358")]
		public CheckGunShootingAvailability()
		{
		}
	}
	[Token(Token = "0x20007DC")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Wait until a gun is fired. Can be configured with a timeout.")]
	public class WaitUntilGunFiredWithTimeout : FsmStateAction
	{
		[Token(Token = "0x40026E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The gun we should watch.")]
		[ObjectType(typeof(VrGun))]
		[RequiredField]
		public FsmGameObject MonitoredGun;

		[Token(Token = "0x40026E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VrGun m_monitoredGunRuntime;

		[Token(Token = "0x40026EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("If greater than zero, exit with the timeout event if the gun is not fired within this many seconds of this node starting.")]
		public FsmFloat OptionalTimeout;

		[Token(Token = "0x40026EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_entryTime;

		[Token(Token = "0x40026EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40026ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent timeoutEvent;

		[Token(Token = "0x6002FCD")]
		[Address(RVA = "0x1311360", Offset = "0x1311360", VA = "0x1311360", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FCE")]
		[Address(RVA = "0x1311394", Offset = "0x1311394", VA = "0x1311394", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FCF")]
		[Address(RVA = "0x1311508", Offset = "0x1311508", VA = "0x1311508")]
		private void GunFired()
		{
		}

		[Token(Token = "0x6002FD0")]
		[Address(RVA = "0x1311538", Offset = "0x1311538", VA = "0x1311538", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FD1")]
		[Address(RVA = "0x13115C0", Offset = "0x13115C0", VA = "0x13115C0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FD2")]
		[Address(RVA = "0x1311660", Offset = "0x1311660", VA = "0x1311660")]
		public WaitUntilGunFiredWithTimeout()
		{
		}
	}
	[Token(Token = "0x20007DD")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player removes the magazine from the specified gun in any way.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilGunMagazineEjected : FsmStateAction
	{
		[Token(Token = "0x40026EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The gun we want the player to remove a magazine from.")]
		[RequiredField]
		[ObjectType(typeof(VrGun))]
		public FsmObject CheckedGun;

		[Token(Token = "0x40026EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("If ticked, finish as soon as we hit this node if the gun does not contain a magazine at that time. If unticked, wait until a magazine has been inserted and then removed in that case.")]
		public FsmBool ClearIfNoMagazinePresentAtStart;

		[Token(Token = "0x40026F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40026F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VrGun m_gun;

		[Token(Token = "0x40026F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_hasCallback;

		[Token(Token = "0x6002FD3")]
		[Address(RVA = "0x1311668", Offset = "0x1311668", VA = "0x1311668", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FD4")]
		[Address(RVA = "0x1311874", Offset = "0x1311874", VA = "0x1311874", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FD5")]
		[Address(RVA = "0x1311918", Offset = "0x1311918", VA = "0x1311918")]
		private void OnMagazineRemovedFromGun()
		{
		}

		[Token(Token = "0x6002FD6")]
		[Address(RVA = "0x1311948", Offset = "0x1311948", VA = "0x1311948")]
		public WaitUntilGunMagazineEjected()
		{
		}
	}
	[Token(Token = "0x20007DE")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player inserts a (potentially empty) magazine into the specified gun in any way.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilGunMagazineInserted : FsmStateAction
	{
		[Token(Token = "0x40026F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[ObjectType(typeof(VrGun))]
		[HutongGames.PlayMaker.Tooltip("The gun we want the player to remove a magazine from.")]
		public FsmObject CheckedGun;

		[Token(Token = "0x40026F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("If ticked, finish as soon as we hit this node if the gun does already has a magazine at that time. If unticked, wait until a magazine has been removed and then inserted in that case.")]
		public FsmBool ClearIfMagazinePresentAtStart;

		[Token(Token = "0x40026F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent sendEvent;

		[Token(Token = "0x40026F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VrGun m_gun;

		[Token(Token = "0x40026F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_hasCallback;

		[Token(Token = "0x6002FD7")]
		[Address(RVA = "0x1311950", Offset = "0x1311950", VA = "0x1311950", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FD8")]
		[Address(RVA = "0x1311B5C", Offset = "0x1311B5C", VA = "0x1311B5C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FD9")]
		[Address(RVA = "0x1311C00", Offset = "0x1311C00", VA = "0x1311C00")]
		private void OnMagazineInsertedIntoGun()
		{
		}

		[Token(Token = "0x6002FDA")]
		[Address(RVA = "0x1311C30", Offset = "0x1311C30", VA = "0x1311C30")]
		public WaitUntilGunMagazineInserted()
		{
		}
	}
	[Token(Token = "0x20007DF")]
	[HutongGames.PlayMaker.Tooltip("Displays some tutorial text to the player. This node runs forever - use a parallel node to end it. This will usually be a node that waits until the player has performed the relevant action.")]
	[ActionCategory("BattleSister Tutorials")]
	public class DisplayTutorialInstructionText : FsmStateAction
	{
		[Token(Token = "0x40026F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show")]
		[RequiredField]
		public FsmString m_instructionText;

		[Token(Token = "0x40026F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("The second line of text to show after a delay. You should leave this empty if you don't want to use it.")]
		public FsmString m_delayedSecondLineText;

		[Token(Token = "0x40026FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("How long to wait before showing the second line of text, in seconds. Unused if no second line is given.")]
		public FsmFloat m_delayedSecondLineWait;

		[Token(Token = "0x40026FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HutongGames.PlayMaker.Tooltip("Optional image")]
		public FsmGameObject m_imageObject;

		[Token(Token = "0x40026FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HutongGames.PlayMaker.Tooltip("Optional parent transform, to place dialog in-world")]
		public FsmGameObject m_parentTransform;

		[Token(Token = "0x6002FDB")]
		[Address(RVA = "0x1311C38", Offset = "0x1311C38", VA = "0x1311C38", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FDC")]
		[Address(RVA = "0x1311C5C", Offset = "0x1311C5C", VA = "0x1311C5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FDD")]
		[Address(RVA = "0x1311D9C", Offset = "0x1311D9C", VA = "0x1311D9C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FDE")]
		[Address(RVA = "0x1311E44", Offset = "0x1311E44", VA = "0x1311E44")]
		public DisplayTutorialInstructionText()
		{
		}
	}
	[Token(Token = "0x20007E0")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Displays some tutorial text to the player that changes based on their handedness. This node runs forever - use a parallel node to end it. This will usually be a node that waits until the player has performed the relevant action.")]
	public class DisplayTutorialInstructionTextWithHandedness : FsmStateAction
	{
		[Token(Token = "0x40026FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show if the player is left handed.")]
		public FsmString m_instructionTextLeftHanded;

		[Token(Token = "0x40026FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show if the player is right handed.")]
		public FsmString m_instructionTextRightHanded;

		[Token(Token = "0x40026FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show if the player is left handed. Second line appearing after a delay. Optional.")]
		public FsmString m_delayedSecondLineTextLeftHanded;

		[Token(Token = "0x4002700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show if the player is right handed. Second line appearing after a delay. Optional.")]
		public FsmString m_delayedSecondLineTextRightHanded;

		[Token(Token = "0x4002701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HutongGames.PlayMaker.Tooltip("How long to wait before showing the second line of text, in seconds. Unused if no second line is given.")]
		public FsmFloat m_delayedSecondLineWait;

		[Token(Token = "0x4002702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HutongGames.PlayMaker.Tooltip("Optional left-handed image")]
		public FsmGameObject m_leftHandImageObject;

		[Token(Token = "0x4002703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HutongGames.PlayMaker.Tooltip("Optional right-handed image")]
		public FsmGameObject m_rightHandImageObject;

		[Token(Token = "0x4002704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HutongGames.PlayMaker.Tooltip("Optional parent transform, to place dialog in-world")]
		public FsmGameObject m_parentTransform;

		[Token(Token = "0x4002705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Handedness m_currentAppliedHandedness;

		[Token(Token = "0x17000845")]
		private string HandedMainInstructionText
		{
			[Token(Token = "0x6002FE3")]
			[Address(RVA = "0x1311FF0", Offset = "0x1311FF0", VA = "0x1311FF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000846")]
		private GameObject HandedImageObject
		{
			[Token(Token = "0x6002FE4")]
			[Address(RVA = "0x1312060", Offset = "0x1312060", VA = "0x1312060")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000847")]
		private string HandedTimeoutInstructionText
		{
			[Token(Token = "0x6002FE5")]
			[Address(RVA = "0x1312020", Offset = "0x1312020", VA = "0x1312020")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000848")]
		public float DelayedSecondLineWait
		{
			[Token(Token = "0x6002FE6")]
			[Address(RVA = "0x1312048", Offset = "0x1312048", VA = "0x1312048")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002FDF")]
		[Address(RVA = "0x1311E4C", Offset = "0x1311E4C", VA = "0x1311E4C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FE0")]
		[Address(RVA = "0x1311E80", Offset = "0x1311E80", VA = "0x1311E80", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FE1")]
		[Address(RVA = "0x1312090", Offset = "0x1312090", VA = "0x1312090", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FE2")]
		[Address(RVA = "0x1312214", Offset = "0x1312214", VA = "0x1312214", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FE7")]
		[Address(RVA = "0x13122BC", Offset = "0x13122BC", VA = "0x13122BC")]
		public DisplayTutorialInstructionTextWithHandedness()
		{
		}
	}
	[Token(Token = "0x20007E1")]
	[HutongGames.PlayMaker.Tooltip("Displays some tutorial text to the player that changes based on which hand an object is being held in. If it can be held with both hands, the message is based on the hand used for the primary grasp (gun triggers, etc.). This node runs forever - use a parallel node to end it. This will usually be a node that waits until the player has performed the relevant action.")]
	[ActionCategory("BattleSister Tutorials")]
	public class DisplayTutorialInstructionTextWithHoldContext : FsmStateAction
	{
		[Token(Token = "0x4002706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The checked object.")]
		[ObjectType(typeof(WorldInteraction_Hold))]
		public FsmGameObject HeldObject;

		[Token(Token = "0x4002707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private WorldInteraction_Hold m_heldObjectRuntime;

		[Token(Token = "0x4002708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show when the object is in their left hand.")]
		public FsmString m_instructionTextObjectInLeftHand;

		[Token(Token = "0x4002709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show when the object is in their right hand.")]
		public FsmString m_instructionTextObjectInRightHand;

		[Token(Token = "0x400270A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show when the object is in their left hand. Second line appearing after a delay. Optional.")]
		public FsmString m_delayedSecondLineTextObjectInLeftHand;

		[Token(Token = "0x400270B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HutongGames.PlayMaker.Tooltip("The instruction text to show when the object is in their right hand. Second line appearing after a delay. Optional.")]
		public FsmString m_delayedSecondLineTextObjectInRightHand;

		[Token(Token = "0x400270C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HutongGames.PlayMaker.Tooltip("How long to wait before showing the second line of text, in seconds. Unused if no second line is given.")]
		public FsmFloat m_delayedSecondLineWait;

		[Token(Token = "0x400270D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HutongGames.PlayMaker.Tooltip("Optional image")]
		public FsmGameObject m_imageObject;

		[Token(Token = "0x400270E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HutongGames.PlayMaker.Tooltip("Optional parent transform, to place dialog in-world")]
		public FsmGameObject m_parentTransform;

		[Token(Token = "0x17000849")]
		private string MainInstructionText
		{
			[Token(Token = "0x6002FEC")]
			[Address(RVA = "0x131252C", Offset = "0x131252C", VA = "0x131252C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700084A")]
		private string TimeoutInstructionText
		{
			[Token(Token = "0x6002FED")]
			[Address(RVA = "0x1312584", Offset = "0x1312584", VA = "0x1312584")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700084B")]
		private float DelayedSecondLineWait
		{
			[Token(Token = "0x6002FEE")]
			[Address(RVA = "0x13125E8", Offset = "0x13125E8", VA = "0x13125E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002FE8")]
		[Address(RVA = "0x13122C4", Offset = "0x13122C4", VA = "0x13122C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FE9")]
		[Address(RVA = "0x13122F8", Offset = "0x13122F8", VA = "0x13122F8", Slot = "26")]
		public override void Init(FsmState state)
		{
		}

		[Token(Token = "0x6002FEA")]
		[Address(RVA = "0x1312408", Offset = "0x1312408", VA = "0x1312408", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FEB")]
		[Address(RVA = "0x1312600", Offset = "0x1312600", VA = "0x1312600", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FEF")]
		[Address(RVA = "0x13126A8", Offset = "0x13126A8", VA = "0x13126A8")]
		public DisplayTutorialInstructionTextWithHoldContext()
		{
		}
	}
	[Token(Token = "0x20007E2")]
	public abstract class AbstractWaitUntilItemInteractsWithInventory : FsmStateAction
	{
		[Token(Token = "0x400270F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("The item to listen to. Directly references an item in the scene and takes priority if set.")]
		public VrItem Item;

		[Token(Token = "0x4002710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[HutongGames.PlayMaker.Tooltip("The item to listen to. Uses an object reference so you can assign a variable. Only used if the direct reference above is not set. We can't replace it unfortunately because this would break existing uses.")]
		[ObjectType(typeof(VrItem))]
		public FsmObject ItemObject;

		[Token(Token = "0x4002711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private VrItem m_runtimeItem;

		[Token(Token = "0x6002FF0")]
		[Address(RVA = "0x13126B0", Offset = "0x13126B0", VA = "0x13126B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FF1")]
		[Address(RVA = "0x1312830", Offset = "0x1312830", VA = "0x1312830", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FF2")]
		[Address(RVA = "0x13128B8", Offset = "0x13128B8", VA = "0x13128B8")]
		protected void OnCallbackMade()
		{
		}

		[Token(Token = "0x6002FF3")]
		protected abstract void ApplyCallback(VrItem item);

		[Token(Token = "0x6002FF4")]
		protected abstract void RemoveCallback(VrItem item);

		[Token(Token = "0x6002FF5")]
		[Address(RVA = "0x13128E8", Offset = "0x13128E8", VA = "0x13128E8")]
		protected AbstractWaitUntilItemInteractsWithInventory()
		{
		}
	}
	[Token(Token = "0x20007E3")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until an item has been placed into the local player's inventory.")]
	public class WaitUntilItemPlacedInInventory : AbstractWaitUntilItemInteractsWithInventory
	{
		[Token(Token = "0x6002FF6")]
		[Address(RVA = "0x13128F0", Offset = "0x13128F0", VA = "0x13128F0", Slot = "62")]
		protected override void ApplyCallback(VrItem item)
		{
		}

		[Token(Token = "0x6002FF7")]
		[Address(RVA = "0x13129CC", Offset = "0x13129CC", VA = "0x13129CC", Slot = "63")]
		protected override void RemoveCallback(VrItem item)
		{
		}

		[Token(Token = "0x6002FF8")]
		[Address(RVA = "0x1312AA8", Offset = "0x1312AA8", VA = "0x1312AA8")]
		public WaitUntilItemPlacedInInventory()
		{
		}
	}
	[Token(Token = "0x20007E4")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until an item has been removed from the local player's inventory.")]
	public class WaitUntilItemRemovedFromInventory : AbstractWaitUntilItemInteractsWithInventory
	{
		[Token(Token = "0x6002FF9")]
		[Address(RVA = "0x1312AB0", Offset = "0x1312AB0", VA = "0x1312AB0", Slot = "62")]
		protected override void ApplyCallback(VrItem item)
		{
		}

		[Token(Token = "0x6002FFA")]
		[Address(RVA = "0x1312B8C", Offset = "0x1312B8C", VA = "0x1312B8C", Slot = "63")]
		protected override void RemoveCallback(VrItem item)
		{
		}

		[Token(Token = "0x6002FFB")]
		[Address(RVA = "0x1312C68", Offset = "0x1312C68", VA = "0x1312C68")]
		public WaitUntilItemRemovedFromInventory()
		{
		}
	}
	[Token(Token = "0x20007E5")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player has moved with a specific locomotion method. Passes immediately if the player's current control configuration does not allow them to do this.")]
	public class WaitUntilPlayerMovesWithGivenLocomotionMethod : FsmStateAction
	{
		[Serializable]
		[Token(Token = "0x20007E6")]
		private enum MoveMethod
		{
			[Token(Token = "0x400271A")]
			FreeWalk
		}

		[Token(Token = "0x4002713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The amount of time the player is required to move for.")]
		public FsmFloat RequiredMoveTime;

		[Token(Token = "0x4002714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(MoveMethod))]
		[HutongGames.PlayMaker.Tooltip("The movement method they should use.")]
		public FsmEnum RequiredMoveMethod;

		[Token(Token = "0x4002715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MoveMethod m_requiredMoveMethodRuntime;

		[Token(Token = "0x4002716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 m_previousEffectiveVelocity;

		[Token(Token = "0x4002718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float m_latestMoveStartTime;

		[Token(Token = "0x6002FFC")]
		[Address(RVA = "0x1312C70", Offset = "0x1312C70", VA = "0x1312C70", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6002FFD")]
		[Address(RVA = "0x1312CA0", Offset = "0x1312CA0", VA = "0x1312CA0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FFE")]
		[Address(RVA = "0x1312D80", Offset = "0x1312D80", VA = "0x1312D80", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6002FFF")]
		[Address(RVA = "0x1312D78", Offset = "0x1312D78", VA = "0x1312D78")]
		private bool VerifyLocomotionMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6003000")]
		[Address(RVA = "0x1312FD0", Offset = "0x1312FD0", VA = "0x1312FD0")]
		public WaitUntilPlayerMovesWithGivenLocomotionMethod()
		{
		}
	}
	[Token(Token = "0x20007E7")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player has turned using artificial controls. Does not respond to the player physically turning around in the real world. Does not respond to 180 degree spins by design.")]
	public class WaitUntilPlayerPerformsArtificialTurn : FsmStateAction
	{
		[Token(Token = "0x400271B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400271C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float m_cumulativeRotationAngle;

		[Token(Token = "0x1700084C")]
		private float CurrentSnapTurnAngle
		{
			[Token(Token = "0x6003004")]
			[Address(RVA = "0x1313294", Offset = "0x1313294", VA = "0x1313294")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6003001")]
		[Address(RVA = "0x1312FD8", Offset = "0x1312FD8", VA = "0x1312FD8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003002")]
		[Address(RVA = "0x13130F0", Offset = "0x13130F0", VA = "0x13130F0", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003003")]
		[Address(RVA = "0x1313234", Offset = "0x1313234", VA = "0x1313234")]
		private void OnRotated(float rotationAngle)
		{
		}

		[Token(Token = "0x6003005")]
		[Address(RVA = "0x1313338", Offset = "0x1313338", VA = "0x1313338")]
		public WaitUntilPlayerPerformsArtificialTurn()
		{
		}
	}
	[Token(Token = "0x20007E8")]
	public abstract class AbstractWaitUntilPlayerLookingAt : FsmStateAction
	{
		[Token(Token = "0x400271D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("Only finish once we've been looking at this for at least this many seconds - helps to differentiate between the player turning their head past this object and them actually focusing on it.")]
		public FsmFloat MinimumLookTime;

		[Token(Token = "0x400271E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("A value between 0 and 1 that describes how close to the centre of our view the object must be. 0 means it can be as far as our peripheral vision allows us to see, 1 means it must be dead centre. Helps to ensure the object actually has the player's attention (we can't check which way their eyes are pointing inside their headset though).")]
		public FsmFloat FocusRatio;

		[Token(Token = "0x400271F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("Required maximum distance in metres. If the player's head is further away than this, we'll never count them as looking. Useful if you want them to approach first. Set to zero to disable.")]
		public FsmFloat MaximumDistance;

		[Token(Token = "0x4002720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_lookDuration;

		[Token(Token = "0x4002722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_lookTimer;

		[Token(Token = "0x1700084D")]
		protected abstract Vector3? LookTarget
		{
			[Token(Token = "0x600300A")]
			get;
		}

		[Token(Token = "0x6003006")]
		[Address(RVA = "0x1313340", Offset = "0x1313340", VA = "0x1313340", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003007")]
		[Address(RVA = "0x13133A0", Offset = "0x13133A0", VA = "0x13133A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003008")]
		[Address(RVA = "0x13136E8", Offset = "0x13136E8", VA = "0x13136E8", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003009")]
		[Address(RVA = "0x13133E8", Offset = "0x13133E8", VA = "0x13133E8")]
		private void Process()
		{
		}

		[Token(Token = "0x600300B")]
		[Address(RVA = "0x1313704", Offset = "0x1313704", VA = "0x1313704")]
		protected AbstractWaitUntilPlayerLookingAt()
		{
		}
	}
	[Token(Token = "0x20007E9")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until the local player has their view turned towards the head of a named agent.")]
	public class WaitUntilPlayerLookingAtAgent : AbstractWaitUntilPlayerLookingAt
	{
		[Token(Token = "0x4002723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The identifier of the agent we should look at.")]
		public Identifier LookAgentId;

		[Token(Token = "0x4002724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Agent m_lookAgent;

		[Token(Token = "0x1700084E")]
		protected override Vector3? LookTarget
		{
			[Token(Token = "0x600300E")]
			[Address(RVA = "0x1313A00", Offset = "0x1313A00", VA = "0x1313A00", Slot = "62")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600300C")]
		[Address(RVA = "0x131370C", Offset = "0x131370C", VA = "0x131370C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600300D")]
		[Address(RVA = "0x1313718", Offset = "0x1313718", VA = "0x1313718", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600300F")]
		[Address(RVA = "0x1313ABC", Offset = "0x1313ABC", VA = "0x1313ABC")]
		public WaitUntilPlayerLookingAtAgent()
		{
		}
	}
	[Token(Token = "0x20007EA")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until the local player has their view turned towards some object.")]
	public class WaitUntilPlayerLookingAtObject : AbstractWaitUntilPlayerLookingAt
	{
		[Token(Token = "0x4002725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HutongGames.PlayMaker.Tooltip("The game object of interest.")]
		[RequiredField]
		public FsmGameObject LookPoint;

		[Token(Token = "0x4002726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform m_lookTransform;

		[Token(Token = "0x1700084F")]
		protected override Vector3? LookTarget
		{
			[Token(Token = "0x6003012")]
			[Address(RVA = "0x1313B14", Offset = "0x1313B14", VA = "0x1313B14", Slot = "62")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003010")]
		[Address(RVA = "0x1313AC4", Offset = "0x1313AC4", VA = "0x1313AC4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003011")]
		[Address(RVA = "0x1313AD0", Offset = "0x1313AD0", VA = "0x1313AD0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003013")]
		[Address(RVA = "0x1313B84", Offset = "0x1313B84", VA = "0x1313B84")]
		public WaitUntilPlayerLookingAtObject()
		{
		}
	}
	[Token(Token = "0x20007EB")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player performs any action that causes ammo to be removed from their inventory.")]
	public class WaitUntilAmmoTakenFromInventory : FsmStateAction
	{
		[Token(Token = "0x4002727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The identifier of the ammo to listen for. We will finish when this type of ammo is removed.")]
		public Identifier AmmoId;

		[Token(Token = "0x4002728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AmmoPouchSlot m_ammoPouchSlot;

		[Token(Token = "0x6003014")]
		[Address(RVA = "0x1313B8C", Offset = "0x1313B8C", VA = "0x1313B8C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003015")]
		[Address(RVA = "0x1313F80", Offset = "0x1313F80", VA = "0x1313F80", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003016")]
		[Address(RVA = "0x1314080", Offset = "0x1314080", VA = "0x1314080")]
		private void OnAmmoAdjusted(int adjustment)
		{
		}

		[Token(Token = "0x6003017")]
		[Address(RVA = "0x13140BC", Offset = "0x13140BC", VA = "0x13140BC")]
		public WaitUntilAmmoTakenFromInventory()
		{
		}
	}
	[Token(Token = "0x20007EC")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player has blocked one or more bullets using any item that they are holding.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilBulletsBlockedUsingHeldItem : FsmStateAction
	{
		[Token(Token = "0x400272A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("Complete this node once this many individual bullets have been blocked. Will be clamped at a minimum of 1 if set to anything lower than that.")]
		public FsmInt RequiredBlockCount;

		[Token(Token = "0x400272B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_currentBlockCount;

		[Token(Token = "0x400272C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6003018")]
		[Address(RVA = "0x13140C4", Offset = "0x13140C4", VA = "0x13140C4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003019")]
		[Address(RVA = "0x13140EC", Offset = "0x13140EC", VA = "0x13140EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600301A")]
		[Address(RVA = "0x1314218", Offset = "0x1314218", VA = "0x1314218", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600301B")]
		[Address(RVA = "0x1314340", Offset = "0x1314340", VA = "0x1314340")]
		private void OnBulletHit(VrBullet bullet, Collider hitCollider)
		{
		}

		[Token(Token = "0x600301C")]
		[Address(RVA = "0x131449C", Offset = "0x131449C", VA = "0x131449C")]
		public WaitUntilBulletsBlockedUsingHeldItem()
		{
		}
	}
	[Token(Token = "0x20007ED")]
	[HutongGames.PlayMaker.Tooltip("Waits until one or more specified health statuses in the scene take damage or are killed.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilDamageReceived : FsmStateAction
	{
		[Token(Token = "0x400272D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[HutongGames.PlayMaker.Tooltip("The target agent that should be checked for damage. You can either use this or assign a health status that exists in the scene.")]
		public FsmGameObject TargetAgent;

		[Token(Token = "0x400272E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("The health status that should be checked for damage. Ignored if an agent is given above.")]
		[ArrayEditor(typeof(HealthStatus), "", 0, 0, 65536)]
		public FsmArray TargetHealthStatuses;

		[Token(Token = "0x400272F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("If ticked, wait until the target health status actively dies. If unticked, just wait until it takes any amount of damage.")]
		public FsmBool WaitUntilDeath;

		[Token(Token = "0x4002730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HutongGames.PlayMaker.Tooltip("Array of damage types to filter to. If empty, we'll respond to ALL damage types. If not empty, we'll only respond to damage coming from these sources. Beware of soft-locking if using this to wait for the character to die as it might die another way...")]
		[ArrayEditor(typeof(DamageType), "", 0, 0, 65536)]
		public FsmArray FilterToDamageTypes;

		[Token(Token = "0x4002731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HashSet<HealthStatus> m_unclearedHealthStatuses;

		[Token(Token = "0x600301D")]
		[Address(RVA = "0x13144A4", Offset = "0x13144A4", VA = "0x13144A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600301E")]
		[Address(RVA = "0x1314A04", Offset = "0x1314A04", VA = "0x1314A04", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600301F")]
		[Address(RVA = "0x1314D20", Offset = "0x1314D20", VA = "0x1314D20")]
		private void HitCallback(HealthStatusInfo info)
		{
		}

		[Token(Token = "0x6003020")]
		[Address(RVA = "0x1314E80", Offset = "0x1314E80", VA = "0x1314E80")]
		private void ClearHealthStatus(HealthStatus healthStatus)
		{
		}

		[Token(Token = "0x6003021")]
		[Address(RVA = "0x131505C", Offset = "0x131505C", VA = "0x131505C")]
		public WaitUntilDamageReceived()
		{
		}
	}
	[Token(Token = "0x20007EE")]
	[HutongGames.PlayMaker.Tooltip("Waits until a timed explosive object (for example, a grenade) has been armed, then finishes.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilExplosiveArmed : FsmStateAction
	{
		[Token(Token = "0x4002733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The checked explosive.")]
		[ObjectType(typeof(VrTimedExplosive))]
		[RequiredField]
		public FsmGameObject MonitoredExplosive;

		[Token(Token = "0x4002734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VrTimedExplosive m_monitoredExplosiveRuntime;

		[Token(Token = "0x4002735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6003022")]
		[Address(RVA = "0x1315064", Offset = "0x1315064", VA = "0x1315064", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003023")]
		[Address(RVA = "0x1315168", Offset = "0x1315168", VA = "0x1315168", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003024")]
		[Address(RVA = "0x1315218", Offset = "0x1315218", VA = "0x1315218")]
		public WaitUntilExplosiveArmed()
		{
		}
	}
	[Token(Token = "0x20007EF")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player has completed a particular gesture (sacred rite action), or any gesture if the list of matched names is empty.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilGestureUsed : FsmStateAction
	{
		[Token(Token = "0x4002736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("Only complete this node when the player uses one of the gestures in this array, unless the list is empty in which case we'll complete when the player uses ANY gesture.")]
		[ArrayEditor(VariableType.Object, "", 0, 0, 65536)]
		[RequiredField]
		public FsmArray MatchedGestureIdentifiers;

		[Token(Token = "0x4002737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("If ticked, try to show a ghost hand illustrating how to perform the gesture.")]
		public FsmBool DisplayVisualizer;

		[Token(Token = "0x4002738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6003025")]
		[Address(RVA = "0x1315220", Offset = "0x1315220", VA = "0x1315220", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003026")]
		[Address(RVA = "0x131522C", Offset = "0x131522C", VA = "0x131522C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003027")]
		[Address(RVA = "0x1315360", Offset = "0x1315360", VA = "0x1315360", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003028")]
		[Address(RVA = "0x1315408", Offset = "0x1315408", VA = "0x1315408")]
		private void OnGesturePerformed(Identifier gestureIdentifier)
		{
		}

		[Token(Token = "0x6003029")]
		[Address(RVA = "0x131554C", Offset = "0x131554C", VA = "0x131554C")]
		public WaitUntilGestureUsed()
		{
		}
	}
	[Token(Token = "0x20007F0")]
	[HutongGames.PlayMaker.Tooltip("Waits until all items held at the start of the node are placed into the inventory. Passes immediately if hands are initially empty.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilHeldObjectsHolstered : FsmStateAction
	{
		[Token(Token = "0x4002739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400273A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<VrItem> m_itemsToHolster;

		[Token(Token = "0x600302A")]
		[Address(RVA = "0x1315554", Offset = "0x1315554", VA = "0x1315554", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600302B")]
		[Address(RVA = "0x1315960", Offset = "0x1315960", VA = "0x1315960", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600302C")]
		[Address(RVA = "0x13158EC", Offset = "0x13158EC", VA = "0x13158EC")]
		private void CheckDone()
		{
		}

		[Token(Token = "0x600302D")]
		[Address(RVA = "0x1315AB8", Offset = "0x1315AB8", VA = "0x1315AB8")]
		public WaitUntilHeldObjectsHolstered()
		{
		}
	}
	[Token(Token = "0x20007F1")]
	[HutongGames.PlayMaker.Tooltip("Waits until an interaction or an identifier matching it is being selected (pointed at).")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilInteractionInGrabRange : FsmStateAction
	{
		[Token(Token = "0x400273B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ObjectType(typeof(WorldInteraction_Hold))]
		[HutongGames.PlayMaker.Tooltip("Wait until we're selecting this specific object. You can use an identifier instead by leaving this empty and setting the reference below instead.")]
		public FsmObject CheckedInteraction;

		[Token(Token = "0x400273C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[ObjectType(typeof(Identifier))]
		[HutongGames.PlayMaker.Tooltip("If and only if a specific interaction isn't given above, wait until we're selecting any interaction with this identifier.")]
		public FsmObject CheckedIdentifier;

		[Token(Token = "0x400273D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FsmEvent sendEvent;

		[Token(Token = "0x400273E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private WorldInteraction_Hold m_checkedInteraction;

		[Token(Token = "0x400273F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Identifier m_checkedIdentifier;

		[Token(Token = "0x600302E")]
		[Address(RVA = "0x1315AC0", Offset = "0x1315AC0", VA = "0x1315AC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600302F")]
		[Address(RVA = "0x1315C4C", Offset = "0x1315C4C", VA = "0x1315C4C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003030")]
		[Address(RVA = "0x1316148", Offset = "0x1316148", VA = "0x1316148")]
		public WaitUntilInteractionInGrabRange()
		{
		}
	}
	[Token(Token = "0x20007F2")]
	[HutongGames.PlayMaker.Tooltip("Waits until an object is becomes not active in the hierarchy. Triggers if the object is either disabled directly or has a parent that is disabled. Useful for magazines going into the player's belt, for example.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilObjectIsInactive : FsmStateAction
	{
		[Token(Token = "0x4002740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("The checked game object.")]
		public FsmGameObject CheckedGameObject;

		[Token(Token = "0x4002741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6003031")]
		[Address(RVA = "0x1316150", Offset = "0x1316150", VA = "0x1316150", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003032")]
		[Address(RVA = "0x1316174", Offset = "0x1316174", VA = "0x1316174", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003033")]
		[Address(RVA = "0x1316248", Offset = "0x1316248", VA = "0x1316248", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003034")]
		[Address(RVA = "0x131631C", Offset = "0x131631C", VA = "0x131631C")]
		public WaitUntilObjectIsInactive()
		{
		}
	}
	[Token(Token = "0x20007F3")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player successfully blocks any melee attack using a melee weapon of their own.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilPlayerBlocksMeleeAttack : FsmStateAction
	{
		[Token(Token = "0x4002742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6003035")]
		[Address(RVA = "0x1316324", Offset = "0x1316324", VA = "0x1316324", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003036")]
		[Address(RVA = "0x131645C", Offset = "0x131645C", VA = "0x131645C", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003037")]
		[Address(RVA = "0x1316594", Offset = "0x1316594", VA = "0x1316594")]
		private void OnBlockReaction(VrItem item, IAgent blockingAgent)
		{
		}

		[Token(Token = "0x6003038")]
		[Address(RVA = "0x1316668", Offset = "0x1316668", VA = "0x1316668")]
		public WaitUntilPlayerBlocksMeleeAttack()
		{
		}
	}
	[Token(Token = "0x20007F4")]
	[HutongGames.PlayMaker.Tooltip("Waits until the local player is holding some object, optionally for a specified minimum amount of time.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilPlayerHoldingInteraction : FsmStateAction
	{
		[Token(Token = "0x4002743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("Wait until we're holding this specific object. You can use an identifier instead by leaving this empty and setting the reference below instead.")]
		[ObjectType(typeof(WorldInteraction_Hold))]
		public FsmObject CheckedInteraction;

		[Token(Token = "0x4002744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("If and only if a specific interaction isn't given above, wait until we're holding any interaction with this identifier.")]
		[ObjectType(typeof(Identifier))]
		public FsmObject CheckedIdentifier;

		[Token(Token = "0x4002745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("Only finish once the player has been holding the object for at least this many seconds.")]
		public FsmFloat MinimumHoldTime;

		[Token(Token = "0x4002746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HutongGames.PlayMaker.Tooltip("If ticked, wait until the player is holding the interaction with both hands. If unticked (default) wait until they are holding it in at least one hand.")]
		public FsmBool RequireBothHands;

		[Token(Token = "0x4002747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HutongGames.PlayMaker.Tooltip("If ticked, wait until the player is ***NOT*** holding the interaction for the specified amount of time instead.")]
		public FsmBool Invert;

		[Token(Token = "0x4002748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private WorldInteraction_Hold m_checkedInteraction;

		[Token(Token = "0x400274A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Identifier m_checkedIdentifier;

		[Token(Token = "0x400274B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float m_holdDuration;

		[Token(Token = "0x400274C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_holdTimer;

		[Token(Token = "0x6003039")]
		[Address(RVA = "0x1316670", Offset = "0x1316670", VA = "0x1316670", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600303A")]
		[Address(RVA = "0x13166EC", Offset = "0x13166EC", VA = "0x13166EC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600303B")]
		[Address(RVA = "0x1316C9C", Offset = "0x1316C9C", VA = "0x1316C9C")]
		private bool IsMatchingItem(VrItem item)
		{
			return default(bool);
		}

		[Token(Token = "0x600303C")]
		[Address(RVA = "0x1316D94", Offset = "0x1316D94", VA = "0x1316D94", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x600303D")]
		[Address(RVA = "0x13168AC", Offset = "0x13168AC", VA = "0x13168AC")]
		private bool Evaluate(bool allowImmediateTimeout)
		{
			return default(bool);
		}

		[Token(Token = "0x600303E")]
		[Address(RVA = "0x1316DE4", Offset = "0x1316DE4", VA = "0x1316DE4")]
		public WaitUntilPlayerHoldingInteraction()
		{
		}
	}
	[Token(Token = "0x20007F5")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player is looking downwards at their belt.")]
	public class WaitUntilPlayerLookingDown : FsmStateAction
	{
		[Token(Token = "0x400274D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("Trigger once the angle between the player's head and downwards is smaller than this.")]
		public FsmFloat LookAngleDegrees;

		[Token(Token = "0x400274E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent sendEvent;

		[Token(Token = "0x600303F")]
		[Address(RVA = "0x1316DEC", Offset = "0x1316DEC", VA = "0x1316DEC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003040")]
		[Address(RVA = "0x1316E1C", Offset = "0x1316E1C", VA = "0x1316E1C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003041")]
		[Address(RVA = "0x1316F70", Offset = "0x1316F70", VA = "0x1316F70")]
		public WaitUntilPlayerLookingDown()
		{
		}
	}
	[Token(Token = "0x20007F6")]
	[ActionCategory("BattleSister Tutorials")]
	[HutongGames.PlayMaker.Tooltip("Waits until a specified powered ability gets turned on. Exits immediately if it's already on when we start.")]
	public class WaitUntilPoweredAbilityActivated : FsmStateAction
	{
		[Token(Token = "0x400274F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[ObjectType(typeof(PoweredAbility))]
		[HutongGames.PlayMaker.Tooltip("The checked holdable object.")]
		public FsmObject PoweredAbility;

		[Token(Token = "0x4002750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FsmEvent sendEvent;

		[Token(Token = "0x4002751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PoweredAbility m_poweredAbility;

		[Token(Token = "0x6003042")]
		[Address(RVA = "0x1316F78", Offset = "0x1316F78", VA = "0x1316F78", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003043")]
		[Address(RVA = "0x1317140", Offset = "0x1317140", VA = "0x1317140", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003044")]
		[Address(RVA = "0x1317228", Offset = "0x1317228", VA = "0x1317228")]
		private void PoweredOn()
		{
		}

		[Token(Token = "0x6003045")]
		[Address(RVA = "0x1317258", Offset = "0x1317258", VA = "0x1317258")]
		public WaitUntilPoweredAbilityActivated()
		{
		}
	}
	[Token(Token = "0x20007F7")]
	[HutongGames.PlayMaker.Tooltip("Waits until the player recenters their view. Beware - this concept isn't valid on all devices.")]
	[ActionCategory("BattleSister Tutorials")]
	public class WaitUntilViewRecentered : FsmStateAction
	{
		[Token(Token = "0x4002752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FsmEvent sendEvent;

		[Token(Token = "0x6003046")]
		[Address(RVA = "0x1317260", Offset = "0x1317260", VA = "0x1317260", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003047")]
		[Address(RVA = "0x13172EC", Offset = "0x13172EC", VA = "0x13172EC", Slot = "37")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003048")]
		[Address(RVA = "0x1317378", Offset = "0x1317378", VA = "0x1317378")]
		private void OnViewRecentered()
		{
		}

		[Token(Token = "0x6003049")]
		[Address(RVA = "0x13173A8", Offset = "0x13173A8", VA = "0x13173A8")]
		public WaitUntilViewRecentered()
		{
		}
	}
	[Token(Token = "0x20007F8")]
	public class MarkQuestComplete : FsmStateAction, IQuestDataProvider
	{
		[Token(Token = "0x17000850")]
		public bool HasChanged
		{
			[Token(Token = "0x600304C")]
			[Address(RVA = "0x13174F8", Offset = "0x13174F8", VA = "0x13174F8", Slot = "62")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600304D")]
			[Address(RVA = "0x1317500", Offset = "0x1317500", VA = "0x1317500", Slot = "63")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600304A")]
		[Address(RVA = "0x13173B0", Offset = "0x13173B0", VA = "0x13173B0", Slot = "26")]
		public override void Init(FsmState state)
		{
		}

		[Token(Token = "0x600304B")]
		[Address(RVA = "0x13174D0", Offset = "0x13174D0", VA = "0x13174D0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600304E")]
		[Address(RVA = "0x131750C", Offset = "0x131750C", VA = "0x131750C")]
		public MarkQuestComplete()
		{
		}
	}
}
namespace BattleSister.Ballistics
{
	[Token(Token = "0x20007F9")]
	public enum DamageType
	{
		[Token(Token = "0x4002755")]
		Explosion = 24,
		[Token(Token = "0x4002756")]
		CabinAssaultRifle,
		[Token(Token = "0x4002757")]
		CabinAxe,
		[Token(Token = "0x4002758")]
		CabinBaseballBat,
		[Token(Token = "0x4002759")]
		CabinClaw,
		[Token(Token = "0x400275A")]
		CabinPistol,
		[Token(Token = "0x400275B")]
		CabinRevolver,
		[Token(Token = "0x400275C")]
		CabinRifle,
		[Token(Token = "0x400275D")]
		CabinShotgun,
		[Token(Token = "0x400275E")]
		CabinPowerCell,
		[Token(Token = "0x400275F")]
		CabinMetalObject,
		[Token(Token = "0x4002760")]
		CabinPlank,
		[Token(Token = "0x4002761")]
		CabinPlayerHands,
		[Token(Token = "0x4002762")]
		CabinPlayerFists,
		[Token(Token = "0x4002763")]
		CabinSpitterGoo,
		[Token(Token = "0x4002764")]
		CabinForestCharge,
		[Token(Token = "0x4002765")]
		CabinEmp,
		[Token(Token = "0x4002766")]
		CabinBluntMetal,
		[Token(Token = "0x4002767")]
		CabinBluntWood,
		[Token(Token = "0x4002768")]
		CabinBluntCeramic,
		[Token(Token = "0x4002769")]
		CabinBladedWeapon,
		[Token(Token = "0x400276A")]
		CabinImpaledWeapon,
		[Token(Token = "0x400276B")]
		CabinPitchfork,
		[Token(Token = "0x400276C")]
		CabinPickaxe,
		[Token(Token = "0x400276D")]
		CabinSpade,
		[Token(Token = "0x400276E")]
		CabinMeatCleaver,
		[Token(Token = "0x400276F")]
		CabinForestExplosion,
		[Token(Token = "0x4002770")]
		CabinSpitterGooExplosion,
		[Token(Token = "0x4002771")]
		CabinExploderExplosion,
		[Token(Token = "0x4002772")]
		CabinHealthItem,
		[Token(Token = "0x4002773")]
		CabinRescue,
		[Token(Token = "0x4002774")]
		CabinReset,
		[Token(Token = "0x4002775")]
		CabinUzi
	}
	[Token(Token = "0x20007FA")]
	public static class DamageTypeHelper
	{
		[Token(Token = "0x600304F")]
		[Address(RVA = "0x1317514", Offset = "0x1317514", VA = "0x1317514")]
		public static bool IsMeleeWeapon(DamageType? damageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6003050")]
		[Address(RVA = "0x1317588", Offset = "0x1317588", VA = "0x1317588")]
		public static bool IsRangedWeapon(DamageType? damageReportDamageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6003051")]
		[Address(RVA = "0x13175FC", Offset = "0x13175FC", VA = "0x13175FC")]
		public static bool IsExplosion(DamageType? damageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6003052")]
		[Address(RVA = "0x1317670", Offset = "0x1317670", VA = "0x1317670")]
		public static bool isFromGoo(DamageType? damageType)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20007FB")]
	public class EmissionSettings
	{
		[Token(Token = "0x4002776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public ParticleSystem m_particleSystem;

		[Token(Token = "0x4002777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float m_particleSize;

		[Token(Token = "0x4002778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public int m_particleCount;

		[Token(Token = "0x4002779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_hasParticleSystem;

		[Token(Token = "0x17000851")]
		public bool HasParticleSystem
		{
			[Token(Token = "0x6003053")]
			[Address(RVA = "0x13176D8", Offset = "0x13176D8", VA = "0x13176D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003054")]
		[Address(RVA = "0x13176E0", Offset = "0x13176E0", VA = "0x13176E0")]
		public void PreCache()
		{
		}

		[Token(Token = "0x6003055")]
		[Address(RVA = "0x131774C", Offset = "0x131774C", VA = "0x131774C")]
		public EmissionSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007FC")]
	public class ImpactLight
	{
		[Token(Token = "0x20007FD")]
		[CompilerGenerated]
		private sealed class <PlayAnimatedIntensity>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002780")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002781")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ImpactLight <>4__this;

			[Token(Token = "0x4002783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float startTime;

			[Token(Token = "0x4002784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <eval>5__2;

			[Token(Token = "0x17000853")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600305D")]
				[Address(RVA = "0x1317A00", Offset = "0x1317A00", VA = "0x1317A00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000854")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600305F")]
				[Address(RVA = "0x1317A48", Offset = "0x1317A48", VA = "0x1317A48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600305A")]
			[Address(RVA = "0x1317858", Offset = "0x1317858", VA = "0x1317858")]
			[DebuggerHidden]
			public <PlayAnimatedIntensity>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600305B")]
			[Address(RVA = "0x1317888", Offset = "0x1317888", VA = "0x1317888", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600305C")]
			[Address(RVA = "0x131788C", Offset = "0x131788C", VA = "0x131788C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600305E")]
			[Address(RVA = "0x1317A08", Offset = "0x1317A08", VA = "0x1317A08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400277A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Light m_light;

		[Token(Token = "0x400277B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color m_lightColor;

		[Token(Token = "0x400277C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_lightRange;

		[Token(Token = "0x400277D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve m_lightIntensityGraph;

		[Token(Token = "0x400277E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isRunning;

		[Token(Token = "0x400277F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool m_hasLight;

		[Token(Token = "0x17000852")]
		public bool HasLight
		{
			[Token(Token = "0x6003056")]
			[Address(RVA = "0x1317760", Offset = "0x1317760", VA = "0x1317760")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003057")]
		[Address(RVA = "0x1317768", Offset = "0x1317768", VA = "0x1317768")]
		public void PreCache()
		{
		}

		[Token(Token = "0x6003058")]
		[Address(RVA = "0x13177D4", Offset = "0x13177D4", VA = "0x13177D4")]
		[IteratorStateMachine(typeof(<PlayAnimatedIntensity>d__9))]
		public IEnumerator PlayAnimatedIntensity(float startTime)
		{
			return null;
		}

		[Token(Token = "0x6003059")]
		[Address(RVA = "0x1317880", Offset = "0x1317880", VA = "0x1317880")]
		public ImpactLight()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007FE")]
	public class ImpactMapping
	{
		[Token(Token = "0x4002785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public PhysicMaterial PhysicMaterial;

		[Token(Token = "0x4002786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public ImpactLight m_impactLight;

		[Token(Token = "0x4002787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public EmissionSettings LingeringImpact;

		[Token(Token = "0x4002788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public EmissionSettings TemporaryImpact;

		[Token(Token = "0x4002789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public ParticleSystem[] CloudParticleSystems;

		[Token(Token = "0x400278A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public EmissionSettings[] AdditionalImpacts;

		[Token(Token = "0x400278B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public AudioEventDescription AudioEventDescription;

		[Token(Token = "0x6003060")]
		[Address(RVA = "0x1317A50", Offset = "0x1317A50", VA = "0x1317A50")]
		public void PreCache()
		{
		}

		[Token(Token = "0x6003061")]
		[Address(RVA = "0x1317AD0", Offset = "0x1317AD0", VA = "0x1317AD0")]
		public ImpactMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007FF")]
	public class DamageMapping
	{
		[Token(Token = "0x400278C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public DamageType m_damageType;

		[Token(Token = "0x400278D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public ImpactMapping[] m_impactMappings;

		[Token(Token = "0x6003062")]
		[Address(RVA = "0x1317AD8", Offset = "0x1317AD8", VA = "0x1317AD8")]
		public DamageMapping()
		{
		}
	}
}
namespace Audio
{
	[Token(Token = "0x2000800")]
	public class PlayerAudioManager : SceneSingleton<PlayerAudioManager>
	{
		[Token(Token = "0x400278E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Audio")]
		[SerializeField]
		private PlayerVOAudioEvents m_playerAudio;

		[Token(Token = "0x400278F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<GameEvent, List<AudioLine>> m_defaultAudioEvents;

		[Token(Token = "0x4002790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<string, AudioLine> m_audioEvents;

		[Token(Token = "0x4002791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<PlayerAgent, VOAudioPlayer> m_audioPlayers;

		[Token(Token = "0x4002792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VOAudioPlayer m_voAudioPlayer;

		[Token(Token = "0x4002793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool m_isDedicatedServer;

		[Token(Token = "0x4002794")]
		private const string c_firstWave = "GAMFirstWave";

		[Token(Token = "0x4002795")]
		private const string c_secondWaveOnward = "GAMSecondWaveOnward";

		[Token(Token = "0x4002796")]
		private const string c_waveEnds = "GAMWaveEnds";

		[Token(Token = "0x4002797")]
		private const string c_waitForMe = "EXT40.46WaitForMe";

		[Token(Token = "0x6003063")]
		[Address(RVA = "0x1317AE0", Offset = "0x1317AE0", VA = "0x1317AE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003064")]
		[Address(RVA = "0x1318558", Offset = "0x1318558", VA = "0x1318558")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003065")]
		[Address(RVA = "0x1318B04", Offset = "0x1318B04", VA = "0x1318B04")]
		private void RegisterAgent(IAgent agent)
		{
		}

		[Token(Token = "0x6003066")]
		[Address(RVA = "0x1318C18", Offset = "0x1318C18", VA = "0x1318C18")]
		private void UnregisterAgent(IAgent agent)
		{
		}

		[Token(Token = "0x6003067")]
		[Address(RVA = "0x1318CF0", Offset = "0x1318CF0", VA = "0x1318CF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6003068")]
		[Address(RVA = "0x1318DDC", Offset = "0x1318DDC", VA = "0x1318DDC")]
		private void DefaultCallFunction(GameEvent gameEvent)
		{
		}

		[Token(Token = "0x6003069")]
		[Address(RVA = "0x13193A0", Offset = "0x13193A0", VA = "0x13193A0")]
		private void WaveStart(int waveNumber)
		{
		}

		[Token(Token = "0x600306A")]
		[Address(RVA = "0x1319420", Offset = "0x1319420", VA = "0x1319420")]
		private void WaveEnd(int waveNumber)
		{
		}

		[Token(Token = "0x600306B")]
		[Address(RVA = "0x1318F60", Offset = "0x1318F60", VA = "0x1318F60")]
		private void PlayAudio(string audioKey, [Optional] PlayerAgent agent)
		{
		}

		[Token(Token = "0x600306C")]
		[Address(RVA = "0x13195A8", Offset = "0x13195A8", VA = "0x13195A8")]
		public void UnsubscribeEvent(string audioKey)
		{
		}

		[Token(Token = "0x600306D")]
		[Address(RVA = "0x1319734", Offset = "0x1319734", VA = "0x1319734")]
		public void TriggerAudioZone(PlayerAgent agent)
		{
		}

		[Token(Token = "0x600306E")]
		[Address(RVA = "0x13199E4", Offset = "0x13199E4", VA = "0x13199E4")]
		public PlayerAudioManager()
		{
		}
	}
}
namespace PT
{
	[Token(Token = "0x2000801")]
	public class Core : SceneSingleton<Core>
	{
		[Token(Token = "0x2000802")]
		public class state_LoadSaveGame : BaseStateAttachedLogic
		{
			[Token(Token = "0x6003076")]
			[Address(RVA = "0x131A18C", Offset = "0x131A18C", VA = "0x131A18C", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003077")]
			[Address(RVA = "0x131A1DC", Offset = "0x131A1DC", VA = "0x131A1DC")]
			public state_LoadSaveGame()
			{
			}
		}

		[Token(Token = "0x2000803")]
		public class state_InitialiseQuestManager : BaseStateAttachedLogic
		{
			[Token(Token = "0x6003078")]
			[Address(RVA = "0x131A1E4", Offset = "0x131A1E4", VA = "0x131A1E4", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003079")]
			[Address(RVA = "0x131A2C4", Offset = "0x131A2C4", VA = "0x131A2C4")]
			public state_InitialiseQuestManager()
			{
			}
		}

		[Token(Token = "0x2000804")]
		public class state_InitialisePersistanceManager : BaseStateAttachedLogic
		{
			[Token(Token = "0x400279C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool m_initRequested;

			[Token(Token = "0x400279D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			private bool m_initError;

			[Token(Token = "0x600307A")]
			[Address(RVA = "0x131A2CC", Offset = "0x131A2CC", VA = "0x131A2CC", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600307B")]
			[Address(RVA = "0x131A4B8", Offset = "0x131A4B8", VA = "0x131A4B8", Slot = "11")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600307C")]
			[Address(RVA = "0x131A590", Offset = "0x131A590", VA = "0x131A590")]
			public state_InitialisePersistanceManager()
			{
			}
		}

		[Token(Token = "0x2000805")]
		public class state_InitialiseGameSystems : BaseStateAttachedLogic
		{
			[Token(Token = "0x600307D")]
			[Address(RVA = "0x131A598", Offset = "0x131A598", VA = "0x131A598", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600307E")]
			[Address(RVA = "0x131A774", Offset = "0x131A774", VA = "0x131A774", Slot = "12")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600307F")]
			[Address(RVA = "0x131A7F0", Offset = "0x131A7F0", VA = "0x131A7F0")]
			public state_InitialiseGameSystems()
			{
			}
		}

		[Token(Token = "0x2000806")]
		public class state_CleanupGameSystems : BaseStateAttachedLogic
		{
			[Token(Token = "0x6003080")]
			[Address(RVA = "0x131A7F8", Offset = "0x131A7F8", VA = "0x131A7F8", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003081")]
			[Address(RVA = "0x131AA00", Offset = "0x131AA00", VA = "0x131AA00")]
			public state_CleanupGameSystems()
			{
			}
		}

		[Token(Token = "0x2000807")]
		public class state_LevelEndListener : BaseStateAttachedLogic
		{
			[Token(Token = "0x400279E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MissionQuest m_completionQuest;

			[Token(Token = "0x400279F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static bool s_hasFinished;

			[Token(Token = "0x6003082")]
			[Address(RVA = "0x131AA08", Offset = "0x131AA08", VA = "0x131AA08", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003083")]
			[Address(RVA = "0x131AC18", Offset = "0x131AC18", VA = "0x131AC18", Slot = "12")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003084")]
			[Address(RVA = "0x131AD7C", Offset = "0x131AD7C", VA = "0x131AD7C")]
			private void HandleQuestStateChanged(Quest quest)
			{
			}

			[Token(Token = "0x6003085")]
			[Address(RVA = "0x131AE74", Offset = "0x131AE74", VA = "0x131AE74")]
			public state_LevelEndListener()
			{
			}
		}

		[Token(Token = "0x2000808")]
		[StateObjectValueType(typeof(CabinLocationPerformanceConfig), "Location Performance Config")]
		public class state_SetPerformanceConfig : BaseStateAttachedLogic
		{
			[Token(Token = "0x6003087")]
			[Address(RVA = "0x131AECC", Offset = "0x131AECC", VA = "0x131AECC", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003088")]
			[Address(RVA = "0x131B06C", Offset = "0x131B06C", VA = "0x131B06C")]
			public state_SetPerformanceConfig()
			{
			}
		}

		[Token(Token = "0x2000809")]
		public class state_skipIntro : BaseStateAttachedLogic
		{
			[Token(Token = "0x6003089")]
			[Address(RVA = "0x131B074", Offset = "0x131B074", VA = "0x131B074", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600308A")]
			[Address(RVA = "0x131B0E0", Offset = "0x131B0E0", VA = "0x131B0E0")]
			public state_skipIntro()
			{
			}
		}

		[Token(Token = "0x200080A")]
		public class state_skipResultsScreens : BaseStateAttachedLogic
		{
			[Token(Token = "0x600308B")]
			[Address(RVA = "0x131B0E8", Offset = "0x131B0E8", VA = "0x131B0E8", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600308C")]
			[Address(RVA = "0x131B280", Offset = "0x131B280", VA = "0x131B280")]
			public state_skipResultsScreens()
			{
			}
		}

		[Token(Token = "0x200080B")]
		public class state_DisableASW : BaseStateAttachedLogic
		{
			[Token(Token = "0x600308D")]
			[Address(RVA = "0x131B288", Offset = "0x131B288", VA = "0x131B288", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600308E")]
			[Address(RVA = "0x131B3C4", Offset = "0x131B3C4", VA = "0x131B3C4")]
			public state_DisableASW()
			{
			}
		}

		[Token(Token = "0x200080C")]
		public class state_RestoreASWDefaultState : BaseStateAttachedLogic
		{
			[Token(Token = "0x600308F")]
			[Address(RVA = "0x131B3CC", Offset = "0x131B3CC", VA = "0x131B3CC", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003090")]
			[Address(RVA = "0x131B4D4", Offset = "0x131B4D4", VA = "0x131B4D4")]
			public state_RestoreASWDefaultState()
			{
			}
		}

		[Token(Token = "0x4002798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InitialBootData InitialBootData;

		[Token(Token = "0x4002799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnCoreStarted;

		[Token(Token = "0x400279A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action OnCorePerformanceSettingsChanged;

		[Token(Token = "0x400279B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static bool s_defaulASWValue;

		[Token(Token = "0x600306F")]
		[Address(RVA = "0x1319B20", Offset = "0x1319B20", VA = "0x1319B20")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003070")]
		[Address(RVA = "0x1319C84", Offset = "0x1319C84", VA = "0x1319C84")]
		private void Start()
		{
		}

		[Token(Token = "0x6003071")]
		[Address(RVA = "0x1319E10", Offset = "0x1319E10", VA = "0x1319E10")]
		public string TextFormatter(string formatter, object value)
		{
			return null;
		}

		[Token(Token = "0x6003072")]
		[Address(RVA = "0x1319FEC", Offset = "0x1319FEC", VA = "0x1319FEC")]
		[ContextMenu("Show User name")]
		public void PrintUsername()
		{
		}

		[Token(Token = "0x6003073")]
		[Address(RVA = "0x131A0A4", Offset = "0x131A0A4", VA = "0x131A0A4")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6003074")]
		[Address(RVA = "0x131A0A8", Offset = "0x131A0A8", VA = "0x131A0A8")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6003075")]
		[Address(RVA = "0x131A0FC", Offset = "0x131A0FC", VA = "0x131A0FC")]
		public Core()
		{
		}
	}
	[Token(Token = "0x200080D")]
	public class InitialBootData
	{
		[Token(Token = "0x40027A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsDebugBoot;

		[Token(Token = "0x40027A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool HasQuestOverride;

		[Token(Token = "0x6003091")]
		[Address(RVA = "0x131A184", Offset = "0x131A184", VA = "0x131A184")]
		public InitialBootData()
		{
		}
	}
	[Token(Token = "0x200080E")]
	[CreateAssetMenu(fileName = "NewGameEvent", menuName = "PT/New GameEvent")]
	public class GameEvent : ScriptableObject
	{
		[Token(Token = "0x40027A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Recommend for events that are triggered by buttons, as button state isn't replicated.")]
		[Header("Networking")]
		public bool Replicate;

		[Token(Token = "0x40027A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		[UnityEngine.Tooltip("Who should get the event replication.")]
		private GlobalTargets m_replicationTarget;

		[Token(Token = "0x40027A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[ReadOnly]
		public string guid;

		[Token(Token = "0x40027A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Debug")]
		public bool Log;

		[Token(Token = "0x40027A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, GameEvent> GUIDToGameEvent;

		[Token(Token = "0x1400002D")]
		public event Action OnGameEvent
		{
			[Token(Token = "0x6003092")]
			[Address(RVA = "0x131B4DC", Offset = "0x131B4DC", VA = "0x131B4DC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003093")]
			[Address(RVA = "0x131B578", Offset = "0x131B578", VA = "0x131B578")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002E")]
		public event Action<UnityEngine.Object> OnGameEventWithObject
		{
			[Token(Token = "0x6003094")]
			[Address(RVA = "0x131B614", Offset = "0x131B614", VA = "0x131B614")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003095")]
			[Address(RVA = "0x131B6C4", Offset = "0x131B6C4", VA = "0x131B6C4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002F")]
		public event Action<GameEvent> OnAudioGameEvent
		{
			[Token(Token = "0x6003096")]
			[Address(RVA = "0x13184A8", Offset = "0x13184A8", VA = "0x13184A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003097")]
			[Address(RVA = "0x1318A54", Offset = "0x1318A54", VA = "0x1318A54")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003098")]
		[Address(RVA = "0x131B774", Offset = "0x131B774", VA = "0x131B774")]
		public static GameEvent FindGameEvent(Guid guid)
		{
			return null;
		}

		[Token(Token = "0x6003099")]
		[Address(RVA = "0x131B854", Offset = "0x131B854", VA = "0x131B854")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600309A")]
		[Address(RVA = "0x131B928", Offset = "0x131B928", VA = "0x131B928")]
		public void InvokeEvent()
		{
		}

		[Token(Token = "0x600309B")]
		[Address(RVA = "0x131B9F4", Offset = "0x131B9F4", VA = "0x131B9F4")]
		public void InvokeEvent(UnityEngine.Object value)
		{
		}

		[Token(Token = "0x600309C")]
		[Address(RVA = "0x131BA54", Offset = "0x131BA54", VA = "0x131BA54")]
		public GameEvent()
		{
		}
	}
	[Token(Token = "0x200080F")]
	public class State_InitializeDarknessSystem : BaseStateAttachedLogic
	{
		[Token(Token = "0x600309E")]
		[Address(RVA = "0x131BAFC", Offset = "0x131BAFC", VA = "0x131BAFC", Slot = "9")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600309F")]
		[Address(RVA = "0x131BB68", Offset = "0x131BB68", VA = "0x131BB68")]
		public State_InitializeDarknessSystem()
		{
		}
	}
	[Token(Token = "0x2000810")]
	[RequireComponent(typeof(BillboardTransform))]
	public class AgentTrackerLocationMarker : MonoBehaviour
	{
		[Token(Token = "0x40027AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<AgentTrackerLocationMarker> s_allInstances;

		[Token(Token = "0x40027AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Image m_image;

		[Token(Token = "0x40027AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Canvas m_canvas;

		[Token(Token = "0x40027AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject m_imageGameObject;

		[Token(Token = "0x40027AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BillboardTransform m_billboard;

		[Token(Token = "0x40027AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_initialized;

		[Token(Token = "0x40027B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int s_shaderPropUnityGuizTestMode;

		[Token(Token = "0x40027B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material s_adjustedMaterial;

		[Token(Token = "0x60030A0")]
		[Address(RVA = "0x131BB70", Offset = "0x131BB70", VA = "0x131BB70")]
		private void Awake()
		{
		}

		[Token(Token = "0x60030A1")]
		[Address(RVA = "0x131BCD8", Offset = "0x131BCD8", VA = "0x131BCD8")]
		public void Init(Agent agent)
		{
		}

		[Token(Token = "0x60030A2")]
		[Address(RVA = "0x131BBF8", Offset = "0x131BBF8", VA = "0x131BBF8")]
		private void Update()
		{
		}

		[Token(Token = "0x60030A3")]
		[Address(RVA = "0x131C070", Offset = "0x131C070", VA = "0x131C070")]
		public AgentTrackerLocationMarker()
		{
		}
	}
	[Token(Token = "0x2000811")]
	public class AgentTrackerPanel : MonoBehaviour
	{
		[Token(Token = "0x40027B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TMP_Text m_totalCountText;

		[Token(Token = "0x40027B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TMP_Text m_squadSummaryText;

		[Token(Token = "0x40027B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TMP_Text m_killPlayerLabelText;

		[Token(Token = "0x40027B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private StringBuilder m_summaryBuilder;

		[Token(Token = "0x40027B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_displayAgentLocationMarkers;

		[Token(Token = "0x40027B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IAgent[] s_agentBuffer;

		[Token(Token = "0x40027B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int m_killSelfVerifications;

		[Token(Token = "0x40027B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_killSelfLastAttemptTime;

		[Token(Token = "0x40027BA")]
		private const int c_killSelfRequiredVerifications = 3;

		[Token(Token = "0x17000855")]
		public static bool DisplayAgentLocationMarkers
		{
			[Token(Token = "0x60030A5")]
			[Address(RVA = "0x131C140", Offset = "0x131C140", VA = "0x131C140")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60030A6")]
		[Address(RVA = "0x131C198", Offset = "0x131C198", VA = "0x131C198")]
		private void Awake()
		{
		}

		[Token(Token = "0x60030A7")]
		[Address(RVA = "0x131C200", Offset = "0x131C200", VA = "0x131C200")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60030A8")]
		[Address(RVA = "0x131C25C", Offset = "0x131C25C", VA = "0x131C25C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60030A9")]
		[Address(RVA = "0x131C2B4", Offset = "0x131C2B4", VA = "0x131C2B4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60030AA")]
		[Address(RVA = "0x131D628", Offset = "0x131D628", VA = "0x131D628")]
		public void KillAllHostileAgents()
		{
		}

		[Token(Token = "0x60030AB")]
		[Address(RVA = "0x131D840", Offset = "0x131D840", VA = "0x131D840")]
		public void KillPlayer()
		{
		}

		[Token(Token = "0x60030AC")]
		[Address(RVA = "0x131CA40", Offset = "0x131CA40", VA = "0x131CA40")]
		private void RefreshKillSelfLabel()
		{
		}

		[Token(Token = "0x60030AD")]
		[Address(RVA = "0x131D8F8", Offset = "0x131D8F8", VA = "0x131D8F8")]
		public AgentTrackerPanel()
		{
		}
	}
	[Token(Token = "0x2000812")]
	public class VrDebugConsole : MonoBehaviour
	{
		[Token(Token = "0x2000813")]
		private struct LogData
		{
			[Token(Token = "0x40027D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string logString;

			[Token(Token = "0x40027DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string stackTrace;

			[Token(Token = "0x40027DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LogType logType;

			[Token(Token = "0x40027DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DateTime timestamp;
		}

		[Token(Token = "0x40027BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private VrDebugConsoleEntry m_entryPrefab;

		[Token(Token = "0x40027BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_entryParent;

		[Token(Token = "0x40027BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Min(0f)]
		[SerializeField]
		private int m_pageLength;

		[Token(Token = "0x40027BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TMP_Text m_stackTraceText;

		[Token(Token = "0x40027BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TMP_Text m_exportPathText;

		[Token(Token = "0x40027C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Space]
		[SerializeField]
		private TMP_Text m_errorCountText;

		[Token(Token = "0x40027C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TMP_Text m_assertCountText;

		[Token(Token = "0x40027C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TMP_Text m_warnCountText;

		[Token(Token = "0x40027C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TMP_Text m_infoCountText;

		[Token(Token = "0x40027C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private TMP_Text m_exceptionCountText;

		[Token(Token = "0x40027C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Image m_errorFilterStatusLight;

		[Token(Token = "0x40027C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Image m_assertFilterStatusLight;

		[Token(Token = "0x40027C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Image m_warnFilterStatusLight;

		[Token(Token = "0x40027C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Image m_infoFilterStatusLight;

		[Token(Token = "0x40027C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Image m_exceptionFilterStatusLight;

		[Token(Token = "0x40027CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<VrDebugConsoleEntry> m_entryInstanceList;

		[Token(Token = "0x40027CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int m_firstViewedLogIndex;

		[Token(Token = "0x40027CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int? m_selectedEntryIndex;

		[Token(Token = "0x40027CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool m_followLatest;

		[Token(Token = "0x40027CE")]
		private const int s_stackTraceMaxLineCount = 25;

		[Token(Token = "0x40027CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<LogData> m_logEntries;

		[Token(Token = "0x40027D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Dictionary<LogType, bool> m_typeVisibilityDictionary;

		[Token(Token = "0x40027D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Dictionary<LogType, int> m_logTypeCounts;

		[Token(Token = "0x40027D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool m_hasPendingRefresh;

		[Token(Token = "0x40027D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool m_isReportingMessage;

		[Token(Token = "0x40027D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private string m_stacktraceExportFile;

		[Token(Token = "0x40027D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private StringBuilder m_exportOutputBuilder;

		[Token(Token = "0x40027D6")]
		private const string c_exportSubDir = "DebugConsoleExports";

		[Token(Token = "0x40027D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float? m_latestExportTime;

		[Token(Token = "0x40027D8")]
		private const float c_exportConfirmTime = 1f;

		[Token(Token = "0x60030AF")]
		[Address(RVA = "0x131D970", Offset = "0x131D970", VA = "0x131D970")]
		private void Awake()
		{
		}

		[Token(Token = "0x60030B0")]
		[Address(RVA = "0x131DED4", Offset = "0x131DED4", VA = "0x131DED4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60030B1")]
		[Address(RVA = "0x131DF54", Offset = "0x131DF54", VA = "0x131DF54")]
		public void Clear()
		{
		}

		[Token(Token = "0x60030B2")]
		[Address(RVA = "0x131E0E0", Offset = "0x131E0E0", VA = "0x131E0E0")]
		private void HandleLogMessage(string logString, string stackTrace, LogType type)
		{
		}

		[Token(Token = "0x60030B3")]
		[Address(RVA = "0x131DCD0", Offset = "0x131DCD0", VA = "0x131DCD0")]
		private void EnsureRequiredEntries(int requiredCount)
		{
		}

		[Token(Token = "0x60030B4")]
		[Address(RVA = "0x131E448", Offset = "0x131E448", VA = "0x131E448")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60030B5")]
		[Address(RVA = "0x131E578", Offset = "0x131E578", VA = "0x131E578")]
		private void RefreshEntryList()
		{
		}

		[Token(Token = "0x60030B6")]
		[Address(RVA = "0x131EB6C", Offset = "0x131EB6C", VA = "0x131EB6C")]
		private bool IsTypeCurrentlyVisible(LogType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60030B7")]
		[Address(RVA = "0x131ED94", Offset = "0x131ED94", VA = "0x131ED94")]
		private string CountMessagesOfType(LogType type)
		{
			return null;
		}

		[Token(Token = "0x60030B8")]
		[Address(RVA = "0x131EA0C", Offset = "0x131EA0C", VA = "0x131EA0C")]
		private int CountVisibleEntries()
		{
			return default(int);
		}

		[Token(Token = "0x60030B9")]
		[Address(RVA = "0x131EE60", Offset = "0x131EE60", VA = "0x131EE60")]
		public void ToggleLogTypeVisibility(int typeOrd)
		{
		}

		[Token(Token = "0x60030BA")]
		[Address(RVA = "0x131F024", Offset = "0x131F024", VA = "0x131F024")]
		public void ScrollPage(int moveDelta)
		{
		}

		[Token(Token = "0x60030BB")]
		[Address(RVA = "0x131F074", Offset = "0x131F074", VA = "0x131F074")]
		public void AutoScrollToLatest()
		{
		}

		[Token(Token = "0x60030BC")]
		[Address(RVA = "0x131F084", Offset = "0x131F084", VA = "0x131F084")]
		private void OnEntrySelected(int entryIndex, string message, string stackTrace)
		{
		}

		[Token(Token = "0x60030BD")]
		[Address(RVA = "0x131F1E8", Offset = "0x131F1E8", VA = "0x131F1E8")]
		public void TakeScreenShot()
		{
		}

		[Token(Token = "0x60030BE")]
		[Address(RVA = "0x131F394", Offset = "0x131F394", VA = "0x131F394")]
		public void ExportEntireLog()
		{
		}

		[Token(Token = "0x60030BF")]
		[Address(RVA = "0x131F77C", Offset = "0x131F77C", VA = "0x131F77C")]
		public VrDebugConsole()
		{
		}
	}
	[Token(Token = "0x2000814")]
	public class VrDebugConsoleEntry : CachedMonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000815")]
		private struct LevelMapping
		{
			[Token(Token = "0x40027E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LogType level;

			[Token(Token = "0x40027E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Color color;

			[Token(Token = "0x40027E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Sprite icon;
		}

		[Token(Token = "0x40027DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TMP_Text m_messageText;

		[Token(Token = "0x40027DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Image m_levelIconImage;

		[Token(Token = "0x40027DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Image m_backgroundImage;

		[Token(Token = "0x40027E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Color m_highlightedColor;

		[Token(Token = "0x40027E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Color m_standardColor;

		[Token(Token = "0x40027E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private LevelMapping[] m_levelIconMappings;

		[Token(Token = "0x40027E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string m_message;

		[Token(Token = "0x40027E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string m_stackTrace;

		[Token(Token = "0x40027E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int m_logIndex;

		[Token(Token = "0x40027E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Action<int, string, string> OnSelected;

		[Token(Token = "0x17000856")]
		public int LogIndex
		{
			[Token(Token = "0x60030C0")]
			[Address(RVA = "0x131F7F0", Offset = "0x131F7F0", VA = "0x131F7F0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60030C1")]
		[Address(RVA = "0x131F7F8", Offset = "0x131F7F8", VA = "0x131F7F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60030C2")]
		[Address(RVA = "0x131EC00", Offset = "0x131EC00", VA = "0x131EC00")]
		public void Populate(string message, string stackTrace, LogType level, bool shouldBeVisible)
		{
		}

		[Token(Token = "0x60030C3")]
		[Address(RVA = "0x131F838", Offset = "0x131F838", VA = "0x131F838")]
		public void SetLogIndex(int index)
		{
		}

		[Token(Token = "0x60030C4")]
		[Address(RVA = "0x131E078", Offset = "0x131E078", VA = "0x131E078")]
		public void SetVisible(bool visible, bool force = false)
		{
		}

		[Token(Token = "0x60030C5")]
		[Address(RVA = "0x131ED30", Offset = "0x131ED30", VA = "0x131ED30")]
		public void SetHighlighted(bool highlight)
		{
		}

		[Token(Token = "0x60030C6")]
		[Address(RVA = "0x131F840", Offset = "0x131F840", VA = "0x131F840")]
		public void OnEntrySelected()
		{
		}

		[Token(Token = "0x60030C7")]
		[Address(RVA = "0x131F864", Offset = "0x131F864", VA = "0x131F864")]
		public VrDebugConsoleEntry()
		{
		}
	}
	[Token(Token = "0x2000816")]
	public abstract class Agent : Poolable, IAgent, ITargetHandler, IFactionMember, IOwner, IPriorityTargetProvider, IHealthStatusProvider
	{
		[Token(Token = "0x40027EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[UnityEngine.Tooltip("The agent's identifier.")]
		private Identifier m_identifier;

		[Token(Token = "0x40027EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("The agent's faction. I will decide whether to be hostile to other agents based on my faction compared to their faction.")]
		[SerializeField]
		private Faction m_faction;

		[Token(Token = "0x40027EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("A component that lets us detect whether this agent is grounded (standing on the floor). Not required for immobile agents like automated turrets.")]
		[SerializeField]
		protected GroundMonitor m_groundMonitor;

		[Token(Token = "0x40027ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool m_hasGroundMonitor;

		[Token(Token = "0x40027EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[UnityEngine.Tooltip("If ticked, allow the agent to be attacked by a player point walking into them.")]
		[SerializeField]
		private bool m_canBePointWalkCharged;

		[Token(Token = "0x40027EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected HealthStatus m_rootHealthStatus;

		[Token(Token = "0x40027F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_hasRootHealthStatus;

		[Token(Token = "0x40027F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BoltEntity m_boltEntity;

		[Token(Token = "0x40027F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int m_defaultAvoidancePriority;

		[Token(Token = "0x40027F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private PriorityTarget m_priorityTarget;

		[Token(Token = "0x17000857")]
		public bool CanBePointWalkCharged
		{
			[Token(Token = "0x60030C8")]
			[Address(RVA = "0x131F86C", Offset = "0x131F86C", VA = "0x131F86C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000858")]
		private Faction Cabin.Factions.IFactionMember.faction
		{
			[Token(Token = "0x60030C9")]
			[Address(RVA = "0x131F874", Offset = "0x131F874", VA = "0x131F874", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000859")]
		public abstract bool IsHumanPlayer
		{
			[Token(Token = "0x60030CA")]
			get;
		}

		[Token(Token = "0x1700085A")]
		public bool IsGrounded
		{
			[Token(Token = "0x60030CB")]
			[Address(RVA = "0x131F87C", Offset = "0x131F87C", VA = "0x131F87C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700085B")]
		public bool IsGroundedOnStaticFloor
		{
			[Token(Token = "0x60030CC")]
			[Address(RVA = "0x131F8B0", Offset = "0x131F8B0", VA = "0x131F8B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700085C")]
		public Vector3 GroundVelocity
		{
			[Token(Token = "0x60030CD")]
			[Address(RVA = "0x131F8E0", Offset = "0x131F8E0", VA = "0x131F8E0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700085D")]
		public Vector3 GroundNormal
		{
			[Token(Token = "0x60030CE")]
			[Address(RVA = "0x131F94C", Offset = "0x131F94C", VA = "0x131F94C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700085E")]
		private HealthStatus IHealthStatusProvider.healthStatus
		{
			[Token(Token = "0x60030CF")]
			[Address(RVA = "0x131F9B8", Offset = "0x131F9B8", VA = "0x131F9B8", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700085F")]
		public HealthStatus RootHealthStatus
		{
			[Token(Token = "0x60030D0")]
			[Address(RVA = "0x131F9C0", Offset = "0x131F9C0", VA = "0x131F9C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000860")]
		public bool HasRootHealthStatus
		{
			[Token(Token = "0x60030D1")]
			[Address(RVA = "0x131F9C8", Offset = "0x131F9C8", VA = "0x131F9C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000861")]
		public virtual float Radius
		{
			[Token(Token = "0x60030D2")]
			[Address(RVA = "0x131F9D0", Offset = "0x131F9D0", VA = "0x131F9D0", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000862")]
		public abstract float NavAvoidanceRadius
		{
			[Token(Token = "0x60030D3")]
			get;
		}

		[Token(Token = "0x17000863")]
		public Identifier Identifier
		{
			[Token(Token = "0x60030D4")]
			[Address(RVA = "0x131F9D8", Offset = "0x131F9D8", VA = "0x131F9D8", Slot = "15")]
			get
			{
				return null;
			}
			[Token(Token = "0x60030D5")]
			[Address(RVA = "0x131F9E0", Offset = "0x131F9E0", VA = "0x131F9E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000864")]
		public BoltEntity BoltEntity
		{
			[Token(Token = "0x60030D6")]
			[Address(RVA = "0x131946C", Offset = "0x131946C", VA = "0x131946C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000865")]
		private PriorityTarget Cabin.Gameplay.IPriorityTargetProvider.priorityTarget
		{
			[Token(Token = "0x60030D8")]
			[Address(RVA = "0x131F9EC", Offset = "0x131F9EC", VA = "0x131F9EC", Slot = "25")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000866")]
		public int DefaultAvoidancePriority
		{
			[Token(Token = "0x60030D9")]
			[Address(RVA = "0x131F9F4", Offset = "0x131F9F4", VA = "0x131F9F4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60030DA")]
			[Address(RVA = "0x131F9FC", Offset = "0x131F9FC", VA = "0x131F9FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000867")]
		public abstract Vector3 ForwardFacingVector
		{
			[Token(Token = "0x60030E3")]
			get;
		}

		[Token(Token = "0x17000868")]
		public abstract Vector3 HeadPosition
		{
			[Token(Token = "0x60030E4")]
			get;
		}

		[Token(Token = "0x17000869")]
		public abstract Transform HeadTransform
		{
			[Token(Token = "0x60030E5")]
			get;
		}

		[Token(Token = "0x1700086A")]
		public PriorityTarget PriorityTarget
		{
			[Token(Token = "0x60030E6")]
			[Address(RVA = "0x1320724", Offset = "0x1320724", VA = "0x1320724")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60030D7")]
		[Address(RVA = "0x131F9E8", Offset = "0x131F9E8", VA = "0x131F9E8", Slot = "24")]
		private BoltEntity IOwner.BoltEntity()
		{
			return null;
		}

		[Token(Token = "0x60030DB")]
		[Address(RVA = "0x131FA04", Offset = "0x131FA04", VA = "0x131FA04", Slot = "30")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60030DC")]
		[Address(RVA = "0x131FCD8", Offset = "0x131FCD8", VA = "0x131FCD8", Slot = "31")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60030DD")]
		[Address(RVA = "0x1320190", Offset = "0x1320190", VA = "0x1320190", Slot = "32")]
		protected virtual void OnHealthDecreased(HealthStatusInfo info)
		{
		}

		[Token(Token = "0x60030DE")]
		[Address(RVA = "0x1320194", Offset = "0x1320194", VA = "0x1320194", Slot = "33")]
		protected virtual void OnDeath(HealthStatusInfo info)
		{
		}

		[Token(Token = "0x60030DF")]
		[Address(RVA = "0x1320198", Offset = "0x1320198", VA = "0x1320198", Slot = "9")]
		public override void OnAllocFromPool()
		{
		}

		[Token(Token = "0x60030E0")]
		[Address(RVA = "0x1320228", Offset = "0x1320228", VA = "0x1320228", Slot = "10")]
		public override void OnReturnToPool()
		{
		}

		[Token(Token = "0x60030E1")]
		[Address(RVA = "0x1320298", Offset = "0x1320298", VA = "0x1320298", Slot = "34")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60030E2")]
		[Address(RVA = "0x1320670", Offset = "0x1320670", VA = "0x1320670", Slot = "35")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60030E7")]
		public abstract int GetCurrentTargets(out PriorityTarget[] targets);

		[Token(Token = "0x60030E8")]
		public abstract void GetCurrentWeapons(ref HashSet<VrItem> itemSet);

		[Token(Token = "0x60030E9")]
		public abstract bool IsLookingAt(Vector3 position);

		[Token(Token = "0x60030EA")]
		[Address(RVA = "0x132072C", Offset = "0x132072C", VA = "0x132072C")]
		protected Agent()
		{
		}

		[SpecialName]
		[Token(Token = "0x60030EB")]
		[Address(RVA = "0x132074C", Offset = "0x132074C", VA = "0x132074C", Slot = "11")]
		private string PT.IAgent.get_name()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x60030EC")]
		[Address(RVA = "0x1320754", Offset = "0x1320754", VA = "0x1320754", Slot = "12")]
		private Transform PT.IAgent.get_cachedTransform()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x60030ED")]
		[Address(RVA = "0x132075C", Offset = "0x132075C", VA = "0x132075C", Slot = "23")]
		private Transform IOwner.get_cachedTransform()
		{
			return null;
		}
	}
	[Token(Token = "0x2000817")]
	public class AgentTracker : Singleton<AgentTracker>
	{
		[Token(Token = "0x2000818")]
		[BurstCompile]
		public struct LocalityJob : IJob
		{
			[Token(Token = "0x40027FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public NativeArray<float4> positions;

			[Token(Token = "0x4002800")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int length;

			[Token(Token = "0x4002801")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float nearDist;

			[Token(Token = "0x4002802")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float farDist;

			[Token(Token = "0x600310B")]
			[Address(RVA = "0x1322598", Offset = "0x1322598", VA = "0x1322598", Slot = "4")]
			public void Execute()
			{
			}
		}

		[Token(Token = "0x2000819")]
		[BurstCompile]
		public struct LocalityParallelJob : IJobParallelFor
		{
			[Token(Token = "0x4002803")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public NativeArray<float4> positions;

			[Token(Token = "0x4002804")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int length;

			[Token(Token = "0x4002805")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float nearDist;

			[Token(Token = "0x4002806")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float farDist;

			[Token(Token = "0x600310C")]
			[Address(RVA = "0x13227C4", Offset = "0x13227C4", VA = "0x13227C4", Slot = "4")]
			public void Execute(int index)
			{
			}
		}

		[Token(Token = "0x40027F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IAgent[] s_agentLookupBuffer;

		[Token(Token = "0x40027F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<IAgent> OnAgentRegistered;

		[Token(Token = "0x40027F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Action<IAgent> OnAgentDeregistered;

		[Token(Token = "0x40027F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action<PlayerAgent> OnPlayerAgentDeregistered;

		[Token(Token = "0x40027F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HashSet<IAgent> m_allAgents;

		[Token(Token = "0x40027F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<PlayerAgent> m_remotePlayerAgents;

		[Token(Token = "0x40027FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PlayerAgent m_playerAgent;

		[Token(Token = "0x40027FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<PlayerAgent> m_playerAgents;

		[Token(Token = "0x40027FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<IAgent> m_nonPlayerAgents;

		[Token(Token = "0x40027FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private NativeArray<float4> m_agentPositions;

		[Token(Token = "0x40027FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private JobHandle m_localityJob;

		[Token(Token = "0x1700086B")]
		public PlayerAgent PlayerAgent
		{
			[Token(Token = "0x60030EE")]
			[Address(RVA = "0x1313D68", Offset = "0x1313D68", VA = "0x1313D68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700086C")]
		public List<PlayerAgent> RemotePlayerAgents
		{
			[Token(Token = "0x60030EF")]
			[Address(RVA = "0x1320764", Offset = "0x1320764", VA = "0x1320764")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700086D")]
		public List<PlayerAgent> playerAgents
		{
			[Token(Token = "0x60030F0")]
			[Address(RVA = "0x132076C", Offset = "0x132076C", VA = "0x132076C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700086E")]
		public int MaxNonPlayerAgentCount
		{
			[Token(Token = "0x60030FA")]
			[Address(RVA = "0x131CDB4", Offset = "0x131CDB4", VA = "0x131CDB4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700086F")]
		public List<IAgent> NonPlayerAgents
		{
			[Token(Token = "0x60030FB")]
			[Address(RVA = "0x1320CC0", Offset = "0x1320CC0", VA = "0x1320CC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60030F1")]
		[Address(RVA = "0x1320774", Offset = "0x1320774", VA = "0x1320774")]
		private void Awake()
		{
		}

		[Token(Token = "0x60030F2")]
		[Address(RVA = "0x13207E0", Offset = "0x13207E0", VA = "0x13207E0", Slot = "4")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60030F3")]
		[Address(RVA = "0x131A8B0", Offset = "0x131A8B0", VA = "0x131A8B0")]
		public void RemoveAllNonPlayers()
		{
		}

		[Token(Token = "0x60030F4")]
		[Address(RVA = "0x1320850", Offset = "0x1320850", VA = "0x1320850")]
		public static void Add(IAgent agent)
		{
		}

		[Token(Token = "0x60030F5")]
		[Address(RVA = "0x1320904", Offset = "0x1320904", VA = "0x1320904")]
		public static void Remove(IAgent agent)
		{
		}

		[Token(Token = "0x60030F6")]
		[Address(RVA = "0x1320A1C", Offset = "0x1320A1C", VA = "0x1320A1C")]
		public static int Debug_GetNumEnemies(EnemyType enemyType)
		{
			return default(int);
		}

		[Token(Token = "0x60030F7")]
		[Address(RVA = "0x1320310", Offset = "0x1320310", VA = "0x1320310")]
		public void RegisterAgent(IAgent agent)
		{
		}

		[Token(Token = "0x60030F8")]
		[Address(RVA = "0x131FED4", Offset = "0x131FED4", VA = "0x131FED4")]
		public void UnregisterAgent(IAgent agent)
		{
		}

		[Token(Token = "0x60030F9")]
		[Address(RVA = "0x1320C14", Offset = "0x1320C14", VA = "0x1320C14")]
		public bool IsValidRemoteAgent(IAgent agent)
		{
			return default(bool);
		}

		[Token(Token = "0x60030FC")]
		[Address(RVA = "0x1320C0C", Offset = "0x1320C0C", VA = "0x1320C0C")]
		private int GetAvoidancePriority()
		{
			return default(int);
		}

		[Token(Token = "0x60030FD")]
		[Address(RVA = "0x1320CC8", Offset = "0x1320CC8", VA = "0x1320CC8")]
		public int GetAgents(PriorityTarget[] resultsBuffer, [Optional] FactionDiplomacy? relationshipWithPlayer, bool alertOnly = false)
		{
			return default(int);
		}

		[Token(Token = "0x60030FE")]
		[Address(RVA = "0x131CE2C", Offset = "0x131CE2C", VA = "0x131CE2C")]
		public int GetAgents(IAgent[] resultsBuffer, [Optional] FactionDiplomacy? relationshipWithPlayer, bool alertOnly = false)
		{
			return default(int);
		}

		[Token(Token = "0x60030FF")]
		[Address(RVA = "0x1320DDC", Offset = "0x1320DDC", VA = "0x1320DDC")]
		public List<Agent> GetAgents(Identifier identifier)
		{
			return null;
		}

		[Token(Token = "0x6003100")]
		[Address(RVA = "0x13137AC", Offset = "0x13137AC", VA = "0x13137AC")]
		public Agent GetAgent(Identifier identifier, bool allowDeadAgents = false)
		{
			return null;
		}

		[Token(Token = "0x6003101")]
		[Address(RVA = "0x131CB78", Offset = "0x131CB78", VA = "0x131CB78")]
		public int GetAliveNonPlayerAgentCount()
		{
			return default(int);
		}

		[Token(Token = "0x6003102")]
		[Address(RVA = "0x13210C4", Offset = "0x13210C4", VA = "0x13210C4")]
		public IAgent FindAgentClosestToVector(Vector3 origin, Vector3 forwards, float maximumAngleOffset, Faction limitToAgentsHostileToFaction)
		{
			return null;
		}

		[Token(Token = "0x6003103")]
		[Address(RVA = "0x13215E8", Offset = "0x13215E8", VA = "0x13215E8")]
		public int GetAgentsInRadius(IAgent[] agents, Vector3 origin, float radius, [Optional] FactionDiplomacy? relationshipWithPlayer)
		{
			return default(int);
		}

		[Token(Token = "0x6003104")]
		[Address(RVA = "0x1321974", Offset = "0x1321974", VA = "0x1321974")]
		public IAgent GetNearestAgentInRadius(Vector3 origin, float radius, [Optional] FactionDiplomacy? relationshipWithPlayer)
		{
			return null;
		}

		[Token(Token = "0x6003105")]
		[Address(RVA = "0x1321B3C", Offset = "0x1321B3C", VA = "0x1321B3C")]
		public IAgent GetNearestAgentInOrOverlappingRadius(Vector3 origin, float radius, [Optional] FactionDiplomacy? relationshipWithPlayer)
		{
			return null;
		}

		[Token(Token = "0x6003106")]
		[Address(RVA = "0x131D6D4", Offset = "0x131D6D4", VA = "0x131D6D4")]
		public void KillAllNonPlayerAgents()
		{
		}

		[Token(Token = "0x6003107")]
		[Address(RVA = "0x1321FC8", Offset = "0x1321FC8", VA = "0x1321FC8")]
		public void StartLocalityJob()
		{
		}

		[Token(Token = "0x6003108")]
		[Address(RVA = "0x1322244", Offset = "0x1322244", VA = "0x1322244")]
		private void CompleteLocalityJob()
		{
		}

		[Token(Token = "0x6003109")]
		[Address(RVA = "0x1322394", Offset = "0x1322394", VA = "0x1322394")]
		public AgentTracker()
		{
		}
	}
	[Token(Token = "0x200081B")]
	[DisallowMultipleComponent]
	public class FaceBoneResetter : MonoBehaviour
	{
		[Token(Token = "0x400280A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] m_bonesToReset;

		[Token(Token = "0x400280B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] m_localPositions;

		[Token(Token = "0x400280C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion[] m_localRotations;

		[Token(Token = "0x6003111")]
		[Address(RVA = "0x1322B28", Offset = "0x1322B28", VA = "0x1322B28")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003112")]
		[Address(RVA = "0x1322C80", Offset = "0x1322C80", VA = "0x1322C80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6003113")]
		[Address(RVA = "0x1322D4C", Offset = "0x1322D4C", VA = "0x1322D4C")]
		public FaceBoneResetter()
		{
		}
	}
	[Token(Token = "0x200081C")]
	public interface IAgent
	{
		[Token(Token = "0x17000870")]
		string name
		{
			[Token(Token = "0x6003114")]
			get;
		}

		[Token(Token = "0x17000871")]
		Transform cachedTransform
		{
			[Token(Token = "0x6003115")]
			get;
		}

		[Token(Token = "0x17000872")]
		float Radius
		{
			[Token(Token = "0x6003116")]
			get;
		}

		[Token(Token = "0x17000873")]
		bool IsHumanPlayer
		{
			[Token(Token = "0x6003117")]
			get;
		}

		[Token(Token = "0x17000874")]
		Identifier Identifier
		{
			[Token(Token = "0x6003118")]
			get;
		}
	}
	[Token(Token = "0x200081D")]
	public class PlayerAgent : Agent, IAttackStatus, ISectorProvider
	{
		[Token(Token = "0x200081E")]
		protected class RaycastHitComparer : IComparer<RaycastHit>
		{
			[Token(Token = "0x6003140")]
			[Address(RVA = "0x1324D2C", Offset = "0x1324D2C", VA = "0x1324D2C", Slot = "4")]
			public int Compare(RaycastHit x, RaycastHit y)
			{
				return default(int);
			}

			[Token(Token = "0x6003141")]
			[Address(RVA = "0x1324D24", Offset = "0x1324D24", VA = "0x1324D24")]
			public RaycastHitComparer()
			{
			}
		}

		[Token(Token = "0x400280D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private Inventory m_inventory;

		[Token(Token = "0x400280E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private InventorySlot_AmmoPouch m_inventorySlotAmmoPouch;

		[Token(Token = "0x400280F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[Space]
		private PlayerGloryMonitor m_playerGloryMonitor;

		[Token(Token = "0x4002810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[Min(0f)]
		[UnityEngine.Tooltip("After reacting to a glory moment, don't react to any more until this much time has passed (scaled seconds).")]
		private float m_minimumGloryVoInterval;

		[Token(Token = "0x4002811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float m_latestGloryVoTime;

		[Token(Token = "0x4002812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ManualHaptics m_haptics;

		[Token(Token = "0x4002813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[Space]
		private Transform m_leftHandAnchor;

		[Token(Token = "0x4002814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Transform m_rightHandAnchor;

		[Token(Token = "0x4002815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Transform m_leftAvatarShoulderJoint;

		[Token(Token = "0x4002816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Transform m_rightAvatarShoulderJoint;

		[Token(Token = "0x4002817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private SectorMember m_sectorMember;

		[Token(Token = "0x4002818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected RaycastHit[] m_raycastHitBuffer;

		[Token(Token = "0x4002819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected int m_targetRaycastLayerMask;

		[Token(Token = "0x400281A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected PriorityTarget[] m_currentTargetBuffer;

		[Token(Token = "0x400281B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int m_latestTargetUpdateFrame;

		[Token(Token = "0x400281C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int m_latestTargetCount;

		[Token(Token = "0x400281E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static RaycastHitComparer s_raycastHitComparer;

		[Token(Token = "0x4002820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 m_feetPosition;

		[Token(Token = "0x17000875")]
		public Inventory Inventory
		{
			[Token(Token = "0x6003119")]
			[Address(RVA = "0x1322D54", Offset = "0x1322D54", VA = "0x1322D54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000876")]
		public InventorySlot_AmmoPouch AmmoPouch
		{
			[Token(Token = "0x600311A")]
			[Address(RVA = "0x1322D5C", Offset = "0x1322D5C", VA = "0x1322D5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000877")]
		public SectorMember SectorMember
		{
			[Token(Token = "0x600311B")]
			[Address(RVA = "0x1322D64", Offset = "0x1322D64", VA = "0x1322D64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000878")]
		private Sector PT.BLAST.ISectorProvider.currentSector
		{
			[Token(Token = "0x600311C")]
			[Address(RVA = "0x1322D6C", Offset = "0x1322D6C", VA = "0x1322D6C", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000879")]
		public override bool IsHumanPlayer
		{
			[Token(Token = "0x600311D")]
			[Address(RVA = "0x1322DE8", Offset = "0x1322DE8", VA = "0x1322DE8", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700087A")]
		public bool IsLocalPlayer
		{
			[Token(Token = "0x600311E")]
			[Address(RVA = "0x1322DF0", Offset = "0x1322DF0", VA = "0x1322DF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700087B")]
		public Transform HordeSpawnPoint
		{
			[Token(Token = "0x600311F")]
			[Address(RVA = "0x1322EA4", Offset = "0x1322EA4", VA = "0x1322EA4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003120")]
			[Address(RVA = "0x1322EAC", Offset = "0x1322EAC", VA = "0x1322EAC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700087C")]
		public SimpleVelocityTracker simpleVelocityTracker
		{
			[Token(Token = "0x6003121")]
			[Address(RVA = "0x1322EBC", Offset = "0x1322EBC", VA = "0x1322EBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003122")]
			[Address(RVA = "0x1322EC4", Offset = "0x1322EC4", VA = "0x1322EC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700087D")]
		public override Vector3 ForwardFacingVector
		{
			[Token(Token = "0x6003128")]
			[Address(RVA = "0x1323548", Offset = "0x1323548", VA = "0x1323548", Slot = "36")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700087E")]
		public override Vector3 HeadPosition
		{
			[Token(Token = "0x6003129")]
			[Address(RVA = "0x13235D4", Offset = "0x13235D4", VA = "0x13235D4", Slot = "37")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700087F")]
		public override Transform HeadTransform
		{
			[Token(Token = "0x600312A")]
			[Address(RVA = "0x13236DC", Offset = "0x13236DC", VA = "0x13236DC", Slot = "38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000880")]
		public override float Radius
		{
			[Token(Token = "0x600312B")]
			[Address(RVA = "0x1323764", Offset = "0x1323764", VA = "0x1323764", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000881")]
		public override float NavAvoidanceRadius
		{
			[Token(Token = "0x600312C")]
			[Address(RVA = "0x13237EC", Offset = "0x13237EC", VA = "0x13237EC", Slot = "29")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000882")]
		protected virtual int ArmLength
		{
			[Token(Token = "0x600312D")]
			[Address(RVA = "0x132386C", Offset = "0x132386C", VA = "0x132386C", Slot = "45")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000883")]
		public virtual Vector3 feetPosition
		{
			[Token(Token = "0x600312E")]
			[Address(RVA = "0x13238E4", Offset = "0x13238E4", VA = "0x13238E4", Slot = "46")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000884")]
		public virtual Transform feetTransform
		{
			[Token(Token = "0x600312F")]
			[Address(RVA = "0x13238F4", Offset = "0x13238F4", VA = "0x13238F4", Slot = "47")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000885")]
		public bool shouldAttack
		{
			[Token(Token = "0x6003130")]
			[Address(RVA = "0x1323910", Offset = "0x1323910", VA = "0x1323910", Slot = "42")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003123")]
		[Address(RVA = "0x1322ED4", Offset = "0x1322ED4", VA = "0x1322ED4", Slot = "30")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003124")]
		[Address(RVA = "0x13231AC", Offset = "0x13231AC", VA = "0x13231AC", Slot = "44")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6003125")]
		[Address(RVA = "0x13231B0", Offset = "0x13231B0", VA = "0x13231B0", Slot = "34")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6003126")]
		[Address(RVA = "0x13233F0", Offset = "0x13233F0", VA = "0x13233F0", Slot = "35")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6003127")]
		[Address(RVA = "0x132340C", Offset = "0x132340C", VA = "0x132340C", Slot = "31")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6003131")]
		[Address(RVA = "0x1323930", Offset = "0x1323930", VA = "0x1323930")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003132")]
		[Address(RVA = "0x13239CC", Offset = "0x13239CC", VA = "0x13239CC", Slot = "39")]
		public override int GetCurrentTargets(out PriorityTarget[] targets)
		{
			return default(int);
		}

		[Token(Token = "0x6003133")]
		[Address(RVA = "0x132403C", Offset = "0x132403C", VA = "0x132403C", Slot = "48")]
		protected virtual List<VrHand> GetBothHands()
		{
			return null;
		}

		[Token(Token = "0x6003134")]
		[Address(RVA = "0x13240B4", Offset = "0x13240B4", VA = "0x13240B4", Slot = "49")]
		protected virtual VrItem GetHeldItem(VrHand hand)
		{
			return null;
		}

		[Token(Token = "0x6003135")]
		[Address(RVA = "0x1324124", Offset = "0x1324124", VA = "0x1324124", Slot = "32")]
		protected override void OnHealthDecreased(HealthStatusInfo info)
		{
		}

		[Token(Token = "0x6003136")]
		[Address(RVA = "0x1324220", Offset = "0x1324220", VA = "0x1324220")]
		private void OnGloryMoment(PlayerGlory glory)
		{
		}

		[Token(Token = "0x6003137")]
		[Address(RVA = "0x1324228", Offset = "0x1324228", VA = "0x1324228")]
		private void Update()
		{
		}

		[Token(Token = "0x6003138")]
		[Address(RVA = "0x132422C", Offset = "0x132422C", VA = "0x132422C", Slot = "40")]
		public override void GetCurrentWeapons(ref HashSet<VrItem> itemSet)
		{
		}

		[Token(Token = "0x6003139")]
		[Address(RVA = "0x1324450", Offset = "0x1324450", VA = "0x1324450", Slot = "41")]
		public override bool IsLookingAt(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x600313A")]
		[Address(RVA = "0x1324648", Offset = "0x1324648", VA = "0x1324648")]
		public Vector3 GetShoulderConstrainedHandPosition(VrHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600313B")]
		[Address(RVA = "0x1324128", Offset = "0x1324128", VA = "0x1324128")]
		private void TriggerHaptics()
		{
		}

		[Token(Token = "0x600313C")]
		[Address(RVA = "0x13231F8", Offset = "0x13231F8", VA = "0x13231F8")]
		private void RegisterHaptics(bool value)
		{
		}

		[Token(Token = "0x600313D")]
		[Address(RVA = "0x1324808", Offset = "0x1324808", VA = "0x1324808", Slot = "33")]
		protected override void OnDeath(HealthStatusInfo info)
		{
		}

		[Token(Token = "0x600313E")]
		[Address(RVA = "0x1324C88", Offset = "0x1324C88", VA = "0x1324C88")]
		public PlayerAgent()
		{
		}
	}
	[Token(Token = "0x200081F")]
	[RequireComponent(typeof(BoltPlayerController))]
	public class RemotePlayerAgent : PlayerAgent
	{
		[Token(Token = "0x4002821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private BoltPlayerController m_boltPlayerController;

		[Token(Token = "0x4002822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private List<VrHand> m_hands;

		[Token(Token = "0x17000886")]
		public override Vector3 ForwardFacingVector
		{
			[Token(Token = "0x6003144")]
			[Address(RVA = "0x1324F24", Offset = "0x1324F24", VA = "0x1324F24", Slot = "36")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000887")]
		public override Vector3 HeadPosition
		{
			[Token(Token = "0x6003145")]
			[Address(RVA = "0x1324F48", Offset = "0x1324F48", VA = "0x1324F48", Slot = "37")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000888")]
		public override Transform HeadTransform
		{
			[Token(Token = "0x6003146")]
			[Address(RVA = "0x1324F6C", Offset = "0x1324F6C", VA = "0x1324F6C", Slot = "38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000889")]
		protected override int ArmLength
		{
			[Token(Token = "0x6003147")]
			[Address(RVA = "0x1324F88", Offset = "0x1324F88", VA = "0x1324F88", Slot = "45")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700088A")]
		public override bool IsHumanPlayer
		{
			[Token(Token = "0x6003148")]
			[Address(RVA = "0x132500C", Offset = "0x132500C", VA = "0x132500C", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003142")]
		[Address(RVA = "0x1324D6C", Offset = "0x1324D6C", VA = "0x1324D6C", Slot = "30")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003143")]
		[Address(RVA = "0x1324DCC", Offset = "0x1324DCC", VA = "0x1324DCC", Slot = "44")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6003149")]
		[Address(RVA = "0x1325014", Offset = "0x1325014", VA = "0x1325014", Slot = "48")]
		protected override List<VrHand> GetBothHands()
		{
			return null;
		}

		[Token(Token = "0x600314A")]
		[Address(RVA = "0x132501C", Offset = "0x132501C", VA = "0x132501C", Slot = "49")]
		protected override VrItem GetHeldItem(VrHand hand)
		{
			return null;
		}

		[Token(Token = "0x600314B")]
		[Address(RVA = "0x1325034", Offset = "0x1325034", VA = "0x1325034")]
		public RemotePlayerAgent()
		{
		}
	}
	[Token(Token = "0x2000820")]
	public class TestPlayerAgent : PlayerAgent
	{
		[Token(Token = "0x1700088B")]
		public override Vector3 feetPosition
		{
			[Token(Token = "0x600314C")]
			[Address(RVA = "0x132509C", Offset = "0x132509C", VA = "0x132509C", Slot = "46")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700088C")]
		public override Transform feetTransform
		{
			[Token(Token = "0x600314D")]
			[Address(RVA = "0x13250BC", Offset = "0x13250BC", VA = "0x13250BC", Slot = "47")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600314E")]
		[Address(RVA = "0x13250C4", Offset = "0x13250C4", VA = "0x13250C4")]
		public TestPlayerAgent()
		{
		}
	}
	[Token(Token = "0x2000821")]
	public static class CanvasGroupExtensions
	{
		[Token(Token = "0x600314F")]
		[Address(RVA = "0x132512C", Offset = "0x132512C", VA = "0x132512C")]
		public static CanvasGroup SetVisible(this CanvasGroup canvasGroup, bool active)
		{
			return null;
		}
	}
	[Token(Token = "0x2000822")]
	public static class Matrix4x4Extensions
	{
		[Token(Token = "0x6003150")]
		[Address(RVA = "0x1325190", Offset = "0x1325190", VA = "0x1325190")]
		public static Matrix4x4[] LerpMatrixArray(Matrix4x4[] start, Matrix4x4[] end, float t, bool includeScale = true)
		{
			return null;
		}
	}
	[Token(Token = "0x2000823")]
	public static class QuaternionExtensions
	{
		[Token(Token = "0x6003151")]
		[Address(RVA = "0x1325550", Offset = "0x1325550", VA = "0x1325550")]
		public static Quaternion AverageQuaternion(params Quaternion[] quats)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6003152")]
		[Address(RVA = "0x1325710", Offset = "0x1325710", VA = "0x1325710")]
		public static Quaternion NormalizeQuaternion(float x, float y, float z, float w)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6003153")]
		[Address(RVA = "0x1325748", Offset = "0x1325748", VA = "0x1325748")]
		public static bool AreQuaternionsClose(Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000824")]
	public class LightInfo
	{
		[Token(Token = "0x4002823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color color;

		[Token(Token = "0x4002824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float range;

		[Token(Token = "0x4002825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("The first key in the graph is only used at the start, later on, after the starting time, the loop will ignore the starting key and will loop all keys after that")]
		public AnimationCurve intensityGraph;

		[Token(Token = "0x6003154")]
		[Address(RVA = "0x1325770", Offset = "0x1325770", VA = "0x1325770")]
		public LightInfo()
		{
		}
	}
	[Token(Token = "0x2000825")]
	public interface IPool
	{
		[Token(Token = "0x6003155")]
		void ReturnInstance(GameObject instance);
	}
	[Token(Token = "0x2000826")]
	public interface IPoolable
	{
		[Token(Token = "0x1700088D")]
		GameObject gameObject
		{
			[Token(Token = "0x6003156")]
			get;
		}

		[Token(Token = "0x6003157")]
		void OnAllocFromPool();

		[Token(Token = "0x6003158")]
		void OnReturnToPool();

		[Token(Token = "0x6003159")]
		void OnAddedToPool();
	}
	[Token(Token = "0x2000827")]
	public class Poolable : CachedMonoBehaviour, IPoolable
	{
		[Token(Token = "0x14000030")]
		public event Action OnAllocFromPoolEvent
		{
			[Token(Token = "0x600315A")]
			[Address(RVA = "0x13257C4", Offset = "0x13257C4", VA = "0x13257C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600315B")]
			[Address(RVA = "0x1325860", Offset = "0x1325860", VA = "0x1325860")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000031")]
		public event Action OnReturnToPoolEvent
		{
			[Token(Token = "0x600315C")]
			[Address(RVA = "0x13258FC", Offset = "0x13258FC", VA = "0x13258FC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600315D")]
			[Address(RVA = "0x1325998", Offset = "0x1325998", VA = "0x1325998")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000032")]
		public event Action<IPoolable> OnAllocFromPoolEventWithSender
		{
			[Token(Token = "0x600315E")]
			[Address(RVA = "0x1325A34", Offset = "0x1325A34", VA = "0x1325A34")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600315F")]
			[Address(RVA = "0x1325AE4", Offset = "0x1325AE4", VA = "0x1325AE4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000033")]
		public event Action<IPoolable> OnReturnToPoolEventWithSender
		{
			[Token(Token = "0x6003160")]
			[Address(RVA = "0x1325B94", Offset = "0x1325B94", VA = "0x1325B94")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003161")]
			[Address(RVA = "0x1325C44", Offset = "0x1325C44", VA = "0x1325C44")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003162")]
		[Address(RVA = "0x1325CF4", Offset = "0x1325CF4", VA = "0x1325CF4", Slot = "8")]
		public virtual void OnAddedToPool()
		{
		}

		[Token(Token = "0x6003163")]
		[Address(RVA = "0x13201BC", Offset = "0x13201BC", VA = "0x13201BC", Slot = "9")]
		public virtual void OnAllocFromPool()
		{
		}

		[Token(Token = "0x6003164")]
		[Address(RVA = "0x132022C", Offset = "0x132022C", VA = "0x132022C", Slot = "10")]
		public virtual void OnReturnToPool()
		{
		}

		[Token(Token = "0x6003165")]
		[Address(RVA = "0x1320744", Offset = "0x1320744", VA = "0x1320744")]
		public Poolable()
		{
		}

		[SpecialName]
		[Token(Token = "0x6003166")]
		[Address(RVA = "0x1325CF8", Offset = "0x1325CF8", VA = "0x1325CF8", Slot = "4")]
		private GameObject PT.IPoolable.get_gameObject()
		{
			return null;
		}
	}
	[Token(Token = "0x2000828")]
	public class TitleAttribute : PropertyAttribute
	{
		[Token(Token = "0x400282A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Title;

		[Token(Token = "0x6003167")]
		[Address(RVA = "0x1325D00", Offset = "0x1325D00", VA = "0x1325D00")]
		public TitleAttribute(string title)
		{
		}
	}
	[Token(Token = "0x2000829")]
	public enum EmitShape
	{
		[Token(Token = "0x400282C")]
		Point,
		[Token(Token = "0x400282D")]
		Cube,
		[Token(Token = "0x400282E")]
		Sphere,
		[Token(Token = "0x400282F")]
		Cylinder,
		[Token(Token = "0x4002830")]
		Cone
	}
	[Token(Token = "0x200082A")]
	public enum UpdateType
	{
		[Token(Token = "0x4002832")]
		Static,
		[Token(Token = "0x4002833")]
		Dynamic
	}
	[Token(Token = "0x200082B")]
	public enum ViewType
	{
		[Token(Token = "0x4002835")]
		None,
		[Token(Token = "0x4002836")]
		CameraPosition,
		[Token(Token = "0x4002837")]
		ViewDirection
	}
	[Token(Token = "0x200082C")]
	public class ParticleSystemWrapper : MonoBehaviour
	{
		[Token(Token = "0x4002838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Transform parent;

		[Token(Token = "0x4002839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public bool useSpawnTransforms;

		[Token(Token = "0x400283A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public Transform[] spawnTransforms;

		[Token(Token = "0x400283B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public EmitShape emitShape;

		[Token(Token = "0x400283C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public float spawnRangeDecline;

		[Token(Token = "0x400283D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem m_particleSystem;

		[Token(Token = "0x400283E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem.Particle[] m_particles;

		[Token(Token = "0x400283F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_hasParticleSystem;

		[Token(Token = "0x4002840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool m_hasCustomParent;

		[Token(Token = "0x4002841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		private bool m_sytemInitialized;

		[Token(Token = "0x4002842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Func<Vector3, Vector3, Vector3, Vector3> m_getPosition_Func;

		[Token(Token = "0x4002843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.EmitParams m_emitParams;

		[Token(Token = "0x6003168")]
		[Address(RVA = "0x1325D30", Offset = "0x1325D30", VA = "0x1325D30")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003169")]
		[Address(RVA = "0x1325D50", Offset = "0x1325D50", VA = "0x1325D50")]
		public void ApplyChanges()
		{
		}

		[Token(Token = "0x600316A")]
		[Address(RVA = "0x1325D54", Offset = "0x1325D54", VA = "0x1325D54")]
		private void ForceInit()
		{
		}

		[Token(Token = "0x600316B")]
		[Address(RVA = "0x1325D40", Offset = "0x1325D40", VA = "0x1325D40")]
		private void Init()
		{
		}

		[Token(Token = "0x600316C")]
		[Address(RVA = "0x1325EFC", Offset = "0x1325EFC", VA = "0x1325EFC")]
		private bool ValidRange(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x600316D")]
		[Address(RVA = "0x1325FD4", Offset = "0x1325FD4", VA = "0x1325FD4")]
		public void Emit(Vector3 position, Vector3 forward, int count)
		{
		}

		[Token(Token = "0x600316E")]
		[Address(RVA = "0x132628C", Offset = "0x132628C", VA = "0x132628C")]
		public void EmitAll()
		{
		}

		[Token(Token = "0x600316F")]
		[Address(RVA = "0x1326528", Offset = "0x1326528", VA = "0x1326528")]
		public void Stop()
		{
		}

		[Token(Token = "0x6003170")]
		[Address(RVA = "0x1326554", Offset = "0x1326554", VA = "0x1326554")]
		private void UpdateParticles()
		{
		}

		[Token(Token = "0x6003171")]
		[Address(RVA = "0x1326640", Offset = "0x1326640", VA = "0x1326640")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6003172")]
		[Address(RVA = "0x1326644", Offset = "0x1326644", VA = "0x1326644")]
		public ParticleSystemWrapper()
		{
		}
	}
	[Token(Token = "0x200082D")]
	public interface IPersistable
	{
		[Token(Token = "0x6003173")]
		string SerializeState();

		[Token(Token = "0x6003174")]
		void DeserializeState(string state);
	}
	[Token(Token = "0x200082E")]
	public static class PersistenceManager
	{
		[Token(Token = "0x4002844")]
		private const string c_gameDataset = "game_02";

		[Token(Token = "0x4002845")]
		private const string c_scoresDataset = "scores_02";

		[Token(Token = "0x4002846")]
		private const string c_gameData = "game_data";

		[Token(Token = "0x4002847")]
		private const string c_highScores = "high_scores_02";

		[Token(Token = "0x4002848")]
		private const string c_xpData = "Exp_data";

		[Token(Token = "0x4002849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDataset m_loadedDataset;

		[Token(Token = "0x400284A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IDataset m_loadedScoreDataset;

		[Token(Token = "0x400284B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static QuestSerializer QuestSerializer;

		[Token(Token = "0x400284C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string s_cloudStorageLocation;

		[Token(Token = "0x400284D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool s_storageInitialized;

		[Token(Token = "0x400284E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private static bool s_usePlayerPrefs;

		[Token(Token = "0x400284F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Action OnGamePersisted;

		[Token(Token = "0x4002850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static Action OnGameRestored;

		[Token(Token = "0x4002851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static bool s_usingReplayData;

		[Token(Token = "0x4002852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static int s_runCount;

		[Token(Token = "0x4002853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static int s_ftueCount;

		[Token(Token = "0x4002854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static bool s_hasWonBefore;

		[Token(Token = "0x4002855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static List<Scene> m_scenePersistQueue;

		[Token(Token = "0x4002856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static bool m_scenePersistingActive;

		[Token(Token = "0x4002857")]
		private const float c_scenePersistDelayTime = 0.05f;

		[Token(Token = "0x1700088E")]
		public static string CloudStorageLocation
		{
			[Token(Token = "0x6003175")]
			[Address(RVA = "0x13266B0", Offset = "0x13266B0", VA = "0x13266B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003176")]
			[Address(RVA = "0x1326740", Offset = "0x1326740", VA = "0x1326740")]
			set
			{
			}
		}

		[Token(Token = "0x1700088F")]
		public static bool UsingReplayData
		{
			[Token(Token = "0x6003177")]
			[Address(RVA = "0x13267A0", Offset = "0x13267A0", VA = "0x13267A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000890")]
		public static bool HasWonBefore
		{
			[Token(Token = "0x600317A")]
			[Address(RVA = "0x13268F8", Offset = "0x13268F8", VA = "0x13268F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000891")]
		private static bool EnableSaving
		{
			[Token(Token = "0x600317E")]
			[Address(RVA = "0x1326A8C", Offset = "0x1326A8C", VA = "0x1326A8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600317F")]
			[Address(RVA = "0x1326A94", Offset = "0x1326A94", VA = "0x1326A94")]
			set
			{
			}
		}

		[Token(Token = "0x6003178")]
		[Address(RVA = "0x13267F8", Offset = "0x13267F8", VA = "0x13267F8")]
		public static int GetRunCount(bool increment)
		{
			return default(int);
		}

		[Token(Token = "0x6003179")]
		[Address(RVA = "0x1326878", Offset = "0x1326878", VA = "0x1326878")]
		public static int GetFTUERunCount(bool increment)
		{
			return default(int);
		}

		[Token(Token = "0x600317B")]
		[Address(RVA = "0x1326950", Offset = "0x1326950", VA = "0x1326950")]
		public static void SetFirstWin()
		{
		}

		[Token(Token = "0x600317C")]
		[Address(RVA = "0x13269AC", Offset = "0x13269AC", VA = "0x13269AC")]
		[AutoInitializeStatics]
		public static void ResetStatics()
		{
		}

		[Token(Token = "0x600317D")]
		[Address(RVA = "0x1326A34", Offset = "0x1326A34", VA = "0x1326A34")]
		public static bool InitComplete()
		{
			return default(bool);
		}

		[Token(Token = "0x6003180")]
		[Address(RVA = "0x131A428", Offset = "0x131A428", VA = "0x131A428")]
		public static void Init()
		{
		}

		[Token(Token = "0x6003181")]
		[Address(RVA = "0x1326A98", Offset = "0x1326A98", VA = "0x1326A98")]
		public static void ClearSave()
		{
		}

		[Token(Token = "0x6003182")]
		[Address(RVA = "0x1326D08", Offset = "0x1326D08", VA = "0x1326D08")]
		public static bool LoadPersistentData()
		{
			return default(bool);
		}

		[Token(Token = "0x6003183")]
		[Address(RVA = "0x1326F18", Offset = "0x1326F18", VA = "0x1326F18")]
		public static void PersistGame(SerializableQuest.SaveType pendingSaveType)
		{
		}

		[Token(Token = "0x6003184")]
		[Address(RVA = "0x1327548", Offset = "0x1327548", VA = "0x1327548")]
		public static bool RestoreGame()
		{
			return default(bool);
		}

		[Token(Token = "0x6003185")]
		[Address(RVA = "0x1327740", Offset = "0x1327740", VA = "0x1327740")]
		public static void PersistHordeModeScore(ScoreBreakdown hordeModeScore)
		{
		}

		[Token(Token = "0x6003186")]
		[Address(RVA = "0x13279D0", Offset = "0x13279D0", VA = "0x13279D0")]
		public static long RetrieveHordeModeGlobalScore()
		{
			return default(long);
		}

		[Token(Token = "0x6003187")]
		[Address(RVA = "0x1327AE0", Offset = "0x1327AE0", VA = "0x1327AE0")]
		public static void PersistHordeModeGlobalScore(long score)
		{
		}

		[Token(Token = "0x6003188")]
		[Address(RVA = "0x1326FE8", Offset = "0x1326FE8", VA = "0x1326FE8")]
		public static void PersistExpData()
		{
		}

		[Token(Token = "0x6003189")]
		[Address(RVA = "0x13275BC", Offset = "0x13275BC", VA = "0x13275BC")]
		public static ExpData RestoreExpData()
		{
			return null;
		}

		[Token(Token = "0x600318A")]
		[Address(RVA = "0x1327D64", Offset = "0x1327D64", VA = "0x1327D64")]
		public static void PersistLevelScore(ScoreBreakdown levelScore)
		{
		}

		[Token(Token = "0x600318B")]
		[Address(RVA = "0x1328010", Offset = "0x1328010", VA = "0x1328010")]
		public static ScoreBreakdown RetrieveLevelScore(int levelId)
		{
			return null;
		}
	}
	[Token(Token = "0x200082F")]
	public class CheckpointHistoryEntry
	{
		[Token(Token = "0x4002858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DateTime m_time;

		[Token(Token = "0x4002859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_description;

		[Token(Token = "0x400285A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InventoryData m_inventoryData;

		[Token(Token = "0x600318D")]
		[Address(RVA = "0x1328290", Offset = "0x1328290", VA = "0x1328290")]
		public CheckpointHistoryEntry()
		{
		}
	}
	[Token(Token = "0x2000830")]
	public class RandomPoint
	{
		[Token(Token = "0x600318E")]
		[Address(RVA = "0x1328298", Offset = "0x1328298", VA = "0x1328298")]
		private static void TransformPoint(ref Vector3 point, Vector3 position, Vector3 forward, Vector3 size)
		{
		}

		[Token(Token = "0x600318F")]
		[Address(RVA = "0x1328324", Offset = "0x1328324", VA = "0x1328324")]
		public static Vector3 FromPoint(Vector3 center, Vector3 forward, Vector3 size)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003190")]
		[Address(RVA = "0x1328328", Offset = "0x1328328", VA = "0x1328328")]
		public static Vector3 FromCube(Vector3 center, Vector3 forward, Vector3 size)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003191")]
		[Address(RVA = "0x13283E0", Offset = "0x13283E0", VA = "0x13283E0")]
		public static Vector3 FromSphere(Vector3 center, Vector3 forward, Vector3 size)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003192")]
		[Address(RVA = "0x1328484", Offset = "0x1328484", VA = "0x1328484")]
		public static Vector3 FromCylinder(Vector3 center, Vector3 forward, Vector3 size)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003193")]
		[Address(RVA = "0x1328534", Offset = "0x1328534", VA = "0x1328534")]
		public static Vector3 FromCone(Vector3 center, Vector3 forward, Vector3 size)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003194")]
		[Address(RVA = "0x13285F0", Offset = "0x13285F0", VA = "0x13285F0")]
		public RandomPoint()
		{
		}
	}
	[Token(Token = "0x2000831")]
	public abstract class AbstractSpawnPoint : CachedMonoBehaviour
	{
		[Token(Token = "0x400285B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("A set of child transforms that individual agents appear at. If empty, agents will appear at the location of this transform instead.")]
		[SerializeField]
		private SpawnLocation[] m_spawnLocations;

		[Token(Token = "0x400285C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected SpawnLocation[] m_spawnLocationsRuntime;

		[Token(Token = "0x400285D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<AbstractSpawnPoint> s_spawnInstances;

		[Token(Token = "0x400285E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _spawnLocationIndex;

		[Token(Token = "0x400285F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static System.Random s_random;

		[Token(Token = "0x17000892")]
		public SpawnLocation[] SpawnLocations
		{
			[Token(Token = "0x6003195")]
			[Address(RVA = "0x13285F8", Offset = "0x13285F8", VA = "0x13285F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000893")]
		public static HashSet<AbstractSpawnPoint> AllSpawnPoints
		{
			[Token(Token = "0x6003196")]
			[Address(RVA = "0x1328600", Offset = "0x1328600", VA = "0x1328600")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003197")]
		[Address(RVA = "0x1328658", Offset = "0x1328658", VA = "0x1328658")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003198")]
		[Address(RVA = "0x13288E4", Offset = "0x13288E4", VA = "0x13288E4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6003199")]
		[Address(RVA = "0x1328970", Offset = "0x1328970", VA = "0x1328970")]
		public SpawnLocation GetBestSpawnLocation(IEnemyType enemyType)
		{
			return null;
		}

		[Token(Token = "0x600319A")]
		[Address(RVA = "0x1328AD4", Offset = "0x1328AD4", VA = "0x1328AD4")]
		protected AbstractSpawnPoint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000832")]
	public class SpawnLocation
	{
		[Serializable]
		[Token(Token = "0x2000833")]
		public enum HomeType
		{
			[Token(Token = "0x400286B")]
			NoHome,
			[Token(Token = "0x400286C")]
			SpawnNode
		}

		[Token(Token = "0x4002860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 localPosition;

		[Token(Token = "0x4002861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 worldPosition;

		[Token(Token = "0x4002862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float localBearing;

		[Token(Token = "0x4002863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion worldRotation;

		[Token(Token = "0x4002864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private HomeType homeType;

		[Token(Token = "0x4002865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SpawnPathNode homeSpawnPathNode;

		[Token(Token = "0x4002866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private SpawnAnimationType spawnAnimationType;

		[Token(Token = "0x4002867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private List<EnemyType> excludedAgents;

		[Token(Token = "0x4002868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private MultiplayerSpawnPoint m_spawnPoint;

		[Token(Token = "0x4002869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Root game object (referenced via a GuidComponent to support cross scene references) for Spitter Attack Positions to use for this spawn point.")]
		public GuidComponent spitterAttackPositionsRoot;

		[Token(Token = "0x17000894")]
		public SpawnAnimationType SpawnAnimType
		{
			[Token(Token = "0x600319C")]
			[Address(RVA = "0x1328BB4", Offset = "0x1328BB4", VA = "0x1328BB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000895")]
		public List<EnemyType> ExcludedAgents
		{
			[Token(Token = "0x600319D")]
			[Address(RVA = "0x1328BBC", Offset = "0x1328BBC", VA = "0x1328BBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000896")]
		public MultiplayerSpawnPoint SpawnPoint
		{
			[Token(Token = "0x600319E")]
			[Address(RVA = "0x1328BC4", Offset = "0x1328BC4", VA = "0x1328BC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600319F")]
			[Address(RVA = "0x1328BCC", Offset = "0x1328BCC", VA = "0x1328BCC")]
			set
			{
			}
		}

		[Token(Token = "0x17000897")]
		public SpawnPathNode SpawnNode
		{
			[Token(Token = "0x60031A0")]
			[Address(RVA = "0x1328BD4", Offset = "0x1328BD4", VA = "0x1328BD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60031A1")]
		[Address(RVA = "0x1328BDC", Offset = "0x1328BDC", VA = "0x1328BDC")]
		public IMovementNode GetHomeNode()
		{
			return null;
		}

		[Token(Token = "0x60031A2")]
		[Address(RVA = "0x1328BF8", Offset = "0x1328BF8", VA = "0x1328BF8")]
		public SpawnLocation()
		{
		}
	}
	[Token(Token = "0x2000834")]
	public class DestroyAfterTime : MonoBehaviour
	{
		[Token(Token = "0x400286D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_timeRemaining;

		[Token(Token = "0x17000898")]
		public float TimeRemaining
		{
			[Token(Token = "0x60031A3")]
			[Address(RVA = "0x1328C80", Offset = "0x1328C80", VA = "0x1328C80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60031A4")]
			[Address(RVA = "0x1328C88", Offset = "0x1328C88", VA = "0x1328C88")]
			set
			{
			}
		}

		[Token(Token = "0x60031A5")]
		[Address(RVA = "0x1328C90", Offset = "0x1328C90", VA = "0x1328C90")]
		private void Update()
		{
		}

		[Token(Token = "0x60031A6")]
		[Address(RVA = "0x1328D30", Offset = "0x1328D30", VA = "0x1328D30")]
		public DestroyAfterTime()
		{
		}
	}
	[Token(Token = "0x2000835")]
	public class GestureMarkerCapsule : GestureMarker
	{
		[Token(Token = "0x2000836")]
		private enum CapsuleOrientation
		{
			[Token(Token = "0x4002876")]
			Y,
			[Token(Token = "0x4002877")]
			X,
			[Token(Token = "0x4002878")]
			Z
		}

		[Token(Token = "0x2000837")]
		private enum Side
		{
			[Token(Token = "0x400287A")]
			Inside,
			[Token(Token = "0x400287B")]
			Outside
		}

		[Token(Token = "0x400286E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("Orientation of the capsule.")]
		[SerializeField]
		private CapsuleOrientation m_capsuleOrientation;

		[Token(Token = "0x400286F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Height of the capsule.")]
		[Min(0f)]
		[SerializeField]
		private float m_height;

		[Token(Token = "0x4002870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("Radius/width of the capsule.")]
		[SerializeField]
		[Min(0f)]
		private float m_radius;

		[Token(Token = "0x4002871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UnityEngine.Tooltip("How far off the rotation the hand can be from the rotation of the marker to trigger it.")]
		[SerializeField]
		[Range(5f, 180f)]
		private float m_maximumRotationOffset;

		[Token(Token = "0x4002872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[UnityEngine.Tooltip("Whether to trigger when the required hand(s) are inside or outside the capsule.")]
		[SerializeField]
		private Side m_validSide;

		[Token(Token = "0x4002873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 m_positiveVector;

		[Token(Token = "0x4002874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float m_halfHeight;

		[Token(Token = "0x60031A7")]
		[Address(RVA = "0x1328D40", Offset = "0x1328D40", VA = "0x1328D40", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60031A8")]
		[Address(RVA = "0x1328D5C", Offset = "0x1328D5C", VA = "0x1328D5C")]
		private void RecalculateCachedValues()
		{
		}

		[Token(Token = "0x60031A9")]
		[Address(RVA = "0x1328E5C", Offset = "0x1328E5C", VA = "0x1328E5C", Slot = "5")]
		public override bool HandIsInRange(VrHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60031AA")]
		[Address(RVA = "0x1329198", Offset = "0x1329198", VA = "0x1329198")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60031AB")]
		[Address(RVA = "0x1329578", Offset = "0x1329578", VA = "0x1329578")]
		public GestureMarkerCapsule()
		{
		}
	}
	[Token(Token = "0x2000838")]
	public class GestureMarkerPlane : GestureMarker
	{
		[Token(Token = "0x2000839")]
		private enum PlaneOrientation
		{
			[Token(Token = "0x400287F")]
			XZ,
			[Token(Token = "0x4002880")]
			XY,
			[Token(Token = "0x4002881")]
			YZ
		}

		[Token(Token = "0x200083A")]
		private enum Side
		{
			[Token(Token = "0x4002883")]
			Positive,
			[Token(Token = "0x4002884")]
			Negative
		}

		[Token(Token = "0x400287C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("The orientation of the plane, defined as the two axes it exists in.")]
		[SerializeField]
		private PlaneOrientation m_planeOrientation;

		[Token(Token = "0x400287D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[UnityEngine.Tooltip("Whether to trigger when the required hand(s) are above or below the plane.")]
		private Side m_validSide;

		[Token(Token = "0x60031AC")]
		[Address(RVA = "0x1329588", Offset = "0x1329588", VA = "0x1329588", Slot = "5")]
		public override bool HandIsInRange(VrHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60031AD")]
		[Address(RVA = "0x1329654", Offset = "0x1329654", VA = "0x1329654")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60031AE")]
		[Address(RVA = "0x1329AB0", Offset = "0x1329AB0", VA = "0x1329AB0")]
		public GestureMarkerPlane()
		{
		}
	}
	[Token(Token = "0x200083B")]
	public class GestureMarkerSphere : GestureMarker
	{
		[Token(Token = "0x200083C")]
		private enum Side
		{
			[Token(Token = "0x4002889")]
			Inside,
			[Token(Token = "0x400288A")]
			Outside
		}

		[Token(Token = "0x4002885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("How far away the hand can be from the centre of the marker to trigger it.")]
		[SerializeField]
		[Min(0f)]
		private float m_maximumDistance;

		[Token(Token = "0x4002886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(5f, 180f)]
		[SerializeField]
		[UnityEngine.Tooltip("How far off the rotation the hand can be from the rotation of the marker to trigger it.")]
		private float m_maximumRotationOffset;

		[Token(Token = "0x4002887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("Whether to trigger when the required hand(s) are inside or outside the sphere.")]
		[SerializeField]
		private Side m_validSide;

		[Token(Token = "0x60031AF")]
		[Address(RVA = "0x1329AB8", Offset = "0x1329AB8", VA = "0x1329AB8", Slot = "5")]
		public override bool HandIsInRange(VrHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60031B0")]
		[Address(RVA = "0x1329BF8", Offset = "0x1329BF8", VA = "0x1329BF8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60031B1")]
		[Address(RVA = "0x1329E6C", Offset = "0x1329E6C", VA = "0x1329E6C")]
		public GestureMarkerSphere()
		{
		}
	}
}
namespace PT.Example.Utilities
{
	[Token(Token = "0x200083D")]
	public static class GizmoHelpers
	{
		[Token(Token = "0x400288B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh m_disk;

		[Token(Token = "0x60031B2")]
		[Address(RVA = "0x1329E80", Offset = "0x1329E80", VA = "0x1329E80")]
		static GizmoHelpers()
		{
		}

		[Token(Token = "0x60031B3")]
		[Address(RVA = "0x1329EDC", Offset = "0x1329EDC", VA = "0x1329EDC")]
		private static Mesh CreateDisk(float radius)
		{
			return null;
		}

		[Token(Token = "0x60031B4")]
		[Address(RVA = "0x132A140", Offset = "0x132A140", VA = "0x132A140")]
		public static void DrawDisk(Vector3 position, float radius, Color c)
		{
		}

		[Token(Token = "0x60031B5")]
		[Address(RVA = "0x132A230", Offset = "0x132A230", VA = "0x132A230")]
		public static void DrawDisk(Vector3 position, Vector3 normal, float radius, Color c)
		{
		}

		[Token(Token = "0x60031B6")]
		[Address(RVA = "0x132A42C", Offset = "0x132A42C", VA = "0x132A42C")]
		public static void DrawDirection(Vector3 startPos, Quaternion rotation, float length, float size, Color color)
		{
		}

		[Token(Token = "0x60031B7")]
		[Address(RVA = "0x132A588", Offset = "0x132A588", VA = "0x132A588")]
		public static void DrawDirection(Vector3 startPos, Vector3 endPos, float size, Color color)
		{
		}

		[Token(Token = "0x60031B8")]
		[Address(RVA = "0x132AB24", Offset = "0x132AB24", VA = "0x132AB24")]
		public static void DrawGameObject(GameObject obj, Transform t)
		{
		}

		[Token(Token = "0x60031B9")]
		[Address(RVA = "0x132ACC4", Offset = "0x132ACC4", VA = "0x132ACC4")]
		public static void DrawMeshes(GameObject obj, Transform t)
		{
		}

		[Token(Token = "0x60031BA")]
		[Address(RVA = "0x132B2DC", Offset = "0x132B2DC", VA = "0x132B2DC")]
		public static void DrawCollider(this Collider collider, Color c)
		{
		}
	}
	[Token(Token = "0x200083E")]
	public interface IPrefabAssetProvider
	{
		[Token(Token = "0x17000899")]
		List<GameObject> prefabAssets
		{
			[Token(Token = "0x60031BB")]
			get;
		}

		[Token(Token = "0x60031BC")]
		int NumRequiredPoolInstances(GameObject prefab);
	}
	[Token(Token = "0x200083F")]
	public static class MathHelpers
	{
		[Token(Token = "0x60031BD")]
		[Address(RVA = "0x132B5AC", Offset = "0x132B5AC", VA = "0x132B5AC")]
		public static float CalculateSlope(float3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x60031BE")]
		[Address(RVA = "0x132B6F8", Offset = "0x132B6F8", VA = "0x132B6F8")]
		public static float4 QuaternionToAngleAxis(quaternion quat)
		{
			return default(float4);
		}

		[Token(Token = "0x60031BF")]
		[Address(RVA = "0x132B894", Offset = "0x132B894", VA = "0x132B894")]
		public static float degreeDiff(float3 from, float3 to)
		{
			return default(float);
		}

		[Token(Token = "0x60031C0")]
		[Address(RVA = "0x132BA18", Offset = "0x132BA18", VA = "0x132BA18")]
		public static float degreeDiff(float2 from, float2 to)
		{
			return default(float);
		}

		[Token(Token = "0x60031C1")]
		[Address(RVA = "0x132BB60", Offset = "0x132BB60", VA = "0x132BB60")]
		public static float degreeDirection(float3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x60031C2")]
		[Address(RVA = "0x132BBD0", Offset = "0x132BBD0", VA = "0x132BBD0")]
		public static float degreeSignedDiff(float3 from, float3 to, float3 axis)
		{
			return default(float);
		}

		[Token(Token = "0x60031C3")]
		[Address(RVA = "0x132BE78", Offset = "0x132BE78", VA = "0x132BE78")]
		public static float degreeSignedDiff(float3 from, float3 to)
		{
			return default(float);
		}

		[Token(Token = "0x60031C4")]
		[Address(RVA = "0x132C0F8", Offset = "0x132C0F8", VA = "0x132C0F8")]
		public static float SnappedAngleDiff(Vector3 from, Vector3 dest, float angleSnap, out Vector3 axis)
		{
			return default(float);
		}

		[Token(Token = "0x60031C5")]
		[Address(RVA = "0x132C3E8", Offset = "0x132C3E8", VA = "0x132C3E8")]
		public static Vector3 SnappedDirection(Vector3 from, Vector3 dest, float angleSnap, out Vector3 axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60031C6")]
		[Address(RVA = "0x132C710", Offset = "0x132C710", VA = "0x132C710")]
		public static Vector2 SnappedDirection(Vector2 direction, float angleSnap)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60031C7")]
		[Address(RVA = "0x132C7AC", Offset = "0x132C7AC", VA = "0x132C7AC")]
		public static Vector3 LimitDirection(Vector3 direction, Vector3 reference, float angleLimit)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60031C8")]
		[Address(RVA = "0x132C9F0", Offset = "0x132C9F0", VA = "0x132C9F0")]
		[BurstCompile]
		public static float3 rotateTowards(float3 current, float3 desired, float rotVelocity, float magVelocity)
		{
			return default(float3);
		}

		[Token(Token = "0x60031C9")]
		[Address(RVA = "0x132CEAC", Offset = "0x132CEAC", VA = "0x132CEAC")]
		public static Vector3 rotateTowardsWithReference(Vector3 current, Vector3 desired, Vector3 reference, float maxSpeed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60031CA")]
		[Address(RVA = "0x132D268", Offset = "0x132D268", VA = "0x132D268")]
		[BurstCompile]
		public static float radiansDelta(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60031CB")]
		[Address(RVA = "0x132D2A4", Offset = "0x132D2A4", VA = "0x132D2A4")]
		[BurstCompile]
		public static float degreesDelta(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x60031CC")]
		[Address(RVA = "0x132D2E0", Offset = "0x132D2E0", VA = "0x132D2E0")]
		[BurstCompile]
		public static float radianDiff(float2 from, float2 dest, bool shortestPath, float range)
		{
			return default(float);
		}

		[Token(Token = "0x60031CD")]
		[Address(RVA = "0x132D514", Offset = "0x132D514", VA = "0x132D514")]
		[BurstCompile]
		public static float3 yawRotation(float3 current, float3 desired, ref float velocity, float maxSpeed, float smoothTime, float maxYaw)
		{
			return default(float3);
		}

		[Token(Token = "0x60031CE")]
		[Address(RVA = "0x132D7F8", Offset = "0x132D7F8", VA = "0x132D7F8")]
		[BurstCompile]
		public static float3 pitchRotation(float3 current, float3 desired, ref float velocity, float maxSpeed, float smoothTime, float maxPitch)
		{
			return default(float3);
		}

		[Token(Token = "0x60031CF")]
		[Address(RVA = "0x132DC00", Offset = "0x132DC00", VA = "0x132DC00")]
		public static float FrameAdjustedDampen(float dampen, float dt)
		{
			return default(float);
		}

		[Token(Token = "0x60031D0")]
		[Address(RVA = "0x132DC04", Offset = "0x132DC04", VA = "0x132DC04")]
		public static Vector3 NearestPointOnRay(Vector3 start, Vector3 direction, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60031D1")]
		[Address(RVA = "0x132DCF8", Offset = "0x132DCF8", VA = "0x132DCF8")]
		public static Vector3 NearestPointOnLineSegment(Vector3 start, Vector3 end, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60031D2")]
		[Address(RVA = "0x132DE08", Offset = "0x132DE08", VA = "0x132DE08")]
		public static float CheckPointOnLineSegment(Vector3 start, Vector3 end, Vector3 point)
		{
			return default(float);
		}

		[Token(Token = "0x60031D3")]
		[Address(RVA = "0x132DF0C", Offset = "0x132DF0C", VA = "0x132DF0C")]
		public static bool ClosestPointsOnTwoRays(out Vector3 closestOnRay1, out Vector3 closestOnRay2, Vector3 start1, Vector3 direction1, Vector3 start2, Vector3 direction2)
		{
			return default(bool);
		}

		[Token(Token = "0x60031D4")]
		[Address(RVA = "0x132E0CC", Offset = "0x132E0CC", VA = "0x132E0CC")]
		public static Vector3[] RayAndSphereIntersection(Vector3 centre, float radius, Vector3 rayStart, Vector3 rayEnd)
		{
			return null;
		}

		[Token(Token = "0x60031D5")]
		[Address(RVA = "0x132E334", Offset = "0x132E334", VA = "0x132E334")]
		public static float RayAndSphereIntersectionDistance(Vector3 centre, float radius, Vector3 rayStart, Vector3 rayDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60031D6")]
		[Address(RVA = "0x132E414", Offset = "0x132E414", VA = "0x132E414")]
		public static int RayAndSphereIntersectionDistance(Vector3 centre, float radius, Vector3 rayStart, Vector3 rayDirection, float[] hits)
		{
			return default(int);
		}

		[Token(Token = "0x60031D7")]
		[Address(RVA = "0x132E528", Offset = "0x132E528", VA = "0x132E528")]
		public static float Remap(float value, float startA, float endA, float startB, float endB)
		{
			return default(float);
		}

		[Token(Token = "0x60031D8")]
		[Address(RVA = "0x132E544", Offset = "0x132E544", VA = "0x132E544")]
		public static void AlignChildTransformToTarget(Transform parent, Transform child, Vector3 target)
		{
		}

		[Token(Token = "0x60031D9")]
		[Address(RVA = "0x132E710", Offset = "0x132E710", VA = "0x132E710")]
		public static void AlignRotationInPlane(Vector3 planeNormal, Transform pivot, Transform child, Vector3 target)
		{
		}

		[Token(Token = "0x60031DA")]
		[Address(RVA = "0x132E7C8", Offset = "0x132E7C8", VA = "0x132E7C8")]
		public static void AlignRotationInPlane(Vector3 planeNormal, Transform pivot, Vector3 childPosition, Vector3 childDirection, Vector3 target)
		{
		}

		[Token(Token = "0x60031DB")]
		[Address(RVA = "0x132ECEC", Offset = "0x132ECEC", VA = "0x132ECEC")]
		public static void CalculateWeights(float[] weights, Func<int, float> heuristicFunc)
		{
		}

		[Token(Token = "0x60031DC")]
		[Address(RVA = "0x132EE38", Offset = "0x132EE38", VA = "0x132EE38")]
		public static void NormalizeWeights(float[] weights)
		{
		}
	}
	[Token(Token = "0x2000840")]
	public class MotionDrawer : CachedMonoBehaviour
	{
		[Token(Token = "0x2000841")]
		public struct PositionSnapshot
		{
			[Token(Token = "0x4002897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4002898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 forward;

			[Token(Token = "0x4002899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float timeStamp;
		}

		[Token(Token = "0x400288C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int m_bufferSize;

		[Token(Token = "0x400288D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float m_timeDelta;

		[Token(Token = "0x400288E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PositionSnapshot[] m_snapshots;

		[Token(Token = "0x400288F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_index;

		[Token(Token = "0x4002890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private PositionSnapshot m_last;

		[Token(Token = "0x4002891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ValueSample<float> m_averageVelocity;

		[Token(Token = "0x4002892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ValueSample<float> m_averageRotation;

		[Token(Token = "0x4002893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_lastPosition;

		[Token(Token = "0x4002894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion m_lastRotation;

		[Token(Token = "0x1700089A")]
		public float AverageVelocity
		{
			[Token(Token = "0x60031DD")]
			[Address(RVA = "0x132FEC8", Offset = "0x132FEC8", VA = "0x132FEC8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60031DE")]
			[Address(RVA = "0x132FED0", Offset = "0x132FED0", VA = "0x132FED0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700089B")]
		public float AverageRotation
		{
			[Token(Token = "0x60031DF")]
			[Address(RVA = "0x132FED8", Offset = "0x132FED8", VA = "0x132FED8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60031E0")]
			[Address(RVA = "0x132FEE0", Offset = "0x132FEE0", VA = "0x132FEE0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700089C")]
		public int BufferSize
		{
			[Token(Token = "0x60031E1")]
			[Address(RVA = "0x132FEE8", Offset = "0x132FEE8", VA = "0x132FEE8")]
			set
			{
			}
		}

		[Token(Token = "0x60031E2")]
		[Address(RVA = "0x1330230", Offset = "0x1330230", VA = "0x1330230")]
		private void Awake()
		{
		}

		[Token(Token = "0x60031E3")]
		[Address(RVA = "0x132FEF0", Offset = "0x132FEF0", VA = "0x132FEF0")]
		private void UpdateBufferSize()
		{
		}

		[Token(Token = "0x60031E4")]
		[Address(RVA = "0x1330234", Offset = "0x1330234", VA = "0x1330234")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60031E5")]
		[Address(RVA = "0x13305BC", Offset = "0x13305BC", VA = "0x13305BC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60031E6")]
		[Address(RVA = "0x1330794", Offset = "0x1330794", VA = "0x1330794")]
		public MotionDrawer()
		{
		}
	}
	[Token(Token = "0x2000843")]
	public class NativeListMapper
	{
		[Token(Token = "0x400289F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<int, int> m_idToElementMapping;

		[Token(Token = "0x40028A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int[] m_activeIds;

		[Token(Token = "0x40028A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int m_numElements;

		[Token(Token = "0x40028A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int m_uniqueId;

		[Token(Token = "0x40028A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<int> m_removalList;

		[Token(Token = "0x60031ED")]
		[Address(RVA = "0x133084C", Offset = "0x133084C", VA = "0x133084C")]
		public NativeListMapper(int size)
		{
		}

		[Token(Token = "0x60031EE")]
		[Address(RVA = "0x1330878", Offset = "0x1330878", VA = "0x1330878")]
		public void Init(int size)
		{
		}

		[Token(Token = "0x60031EF")]
		[Address(RVA = "0x1330988", Offset = "0x1330988", VA = "0x1330988")]
		public void Clear()
		{
		}

		[Token(Token = "0x60031F0")]
		[Address(RVA = "0x13309F8", Offset = "0x13309F8", VA = "0x13309F8")]
		public int AddElement()
		{
			return default(int);
		}

		[Token(Token = "0x60031F1")]
		[Address(RVA = "0x1330A90", Offset = "0x1330A90", VA = "0x1330A90")]
		public void RemoveById(int id)
		{
		}

		[Token(Token = "0x60031F2")]
		[Address(RVA = "0x1330B38", Offset = "0x1330B38", VA = "0x1330B38")]
		public void RemoveByIndex(int index)
		{
		}

		[Token(Token = "0x60031F3")]
		[Address(RVA = "0x1330BFC", Offset = "0x1330BFC", VA = "0x1330BFC")]
		public int ElementToId(int index)
		{
			return default(int);
		}

		[Token(Token = "0x60031F4")]
		[Address(RVA = "0x1330C2C", Offset = "0x1330C2C", VA = "0x1330C2C")]
		public void ProcessRemovals(Action<int> RemoveListElement)
		{
		}
	}
	[Token(Token = "0x2000844")]
	public class NativeListGroupMapper
	{
		[Token(Token = "0x40028A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NativeListMapper m_mapper;

		[Token(Token = "0x40028A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int m_uniqueId;

		[Token(Token = "0x40028A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, int[]> m_groupIds;

		[Token(Token = "0x40028A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<int, int> m_subIdToGroupId;

		[Token(Token = "0x60031F5")]
		[Address(RVA = "0x1330DD0", Offset = "0x1330DD0", VA = "0x1330DD0")]
		public NativeListGroupMapper(int size)
		{
		}

		[Token(Token = "0x60031F6")]
		[Address(RVA = "0x1330F04", Offset = "0x1330F04", VA = "0x1330F04")]
		public int AddElements(int count)
		{
			return default(int);
		}

		[Token(Token = "0x60031F7")]
		[Address(RVA = "0x133104C", Offset = "0x133104C", VA = "0x133104C")]
		public void RemoveById(int id)
		{
		}

		[Token(Token = "0x60031F8")]
		[Address(RVA = "0x133115C", Offset = "0x133115C", VA = "0x133115C")]
		public void ProcessRemovals(Action<int> RemoveListElement)
		{
		}

		[Token(Token = "0x60031F9")]
		[Address(RVA = "0x1331174", Offset = "0x1331174", VA = "0x1331174")]
		public int ElementToId(int element)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x2000845")]
	public class PID
	{
		[Token(Token = "0x40028A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float pFactor;

		[Token(Token = "0x40028A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float iFactor;

		[Token(Token = "0x40028AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float dFactor;

		[Token(Token = "0x40028AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float integral;

		[Token(Token = "0x40028AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float lastError;

		[Token(Token = "0x60031FA")]
		[Address(RVA = "0x13311E0", Offset = "0x13311E0", VA = "0x13311E0")]
		public PID(float pFactor, float iFactor, float dFactor)
		{
		}

		[Token(Token = "0x60031FB")]
		[Address(RVA = "0x133121C", Offset = "0x133121C", VA = "0x133121C")]
		public float Update(float setpoint, float actual, float timeFrame)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x2000846")]
	[CreateAssetMenu(menuName = "Shooter/Props List")]
	public class PropsList : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000847")]
		public class PropDefinition
		{
			[Token(Token = "0x40028AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject prefab;

			[Token(Token = "0x40028AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<Socket.SocketName> validSockets;

			[Token(Token = "0x6003202")]
			[Address(RVA = "0x13312C0", Offset = "0x13312C0", VA = "0x13312C0")]
			public PropDefinition()
			{
			}
		}

		[Token(Token = "0x40028AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<PropDefinition> _props;

		[Token(Token = "0x1700089D")]
		public List<PropDefinition> props
		{
			[Token(Token = "0x60031FC")]
			[Address(RVA = "0x1331258", Offset = "0x1331258", VA = "0x1331258")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700089E")]
		public PropDefinition this[int index]
		{
			[Token(Token = "0x60031FD")]
			[Address(RVA = "0x1331260", Offset = "0x1331260", VA = "0x1331260")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60031FE")]
		public T Attach<T>(int index, Socket.SocketName socketName, Transform socketsParet) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60031FF")]
		public T Attach<T>(int index, Socket.SocketName socketName, List<Socket> availableSockets) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6003200")]
		public T Attach<T>(int index, Socket socket) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6003201")]
		[Address(RVA = "0x13312B8", Offset = "0x13312B8", VA = "0x13312B8")]
		public PropsList()
		{
		}
	}
	[Token(Token = "0x2000849")]
	public class Socket : MonoBehaviour
	{
		[Token(Token = "0x200084A")]
		public enum SocketName
		{
			[Token(Token = "0x40028B5")]
			Pistol_Left = 1,
			[Token(Token = "0x40028B6")]
			Pistol_Right
		}

		[Token(Token = "0x200084B")]
		public enum ParentingMode
		{
			[Token(Token = "0x40028B8")]
			Constrained,
			[Token(Token = "0x40028B9")]
			Parented
		}

		[Token(Token = "0x40028B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SocketName _socketName;

		[Token(Token = "0x40028B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[UnityEngine.Tooltip("How should the prop being attched have its transform updated. Constrained = use animation rigging constraint, Parented = parent the prop to the transform tha tthe socket belongs to.")]
		private ParentingMode m_parentingMode;

		[Token(Token = "0x1700089F")]
		public SocketName socketName
		{
			[Token(Token = "0x6003205")]
			[Address(RVA = "0x13312C8", Offset = "0x13312C8", VA = "0x13312C8")]
			get
			{
				return default(SocketName);
			}
		}

		[Token(Token = "0x170008A0")]
		public Transform attached
		{
			[Token(Token = "0x6003206")]
			[Address(RVA = "0x13312D0", Offset = "0x13312D0", VA = "0x13312D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003207")]
			[Address(RVA = "0x13312D8", Offset = "0x13312D8", VA = "0x13312D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6003208")]
		[Address(RVA = "0x13312E0", Offset = "0x13312E0", VA = "0x13312E0")]
		public void Attach(Transform prop)
		{
		}

		[Token(Token = "0x6003209")]
		[Address(RVA = "0x13312E8", Offset = "0x13312E8", VA = "0x13312E8")]
		public void Attach(Transform prop, Transform propLocalAlignmentNode)
		{
		}

		[Token(Token = "0x600320A")]
		[Address(RVA = "0x1331720", Offset = "0x1331720", VA = "0x1331720")]
		public Transform DetachCurrent()
		{
			return null;
		}

		[Token(Token = "0x600320B")]
		[Address(RVA = "0x13317B4", Offset = "0x13317B4", VA = "0x13317B4")]
		public Socket()
		{
		}
	}
	[Token(Token = "0x200084C")]
	public class ValueSample<T>
	{
		[Token(Token = "0x40028BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] m_samples;

		[Token(Token = "0x40028BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int m_index;

		[Token(Token = "0x40028BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Func<T, T, T> m_addFn;

		[Token(Token = "0x40028BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Func<T, int, T> m_divFn;

		[Token(Token = "0x600320C")]
		public ValueSample(int size, Func<T, T, T> addFn, Func<T, int, T> divFn)
		{
		}

		[Token(Token = "0x600320D")]
		public T AddSample(T value)
		{
			return (T)null;
		}

		[Token(Token = "0x600320E")]
		public T Average()
		{
			return (T)null;
		}
	}
}
namespace PT.Lighting
{
	[Serializable]
	[Token(Token = "0x200084D")]
	public class FogColorPair
	{
		[Token(Token = "0x40028BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color NearColor;

		[Token(Token = "0x40028BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color MiddleColor;

		[Token(Token = "0x40028C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color FarColor;

		[Token(Token = "0x600320F")]
		[Address(RVA = "0x13317C4", Offset = "0x13317C4", VA = "0x13317C4")]
		public FogColorPair()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200084E")]
	public class FogColorPairSerializable
	{
		[Token(Token = "0x40028C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color32 NearColor;

		[Token(Token = "0x40028C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color32 MiddleColor;

		[Token(Token = "0x40028C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color32 FarColor;

		[Token(Token = "0x6003210")]
		[Address(RVA = "0x13317CC", Offset = "0x13317CC", VA = "0x13317CC")]
		public FogColorPair GetValues()
		{
			return null;
		}

		[Token(Token = "0x6003211")]
		[Address(RVA = "0x13318FC", Offset = "0x13318FC", VA = "0x13318FC")]
		public FogColorPairSerializable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200084F")]
	public class FogRange
	{
		[Token(Token = "0x40028C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Start;

		[Token(Token = "0x40028C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float End;

		[Token(Token = "0x170008A1")]
		public float Range
		{
			[Token(Token = "0x6003212")]
			[Address(RVA = "0x1331904", Offset = "0x1331904", VA = "0x1331904")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6003213")]
		[Address(RVA = "0x1331910", Offset = "0x1331910", VA = "0x1331910")]
		public float Evaluate(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6003214")]
		[Address(RVA = "0x1331938", Offset = "0x1331938", VA = "0x1331938")]
		public static FogRange Lerp(FogRange a, FogRange b, float blend)
		{
			return null;
		}

		[Token(Token = "0x6003215")]
		[Address(RVA = "0x13319F8", Offset = "0x13319F8", VA = "0x13319F8")]
		public FogRange()
		{
		}
	}
	[Token(Token = "0x2000850")]
	public static class FogTextureHelper
	{
		[Token(Token = "0x40028C6")]
		private const int c_gradientTextureWidth = 64;

		[Token(Token = "0x40028C7")]
		private const int c_gradientTextureHeight = 16;

		[Token(Token = "0x6003216")]
		[Address(RVA = "0x1331A0C", Offset = "0x1331A0C", VA = "0x1331A0C")]
		public static Texture2D GradientToTexture(Gradient gradient0, Gradient gradient1)
		{
			return null;
		}
	}
	[Token(Token = "0x2000851")]
	[CreateAssetMenu(menuName = "Pixel Toys/Lighting/Global Rendering Setup")]
	public class GlobalRenderingSetup : ScriptableObject
	{
		[Token(Token = "0x40028C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GlobalRenderingSetup s_activeSetup;

		[Token(Token = "0x40028C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GlobalLayerCullSetup m_globalLayerCullSetup;

		[Token(Token = "0x40028CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Title("Color Correction")]
		[SerializeField]
		[UnityEngine.Tooltip("Scene View toggle overrides this in the editor, if the sliders are showing.")]
		private bool m_enableColorCorrection;

		[Token(Token = "0x40028CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		[SerializeField]
		private float m_brightness;

		[Token(Token = "0x40028CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Range(0f, 2f)]
		private float m_contrast;

		[Token(Token = "0x40028CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Range(0f, 2f)]
		private float m_saturation;

		[Token(Token = "0x40028CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Range(0f, 2f)]
		private float m_exposure;

		[Token(Token = "0x40028CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Title("Exterior")]
		[SerializeField]
		[Header("Scenario - Dark")]
		private FogRange m_fogRangeExterior0;

		[Token(Token = "0x40028D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Scenario - Light")]
		[SerializeField]
		private FogRange m_fogRangeExterior1;

		[Token(Token = "0x40028D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Scenario - Dark")]
		[SerializeField]
		[Title("Interior")]
		private FogRange m_fogRangeInterior0;

		[Token(Token = "0x40028D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Scenario - Light")]
		[SerializeField]
		private FogRange m_fogRangeInterior1;

		[Token(Token = "0x40028D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Title("Fog")]
		[SerializeField]
		private FogColorPair m_fogColorPair;

		[Token(Token = "0x40028D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(-0.5f, 1f)]
		[SerializeField]
		private float m_nearBias;

		[Token(Token = "0x40028D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[Range(0f, 3f)]
		private float m_fogExponent;

		[Token(Token = "0x40028D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Title("HitFlash")]
		[SerializeField]
		[Range(0f, 2f)]
		private float m_vignetteIntensity;

		[Token(Token = "0x40028D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[Range(0f, 4f)]
		private float m_vignetteRadius;

		[Token(Token = "0x40028D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Range(1f, 64f)]
		private float m_vignetteSmoothness;

		[Token(Token = "0x40028D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 7f)]
		[SerializeField]
		private float m_vignetteExponent;

		[Token(Token = "0x40028DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Texture2D m_vignetteNoiseTexture;

		[Token(Token = "0x40028DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Title("Glint")]
		[SerializeField]
		[ColorUsage(false, false)]
		private Color m_glintColor;

		[Token(Token = "0x40028DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[Range(0f, 5f)]
		private float m_glintSpeed;

		[Token(Token = "0x40028DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[Title("Misc")]
		private bool m_enableDithering;

		[Token(Token = "0x40028DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Texture2D m_ditherTexture;

		[Token(Token = "0x40028DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Texture2D m_windTexture;

		[Token(Token = "0x40028E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int s_glintColor;

		[Token(Token = "0x40028E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int s_glintSpeed;

		[Token(Token = "0x40028E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int s_fogExponent;

		[Token(Token = "0x40028E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int s_brightness;

		[Token(Token = "0x40028E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int s_contrast;

		[Token(Token = "0x40028E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int s_saturation;

		[Token(Token = "0x40028E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int s_exposure;

		[Token(Token = "0x40028E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int s_vignetteIntensity;

		[Token(Token = "0x40028E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int s_vignetteRadius;

		[Token(Token = "0x40028E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly int s_vignetteSmoothness;

		[Token(Token = "0x40028EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly int s_vignetteExponent;

		[Token(Token = "0x40028EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly int s_vignetteNoiseTexture;

		[Token(Token = "0x40028EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly int s_ditherTexture;

		[Token(Token = "0x40028ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static readonly int s_windTexture;

		[Token(Token = "0x170008A2")]
		public static GlobalRenderingSetup ActiveSetup
		{
			[Token(Token = "0x6003217")]
			[Address(RVA = "0x1331EBC", Offset = "0x1331EBC", VA = "0x1331EBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008A3")]
		public GlobalLayerCullSetup GlobalLayerCullSetup
		{
			[Token(Token = "0x6003218")]
			[Address(RVA = "0x1331F14", Offset = "0x1331F14", VA = "0x1331F14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008A4")]
		public bool EnableColorCorrection
		{
			[Token(Token = "0x6003219")]
			[Address(RVA = "0x1331F1C", Offset = "0x1331F1C", VA = "0x1331F1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008A5")]
		public float Brightness
		{
			[Token(Token = "0x600321A")]
			[Address(RVA = "0x1331F24", Offset = "0x1331F24", VA = "0x1331F24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008A6")]
		public float Contrast
		{
			[Token(Token = "0x600321B")]
			[Address(RVA = "0x1331F2C", Offset = "0x1331F2C", VA = "0x1331F2C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008A7")]
		public float Saturation
		{
			[Token(Token = "0x600321C")]
			[Address(RVA = "0x1331F34", Offset = "0x1331F34", VA = "0x1331F34")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008A8")]
		public float Exposure
		{
			[Token(Token = "0x600321D")]
			[Address(RVA = "0x1331F3C", Offset = "0x1331F3C", VA = "0x1331F3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008A9")]
		public float NearBias
		{
			[Token(Token = "0x600321E")]
			[Address(RVA = "0x1331F44", Offset = "0x1331F44", VA = "0x1331F44")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008AA")]
		public float FogExponent
		{
			[Token(Token = "0x600321F")]
			[Address(RVA = "0x1331F4C", Offset = "0x1331F4C", VA = "0x1331F4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008AB")]
		public Color GlintColor
		{
			[Token(Token = "0x6003220")]
			[Address(RVA = "0x1331F54", Offset = "0x1331F54", VA = "0x1331F54")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170008AC")]
		public float GlintSpeed
		{
			[Token(Token = "0x6003221")]
			[Address(RVA = "0x1331F60", Offset = "0x1331F60", VA = "0x1331F60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008AD")]
		public float VignetteIntensity
		{
			[Token(Token = "0x6003222")]
			[Address(RVA = "0x1331F68", Offset = "0x1331F68", VA = "0x1331F68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008AE")]
		public float VignetteRadius
		{
			[Token(Token = "0x6003223")]
			[Address(RVA = "0x1331F70", Offset = "0x1331F70", VA = "0x1331F70")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008AF")]
		public float VignetteSmoothness
		{
			[Token(Token = "0x6003224")]
			[Address(RVA = "0x1331F78", Offset = "0x1331F78", VA = "0x1331F78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008B0")]
		public float VignetteExponent
		{
			[Token(Token = "0x6003225")]
			[Address(RVA = "0x1331F80", Offset = "0x1331F80", VA = "0x1331F80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008B1")]
		public Texture2D VignetteNoiseTexture
		{
			[Token(Token = "0x6003226")]
			[Address(RVA = "0x1331F88", Offset = "0x1331F88", VA = "0x1331F88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008B2")]
		public bool EnableDithering
		{
			[Token(Token = "0x6003227")]
			[Address(RVA = "0x1331F90", Offset = "0x1331F90", VA = "0x1331F90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008B3")]
		public Texture2D DitherTexture
		{
			[Token(Token = "0x6003228")]
			[Address(RVA = "0x1331F98", Offset = "0x1331F98", VA = "0x1331F98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008B4")]
		public Texture2D WindTexture
		{
			[Token(Token = "0x6003229")]
			[Address(RVA = "0x1331FA0", Offset = "0x1331FA0", VA = "0x1331FA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008B5")]
		public FogColorPair DefaultFogColorPair
		{
			[Token(Token = "0x600322A")]
			[Address(RVA = "0x1331FA8", Offset = "0x1331FA8", VA = "0x1331FA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600322B")]
		[Address(RVA = "0x1331FB0", Offset = "0x1331FB0", VA = "0x1331FB0")]
		public static void SetActive(GlobalRenderingSetup globalRenderingSetup)
		{
		}

		[Token(Token = "0x600322C")]
		[Address(RVA = "0x1332048", Offset = "0x1332048", VA = "0x1332048")]
		private static void UpdateProperties()
		{
		}

		[Token(Token = "0x600322D")]
		[Address(RVA = "0x133275C", Offset = "0x133275C", VA = "0x133275C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600322E")]
		[Address(RVA = "0x13327A8", Offset = "0x13327A8", VA = "0x13327A8")]
		public Color GetNearColor()
		{
			return default(Color);
		}

		[Token(Token = "0x600322F")]
		[Address(RVA = "0x13327C8", Offset = "0x13327C8", VA = "0x13327C8")]
		public Color GetMiddleColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6003230")]
		[Address(RVA = "0x13327E8", Offset = "0x13327E8", VA = "0x13327E8")]
		public Color GetFarColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6003231")]
		[Address(RVA = "0x1332808", Offset = "0x1332808", VA = "0x1332808")]
		public Color SetNearColor(Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x6003232")]
		[Address(RVA = "0x1332828", Offset = "0x1332828", VA = "0x1332828")]
		public Color SetMiddleColor(Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x6003233")]
		[Address(RVA = "0x1332848", Offset = "0x1332848", VA = "0x1332848")]
		public Color SetFarColor(Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x6003234")]
		[Address(RVA = "0x1332868", Offset = "0x1332868", VA = "0x1332868")]
		public FogRange GetFogRangeExterior(float blend)
		{
			return null;
		}

		[Token(Token = "0x6003235")]
		[Address(RVA = "0x1332874", Offset = "0x1332874", VA = "0x1332874")]
		public FogRange GetFogRangeInterior(float blend)
		{
			return null;
		}

		[Token(Token = "0x6003236")]
		[Address(RVA = "0x1332880", Offset = "0x1332880", VA = "0x1332880")]
		public GlobalRenderingSetup()
		{
		}
	}
	[Token(Token = "0x2000852")]
	public enum LightingScenario
	{
		[Token(Token = "0x40028EF")]
		Light,
		[Token(Token = "0x40028F0")]
		Dark
	}
	[Token(Token = "0x2000853")]
	public class LightingToggleGroup : MonoBehaviour
	{
		[Token(Token = "0x40028F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("m_lightSet")]
		[SerializeField]
		private LightingScenario lightingScenario;

		[Token(Token = "0x6003238")]
		[Address(RVA = "0x1332B84", Offset = "0x1332B84", VA = "0x1332B84")]
		public LightingToggleGroup()
		{
		}
	}
}
namespace PT.BLAST
{
	[Token(Token = "0x2000854")]
	public interface ISectorProvider
	{
		[Token(Token = "0x170008B6")]
		Sector currentSector
		{
			[Token(Token = "0x6003239")]
			get;
		}
	}
	[Token(Token = "0x2000855")]
	public class Portal : CachedMonoBehaviour
	{
		[Token(Token = "0x40028F2")]
		private const int c_left = 0;

		[Token(Token = "0x40028F3")]
		private const int c_right = 1;

		[Token(Token = "0x40028F4")]
		private const int c_bottom = 2;

		[Token(Token = "0x40028F5")]
		private const int c_top = 3;

		[Token(Token = "0x40028F6")]
		private const int c_near = 4;

		[Token(Token = "0x40028F7")]
		private const int c_far = 5;

		[Token(Token = "0x40028F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int[] m_planeAreaCode;

		[Token(Token = "0x40028F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_backSectorDistance;

		[Token(Token = "0x40028FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_frontSectorDistance;

		[Token(Token = "0x40028FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Use autosize when create a portal between two sectors and where the size of the portal will be the size of smallest sector face.")]
		[SerializeField]
		private bool m_autoSize;

		[Token(Token = "0x40028FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool m_isVisible;

		[Token(Token = "0x40028FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Sector m_forwardSector;

		[Token(Token = "0x40028FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Sector m_backSector;

		[Token(Token = "0x40028FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] m_corners;

		[Token(Token = "0x170008B7")]
		public bool IsVisible
		{
			[Token(Token = "0x600323A")]
			[Address(RVA = "0x1332B8C", Offset = "0x1332B8C", VA = "0x1332B8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008B8")]
		public Sector ForwardSector
		{
			[Token(Token = "0x600323B")]
			[Address(RVA = "0x1332B94", Offset = "0x1332B94", VA = "0x1332B94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008B9")]
		public Sector BackSector
		{
			[Token(Token = "0x600323C")]
			[Address(RVA = "0x1332B9C", Offset = "0x1332B9C", VA = "0x1332B9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008BA")]
		public Vector3 ForwardPoint
		{
			[Token(Token = "0x600323D")]
			[Address(RVA = "0x1332BA4", Offset = "0x1332BA4", VA = "0x1332BA4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170008BB")]
		public Vector3 BackPoint
		{
			[Token(Token = "0x600323E")]
			[Address(RVA = "0x1332C1C", Offset = "0x1332C1C", VA = "0x1332C1C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170008BC")]
		public bool IsMisconfigured
		{
			[Token(Token = "0x600323F")]
			[Address(RVA = "0x1332C94", Offset = "0x1332C94", VA = "0x1332C94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008BD")]
		public bool autoSize
		{
			[Token(Token = "0x6003240")]
			[Address(RVA = "0x1332CF4", Offset = "0x1332CF4", VA = "0x1332CF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008BE")]
		public Vector3[] corners
		{
			[Token(Token = "0x6003241")]
			[Address(RVA = "0x1332CFC", Offset = "0x1332CFC", VA = "0x1332CFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003242")]
		[Address(RVA = "0x1332EE0", Offset = "0x1332EE0", VA = "0x1332EE0")]
		public void UpdateConnectedSectors()
		{
		}

		[Token(Token = "0x6003243")]
		[Address(RVA = "0x1333014", Offset = "0x1333014", VA = "0x1333014")]
		public void SetIsVisible(bool isVisible)
		{
		}

		[Token(Token = "0x6003244")]
		[Address(RVA = "0x1333020", Offset = "0x1333020", VA = "0x1333020")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003245")]
		[Address(RVA = "0x13330B4", Offset = "0x13330B4", VA = "0x13330B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003246")]
		[Address(RVA = "0x13331B4", Offset = "0x13331B4", VA = "0x13331B4")]
		public Plane[] CalculatePortalFrustum(Camera cam, Plane[] planes)
		{
			return null;
		}

		[Token(Token = "0x6003247")]
		[Address(RVA = "0x13335DC", Offset = "0x13335DC", VA = "0x13335DC")]
		public void DrawPlanes(Camera cam)
		{
		}

		[Token(Token = "0x6003248")]
		[Address(RVA = "0x1333A20", Offset = "0x1333A20", VA = "0x1333A20")]
		public int GetAreaCode(Vector3 p, Plane[] frustum)
		{
			return default(int);
		}

		[Token(Token = "0x6003249")]
		[Address(RVA = "0x1333BFC", Offset = "0x1333BFC", VA = "0x1333BFC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600324A")]
		[Address(RVA = "0x1333E88", Offset = "0x1333E88", VA = "0x1333E88")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600324B")]
		[Address(RVA = "0x1333F98", Offset = "0x1333F98", VA = "0x1333F98")]
		public void PerformAutoSize()
		{
		}

		[Token(Token = "0x600324C")]
		[Address(RVA = "0x1334024", Offset = "0x1334024", VA = "0x1334024")]
		public Portal()
		{
		}
	}
	[Token(Token = "0x2000856")]
	public class Sector : MonoBehaviour
	{
		[Token(Token = "0x2000857")]
		[Flags]
		public enum SectorType
		{
			[Token(Token = "0x4002910")]
			Indoor = 2,
			[Token(Token = "0x4002911")]
			Outdoor = 4
		}

		[Token(Token = "0x4002900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SectorType m_sectorType;

		[Token(Token = "0x4002901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GuidReference> m_renderingRoots;

		[Token(Token = "0x4002902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<GuidReference> m_walls;

		[Token(Token = "0x4002903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Shape m_shape;

		[Token(Token = "0x4002904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private List<Vector3> m_prismPositions;

		[Token(Token = "0x4002905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("Allow for static geometry to have its renderers culled.")]
		private bool m_enableStaticCulling;

		[Token(Token = "0x4002906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool m_isVisible;

		[Token(Token = "0x4002907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		private bool m_staticRendererVisibility;

		[Token(Token = "0x4002908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HashSet<Portal> m_connectedPortals;

		[Token(Token = "0x4002909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Renderer> m_staticRenderers;

		[Token(Token = "0x400290A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Sector> s_sectors;

		[Token(Token = "0x400290B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_traversalDepth;

		[Token(Token = "0x400290C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_currentDepth;

		[Token(Token = "0x400290D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Material> m_sectorMaterials;

		[Token(Token = "0x400290E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<BoxCollider> m_colliders;

		[Token(Token = "0x170008BF")]
		public Shape Shape
		{
			[Token(Token = "0x600324D")]
			[Address(RVA = "0x13340BC", Offset = "0x13340BC", VA = "0x13340BC")]
			get
			{
				return default(Shape);
			}
		}

		[Token(Token = "0x170008C0")]
		public bool IsVisible
		{
			[Token(Token = "0x600324E")]
			[Address(RVA = "0x13340C4", Offset = "0x13340C4", VA = "0x13340C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008C1")]
		public SectorType sectorType
		{
			[Token(Token = "0x600324F")]
			[Address(RVA = "0x13340CC", Offset = "0x13340CC", VA = "0x13340CC")]
			get
			{
				return default(SectorType);
			}
		}

		[Token(Token = "0x170008C2")]
		public List<Vector3> PrismPositions
		{
			[Token(Token = "0x6003250")]
			[Address(RVA = "0x13340D4", Offset = "0x13340D4", VA = "0x13340D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008C3")]
		public HashSet<Portal> ConnectedPortals
		{
			[Token(Token = "0x6003251")]
			[Address(RVA = "0x13340DC", Offset = "0x13340DC", VA = "0x13340DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003252")]
		[Address(RVA = "0x13340E4", Offset = "0x13340E4", VA = "0x13340E4")]
		public void TrackPortal(Portal portal)
		{
		}

		[Token(Token = "0x6003253")]
		[Address(RVA = "0x133413C", Offset = "0x133413C", VA = "0x133413C")]
		[AutoInitializeStatics]
		public static void ResetStatic()
		{
		}

		[Token(Token = "0x6003254")]
		[Address(RVA = "0x13341E8", Offset = "0x13341E8", VA = "0x13341E8")]
		static Sector()
		{
		}

		[Token(Token = "0x6003255")]
		[Address(RVA = "0x1334284", Offset = "0x1334284", VA = "0x1334284")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003256")]
		[Address(RVA = "0x1334468", Offset = "0x1334468", VA = "0x1334468")]
		public void GetColliders()
		{
		}

		[Token(Token = "0x6003257")]
		[Address(RVA = "0x1334518", Offset = "0x1334518", VA = "0x1334518")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6003258")]
		[Address(RVA = "0x1334598", Offset = "0x1334598", VA = "0x1334598")]
		private void Start()
		{
		}

		[Token(Token = "0x6003259")]
		[Address(RVA = "0x1334A04", Offset = "0x1334A04", VA = "0x1334A04")]
		public bool IsType(SectorType desiredSectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x600325A")]
		[Address(RVA = "0x13345C0", Offset = "0x13345C0", VA = "0x13345C0")]
		public void GetReferences()
		{
		}

		[Token(Token = "0x600325B")]
		[Address(RVA = "0x13349E0", Offset = "0x13349E0", VA = "0x13349E0")]
		private void ReplaceMaterials()
		{
		}

		[Token(Token = "0x600325C")]
		[Address(RVA = "0x1334F64", Offset = "0x1334F64", VA = "0x1334F64")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600325D")]
		[Address(RVA = "0x1335074", Offset = "0x1335074", VA = "0x1335074")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600325E")]
		[Address(RVA = "0x1335184", Offset = "0x1335184", VA = "0x1335184")]
		public void SetIsVisible(bool isVisible, int depth)
		{
		}

		[Token(Token = "0x600325F")]
		[Address(RVA = "0x13351AC", Offset = "0x13351AC", VA = "0x13351AC")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6003260")]
		[Address(RVA = "0x1335364", Offset = "0x1335364", VA = "0x1335364")]
		private void OnCollisionExit(Collision other)
		{
		}

		[Token(Token = "0x6003261")]
		[Address(RVA = "0x1335460", Offset = "0x1335460", VA = "0x1335460")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6003262")]
		[Address(RVA = "0x1335464", Offset = "0x1335464", VA = "0x1335464")]
		private void RefreshStaticVisibility()
		{
		}

		[Token(Token = "0x6003263")]
		[Address(RVA = "0x1335824", Offset = "0x1335824", VA = "0x1335824")]
		public void ForceIsVisible(bool mode)
		{
		}

		[Token(Token = "0x6003264")]
		[Address(RVA = "0x13359F0", Offset = "0x13359F0", VA = "0x13359F0")]
		public bool ContainsPoint(Vector3 position)
		{
			return default(bool);
		}

		[Token(Token = "0x6003265")]
		[Address(RVA = "0x1335DB8", Offset = "0x1335DB8", VA = "0x1335DB8")]
		public int GetConnectedSectors(Sector[] result)
		{
			return default(int);
		}

		[Token(Token = "0x6003266")]
		[Address(RVA = "0x1336018", Offset = "0x1336018", VA = "0x1336018")]
		public int GetPortalsTo(Sector sector, Portal[] portals)
		{
			return default(int);
		}

		[Token(Token = "0x6003267")]
		[Address(RVA = "0x1332F94", Offset = "0x1332F94", VA = "0x1332F94")]
		public static Sector GetSectorContainingPosition(Vector3 position, [Optional] Sector defaultSector)
		{
			return null;
		}

		[Token(Token = "0x6003268")]
		[Address(RVA = "0x1336264", Offset = "0x1336264", VA = "0x1336264")]
		public static Sector GetSectorContainingPosition(Vector3 position, Sector currentSector, Sector defaultSector)
		{
			return null;
		}

		[Token(Token = "0x6003269")]
		[Address(RVA = "0x1336550", Offset = "0x1336550", VA = "0x1336550")]
		public static bool CheckSameSectors(Sector sectorA, Sector sectorB)
		{
			return default(bool);
		}

		[Token(Token = "0x600326A")]
		[Address(RVA = "0x1336664", Offset = "0x1336664", VA = "0x1336664")]
		[ContextMenu("Convert scale to Collider Size")]
		public void ConvertToColliderSize()
		{
		}

		[Token(Token = "0x600326B")]
		[Address(RVA = "0x13367B4", Offset = "0x13367B4", VA = "0x13367B4")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600326C")]
		[Address(RVA = "0x1336C6C", Offset = "0x1336C6C", VA = "0x1336C6C")]
		public Sector()
		{
		}
	}
	[Token(Token = "0x2000858")]
	public class SectorMember : CachedMonoBehaviour, IPosition
	{
		[Token(Token = "0x200085A")]
		[CompilerGenerated]
		private sealed class <DetermineSector>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400291B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400291C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400291D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SectorMember <>4__this;

			[Token(Token = "0x170008C9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003288")]
				[Address(RVA = "0x1337D28", Offset = "0x1337D28", VA = "0x1337D28", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170008CA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600328A")]
				[Address(RVA = "0x1337D70", Offset = "0x1337D70", VA = "0x1337D70", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003285")]
			[Address(RVA = "0x133745C", Offset = "0x133745C", VA = "0x133745C")]
			[DebuggerHidden]
			public <DetermineSector>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6003286")]
			[Address(RVA = "0x1337B10", Offset = "0x1337B10", VA = "0x1337B10", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003287")]
			[Address(RVA = "0x1337B14", Offset = "0x1337B14", VA = "0x1337B14", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003289")]
			[Address(RVA = "0x1337D30", Offset = "0x1337D30", VA = "0x1337D30", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Renderer[] m_renderers;

		[Token(Token = "0x4002913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Vector3 m_localSamplePosition;

		[Token(Token = "0x4002914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool m_hasCurrentSector;

		[Token(Token = "0x4002915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		private bool m_assertionFired;

		[Token(Token = "0x4002916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Sector m_currentSector;

		[Token(Token = "0x4002917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<SectorMember> s_sectorMembers;

		[Token(Token = "0x4002918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private HashSet<Sector> m_inSectors;

		[Token(Token = "0x170008C4")]
		public Renderer[] renderers
		{
			[Token(Token = "0x600326D")]
			[Address(RVA = "0x1336F3C", Offset = "0x1336F3C", VA = "0x1336F3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008C5")]
		public Sector sector
		{
			[Token(Token = "0x600326E")]
			[Address(RVA = "0x1336F44", Offset = "0x1336F44", VA = "0x1336F44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008C6")]
		private Vector3 IPosition.position
		{
			[Token(Token = "0x600326F")]
			[Address(RVA = "0x1336F4C", Offset = "0x1336F4C", VA = "0x1336F4C", Slot = "4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170008C7")]
		public static List<SectorMember> members
		{
			[Token(Token = "0x6003271")]
			[Address(RVA = "0x1337020", Offset = "0x1337020", VA = "0x1337020")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008C8")]
		public bool IsVisible
		{
			[Token(Token = "0x6003272")]
			[Address(RVA = "0x1337078", Offset = "0x1337078", VA = "0x1337078")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003270")]
		[Address(RVA = "0x1336F88", Offset = "0x1336F88", VA = "0x1336F88")]
		static SectorMember()
		{
		}

		[Token(Token = "0x6003273")]
		[Address(RVA = "0x13370FC", Offset = "0x13370FC", VA = "0x13370FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003274")]
		[Address(RVA = "0x13372E0", Offset = "0x13372E0", VA = "0x13372E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003275")]
		[Address(RVA = "0x13373BC", Offset = "0x13373BC", VA = "0x13373BC")]
		public void DetermineSectorAsync()
		{
		}

		[Token(Token = "0x6003276")]
		[Address(RVA = "0x13373E8", Offset = "0x13373E8", VA = "0x13373E8")]
		[IteratorStateMachine(typeof(<DetermineSector>d__21))]
		private IEnumerator DetermineSector()
		{
			return null;
		}

		[Token(Token = "0x6003277")]
		[Address(RVA = "0x1337484", Offset = "0x1337484", VA = "0x1337484")]
		[ContextMenu("Determine Sector")]
		public void Editor_DetermineSector()
		{
		}

		[Token(Token = "0x6003278")]
		[Address(RVA = "0x1337530", Offset = "0x1337530", VA = "0x1337530")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003279")]
		[Address(RVA = "0x13375B0", Offset = "0x13375B0", VA = "0x13375B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600327A")]
		[Address(RVA = "0x13352A8", Offset = "0x13352A8", VA = "0x13352A8")]
		public void SetCurrentSector(Sector sector)
		{
		}

		[Token(Token = "0x600327B")]
		[Address(RVA = "0x1335014", Offset = "0x1335014", VA = "0x1335014")]
		public void SignalSectorEntered(Sector enteredSector)
		{
		}

		[Token(Token = "0x600327C")]
		[Address(RVA = "0x1335124", Offset = "0x1335124", VA = "0x1335124")]
		public void SignalSectorExited(Sector exitedSector)
		{
		}

		[Token(Token = "0x600327D")]
		[Address(RVA = "0x13376C4", Offset = "0x13376C4", VA = "0x13376C4")]
		private void UpdateCurrentSector()
		{
		}

		[Token(Token = "0x600327E")]
		[Address(RVA = "0x13375E0", Offset = "0x13375E0", VA = "0x13375E0")]
		private void SetVisible(bool visible)
		{
		}

		[Token(Token = "0x600327F")]
		[Address(RVA = "0x1337864", Offset = "0x1337864", VA = "0x1337864")]
		public bool InSameSectorAs(SectorMember otherMember)
		{
			return default(bool);
		}

		[Token(Token = "0x6003280")]
		[Address(RVA = "0x1337910", Offset = "0x1337910", VA = "0x1337910")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6003281")]
		[Address(RVA = "0x1337A34", Offset = "0x1337A34", VA = "0x1337A34")]
		public SectorMember()
		{
		}
	}
	[Token(Token = "0x200085B")]
	public class VisibilitySystem : Singleton<VisibilitySystem>
	{
		[Token(Token = "0x200085C")]
		public class CullingFrustum
		{
			[Token(Token = "0x400292C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Plane[] planes;

			[Token(Token = "0x600329C")]
			[Address(RVA = "0x13380B8", Offset = "0x13380B8", VA = "0x13380B8")]
			public CullingFrustum()
			{
			}
		}

		[Token(Token = "0x400291E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<GuidReference> m_cabinExteriorWalls;

		[Token(Token = "0x400291F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Camera m_camera;

		[Token(Token = "0x4002920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Portal[] m_portals;

		[Token(Token = "0x4002921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Sector[] m_sectors;

		[Token(Token = "0x4002922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Sector m_currentPlayerSector;

		[Token(Token = "0x4002923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool m_rebuildRequired;

		[Token(Token = "0x4002924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Stack<Sector> m_sectorStack;

		[Token(Token = "0x4002925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<CullingFrustum> m_frustumStack;

		[Token(Token = "0x4002926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<CullingFrustum> m_frustumPool;

		[Token(Token = "0x4002927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Material> m_cabinExteriorWallMaterials;

		[Token(Token = "0x4002928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int m_cabinExterialWallsMaterialRenderQueue;

		[Token(Token = "0x4002929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameSettings.Setting<bool> m_enableSectorCulling;

		[Token(Token = "0x400292A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int m_frustumPoolIndex;

		[Token(Token = "0x400292B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int m_calculatedFrustums;

		[Token(Token = "0x170008CB")]
		private Camera visibilityCamera
		{
			[Token(Token = "0x600328B")]
			[Address(RVA = "0x1337D78", Offset = "0x1337D78", VA = "0x1337D78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008CC")]
		private bool EnableSectorCulling
		{
			[Token(Token = "0x600328C")]
			[Address(RVA = "0x1337DF8", Offset = "0x1337DF8", VA = "0x1337DF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600328D")]
		[Address(RVA = "0x1337EC0", Offset = "0x1337EC0", VA = "0x1337EC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600328E")]
		[Address(RVA = "0x13380C0", Offset = "0x13380C0", VA = "0x13380C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600328F")]
		[Address(RVA = "0x13380E4", Offset = "0x13380E4", VA = "0x13380E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003290")]
		[Address(RVA = "0x13380F4", Offset = "0x13380F4", VA = "0x13380F4")]
		[ContextMenu("Initialize Structures")]
		private void InitializeDataStructures()
		{
		}

		[Token(Token = "0x6003291")]
		[Address(RVA = "0x13384F4", Offset = "0x13384F4", VA = "0x13384F4")]
		[ContextMenu("Enable renderers")]
		private void EnableRenderers()
		{
		}

		[Token(Token = "0x6003292")]
		[Address(RVA = "0x13330A8", Offset = "0x13330A8", VA = "0x13330A8")]
		public void MarkRebuildRequired()
		{
		}

		[Token(Token = "0x6003293")]
		[Address(RVA = "0x133855C", Offset = "0x133855C", VA = "0x133855C")]
		private void Update()
		{
		}

		[Token(Token = "0x6003294")]
		[Address(RVA = "0x1338A40", Offset = "0x1338A40", VA = "0x1338A40")]
		private void ResetVisibility(bool visible = false)
		{
		}

		[Token(Token = "0x6003295")]
		[Address(RVA = "0x1338720", Offset = "0x1338720", VA = "0x1338720")]
		private void CalculateVisibility()
		{
		}

		[Token(Token = "0x6003296")]
		[Address(RVA = "0x1338F40", Offset = "0x1338F40", VA = "0x1338F40")]
		private string Spaces(int length)
		{
			return null;
		}

		[Token(Token = "0x6003297")]
		[Address(RVA = "0x1338AE4", Offset = "0x1338AE4", VA = "0x1338AE4")]
		private void SetSectorVisible(Sector sector, Camera cam, List<CullingFrustum> frustumStack, int depth)
		{
		}

		[Token(Token = "0x6003298")]
		[Address(RVA = "0x1338FB8", Offset = "0x1338FB8", VA = "0x1338FB8")]
		private bool CheckPortalVisible(Portal portal, CullingFrustum frustum)
		{
			return default(bool);
		}

		[Token(Token = "0x6003299")]
		[Address(RVA = "0x1339088", Offset = "0x1339088", VA = "0x1339088")]
		private void CalculatePortalFrustum(Portal portal, Camera cam, Plane[] planes)
		{
		}

		[Token(Token = "0x600329A")]
		[Address(RVA = "0x1334A14", Offset = "0x1334A14", VA = "0x1334A14")]
		public static List<Material> MakeUniqueMaterials(List<GuidReference> gameObjects)
		{
			return null;
		}

		[Token(Token = "0x600329B")]
		[Address(RVA = "0x13390BC", Offset = "0x13390BC", VA = "0x13390BC")]
		public VisibilitySystem()
		{
		}
	}
}
namespace PT.PlayMaker
{
	[Token(Token = "0x200085D")]
	[HutongGames.PlayMaker.Tooltip("Changes the state of a door")]
	[ActionCategory("BattleSister Scripted Sequences")]
	public class ChangeDoorState : FsmStateAction
	{
		[Token(Token = "0x400292D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("The name of the timeline")]
		public TweenerGroup TweenerGroup;

		[Token(Token = "0x600329D")]
		[Address(RVA = "0x1339138", Offset = "0x1339138", VA = "0x1339138", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600329E")]
		[Address(RVA = "0x133916C", Offset = "0x133916C", VA = "0x133916C")]
		public ChangeDoorState()
		{
		}
	}
	[Token(Token = "0x200085E")]
	[ActionCategory("BattleSister Scripted Sequences")]
	[HutongGames.PlayMaker.Tooltip("Plays a timeline.")]
	public class PlayCinematic : FsmStateAction
	{
		[Token(Token = "0x400292E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(CinematicDirector))]
		[HutongGames.PlayMaker.Tooltip("The game object to hold the unity timeline components.")]
		public FsmOwnerDefault GameObject;

		[Token(Token = "0x400292F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("The timeline asset")]
		[ObjectType(typeof(TimelineAsset))]
		public FsmObject Timeline;

		[Token(Token = "0x4002930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("The name of the timeline")]
		public FsmString TimelineName;

		[Token(Token = "0x4002931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HutongGames.PlayMaker.Tooltip("Whether to loop the timeline indefinitely.")]
		public FsmBool Looping;

		[Token(Token = "0x600329F")]
		[Address(RVA = "0x1339174", Offset = "0x1339174", VA = "0x1339174", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60032A0")]
		[Address(RVA = "0x13391E8", Offset = "0x13391E8", VA = "0x13391E8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60032A1")]
		[Address(RVA = "0x13393A8", Offset = "0x13393A8", VA = "0x13393A8")]
		public PlayCinematic()
		{
		}
	}
	[Token(Token = "0x200085F")]
	[HutongGames.PlayMaker.Tooltip("Forces a timeline to stop if it is currently playing.")]
	[ActionCategory("BattleSister Scripted Sequences")]
	public class StopCinematic : FsmStateAction
	{
		[Token(Token = "0x4002932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(CinematicDirector))]
		[HutongGames.PlayMaker.Tooltip("The game object to hold the unity timeline components.")]
		public FsmOwnerDefault GameObject;

		[Token(Token = "0x60032A2")]
		[Address(RVA = "0x13393B0", Offset = "0x13393B0", VA = "0x13393B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60032A3")]
		[Address(RVA = "0x1339484", Offset = "0x1339484", VA = "0x1339484")]
		public StopCinematic()
		{
		}
	}
	[Token(Token = "0x2000860")]
	[ActionCategory(ActionCategory.GameLogic)]
	[HutongGames.PlayMaker.Tooltip("Logic branch if in Demo mode")]
	public class CheckDemoMode : FsmStateAction
	{
		[Token(Token = "0x4002933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("Event to send if in Demo. Can be empty!")]
		public FsmEvent isTrue;

		[Token(Token = "0x4002934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("Event to send if not in Demo. Can be empty!")]
		public FsmEvent isFalse;

		[Token(Token = "0x60032A4")]
		[Address(RVA = "0x133948C", Offset = "0x133948C", VA = "0x133948C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60032A5")]
		[Address(RVA = "0x13394BC", Offset = "0x13394BC", VA = "0x13394BC")]
		public CheckDemoMode()
		{
		}
	}
	[Token(Token = "0x2000861")]
	[ActionCategory(ActionCategory.GameLogic)]
	[HutongGames.PlayMaker.Tooltip("Logic branch if specific Quest is in Active state")]
	public class CheckQuestActive : FsmStateAction
	{
		[Token(Token = "0x4002935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("Quest to ask if Active or not")]
		public FsmObject quest;

		[Token(Token = "0x4002936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("Event to send if the specified Quest is Active. Can be empty!")]
		public FsmEvent isTrue;

		[Token(Token = "0x4002937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("Event to send if the specified Quest is NOT Active. Can be empty!")]
		public FsmEvent isFalse;

		[Token(Token = "0x60032A6")]
		[Address(RVA = "0x13394C4", Offset = "0x13394C4", VA = "0x13394C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60032A7")]
		[Address(RVA = "0x1339614", Offset = "0x1339614", VA = "0x1339614")]
		public CheckQuestActive()
		{
		}
	}
	[Token(Token = "0x2000862")]
	[ActionCategory(ActionCategory.Events)]
	[HutongGames.PlayMaker.Tooltip("Request specified message to be displayed on the player's HUD")]
	public class DisplayStandaloneMessage : FsmStateAction
	{
		[Token(Token = "0x4002938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[HutongGames.PlayMaker.Tooltip("LocId for requested string")]
		public FsmString StringLocId;

		[Token(Token = "0x4002939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("Optional image to display with message")]
		[ObjectType(typeof(Sprite))]
		public FsmObject OptionalSprite;

		[Token(Token = "0x60032A8")]
		[Address(RVA = "0x133961C", Offset = "0x133961C", VA = "0x133961C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60032A9")]
		[Address(RVA = "0x13396FC", Offset = "0x13396FC", VA = "0x13396FC")]
		public DisplayStandaloneMessage()
		{
		}
	}
	[Token(Token = "0x2000863")]
	[HutongGames.PlayMaker.Tooltip("Request current level to end (trigger fade out)")]
	[ActionCategory(ActionCategory.Events)]
	public class EndLevel : FsmStateAction
	{
		[Token(Token = "0x60032AA")]
		[Address(RVA = "0x1339704", Offset = "0x1339704", VA = "0x1339704", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60032AB")]
		[Address(RVA = "0x1339788", Offset = "0x1339788", VA = "0x1339788")]
		public EndLevel()
		{
		}
	}
	[Token(Token = "0x2000864")]
	[HutongGames.PlayMaker.Tooltip("Checks if an Object is in LOS")]
	[ActionCategory(ActionCategory.Camera)]
	public class LOSTriggerSphere : FsmStateAction
	{
		[Token(Token = "0x400293A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HutongGames.PlayMaker.Tooltip("Optional overridge game object where the centre of the sphere should be, otherwise use the Fsm.GameObject")]
		[RequiredField]
		public FsmOwnerDefault Target;

		[Token(Token = "0x400293B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HutongGames.PlayMaker.Tooltip("Optional override camera, otherwise get camera from camera manager")]
		public Camera Camera;

		[Token(Token = "0x400293C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HutongGames.PlayMaker.Tooltip("An additional offset from the centre")]
		public FsmVector3 CentreOffset;

		[Token(Token = "0x400293D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HutongGames.PlayMaker.Tooltip("Radius of LOS sphere")]
		public FsmFloat Radius;

		[Token(Token = "0x400293E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HutongGames.PlayMaker.Tooltip("Hit count limit for radial casts")]
		public FsmInt HitCountLimit;

		[Token(Token = "0x400293F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[ArrayEditor(VariableType.String, "", 0, 0, 65536)]
		[HutongGames.PlayMaker.Tooltip("Layer mask names")]
		public FsmArray LayerMaskArray;

		[Token(Token = "0x4002940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HutongGames.PlayMaker.Tooltip("The maximum distance from the camera this LOS trigger can fire from, squared")]
		public FsmFloat MaxSqrDistance;

		[Token(Token = "0x4002941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HutongGames.PlayMaker.Tooltip("The multiplier we use to calculated the FOV in which the centre of the sphere has to be in")]
		[HasFloatSlider(0f, 1f)]
		public FsmFloat EligibleFOVMultiplier;

		[Token(Token = "0x4002942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HutongGames.PlayMaker.Tooltip("Event to send when the LOS is gained")]
		public FsmEvent OnBeginOverlapEvent;

		[Token(Token = "0x4002943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HutongGames.PlayMaker.Tooltip("Event to send when the LOS is lost")]
		public FsmEvent OnEndOverlapEvent;

		[Token(Token = "0x4002944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HutongGames.PlayMaker.Tooltip("Check this box to preform this action every frame.")]
		public FsmBool EveryFrame;

		[Token(Token = "0x4002945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HutongGames.PlayMaker.Tooltip("How many frames do we wait between each LOS check")]
		public FsmInt FrameThreshold;

		[Token(Token = "0x4002946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HutongGames.PlayMaker.Tooltip("The number of overlaps before finishing. If 0 or lower, there is no limit!")]
		public FsmInt OverlapCountLimit;

		[Token(Token = "0x4002947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int m_frameCounter;

		[Token(Token = "0x4002948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool m_isOverlapped;

		[Token(Token = "0x4002949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int m_layerMask;

		[Token(Token = "0x400294A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int m_overlapCounter;

		[Token(Token = "0x60032AC")]
		[Address(RVA = "0x1339790", Offset = "0x1339790", VA = "0x1339790", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60032AD")]
		[Address(RVA = "0x13398B8", Offset = "0x13398B8", VA = "0x13398B8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x60032AE")]
		[Address(RVA = "0x133A38C", Offset = "0x133A38C", VA = "0x133A38C", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60032AF")]
		[Address(RVA = "0x13399C4", Offset = "0x13399C4", VA = "0x13399C4")]
		private void LOSCheck()
		{
		}

		[Token(Token = "0x60032B0")]
		[Address(RVA = "0x133A3F8", Offset = "0x133A3F8", VA = "0x133A3F8")]
		private void OnConditionsNotMet()
		{
		}

		[Token(Token = "0x60032B1")]
		[Address(RVA = "0x133A450", Offset = "0x133A450", VA = "0x133A450")]
		public LOSTriggerSphere()
		{
		}
	}
}
namespace PT.DataBinding
{
	[Token(Token = "0x2000865")]
	[AddComponentMenu("Stepped Image Fill Binder")]
	[BindingType(new Type[]
	{
		typeof(float),
		typeof(int)
	})]
	public class UISteppedImageFillBinder : ComponentBinder<Image>
	{
		[Token(Token = "0x400294B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float m_minValue;

		[Token(Token = "0x400294C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float m_maxValue;

		[Token(Token = "0x400294D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private int m_numSteps;

		[Token(Token = "0x400294E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Events")]
		public UnityEvent<float> OnIncrease;

		[Token(Token = "0x400294F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent<float> OnDecrease;

		[Token(Token = "0x60032B2")]
		[Address(RVA = "0x133A458", Offset = "0x133A458", VA = "0x133A458", Slot = "7")]
		protected override void UpdateData(object value)
		{
		}

		[Token(Token = "0x60032B3")]
		[Address(RVA = "0x133A610", Offset = "0x133A610", VA = "0x133A610")]
		private float stepValue(float value)
		{
			return default(float);
		}

		[Token(Token = "0x60032B4")]
		[Address(RVA = "0x133A70C", Offset = "0x133A70C", VA = "0x133A70C")]
		public UISteppedImageFillBinder()
		{
		}
	}
	[Token(Token = "0x2000866")]
	[AddComponentMenu("PTTech/Data Binding/TextMesh3DBinder")]
	public class TextMesh3DBinder : ComponentBinder<TextMeshPro>
	{
		[Token(Token = "0x4002950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private string m_formatter;

		[Token(Token = "0x60032B5")]
		[Address(RVA = "0x133A760", Offset = "0x133A760", VA = "0x133A760", Slot = "7")]
		protected override void UpdateData(object value)
		{
		}

		[Token(Token = "0x60032B6")]
		[Address(RVA = "0x133A894", Offset = "0x133A894", VA = "0x133A894")]
		public TextMesh3DBinder()
		{
		}
	}
	[Token(Token = "0x2000867")]
	[AddComponentMenu("PTTech/Data Binding/TextMeshProStrikeBinder")]
	public class TextMeshProStrikeBinder : ComponentBinder<TextMeshProUGUI>
	{
		[Token(Token = "0x60032B7")]
		[Address(RVA = "0x133A908", Offset = "0x133A908", VA = "0x133A908", Slot = "7")]
		protected override void UpdateData(object value)
		{
		}

		[Token(Token = "0x60032B8")]
		[Address(RVA = "0x133AA0C", Offset = "0x133AA0C", VA = "0x133AA0C")]
		public TextMeshProStrikeBinder()
		{
		}
	}
	[Token(Token = "0x2000868")]
	public class TextMeshProTransparenceBinder : ComponentBinder<TextMeshProUGUI>
	{
		[Token(Token = "0x60032B9")]
		[Address(RVA = "0x133AA54", Offset = "0x133AA54", VA = "0x133AA54", Slot = "7")]
		protected override void UpdateData(object value)
		{
		}

		[Token(Token = "0x60032BA")]
		[Address(RVA = "0x133AB64", Offset = "0x133AB64", VA = "0x133AB64")]
		public TextMeshProTransparenceBinder()
		{
		}
	}
}
namespace PT.PremiumFMOD.Players
{
	[Token(Token = "0x2000869")]
	public enum ReverbTailType
	{
		[Token(Token = "0x4002952")]
		None,
		[Token(Token = "0x4002953")]
		CabinGeneral,
		[Token(Token = "0x4002954")]
		ForestGeneral,
		[Token(Token = "0x4002955")]
		TunnelGeneral
	}
	[Token(Token = "0x200086A")]
	public class AudioZonePlayer : AbstractAudioPlayer
	{
		[Token(Token = "0x4002956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioAmbienceManager m_ambienceManager;

		[Token(Token = "0x4002957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioReverbSnapshotManager m_reverbManager;

		[Token(Token = "0x4002958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioMixSnapshotManager m_mixManager;

		[Token(Token = "0x4002959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioParameterManager m_parameterManager;

		[Token(Token = "0x400295A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[UnityEngine.Tooltip("A 2D Ambience event to play")]
		private AudioEventDescription m_ambience;

		[Token(Token = "0x400295B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[UnityEngine.Tooltip("Reverb Snapshot")]
		private EventReference m_reverbSnapshot;

		[Token(Token = "0x400295C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Reverb Tail Type")]
		[SerializeField]
		private EventReference m_mixSnapshot;

		[Token(Token = "0x400295D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[UnityEngine.Tooltip("Mix Snapshot")]
		private ReverbTailType m_reverbTailType;

		[Token(Token = "0x400295E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private bool m_resetReverbTailToNoneOnExit;

		[Token(Token = "0x400295F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		[SerializeField]
		private bool m_stopAmbienceOnExit;

		[Token(Token = "0x4002960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private ParamReference[] m_setParameterValuesOnTriggerEntered;

		[Token(Token = "0x60032BB")]
		[Address(RVA = "0x133ABAC", Offset = "0x133ABAC", VA = "0x133ABAC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60032BC")]
		[Address(RVA = "0x133ABB4", Offset = "0x133ABB4", VA = "0x133ABB4", Slot = "5")]
		protected override void InitializeAllDescriptions()
		{
		}

		[Token(Token = "0x60032BD")]
		[Address(RVA = "0x133AD64", Offset = "0x133AD64", VA = "0x133AD64")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60032BE")]
		[Address(RVA = "0x133AE50", Offset = "0x133AE50", VA = "0x133AE50")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x60032BF")]
		[Address(RVA = "0x133ADA0", Offset = "0x133ADA0", VA = "0x133ADA0")]
		private void PlayAmbienceAndSnapshots(Collider other)
		{
		}

		[Token(Token = "0x60032C0")]
		[Address(RVA = "0x133AE8C", Offset = "0x133AE8C", VA = "0x133AE8C")]
		private void PlayAmbienceAndSnapshots(Collider2D other)
		{
		}

		[Token(Token = "0x60032C1")]
		[Address(RVA = "0x133B050", Offset = "0x133B050", VA = "0x133B050")]
		private void PlayAmbience(ParamReference[] param)
		{
		}

		[Token(Token = "0x60032C2")]
		[Address(RVA = "0x133B1C8", Offset = "0x133B1C8", VA = "0x133B1C8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60032C3")]
		[Address(RVA = "0x133B2AC", Offset = "0x133B2AC", VA = "0x133B2AC")]
		private void OnTriggerExit2D(Collider2D collision)
		{
		}

		[Token(Token = "0x60032C4")]
		[Address(RVA = "0x133B204", Offset = "0x133B204", VA = "0x133B204")]
		private void StopReferences(Collider other)
		{
		}

		[Token(Token = "0x60032C5")]
		[Address(RVA = "0x133B2E8", Offset = "0x133B2E8", VA = "0x133B2E8")]
		private void StopReferences(Collider2D other)
		{
		}

		[Token(Token = "0x60032C6")]
		[Address(RVA = "0x133AF3C", Offset = "0x133AF3C", VA = "0x133AF3C")]
		private bool CollisionCheck(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x60032C7")]
		[Address(RVA = "0x133B0B4", Offset = "0x133B0B4", VA = "0x133B0B4")]
		private bool CollisionCheck(Collider2D other)
		{
			return default(bool);
		}

		[Token(Token = "0x60032C8")]
		[Address(RVA = "0x133B390", Offset = "0x133B390", VA = "0x133B390", Slot = "26")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60032C9")]
		[Address(RVA = "0x133B4B4", Offset = "0x133B4B4", VA = "0x133B4B4")]
		public AudioZonePlayer()
		{
		}
	}
}
namespace Cabin.Utilities
{
	[Token(Token = "0x200086B")]
	public class AttackEvent : CachedMonoBehaviour
	{
		[Token(Token = "0x4002961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnAttack;

		[Token(Token = "0x60032CA")]
		[Address(RVA = "0x133B4C4", Offset = "0x133B4C4", VA = "0x133B4C4")]
		private void Update()
		{
		}

		[Token(Token = "0x60032CB")]
		[Address(RVA = "0x133B4E8", Offset = "0x133B4E8", VA = "0x133B4E8")]
		public static void RaiseAttack()
		{
		}

		[Token(Token = "0x60032CC")]
		[Address(RVA = "0x133B54C", Offset = "0x133B54C", VA = "0x133B54C")]
		public AttackEvent()
		{
		}
	}
	[Token(Token = "0x200086C")]
	public class MoveToEvent : CachedMonoBehaviour
	{
		[Token(Token = "0x4002962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<Vector3> OnMoveTo;

		[Token(Token = "0x4002963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3 _moveTo;

		[Token(Token = "0x60032CD")]
		[Address(RVA = "0x133B554", Offset = "0x133B554", VA = "0x133B554")]
		private void Update()
		{
		}

		[Token(Token = "0x60032CE")]
		[Address(RVA = "0x133B93C", Offset = "0x133B93C", VA = "0x133B93C")]
		public static void RaiseMoveTo(Vector3 pos)
		{
		}

		[Token(Token = "0x60032CF")]
		[Address(RVA = "0x133B9DC", Offset = "0x133B9DC", VA = "0x133B9DC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60032D0")]
		[Address(RVA = "0x133BA54", Offset = "0x133BA54", VA = "0x133BA54")]
		public MoveToEvent()
		{
		}
	}
}
namespace Cabin.Util
{
	[Token(Token = "0x200086D")]
	public class BindMainCameraToCanvas : MonoBehaviour
	{
		[Token(Token = "0x60032D1")]
		[Address(RVA = "0x133BA5C", Offset = "0x133BA5C", VA = "0x133BA5C")]
		private void Start()
		{
		}

		[Token(Token = "0x60032D2")]
		[Address(RVA = "0x133BB18", Offset = "0x133BB18", VA = "0x133BB18")]
		public BindMainCameraToCanvas()
		{
		}
	}
	[Token(Token = "0x200086E")]
	public static class CabinEditorPrefs
	{
		[Token(Token = "0x4002964")]
		private const string c_fpsPreferenceKey = "VrRigFPSEnabled";

		[Token(Token = "0x4002965")]
		private const string c_firstPersonMode = "Cabin/First Person Mode";

		[Token(Token = "0x4002966")]
		private const string c_riftQualityeKey = "EnableRiftQuality";

		[Token(Token = "0x4002967")]
		private const string c_RiftQualityMode = "Cabin/Enable Rift Quality";

		[Token(Token = "0x170008CD")]
		public static bool EnableFPSMode
		{
			[Token(Token = "0x60032D3")]
			[Address(RVA = "0x133BB20", Offset = "0x133BB20", VA = "0x133BB20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60032D4")]
			[Address(RVA = "0x133BB74", Offset = "0x133BB74", VA = "0x133BB74")]
			set
			{
			}
		}

		[Token(Token = "0x170008CE")]
		public static bool EnableRiftQuality
		{
			[Token(Token = "0x60032D5")]
			[Address(RVA = "0x133BBC0", Offset = "0x133BBC0", VA = "0x133BBC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60032D6")]
			[Address(RVA = "0x133BBC8", Offset = "0x133BBC8", VA = "0x133BBC8")]
			set
			{
			}
		}
	}
	[Token(Token = "0x200086F")]
	public class HelperStates
	{
		[Token(Token = "0x2000870")]
		public class state_WaitForCore : BaseStateAttachedLogic
		{
			[Token(Token = "0x60032D8")]
			[Address(RVA = "0x133BBD4", Offset = "0x133BBD4", VA = "0x133BBD4", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60032D9")]
			[Address(RVA = "0x133BCE4", Offset = "0x133BCE4", VA = "0x133BCE4", Slot = "12")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60032DA")]
			[Address(RVA = "0x133BDF4", Offset = "0x133BDF4", VA = "0x133BDF4")]
			private void OnCoreStarted()
			{
			}

			[Token(Token = "0x60032DB")]
			[Address(RVA = "0x133BE44", Offset = "0x133BE44", VA = "0x133BE44")]
			public state_WaitForCore()
			{
			}
		}

		[Token(Token = "0x2000871")]
		public class state_WaitForGameplay : BaseStateAttachedLogic
		{
			[Token(Token = "0x60032DC")]
			[Address(RVA = "0x133BE4C", Offset = "0x133BE4C", VA = "0x133BE4C", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60032DD")]
			[Address(RVA = "0x133BFAC", Offset = "0x133BFAC", VA = "0x133BFAC", Slot = "12")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60032DE")]
			[Address(RVA = "0x133C084", Offset = "0x133C084", VA = "0x133C084")]
			private void OnGameplayStarted()
			{
			}

			[Token(Token = "0x60032DF")]
			[Address(RVA = "0x133C0D4", Offset = "0x133C0D4", VA = "0x133C0D4")]
			public state_WaitForGameplay()
			{
			}
		}

		[Token(Token = "0x2000872")]
		public class state_DeadEnd : BaseStateAttachedLogic
		{
			[Token(Token = "0x60032E0")]
			[Address(RVA = "0x133C0DC", Offset = "0x133C0DC", VA = "0x133C0DC")]
			public state_DeadEnd()
			{
			}
		}

		[Token(Token = "0x2000873")]
		public class state_GameMode : BaseStateAttachedLogic
		{
			[Token(Token = "0x60032E1")]
			[Address(RVA = "0x133C0E4", Offset = "0x133C0E4", VA = "0x133C0E4", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60032E2")]
			[Address(RVA = "0x133C21C", Offset = "0x133C21C", VA = "0x133C21C")]
			public state_GameMode()
			{
			}
		}

		[Token(Token = "0x60032D7")]
		[Address(RVA = "0x133BBCC", Offset = "0x133BBCC", VA = "0x133BBCC")]
		public HelperStates()
		{
		}
	}
	[Token(Token = "0x2000874")]
	public class MaterialVariant : CachedMonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000875")]
		public class MaterialSet
		{
			[Token(Token = "0x400296A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material[] materials;

			[Token(Token = "0x60032E5")]
			[Address(RVA = "0x133C4F0", Offset = "0x133C4F0", VA = "0x133C4F0")]
			public MaterialSet()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000876")]
		public class MaterialVariantData
		{
			[Token(Token = "0x400296B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Renderer[] renderers;

			[Token(Token = "0x400296C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<MaterialSet> materialSets;

			[Token(Token = "0x60032E6")]
			[Address(RVA = "0x133C4F8", Offset = "0x133C4F8", VA = "0x133C4F8")]
			public MaterialVariantData()
			{
			}
		}

		[Token(Token = "0x4002968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_permutation;

		[Token(Token = "0x4002969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<MaterialVariantData> m_variantData;

		[Token(Token = "0x60032E3")]
		[Address(RVA = "0x133C224", Offset = "0x133C224", VA = "0x133C224")]
		private void Awake()
		{
		}

		[Token(Token = "0x60032E4")]
		[Address(RVA = "0x133C4E8", Offset = "0x133C4E8", VA = "0x133C4E8")]
		public MaterialVariant()
		{
		}
	}
}
namespace Cabin.UI
{
	[Token(Token = "0x2000877")]
	public class HSMDebugUI : MonoBehaviour
	{
		[Token(Token = "0x400296D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform _uiParent;

		[Token(Token = "0x400296E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StateMachineLoader _loader;

		[Token(Token = "0x400296F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _indent;

		[Token(Token = "0x4002970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HSMDebugData _debugData;

		[Token(Token = "0x170008CF")]
		private HSMDebugData hsmDebugData
		{
			[Token(Token = "0x60032E7")]
			[Address(RVA = "0x133C500", Offset = "0x133C500", VA = "0x133C500")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032E8")]
		[Address(RVA = "0x133C6C8", Offset = "0x133C6C8", VA = "0x133C6C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60032E9")]
		[Address(RVA = "0x133C734", Offset = "0x133C734", VA = "0x133C734")]
		private void Update()
		{
		}

		[Token(Token = "0x60032EA")]
		[Address(RVA = "0x133CAC4", Offset = "0x133CAC4", VA = "0x133CAC4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60032EB")]
		[Address(RVA = "0x133CC48", Offset = "0x133CC48", VA = "0x133CC48")]
		private void DrawHierarchy(HSMDebugData.HierarchyElement hierarchyElement, GUIStyle hsmLabel)
		{
		}

		[Token(Token = "0x60032EC")]
		[Address(RVA = "0x133CF24", Offset = "0x133CF24", VA = "0x133CF24")]
		public HSMDebugUI()
		{
		}
	}
	[Token(Token = "0x2000878")]
	public class HSMDebugData
	{
		[Token(Token = "0x2000879")]
		public class HierarchyElement
		{
			[Token(Token = "0x4002973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AppFlow.Core.State State;

			[Token(Token = "0x4002974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool Expanded;

			[Token(Token = "0x4002975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<HierarchyElement> Children;

			[Token(Token = "0x4002976")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject _stateElement;

			[Token(Token = "0x4002977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private GameObject _childElements;

			[Token(Token = "0x170008D2")]
			public bool visible
			{
				[Token(Token = "0x60032F2")]
				[Address(RVA = "0x133D4A0", Offset = "0x133D4A0", VA = "0x133D4A0")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60032F3")]
				[Address(RVA = "0x133C9F0", Offset = "0x133C9F0", VA = "0x133C9F0")]
				set
				{
				}
			}

			[Token(Token = "0x60032F4")]
			[Address(RVA = "0x133CF4C", Offset = "0x133CF4C", VA = "0x133CF4C")]
			public HierarchyElement(AppFlow.Core.State state, GameObject uiParent)
			{
			}
		}

		[Token(Token = "0x170008D0")]
		public AppFlow.Core.State StateRoot
		{
			[Token(Token = "0x60032ED")]
			[Address(RVA = "0x133CF2C", Offset = "0x133CF2C", VA = "0x133CF2C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60032EE")]
			[Address(RVA = "0x133CF34", Offset = "0x133CF34", VA = "0x133CF34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170008D1")]
		public HierarchyElement HierarchyRoot
		{
			[Token(Token = "0x60032EF")]
			[Address(RVA = "0x133CF3C", Offset = "0x133CF3C", VA = "0x133CF3C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60032F0")]
			[Address(RVA = "0x133CF44", Offset = "0x133CF44", VA = "0x133CF44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60032F1")]
		[Address(RVA = "0x133C628", Offset = "0x133C628", VA = "0x133C628")]
		public HSMDebugData(AppFlow.Core.State root, GameObject uiParent)
		{
		}
	}
}
namespace Cabin.UI.DebugUI
{
	[Token(Token = "0x200087A")]
	public class SelectServerClientMode : MonoBehaviourBaseStateAttachedLogic
	{
		[Token(Token = "0x60032F5")]
		[Address(RVA = "0x133D528", Offset = "0x133D528", VA = "0x133D528", Slot = "10")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x60032F6")]
		[Address(RVA = "0x133D5E4", Offset = "0x133D5E4", VA = "0x133D5E4")]
		public void SelectServer()
		{
		}

		[Token(Token = "0x60032F7")]
		[Address(RVA = "0x133D694", Offset = "0x133D694", VA = "0x133D694")]
		public void SelectClient()
		{
		}

		[Token(Token = "0x60032F8")]
		[Address(RVA = "0x133D740", Offset = "0x133D740", VA = "0x133D740")]
		public SelectServerClientMode()
		{
		}
	}
}
namespace Cabin.SaveGame
{
	[Token(Token = "0x200087B")]
	public abstract class CabinDataset : IDataset
	{
		[Serializable]
		[Token(Token = "0x200087C")]
		public class SerializableData
		{
			[Token(Token = "0x400297B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<DataPair> data;

			[Token(Token = "0x6003305")]
			[Address(RVA = "0x133D97C", Offset = "0x133D97C", VA = "0x133D97C")]
			public SerializableData(Dictionary<string, string> runtimeData)
			{
			}

			[Token(Token = "0x6003306")]
			[Address(RVA = "0x133DC40", Offset = "0x133DC40", VA = "0x133DC40")]
			public static string ToJson(Dictionary<string, string> runtimeData)
			{
				return null;
			}

			[Token(Token = "0x6003307")]
			[Address(RVA = "0x133DCA4", Offset = "0x133DCA4", VA = "0x133DCA4")]
			public static Dictionary<string, string> FromJson(string json)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x200087D")]
		public class EncryptedData
		{
			[Token(Token = "0x400297C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string data;

			[Token(Token = "0x400297D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string checksum;

			[Token(Token = "0x6003308")]
			[Address(RVA = "0x133DE84", Offset = "0x133DE84", VA = "0x133DE84")]
			private Dictionary<string, string> CreateRuntimeData()
			{
				return null;
			}

			[Token(Token = "0x6003309")]
			[Address(RVA = "0x133E390", Offset = "0x133E390", VA = "0x133E390")]
			private static EncryptedData Create(Dictionary<string, string> runtimeData)
			{
				return null;
			}

			[Token(Token = "0x600330A")]
			[Address(RVA = "0x133E58C", Offset = "0x133E58C", VA = "0x133E58C")]
			public static Dictionary<string, string> FromJson(string json)
			{
				return null;
			}

			[Token(Token = "0x600330B")]
			[Address(RVA = "0x133E6A4", Offset = "0x133E6A4", VA = "0x133E6A4")]
			public static string ToJson(Dictionary<string, string> data)
			{
				return null;
			}

			[Token(Token = "0x600330C")]
			[Address(RVA = "0x133E584", Offset = "0x133E584", VA = "0x133E584")]
			public EncryptedData()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200087E")]
		public class DataPair
		{
			[Token(Token = "0x400297E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string key;

			[Token(Token = "0x400297F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string value;

			[Token(Token = "0x600330D")]
			[Address(RVA = "0x133DC38", Offset = "0x133DC38", VA = "0x133DC38")]
			public DataPair()
			{
			}
		}

		[Token(Token = "0x4002978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool m_isDirty;

		[Token(Token = "0x4002979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected string m_name;

		[Token(Token = "0x400297A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, string> m_data;

		[Token(Token = "0x170008D3")]
		private bool PT.Optional.IDataset.IsDirty
		{
			[Token(Token = "0x60032F9")]
			[Address(RVA = "0x133D748", Offset = "0x133D748", VA = "0x133D748", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008D4")]
		public string Name
		{
			[Token(Token = "0x60032FA")]
			[Address(RVA = "0x133D750", Offset = "0x133D750", VA = "0x133D750", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60032FB")]
			[Address(RVA = "0x133D758", Offset = "0x133D758", VA = "0x133D758", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x170008D5")]
		protected string datasetKey
		{
			[Token(Token = "0x60032FC")]
			[Address(RVA = "0x133D760", Offset = "0x133D760", VA = "0x133D760")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60032FD")]
		[Address(RVA = "0x133D7AC", Offset = "0x133D7AC", VA = "0x133D7AC")]
		private void Put(string key, string value)
		{
		}

		[Token(Token = "0x60032FE")]
		[Address(RVA = "0x133D878", Offset = "0x133D878", VA = "0x133D878")]
		private string Get(string key, string defaultValue)
		{
			return null;
		}

		[Token(Token = "0x60032FF")]
		private void PT.Optional.IDataset.Put<T>(string key, T data)
		{
		}

		[Token(Token = "0x6003300")]
		private T PT.Optional.IDataset.Get<T>(string key)
		{
			return (T)null;
		}

		[Token(Token = "0x6003301")]
		public abstract void Load();

		[Token(Token = "0x6003302")]
		public abstract void Save();

		[Token(Token = "0x6003303")]
		public abstract void Delete();

		[Token(Token = "0x6003304")]
		[Address(RVA = "0x133D8F4", Offset = "0x133D8F4", VA = "0x133D8F4")]
		protected CabinDataset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200087F")]
	public class CabinLocalSaveDataset : CabinDataset
	{
		[Token(Token = "0x600330E")]
		[Address(RVA = "0x133E6B8", Offset = "0x133E6B8", VA = "0x133E6B8", Slot = "12")]
		public override void Load()
		{
		}

		[Token(Token = "0x600330F")]
		[Address(RVA = "0x133E724", Offset = "0x133E724", VA = "0x133E724", Slot = "13")]
		public override void Save()
		{
		}

		[Token(Token = "0x6003310")]
		[Address(RVA = "0x133E768", Offset = "0x133E768", VA = "0x133E768", Slot = "14")]
		public override void Delete()
		{
		}

		[Token(Token = "0x6003311")]
		[Address(RVA = "0x133E7D0", Offset = "0x133E7D0", VA = "0x133E7D0")]
		public CabinLocalSaveDataset()
		{
		}
	}
	[Token(Token = "0x2000880")]
	public class CabinLocalSaveSystem : ISaveSystem
	{
		[Token(Token = "0x6003312")]
		[Address(RVA = "0x133E7D4", Offset = "0x133E7D4", VA = "0x133E7D4", Slot = "4")]
		private IDataset PT.Optional.ISaveSystem.CreateDataset(string name)
		{
			return null;
		}

		[Token(Token = "0x6003313")]
		[Address(RVA = "0x133E840", Offset = "0x133E840", VA = "0x133E840")]
		public CabinLocalSaveSystem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000881")]
	public class CloudSaveDataset : CabinDataset
	{
		[Token(Token = "0x4002980")]
		private const string c_directory = "saves/";

		[Token(Token = "0x4002981")]
		private const string c_saveFileType = ".dat";

		[Token(Token = "0x6003314")]
		[Address(RVA = "0x133E848", Offset = "0x133E848", VA = "0x133E848")]
		private string GetLocalPath(bool includeFileName = true)
		{
			return null;
		}

		[Token(Token = "0x6003315")]
		[Address(RVA = "0x133E95C", Offset = "0x133E95C", VA = "0x133E95C", Slot = "12")]
		public override void Load()
		{
		}

		[Token(Token = "0x6003316")]
		[Address(RVA = "0x133EB78", Offset = "0x133EB78", VA = "0x133EB78", Slot = "13")]
		public override void Save()
		{
		}

		[Token(Token = "0x6003317")]
		[Address(RVA = "0x133EBAC", Offset = "0x133EBAC", VA = "0x133EBAC")]
		public void SaveToFile(string saveData, bool overrideFile = true)
		{
		}

		[Token(Token = "0x6003318")]
		[Address(RVA = "0x133EC20", Offset = "0x133EC20", VA = "0x133EC20", Slot = "14")]
		public override void Delete()
		{
		}

		[Token(Token = "0x6003319")]
		[Address(RVA = "0x133ECA0", Offset = "0x133ECA0", VA = "0x133ECA0")]
		public CloudSaveDataset()
		{
		}
	}
	[Token(Token = "0x2000882")]
	public class CloudSaveSystem : ISaveSystem
	{
		[Token(Token = "0x600331A")]
		[Address(RVA = "0x133ECA4", Offset = "0x133ECA4", VA = "0x133ECA4", Slot = "4")]
		private IDataset PT.Optional.ISaveSystem.CreateDataset(string name)
		{
			return null;
		}

		[Token(Token = "0x600331B")]
		[Address(RVA = "0x133ED10", Offset = "0x133ED10", VA = "0x133ED10")]
		public CloudSaveSystem()
		{
		}
	}
	[Token(Token = "0x2000883")]
	public static class DataProtection
	{
		[Token(Token = "0x4002982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string c_encode;

		[Token(Token = "0x4002983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string c_decode;

		[Token(Token = "0x4002984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string m_key2;

		[Token(Token = "0x600331C")]
		[Address(RVA = "0x133E45C", Offset = "0x133E45C", VA = "0x133E45C")]
		public static string Encrypt(string data)
		{
			return null;
		}

		[Token(Token = "0x600331D")]
		[Address(RVA = "0x133E268", Offset = "0x133E268", VA = "0x133E268")]
		public static string Decrypt(string data)
		{
			return null;
		}

		[Token(Token = "0x600331E")]
		[Address(RVA = "0x133ED18", Offset = "0x133ED18", VA = "0x133ED18")]
		private static string ChecksumKey()
		{
			return null;
		}

		[Token(Token = "0x600331F")]
		[Address(RVA = "0x133DF90", Offset = "0x133DF90", VA = "0x133DF90")]
		public static string Checksum(string data)
		{
			return null;
		}
	}
}
namespace Cabin.PlayerTrigger
{
	[Token(Token = "0x2000884")]
	public class TriggerEvent : CachedMonoBehaviour
	{
		[Token(Token = "0x4002985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("TriggerEvent")]
		[UnityEngine.Tooltip("Trigger it only the first time")]
		[SerializeField]
		private bool m_triggerOnce;

		[Token(Token = "0x4002986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool m_triggered;

		[Token(Token = "0x4002987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Parent of the trigger event")]
		[SerializeField]
		private GameObject m_parentTarget;

		[Token(Token = "0x4002988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameEvent m_gameEvent;

		[Token(Token = "0x4002989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[UnityEngine.Tooltip("Enable Look At target to trigger")]
		[Header("Look At")]
		private bool m_enableLookAt;

		[Token(Token = "0x400298A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Target to look at")]
		[SerializeField]
		private Transform m_targetToLookAt;

		[Token(Token = "0x400298B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Only finish once we've been looking at this for at least this many seconds - helps to differentiate between the player turning their head past this object and them actually focusing on it.")]
		[SerializeField]
		private float m_minimumLookTime;

		[Token(Token = "0x400298C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[UnityEngine.Tooltip("A value between 0 and 1 that describes how close to the centre of our view the object must be. 0 means it can be as far as our peripheral vision allows us to see, 1 means it must be dead centre. Helps to ensure the object actually has the player's attention (we can't check which way their eyes are pointing inside their headset though).")]
		private float m_focusRatio;

		[Token(Token = "0x400298D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[UnityEngine.Tooltip("Required maximum distance in metres. If the player's head is further away than this, we'll never count them as looking. Useful if you want them to approach first. Set to zero to disable.")]
		private float m_maximumDistance;

		[Token(Token = "0x400298E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_lookDuration;

		[Token(Token = "0x400298F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float m_lookTimer;

		[Token(Token = "0x4002990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Text")]
		[UnityEngine.Tooltip("Enable text print")]
		[SerializeField]
		private bool m_enableText;

		[Token(Token = "0x4002991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[UnityEngine.Tooltip("The instruction text to show")]
		private string m_instructionText;

		[Token(Token = "0x4002992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("The second line of text to show after a delay. You should leave this empty if you don't want to use it.")]
		[SerializeField]
		private string m_delayedSecondLineText;

		[Token(Token = "0x4002993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[UnityEngine.Tooltip("How long to wait before showing the second line of text, in seconds. Unused if no second line is given.")]
		private float m_delayedSecondLineWait;

		[Token(Token = "0x4002994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UnityEngine.Tooltip("Optional image")]
		public GameObject m_imageObject;

		[Token(Token = "0x4002995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UnityEngine.Tooltip("Optional parent transform, to place dialog in-world")]
		public GameObject m_parentTransform;

		[Token(Token = "0x170008D6")]
		public GameObject ParentTarget
		{
			[Token(Token = "0x6003321")]
			[Address(RVA = "0x133EF94", Offset = "0x133EF94", VA = "0x133EF94")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003322")]
		[Address(RVA = "0x133EF9C", Offset = "0x133EF9C", VA = "0x133EF9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003323")]
		[Address(RVA = "0x133F064", Offset = "0x133F064", VA = "0x133F064")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003324")]
		[Address(RVA = "0x133F460", Offset = "0x133F460", VA = "0x133F460")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6003325")]
		[Address(RVA = "0x133F31C", Offset = "0x133F31C", VA = "0x133F31C")]
		private void SendEventAndPrintText()
		{
		}

		[Token(Token = "0x6003326")]
		[Address(RVA = "0x133F204", Offset = "0x133F204", VA = "0x133F204")]
		private void Process()
		{
		}

		[Token(Token = "0x6003327")]
		[Address(RVA = "0x133F5EC", Offset = "0x133F5EC", VA = "0x133F5EC")]
		public void DisableTrigger()
		{
		}

		[Token(Token = "0x6003328")]
		[Address(RVA = "0x133F5F8", Offset = "0x133F5F8", VA = "0x133F5F8")]
		public TriggerEvent()
		{
		}
	}
}
namespace Cabin.PowerSystem
{
	[Token(Token = "0x2000885")]
	public class CircuitBreaker : PowerSystem
	{
		[Token(Token = "0x4002996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		protected PowerSystem[] _affectedParts;

		[Token(Token = "0x4002997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Repairer _repairer;

		[Token(Token = "0x4002998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ProfilerMarker s_profileMarker;

		[Token(Token = "0x6003329")]
		[Address(RVA = "0x133F61C", Offset = "0x133F61C", VA = "0x133F61C", Slot = "151")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600332A")]
		[Address(RVA = "0x133F70C", Offset = "0x133F70C", VA = "0x133F70C", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x600332B")]
		[Address(RVA = "0x134011C", Offset = "0x134011C", VA = "0x134011C", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x600332C")]
		[Address(RVA = "0x1340A2C", Offset = "0x1340A2C", VA = "0x1340A2C", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x600332D")]
		[Address(RVA = "0x13411A8", Offset = "0x13411A8", VA = "0x13411A8", Slot = "161")]
		public override void Reboot()
		{
		}

		[Token(Token = "0x600332E")]
		[Address(RVA = "0x1341374", Offset = "0x1341374", VA = "0x1341374", Slot = "162")]
		protected override void OnHealthStatusUpdated(HealthStatusInfo obj)
		{
		}

		[Token(Token = "0x600332F")]
		[Address(RVA = "0x1341714", Offset = "0x1341714", VA = "0x1341714")]
		public CircuitBreaker()
		{
		}
	}
	[Token(Token = "0x2000886")]
	public class BatteryLightSystem : PowerSystem, IPowerConsumer
	{
		[Serializable]
		[Token(Token = "0x2000887")]
		public class FlickerDefinition
		{
			[Token(Token = "0x40029A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private AnimationCurve m_flickerCurve;

			[Token(Token = "0x40029A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private float m_flickerDuration;

			[Token(Token = "0x40029A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private float m_flickerTimer;

			[Token(Token = "0x40029A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float m_flickerFrom;

			[Token(Token = "0x40029A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private float m_flickerTo;

			[Token(Token = "0x170008D8")]
			public bool isActive
			{
				[Token(Token = "0x600333C")]
				[Address(RVA = "0x1342528", Offset = "0x1342528", VA = "0x1342528")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600333D")]
			[Address(RVA = "0x1342ABC", Offset = "0x1342ABC", VA = "0x1342ABC")]
			public void Start(float from, float to)
			{
			}

			[Token(Token = "0x600333E")]
			[Address(RVA = "0x1342518", Offset = "0x1342518", VA = "0x1342518")]
			public void Start(float from)
			{
			}

			[Token(Token = "0x600333F")]
			[Address(RVA = "0x1342538", Offset = "0x1342538", VA = "0x1342538")]
			public float Evaluate(float flickerTo)
			{
				return default(float);
			}

			[Token(Token = "0x6003340")]
			[Address(RVA = "0x1342540", Offset = "0x1342540", VA = "0x1342540")]
			public float Evaluate()
			{
				return default(float);
			}

			[Token(Token = "0x6003341")]
			[Address(RVA = "0x1342B68", Offset = "0x1342B68", VA = "0x1342B68")]
			public FlickerDefinition()
			{
			}
		}

		[Token(Token = "0x4002999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<bool> OnRunningChanged;

		[Token(Token = "0x400299A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action OnDamageFlicker;

		[Token(Token = "0x400299B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[InterfaceObject(typeof(IPowerSource))]
		[SerializeField]
		private List<UnityEngine.Object> m_powerSources;

		[Token(Token = "0x400299C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Flicker")]
		[SerializeField]
		private FlickerDefinition m_mainFlicker;

		[Token(Token = "0x400299D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private FlickerDefinition m_damageFlicker;

		[Token(Token = "0x400299E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private float m_delayBetweenDamageFlickers;

		[Token(Token = "0x400299F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_damageFlickerStrength;

		[Token(Token = "0x40029A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int m_lastInterval;

		[Token(Token = "0x40029A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float m_damgeFlickerDelay;

		[Token(Token = "0x40029A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_lastIntensity;

		[Token(Token = "0x40029A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly ProfilerMarker s_profileMarker;

		[Token(Token = "0x170008D7")]
		private bool Cabin.PowerSystem.IPowerConsumer.IsConsumingPower
		{
			[Token(Token = "0x6003331")]
			[Address(RVA = "0x1341834", Offset = "0x1341834", VA = "0x1341834", Slot = "163")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003332")]
		[Address(RVA = "0x134183C", Offset = "0x134183C", VA = "0x134183C", Slot = "151")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003333")]
		[Address(RVA = "0x1341854", Offset = "0x1341854", VA = "0x1341854")]
		private void Start()
		{
		}

		[Token(Token = "0x6003334")]
		[Address(RVA = "0x1341ADC", Offset = "0x1341ADC", VA = "0x1341ADC", Slot = "152")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6003335")]
		[Address(RVA = "0x1341C58", Offset = "0x1341C58", VA = "0x1341C58", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x6003336")]
		[Address(RVA = "0x1342188", Offset = "0x1342188", VA = "0x1342188")]
		private void Update()
		{
		}

		[Token(Token = "0x6003337")]
		[Address(RVA = "0x13425DC", Offset = "0x13425DC", VA = "0x13425DC", Slot = "156")]
		protected override void OnIsRunningChanged()
		{
		}

		[Token(Token = "0x6003338")]
		[Address(RVA = "0x1342924", Offset = "0x1342924", VA = "0x1342924")]
		private void HandlePowerSystemDamaged(PowerSystem system)
		{
		}

		[Token(Token = "0x6003339")]
		[Address(RVA = "0x13429F8", Offset = "0x13429F8", VA = "0x13429F8")]
		public void DamageFlicker()
		{
		}

		[Token(Token = "0x600333A")]
		[Address(RVA = "0x1342ACC", Offset = "0x1342ACC", VA = "0x1342ACC")]
		public BatteryLightSystem()
		{
		}
	}
	[Token(Token = "0x2000888")]
	public enum GeneratorPartHealthState
	{
		[Token(Token = "0x40029AA")]
		Healthy,
		[Token(Token = "0x40029AB")]
		Broken,
		[Token(Token = "0x40029AC")]
		Inactive,
		[Token(Token = "0x40029AD")]
		UnderAttack
	}
	[Token(Token = "0x2000889")]
	public interface IPowerConsumer
	{
		[Token(Token = "0x170008D9")]
		bool IsConsumingPower
		{
			[Token(Token = "0x6003342")]
			get;
		}

		[Token(Token = "0x170008DA")]
		PowerSystemConnections connections
		{
			[Token(Token = "0x6003343")]
			get;
		}
	}
	[Token(Token = "0x200088A")]
	public interface IPowerSource
	{
		[Token(Token = "0x170008DB")]
		float normalizedPower
		{
			[Token(Token = "0x6003344")]
			get;
		}

		[Token(Token = "0x170008DC")]
		PowerSystemConnections connections
		{
			[Token(Token = "0x6003345")]
			get;
		}
	}
	[Token(Token = "0x200088B")]
	public static class IPowerSystemExtensionMethods
	{
		[Token(Token = "0x6003346")]
		[Address(RVA = "0x1342B78", Offset = "0x1342B78", VA = "0x1342B78")]
		public static bool IsPowerBeingConsumed(this IPowerSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6003347")]
		[Address(RVA = "0x1341FE4", Offset = "0x1341FE4", VA = "0x1341FE4")]
		public static bool IsPowerBeingProvided(this IPowerConsumer consumer)
		{
			return default(bool);
		}

		[Token(Token = "0x6003348")]
		[Address(RVA = "0x13422A8", Offset = "0x13422A8", VA = "0x13422A8")]
		public static float GetPowerBeingProvided(this IPowerConsumer consumer)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200088D")]
	public interface IRepairable
	{
		[Token(Token = "0x600334D")]
		bool AllowRepair(RepairSource repairSource);
	}
	[Token(Token = "0x200088E")]
	public class PowerCell : NetworkVrItem<IPowerSystem>, IPowerSource, INetworkMechanismKey, ICanHide
	{
		[Token(Token = "0x40029B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UnityEngine.Tooltip("Duration in seconds the power cell will provide power for when connected to a power consumer.")]
		public float powerDissipationTime;

		[Token(Token = "0x40029B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float m_timeSincelastChargeUpdate;

		[Token(Token = "0x40029B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private WorldInteraction m_worldInteraction;

		[Token(Token = "0x40029B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private List<MeshRenderer> m_disableAfterDeplete;

		[Token(Token = "0x40029B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[Header("Debug Visuals")]
		private Renderer m_debugChargeRenderer;

		[Token(Token = "0x40029B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Transform m_chargeTransform;

		[Token(Token = "0x40029B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Transform m_bodyTransform;

		[Token(Token = "0x40029B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material m_chargeMaterial;

		[Token(Token = "0x40029B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private MechanismKey m_key;

		[Token(Token = "0x40029BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private PowerSystemConnections m_connections;

		[Token(Token = "0x40029BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Rigidbody m_rigidBody;

		[Token(Token = "0x40029BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ProfilerMarker s_profileMarker;

		[Token(Token = "0x170008DD")]
		private float Cabin.PowerSystem.IPowerSource.normalizedPower
		{
			[Token(Token = "0x600334E")]
			[Address(RVA = "0x1342EE8", Offset = "0x1342EE8", VA = "0x1342EE8", Slot = "171")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008DE")]
		private IKeyState INetworkMechanismKey.state
		{
			[Token(Token = "0x600334F")]
			[Address(RVA = "0x1343020", Offset = "0x1343020", VA = "0x1343020", Slot = "177")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008DF")]
		private MechanismKey INetworkMechanismKey.Key
		{
			[Token(Token = "0x6003350")]
			[Address(RVA = "0x1343068", Offset = "0x1343068", VA = "0x1343068", Slot = "174")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008E0")]
		private PowerSystemConnections Cabin.PowerSystem.IPowerSource.connections
		{
			[Token(Token = "0x6003351")]
			[Address(RVA = "0x1343070", Offset = "0x1343070", VA = "0x1343070", Slot = "172")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008E1")]
		private bool ICanHide.canHide
		{
			[Token(Token = "0x6003352")]
			[Address(RVA = "0x1343078", Offset = "0x1343078", VA = "0x1343078", Slot = "178")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008E2")]
		public float ChargePower
		{
			[Token(Token = "0x6003353")]
			[Address(RVA = "0x1343110", Offset = "0x1343110", VA = "0x1343110")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6003354")]
		[Address(RVA = "0x13431D4", Offset = "0x13431D4", VA = "0x13431D4", Slot = "151")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003355")]
		[Address(RVA = "0x1343480", Offset = "0x1343480", VA = "0x1343480", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6003356")]
		[Address(RVA = "0x1343F58", Offset = "0x1343F58", VA = "0x1343F58", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x6003357")]
		[Address(RVA = "0x1344234", Offset = "0x1344234", VA = "0x1344234", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x6003358")]
		[Address(RVA = "0x13445C4", Offset = "0x13445C4", VA = "0x13445C4")]
		private bool UpdateCharge()
		{
			return default(bool);
		}

		[Token(Token = "0x6003359")]
		[Address(RVA = "0x1343AF8", Offset = "0x1343AF8", VA = "0x1343AF8")]
		protected void OnChargeChanged()
		{
		}

		[Token(Token = "0x600335A")]
		[Address(RVA = "0x1343A24", Offset = "0x1343A24", VA = "0x1343A24")]
		protected void OnIsRunningChanged()
		{
		}

		[Token(Token = "0x600335B")]
		[Address(RVA = "0x1344E04", Offset = "0x1344E04", VA = "0x1344E04")]
		private void DisablePickUp(bool pickUp)
		{
		}

		[Token(Token = "0x600335C")]
		[Address(RVA = "0x1344CD8", Offset = "0x1344CD8", VA = "0x1344CD8")]
		public void Eject()
		{
		}

		[Token(Token = "0x600335D")]
		[Address(RVA = "0x1344818", Offset = "0x1344818", VA = "0x1344818")]
		public void Eject(Vector3 direction)
		{
		}

		[Token(Token = "0x600335E")]
		[Address(RVA = "0x1344FA0", Offset = "0x1344FA0", VA = "0x1344FA0")]
		private void OnPowerCellEjected(MechanismKey.KeyEjectionContext? keyEjectionContext)
		{
		}

		[Token(Token = "0x600335F")]
		[Address(RVA = "0x13450CC", Offset = "0x13450CC", VA = "0x13450CC")]
		public PowerCell()
		{
		}

		[SpecialName]
		[Token(Token = "0x6003361")]
		[Address(RVA = "0x13451FC", Offset = "0x13451FC", VA = "0x13451FC", Slot = "173")]
		private string INetworkMechanismKey.get_name()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x6003362")]
		[Address(RVA = "0x1345204", Offset = "0x1345204", VA = "0x1345204", Slot = "175")]
		private GameObject INetworkMechanismKey.get_gameObject()
		{
			return null;
		}
	}
	[Token(Token = "0x200088F")]
	public class PowerCellReceptor : CachedMonoBehaviour, IPowerSource, IPowerConsumer
	{
		[Token(Token = "0x40029BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEvent m_powerCellInserted;

		[Token(Token = "0x40029BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEvent m_powerCellEjected;

		[Token(Token = "0x40029BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform m_ejectTransform;

		[Token(Token = "0x40029C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IPowerSource m_powerCell;

		[Token(Token = "0x40029C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MechanismKeyhole m_keyHole;

		[Token(Token = "0x40029C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BoltEntity m_entity;

		[Token(Token = "0x170008E3")]
		private float Cabin.PowerSystem.IPowerSource.normalizedPower
		{
			[Token(Token = "0x6003363")]
			[Address(RVA = "0x134520C", Offset = "0x134520C", VA = "0x134520C", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008E4")]
		private bool Cabin.PowerSystem.IPowerConsumer.IsConsumingPower
		{
			[Token(Token = "0x6003364")]
			[Address(RVA = "0x13452B8", Offset = "0x13452B8", VA = "0x13452B8", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008E5")]
		public PowerSystemConnections connections
		{
			[Token(Token = "0x6003365")]
			[Address(RVA = "0x13452BC", Offset = "0x13452BC", VA = "0x13452BC", Slot = "7")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003366")]
			[Address(RVA = "0x13452C4", Offset = "0x13452C4", VA = "0x13452C4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170008E6")]
		public Vector3 ejectDirection
		{
			[Token(Token = "0x6003367")]
			[Address(RVA = "0x13447FC", Offset = "0x13447FC", VA = "0x13447FC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6003368")]
		[Address(RVA = "0x13452CC", Offset = "0x13452CC", VA = "0x13452CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003369")]
		[Address(RVA = "0x13454FC", Offset = "0x13454FC", VA = "0x13454FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600336A")]
		[Address(RVA = "0x1345AA8", Offset = "0x1345AA8", VA = "0x1345AA8")]
		private void HandleKeyInserted(MechanismKey key)
		{
		}

		[Token(Token = "0x600336B")]
		[Address(RVA = "0x1345F1C", Offset = "0x1345F1C", VA = "0x1345F1C")]
		private void HandleKeyRemoved(MechanismKey key)
		{
		}

		[Token(Token = "0x600336C")]
		[Address(RVA = "0x1345E08", Offset = "0x1345E08", VA = "0x1345E08")]
		public void EjectPowerCell()
		{
		}

		[Token(Token = "0x600336D")]
		[Address(RVA = "0x1346140", Offset = "0x1346140", VA = "0x1346140")]
		public PowerCellReceptor()
		{
		}
	}
	[Token(Token = "0x2000890")]
	public class PowerGenerator : PowerSystem, IPowerSource, IPowerConsumer, IAttackStatus
	{
		[Token(Token = "0x40029C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[InterfaceObject(typeof(IPowerSource))]
		[SerializeField]
		[UnityEngine.Tooltip("Systems that provides power to this power consumer.")]
		private List<UnityEngine.Object> m_powerSources;

		[Token(Token = "0x40029C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float m_desiredAnimationSpeed;

		[Token(Token = "0x40029C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private UnityEngine.Animation m_animation;

		[Token(Token = "0x40029C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool m_attached;

		[Token(Token = "0x40029C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ProfilerMarker s_profileMarker;

		[Token(Token = "0x170008E7")]
		private bool Cabin.PowerSystem.IPowerConsumer.IsConsumingPower
		{
			[Token(Token = "0x600336E")]
			[Address(RVA = "0x13461DC", Offset = "0x13461DC", VA = "0x13461DC", Slot = "165")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008E8")]
		private float Cabin.PowerSystem.IPowerSource.normalizedPower
		{
			[Token(Token = "0x600336F")]
			[Address(RVA = "0x13462BC", Offset = "0x13462BC", VA = "0x13462BC", Slot = "163")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008E9")]
		private float normalizeHealth
		{
			[Token(Token = "0x6003370")]
			[Address(RVA = "0x1346400", Offset = "0x1346400", VA = "0x1346400")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008EA")]
		private bool IAttackStatus.shouldAttack
		{
			[Token(Token = "0x6003371")]
			[Address(RVA = "0x134641C", Offset = "0x134641C", VA = "0x134641C", Slot = "167")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003372")]
		[Address(RVA = "0x13464F8", Offset = "0x13464F8", VA = "0x13464F8", Slot = "151")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003373")]
		[Address(RVA = "0x1346558", Offset = "0x1346558", VA = "0x1346558")]
		private void Start()
		{
		}

		[Token(Token = "0x6003374")]
		[Address(RVA = "0x13465DC", Offset = "0x13465DC", VA = "0x13465DC", Slot = "152")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6003375")]
		[Address(RVA = "0x1346764", Offset = "0x1346764", VA = "0x1346764", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6003376")]
		[Address(RVA = "0x1346958", Offset = "0x1346958", VA = "0x1346958", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x6003377")]
		[Address(RVA = "0x1346960", Offset = "0x1346960", VA = "0x1346960", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x6003378")]
		[Address(RVA = "0x1346D60", Offset = "0x1346D60", VA = "0x1346D60")]
		private void Update()
		{
		}

		[Token(Token = "0x6003379")]
		[Address(RVA = "0x13470E8", Offset = "0x13470E8", VA = "0x13470E8", Slot = "156")]
		protected override void OnIsRunningChanged()
		{
		}

		[Token(Token = "0x600337A")]
		[Address(RVA = "0x134723C", Offset = "0x134723C", VA = "0x134723C")]
		public PowerGenerator()
		{
		}
	}
	[Token(Token = "0x2000891")]
	public class PowerStorage : PowerSystem, IPowerSource, IPowerConsumer
	{
		[Token(Token = "0x2000892")]
		[Flags]
		private enum RunningMode
		{
			[Token(Token = "0x40029D4")]
			Undefined = 0,
			[Token(Token = "0x40029D5")]
			HasCharge = 1,
			[Token(Token = "0x40029D6")]
			NotBroken = 2,
			[Token(Token = "0x40029D7")]
			IsOn = 4
		}

		[Token(Token = "0x40029C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[UnityEngine.Tooltip("Systems that provides power to this power consumer.")]
		[InterfaceObject(typeof(IPowerSource))]
		private List<UnityEngine.Object> m_powerSources;

		[Token(Token = "0x40029CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Storage Data")]
		[SerializeField]
		[UnityEngine.Tooltip("How long it takes in seconds for storage to lose full charge.")]
		private float m_loseFullChargeDuration;

		[Token(Token = "0x40029CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[UnityEngine.Tooltip("How long it takes in seconds for storage to gain full charge.")]
		[SerializeField]
		private float m_gainFullChargeDuration;

		[Token(Token = "0x40029CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UnityEngine.Tooltip("How much charge the storage starts with.")]
		[SerializeField]
		private float m_normalizedStartingCharge;

		[Token(Token = "0x40029CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[UnityEngine.Tooltip("Enable power depletion. Battery charge wont deplete when this is false, even if power is being consumed. The state of thes can be changed at runtime via EnableDepletion() and DisableDepletion() methods.")]
		[SerializeField]
		private bool m_enablePowerDepletion;

		[Token(Token = "0x40029CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[UnityEngine.Tooltip("Curve to remap normalized charge to actual normalized output power.")]
		private AnimationCurve m_chargePowerRemap;

		[Token(Token = "0x40029CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[FormerlySerializedAs("m_normalizedChargeRequiredForRunning")]
		[UnityEngine.Tooltip("The minimum charge the storage system must have in order to be running and power other systems.")]
		[SerializeField]
		private float m_normalizedPowerRequiredForRunning;

		[Token(Token = "0x40029D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[UnityEngine.Tooltip("What criteria have to be met for the battery to be in Running mode, i.e providing power. All conditions must be met.")]
		[SerializeField]
		private RunningMode m_runningWhen;

		[Token(Token = "0x40029D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_timeSincelastChargeUpdate;

		[Token(Token = "0x40029D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly ProfilerMarker s_profileMarker;

		[Token(Token = "0x170008EB")]
		private bool Cabin.PowerSystem.IPowerConsumer.IsConsumingPower
		{
			[Token(Token = "0x600337C")]
			[Address(RVA = "0x13472D4", Offset = "0x13472D4", VA = "0x13472D4", Slot = "165")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008EC")]
		private float availablePower
		{
			[Token(Token = "0x600337D")]
			[Address(RVA = "0x13473B4", Offset = "0x13473B4", VA = "0x13473B4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008ED")]
		private float Cabin.PowerSystem.IPowerSource.normalizedPower
		{
			[Token(Token = "0x600337E")]
			[Address(RVA = "0x13474AC", Offset = "0x13474AC", VA = "0x13474AC", Slot = "163")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600337F")]
		[Address(RVA = "0x13475F0", Offset = "0x13475F0", VA = "0x13475F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6003380")]
		[Address(RVA = "0x1347674", Offset = "0x1347674", VA = "0x1347674", Slot = "152")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6003381")]
		[Address(RVA = "0x134769C", Offset = "0x134769C", VA = "0x134769C", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6003382")]
		[Address(RVA = "0x13479A8", Offset = "0x13479A8", VA = "0x13479A8", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x6003383")]
		[Address(RVA = "0x1347830", Offset = "0x1347830", VA = "0x1347830")]
		private bool CalculateIfShouldBeRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x6003384")]
		[Address(RVA = "0x1347EF8", Offset = "0x1347EF8", VA = "0x1347EF8")]
		private void UpdateCharge(float delta, float deltaTime)
		{
		}

		[Token(Token = "0x6003385")]
		[Address(RVA = "0x1348158", Offset = "0x1348158", VA = "0x1348158")]
		public void EnableDepletion()
		{
		}

		[Token(Token = "0x6003386")]
		[Address(RVA = "0x1348164", Offset = "0x1348164", VA = "0x1348164")]
		public void DisableDepletion()
		{
		}

		[Token(Token = "0x6003387")]
		[Address(RVA = "0x134816C", Offset = "0x134816C", VA = "0x134816C")]
		public PowerStorage()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000893")]
	public class PowerSystemEvents
	{
		[Token(Token = "0x40029D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Fired when this part gets turned on.")]
		public UnityEvent OnStarted;

		[Token(Token = "0x40029D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Fired when this part gets turned off.")]
		public UnityEvent OnStopped;

		[Token(Token = "0x40029DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent OnBroken;

		[Token(Token = "0x40029DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent OnRepaired;

		[Token(Token = "0x6003389")]
		[Address(RVA = "0x1348220", Offset = "0x1348220", VA = "0x1348220")]
		public PowerSystemEvents()
		{
		}
	}
	[Token(Token = "0x2000894")]
	public abstract class PowerSystem : NetworkEntityBase<IPowerSystem>, IRepairable
	{
		[Token(Token = "0x40029DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<PowerSystem> OnDamaged;

		[Token(Token = "0x40029DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private PowerSystemEvents m_events;

		[Token(Token = "0x40029DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[Header("Config and Health")]
		protected HealthStatus m_rootHealthStatus;

		[Token(Token = "0x40029DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private float m_recentlyReceivedDamageThreshold;

		[Token(Token = "0x40029E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private bool m_aliveOnStart;

		[Token(Token = "0x40029E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		[SerializeField]
		private bool m_activeOnStart;

		[Token(Token = "0x40029E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private PowerSystemViewModel m_viewModel;

		[Token(Token = "0x40029E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Normalized health value at which system is deemed to be broken. Only relevant if there is a health status component.")]
		[SerializeField]
		protected float m_brokenNormalizedHealthThreshold;

		[Token(Token = "0x40029E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float m_timeSinceUpdate;

		[Token(Token = "0x40029E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float m_timePerUpdate;

		[Token(Token = "0x40029E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<PowerSystem, PowerSystemState> OnPowerSystemStateChanged;

		[Token(Token = "0x170008EE")]
		public bool recentDamage
		{
			[Token(Token = "0x600338A")]
			[Address(RVA = "0x134830C", Offset = "0x134830C", VA = "0x134830C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008EF")]
		public bool IsBroken
		{
			[Token(Token = "0x600338B")]
			[Address(RVA = "0x1348344", Offset = "0x1348344", VA = "0x1348344")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170008F0")]
		public PowerSystemViewModel viewModel
		{
			[Token(Token = "0x600338C")]
			[Address(RVA = "0x1348408", Offset = "0x1348408", VA = "0x1348408")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008F1")]
		public PowerSystemConnections connections
		{
			[Token(Token = "0x600338D")]
			[Address(RVA = "0x1348410", Offset = "0x1348410", VA = "0x1348410", Slot = "155")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600338E")]
			[Address(RVA = "0x1348418", Offset = "0x1348418", VA = "0x1348418")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600338F")]
		[Address(RVA = "0x133F67C", Offset = "0x133F67C", VA = "0x133F67C", Slot = "151")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003390")]
		[Address(RVA = "0x1341C00", Offset = "0x1341C00", VA = "0x1341C00", Slot = "152")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6003391")]
		[Address(RVA = "0x133F868", Offset = "0x133F868", VA = "0x133F868", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6003392")]
		[Address(RVA = "0x1340278", Offset = "0x1340278", VA = "0x1340278", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x6003393")]
		[Address(RVA = "0x1348420", Offset = "0x1348420", VA = "0x1348420")]
		private void OnHealthStatusReset()
		{
		}

		[Token(Token = "0x6003394")]
		[Address(RVA = "0x1342700", Offset = "0x1342700", VA = "0x1342700", Slot = "156")]
		protected virtual void OnIsRunningChanged()
		{
		}

		[Token(Token = "0x6003395")]
		[Address(RVA = "0x13486D4", Offset = "0x13486D4", VA = "0x13486D4", Slot = "157")]
		public virtual void OnIsActiveChanged()
		{
		}

		[Token(Token = "0x6003396")]
		[Address(RVA = "0x13488D4", Offset = "0x13488D4", VA = "0x13488D4", Slot = "158")]
		public virtual void OnIsBrokenChanged()
		{
		}

		[Token(Token = "0x6003397")]
		[Address(RVA = "0x1348BA4", Offset = "0x1348BA4", VA = "0x1348BA4", Slot = "159")]
		protected virtual void OnHealthStateChanged()
		{
		}

		[Token(Token = "0x6003398")]
		[Address(RVA = "0x1348CF4", Offset = "0x1348CF4", VA = "0x1348CF4", Slot = "160")]
		public virtual void OnChargeChanged()
		{
		}

		[Token(Token = "0x6003399")]
		[Address(RVA = "0x13410B8", Offset = "0x13410B8", VA = "0x13410B8")]
		public void Shutdown()
		{
		}

		[Token(Token = "0x600339A")]
		[Address(RVA = "0x1341284", Offset = "0x1341284", VA = "0x1341284", Slot = "161")]
		public virtual void Reboot()
		{
		}

		[Token(Token = "0x600339B")]
		[Address(RVA = "0x13414E4", Offset = "0x13414E4", VA = "0x13414E4", Slot = "162")]
		protected virtual void OnHealthStatusUpdated(HealthStatusInfo obj)
		{
		}

		[Token(Token = "0x600339C")]
		[Address(RVA = "0x1348F70", Offset = "0x1348F70", VA = "0x1348F70")]
		private void OnDeath(HealthStatusInfo obj)
		{
		}

		[Token(Token = "0x600339D")]
		[Address(RVA = "0x13490E0", Offset = "0x13490E0", VA = "0x13490E0", Slot = "154")]
		private bool Cabin.PowerSystem.IRepairable.AllowRepair(RepairSource repairSource)
		{
			return default(bool);
		}

		[Token(Token = "0x600339E")]
		[Address(RVA = "0x1349210", Offset = "0x1349210", VA = "0x1349210")]
		public void ForceInstantRepair()
		{
		}

		[Token(Token = "0x600339F")]
		[Address(RVA = "0x1349214", Offset = "0x1349214", VA = "0x1349214")]
		public bool InstantRepair()
		{
			return default(bool);
		}

		[Token(Token = "0x60033A0")]
		[Address(RVA = "0x1341718", Offset = "0x1341718", VA = "0x1341718")]
		protected PowerSystem()
		{
		}
	}
	[Token(Token = "0x2000895")]
	public enum PowerSystemState
	{
		[Token(Token = "0x40029E9")]
		NeedStarting,
		[Token(Token = "0x40029EA")]
		Started,
		[Token(Token = "0x40029EB")]
		Broken,
		[Token(Token = "0x40029EC")]
		Repaired,
		[Token(Token = "0x40029ED")]
		Running,
		[Token(Token = "0x40029EE")]
		FuelAdded,
		[Token(Token = "0x40029EF")]
		OutOfFuel,
		[Token(Token = "0x40029F0")]
		NotRunning
	}
	[Token(Token = "0x2000896")]
	public class PowerSystemConnections
	{
		[Token(Token = "0x40029F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<IPowerSource> m_sources;

		[Token(Token = "0x40029F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<IPowerConsumer> m_consumers;

		[Token(Token = "0x40029F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.Object m_owningSystem;

		[Token(Token = "0x170008F2")]
		public List<IPowerSource> sources
		{
			[Token(Token = "0x60033A1")]
			[Address(RVA = "0x1349454", Offset = "0x1349454", VA = "0x1349454")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008F3")]
		public List<IPowerConsumer> consumers
		{
			[Token(Token = "0x60033A2")]
			[Address(RVA = "0x134945C", Offset = "0x134945C", VA = "0x134945C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60033A3")]
		[Address(RVA = "0x134338C", Offset = "0x134338C", VA = "0x134338C")]
		public PowerSystemConnections(UnityEngine.Object owner)
		{
		}

		[Token(Token = "0x60033A4")]
		[Address(RVA = "0x1341980", Offset = "0x1341980", VA = "0x1341980")]
		public void AddPowerSources(List<UnityEngine.Object> sources)
		{
		}

		[Token(Token = "0x60033A5")]
		[Address(RVA = "0x1345C7C", Offset = "0x1345C7C", VA = "0x1345C7C")]
		public void AddPowerSource(IPowerSource source)
		{
		}

		[Token(Token = "0x60033A6")]
		[Address(RVA = "0x1346608", Offset = "0x1346608", VA = "0x1346608")]
		public void RemovePowerSources(List<UnityEngine.Object> sources)
		{
		}

		[Token(Token = "0x60033A7")]
		[Address(RVA = "0x1346008", Offset = "0x1346008", VA = "0x1346008")]
		public void RemovePowerSource(IPowerSource source)
		{
		}

		[Token(Token = "0x60033A8")]
		[Address(RVA = "0x1349464", Offset = "0x1349464", VA = "0x1349464")]
		private void AddConsumer(IPowerConsumer consumer)
		{
		}

		[Token(Token = "0x60033A9")]
		[Address(RVA = "0x134954C", Offset = "0x134954C", VA = "0x134954C")]
		private void RemoveConsumer(IPowerConsumer consumer)
		{
		}

		[Token(Token = "0x60033AA")]
		[Address(RVA = "0x1345690", Offset = "0x1345690", VA = "0x1345690")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000897")]
	public class Repairer : CachedMonoBehaviour, IBoltEntityComponent
	{
		[Token(Token = "0x40029F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Repair Config")]
		[SerializeField]
		protected HealthStatus m_rootHealthStatus;

		[Token(Token = "0x40029F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[UnityEngine.Tooltip("The VR interaction required to repair the generator")]
		protected AbstractTriggeredMechanism m_repairInteraction;

		[Token(Token = "0x40029F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[UnityEngine.Tooltip("If set to true, the repair will be applied gradually while moving the mechanism, e.g. when turning the wheel of a valve. Otherwise it will use high/low thresholds.")]
		private bool m_applyRepairWithMechanismMovement;

		[Token(Token = "0x40029F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[SerializeField]
		[UnityEngine.Tooltip("If set to true, the mechanism to repair this part will be useable even though the part is healthy")]
		private bool m_canRepairWhileHealthy;

		[Token(Token = "0x40029F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("How much health has to be restored before system is deemed repaired.")]
		[SerializeField]
		private float m_normalizedRepairThreshold;

		[Token(Token = "0x40029F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("How much angular movement is required for full health restoration.")]
		[SerializeField]
		private float angleRoatationForFullHealth;

		[Token(Token = "0x40029FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IRepairable _repairable;

		[Token(Token = "0x40029FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoltEntity m_entity;

		[Token(Token = "0x170008F4")]
		public AbstractTriggeredMechanism interaction
		{
			[Token(Token = "0x60033AB")]
			[Address(RVA = "0x13495DC", Offset = "0x13495DC", VA = "0x13495DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008F5")]
		public BoltEntity entity
		{
			[Token(Token = "0x60033AC")]
			[Address(RVA = "0x13495E4", Offset = "0x13495E4", VA = "0x13495E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60033AD")]
			[Address(RVA = "0x13495EC", Offset = "0x13495EC", VA = "0x13495EC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x60033AE")]
		[Address(RVA = "0x13495F4", Offset = "0x13495F4", VA = "0x13495F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60033AF")]
		[Address(RVA = "0x134964C", Offset = "0x134964C", VA = "0x134964C", Slot = "4")]
		private void IBoltEntityComponent.Attached(BoltEntity _entity)
		{
		}

		[Token(Token = "0x60033B0")]
		[Address(RVA = "0x1349894", Offset = "0x1349894", VA = "0x1349894", Slot = "5")]
		private void IBoltEntityComponent.Detached(BoltEntity entity)
		{
		}

		[Token(Token = "0x60033B1")]
		[Address(RVA = "0x1349AC8", Offset = "0x1349AC8", VA = "0x1349AC8", Slot = "6")]
		private void IBoltEntityComponent.SimulateOwner()
		{
		}

		[Token(Token = "0x60033B2")]
		[Address(RVA = "0x1349ACC", Offset = "0x1349ACC", VA = "0x1349ACC")]
		private void OnHingeAngleDeltaChanged(float angle)
		{
		}

		[Token(Token = "0x60033B3")]
		[Address(RVA = "0x1349AF0", Offset = "0x1349AF0", VA = "0x1349AF0", Slot = "8")]
		protected virtual void OnRepairTriggered()
		{
		}

		[Token(Token = "0x60033B4")]
		[Address(RVA = "0x1349AE8", Offset = "0x1349AE8", VA = "0x1349AE8")]
		private void Repair(float repairPercent)
		{
		}

		[Token(Token = "0x60033B5")]
		[Address(RVA = "0x1349B64", Offset = "0x1349B64", VA = "0x1349B64")]
		public void Repair(float repairPercent, RepairSource repairSource)
		{
		}

		[Token(Token = "0x60033B6")]
		[Address(RVA = "0x1349EFC", Offset = "0x1349EFC", VA = "0x1349EFC")]
		private void OnDeath(HealthStatusInfo info)
		{
		}

		[Token(Token = "0x60033B7")]
		[Address(RVA = "0x1349F7C", Offset = "0x1349F7C", VA = "0x1349F7C")]
		public Repairer()
		{
		}
	}
	[Token(Token = "0x2000898")]
	public enum RepairSource
	{
		[Token(Token = "0x40029FD")]
		PowerSource,
		[Token(Token = "0x40029FE")]
		PlayerInteraction
	}
	[Token(Token = "0x2000899")]
	public class BatteryDisplay : MonoBehaviour
	{
		[Token(Token = "0x40029FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform m_needleRoot;

		[Token(Token = "0x4002A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform m_rotationPoint;

		[Token(Token = "0x4002A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Needle travel distance in degrees.")]
		[SerializeField]
		private float m_needleRange;

		[Token(Token = "0x4002A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Gradient m_dialGlow;

		[Token(Token = "0x4002A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Material m_frontMaterial;

		[Token(Token = "0x4002A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("List of renderers we need to animate the material for.")]
		private Renderer[] m_renderers;

		[Token(Token = "0x4002A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_pulseSpeed;

		[Token(Token = "0x4002A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PowerStorage m_storage;

		[Token(Token = "0x4002A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Matrix4x4 m_needleLocalTransform;

		[Token(Token = "0x4002A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int m_emissive;

		[Token(Token = "0x4002A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material m_runtimeMaterial;

		[Token(Token = "0x60033B8")]
		[Address(RVA = "0x1349F90", Offset = "0x1349F90", VA = "0x1349F90")]
		private void Awake()
		{
		}

		[Token(Token = "0x60033B9")]
		[Address(RVA = "0x134A1B0", Offset = "0x134A1B0", VA = "0x134A1B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60033BA")]
		[Address(RVA = "0x134A42C", Offset = "0x134A42C", VA = "0x134A42C")]
		public BatteryDisplay()
		{
		}
	}
	[Token(Token = "0x200089A")]
	public class BatteryFlap : MonoBehaviour
	{
		[Token(Token = "0x200089B")]
		[CompilerGenerated]
		private sealed class <EnableSpringDelayed>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x4002A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BatteryFlap <>4__this;

			[Token(Token = "0x170008F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60033C6")]
				[Address(RVA = "0x134A9F4", Offset = "0x134A9F4", VA = "0x134A9F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170008F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60033C8")]
				[Address(RVA = "0x134AA3C", Offset = "0x134AA3C", VA = "0x134AA3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60033C3")]
			[Address(RVA = "0x134A8D4", Offset = "0x134A8D4", VA = "0x134A8D4")]
			[DebuggerHidden]
			public <EnableSpringDelayed>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60033C4")]
			[Address(RVA = "0x134A918", Offset = "0x134A918", VA = "0x134A918", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60033C5")]
			[Address(RVA = "0x134A91C", Offset = "0x134A91C", VA = "0x134A91C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60033C7")]
			[Address(RVA = "0x134A9FC", Offset = "0x134A9FC", VA = "0x134A9FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float m_brokenHingeAngle;

		[Token(Token = "0x4002A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_repairedHingeAngle;

		[Token(Token = "0x4002A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HingeJoint m_joint;

		[Token(Token = "0x4002A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_broken;

		[Token(Token = "0x4002A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine m_coroutine;

		[Token(Token = "0x4002A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PowerSystem m_battery;

		[Token(Token = "0x4002A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float m_lastHingeAngle;

		[Token(Token = "0x60033BB")]
		[Address(RVA = "0x134A444", Offset = "0x134A444", VA = "0x134A444")]
		private void Awake()
		{
		}

		[Token(Token = "0x60033BC")]
		[Address(RVA = "0x134A4E8", Offset = "0x134A4E8", VA = "0x134A4E8")]
		public void OnBatteryBroken()
		{
		}

		[Token(Token = "0x60033BD")]
		[Address(RVA = "0x134A51C", Offset = "0x134A51C", VA = "0x134A51C")]
		public void OnBatteryRepaired()
		{
		}

		[Token(Token = "0x60033BE")]
		[Address(RVA = "0x134A564", Offset = "0x134A564", VA = "0x134A564")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60033BF")]
		[Address(RVA = "0x134A6E8", Offset = "0x134A6E8", VA = "0x134A6E8")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x60033C0")]
		[Address(RVA = "0x134A81C", Offset = "0x134A81C", VA = "0x134A81C")]
		private void OnCollisionExit(Collision other)
		{
		}

		[Token(Token = "0x60033C1")]
		[Address(RVA = "0x134A850", Offset = "0x134A850", VA = "0x134A850")]
		[IteratorStateMachine(typeof(<EnableSpringDelayed>d__13))]
		private IEnumerator EnableSpringDelayed(float delay)
		{
			return null;
		}

		[Token(Token = "0x60033C2")]
		[Address(RVA = "0x134A8FC", Offset = "0x134A8FC", VA = "0x134A8FC")]
		public BatteryFlap()
		{
		}
	}
	[Token(Token = "0x200089C")]
	public class GeneratorPartDebugView : CachedMonoBehaviour
	{
		[Token(Token = "0x4002A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI m_generatorPartTitle;

		[Token(Token = "0x4002A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TextMeshProUGUI m_currentRelativeFuelLevelDebugText;

		[Token(Token = "0x4002A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextMeshProUGUI m_currentAbsoluteFuelLevelDebugText;

		[Token(Token = "0x4002A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TextMeshProUGUI m_maxAbsoluteFuelLevelDebugText;

		[Token(Token = "0x4002A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private TextMeshProUGUI m_currentDegradationSpeedDebugText;

		[Token(Token = "0x4002A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private TextMeshProUGUI m_currentGeneratorPartStateText;

		[Token(Token = "0x4002A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject m_debugViewParent;

		[Token(Token = "0x60033C9")]
		[Address(RVA = "0x134AA44", Offset = "0x134AA44", VA = "0x134AA44")]
		public GeneratorPartDebugView()
		{
		}
	}
	[Token(Token = "0x200089D")]
	public class GeneratorPartView : CachedMonoBehaviour
	{
		[Token(Token = "0x4002A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Image m_fuelLevelDisplayImage;

		[Token(Token = "0x4002A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Header("Color Setups")]
		private Color m_underAttackColor;

		[Token(Token = "0x4002A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Color m_brokenColor;

		[Token(Token = "0x4002A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Color m_inactiveColor;

		[Token(Token = "0x4002A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Color m_healthyColor;

		[Token(Token = "0x4002A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_isUnderAttack;

		[Token(Token = "0x60033CA")]
		[Address(RVA = "0x134AA4C", Offset = "0x134AA4C", VA = "0x134AA4C")]
		public void UpdateFuelDisplay(float normalizedValue)
		{
		}

		[Token(Token = "0x60033CB")]
		[Address(RVA = "0x134AA68", Offset = "0x134AA68", VA = "0x134AA68")]
		public void SetUnderAttack()
		{
		}

		[Token(Token = "0x60033CC")]
		[Address(RVA = "0x134AAA0", Offset = "0x134AAA0", VA = "0x134AAA0")]
		public void SetBroken()
		{
		}

		[Token(Token = "0x60033CD")]
		[Address(RVA = "0x134AAD0", Offset = "0x134AAD0", VA = "0x134AAD0")]
		public void SetHealthy()
		{
		}

		[Token(Token = "0x60033CE")]
		[Address(RVA = "0x134AB00", Offset = "0x134AB00", VA = "0x134AB00")]
		public void SetInactive()
		{
		}

		[Token(Token = "0x60033CF")]
		[Address(RVA = "0x134AB30", Offset = "0x134AB30", VA = "0x134AB30")]
		public GeneratorPartView()
		{
		}
	}
}
namespace Cabin.Movement
{
	[Token(Token = "0x200089E")]
	[CreateAssetMenu(menuName = "Cabin/AI/Melee Attack Data")]
	public class MeleeAttackData : ScriptableObject
	{
		[Token(Token = "0x4002A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeleeData _shortMelee;

		[Token(Token = "0x4002A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ActorAttackChanceProperties _attackChance;

		[Token(Token = "0x170008F8")]
		public MeleeData shortMelee
		{
			[Token(Token = "0x60033D0")]
			[Address(RVA = "0x134AB58", Offset = "0x134AB58", VA = "0x134AB58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170008F9")]
		public ActorAttackChanceProperties attackChance
		{
			[Token(Token = "0x60033D1")]
			[Address(RVA = "0x134AB60", Offset = "0x134AB60", VA = "0x134AB60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60033D2")]
		[Address(RVA = "0x134AB68", Offset = "0x134AB68", VA = "0x134AB68")]
		public MeleeAttackData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200089F")]
	public class MeleeData
	{
		[Token(Token = "0x4002A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Total distance from characters root position on frame 0 to weapon at point of melee impact in animation. TODO - this data should come from animation data because it will vary from anim to anim.")]
		public float strikeDistance;

		[Token(Token = "0x4002A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[UnityEngine.Tooltip("Amount +/- added to strike distance to define min and max possible strike distances.")]
		public float strikeDistanceVariance;

		[Token(Token = "0x4002A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Distance root of agent travels in animation from first frame to impact frame. TODO - data should come from animation.")]
		public float animTravelDistance;

		[Token(Token = "0x4002A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Maximum distance enemy agent is allowed to slide, or target match, in order to reach its melee target. This distance + meleeStrikeDistance in effect determines when an agent will start to perform a melee attack.")]
		public float maximumSlideDistance;

		[Token(Token = "0x170008FA")]
		public float maximumAllowableDistance
		{
			[Token(Token = "0x60033D3")]
			[Address(RVA = "0x134AB70", Offset = "0x134AB70", VA = "0x134AB70")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170008FB")]
		public float reachDistance
		{
			[Token(Token = "0x60033D4")]
			[Address(RVA = "0x134AB84", Offset = "0x134AB84", VA = "0x134AB84")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60033D5")]
		[Address(RVA = "0x134AB94", Offset = "0x134AB94", VA = "0x134AB94")]
		public bool WithinRangeSqr(float distanceSqr)
		{
			return default(bool);
		}

		[Token(Token = "0x60033D6")]
		[Address(RVA = "0x134ABCC", Offset = "0x134ABCC", VA = "0x134ABCC")]
		public Vector3 CalculateMeleeStartPosition(Transform transform, Vector3 target)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60033D7")]
		[Address(RVA = "0x134AE24", Offset = "0x134AE24", VA = "0x134AE24")]
		public MeleeData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008A0")]
	[CreateAssetMenu(menuName = "Cabin/AI/Actor Movement Noise")]
	public class MovementNoise : ScriptableObject
	{
		[Token(Token = "0x4002A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MovementNoise s_instance;

		[Token(Token = "0x4002A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Amplitude in degrees.")]
		[SerializeField]
		private float m_amplitudeBroadPhase;

		[Token(Token = "0x4002A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_frequencyBroadPhase;

		[Token(Token = "0x170008FC")]
		private static MovementNoise Instance
		{
			[Token(Token = "0x60033D8")]
			[Address(RVA = "0x134AE44", Offset = "0x134AE44", VA = "0x134AE44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60033D9")]
		[Address(RVA = "0x134AF0C", Offset = "0x134AF0C", VA = "0x134AF0C")]
		public static float GetOffset(float timeOffset, float frequencyMult, float amplitudeMult)
		{
			return default(float);
		}

		[Token(Token = "0x60033DA")]
		[Address(RVA = "0x134AFDC", Offset = "0x134AFDC", VA = "0x134AFDC")]
		private float GetOffsetInternal(float timeOffset, float frequencyMult, float amplitudeMult)
		{
			return default(float);
		}

		[Token(Token = "0x60033DB")]
		[Address(RVA = "0x134B040", Offset = "0x134B040", VA = "0x134B040")]
		public MovementNoise()
		{
		}
	}
	[Token(Token = "0x20008A1")]
	public enum MovementSpeed
	{
		[Token(Token = "0x4002A2C")]
		Auto,
		[Token(Token = "0x4002A2D")]
		Walk,
		[Token(Token = "0x4002A2E")]
		Run,
		[Token(Token = "0x4002A2F")]
		Charge,
		[Token(Token = "0x4002A30")]
		Armed
	}
	[Token(Token = "0x20008A2")]
	[AttributeUsage(AttributeTargets.Field)]
	public class NavMeshAreaMaskAttribute : PropertyAttribute
	{
		[Token(Token = "0x60033DC")]
		[Address(RVA = "0x134B054", Offset = "0x134B054", VA = "0x134B054")]
		public NavMeshAreaMaskAttribute()
		{
		}
	}
	[Token(Token = "0x20008A3")]
	[AttributeUsage(AttributeTargets.Field)]
	public class NavMeshAgentTypeAttribute : PropertyAttribute
	{
		[Token(Token = "0x60033DD")]
		[Address(RVA = "0x134B05C", Offset = "0x134B05C", VA = "0x134B05C")]
		public NavMeshAgentTypeAttribute()
		{
		}
	}
	[Token(Token = "0x20008A4")]
	public interface IMoveable
	{
		[Token(Token = "0x170008FD")]
		Vector3 moveTo
		{
			[Token(Token = "0x60033DE")]
			get;
			[Token(Token = "0x60033DF")]
			set;
		}

		[Token(Token = "0x170008FE")]
		Transform cachedTransform
		{
			[Token(Token = "0x60033E0")]
			get;
		}

		[Token(Token = "0x170008FF")]
		Vector3 desiredDirection
		{
			[Token(Token = "0x60033E1")]
			get;
		}

		[Token(Token = "0x17000900")]
		bool moveToReached
		{
			[Token(Token = "0x60033E2")]
			get;
		}

		[Token(Token = "0x17000901")]
		float targetDistance
		{
			[Token(Token = "0x60033E3")]
			get;
		}

		[Token(Token = "0x17000902")]
		float nextLinkDistance
		{
			[Token(Token = "0x60033E4")]
			get;
		}

		[Token(Token = "0x17000903")]
		float nextPathPointDistance
		{
			[Token(Token = "0x60033E5")]
			get;
		}

		[Token(Token = "0x17000904")]
		PathingData.PathingStatus pathStatus
		{
			[Token(Token = "0x60033E6")]
			get;
		}

		[Token(Token = "0x17000905")]
		bool calculatingPath
		{
			[Token(Token = "0x60033E7")]
			get;
		}

		[Token(Token = "0x60033E8")]
		Vector3 PredictPosition(float time);
	}
	[Token(Token = "0x20008A5")]
	public class LinkData : ITokenProvider, ITokenRequestSort
	{
		[Token(Token = "0x20008A6")]
		protected enum PointID
		{
			[Token(Token = "0x4002A44")]
			Near,
			[Token(Token = "0x4002A45")]
			Center,
			[Token(Token = "0x4002A46")]
			Far,
			[Token(Token = "0x4002A47")]
			Direction
		}

		[Token(Token = "0x4002A31")]
		private const float c_tolerance = 0.1f;

		[Token(Token = "0x4002A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NavMeshLink link;

		[Token(Token = "0x4002A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 _p0;

		[Token(Token = "0x4002A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 _p1;

		[Token(Token = "0x4002A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 _p0grounded;

		[Token(Token = "0x4002A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _p1grounded;

		[Token(Token = "0x4002A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 _center;

		[Token(Token = "0x4002A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 _forward;

		[Token(Token = "0x4002A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 _right;

		[Token(Token = "0x4002A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _halfWidth;

		[Token(Token = "0x4002A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _length;

		[Token(Token = "0x4002A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private NavMeshAreas _areas;

		[Token(Token = "0x4002A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private TokenManager.TokenKey m_tokenNavLink;

		[Token(Token = "0x4002A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private LinkAnimationOverride m_animationOverride;

		[Token(Token = "0x4002A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3[] m_pointsInOrder;

		[Token(Token = "0x17000906")]
		public int id
		{
			[Token(Token = "0x60033E9")]
			[Address(RVA = "0x134B064", Offset = "0x134B064", VA = "0x134B064")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60033EA")]
			[Address(RVA = "0x134B06C", Offset = "0x134B06C", VA = "0x134B06C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000907")]
		public bool InUse
		{
			[Token(Token = "0x60033EB")]
			[Address(RVA = "0x134B074", Offset = "0x134B074", VA = "0x134B074")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60033EC")]
			[Address(RVA = "0x134B07C", Offset = "0x134B07C", VA = "0x134B07C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000908")]
		public int areaType
		{
			[Token(Token = "0x60033ED")]
			[Address(RVA = "0x134B088", Offset = "0x134B088", VA = "0x134B088")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000909")]
		public NavMeshAreas areas
		{
			[Token(Token = "0x60033EE")]
			[Address(RVA = "0x134B0A4", Offset = "0x134B0A4", VA = "0x134B0A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700090A")]
		public string DisplayName
		{
			[Token(Token = "0x60033EF")]
			[Address(RVA = "0x134B0AC", Offset = "0x134B0AC", VA = "0x134B0AC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700090B")]
		public int defaultCost
		{
			[Token(Token = "0x60033F0")]
			[Address(RVA = "0x134B0C8", Offset = "0x134B0C8", VA = "0x134B0C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60033F1")]
			[Address(RVA = "0x134B0D0", Offset = "0x134B0D0", VA = "0x134B0D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700090C")]
		public Vector3 forward
		{
			[Token(Token = "0x60033F2")]
			[Address(RVA = "0x134B0D8", Offset = "0x134B0D8", VA = "0x134B0D8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700090D")]
		public Vector3 center
		{
			[Token(Token = "0x60033F3")]
			[Address(RVA = "0x134B0E4", Offset = "0x134B0E4", VA = "0x134B0E4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60033F4")]
		[Address(RVA = "0x134B0F0", Offset = "0x134B0F0", VA = "0x134B0F0", Slot = "6")]
		private void ITokenProvider.TokenTaken(IToken token)
		{
		}

		[Token(Token = "0x60033F5")]
		[Address(RVA = "0x134B0F4", Offset = "0x134B0F4", VA = "0x134B0F4", Slot = "7")]
		private void ITokenProvider.TokenReturned(IToken token)
		{
		}

		[Token(Token = "0x60033F6")]
		[Address(RVA = "0x134B0F8", Offset = "0x134B0F8", VA = "0x134B0F8", Slot = "8")]
		private int ITokenRequestSort.SortMethod(TokenManager.Request a, TokenManager.Request b)
		{
			return default(int);
		}

		[Token(Token = "0x60033F7")]
		[Address(RVA = "0x134B290", Offset = "0x134B290", VA = "0x134B290")]
		public LinkData(NavMeshLink link, NavMeshAreas areas, int _id)
		{
		}

		[Token(Token = "0x60033F8")]
		[Address(RVA = "0x134B9C8", Offset = "0x134B9C8", VA = "0x134B9C8", Slot = "1")]
		~LinkData()
		{
		}

		[Token(Token = "0x60033F9")]
		[Address(RVA = "0x134BB30", Offset = "0x134BB30", VA = "0x134BB30")]
		public bool IsPointOnStartEdge(Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x60033FA")]
		[Address(RVA = "0x134BBC0", Offset = "0x134BBC0", VA = "0x134BBC0")]
		public bool IsPointOnEndEdge(Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x60033FB")]
		[Address(RVA = "0x134BB3C", Offset = "0x134BB3C", VA = "0x134BB3C")]
		private bool IsPointOnEdge(Vector3 pos, Vector3 linkPos)
		{
			return default(bool);
		}

		[Token(Token = "0x60033FC")]
		[Address(RVA = "0x134BBCC", Offset = "0x134BBCC", VA = "0x134BBCC")]
		public bool IsOnLink(Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x60033FD")]
		[Address(RVA = "0x134BC78", Offset = "0x134BC78", VA = "0x134BC78")]
		public Vector3[] GetLinkPointsInOrder(IAgent agent)
		{
			return null;
		}

		[Token(Token = "0x60033FE")]
		[Address(RVA = "0x134BE60", Offset = "0x134BE60", VA = "0x134BE60")]
		public Vector3[] GetMatchingPositions(IAgent agent)
		{
			return null;
		}

		[Token(Token = "0x60033FF")]
		[Address(RVA = "0x134BF48", Offset = "0x134BF48", VA = "0x134BF48")]
		public Vector3[] GetMatchingPositions(IAgent agent, AnimationClipData clipData)
		{
			return null;
		}

		[Token(Token = "0x6003400")]
		[Address(RVA = "0x134C0B0", Offset = "0x134C0B0", VA = "0x134C0B0")]
		public bool BelongToGroup(string group)
		{
			return default(bool);
		}

		[Token(Token = "0x6003401")]
		[Address(RVA = "0x134C0DC", Offset = "0x134C0DC", VA = "0x134C0DC", Slot = "5")]
		public ITokenKey GetTokenKey(TokenManager.TokenType tokenType)
		{
			return null;
		}

		[Token(Token = "0x6003402")]
		[Address(RVA = "0x134C0F4", Offset = "0x134C0F4", VA = "0x134C0F4")]
		public bool GetAnimatorState(Animator animator, out int stateHash)
		{
			return default(bool);
		}

		[Token(Token = "0x6003403")]
		[Address(RVA = "0x134C20C", Offset = "0x134C20C", VA = "0x134C20C")]
		private bool SelectAnimState(Animator animator, List<string> states, out int stateHash)
		{
			return default(bool);
		}

		[Token(Token = "0x6003404")]
		[Address(RVA = "0x134C2D0", Offset = "0x134C2D0", VA = "0x134C2D0")]
		public Vector3 GetForwardOffset(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003405")]
		[Address(RVA = "0x134C310", Offset = "0x134C310", VA = "0x134C310")]
		public Vector3 GetRightOffset(Vector3 pos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003406")]
		[Address(RVA = "0x134C350", Offset = "0x134C350", VA = "0x134C350")]
		public Vector3 GetStartPos()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20008A7")]
	public class MovementProperties
	{
		[Token(Token = "0x4002A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float standingTurnSpeed;

		[Token(Token = "0x4002A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float stopThreshold;

		[Token(Token = "0x4002A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float startThreshold;

		[Token(Token = "0x4002A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float acceleration;

		[Token(Token = "0x4002A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float deceleration;

		[Token(Token = "0x1700090E")]
		public float startThresholdSqr
		{
			[Token(Token = "0x6003407")]
			[Address(RVA = "0x134C35C", Offset = "0x134C35C", VA = "0x134C35C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700090F")]
		public float stopThresholdSqr
		{
			[Token(Token = "0x6003408")]
			[Address(RVA = "0x134C368", Offset = "0x134C368", VA = "0x134C368")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6003409")]
		[Address(RVA = "0x134C374", Offset = "0x134C374", VA = "0x134C374")]
		public MovementProperties()
		{
		}
	}
	[Token(Token = "0x20008A8")]
	public class PathingData
	{
		[Token(Token = "0x20008A9")]
		public enum PathingStatus
		{
			[Token(Token = "0x4002A6D")]
			Unknown,
			[Token(Token = "0x4002A6E")]
			Building,
			[Token(Token = "0x4002A6F")]
			Valid,
			[Token(Token = "0x4002A70")]
			ValidAdjusted,
			[Token(Token = "0x4002A71")]
			Invalid
		}

		[Token(Token = "0x20008AA")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass112_0
		{
			[Token(Token = "0x4002A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float distance;

			[Token(Token = "0x4002A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool success;

			[Token(Token = "0x4002A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PathingData <>4__this;

			[Token(Token = "0x6003446")]
			[Address(RVA = "0x134EDF0", Offset = "0x134EDF0", VA = "0x134EDF0")]
			public <>c__DisplayClass112_0()
			{
			}

			[Token(Token = "0x6003447")]
			[Address(RVA = "0x134EDF8", Offset = "0x134EDF8", VA = "0x134EDF8")]
			internal void <CheckPathAsync>b__0(PathManager.PathRequestData requestData)
			{
			}
		}

		[Token(Token = "0x20008AB")]
		[CompilerGenerated]
		private sealed class <CheckPathAsync>d__112 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PathingData <>4__this;

			[Token(Token = "0x4002A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass112_0 <>8__1;

			[Token(Token = "0x4002A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 destination;

			[Token(Token = "0x4002A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Action<bool, float> callback;

			[Token(Token = "0x4002A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <startTime>5__2;

			[Token(Token = "0x1700092A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600344B")]
				[Address(RVA = "0x134F0E4", Offset = "0x134F0E4", VA = "0x134F0E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700092B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600344D")]
				[Address(RVA = "0x134F12C", Offset = "0x134F12C", VA = "0x134F12C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003448")]
			[Address(RVA = "0x134E64C", Offset = "0x134E64C", VA = "0x134E64C")]
			[DebuggerHidden]
			public <CheckPathAsync>d__112(int <>1__state)
			{
			}

			[Token(Token = "0x6003449")]
			[Address(RVA = "0x134EE44", Offset = "0x134EE44", VA = "0x134EE44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600344A")]
			[Address(RVA = "0x134EE48", Offset = "0x134EE48", VA = "0x134EE48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600344C")]
			[Address(RVA = "0x134F0EC", Offset = "0x134F0EC", VA = "0x134F0EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int m_uniqueId;

		[Token(Token = "0x4002A4E")]
		public const float c_moveToReachedThreshold = 0.3f;

		[Token(Token = "0x4002A4F")]
		public const float c_moveToReachedThresholdSqr = 0.09f;

		[Token(Token = "0x4002A50")]
		private const float c_validCheckPathDistSqr = 4f;

		[Token(Token = "0x4002A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<int> OnPointReached;

		[Token(Token = "0x4002A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NativeArray<PathPoint> m_path;

		[Token(Token = "0x4002A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_moveTo;

		[Token(Token = "0x4002A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool _moveToDirty;

		[Token(Token = "0x4002A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool _calculatingPath;

		[Token(Token = "0x4002A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform m_owner;

		[Token(Token = "0x4002A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private NavMeshQueryFilter m_filter;

		[Token(Token = "0x4002A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_pathIndex;

		[Token(Token = "0x4002A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_numPathPoints;

		[Token(Token = "0x4002A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private LinkData _currentNavLinkData;

		[Token(Token = "0x4002A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _calculatingCheckPath;

		[Token(Token = "0x4002A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Action<bool, float, object> m_callback;

		[Token(Token = "0x4002A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _numNavLinkPoints;

		[Token(Token = "0x4002A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int[] _navLinkPointIndices;

		[Token(Token = "0x4002A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _nextNavLinkPoint;

		[Token(Token = "0x4002A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<LinkData> _linkDataBuffer;

		[Token(Token = "0x4002A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float _remainingDistance;

		[Token(Token = "0x4002A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private bool m_moveToHasBeenReached;

		[Token(Token = "0x4002A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly ProfilerMarker s_marker;

		[Token(Token = "0x17000910")]
		public int id
		{
			[Token(Token = "0x600340C")]
			[Address(RVA = "0x134C488", Offset = "0x134C488", VA = "0x134C488")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600340D")]
			[Address(RVA = "0x134C490", Offset = "0x134C490", VA = "0x134C490")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000911")]
		public NativeArray<PathPoint> Path
		{
			[Token(Token = "0x600340E")]
			[Address(RVA = "0x134C498", Offset = "0x134C498", VA = "0x134C498")]
			get
			{
				return default(NativeArray<PathPoint>);
			}
		}

		[Token(Token = "0x17000912")]
		public int PathIndex
		{
			[Token(Token = "0x600340F")]
			[Address(RVA = "0x134C4A4", Offset = "0x134C4A4", VA = "0x134C4A4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000913")]
		public PathingStatus pathingStatus
		{
			[Token(Token = "0x6003410")]
			[Address(RVA = "0x134C4AC", Offset = "0x134C4AC", VA = "0x134C4AC")]
			[CompilerGenerated]
			get
			{
				return default(PathingStatus);
			}
			[Token(Token = "0x6003411")]
			[Address(RVA = "0x134C4B4", Offset = "0x134C4B4", VA = "0x134C4B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000914")]
		public bool CalculatingPath
		{
			[Token(Token = "0x6003412")]
			[Address(RVA = "0x134C4BC", Offset = "0x134C4BC", VA = "0x134C4BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000915")]
		public int numPathPoints
		{
			[Token(Token = "0x6003413")]
			[Address(RVA = "0x134C4C4", Offset = "0x134C4C4", VA = "0x134C4C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000916")]
		public LinkData prevPointLinkData
		{
			[Token(Token = "0x6003414")]
			[Address(RVA = "0x134C4CC", Offset = "0x134C4CC", VA = "0x134C4CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003415")]
			[Address(RVA = "0x134C4D4", Offset = "0x134C4D4", VA = "0x134C4D4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000917")]
		public LinkData nextPointLinkData
		{
			[Token(Token = "0x6003416")]
			[Address(RVA = "0x134C4DC", Offset = "0x134C4DC", VA = "0x134C4DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003417")]
			[Address(RVA = "0x134C4E4", Offset = "0x134C4E4", VA = "0x134C4E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000918")]
		public LinkData traversingLinkData
		{
			[Token(Token = "0x6003418")]
			[Address(RVA = "0x134C4EC", Offset = "0x134C4EC", VA = "0x134C4EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003419")]
			[Address(RVA = "0x134C4F4", Offset = "0x134C4F4", VA = "0x134C4F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000919")]
		public bool traversingLinkForwards
		{
			[Token(Token = "0x600341A")]
			[Address(RVA = "0x134C4FC", Offset = "0x134C4FC", VA = "0x134C4FC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600341B")]
			[Address(RVA = "0x134C504", Offset = "0x134C504", VA = "0x134C504")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700091A")]
		public Transform owner
		{
			[Token(Token = "0x600341C")]
			[Address(RVA = "0x134C510", Offset = "0x134C510", VA = "0x134C510")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700091B")]
		public PathResult result
		{
			[Token(Token = "0x600341D")]
			[Address(RVA = "0x134C518", Offset = "0x134C518", VA = "0x134C518")]
			[CompilerGenerated]
			get
			{
				return default(PathResult);
			}
			[Token(Token = "0x600341E")]
			[Address(RVA = "0x134C528", Offset = "0x134C528", VA = "0x134C528")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700091C")]
		public bool remainingPathHasNavLinks
		{
			[Token(Token = "0x600341F")]
			[Address(RVA = "0x134C540", Offset = "0x134C540", VA = "0x134C540")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700091D")]
		public Vector3 moveTo
		{
			[Token(Token = "0x6003425")]
			[Address(RVA = "0x134C898", Offset = "0x134C898", VA = "0x134C898")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6003426")]
			[Address(RVA = "0x134C8A4", Offset = "0x134C8A4", VA = "0x134C8A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700091E")]
		public Vector3 desiredDirection
		{
			[Token(Token = "0x6003427")]
			[Address(RVA = "0x134CD58", Offset = "0x134CD58", VA = "0x134CD58")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700091F")]
		public Vector3 pathEnd
		{
			[Token(Token = "0x6003428")]
			[Address(RVA = "0x134D07C", Offset = "0x134D07C", VA = "0x134D07C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000920")]
		public Vector3 nextPathPoint
		{
			[Token(Token = "0x6003429")]
			[Address(RVA = "0x134D0C0", Offset = "0x134D0C0", VA = "0x134D0C0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000921")]
		public PathPoint nextPathPointData
		{
			[Token(Token = "0x600342A")]
			[Address(RVA = "0x134D0DC", Offset = "0x134D0DC", VA = "0x134D0DC")]
			get
			{
				return default(PathPoint);
			}
		}

		[Token(Token = "0x17000922")]
		private int finalPathIndex
		{
			[Token(Token = "0x600342B")]
			[Address(RVA = "0x134CF3C", Offset = "0x134CF3C", VA = "0x134CF3C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000923")]
		public float remainingDistance
		{
			[Token(Token = "0x600342C")]
			[Address(RVA = "0x134D100", Offset = "0x134D100", VA = "0x134D100")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600342D")]
			[Address(RVA = "0x134D194", Offset = "0x134D194", VA = "0x134D194")]
			private set
			{
			}
		}

		[Token(Token = "0x17000924")]
		private int nextLinkPathIndex
		{
			[Token(Token = "0x600342E")]
			[Address(RVA = "0x134D19C", Offset = "0x134D19C", VA = "0x134D19C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000925")]
		public float remainingDistanceToNextLink
		{
			[Token(Token = "0x600342F")]
			[Address(RVA = "0x134D1E8", Offset = "0x134D1E8", VA = "0x134D1E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000926")]
		public float remainingDistanceToNextPoint
		{
			[Token(Token = "0x6003430")]
			[Address(RVA = "0x134D2A4", Offset = "0x134D2A4", VA = "0x134D2A4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000927")]
		public bool moveToReached
		{
			[Token(Token = "0x6003431")]
			[Address(RVA = "0x134D348", Offset = "0x134D348", VA = "0x134D348")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000928")]
		public bool moveToHasBeenReached
		{
			[Token(Token = "0x6003432")]
			[Address(RVA = "0x134D448", Offset = "0x134D448", VA = "0x134D448")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000929")]
		public PathRequest request
		{
			[Token(Token = "0x6003439")]
			[Address(RVA = "0x134E078", Offset = "0x134E078", VA = "0x134E078")]
			[CompilerGenerated]
			get
			{
				return default(PathRequest);
			}
			[Token(Token = "0x600343A")]
			[Address(RVA = "0x134E098", Offset = "0x134E098", VA = "0x134E098")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600340A")]
		[Address(RVA = "0x134C390", Offset = "0x134C390", VA = "0x134C390")]
		static PathingData()
		{
		}

		[Token(Token = "0x600340B")]
		[Address(RVA = "0x134C42C", Offset = "0x134C42C", VA = "0x134C42C")]
		[AutoInitializeStatics]
		private static void ResetStatics()
		{
		}

		[Token(Token = "0x6003420")]
		[Address(RVA = "0x134C554", Offset = "0x134C554", VA = "0x134C554")]
		public PathingData()
		{
		}

		[Token(Token = "0x6003421")]
		[Address(RVA = "0x134C794", Offset = "0x134C794", VA = "0x134C794")]
		public PathingData(Transform owner, NavMeshQueryFilter filter)
		{
		}

		[Token(Token = "0x6003422")]
		[Address(RVA = "0x134C7E4", Offset = "0x134C7E4", VA = "0x134C7E4")]
		public void SetOwner(Transform owner, NavMeshQueryFilter filter)
		{
		}

		[Token(Token = "0x6003423")]
		[Address(RVA = "0x134C81C", Offset = "0x134C81C", VA = "0x134C81C")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6003424")]
		[Address(RVA = "0x134C670", Offset = "0x134C670", VA = "0x134C670")]
		public void Reset()
		{
		}

		[Token(Token = "0x6003433")]
		[Address(RVA = "0x134D48C", Offset = "0x134D48C", VA = "0x134D48C")]
		public void ForceRepath()
		{
		}

		[Token(Token = "0x6003434")]
		[Address(RVA = "0x134D498", Offset = "0x134D498", VA = "0x134D498")]
		public void RequestPath(Vector3 from, Vector3 dest, PathRequestFlags flags)
		{
		}

		[Token(Token = "0x6003435")]
		[Address(RVA = "0x134D4A0", Offset = "0x134D4A0", VA = "0x134D4A0")]
		public void RequestPath(Vector3 from, Vector3 dest, PathRequestFlags flags, int iterationsPerFrame)
		{
		}

		[Token(Token = "0x6003436")]
		[Address(RVA = "0x134D5EC", Offset = "0x134D5EC", VA = "0x134D5EC")]
		public Vector3 GetPointAfter(Vector3 referencePos)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003437")]
		[Address(RVA = "0x134D5F0", Offset = "0x134D5F0", VA = "0x134D5F0")]
		public bool CheckNavMeshPosition(Vector3 position, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x6003438")]
		[Address(RVA = "0x134D624", Offset = "0x134D624", VA = "0x134D624")]
		private void OnPathCalculated(PathManager.PathRequestData requestData)
		{
		}

		[Token(Token = "0x600343B")]
		[Address(RVA = "0x134D658", Offset = "0x134D658", VA = "0x134D658")]
		private void ProcessJobPath(PathManager.PathRequestData requestData)
		{
		}

		[Token(Token = "0x600343C")]
		[Address(RVA = "0x134D7CC", Offset = "0x134D7CC", VA = "0x134D7CC")]
		private void ProcessNonJobPath(PathManager.PathRequestData requestData)
		{
		}

		[Token(Token = "0x600343D")]
		[Address(RVA = "0x134E0B0", Offset = "0x134E0B0", VA = "0x134E0B0")]
		private void PreparePath()
		{
		}

		[Token(Token = "0x600343E")]
		[Address(RVA = "0x134E1E0", Offset = "0x134E1E0", VA = "0x134E1E0")]
		private LinkData GetNavMeshLinkData(Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x600343F")]
		[Address(RVA = "0x134E420", Offset = "0x134E420", VA = "0x134E420")]
		public bool CheckPath(Vector3 destination, object userData, Action<bool, float, object> callback)
		{
			return default(bool);
		}

		[Token(Token = "0x6003440")]
		[Address(RVA = "0x134E598", Offset = "0x134E598", VA = "0x134E598")]
		[IteratorStateMachine(typeof(<CheckPathAsync>d__112))]
		public IEnumerator CheckPathAsync(Vector3 destination, Action<bool, float> callback)
		{
			return null;
		}

		[Token(Token = "0x6003441")]
		[Address(RVA = "0x134E674", Offset = "0x134E674", VA = "0x134E674")]
		private void OnCheckPathCalculated(PathManager.PathRequestData requestData)
		{
		}

		[Token(Token = "0x6003442")]
		[Address(RVA = "0x134E898", Offset = "0x134E898", VA = "0x134E898")]
		public void SkipPoint()
		{
		}

		[Token(Token = "0x6003443")]
		[Address(RVA = "0x134CF48", Offset = "0x134CF48", VA = "0x134CF48")]
		private void PointReached()
		{
		}

		[Token(Token = "0x6003444")]
		[Address(RVA = "0x134E89C", Offset = "0x134E89C", VA = "0x134E89C")]
		public bool CanTraversLink(LinkData linkData)
		{
			return default(bool);
		}

		[Token(Token = "0x6003445")]
		[Address(RVA = "0x134E9B8", Offset = "0x134E9B8", VA = "0x134E9B8")]
		public void DrawGizmos(IMoveable moveable)
		{
		}
	}
	[Token(Token = "0x20008AC")]
	public class PathManager : SceneSingleton<PathManager>
	{
		[Token(Token = "0x20008AD")]
		public struct MapCell
		{
			[Token(Token = "0x4002A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int x;

			[Token(Token = "0x4002A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int y;

			[Token(Token = "0x6003466")]
			[Address(RVA = "0x1351570", Offset = "0x1351570", VA = "0x1351570", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6003467")]
			[Address(RVA = "0x1350154", Offset = "0x1350154", VA = "0x1350154")]
			public MapCell(int _x, int _y)
			{
			}
		}

		[Token(Token = "0x20008AE")]
		public class PathRequestData
		{
			[Token(Token = "0x4002A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int ownerId;

			[Token(Token = "0x4002A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int requestId;

			[Token(Token = "0x4002A96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public PathRequest request;

			[Token(Token = "0x4002A97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public PathResult result;

			[Token(Token = "0x4002A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public object userData;

			[Token(Token = "0x4002A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Action<PathRequestData> callback;

			[Token(Token = "0x4002A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public PathQuery pathQuery;

			[Token(Token = "0x4002A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public NativeArray<PathPoint> tempPath;

			[Token(Token = "0x4002A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public Vector3[] legacyPath;

			[Token(Token = "0x1700092F")]
			public bool isJobPath
			{
				[Token(Token = "0x6003468")]
				[Address(RVA = "0x134D648", Offset = "0x134D648", VA = "0x134D648")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6003469")]
			[Address(RVA = "0x13509A8", Offset = "0x13509A8", VA = "0x13509A8")]
			public PathRequestData()
			{
			}
		}

		[Token(Token = "0x4002A7C")]
		private const int c_maxConcurrentPathJobs = 32;

		[Token(Token = "0x4002A7D")]
		private const int c_maxConcurrentNavMeshPaths = 2;

		[Token(Token = "0x4002A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action OnDestroyed;

		[Token(Token = "0x4002A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Queue<PathRequestData> _queue;

		[Token(Token = "0x4002A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<PathRequestData> _calculating;

		[Token(Token = "0x4002A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<int, NavMeshPath> m_navMeshPaths;

		[Token(Token = "0x4002A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<int, NativeArray<PathPoint>> m_pathBuffers;

		[Token(Token = "0x4002A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<NavMeshLink, LinkData> _navMeshLinkData;

		[Token(Token = "0x4002A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<MapCell, List<LinkData>> _linkDataPerCell;

		[Token(Token = "0x4002A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 _levelOrigin;

		[Token(Token = "0x4002A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _cellSize;

		[Token(Token = "0x4002A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private NavMeshAreas _navMeshAreaConfig;

		[Token(Token = "0x4002A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static RaycastHit[] s_raycastHits;

		[Token(Token = "0x4002A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Stack<PathQuery> m_jobPathQueryStack;

		[Token(Token = "0x4002A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<PathQuery> m_allJobPathQueries;

		[Token(Token = "0x4002A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int m_linkCount;

		[Token(Token = "0x4002A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int m_numRequestsPerFrame;

		[Token(Token = "0x4002A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int m_numCompletedPerFrame;

		[Token(Token = "0x4002A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int m_requestId;

		[Token(Token = "0x4002A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] m_tempPathBuffer;

		[Token(Token = "0x4002A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly ProfilerMarker s_marker0;

		[Token(Token = "0x1700092C")]
		public Queue<PathRequestData> pathQueue
		{
			[Token(Token = "0x600344E")]
			[Address(RVA = "0x134F134", Offset = "0x134F134", VA = "0x134F134")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700092D")]
		public bool initialized
		{
			[Token(Token = "0x6003451")]
			[Address(RVA = "0x134F24C", Offset = "0x134F24C", VA = "0x134F24C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003452")]
			[Address(RVA = "0x134F254", Offset = "0x134F254", VA = "0x134F254")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700092E")]
		public static bool useJobs
		{
			[Token(Token = "0x6003453")]
			[Address(RVA = "0x134F260", Offset = "0x134F260", VA = "0x134F260")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600344F")]
		[Address(RVA = "0x134F13C", Offset = "0x134F13C", VA = "0x134F13C")]
		static PathManager()
		{
		}

		[Token(Token = "0x6003450")]
		[Address(RVA = "0x134F1C8", Offset = "0x134F1C8", VA = "0x134F1C8")]
		[AutoInitializeStatics]
		private static void ResetStatics()
		{
		}

		[Token(Token = "0x6003454")]
		[Address(RVA = "0x134F318", Offset = "0x134F318", VA = "0x134F318")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003455")]
		[Address(RVA = "0x134F758", Offset = "0x134F758", VA = "0x134F758")]
		private void HandleLevelReset()
		{
		}

		[Token(Token = "0x6003456")]
		[Address(RVA = "0x134F75C", Offset = "0x134F75C", VA = "0x134F75C")]
		[ContextMenu("Initialize NavLink Data")]
		public void Initialise()
		{
		}

		[Token(Token = "0x6003457")]
		[Address(RVA = "0x134FAE8", Offset = "0x134FAE8", VA = "0x134FAE8")]
		private MapCell GetCell(Vector3 pos)
		{
			return default(MapCell);
		}

		[Token(Token = "0x6003458")]
		[Address(RVA = "0x134FBE8", Offset = "0x134FBE8", VA = "0x134FBE8")]
		private void AddNavLink(MapCell cell, NavMeshLink link, NavMeshAreas areas)
		{
		}

		[Token(Token = "0x6003459")]
		[Address(RVA = "0x134E1B4", Offset = "0x134E1B4", VA = "0x134E1B4")]
		public void GetLinks(Vector3 pos, List<LinkData> links)
		{
		}

		[Token(Token = "0x600345A")]
		[Address(RVA = "0x134FE28", Offset = "0x134FE28", VA = "0x134FE28")]
		public void GetLinks(MapCell cell, List<LinkData> links)
		{
		}

		[Token(Token = "0x600345B")]
		[Address(RVA = "0x135015C", Offset = "0x135015C", VA = "0x135015C", Slot = "4")]
		public override void OnDestroy()
		{
		}

		[Token(Token = "0x600345C")]
		[Address(RVA = "0x134CA4C", Offset = "0x134CA4C", VA = "0x134CA4C")]
		public void RequestPath(int id, Vector3 from, Vector3 destination, NavMeshQueryFilter filter, PathRequestFlags flags, int iterations, object userData, Action<PathRequestData> callback)
		{
		}

		[Token(Token = "0x600345D")]
		[Address(RVA = "0x13509B0", Offset = "0x13509B0", VA = "0x13509B0")]
		private void AddRequest(PathRequestData request)
		{
		}

		[Token(Token = "0x600345E")]
		[Address(RVA = "0x1350660", Offset = "0x1350660", VA = "0x1350660")]
		public static bool GetNavMeshGoundPosition(ref Vector3 pos, NavMeshQueryFilter filter, float verticalRange = 2f)
		{
			return default(bool);
		}

		[Token(Token = "0x600345F")]
		[Address(RVA = "0x134B7FC", Offset = "0x134B7FC", VA = "0x134B7FC")]
		public static bool GetNavMeshGoundPosition(ref Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6003460")]
		[Address(RVA = "0x1350A14", Offset = "0x1350A14", VA = "0x1350A14")]
		private void Update()
		{
		}

		[Token(Token = "0x6003461")]
		[Address(RVA = "0x1350E54", Offset = "0x1350E54", VA = "0x1350E54")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6003462")]
		[Address(RVA = "0x1350E58", Offset = "0x1350E58", VA = "0x1350E58")]
		private void DequeueRequests()
		{
		}

		[Token(Token = "0x6003463")]
		[Address(RVA = "0x1350A1C", Offset = "0x1350A1C", VA = "0x1350A1C")]
		private void UpdateInProgress()
		{
		}

		[Token(Token = "0x6003464")]
		[Address(RVA = "0x1351350", Offset = "0x1351350", VA = "0x1351350")]
		private bool GetClosestPositionOnCurrentIslandToDestination(PathRequestData requestData)
		{
			return default(bool);
		}

		[Token(Token = "0x6003465")]
		[Address(RVA = "0x1351514", Offset = "0x1351514", VA = "0x1351514")]
		public PathManager()
		{
		}
	}
}
namespace Cabin.HsmLite
{
	[Token(Token = "0x20008AF")]
	public class HsmLite
	{
		[Token(Token = "0x20008B0")]
		public struct Transition
		{
			[Token(Token = "0x4002AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public State fromState;

			[Token(Token = "0x4002AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string exitName;

			[Token(Token = "0x4002AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string entryName;

			[Token(Token = "0x4002AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public State targetState;

			[Token(Token = "0x4002AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool signal;
		}

		[Token(Token = "0x4002A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<HsmLite> s_activeStateMachines;

		[Token(Token = "0x4002A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static List<HsmLite> activeStateMachines;

		[Token(Token = "0x4002A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private State m_runtimeRoot;

		[Token(Token = "0x4002AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<State, string> m_exitRequests;

		[Token(Token = "0x4002AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Transition> _entryStack;

		[Token(Token = "0x4002AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<State> _updateStack;

		[Token(Token = "0x4002AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Stack<Transition> _exitStack;

		[Token(Token = "0x4002AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Stack<State> _tempStack;

		[Token(Token = "0x4002AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Stack<State> _depthFirstStack;

		[Token(Token = "0x4002AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Link> _filteredLinks;

		[Token(Token = "0x4002AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Component _owner;

		[Token(Token = "0x4002AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected string m_cachedLinkTailName;

		[Token(Token = "0x4002AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private StateDescription _rootState;

		[Token(Token = "0x4002AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Stack<State> m_initStack;

		[Token(Token = "0x17000930")]
		public State rootState
		{
			[Token(Token = "0x600346B")]
			[Address(RVA = "0x1351624", Offset = "0x1351624", VA = "0x1351624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000931")]
		public UnityEngine.Component owner
		{
			[Token(Token = "0x600346C")]
			[Address(RVA = "0x135162C", Offset = "0x135162C", VA = "0x135162C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000932")]
		public string cachedLinkTailName
		{
			[Token(Token = "0x600346D")]
			[Address(RVA = "0x1351634", Offset = "0x1351634", VA = "0x1351634")]
			get
			{
				return null;
			}
			[Token(Token = "0x600346E")]
			[Address(RVA = "0x135163C", Offset = "0x135163C", VA = "0x135163C")]
			set
			{
			}
		}

		[Token(Token = "0x600346A")]
		[Address(RVA = "0x135157C", Offset = "0x135157C", VA = "0x135157C")]
		[RuntimeInitializeOnLoadMethod]
		private static void InitializeStatics()
		{
		}

		[Token(Token = "0x600346F")]
		[Address(RVA = "0x1351644", Offset = "0x1351644", VA = "0x1351644")]
		public HsmLite(StateDescription rootState, UnityEngine.Component owner)
		{
		}

		[Token(Token = "0x6003470")]
		[Address(RVA = "0x1351750", Offset = "0x1351750", VA = "0x1351750")]
		public void SetRootState(StateDescription rootState)
		{
		}

		[Token(Token = "0x6003471")]
		[Address(RVA = "0x1351A94", Offset = "0x1351A94", VA = "0x1351A94")]
		public void CleanUp()
		{
		}

		[Token(Token = "0x6003472")]
		[Address(RVA = "0x1352F78", Offset = "0x1352F78", VA = "0x1352F78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003473")]
		[Address(RVA = "0x1353050", Offset = "0x1353050", VA = "0x1353050")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003474")]
		[Address(RVA = "0x1352828", Offset = "0x1352828", VA = "0x1352828")]
		public void EnterRootState()
		{
		}

		[Token(Token = "0x6003475")]
		[Address(RVA = "0x13530D0", Offset = "0x13530D0", VA = "0x13530D0")]
		public void ExitRootState(int exitPoint)
		{
		}

		[Token(Token = "0x6003476")]
		[Address(RVA = "0x13525A0", Offset = "0x13525A0", VA = "0x13525A0")]
		private void VisitStates(State root, Action<State> callback)
		{
		}

		[Token(Token = "0x6003477")]
		[Address(RVA = "0x13530E0", Offset = "0x13530E0", VA = "0x13530E0")]
		public void Poll()
		{
		}

		[Token(Token = "0x6003478")]
		[Address(RVA = "0x1353934", Offset = "0x1353934", VA = "0x1353934")]
		public void RequestExit(State fromState, string exitName)
		{
		}

		[Token(Token = "0x6003479")]
		[Address(RVA = "0x13539F8", Offset = "0x13539F8", VA = "0x13539F8")]
		public void RequestSignal(State fromState, string exitName)
		{
		}

		[Token(Token = "0x600347A")]
		[Address(RVA = "0x1353AC4", Offset = "0x1353AC4", VA = "0x1353AC4")]
		private List<Link> FilterLinks(string filterName, List<Link> links)
		{
			return null;
		}

		[Token(Token = "0x600347B")]
		[Address(RVA = "0x1353530", Offset = "0x1353530", VA = "0x1353530")]
		private void ProcessEntry(Transition transition)
		{
		}

		[Token(Token = "0x600347C")]
		[Address(RVA = "0x1353848", Offset = "0x1353848", VA = "0x1353848")]
		private void ProcessExit(Transition transition)
		{
		}

		[Token(Token = "0x600347D")]
		[Address(RVA = "0x1352B08", Offset = "0x1352B08", VA = "0x1352B08")]
		private void ExitStateAndInnerStates(State fromState, int exitPoint)
		{
		}

		[Token(Token = "0x600347E")]
		[Address(RVA = "0x13541D4", Offset = "0x13541D4", VA = "0x13541D4")]
		private bool IsGrandchild(State parent, State child)
		{
			return default(bool);
		}

		[Token(Token = "0x600347F")]
		[Address(RVA = "0x1353E24", Offset = "0x1353E24", VA = "0x1353E24")]
		private void ProcessLinks(State fromState, string exitName, List<Link> links)
		{
		}

		[Token(Token = "0x6003480")]
		[Address(RVA = "0x135420C", Offset = "0x135420C", VA = "0x135420C")]
		public void Restart()
		{
		}

		[Token(Token = "0x6003481")]
		[Address(RVA = "0x1354240", Offset = "0x1354240", VA = "0x1354240")]
		public void RestartStates()
		{
		}

		[Token(Token = "0x6003482")]
		[Address(RVA = "0x1354330", Offset = "0x1354330", VA = "0x1354330")]
		public void DrawGizmos()
		{
		}

		[Token(Token = "0x6003483")]
		[Address(RVA = "0x1354338", Offset = "0x1354338", VA = "0x1354338")]
		private void DrawGizmos(State state)
		{
		}

		[Token(Token = "0x6003484")]
		[Address(RVA = "0x1354484", Offset = "0x1354484", VA = "0x1354484")]
		public static List<UnityEngine.Object> GetAllObjectData(StateDescription rootState)
		{
			return null;
		}

		[Token(Token = "0x6003485")]
		[Address(RVA = "0x135456C", Offset = "0x135456C", VA = "0x135456C")]
		private static void GetAllObjectData(InnerStateDescription state, List<UnityEngine.Object> objectData)
		{
		}
	}
	[Token(Token = "0x20008B3")]
	public class HsmLiteHelperStates : MonoBehaviour
	{
		[Token(Token = "0x20008B4")]
		public class state_HsmLiteAutoExit : State
		{
			[Token(Token = "0x6003492")]
			[Address(RVA = "0x13548C8", Offset = "0x13548C8", VA = "0x13548C8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003493")]
			[Address(RVA = "0x1354960", Offset = "0x1354960", VA = "0x1354960")]
			public state_HsmLiteAutoExit()
			{
			}
		}

		[Token(Token = "0x6003491")]
		[Address(RVA = "0x13548C0", Offset = "0x13548C0", VA = "0x13548C0")]
		public HsmLiteHelperStates()
		{
		}
	}
	[Token(Token = "0x20008B5")]
	public interface IHsmLiteMutator
	{
		[Token(Token = "0x6003494")]
		StateDescription Mutate(StateDescription original);
	}
	[Token(Token = "0x20008B6")]
	public class Link
	{
		[Token(Token = "0x4002AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public State target;

		[Token(Token = "0x4002AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string pointName;

		[Token(Token = "0x4002ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int pointIndex;

		[Token(Token = "0x4002ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public eLinkType linkType;

		[Token(Token = "0x6003495")]
		[Address(RVA = "0x1354AD8", Offset = "0x1354AD8", VA = "0x1354AD8")]
		public Link()
		{
		}
	}
	[Token(Token = "0x20008B7")]
	public class NestedHsmState<T> : NestedState<T>
	{
		[Token(Token = "0x4002ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private StateDescription m_rootState;

		[Token(Token = "0x4002ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HsmLite m_hsm;

		[Token(Token = "0x17000933")]
		[StateConfig("HsmLite Graph")]
		public StateDescription NestedRootState
		{
			[Token(Token = "0x6003496")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003497")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6003498")]
		public override void Initialise()
		{
		}

		[Token(Token = "0x6003499")]
		public override void Restart()
		{
		}

		[Token(Token = "0x600349A")]
		public override void CloseDown()
		{
		}

		[Token(Token = "0x600349B")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x600349C")]
		public override void StateUpdate()
		{
		}

		[Token(Token = "0x600349D")]
		public override void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x600349E")]
		public NestedHsmState()
		{
		}
	}
	[Token(Token = "0x20008B8")]
	public class NestedState<T> : State
	{
		[Token(Token = "0x4002ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T m_owner;

		[Token(Token = "0x17000934")]
		public T owner
		{
			[Token(Token = "0x600349F")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x60034A0")]
		public NestedState()
		{
		}
	}
	[Token(Token = "0x20008B9")]
	public class State : IStateAttachedLogic
	{
		[Token(Token = "0x4002AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HsmLite context;

		[Token(Token = "0x4002AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<State> innerStates;

		[Token(Token = "0x4002AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, List<Link>> entryLinks;

		[Token(Token = "0x4002AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<string, List<Link>> exitLinks;

		[Token(Token = "0x4002AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> entryNames;

		[Token(Token = "0x4002AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> exitNames;

		[Token(Token = "0x4002AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<State> activeStates;

		[Token(Token = "0x4002AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<State> ranStates;

		[Token(Token = "0x4002ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string entryTailName;

		[Token(Token = "0x4002ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string linkFilterName;

		[Token(Token = "0x17000935")]
		public string name
		{
			[Token(Token = "0x60034A1")]
			[Address(RVA = "0x1354AE0", Offset = "0x1354AE0", VA = "0x1354AE0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60034A2")]
			[Address(RVA = "0x1354AE8", Offset = "0x1354AE8", VA = "0x1354AE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000936")]
		public State parent
		{
			[Token(Token = "0x60034A3")]
			[Address(RVA = "0x1354AF0", Offset = "0x1354AF0", VA = "0x1354AF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60034A4")]
			[Address(RVA = "0x1354AF8", Offset = "0x1354AF8", VA = "0x1354AF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000937")]
		public UnityEngine.Object ObjectValue
		{
			[Token(Token = "0x60034A5")]
			[Address(RVA = "0x1354B00", Offset = "0x1354B00", VA = "0x1354B00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60034A6")]
			[Address(RVA = "0x1354B08", Offset = "0x1354B08", VA = "0x1354B08")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000938")]
		public ExposedReference<UnityEngine.Object> ExposedReferenceValue
		{
			[Token(Token = "0x60034A7")]
			[Address(RVA = "0x1354B10", Offset = "0x1354B10", VA = "0x1354B10")]
			[CompilerGenerated]
			get
			{
				return default(ExposedReference<UnityEngine.Object>);
			}
			[Token(Token = "0x60034A8")]
			[Address(RVA = "0x1354B1C", Offset = "0x1354B1C", VA = "0x1354B1C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000939")]
		public StateDescription description
		{
			[Token(Token = "0x60034A9")]
			[Address(RVA = "0x1354B2C", Offset = "0x1354B2C", VA = "0x1354B2C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60034AA")]
			[Address(RVA = "0x1354B34", Offset = "0x1354B34", VA = "0x1354B34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700093A")]
		public bool containerState
		{
			[Token(Token = "0x60034AB")]
			[Address(RVA = "0x1354B3C", Offset = "0x1354B3C", VA = "0x1354B3C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60034AC")]
			[Address(RVA = "0x1354B44", Offset = "0x1354B44", VA = "0x1354B44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700093B")]
		public object LinkData
		{
			[Token(Token = "0x60034AD")]
			[Address(RVA = "0x1354B50", Offset = "0x1354B50", VA = "0x1354B50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60034AE")]
			[Address(RVA = "0x1354B58", Offset = "0x1354B58", VA = "0x1354B58")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700093C")]
		public int entryIndex
		{
			[Token(Token = "0x60034AF")]
			[Address(RVA = "0x1354B60", Offset = "0x1354B60", VA = "0x1354B60")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60034B0")]
			[Address(RVA = "0x1354B68", Offset = "0x1354B68", VA = "0x1354B68")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700093D")]
		public object EntryData
		{
			[Token(Token = "0x60034B1")]
			[Address(RVA = "0x1354B70", Offset = "0x1354B70", VA = "0x1354B70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60034B2")]
		[Address(RVA = "0x1354B78", Offset = "0x1354B78", VA = "0x1354B78", Slot = "4")]
		public void StateAttached(IStateLogicInterface owner)
		{
		}

		[Token(Token = "0x60034B3")]
		[Address(RVA = "0x1354B7C", Offset = "0x1354B7C", VA = "0x1354B7C", Slot = "9")]
		public virtual void Initialise()
		{
		}

		[Token(Token = "0x60034B4")]
		[Address(RVA = "0x1354B80", Offset = "0x1354B80", VA = "0x1354B80", Slot = "10")]
		public virtual void Restart()
		{
		}

		[Token(Token = "0x60034B5")]
		[Address(RVA = "0x1354B84", Offset = "0x1354B84", VA = "0x1354B84", Slot = "11")]
		public virtual void CloseDown()
		{
		}

		[Token(Token = "0x60034B6")]
		[Address(RVA = "0x13548E4", Offset = "0x13548E4", VA = "0x13548E4", Slot = "12")]
		public virtual void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x60034B7")]
		[Address(RVA = "0x1354B88", Offset = "0x1354B88", VA = "0x1354B88", Slot = "6")]
		public void StateInputSignalReceived(int inPoint)
		{
		}

		[Token(Token = "0x60034B8")]
		[Address(RVA = "0x1354B8C", Offset = "0x1354B8C", VA = "0x1354B8C", Slot = "13")]
		public virtual void StateUpdate()
		{
		}

		[Token(Token = "0x60034B9")]
		[Address(RVA = "0x1354B90", Offset = "0x1354B90", VA = "0x1354B90", Slot = "14")]
		public virtual void StateExit(int? exitPoint)
		{
		}

		[Token(Token = "0x60034BA")]
		[Address(RVA = "0x1354B94", Offset = "0x1354B94", VA = "0x1354B94", Slot = "15")]
		public virtual void DrawGizmos()
		{
		}

		[Token(Token = "0x60034BB")]
		[Address(RVA = "0x13548E8", Offset = "0x13548E8", VA = "0x13548E8")]
		public void StateRequestExit(int exitIndex, [Optional] object linkData)
		{
		}

		[Token(Token = "0x60034BC")]
		[Address(RVA = "0x1354B98", Offset = "0x1354B98", VA = "0x1354B98")]
		public void StateRequestExit(string exitName, [Optional] object linkData)
		{
		}

		[Token(Token = "0x60034BD")]
		[Address(RVA = "0x1354BA4", Offset = "0x1354BA4", VA = "0x1354BA4")]
		public void StateRequestExit(string exitName, string filterName, [Optional] object linkData)
		{
		}

		[Token(Token = "0x60034BE")]
		[Address(RVA = "0x1354D34", Offset = "0x1354D34", VA = "0x1354D34")]
		public void StateRequestSignal(string signalName, [Optional] object linkData)
		{
		}

		[Token(Token = "0x60034BF")]
		[Address(RVA = "0x1354D78", Offset = "0x1354D78", VA = "0x1354D78")]
		public bool SafeStateRequestExit(string name, [Optional] object linkData)
		{
			return default(bool);
		}

		[Token(Token = "0x60034C0")]
		[Address(RVA = "0x1354C04", Offset = "0x1354C04", VA = "0x1354C04")]
		private void SetParentFilter(string exitName, string filterName)
		{
		}

		[Token(Token = "0x60034C1")]
		[Address(RVA = "0x13541F8", Offset = "0x13541F8", VA = "0x13541F8")]
		public void SetParentFilter(string filterName)
		{
		}

		[Token(Token = "0x60034C2")]
		[Address(RVA = "0x1354DE0", Offset = "0x1354DE0", VA = "0x1354DE0")]
		public bool HasConnectedExit(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60034C3")]
		public T GetObjectValue<T>() where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60034C4")]
		[Address(RVA = "0x1351BA8", Offset = "0x1351BA8", VA = "0x1351BA8")]
		public static State Create(InnerStateDescription innerDescription, HsmLite context, [Optional] State parent)
		{
			return null;
		}

		[Token(Token = "0x60034C5")]
		[Address(RVA = "0x1354FB0", Offset = "0x1354FB0", VA = "0x1354FB0")]
		private static Link CreateLiteLink((InnerStateDescription description, State state) parent, LinkDescription link, Dictionary<string, (InnerStateDescription, State)> innerStates)
		{
			return null;
		}

		[Token(Token = "0x60034C6")]
		[Address(RVA = "0x1355140", Offset = "0x1355140", VA = "0x1355140")]
		private static void AttachLink(string key, Link link, Dictionary<string, List<Link>> links)
		{
		}

		[Token(Token = "0x60034C7")]
		[Address(RVA = "0x1354E8C", Offset = "0x1354E8C", VA = "0x1354E8C")]
		public static bool SchemaMatches(StateDescription source, StateDescription other)
		{
			return default(bool);
		}

		[Token(Token = "0x60034C8")]
		[Address(RVA = "0x1354964", Offset = "0x1354964", VA = "0x1354964")]
		public State()
		{
		}
	}
	[Token(Token = "0x20008BB")]
	public class state_CacheExitLinkName : State
	{
		[Token(Token = "0x60034CC")]
		[Address(RVA = "0x1355334", Offset = "0x1355334", VA = "0x1355334", Slot = "12")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x60034CD")]
		[Address(RVA = "0x135539C", Offset = "0x135539C", VA = "0x135539C")]
		public state_CacheExitLinkName()
		{
		}
	}
	[Token(Token = "0x20008BC")]
	public class state_ExitViaCachedLinkName : State
	{
		[Token(Token = "0x1700093E")]
		[StateConfig("Default Exit Name")]
		public string DefaultExitName
		{
			[Token(Token = "0x60034CE")]
			[Address(RVA = "0x13553A0", Offset = "0x13553A0", VA = "0x13553A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60034CF")]
			[Address(RVA = "0x13553A8", Offset = "0x13553A8", VA = "0x13553A8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60034D0")]
		[Address(RVA = "0x13553B0", Offset = "0x13553B0", VA = "0x13553B0", Slot = "12")]
		public override void StateEnter(int inPoint)
		{
		}

		[Token(Token = "0x60034D1")]
		[Address(RVA = "0x1355410", Offset = "0x1355410", VA = "0x1355410")]
		public state_ExitViaCachedLinkName()
		{
		}
	}
}
namespace Cabin.HealthStatusSystem
{
	[Token(Token = "0x20008BD")]
	public class KillShotDetector : CachedMonoBehaviour
	{
		[Token(Token = "0x20008BE")]
		public enum ApplyMode
		{
			[Token(Token = "0x4002ADC")]
			Always,
			[Token(Token = "0x4002ADD")]
			KillShotOnly,
			[Token(Token = "0x4002ADE")]
			WhenDead
		}

		[Token(Token = "0x4002AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float smallHitRadius;

		[Token(Token = "0x4002AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float smallHitDistance;

		[Token(Token = "0x4002AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float largeHitRadius;

		[Token(Token = "0x4002AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float largeHitDistance;

		[Token(Token = "0x4002AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float _healthChange;

		[Token(Token = "0x4002AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float m_defaultHealthChange;

		[Token(Token = "0x4002ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private ApplyMode _applyMode;

		[Token(Token = "0x1700093F")]
		public virtual float healthChange
		{
			[Token(Token = "0x60034D2")]
			[Address(RVA = "0x1355414", Offset = "0x1355414", VA = "0x1355414", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000940")]
		public ApplyMode applyMode
		{
			[Token(Token = "0x60034D3")]
			[Address(RVA = "0x135541C", Offset = "0x135541C", VA = "0x135541C")]
			get
			{
				return default(ApplyMode);
			}
		}

		[Token(Token = "0x60034D4")]
		[Address(RVA = "0x1355424", Offset = "0x1355424", VA = "0x1355424")]
		private void Awake()
		{
		}

		[Token(Token = "0x60034D5")]
		[Address(RVA = "0x1355430", Offset = "0x1355430", VA = "0x1355430")]
		private void Start()
		{
		}

		[Token(Token = "0x60034D6")]
		[Address(RVA = "0x13554A8", Offset = "0x13554A8", VA = "0x13554A8")]
		private float GetRadius(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x60034D7")]
		[Address(RVA = "0x1355504", Offset = "0x1355504", VA = "0x1355504", Slot = "5")]
		public virtual bool CheckForHit(Ray ray)
		{
			return default(bool);
		}

		[Token(Token = "0x60034D8")]
		[Address(RVA = "0x1355660", Offset = "0x1355660", VA = "0x1355660")]
		public float GetDamage(Ray ray)
		{
			return default(float);
		}

		[Token(Token = "0x60034D9")]
		[Address(RVA = "0x13556B0", Offset = "0x13556B0", VA = "0x13556B0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60034DA")]
		[Address(RVA = "0x13558F8", Offset = "0x13558F8", VA = "0x13558F8")]
		public KillShotDetector()
		{
		}
	}
}
namespace Cabin.Factions
{
	[Token(Token = "0x20008BF")]
	[CreateAssetMenu(menuName = "Battle Sister/AI/Faction")]
	public class Faction : ScriptableObject
	{
		[Token(Token = "0x4002ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<Faction> s_allFactions;

		[Token(Token = "0x4002AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Faction[] m_alliedFactions;

		[Token(Token = "0x17000941")]
		public static HashSet<Faction> AllFactions
		{
			[Token(Token = "0x60034DB")]
			[Address(RVA = "0x135591C", Offset = "0x135591C", VA = "0x135591C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60034DC")]
		[Address(RVA = "0x1355974", Offset = "0x1355974", VA = "0x1355974")]
		private void Awake()
		{
		}

		[Token(Token = "0x60034DD")]
		[Address(RVA = "0x13559F4", Offset = "0x13559F4", VA = "0x13559F4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60034DE")]
		[Address(RVA = "0x1355A74", Offset = "0x1355A74", VA = "0x1355A74")]
		public FactionDiplomacy GetDiplomacyWithFaction(IFactionMember factionMember, FactionDiplomacy defaultDiplomacy = FactionDiplomacy.Hostile)
		{
			return default(FactionDiplomacy);
		}

		[Token(Token = "0x60034DF")]
		[Address(RVA = "0x1355B3C", Offset = "0x1355B3C", VA = "0x1355B3C")]
		public FactionDiplomacy GetDiplomacyWithFaction(Faction otherFaction)
		{
			return default(FactionDiplomacy);
		}

		[Token(Token = "0x60034E0")]
		[Address(RVA = "0x1355C28", Offset = "0x1355C28", VA = "0x1355C28")]
		public Faction()
		{
		}
	}
	[Token(Token = "0x20008C0")]
	public enum FactionDiplomacy
	{
		[Token(Token = "0x4002AE2")]
		Hostile = 0,
		[Token(Token = "0x4002AE3")]
		Allied = 2
	}
	[Token(Token = "0x20008C1")]
	public interface IFactionMember
	{
		[Token(Token = "0x17000942")]
		Faction faction
		{
			[Token(Token = "0x60034E2")]
			get;
		}
	}
}
namespace Cabin.Agents
{
	[Token(Token = "0x20008C2")]
	public class AgentMirroring : CachedMonoBehaviour
	{
		[Token(Token = "0x4002AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MirrorHints mirrorHint;

		[Token(Token = "0x4002AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Randomness")]
		public float mirroredPercentage;

		[Token(Token = "0x4002AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_mirrored;

		[Token(Token = "0x4002AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<WeaponAttachmentPoint> m_attachmentPoints;

		[Token(Token = "0x4002AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator m_animator;

		[Token(Token = "0x4002AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_hasAnimator;

		[Token(Token = "0x4002AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Min(0.8f)]
		public float minScaleMultiplier;

		[Token(Token = "0x4002AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Min(1f)]
		public float maxScaleMultiplier;

		[Token(Token = "0x4002AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 m_defaultScale;

		[Token(Token = "0x4002AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HealthStatus[] m_allHealthStatus;

		[Token(Token = "0x17000943")]
		public bool IsMirrored
		{
			[Token(Token = "0x60034E3")]
			[Address(RVA = "0x1355CC8", Offset = "0x1355CC8", VA = "0x1355CC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60034E4")]
		[Address(RVA = "0x1355CD0", Offset = "0x1355CD0", VA = "0x1355CD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60034E5")]
		[Address(RVA = "0x1356078", Offset = "0x1356078", VA = "0x1356078")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60034E6")]
		[Address(RVA = "0x13560A8", Offset = "0x13560A8", VA = "0x13560A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60034E7")]
		[Address(RVA = "0x1356328", Offset = "0x1356328", VA = "0x1356328")]
		public void SetSizeAndHandedness()
		{
		}

		[Token(Token = "0x60034E8")]
		[Address(RVA = "0x13564E0", Offset = "0x13564E0", VA = "0x13564E0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60034E9")]
		[Address(RVA = "0x135620C", Offset = "0x135620C", VA = "0x135620C")]
		[ContextMenu("Mirror Animation")]
		public void Mirror(bool deactivating = false)
		{
		}

		[Token(Token = "0x60034EA")]
		[Address(RVA = "0x1356898", Offset = "0x1356898", VA = "0x1356898")]
		public AgentMirroring()
		{
		}
	}
}
namespace Cabin.SceneContentsDirectory
{
	[Token(Token = "0x20008C4")]
	public abstract class SceneContentsDirectory<T, U> : MonoBehaviour where T : UnityEngine.Component where U : SceneContentsDirectory<T, U>
	{
		[Token(Token = "0x4002AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[HideInInspector]
		[SerializeField]
		private T[] m_cachedContents;

		[Token(Token = "0x4002AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Dictionary<Scene, U> s_loadedDirectories;

		[Token(Token = "0x4002AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<U> OnSceneContentAdded;

		[Token(Token = "0x17000944")]
		public T[] CachedContents
		{
			[Token(Token = "0x60034ED")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60034EE")]
		public static U GetDirectoryForScene(Scene scene)
		{
			return null;
		}

		[Token(Token = "0x60034EF")]
		public static List<T> GetDirectory()
		{
			return null;
		}

		[Token(Token = "0x60034F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60034F1")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60034F2")]
		protected SceneContentsDirectory()
		{
		}
	}
}
namespace Cabin.Gameplay
{
	[Token(Token = "0x20008C5")]
	public interface IPriorityTargetProvider
	{
		[Token(Token = "0x17000945")]
		PriorityTarget priorityTarget
		{
			[Token(Token = "0x60034F4")]
			get;
		}
	}
	[Token(Token = "0x20008C6")]
	public interface ITargetHandler
	{
		[Token(Token = "0x17000946")]
		bool IsHumanPlayer
		{
			[Token(Token = "0x60034F6")]
			get;
		}

		[Token(Token = "0x17000947")]
		float NavAvoidanceRadius
		{
			[Token(Token = "0x60034F7")]
			get;
		}

		[Token(Token = "0x17000948")]
		Vector3 ForwardFacingVector
		{
			[Token(Token = "0x60034F8")]
			get;
		}

		[Token(Token = "0x17000949")]
		Vector3 HeadPosition
		{
			[Token(Token = "0x60034F9")]
			get;
		}

		[Token(Token = "0x60034F5")]
		int GetCurrentTargets(out PriorityTarget[] targets);

		[Token(Token = "0x60034FA")]
		void GetCurrentWeapons(ref HashSet<VrItem> itemSet);
	}
	[Token(Token = "0x20008C7")]
	public class PriorityTarget : CachedMonoBehaviour, IFactionMember, ITokenProvider, IAttackPositionProvider, ISpatialHashPoint
	{
		[Token(Token = "0x4002AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("The priority target type")]
		private PriorityTargetType _targetType;

		[Token(Token = "0x4002AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[UnityEngine.Tooltip("The configuration to use for this priority target. NOTE, this is mostly legact and replace by enemy AttackStateMatrix.")]
		private PriorityTargetConfiguration _configuration;

		[Token(Token = "0x4002AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[UnityEngine.Tooltip("Check this, if the target can target others too")]
		private bool _hasTargetHandler;

		[Token(Token = "0x4002AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("The game object that is the target handler, if there is one. Leave empty, if this object target can not target others itself.")]
		[SerializeField]
		private GameObject _targetHandlerProxyObject;

		[Token(Token = "0x4002AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[UnityEngine.Tooltip("The Collider to compute the avoid distance when an enemy is trying to reach the attack position")]
		private Collider _avoidanceDistanceCollider;

		[Token(Token = "0x4002AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[FormerlySerializedAs("_attackPositions")]
		private AttackPosition[] m_attackPositions;

		[Token(Token = "0x4002AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("The transform for the Priority Target. This is so a different transform can be used to the trasnform this component is on. If left empty then the transform of the PriorityTarget component is used.")]
		[SerializeField]
		private Transform m_targetTransform;

		[Token(Token = "0x4002AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("Most PriorityTarget transforms aren't actually on the NavMesh, so we need a position to move to for AI tests and calculations etc. If this is left null, then an on nav mesh position is generated that takes the first attack position and projects forwards.")]
		private Transform m_navMeshTransform;

		[Token(Token = "0x4002AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private TokenManager.TokenKey _tokenKeyAttack;

		[Token(Token = "0x4002AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TokenManager.TokenKey _tokenKeyMovement;

		[Token(Token = "0x4002AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ITargetHandler _targetHandler;

		[Token(Token = "0x4002AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BoltEntity boltEntity;

		[Token(Token = "0x4002B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool _hasRootHealthStatus;

		[Token(Token = "0x4002B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected HealthStatus _rootHealthStatus;

		[Token(Token = "0x4002B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float _avoidanceRadius;

		[Token(Token = "0x4002B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private IOwner _owner;

		[Token(Token = "0x4002B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3[] m_attackPositionArray;

		[Token(Token = "0x4002B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private PairedDistanceCalculator m_calculator;

		[Token(Token = "0x4002B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_calculatingOptimalPositions;

		[Token(Token = "0x4002B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<Actor> m_moveToConsumers;

		[Token(Token = "0x4002B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private IAttackStatus m_attackStatusProvider;

		[Token(Token = "0x4002B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 m_navMeshPosition;

		[Token(Token = "0x4002B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private VisionTargetContainer _visionTargetContainer;

		[Token(Token = "0x1700094A")]
		public Transform targetTransform
		{
			[Token(Token = "0x60034FB")]
			[Address(RVA = "0x13568FC", Offset = "0x13568FC", VA = "0x13568FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700094B")]
		private bool IAttackPositionProvider.isValid
		{
			[Token(Token = "0x60034FC")]
			[Address(RVA = "0x135697C", Offset = "0x135697C", VA = "0x135697C", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700094C")]
		private string IAttackPositionProvider.positionName
		{
			[Token(Token = "0x60034FD")]
			[Address(RVA = "0x1356A4C", Offset = "0x1356A4C", VA = "0x1356A4C", Slot = "9")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700094D")]
		private AttackPosition[] IAttackPositionProvider.AttackPositions
		{
			[Token(Token = "0x60034FE")]
			[Address(RVA = "0x1356A6C", Offset = "0x1356A6C", VA = "0x1356A6C", Slot = "12")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700094E")]
		private int IAttackPositionProvider.Identifier
		{
			[Token(Token = "0x60034FF")]
			[Address(RVA = "0x1356A74", Offset = "0x1356A74", VA = "0x1356A74", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700094F")]
		private Vector3 IAttackPositionProvider.position
		{
			[Token(Token = "0x6003500")]
			[Address(RVA = "0x1356A7C", Offset = "0x1356A7C", VA = "0x1356A7C", Slot = "10")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000950")]
		private Vector3 ISpatialHashPoint.pointPosition
		{
			[Token(Token = "0x6003501")]
			[Address(RVA = "0x1356A9C", Offset = "0x1356A9C", VA = "0x1356A9C", Slot = "18")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000951")]
		private float IAttackPositionProvider.distance
		{
			[Token(Token = "0x6003502")]
			[Address(RVA = "0x1356ABC", Offset = "0x1356ABC", VA = "0x1356ABC", Slot = "13")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003503")]
			[Address(RVA = "0x1356AC4", Offset = "0x1356AC4", VA = "0x1356AC4", Slot = "14")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000952")]
		public PriorityTargetType targetType
		{
			[Token(Token = "0x6003504")]
			[Address(RVA = "0x1356ACC", Offset = "0x1356ACC", VA = "0x1356ACC")]
			get
			{
				return default(PriorityTargetType);
			}
		}

		[Token(Token = "0x17000953")]
		public bool HasTargetHandler
		{
			[Token(Token = "0x6003505")]
			[Address(RVA = "0x1356AD4", Offset = "0x1356AD4", VA = "0x1356AD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000954")]
		public ITargetHandler TargetHandler
		{
			[Token(Token = "0x6003506")]
			[Address(RVA = "0x1356ADC", Offset = "0x1356ADC", VA = "0x1356ADC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000955")]
		public HealthStatus RootHealthStatus
		{
			[Token(Token = "0x6003507")]
			[Address(RVA = "0x1356AE4", Offset = "0x1356AE4", VA = "0x1356AE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000956")]
		public bool HasRootHealthStatus
		{
			[Token(Token = "0x6003508")]
			[Address(RVA = "0x1356AEC", Offset = "0x1356AEC", VA = "0x1356AEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000957")]
		public bool ShouldAttack
		{
			[Token(Token = "0x6003509")]
			[Address(RVA = "0x1356980", Offset = "0x1356980", VA = "0x1356980")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000958")]
		public bool PerceptionIgnored
		{
			[Token(Token = "0x600350A")]
			[Address(RVA = "0x1356AF4", Offset = "0x1356AF4", VA = "0x1356AF4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600350B")]
			[Address(RVA = "0x1356AFC", Offset = "0x1356AFC", VA = "0x1356AFC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000959")]
		public Faction Faction
		{
			[Token(Token = "0x600350C")]
			[Address(RVA = "0x1356B08", Offset = "0x1356B08", VA = "0x1356B08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700095A")]
		public float AvoidanceRadius
		{
			[Token(Token = "0x600350D")]
			[Address(RVA = "0x1356B24", Offset = "0x1356B24", VA = "0x1356B24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700095B")]
		public IOwner owner
		{
			[Token(Token = "0x600350E")]
			[Address(RVA = "0x1356B2C", Offset = "0x1356B2C", VA = "0x1356B2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700095C")]
		private Faction Cabin.Factions.IFactionMember.faction
		{
			[Token(Token = "0x600350F")]
			[Address(RVA = "0x1356B34", Offset = "0x1356B34", VA = "0x1356B34", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700095D")]
		public AttackPositionCoverType coverType
		{
			[Token(Token = "0x6003510")]
			[Address(RVA = "0x1356B50", Offset = "0x1356B50", VA = "0x1356B50", Slot = "15")]
			get
			{
				return default(AttackPositionCoverType);
			}
		}

		[Token(Token = "0x1700095E")]
		public float separationDistance
		{
			[Token(Token = "0x6003511")]
			[Address(RVA = "0x1356B58", Offset = "0x1356B58", VA = "0x1356B58", Slot = "16")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700095F")]
		public BoltEntity BoltEntity
		{
			[Token(Token = "0x6003512")]
			[Address(RVA = "0x1356B60", Offset = "0x1356B60", VA = "0x1356B60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000960")]
		private string ITokenProvider.DisplayName
		{
			[Token(Token = "0x6003513")]
			[Address(RVA = "0x1356C7C", Offset = "0x1356C7C", VA = "0x1356C7C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000961")]
		public Vector3 navMeshPosition
		{
			[Token(Token = "0x6003516")]
			[Address(RVA = "0x1356D44", Offset = "0x1356D44", VA = "0x1356D44")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000962")]
		public VisionTargetContainer TargetContainer
		{
			[Token(Token = "0x600351D")]
			[Address(RVA = "0x1357750", Offset = "0x1357750", VA = "0x1357750")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000963")]
		public float NavAvoidanceRadius
		{
			[Token(Token = "0x600351E")]
			[Address(RVA = "0x1357758", Offset = "0x1357758", VA = "0x1357758")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6003514")]
		[Address(RVA = "0x1356D3C", Offset = "0x1356D3C", VA = "0x1356D3C", Slot = "7")]
		private void ITokenProvider.TokenTaken(IToken token)
		{
		}

		[Token(Token = "0x6003515")]
		[Address(RVA = "0x1356D40", Offset = "0x1356D40", VA = "0x1356D40", Slot = "8")]
		private void ITokenProvider.TokenReturned(IToken token)
		{
		}

		[Token(Token = "0x6003517")]
		[Address(RVA = "0x1356D78", Offset = "0x1356D78", VA = "0x1356D78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003518")]
		[Address(RVA = "0x1357234", Offset = "0x1357234", VA = "0x1357234")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6003519")]
		[Address(RVA = "0x1357250", Offset = "0x1357250", VA = "0x1357250")]
		private void Start()
		{
		}

		[Token(Token = "0x600351A")]
		[Address(RVA = "0x1357254", Offset = "0x1357254", VA = "0x1357254")]
		private void GenerateNavMeshPositions()
		{
		}

		[Token(Token = "0x600351B")]
		[Address(RVA = "0x1357388", Offset = "0x1357388", VA = "0x1357388")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600351C")]
		[Address(RVA = "0x13575A4", Offset = "0x13575A4", VA = "0x13575A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600351F")]
		[Address(RVA = "0x1357814", Offset = "0x1357814", VA = "0x1357814")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003520")]
		[Address(RVA = "0x13578C0", Offset = "0x13578C0", VA = "0x13578C0")]
		public FactionDiplomacy GetDiplomacyWithFaction(Faction otherFaction)
		{
			return default(FactionDiplomacy);
		}

		[Token(Token = "0x6003521")]
		[Address(RVA = "0x13578E0", Offset = "0x13578E0", VA = "0x13578E0")]
		public FactionDiplomacy GetDiplomacyWithTarget(PriorityTarget otherTarget)
		{
			return default(FactionDiplomacy);
		}

		[Token(Token = "0x6003522")]
		[Address(RVA = "0x1357900", Offset = "0x1357900", VA = "0x1357900")]
		public bool IsHostileAgainst(Faction otherFaction)
		{
			return default(bool);
		}

		[Token(Token = "0x6003523")]
		[Address(RVA = "0x135798C", Offset = "0x135798C", VA = "0x135798C")]
		public bool IsHostileAgainst(IFactionMember factionMember)
		{
			return default(bool);
		}

		[Token(Token = "0x6003524")]
		[Address(RVA = "0x1357080", Offset = "0x1357080", VA = "0x1357080")]
		private void ComputeAvoidanceRadius()
		{
		}

		[Token(Token = "0x6003525")]
		[Address(RVA = "0x1357A48", Offset = "0x1357A48", VA = "0x1357A48", Slot = "6")]
		private ITokenKey ITokenProvider.GetTokenKey(TokenManager.TokenType tokenType)
		{
			return null;
		}

		[Token(Token = "0x6003526")]
		[Address(RVA = "0x1357A70", Offset = "0x1357A70", VA = "0x1357A70")]
		public bool IsAtAttackerLimit(object attacker)
		{
			return default(bool);
		}

		[Token(Token = "0x6003527")]
		[Address(RVA = "0x1357B40", Offset = "0x1357B40", VA = "0x1357B40")]
		public bool CalculateOptimalZombiePositionAssignment()
		{
			return default(bool);
		}

		[Token(Token = "0x6003528")]
		[Address(RVA = "0x1357F34", Offset = "0x1357F34", VA = "0x1357F34")]
		public AttackPosition GetBestPosition(Actor actor, [Optional] AttackPosition currentPosition)
		{
			return null;
		}

		[Token(Token = "0x6003529")]
		[Address(RVA = "0x1357F38", Offset = "0x1357F38", VA = "0x1357F38")]
		public AttackPosition GetBestPosition(Actor actor, float bestDistance, [Optional] AttackPosition currentPosition)
		{
			return null;
		}

		[Token(Token = "0x600352A")]
		[Address(RVA = "0x1357FE8", Offset = "0x1357FE8", VA = "0x1357FE8")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600352B")]
		[Address(RVA = "0x1358198", Offset = "0x1358198", VA = "0x1358198")]
		public PriorityTarget()
		{
		}
	}
	[Token(Token = "0x20008C9")]
	public enum PriorityTargetType
	{
		[Token(Token = "0x4002B0F")]
		Player,
		[Token(Token = "0x4002B10")]
		Battery,
		[Token(Token = "0x4002B11")]
		Generator,
		[Token(Token = "0x4002B12")]
		Window
	}
	[Token(Token = "0x20008CA")]
	[CreateAssetMenu(menuName = "Cabin/New Priority Target Configuration", fileName = "Priority Target Configuration", order = 0)]
	public class PriorityTargetConfiguration : ScriptableObject
	{
		[Token(Token = "0x4002B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The maximum amount of enemies that can attack this target simultaneously. Set = 0 for infinite attackers")]
		[SerializeField]
		private int _maxAttackerCount;

		[Token(Token = "0x4002B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("The targets faction. I will decide whether to be hostile to other targets based on my faction compared to their faction.")]
		private Faction _faction;

		[Token(Token = "0x17000964")]
		public int MaxAttackerCount
		{
			[Token(Token = "0x600352E")]
			[Address(RVA = "0x13581D4", Offset = "0x13581D4", VA = "0x13581D4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000965")]
		public Faction Faction
		{
			[Token(Token = "0x600352F")]
			[Address(RVA = "0x13581DC", Offset = "0x13581DC", VA = "0x13581DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003530")]
		[Address(RVA = "0x13581E4", Offset = "0x13581E4", VA = "0x13581E4")]
		public PriorityTargetConfiguration()
		{
		}
	}
}
namespace Cabin.Network
{
	[Token(Token = "0x20008CB")]
	public static class CabinNetworkActions
	{
		[Token(Token = "0x6003531")]
		[Address(RVA = "0x13581F4", Offset = "0x13581F4", VA = "0x13581F4")]
		public static void SendGenericEvent(CabinNetworkEventType type, IProtocolToken token)
		{
		}
	}
	[Token(Token = "0x20008CC")]
	public class CabinNetworkEvent
	{
		[Token(Token = "0x6003532")]
		[Address(RVA = "0x13582A4", Offset = "0x13582A4", VA = "0x13582A4")]
		public CabinNetworkEvent()
		{
		}
	}
	[Token(Token = "0x20008CD")]
	public class CabinNetworkEventData
	{
		[Token(Token = "0x4002B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CabinNetworkEventType EventType;

		[Token(Token = "0x4002B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IProtocolToken EventToken;

		[Token(Token = "0x6003533")]
		[Address(RVA = "0x13582AC", Offset = "0x13582AC", VA = "0x13582AC")]
		public CabinNetworkEventData()
		{
		}
	}
	[Token(Token = "0x20008CE")]
	[BoltGlobalBehaviour]
	public class CabinNetworkEventListener : GlobalEventListener
	{
		[Token(Token = "0x4002B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<_CabinNetworkEvent> OnCabinNetworkEvent;

		[Token(Token = "0x6003534")]
		[Address(RVA = "0x13582B4", Offset = "0x13582B4", VA = "0x13582B4", Slot = "201")]
		public override void OnEvent(_CabinNetworkEvent evnt)
		{
		}

		[Token(Token = "0x6003535")]
		[Address(RVA = "0x135834C", Offset = "0x135834C", VA = "0x135834C")]
		public CabinNetworkEventListener()
		{
		}
	}
	[Token(Token = "0x20008CF")]
	public enum CabinNetworkEventType : ushort
	{
		[Token(Token = "0x4002B19")]
		Default = 0,
		[Token(Token = "0x4002B1A")]
		InteractableTransform = 1,
		[Token(Token = "0x4002B1B")]
		MechanismChange = 100,
		[Token(Token = "0x4002B1C")]
		ZoneChange = 101,
		[Token(Token = "0x4002B1D")]
		BarricadeChange = 102
	}
	[Token(Token = "0x20008D0")]
	[BoltGlobalBehaviour]
	public class CabinNetworkManager : GlobalEventListener
	{
		[Token(Token = "0x6003536")]
		[Address(RVA = "0x1358354", Offset = "0x1358354", VA = "0x1358354", Slot = "11")]
		public override void BoltStartBegin()
		{
		}

		[Token(Token = "0x6003537")]
		[Address(RVA = "0x1358454", Offset = "0x1358454", VA = "0x1358454")]
		public CabinNetworkManager()
		{
		}
	}
	[Token(Token = "0x20008D1")]
	public class CabinTimedEvent : MonoBehaviour
	{
		[Token(Token = "0x4002B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Does the timer for this event want to tick up or down?")]
		[SerializeField]
		private bool m_tickDown;

		[Token(Token = "0x4002B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_timerDuration;

		[Token(Token = "0x4002B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEvent m_OnTimerStarted;

		[Token(Token = "0x4002B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEvent m_OnTimerComplete;

		[Token(Token = "0x4002B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_currentTime;

		[Token(Token = "0x4002B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_targetTime;

		[Token(Token = "0x4002B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_tick;

		[Token(Token = "0x4002B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_hasStarted;

		[Token(Token = "0x6003538")]
		[Address(RVA = "0x135845C", Offset = "0x135845C", VA = "0x135845C")]
		private void Start()
		{
		}

		[Token(Token = "0x6003539")]
		[Address(RVA = "0x1358460", Offset = "0x1358460", VA = "0x1358460")]
		[ContextMenu("Start Timer")]
		public void StartTimer()
		{
		}

		[Token(Token = "0x600353A")]
		[Address(RVA = "0x13584BC", Offset = "0x13584BC", VA = "0x13584BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600353B")]
		[Address(RVA = "0x1358508", Offset = "0x1358508", VA = "0x1358508")]
		private void TimerComplete()
		{
		}

		[Token(Token = "0x600353C")]
		[Address(RVA = "0x1358524", Offset = "0x1358524", VA = "0x1358524")]
		public CabinTimedEvent()
		{
		}
	}
	[Token(Token = "0x20008D2")]
	public class CabinExampleEventToken : IProtocolToken
	{
		[Token(Token = "0x17000966")]
		public int Data1
		{
			[Token(Token = "0x600353D")]
			[Address(RVA = "0x135853C", Offset = "0x135853C", VA = "0x135853C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600353E")]
			[Address(RVA = "0x1358544", Offset = "0x1358544", VA = "0x1358544")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000967")]
		public string Data2
		{
			[Token(Token = "0x600353F")]
			[Address(RVA = "0x135854C", Offset = "0x135854C", VA = "0x135854C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003540")]
			[Address(RVA = "0x1358554", Offset = "0x1358554", VA = "0x1358554")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6003541")]
		[Address(RVA = "0x135855C", Offset = "0x135855C", VA = "0x135855C")]
		public CabinExampleEventToken()
		{
		}

		[Token(Token = "0x6003542")]
		[Address(RVA = "0x1358564", Offset = "0x1358564", VA = "0x1358564")]
		public CabinExampleEventToken(int data1, string data2)
		{
		}

		[Token(Token = "0x6003543")]
		[Address(RVA = "0x135859C", Offset = "0x135859C", VA = "0x135859C", Slot = "4")]
		public void Read(UdpPacket packet)
		{
		}

		[Token(Token = "0x6003544")]
		[Address(RVA = "0x13585E8", Offset = "0x13585E8", VA = "0x13585E8", Slot = "5")]
		public void Write(UdpPacket packet)
		{
		}
	}
	[Token(Token = "0x20008D3")]
	public class CabinInteractableTransformEventToken : CabinProxyEventToken
	{
		[Token(Token = "0x17000968")]
		public Vector3 TransformPosition
		{
			[Token(Token = "0x6003545")]
			[Address(RVA = "0x1358628", Offset = "0x1358628", VA = "0x1358628")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6003546")]
			[Address(RVA = "0x1358634", Offset = "0x1358634", VA = "0x1358634")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000969")]
		public Quaternion TransformRotation
		{
			[Token(Token = "0x6003547")]
			[Address(RVA = "0x1358640", Offset = "0x1358640", VA = "0x1358640")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6003548")]
			[Address(RVA = "0x135864C", Offset = "0x135864C", VA = "0x135864C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6003549")]
		[Address(RVA = "0x1358658", Offset = "0x1358658", VA = "0x1358658")]
		public CabinInteractableTransformEventToken()
		{
		}

		[Token(Token = "0x600354A")]
		[Address(RVA = "0x1358668", Offset = "0x1358668", VA = "0x1358668")]
		public CabinInteractableTransformEventToken(Guid sceneId, Vector3 transformPosition, Quaternion transformRotation)
		{
		}

		[Token(Token = "0x600354B")]
		[Address(RVA = "0x135870C", Offset = "0x135870C", VA = "0x135870C", Slot = "6")]
		public override void Read(UdpPacket packet)
		{
		}

		[Token(Token = "0x600354C")]
		[Address(RVA = "0x135877C", Offset = "0x135877C", VA = "0x135877C", Slot = "7")]
		public override void Write(UdpPacket packet)
		{
		}
	}
	[Token(Token = "0x20008D4")]
	public class CabinMechanismEventToken : CabinProxyEventToken
	{
		[Token(Token = "0x1700096A")]
		public int Trigger
		{
			[Token(Token = "0x600354D")]
			[Address(RVA = "0x13587E4", Offset = "0x13587E4", VA = "0x13587E4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600354E")]
			[Address(RVA = "0x13587EC", Offset = "0x13587EC", VA = "0x13587EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700096B")]
		public Vector3 Position
		{
			[Token(Token = "0x600354F")]
			[Address(RVA = "0x13587F4", Offset = "0x13587F4", VA = "0x13587F4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6003550")]
			[Address(RVA = "0x1358800", Offset = "0x1358800", VA = "0x1358800")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700096C")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6003551")]
			[Address(RVA = "0x135880C", Offset = "0x135880C", VA = "0x135880C")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6003552")]
			[Address(RVA = "0x1358818", Offset = "0x1358818", VA = "0x1358818")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6003553")]
		[Address(RVA = "0x1358824", Offset = "0x1358824", VA = "0x1358824")]
		public CabinMechanismEventToken()
		{
		}

		[Token(Token = "0x6003554")]
		[Address(RVA = "0x135882C", Offset = "0x135882C", VA = "0x135882C")]
		public CabinMechanismEventToken(Guid sceneId, AbstractTriggeredMechanism.Trigger trigger, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6003555")]
		[Address(RVA = "0x13588B4", Offset = "0x13588B4", VA = "0x13588B4", Slot = "6")]
		public override void Read(UdpPacket packet)
		{
		}

		[Token(Token = "0x6003556")]
		[Address(RVA = "0x1358914", Offset = "0x1358914", VA = "0x1358914", Slot = "7")]
		public override void Write(UdpPacket packet)
		{
		}
	}
	[Token(Token = "0x20008D5")]
	public class CabinProxyEventToken : IProtocolToken
	{
		[Token(Token = "0x1700096D")]
		internal Guid SceneId
		{
			[Token(Token = "0x6003557")]
			[Address(RVA = "0x1358970", Offset = "0x1358970", VA = "0x1358970")]
			[CompilerGenerated]
			get
			{
				return default(Guid);
			}
			[Token(Token = "0x6003558")]
			[Address(RVA = "0x135897C", Offset = "0x135897C", VA = "0x135897C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6003559")]
		[Address(RVA = "0x1358660", Offset = "0x1358660", VA = "0x1358660")]
		public CabinProxyEventToken()
		{
		}

		[Token(Token = "0x600355A")]
		[Address(RVA = "0x13586E0", Offset = "0x13586E0", VA = "0x13586E0")]
		protected CabinProxyEventToken(Guid sceneId)
		{
		}

		[Token(Token = "0x600355B")]
		[Address(RVA = "0x1358754", Offset = "0x1358754", VA = "0x1358754", Slot = "6")]
		public virtual void Read(UdpPacket packet)
		{
		}

		[Token(Token = "0x600355C")]
		[Address(RVA = "0x13587C0", Offset = "0x13587C0", VA = "0x13587C0", Slot = "7")]
		public virtual void Write(UdpPacket packet)
		{
		}
	}
	[Token(Token = "0x20008D6")]
	public class CabinZoneEventToken : CabinProxyEventToken
	{
		[Token(Token = "0x1700096E")]
		public bool Enter
		{
			[Token(Token = "0x600355D")]
			[Address(RVA = "0x1358984", Offset = "0x1358984", VA = "0x1358984")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600355E")]
			[Address(RVA = "0x135898C", Offset = "0x135898C", VA = "0x135898C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600355F")]
		[Address(RVA = "0x1358998", Offset = "0x1358998", VA = "0x1358998")]
		public CabinZoneEventToken()
		{
		}

		[Token(Token = "0x6003560")]
		[Address(RVA = "0x13589A0", Offset = "0x13589A0", VA = "0x13589A0")]
		public CabinZoneEventToken(Guid sceneId, bool enter)
		{
		}

		[Token(Token = "0x6003561")]
		[Address(RVA = "0x13589E0", Offset = "0x13589E0", VA = "0x13589E0", Slot = "6")]
		public override void Read(UdpPacket packet)
		{
		}

		[Token(Token = "0x6003562")]
		[Address(RVA = "0x1358A1C", Offset = "0x1358A1C", VA = "0x1358A1C", Slot = "7")]
		public override void Write(UdpPacket packet)
		{
		}
	}
	[Token(Token = "0x20008D7")]
	public class MultiplayerSimpleTestHarness : GlobalEventListener, ICoreObjectOverride
	{
		[Token(Token = "0x20008D8")]
		private enum TestMode
		{
			[Token(Token = "0x4002B46")]
			UserSelect,
			[Token(Token = "0x4002B47")]
			ServerHost,
			[Token(Token = "0x4002B48")]
			ServerHeadless,
			[Token(Token = "0x4002B49")]
			Client,
			[Token(Token = "0x4002B4A")]
			SinglePlayer
		}

		[Token(Token = "0x20008D9")]
		private enum TestPlayerType
		{
			[Token(Token = "0x4002B4C")]
			NoPlayer,
			[Token(Token = "0x4002B4D")]
			UseTestPlayer,
			[Token(Token = "0x4002B4E")]
			UseVrPlayer
		}

		[Token(Token = "0x20008DA")]
		public class state_WaitForSelection : BaseStateAttachedLogic
		{
			[Token(Token = "0x4002B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MultiplayerSimpleTestHarness _testHarness;

			[Token(Token = "0x600357C")]
			[Address(RVA = "0x135AB20", Offset = "0x135AB20", VA = "0x135AB20", Slot = "9")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600357D")]
			[Address(RVA = "0x135ACA8", Offset = "0x135ACA8", VA = "0x135ACA8", Slot = "12")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600357E")]
			[Address(RVA = "0x135ADB4", Offset = "0x135ADB4", VA = "0x135ADB4")]
			private void HandleSelectionMade()
			{
			}

			[Token(Token = "0x600357F")]
			[Address(RVA = "0x135AE04", Offset = "0x135AE04", VA = "0x135AE04")]
			public state_WaitForSelection()
			{
			}
		}

		[Token(Token = "0x20008DB")]
		[CompilerGenerated]
		private sealed class <LoadSupportScenesAsync>d__49 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MultiplayerSimpleTestHarness <>4__this;

			[Token(Token = "0x4002B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private string[] <>7__wrap1;

			[Token(Token = "0x4002B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <>7__wrap2;

			[Token(Token = "0x17000972")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6003583")]
				[Address(RVA = "0x135AFE4", Offset = "0x135AFE4", VA = "0x135AFE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000973")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003585")]
				[Address(RVA = "0x135B02C", Offset = "0x135B02C", VA = "0x135B02C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003580")]
			[Address(RVA = "0x135A2F0", Offset = "0x135A2F0", VA = "0x135A2F0")]
			[DebuggerHidden]
			public <LoadSupportScenesAsync>d__49(int <>1__state)
			{
			}

			[Token(Token = "0x6003581")]
			[Address(RVA = "0x135AE0C", Offset = "0x135AE0C", VA = "0x135AE0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6003582")]
			[Address(RVA = "0x135AE10", Offset = "0x135AE10", VA = "0x135AE10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6003584")]
			[Address(RVA = "0x135AFEC", Offset = "0x135AFEC", VA = "0x135AFEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string _sceneToLoad;

		[Token(Token = "0x4002B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static MultiplayerSimpleTestHarness _singleton;

		[Token(Token = "0x4002B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Action OnSelectionMade;

		[Token(Token = "0x4002B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action OnSceneLoaded;

		[Token(Token = "0x4002B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TestMode _mode;

		[Token(Token = "0x4002B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Session name to use when testing, if left blank the device name will be used.")]
		[SerializeField]
		private string _sessionName;

		[Token(Token = "0x4002B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private GameObject _canvas;

		[Token(Token = "0x4002B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject _buttonsPanel;

		[Token(Token = "0x4002B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _infoPanel;

		[Token(Token = "0x4002B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Test Player")]
		[SerializeField]
		private TestPlayerType m_testPlayerMode;

		[Token(Token = "0x4002B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject m_testPlayerCameraRoot;

		[Token(Token = "0x4002B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject m_testPlayerSupportComponents;

		[Token(Token = "0x4002B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Scenes containg supporting funtionality/prefabs required for test scenes to work.")]
		[ScenePicker]
		[SerializeField]
		private string[] m_testGameplaySupportScenes;

		[Token(Token = "0x4002B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("Enable the system that allows you to set a move to position for zombies, overriding AI.")]
		[SerializeField]
		private bool m_enableMoveTo;

		[Token(Token = "0x4002B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BoltConfig _config;

		[Token(Token = "0x4002B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _connectingToSession;

		[Token(Token = "0x4002B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool _scenesLoaded;

		[Token(Token = "0x4002B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool _selectionMade;

		[Token(Token = "0x4002B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		private bool m_networkingEnabled;

		[Token(Token = "0x4002B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NetworkTestPlayerCreator m_playerCreator;

		[Token(Token = "0x4002B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool m_testServerLoadSecond;

		[Token(Token = "0x1700096F")]
		public static bool disabled
		{
			[Token(Token = "0x6003563")]
			[Address(RVA = "0x1358A50", Offset = "0x1358A50", VA = "0x1358A50")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003564")]
			[Address(RVA = "0x1358A98", Offset = "0x1358A98", VA = "0x1358A98")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000970")]
		private string sessionName
		{
			[Token(Token = "0x6003565")]
			[Address(RVA = "0x1358AE4", Offset = "0x1358AE4", VA = "0x1358AE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000971")]
		private bool ICoreObjectOverride.InstantiateCore
		{
			[Token(Token = "0x6003567")]
			[Address(RVA = "0x1358BD4", Offset = "0x1358BD4", VA = "0x1358BD4", Slot = "252")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6003566")]
		[Address(RVA = "0x1358B14", Offset = "0x1358B14", VA = "0x1358B14")]
		[AutoInitializeStatics]
		private static void ResetStatics()
		{
		}

		[Token(Token = "0x6003568")]
		[Address(RVA = "0x1358BE4", Offset = "0x1358BE4", VA = "0x1358BE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003569")]
		[Address(RVA = "0x1358EF0", Offset = "0x1358EF0", VA = "0x1358EF0")]
		private void Start()
		{
		}

		[Token(Token = "0x600356A")]
		[Address(RVA = "0x1358F78", Offset = "0x1358F78", VA = "0x1358F78")]
		public void CheckAutoMode()
		{
		}

		[Token(Token = "0x600356B")]
		[Address(RVA = "0x1359174", Offset = "0x1359174", VA = "0x1359174")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600356C")]
		[Address(RVA = "0x1358FFC", Offset = "0x1358FFC", VA = "0x1358FFC")]
		public void StartServer(bool headless = false)
		{
		}

		[Token(Token = "0x600356D")]
		[Address(RVA = "0x135913C", Offset = "0x135913C", VA = "0x135913C")]
		public void StartClient()
		{
		}

		[Token(Token = "0x600356E")]
		[Address(RVA = "0x1359158", Offset = "0x1359158", VA = "0x1359158")]
		public void StartSolo()
		{
		}

		[Token(Token = "0x600356F")]
		[Address(RVA = "0x1359A4C", Offset = "0x1359A4C", VA = "0x1359A4C")]
		private void PrepBoltStart()
		{
		}

		[Token(Token = "0x6003570")]
		[Address(RVA = "0x1359AE0", Offset = "0x1359AE0", VA = "0x1359AE0", Slot = "11")]
		public override void BoltStartBegin()
		{
		}

		[Token(Token = "0x6003571")]
		[Address(RVA = "0x1359AE8", Offset = "0x1359AE8", VA = "0x1359AE8", Slot = "12")]
		public override void BoltStartDone()
		{
		}

		[Token(Token = "0x6003572")]
		[Address(RVA = "0x1359CD0", Offset = "0x1359CD0", VA = "0x1359CD0", Slot = "14")]
		public override void BoltStartFailed(UdpConnectionDisconnectReason disconnectReason)
		{
		}

		[Token(Token = "0x6003573")]
		[Address(RVA = "0x1359CD8", Offset = "0x1359CD8", VA = "0x1359CD8", Slot = "43")]
		public override void SessionConnectFailed(UdpSession session, IProtocolToken token, UdpSessionError errorReason)
		{
		}

		[Token(Token = "0x6003574")]
		[Address(RVA = "0x1359CE0", Offset = "0x1359CE0", VA = "0x1359CE0", Slot = "38")]
		public override void SessionCreatedOrUpdated(UdpSession session)
		{
		}

		[Token(Token = "0x6003575")]
		[Address(RVA = "0x1359CFC", Offset = "0x1359CFC", VA = "0x1359CFC", Slot = "36")]
		public override void SessionListUpdated(Map<Guid, UdpSession> sessionList)
		{
		}

		[Token(Token = "0x6003576")]
		[Address(RVA = "0x135A184", Offset = "0x135A184", VA = "0x135A184", Slot = "17")]
		public override void Connected(BoltConnection connection)
		{
		}

		[Token(Token = "0x6003577")]
		[Address(RVA = "0x135A274", Offset = "0x135A274", VA = "0x135A274", Slot = "24")]
		public override void Disconnected(BoltConnection connection)
		{
		}

		[Token(Token = "0x6003578")]
		[Address(RVA = "0x1359C98", Offset = "0x1359C98", VA = "0x1359C98")]
		private void LoadSupportScenes()
		{
		}

		[Token(Token = "0x6003579")]
		[Address(RVA = "0x135A27C", Offset = "0x135A27C", VA = "0x135A27C")]
		[IteratorStateMachine(typeof(<LoadSupportScenesAsync>d__49))]
		private IEnumerator LoadSupportScenesAsync()
		{
			return null;
		}

		[Token(Token = "0x600357A")]
		[Address(RVA = "0x135A318", Offset = "0x135A318", VA = "0x135A318")]
		private void HandleScenesLoaded()
		{
		}

		[Token(Token = "0x600357B")]
		[Address(RVA = "0x135AA80", Offset = "0x135AA80", VA = "0x135AA80")]
		public MultiplayerSimpleTestHarness()
		{
		}
	}
}
namespace Cabin.Network.Testing
{
	[Token(Token = "0x20008DC")]
	public interface INetworkPlayerCreator
	{
		[Token(Token = "0x6003586")]
		void CreateServerPlayer();

		[Token(Token = "0x6003587")]
		void CreateClientPlayer(BoltConnection connection);
	}
	[Token(Token = "0x20008DD")]
	public class NetworkTestPlayerCreator : MonoBehaviour, INetworkPlayerCreator
	{
		[Token(Token = "0x4002B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NetworkTestPlayerCreator _instance;

		[Token(Token = "0x4002B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[UnityEngine.Tooltip("Test player prefab to spawn on a client. This will be owned by the client which is different to how game players work.")]
		private GameObject m_testPlayerPrefab;

		[Token(Token = "0x4002B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Fallback spawn poition for test player if no PlayerSpawnPoint component or gameobject with PrimarySpawn tag are not found.")]
		[SerializeField]
		private Transform m_spawnPoint;

		[Token(Token = "0x6003588")]
		[Address(RVA = "0x135B034", Offset = "0x135B034", VA = "0x135B034")]
		[AutoInitializeStatics]
		private static void ResetStatics()
		{
		}

		[Token(Token = "0x6003589")]
		[Address(RVA = "0x135B088", Offset = "0x135B088", VA = "0x135B088")]
		private void Awake()
		{
		}

		[Token(Token = "0x600358A")]
		[Address(RVA = "0x135B0E0", Offset = "0x135B0E0", VA = "0x135B0E0")]
		private void Start()
		{
		}

		[Token(Token = "0x600358B")]
		[Address(RVA = "0x135B128", Offset = "0x135B128", VA = "0x135B128")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600358C")]
		[Address(RVA = "0x135B170", Offset = "0x135B170", VA = "0x135B170", Slot = "4")]
		public void CreateServerPlayer()
		{
		}

		[Token(Token = "0x600358D")]
		[Address(RVA = "0x135B174", Offset = "0x135B174", VA = "0x135B174", Slot = "5")]
		public void CreateClientPlayer(BoltConnection connection)
		{
		}

		[Token(Token = "0x600358E")]
		[Address(RVA = "0x135A7CC", Offset = "0x135A7CC", VA = "0x135A7CC")]
		public void CreateTestPlayer()
		{
		}

		[Token(Token = "0x600358F")]
		[Address(RVA = "0x135B178", Offset = "0x135B178", VA = "0x135B178")]
		public NetworkTestPlayerCreator()
		{
		}
	}
}
namespace Cabin.Network.Interactables
{
	[Token(Token = "0x20008DE")]
	public class CabinInteractableTransformProxy : CabinSceneProxy
	{
		[Token(Token = "0x6003590")]
		[Address(RVA = "0x135B180", Offset = "0x135B180", VA = "0x135B180")]
		public CabinInteractableTransformProxy()
		{
		}
	}
	[Token(Token = "0x20008DF")]
	public class CabinMechanismProxy : CabinSceneProxy
	{
		[Token(Token = "0x6003591")]
		[Address(RVA = "0x135B190", Offset = "0x135B190", VA = "0x135B190")]
		public CabinMechanismProxy()
		{
		}
	}
	[Token(Token = "0x20008E0")]
	[RequireComponent(typeof(MechanismKey))]
	public class CabinNetworkedMechanismKey : NetworkVrItem<IKeyState>
	{
		[Token(Token = "0x4002B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private MechanismKey m_key;

		[Token(Token = "0x6003592")]
		[Address(RVA = "0x135B198", Offset = "0x135B198", VA = "0x135B198", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6003593")]
		[Address(RVA = "0x135B3F0", Offset = "0x135B3F0", VA = "0x135B3F0", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x6003594")]
		[Address(RVA = "0x135B4C4", Offset = "0x135B4C4", VA = "0x135B4C4")]
		private void OnControlLost()
		{
		}

		[Token(Token = "0x6003595")]
		[Address(RVA = "0x135B68C", Offset = "0x135B68C", VA = "0x135B68C")]
		public CabinNetworkedMechanismKey()
		{
		}
	}
	[Token(Token = "0x20008E1")]
	public class CabinSceneProxy : MonoBehaviour
	{
		[Token(Token = "0x6003596")]
		[Address(RVA = "0x135B188", Offset = "0x135B188", VA = "0x135B188")]
		public CabinSceneProxy()
		{
		}
	}
	[Token(Token = "0x20008E2")]
	public interface INetworkedProxy
	{
		[Token(Token = "0x6003597")]
		void InitializeServerProxy(CabinSceneProxy cabinSceneProxy, Guid sceneId);

		[Token(Token = "0x6003598")]
		CabinNetworkEventType GetNetworkEventType();
	}
}
namespace Cabin.Animation
{
	[Serializable]
	[Token(Token = "0x20008E3")]
	[CreateAssetMenu(menuName = "Cabin/Animation/Animation Data")]
	public class AnimationData : ScriptableObject
	{
		[Token(Token = "0x4002B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<AnimationClipData> clipData;

		[Token(Token = "0x4002B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RuntimeAnimatorController controller;

		[Token(Token = "0x4002B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<BlendTreeInfo> blendTreeInfo;

		[Token(Token = "0x4002B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[UnityEngine.Tooltip("Used for debuggign, if left as -1, then a random animatio nwill be selected, otherwise the index of the animation will be selected.")]
		public int randomAnimationIndex;

		[Token(Token = "0x6003599")]
		[Address(RVA = "0x135B6D4", Offset = "0x135B6D4", VA = "0x135B6D4")]
		public int GetAnimationsCount(string path)
		{
			return default(int);
		}

		[Token(Token = "0x600359A")]
		[Address(RVA = "0x135B868", Offset = "0x135B868", VA = "0x135B868")]
		public int GetAnimationsCount(int hash)
		{
			return default(int);
		}

		[Token(Token = "0x600359B")]
		[Address(RVA = "0x135B9C8", Offset = "0x135B9C8", VA = "0x135B9C8")]
		public int GetRandomAnimationIndex(string path)
		{
			return default(int);
		}

		[Token(Token = "0x600359C")]
		[Address(RVA = "0x135B9E4", Offset = "0x135B9E4", VA = "0x135B9E4")]
		public int GetRandomAnimationIndex(int hash)
		{
			return default(int);
		}

		[Token(Token = "0x600359D")]
		[Address(RVA = "0x135BA00", Offset = "0x135BA00", VA = "0x135BA00")]
		public AnimationClipData Get(Animator animator)
		{
			return null;
		}

		[Token(Token = "0x600359E")]
		[Address(RVA = "0x135BB84", Offset = "0x135BB84", VA = "0x135BB84")]
		public AnimationClipData Get(AnimationClip clip)
		{
			return null;
		}

		[Token(Token = "0x600359F")]
		[Address(RVA = "0x135BC74", Offset = "0x135BC74", VA = "0x135BC74")]
		public void Initialize(Animator animator)
		{
		}

		[Token(Token = "0x60035A0")]
		[Address(RVA = "0x135BC78", Offset = "0x135BC78", VA = "0x135BC78")]
		public AnimationData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008E6")]
	public class AnimationClipData
	{
		[Token(Token = "0x4002B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationClip clip;

		[Token(Token = "0x4002B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private string fullStatePath;

		[Token(Token = "0x4002B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<MatchTargetData> matchData;

		[Token(Token = "0x17000974")]
		private int animationHash
		{
			[Token(Token = "0x60035A5")]
			[Address(RVA = "0x135BD78", Offset = "0x135BD78", VA = "0x135BD78")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60035A6")]
			[Address(RVA = "0x135BD80", Offset = "0x135BD80", VA = "0x135BD80")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60035A7")]
		[Address(RVA = "0x135BD88", Offset = "0x135BD88", VA = "0x135BD88")]
		public AnimationClipData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008E7")]
	public class MatchTargetData
	{
		[Token(Token = "0x4002B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float normalizedStartTime;

		[Token(Token = "0x4002B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float normalizedEndTime;

		[Token(Token = "0x4002B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 positionMask;

		[Token(Token = "0x4002B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationWeight;

		[Token(Token = "0x60035A8")]
		[Address(RVA = "0x135BD90", Offset = "0x135BD90", VA = "0x135BD90")]
		public MatchTargetData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008E8")]
	public class BlendTreeInfo
	{
		[Token(Token = "0x4002B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4002B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int hash;

		[Token(Token = "0x4002B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int count;

		[Token(Token = "0x60035A9")]
		[Address(RVA = "0x135BDF4", Offset = "0x135BDF4", VA = "0x135BDF4")]
		public BlendTreeInfo(string name, int id, int maxCount)
		{
		}
	}
	[Token(Token = "0x20008E9")]
	public static class AnimationHelpers
	{
		[Token(Token = "0x60035AA")]
		[Address(RVA = "0x135BE3C", Offset = "0x135BE3C", VA = "0x135BE3C")]
		public static AnimatorStateInfo GetStateInfo(this Animator animator)
		{
			return default(AnimatorStateInfo);
		}

		[Token(Token = "0x60035AB")]
		[Address(RVA = "0x135BEB4", Offset = "0x135BEB4", VA = "0x135BEB4")]
		public static bool IsInState(this Animator animator, int stateHash)
		{
			return default(bool);
		}

		[Token(Token = "0x60035AC")]
		[Address(RVA = "0x135BEF4", Offset = "0x135BEF4", VA = "0x135BEF4")]
		public static int GetStateHash(this Animator animator)
		{
			return default(int);
		}

		[Token(Token = "0x60035AD")]
		[Address(RVA = "0x135BF80", Offset = "0x135BF80", VA = "0x135BF80")]
		public static bool IsFinished(this Animator animator, int stateHash, float normalizedEndTime)
		{
			return default(bool);
		}

		[Token(Token = "0x60035AE")]
		[Address(RVA = "0x135BFE4", Offset = "0x135BFE4", VA = "0x135BFE4")]
		public static float GetAnimationNormalizedTime(this Animator animator, int stateHash)
		{
			return default(float);
		}

		[Token(Token = "0x60035AF")]
		[Address(RVA = "0x135C034", Offset = "0x135C034", VA = "0x135C034")]
		public static bool IsFixedTimeFromEnd(this Animator animator, int stateHash, float endTimeDuration)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B0")]
		[Address(RVA = "0x135C0E0", Offset = "0x135C0E0", VA = "0x135C0E0")]
		public static float RemainingTime(this Animator animator, int stateId)
		{
			return default(float);
		}

		[Token(Token = "0x60035B1")]
		[Address(RVA = "0x135C154", Offset = "0x135C154", VA = "0x135C154")]
		public static bool IsClipPastNormalizedTime(this Animator animator, int pathHash, float normalizedTime)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B2")]
		[Address(RVA = "0x135C160", Offset = "0x135C160", VA = "0x135C160")]
		public static bool IsClipPastNormalizedTime(this Animator animator, int layerIndex, int pathHash, float normalizedTime)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B3")]
		[Address(RVA = "0x135C2C0", Offset = "0x135C2C0", VA = "0x135C2C0")]
		public static bool IsClipPastTime(this Animator animator, int pathHash, float time)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B4")]
		[Address(RVA = "0x135C2CC", Offset = "0x135C2CC", VA = "0x135C2CC")]
		public static bool IsClipPastTime(this Animator animator, int layerIndex, int pathHash, float time)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B5")]
		[Address(RVA = "0x135C414", Offset = "0x135C414", VA = "0x135C414")]
		public static float NormalizedClipTime(this Animator animator, int layerIndex, int pathHash)
		{
			return default(float);
		}

		[Token(Token = "0x60035B6")]
		[Address(RVA = "0x135C55C", Offset = "0x135C55C", VA = "0x135C55C")]
		public static bool IsClipPlaying(this Animator animator, int pathHash, int layerIndex = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B7")]
		[Address(RVA = "0x135C61C", Offset = "0x135C61C", VA = "0x135C61C")]
		public static bool IsInTaggedState(this Animator animator, string tag, int layerIndex = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B8")]
		[Address(RVA = "0x135C6D0", Offset = "0x135C6D0", VA = "0x135C6D0")]
		public static bool IsInTaggedState(this Animator animator, string tag, float maxNormalizedTime, int layerIndex = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60035B9")]
		public static T GetBehaviour<T>(this Animator animator, int fullPathHash) where T : StateMachineBehaviour
		{
			return null;
		}
	}
	[Token(Token = "0x20008EA")]
	[RequireComponent(typeof(Animator))]
	public class AnimationMixer : CachedMonoBehaviour
	{
		[Token(Token = "0x20008EB")]
		public class ClipState
		{
			[Token(Token = "0x4002B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AnimationClip clip;

			[Token(Token = "0x4002B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int index;

			[Token(Token = "0x4002B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float weight;

			[Token(Token = "0x4002B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float blendDuration;

			[Token(Token = "0x4002B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool forceStop;

			[Token(Token = "0x4002B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationClipPlayable playable;

			[Token(Token = "0x17000976")]
			public bool isPlaying
			{
				[Token(Token = "0x60035C8")]
				[Address(RVA = "0x135D558", Offset = "0x135D558", VA = "0x135D558")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60035C9")]
			[Address(RVA = "0x135D5C0", Offset = "0x135D5C0", VA = "0x135D5C0")]
			public ClipState(AnimationClip clip, float blendDuration)
			{
			}
		}

		[Token(Token = "0x20008EC")]
		public class CustomMixerBehaviour : PlayableBehaviour
		{
			[Token(Token = "0x4002B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private AnimationMixerPlayable mixerPlayable;

			[Token(Token = "0x4002B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private PlayableGraph m_graph;

			[Token(Token = "0x4002B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AnimationPlayableOutput graphOutput;

			[Token(Token = "0x4002B79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private LinkedList<ClipState> m_activeClips;

			[Token(Token = "0x4002B7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Queue<ClipState> m_queuedClips;

			[Token(Token = "0x17000977")]
			private int MinMixerInputs
			{
				[Token(Token = "0x60035CA")]
				[Address(RVA = "0x135D610", Offset = "0x135D610", VA = "0x135D610")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000978")]
			private bool IsNearlyFinished
			{
				[Token(Token = "0x60035CB")]
				[Address(RVA = "0x135D618", Offset = "0x135D618", VA = "0x135D618")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000979")]
			public bool PlayingClip
			{
				[Token(Token = "0x60035CE")]
				[Address(RVA = "0x135C7E8", Offset = "0x135C7E8", VA = "0x135C7E8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60035CC")]
			[Address(RVA = "0x135C84C", Offset = "0x135C84C", VA = "0x135C84C")]
			public bool IsPlayingClip(AnimationClip clip)
			{
				return default(bool);
			}

			[Token(Token = "0x60035CD")]
			[Address(RVA = "0x135CC5C", Offset = "0x135CC5C", VA = "0x135CC5C")]
			public void Initialize(Playable owner, PlayableGraph graph, Animator animator, float playbackSpeed)
			{
			}

			[Token(Token = "0x60035CF")]
			[Address(RVA = "0x135CEE4", Offset = "0x135CEE4", VA = "0x135CEE4")]
			public ClipState Play(AnimationClip clip, float blendDuration)
			{
				return null;
			}

			[Token(Token = "0x60035D0")]
			[Address(RVA = "0x135D6FC", Offset = "0x135D6FC", VA = "0x135D6FC")]
			private void Play(ClipState state)
			{
			}

			[Token(Token = "0x60035D1")]
			[Address(RVA = "0x135CFA0", Offset = "0x135CFA0", VA = "0x135CFA0")]
			public ClipState Enqueue(AnimationClip clip, float blendDuration)
			{
				return null;
			}

			[Token(Token = "0x60035D2")]
			[Address(RVA = "0x135D87C", Offset = "0x135D87C", VA = "0x135D87C")]
			public void Connect(Playable playable)
			{
			}

			[Token(Token = "0x60035D3")]
			[Address(RVA = "0x135D968", Offset = "0x135D968", VA = "0x135D968", Slot = "19")]
			public override void PrepareFrame(Playable owner, FrameData info)
			{
			}

			[Token(Token = "0x60035D4")]
			[Address(RVA = "0x135D254", Offset = "0x135D254", VA = "0x135D254")]
			public void Stop()
			{
			}

			[Token(Token = "0x60035D5")]
			[Address(RVA = "0x135D3B8", Offset = "0x135D3B8", VA = "0x135D3B8")]
			public void ClearQueue()
			{
			}

			[Token(Token = "0x60035D6")]
			[Address(RVA = "0x135D07C", Offset = "0x135D07C", VA = "0x135D07C")]
			public bool IsPlaying(AnimationClip clip)
			{
				return default(bool);
			}

			[Token(Token = "0x60035D7")]
			[Address(RVA = "0x135DE44", Offset = "0x135DE44", VA = "0x135DE44")]
			public CustomMixerBehaviour()
			{
			}
		}

		[Token(Token = "0x4002B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_playbackSpeed;

		[Token(Token = "0x4002B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Test Data")]
		public List<AnimationClip> testClips;

		[Token(Token = "0x4002B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public RuntimeAnimatorController testController;

		[Token(Token = "0x4002B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayableGraph m_playableGraph;

		[Token(Token = "0x4002B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CustomMixerBehaviour m_mixerNode;

		[Token(Token = "0x4002B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Animator m_animator;

		[Token(Token = "0x17000975")]
		public bool IsPlayingAClip
		{
			[Token(Token = "0x60035BA")]
			[Address(RVA = "0x135C7D8", Offset = "0x135C7D8", VA = "0x135C7D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60035BB")]
		[Address(RVA = "0x135C83C", Offset = "0x135C83C", VA = "0x135C83C")]
		public bool IsPlayingClip(AnimationClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x60035BC")]
		[Address(RVA = "0x135C9F4", Offset = "0x135C9F4", VA = "0x135C9F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60035BD")]
		[Address(RVA = "0x135CC38", Offset = "0x135CC38", VA = "0x135CC38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60035BE")]
		[Address(RVA = "0x135C9F8", Offset = "0x135C9F8", VA = "0x135C9F8")]
		private void BuildGraph()
		{
		}

		[Token(Token = "0x60035BF")]
		[Address(RVA = "0x135CECC", Offset = "0x135CECC", VA = "0x135CECC")]
		public ClipState Play(AnimationClip clip, float blendDuration)
		{
			return null;
		}

		[Token(Token = "0x60035C0")]
		[Address(RVA = "0x135CF88", Offset = "0x135CF88", VA = "0x135CF88")]
		public ClipState QueueClip(AnimationClip clip, float blendDuration)
		{
			return null;
		}

		[Token(Token = "0x60035C1")]
		[Address(RVA = "0x135D064", Offset = "0x135D064", VA = "0x135D064")]
		public bool IsPlaying(AnimationClip clip)
		{
			return default(bool);
		}

		[Token(Token = "0x60035C2")]
		[Address(RVA = "0x135D23C", Offset = "0x135D23C", VA = "0x135D23C")]
		public void Stop()
		{
		}

		[Token(Token = "0x60035C3")]
		[Address(RVA = "0x135D3A0", Offset = "0x135D3A0", VA = "0x135D3A0")]
		public void ClearQueue()
		{
		}

		[Token(Token = "0x60035C4")]
		[Address(RVA = "0x135D408", Offset = "0x135D408", VA = "0x135D408")]
		[ContextMenu("Play Test Clip")]
		public void PlayTestClip()
		{
		}

		[Token(Token = "0x60035C5")]
		[Address(RVA = "0x135D49C", Offset = "0x135D49C", VA = "0x135D49C")]
		public void QueueTestClip()
		{
		}

		[Token(Token = "0x60035C6")]
		[Address(RVA = "0x135D530", Offset = "0x135D530", VA = "0x135D530")]
		public void StopClips()
		{
		}

		[Token(Token = "0x60035C7")]
		[Address(RVA = "0x135D548", Offset = "0x135D548", VA = "0x135D548")]
		public AnimationMixer()
		{
		}
	}
	[Token(Token = "0x20008ED")]
	public class AnimatorVariants : MonoBehaviour
	{
		[Token(Token = "0x20008EE")]
		public enum Mode
		{
			[Token(Token = "0x4002B81")]
			OnEnable,
			[Token(Token = "0x4002B82")]
			OnAwake,
			[Token(Token = "0x4002B83")]
			Manual
		}

		[Token(Token = "0x4002B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_permutation;

		[Token(Token = "0x4002B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("How should an animation variant be selected, either on Awake or manually by another script.")]
		[SerializeField]
		private Mode m_selectionMode;

		[Token(Token = "0x4002B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<RuntimeAnimatorController> m_runtimeControllers;

		[Token(Token = "0x4002B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_bound;

		[Token(Token = "0x4002B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int m_selectedIndex;

		[Token(Token = "0x1700097A")]
		public int selectedIndex
		{
			[Token(Token = "0x60035D8")]
			[Address(RVA = "0x135DECC", Offset = "0x135DECC", VA = "0x135DECC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60035D9")]
			[Address(RVA = "0x135DED4", Offset = "0x135DED4", VA = "0x135DED4")]
			set
			{
			}
		}

		[Token(Token = "0x60035DA")]
		[Address(RVA = "0x135DFB8", Offset = "0x135DFB8", VA = "0x135DFB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60035DB")]
		[Address(RVA = "0x135DFBC", Offset = "0x135DFBC", VA = "0x135DFBC")]
		public void SelectAnimatorController()
		{
		}

		[Token(Token = "0x60035DC")]
		[Address(RVA = "0x135E0B8", Offset = "0x135E0B8", VA = "0x135E0B8")]
		public AnimatorVariants()
		{
		}
	}
}
namespace Cabin.Actors
{
	[Token(Token = "0x20008EF")]
	public enum EnemyType
	{
		[Token(Token = "0x4002B85")]
		BasicZombie,
		[Token(Token = "0x4002B86")]
		FastZombie,
		[Token(Token = "0x4002B87")]
		ForestPete,
		[Token(Token = "0x4002B88")]
		Spitter,
		[Token(Token = "0x4002B89")]
		Exploder,
		[Token(Token = "0x4002B8A")]
		Unknown
	}
	[Token(Token = "0x20008F0")]
	public abstract class Actor : EntityEventListener<IActorBaseState>, IAgent, IOwner, IMoveable, IHealthStatusProvider, IPoolable, ITargetHandler, ITokenConsumer, IDispersible, IFactionMember, IEnemyType, IHsmLiteMutator, ISectorProvider
	{
		[Serializable]
		[Token(Token = "0x20008F1")]
		public class StateMutation
		{
			[Token(Token = "0x4002BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public StateDescription originalState;

			[Token(Token = "0x4002BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public StateDescription replacementState;

			[Token(Token = "0x600367D")]
			[Address(RVA = "0x1366A18", Offset = "0x1366A18", VA = "0x1366A18")]
			public StateMutation()
			{
			}
		}

		[Token(Token = "0x20008F2")]
		public enum StrafeMode
		{
			[Token(Token = "0x4002BFD")]
			undefined,
			[Token(Token = "0x4002BFE")]
			forward,
			[Token(Token = "0x4002BFF")]
			backward
		}

		[Token(Token = "0x20008F3")]
		public class Actor_Attack : Actor_BaseState
		{
			[Token(Token = "0x4002C00")]
			private const string c_animationAttackPrefix = "attack.";

			[Token(Token = "0x4002C01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private int m_animHash;

			[Token(Token = "0x4002C02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private string m_selectedAnim;

			[Token(Token = "0x600367E")]
			[Address(RVA = "0x1366A20", Offset = "0x1366A20", VA = "0x1366A20", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600367F")]
			[Address(RVA = "0x1366C9C", Offset = "0x1366C9C", VA = "0x1366C9C", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003680")]
			[Address(RVA = "0x1367214", Offset = "0x1367214", VA = "0x1367214", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003681")]
			[Address(RVA = "0x1366DA8", Offset = "0x1366DA8", VA = "0x1366DA8")]
			private void Turn()
			{
			}

			[Token(Token = "0x6003682")]
			[Address(RVA = "0x13672BC", Offset = "0x13672BC", VA = "0x13672BC")]
			private Vector3 SelectDesiredDirection()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6003683")]
			[Address(RVA = "0x1367438", Offset = "0x1367438", VA = "0x1367438")]
			public Actor_Attack()
			{
			}
		}

		[Token(Token = "0x20008F4")]
		public class Actor_Blocked : Actor_BaseState
		{
			[Token(Token = "0x4002C03")]
			private const string c_animationAttackFailPrefix = "block.";

			[Token(Token = "0x4002C04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private int m_animHash;

			[Token(Token = "0x6003684")]
			[Address(RVA = "0x1367484", Offset = "0x1367484", VA = "0x1367484", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003685")]
			[Address(RVA = "0x1367578", Offset = "0x1367578", VA = "0x1367578", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003686")]
			[Address(RVA = "0x13675FC", Offset = "0x13675FC", VA = "0x13675FC", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003687")]
			[Address(RVA = "0x1367604", Offset = "0x1367604", VA = "0x1367604")]
			public Actor_Blocked()
			{
			}
		}

		[Token(Token = "0x20008F5")]
		public class Actor_BaseState : NestedState<Actor>
		{
			[Token(Token = "0x4002C05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			protected Actor _actor;

			[Token(Token = "0x4002C06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			protected Zombie m_zombie;

			[Token(Token = "0x4002C07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			protected IMoveable _moveable;

			[Token(Token = "0x4002C08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			protected Animator _animator;

			[Token(Token = "0x4002C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			protected AnimatorCullingMode m_defaultAnimatorCullingMode;

			[Token(Token = "0x6003688")]
			[Address(RVA = "0x1367608", Offset = "0x1367608", VA = "0x1367608", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x6003689")]
			[Address(RVA = "0x136755C", Offset = "0x136755C", VA = "0x136755C")]
			protected void CrossFade(int stateHash, float blendTime, float offset)
			{
			}

			[Token(Token = "0x600368A")]
			[Address(RVA = "0x1366C7C", Offset = "0x1366C7C", VA = "0x1366C7C")]
			protected void CrossFade(int stateHash, float blendTime)
			{
			}

			[Token(Token = "0x600368B")]
			[Address(RVA = "0x1367784", Offset = "0x1367784", VA = "0x1367784")]
			protected void PlayAnim(int stateHash)
			{
			}

			[Token(Token = "0x600368C")]
			[Address(RVA = "0x1366C38", Offset = "0x1366C38", VA = "0x1366C38", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600368D")]
			[Address(RVA = "0x1367290", Offset = "0x1367290", VA = "0x1367290", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600368E")]
			[Address(RVA = "0x1366C40", Offset = "0x1366C40", VA = "0x1366C40")]
			protected void DisableAnimatorCulling()
			{
			}

			[Token(Token = "0x600368F")]
			[Address(RVA = "0x1367298", Offset = "0x1367298", VA = "0x1367298")]
			protected void RestoreDefaultAnimatorCullingMode()
			{
			}

			[Token(Token = "0x6003690")]
			[Address(RVA = "0x136743C", Offset = "0x136743C", VA = "0x136743C")]
			public Actor_BaseState()
			{
			}
		}

		[Token(Token = "0x20008F6")]
		public class Actor_MoveToListener : Actor_BaseState
		{
			[Token(Token = "0x6003691")]
			[Address(RVA = "0x13677A8", Offset = "0x13677A8", VA = "0x13677A8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003692")]
			[Address(RVA = "0x13678D8", Offset = "0x13678D8", VA = "0x13678D8", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003693")]
			[Address(RVA = "0x1367A08", Offset = "0x1367A08", VA = "0x1367A08")]
			private void HandleMoveTo(Vector3 pos)
			{
			}

			[Token(Token = "0x6003694")]
			[Address(RVA = "0x1367AD4", Offset = "0x1367AD4", VA = "0x1367AD4")]
			public Actor_MoveToListener()
			{
			}
		}

		[Token(Token = "0x20008F7")]
		public class Actor_AttackListener : Actor_BaseState
		{
			[Token(Token = "0x6003695")]
			[Address(RVA = "0x1367AD8", Offset = "0x1367AD8", VA = "0x1367AD8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003696")]
			[Address(RVA = "0x1367BE8", Offset = "0x1367BE8", VA = "0x1367BE8", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003697")]
			[Address(RVA = "0x1367CF8", Offset = "0x1367CF8", VA = "0x1367CF8")]
			private void HandleAttack()
			{
			}

			[Token(Token = "0x6003698")]
			[Address(RVA = "0x1367CFC", Offset = "0x1367CFC", VA = "0x1367CFC")]
			public Actor_AttackListener()
			{
			}
		}

		[Token(Token = "0x20008F8")]
		public class Actor_Damaged : Actor_BaseState
		{
			[Token(Token = "0x4002C0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private int _stateHash;

			[Token(Token = "0x6003699")]
			[Address(RVA = "0x1367D00", Offset = "0x1367D00", VA = "0x1367D00", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x600369A")]
			[Address(RVA = "0x1367D58", Offset = "0x1367D58", VA = "0x1367D58", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600369B")]
			[Address(RVA = "0x1367D80", Offset = "0x1367D80", VA = "0x1367D80", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600369C")]
			[Address(RVA = "0x1367E04", Offset = "0x1367E04", VA = "0x1367E04")]
			public Actor_Damaged()
			{
			}
		}

		[Token(Token = "0x20008F9")]
		public class Actor_RegisterWithCrowding : Actor_BaseState
		{
			[Token(Token = "0x600369D")]
			[Address(RVA = "0x1367E08", Offset = "0x1367E08", VA = "0x1367E08", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600369E")]
			[Address(RVA = "0x1367EC4", Offset = "0x1367EC4", VA = "0x1367EC4")]
			public Actor_RegisterWithCrowding()
			{
			}
		}

		[Token(Token = "0x20008FA")]
		public class Actor_UnRegisterWithCrowding : Actor_BaseState
		{
			[Token(Token = "0x600369F")]
			[Address(RVA = "0x1367EC8", Offset = "0x1367EC8", VA = "0x1367EC8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036A0")]
			[Address(RVA = "0x1367F84", Offset = "0x1367F84", VA = "0x1367F84")]
			public Actor_UnRegisterWithCrowding()
			{
			}
		}

		[Token(Token = "0x20008FB")]
		public class Actor_Crowd : Actor_BaseState
		{
			[Token(Token = "0x4002C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float m_timer;

			[Token(Token = "0x4002C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private new Zombie m_zombie;

			[Token(Token = "0x4002C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private bool m_crowdPositionSet;

			[Token(Token = "0x60036A1")]
			[Address(RVA = "0x1367F88", Offset = "0x1367F88", VA = "0x1367F88", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036A2")]
			[Address(RVA = "0x1368090", Offset = "0x1368090", VA = "0x1368090", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036A3")]
			[Address(RVA = "0x136839C", Offset = "0x136839C", VA = "0x136839C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036A4")]
			[Address(RVA = "0x1368410", Offset = "0x1368410", VA = "0x1368410")]
			public Actor_Crowd()
			{
			}
		}

		[Token(Token = "0x20008FC")]
		public class Actor_Despawn : Actor_BaseState
		{
			[Token(Token = "0x4002C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float m_timer;

			[Token(Token = "0x4002C0F")]
			private const float c_waitTime = 5f;

			[Token(Token = "0x4002C10")]
			private const float c_materialDetectionLength = 0.4f;

			[Token(Token = "0x4002C11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private bool m_dissolve;

			[Token(Token = "0x4002C12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private int m_animHash;

			[Token(Token = "0x60036A5")]
			[Address(RVA = "0x1368414", Offset = "0x1368414", VA = "0x1368414", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036A6")]
			[Address(RVA = "0x1368538", Offset = "0x1368538", VA = "0x1368538", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036A7")]
			[Address(RVA = "0x13685B8", Offset = "0x13685B8", VA = "0x13685B8")]
			public void ReturnToPool()
			{
			}

			[Token(Token = "0x60036A8")]
			[Address(RVA = "0x136863C", Offset = "0x136863C", VA = "0x136863C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036A9")]
			[Address(RVA = "0x1368740", Offset = "0x1368740", VA = "0x1368740")]
			public Actor_Despawn()
			{
			}
		}

		[Token(Token = "0x20008FD")]
		public class Actor_Dissolve : Actor_BaseState
		{
			[Token(Token = "0x60036AA")]
			[Address(RVA = "0x1368744", Offset = "0x1368744", VA = "0x1368744", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036AB")]
			[Address(RVA = "0x13688AC", Offset = "0x13688AC", VA = "0x13688AC")]
			private void Exit()
			{
			}

			[Token(Token = "0x60036AC")]
			[Address(RVA = "0x13688FC", Offset = "0x13688FC", VA = "0x13688FC", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036AD")]
			[Address(RVA = "0x1368A44", Offset = "0x1368A44", VA = "0x1368A44")]
			public Actor_Dissolve()
			{
			}
		}

		[Token(Token = "0x20008FE")]
		public class Actor_Engage : Actor_BaseState
		{
			[Token(Token = "0x4002C13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private bool _taunting;

			[Token(Token = "0x60036AE")]
			[Address(RVA = "0x1368A48", Offset = "0x1368A48", VA = "0x1368A48", Slot = "10")]
			public override void Restart()
			{
			}

			[Token(Token = "0x60036AF")]
			[Address(RVA = "0x1368A70", Offset = "0x1368A70", VA = "0x1368A70", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036B0")]
			[Address(RVA = "0x1368ADC", Offset = "0x1368ADC", VA = "0x1368ADC", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036B1")]
			[Address(RVA = "0x1368BE4", Offset = "0x1368BE4", VA = "0x1368BE4")]
			public Actor_Engage()
			{
			}
		}

		[Token(Token = "0x20008FF")]
		public class Actor_ExplosionDetection : Actor_BaseState
		{
			[Token(Token = "0x4002C14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float c_explodingAnimLength;

			[Token(Token = "0x60036B2")]
			[Address(RVA = "0x1368BE8", Offset = "0x1368BE8", VA = "0x1368BE8", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036B3")]
			[Address(RVA = "0x1368E88", Offset = "0x1368E88", VA = "0x1368E88")]
			public Actor_ExplosionDetection()
			{
			}
		}

		[Token(Token = "0x2000900")]
		public class Actor_SetLookAtWeight : Actor_BaseState
		{
			[Token(Token = "0x170009B9")]
			[StateConfig("Look At Weight")]
			public float LookAtWeight
			{
				[Token(Token = "0x60036B4")]
				[Address(RVA = "0x1368E94", Offset = "0x1368E94", VA = "0x1368E94")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60036B5")]
				[Address(RVA = "0x1368E9C", Offset = "0x1368E9C", VA = "0x1368E9C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60036B6")]
			[Address(RVA = "0x1368EA4", Offset = "0x1368EA4", VA = "0x1368EA4", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036B7")]
			[Address(RVA = "0x136909C", Offset = "0x136909C", VA = "0x136909C")]
			public Actor_SetLookAtWeight()
			{
			}
		}

		[Token(Token = "0x2000901")]
		public class Actor_DisableLookAt : Actor_BaseState
		{
			[Token(Token = "0x4002C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float m_defaultLookAtWeight;

			[Token(Token = "0x60036B8")]
			[Address(RVA = "0x13690A0", Offset = "0x13690A0", VA = "0x13690A0", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036B9")]
			[Address(RVA = "0x1369174", Offset = "0x1369174", VA = "0x1369174", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036BA")]
			[Address(RVA = "0x1369240", Offset = "0x1369240", VA = "0x1369240")]
			public Actor_DisableLookAt()
			{
			}
		}

		[Token(Token = "0x2000902")]
		public class Actor_HasTarget : Actor_BaseState
		{
			[Token(Token = "0x4002C17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private bool m_hasYesExit;

			[Token(Token = "0x4002C18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
			private bool m_hasNoExit;

			[Token(Token = "0x60036BB")]
			[Address(RVA = "0x1369244", Offset = "0x1369244", VA = "0x1369244", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036BC")]
			[Address(RVA = "0x13693C4", Offset = "0x13693C4", VA = "0x13693C4", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036BD")]
			[Address(RVA = "0x13692E8", Offset = "0x13692E8", VA = "0x13692E8")]
			private void PerformCheck()
			{
			}

			[Token(Token = "0x60036BE")]
			[Address(RVA = "0x136940C", Offset = "0x136940C", VA = "0x136940C")]
			public Actor_HasTarget()
			{
			}
		}

		[Token(Token = "0x2000903")]
		public class Actor_Idle : Actor_BaseState
		{
			[Token(Token = "0x4002C1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private float m_timer;

			[Token(Token = "0x4002C1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private int m_currentIdleHash;

			[Token(Token = "0x170009BA")]
			[StateConfig("Force Idle")]
			public bool ForceIdle
			{
				[Token(Token = "0x60036BF")]
				[Address(RVA = "0x1369410", Offset = "0x1369410", VA = "0x1369410")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60036C0")]
				[Address(RVA = "0x1369418", Offset = "0x1369418", VA = "0x1369418")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170009BB")]
			[StateConfig("Face Target")]
			public bool FaceTarget
			{
				[Token(Token = "0x60036C1")]
				[Address(RVA = "0x1369424", Offset = "0x1369424", VA = "0x1369424")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60036C2")]
				[Address(RVA = "0x136942C", Offset = "0x136942C", VA = "0x136942C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x60036C3")]
			[Address(RVA = "0x1369438", Offset = "0x1369438", VA = "0x1369438", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036C4")]
			[Address(RVA = "0x1369468", Offset = "0x1369468", VA = "0x1369468", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036C5")]
			[Address(RVA = "0x1369874", Offset = "0x1369874", VA = "0x1369874", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036C6")]
			[Address(RVA = "0x136987C", Offset = "0x136987C", VA = "0x136987C")]
			public Actor_Idle()
			{
			}
		}

		[Token(Token = "0x2000904")]
		public class Actor_Jump : Actor_BaseState
		{
			[Token(Token = "0x2000905")]
			private enum JumpState
			{
				[Token(Token = "0x4002C25")]
				TakeOff,
				[Token(Token = "0x4002C26")]
				Flight,
				[Token(Token = "0x4002C27")]
				Landing
			}

			[Token(Token = "0x4002C1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private int c_jumpStart;

			[Token(Token = "0x4002C1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private int c_jumpLoop;

			[Token(Token = "0x4002C1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private int c_jumpLand;

			[Token(Token = "0x4002C20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private JumpAnimState.Trajectory _trajectory;

			[Token(Token = "0x4002C21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			private Vector3 _desiredFacingDirection;

			[Token(Token = "0x4002C22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private JumpState m_jumpState;

			[Token(Token = "0x4002C23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private float _jumpTime;

			[Token(Token = "0x60036C7")]
			[Address(RVA = "0x1369880", Offset = "0x1369880", VA = "0x1369880", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x60036C8")]
			[Address(RVA = "0x1369884", Offset = "0x1369884", VA = "0x1369884", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036C9")]
			[Address(RVA = "0x1369900", Offset = "0x1369900", VA = "0x1369900", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036CA")]
			[Address(RVA = "0x1369E48", Offset = "0x1369E48", VA = "0x1369E48", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036CB")]
			[Address(RVA = "0x13698A0", Offset = "0x13698A0", VA = "0x13698A0")]
			private void StartJump()
			{
			}

			[Token(Token = "0x60036CC")]
			[Address(RVA = "0x1369CA8", Offset = "0x1369CA8", VA = "0x1369CA8")]
			private void PerformJump()
			{
			}

			[Token(Token = "0x60036CD")]
			[Address(RVA = "0x1369DEC", Offset = "0x1369DEC", VA = "0x1369DEC")]
			private void PerformLanding()
			{
			}

			[Token(Token = "0x60036CE")]
			[Address(RVA = "0x1369EA0", Offset = "0x1369EA0", VA = "0x1369EA0")]
			public Actor_Jump()
			{
			}
		}

		[Token(Token = "0x2000906")]
		public class Actor_Meander : Actor_BaseState
		{
			[Token(Token = "0x4002C28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private bool _validLocation;

			[Token(Token = "0x4002C29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private float _idleTime;

			[Token(Token = "0x4002C2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private float _initialMoveDelay;

			[Token(Token = "0x4002C2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private bool _firstTime;

			[Token(Token = "0x60036CF")]
			[Address(RVA = "0x1369F44", Offset = "0x1369F44", VA = "0x1369F44", Slot = "10")]
			public override void Restart()
			{
			}

			[Token(Token = "0x60036D0")]
			[Address(RVA = "0x1369F64", Offset = "0x1369F64", VA = "0x1369F64", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036D1")]
			[Address(RVA = "0x1369FA4", Offset = "0x1369FA4", VA = "0x1369FA4", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036D2")]
			[Address(RVA = "0x136A28C", Offset = "0x136A28C", VA = "0x136A28C")]
			private void GetMoveToLocation()
			{
			}

			[Token(Token = "0x60036D3")]
			[Address(RVA = "0x136A45C", Offset = "0x136A45C", VA = "0x136A45C")]
			public Actor_Meander()
			{
			}
		}

		[Token(Token = "0x2000907")]
		public class Actor_Move : Actor_BaseState
		{
			[Token(Token = "0x4002C2C")]
			private const float c_lockStrafeDirectionDistanceSqr = 0f;

			[Token(Token = "0x4002C2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float _blendDuration;

			[Token(Token = "0x60036D4")]
			[Address(RVA = "0x136A468", Offset = "0x136A468", VA = "0x136A468", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036D5")]
			[Address(RVA = "0x136A990", Offset = "0x136A990", VA = "0x136A990", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036D6")]
			[Address(RVA = "0x136B1E4", Offset = "0x136B1E4", VA = "0x136B1E4")]
			public Actor_Move()
			{
			}
		}

		[Token(Token = "0x2000908")]
		public class Actor_MovingAttack : Actor_BaseState
		{
			[Token(Token = "0x4002C2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private int m_animHash;

			[Token(Token = "0x4002C2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private string m_selectedAnim;

			[Token(Token = "0x4002C30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private bool m_allowMovingAttack;

			[Token(Token = "0x60036D7")]
			[Address(RVA = "0x136B1F0", Offset = "0x136B1F0", VA = "0x136B1F0", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036D8")]
			[Address(RVA = "0x136B284", Offset = "0x136B284", VA = "0x136B284", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036D9")]
			[Address(RVA = "0x136B6FC", Offset = "0x136B6FC", VA = "0x136B6FC", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036DA")]
			[Address(RVA = "0x136B718", Offset = "0x136B718", VA = "0x136B718")]
			public Actor_MovingAttack()
			{
			}
		}

		[Token(Token = "0x2000909")]
		public class Actor_NavLinkChoice : Actor_BaseState
		{
			[Token(Token = "0x60036DB")]
			[Address(RVA = "0x136B71C", Offset = "0x136B71C", VA = "0x136B71C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036DC")]
			[Address(RVA = "0x136B894", Offset = "0x136B894", VA = "0x136B894")]
			public Actor_NavLinkChoice()
			{
			}
		}

		[Token(Token = "0x200090A")]
		public class Actor_NavLink : Actor_BaseState
		{
			[Token(Token = "0x200090B")]
			public struct ContactPoint
			{
				[Token(Token = "0x4002C3C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Vector3 position;

				[Token(Token = "0x4002C3D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				public AvatarTarget avatarTarget;

				[Token(Token = "0x4002C3E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public MatchTargetWeightMask weight;

				[Token(Token = "0x4002C3F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public float startNormalizedTime;

				[Token(Token = "0x4002C40")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				public float targetNormalizedTime;
			}

			[Token(Token = "0x4002C31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private Vector3[] _matchPoints;

			[Token(Token = "0x4002C32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private int _frameTicks;

			[Token(Token = "0x4002C33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			private int m_animHash;

			[Token(Token = "0x4002C34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private float[] _times;

			[Token(Token = "0x4002C35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private int _index;

			[Token(Token = "0x4002C36")]
			private const string c_animation = "window.default";

			[Token(Token = "0x4002C37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private ContactPoint[] _contactPoints;

			[Token(Token = "0x4002C38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			private Quaternion _matchRotation;

			[Token(Token = "0x4002C39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			private bool _useMatchTarget;

			[Token(Token = "0x4002C3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private int c_randomAnimation;

			[Token(Token = "0x4002C3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private LinkData m_navLinkData;

			[Token(Token = "0x60036DD")]
			[Address(RVA = "0x136B898", Offset = "0x136B898", VA = "0x136B898", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036DE")]
			[Address(RVA = "0x136B9B8", Offset = "0x136B9B8", VA = "0x136B9B8", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036DF")]
			[Address(RVA = "0x136BF48", Offset = "0x136BF48", VA = "0x136BF48", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036E0")]
			[Address(RVA = "0x136C00C", Offset = "0x136C00C", VA = "0x136C00C")]
			public Actor_NavLink()
			{
			}
		}

		[Token(Token = "0x200090C")]
		public class Actor_FinishNavLink : Actor_BaseState
		{
			[Token(Token = "0x60036E1")]
			[Address(RVA = "0x136C020", Offset = "0x136C020", VA = "0x136C020", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036E2")]
			[Address(RVA = "0x136C098", Offset = "0x136C098", VA = "0x136C098")]
			public Actor_FinishNavLink()
			{
			}
		}

		[Token(Token = "0x200090D")]
		public class Actor_RequestNavToken : Actor_BaseState
		{
			[Token(Token = "0x4002C41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private LinkData m_provider;

			[Token(Token = "0x60036E3")]
			[Address(RVA = "0x136C09C", Offset = "0x136C09C", VA = "0x136C09C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036E4")]
			[Address(RVA = "0x136C328", Offset = "0x136C328", VA = "0x136C328", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036E5")]
			[Address(RVA = "0x136C3F0", Offset = "0x136C3F0", VA = "0x136C3F0", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036E6")]
			[Address(RVA = "0x136C5D8", Offset = "0x136C5D8", VA = "0x136C5D8")]
			private void HandleTokenRequestResponse(TokenRequestResponse response)
			{
			}

			[Token(Token = "0x60036E7")]
			[Address(RVA = "0x136C6C8", Offset = "0x136C6C8", VA = "0x136C6C8")]
			public Actor_RequestNavToken()
			{
			}
		}

		[Token(Token = "0x200090E")]
		public class Actor_StealNavToken : Actor_BaseState
		{
			[Token(Token = "0x60036E8")]
			[Address(RVA = "0x136C6CC", Offset = "0x136C6CC", VA = "0x136C6CC", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036E9")]
			[Address(RVA = "0x136C7F4", Offset = "0x136C7F4", VA = "0x136C7F4", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036EA")]
			[Address(RVA = "0x136C93C", Offset = "0x136C93C", VA = "0x136C93C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036EB")]
			[Address(RVA = "0x136CAE0", Offset = "0x136CAE0", VA = "0x136CAE0")]
			private void HandleTokenRequestResponse(TokenRequestResponse response)
			{
			}

			[Token(Token = "0x60036EC")]
			[Address(RVA = "0x136CBC8", Offset = "0x136CBC8", VA = "0x136CBC8")]
			public Actor_StealNavToken()
			{
			}
		}

		[Token(Token = "0x200090F")]
		public class Actor_Spawn : Actor_BaseState
		{
			[Token(Token = "0x4002C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private int m_animHash;

			[Token(Token = "0x60036ED")]
			[Address(RVA = "0x136CBCC", Offset = "0x136CBCC", VA = "0x136CBCC", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036EE")]
			[Address(RVA = "0x136CD88", Offset = "0x136CD88", VA = "0x136CD88", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036EF")]
			[Address(RVA = "0x136CE20", Offset = "0x136CE20", VA = "0x136CE20", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036F0")]
			[Address(RVA = "0x136CC78", Offset = "0x136CC78", VA = "0x136CC78")]
			private int SelectSpawnAnimation(SpawnAnimationType animationType)
			{
				return default(int);
			}

			[Token(Token = "0x60036F1")]
			[Address(RVA = "0x136CE4C", Offset = "0x136CE4C", VA = "0x136CE4C")]
			public Actor_Spawn()
			{
			}
		}

		[Token(Token = "0x2000910")]
		public class Actor_SpawnMovement : Actor_BaseState
		{
			[Token(Token = "0x4002C43")]
			private const string c_spawnMovement = "repeat";

			[Token(Token = "0x60036F2")]
			[Address(RVA = "0x136CE50", Offset = "0x136CE50", VA = "0x136CE50", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036F3")]
			[Address(RVA = "0x136D078", Offset = "0x136D078", VA = "0x136D078", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036F4")]
			[Address(RVA = "0x136CF44", Offset = "0x136CF44", VA = "0x136CF44")]
			private bool SetLocation(Vector3 position)
			{
				return default(bool);
			}

			[Token(Token = "0x60036F5")]
			[Address(RVA = "0x136D1F4", Offset = "0x136D1F4", VA = "0x136D1F4")]
			public Actor_SpawnMovement()
			{
			}
		}

		[Token(Token = "0x2000911")]
		public class Actor_StrafeDecision : Actor_BaseState
		{
			[Token(Token = "0x4002C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float m_timer;

			[Token(Token = "0x4002C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private ISectorProvider m_actorSectorProvider;

			[Token(Token = "0x60036F6")]
			[Address(RVA = "0x136D1F8", Offset = "0x136D1F8", VA = "0x136D1F8", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x60036F7")]
			[Address(RVA = "0x136D218", Offset = "0x136D218", VA = "0x136D218", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036F8")]
			[Address(RVA = "0x136D234", Offset = "0x136D234", VA = "0x136D234", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036F9")]
			[Address(RVA = "0x136D280", Offset = "0x136D280", VA = "0x136D280")]
			private void MakeStrafeDecision()
			{
			}

			[Token(Token = "0x60036FA")]
			[Address(RVA = "0x136D3B4", Offset = "0x136D3B4", VA = "0x136D3B4")]
			public Actor_StrafeDecision()
			{
			}
		}

		[Token(Token = "0x2000912")]
		public class Actor_Stuck : Actor_BaseState
		{
			[Token(Token = "0x4002C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float _timerToDespawn;

			[Token(Token = "0x4002C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private float _maxTimeToDespawn;

			[Token(Token = "0x4002C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private float _maxDistance;

			[Token(Token = "0x4002C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private Vector3 _lastPosition;

			[Token(Token = "0x60036FB")]
			[Address(RVA = "0x136D3B8", Offset = "0x136D3B8", VA = "0x136D3B8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60036FC")]
			[Address(RVA = "0x136D4D4", Offset = "0x136D4D4", VA = "0x136D4D4", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x60036FD")]
			[Address(RVA = "0x136D724", Offset = "0x136D724", VA = "0x136D724", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x60036FE")]
			[Address(RVA = "0x136D6E8", Offset = "0x136D6E8", VA = "0x136D6E8")]
			private void ResetTimer()
			{
			}

			[Token(Token = "0x60036FF")]
			[Address(RVA = "0x136D54C", Offset = "0x136D54C", VA = "0x136D54C")]
			private bool CheckDistance()
			{
				return default(bool);
			}

			[Token(Token = "0x6003700")]
			[Address(RVA = "0x136D814", Offset = "0x136D814", VA = "0x136D814")]
			public Actor_Stuck()
			{
			}
		}

		[Token(Token = "0x2000913")]
		public class Actor_Stun : Actor_BaseState
		{
			[Token(Token = "0x4002C4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private bool _playingStun;

			[Token(Token = "0x4002C4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private float _stunTimer;

			[Token(Token = "0x4002C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private float _stunDuration;

			[Token(Token = "0x4002C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private int _reactionHash;

			[Token(Token = "0x4002C4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private DifficultyLevel m_difficultyLevel;

			[Token(Token = "0x4002C4F")]
			private const float c_radianSpeed = (float)Math.PI / 8f;

			[Token(Token = "0x6003701")]
			[Address(RVA = "0x136D824", Offset = "0x136D824", VA = "0x136D824", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x6003702")]
			[Address(RVA = "0x136D828", Offset = "0x136D828", VA = "0x136D828", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003703")]
			[Address(RVA = "0x136DD5C", Offset = "0x136DD5C", VA = "0x136DD5C", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003704")]
			[Address(RVA = "0x136DE7C", Offset = "0x136DE7C", VA = "0x136DE7C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003705")]
			[Address(RVA = "0x136DD38", Offset = "0x136DD38", VA = "0x136DD38")]
			private void SetAnimation(int hash)
			{
			}

			[Token(Token = "0x6003706")]
			[Address(RVA = "0x136DE9C", Offset = "0x136DE9C", VA = "0x136DE9C")]
			public Actor_Stun()
			{
			}
		}

		[Token(Token = "0x2000914")]
		public class Actor_Taunt : Actor_BaseState
		{
			[Token(Token = "0x4002C50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private bool _taunting;

			[Token(Token = "0x6003707")]
			[Address(RVA = "0x136DEA8", Offset = "0x136DEA8", VA = "0x136DEA8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003708")]
			[Address(RVA = "0x136DF04", Offset = "0x136DF04", VA = "0x136DF04", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003709")]
			[Address(RVA = "0x136E00C", Offset = "0x136E00C", VA = "0x136E00C")]
			public Actor_Taunt()
			{
			}
		}

		[Token(Token = "0x2000915")]
		public class Actor_TauntTimer : Actor_BaseState
		{
			[Token(Token = "0x4002C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float _tauntDelay;

			[Token(Token = "0x4002C52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private float _entryTime;

			[Token(Token = "0x4002C53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private bool m_hadReachedMoveTo;

			[Token(Token = "0x600370A")]
			[Address(RVA = "0x136E010", Offset = "0x136E010", VA = "0x136E010", Slot = "10")]
			public override void Restart()
			{
			}

			[Token(Token = "0x600370B")]
			[Address(RVA = "0x136E034", Offset = "0x136E034", VA = "0x136E034", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600370C")]
			[Address(RVA = "0x136E134", Offset = "0x136E134", VA = "0x136E134", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600370D")]
			[Address(RVA = "0x136E48C", Offset = "0x136E48C", VA = "0x136E48C")]
			public Actor_TauntTimer()
			{
			}
		}

		[Token(Token = "0x2000916")]
		public class Actor_FaceTowrds : Actor_BaseState
		{
			[Token(Token = "0x600370E")]
			[Address(RVA = "0x136E490", Offset = "0x136E490", VA = "0x136E490", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600370F")]
			[Address(RVA = "0x136E830", Offset = "0x136E830", VA = "0x136E830", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003710")]
			[Address(RVA = "0x136EC8C", Offset = "0x136EC8C", VA = "0x136EC8C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003711")]
			[Address(RVA = "0x136E7A8", Offset = "0x136E7A8", VA = "0x136E7A8")]
			private void Exit()
			{
			}

			[Token(Token = "0x6003712")]
			[Address(RVA = "0x136EC94", Offset = "0x136EC94", VA = "0x136EC94")]
			public Actor_FaceTowrds()
			{
			}
		}

		[Token(Token = "0x2000917")]
		public class Actor_Turn : Actor_BaseState
		{
			[Token(Token = "0x4002C55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private Vector3 _outgoingDirection;

			[Token(Token = "0x4002C56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			private int _animHash;

			[Token(Token = "0x4002C57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private Vector3 m_desiredDirection;

			[Token(Token = "0x4002C58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private bool m_linkTraversal;

			[Token(Token = "0x170009BC")]
			[StateConfig("Turn to target")]
			public bool TurnToTarget
			{
				[Token(Token = "0x6003713")]
				[Address(RVA = "0x136EC98", Offset = "0x136EC98", VA = "0x136EC98")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6003714")]
				[Address(RVA = "0x136ECA0", Offset = "0x136ECA0", VA = "0x136ECA0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6003715")]
			[Address(RVA = "0x136ECAC", Offset = "0x136ECAC", VA = "0x136ECAC", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003716")]
			[Address(RVA = "0x136F2E4", Offset = "0x136F2E4", VA = "0x136F2E4", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003717")]
			[Address(RVA = "0x136F890", Offset = "0x136F890", VA = "0x136F890", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003718")]
			[Address(RVA = "0x136F1D4", Offset = "0x136F1D4", VA = "0x136F1D4")]
			private void Exit()
			{
			}

			[Token(Token = "0x6003719")]
			[Address(RVA = "0x136F12C", Offset = "0x136F12C", VA = "0x136F12C")]
			private Vector3 GetTurnToDirection(bool faceTarget)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600371A")]
			[Address(RVA = "0x136F898", Offset = "0x136F898", VA = "0x136F898")]
			public Actor_Turn()
			{
			}
		}

		[Token(Token = "0x2000918")]
		public class IsInMeleeRange : Actor_BaseState
		{
			[Token(Token = "0x170009BD")]
			[StateConfig("Check Sector")]
			public bool CheckWalls
			{
				[Token(Token = "0x600371B")]
				[Address(RVA = "0x136F89C", Offset = "0x136F89C", VA = "0x136F89C")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600371C")]
				[Address(RVA = "0x136F8A4", Offset = "0x136F8A4", VA = "0x136F8A4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600371D")]
			[Address(RVA = "0x136F8B0", Offset = "0x136F8B0", VA = "0x136F8B0", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600371E")]
			[Address(RVA = "0x136FAA4", Offset = "0x136FAA4", VA = "0x136FAA4")]
			public IsInMeleeRange()
			{
			}
		}

		[Token(Token = "0x2000919")]
		public class IsInMeleeRangeTimed : Actor_BaseState
		{
			[Token(Token = "0x4002C5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private float _lastCheckTime;

			[Token(Token = "0x170009BE")]
			[StateConfig("Wait Time")]
			public float WaitTime
			{
				[Token(Token = "0x600371F")]
				[Address(RVA = "0x136FAA8", Offset = "0x136FAA8", VA = "0x136FAA8")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6003720")]
				[Address(RVA = "0x136FAB0", Offset = "0x136FAB0", VA = "0x136FAB0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6003721")]
			[Address(RVA = "0x136FAB8", Offset = "0x136FAB8", VA = "0x136FAB8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003722")]
			[Address(RVA = "0x136FAD4", Offset = "0x136FAD4", VA = "0x136FAD4", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003723")]
			[Address(RVA = "0x136FB90", Offset = "0x136FB90", VA = "0x136FB90", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003724")]
			[Address(RVA = "0x136FB98", Offset = "0x136FB98", VA = "0x136FB98")]
			public IsInMeleeRangeTimed()
			{
			}
		}

		[Token(Token = "0x200091A")]
		public class HitReactionInfo
		{
			[Token(Token = "0x4002C5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public HealthStatusInfo healthStatus;

			[Token(Token = "0x4002C5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HitReactionConfig hitReactionConfig;

			[Token(Token = "0x4002C5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string hitReactionType;

			[Token(Token = "0x6003725")]
			[Address(RVA = "0x136FBA4", Offset = "0x136FBA4", VA = "0x136FBA4")]
			public HitReactionInfo()
			{
			}
		}

		[Token(Token = "0x200091B")]
		public class EventDetection : Actor_BaseState
		{
			[Token(Token = "0x4002C5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private bool m_delayDespawn;

			[Token(Token = "0x4002C60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private float m_waitTime;

			[Token(Token = "0x4002C61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private float m_despawnTime;

			[Token(Token = "0x4002C62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private int m_delayDespawnTimes;

			[Token(Token = "0x4002C63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			private int m_maxDelayDespawnTimes;

			[Token(Token = "0x4002C64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly ProfilerMarker s_profilerMarker;

			[Token(Token = "0x6003726")]
			[Address(RVA = "0x136FBAC", Offset = "0x136FBAC", VA = "0x136FBAC", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003727")]
			[Address(RVA = "0x136FF34", Offset = "0x136FF34", VA = "0x136FF34", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003728")]
			[Address(RVA = "0x1370144", Offset = "0x1370144", VA = "0x1370144", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003729")]
			[Address(RVA = "0x1370484", Offset = "0x1370484", VA = "0x1370484")]
			public void HandleMoveTo(Vector3 moveTo)
			{
			}

			[Token(Token = "0x600372A")]
			[Address(RVA = "0x1370578", Offset = "0x1370578", VA = "0x1370578")]
			protected void HitCallback(HealthStatusInfo healthStatus)
			{
			}

			[Token(Token = "0x600372B")]
			[Address(RVA = "0x1370988", Offset = "0x1370988", VA = "0x1370988")]
			private void DeathCallback(HealthStatusInfo healthStatus)
			{
			}

			[Token(Token = "0x600372C")]
			[Address(RVA = "0x1370A0C", Offset = "0x1370A0C", VA = "0x1370A0C")]
			private void DespawnCallback()
			{
			}

			[Token(Token = "0x600372D")]
			[Address(RVA = "0x1370A90", Offset = "0x1370A90", VA = "0x1370A90")]
			public EventDetection()
			{
			}
		}

		[Token(Token = "0x200091D")]
		public class Death : Actor_BaseState
		{
			[Token(Token = "0x200091E")]
			[CompilerGenerated]
			private sealed class <ResetCharacterAndReturnToPoolDelayed>d__9 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x4002C6B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x4002C6C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x4002C6D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public float delayTime;

				[Token(Token = "0x4002C6E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public Death <>4__this;

				[Token(Token = "0x170009BF")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x600373A")]
					[Address(RVA = "0x1370FF8", Offset = "0x1370FF8", VA = "0x1370FF8", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x170009C0")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x600373C")]
					[Address(RVA = "0x1371040", Offset = "0x1371040", VA = "0x1371040", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6003737")]
				[Address(RVA = "0x1370ECC", Offset = "0x1370ECC", VA = "0x1370ECC")]
				[DebuggerHidden]
				public <ResetCharacterAndReturnToPoolDelayed>d__9(int <>1__state)
				{
				}

				[Token(Token = "0x6003738")]
				[Address(RVA = "0x1370EF8", Offset = "0x1370EF8", VA = "0x1370EF8", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x6003739")]
				[Address(RVA = "0x1370EFC", Offset = "0x1370EFC", VA = "0x1370EFC", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x600373B")]
				[Address(RVA = "0x1371000", Offset = "0x1371000", VA = "0x1371000", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x4002C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float _normalizedForce;

			[Token(Token = "0x4002C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private Vector3 _velocity;

			[Token(Token = "0x4002C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			private Vector3 _lastHitPoint;

			[Token(Token = "0x4002C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private bool _setHit;

			[Token(Token = "0x6003730")]
			[Address(RVA = "0x1370B30", Offset = "0x1370B30", VA = "0x1370B30", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003731")]
			[Address(RVA = "0x1370DE0", Offset = "0x1370DE0", VA = "0x1370DE0", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003732")]
			[Address(RVA = "0x1370DE8", Offset = "0x1370DE8", VA = "0x1370DE8")]
			private void HitCallback(HealthStatusInfo healthStatus)
			{
			}

			[Token(Token = "0x6003733")]
			[Address(RVA = "0x1370BFC", Offset = "0x1370BFC", VA = "0x1370BFC")]
			private void DeathCallback(HealthStatusInfo healthStatus)
			{
			}

			[Token(Token = "0x6003734")]
			[Address(RVA = "0x1370DEC", Offset = "0x1370DEC", VA = "0x1370DEC")]
			private void SetHitData(HealthStatusInfo healthStatus)
			{
			}

			[Token(Token = "0x6003735")]
			[Address(RVA = "0x1370E48", Offset = "0x1370E48", VA = "0x1370E48")]
			[IteratorStateMachine(typeof(<ResetCharacterAndReturnToPoolDelayed>d__9))]
			private IEnumerator ResetCharacterAndReturnToPoolDelayed(float delayTime)
			{
				return null;
			}

			[Token(Token = "0x6003736")]
			[Address(RVA = "0x1370EF4", Offset = "0x1370EF4", VA = "0x1370EF4")]
			public Death()
			{
			}
		}

		[Token(Token = "0x200091F")]
		public class Exploder_Explode : Actor_BaseState
		{
			[Token(Token = "0x600373D")]
			[Address(RVA = "0x1371048", Offset = "0x1371048", VA = "0x1371048", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600373E")]
			[Address(RVA = "0x13710D4", Offset = "0x13710D4", VA = "0x13710D4")]
			public Exploder_Explode()
			{
			}
		}

		[Token(Token = "0x2000920")]
		public class Exploder_Movement : Actor_BaseState
		{
			[Token(Token = "0x600373F")]
			[Address(RVA = "0x13710D8", Offset = "0x13710D8", VA = "0x13710D8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003740")]
			[Address(RVA = "0x1371100", Offset = "0x1371100", VA = "0x1371100", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003741")]
			[Address(RVA = "0x1371410", Offset = "0x1371410", VA = "0x1371410")]
			public Exploder_Movement()
			{
			}
		}

		[Token(Token = "0x2000921")]
		public class Exploder_SelectTarget : Actor_BaseState
		{
			[Token(Token = "0x4002C6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private PlayerAgent m_currentAttackAgent;

			[Token(Token = "0x6003742")]
			[Address(RVA = "0x1371414", Offset = "0x1371414", VA = "0x1371414", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003743")]
			[Address(RVA = "0x137148C", Offset = "0x137148C", VA = "0x137148C", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003744")]
			[Address(RVA = "0x13716D0", Offset = "0x13716D0", VA = "0x13716D0")]
			private PlayerAgent GetAgentToAttack()
			{
				return null;
			}

			[Token(Token = "0x6003745")]
			[Address(RVA = "0x1371A08", Offset = "0x1371A08", VA = "0x1371A08")]
			public Exploder_SelectTarget()
			{
			}
		}

		[Token(Token = "0x2000922")]
		public class Forest_AreaAttack : Actor_BaseState
		{
			[Token(Token = "0x4002C70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private bool m_exploded;

			[Token(Token = "0x6003746")]
			[Address(RVA = "0x1371A0C", Offset = "0x1371A0C", VA = "0x1371A0C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003747")]
			[Address(RVA = "0x1371A54", Offset = "0x1371A54", VA = "0x1371A54", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003748")]
			[Address(RVA = "0x1371BE0", Offset = "0x1371BE0", VA = "0x1371BE0")]
			public Forest_AreaAttack()
			{
			}
		}

		[Token(Token = "0x2000923")]
		public class Forest_AttackSelector : Actor_BaseState
		{
			[Token(Token = "0x4002C71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private string c_meleeAttack;

			[Token(Token = "0x6003749")]
			[Address(RVA = "0x1371BE4", Offset = "0x1371BE4", VA = "0x1371BE4", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600374A")]
			[Address(RVA = "0x1371CC0", Offset = "0x1371CC0", VA = "0x1371CC0")]
			public Forest_AttackSelector()
			{
			}
		}

		[Token(Token = "0x2000924")]
		public class Forest_DashAttack : Actor_BaseState
		{
			[Token(Token = "0x2000925")]
			public enum ChargeAttackPhase
			{
				[Token(Token = "0x4002C7D")]
				Start,
				[Token(Token = "0x4002C7E")]
				Run,
				[Token(Token = "0x4002C7F")]
				Miss,
				[Token(Token = "0x4002C80")]
				Hit
			}

			[Token(Token = "0x2000926")]
			public class DamagedAgent
			{
				[Token(Token = "0x4002C81")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public IAgent agent;

				[Token(Token = "0x4002C82")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public HealthStatus healthStatus;

				[Token(Token = "0x4002C83")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Collider collider;

				[Token(Token = "0x4002C84")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public bool instaKill;

				[Token(Token = "0x6003757")]
				[Address(RVA = "0x1372D48", Offset = "0x1372D48", VA = "0x1372D48")]
				public DamagedAgent(IAgent damagedAgent, HealthStatus status, Collider col, bool kill)
				{
				}
			}

			[Token(Token = "0x4002C72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private ChargeAttackPhase m_attackPhase;

			[Token(Token = "0x4002C73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private int m_animHash;

			[Token(Token = "0x4002C74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private DamagedAgent m_damageAgent;

			[Token(Token = "0x4002C75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private ForestZombie m_forestZombie;

			[Token(Token = "0x4002C76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private bool m_matchedTargetPosition;

			[Token(Token = "0x4002C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private float m_turnSpeed;

			[Token(Token = "0x4002C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool m_hasHit;

			[Token(Token = "0x4002C79")]
			private const string c_animationAttackPrefix = "Base Layer.attack.charge.";

			[Token(Token = "0x4002C7A")]
			private const float c_maxDistance = 1f;

			[Token(Token = "0x4002C7B")]
			private const float c_hitDistance = 1f;

			[Token(Token = "0x600374B")]
			[Address(RVA = "0x1371D4C", Offset = "0x1371D4C", VA = "0x1371D4C", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x600374C")]
			[Address(RVA = "0x1371D50", Offset = "0x1371D50", VA = "0x1371D50", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600374D")]
			[Address(RVA = "0x1371EF0", Offset = "0x1371EF0", VA = "0x1371EF0", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600374E")]
			[Address(RVA = "0x1372AFC", Offset = "0x1372AFC", VA = "0x1372AFC", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600374F")]
			[Address(RVA = "0x13723F4", Offset = "0x13723F4", VA = "0x13723F4")]
			private void ProcessHit()
			{
			}

			[Token(Token = "0x6003750")]
			[Address(RVA = "0x13720E8", Offset = "0x13720E8", VA = "0x13720E8")]
			private bool CheckHit()
			{
				return default(bool);
			}

			[Token(Token = "0x6003751")]
			[Address(RVA = "0x1372B04", Offset = "0x1372B04", VA = "0x1372B04")]
			private void Damage(HealthStatus healthStatus, Collider col, bool instakill)
			{
			}

			[Token(Token = "0x6003752")]
			[Address(RVA = "0x1371E24", Offset = "0x1371E24", VA = "0x1371E24")]
			private void ChangePhase(ChargeAttackPhase phase)
			{
			}

			[Token(Token = "0x6003753")]
			[Address(RVA = "0x137267C", Offset = "0x137267C", VA = "0x137267C")]
			private void MatchTarget()
			{
			}

			[Token(Token = "0x6003754")]
			[Address(RVA = "0x137240C", Offset = "0x137240C", VA = "0x137240C")]
			private void RotateTrackingTarget()
			{
			}

			[Token(Token = "0x6003755")]
			[Address(RVA = "0x1372DB4", Offset = "0x1372DB4", VA = "0x1372DB4")]
			private Vector3 GetDesiredDirection()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6003756")]
			[Address(RVA = "0x1372F20", Offset = "0x1372F20", VA = "0x1372F20")]
			public Forest_DashAttack()
			{
			}
		}

		[Token(Token = "0x2000927")]
		public class Forest_RangeAttackDetection : Actor_BaseState
		{
			[Token(Token = "0x6003758")]
			[Address(RVA = "0x1372F24", Offset = "0x1372F24", VA = "0x1372F24", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003759")]
			[Address(RVA = "0x13733EC", Offset = "0x13733EC", VA = "0x13733EC")]
			public Forest_RangeAttackDetection()
			{
			}
		}

		[Token(Token = "0x2000928")]
		public class MeleeMovement_AI : Actor_BaseState
		{
			[Token(Token = "0x4002C85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private float _runAtPlayerRadius;

			[Token(Token = "0x600375A")]
			[Address(RVA = "0x13733F0", Offset = "0x13733F0", VA = "0x13733F0", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600375B")]
			[Address(RVA = "0x137346C", Offset = "0x137346C", VA = "0x137346C", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600375C")]
			[Address(RVA = "0x1373834", Offset = "0x1373834", VA = "0x1373834", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600375D")]
			[Address(RVA = "0x137385C", Offset = "0x137385C", VA = "0x137385C")]
			public MeleeMovement_AI()
			{
			}
		}

		[Token(Token = "0x2000929")]
		public class NavLink_AI : Actor_BaseState
		{
			[Token(Token = "0x4002C86")]
			private const float m_requestTokenMinimumDistance = 2f;

			[Token(Token = "0x600375E")]
			[Address(RVA = "0x1373868", Offset = "0x1373868", VA = "0x1373868", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600375F")]
			[Address(RVA = "0x137396C", Offset = "0x137396C", VA = "0x137396C", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003760")]
			[Address(RVA = "0x1373DAC", Offset = "0x1373DAC", VA = "0x1373DAC", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003761")]
			[Address(RVA = "0x1373EB0", Offset = "0x1373EB0", VA = "0x1373EB0")]
			private void HandlePointReached(int pointIndex)
			{
			}

			[Token(Token = "0x6003762")]
			[Address(RVA = "0x1373F30", Offset = "0x1373F30", VA = "0x1373F30")]
			public NavLink_AI()
			{
			}
		}

		[Token(Token = "0x200092A")]
		public class Spitter_CalculateAttackPos : Spitter_BaseState
		{
			[Token(Token = "0x4002C87")]
			private const float c_updateDelay = 1f;

			[Token(Token = "0x4002C88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private PlayerAgent m_currentAttackAgent;

			[Token(Token = "0x4002C89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private Vector3 m_targetPortalPosition;

			[Token(Token = "0x4002C8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private bool m_moveToSet;

			[Token(Token = "0x4002C8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private float m_updateTimer;

			[Token(Token = "0x4002C8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private float linearThresholdSqr;

			[Token(Token = "0x170009C1")]
			private bool moveToSet
			{
				[Token(Token = "0x6003763")]
				[Address(RVA = "0x1373F34", Offset = "0x1373F34", VA = "0x1373F34")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6003764")]
				[Address(RVA = "0x1373F3C", Offset = "0x1373F3C", VA = "0x1373F3C")]
				set
				{
				}
			}

			[Token(Token = "0x6003765")]
			[Address(RVA = "0x1373F80", Offset = "0x1373F80", VA = "0x1373F80", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003766")]
			[Address(RVA = "0x1373FB8", Offset = "0x1373FB8", VA = "0x1373FB8", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003767")]
			[Address(RVA = "0x1374A2C", Offset = "0x1374A2C", VA = "0x1374A2C")]
			private PlayerAgent GetAgentToAttack()
			{
				return null;
			}

			[Token(Token = "0x6003768")]
			[Address(RVA = "0x13747D8", Offset = "0x13747D8", VA = "0x13747D8")]
			private void CheckIfBehindTree()
			{
			}

			[Token(Token = "0x6003769")]
			[Address(RVA = "0x1374E64", Offset = "0x1374E64", VA = "0x1374E64")]
			public Spitter_CalculateAttackPos()
			{
			}
		}

		[Token(Token = "0x200092B")]
		public class Spitter_Movement : Spitter_BaseState
		{
			[Token(Token = "0x4002C8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private float m_meanderDelay;

			[Token(Token = "0x600376A")]
			[Address(RVA = "0x1374E6C", Offset = "0x1374E6C", VA = "0x1374E6C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600376B")]
			[Address(RVA = "0x1374EE8", Offset = "0x1374EE8", VA = "0x1374EE8", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600376C")]
			[Address(RVA = "0x1375370", Offset = "0x1375370", VA = "0x1375370", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600376D")]
			[Address(RVA = "0x1375378", Offset = "0x1375378", VA = "0x1375378")]
			public Spitter_Movement()
			{
			}
		}

		[Token(Token = "0x200092C")]
		public class Spitter_RequestSpitToken : Actor_BaseState
		{
			[Token(Token = "0x4002C8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			private ITokenConsumer m_tokenConsumer;

			[Token(Token = "0x4002C8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private ITokenProvider m_tokenProvider;

			[Token(Token = "0x600376E")]
			[Address(RVA = "0x137537C", Offset = "0x137537C", VA = "0x137537C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600376F")]
			[Address(RVA = "0x13755C4", Offset = "0x13755C4", VA = "0x13755C4", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003770")]
			[Address(RVA = "0x1375790", Offset = "0x1375790", VA = "0x1375790")]
			private void HandleTokenRequestResponse(TokenRequestResponse response)
			{
			}

			[Token(Token = "0x6003771")]
			[Address(RVA = "0x1375794", Offset = "0x1375794", VA = "0x1375794")]
			public Spitter_RequestSpitToken()
			{
			}
		}

		[Token(Token = "0x200092D")]
		public class Spitter_Spawn : Actor_Spawn
		{
			[Token(Token = "0x4002C90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			protected SpitterZombie m_spitter;

			[Token(Token = "0x6003772")]
			[Address(RVA = "0x1375798", Offset = "0x1375798", VA = "0x1375798", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x6003773")]
			[Address(RVA = "0x137585C", Offset = "0x137585C", VA = "0x137585C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003774")]
			[Address(RVA = "0x1375944", Offset = "0x1375944", VA = "0x1375944")]
			public Spitter_Spawn()
			{
			}
		}

		[Token(Token = "0x200092E")]
		public class Spitter_SpitGoo : Spitter_BaseState
		{
			[Token(Token = "0x4002C91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private float m_timer;

			[Token(Token = "0x4002C92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			private int _hash;

			[Token(Token = "0x6003775")]
			[Address(RVA = "0x1375948", Offset = "0x1375948", VA = "0x1375948", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003776")]
			[Address(RVA = "0x1375A88", Offset = "0x1375A88", VA = "0x1375A88", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x6003777")]
			[Address(RVA = "0x1375B0C", Offset = "0x1375B0C", VA = "0x1375B0C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003778")]
			[Address(RVA = "0x1375B48", Offset = "0x1375B48", VA = "0x1375B48")]
			public Spitter_SpitGoo()
			{
			}
		}

		[Token(Token = "0x200092F")]
		public class TargetSelection_AI : Actor_BaseState
		{
			[Token(Token = "0x6003779")]
			[Address(RVA = "0x1375B4C", Offset = "0x1375B4C", VA = "0x1375B4C", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x600377A")]
			[Address(RVA = "0x1375BC4", Offset = "0x1375BC4", VA = "0x1375BC4", Slot = "10")]
			public override void Restart()
			{
			}

			[Token(Token = "0x600377B")]
			[Address(RVA = "0x1375C40", Offset = "0x1375C40", VA = "0x1375C40", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600377C")]
			[Address(RVA = "0x1375C48", Offset = "0x1375C48", VA = "0x1375C48", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600377D")]
			[Address(RVA = "0x1375C50", Offset = "0x1375C50", VA = "0x1375C50", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600377E")]
			[Address(RVA = "0x1375C58", Offset = "0x1375C58", VA = "0x1375C58")]
			public TargetSelection_AI()
			{
			}
		}

		[Token(Token = "0x2000930")]
		public class Actor_TargetChangeListener : Actor_BaseState
		{
			[Token(Token = "0x600377F")]
			[Address(RVA = "0x1375C5C", Offset = "0x1375C5C", VA = "0x1375C5C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003780")]
			[Address(RVA = "0x1375D4C", Offset = "0x1375D4C", VA = "0x1375D4C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003781")]
			[Address(RVA = "0x1375E3C", Offset = "0x1375E3C", VA = "0x1375E3C")]
			private void HandleChangeOfTarget()
			{
			}

			[Token(Token = "0x6003782")]
			[Address(RVA = "0x1375E8C", Offset = "0x1375E8C", VA = "0x1375E8C")]
			public Actor_TargetChangeListener()
			{
			}
		}

		[Token(Token = "0x2000931")]
		public class RequestToken : Actor_BaseState
		{
			[Token(Token = "0x170009C2")]
			[StateConfig("Token Type")]
			public string RegisterTokenType
			{
				[Token(Token = "0x6003783")]
				[Address(RVA = "0x1375E90", Offset = "0x1375E90", VA = "0x1375E90")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6003784")]
				[Address(RVA = "0x1375E98", Offset = "0x1375E98", VA = "0x1375E98")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170009C3")]
			protected TokenManager.TokenType tokenType
			{
				[Token(Token = "0x6003785")]
				[Address(RVA = "0x1375EA0", Offset = "0x1375EA0", VA = "0x1375EA0")]
				get
				{
					return default(TokenManager.TokenType);
				}
			}

			[Token(Token = "0x6003786")]
			[Address(RVA = "0x1375F9C", Offset = "0x1375F9C", VA = "0x1375F9C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003787")]
			[Address(RVA = "0x13761C4", Offset = "0x13761C4", VA = "0x13761C4")]
			private void HandleTokenRequestResponse(TokenRequestResponse response)
			{
			}

			[Token(Token = "0x6003788")]
			[Address(RVA = "0x13762E8", Offset = "0x13762E8", VA = "0x13762E8", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003789")]
			[Address(RVA = "0x13764AC", Offset = "0x13764AC", VA = "0x13764AC")]
			public RequestToken()
			{
			}
		}

		[Token(Token = "0x2000932")]
		public class ReturnToken : Actor_BaseState
		{
			[Token(Token = "0x4002C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private TokenManager.TokenType _tokenType;

			[Token(Token = "0x170009C4")]
			[StateConfig("Token Type")]
			public string RegisterTokenType
			{
				[Token(Token = "0x600378A")]
				[Address(RVA = "0x1376500", Offset = "0x1376500", VA = "0x1376500")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x600378B")]
				[Address(RVA = "0x1376508", Offset = "0x1376508", VA = "0x1376508")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170009C5")]
			public TokenManager.TokenType tokenType
			{
				[Token(Token = "0x600378C")]
				[Address(RVA = "0x1376510", Offset = "0x1376510", VA = "0x1376510")]
				get
				{
					return default(TokenManager.TokenType);
				}
			}

			[Token(Token = "0x600378D")]
			[Address(RVA = "0x137660C", Offset = "0x137660C", VA = "0x137660C", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600378E")]
			[Address(RVA = "0x1376698", Offset = "0x1376698", VA = "0x1376698")]
			public ReturnToken()
			{
			}
		}

		[Token(Token = "0x2000933")]
		public class ReturnTokenOnExit : Actor_BaseState
		{
			[Token(Token = "0x4002C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			private TokenManager.TokenType _tokenType;

			[Token(Token = "0x4002C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private char[] m_seperators;

			[Token(Token = "0x4002C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private List<TokenManager.TokenType> m_tokens;

			[Token(Token = "0x170009C6")]
			[StateConfig("Token Type")]
			public string RegisterTokenType
			{
				[Token(Token = "0x600378F")]
				[Address(RVA = "0x13766F4", Offset = "0x13766F4", VA = "0x13766F4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6003790")]
				[Address(RVA = "0x13766FC", Offset = "0x13766FC", VA = "0x13766FC")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x6003791")]
			[Address(RVA = "0x1376704", Offset = "0x1376704", VA = "0x1376704", Slot = "9")]
			public override void Initialise()
			{
			}

			[Token(Token = "0x6003792")]
			[Address(RVA = "0x13768C0", Offset = "0x13768C0", VA = "0x13768C0", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x6003793")]
			[Address(RVA = "0x1376A0C", Offset = "0x1376A0C", VA = "0x1376A0C")]
			public ReturnTokenOnExit()
			{
			}
		}

		[Token(Token = "0x2000934")]
		public class TokenListener : Actor_BaseState
		{
			[Token(Token = "0x170009C7")]
			[StateConfig("Token Type")]
			public string RegisterTokenType
			{
				[Token(Token = "0x6003794")]
				[Address(RVA = "0x1376ACC", Offset = "0x1376ACC", VA = "0x1376ACC")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6003795")]
				[Address(RVA = "0x1376AD4", Offset = "0x1376AD4", VA = "0x1376AD4")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170009C8")]
			private TokenManager.TokenType tokenType
			{
				[Token(Token = "0x6003796")]
				[Address(RVA = "0x1376ADC", Offset = "0x1376ADC", VA = "0x1376ADC")]
				get
				{
					return default(TokenManager.TokenType);
				}
			}

			[Token(Token = "0x6003797")]
			[Address(RVA = "0x1376BD8", Offset = "0x1376BD8", VA = "0x1376BD8", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x6003798")]
			[Address(RVA = "0x1376D90", Offset = "0x1376D90", VA = "0x1376D90")]
			private void HandleTokenRequestResponse(TokenRequestResponse response)
			{
			}

			[Token(Token = "0x6003799")]
			[Address(RVA = "0x1376E7C", Offset = "0x1376E7C", VA = "0x1376E7C", Slot = "14")]
			public override void StateExit(int? exitPoint)
			{
			}

			[Token(Token = "0x600379A")]
			[Address(RVA = "0x1377034", Offset = "0x1377034", VA = "0x1377034")]
			public TokenListener()
			{
			}
		}

		[Token(Token = "0x2000935")]
		public class Spitter_MovingSpit : Spitter_BaseState
		{
			[Token(Token = "0x4002C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			private int m_animHash;

			[Token(Token = "0x4002C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private string m_selectedAnim;

			[Token(Token = "0x4002C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private float m_minSpitMovingDistance;

			[Token(Token = "0x4002C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
			private float m_maxSpitMovingDistance;

			[Token(Token = "0x600379B")]
			[Address(RVA = "0x1377088", Offset = "0x1377088", VA = "0x1377088", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x600379C")]
			[Address(RVA = "0x13770F0", Offset = "0x13770F0", VA = "0x13770F0", Slot = "13")]
			public override void StateUpdate()
			{
			}

			[Token(Token = "0x600379D")]
			[Address(RVA = "0x13775F4", Offset = "0x13775F4", VA = "0x13775F4", Slot = "14")]
			public override void StateExit(int? outPoint)
			{
			}

			[Token(Token = "0x600379E")]
			[Address(RVA = "0x137741C", Offset = "0x137741C", VA = "0x137741C")]
			private bool CheckAttackPositionIsValid(Vector3 targetPos, Vector3 pos)
			{
				return default(bool);
			}

			[Token(Token = "0x600379F")]
			[Address(RVA = "0x137763C", Offset = "0x137763C", VA = "0x137763C")]
			public Spitter_MovingSpit()
			{
			}
		}

		[Token(Token = "0x2000936")]
		public class ZombieTypeSelector : Actor_BaseState
		{
			[Token(Token = "0x60037A0")]
			[Address(RVA = "0x1377640", Offset = "0x1377640", VA = "0x1377640", Slot = "12")]
			public override void StateEnter(int inPoint)
			{
			}

			[Token(Token = "0x60037A1")]
			[Address(RVA = "0x1377708", Offset = "0x1377708", VA = "0x1377708")]
			public ZombieTypeSelector()
			{
			}
		}

		[Token(Token = "0x4002B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Action<Actor> OnEnabled;

		[Token(Token = "0x4002B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Action<Actor> OnDisabled;

		[Token(Token = "0x4002B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Identifier _identifier;

		[Token(Token = "0x4002B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private EnemyType _enemyType;

		[Token(Token = "0x4002B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Faction m_faction;

		[Token(Token = "0x4002B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform m_rigRoot;

		[Token(Token = "0x4002B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[NavMeshAgentType]
		[Header("Navigation")]
		[SerializeField]
		private int m_navMeshAgentType;

		[Token(Token = "0x4002B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[UnityEngine.Tooltip("Where can the agent move, and which links they can traverse.")]
		[NavMeshAreaMask]
		private int m_navMeshAreaMask;

		[Token(Token = "0x4002B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Header("Animation")]
		protected AnimationData _animationData;

		[Token(Token = "0x4002B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected GameObject footStepVfx;

		[Token(Token = "0x4002B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Spawn VFX")]
		[SerializeField]
		private ParticleSystem m_spawnParticles;

		[Token(Token = "0x4002B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private ParticleSystem m_despawnParticles;

		[Token(Token = "0x4002B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int s_rootY;

		[Token(Token = "0x4002B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Header("Behaviour - HSM")]
		[UnityEngine.Tooltip("Actors root behaviour state")]
		protected StateDescription m_rootState;

		[Token(Token = "0x4002B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		protected StateDescription m_clientRootState;

		[Token(Token = "0x4002B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		protected List<StateMutation> m_stateMutations;

		[Token(Token = "0x4002B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Behaviour - Properties")]
		[SerializeField]
		private float _flyBackForceScale;

		[Token(Token = "0x4002B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private ActorMovementProperties _movementPropertiesAI;

		[Token(Token = "0x4002B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Transform _headPosition;

		[Token(Token = "0x4002B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[UnityEngine.Tooltip("Position to spawn item drops")]
		private Transform _itemDropPosition;

		[Token(Token = "0x4002B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[UnityEngine.Tooltip("Enrage velocity multiplier")]
		[Header("Enrage Configuration")]
		private float m_enrageSpeedMultiplier;

		[Token(Token = "0x4002BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[Header("Sector Member")]
		protected SectorMember m_sectorMember;

		[Token(Token = "0x4002BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Request NavToken")]
		[SerializeField]
		private float m_distanceRequest;

		[Token(Token = "0x4002BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[Header("Hit Reaction Config by health")]
		private HitReactionConfig m_healthHitReactionConfig;

		[Token(Token = "0x4002BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected PTRagdollToggler m_ragdollToggler;

		[Token(Token = "0x4002BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Cabin.HsmLite.HsmLite m_ownerHsm;

		[Token(Token = "0x4002BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Cabin.HsmLite.HsmLite m_clientHsm;

		[Token(Token = "0x4002BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected BoltEntity m_boltEntity;

		[Token(Token = "0x4002BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Animator m_animator;

		[Token(Token = "0x4002BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected AnimationMixer m_mixer;

		[Token(Token = "0x4002BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected HealthStatus m_rootHealthStatus;

		[Token(Token = "0x4002BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected HealthStatus m_headHealthStatus;

		[Token(Token = "0x4002BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected SimpleLookAt m_lookAt;

		[Token(Token = "0x4002BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Action<TokenRequestResponse> m_tokenResponse;

		[Token(Token = "0x4002BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int _waveId;

		[Token(Token = "0x4002BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected SpawnPathNode m_spawnNode;

		[Token(Token = "0x4002BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int _defaultLayer;

		[Token(Token = "0x4002BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform _cachedTransform;

		[Token(Token = "0x4002BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Action OnPathChanged;

		[Token(Token = "0x4002BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private PathingData _pathingData;

		[Token(Token = "0x4002BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private CharacterController _characterController;

		[Token(Token = "0x4002BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private IPool _pool;

		[Token(Token = "0x4002BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private SkinnedMeshRenderer _skinRenderer;

		[Token(Token = "0x4002BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float m_lastStunTime;

		[Token(Token = "0x4002BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Action OnDespawnActor;

		[Token(Token = "0x4002BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private bool _mirrored;

		[Token(Token = "0x4002BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected float _timeOffset;

		[Token(Token = "0x4002BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		protected float _amplitudeMult;

		[Token(Token = "0x4002BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected float _frequencyMult;

		[Token(Token = "0x4002BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private int _updateTimeSlicingOffset;

		[Token(Token = "0x4002BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Dissolve m_dissolve;

		[Token(Token = "0x4002BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private NetworkPoolable[] m_childsNetWorkPoolables;

		[Token(Token = "0x4002BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private NavMeshQueryFilter m_navMeshFilter;

		[Token(Token = "0x4002BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected SpawnAnimationType m_spawnAnimation;

		[Token(Token = "0x4002BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected Wearable[] m_wearables;

		[Token(Token = "0x4002BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected MaterialInstances m_materialInstances;

		[Token(Token = "0x4002BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool m_animationLocked;

		[Token(Token = "0x4002BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly ProfilerMarker s_samleNavMesh;

		[Token(Token = "0x4002BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		private bool m_clientAnimation;

		[Token(Token = "0x4002BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private float m_clientAnimationTimestamp;

		[Token(Token = "0x4002BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private SpawnWaveDefinition m_waveDefinition;

		[Token(Token = "0x4002BCE")]
		private const string c_randomSelection = "random_selection";

		[Token(Token = "0x4002BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private bool m_ragdollProcessed;

		[Token(Token = "0x4002BD0")]
		private const float c_blendTime = 0.2f;

		[Token(Token = "0x4002BD1")]
		private const string c_strafeExit = "move";

		[Token(Token = "0x4002BD2")]
		private const string c_moveExit = "move";

		[Token(Token = "0x4002BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
		protected bool m_allowStrafing;

		[Token(Token = "0x4002BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action<Vector3> OnMoveTo;

		[Token(Token = "0x4002BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static int c_speedHash;

		[Token(Token = "0x4002BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static int c_multiplierHash;

		[Token(Token = "0x4002BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		protected MovementSpeed _moveSpeed;

		[Token(Token = "0x4002BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		protected StrafeMode _strafeMode;

		[Token(Token = "0x4002BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		protected float _strafeAngle;

		[Token(Token = "0x4002BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private float _currentSpeed;

		[Token(Token = "0x4002BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float _currentDesiredSpeed;

		[Token(Token = "0x4002BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3 m_cachedDesiredMovementDirection;

		[Token(Token = "0x4002BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private float m_cachedNextPointDistance;

		[Token(Token = "0x4002BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		protected int _idleHash;

		[Token(Token = "0x4002BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		protected int _walkHash;

		[Token(Token = "0x4002BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		protected int _walkBackwardsHash;

		[Token(Token = "0x4002BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		protected int _turnHash;

		[Token(Token = "0x4002BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		protected int _tauntHash;

		[Token(Token = "0x4002BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		protected int _engageHash;

		[Token(Token = "0x4002BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		protected int _despawnHash;

		[Token(Token = "0x4002BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		protected int _spawnHash;

		[Token(Token = "0x4002BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		protected int _areaHash;

		[Token(Token = "0x4002BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		protected float _animWalkSpeed;

		[Token(Token = "0x4002BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		protected float _animRunSpeed;

		[Token(Token = "0x4002BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		protected int _windowTraversal;

		[Token(Token = "0x4002BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		protected int _jumpStart;

		[Token(Token = "0x4002BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		protected int _jumpLoop;

		[Token(Token = "0x4002BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private float m_maxDist0Sqr;

		[Token(Token = "0x4002BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		private float m_maxDist1Sqr;

		[Token(Token = "0x4002BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Vector3 _desiredBodyDirection;

		[Token(Token = "0x4002BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private bool _attackTokenRequested;

		[Token(Token = "0x4002BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private ActorAttackChanceProperties.BlockedAnimationData _blockedData;

		[Token(Token = "0x4002BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private Dictionary<object, HealthStatusInfo> m_satisfiedVictims;

		[Token(Token = "0x4002BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private bool _isHitAvailable;

		[Token(Token = "0x4002BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		private Vector3 m_attackStartPosition;

		[Token(Token = "0x4002BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private bool _isHitBlocked;

		[Token(Token = "0x4002BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x289")]
		private bool m_engaged;

		[Token(Token = "0x4002BF6")]
		private const int c_isUseLinkCost = 100;

		[Token(Token = "0x4002BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		private float m_positionTimestamp;

		[Token(Token = "0x4002BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private TargetInfo m_targetInfo;

		[Token(Token = "0x4002BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		protected Action OnTargetInfoChanged;

		[Token(Token = "0x1700097B")]
		private Identifier PT.IAgent.Identifier
		{
			[Token(Token = "0x60035DD")]
			[Address(RVA = "0x135E0C8", Offset = "0x135E0C8", VA = "0x135E0C8", Slot = "151")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700097C")]
		public EnemyType enemyType
		{
			[Token(Token = "0x60035DE")]
			[Address(RVA = "0x135E0D0", Offset = "0x135E0D0", VA = "0x135E0D0", Slot = "184")]
			get
			{
				return default(EnemyType);
			}
		}

		[Token(Token = "0x1700097D")]
		public ParticleSystem SpawnParticles
		{
			[Token(Token = "0x60035DF")]
			[Address(RVA = "0x135E0D8", Offset = "0x135E0D8", VA = "0x135E0D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700097E")]
		public ParticleSystem DespawnParticles
		{
			[Token(Token = "0x60035E0")]
			[Address(RVA = "0x135E0E0", Offset = "0x135E0E0", VA = "0x135E0E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700097F")]
		public ActorMovementProperties movementProperties
		{
			[Token(Token = "0x60035E1")]
			[Address(RVA = "0x135E0E8", Offset = "0x135E0E8", VA = "0x135E0E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000980")]
		public Transform ItemDropPosition
		{
			[Token(Token = "0x60035E2")]
			[Address(RVA = "0x135E0F0", Offset = "0x135E0F0", VA = "0x135E0F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000981")]
		public SectorMember SectorMember
		{
			[Token(Token = "0x60035E3")]
			[Address(RVA = "0x135E0F8", Offset = "0x135E0F8", VA = "0x135E0F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000982")]
		private Sector PT.BLAST.ISectorProvider.currentSector
		{
			[Token(Token = "0x60035E4")]
			[Address(RVA = "0x135E100", Offset = "0x135E100", VA = "0x135E100", Slot = "186")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000983")]
		public PTRagdollToggler RagdollToggler
		{
			[Token(Token = "0x60035E5")]
			[Address(RVA = "0x135E17C", Offset = "0x135E17C", VA = "0x135E17C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000984")]
		public Cabin.HsmLite.HsmLite ownerHSM
		{
			[Token(Token = "0x60035E6")]
			[Address(RVA = "0x135E184", Offset = "0x135E184", VA = "0x135E184")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000985")]
		public Cabin.HsmLite.HsmLite clientHSM
		{
			[Token(Token = "0x60035E7")]
			[Address(RVA = "0x135E18C", Offset = "0x135E18C", VA = "0x135E18C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000986")]
		public bool IsOwner
		{
			[Token(Token = "0x60035E9")]
			[Address(RVA = "0x135E2D4", Offset = "0x135E2D4", VA = "0x135E2D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000987")]
		private HealthStatus IHealthStatusProvider.healthStatus
		{
			[Token(Token = "0x60035EA")]
			[Address(RVA = "0x135E358", Offset = "0x135E358", VA = "0x135E358", Slot = "165")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000988")]
		public SpawnPathNode SpawnNode
		{
			[Token(Token = "0x60035EB")]
			[Address(RVA = "0x135E360", Offset = "0x135E360", VA = "0x135E360")]
			get
			{
				return null;
			}
			[Token(Token = "0x60035EC")]
			[Address(RVA = "0x135E368", Offset = "0x135E368", VA = "0x135E368")]
			set
			{
			}
		}

		[Token(Token = "0x17000989")]
		public int WaveId
		{
			[Token(Token = "0x60035ED")]
			[Address(RVA = "0x135E378", Offset = "0x135E378", VA = "0x135E378")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60035EE")]
			[Address(RVA = "0x135E380", Offset = "0x135E380", VA = "0x135E380")]
			set
			{
			}
		}

		[Token(Token = "0x1700098A")]
		private Action<TokenRequestResponse> ITokenConsumer.OnTokenRequestResponse
		{
			[Token(Token = "0x60035EF")]
			[Address(RVA = "0x135E388", Offset = "0x135E388", VA = "0x135E388", Slot = "177")]
			get
			{
				return null;
			}
			[Token(Token = "0x60035F0")]
			[Address(RVA = "0x135E390", Offset = "0x135E390", VA = "0x135E390", Slot = "178")]
			set
			{
			}
		}

		[Token(Token = "0x1700098B")]
		private Vector3 ITokenConsumer.position
		{
			[Token(Token = "0x60035F1")]
			[Address(RVA = "0x135E3A0", Offset = "0x135E3A0", VA = "0x135E3A0", Slot = "180")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700098C")]
		public Transform cachedTransform
		{
			[Token(Token = "0x60035F2")]
			[Address(RVA = "0x1357EAC", Offset = "0x1357EAC", VA = "0x1357EAC", Slot = "156")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700098D")]
		private float PT.IAgent.Radius
		{
			[Token(Token = "0x60035F3")]
			[Address(RVA = "0x135E3BC", Offset = "0x135E3BC", VA = "0x135E3BC", Slot = "149")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700098E")]
		public virtual bool IsHumanPlayer
		{
			[Token(Token = "0x60035F4")]
			[Address(RVA = "0x135E3D8", Offset = "0x135E3D8", VA = "0x135E3D8", Slot = "187")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700098F")]
		private bool Cabin.Movement.IMoveable.moveToReached
		{
			[Token(Token = "0x60035F5")]
			[Address(RVA = "0x135E3E0", Offset = "0x135E3E0", VA = "0x135E3E0", Slot = "158")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000990")]
		private Vector3 Cabin.Movement.IMoveable.moveTo
		{
			[Token(Token = "0x60035F6")]
			[Address(RVA = "0x135E3F8", Offset = "0x135E3F8", VA = "0x135E3F8", Slot = "154")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60035F7")]
			[Address(RVA = "0x135E418", Offset = "0x135E418", VA = "0x135E418", Slot = "155")]
			set
			{
			}
		}

		[Token(Token = "0x17000991")]
		private PathingData.PathingStatus Cabin.Movement.IMoveable.pathStatus
		{
			[Token(Token = "0x60035F8")]
			[Address(RVA = "0x135E4A4", Offset = "0x135E4A4", VA = "0x135E4A4", Slot = "162")]
			get
			{
				return default(PathingData.PathingStatus);
			}
		}

		[Token(Token = "0x17000992")]
		private bool Cabin.Movement.IMoveable.calculatingPath
		{
			[Token(Token = "0x60035F9")]
			[Address(RVA = "0x135E4C0", Offset = "0x135E4C0", VA = "0x135E4C0", Slot = "163")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000993")]
		private float Cabin.Movement.IMoveable.targetDistance
		{
			[Token(Token = "0x60035FA")]
			[Address(RVA = "0x135E4DC", Offset = "0x135E4DC", VA = "0x135E4DC", Slot = "159")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000994")]
		private float Cabin.Movement.IMoveable.nextLinkDistance
		{
			[Token(Token = "0x60035FB")]
			[Address(RVA = "0x135E4F4", Offset = "0x135E4F4", VA = "0x135E4F4", Slot = "160")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000995")]
		private float Cabin.Movement.IMoveable.nextPathPointDistance
		{
			[Token(Token = "0x60035FC")]
			[Address(RVA = "0x135E50C", Offset = "0x135E50C", VA = "0x135E50C", Slot = "161")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000996")]
		public PathingData pathingData
		{
			[Token(Token = "0x60035FD")]
			[Address(RVA = "0x135E524", Offset = "0x135E524", VA = "0x135E524")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000997")]
		private Vector3 Cabin.Movement.IMoveable.desiredDirection
		{
			[Token(Token = "0x60035FE")]
			[Address(RVA = "0x135E52C", Offset = "0x135E52C", VA = "0x135E52C", Slot = "157")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000998")]
		public float NavAvoidanceRadius
		{
			[Token(Token = "0x60035FF")]
			[Address(RVA = "0x135E544", Offset = "0x135E544", VA = "0x135E544", Slot = "172")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000999")]
		public Vector3 ForwardFacingVector
		{
			[Token(Token = "0x6003600")]
			[Address(RVA = "0x135E560", Offset = "0x135E560", VA = "0x135E560", Slot = "173")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700099A")]
		public Vector3 HeadPosition
		{
			[Token(Token = "0x6003601")]
			[Address(RVA = "0x135E57C", Offset = "0x135E57C", VA = "0x135E57C", Slot = "174")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700099B")]
		protected float walkSpeedMultiplier
		{
			[Token(Token = "0x6003602")]
			[Address(RVA = "0x135E598", Offset = "0x135E598", VA = "0x135E598")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003603")]
			[Address(RVA = "0x135E5A0", Offset = "0x135E5A0", VA = "0x135E5A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700099C")]
		protected float walkBackwardsSpeedMultiplier
		{
			[Token(Token = "0x6003604")]
			[Address(RVA = "0x135E5A8", Offset = "0x135E5A8", VA = "0x135E5A8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003605")]
			[Address(RVA = "0x135E5B0", Offset = "0x135E5B0", VA = "0x135E5B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700099D")]
		protected float runSpeedMultiplier
		{
			[Token(Token = "0x6003606")]
			[Address(RVA = "0x135E5B8", Offset = "0x135E5B8", VA = "0x135E5B8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003607")]
			[Address(RVA = "0x135E5C0", Offset = "0x135E5C0", VA = "0x135E5C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700099E")]
		public Dissolve Dissolve
		{
			[Token(Token = "0x6003608")]
			[Address(RVA = "0x135E5C8", Offset = "0x135E5C8", VA = "0x135E5C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700099F")]
		protected bool clampToNavMeshThisFrame
		{
			[Token(Token = "0x6003609")]
			[Address(RVA = "0x135E5D0", Offset = "0x135E5D0", VA = "0x135E5D0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600360A")]
			[Address(RVA = "0x135E5D8", Offset = "0x135E5D8", VA = "0x135E5D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009A0")]
		public NavMeshQueryFilter navMeshFilter
		{
			[Token(Token = "0x600360B")]
			[Address(RVA = "0x135E5E4", Offset = "0x135E5E4", VA = "0x135E5E4")]
			get
			{
				return default(NavMeshQueryFilter);
			}
		}

		[Token(Token = "0x170009A1")]
		public Vector3? overrideFacingDirection
		{
			[Token(Token = "0x600360C")]
			[Address(RVA = "0x135E5F0", Offset = "0x135E5F0", VA = "0x135E5F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600360D")]
			[Address(RVA = "0x135E5FC", Offset = "0x135E5FC", VA = "0x135E5FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009A2")]
		public CharacterController controller
		{
			[Token(Token = "0x600360E")]
			[Address(RVA = "0x135E604", Offset = "0x135E604", VA = "0x135E604")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009A3")]
		public SimpleVelocityTracker simpleVelocityTracker
		{
			[Token(Token = "0x600360F")]
			[Address(RVA = "0x135E60C", Offset = "0x135E60C", VA = "0x135E60C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003610")]
			[Address(RVA = "0x135E614", Offset = "0x135E614", VA = "0x135E614")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170009A4")]
		public SpawnAnimationType SpawnAnimation
		{
			[Token(Token = "0x6003611")]
			[Address(RVA = "0x135E624", Offset = "0x135E624", VA = "0x135E624")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003612")]
			[Address(RVA = "0x135E62C", Offset = "0x135E62C", VA = "0x135E62C")]
			set
			{
			}
		}

		[Token(Token = "0x170009A5")]
		public bool AnimationLocked
		{
			[Token(Token = "0x6003613")]
			[Address(RVA = "0x135E63C", Offset = "0x135E63C", VA = "0x135E63C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003614")]
			[Address(RVA = "0x135E644", Offset = "0x135E644", VA = "0x135E644")]
			set
			{
			}
		}

		[Token(Token = "0x170009A6")]
		public int identifier
		{
			[Token(Token = "0x6003639")]
			[Address(RVA = "0x1362840", Offset = "0x1362840", VA = "0x1362840", Slot = "181")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009A7")]
		private Faction Cabin.Factions.IFactionMember.faction
		{
			[Token(Token = "0x600363E")]
			[Address(RVA = "0x1362C38", Offset = "0x1362C38", VA = "0x1362C38", Slot = "183")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009A8")]
		public SpawnWaveDefinition WaveDefinition
		{
			[Token(Token = "0x600363F")]
			[Address(RVA = "0x1362C40", Offset = "0x1362C40", VA = "0x1362C40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003640")]
			[Address(RVA = "0x1362C48", Offset = "0x1362C48", VA = "0x1362C48")]
			set
			{
			}
		}

		[Token(Token = "0x170009A9")]
		public virtual bool allowStrafing
		{
			[Token(Token = "0x600364A")]
			[Address(RVA = "0x1363618", Offset = "0x1363618", VA = "0x1363618", Slot = "199")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600364B")]
			[Address(RVA = "0x1363620", Offset = "0x1363620", VA = "0x1363620", Slot = "200")]
			set
			{
			}
		}

		[Token(Token = "0x170009AA")]
		protected virtual int idleHash
		{
			[Token(Token = "0x600364C")]
			[Address(RVA = "0x136362C", Offset = "0x136362C", VA = "0x136362C", Slot = "201")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009AB")]
		protected virtual int walkHash
		{
			[Token(Token = "0x600364D")]
			[Address(RVA = "0x1363634", Offset = "0x1363634", VA = "0x1363634", Slot = "202")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009AC")]
		protected virtual int walkBackwardsHash
		{
			[Token(Token = "0x600364E")]
			[Address(RVA = "0x136363C", Offset = "0x136363C", VA = "0x136363C", Slot = "203")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009AD")]
		protected virtual int turnHash
		{
			[Token(Token = "0x600364F")]
			[Address(RVA = "0x1363644", Offset = "0x1363644", VA = "0x1363644", Slot = "204")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009AE")]
		protected virtual int tauntHash
		{
			[Token(Token = "0x6003650")]
			[Address(RVA = "0x136364C", Offset = "0x136364C", VA = "0x136364C", Slot = "205")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009AF")]
		protected virtual int engageHash
		{
			[Token(Token = "0x6003651")]
			[Address(RVA = "0x1363654", Offset = "0x1363654", VA = "0x1363654", Slot = "206")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009B0")]
		protected virtual int despawnHash
		{
			[Token(Token = "0x6003652")]
			[Address(RVA = "0x136365C", Offset = "0x136365C", VA = "0x136365C", Slot = "207")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009B1")]
		protected virtual int spawnHash
		{
			[Token(Token = "0x6003653")]
			[Address(RVA = "0x1363664", Offset = "0x1363664", VA = "0x1363664", Slot = "208")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009B2")]
		protected virtual int areaHash
		{
			[Token(Token = "0x6003654")]
			[Address(RVA = "0x136366C", Offset = "0x136366C", VA = "0x136366C", Slot = "209")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009B3")]
		protected virtual int windowTraversal
		{
			[Token(Token = "0x6003655")]
			[Address(RVA = "0x1363674", Offset = "0x1363674", VA = "0x1363674", Slot = "210")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009B4")]
		protected virtual int jumpStart
		{
			[Token(Token = "0x6003656")]
			[Address(RVA = "0x136367C", Offset = "0x136367C", VA = "0x136367C", Slot = "211")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009B5")]
		protected virtual int jumpLoop
		{
			[Token(Token = "0x6003657")]
			[Address(RVA = "0x1363684", Offset = "0x1363684", VA = "0x1363684", Slot = "212")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009B6")]
		public bool IsHitAvailable
		{
			[Token(Token = "0x6003668")]
			[Address(RVA = "0x1364714", Offset = "0x1364714", VA = "0x1364714")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170009B7")]
		public bool IsHitBlocked
		{
			[Token(Token = "0x6003669")]
			[Address(RVA = "0x136471C", Offset = "0x136471C", VA = "0x136471C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600366A")]
			[Address(RVA = "0x1364724", Offset = "0x1364724", VA = "0x1364724")]
			set
			{
			}
		}

		[Token(Token = "0x170009B8")]
		public TargetInfo targetInfo
		{
			[Token(Token = "0x6003674")]
			[Address(RVA = "0x135FF08", Offset = "0x135FF08", VA = "0x135FF08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60035E8")]
		[Address(RVA = "0x135E194", Offset = "0x135E194", VA = "0x135E194", Slot = "153")]
		private BoltEntity IOwner.BoltEntity()
		{
			return null;
		}

		[Token(Token = "0x6003615")]
		[Address(RVA = "0x135E650", Offset = "0x135E650", VA = "0x135E650", Slot = "188")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6003616")]
		[Address(RVA = "0x135F350", Offset = "0x135F350", VA = "0x135F350")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6003617")]
		[Address(RVA = "0x135F3F8", Offset = "0x135F3F8", VA = "0x135F3F8", Slot = "189")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6003618")]
		[Address(RVA = "0x135F770", Offset = "0x135F770", VA = "0x135F770")]
		protected List<Material> getMaterials()
		{
			return null;
		}

		[Token(Token = "0x6003619")]
		[Address(RVA = "0x135F590", Offset = "0x135F590", VA = "0x135F590")]
		private void HandleRagdollInitialized()
		{
		}

		[Token(Token = "0x600361A")]
		[Address(RVA = "0x135F840", Offset = "0x135F840", VA = "0x135F840", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x600361B")]
		[Address(RVA = "0x135FCD4", Offset = "0x135FCD4", VA = "0x135FCD4", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x600361C")]
		[Address(RVA = "0x135FDEC", Offset = "0x135FDEC", VA = "0x135FDEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600361D")]
		[Address(RVA = "0x135ED2C", Offset = "0x135ED2C", VA = "0x135ED2C")]
		private void DisableSelfCollision()
		{
		}

		[Token(Token = "0x600361E")]
		[Address(RVA = "0x135FF84", Offset = "0x135FF84", VA = "0x135FF84", Slot = "190")]
		public virtual bool updateThisFrame(int frequency)
		{
			return default(bool);
		}

		[Token(Token = "0x600361F")]
		[Address(RVA = "0x135FFB8", Offset = "0x135FFB8", VA = "0x135FFB8")]
		private void HandlePathManagerDestroyed()
		{
		}

		[Token(Token = "0x6003620")]
		[Address(RVA = "0x135FFC8", Offset = "0x135FFC8", VA = "0x135FFC8", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x6003621")]
		[Address(RVA = "0x135FFD0", Offset = "0x135FFD0", VA = "0x135FFD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6003622")]
		[Address(RVA = "0x136038C", Offset = "0x136038C", VA = "0x136038C", Slot = "167")]
		private void PT.IPoolable.OnAllocFromPool()
		{
		}

		[Token(Token = "0x6003623")]
		[Address(RVA = "0x1360438", Offset = "0x1360438", VA = "0x1360438", Slot = "191")]
		public virtual void OnReturnToPool()
		{
		}

		[Token(Token = "0x6003624")]
		[Address(RVA = "0x13604B4", Offset = "0x13604B4", VA = "0x13604B4", Slot = "192")]
		public virtual void OnAddedToPool()
		{
		}

		[Token(Token = "0x6003625")]
		[Address(RVA = "0x13605CC", Offset = "0x13605CC", VA = "0x13605CC", Slot = "193")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6003626")]
		[Address(RVA = "0x13609C0", Offset = "0x13609C0", VA = "0x13609C0", Slot = "194")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6003627")]
		[Address(RVA = "0x1361508", Offset = "0x1361508", VA = "0x1361508")]
		protected void Mirror(bool mirror)
		{
		}

		[Token(Token = "0x6003628")]
		[Address(RVA = "0x1360314", Offset = "0x1360314", VA = "0x1360314")]
		public Vector3 SampleNavMesh(Vector3 pos, float radius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003629")]
		[Address(RVA = "0x136150C", Offset = "0x136150C", VA = "0x136150C", Slot = "195")]
		protected virtual void ResetActor()
		{
		}

		[Token(Token = "0x600362A")]
		[Address(RVA = "0x1361688", Offset = "0x1361688", VA = "0x1361688")]
		private void OnAnimationDataCallback()
		{
		}

		[Token(Token = "0x600362B")]
		[Address(RVA = "0x13618C4", Offset = "0x13618C4", VA = "0x13618C4")]
		public void SetAnimation(int stateHash, float blendTime, float offset)
		{
		}

		[Token(Token = "0x600362C")]
		[Address(RVA = "0x13617D0", Offset = "0x13617D0", VA = "0x13617D0")]
		private void SetAnimation(AnimationStateToken token)
		{
		}

		[Token(Token = "0x600362D")]
		[Address(RVA = "0x1361A40", Offset = "0x1361A40", VA = "0x1361A40", Slot = "196")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600362E")]
		[Address(RVA = "0x1361CC0", Offset = "0x1361CC0", VA = "0x1361CC0")]
		public void SetDisableCollisions(bool mode)
		{
		}

		[Token(Token = "0x600362F")]
		[Address(RVA = "0x1361D54", Offset = "0x1361D54", VA = "0x1361D54")]
		public void TeleportTo(Vector3 pos)
		{
		}

		[Token(Token = "0x6003630")]
		[Address(RVA = "0x1361DC8", Offset = "0x1361DC8", VA = "0x1361DC8")]
		public void TeleportTo(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6003631")]
		[Address(RVA = "0x1361E6C", Offset = "0x1361E6C", VA = "0x1361E6C", Slot = "197")]
		public virtual void ManualAttach(IProtocolToken token)
		{
		}

		[Token(Token = "0x6003632")]
		[Address(RVA = "0x1361FA8", Offset = "0x1361FA8", VA = "0x1361FA8", Slot = "198")]
		public virtual void ManualDetach(IProtocolToken token)
		{
		}

		[Token(Token = "0x6003633")]
		[Address(RVA = "0x13620E4", Offset = "0x13620E4", VA = "0x13620E4")]
		public void Despawn()
		{
		}

		[Token(Token = "0x6003634")]
		[Address(RVA = "0x1362100", Offset = "0x1362100", VA = "0x1362100", Slot = "170")]
		public int GetCurrentTargets(out PriorityTarget[] targets)
		{
			return default(int);
		}

		[Token(Token = "0x6003635")]
		[Address(RVA = "0x13621BC", Offset = "0x13621BC", VA = "0x13621BC", Slot = "175")]
		public void GetCurrentWeapons(ref HashSet<VrItem> itemSet)
		{
		}

		[Token(Token = "0x6003636")]
		[Address(RVA = "0x1360EF0", Offset = "0x1360EF0", VA = "0x1360EF0")]
		protected void RecoverInitialSpeed()
		{
		}

		[Token(Token = "0x6003637")]
		[Address(RVA = "0x13621C0", Offset = "0x13621C0", VA = "0x13621C0")]
		protected string ShouldBeStunnedByType(HealthStatusInfo healthStatus, out HitReactionConfig hitReactionConfig)
		{
			return null;
		}

		[Token(Token = "0x6003638")]
		[Address(RVA = "0x1362528", Offset = "0x1362528", VA = "0x1362528", Slot = "179")]
		private bool ITokenConsumer.AllowStealToken(ITokenConsumer thief, IToken token)
		{
			return default(bool);
		}

		[Token(Token = "0x600363A")]
		[Address(RVA = "0x1362860", Offset = "0x1362860", VA = "0x1362860", Slot = "182")]
		public void OnDisperse(Vector3 pos)
		{
		}

		[Token(Token = "0x600363B")]
		[Address(RVA = "0x1362864", Offset = "0x1362864", VA = "0x1362864")]
		public void OnDespawn()
		{
		}

		[Token(Token = "0x600363C")]
		[Address(RVA = "0x1362A30", Offset = "0x1362A30", VA = "0x1362A30")]
		public void ResetDespawnValue()
		{
		}

		[Token(Token = "0x600363D")]
		[Address(RVA = "0x1362BD4", Offset = "0x1362BD4", VA = "0x1362BD4")]
		private bool NearestPointOnNavMesh(Vector3 p, out Vector3 nearestPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6003641")]
		[Address(RVA = "0x1362C58", Offset = "0x1362C58", VA = "0x1362C58")]
		private void DropItemOnDeath()
		{
		}

		[Token(Token = "0x6003642")]
		[Address(RVA = "0x1362CE8", Offset = "0x1362CE8", VA = "0x1362CE8", Slot = "185")]
		private StateDescription Cabin.HsmLite.IHsmLiteMutator.Mutate(StateDescription original)
		{
			return null;
		}

		[Token(Token = "0x6003643")]
		[Address(RVA = "0x1362DE4", Offset = "0x1362DE4", VA = "0x1362DE4", Slot = "164")]
		public Vector3 PredictPosition(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003644")]
		[Address(RVA = "0x1362EE8", Offset = "0x1362EE8", VA = "0x1362EE8")]
		private void HandlePlayerRemoved(PlayerAgent player)
		{
		}

		[Token(Token = "0x6003645")]
		[Address(RVA = "0x1362FAC", Offset = "0x1362FAC", VA = "0x1362FAC")]
		public void SetRandomAnimation(string path)
		{
		}

		[Token(Token = "0x6003646")]
		[Address(RVA = "0x136302C", Offset = "0x136302C", VA = "0x136302C")]
		public void SetRandomAnimation(int hash)
		{
		}

		[Token(Token = "0x6003647")]
		[Address(RVA = "0x13630AC", Offset = "0x13630AC", VA = "0x13630AC")]
		public void Ragdoll(Vector3 velocity, Vector3 hitPoint, HealthStatusInfo healthStatus)
		{
		}

		[Token(Token = "0x6003648")]
		[Address(RVA = "0x13634EC", Offset = "0x13634EC", VA = "0x13634EC")]
		public void HandleRagdollEvent(RagdollEvent evnt)
		{
		}

		[Token(Token = "0x6003649")]
		[Address(RVA = "0x1363318", Offset = "0x1363318", VA = "0x1363318")]
		private void Ragdoll(Vector3 force, Vector3 hitPoint, float radius)
		{
		}

		[Token(Token = "0x6003658")]
		[Address(RVA = "0x135F118", Offset = "0x135F118", VA = "0x135F118")]
		protected void InitializeAnimatorHashes()
		{
		}

		[Token(Token = "0x6003659")]
		[Address(RVA = "0x136368C", Offset = "0x136368C", VA = "0x136368C")]
		protected void UpdateStrafeDesiredBodyDirection()
		{
		}

		[Token(Token = "0x600365A")]
		[Address(RVA = "0x1363694", Offset = "0x1363694", VA = "0x1363694")]
		protected void UpdateStrafeDesiredBodyDirection(StrafeMode strafeMode)
		{
		}

		[Token(Token = "0x600365B")]
		[Address(RVA = "0x136375C", Offset = "0x136375C", VA = "0x136375C", Slot = "213")]
		protected virtual void RotateTowardsDesiredDirection(Vector3 desiredFacingDirection, float turnSpeed)
		{
		}

		[Token(Token = "0x600365C")]
		[Address(RVA = "0x13639AC", Offset = "0x13639AC", VA = "0x13639AC", Slot = "214")]
		protected virtual float GetDesiredMovementSpeed(float currentSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x600365D")]
		[Address(RVA = "0x1363B78", Offset = "0x1363B78", VA = "0x1363B78")]
		private void UpdateMovementParams(float turnSpeed)
		{
		}

		[Token(Token = "0x600365E")]
		[Address(RVA = "0x1363BB8", Offset = "0x1363BB8", VA = "0x1363BB8")]
		private void UpdateAnimParams(float desiredSpeed, float turnSpeed, bool force = false)
		{
		}

		[Token(Token = "0x600365F")]
		[Address(RVA = "0x1363E6C", Offset = "0x1363E6C", VA = "0x1363E6C")]
		private float GetWalkSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x6003660")]
		[Address(RVA = "0x1363E88", Offset = "0x1363E88", VA = "0x1363E88")]
		private float getTurnSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x6003661")]
		[Address(RVA = "0x1363EF4", Offset = "0x1363EF4", VA = "0x1363EF4")]
		private Vector3 GetDesiredMovementDirectionRandomized()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003662")]
		[Address(RVA = "0x1363FE4", Offset = "0x1363FE4", VA = "0x1363FE4")]
		public static void RaiseMoveTo(Vector3 pos)
		{
		}

		[Token(Token = "0x6003663")]
		[Address(RVA = "0x1364088", Offset = "0x1364088", VA = "0x1364088", Slot = "215")]
		public virtual bool GetTargetDirection(out Vector3 targetDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6003664")]
		[Address(RVA = "0x1364248", Offset = "0x1364248", VA = "0x1364248", Slot = "216")]
		public virtual Vector3 GetDesiredForwardDirection(bool forceFaceTarget = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003665")]
		[Address(RVA = "0x136449C", Offset = "0x136449C", VA = "0x136449C")]
		public Vector3 GetDesiredLookDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003666")]
		[Address(RVA = "0x13644EC", Offset = "0x13644EC", VA = "0x13644EC")]
		public bool CheckInSameSectorAs(ISectorProvider otherProvider)
		{
			return default(bool);
		}

		[Token(Token = "0x6003667")]
		[Address(RVA = "0x1364640", Offset = "0x1364640", VA = "0x1364640", Slot = "217")]
		public virtual bool CheckStrafeDistances()
		{
			return default(bool);
		}

		[Token(Token = "0x600366B")]
		[Address(RVA = "0x1364730", Offset = "0x1364730", VA = "0x1364730")]
		public void StartMeleeAttack()
		{
		}

		[Token(Token = "0x600366C")]
		[Address(RVA = "0x13649B0", Offset = "0x13649B0", VA = "0x13649B0")]
		public void UpdatePositionForMelee(float normalizeTime)
		{
		}

		[Token(Token = "0x600366D")]
		[Address(RVA = "0x1364BB0", Offset = "0x1364BB0", VA = "0x1364BB0")]
		public void ProcessImpact(object victim, HealthStatusUpdateRuntimeInfo hitInfo, IAgent otherAgent, PhysicsDamage physicsDamage)
		{
		}

		[Token(Token = "0x600366E")]
		[Address(RVA = "0x135FED0", Offset = "0x135FED0", VA = "0x135FED0")]
		private void ReleaseNavLink()
		{
		}

		[Token(Token = "0x600366F")]
		[Address(RVA = "0x1364DE4", Offset = "0x1364DE4", VA = "0x1364DE4")]
		public bool InMeleeRange(TargetInfo currentTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6003670")]
		[Address(RVA = "0x1364F98", Offset = "0x1364F98", VA = "0x1364F98")]
		public bool InMeleeRange(Vector3 targetPosition, float targetRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x6003671")]
		[Address(RVA = "0x13650E8", Offset = "0x13650E8", VA = "0x13650E8")]
		public bool CanReachMeleePosition(Vector3 meleePosition, Vector3 directionToMeleeTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6003672")]
		[Address(RVA = "0x13651A8", Offset = "0x13651A8", VA = "0x13651A8")]
		public bool CanReachMeleeTarget(Vector3 zombiePosition, Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6003673")]
		[Address(RVA = "0x1365308", Offset = "0x1365308", VA = "0x1365308")]
		private void UpdateMoveTo()
		{
		}

		[Token(Token = "0x6003675")]
		[Address(RVA = "0x1360EF8", Offset = "0x1360EF8", VA = "0x1360EF8")]
		public void UpdateMoveToTargetInfo(TargetInfo value)
		{
		}

		[Token(Token = "0x6003676")]
		[Address(RVA = "0x1365528", Offset = "0x1365528", VA = "0x1365528")]
		private void TargetDeathOrFallen(HealthStatusInfo status)
		{
		}

		[Token(Token = "0x6003677")]
		[Address(RVA = "0x1365710", Offset = "0x1365710", VA = "0x1365710")]
		private void HandleTokenRequestResponse(TokenRequestResponse response)
		{
		}

		[Token(Token = "0x6003678")]
		[Address(RVA = "0x13657B4", Offset = "0x13657B4", VA = "0x13657B4")]
		protected Actor()
		{
		}

		[SpecialName]
		[Token(Token = "0x600367A")]
		[Address(RVA = "0x1365A00", Offset = "0x1365A00", VA = "0x1365A00", Slot = "147")]
		private string PT.IAgent.get_name()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x600367B")]
		[Address(RVA = "0x1365A08", Offset = "0x1365A08", VA = "0x1365A08", Slot = "166")]
		private GameObject PT.IPoolable.get_gameObject()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x600367C")]
		[Address(RVA = "0x1365A10", Offset = "0x1365A10", VA = "0x1365A10", Slot = "176")]
		private string ITokenConsumer.get_name()
		{
			return null;
		}
	}
	[Token(Token = "0x2000939")]
	public interface ITargetable
	{
		[Token(Token = "0x170009C9")]
		PriorityTarget priorityTarget
		{
			[Token(Token = "0x60037A8")]
			get;
		}

		[Token(Token = "0x170009CA")]
		AgentEyes agentEyes
		{
			[Token(Token = "0x60037A9")]
			get;
		}
	}
	[Token(Token = "0x200093A")]
	[CreateAssetMenu(menuName = "Cabin/AI/Hit Reaction")]
	public class HitReactionConfig : ScriptableObject
	{
		[Token(Token = "0x4002CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StunnableProperties[] hitReactions;

		[Token(Token = "0x4002CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitReactionsTypes reactionsType;

		[Token(Token = "0x4002CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool overrideDefaultZombieConfig;

		[Token(Token = "0x4002CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("If greater than zero, force the duration of the reaction to this value.")]
		[Min(0f)]
		public float durationOverride;

		[Token(Token = "0x60037AA")]
		[Address(RVA = "0x1377914", Offset = "0x1377914", VA = "0x1377914")]
		public HitReactionConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200093B")]
	public class StunnableProperties
	{
		[Serializable]
		[Token(Token = "0x200093C")]
		public class StunProperty
		{
			[Token(Token = "0x4002CA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public EnemyType enemyType;

			[Token(Token = "0x4002CAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public HitLocation hitLocation;

			[Token(Token = "0x4002CAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool enableByChance;

			[Token(Token = "0x4002CAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float chance;

			[Token(Token = "0x4002CAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool enableByHealthPercentage;

			[Token(Token = "0x4002CAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float healthPercentage;

			[Token(Token = "0x60037AE")]
			[Address(RVA = "0x1377E5C", Offset = "0x1377E5C", VA = "0x1377E5C")]
			public StunProperty()
			{
			}
		}

		[Token(Token = "0x200093D")]
		public enum HitLocation
		{
			[Token(Token = "0x4002CB0")]
			Head,
			[Token(Token = "0x4002CB1")]
			Body,
			[Token(Token = "0x4002CB2")]
			All,
			[Token(Token = "0x4002CB3")]
			Root
		}

		[Token(Token = "0x4002CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public string name;

		[Token(Token = "0x4002CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<StunProperty> properties;

		[Token(Token = "0x60037AB")]
		[Address(RVA = "0x1377978", Offset = "0x1377978", VA = "0x1377978")]
		public bool EnemyHitReaction(EnemyType enemy, bool isHeadShot, HealthStatusInfo healthStatusInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60037AC")]
		[Address(RVA = "0x1377CF4", Offset = "0x1377CF4", VA = "0x1377CF4")]
		private bool MatchLocation(HitLocation location, bool isHeadShot, HealthStatus healthStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x60037AD")]
		[Address(RVA = "0x1377E54", Offset = "0x1377E54", VA = "0x1377E54")]
		public StunnableProperties()
		{
		}
	}
	[Token(Token = "0x200093E")]
	public class HitReactionsTypes : ScriptableObject
	{
		[Token(Token = "0x4002CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionType[] reactionsTypes;

		[Token(Token = "0x60037AF")]
		[Address(RVA = "0x1377E6C", Offset = "0x1377E6C", VA = "0x1377E6C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60037B0")]
		[Address(RVA = "0x1377F44", Offset = "0x1377F44", VA = "0x1377F44")]
		public HitReactionsTypes()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200093F")]
	public class HitReactionType
	{
		[Token(Token = "0x4002CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string reactionType;

		[Token(Token = "0x4002CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int m_hitReactionAnimation;

		[Token(Token = "0x170009CB")]
		public int HitReactionAnimation
		{
			[Token(Token = "0x60037B1")]
			[Address(RVA = "0x136DCBC", Offset = "0x136DCBC", VA = "0x136DCBC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60037B2")]
			[Address(RVA = "0x1377F4C", Offset = "0x1377F4C", VA = "0x1377F4C")]
			set
			{
			}
		}

		[Token(Token = "0x60037B3")]
		[Address(RVA = "0x1377F54", Offset = "0x1377F54", VA = "0x1377F54")]
		public HitReactionType()
		{
		}
	}
	[Token(Token = "0x2000940")]
	public class ExploderZombie : Zombie, IPoolable
	{
		[Token(Token = "0x2000941")]
		[CompilerGenerated]
		private sealed class <ArmCoroutine>d__35 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002CCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002CCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002CCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExploderZombie <>4__this;

			[Token(Token = "0x170009D5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60037CF")]
				[Address(RVA = "0x1379774", Offset = "0x1379774", VA = "0x1379774", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170009D6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60037D1")]
				[Address(RVA = "0x13797BC", Offset = "0x13797BC", VA = "0x13797BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60037CC")]
			[Address(RVA = "0x13782E4", Offset = "0x13782E4", VA = "0x13782E4")]
			[DebuggerHidden]
			public <ArmCoroutine>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x60037CD")]
			[Address(RVA = "0x1379594", Offset = "0x1379594", VA = "0x1379594", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60037CE")]
			[Address(RVA = "0x1379598", Offset = "0x1379598", VA = "0x1379598", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60037D0")]
			[Address(RVA = "0x137977C", Offset = "0x137977C", VA = "0x137977C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		[UnityEngine.Tooltip("Script that contains the explosion functionality")]
		[Header("Exploder Zombie Config")]
		[SerializeField]
		private HealthStatusUpdate_ColliderTrigger m_explosive;

		[Token(Token = "0x4002CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		[UnityEngine.Tooltip("Explosion position")]
		[SerializeField]
		private Transform m_explosionPosition;

		[Token(Token = "0x4002CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		[SerializeField]
		[UnityEngine.Tooltip("Distance between the target and the zombie to start the timed explosion")]
		private float m_timedExplosionDistance;

		[Token(Token = "0x4002CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		[SerializeField]
		[UnityEngine.Tooltip("Time between armed and the explosion")]
		private float m_timeToExplosion;

		[Token(Token = "0x4002CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		[Header("Glowing parameters")]
		[SerializeField]
		private Renderer m_renderer;

		[Token(Token = "0x4002CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		[SerializeField]
		[UnityEngine.Tooltip("Update time when the explosion is armed")]
		private float m_initialGlowUpdateTime;

		[Token(Token = "0x4002CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		[SerializeField]
		[UnityEngine.Tooltip("Update time when the explosion is going to explode")]
		private float m_finalGlowUpdateTime;

		[Token(Token = "0x4002CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		[UnityEngine.Tooltip("Amount of instensity color lost or earned every update")]
		[SerializeField]
		private float m_changeGlowAmount;

		[Token(Token = "0x4002CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private float m_glowIntensity;

		[Token(Token = "0x4002CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private Color m_emissionColor;

		[Token(Token = "0x4002CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private float m_initialTime;

		[Token(Token = "0x4002CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private IEnumerator m_armCoroutine;

		[Token(Token = "0x4002CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private bool m_armed;

		[Token(Token = "0x4002CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x351")]
		private bool m_exploded;

		[Token(Token = "0x4002CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public Action ActionOnExploded;

		[Token(Token = "0x4002CC6")]
		private const float c_minDamage = -5000f;

		[Token(Token = "0x4002CC7")]
		private const float c_velocityMultiplier = 100f;

		[Token(Token = "0x4002CC8")]
		private const float c_minGlow = 0f;

		[Token(Token = "0x4002CC9")]
		private const float c_maxGlow = 1f;

		[Token(Token = "0x170009CC")]
		public override bool useDefaultTargetSelection
		{
			[Token(Token = "0x60037B4")]
			[Address(RVA = "0x1377F5C", Offset = "0x1377F5C", VA = "0x1377F5C", Slot = "227")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170009CD")]
		public float timedExplosionDistance
		{
			[Token(Token = "0x60037B5")]
			[Address(RVA = "0x1377F64", Offset = "0x1377F64", VA = "0x1377F64")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009CE")]
		public float MaxTimeToExplosion
		{
			[Token(Token = "0x60037B6")]
			[Address(RVA = "0x1377F6C", Offset = "0x1377F6C", VA = "0x1377F6C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009CF")]
		public float TimeToExplosion
		{
			[Token(Token = "0x60037B7")]
			[Address(RVA = "0x1368E58", Offset = "0x1368E58", VA = "0x1368E58")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009D0")]
		public bool IsArmed
		{
			[Token(Token = "0x60037B8")]
			[Address(RVA = "0x1377F74", Offset = "0x1377F74", VA = "0x1377F74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170009D1")]
		public bool IsExploded
		{
			[Token(Token = "0x60037B9")]
			[Address(RVA = "0x1377F7C", Offset = "0x1377F7C", VA = "0x1377F7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170009D2")]
		public override bool allowStrafing
		{
			[Token(Token = "0x60037BA")]
			[Address(RVA = "0x1377F84", Offset = "0x1377F84", VA = "0x1377F84", Slot = "199")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60037BB")]
			[Address(RVA = "0x1377FA4", Offset = "0x1377FA4", VA = "0x1377FA4", Slot = "200")]
			set
			{
			}
		}

		[Token(Token = "0x170009D3")]
		protected override int walkHash
		{
			[Token(Token = "0x60037C7")]
			[Address(RVA = "0x13793B4", Offset = "0x13793B4", VA = "0x13793B4", Slot = "202")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170009D4")]
		protected override int turnHash
		{
			[Token(Token = "0x60037C8")]
			[Address(RVA = "0x1379414", Offset = "0x1379414", VA = "0x1379414", Slot = "204")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60037BC")]
		[Address(RVA = "0x1377FB0", Offset = "0x1377FB0", VA = "0x1377FB0", Slot = "188")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60037BD")]
		[Address(RVA = "0x1378270", Offset = "0x1378270", VA = "0x1378270")]
		[IteratorStateMachine(typeof(<ArmCoroutine>d__35))]
		public IEnumerator ArmCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60037BE")]
		[Address(RVA = "0x137830C", Offset = "0x137830C", VA = "0x137830C", Slot = "193")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60037BF")]
		[Address(RVA = "0x137842C", Offset = "0x137842C", VA = "0x137842C", Slot = "194")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x60037C0")]
		[Address(RVA = "0x13785B4", Offset = "0x13785B4", VA = "0x13785B4", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x60037C1")]
		[Address(RVA = "0x1378B0C", Offset = "0x1378B0C", VA = "0x1378B0C", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x60037C2")]
		[Address(RVA = "0x1368E38", Offset = "0x1368E38", VA = "0x1368E38")]
		public void Arm()
		{
		}

		[Token(Token = "0x60037C3")]
		[Address(RVA = "0x1378FE4", Offset = "0x1378FE4", VA = "0x1378FE4")]
		private void Explode()
		{
		}

		[Token(Token = "0x60037C4")]
		[Address(RVA = "0x1379378", Offset = "0x1379378", VA = "0x1379378")]
		private void DeathCallback(HealthStatusInfo healthStatus)
		{
		}

		[Token(Token = "0x60037C5")]
		[Address(RVA = "0x137937C", Offset = "0x137937C", VA = "0x137937C", Slot = "191")]
		public override void OnReturnToPool()
		{
		}

		[Token(Token = "0x60037C6")]
		[Address(RVA = "0x1379128", Offset = "0x1379128", VA = "0x1379128")]
		private void KillZombie(HealthStatus healthStatus)
		{
		}

		[Token(Token = "0x60037C9")]
		[Address(RVA = "0x1379474", Offset = "0x1379474", VA = "0x1379474")]
		private void ExplodeCallback(HealthStatusInfo healthStatus)
		{
		}

		[Token(Token = "0x60037CA")]
		[Address(RVA = "0x13794B8", Offset = "0x13794B8", VA = "0x13794B8")]
		public ExploderZombie()
		{
		}

		[SpecialName]
		[Token(Token = "0x60037CB")]
		[Address(RVA = "0x137958C", Offset = "0x137958C", VA = "0x137958C", Slot = "166")]
		private GameObject PT.IPoolable.get_gameObject()
		{
			return null;
		}
	}
	[Token(Token = "0x2000942")]
	public class ForestZombie : Zombie
	{
		[Token(Token = "0x2000943")]
		[CompilerGenerated]
		private sealed class <AttackCooldown>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4002CE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action<bool> enabled;

			[Token(Token = "0x4002CE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <initialTime>5__2;

			[Token(Token = "0x170009DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60037ED")]
				[Address(RVA = "0x1379F50", Offset = "0x1379F50", VA = "0x1379F50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170009DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60037EF")]
				[Address(RVA = "0x1379F98", Offset = "0x1379F98", VA = "0x1379F98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60037EA")]
			[Address(RVA = "0x13798B4", Offset = "0x13798B4", VA = "0x13798B4")]
			[DebuggerHidden]
			public <AttackCooldown>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x60037EB")]
			[Address(RVA = "0x1379E5C", Offset = "0x1379E5C", VA = "0x1379E5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60037EC")]
			[Address(RVA = "0x1379E60", Offset = "0x1379E60", VA = "0x1379E60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60037EE")]
			[Address(RVA = "0x1379F58", Offset = "0x1379F58", VA = "0x1379F58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000944")]
		[CompilerGenerated]
		private sealed class <DelayReturnToPool>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002CE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002CEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002CEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4002CEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject go;

			[Token(Token = "0x170009DF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60037F3")]
				[Address(RVA = "0x137A084", Offset = "0x137A084", VA = "0x137A084", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170009E0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60037F5")]
				[Address(RVA = "0x137A0CC", Offset = "0x137A0CC", VA = "0x137A0CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60037F0")]
			[Address(RVA = "0x1379C30", Offset = "0x1379C30", VA = "0x1379C30")]
			[DebuggerHidden]
			public <DelayReturnToPool>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x60037F1")]
			[Address(RVA = "0x1379FA0", Offset = "0x1379FA0", VA = "0x1379FA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60037F2")]
			[Address(RVA = "0x1379FA4", Offset = "0x1379FA4", VA = "0x1379FA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60037F4")]
			[Address(RVA = "0x137A08C", Offset = "0x137A08C", VA = "0x137A08C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		[Header("Area Attack Configuration")]
		[SerializeField]
		[UnityEngine.Tooltip("Left Arm HealthStatus")]
		private HealthStatus m_weaponArm;

		[Token(Token = "0x4002CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		[UnityEngine.Tooltip("Script that contains the explosion functionality")]
		[SerializeField]
		private HealthStatusUpdate_ColliderTrigger m_areaAttack;

		[Token(Token = "0x4002CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		[UnityEngine.Tooltip("Origin position of the area / explosion attack")]
		[SerializeField]
		private Transform m_areaAttackOrigin;

		[Token(Token = "0x4002CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		[UnityEngine.Tooltip("Range where the forest zombie can use this attack, This parameter is different that the range of the explosion")]
		[SerializeField]
		private float m_rangeAttackDetection;

		[Token(Token = "0x4002CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		[UnityEngine.Tooltip("ForestZombie will retry to execute an area attack after this time")]
		[SerializeField]
		private float m_timeBetweenAreaAttackChecks;

		[Token(Token = "0x4002CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		[SerializeField]
		[UnityEngine.Tooltip("ForestZombie will retry to execute an area attack after this time")]
		private float m_areaAttackChance;

		[Token(Token = "0x4002CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		[Header("Dash Attack Configuration")]
		[UnityEngine.Tooltip("ForestZombie will retry to execute a lunge attack after this time")]
		[SerializeField]
		private float m_timeBetweenChargeAttackChecks;

		[Token(Token = "0x4002CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		[UnityEngine.Tooltip("ForestZombie will try to execute a lunge attack if the player angle is less than")]
		[SerializeField]
		private float m_maxChargeAngle;

		[Token(Token = "0x4002CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		[SerializeField]
		[UnityEngine.Tooltip("ForestZombie will try to execute a lunge attack if the player distance is more than")]
		private float m_minChargeDistance;

		[Token(Token = "0x4002CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		[SerializeField]
		[UnityEngine.Tooltip("ForestZombie will try to execute a lunge attack if the player distance is less than")]
		private float m_maxChargeDistance;

		[Token(Token = "0x4002CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		[SerializeField]
		[UnityEngine.Tooltip("Probability of execute this attack")]
		private float m_chargeAttackChance;

		[Token(Token = "0x4002CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		[SerializeField]
		[UnityEngine.Tooltip("Lunge damage")]
		private float m_chargeDamage;

		[Token(Token = "0x4002CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		[UnityEngine.Tooltip("Lunge attack detection radius")]
		[SerializeField]
		private float m_chargeDetectionRadius;

		[Token(Token = "0x4002CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x344")]
		[UnityEngine.Tooltip("Lunge velocity multiplier")]
		private float m_chargeVelocityMultiplier;

		[Token(Token = "0x4002CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		[UnityEngine.Tooltip("Lunge track rotation angle")]
		[SerializeField]
		private float m_chargeTurnSpeed;

		[Token(Token = "0x4002CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		[Header("Enrage Configuration")]
		[SerializeField]
		[UnityEngine.Tooltip("Lunge enrage probability")]
		private float m_chargeEnrageChance;

		[Token(Token = "0x4002CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		[SerializeField]
		[Header("VFX")]
		private ParticleSystem m_footStepVfx;

		[Token(Token = "0x4002CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		[SerializeField]
		private GameObject m_engageVfx;

		[Token(Token = "0x4002CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		[SerializeField]
		private GameObject m_chargeVfx;

		[Token(Token = "0x4002CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		[SerializeField]
		private Transform m_leftFeetPosition;

		[Token(Token = "0x4002CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		[SerializeField]
		private Transform m_rightFeetPosition;

		[Token(Token = "0x170009D7")]
		public bool enableAreaAttack
		{
			[Token(Token = "0x60037D2")]
			[Address(RVA = "0x13797C4", Offset = "0x13797C4", VA = "0x13797C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60037D3")]
			[Address(RVA = "0x13797CC", Offset = "0x13797CC", VA = "0x13797CC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009D8")]
		public float chargeDamage
		{
			[Token(Token = "0x60037D4")]
			[Address(RVA = "0x13797D8", Offset = "0x13797D8", VA = "0x13797D8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009D9")]
		public float chargeDetectionRadius
		{
			[Token(Token = "0x60037D5")]
			[Address(RVA = "0x13797E0", Offset = "0x13797E0", VA = "0x13797E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009DA")]
		public float chargeVelocityMultiplier
		{
			[Token(Token = "0x60037D6")]
			[Address(RVA = "0x13797E8", Offset = "0x13797E8", VA = "0x13797E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009DB")]
		public float chargeTurnSpeed
		{
			[Token(Token = "0x60037D7")]
			[Address(RVA = "0x13797F0", Offset = "0x13797F0", VA = "0x13797F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009DC")]
		public bool enableChargehAttack
		{
			[Token(Token = "0x60037D8")]
			[Address(RVA = "0x13797F8", Offset = "0x13797F8", VA = "0x13797F8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60037D9")]
			[Address(RVA = "0x1379800", Offset = "0x1379800", VA = "0x1379800")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60037DA")]
		[Address(RVA = "0x137980C", Offset = "0x137980C", VA = "0x137980C", Slot = "193")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60037DB")]
		[Address(RVA = "0x1379830", Offset = "0x1379830", VA = "0x1379830")]
		[IteratorStateMachine(typeof(<AttackCooldown>d__38))]
		public IEnumerator AttackCooldown(Action<bool> enabled, float time)
		{
			return null;
		}

		[Token(Token = "0x60037DC")]
		[Address(RVA = "0x1371B74", Offset = "0x1371B74", VA = "0x1371B74")]
		public void AreaAttack()
		{
		}

		[Token(Token = "0x60037DD")]
		[Address(RVA = "0x13798DC", Offset = "0x13798DC", VA = "0x13798DC")]
		private void AreaAttackCooldown(float time)
		{
		}

		[Token(Token = "0x60037DE")]
		[Address(RVA = "0x137997C", Offset = "0x137997C", VA = "0x137997C")]
		private void LungeAttackCooldown(float time)
		{
		}

		[Token(Token = "0x60037DF")]
		[Address(RVA = "0x1373144", Offset = "0x1373144", VA = "0x1373144")]
		public bool AreaAttackAvailable(float sqrTargetDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x60037E0")]
		[Address(RVA = "0x13731D0", Offset = "0x13731D0", VA = "0x13731D0")]
		public bool ChargeAttackAvailable(float sqrTargetDistance, Vector3 playerDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60037E1")]
		[Address(RVA = "0x1379A1C", Offset = "0x1379A1C", VA = "0x1379A1C")]
		private void Fst(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x60037E2")]
		[Address(RVA = "0x1379BAC", Offset = "0x1379BAC", VA = "0x1379BAC")]
		[IteratorStateMachine(typeof(<DelayReturnToPool>d__45))]
		private IEnumerator DelayReturnToPool(float time, GameObject go)
		{
			return null;
		}

		[Token(Token = "0x60037E3")]
		[Address(RVA = "0x1379C58", Offset = "0x1379C58", VA = "0x1379C58", Slot = "231")]
		public override void StartEngageVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x60037E4")]
		[Address(RVA = "0x1379C78", Offset = "0x1379C78", VA = "0x1379C78", Slot = "232")]
		public override void FinishEngageVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x60037E5")]
		[Address(RVA = "0x1379C98", Offset = "0x1379C98", VA = "0x1379C98", Slot = "233")]
		public override void StartChargeVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x60037E6")]
		[Address(RVA = "0x1379D20", Offset = "0x1379D20", VA = "0x1379D20", Slot = "234")]
		public override void EndChargeVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x60037E7")]
		[Address(RVA = "0x1379DA8", Offset = "0x1379DA8", VA = "0x1379DA8")]
		public ForestZombie()
		{
		}
	}
	[Token(Token = "0x2000945")]
	public enum ForestAttack
	{
		[Token(Token = "0x4002CEE")]
		Melee,
		[Token(Token = "0x4002CEF")]
		Charge,
		[Token(Token = "0x4002CF0")]
		Area
	}
	[Token(Token = "0x2000946")]
	public interface IAnimationEvents
	{
		[Token(Token = "0x60037F6")]
		void StartEngageVfx(AnimationEvent animationEvent);

		[Token(Token = "0x60037F7")]
		void FinishEngageVfx(AnimationEvent animationEvent);

		[Token(Token = "0x60037F8")]
		void StartChargeVfx(AnimationEvent animationEvent);

		[Token(Token = "0x60037F9")]
		void EndChargeVfx(AnimationEvent animationEvent);
	}
	[Serializable]
	[Token(Token = "0x2000947")]
	[CreateAssetMenu(menuName = "Cabin/AI/Spitter Properties")]
	public class SpitterProperties : ScriptableObject
	{
		[Token(Token = "0x4002CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Spitting")]
		public float minSpitDistance;

		[Token(Token = "0x4002CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Maximum distance for spit projectile.")]
		public float maxSpitDistance;

		[Token(Token = "0x4002CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Spitter will not try spitting once targe tis further than this distance.")]
		public float spitDistanceCutoff;

		[Token(Token = "0x4002CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minSpitMovingDistance;

		[Token(Token = "0x4002CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxSpitMovingDistance;

		[Token(Token = "0x4002CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float closeRangeSpeed;

		[Token(Token = "0x4002CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float farRangeSpeed;

		[Token(Token = "0x4002CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Limits the number of spits that can occur at any one time.")]
		[HideInInspector]
		public int numberOfSpitTokens;

		[Token(Token = "0x4002CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Time between spit token becoming available again.")]
		[HideInInspector]
		public float spitTokenCooldown;

		[Token(Token = "0x4002CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("General")]
		[UnityEngine.Tooltip("Max moving spit angle")]
		public float maxSpitMovingAngle;

		[Token(Token = "0x4002CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Minimum delay between spits.")]
		public float spitCoolDown;

		[Token(Token = "0x4002CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Time to hold in place while attacking cabin portals instead of player directly.")]
		public float attackHoldPositionDuration;

		[Token(Token = "0x4002CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Allow spitters to choose a new portal target if the player isn't near the current one.")]
		[HideInInspector]
		public bool allowChooseNewPortalToAttack;

		[Token(Token = "0x4002CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Movement To Thresholds")]
		[UnityEngine.Tooltip("Distance at which spitter will discard current moveto position and move to new moveto position. When new moveto position is this distance away from current moveto position, spitter will move to new position.")]
		public float linearMoveToDistanceThreshold;

		[Token(Token = "0x4002CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("When behind a tree, angle threshold at which spitter will move to a new position at the same tree.")]
		public float treeAngleMoveToThreshold;

		[Token(Token = "0x4002D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("The minuimum amount of time a spitter will stay at a move to position once reached.")]
		public float minTimeAtMoveToPosition;

		[Token(Token = "0x60037FA")]
		[Address(RVA = "0x137A0D4", Offset = "0x137A0D4", VA = "0x137A0D4")]
		public SpitterProperties()
		{
		}
	}
	[Token(Token = "0x2000948")]
	public class SpitterWeapon : CachedMonoBehaviour
	{
		[Token(Token = "0x4002D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private VrBullet_Projectile m_spitProjectile;

		[Token(Token = "0x4002D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private GameObject m_spitMuzzle;

		[Token(Token = "0x4002D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected Transform m_spitFrom;

		[Token(Token = "0x4002D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IOwner m_owner;

		[Token(Token = "0x4002D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SpitterZombie m_spitter;

		[Token(Token = "0x4002D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_spitMuzzleKey;

		[Token(Token = "0x60037FB")]
		[Address(RVA = "0x137A11C", Offset = "0x137A11C", VA = "0x137A11C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60037FC")]
		[Address(RVA = "0x137A2E8", Offset = "0x137A2E8", VA = "0x137A2E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60037FD")]
		[Address(RVA = "0x137A3C4", Offset = "0x137A3C4", VA = "0x137A3C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60037FE")]
		[Address(RVA = "0x137A4A0", Offset = "0x137A4A0", VA = "0x137A4A0")]
		private void HandleAnimationSpitEvent()
		{
		}

		[Token(Token = "0x60037FF")]
		[Address(RVA = "0x137A9F4", Offset = "0x137A9F4", VA = "0x137A9F4")]
		public void Fire(SpitGooEvent evnt)
		{
		}

		[Token(Token = "0x6003800")]
		[Address(RVA = "0x137A630", Offset = "0x137A630", VA = "0x137A630")]
		private void Fire(Vector3 targetPosition, Vector3 targetOffset)
		{
		}

		[Token(Token = "0x6003801")]
		[Address(RVA = "0x137AA7C", Offset = "0x137AA7C", VA = "0x137AA7C")]
		public SpitterWeapon()
		{
		}
	}
	[Token(Token = "0x2000949")]
	public class SpitterZombie : Zombie
	{
		[Token(Token = "0x4002D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public Action OnAnimationSpitEvent;

		[Token(Token = "0x4002D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		[Header("Spitter Properties")]
		[SerializeField]
		protected SpitterProperties m_spitterProperties;

		[Token(Token = "0x4002D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		[SerializeField]
		protected MovingSpitLayerPlayer m_movingSpitLayerPlayer;

		[Token(Token = "0x4002D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private SpitterWeapon m_weapon;

		[Token(Token = "0x4002D11")]
		public const string c_spitterAttackZoneId = "Spitter";

		[Token(Token = "0x170009E1")]
		public override bool useDefaultTargetSelection
		{
			[Token(Token = "0x6003802")]
			[Address(RVA = "0x137AA84", Offset = "0x137AA84", VA = "0x137AA84", Slot = "227")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170009E2")]
		public MovingSpitLayerPlayer movingSpitLayerPlayer
		{
			[Token(Token = "0x6003803")]
			[Address(RVA = "0x137AA8C", Offset = "0x137AA8C", VA = "0x137AA8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009E3")]
		public IAttackZone attackZone
		{
			[Token(Token = "0x6003804")]
			[Address(RVA = "0x137AA94", Offset = "0x137AA94", VA = "0x137AA94")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003805")]
			[Address(RVA = "0x137AA9C", Offset = "0x137AA9C", VA = "0x137AA9C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009E4")]
		public SpitterProperties spitterProperties
		{
			[Token(Token = "0x6003806")]
			[Address(RVA = "0x137AAAC", Offset = "0x137AAAC", VA = "0x137AAAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009E5")]
		public List<IAttackPositionProvider> attackPositions
		{
			[Token(Token = "0x6003807")]
			[Address(RVA = "0x137AAB4", Offset = "0x137AAB4", VA = "0x137AAB4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6003808")]
			[Address(RVA = "0x137AABC", Offset = "0x137AABC", VA = "0x137AABC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170009E6")]
		public float minSpitDistance
		{
			[Token(Token = "0x6003809")]
			[Address(RVA = "0x137AACC", Offset = "0x137AACC", VA = "0x137AACC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009E7")]
		public float maxSpitDistance
		{
			[Token(Token = "0x600380A")]
			[Address(RVA = "0x137AAE8", Offset = "0x137AAE8", VA = "0x137AAE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009E8")]
		public float minSpitMovingDistance
		{
			[Token(Token = "0x600380B")]
			[Address(RVA = "0x13770B8", Offset = "0x13770B8", VA = "0x13770B8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009E9")]
		public float maxSpitMovingDistance
		{
			[Token(Token = "0x600380C")]
			[Address(RVA = "0x13770D4", Offset = "0x13770D4", VA = "0x13770D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009EA")]
		public float maxSpintMovingAngle
		{
			[Token(Token = "0x600380D")]
			[Address(RVA = "0x1377620", Offset = "0x1377620", VA = "0x1377620")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009EB")]
		public float minSpitDistanceSqr
		{
			[Token(Token = "0x600380E")]
			[Address(RVA = "0x137AB04", Offset = "0x137AB04", VA = "0x137AB04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009EC")]
		public float maxSpitDistanceSqr
		{
			[Token(Token = "0x600380F")]
			[Address(RVA = "0x137AB24", Offset = "0x137AB24", VA = "0x137AB24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009ED")]
		public float lastSpitTime
		{
			[Token(Token = "0x6003810")]
			[Address(RVA = "0x137AB44", Offset = "0x137AB44", VA = "0x137AB44")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003811")]
			[Address(RVA = "0x137AB4C", Offset = "0x137AB4C", VA = "0x137AB4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009EE")]
		public bool CanAttack
		{
			[Token(Token = "0x6003812")]
			[Address(RVA = "0x137AB54", Offset = "0x137AB54", VA = "0x137AB54")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003813")]
			[Address(RVA = "0x137AB5C", Offset = "0x137AB5C", VA = "0x137AB5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009EF")]
		public bool SpitInProgress
		{
			[Token(Token = "0x6003814")]
			[Address(RVA = "0x137AB68", Offset = "0x137AB68", VA = "0x137AB68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003815")]
			[Address(RVA = "0x137AB70", Offset = "0x137AB70", VA = "0x137AB70")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009F0")]
		public bool behindATree
		{
			[Token(Token = "0x6003816")]
			[Address(RVA = "0x137AB7C", Offset = "0x137AB7C", VA = "0x137AB7C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003817")]
			[Address(RVA = "0x137AB84", Offset = "0x137AB84", VA = "0x137AB84")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170009F1")]
		protected override int idleHash
		{
			[Token(Token = "0x600381E")]
			[Address(RVA = "0x137B1E4", Offset = "0x137B1E4", VA = "0x137B1E4", Slot = "201")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6003818")]
		[Address(RVA = "0x137AB90", Offset = "0x137AB90", VA = "0x137AB90", Slot = "188")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003819")]
		[Address(RVA = "0x137ACE8", Offset = "0x137ACE8", VA = "0x137ACE8", Slot = "194")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600381A")]
		[Address(RVA = "0x137587C", Offset = "0x137587C", VA = "0x137587C")]
		public void ResetForSpawning()
		{
		}

		[Token(Token = "0x600381B")]
		[Address(RVA = "0x137AEAC", Offset = "0x137AEAC", VA = "0x137AEAC", Slot = "228")]
		public override bool ShouldMoveToAttackPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x600381C")]
		[Address(RVA = "0x137AF24", Offset = "0x137AF24", VA = "0x137AF24", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x600381D")]
		[Address(RVA = "0x137B1B0", Offset = "0x137B1B0", VA = "0x137B1B0")]
		public void SpitGoo()
		{
		}

		[Token(Token = "0x600381F")]
		[Address(RVA = "0x137B244", Offset = "0x137B244", VA = "0x137B244", Slot = "196")]
		protected override void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6003820")]
		[Address(RVA = "0x137B5E0", Offset = "0x137B5E0", VA = "0x137B5E0")]
		private void DrawAttackZone(Vector3 targetPos, float innerAttackRadius, float outerAttackRadius)
		{
		}

		[Token(Token = "0x6003821")]
		[Address(RVA = "0x137B69C", Offset = "0x137B69C", VA = "0x137B69C", Slot = "230")]
		public override void SetSpawnData(SpawnLocation location)
		{
		}

		[Token(Token = "0x6003822")]
		[Address(RVA = "0x137B934", Offset = "0x137B934", VA = "0x137B934", Slot = "217")]
		public override bool CheckStrafeDistances()
		{
			return default(bool);
		}

		[Token(Token = "0x6003823")]
		[Address(RVA = "0x137B93C", Offset = "0x137B93C", VA = "0x137B93C")]
		public SpitterZombie()
		{
		}
	}
	[Token(Token = "0x200094A")]
	public class Spitter_BaseState : Actor.Actor_BaseState
	{
		[Token(Token = "0x4002D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected SpitterZombie m_spitter;

		[Token(Token = "0x6003824")]
		[Address(RVA = "0x137B990", Offset = "0x137B990", VA = "0x137B990", Slot = "9")]
		public override void Initialise()
		{
		}

		[Token(Token = "0x6003825")]
		[Address(RVA = "0x1374E68", Offset = "0x1374E68", VA = "0x1374E68")]
		public Spitter_BaseState()
		{
		}
	}
	[Token(Token = "0x200094B")]
	public class Zombie : Actor, IMeleeStrength, IAttack, IDamageTypeProvider, IAnimationEvents
	{
		[Token(Token = "0x200094C")]
		[Flags]
		public enum ZombieBehaviours
		{
			[Token(Token = "0x4002D23")]
			None = 0,
			[Token(Token = "0x4002D24")]
			Crowding = 1,
			[Token(Token = "0x4002D25")]
			AttackWhileMoving = 2
		}

		[Token(Token = "0x200094D")]
		public class NearestPlayer
		{
			[Token(Token = "0x4002D26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PlayerAgent player;

			[Token(Token = "0x4002D27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float deltaY;

			[Token(Token = "0x4002D28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float sqrDistance;

			[Token(Token = "0x4002D29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float sqrDistance2d;

			[Token(Token = "0x4002D2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 direction;

			[Token(Token = "0x4002D2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float relativeAngle;

			[Token(Token = "0x170009FE")]
			public Vector3 playerPosition
			{
				[Token(Token = "0x6003850")]
				[Address(RVA = "0x137D874", Offset = "0x137D874", VA = "0x137D874")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6003851")]
			[Address(RVA = "0x137D930", Offset = "0x137D930", VA = "0x137D930")]
			public NearestPlayer()
			{
			}
		}

		[Token(Token = "0x4002D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int s_meleeStrengthHash;

		[Token(Token = "0x4002D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[SerializeField]
		[Header("Zombie Behaviours")]
		private ZombieBehaviours m_allowedBehaviours;

		[Token(Token = "0x4002D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[SerializeField]
		private MeleeAttackData m_meleeAttackData;

		[Token(Token = "0x4002D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		[SerializeField]
		private DamageType m_damageType;

		[Token(Token = "0x4002D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		[SerializeField]
		private MovingAttackLayerPlayer m_movingAttackLayerPlayer;

		[Token(Token = "0x4002D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		[SerializeField]
		private AttackStateMatrix m_attackMatrix;

		[Token(Token = "0x4002D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		[SerializeField]
		private bool m_checkAttackPosition;

		[Token(Token = "0x4002D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private NearestPlayer m_nearestplayer;

		[Token(Token = "0x4002D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private HealthStatusReceiver_GibHelper m_gibHelper;

		[Token(Token = "0x4002D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private bool m_allowLeftAttacks;

		[Token(Token = "0x4002D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E1")]
		private bool m_allowRightAttacks;

		[Token(Token = "0x4002D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private GameObjectGroups[] m_renderingGroups;

		[Token(Token = "0x4002D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private float m_lookAtWeight;

		[Token(Token = "0x4002D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private AttackStateMatrix m_overrideAttackMatrix;

		[Token(Token = "0x4002D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly ProfilerMarker s_profileMarker;

		[Token(Token = "0x170009F2")]
		public bool CheckAttackPosition
		{
			[Token(Token = "0x6003826")]
			[Address(RVA = "0x137BA54", Offset = "0x137BA54", VA = "0x137BA54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170009F3")]
		public virtual bool useDefaultTargetSelection
		{
			[Token(Token = "0x6003827")]
			[Address(RVA = "0x137BA5C", Offset = "0x137BA5C", VA = "0x137BA5C", Slot = "227")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170009F4")]
		public MeleeData shortMelee
		{
			[Token(Token = "0x6003828")]
			[Address(RVA = "0x136B6E0", Offset = "0x136B6E0", VA = "0x136B6E0", Slot = "219")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009F5")]
		public float defaultAttackDistance
		{
			[Token(Token = "0x6003829")]
			[Address(RVA = "0x137BA64", Offset = "0x137BA64", VA = "0x137BA64")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009F6")]
		public ActorAttackChanceProperties AttackChance
		{
			[Token(Token = "0x600382A")]
			[Address(RVA = "0x137BA88", Offset = "0x137BA88", VA = "0x137BA88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009F7")]
		public float NormalizedDamageStrength
		{
			[Token(Token = "0x600382B")]
			[Address(RVA = "0x137BAA4", Offset = "0x137BAA4", VA = "0x137BAA4", Slot = "218")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170009F8")]
		public DamageType damageType
		{
			[Token(Token = "0x600382C")]
			[Address(RVA = "0x137BB64", Offset = "0x137BB64", VA = "0x137BB64", Slot = "222")]
			get
			{
				return default(DamageType);
			}
		}

		[Token(Token = "0x170009F9")]
		public NearestPlayer nearestPlayer
		{
			[Token(Token = "0x600382D")]
			[Address(RVA = "0x137BB6C", Offset = "0x137BB6C", VA = "0x137BB6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009FA")]
		public MovingAttackLayerPlayer movingAttackLayerPlayer
		{
			[Token(Token = "0x600382E")]
			[Address(RVA = "0x137BB74", Offset = "0x137BB74", VA = "0x137BB74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170009FB")]
		public ZombieBehaviours allowedBehaviours
		{
			[Token(Token = "0x600382F")]
			[Address(RVA = "0x137BB7C", Offset = "0x137BB7C", VA = "0x137BB7C")]
			get
			{
				return default(ZombieBehaviours);
			}
		}

		[Token(Token = "0x170009FC")]
		public float lookAtweight
		{
			[Token(Token = "0x6003830")]
			[Address(RVA = "0x137BB84", Offset = "0x137BB84", VA = "0x137BB84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003831")]
			[Address(RVA = "0x1368F70", Offset = "0x1368F70", VA = "0x1368F70")]
			set
			{
			}
		}

		[Token(Token = "0x170009FD")]
		public AttackStateMatrix attackMatrix
		{
			[Token(Token = "0x6003832")]
			[Address(RVA = "0x137BB8C", Offset = "0x137BB8C", VA = "0x137BB8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003833")]
		[Address(RVA = "0x137809C", Offset = "0x137809C", VA = "0x137809C", Slot = "188")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6003834")]
		[Address(RVA = "0x137BC00", Offset = "0x137BC00", VA = "0x137BC00", Slot = "195")]
		protected override void ResetActor()
		{
		}

		[Token(Token = "0x6003835")]
		[Address(RVA = "0x13786D4", Offset = "0x13786D4", VA = "0x13786D4", Slot = "18")]
		public override void Attached()
		{
		}

		[Token(Token = "0x6003836")]
		[Address(RVA = "0x1378C2C", Offset = "0x1378C2C", VA = "0x1378C2C", Slot = "19")]
		public override void Detached()
		{
		}

		[Token(Token = "0x6003837")]
		[Address(RVA = "0x1378424", Offset = "0x1378424", VA = "0x1378424", Slot = "193")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6003838")]
		[Address(RVA = "0x1378520", Offset = "0x1378520", VA = "0x1378520", Slot = "194")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6003839")]
		[Address(RVA = "0x137C00C", Offset = "0x137C00C", VA = "0x137C00C", Slot = "192")]
		public override void OnAddedToPool()
		{
		}

		[Token(Token = "0x600383A")]
		[Address(RVA = "0x137C038", Offset = "0x137C038", VA = "0x137C038", Slot = "197")]
		public override void ManualAttach(IProtocolToken token)
		{
		}

		[Token(Token = "0x600383B")]
		[Address(RVA = "0x137BD40", Offset = "0x137BD40", VA = "0x137BD40")]
		private void ApplyAttachToken(ActorAttachToken token)
		{
		}

		[Token(Token = "0x600383C")]
		[Address(RVA = "0x137C208", Offset = "0x137C208", VA = "0x137C208")]
		private void HandleLimbDetached(GibDefinition gib)
		{
		}

		[Token(Token = "0x600383D")]
		[Address(RVA = "0x137C240", Offset = "0x137C240", VA = "0x137C240")]
		private void OnMovingAttackAnimHash()
		{
		}

		[Token(Token = "0x600383E")]
		[Address(RVA = "0x137C320", Offset = "0x137C320", VA = "0x137C320")]
		private void OnMovingAttackLayerWeight()
		{
		}

		[Token(Token = "0x600383F")]
		[Address(RVA = "0x137C3FC", Offset = "0x137C3FC", VA = "0x137C3FC")]
		private void OnLookWeight()
		{
		}

		[Token(Token = "0x6003840")]
		[Address(RVA = "0x137AFB0", Offset = "0x137AFB0", VA = "0x137AFB0", Slot = "20")]
		public override void SimulateOwner()
		{
		}

		[Token(Token = "0x6003841")]
		[Address(RVA = "0x137C50C", Offset = "0x137C50C", VA = "0x137C50C")]
		public PhysicMaterial GetMaterialFromRaycast(float length, int mask)
		{
			return null;
		}

		[Token(Token = "0x6003842")]
		[Address(RVA = "0x136FFD8", Offset = "0x136FFD8", VA = "0x136FFD8")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6003843")]
		[Address(RVA = "0x137C614", Offset = "0x137C614", VA = "0x137C614", Slot = "220")]
		private string IAttack.SelectAttackAnimation()
		{
			return null;
		}

		[Token(Token = "0x6003844")]
		[Address(RVA = "0x137C660", Offset = "0x137C660", VA = "0x137C660", Slot = "221")]
		private ActorAttackChanceProperties.BlockedAnimationData IAttack.SelectBlockedAnimation(string attackAnimation)
		{
			return null;
		}

		[Token(Token = "0x6003845")]
		[Address(RVA = "0x137C684", Offset = "0x137C684", VA = "0x137C684", Slot = "228")]
		public virtual bool ShouldMoveToAttackPosition()
		{
			return default(bool);
		}

		[Token(Token = "0x6003846")]
		[Address(RVA = "0x137C784", Offset = "0x137C784", VA = "0x137C784", Slot = "229")]
		public virtual bool IsBehaviourAllowed(ZombieBehaviours behaviours)
		{
			return default(bool);
		}

		[Token(Token = "0x6003847")]
		[Address(RVA = "0x137C794", Offset = "0x137C794", VA = "0x137C794")]
		public void SetOverrideAttackMatrix(AttackStateMatrix matrix)
		{
		}

		[Token(Token = "0x6003848")]
		[Address(RVA = "0x1373428", Offset = "0x1373428", VA = "0x1373428")]
		public float getChargeDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6003849")]
		[Address(RVA = "0x137B930", Offset = "0x137B930", VA = "0x137B930", Slot = "230")]
		public virtual void SetSpawnData(SpawnLocation location)
		{
		}

		[Token(Token = "0x600384A")]
		[Address(RVA = "0x137C7A4", Offset = "0x137C7A4", VA = "0x137C7A4", Slot = "231")]
		public virtual void StartEngageVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x600384B")]
		[Address(RVA = "0x137C7A8", Offset = "0x137C7A8", VA = "0x137C7A8", Slot = "232")]
		public virtual void FinishEngageVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x600384C")]
		[Address(RVA = "0x137C7AC", Offset = "0x137C7AC", VA = "0x137C7AC", Slot = "233")]
		public virtual void StartChargeVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x600384D")]
		[Address(RVA = "0x137C7B0", Offset = "0x137C7B0", VA = "0x137C7B0", Slot = "234")]
		public virtual void EndChargeVfx(AnimationEvent animationEvent)
		{
		}

		[Token(Token = "0x600384E")]
		[Address(RVA = "0x1379524", Offset = "0x1379524", VA = "0x1379524")]
		public Zombie()
		{
		}
	}
}
namespace Cabin.Actors.Properties
{
	[Serializable]
	[Token(Token = "0x200094E")]
	public class ActorMovementProperties
	{
		[Token(Token = "0x4002D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[UnityEngine.Tooltip("Request move token or skip it")]
		public bool requestMoveToToken;

		[Token(Token = "0x4002D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Header("Walk / Run")]
		public float distanceToStartRun;

		[Token(Token = "0x4002D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float distanceToStartWalk;

		[Token(Token = "0x4002D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Speed you want actor to walk at.")]
		public float walkingSpeed;

		[Token(Token = "0x4002D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Speed you want actor to run at.")]
		public float runningSpeed;

		[Token(Token = "0x4002D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("Charge speed should always be greater than run speed.")]
		public float chargeSpeed;

		[Token(Token = "0x4002D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("How much an actors speed will vary from the above. So 0.1 means an actors speed will vary +/- up to 10% of the base walk and run speeds.")]
		public float walkSpeedVariancePercentage;

		[Token(Token = "0x4002D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float walkBackwardsSpeedPercentage;

		[Token(Token = "0x4002D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float runSpeedVariancePercentage;

		[Token(Token = "0x4002D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Strafing Control (i.e. allow moving backwards")]
		[UnityEngine.Tooltip("Allow moving backwards if within this distance of a player, and if the player is the current active target.")]
		public float distanceToPlayerThreshold;

		[Token(Token = "0x4002D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Allow moving backwards if within this distance of desired move to location, and if a player is the current active target.")]
		public float distanceToMoveToThreshold;

		[Token(Token = "0x4002D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxMoveBackwardsSpeed;

		[Token(Token = "0x4002D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Speed applied after arm the bomb")]
		[Header("Exploder Zombie")]
		public float armedSpeed;

		[Token(Token = "0x4002D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Charge/Engagement/Attack")]
		[UnityEngine.Tooltip("Distance at which an enemy will start to charge towards the player when attacking them.")]
		public float chargeRadius;

		[Token(Token = "0x4002D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Charge distance variance percentage. So 0.4 will be 40% variance on chargeRadius, so effective charge distance will be 80% to 120% (40% variance) of chargeRadius.")]
		public float chargeRadiusVariance;

		[Token(Token = "0x4002D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Engagement")]
		[UnityEngine.Tooltip("Distance at which an enemy will ask for a position near to the target to attack.")]
		public float positioningRadius;

		[Token(Token = "0x4002D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Actual animation walk speed.")]
		[Header("Animation Data")]
		public float animationWalkSpeed;

		[Token(Token = "0x4002D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("Actual animation run speed.")]
		public float animationRunSpeed;

		[Token(Token = "0x4002D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Stun Data")]
		[UnityEngine.Tooltip("Set to true if the character has stagger animations available.")]
		public bool hasStaggerAnimations;

		[Token(Token = "0x4002D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		[UnityEngine.Tooltip("Set to true if the character has knockback animations available.")]
		public bool hasKnockBackAnimations;

		[Token(Token = "0x4002D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		[UnityEngine.Tooltip("Set to true if the character has stun animations available.")]
		public bool hasStunAnimations;

		[Token(Token = "0x4002D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ImpactStrength stunStrengthCalculator;

		[Token(Token = "0x4002D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float minStunDuration;

		[Token(Token = "0x4002D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float maxStunDuration;

		[Token(Token = "0x4002D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Delay between stuns.")]
		public float delayBetweenStuns;

		[Token(Token = "0x4002D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Header("Turn")]
		public float minAngleToUseTurnAnimation;

		[Token(Token = "0x4002D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float maxTurnAdjustementAngle;

		[Token(Token = "0x4002D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[FormerlySerializedAs("movingTurnSpeed")]
		public float runningTurnSpeed;

		[Token(Token = "0x4002D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float walkingTurnSpeed;

		[Token(Token = "0x4002D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[UnityEngine.Tooltip("Turn speed in degrees per second when not playing a turn animation.")]
		public float standingTurnSpeed;

		[Token(Token = "0x4002D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Jumping")]
		public float jumpGravity;

		[Token(Token = "0x4002D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float jumpHeightAjustment;

		[Token(Token = "0x6003852")]
		[Address(RVA = "0x137D938", Offset = "0x137D938", VA = "0x137D938")]
		public ActorMovementProperties()
		{
		}
	}
}
namespace SplineMesh
{
	[Serializable]
	[Token(Token = "0x200094F")]
	public class CubicBezierCurve
	{
		[Token(Token = "0x4002D4C")]
		private const int STEP_COUNT = 30;

		[Token(Token = "0x4002D4D")]
		private const float T_STEP = 1f / 30f;

		[Token(Token = "0x4002D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<CurveSample> samples;

		[Token(Token = "0x4002D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SplineNode n1;

		[Token(Token = "0x4002D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineNode n2;

		[Token(Token = "0x4002D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent Changed;

		[Token(Token = "0x170009FF")]
		public float Length
		{
			[Token(Token = "0x6003853")]
			[Address(RVA = "0x137D9B4", Offset = "0x137D9B4", VA = "0x137D9B4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003854")]
			[Address(RVA = "0x137D9BC", Offset = "0x137D9BC", VA = "0x137D9BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6003855")]
		[Address(RVA = "0x137D9C4", Offset = "0x137D9C4", VA = "0x137D9C4")]
		public CubicBezierCurve(SplineNode n1, SplineNode n2)
		{
		}

		[Token(Token = "0x6003856")]
		[Address(RVA = "0x137DEF4", Offset = "0x137DEF4", VA = "0x137DEF4")]
		public void ConnectStart(SplineNode n1)
		{
		}

		[Token(Token = "0x6003857")]
		[Address(RVA = "0x137E078", Offset = "0x137E078", VA = "0x137E078")]
		public void ConnectEnd(SplineNode n2)
		{
		}

		[Token(Token = "0x6003858")]
		[Address(RVA = "0x137E160", Offset = "0x137E160", VA = "0x137E160")]
		public Vector3 GetInverseDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003859")]
		[Address(RVA = "0x137E19C", Offset = "0x137E19C", VA = "0x137E19C")]
		private Vector3 GetLocation(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600385A")]
		[Address(RVA = "0x137E264", Offset = "0x137E264", VA = "0x137E264")]
		private Vector3 GetTangent(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600385B")]
		[Address(RVA = "0x137E3D4", Offset = "0x137E3D4", VA = "0x137E3D4")]
		private Vector3 GetUp(float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600385C")]
		[Address(RVA = "0x137E434", Offset = "0x137E434", VA = "0x137E434")]
		private Vector2 GetScale(float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600385D")]
		[Address(RVA = "0x137E480", Offset = "0x137E480", VA = "0x137E480")]
		private float GetRoll(float t)
		{
			return default(float);
		}

		[Token(Token = "0x600385E")]
		[Address(RVA = "0x137DBF0", Offset = "0x137DBF0", VA = "0x137DBF0")]
		private void ComputeSamples(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x600385F")]
		[Address(RVA = "0x137E4C8", Offset = "0x137E4C8", VA = "0x137E4C8")]
		private CurveSample CreateSample(float distance, float time)
		{
			return null;
		}

		[Token(Token = "0x6003860")]
		[Address(RVA = "0x137E6D4", Offset = "0x137E6D4", VA = "0x137E6D4")]
		public CurveSample GetSample(float time)
		{
			return null;
		}

		[Token(Token = "0x6003861")]
		[Address(RVA = "0x137EC2C", Offset = "0x137EC2C", VA = "0x137EC2C")]
		public CurveSample GetSampleAtDistance(float d)
		{
			return null;
		}

		[Token(Token = "0x6003862")]
		[Address(RVA = "0x137E8EC", Offset = "0x137E8EC", VA = "0x137E8EC")]
		private static void AssertTimeInBounds(float time)
		{
		}
	}
	[Token(Token = "0x2000950")]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	public class Spline : MonoBehaviour
	{
		[Token(Token = "0x4002D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SplineNode> nodes;

		[Token(Token = "0x4002D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<CubicBezierCurve> curves;

		[Token(Token = "0x4002D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Length;

		[Token(Token = "0x4002D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private bool isLoop;

		[Token(Token = "0x4002D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public UnityEvent CurveChanged;

		[Token(Token = "0x4002D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SplineNode start;

		[Token(Token = "0x4002D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SplineNode end;

		[Token(Token = "0x17000A00")]
		public bool IsLoop
		{
			[Token(Token = "0x6003863")]
			[Address(RVA = "0x137EF08", Offset = "0x137EF08", VA = "0x137EF08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003864")]
			[Address(RVA = "0x137EF10", Offset = "0x137EF10", VA = "0x137EF10")]
			set
			{
			}
		}

		[Token(Token = "0x14000034")]
		public event ListChangeHandler<SplineNode> NodeListChanged
		{
			[Token(Token = "0x6003865")]
			[Address(RVA = "0x137F124", Offset = "0x137F124", VA = "0x137F124")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003866")]
			[Address(RVA = "0x137F1D4", Offset = "0x137F1D4", VA = "0x137F1D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003867")]
		[Address(RVA = "0x137F284", Offset = "0x137F284", VA = "0x137F284")]
		private void Reset()
		{
		}

		[Token(Token = "0x6003868")]
		[Address(RVA = "0x137F9EC", Offset = "0x137F9EC", VA = "0x137F9EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003869")]
		[Address(RVA = "0x137FC68", Offset = "0x137FC68", VA = "0x137FC68")]
		public ReadOnlyCollection<CubicBezierCurve> GetCurves()
		{
			return null;
		}

		[Token(Token = "0x600386A")]
		[Address(RVA = "0x137F860", Offset = "0x137F860", VA = "0x137F860")]
		private void RaiseNodeListChanged(ListChangedEventArgs<SplineNode> args)
		{
		}

		[Token(Token = "0x600386B")]
		[Address(RVA = "0x137F888", Offset = "0x137F888", VA = "0x137F888")]
		private void UpdateAfterCurveChanged()
		{
		}

		[Token(Token = "0x600386C")]
		[Address(RVA = "0x137FCB8", Offset = "0x137FCB8", VA = "0x137FCB8")]
		public CurveSample GetSample(float t)
		{
			return null;
		}

		[Token(Token = "0x600386D")]
		[Address(RVA = "0x137FED8", Offset = "0x137FED8", VA = "0x137FED8")]
		public CubicBezierCurve GetCurve(float t)
		{
			return null;
		}

		[Token(Token = "0x600386E")]
		[Address(RVA = "0x137FD3C", Offset = "0x137FD3C", VA = "0x137FD3C")]
		private int GetNodeIndexForTime(float t)
		{
			return default(int);
		}

		[Token(Token = "0x600386F")]
		[Address(RVA = "0x137FF48", Offset = "0x137FF48", VA = "0x137FF48")]
		public CurveSample GetSampleAtDistance(float d)
		{
			return null;
		}

		[Token(Token = "0x6003870")]
		[Address(RVA = "0x137F504", Offset = "0x137F504", VA = "0x137F504")]
		public void AddNode(SplineNode node)
		{
		}

		[Token(Token = "0x6003871")]
		[Address(RVA = "0x13801E4", Offset = "0x13801E4", VA = "0x13801E4")]
		public void InsertNode(int index, SplineNode node)
		{
		}

		[Token(Token = "0x6003872")]
		[Address(RVA = "0x1380520", Offset = "0x1380520", VA = "0x1380520")]
		public void RemoveNode(SplineNode node)
		{
		}

		[Token(Token = "0x6003873")]
		[Address(RVA = "0x137EF1C", Offset = "0x137EF1C", VA = "0x137EF1C")]
		private void updateLoopBinding()
		{
		}

		[Token(Token = "0x6003874")]
		[Address(RVA = "0x138088C", Offset = "0x138088C", VA = "0x138088C")]
		private void StartNodeChanged(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6003875")]
		[Address(RVA = "0x1380D94", Offset = "0x1380D94", VA = "0x1380D94")]
		private void EndNodeChanged(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6003876")]
		[Address(RVA = "0x1380EDC", Offset = "0x1380EDC", VA = "0x1380EDC")]
		public Spline()
		{
		}
	}
	[Token(Token = "0x2000951")]
	public enum ListChangeType
	{
		[Token(Token = "0x4002D5C")]
		Add,
		[Token(Token = "0x4002D5D")]
		Insert,
		[Token(Token = "0x4002D5E")]
		Remove,
		[Token(Token = "0x4002D5F")]
		clear
	}
	[Token(Token = "0x2000952")]
	public class ListChangedEventArgs<T> : EventArgs
	{
		[Token(Token = "0x4002D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ListChangeType type;

		[Token(Token = "0x4002D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> newItems;

		[Token(Token = "0x4002D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> removedItems;

		[Token(Token = "0x4002D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int insertIndex;

		[Token(Token = "0x4002D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int removeIndex;

		[Token(Token = "0x6003877")]
		public ListChangedEventArgs()
		{
		}
	}
	[Token(Token = "0x2000953")]
	public delegate void ListChangeHandler<T2>(object sender, ListChangedEventArgs<T2> args);
	[Serializable]
	[Token(Token = "0x2000954")]
	public class SplineNode
	{
		[Token(Token = "0x4002D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Vector3 position;

		[Token(Token = "0x4002D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Vector3 direction;

		[Token(Token = "0x4002D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Vector3 up;

		[Token(Token = "0x4002D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private Vector2 scale;

		[Token(Token = "0x4002D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float roll;

		[Token(Token = "0x17000A01")]
		public Vector3 Position
		{
			[Token(Token = "0x600387C")]
			[Address(RVA = "0x1380FF0", Offset = "0x1380FF0", VA = "0x1380FF0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600387D")]
			[Address(RVA = "0x13809D4", Offset = "0x13809D4", VA = "0x13809D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000A02")]
		public Vector3 Direction
		{
			[Token(Token = "0x600387E")]
			[Address(RVA = "0x1380FFC", Offset = "0x1380FFC", VA = "0x1380FFC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600387F")]
			[Address(RVA = "0x1380AA4", Offset = "0x1380AA4", VA = "0x1380AA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000A03")]
		public Vector3 Up
		{
			[Token(Token = "0x6003880")]
			[Address(RVA = "0x1381008", Offset = "0x1381008", VA = "0x1381008")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6003881")]
			[Address(RVA = "0x1380CC4", Offset = "0x1380CC4", VA = "0x1380CC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000A04")]
		public Vector2 Scale
		{
			[Token(Token = "0x6003882")]
			[Address(RVA = "0x1381014", Offset = "0x1381014", VA = "0x1381014")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6003883")]
			[Address(RVA = "0x1380C14", Offset = "0x1380C14", VA = "0x1380C14")]
			set
			{
			}
		}

		[Token(Token = "0x17000A05")]
		public float Roll
		{
			[Token(Token = "0x6003884")]
			[Address(RVA = "0x138101C", Offset = "0x138101C", VA = "0x138101C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003885")]
			[Address(RVA = "0x1380B74", Offset = "0x1380B74", VA = "0x1380B74")]
			set
			{
			}
		}

		[Token(Token = "0x14000035")]
		[HideInInspector]
		public event System.EventHandler Changed
		{
			[Token(Token = "0x6003887")]
			[Address(RVA = "0x137DB54", Offset = "0x137DB54", VA = "0x137DB54")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6003888")]
			[Address(RVA = "0x137DFDC", Offset = "0x137DFDC", VA = "0x137DFDC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6003886")]
		[Address(RVA = "0x137F414", Offset = "0x137F414", VA = "0x137F414")]
		public SplineNode(Vector3 position, Vector3 direction)
		{
		}
	}
	[Token(Token = "0x2000955")]
	public class CurveSample
	{
		[Token(Token = "0x4002D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Vector3 location;

		[Token(Token = "0x4002D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public readonly Vector3 tangent;

		[Token(Token = "0x4002D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly Vector3 up;

		[Token(Token = "0x4002D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly Vector2 scale;

		[Token(Token = "0x4002D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly float roll;

		[Token(Token = "0x4002D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly float distanceInCurve;

		[Token(Token = "0x4002D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public readonly float timeInCurve;

		[Token(Token = "0x4002D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion rotation;

		[Token(Token = "0x17000A06")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6003889")]
			[Address(RVA = "0x1381024", Offset = "0x1381024", VA = "0x1381024")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x600388A")]
		[Address(RVA = "0x137E5E4", Offset = "0x137E5E4", VA = "0x137E5E4")]
		public CurveSample(Vector3 location, Vector3 tangent, Vector3 up, Vector2 scale, float roll, float distanceInCurve, float timeInCurve)
		{
		}

		[Token(Token = "0x600388B")]
		[Address(RVA = "0x137E99C", Offset = "0x137E99C", VA = "0x137E99C")]
		public static CurveSample Lerp(CurveSample a, CurveSample b, float t)
		{
			return null;
		}

		[Token(Token = "0x600388C")]
		[Address(RVA = "0x1381264", Offset = "0x1381264", VA = "0x1381264")]
		public MeshVertex GetBent(MeshVertex vert)
		{
			return null;
		}
	}
	[Token(Token = "0x2000956")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(Spline))]
	[ExecuteInEditMode]
	public class SplineSmoother : MonoBehaviour
	{
		[Token(Token = "0x4002D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Spline spline;

		[Token(Token = "0x4002D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float curvature;

		[Token(Token = "0x17000A07")]
		private Spline Spline
		{
			[Token(Token = "0x600388D")]
			[Address(RVA = "0x1381558", Offset = "0x1381558", VA = "0x1381558")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600388E")]
		[Address(RVA = "0x1381600", Offset = "0x1381600", VA = "0x1381600")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600388F")]
		[Address(RVA = "0x1381740", Offset = "0x1381740", VA = "0x1381740")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003890")]
		[Address(RVA = "0x138195C", Offset = "0x138195C", VA = "0x138195C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003891")]
		[Address(RVA = "0x1381B70", Offset = "0x1381B70", VA = "0x1381B70")]
		private void Spline_NodeListChanged(object sender, ListChangedEventArgs<SplineNode> args)
		{
		}

		[Token(Token = "0x6003892")]
		[Address(RVA = "0x1381E14", Offset = "0x1381E14", VA = "0x1381E14")]
		private void OnNodeChanged(object sender, EventArgs e)
		{
		}

		[Token(Token = "0x6003893")]
		[Address(RVA = "0x1381F90", Offset = "0x1381F90", VA = "0x1381F90")]
		private void SmoothNode(SplineNode node)
		{
		}

		[Token(Token = "0x6003894")]
		[Address(RVA = "0x1381604", Offset = "0x1381604", VA = "0x1381604")]
		private void SmoothAll()
		{
		}

		[Token(Token = "0x6003895")]
		[Address(RVA = "0x13823DC", Offset = "0x13823DC", VA = "0x13823DC")]
		public SplineSmoother()
		{
		}
	}
	[Token(Token = "0x2000957")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Spline))]
	public class ExampleContortAlong : MonoBehaviour
	{
		[Token(Token = "0x4002D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Spline spline;

		[Token(Token = "0x4002D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float rate;

		[Token(Token = "0x4002D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MeshBender meshBender;

		[Token(Token = "0x4002D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public GameObject generated;

		[Token(Token = "0x4002D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Mesh mesh;

		[Token(Token = "0x4002D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material material;

		[Token(Token = "0x4002D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x4002D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 scale;

		[Token(Token = "0x4002D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float DurationInSecond;

		[Token(Token = "0x6003896")]
		[Address(RVA = "0x13823F0", Offset = "0x13823F0", VA = "0x13823F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003897")]
		[Address(RVA = "0x13827D4", Offset = "0x13827D4", VA = "0x13827D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6003898")]
		[Address(RVA = "0x13827D8", Offset = "0x13827D8", VA = "0x13827D8")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6003899")]
		[Address(RVA = "0x13827DC", Offset = "0x13827DC", VA = "0x13827DC")]
		private void EditorUpdate()
		{
		}

		[Token(Token = "0x600389A")]
		[Address(RVA = "0x1382828", Offset = "0x1382828", VA = "0x1382828")]
		private void Contort()
		{
		}

		[Token(Token = "0x600389B")]
		[Address(RVA = "0x13823F8", Offset = "0x13823F8", VA = "0x13823F8")]
		private void Init()
		{
		}

		[Token(Token = "0x600389C")]
		[Address(RVA = "0x1382F38", Offset = "0x1382F38", VA = "0x1382F38")]
		public ExampleContortAlong()
		{
		}
	}
	[Token(Token = "0x2000958")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Spline))]
	public class ExampleFollowSpline : MonoBehaviour
	{
		[Token(Token = "0x4002D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject generated;

		[Token(Token = "0x4002D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Spline spline;

		[Token(Token = "0x4002D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float rate;

		[Token(Token = "0x4002D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject Follower;

		[Token(Token = "0x4002D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DurationInSecond;

		[Token(Token = "0x600389D")]
		[Address(RVA = "0x1382F40", Offset = "0x1382F40", VA = "0x1382F40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600389E")]
		[Address(RVA = "0x13830E0", Offset = "0x13830E0", VA = "0x13830E0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600389F")]
		[Address(RVA = "0x13830E4", Offset = "0x13830E4", VA = "0x13830E4")]
		private void EditorUpdate()
		{
		}

		[Token(Token = "0x60038A0")]
		[Address(RVA = "0x1383174", Offset = "0x1383174", VA = "0x1383174")]
		private void PlaceFollower()
		{
		}

		[Token(Token = "0x60038A1")]
		[Address(RVA = "0x1383254", Offset = "0x1383254", VA = "0x1383254")]
		public ExampleFollowSpline()
		{
		}
	}
	[Token(Token = "0x2000959")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Spline))]
	public class ExampleGrowingRoot : MonoBehaviour
	{
		[Token(Token = "0x4002D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject generated;

		[Token(Token = "0x4002D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Spline spline;

		[Token(Token = "0x4002D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float rate;

		[Token(Token = "0x4002D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshBender meshBender;

		[Token(Token = "0x4002D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Mesh mesh;

		[Token(Token = "0x4002D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material material;

		[Token(Token = "0x4002D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x4002D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 scale;

		[Token(Token = "0x4002D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float startScale;

		[Token(Token = "0x4002D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float DurationInSecond;

		[Token(Token = "0x60038A2")]
		[Address(RVA = "0x138325C", Offset = "0x138325C", VA = "0x138325C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60038A3")]
		[Address(RVA = "0x138364C", Offset = "0x138364C", VA = "0x138364C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60038A4")]
		[Address(RVA = "0x1383650", Offset = "0x1383650", VA = "0x1383650")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60038A5")]
		[Address(RVA = "0x1383654", Offset = "0x1383654", VA = "0x1383654")]
		private void EditorUpdate()
		{
		}

		[Token(Token = "0x60038A6")]
		[Address(RVA = "0x13836A0", Offset = "0x13836A0", VA = "0x13836A0")]
		private void Contort()
		{
		}

		[Token(Token = "0x60038A7")]
		[Address(RVA = "0x1383264", Offset = "0x1383264", VA = "0x1383264")]
		private void Init()
		{
		}

		[Token(Token = "0x60038A8")]
		[Address(RVA = "0x1383938", Offset = "0x1383938", VA = "0x1383938")]
		public ExampleGrowingRoot()
		{
		}
	}
	[Token(Token = "0x200095A")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[SelectionBase]
	public class ExampleSower : MonoBehaviour
	{
		[Token(Token = "0x4002D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject generated;

		[Token(Token = "0x4002D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Spline spline;

		[Token(Token = "0x4002D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool toUpdate;

		[Token(Token = "0x4002D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject prefab;

		[Token(Token = "0x4002D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float scale;

		[Token(Token = "0x4002D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float scaleRange;

		[Token(Token = "0x4002D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float spacing;

		[Token(Token = "0x4002D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float spacingRange;

		[Token(Token = "0x4002D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float offset;

		[Token(Token = "0x4002D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float offsetRange;

		[Token(Token = "0x4002D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool isRandomYaw;

		[Token(Token = "0x4002D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int randomSeed;

		[Token(Token = "0x60038A9")]
		[Address(RVA = "0x1383948", Offset = "0x1383948", VA = "0x1383948")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60038AA")]
		[Address(RVA = "0x1383E30", Offset = "0x1383E30", VA = "0x1383E30")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60038AB")]
		[Address(RVA = "0x1383E3C", Offset = "0x1383E3C", VA = "0x1383E3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60038AC")]
		[Address(RVA = "0x1383E5C", Offset = "0x1383E5C", VA = "0x1383E5C")]
		public void Sow()
		{
		}

		[Token(Token = "0x60038AD")]
		[Address(RVA = "0x13844A4", Offset = "0x13844A4", VA = "0x13844A4")]
		public ExampleSower()
		{
		}
	}
	[Token(Token = "0x200095B")]
	[DisallowMultipleComponent]
	public class ExampleTentacle : MonoBehaviour
	{
		[Token(Token = "0x4002D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Spline spline;

		[Token(Token = "0x4002D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float startScale;

		[Token(Token = "0x4002D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float endScale;

		[Token(Token = "0x4002D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startRoll;

		[Token(Token = "0x4002D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float endRoll;

		[Token(Token = "0x60038B1")]
		[Address(RVA = "0x13847F0", Offset = "0x13847F0", VA = "0x13847F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60038B2")]
		[Address(RVA = "0x1384848", Offset = "0x1384848", VA = "0x1384848")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60038B3")]
		[Address(RVA = "0x1384C70", Offset = "0x1384C70", VA = "0x1384C70")]
		public ExampleTentacle()
		{
		}
	}
	[Token(Token = "0x200095C")]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	[SelectionBase]
	public class ExampleTrack : MonoBehaviour
	{
		[Token(Token = "0x4002D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject generated;

		[Token(Token = "0x4002D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Spline spline;

		[Token(Token = "0x4002DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool toUpdate;

		[Token(Token = "0x4002DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<TrackSegment> segments;

		[Token(Token = "0x4002DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updateInPlayMode;

		[Token(Token = "0x60038B4")]
		[Address(RVA = "0x1384C80", Offset = "0x1384C80", VA = "0x1384C80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60038B5")]
		[Address(RVA = "0x1385060", Offset = "0x1385060", VA = "0x1385060")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60038B6")]
		[Address(RVA = "0x13850D0", Offset = "0x13850D0", VA = "0x13850D0")]
		private void Update()
		{
		}

		[Token(Token = "0x60038B7")]
		[Address(RVA = "0x138510C", Offset = "0x138510C", VA = "0x138510C")]
		public void CreateMeshes()
		{
		}

		[Token(Token = "0x60038B8")]
		[Address(RVA = "0x1385FFC", Offset = "0x1385FFC", VA = "0x1385FFC")]
		public ExampleTrack()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200095E")]
	public class TrackSegment
	{
		[Token(Token = "0x4002DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<TransformedMesh> transformedMeshes;

		[Token(Token = "0x60038BD")]
		[Address(RVA = "0x1384FD8", Offset = "0x1384FD8", VA = "0x1384FD8")]
		public TrackSegment()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200095F")]
	public class TransformedMesh
	{
		[Token(Token = "0x4002DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x4002DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material material;

		[Token(Token = "0x4002DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicMaterial physicMaterial;

		[Token(Token = "0x4002DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 translation;

		[Token(Token = "0x4002DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 rotation;

		[Token(Token = "0x4002DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 scale;

		[Token(Token = "0x60038BE")]
		[Address(RVA = "0x1386290", Offset = "0x1386290", VA = "0x1386290")]
		public TransformedMesh()
		{
		}
	}
	[Token(Token = "0x2000960")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Spline))]
	public class RopeBuilder : MonoBehaviour
	{
		[Token(Token = "0x4002DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool toUpdate;

		[Token(Token = "0x4002DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject generated;

		[Token(Token = "0x4002DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Spline spline;

		[Token(Token = "0x4002DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject firstSegment;

		[Token(Token = "0x4002DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public List<GameObject> wayPoints;

		[Token(Token = "0x4002DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject segmentPrefab;

		[Token(Token = "0x4002DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int segmentCount;

		[Token(Token = "0x4002DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float segmentSpacing;

		[Token(Token = "0x17000A08")]
		private GameObject Generated
		{
			[Token(Token = "0x60038BF")]
			[Address(RVA = "0x1386328", Offset = "0x1386328", VA = "0x1386328")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60038C0")]
		[Address(RVA = "0x13864D4", Offset = "0x13864D4", VA = "0x13864D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60038C1")]
		[Address(RVA = "0x1386538", Offset = "0x1386538", VA = "0x1386538")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60038C2")]
		[Address(RVA = "0x1386544", Offset = "0x1386544", VA = "0x1386544")]
		private void Update()
		{
		}

		[Token(Token = "0x60038C3")]
		[Address(RVA = "0x1386B34", Offset = "0x1386B34", VA = "0x1386B34")]
		private void UpdateNodes()
		{
		}

		[Token(Token = "0x60038C4")]
		[Address(RVA = "0x138682C", Offset = "0x138682C", VA = "0x138682C")]
		private void UpdateSpline()
		{
		}

		[Token(Token = "0x60038C5")]
		[Address(RVA = "0x13865CC", Offset = "0x13865CC", VA = "0x13865CC")]
		private void Generate()
		{
		}

		[Token(Token = "0x60038C6")]
		[Address(RVA = "0x1387084", Offset = "0x1387084", VA = "0x1387084")]
		public RopeBuilder()
		{
		}
	}
	[Token(Token = "0x2000961")]
	[RequireComponent(typeof(MeshFilter))]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(MeshRenderer))]
	public class ExtrusionSegment : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000962")]
		public class Vertex
		{
			[Token(Token = "0x4002DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector2 point;

			[Token(Token = "0x4002DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector2 normal;

			[Token(Token = "0x4002DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float uCoord;

			[Token(Token = "0x60038D8")]
			[Address(RVA = "0x138889C", Offset = "0x138889C", VA = "0x138889C")]
			public Vertex(Vector2 point, Vector2 normal, float uCoord)
			{
			}

			[Token(Token = "0x60038D9")]
			[Address(RVA = "0x13888EC", Offset = "0x13888EC", VA = "0x13888EC")]
			public Vertex(Vertex other)
			{
			}
		}

		[Token(Token = "0x4002DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isDirty;

		[Token(Token = "0x4002DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshFilter mf;

		[Token(Token = "0x4002DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Mesh result;

		[Token(Token = "0x4002DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool useSpline;

		[Token(Token = "0x4002DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CubicBezierCurve curve;

		[Token(Token = "0x4002DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Spline spline;

		[Token(Token = "0x4002DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float intervalStart;

		[Token(Token = "0x4002DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float intervalEnd;

		[Token(Token = "0x4002DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Vertex> shapeVertices;

		[Token(Token = "0x4002DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float textureScale;

		[Token(Token = "0x4002DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float textureOffset;

		[Token(Token = "0x4002DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float sampleSpacing;

		[Token(Token = "0x17000A09")]
		public List<Vertex> ShapeVertices
		{
			[Token(Token = "0x60038C7")]
			[Address(RVA = "0x138710C", Offset = "0x138710C", VA = "0x138710C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60038C8")]
			[Address(RVA = "0x1387114", Offset = "0x1387114", VA = "0x1387114")]
			set
			{
			}
		}

		[Token(Token = "0x17000A0A")]
		public float TextureScale
		{
			[Token(Token = "0x60038C9")]
			[Address(RVA = "0x1387148", Offset = "0x1387148", VA = "0x1387148")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60038CA")]
			[Address(RVA = "0x1387150", Offset = "0x1387150", VA = "0x1387150")]
			set
			{
			}
		}

		[Token(Token = "0x17000A0B")]
		public float TextureOffset
		{
			[Token(Token = "0x60038CB")]
			[Address(RVA = "0x1387170", Offset = "0x1387170", VA = "0x1387170")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60038CC")]
			[Address(RVA = "0x1387178", Offset = "0x1387178", VA = "0x1387178")]
			set
			{
			}
		}

		[Token(Token = "0x17000A0C")]
		public float SampleSpacing
		{
			[Token(Token = "0x60038CD")]
			[Address(RVA = "0x1387198", Offset = "0x1387198", VA = "0x1387198")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60038CE")]
			[Address(RVA = "0x13871A0", Offset = "0x13871A0", VA = "0x13871A0")]
			set
			{
			}
		}

		[Token(Token = "0x60038CF")]
		[Address(RVA = "0x1387234", Offset = "0x1387234", VA = "0x1387234")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60038D0")]
		[Address(RVA = "0x1387330", Offset = "0x1387330", VA = "0x1387330")]
		public void SetInterval(CubicBezierCurve curve)
		{
		}

		[Token(Token = "0x60038D1")]
		[Address(RVA = "0x138749C", Offset = "0x138749C", VA = "0x138749C")]
		public void SetInterval(Spline spline, float intervalStart, float intervalEnd = 0f)
		{
		}

		[Token(Token = "0x60038D2")]
		[Address(RVA = "0x138713C", Offset = "0x138713C", VA = "0x138713C")]
		private void SetDirty()
		{
		}

		[Token(Token = "0x60038D3")]
		[Address(RVA = "0x1387794", Offset = "0x1387794", VA = "0x1387794")]
		private void Update()
		{
		}

		[Token(Token = "0x60038D4")]
		[Address(RVA = "0x13877B4", Offset = "0x13877B4", VA = "0x13877B4")]
		public void ComputeIfNeeded()
		{
		}

		[Token(Token = "0x60038D5")]
		[Address(RVA = "0x1388258", Offset = "0x1388258", VA = "0x1388258")]
		private List<CurveSample> GetPath()
		{
			return null;
		}

		[Token(Token = "0x60038D6")]
		[Address(RVA = "0x13877D4", Offset = "0x13877D4", VA = "0x13877D4")]
		public void Compute()
		{
		}

		[Token(Token = "0x60038D7")]
		[Address(RVA = "0x1388800", Offset = "0x1388800", VA = "0x1388800")]
		public ExtrusionSegment()
		{
		}
	}
	[Token(Token = "0x2000964")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(MeshFilter))]
	[DisallowMultipleComponent]
	public class MeshBender : MonoBehaviour
	{
		[Token(Token = "0x2000965")]
		public enum FillingMode
		{
			[Token(Token = "0x4002DD2")]
			Once,
			[Token(Token = "0x4002DD3")]
			Repeat,
			[Token(Token = "0x4002DD4")]
			StretchToInterval
		}

		[Token(Token = "0x4002DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isDirty;

		[Token(Token = "0x4002DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh result;

		[Token(Token = "0x4002DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool useSpline;

		[Token(Token = "0x4002DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Spline spline;

		[Token(Token = "0x4002DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float intervalStart;

		[Token(Token = "0x4002DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float intervalEnd;

		[Token(Token = "0x4002DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CubicBezierCurve curve;

		[Token(Token = "0x4002DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<float, CurveSample> sampleCache;

		[Token(Token = "0x4002DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SourceMesh source;

		[Token(Token = "0x4002DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private FillingMode mode;

		[Token(Token = "0x17000A0D")]
		public SourceMesh Source
		{
			[Token(Token = "0x60038DF")]
			[Address(RVA = "0x13889F8", Offset = "0x13889F8", VA = "0x13889F8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60038E0")]
			[Address(RVA = "0x1382EF4", Offset = "0x1382EF4", VA = "0x1382EF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000A0E")]
		public FillingMode Mode
		{
			[Token(Token = "0x60038E1")]
			[Address(RVA = "0x1388A0C", Offset = "0x1388A0C", VA = "0x1388A0C")]
			get
			{
				return default(FillingMode);
			}
			[Token(Token = "0x60038E2")]
			[Address(RVA = "0x1382F1C", Offset = "0x1382F1C", VA = "0x1382F1C")]
			set
			{
			}
		}

		[Token(Token = "0x60038E3")]
		[Address(RVA = "0x1385E18", Offset = "0x1385E18", VA = "0x1385E18")]
		public void SetInterval(CubicBezierCurve curve)
		{
		}

		[Token(Token = "0x60038E4")]
		[Address(RVA = "0x13828D4", Offset = "0x13828D4", VA = "0x13828D4")]
		public void SetInterval(Spline spline, float intervalStart, float intervalEnd = 0f)
		{
		}

		[Token(Token = "0x60038E5")]
		[Address(RVA = "0x1388A14", Offset = "0x1388A14", VA = "0x1388A14")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60038E6")]
		[Address(RVA = "0x1388B94", Offset = "0x1388B94", VA = "0x1388B94")]
		private void Update()
		{
		}

		[Token(Token = "0x60038E7")]
		[Address(RVA = "0x1382BCC", Offset = "0x1382BCC", VA = "0x1382BCC")]
		public void ComputeIfNeeded()
		{
		}

		[Token(Token = "0x60038E8")]
		[Address(RVA = "0x1388A00", Offset = "0x1388A00", VA = "0x1388A00")]
		private void SetDirty()
		{
		}

		[Token(Token = "0x60038E9")]
		[Address(RVA = "0x1388BA4", Offset = "0x1388BA4", VA = "0x1388BA4")]
		private void Compute()
		{
		}

		[Token(Token = "0x60038EA")]
		[Address(RVA = "0x138A588", Offset = "0x138A588", VA = "0x138A588")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60038EB")]
		[Address(RVA = "0x1388BD0", Offset = "0x1388BD0", VA = "0x1388BD0")]
		private void FillOnce()
		{
		}

		[Token(Token = "0x60038EC")]
		[Address(RVA = "0x1389174", Offset = "0x1389174", VA = "0x1389174")]
		private void FillRepeat()
		{
		}

		[Token(Token = "0x60038ED")]
		[Address(RVA = "0x1389BFC", Offset = "0x1389BFC", VA = "0x1389BFC")]
		private void FillStretch()
		{
		}

		[Token(Token = "0x60038EE")]
		[Address(RVA = "0x138A6B8", Offset = "0x138A6B8", VA = "0x138A6B8")]
		public MeshBender()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000967")]
	public class MeshVertex
	{
		[Token(Token = "0x4002DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4002DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x4002DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 uv;

		[Token(Token = "0x60038F7")]
		[Address(RVA = "0x13814F0", Offset = "0x13814F0", VA = "0x13814F0")]
		public MeshVertex(Vector3 position, Vector3 normal, Vector2 uv)
		{
		}

		[Token(Token = "0x60038F8")]
		[Address(RVA = "0x138A868", Offset = "0x138A868", VA = "0x138A868")]
		public MeshVertex(Vector3 position, Vector3 normal)
		{
		}
	}
	[Token(Token = "0x2000968")]
	public class SourceMesh
	{
		[Token(Token = "0x4002DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 translation;

		[Token(Token = "0x4002DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Quaternion rotation;

		[Token(Token = "0x4002DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 scale;

		[Token(Token = "0x4002DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Mesh mesh;

		[Token(Token = "0x4002DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<MeshVertex> vertices;

		[Token(Token = "0x4002DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] triangles;

		[Token(Token = "0x4002DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float minX;

		[Token(Token = "0x4002DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float length;

		[Token(Token = "0x17000A0F")]
		internal Mesh Mesh
		{
			[Token(Token = "0x60038F9")]
			[Address(RVA = "0x138A900", Offset = "0x138A900", VA = "0x138A900")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000A10")]
		internal List<MeshVertex> Vertices
		{
			[Token(Token = "0x60038FA")]
			[Address(RVA = "0x138A628", Offset = "0x138A628", VA = "0x138A628")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000A11")]
		internal int[] Triangles
		{
			[Token(Token = "0x60038FB")]
			[Address(RVA = "0x138A670", Offset = "0x138A670", VA = "0x138A670")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000A12")]
		internal float MinX
		{
			[Token(Token = "0x60038FC")]
			[Address(RVA = "0x138A64C", Offset = "0x138A64C", VA = "0x138A64C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000A13")]
		internal float Length
		{
			[Token(Token = "0x60038FD")]
			[Address(RVA = "0x138A694", Offset = "0x138A694", VA = "0x138A694")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60038FE")]
		[Address(RVA = "0x138AEEC", Offset = "0x138AEEC", VA = "0x138AEEC")]
		private SourceMesh(Mesh mesh)
		{
		}

		[Token(Token = "0x60038FF")]
		[Address(RVA = "0x138AF60", Offset = "0x138AF60", VA = "0x138AF60")]
		private SourceMesh(SourceMesh other)
		{
		}

		[Token(Token = "0x6003900")]
		[Address(RVA = "0x1382D88", Offset = "0x1382D88", VA = "0x1382D88")]
		public static SourceMesh Build(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6003901")]
		[Address(RVA = "0x1385D94", Offset = "0x1385D94", VA = "0x1385D94")]
		public SourceMesh Translate(Vector3 translation)
		{
			return null;
		}

		[Token(Token = "0x6003902")]
		[Address(RVA = "0x138B008", Offset = "0x138B008", VA = "0x138B008")]
		public SourceMesh Translate(float x, float y, float z)
		{
			return null;
		}

		[Token(Token = "0x6003903")]
		[Address(RVA = "0x1382DE8", Offset = "0x1382DE8", VA = "0x1382DE8")]
		public SourceMesh Rotate(Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6003904")]
		[Address(RVA = "0x1382E70", Offset = "0x1382E70", VA = "0x1382E70")]
		public SourceMesh Scale(Vector3 scale)
		{
			return null;
		}

		[Token(Token = "0x6003905")]
		[Address(RVA = "0x138B00C", Offset = "0x138B00C", VA = "0x138B00C")]
		public SourceMesh Scale(float x, float y, float z)
		{
			return null;
		}

		[Token(Token = "0x6003906")]
		[Address(RVA = "0x138A908", Offset = "0x138A908", VA = "0x138A908")]
		private void BuildData()
		{
		}
	}
	[Token(Token = "0x2000969")]
	[RequireComponent(typeof(Spline))]
	[ExecuteInEditMode]
	public class SplineExtrusion : MonoBehaviour
	{
		[Token(Token = "0x4002DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Spline spline;

		[Token(Token = "0x4002DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool toUpdate;

		[Token(Token = "0x4002DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject generated;

		[Token(Token = "0x4002DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<ExtrusionSegment.Vertex> shapeVertices;

		[Token(Token = "0x4002DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material material;

		[Token(Token = "0x4002DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float textureScale;

		[Token(Token = "0x4002DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float sampleSpacing;

		[Token(Token = "0x6003907")]
		[Address(RVA = "0x138B0EC", Offset = "0x138B0EC", VA = "0x138B0EC")]
		private void Reset()
		{
		}

		[Token(Token = "0x6003908")]
		[Address(RVA = "0x138B55C", Offset = "0x138B55C", VA = "0x138B55C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6003909")]
		[Address(RVA = "0x138B350", Offset = "0x138B350", VA = "0x138B350")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600390A")]
		[Address(RVA = "0x138B568", Offset = "0x138B568", VA = "0x138B568")]
		private void Update()
		{
		}

		[Token(Token = "0x600390B")]
		[Address(RVA = "0x138B588", Offset = "0x138B588", VA = "0x138B588")]
		private void GenerateMesh()
		{
		}

		[Token(Token = "0x600390C")]
		[Address(RVA = "0x138BBC4", Offset = "0x138BBC4", VA = "0x138BBC4")]
		public void SetToUpdate()
		{
		}

		[Token(Token = "0x600390D")]
		[Address(RVA = "0x138BBD0", Offset = "0x138BBD0", VA = "0x138BBD0")]
		public SplineExtrusion()
		{
		}
	}
	[Token(Token = "0x200096A")]
	[SelectionBase]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	public class SplineMeshTiling : MonoBehaviour
	{
		[Token(Token = "0x4002DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject generated;

		[Token(Token = "0x4002DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Spline spline;

		[Token(Token = "0x4002DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool toUpdate;

		[Token(Token = "0x4002DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Mesh to bend along the spline.")]
		public Mesh mesh;

		[Token(Token = "0x4002DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Material to apply on the bent mesh.")]
		public Material material;

		[Token(Token = "0x4002DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Physic material to apply on the bent mesh.")]
		public PhysicMaterial physicMaterial;

		[Token(Token = "0x4002DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Translation to apply on the mesh before bending it.")]
		public Vector3 translation;

		[Token(Token = "0x4002DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("Rotation to apply on the mesh before bending it.")]
		public Vector3 rotation;

		[Token(Token = "0x4002DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Scale to apply on the mesh before bending it.")]
		public Vector3 scale;

		[Token(Token = "0x4002DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[UnityEngine.Tooltip("If true, a mesh collider will be generated.")]
		public bool generateCollider;

		[Token(Token = "0x4002DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[UnityEngine.Tooltip("If true, the mesh will be bent on play mode. If false, the bent mesh will be kept from the editor mode, allowing lighting baking.")]
		public bool updateInPlayMode;

		[Token(Token = "0x4002DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[UnityEngine.Tooltip("If true, a mesh will be placed on each curve of the spline. If false, a single mesh will be placed for the whole spline.")]
		public bool curveSpace;

		[Token(Token = "0x4002DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("The mode to use to fill the choosen interval with the bent mesh.")]
		public MeshBender.FillingMode mode;

		[Token(Token = "0x600390F")]
		[Address(RVA = "0x138BC78", Offset = "0x138BC78", VA = "0x138BC78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6003910")]
		[Address(RVA = "0x138BE90", Offset = "0x138BE90", VA = "0x138BE90")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6003911")]
		[Address(RVA = "0x138BF00", Offset = "0x138BF00", VA = "0x138BF00")]
		private void Update()
		{
		}

		[Token(Token = "0x6003912")]
		[Address(RVA = "0x138BF3C", Offset = "0x138BF3C", VA = "0x138BF3C")]
		public void CreateMeshes()
		{
		}

		[Token(Token = "0x6003913")]
		[Address(RVA = "0x138C6D0", Offset = "0x138C6D0", VA = "0x138C6D0")]
		private GameObject FindOrCreate(string name)
		{
			return null;
		}

		[Token(Token = "0x6003914")]
		[Address(RVA = "0x138CAA4", Offset = "0x138CAA4", VA = "0x138CAA4")]
		public SplineMeshTiling()
		{
		}
	}
	[Token(Token = "0x200096C")]
	public static class CameraUtility
	{
		[Token(Token = "0x6003919")]
		[Address(RVA = "0x138CBB0", Offset = "0x138CBB0", VA = "0x138CBB0")]
		public static bool IsOnScreen(Vector3 position)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200096D")]
	public class MeshUtility
	{
		[Token(Token = "0x600391A")]
		[Address(RVA = "0x138B010", Offset = "0x138B010", VA = "0x138B010")]
		public static int[] GetReversedTriangles(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x600391B")]
		[Address(RVA = "0x1388480", Offset = "0x1388480", VA = "0x1388480")]
		public static void Update(Mesh mesh, Mesh source, [Optional] IEnumerable<int> triangles, [Optional] IEnumerable<Vector3> vertices, [Optional] IEnumerable<Vector3> normals, [Optional] IEnumerable<Vector2> uv, [Optional] IEnumerable<Vector2> uv2, [Optional] IEnumerable<Vector2> uv3, [Optional] IEnumerable<Vector2> uv4, [Optional] IEnumerable<Vector2> uv5, [Optional] IEnumerable<Vector2> uv6, [Optional] IEnumerable<Vector2> uv7, [Optional] IEnumerable<Vector2> uv8)
		{
		}

		[Token(Token = "0x600391C")]
		[Address(RVA = "0x138CC34", Offset = "0x138CC34", VA = "0x138CC34")]
		public MeshUtility()
		{
		}
	}
	[Token(Token = "0x200096E")]
	public static class UOUtility
	{
		[Token(Token = "0x600391D")]
		[Address(RVA = "0x1382BDC", Offset = "0x1382BDC", VA = "0x1382BDC")]
		public static GameObject Create(string name, GameObject parent, params Type[] components)
		{
			return null;
		}

		[Token(Token = "0x600391E")]
		[Address(RVA = "0x1386E80", Offset = "0x1386E80", VA = "0x1386E80")]
		public static GameObject Instantiate(GameObject prefab, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600391F")]
		[Address(RVA = "0x1385F84", Offset = "0x1385F84", VA = "0x1385F84")]
		public static void Destroy(GameObject go)
		{
		}

		[Token(Token = "0x6003920")]
		[Address(RVA = "0x138700C", Offset = "0x138700C", VA = "0x138700C")]
		public static void Destroy(UnityEngine.Component comp)
		{
		}

		[Token(Token = "0x6003921")]
		[Address(RVA = "0x1384310", Offset = "0x1384310", VA = "0x1384310")]
		public static void DestroyChildren(GameObject go)
		{
		}
	}
}
namespace Sabresaurus.SabreCore
{
	[Token(Token = "0x200096F")]
	public static class PlayerLoopHelper
	{
		[Token(Token = "0x6003922")]
		public static PlayerLoopSystem AttachSystem<TParent>(PlayerLoopSystem.UpdateFunction customUpdate)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x6003923")]
		public static PlayerLoopSystem AttachSystem<TParent, TWrapper>(PlayerLoopSystem.UpdateFunction customUpdate)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x6003924")]
		[Address(RVA = "0x138CC3C", Offset = "0x138CC3C", VA = "0x138CC3C")]
		public static bool DetachSystem(PlayerLoopSystem systemToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x6003925")]
		public static bool DetachSystem<TWrapper>(PlayerLoopSystem.UpdateFunction customUpdate)
		{
			return default(bool);
		}

		[Token(Token = "0x6003926")]
		public static PlayerLoopSystem GetSystemByType<T>()
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x6003927")]
		public static PlayerLoopSystem GetSystemByTypeAndMethod<T>(PlayerLoopSystem.UpdateFunction customUpdate)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x6003928")]
		[Address(RVA = "0x138CF14", Offset = "0x138CF14", VA = "0x138CF14")]
		public static bool EqualsSystem(this PlayerLoopSystem a, PlayerLoopSystem b)
		{
			return default(bool);
		}

		[Token(Token = "0x6003929")]
		public static PlayerLoopSystem GetSystemByType<T>(this PlayerLoopSystem system)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x600392A")]
		public static PlayerLoopSystem GetSystemByTypeAndMethod<T>(this PlayerLoopSystem system, PlayerLoopSystem.UpdateFunction customUpdate)
		{
			return default(PlayerLoopSystem);
		}

		[Token(Token = "0x600392B")]
		public static void AddSystemToMatchedParent<TParent>(ref PlayerLoopSystem system, PlayerLoopSystem newSystem)
		{
		}

		[Token(Token = "0x600392C")]
		[Address(RVA = "0x138CFD4", Offset = "0x138CFD4", VA = "0x138CFD4")]
		public static void AddSystem(ref PlayerLoopSystem parent, PlayerLoopSystem newSystem)
		{
		}

		[Token(Token = "0x600392D")]
		[Address(RVA = "0x138CCC0", Offset = "0x138CCC0", VA = "0x138CCC0")]
		public static bool RemoveSystem(ref PlayerLoopSystem system, PlayerLoopSystem systemToRemove)
		{
			return default(bool);
		}
	}
}
namespace CurvedUI
{
	[Token(Token = "0x2000970")]
	public static class CurvedUIExtensionMethods
	{
		[Token(Token = "0x600392E")]
		[Address(RVA = "0x138D090", Offset = "0x138D090", VA = "0x138D090")]
		public static bool AlmostEqual(this Vector3 a, Vector3 b, double accuracy = 0.01)
		{
			return default(bool);
		}

		[Token(Token = "0x600392F")]
		[Address(RVA = "0x138D0C0", Offset = "0x138D0C0", VA = "0x138D0C0")]
		public static float Remap(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6003930")]
		[Address(RVA = "0x138D0DC", Offset = "0x138D0DC", VA = "0x138D0DC")]
		public static float RemapAndClamp(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6003931")]
		[Address(RVA = "0x138D11C", Offset = "0x138D11C", VA = "0x138D11C")]
		public static float Remap(this int value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6003932")]
		[Address(RVA = "0x138D13C", Offset = "0x138D13C", VA = "0x138D13C")]
		public static double Remap(this double value, double from1, double to1, double from2, double to2)
		{
			return default(double);
		}

		[Token(Token = "0x6003933")]
		[Address(RVA = "0x138D108", Offset = "0x138D108", VA = "0x138D108")]
		public static float Clamp(this float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6003934")]
		[Address(RVA = "0x138D158", Offset = "0x138D158", VA = "0x138D158")]
		public static float Clamp(this int value, int min, int max)
		{
			return default(float);
		}

		[Token(Token = "0x6003935")]
		[Address(RVA = "0x138D170", Offset = "0x138D170", VA = "0x138D170")]
		public static int Abs(this int value)
		{
			return default(int);
		}

		[Token(Token = "0x6003936")]
		[Address(RVA = "0x138D1C8", Offset = "0x138D1C8", VA = "0x138D1C8")]
		public static float Abs(this float value)
		{
			return default(float);
		}

		[Token(Token = "0x6003937")]
		[Address(RVA = "0x138D1D0", Offset = "0x138D1D0", VA = "0x138D1D0")]
		public static int ToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x6003938")]
		[Address(RVA = "0x138D2AC", Offset = "0x138D2AC", VA = "0x138D2AC")]
		public static int FloorToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x6003939")]
		[Address(RVA = "0x138D318", Offset = "0x138D318", VA = "0x138D318")]
		public static int CeilToInt(this float value)
		{
			return default(int);
		}

		[Token(Token = "0x600393A")]
		[Address(RVA = "0x138D384", Offset = "0x138D384", VA = "0x138D384")]
		public static Vector3 ModifyX(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600393B")]
		[Address(RVA = "0x138D38C", Offset = "0x138D38C", VA = "0x138D38C")]
		public static Vector3 ModifyY(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600393C")]
		[Address(RVA = "0x138D394", Offset = "0x138D394", VA = "0x138D394")]
		public static Vector3 ModifyZ(this Vector3 trans, float newVal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600393D")]
		[Address(RVA = "0x138D39C", Offset = "0x138D39C", VA = "0x138D39C")]
		public static Vector2 ModifyVectorX(this Vector2 trans, float newVal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600393E")]
		[Address(RVA = "0x138D3A4", Offset = "0x138D3A4", VA = "0x138D3A4")]
		public static Vector2 ModifyVectorY(this Vector2 trans, float newVal)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600393F")]
		[Address(RVA = "0x138D3AC", Offset = "0x138D3AC", VA = "0x138D3AC")]
		public static void ResetTransform(this Transform trans)
		{
		}

		[Token(Token = "0x6003940")]
		public static T AddComponentIfMissing<T>(this GameObject go) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6003941")]
		public static T AddComponentIfMissing<T>(this UnityEngine.Component go) where T : UnityEngine.Component
		{
			return null;
		}
	}
	[Token(Token = "0x2000971")]
	public class CurvedUILaserBeam : MonoBehaviour
	{
		[Token(Token = "0x4002DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform LaserBeamTransform;

		[Token(Token = "0x4002DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform LaserBeamDot;

		[Token(Token = "0x4002DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Renderer LaserBeamRenderer;

		[Token(Token = "0x4002E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Material NoZTestMat;

		[Token(Token = "0x4002E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool CollideWithMyLayerOnly;

		[Token(Token = "0x4002E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool m_lastDotVisibility;

		[Token(Token = "0x4002E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool m_hideWhenNotAimingAtCanvas;

		[Token(Token = "0x4002E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int m_defaultRenderQueue;

		[Token(Token = "0x4002E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_defaultMaterial;

		[Token(Token = "0x4002E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Renderer m_dotRenderer;

		[Token(Token = "0x4002E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VrUserInterfaceInputModule currentInputModule;

		[Token(Token = "0x4002E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VrHand m_currentHand;

		[Token(Token = "0x6003942")]
		[Address(RVA = "0x138D48C", Offset = "0x138D48C", VA = "0x138D48C")]
		public void SetHiddenWhenNotAimingAtCanvas(bool hiddenWhenNotAimingAtCanvas)
		{
		}

		[Token(Token = "0x6003943")]
		[Address(RVA = "0x138D498", Offset = "0x138D498", VA = "0x138D498")]
		public void ResetRenderQueue()
		{
		}

		[Token(Token = "0x6003944")]
		[Address(RVA = "0x138D548", Offset = "0x138D548", VA = "0x138D548")]
		public void SetRenderQueue(int renderQueue)
		{
		}

		[Token(Token = "0x6003945")]
		[Address(RVA = "0x138D5FC", Offset = "0x138D5FC", VA = "0x138D5FC")]
		public void SetNoZTest(bool noZTest)
		{
		}

		[Token(Token = "0x6003946")]
		[Address(RVA = "0x138D6D0", Offset = "0x138D6D0", VA = "0x138D6D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003947")]
		[Address(RVA = "0x138D76C", Offset = "0x138D76C", VA = "0x138D76C")]
		protected void Update()
		{
		}

		[Token(Token = "0x6003948")]
		[Address(RVA = "0x138DC7C", Offset = "0x138DC7C", VA = "0x138DC7C")]
		public CurvedUILaserBeam()
		{
		}
	}
}
namespace PTGame.Scripts
{
	[Token(Token = "0x2000972")]
	public class Free_Camera : MonoBehaviour
	{
		[Token(Token = "0x4002E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float speed;

		[Token(Token = "0x4002E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float sensitivity;

		[Token(Token = "0x4002E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float zoom;

		[Token(Token = "0x4002E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool m_mouse_down;

		[Token(Token = "0x6003949")]
		[Address(RVA = "0x138DC94", Offset = "0x138DC94", VA = "0x138DC94")]
		private void Update()
		{
		}

		[Token(Token = "0x600394A")]
		[Address(RVA = "0x138E09C", Offset = "0x138E09C", VA = "0x138E09C")]
		public Free_Camera()
		{
		}
	}
	[Token(Token = "0x2000973")]
	public class PT_Fire_Damage : MonoBehaviour
	{
		[Token(Token = "0x4002E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Range(0f, 10f)]
		private float fadingTime;

		[Token(Token = "0x4002E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Vector2 frequency;

		[Token(Token = "0x4002E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[ColorUsage(false, true)]
		private Color fireColor;

		[Token(Token = "0x4002E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[ColorUsage(false, true)]
		private Color fireStrongColor;

		[Token(Token = "0x4002E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material[] m_materials;

		[Token(Token = "0x4002E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int[] m_propertyID;

		[Token(Token = "0x4002E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_down;

		[Token(Token = "0x4002E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float time;

		[Token(Token = "0x4002E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 m_hitPoint;

		[Token(Token = "0x4002E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_radius;

		[Token(Token = "0x4002E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Collider m_coll;

		[Token(Token = "0x600394B")]
		[Address(RVA = "0x138E0B8", Offset = "0x138E0B8", VA = "0x138E0B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600394C")]
		[Address(RVA = "0x138E404", Offset = "0x138E404", VA = "0x138E404")]
		private void Update()
		{
		}

		[Token(Token = "0x600394D")]
		[Address(RVA = "0x138E56C", Offset = "0x138E56C", VA = "0x138E56C")]
		private void Trigger(RaycastHit hit)
		{
		}

		[Token(Token = "0x600394E")]
		[Address(RVA = "0x138E6E8", Offset = "0x138E6E8", VA = "0x138E6E8")]
		public PT_Fire_Damage()
		{
		}
	}
}
namespace HutongGames.PlayMaker.Actions
{
	[Token(Token = "0x2000974")]
	[Tooltip("Get the timeline's current time. This value is incremented according to the time update mode.")]
	[ActionCategory("Timeline")]
	public class getTimelineCurrentTime : FsmStateAction
	{
		[Token(Token = "0x4002E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(PlayableDirector))]
		[Tooltip("The game object to hold the unity timeline components.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Returns the current time of the timeline")]
		[UIHint(UIHint.Variable)]
		public FsmFloat currentTime;

		[Token(Token = "0x4002E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check this box to preform this action every frame.")]
		public FsmBool everyFrame;

		[Token(Token = "0x4002E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayableDirector m_timeline;

		[Token(Token = "0x600394F")]
		[Address(RVA = "0x138E730", Offset = "0x138E730", VA = "0x138E730", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003950")]
		[Address(RVA = "0x138E774", Offset = "0x138E774", VA = "0x138E774", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003951")]
		[Address(RVA = "0x138E8E4", Offset = "0x138E8E4", VA = "0x138E8E4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003952")]
		[Address(RVA = "0x138E818", Offset = "0x138E818", VA = "0x138E818")]
		private void TimelineAction()
		{
		}

		[Token(Token = "0x6003953")]
		[Address(RVA = "0x138E918", Offset = "0x138E918", VA = "0x138E918")]
		public getTimelineCurrentTime()
		{
		}
	}
	[Token(Token = "0x2000975")]
	[Tooltip("Get the current timeline's state as a bool. True for playing, false for paused.")]
	[ActionCategory("Timeline")]
	public class getTimelineState : FsmStateAction
	{
		[Token(Token = "0x4002E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[CheckForComponent(typeof(PlayableDirector))]
		[Tooltip("The game object to hold the unity timeline components.")]
		public FsmOwnerDefault gameObject;

		[Token(Token = "0x4002E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Returns the current timeline state as a bool. True for playing, false for paused")]
		[UIHint(UIHint.Variable)]
		public FsmBool playing;

		[Token(Token = "0x4002E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Check this box to preform this action every frame.")]
		public FsmBool everyFrame;

		[Token(Token = "0x4002E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayableDirector m_playableDirector;

		[Token(Token = "0x6003954")]
		[Address(RVA = "0x138E920", Offset = "0x138E920", VA = "0x138E920", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6003955")]
		[Address(RVA = "0x138E970", Offset = "0x138E970", VA = "0x138E970", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003956")]
		[Address(RVA = "0x138EAE4", Offset = "0x138EAE4", VA = "0x138EAE4", Slot = "34")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x6003957")]
		[Address(RVA = "0x138EA14", Offset = "0x138EA14", VA = "0x138EA14")]
		private void TimelineAction()
		{
		}

		[Token(Token = "0x6003958")]
		[Address(RVA = "0x138EB18", Offset = "0x138EB18", VA = "0x138EB18")]
		public getTimelineState()
		{
		}
	}
	[Token(Token = "0x2000976")]
	[Tooltip("Determines whether we're closer to one transform than another.")]
	[ActionCategory(ActionCategory.Transform)]
	public class CheckNearestOfTwoTransforms : FsmStateAction
	{
		[Token(Token = "0x4002E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RequiredField]
		[UnityEngine.Tooltip("The moving game object.")]
		public FsmOwnerDefault checkedGameObject;

		[Token(Token = "0x4002E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UnityEngine.Tooltip("Set the result to true if the checked game object is closer to this game object than the negative game object.")]
		public FsmGameObject positiveGameObject;

		[Token(Token = "0x4002E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Set the result to false if the checked game object is closer to this game object than the positive game object.")]
		[RequiredField]
		public FsmGameObject negativeGameObject;

		[Token(Token = "0x4002E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Event to send if the positive object is nearest.")]
		public FsmEvent positiveIsNearest;

		[Token(Token = "0x4002E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Event to send if the negative object is nearest.")]
		public FsmEvent negativeIsNearest;

		[Token(Token = "0x6003959")]
		[Address(RVA = "0x138EB20", Offset = "0x138EB20", VA = "0x138EB20", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600395A")]
		[Address(RVA = "0x138EB58", Offset = "0x138EB58", VA = "0x138EB58", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600395B")]
		[Address(RVA = "0x138ED18", Offset = "0x138ED18", VA = "0x138ED18")]
		public CheckNearestOfTwoTransforms()
		{
		}
	}
}
namespace UnityEngine.EventSystems
{
	[Token(Token = "0x2000977")]
	public class VrPhysicsRaycaster : BaseRaycaster
	{
		[Token(Token = "0x4002E25")]
		protected const int kNoEventMaskSet = -1;

		[Token(Token = "0x4002E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Camera m_camera;

		[Token(Token = "0x4002E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected LayerMask m_EventMask;

		[Token(Token = "0x4002E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int sortOrder;

		[Token(Token = "0x17000A14")]
		public override Camera eventCamera
		{
			[Token(Token = "0x600395D")]
			[Address(RVA = "0x138ED4C", Offset = "0x138ED4C", VA = "0x138ED4C", Slot = "18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000A15")]
		public virtual int depth
		{
			[Token(Token = "0x600395E")]
			[Address(RVA = "0x138EDC8", Offset = "0x138EDC8", VA = "0x138EDC8", Slot = "22")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000A16")]
		public override int sortOrderPriority
		{
			[Token(Token = "0x600395F")]
			[Address(RVA = "0x138EE8C", Offset = "0x138EE8C", VA = "0x138EE8C", Slot = "20")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000A17")]
		public int finalEventMask
		{
			[Token(Token = "0x6003960")]
			[Address(RVA = "0x138EE94", Offset = "0x138EE94", VA = "0x138EE94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000A18")]
		public LayerMask eventMask
		{
			[Token(Token = "0x6003961")]
			[Address(RVA = "0x138EF58", Offset = "0x138EF58", VA = "0x138EF58")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6003962")]
			[Address(RVA = "0x138EF60", Offset = "0x138EF60", VA = "0x138EF60")]
			set
			{
			}
		}

		[Token(Token = "0x600395C")]
		[Address(RVA = "0x138ED20", Offset = "0x138ED20", VA = "0x138ED20")]
		protected VrPhysicsRaycaster()
		{
		}

		[Token(Token = "0x6003963")]
		[Address(RVA = "0x138EF68", Offset = "0x138EF68", VA = "0x138EF68", Slot = "17")]
		public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
		{
		}

		[Token(Token = "0x6003964")]
		[Address(RVA = "0x138F450", Offset = "0x138F450", VA = "0x138F450")]
		public void Spherecast(PointerEventData eventData, List<RaycastResult> resultAppendList, float radius)
		{
		}

		[Token(Token = "0x6003965")]
		[Address(RVA = "0x138F840", Offset = "0x138F840", VA = "0x138F840")]
		public Vector2 GetScreenPos(Vector3 worldPosition)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000979")]
	public class VrPointerEventData : PointerEventData
	{
		[Token(Token = "0x4002E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Ray worldSpaceRay;

		[Token(Token = "0x4002E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public Vector2 swipeStart;

		[Token(Token = "0x600396A")]
		[Address(RVA = "0x138F988", Offset = "0x138F988", VA = "0x138F988")]
		public VrPointerEventData(EventSystem eventSystem)
		{
		}

		[Token(Token = "0x600396B")]
		[Address(RVA = "0x138F990", Offset = "0x138F990", VA = "0x138F990", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200097A")]
	public static class PointerEventDataExtension
	{
		[Token(Token = "0x600396C")]
		[Address(RVA = "0x138F350", Offset = "0x138F350", VA = "0x138F350")]
		public static bool IsPointer(this PointerEventData pointerEventData)
		{
			return default(bool);
		}

		[Token(Token = "0x600396D")]
		[Address(RVA = "0x138F3C8", Offset = "0x138F3C8", VA = "0x138F3C8")]
		public static Ray GetPointerRay(this PointerEventData pointerEventData)
		{
			return default(Ray);
		}

		[Token(Token = "0x600396E")]
		[Address(RVA = "0x138FD44", Offset = "0x138FD44", VA = "0x138FD44")]
		public static Vector2 GetSwipeStartData(this PointerEventData pointerEventData)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600396F")]
		[Address(RVA = "0x138FDC0", Offset = "0x138FDC0", VA = "0x138FDC0")]
		public static void SetSwipeStartData(this PointerEventData pointerEventData, Vector2 start)
		{
		}
	}
	[Token(Token = "0x200097B")]
	public class VrUserInterfaceInputModule : PointerInputModule
	{
		[Token(Token = "0x200097C")]
		[Obsolete("Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.", false)]
		public enum InputMode
		{
			[Token(Token = "0x4002E47")]
			Mouse,
			[Token(Token = "0x4002E48")]
			Buttons
		}

		[Token(Token = "0x4002E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Keyboard button to act as gaze click")]
		public KeyCode gazeClickKey;

		[Token(Token = "0x4002E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Perform an sphere cast to determine correct depth for gaze pointer")]
		[Header("Physics")]
		public bool performSphereCastForGazepointer;

		[Token(Token = "0x4002E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Layers to be ignored by the ray/sphere-cast")]
		public LayerMask ignoreLayers;

		[Token(Token = "0x4002E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Enable scrolling with the right stick on a gamepad")]
		[Header("Gamepad Stick Scroll")]
		public bool useRightStickScroll;

		[Token(Token = "0x4002E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Deadzone for right stick to prevent accidental scrolling")]
		public float rightStickDeadZone;

		[Token(Token = "0x4002E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Enable scrolling by swiping the GearVR touchpad")]
		[Header("Touchpad Swipe Scroll")]
		public bool useSwipeScroll;

		[Token(Token = "0x4002E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Minimum trackpad movement in pixels to start swiping")]
		public float swipeDragThreshold;

		[Token(Token = "0x4002E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Distance scrolled when swipe scroll occurs")]
		public float swipeDragScale;

		[Token(Token = "0x4002E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Invert X axis on touchpad")]
		public bool InvertSwipeXAxis;

		[NonSerialized]
		[Token(Token = "0x4002E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public VrRaycaster activeGraphicRaycaster;

		[Token(Token = "0x4002E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Dragging")]
		[Tooltip("Minimum pointer movement in degrees to start dragging")]
		public float angleDragThreshold;

		[Token(Token = "0x4002E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private float m_SpherecastRadius;

		[Token(Token = "0x4002E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[Header("Haptics")]
		private HapticConfig m_hoverHapticFeedback;

		[Token(Token = "0x4002E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float m_NextAction;

		[Token(Token = "0x4002E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector2 m_LastMousePosition;

		[Token(Token = "0x4002E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector2 m_MousePosition;

		[Token(Token = "0x4002E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[Header("Standalone Input Module")]
		private string m_HorizontalAxis;

		[Token(Token = "0x4002E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private string m_VerticalAxis;

		[Token(Token = "0x4002E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private string m_SubmitButton;

		[Token(Token = "0x4002E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private string m_CancelButton;

		[Token(Token = "0x4002E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private float m_InputActionsPerSecond;

		[Token(Token = "0x4002E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private bool m_AllowActivationOnMobileDevice;

		[Token(Token = "0x4002E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected Dictionary<int, VrPointerEventData> m_VRRayPointerData;

		[Token(Token = "0x4002E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly MouseState m_MouseState;

		[Token(Token = "0x17000A19")]
		[Obsolete("Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.", false)]
		public InputMode inputMode
		{
			[Token(Token = "0x6003971")]
			[Address(RVA = "0x138FFF0", Offset = "0x138FFF0", VA = "0x138FFF0")]
			get
			{
				return default(InputMode);
			}
		}

		[Token(Token = "0x17000A1A")]
		public bool allowActivationOnMobileDevice
		{
			[Token(Token = "0x6003972")]
			[Address(RVA = "0x138FFF8", Offset = "0x138FFF8", VA = "0x138FFF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6003973")]
			[Address(RVA = "0x1390000", Offset = "0x1390000", VA = "0x1390000")]
			set
			{
			}
		}

		[Token(Token = "0x17000A1B")]
		public float inputActionsPerSecond
		{
			[Token(Token = "0x6003974")]
			[Address(RVA = "0x139000C", Offset = "0x139000C", VA = "0x139000C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6003975")]
			[Address(RVA = "0x1390014", Offset = "0x1390014", VA = "0x1390014")]
			set
			{
			}
		}

		[Token(Token = "0x17000A1C")]
		public string horizontalAxis
		{
			[Token(Token = "0x6003976")]
			[Address(RVA = "0x139001C", Offset = "0x139001C", VA = "0x139001C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003977")]
			[Address(RVA = "0x1390024", Offset = "0x1390024", VA = "0x1390024")]
			set
			{
			}
		}

		[Token(Token = "0x17000A1D")]
		public string verticalAxis
		{
			[Token(Token = "0x6003978")]
			[Address(RVA = "0x139002C", Offset = "0x139002C", VA = "0x139002C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003979")]
			[Address(RVA = "0x1390034", Offset = "0x1390034", VA = "0x1390034")]
			set
			{
			}
		}

		[Token(Token = "0x17000A1E")]
		public string submitButton
		{
			[Token(Token = "0x600397A")]
			[Address(RVA = "0x139003C", Offset = "0x139003C", VA = "0x139003C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600397B")]
			[Address(RVA = "0x1390044", Offset = "0x1390044", VA = "0x1390044")]
			set
			{
			}
		}

		[Token(Token = "0x17000A1F")]
		public string cancelButton
		{
			[Token(Token = "0x600397C")]
			[Address(RVA = "0x139004C", Offset = "0x139004C", VA = "0x139004C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600397D")]
			[Address(RVA = "0x1390054", Offset = "0x1390054", VA = "0x1390054")]
			set
			{
			}
		}

		[Token(Token = "0x6003970")]
		[Address(RVA = "0x138FE4C", Offset = "0x138FE4C", VA = "0x138FE4C")]
		protected VrUserInterfaceInputModule()
		{
		}

		[Token(Token = "0x600397E")]
		[Address(RVA = "0x139005C", Offset = "0x139005C", VA = "0x139005C", Slot = "24")]
		public override void UpdateModule()
		{
		}

		[Token(Token = "0x600397F")]
		[Address(RVA = "0x1390080", Offset = "0x1390080", VA = "0x1390080", Slot = "25")]
		public override bool IsModuleSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6003980")]
		[Address(RVA = "0x1390098", Offset = "0x1390098", VA = "0x1390098", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6003981")]
		[Address(RVA = "0x1390220", Offset = "0x1390220", VA = "0x1390220", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6003982")]
		[Address(RVA = "0x13902EC", Offset = "0x13902EC", VA = "0x13902EC", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6003983")]
		[Address(RVA = "0x13905FC", Offset = "0x13905FC", VA = "0x13905FC")]
		private bool SendSubmitEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6003984")]
		[Address(RVA = "0x13907E4", Offset = "0x13907E4", VA = "0x13907E4")]
		private bool AllowMoveEventProcessing(float time)
		{
			return default(bool);
		}

		[Token(Token = "0x6003985")]
		[Address(RVA = "0x1390840", Offset = "0x1390840", VA = "0x1390840")]
		private Vector2 GetRawMoveVector()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6003986")]
		[Address(RVA = "0x13908FC", Offset = "0x13908FC", VA = "0x13908FC")]
		private bool SendMoveEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6003987")]
		[Address(RVA = "0x1390B00", Offset = "0x1390B00", VA = "0x1390B00")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6003988")]
		[Address(RVA = "0x1390C48", Offset = "0x1390C48", VA = "0x1390C48")]
		private void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x6003989")]
		[Address(RVA = "0x13912E0", Offset = "0x13912E0", VA = "0x13912E0")]
		private void ProcessMouseEvent(MouseState mouseData)
		{
		}

		[Token(Token = "0x600398A")]
		[Address(RVA = "0x13918B0", Offset = "0x13918B0", VA = "0x13918B0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x600398B")]
		[Address(RVA = "0x1391870", Offset = "0x1391870", VA = "0x1391870")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x600398C")]
		[Address(RVA = "0x1391948", Offset = "0x1391948", VA = "0x1391948")]
		protected void CopyFromTo(VrPointerEventData from, VrPointerEventData to)
		{
		}

		[Token(Token = "0x600398D")]
		[Address(RVA = "0x13919C8", Offset = "0x13919C8", VA = "0x13919C8")]
		protected new void CopyFromTo(PointerEventData from, PointerEventData to)
		{
		}

		[Token(Token = "0x600398E")]
		[Address(RVA = "0x1391A34", Offset = "0x1391A34", VA = "0x1391A34")]
		protected bool GetPointerData(int id, out VrPointerEventData data, bool create)
		{
			return default(bool);
		}

		[Token(Token = "0x600398F")]
		[Address(RVA = "0x1390308", Offset = "0x1390308", VA = "0x1390308")]
		protected new void ClearSelection()
		{
		}

		[Token(Token = "0x6003990")]
		[Address(RVA = "0x1391B2C", Offset = "0x1391B2C", VA = "0x1391B2C")]
		private static Vector3 GetRectTransformNormal(RectTransform rectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6003991")]
		[Address(RVA = "0x1391CD0", Offset = "0x1391CD0", VA = "0x1391CD0", Slot = "31")]
		protected virtual MouseState GetGazePointerData()
		{
			return null;
		}

		[Token(Token = "0x6003992")]
		[Address(RVA = "0x13924A8", Offset = "0x13924A8", VA = "0x13924A8")]
		protected MouseState GetCanvasPointerData()
		{
			return null;
		}

		[Token(Token = "0x6003993")]
		[Address(RVA = "0x139230C", Offset = "0x139230C", VA = "0x139230C")]
		protected RaycastResult FindFirstValidRaycast(List<RaycastResult> candidates)
		{
			return default(RaycastResult);
		}

		[Token(Token = "0x6003994")]
		[Address(RVA = "0x1392844", Offset = "0x1392844", VA = "0x1392844")]
		private bool ShouldStartDrag(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6003995")]
		[Address(RVA = "0x1391914", Offset = "0x1391914", VA = "0x1391914")]
		private static bool IsPointerMoving(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6003996")]
		[Address(RVA = "0x1392B88", Offset = "0x1392B88", VA = "0x1392B88")]
		protected Vector2 SwipeAdjustedPosition(Vector2 originalPosition, PointerEventData pointerEvent)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6003997")]
		[Address(RVA = "0x1392C1C", Offset = "0x1392C1C", VA = "0x1392C1C", Slot = "30")]
		protected override void ProcessDrag(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6003998")]
		[Address(RVA = "0x1392F30", Offset = "0x1392F30", VA = "0x1392F30", Slot = "32")]
		protected virtual PointerEventData.FramePressState GetGazeButtonState()
		{
			return default(PointerEventData.FramePressState);
		}

		[Token(Token = "0x6003999")]
		[Address(RVA = "0x138DC58", Offset = "0x138DC58", VA = "0x138DC58")]
		public PointerEventData GetPointerData()
		{
			return null;
		}
	}
}
namespace UnityEngine.Timeline
{
	[Token(Token = "0x200097D")]
	public class VideoPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4002E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VideoPlayer videoPlayer;

		[Token(Token = "0x4002E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VideoClip videoClip;

		[Token(Token = "0x4002E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mute;

		[Token(Token = "0x4002E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x4002E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double preloadTime;

		[Token(Token = "0x4002E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public double clipInTime;

		[Token(Token = "0x4002E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool playedOnce;

		[Token(Token = "0x4002E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool preparing;

		[Token(Token = "0x600399A")]
		[Address(RVA = "0x1392FB8", Offset = "0x1392FB8", VA = "0x1392FB8")]
		public void PrepareVideo()
		{
		}

		[Token(Token = "0x600399B")]
		[Address(RVA = "0x139335C", Offset = "0x139335C", VA = "0x139335C")]
		private void LoopPointReached(VideoPlayer vp)
		{
		}

		[Token(Token = "0x600399C")]
		[Address(RVA = "0x139336C", Offset = "0x139336C", VA = "0x139336C", Slot = "19")]
		public override void PrepareFrame(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600399D")]
		[Address(RVA = "0x1393624", Offset = "0x1393624", VA = "0x1393624", Slot = "17")]
		public override void OnBehaviourPlay(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600399E")]
		[Address(RVA = "0x1393764", Offset = "0x1393764", VA = "0x1393764", Slot = "18")]
		public override void OnBehaviourPause(Playable playable, FrameData info)
		{
		}

		[Token(Token = "0x600399F")]
		[Address(RVA = "0x1393878", Offset = "0x1393878", VA = "0x1393878", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x60039A0")]
		[Address(RVA = "0x1393A44", Offset = "0x1393A44", VA = "0x1393A44", Slot = "13")]
		public override void OnGraphStart(Playable playable)
		{
		}

		[Token(Token = "0x60039A1")]
		[Address(RVA = "0x1393A4C", Offset = "0x1393A4C", VA = "0x1393A4C", Slot = "14")]
		public override void OnGraphStop(Playable playable)
		{
		}

		[Token(Token = "0x60039A2")]
		[Address(RVA = "0x1393A74", Offset = "0x1393A74", VA = "0x1393A74", Slot = "16")]
		public override void OnPlayableDestroy(Playable playable)
		{
		}

		[Token(Token = "0x60039A3")]
		[Address(RVA = "0x13936C8", Offset = "0x13936C8", VA = "0x13936C8")]
		public void PlayVideo()
		{
		}

		[Token(Token = "0x60039A4")]
		[Address(RVA = "0x13937F8", Offset = "0x13937F8", VA = "0x13937F8")]
		public void PauseVideo()
		{
		}

		[Token(Token = "0x60039A5")]
		[Address(RVA = "0x13932D8", Offset = "0x13932D8", VA = "0x13932D8")]
		public void StopVideo()
		{
		}

		[Token(Token = "0x60039A6")]
		[Address(RVA = "0x13934C4", Offset = "0x13934C4", VA = "0x13934C4")]
		private void SyncVideoToPlayable(Playable playable)
		{
		}

		[Token(Token = "0x60039A7")]
		[Address(RVA = "0x1393A78", Offset = "0x1393A78", VA = "0x1393A78")]
		public VideoPlayableBehaviour()
		{
		}
	}
	[Token(Token = "0x200097E")]
	public sealed class VideoSchedulerPlayableBehaviour : PlayableBehaviour
	{
		[Token(Token = "0x4002E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerable<TimelineClip> m_Clips;

		[Token(Token = "0x4002E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayableDirector m_Director;

		[Token(Token = "0x17000A20")]
		internal PlayableDirector director
		{
			[Token(Token = "0x60039A8")]
			[Address(RVA = "0x1393A94", Offset = "0x1393A94", VA = "0x1393A94")]
			get
			{
				return null;
			}
			[Token(Token = "0x60039A9")]
			[Address(RVA = "0x1393A9C", Offset = "0x1393A9C", VA = "0x1393A9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000A21")]
		internal IEnumerable<TimelineClip> clips
		{
			[Token(Token = "0x60039AA")]
			[Address(RVA = "0x1393AA4", Offset = "0x1393AA4", VA = "0x1393AA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60039AB")]
			[Address(RVA = "0x1393AAC", Offset = "0x1393AAC", VA = "0x1393AAC")]
			set
			{
			}
		}

		[Token(Token = "0x60039AC")]
		[Address(RVA = "0x1393AB4", Offset = "0x1393AB4", VA = "0x1393AB4", Slot = "20")]
		public override void ProcessFrame(Playable playable, FrameData info, object playerData)
		{
		}

		[Token(Token = "0x60039AD")]
		[Address(RVA = "0x1393F68", Offset = "0x1393F68", VA = "0x1393F68")]
		public VideoSchedulerPlayableBehaviour()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200097F")]
	public class VideoScriptPlayableAsset : PlayableAsset
	{
		[Token(Token = "0x4002E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExposedReference<VideoPlayer> videoPlayer;

		[Token(Token = "0x4002E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[NotKeyable]
		public VideoClip videoClip;

		[Token(Token = "0x4002E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[NotKeyable]
		public bool mute;

		[Token(Token = "0x4002E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		[NotKeyable]
		public bool loop;

		[Token(Token = "0x4002E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[NotKeyable]
		public double preloadTime;

		[Token(Token = "0x4002E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[NotKeyable]
		[SerializeField]
		public double clipInTime;

		[Token(Token = "0x60039AE")]
		[Address(RVA = "0x1393F70", Offset = "0x1393F70", VA = "0x1393F70", Slot = "6")]
		public override Playable CreatePlayable(PlayableGraph graph, GameObject go)
		{
			return default(Playable);
		}

		[Token(Token = "0x60039AF")]
		[Address(RVA = "0x13940D0", Offset = "0x13940D0", VA = "0x13940D0")]
		public VideoScriptPlayableAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000980")]
	[TrackColor(0.008f, 0.698f, 0.655f)]
	[TrackClipType(typeof(VideoScriptPlayableAsset))]
	public class VideoScriptPlayableTrack : TrackAsset
	{
		[Token(Token = "0x60039B0")]
		[Address(RVA = "0x13940EC", Offset = "0x13940EC", VA = "0x13940EC", Slot = "24")]
		public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)
		{
			return default(Playable);
		}

		[Token(Token = "0x60039B1")]
		[Address(RVA = "0x1394258", Offset = "0x1394258", VA = "0x1394258")]
		public VideoScriptPlayableTrack()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000981")]
	[TrackClipType(typeof(AnimationPlayableAsset), false)]
	public class AgentAnimationTrack : AnimationTrack, IIdentifableBinding
	{
		[Token(Token = "0x4002E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private Identifier m_identifier;

		[Token(Token = "0x17000A22")]
		public Identifier Identifier
		{
			[Token(Token = "0x60039B2")]
			[Address(RVA = "0x13942B0", Offset = "0x13942B0", VA = "0x13942B0", Slot = "37")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000A23")]
		public Type BindingType
		{
			[Token(Token = "0x60039B3")]
			[Address(RVA = "0x13942B8", Offset = "0x13942B8", VA = "0x13942B8", Slot = "38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60039B4")]
		[Address(RVA = "0x1394324", Offset = "0x1394324", VA = "0x1394324")]
		public AgentAnimationTrack()
		{
		}
	}
}
namespace BS.BehaviourTests
{
	[Token(Token = "0x2000982")]
	public class TestCondition : ConditionalNode
	{
		[Token(Token = "0x4002E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool passCondition;

		[Token(Token = "0x60039B5")]
		[Address(RVA = "0x139437C", Offset = "0x139437C", VA = "0x139437C", Slot = "46")]
		public override bool Condition()
		{
			return default(bool);
		}

		[Token(Token = "0x60039B6")]
		[Address(RVA = "0x1394384", Offset = "0x1394384", VA = "0x1394384")]
		public TestCondition()
		{
		}
	}
}
