using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using AOT;
using BNG;
using BayatGames.SaveGameFree.Encoders;
using BayatGames.SaveGameFree.Serializers;
using ChristopherCreates.SmoothSave;
using DigitalOpus.MB.Core;
using Facebook.WitAi;
using Facebook.WitAi.Lib;
using GVRI;
using GVRI.core;
using HutongGames.PlayMaker;
using Il2CppDummyDll;
using MarchingBytes;
using Oculus.Platform;
using Oculus.Platform.Models;
using SQL4Unity;
using TMPro;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using Whilefun.FPEKit;
using jcsilva.AISystem;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public interface IActiveKeyListener
{
	[Token(Token = "0x6000001")]
	void OnKeyUpdate(UnityEngine.GameObject source, string signal, float value);
}
[Token(Token = "0x2000003")]
public interface IKeyboardListener
{
	[Token(Token = "0x6000002")]
	void OnLetterWritten(string letter);
}
[Token(Token = "0x2000004")]
public interface IPassiveKeyListener
{
	[Token(Token = "0x6000003")]
	void OnKeyDown(UnityEngine.GameObject source, string signal);
}
[Token(Token = "0x2000005")]
public class Key : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ActivationThreshold;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Signal;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<UnityEngine.GameObject> KeyListeners;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform keycapTransform;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<IPassiveKeyListener> passiveListeners;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<IActiveKeyListener> activeKeyListeners;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool pushable;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource keyPress;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xC9C64C", Offset = "0xC9C64C", VA = "0xC9C64C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xC9C9B4", Offset = "0xC9C9B4", VA = "0xC9C9B4")]
	public void UpdateListeners()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xC9CDD8", Offset = "0xC9CDD8", VA = "0xC9CDD8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xC9D028", Offset = "0xC9D028", VA = "0xC9D028")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xC9D234", Offset = "0xC9D234", VA = "0xC9D234")]
	public Key()
	{
	}
}
[Token(Token = "0x2000006")]
public class Keyboard : MonoBehaviour, IPassiveKeyListener
{
	[Serializable]
	[Token(Token = "0x2000007")]
	public class ManagedKey
	{
		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.GameObject key;

		[Token(Token = "0x400000E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject sourcePrefab;

		[Token(Token = "0x400000F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int row;

		[Token(Token = "0x600000E")]
		[Address(RVA = "0xC9D79C", Offset = "0xC9D79C", VA = "0xC9D79C")]
		public ManagedKey(UnityEngine.GameObject key, UnityEngine.GameObject sourcePrefab, int row)
		{
		}
	}

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public KeyboardLayout KeyboardLayout;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<UnityEngine.GameObject> KeyboardListeners;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<IKeyboardListener> listeners;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[HideInInspector]
	private List<ManagedKey> managedKeys;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xC9D250", Offset = "0xC9D250", VA = "0xC9D250")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xC9D254", Offset = "0xC9D254", VA = "0xC9D254")]
	public void UpdateListeners()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xC9D560", Offset = "0xC9D560", VA = "0xC9D560")]
	public void UpdateKeys()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xC9D564", Offset = "0xC9D564", VA = "0xC9D564", Slot = "4")]
	public void OnKeyDown(UnityEngine.GameObject source, string signal)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xC9D714", Offset = "0xC9D714", VA = "0xC9D714")]
	public Keyboard()
	{
	}
}
[Token(Token = "0x2000008")]
[CreateAssetMenu]
public class KeyboardLayout : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000009")]
	public class Row
	{
		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool foldout;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float offset;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int keyCount;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<UnityEngine.GameObject> keys;

		[Token(Token = "0x6000010")]
		[Address(RVA = "0xC9D8D8", Offset = "0xC9D8D8", VA = "0xC9D8D8")]
		public Row()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200000A")]
	public class SpecialKey
	{
		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool foldout;

		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float offsetX;

		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float offsetZ;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject key;

		[Token(Token = "0x6000011")]
		[Address(RVA = "0xC9D968", Offset = "0xC9D968", VA = "0xC9D968")]
		public SpecialKey()
		{
		}
	}

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float distance;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int rowCount;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int specialKeyCount;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Row> rows;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<SpecialKey> SpecialKeys;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xC9D7F4", Offset = "0xC9D7F4", VA = "0xC9D7F4")]
	public KeyboardLayout()
	{
	}
}
[Token(Token = "0x200000B")]
public class Keycap : MonoBehaviour
{
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ColliderValidationOffset;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform ourTransform;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody ourRigidbody;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool cached;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xC9D970", Offset = "0xC9D970", VA = "0xC9D970")]
	private void Cache()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xC9D9F8", Offset = "0xC9D9F8", VA = "0xC9D9F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xC9DB90", Offset = "0xC9DB90", VA = "0xC9DB90")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xC9DDC8", Offset = "0xC9DDC8", VA = "0xC9DDC8")]
	public Keycap()
	{
	}
}
[Token(Token = "0x200000C")]
public class KeycapCollisionValidator : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform ourTransform;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SphereCollider ourCollider;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 previousPos;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Vector3 colliderOffset;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly UnityEngine.Vector3[] colliderEdgeOffsets;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float colliderRadius;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float minimumVelocity;

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xC9DDD0", Offset = "0xC9DDD0", VA = "0xC9DDD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xC9E06C", Offset = "0xC9E06C", VA = "0xC9E06C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xC9E414", Offset = "0xC9E414", VA = "0xC9E414")]
	public KeycapCollisionValidator()
	{
	}
}
[Token(Token = "0x200000D")]
public class FPSCounter : MonoBehaviour
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public Transform advancedTransform;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public TextType GraphicsType;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public MemorySizeUnit memorySizeUnit;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public Text framerateText;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Text avgFramerateText;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public Text maxFramerateText;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Text minFrameRateText;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Space]
	[HideInInspector]
	public Text OSText;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Text CPUText;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public Text GPUText;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public Text VRAMText;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public Text RAMText;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public Text ScreenText;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Space]
	[HideInInspector]
	public TextMeshProUGUI framerateTextMPro;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public TextMeshProUGUI avgFramerateTextMPro;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[HideInInspector]
	public TextMeshProUGUI maxFramerateTextMPro;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[HideInInspector]
	public TextMeshProUGUI minFrameRateTextMPro;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Space]
	[HideInInspector]
	public TextMeshProUGUI OSTextMPro;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[HideInInspector]
	public TextMeshProUGUI CPUTextMPro;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[HideInInspector]
	public TextMeshProUGUI GPUTextMPro;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	public TextMeshProUGUI VRAMTextMPro;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	public TextMeshProUGUI RAMTextMPro;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[HideInInspector]
	public TextMeshProUGUI ScreenTextMPro;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[HideInInspector]
	[Space]
	[Space]
	public float updateInterval;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[HideInInspector]
	public bool useDynamicColors;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[HideInInspector]
	public UnityEngine.Color highFPSColor;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[HideInInspector]
	public UnityEngine.Color mediumFPSColor;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[HideInInspector]
	public UnityEngine.Color lowFPSColor;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[HideInInspector]
	public UnityEngine.Color staticInfoColor;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[HideInInspector]
	public bool useAdvanced;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float framerate;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private int averageFramerate;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float maxFramerate;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float minFramerate;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private string OS;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private string CPU;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private string GPU;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private string VRAM;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private string RAM;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private string Screen;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private UnityEngine.Color framerateColor;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private UnityEngine.Color avgFramerateColor;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private UnityEngine.Color maxFramerateColor;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private UnityEngine.Color minFramerateColor;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private double memorySizeMulipler;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private string memorySizeName;

	[Token(Token = "0x4000056")]
	private const float FPSMeasurePeriod = 0.5f;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private int FPSAccumulator;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private float FPSPeriod;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private float nextUpdate;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private List<float> FPSHistory;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xC9E478", Offset = "0xC9E478", VA = "0xC9E478")]
	private void Start()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xC9E8AC", Offset = "0xC9E8AC", VA = "0xC9E8AC")]
	private void Update()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xC9EA8C", Offset = "0xC9EA8C", VA = "0xC9EA8C")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xC9F1C4", Offset = "0xC9F1C4", VA = "0xC9F1C4")]
	private void CalculateMinAndMaxFPS()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xC9F2F8", Offset = "0xC9F2F8", VA = "0xC9F2F8")]
	public FPSCounter()
	{
	}
}
[Token(Token = "0x200000E")]
public enum TextType
{
	[Token(Token = "0x400005C")]
	Text,
	[Token(Token = "0x400005D")]
	TextMeshPro
}
[Token(Token = "0x200000F")]
public enum MemorySizeUnit
{
	[Token(Token = "0x400005F")]
	GB,
	[Token(Token = "0x4000060")]
	MG,
	[Token(Token = "0x4000061")]
	KB
}
[Token(Token = "0x2000010")]
public class test : MonoBehaviour
{
	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject[] objects;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private new bool enabled;

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xC9F3B0", Offset = "0xC9F3B0", VA = "0xC9F3B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xC9F434", Offset = "0xC9F434", VA = "0xC9F434")]
	public test()
	{
	}
}
[Token(Token = "0x2000011")]
public static class SimplePool
{
	[Token(Token = "0x2000012")]
	private class Pool
	{
		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int nextId;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Stack<UnityEngine.GameObject> inactive;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.GameObject prefab;

		[Token(Token = "0x6000024")]
		[Address(RVA = "0xC9F5D8", Offset = "0xC9F5D8", VA = "0xC9F5D8")]
		public Pool(UnityEngine.GameObject prefab, int initialQty)
		{
		}

		[Token(Token = "0x6000025")]
		[Address(RVA = "0xC9FA7C", Offset = "0xC9FA7C", VA = "0xC9FA7C")]
		public UnityEngine.GameObject Spawn(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
		{
			return null;
		}

		[Token(Token = "0x6000026")]
		[Address(RVA = "0xC9FD08", Offset = "0xC9FD08", VA = "0xC9FD08")]
		public void Despawn(UnityEngine.GameObject obj)
		{
		}
	}

	[Token(Token = "0x2000013")]
	private class PoolMember : MonoBehaviour
	{
		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Pool myPool;

		[Token(Token = "0x6000027")]
		[Address(RVA = "0xC9FD74", Offset = "0xC9FD74", VA = "0xC9FD74")]
		public PoolMember()
		{
		}
	}

	[Token(Token = "0x4000064")]
	private const int DEFAULT_POOL_SIZE = 3;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<UnityEngine.GameObject, Pool> pools;

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xC9F43C", Offset = "0xC9F43C", VA = "0xC9F43C")]
	private static void Init([Optional] UnityEngine.GameObject prefab, int qty = 3)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xC9F68C", Offset = "0xC9F68C", VA = "0xC9F68C")]
	public static void Preload(UnityEngine.GameObject prefab, int qty = 1)
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xC9F848", Offset = "0xC9F848", VA = "0xC9F848")]
	public static UnityEngine.GameObject Spawn(UnityEngine.GameObject prefab, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xC9F924", Offset = "0xC9F924", VA = "0xC9F924")]
	public static void Despawn(UnityEngine.GameObject obj)
	{
	}
}
[Token(Token = "0x2000014")]
public class ArtifactController : MonoBehaviour
{
	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int artifactIndex;

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xC9FD7C", Offset = "0xC9FD7C", VA = "0xC9FD7C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xC9FE54", Offset = "0xC9FE54", VA = "0xC9FE54")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xC9FED4", Offset = "0xC9FED4", VA = "0xC9FED4")]
	public ArtifactController()
	{
	}
}
[Token(Token = "0x2000015")]
public class ArtifactsManager : MonoBehaviour
{
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject[] forceFields;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool[] forceFieldsIsOn;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int forceFieldIndex;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int IsFirst;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int IsFirstCustom;

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xC9FEDC", Offset = "0xC9FEDC", VA = "0xC9FEDC")]
	private void Start()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xCA0430", Offset = "0xCA0430", VA = "0xCA0430")]
	public void UpdateArtifact()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xCA076C", Offset = "0xCA076C", VA = "0xCA076C")]
	public ArtifactsManager()
	{
	}
}
[Token(Token = "0x2000016")]
public class FollowPlayer : MonoBehaviour
{
	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float smoothSpeed;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform player;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Quaternion rotation;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.Vector3 offset;

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xCA0774", Offset = "0xCA0774", VA = "0xCA0774")]
	private void Update()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xCA0874", Offset = "0xCA0874", VA = "0xCA0874")]
	public FollowPlayer()
	{
	}
}
[Token(Token = "0x2000017")]
public class BuildNaveMesh : MonoBehaviour
{
	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ChunkSpawner chunk;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NavMeshSurface[] chunks;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject[,] chunksGO;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xCA0884", Offset = "0xCA0884", VA = "0xCA0884")]
	private void Start()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xCA0A6C", Offset = "0xCA0A6C", VA = "0xCA0A6C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xCA0C64", Offset = "0xCA0C64", VA = "0xCA0C64")]
	public BuildNaveMesh()
	{
	}
}
[Token(Token = "0x2000018")]
public class BuildManager : MonoBehaviour
{
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject foundationPreview;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BuildSystem buildSystem;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xCA0C6C", Offset = "0xCA0C6C", VA = "0xCA0C6C")]
	public BuildManager()
	{
	}
}
[Token(Token = "0x2000019")]
public class BuildSystem : MonoBehaviour
{
	[Token(Token = "0x200001A")]
	[CompilerGenerated]
	private sealed class <PreventSpam>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BuildSystem <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600003F")]
			[Address(RVA = "0xCA15A8", Offset = "0xCA15A8", VA = "0xCA15A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000041")]
			[Address(RVA = "0xCA15F0", Offset = "0xCA15F0", VA = "0xCA15F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0xCA0EFC", Offset = "0xCA0EFC", VA = "0xCA0EFC")]
		[DebuggerHidden]
		public <PreventSpam>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600003D")]
		[Address(RVA = "0xCA14E0", Offset = "0xCA14E0", VA = "0xCA14E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600003E")]
		[Address(RVA = "0xCA14E4", Offset = "0xCA14E4", VA = "0xCA14E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000040")]
		[Address(RVA = "0xCA15B0", Offset = "0xCA15B0", VA = "0xCA15B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer LineRenderer2;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform HandPointTransform2;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public WandController[] wandController;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Camera cam;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LayerMask layer;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject previewGameObject;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Preview previewScript;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float stickTolerance;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool isBuilding;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool pauseBuilding;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public RaycastHit hit;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEngine.GameObject buildWand;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool cooldown;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	public bool isReadyForInstantiate;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float yGrid;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Terraformer terraformer;

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xCA0C74", Offset = "0xCA0C74", VA = "0xCA0C74")]
	public void Start()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xCA0C7C", Offset = "0xCA0C7C", VA = "0xCA0C7C")]
	public void NewBuild(UnityEngine.GameObject _go)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xCA0DF8", Offset = "0xCA0DF8", VA = "0xCA0DF8")]
	public void PauseBuild()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xCA0E88", Offset = "0xCA0E88", VA = "0xCA0E88")]
	[IteratorStateMachine(typeof(<PreventSpam>d__17))]
	public IEnumerator PreventSpam()
	{
		return null;
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xCA0F24", Offset = "0xCA0F24", VA = "0xCA0F24")]
	public void DoBuild()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xCA11C8", Offset = "0xCA11C8", VA = "0xCA11C8")]
	public void PauseBuild(bool _value)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xCA11D4", Offset = "0xCA11D4", VA = "0xCA11D4")]
	public void DoBuildRay()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xCA14D0", Offset = "0xCA14D0", VA = "0xCA14D0")]
	public BuildSystem()
	{
	}
}
[Token(Token = "0x200001B")]
public class CustomSnapToSystem : MonoBehaviour
{
	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BuildSystem buildSystem;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isSnapped;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> tagsISnapTo;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Grabbable grabber;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip CollisionAudio;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource audioSource;

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xCA15F8", Offset = "0xCA15F8", VA = "0xCA15F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xCA1660", Offset = "0xCA1660", VA = "0xCA1660")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xCA18FC", Offset = "0xCA18FC", VA = "0xCA18FC")]
	public CustomSnapToSystem()
	{
	}
}
[Token(Token = "0x200001C")]
public class Preview : MonoBehaviour
{
	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BuildSystem buildSystem;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isSnapped;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isPlaced;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool isFoundation;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<string> tagsISnapTo;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int blockID;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MasterBlockObject[] masterBlock;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material transMat;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isBlockPhysicsOn;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject PhysicsOn;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.GameObject PhysicsOff;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material materialValidLine;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material materialUnvalidLine;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.GameObject previewGameObject;

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xCA1984", Offset = "0xCA1984", VA = "0xCA1984")]
	public void Start()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xCA1A90", Offset = "0xCA1A90", VA = "0xCA1A90")]
	public void Update()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xCA1AF0", Offset = "0xCA1AF0", VA = "0xCA1AF0")]
	public void BlockModelUp()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xCA1BB8", Offset = "0xCA1BB8", VA = "0xCA1BB8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xCA1D48", Offset = "0xCA1D48", VA = "0xCA1D48")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xCA1E5C", Offset = "0xCA1E5C", VA = "0xCA1E5C")]
	public bool GetSnapped()
	{
		return default(bool);
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xCA1E64", Offset = "0xCA1E64", VA = "0xCA1E64")]
	public void SwitchPhysics()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xCA0F74", Offset = "0xCA0F74", VA = "0xCA0F74")]
	public void Place()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xCA1EE8", Offset = "0xCA1EE8", VA = "0xCA1EE8")]
	public Preview()
	{
	}
}
[Token(Token = "0x200001D")]
public class CameraRenderMinimum : MonoBehaviour
{
	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int fps;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float elapsed;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera cam;

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xCA1F70", Offset = "0xCA1F70", VA = "0xCA1F70")]
	private void Start()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xCA1FE0", Offset = "0xCA1FE0", VA = "0xCA1FE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xCA2038", Offset = "0xCA2038", VA = "0xCA2038")]
	public CameraRenderMinimum()
	{
	}
}
[Token(Token = "0x200001E")]
public class Capture360 : MonoBehaviour
{
	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int imageWidth;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool saveAsJPEG;

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xCA2040", Offset = "0xCA2040", VA = "0xCA2040")]
	private void Start()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xCA21C8", Offset = "0xCA21C8", VA = "0xCA21C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xCA21CC", Offset = "0xCA21CC", VA = "0xCA21CC")]
	public Capture360()
	{
	}
}
[Token(Token = "0x200001F")]
public class CheckLanguage : MonoBehaviour
{
	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text text;

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xCA21E4", Offset = "0xCA21E4", VA = "0xCA21E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xCA2294", Offset = "0xCA2294", VA = "0xCA2294")]
	private void Update()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xCA2298", Offset = "0xCA2298", VA = "0xCA2298")]
	public CheckLanguage()
	{
	}
}
[Token(Token = "0x2000020")]
public class ClimbHandlerController : GrabbableEvents
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CraftController craftController;

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xCA22A0", Offset = "0xCA22A0", VA = "0xCA22A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xCA22A4", Offset = "0xCA22A4", VA = "0xCA22A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xCA22A8", Offset = "0xCA22A8", VA = "0xCA22A8", Slot = "24")]
	public override void OnSnapZoneEnter()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xCA568C", Offset = "0xCA568C", VA = "0xCA568C")]
	public ClimbHandlerController()
	{
	}
}
[Token(Token = "0x2000021")]
public class CollidionSetting : MonoBehaviour
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool reuseCollisionCallbacks;

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xCA5694", Offset = "0xCA5694", VA = "0xCA5694")]
	private void Start()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xCA56A0", Offset = "0xCA56A0", VA = "0xCA56A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xCA56A4", Offset = "0xCA56A4", VA = "0xCA56A4")]
	public CollidionSetting()
	{
	}
}
[Token(Token = "0x2000022")]
public class CraftController : MonoBehaviour
{
	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject SnapZone1;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject SnapZone2;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SnapZone craftPart1;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SnapZone craftPart2;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject[] craftingResult;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform craftPlace;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int blockID;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool isCrafting;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xCA2340", Offset = "0xCA2340", VA = "0xCA2340")]
	public void CraftItam()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xCA56AC", Offset = "0xCA56AC", VA = "0xCA56AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xCA56B0", Offset = "0xCA56B0", VA = "0xCA56B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xCA56B4", Offset = "0xCA56B4", VA = "0xCA56B4")]
	public CraftController()
	{
	}
}
[Token(Token = "0x2000023")]
public class DamagableChunk : MonoBehaviour
{
	[Token(Token = "0x2000024")]
	[CompilerGenerated]
	private sealed class <Editchunks>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DamagableChunk <>4__this;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.GameObject> <chunkToEdit>5__2;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.GameObject>.Enumerator <>7__wrap2;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600006B")]
			[Address(RVA = "0xCA6CE0", Offset = "0xCA6CE0", VA = "0xCA6CE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006D")]
			[Address(RVA = "0xCA6D28", Offset = "0xCA6D28", VA = "0xCA6D28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0xCA5804", Offset = "0xCA5804", VA = "0xCA5804")]
		[DebuggerHidden]
		public <Editchunks>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0xCA5834", Offset = "0xCA5834", VA = "0xCA5834", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0xCA5850", Offset = "0xCA5850", VA = "0xCA5850", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0xCA6C90", Offset = "0xCA6C90", VA = "0xCA6C90")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600006C")]
		[Address(RVA = "0xCA6CE8", Offset = "0xCA6CE8", VA = "0xCA6CE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Terraformer terraformer;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider thisCollider;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float LastRelativeVelocity;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public RaycastHit outHitPoint;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ChunkSpawner spawner;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool _left;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool _right;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool _flatten;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool _mine;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool _flattendown;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool _editing;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEngine.GameObject mineEffect;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.GameObject sandBlock;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.GameObject grassBlock;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.GameObject rockBlock;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public LineRenderer terraLine;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform terraLineStart;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public RaycastHit hit;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Collision otherHit;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xCA56BC", Offset = "0xCA56BC", VA = "0xCA56BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xCA5788", Offset = "0xCA5788", VA = "0xCA5788")]
	private void Update()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xCA578C", Offset = "0xCA578C", VA = "0xCA578C", Slot = "4")]
	public virtual void OnCollisionEvent(Collision other)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xCA5790", Offset = "0xCA5790", VA = "0xCA5790")]
	[IteratorStateMachine(typeof(<Editchunks>d__22))]
	public IEnumerator Editchunks()
	{
		return null;
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xCA582C", Offset = "0xCA582C", VA = "0xCA582C")]
	public DamagableChunk()
	{
	}
}
[Token(Token = "0x2000025")]
public class campFire : MonoBehaviour
{
	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("CampFire Settings")]
	private skyDomeDayNight skyDomeDayNight;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem.MainModule mainModule;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource campFireSound;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject fire;

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xCA6D30", Offset = "0xCA6D30", VA = "0xCA6D30")]
	private void Start()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xCA6EBC", Offset = "0xCA6EBC", VA = "0xCA6EBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xCA6EC0", Offset = "0xCA6EC0", VA = "0xCA6EC0")]
	private void FirePit()
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xCA6F44", Offset = "0xCA6F44", VA = "0xCA6F44")]
	public campFire()
	{
	}
}
[Token(Token = "0x2000026")]
public class daysCounter : MonoBehaviour
{
	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private skyDomeDayNight skyDomeDayNight;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI dayCounter;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int days;

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xCA6F4C", Offset = "0xCA6F4C", VA = "0xCA6F4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xCA708C", Offset = "0xCA708C", VA = "0xCA708C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xCA7104", Offset = "0xCA7104", VA = "0xCA7104")]
	public daysCounter()
	{
	}
}
[Token(Token = "0x2000027")]
public class skyDomeDayNight : MonoBehaviour
{
	[Token(Token = "0x2000028")]
	[CompilerGenerated]
	private sealed class <WaitForPortal>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float seconds;

		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public skyDomeDayNight <>4__this;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000084")]
			[Address(RVA = "0xCA8AF4", Offset = "0xCA8AF4", VA = "0xCA8AF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000086")]
			[Address(RVA = "0xCA8B3C", Offset = "0xCA8B3C", VA = "0xCA8B3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0xCA80DC", Offset = "0xCA80DC", VA = "0xCA80DC")]
		[DebuggerHidden]
		public <WaitForPortal>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000082")]
		[Address(RVA = "0xCA89FC", Offset = "0xCA89FC", VA = "0xCA89FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000083")]
		[Address(RVA = "0xCA8A00", Offset = "0xCA8A00", VA = "0xCA8A00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000085")]
		[Address(RVA = "0xCA8AFC", Offset = "0xCA8AFC", VA = "0xCA8AFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material material;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int days;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Light Settings")]
	public Light Light;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float maxShadow;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float minShadow;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxLight;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float minLight;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float f;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Sky Movement Systems")]
	public float cycleSpeed;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float offSet;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isInvasionOn;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public List<UnityEngine.GameObject> enemies;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	public List<Light> lights;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float timerOdd;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float timerOdd2;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float timerEven;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float waitingTime;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool portalIsOn;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.GameObject[] portals;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int randomInt;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public UnityEngine.Color Day;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public UnityEngine.Color Sunset;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public UnityEngine.Color SunsetPink;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public UnityEngine.Color Morning;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public UnityEngine.Color NightEarly;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public UnityEngine.Color Night;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public UnityEngine.Color ambientSkyColorNight;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public UnityEngine.Color ambientEquatorColorNight;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public UnityEngine.Color ambientGroundColorNight;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public UnityEngine.Color ambientSkyColorDay;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public UnityEngine.Color ambientEquatorColorDay;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public UnityEngine.Color ambientGroundColorDay;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public UnityEngine.Color ambientSkyColorLightNight;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public UnityEngine.Color ambientSkyColorMorning;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float t;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private float t1;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private float t2;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float lightNight;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float morning;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float day;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private float day2;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float sunset;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float timeSkyDay;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float timeSkyNight;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float timeSkySunset;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float timeSkySunrise;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private float timeDay;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private float timeSunset;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private float timeSunsetPink;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float timeNightEarly;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float timeNight;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float timeSunrise;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private float timeSkyMorning;

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xCA710C", Offset = "0xCA710C", VA = "0xCA710C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xCA7174", Offset = "0xCA7174", VA = "0xCA7174")]
	private void Start()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xCA72F0", Offset = "0xCA72F0", VA = "0xCA72F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xCA7FD0", Offset = "0xCA7FD0", VA = "0xCA7FD0")]
	private void SpawnPortal()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xCA8058", Offset = "0xCA8058", VA = "0xCA8058")]
	[IteratorStateMachine(typeof(<WaitForPortal>d__24))]
	public IEnumerator WaitForPortal(float seconds)
	{
		return null;
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xCA7F28", Offset = "0xCA7F28", VA = "0xCA7F28")]
	private void CycleDay()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xCA8104", Offset = "0xCA8104", VA = "0xCA8104")]
	private void SunLight()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xCA821C", Offset = "0xCA821C", VA = "0xCA821C")]
	public void LerpGradient()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xCA83B8", Offset = "0xCA83B8", VA = "0xCA83B8")]
	public void LerpSkyGradient()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xCA848C", Offset = "0xCA848C", VA = "0xCA848C")]
	public void LerpGradientOnce()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xCA77DC", Offset = "0xCA77DC", VA = "0xCA77DC")]
	public void LerpGradientSet()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xCA88B0", Offset = "0xCA88B0", VA = "0xCA88B0")]
	public skyDomeDayNight()
	{
	}
}
[Token(Token = "0x2000029")]
public class skyRotation : MonoBehaviour
{
	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 rotationSpeed;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private skyDomeDayNight skyDomeDayNight;

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xCA8B44", Offset = "0xCA8B44", VA = "0xCA8B44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xCA8C84", Offset = "0xCA8C84", VA = "0xCA8C84")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xCA8CC8", Offset = "0xCA8CC8", VA = "0xCA8CC8")]
	public skyRotation()
	{
	}
}
[Token(Token = "0x200002A")]
public class HapticKeyFeedback : MonoBehaviour, IPassiveKeyListener
{
	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.GameObject ourKey;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly List<UnityEngine.GameObject> closeObjects;

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xCA8CD0", Offset = "0xCA8CD0", VA = "0xCA8CD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xCA8D1C", Offset = "0xCA8D1C", VA = "0xCA8D1C", Slot = "4")]
	public void OnKeyDown(UnityEngine.GameObject source, string signal)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xCA9054", Offset = "0xCA9054", VA = "0xCA9054")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xCA9110", Offset = "0xCA9110", VA = "0xCA9110")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xCA917C", Offset = "0xCA917C", VA = "0xCA917C")]
	public HapticKeyFeedback()
	{
	}
}
[Token(Token = "0x200002B")]
public class KeyboardAdapter : MonoBehaviour, IKeyboardListener
{
	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text text;

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xCA9204", Offset = "0xCA9204", VA = "0xCA9204")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xCA925C", Offset = "0xCA925C", VA = "0xCA925C", Slot = "4")]
	public void OnLetterWritten(string letter)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xCA93BC", Offset = "0xCA93BC", VA = "0xCA93BC")]
	public KeyboardAdapter()
	{
	}
}
[Serializable]
[Token(Token = "0x200002C")]
public class PID
{
	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public double pFactor;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public double iFactor;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public double dFactor;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private double integral;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private double lastError;

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xCA93C4", Offset = "0xCA93C4", VA = "0xCA93C4")]
	public PID(UnityEngine.Vector3 factors)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xCA940C", Offset = "0xCA940C", VA = "0xCA940C")]
	public PID(double pFactor, double iFactor, double dFactor)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xCA9448", Offset = "0xCA9448", VA = "0xCA9448")]
	public double Update(double setpoint, double actual, double timeFrame)
	{
		return default(double);
	}
}
[Token(Token = "0x200002D")]
public class QuadcopterCameraFollow : MonoBehaviour
{
	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool followQuadcopter;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private UnityEngine.Vector3 cameraOffset;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float distnace;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float zoomSpeed;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.Vector2 zoomRange;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform overviewTransform;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float yawDestination;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private QuadcopterController controller;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private QuadcopterPathController pathController;

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xCA9484", Offset = "0xCA9484", VA = "0xCA9484")]
	private void Start()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xCA95F4", Offset = "0xCA95F4", VA = "0xCA95F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xCA9B30", Offset = "0xCA9B30", VA = "0xCA9B30")]
	public QuadcopterCameraFollow()
	{
	}
}
[Token(Token = "0x200002E")]
public class QuadcopterCollisionAvoidance : MonoBehaviour
{
	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float maxSeeAhead;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private LayerMask checkMask;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float maxAvoidForce;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float checkRadius;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool enableOnFreeFlight;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private QuadcopterController controller;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private QuadcopterPathController pathController;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector3 avoidanceForce;

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xCA9B44", Offset = "0xCA9B44", VA = "0xCA9B44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xCA9D20", Offset = "0xCA9D20", VA = "0xCA9D20")]
	private void CalculateDesiredWorldVelocity(QuadcopterController.VelocityContext context)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xCAA0DC", Offset = "0xCAA0DC", VA = "0xCAA0DC")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xCAA1CC", Offset = "0xCAA1CC", VA = "0xCAA1CC")]
	public QuadcopterCollisionAvoidance()
	{
	}
}
[Token(Token = "0x200002F")]
public class QuadcopterController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000030")]
	public class VelocityContext
	{
		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private UnityEngine.Vector3 desiredDirection;

		[Token(Token = "0x1700000A")]
		public UnityEngine.Vector3 DesiredWorldVelocity
		{
			[Token(Token = "0x60000AD")]
			[Address(RVA = "0xCAB614", Offset = "0xCAB614", VA = "0xCAB614")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60000AE")]
			[Address(RVA = "0xCAB620", Offset = "0xCAB620", VA = "0xCAB620")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700000B")]
		public UnityEngine.Vector3 DesiredDirection
		{
			[Token(Token = "0x60000AF")]
			[Address(RVA = "0xCAADB8", Offset = "0xCAADB8", VA = "0xCAADB8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x60000B0")]
			[Address(RVA = "0xCAB62C", Offset = "0xCAB62C", VA = "0xCAB62C")]
			set
			{
			}
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0xCAB60C", Offset = "0xCAB60C", VA = "0xCAB60C")]
		public VelocityContext()
		{
		}
	}

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform centerOfMass;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform ForwardRightEngine;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform ForwardLeftEngine;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform BackRightEngine;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform BackLeftEngine;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float throttleSpeed;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float turnSpeed;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float sideSpeed;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float forwardSpeed;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private bool realisticSideAdjustment;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PID yPid;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PID xPid;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private PID sidePid;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PID yawPid;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private PID pitchPid;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private PID rollPid;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private float maxEngineSpeed;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SortedList<int, Action<VelocityContext>> CalculateWorldDesiredVelocity;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float forwardAmount;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float sideAmount;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float throttle;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private VelocityContext velocityContext;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rigidbody rigidbody;

	[Token(Token = "0x17000007")]
	public Rigidbody Rigidbody
	{
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0xCAB3E8", Offset = "0xCAB3E8", VA = "0xCAB3E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	public float TurnSpeed
	{
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0xCAB3F0", Offset = "0xCAB3F0", VA = "0xCAB3F0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000009")]
	public UnityEngine.Vector3 DesiredDirection
	{
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xCA9B18", Offset = "0xCA9B18", VA = "0xCA9B18")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xCAA200", Offset = "0xCAA200", VA = "0xCAA200")]
	private void Awake()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xCAA300", Offset = "0xCAA300", VA = "0xCAA300")]
	private void Update()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xCAA550", Offset = "0xCAA550", VA = "0xCAA550")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xCAA304", Offset = "0xCAA304", VA = "0xCAA304")]
	private void AddControlls()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xCAAE8C", Offset = "0xCAAE8C", VA = "0xCAAE8C")]
	public UnityEngine.Vector3 CalculateWorldDesiredVelocityInternal()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xCAA554", Offset = "0xCAA554", VA = "0xCAA554")]
	private void AddInternalForces()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xCAB1B0", Offset = "0xCAB1B0", VA = "0xCAB1B0")]
	private void AddEngineForce(Transform engine, float force)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xCAAF28", Offset = "0xCAAF28", VA = "0xCAAF28")]
	private float GetPitchError()
	{
		return default(float);
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xCAB008", Offset = "0xCAB008", VA = "0xCAB008")]
	private float GetRollError()
	{
		return default(float);
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xCAB0E8", Offset = "0xCAB0E8", VA = "0xCAB0E8")]
	private float GetYawError()
	{
		return default(float);
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xCAB310", Offset = "0xCAB310", VA = "0xCAB310")]
	public static float AngleSigned(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, UnityEngine.Vector3 n)
	{
		return default(float);
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xCA9C3C", Offset = "0xCA9C3C", VA = "0xCA9C3C")]
	public void AddCalculateDesiredVelocityListener(Action<VelocityContext> action, int priority)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xCAB368", Offset = "0xCAB368", VA = "0xCAB368")]
	public void RemoveCalculateDesiredVelocityListener(Action<VelocityContext> action)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xCAB3F8", Offset = "0xCAB3F8", VA = "0xCAB3F8")]
	public QuadcopterController()
	{
	}
}
[Token(Token = "0x2000031")]
public class QuadcopterFPVCamera : MonoBehaviour
{
	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera camera;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int cameraFpsLimit;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int cameraWidth;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int cameraHeight;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool render;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float fpsTimer;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RenderTexture renderTexture;

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xCAB638", Offset = "0xCAB638", VA = "0xCAB638")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xCAB6DC", Offset = "0xCAB6DC", VA = "0xCAB6DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xCAB78C", Offset = "0xCAB78C", VA = "0xCAB78C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xCAB80C", Offset = "0xCAB80C", VA = "0xCAB80C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xCAB828", Offset = "0xCAB828", VA = "0xCAB828")]
	public QuadcopterFPVCamera()
	{
	}
}
[Token(Token = "0x2000032")]
public class QuadcopterPathController : MonoBehaviour
{
	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool followPath;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private UnityEngine.Vector3 worldDestination;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool faceDestination;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float maxSpeed;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int navMeshMask;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float pathCornerDistanceTreshold;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float pathLastCornerDistanceTreshold;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float minPathCornerHeight;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool freeFlightDestination;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private QuadcopterController controller;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private NavMeshPath path;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int currentCornerIndex;

	[Token(Token = "0x1700000C")]
	public bool FollowPath
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0xCAC260", Offset = "0xCAC260", VA = "0xCAC260")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000D")]
	public UnityEngine.Vector3 WorldDestination
	{
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xCAC268", Offset = "0xCAC268", VA = "0xCAC268")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x14000001")]
	public event Action OnStopFollowingPath
	{
		[Token(Token = "0x60000B7")]
		[Address(RVA = "0xCAB838", Offset = "0xCAB838", VA = "0xCAB838")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000B8")]
		[Address(RVA = "0xCAB8D4", Offset = "0xCAB8D4", VA = "0xCAB8D4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xCAB970", Offset = "0xCAB970", VA = "0xCAB970")]
	private void Start()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xCABA74", Offset = "0xCABA74", VA = "0xCABA74")]
	private void CalculateDesiredWorldVelocity(QuadcopterController.VelocityContext context)
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xCABFB0", Offset = "0xCABFB0", VA = "0xCABFB0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xCABF90", Offset = "0xCABF90", VA = "0xCABF90")]
	private void StopPathFollowing()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xCAC194", Offset = "0xCAC194", VA = "0xCAC194")]
	public void SetFollowPath(bool followPath)
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xCAC1C0", Offset = "0xCAC1C0", VA = "0xCAC1C0")]
	public void SetWorldDestination(UnityEngine.Vector3 destination)
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xCAC274", Offset = "0xCAC274", VA = "0xCAC274")]
	public QuadcopterPathController()
	{
	}
}
[Token(Token = "0x2000033")]
public class QuadcopterPathManager : MonoBehaviour
{
	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera camera;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform targetGizmo;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float maxNavMeshDitance;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float heightAdd;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private QuadcopterPathController controller;

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xCAC2A4", Offset = "0xCAC2A4", VA = "0xCAC2A4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xCAC708", Offset = "0xCAC708", VA = "0xCAC708")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xCAC860", Offset = "0xCAC860", VA = "0xCAC860")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xCACA94", Offset = "0xCACA94", VA = "0xCACA94")]
	private void OnStopFollwingPath()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xCACAC0", Offset = "0xCACAC0", VA = "0xCACAC0")]
	public QuadcopterPathManager()
	{
	}
}
[Token(Token = "0x2000034")]
public enum OffMeshLinkMoveMethod
{
	[Token(Token = "0x4000156")]
	Teleport,
	[Token(Token = "0x4000157")]
	NormalSpeed,
	[Token(Token = "0x4000158")]
	Parabola,
	[Token(Token = "0x4000159")]
	Curve
}
[Token(Token = "0x2000035")]
[RequireComponent(typeof(NavMeshAgent))]
public class AgentLinkMover : MonoBehaviour
{
	[Token(Token = "0x2000036")]
	public delegate void LinkEvent();

	[Token(Token = "0x2000037")]
	[CompilerGenerated]
	private sealed class <Start>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AgentLinkMover <>4__this;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NavMeshAgent <agent>5__2;

		[Token(Token = "0x1700000E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000D3")]
			[Address(RVA = "0xCAD0E0", Offset = "0xCAD0E0", VA = "0xCAD0E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000D5")]
			[Address(RVA = "0xCAD128", Offset = "0xCAD128", VA = "0xCAD128", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000D0")]
		[Address(RVA = "0xCACB48", Offset = "0xCACB48", VA = "0xCACB48")]
		[DebuggerHidden]
		public <Start>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0xCACEE4", Offset = "0xCACEE4", VA = "0xCACEE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000D2")]
		[Address(RVA = "0xCACEE8", Offset = "0xCACEE8", VA = "0xCACEE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0xCAD0E8", Offset = "0xCAD0E8", VA = "0xCAD0E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000038")]
	[CompilerGenerated]
	private sealed class <NormalSpeed>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent agent;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <endPos>5__2;

		[Token(Token = "0x17000010")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000D9")]
			[Address(RVA = "0xCAD3D4", Offset = "0xCAD3D4", VA = "0xCAD3D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000011")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000DB")]
			[Address(RVA = "0xCAD41C", Offset = "0xCAD41C", VA = "0xCAD41C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000D6")]
		[Address(RVA = "0xCACBE4", Offset = "0xCACBE4", VA = "0xCACBE4")]
		[DebuggerHidden]
		public <NormalSpeed>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0xCAD130", Offset = "0xCAD130", VA = "0xCAD130", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000D8")]
		[Address(RVA = "0xCAD134", Offset = "0xCAD134", VA = "0xCAD134", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000DA")]
		[Address(RVA = "0xCAD3DC", Offset = "0xCAD3DC", VA = "0xCAD3DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000039")]
	[CompilerGenerated]
	private sealed class <Parabola>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent agent;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float height;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float duration;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 <startPos>5__2;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 <endPos>5__3;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <normalizedTime>5__4;

		[Token(Token = "0x17000012")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000DF")]
			[Address(RVA = "0xCAD64C", Offset = "0xCAD64C", VA = "0xCAD64C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000E1")]
			[Address(RVA = "0xCAD694", Offset = "0xCAD694", VA = "0xCAD694", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000DC")]
		[Address(RVA = "0xCACC94", Offset = "0xCACC94", VA = "0xCACC94")]
		[DebuggerHidden]
		public <Parabola>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60000DD")]
		[Address(RVA = "0xCAD424", Offset = "0xCAD424", VA = "0xCAD424", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000DE")]
		[Address(RVA = "0xCAD428", Offset = "0xCAD428", VA = "0xCAD428", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000E0")]
		[Address(RVA = "0xCAD654", Offset = "0xCAD654", VA = "0xCAD654", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200003A")]
	[CompilerGenerated]
	private sealed class <Curve>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NavMeshAgent agent;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AgentLinkMover <>4__this;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float duration;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 <startPos>5__2;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityEngine.Vector3 <endPos>5__3;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float <normalizedTime>5__4;

		[Token(Token = "0x17000014")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000E5")]
			[Address(RVA = "0xCAD8EC", Offset = "0xCAD8EC", VA = "0xCAD8EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000015")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000E7")]
			[Address(RVA = "0xCAD934", Offset = "0xCAD934", VA = "0xCAD934", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000E2")]
		[Address(RVA = "0xCAD69C", Offset = "0xCAD69C", VA = "0xCAD69C")]
		[DebuggerHidden]
		public <Curve>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60000E3")]
		[Address(RVA = "0xCAD6C4", Offset = "0xCAD6C4", VA = "0xCAD6C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000E4")]
		[Address(RVA = "0xCAD6C8", Offset = "0xCAD6C8", VA = "0xCAD6C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0xCAD8F4", Offset = "0xCAD8F4", VA = "0xCAD8F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OffMeshLinkMoveMethod m_Method;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve m_Curve;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LinkEvent OnLinkStart;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LinkEvent OnLinkEnd;

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xCACAD4", Offset = "0xCACAD4", VA = "0xCACAD4")]
	[IteratorStateMachine(typeof(<Start>d__5))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xCACB70", Offset = "0xCACB70", VA = "0xCACB70")]
	[IteratorStateMachine(typeof(<NormalSpeed>d__6))]
	private IEnumerator NormalSpeed(NavMeshAgent agent)
	{
		return null;
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xCACC0C", Offset = "0xCACC0C", VA = "0xCACC0C")]
	[IteratorStateMachine(typeof(<Parabola>d__7))]
	private IEnumerator Parabola(NavMeshAgent agent, float height, float duration)
	{
		return null;
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xCACCBC", Offset = "0xCACCBC", VA = "0xCACCBC")]
	[IteratorStateMachine(typeof(<Curve>d__8))]
	private IEnumerator Curve(NavMeshAgent agent, float duration)
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xCACD5C", Offset = "0xCACD5C", VA = "0xCACD5C")]
	public AgentLinkMover()
	{
	}
}
[Token(Token = "0x200003B")]
[RequireComponent(typeof(SphereCollider))]
public class AttackRadius : MonoBehaviour
{
	[Token(Token = "0x200003C")]
	public delegate void AttackEvent(IDamageable Target);

	[Token(Token = "0x200003D")]
	[CompilerGenerated]
	private sealed class <Attack>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttackRadius <>4__this;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSeconds <Wait>5__2;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IDamageable <closestDamageable>5__3;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <closestDistance>5__4;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000F5")]
			[Address(RVA = "0xCAE314", Offset = "0xCAE314", VA = "0xCAE314", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000F7")]
			[Address(RVA = "0xCAE35C", Offset = "0xCAE35C", VA = "0xCAE35C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F2")]
		[Address(RVA = "0xCADBEC", Offset = "0xCADBEC", VA = "0xCADBEC")]
		[DebuggerHidden]
		public <Attack>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0xCADEF0", Offset = "0xCADEF0", VA = "0xCADEF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000F4")]
		[Address(RVA = "0xCADEF4", Offset = "0xCADEF4", VA = "0xCADEF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0xCAE31C", Offset = "0xCAE31C", VA = "0xCAE31C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider Collider;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected List<IDamageable> Damageables;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Damage;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float AttackDelay;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AttackEvent OnAttack;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Coroutine AttackCoroutine;

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xCAD93C", Offset = "0xCAD93C", VA = "0xCAD93C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xCAD994", Offset = "0xCAD994", VA = "0xCAD994", Slot = "5")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xCADAAC", Offset = "0xCADAAC", VA = "0xCADAAC", Slot = "6")]
	protected virtual void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xCADB78", Offset = "0xCADB78", VA = "0xCADB78", Slot = "7")]
	[IteratorStateMachine(typeof(<Attack>d__10))]
	protected virtual IEnumerator Attack()
	{
		return null;
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xCADC14", Offset = "0xCADC14", VA = "0xCADC14")]
	protected bool DisabledDamageables(IDamageable Damageable)
	{
		return default(bool);
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xCADCE0", Offset = "0xCADCE0", VA = "0xCADCE0")]
	public AttackRadius()
	{
	}
}
[Token(Token = "0x200003E")]
[RequireComponent(typeof(Rigidbody))]
public class Bullet : PoolableObject
{
	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float AutoDestroyTime;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MoveSpeed;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Damage;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Rigidbody Rigidbody;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Transform Target;

	[Token(Token = "0x4000187")]
	protected const string DISABLE_METHOD_NAME = "Disable";

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xCAE364", Offset = "0xCAE364", VA = "0xCAE364")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xCAE3BC", Offset = "0xCAE3BC", VA = "0xCAE3BC", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xCAE41C", Offset = "0xCAE41C", VA = "0xCAE41C", Slot = "6")]
	public virtual void Spawn(UnityEngine.Vector3 Forward, int Damage, Transform Target)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xCAE480", Offset = "0xCAE480", VA = "0xCAE480", Slot = "7")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xCAE570", Offset = "0xCAE570", VA = "0xCAE570")]
	protected void Disable()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xCAE628", Offset = "0xCAE628", VA = "0xCAE628")]
	public Bullet()
	{
	}
}
[Token(Token = "0x200003F")]
[CreateAssetMenu(fileName = "Attack Configuration", menuName = "ScriptableObject/Attack Configuration")]
public class AttackScriptableObject : ScriptableObject
{
	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsRanged;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int Damage;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float AttackRadius;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float AttackDelay;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Bullet BulletPrefab;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Vector3 BulletSpawnOffset;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask LineOfSightLayers;

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xCAE64C", Offset = "0xCAE64C", VA = "0xCAE64C")]
	public void SetupEnemy(Enemy enemy)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xCAE778", Offset = "0xCAE778", VA = "0xCAE778")]
	public AttackScriptableObject()
	{
	}
}
[Token(Token = "0x2000040")]
public class Enemy : PoolableObject, IDamageable
{
	[Token(Token = "0x2000041")]
	[CompilerGenerated]
	private sealed class <LookAt>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform Target;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Enemy <>4__this;

		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Quaternion <lookRotation>5__2;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <time>5__3;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600010A")]
			[Address(RVA = "0xCAEC54", Offset = "0xCAEC54", VA = "0xCAEC54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600010C")]
			[Address(RVA = "0xCAEC9C", Offset = "0xCAEC9C", VA = "0xCAEC9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0xCAEA14", Offset = "0xCAEA14", VA = "0xCAEA14")]
		[DebuggerHidden]
		public <LookAt>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0xCAEAD8", Offset = "0xCAEAD8", VA = "0xCAEAD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0xCAEADC", Offset = "0xCAEADC", VA = "0xCAEADC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0xCAEC5C", Offset = "0xCAEC5C", VA = "0xCAEC5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AttackRadius AttackRadius;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator Animator;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EnemyMovement Movement;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public NavMeshAgent Agent;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int Health;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine LookCoroutine;

	[Token(Token = "0x4000195")]
	private const string ATTACK_TRIGGER = "Attack";

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xCAE7A0", Offset = "0xCAE7A0", VA = "0xCAE7A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xCAE874", Offset = "0xCAE874", VA = "0xCAE874")]
	private void OnAttack(IDamageable Target)
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xCAE984", Offset = "0xCAE984", VA = "0xCAE984")]
	[IteratorStateMachine(typeof(<LookAt>d__9))]
	private IEnumerator LookAt(Transform Target)
	{
		return null;
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xCAEA3C", Offset = "0xCAEA3C", VA = "0xCAEA3C", Slot = "4")]
	public override void OnDisable()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xCAEA80", Offset = "0xCAEA80", VA = "0xCAEA80", Slot = "5")]
	public void TakeDamage(int Damage)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xCAEAC0", Offset = "0xCAEAC0", VA = "0xCAEAC0", Slot = "6")]
	public Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xCAEAC8", Offset = "0xCAEAC8", VA = "0xCAEAC8")]
	public Enemy()
	{
	}
}
[Token(Token = "0x2000042")]
[RequireComponent(typeof(NavMeshAgent), typeof(AgentLinkMover))]
public class EnemyMovement : MonoBehaviour
{
	[Token(Token = "0x2000043")]
	[CompilerGenerated]
	private sealed class <FollowTarget>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMovement <>4__this;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSeconds <Wait>5__2;

		[Token(Token = "0x1700001A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000117")]
			[Address(RVA = "0xCAF288", Offset = "0xCAF288", VA = "0xCAF288", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000119")]
			[Address(RVA = "0xCAF2D0", Offset = "0xCAF2D0", VA = "0xCAF2D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000114")]
		[Address(RVA = "0xCAEF90", Offset = "0xCAEF90", VA = "0xCAEF90")]
		[DebuggerHidden]
		public <FollowTarget>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000115")]
		[Address(RVA = "0xCAF158", Offset = "0xCAF158", VA = "0xCAF158", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000116")]
		[Address(RVA = "0xCAF15C", Offset = "0xCAF15C", VA = "0xCAF15C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000118")]
		[Address(RVA = "0xCAF290", Offset = "0xCAF290", VA = "0xCAF290", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Player;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float UpdateRate;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NavMeshAgent Agent;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AgentLinkMover LinkMover;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Animator Animator;

	[Token(Token = "0x40001A1")]
	private const string IsWalking = "IsWalking";

	[Token(Token = "0x40001A2")]
	private const string Jump = "Jump";

	[Token(Token = "0x40001A3")]
	private const string Landed = "Landed";

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Coroutine FollowCoroutine;

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xCAECA4", Offset = "0xCAECA4", VA = "0xCAECA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xCAEE74", Offset = "0xCAEE74", VA = "0xCAEE74")]
	public void StartChasing()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xCAEF1C", Offset = "0xCAEF1C", VA = "0xCAEF1C")]
	[IteratorStateMachine(typeof(<FollowTarget>d__11))]
	private IEnumerator FollowTarget()
	{
		return null;
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xCAEFB8", Offset = "0xCAEFB8", VA = "0xCAEFB8")]
	private void HandleLinkStart()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xCAF00C", Offset = "0xCAF00C", VA = "0xCAF00C")]
	private void HandleLinkEnd()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xCAF060", Offset = "0xCAF060", VA = "0xCAF060")]
	private void Update()
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xCAF144", Offset = "0xCAF144", VA = "0xCAF144")]
	public EnemyMovement()
	{
	}
}
[Token(Token = "0x2000044")]
[CreateAssetMenu(fileName = "Enemy Configuration", menuName = "ScriptableObject/Enemy Configuration")]
public class EnemyScriptableObject : ScriptableObject
{
	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Enemy Prefab;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AttackScriptableObject AttackConfiguration;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Health;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float AIUpdateInterval;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float Acceleration;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float AngularSpeed;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int AreaMask;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int AvoidancePriority;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float BaseOffset;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Height;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ObstacleAvoidanceType ObstacleAvoidanceType;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float Radius;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float Speed;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float StoppingDistance;

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xCAF2D8", Offset = "0xCAF2D8", VA = "0xCAF2D8")]
	public void SetupEnemy(Enemy enemy)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xCAF3E8", Offset = "0xCAF3E8", VA = "0xCAF3E8")]
	public EnemyScriptableObject()
	{
	}
}
[Token(Token = "0x2000045")]
public class EnemySpawner : MonoBehaviour
{
	[Token(Token = "0x2000046")]
	public enum SpawnMethod
	{
		[Token(Token = "0x40001BF")]
		RoundRobin,
		[Token(Token = "0x40001C0")]
		Random
	}

	[Token(Token = "0x2000047")]
	[CompilerGenerated]
	private sealed class <SpawnEnemies>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySpawner <>4__this;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSeconds <Wait>5__2;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <SpawnedEnemies>5__3;

		[Token(Token = "0x1700001C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000126")]
			[Address(RVA = "0xCAFD10", Offset = "0xCAFD10", VA = "0xCAFD10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000128")]
			[Address(RVA = "0xCAFD58", Offset = "0xCAFD58", VA = "0xCAFD58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0xCAF6C4", Offset = "0xCAF6C4", VA = "0xCAF6C4")]
		[DebuggerHidden]
		public <SpawnEnemies>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0xCAFBEC", Offset = "0xCAFBEC", VA = "0xCAFBEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0xCAFBF0", Offset = "0xCAFBF0", VA = "0xCAFBF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0xCAFD18", Offset = "0xCAFD18", VA = "0xCAFD18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Player;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfEnemiesToSpawn;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float SpawnDelay;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<EnemyScriptableObject> Enemies;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SpawnMethod EnemySpawnMethod;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private NavMeshTriangulation Triangulation;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<int, ObjectPool> EnemyObjectPools;

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xCAF438", Offset = "0xCAF438", VA = "0xCAF438")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xCAF5F0", Offset = "0xCAF5F0", VA = "0xCAF5F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xCAF650", Offset = "0xCAF650", VA = "0xCAF650")]
	[IteratorStateMachine(typeof(<SpawnEnemies>d__9))]
	private IEnumerator SpawnEnemies()
	{
		return null;
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xCAF6EC", Offset = "0xCAF6EC", VA = "0xCAF6EC")]
	private void SpawnRoundRobinEnemy(int SpawnedEnemies)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xCAFA00", Offset = "0xCAFA00", VA = "0xCAFA00")]
	private void SpawnRandomEnemy()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xCAF744", Offset = "0xCAF744", VA = "0xCAF744")]
	private void DoSpawnEnemy(int SpawnIndex)
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xCAFB08", Offset = "0xCAFB08", VA = "0xCAFB08")]
	public EnemySpawner()
	{
	}
}
[Token(Token = "0x2000048")]
public class HomingBullet : Bullet
{
	[Token(Token = "0x2000049")]
	[CompilerGenerated]
	private sealed class <FindTarget>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HomingBullet <>4__this;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <startPosition>5__2;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector2 <Noise>5__3;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 <HorizontalNoiseVector>5__4;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float <time>5__5;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600012F")]
			[Address(RVA = "0xCB022C", Offset = "0xCB022C", VA = "0xCB022C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000131")]
			[Address(RVA = "0xCB0274", Offset = "0xCB0274", VA = "0xCB0274", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600012C")]
		[Address(RVA = "0xCAFE38", Offset = "0xCAFE38", VA = "0xCAFE38")]
		[DebuggerHidden]
		public <FindTarget>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600012D")]
		[Address(RVA = "0xCAFE90", Offset = "0xCAFE90", VA = "0xCAFE90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600012E")]
		[Address(RVA = "0xCAFE94", Offset = "0xCAFE94", VA = "0xCAFE94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0xCB0234", Offset = "0xCB0234", VA = "0xCB0234", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve PositionCurve;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve NoiseCurve;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float yOffset;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public UnityEngine.Vector2 MinNoise;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public UnityEngine.Vector2 MaxNoise;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Coroutine HomingCoroutine;

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xCAFD60", Offset = "0xCAFD60", VA = "0xCAFD60", Slot = "6")]
	public override void Spawn(UnityEngine.Vector3 Forward, int Damage, Transform Target)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xCAFDC4", Offset = "0xCAFDC4", VA = "0xCAFDC4")]
	[IteratorStateMachine(typeof(<FindTarget>d__7))]
	private IEnumerator FindTarget()
	{
		return null;
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xCAFE60", Offset = "0xCAFE60", VA = "0xCAFE60")]
	public HomingBullet()
	{
	}
}
[Token(Token = "0x200004A")]
public interface IDamageable
{
	[Token(Token = "0x6000132")]
	void TakeDamage(int Damage);

	[Token(Token = "0x6000133")]
	Transform GetTransform();
}
[Token(Token = "0x200004B")]
public class ObjectPool
{
	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PoolableObject Prefab;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int Size;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<PoolableObject> AvailableObjectsPool;

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xCB027C", Offset = "0xCB027C", VA = "0xCB027C")]
	private ObjectPool(PoolableObject Prefab, int Size)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xCAF500", Offset = "0xCAF500", VA = "0xCAF500")]
	public static ObjectPool CreateInstance(PoolableObject Prefab, int Size)
	{
		return null;
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xCB0330", Offset = "0xCB0330", VA = "0xCB0330")]
	private void CreateObjects(UnityEngine.GameObject parent)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xCAFA5C", Offset = "0xCAFA5C", VA = "0xCAFA5C")]
	public PoolableObject GetObject()
	{
		return null;
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xCB04DC", Offset = "0xCB04DC", VA = "0xCB04DC")]
	public void ReturnObjectToPool(PoolableObject Object)
	{
	}
}
[Token(Token = "0x200004C")]
public class PoolableObject : MonoBehaviour
{
	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ObjectPool Parent;

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xCAEA64", Offset = "0xCAEA64", VA = "0xCAEA64", Slot = "4")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xCAE644", Offset = "0xCAE644", VA = "0xCAE644")]
	public PoolableObject()
	{
	}
}
[Token(Token = "0x200004D")]
public class Player : MonoBehaviour, IDamageable
{
	[Token(Token = "0x200004E")]
	[CompilerGenerated]
	private sealed class <LookAt>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform Target;

		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Player <>4__this;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Quaternion <lookRotation>5__2;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <time>5__3;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000144")]
			[Address(RVA = "0xCB09D4", Offset = "0xCB09D4", VA = "0xCB09D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000146")]
			[Address(RVA = "0xCB0A1C", Offset = "0xCB0A1C", VA = "0xCB0A1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0xCB07D8", Offset = "0xCB07D8", VA = "0xCB07D8")]
		[DebuggerHidden]
		public <LookAt>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000142")]
		[Address(RVA = "0xCB0858", Offset = "0xCB0858", VA = "0xCB0858", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0xCB085C", Offset = "0xCB085C", VA = "0xCB085C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000145")]
		[Address(RVA = "0xCB09DC", Offset = "0xCB09DC", VA = "0xCB09DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AttackRadius AttackRadius;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Coroutine LookCoroutine;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int Health;

	[Token(Token = "0x40001DA")]
	private const string ATTACK_TRIGGER = "Attack";

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xCB058C", Offset = "0xCB058C", VA = "0xCB058C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xCB0660", Offset = "0xCB0660", VA = "0xCB0660")]
	private void OnAttack(IDamageable Target)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xCB0748", Offset = "0xCB0748", VA = "0xCB0748")]
	[IteratorStateMachine(typeof(<LookAt>d__6))]
	private IEnumerator LookAt(Transform Target)
	{
		return null;
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xCB0800", Offset = "0xCB0800", VA = "0xCB0800", Slot = "4")]
	public void TakeDamage(int Damage)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xCB0840", Offset = "0xCB0840", VA = "0xCB0840", Slot = "5")]
	public Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xCB0848", Offset = "0xCB0848", VA = "0xCB0848")]
	public Player()
	{
	}
}
[Token(Token = "0x200004F")]
public class PlayerCameraController : MonoBehaviour
{
	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.GameObject FollowTarget;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Camera Camera;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEngine.Vector3 Offset;

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xCB0A24", Offset = "0xCB0A24", VA = "0xCB0A24")]
	private void Update()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xCB0A94", Offset = "0xCB0A94", VA = "0xCB0A94")]
	public PlayerCameraController()
	{
	}
}
[Token(Token = "0x2000050")]
[RequireComponent(typeof(NavMeshAgent), typeof(AgentLinkMover))]
public class PlayerMovement : MonoBehaviour
{
	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera Camera;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NavMeshAgent Agent;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Animator Animator;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AgentLinkMover LinkMover;

	[Token(Token = "0x40001E8")]
	private const string IsWalking = "IsWalking";

	[Token(Token = "0x40001E9")]
	private const string Jump = "Jump";

	[Token(Token = "0x40001EA")]
	private const string Landed = "Landed";

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RaycastHit Hit;

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xCB0A9C", Offset = "0xCB0A9C", VA = "0xCB0A9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xCB0C6C", Offset = "0xCB0C6C", VA = "0xCB0C6C")]
	private void HandleLinkStart()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xCB0CC0", Offset = "0xCB0CC0", VA = "0xCB0CC0")]
	private void HandleLinkEnd()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xCB0D14", Offset = "0xCB0D14", VA = "0xCB0D14")]
	private void Update()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xCB0E7C", Offset = "0xCB0E7C", VA = "0xCB0E7C")]
	public PlayerMovement()
	{
	}
}
[Token(Token = "0x2000051")]
public class RangedAttackRadius : AttackRadius
{
	[Token(Token = "0x2000052")]
	[CompilerGenerated]
	private sealed class <Attack>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RangedAttackRadius <>4__this;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private WaitForSeconds <Wait>5__2;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000156")]
			[Address(RVA = "0xCB18DC", Offset = "0xCB18DC", VA = "0xCB18DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000158")]
			[Address(RVA = "0xCB1924", Offset = "0xCB1924", VA = "0xCB1924", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0xCB0FB8", Offset = "0xCB0FB8", VA = "0xCB0FB8")]
		[DebuggerHidden]
		public <Attack>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0xCB1344", Offset = "0xCB1344", VA = "0xCB1344", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0xCB1348", Offset = "0xCB1348", VA = "0xCB1348", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0xCB18E4", Offset = "0xCB18E4", VA = "0xCB18E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public NavMeshAgent Agent;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Bullet BulletPrefab;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.Vector3 BulletSpawnOffset;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public LayerMask Mask;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ObjectPool BulletPool;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float SpherecastRadius;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private RaycastHit Hit;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private IDamageable targetDamageable;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Bullet bullet;

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xCB0E84", Offset = "0xCB0E84", VA = "0xCB0E84")]
	public void CreateBulletPool()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xCB0F44", Offset = "0xCB0F44", VA = "0xCB0F44", Slot = "7")]
	[IteratorStateMachine(typeof(<Attack>d__10))]
	protected override IEnumerator Attack()
	{
		return null;
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xCB0FE0", Offset = "0xCB0FE0", VA = "0xCB0FE0")]
	private bool HasLineOfSightTo(Transform Target)
	{
		return default(bool);
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xCB12EC", Offset = "0xCB12EC", VA = "0xCB12EC", Slot = "6")]
	protected override void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xCB1324", Offset = "0xCB1324", VA = "0xCB1324")]
	public RangedAttackRadius()
	{
	}
}
[Token(Token = "0x2000053")]
public class DroneAI : MonoBehaviour
{
	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float SEARCH_RADIUS;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float VISION_LENGTH;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float FIRE_TIME;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float BULLET_LIFETIME;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject playerRef;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject droneBullet;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject droneBulletSpawn;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector3 DRONE_FACING;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private UnityEngine.Vector3 playerPosition;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public NavMeshAgent drone_agent;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool startSearch;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool turret;

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xCB192C", Offset = "0xCB192C", VA = "0xCB192C")]
	private void Start()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xCB19E8", Offset = "0xCB19E8", VA = "0xCB19E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xCB1C28", Offset = "0xCB1C28", VA = "0xCB1C28")]
	private bool withinRange(UnityEngine.Vector3 queryPosition, float radius)
	{
		return default(bool);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xCB1B74", Offset = "0xCB1B74", VA = "0xCB1B74")]
	private bool vision()
	{
		return default(bool);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xCB1CD4", Offset = "0xCB1CD4", VA = "0xCB1CD4")]
	private void shoot()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xCB1E58", Offset = "0xCB1E58", VA = "0xCB1E58")]
	public DroneAI()
	{
	}
}
[Token(Token = "0x2000054")]
public class EasyFps : MonoBehaviour
{
	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool can10;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool can30;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool can60;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool can120;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool canmax;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent OnFpsLessThan10;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent OnFpsLessThan30;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEvent OnFpsLessThan60;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnFpsLessThan120;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnFpsMoreThanMax;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool ncm;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int maxFR;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float refresht;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int frameCounter;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float timeCounter;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float lastFramerate;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool acttxt;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Text txt;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int mx;

	[Token(Token = "0x17000024")]
	[SerializeField]
	public float FPS
	{
		[Token(Token = "0x600015F")]
		[Address(RVA = "0xCB1E6C", Offset = "0xCB1E6C", VA = "0xCB1E6C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000025")]
	[SerializeField]
	public float RefreshTime
	{
		[Token(Token = "0x6000160")]
		[Address(RVA = "0xCB1E74", Offset = "0xCB1E74", VA = "0xCB1E74")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000161")]
		[Address(RVA = "0xCB1E7C", Offset = "0xCB1E7C", VA = "0xCB1E7C")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public int MaxFrameRate
	{
		[Token(Token = "0x6000162")]
		[Address(RVA = "0xCB1E84", Offset = "0xCB1E84", VA = "0xCB1E84")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000163")]
		[Address(RVA = "0xCB1E8C", Offset = "0xCB1E8C", VA = "0xCB1E8C")]
		set
		{
		}
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xCB1E9C", Offset = "0xCB1E9C", VA = "0xCB1E9C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xCB1F7C", Offset = "0xCB1F7C", VA = "0xCB1F7C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xCB21E0", Offset = "0xCB21E0", VA = "0xCB21E0")]
	public void HideFps()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xCB2214", Offset = "0xCB2214", VA = "0xCB2214")]
	public void ShowFps()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xCB224C", Offset = "0xCB224C", VA = "0xCB224C")]
	public EasyFps()
	{
	}
}
[Token(Token = "0x2000055")]
public static class EasyFpsCounter
{
	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UnityEngine.Object cusPref;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static EasyFps EasyFps;
}
[Token(Token = "0x2000056")]
public class CubeBehaviour : MonoBehaviour
{
	[Token(Token = "0x6000169")]
	[Address(RVA = "0xCB226C", Offset = "0xCB226C", VA = "0xCB226C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xCB2358", Offset = "0xCB2358", VA = "0xCB2358")]
	public CubeBehaviour()
	{
	}
}
[Token(Token = "0x2000057")]
public class Example : MonoBehaviour
{
	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string poolName;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<UnityEngine.GameObject> goList;

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xCB2360", Offset = "0xCB2360", VA = "0xCB2360")]
	public void CreateFromPoolAction()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xCB2538", Offset = "0xCB2538", VA = "0xCB2538")]
	public void ReturnToPoolAction()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xCB26E4", Offset = "0xCB26E4", VA = "0xCB26E4")]
	public Example()
	{
	}
}
[Token(Token = "0x2000058")]
public class Game : MonoBehaviour
{
	[Token(Token = "0x600016E")]
	[Address(RVA = "0xCB276C", Offset = "0xCB276C", VA = "0xCB276C")]
	public Game()
	{
	}
}
[Token(Token = "0x2000059")]
public class GrabbableObjectController : GrabbableEvents
{
	[Token(Token = "0x200005A")]
	[CompilerGenerated]
	private sealed class <PreventSpam>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbableObjectController <>4__this;

		[Token(Token = "0x17000027")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000186")]
			[Address(RVA = "0xCB3EF0", Offset = "0xCB3EF0", VA = "0xCB3EF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000188")]
			[Address(RVA = "0xCB3F38", Offset = "0xCB3F38", VA = "0xCB3F38", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0xCB3D58", Offset = "0xCB3D58", VA = "0xCB3D58")]
		[DebuggerHidden]
		public <PreventSpam>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000184")]
		[Address(RVA = "0xCB3E2C", Offset = "0xCB3E2C", VA = "0xCB3E2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000185")]
		[Address(RVA = "0xCB3E30", Offset = "0xCB3E30", VA = "0xCB3E30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000187")]
		[Address(RVA = "0xCB3EF8", Offset = "0xCB3EF8", VA = "0xCB3EF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005B")]
	[CompilerGenerated]
	private sealed class <ResetTool>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GrabbableObjectController <>4__this;

		[Token(Token = "0x17000029")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600018C")]
			[Address(RVA = "0xCB4094", Offset = "0xCB4094", VA = "0xCB4094", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600018E")]
			[Address(RVA = "0xCB40DC", Offset = "0xCB40DC", VA = "0xCB40DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000189")]
		[Address(RVA = "0xCB3DF8", Offset = "0xCB3DF8", VA = "0xCB3DF8")]
		[DebuggerHidden]
		public <ResetTool>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x600018A")]
		[Address(RVA = "0xCB3F40", Offset = "0xCB3F40", VA = "0xCB3F40", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600018B")]
		[Address(RVA = "0xCB3F44", Offset = "0xCB3F44", VA = "0xCB3F44", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0xCB409C", Offset = "0xCB409C", VA = "0xCB409C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float currentY;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LayerMask layerMask1;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask layerMask2;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LayerMask layerMask3;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool isReadyForInstantiate;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float minHeightForRespawn;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject spawnPoint;

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xCB2774", Offset = "0xCB2774", VA = "0xCB2774")]
	private void Start()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xCB2778", Offset = "0xCB2778", VA = "0xCB2778")]
	private void Update()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xCB277C", Offset = "0xCB277C", VA = "0xCB277C")]
	public void TreeRotation()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xCB27F4", Offset = "0xCB27F4", VA = "0xCB27F4")]
	public void ReturnOnRelease()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xCB2D70", Offset = "0xCB2D70", VA = "0xCB2D70")]
	public void SnapTreeToGround()
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xCB3120", Offset = "0xCB3120", VA = "0xCB3120")]
	public void SnapCraftToBlocks()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xCB34DC", Offset = "0xCB34DC", VA = "0xCB34DC")]
	public void SnapToGround()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xCB34E0", Offset = "0xCB34E0", VA = "0xCB34E0")]
	public void FixErrorProneYPos()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xCB3CC8", Offset = "0xCB3CC8", VA = "0xCB3CC8", Slot = "14")]
	public override void OnGrip(float gripValue)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xCB3CCC", Offset = "0xCB3CCC", VA = "0xCB3CCC", Slot = "5")]
	public override void OnRelease()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xCB3CD0", Offset = "0xCB3CD0", VA = "0xCB3CD0", Slot = "4")]
	public override void OnGrab(Grabber grabber)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xCB3CD4", Offset = "0xCB3CD4", VA = "0xCB3CD4", Slot = "22")]
	public override void OnButton2Down()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xCB3CD8", Offset = "0xCB3CD8", VA = "0xCB3CD8", Slot = "19")]
	public override void OnButton1Down()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xCB3CDC", Offset = "0xCB3CDC", VA = "0xCB3CDC", Slot = "23")]
	public override void OnButton2Up()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xCB3CE0", Offset = "0xCB3CE0", VA = "0xCB3CE0", Slot = "21")]
	public override void OnButton2()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xCB3CE4", Offset = "0xCB3CE4", VA = "0xCB3CE4")]
	[IteratorStateMachine(typeof(<PreventSpam>d__20))]
	public IEnumerator PreventSpam()
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xCB3D80", Offset = "0xCB3D80", VA = "0xCB3D80", Slot = "16")]
	public override void OnTriggerDown()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xCB3D84", Offset = "0xCB3D84", VA = "0xCB3D84")]
	[IteratorStateMachine(typeof(<ResetTool>d__24))]
	private IEnumerator ResetTool()
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xCB3E20", Offset = "0xCB3E20", VA = "0xCB3E20", Slot = "15")]
	public override void OnTrigger(float triggerValue)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xCB3E24", Offset = "0xCB3E24", VA = "0xCB3E24")]
	public GrabbableObjectController()
	{
	}
}
[Token(Token = "0x200005C")]
[RequireComponent(typeof(CapsuleCollider))]
[RequireComponent(typeof(Rigidbody))]
[AddComponentMenu("First Person AIO")]
public class FirstPersonAIO : MonoBehaviour
{
	[Token(Token = "0x200005D")]
	public enum InvertMouseInput
	{
		[Token(Token = "0x400027B")]
		None,
		[Token(Token = "0x400027C")]
		X,
		[Token(Token = "0x400027D")]
		Y,
		[Token(Token = "0x400027E")]
		Both
	}

	[Token(Token = "0x200005E")]
	public enum CameraInputMethod
	{
		[Token(Token = "0x4000280")]
		Traditional,
		[Token(Token = "0x4000281")]
		TraditionalWithConstraints,
		[Token(Token = "0x4000282")]
		Retro
	}

	[Serializable]
	[Token(Token = "0x200005F")]
	public class CrouchModifiers
	{
		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool useCrouch;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool toggleCrouch;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public KeyCode crouchKey;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float crouchWalkSpeedMultiplier;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float crouchJumpPowerMultiplier;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool crouchOverride;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float colliderHeight;

		[Token(Token = "0x600019D")]
		[Address(RVA = "0xCB845C", Offset = "0xCB845C", VA = "0xCB845C")]
		public CrouchModifiers()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000060")]
	public class AdvancedSettings
	{
		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float gravityMultiplier;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxSlopeAngle;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal bool isTouchingWalkable;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		internal bool isTouchingUpright;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		internal bool isTouchingFlat;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxWallShear;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float maxStepHeight;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool stairMiniHop;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public RaycastHit surfaceAngleCheck;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEngine.Vector3 curntGroundNormal;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public UnityEngine.Vector2 moveDirRef;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float lastKnownSlopeAngle;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float FOVKickAmount;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float changeTime;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float fovRef;

		[Token(Token = "0x600019E")]
		[Address(RVA = "0xCB8478", Offset = "0xCB8478", VA = "0xCB8478")]
		public AdvancedSettings()
		{
		}
	}

	[Token(Token = "0x2000061")]
	public enum FSMode
	{
		[Token(Token = "0x400029C")]
		Static,
		[Token(Token = "0x400029D")]
		Dynamic
	}

	[Serializable]
	[Token(Token = "0x2000062")]
	public class DynamicFootStep
	{
		[Token(Token = "0x2000063")]
		public enum matMode
		{
			[Token(Token = "0x40002B6")]
			physicMaterial,
			[Token(Token = "0x40002B7")]
			Material
		}

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public matMode materialMode;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<PhysicMaterial> woodPhysMat;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<PhysicMaterial> metalAndGlassPhysMat;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<PhysicMaterial> grassPhysMat;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<PhysicMaterial> dirtAndGravelPhysMat;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<PhysicMaterial> rockAndConcretePhysMat;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<PhysicMaterial> mudPhysMat;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<PhysicMaterial> customPhysMat;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Material> woodMat;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Material> metalAndGlassMat;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Material> grassMat;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Material> dirtAndGravelMat;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Material> rockAndConcreteMat;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Material> mudMat;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Material> customMat;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<AudioClip> currentClipSet;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<AudioClip> woodClipSet;

		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<AudioClip> metalAndGlassClipSet;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<AudioClip> grassClipSet;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<AudioClip> dirtAndGravelClipSet;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<AudioClip> rockAndConcreteClipSet;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<AudioClip> mudClipSet;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<AudioClip> customClipSet;

		[Token(Token = "0x600019F")]
		[Address(RVA = "0xCB84A8", Offset = "0xCB84A8", VA = "0xCB84A8")]
		public DynamicFootStep()
		{
		}
	}

	[Token(Token = "0x2000064")]
	[CompilerGenerated]
	private sealed class <CameraShake>d__94 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FirstPersonAIO <>4__this;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Magnitude;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float Duration;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <elapsed>5__2;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0xCB8788", Offset = "0xCB8788", VA = "0xCB8788", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001A5")]
			[Address(RVA = "0xCB87D0", Offset = "0xCB87D0", VA = "0xCB87D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xCB7AB0", Offset = "0xCB7AB0", VA = "0xCB7AB0")]
		[DebuggerHidden]
		public <CameraShake>d__94(int <>1__state)
		{
		}

		[Token(Token = "0x60001A1")]
		[Address(RVA = "0xCB84B0", Offset = "0xCB84B0", VA = "0xCB84B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0xCB84B4", Offset = "0xCB84B4", VA = "0xCB84B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001A4")]
		[Address(RVA = "0xCB8790", Offset = "0xCB8790", VA = "0xCB8790", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool controllerPauseState;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool enableCameraMovement;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public InvertMouseInput mouseInputInversion;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CameraInputMethod cameraInputMethod;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float verticalRotationRange;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float mouseSensitivity;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float fOVToMouseSensitivity;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float cameraSmoothing;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool lockAndHideCursor;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Camera playerCamera;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool enableCameraShake;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	internal UnityEngine.Vector3 cameraStartingPosition;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float baseCamFOV;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool autoCrosshair;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool drawStaminaMeter;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float smoothRef;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Image StaminaMeter;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Image StaminaMeterBG;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Sprite Crosshair;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.Vector3 targetAngles;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private UnityEngine.Vector3 followAngles;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private UnityEngine.Vector3 followVelocity;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private UnityEngine.Vector3 originalRotation;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool playerCanMove;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	public bool walkByDefault;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float walkSpeed;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public KeyCode sprintKey;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float sprintSpeed;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float jumpPower;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool canJump;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	public bool canHoldJump;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
	private bool jumpInput;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBF")]
	private bool didJump;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool useStamina;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float staminaDepletionSpeed;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float staminaLevel;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float speed;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float staminaInternal;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	internal float walkSpeedInternal;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	internal float sprintSpeedInternal;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	internal float jumpPowerInternal;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public CrouchModifiers _crouchModifiers;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public AdvancedSettings advanced;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private CapsuleCollider capsule;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private UnityEngine.Vector2 inputXY;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public bool isCrouching;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float yVelocity;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float checkedSlope;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool isSprinting;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Rigidbody fps_Rigidbody;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool useHeadbob;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Transform head;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public bool snapHeadjointToCapsul;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public float headbobFrequency;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public float headbobSwayAngle;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public float headbobHeight;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float headbobSideMovement;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public float jumpLandIntensity;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private UnityEngine.Vector3 originalLocalPosition;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float nextStepTime;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float headbobCycle;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float headbobFade;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float springPosition;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private float springVelocity;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private float springElastic;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private float springDampen;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float springVelocityThreshold;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float springPositionThreshold;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private UnityEngine.Vector3 previousPosition;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private UnityEngine.Vector3 previousVelocity;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private UnityEngine.Vector3 miscRefVel;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private bool previousGrounded;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private AudioSource audioSource;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public bool enableAudioSFX;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public float Volume;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public AudioClip jumpSound;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public AudioClip landSound;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public List<AudioClip> footStepSounds;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public FSMode fsmode;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public DynamicFootStep dynamicFootstep;

	[Token(Token = "0x1700002B")]
	public bool IsGrounded
	{
		[Token(Token = "0x600018F")]
		[Address(RVA = "0xCB40E4", Offset = "0xCB40E4", VA = "0xCB40E4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000190")]
		[Address(RVA = "0xCB40EC", Offset = "0xCB40EC", VA = "0xCB40EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xCB40F8", Offset = "0xCB40F8", VA = "0xCB40F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xCB4230", Offset = "0xCB4230", VA = "0xCB4230")]
	private void Start()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xCB4A9C", Offset = "0xCB4A9C", VA = "0xCB4A9C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xCB4F18", Offset = "0xCB4F18", VA = "0xCB4F18")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xCB7A28", Offset = "0xCB7A28", VA = "0xCB7A28")]
	[IteratorStateMachine(typeof(<CameraShake>d__94))]
	public IEnumerator CameraShake(float Duration, float Magnitude)
	{
		return null;
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xCB7AD8", Offset = "0xCB7AD8", VA = "0xCB7AD8")]
	public void RotateCamera(UnityEngine.Vector2 Rotation, bool Snap)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xCB4EDC", Offset = "0xCB4EDC", VA = "0xCB4EDC")]
	public void ControllerPause()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xCB75EC", Offset = "0xCB75EC", VA = "0xCB75EC")]
	private float SlopeCheck()
	{
		return default(float);
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xCB7B00", Offset = "0xCB7B00", VA = "0xCB7B00")]
	private void OnCollisionEnter(Collision CollisionData)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xCB7E7C", Offset = "0xCB7E7C", VA = "0xCB7E7C")]
	private void OnCollisionStay(Collision CollisionData)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xCB81DC", Offset = "0xCB81DC", VA = "0xCB81DC")]
	private void OnCollisionExit(Collision CollisionData)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xCB8260", Offset = "0xCB8260", VA = "0xCB8260")]
	public FirstPersonAIO()
	{
	}
}
[Token(Token = "0x2000065")]
public class ChunkSpawner : MonoBehaviour
{
	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public int objectsSpawnedInGrassBiome;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public int objectsSpawnedInDesertBiome;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public int objectsSpawnedInRockyBiome;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public int objectsSpawnedUnderWater;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public int artifactsSpwaned;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public int artifactsSpawned;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ChunkSpawner Instance;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("This will set the island seed to this")]
	public string seed;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("This with override the seed variable if a save file with name already exists")]
	public string islandName;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RaycastHit hitRay;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.GameObject chunk;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.GameObject waterPrefab;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.GameObject floorPrefab;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float waterHeight;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public IslandVariables islandVariables;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public TerrainSpawningVariables terrainSpawningVariables;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public UnityEngine.GameObject[,] Chunks;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public Transform ray;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public float hight;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public UnityEngine.GameObject[] artifact;

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xCB87D8", Offset = "0xCB87D8", VA = "0xCB87D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xCB88A4", Offset = "0xCB88A4", VA = "0xCB88A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xCBA4FC", Offset = "0xCBA4FC", VA = "0xCBA4FC")]
	public void BakeNaveMesh()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xCBA5B4", Offset = "0xCBA5B4", VA = "0xCBA5B4")]
	public void SaveTerrainOnButton()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xCBA64C", Offset = "0xCBA64C", VA = "0xCBA64C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xCBA658", Offset = "0xCBA658", VA = "0xCBA658")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xCBA664", Offset = "0xCBA664", VA = "0xCBA664")]
	public void SaveIsland()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xCB8E64", Offset = "0xCB8E64", VA = "0xCB8E64")]
	public string RandomString(int stringLength, string rand = "")
	{
		return null;
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xCB903C", Offset = "0xCB903C", VA = "0xCB903C")]
	public void SpawnPropsOnIsland()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xCBA670", Offset = "0xCBA670", VA = "0xCBA670")]
	private UnityEngine.GameObject SpawnObj(UnityEngine.GameObject g, UnityEngine.Vector3 spawnPosition, [Optional] UnityEngine.GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xCBA82C", Offset = "0xCBA82C", VA = "0xCBA82C")]
	private UnityEngine.GameObject SpawnObjThatExists(UnityEngine.GameObject g, UnityEngine.Vector3 spawnPosition, [Optional] UnityEngine.GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xCBA7F4", Offset = "0xCBA7F4", VA = "0xCBA7F4")]
	private UnityEngine.Quaternion Random360()
	{
		return default(UnityEngine.Quaternion);
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xCBA964", Offset = "0xCBA964", VA = "0xCBA964")]
	private float RandomScale()
	{
		return default(float);
	}

	[Token(Token = "0x60001B3")]
	private T GetRandFromArray<T>(T[] arr)
	{
		return (T)null;
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xCBA984", Offset = "0xCBA984", VA = "0xCBA984")]
	public ChunkSpawner()
	{
	}
}
[Serializable]
[Token(Token = "0x2000066")]
public struct IslandVariables
{
	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public int2 ChunkID;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[Header("Island")]
	public bool smoothShade;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int chunksGridDimentions;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public int stringHashcode;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public float3 seedOffset;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Chunk")]
	public int3 chunkVoxelDimentions;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Header("TerraForming")]
	public float brushSize;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float brushStrength;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Biomes and color")]
	public float beachSandHeight;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("biome will only work if the biomefill %'s descend")]
	public Biome grassbiome;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Biome desertBiome;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Biome rockybiome;

	[Token(Token = "0x1700002E")]
	public float2 SeedOffset2
	{
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0xCBA98C", Offset = "0xCBA98C", VA = "0xCBA98C")]
		get
		{
			return default(float2);
		}
	}

	[Token(Token = "0x1700002F")]
	public int3 chunkVoxelDimentionsP1
	{
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0xCBA998", Offset = "0xCBA998", VA = "0xCBA998")]
		get
		{
			return default(int3);
		}
	}

	[Token(Token = "0x17000030")]
	public int voxelsInChunk
	{
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0xCBA9BC", Offset = "0xCBA9BC", VA = "0xCBA9BC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000031")]
	public int VertexArrLength
	{
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xCBA9D0", Offset = "0xCBA9D0", VA = "0xCBA9D0")]
		get
		{
			return default(int);
		}
	}
}
[Serializable]
[Token(Token = "0x2000067")]
public struct Biome
{
	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Range(0f, 100f)]
	[UnityEngine.Tooltip("Make sure all biomes add to 100")]
	public float biomeFill;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public UnityEngine.Color biomeColor;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float terraceHeight;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float terrainHeight;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float terrainFloor;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float noiseScale;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(1f, 8f)]
	public int octaves;
}
[Serializable]
[Token(Token = "0x2000068")]
public struct TerrainSpawningVariables
{
	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[UnityEngine.Tooltip("This means the maximum amount of objects that can be spawned in a chunk")]
	public int maxNumToSpawnUnderwater;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public BiomeSpawnables grassy;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BiomeSpawnables desert;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BiomeSpawnables rocky;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject underWaterObject;
}
[Serializable]
[Token(Token = "0x2000069")]
public struct BiomeSpawnables
{
	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[UnityEngine.Tooltip("This means the total number of objects to spawn in biome")]
	public int maxNumToSpawnInBiome;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public UnityEngine.GameObject[] objects;
}
[Token(Token = "0x200006A")]
public static class JobUtilities
{
	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xCBA9F8", Offset = "0xCBA9F8", VA = "0xCBA9F8")]
	public static int3 IndexToInt3(int index, int3 dim)
	{
		return default(int3);
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xCBAA20", Offset = "0xCBAA20", VA = "0xCBAA20")]
	public static float3 IndexToFloat3(int index, int3 dim)
	{
		return default(float3);
	}
}
[Token(Token = "0x200006B")]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshCollider))]
[RequireComponent(typeof(MeshFilter))]
public class MeshGenerator : MonoBehaviour
{
	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshFilter filter;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshCollider collider;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] _noiseField;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Color[] _colorField;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Mesh mesh;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Space(10f)]
	public IslandVariables islandVariables;

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xCB8F18", Offset = "0xCB8F18", VA = "0xCB8F18")]
	public void GenerateChunk()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xCBAC90", Offset = "0xCBAC90", VA = "0xCBAC90")]
	public void loadEditValues()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xCBB53C", Offset = "0xCBB53C", VA = "0xCBB53C")]
	public void Updatechunk(UnityEngine.Vector3 editPos, float changeBy, bool flatten = false)
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xCBBA88", Offset = "0xCBBA88", VA = "0xCBBA88")]
	public void Updatechunk2(UnityEngine.Vector3 editPos, float changeBy, bool flatten = false)
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xCBBFB0", Offset = "0xCBBFB0", VA = "0xCBBFB0")]
	public void UpdatechunkMine(UnityEngine.Vector3 editPos, float changeBy, bool flatten = false)
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xCBC4C0", Offset = "0xCBC4C0", VA = "0xCBC4C0")]
	public void UpdatechunkBuild(UnityEngine.Vector3 editPos, float changeBy, bool flatten = false)
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xCBC9F8", Offset = "0xCBC9F8", VA = "0xCBC9F8")]
	public void UpdatechunkBuildWand2(UnityEngine.Vector3 editPos, float changeBy, bool flatten = false)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xCBD060", Offset = "0xCBD060", VA = "0xCBD060")]
	public void UpdatechunkBuildWand(UnityEngine.Vector3 editPos, float changeBy, bool flatten = false)
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xCBD588", Offset = "0xCBD588", VA = "0xCBD588")]
	public void UpdatechunkBuildWand3(UnityEngine.Vector3 editPos, float changeBy, bool flatten = false)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xCBBA64", Offset = "0xCBBA64", VA = "0xCBBA64")]
	private int Convert(int3 p)
	{
		return default(int);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xCBC9D4", Offset = "0xCBC9D4", VA = "0xCBC9D4")]
	private int Convert2(int3 p)
	{
		return default(int);
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xCBAA50", Offset = "0xCBAA50", VA = "0xCBAA50")]
	private void GenerateNoise()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xCBAF74", Offset = "0xCBAF74", VA = "0xCBAF74")]
	private void GenerateMesh()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xCBDAB0", Offset = "0xCBDAB0", VA = "0xCBDAB0")]
	private void GenerateMeshOriginal()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xCBB504", Offset = "0xCBB504", VA = "0xCBB504")]
	public void DisplayMesh()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xCBE0E0", Offset = "0xCBE0E0", VA = "0xCBE0E0")]
	public MeshGenerator()
	{
	}
}
[Token(Token = "0x200006C")]
[BurstCompile]
public struct GenerateMeshMultitheaded : IJobParallelFor
{
	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[NativeDisableParallelForRestriction]
	public NativeArray<float> VertexValues;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[NativeDisableParallelForRestriction]
	public NativeArray<UnityEngine.Color> VertexColors;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[NativeDisableParallelForRestriction]
	public NativeQueue<Triangle>.ParallelWriter Triangles;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public IslandVariables Vars;

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xD82DDC", Offset = "0xD82DDC", VA = "0xD82DDC", Slot = "4")]
	public void Execute(int threadIndex)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xD83140", Offset = "0xD83140", VA = "0xD83140")]
	private int FromTri(int cubeIndex, int vertIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xD831D4", Offset = "0xD831D4", VA = "0xD831D4")]
	private UnityEngine.Vector3 InterpolateEdgePosition(int3 pos, int edge)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xD830EC", Offset = "0xD830EC", VA = "0xD830EC")]
	private int Convert(int3 p)
	{
		return default(int);
	}
}
[Token(Token = "0x200006D")]
[BurstCompile]
public struct GenerateNoiseMultithreaded : IJobParallelFor
{
	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[NativeDisableParallelForRestriction]
	public NativeArray<float> VertexValues;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[NativeDisableParallelForRestriction]
	public NativeArray<UnityEngine.Color> VertexColors;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public IslandVariables Vars;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float3 WorldPos;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xD833A8", Offset = "0xD833A8", VA = "0xD833A8", Slot = "4")]
	public void Execute(int threadIndex)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xD837B4", Offset = "0xD837B4", VA = "0xD837B4")]
	private float OctavedRidgeNoise(float2 pos, float height, float noiseScale, int octaves)
	{
		return default(float);
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xD838CC", Offset = "0xD838CC", VA = "0xD838CC")]
	private float OcatvedSimplexNoise(float2 pos, float height, float noiseScale, int octaves)
	{
		return default(float);
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xD839C4", Offset = "0xD839C4", VA = "0xD839C4")]
	private float FalloffMap(float2 pos)
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x200006E")]
public struct Triangle
{
	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 a;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Vector3 b;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 c;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UnityEngine.Color Ca;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public UnityEngine.Color Cb;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public UnityEngine.Color Cc;
}
[Token(Token = "0x200006F")]
public enum biometype
{
	[Token(Token = "0x4000301")]
	grass,
	[Token(Token = "0x4000302")]
	rocky,
	[Token(Token = "0x4000303")]
	desert
}
[Token(Token = "0x2000070")]
public class SaveFileLoader : MonoBehaviour
{
	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text IslandName;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject savesListParent;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject savesUIPrefab;

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xD83AA0", Offset = "0xD83AA0", VA = "0xD83AA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xD83EA8", Offset = "0xD83EA8", VA = "0xD83EA8")]
	public void CreateNewIsland()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xD84004", Offset = "0xD84004", VA = "0xD84004")]
	public SaveFileLoader()
	{
	}
}
[Token(Token = "0x2000071")]
public class SaveFileUIPrefab : MonoBehaviour
{
	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text nameText;

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xD83E84", Offset = "0xD83E84", VA = "0xD83E84")]
	public void SetData(string name)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xD8400C", Offset = "0xD8400C", VA = "0xD8400C")]
	public void DeleteThisFile()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xD84154", Offset = "0xD84154", VA = "0xD84154")]
	public void LoadThisIsland()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xD841F0", Offset = "0xD841F0", VA = "0xD841F0")]
	public SaveFileUIPrefab()
	{
	}
}
[Token(Token = "0x2000072")]
public static class SavingSystem
{
	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string _seed;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<int, float>[] _chunkEdits;

	[Token(Token = "0x17000032")]
	public static string SaveFileFolder
	{
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0xD841F8", Offset = "0xD841F8", VA = "0xD841F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xD83C78", Offset = "0xD83C78", VA = "0xD83C78")]
	public static string[] SaveFileNames()
	{
		return null;
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xD84244", Offset = "0xD84244", VA = "0xD84244")]
	public static void AddValueToEdits(int chunkID, int editPos, float voxelValue)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xD84498", Offset = "0xD84498", VA = "0xD84498")]
	public static void SaveTerrain(string fileName, string seed)
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xD84098", Offset = "0xD84098", VA = "0xD84098")]
	public static void DeleteSaveFile(string fileName)
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xD83F8C", Offset = "0xD83F8C", VA = "0xD83F8C")]
	public static bool SaveFileExists(string fileName)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xD8469C", Offset = "0xD8469C", VA = "0xD8469C")]
	public static void LoadFileChunkEdits(string fileName)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xD84874", Offset = "0xD84874", VA = "0xD84874")]
	public static Dictionary<int, float> GetChunkEdits(int chunkID)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000073")]
public class IslandEdits
{
	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Dictionary<int, float>[] ChunkEdits;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string seed;

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xD84658", Offset = "0xD84658", VA = "0xD84658")]
	public IslandEdits(Dictionary<int, float>[] chunkEdits, string s)
	{
	}
}
[Token(Token = "0x2000074")]
public class Terraformer : MonoBehaviour
{
	[Token(Token = "0x2000075")]
	[CompilerGenerated]
	private sealed class <Editchunks>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Terraformer <>4__this;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.GameObject> <chunkToEdit>5__2;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.GameObject>.Enumerator <>7__wrap2;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001F5")]
			[Address(RVA = "0xD86DA8", Offset = "0xD86DA8", VA = "0xD86DA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001F7")]
			[Address(RVA = "0xD86DF0", Offset = "0xD86DF0", VA = "0xD86DF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0xD849E8", Offset = "0xD849E8", VA = "0xD849E8")]
		[DebuggerHidden]
		public <Editchunks>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xD84EE0", Offset = "0xD84EE0", VA = "0xD84EE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xD84F20", Offset = "0xD84F20", VA = "0xD84F20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0xD86C18", Offset = "0xD86C18", VA = "0xD86C18")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0xD86C68", Offset = "0xD86C68", VA = "0xD86C68")]
		private void <>m__Finally2()
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0xD86CB8", Offset = "0xD86CB8", VA = "0xD86CB8")]
		private void <>m__Finally3()
		{
		}

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xD86D08", Offset = "0xD86D08", VA = "0xD86D08")]
		private void <>m__Finally4()
		{
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xD86D58", Offset = "0xD86D58", VA = "0xD86D58")]
		private void <>m__Finally5()
		{
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xD86DB0", Offset = "0xD86DB0", VA = "0xD86DB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000076")]
	[CompilerGenerated]
	private sealed class <Editchunks2>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Terraformer <>4__this;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.GameObject> <chunkToEdit>5__2;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.GameObject>.Enumerator <>7__wrap2;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001FC")]
			[Address(RVA = "0xD87BEC", Offset = "0xD87BEC", VA = "0xD87BEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001FE")]
			[Address(RVA = "0xD87C34", Offset = "0xD87C34", VA = "0xD87C34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0xD84A84", Offset = "0xD84A84", VA = "0xD84A84")]
		[DebuggerHidden]
		public <Editchunks2>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60001F9")]
		[Address(RVA = "0xD86DF8", Offset = "0xD86DF8", VA = "0xD86DF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0xD86E14", Offset = "0xD86E14", VA = "0xD86E14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0xD87B9C", Offset = "0xD87B9C", VA = "0xD87B9C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0xD87BF4", Offset = "0xD87BF4", VA = "0xD87BF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000077")]
	[CompilerGenerated]
	private sealed class <EditchunksFromHit>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Terraformer <>4__this;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.GameObject> <chunkToEdit>5__2;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.GameObject>.Enumerator <>7__wrap2;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000203")]
			[Address(RVA = "0xD894CC", Offset = "0xD894CC", VA = "0xD894CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000205")]
			[Address(RVA = "0xD89514", Offset = "0xD89514", VA = "0xD89514", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0xD84B20", Offset = "0xD84B20", VA = "0xD84B20")]
		[DebuggerHidden]
		public <EditchunksFromHit>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0xD87C3C", Offset = "0xD87C3C", VA = "0xD87C3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0xD87C58", Offset = "0xD87C58", VA = "0xD87C58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000202")]
		[Address(RVA = "0xD8947C", Offset = "0xD8947C", VA = "0xD8947C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000204")]
		[Address(RVA = "0xD894D4", Offset = "0xD894D4", VA = "0xD894D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000078")]
	[CompilerGenerated]
	private sealed class <EditchunksFromBuild>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Terraformer <>4__this;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.GameObject> <chunkToEdit>5__2;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.GameObject>.Enumerator <>7__wrap2;

		[Token(Token = "0x17000039")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600020A")]
			[Address(RVA = "0xD8A26C", Offset = "0xD8A26C", VA = "0xD8A26C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600020C")]
			[Address(RVA = "0xD8A2B4", Offset = "0xD8A2B4", VA = "0xD8A2B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0xD84BBC", Offset = "0xD84BBC", VA = "0xD84BBC")]
		[DebuggerHidden]
		public <EditchunksFromBuild>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0xD8951C", Offset = "0xD8951C", VA = "0xD8951C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0xD89538", Offset = "0xD89538", VA = "0xD89538", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0xD8A21C", Offset = "0xD8A21C", VA = "0xD8A21C")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0xD8A274", Offset = "0xD8A274", VA = "0xD8A274", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000079")]
	[CompilerGenerated]
	private sealed class <EditchunksFromBuildWand>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Terraformer <>4__this;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.GameObject> <chunkToEdit>5__2;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.GameObject>.Enumerator <>7__wrap2;

		[Token(Token = "0x1700003B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000211")]
			[Address(RVA = "0xD8B0F4", Offset = "0xD8B0F4", VA = "0xD8B0F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000213")]
			[Address(RVA = "0xD8B13C", Offset = "0xD8B13C", VA = "0xD8B13C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0xD84C58", Offset = "0xD84C58", VA = "0xD84C58")]
		[DebuggerHidden]
		public <EditchunksFromBuildWand>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0xD8A2BC", Offset = "0xD8A2BC", VA = "0xD8A2BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0xD8A2D8", Offset = "0xD8A2D8", VA = "0xD8A2D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0xD8B0A4", Offset = "0xD8B0A4", VA = "0xD8B0A4")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0xD8B0FC", Offset = "0xD8B0FC", VA = "0xD8B0FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200007A")]
	[CompilerGenerated]
	private sealed class <EditchunksFromBuildWand3>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Terraformer <>4__this;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.GameObject> <chunkToEdit>5__2;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.GameObject>.Enumerator <>7__wrap2;

		[Token(Token = "0x1700003D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000218")]
			[Address(RVA = "0xD8BF0C", Offset = "0xD8BF0C", VA = "0xD8BF0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600021A")]
			[Address(RVA = "0xD8BF54", Offset = "0xD8BF54", VA = "0xD8BF54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0xD84CF4", Offset = "0xD84CF4", VA = "0xD84CF4")]
		[DebuggerHidden]
		public <EditchunksFromBuildWand3>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0xD8B144", Offset = "0xD8B144", VA = "0xD8B144", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0xD8B160", Offset = "0xD8B160", VA = "0xD8B160", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0xD8BEBC", Offset = "0xD8BEBC", VA = "0xD8BEBC")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0xD8BF14", Offset = "0xD8BF14", VA = "0xD8BF14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ChunkSpawner spawner;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool _left;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool _right;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool _flatten;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool _mine;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool _flattendown;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool _editing;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject sandBlock;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject grassBlock;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject rockBlock;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LineRenderer terraLine;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform terraLineStart;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ChunkSpawner chunkSpawner;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public DamagableChunk damagableChunk;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public RaycastHit hit;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public RaycastHit hitRay;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public RaycastHit hitBuild;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UnityEngine.GameObject mineEffect;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public ArtifactSaveTransform artifacts;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public MasterSaveSystem masterSaveObjects;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public UnityEngine.GameObject[] trees;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public UnityEngine.GameObject[] trees2;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public int randomness;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public UnityEngine.GameObject blackStone;

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xD84928", Offset = "0xD84928", VA = "0xD84928")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xD84974", Offset = "0xD84974", VA = "0xD84974")]
	[IteratorStateMachine(typeof(<Editchunks>d__13))]
	public IEnumerator Editchunks()
	{
		return null;
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xD84A10", Offset = "0xD84A10", VA = "0xD84A10")]
	[IteratorStateMachine(typeof(<Editchunks2>d__19))]
	public IEnumerator Editchunks2()
	{
		return null;
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xD84AAC", Offset = "0xD84AAC", VA = "0xD84AAC")]
	[IteratorStateMachine(typeof(<EditchunksFromHit>d__21))]
	public IEnumerator EditchunksFromHit()
	{
		return null;
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xD84B48", Offset = "0xD84B48", VA = "0xD84B48")]
	[IteratorStateMachine(typeof(<EditchunksFromBuild>d__22))]
	public IEnumerator EditchunksFromBuild()
	{
		return null;
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xD84BE4", Offset = "0xD84BE4", VA = "0xD84BE4")]
	[IteratorStateMachine(typeof(<EditchunksFromBuildWand>d__23))]
	public IEnumerator EditchunksFromBuildWand()
	{
		return null;
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xD84C80", Offset = "0xD84C80", VA = "0xD84C80")]
	[IteratorStateMachine(typeof(<EditchunksFromBuildWand3>d__28))]
	public IEnumerator EditchunksFromBuildWand3()
	{
		return null;
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xD84D1C", Offset = "0xD84D1C", VA = "0xD84D1C")]
	private UnityEngine.Quaternion Random360()
	{
		return default(UnityEngine.Quaternion);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xD84D54", Offset = "0xD84D54", VA = "0xD84D54")]
	private UnityEngine.GameObject SpawnObj(UnityEngine.GameObject g, UnityEngine.Vector3 spawnPosition, [Optional] UnityEngine.GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xD84ED8", Offset = "0xD84ED8", VA = "0xD84ED8")]
	public Terraformer()
	{
	}
}
[Token(Token = "0x200007B")]
public static class TriData
{
	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int3[] VertexPositions;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int2[] EdgeConnections;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly int[] tris;
}
[Token(Token = "0x200007C")]
public class AutoRotate : MonoBehaviour
{
	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float XSpeed;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float YSpeed;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float ZSpeed;

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xD8C1D8", Offset = "0xD8C1D8", VA = "0xD8C1D8")]
	private void Start()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xD8C200", Offset = "0xD8C200", VA = "0xD8C200")]
	private void Update()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xD8C288", Offset = "0xD8C288", VA = "0xD8C288")]
	public AutoRotate()
	{
	}
}
[Token(Token = "0x200007D")]
public class LFC : MonoBehaviour
{
	[Token(Token = "0x200007E")]
	public enum SearchMethod
	{
		[Token(Token = "0x4000352")]
		Normal,
		[Token(Token = "0x4000353")]
		Static
	}

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Camera DaCamera;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ControlTag;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int TotalObjects;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int VisibleObjects;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Vector3 LP;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private UnityEngine.Quaternion LR;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private UnityEngine.Vector3 SP;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool OS;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private UnityEngine.GameObject[] SFCO;

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xD8C290", Offset = "0xD8C290", VA = "0xD8C290")]
	private void Start()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xD8C420", Offset = "0xD8C420", VA = "0xD8C420")]
	private void Check(SearchMethod Mode = SearchMethod.Static)
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xD8C370", Offset = "0xD8C370", VA = "0xD8C370")]
	private void Populate(string Tag = "Chunk")
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xD8C6CC", Offset = "0xD8C6CC", VA = "0xD8C6CC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xD8C6D4", Offset = "0xD8C6D4", VA = "0xD8C6D4")]
	public LFC()
	{
	}
}
[Token(Token = "0x200007F")]
public class ___FpS : MonoBehaviour
{
	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string FpS;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float FPS;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float DeltaTime;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LFC LFCO;

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xD8C6DC", Offset = "0xD8C6DC", VA = "0xD8C6DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xD8C76C", Offset = "0xD8C76C", VA = "0xD8C76C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xD8C7AC", Offset = "0xD8C7AC", VA = "0xD8C7AC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xD8CCE0", Offset = "0xD8CCE0", VA = "0xD8CCE0")]
	public ___FpS()
	{
	}
}
[Token(Token = "0x2000080")]
public class LightSource : MonoBehaviour
{
	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private skyDomeDayNight lightsManager;

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xD8CCE8", Offset = "0xD8CCE8", VA = "0xD8CCE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xD8CE1C", Offset = "0xD8CE1C", VA = "0xD8CE1C")]
	public void ClearLights()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xD8CF2C", Offset = "0xD8CF2C", VA = "0xD8CF2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xD8CFB8", Offset = "0xD8CFB8", VA = "0xD8CFB8")]
	private void Update()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xD8CFBC", Offset = "0xD8CFBC", VA = "0xD8CFBC")]
	public LightSource()
	{
	}
}
[Token(Token = "0x2000081")]
public class LoadManager : MonoBehaviour
{
	[Token(Token = "0x2000082")]
	[CompilerGenerated]
	private sealed class <LoadYourAsyncScene>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time2;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x1700003F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000235")]
			[Address(RVA = "0xD8D460", Offset = "0xD8D460", VA = "0xD8D460", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000040")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000237")]
			[Address(RVA = "0xD8D4A8", Offset = "0xD8D4A8", VA = "0xD8D4A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0xD8D28C", Offset = "0xD8D28C", VA = "0xD8D28C")]
		[DebuggerHidden]
		public <LoadYourAsyncScene>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0xD8D314", Offset = "0xD8D314", VA = "0xD8D314", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0xD8D318", Offset = "0xD8D318", VA = "0xD8D318", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0xD8D468", Offset = "0xD8D468", VA = "0xD8D468", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000083")]
	[CompilerGenerated]
	private sealed class <LoadYourAsyncMenu>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x17000041")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600023B")]
			[Address(RVA = "0xD8D5FC", Offset = "0xD8D5FC", VA = "0xD8D5FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000042")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600023D")]
			[Address(RVA = "0xD8D644", Offset = "0xD8D644", VA = "0xD8D644", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0xD8D2B4", Offset = "0xD8D2B4", VA = "0xD8D2B4")]
		[DebuggerHidden]
		public <LoadYourAsyncMenu>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0xD8D4B0", Offset = "0xD8D4B0", VA = "0xD8D4B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0xD8D4B4", Offset = "0xD8D4B4", VA = "0xD8D4B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0xD8D604", Offset = "0xD8D604", VA = "0xD8D604", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000084")]
	[CompilerGenerated]
	private sealed class <LoadYourAsyncCustomScene>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x17000043")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000241")]
			[Address(RVA = "0xD8D798", Offset = "0xD8D798", VA = "0xD8D798", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000243")]
			[Address(RVA = "0xD8D7E0", Offset = "0xD8D7E0", VA = "0xD8D7E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0xD8D2DC", Offset = "0xD8D2DC", VA = "0xD8D2DC")]
		[DebuggerHidden]
		public <LoadYourAsyncCustomScene>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0xD8D64C", Offset = "0xD8D64C", VA = "0xD8D64C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0xD8D650", Offset = "0xD8D650", VA = "0xD8D650", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0xD8D7A0", Offset = "0xD8D7A0", VA = "0xD8D7A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Time;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Time2;

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xD8CFC4", Offset = "0xD8CFC4", VA = "0xD8CFC4")]
	private void Start()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xD8D1AC", Offset = "0xD8D1AC", VA = "0xD8D1AC")]
	[IteratorStateMachine(typeof(<LoadYourAsyncScene>d__3))]
	private IEnumerator LoadYourAsyncScene(float time2)
	{
		return null;
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xD8D13C", Offset = "0xD8D13C", VA = "0xD8D13C")]
	[IteratorStateMachine(typeof(<LoadYourAsyncMenu>d__4))]
	private IEnumerator LoadYourAsyncMenu(float time)
	{
		return null;
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xD8D21C", Offset = "0xD8D21C", VA = "0xD8D21C")]
	[IteratorStateMachine(typeof(<LoadYourAsyncCustomScene>d__5))]
	private IEnumerator LoadYourAsyncCustomScene(float time)
	{
		return null;
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xD8D304", Offset = "0xD8D304", VA = "0xD8D304")]
	public LoadManager()
	{
	}
}
[Token(Token = "0x2000085")]
public class BakeTexturesAtRuntime : MonoBehaviour
{
	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject target;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float elapsedTime;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_TextureCombiner.CreateAtlasesCoroutineResult result;

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xD8D7E8", Offset = "0xD8D7E8", VA = "0xD8D7E8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xD8DCFC", Offset = "0xD8DCFC", VA = "0xD8DCFC")]
	private void OnBuiltAtlasesSuccess()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xD8DEF0", Offset = "0xD8DEF0", VA = "0xD8DEF0")]
	public BakeTexturesAtRuntime()
	{
	}
}
[Token(Token = "0x2000086")]
public class MB_BatchPrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x6000247")]
	[Address(RVA = "0xD8DF64", Offset = "0xD8DF64", VA = "0xD8DF64")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xD8DFFC", Offset = "0xD8DFFC", VA = "0xD8DFFC")]
	public MB_BatchPrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000087")]
public class MB_SwapShirts : MonoBehaviour
{
	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer[] clothingAndBodyPartsBareTorso;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer[] clothingAndBodyPartsBareTorsoDamagedArm;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] clothingAndBodyPartsHoodie;

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xD8E004", Offset = "0xD8E004", VA = "0xD8E004")]
	private void Start()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xD8E158", Offset = "0xD8E158", VA = "0xD8E158")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xD8E2F0", Offset = "0xD8E2F0", VA = "0xD8E2F0")]
	private void ChangeOutfit(Renderer[] outfit)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xD8E928", Offset = "0xD8E928", VA = "0xD8E928")]
	public MB_SwapShirts()
	{
	}
}
[Token(Token = "0x2000088")]
public class MB_PrepareObjectsForDynamicBatchingDescription : MonoBehaviour
{
	[Token(Token = "0x600024D")]
	[Address(RVA = "0xD8E930", Offset = "0xD8E930", VA = "0xD8E930")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xD8E9C8", Offset = "0xD8E9C8", VA = "0xD8E9C8")]
	public MB_PrepareObjectsForDynamicBatchingDescription()
	{
	}
}
[Token(Token = "0x2000089")]
public class MB_DynamicAddDeleteExample : MonoBehaviour
{
	[Token(Token = "0x200008A")]
	[CompilerGenerated]
	private sealed class <largeNumber>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MB_DynamicAddDeleteExample <>4__this;

		[Token(Token = "0x17000045")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000257")]
			[Address(RVA = "0xD8F1E8", Offset = "0xD8F1E8", VA = "0xD8F1E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000259")]
			[Address(RVA = "0xD8F230", Offset = "0xD8F230", VA = "0xD8F230", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0xD8EF2C", Offset = "0xD8EF2C", VA = "0xD8EF2C")]
		[DebuggerHidden]
		public <largeNumber>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0xD8F074", Offset = "0xD8F074", VA = "0xD8F074", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0xD8F078", Offset = "0xD8F078", VA = "0xD8F078", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0xD8F1F0", Offset = "0xD8F1F0", VA = "0xD8F1F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject prefab;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<UnityEngine.GameObject> objsInCombined;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MB3_MultiMeshBaker mbd;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.GameObject[] objs;

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xD8E9D0", Offset = "0xD8E9D0", VA = "0xD8E9D0")]
	private float GaussianValue()
	{
		return default(float);
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xD8EA54", Offset = "0xD8EA54", VA = "0xD8EA54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xD8EEB8", Offset = "0xD8EEB8", VA = "0xD8EEB8")]
	[IteratorStateMachine(typeof(<largeNumber>d__6))]
	private IEnumerator largeNumber()
	{
		return null;
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xD8EF54", Offset = "0xD8EF54", VA = "0xD8EF54")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xD8EFEC", Offset = "0xD8EFEC", VA = "0xD8EFEC")]
	public MB_DynamicAddDeleteExample()
	{
	}
}
[Token(Token = "0x200008B")]
public class MB_Example : MonoBehaviour
{
	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MB3_MeshBaker meshbaker;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject[] objsToCombine;

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xD8F238", Offset = "0xD8F238", VA = "0xD8F238")]
	private void Start()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xD8F288", Offset = "0xD8F288", VA = "0xD8F288")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xD8F308", Offset = "0xD8F308", VA = "0xD8F308")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xD8F3A0", Offset = "0xD8F3A0", VA = "0xD8F3A0")]
	public MB_Example()
	{
	}
}
[Token(Token = "0x200008C")]
public class MB_ExampleMover : MonoBehaviour
{
	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int axis;

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xD8F3A8", Offset = "0xD8F3A8", VA = "0xD8F3A8")]
	private void Update()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xD8F4D8", Offset = "0xD8F4D8", VA = "0xD8F4D8")]
	public MB_ExampleMover()
	{
	}
}
[Token(Token = "0x200008D")]
public class MB_ExampleSkinnedMeshDescription : MonoBehaviour
{
	[Token(Token = "0x6000260")]
	[Address(RVA = "0xD8F4E0", Offset = "0xD8F4E0", VA = "0xD8F4E0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xD8F578", Offset = "0xD8F578", VA = "0xD8F578")]
	public MB_ExampleSkinnedMeshDescription()
	{
	}
}
[Token(Token = "0x200008E")]
public class MB_SkinnedMeshSceneController : MonoBehaviour
{
	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject swordPrefab;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject hatPrefab;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject glassesPrefab;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject workerPrefab;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject targetCharacter;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MB3_MeshBaker skinnedMeshBaker;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.GameObject swordInstance;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.GameObject glassesInstance;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.GameObject hatInstance;

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xD8F580", Offset = "0xD8F580", VA = "0xD8F580")]
	private void Start()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xD8F774", Offset = "0xD8F774", VA = "0xD8F774")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xD904E0", Offset = "0xD904E0", VA = "0xD904E0")]
	public Transform SearchHierarchyForBone(Transform current, string name)
	{
		return null;
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xD905EC", Offset = "0xD905EC", VA = "0xD905EC")]
	public MB_SkinnedMeshSceneController()
	{
	}
}
[Token(Token = "0x200008F")]
public class MB_SwitchBakedObjectsTexture : MonoBehaviour
{
	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer targetRenderer;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MB3_MeshBaker meshBaker;

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xD905F4", Offset = "0xD905F4", VA = "0xD905F4")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xD9068C", Offset = "0xD9068C", VA = "0xD9068C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xD9072C", Offset = "0xD9072C", VA = "0xD9072C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xD909C8", Offset = "0xD909C8", VA = "0xD909C8")]
	public MB_SwitchBakedObjectsTexture()
	{
	}
}
[Token(Token = "0x2000090")]
public class OvrAvatarTestDriver : OvrAvatarDriver
{
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private UnityEngine.Vector3 headPos;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private UnityEngine.Quaternion headRot;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xD909D0", Offset = "0xD909D0", VA = "0xD909D0")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xD90B10", Offset = "0xD90B10", VA = "0xD90B10")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xD90E40", Offset = "0xD90E40", VA = "0xD90E40")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xD90FD8", Offset = "0xD90FD8", VA = "0xD90FD8", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xD91004", Offset = "0xD91004", VA = "0xD91004")]
	public OvrAvatarTestDriver()
	{
	}
}
[Token(Token = "0x2000091")]
public class PoseEditHelper : MonoBehaviour
{
	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform poseRoot;

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xD9106C", Offset = "0xD9106C", VA = "0xD9106C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xD910E8", Offset = "0xD910E8", VA = "0xD910E8")]
	private void DrawJoints(Transform joint)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xD91258", Offset = "0xD91258", VA = "0xD91258")]
	public PoseEditHelper()
	{
	}
}
[Token(Token = "0x2000092")]
public class GazeTargetSpawner : MonoBehaviour
{
	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject GazeTargetPrefab;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfDummyTargets;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RadiusMultiplier;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isVisible;

	[Token(Token = "0x17000047")]
	public bool IsVisible
	{
		[Token(Token = "0x6000272")]
		[Address(RVA = "0xD91260", Offset = "0xD91260", VA = "0xD91260")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000273")]
		[Address(RVA = "0xD91268", Offset = "0xD91268", VA = "0xD91268")]
		set
		{
		}
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xD9138C", Offset = "0xD9138C", VA = "0xD9138C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xD9157C", Offset = "0xD9157C", VA = "0xD9157C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xD91584", Offset = "0xD91584", VA = "0xD91584")]
	public GazeTargetSpawner()
	{
	}
}
[Token(Token = "0x2000093")]
public class RemoteLoopbackManager : MonoBehaviour
{
	[Token(Token = "0x2000094")]
	private class PacketLatencyPair
	{
		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] PacketData;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FakeLatency;

		[Token(Token = "0x600027D")]
		[Address(RVA = "0xD9219C", Offset = "0xD9219C", VA = "0xD9219C")]
		public PacketLatencyPair()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000095")]
	public class SimulatedLatencySettings
	{
		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 0.5f)]
		public float FakeLatencyMax;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 0.5f)]
		public float FakeLatencyMin;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float LatencyWeight;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 10f)]
		public int MaxSamples;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float AverageWindow;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float LatencySum;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LinkedList<float> LatencyValues;

		[Token(Token = "0x600027E")]
		[Address(RVA = "0xD921A4", Offset = "0xD921A4", VA = "0xD921A4")]
		public float NextValue()
		{
			return default(float);
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0xD92398", Offset = "0xD92398", VA = "0xD92398")]
		public SimulatedLatencySettings()
		{
		}
	}

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatar LocalAvatar;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar LoopbackAvatar;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimulatedLatencySettings LatencySettings;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int PacketSequence;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LinkedList<PacketLatencyPair> packetQueue;

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xD91598", Offset = "0xD91598", VA = "0xD91598")]
	private void Start()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xD916F0", Offset = "0xD916F0", VA = "0xD916F0")]
	private void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xD91AEC", Offset = "0xD91AEC", VA = "0xD91AEC")]
	private void Update()
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xD91A40", Offset = "0xD91A40", VA = "0xD91A40")]
	private void SendPacketData(byte[] data)
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xD91E80", Offset = "0xD91E80", VA = "0xD91E80")]
	private void ReceivePacketData(byte[] data)
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xD922D8", Offset = "0xD922D8", VA = "0xD922D8")]
	public RemoteLoopbackManager()
	{
	}
}
[Token(Token = "0x2000096")]
public class P2PManager
{
	[Token(Token = "0x2000097")]
	private enum MessageType : byte
	{
		[Token(Token = "0x400039B")]
		Update = 1
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xD92438", Offset = "0xD92438", VA = "0xD92438")]
	public P2PManager()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xD92504", Offset = "0xD92504", VA = "0xD92504")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xD92744", Offset = "0xD92744", VA = "0xD92744")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xD9288C", Offset = "0xD9288C", VA = "0xD9288C")]
	private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xD929DC", Offset = "0xD929DC", VA = "0xD929DC")]
	private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xD92BC8", Offset = "0xD92BC8", VA = "0xD92BC8")]
	public void SendAvatarUpdate(ulong userID, Transform rootTransform, uint sequence, byte[] avatarPacket)
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xD92F80", Offset = "0xD92F80", VA = "0xD92F80")]
	public void GetRemotePackets()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xD93208", Offset = "0xD93208", VA = "0xD93208")]
	public void processAvatarPacket(RemotePlayer remote, ref byte[] packet, ref int offset)
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xD92D8C", Offset = "0xD92D8C", VA = "0xD92D8C")]
	private void PackByte(byte b, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xD93154", Offset = "0xD93154", VA = "0xD93154")]
	private byte ReadByte(byte[] buf, ref int offset)
	{
		return default(byte);
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xD92E58", Offset = "0xD92E58", VA = "0xD92E58")]
	private void PackFloat(float f, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xD93430", Offset = "0xD93430", VA = "0xD93430")]
	private float ReadFloat(byte[] buf, ref int offset)
	{
		return default(float);
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xD92DC8", Offset = "0xD92DC8", VA = "0xD92DC8")]
	private void PackULong(ulong u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xD9318C", Offset = "0xD9318C", VA = "0xD9318C")]
	private ulong ReadULong(byte[] buf, ref int offset)
	{
		return default(ulong);
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xD92EF0", Offset = "0xD92EF0", VA = "0xD92EF0")]
	private void PackUInt32(uint u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xD934AC", Offset = "0xD934AC", VA = "0xD934AC")]
	private uint ReadUInt32(byte[] buf, ref int offset)
	{
		return default(uint);
	}
}
[Token(Token = "0x2000098")]
public class PlayerController : SocialPlatformManager
{
	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Camera spyCamera;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private UnityEngine.GameObject cameraRig;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool showUI;

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xD93528", Offset = "0xD93528", VA = "0xD93528", Slot = "5")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xD93914", Offset = "0xD93914", VA = "0xD93914", Slot = "6")]
	public override void Start()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xD93938", Offset = "0xD93938", VA = "0xD93938", Slot = "4")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xD93CE8", Offset = "0xD93CE8", VA = "0xD93CE8")]
	private void checkInput()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xD93E48", Offset = "0xD93E48", VA = "0xD93E48")]
	private void ToggleCamera()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xD93EC4", Offset = "0xD93EC4", VA = "0xD93EC4")]
	private void ToggleUI()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xD93F0C", Offset = "0xD93F0C", VA = "0xD93F0C")]
	public PlayerController()
	{
	}
}
[Token(Token = "0x2000099")]
public class RemotePlayer
{
	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong remoteUserID;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool stillInRoom;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PeerConnectionState p2pConnectionState;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PeerConnectionState voipConnectionState;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar RemoteAvatar;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Vector3 receivedRootPosition;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UnityEngine.Vector3 receivedRootPositionPrior;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.Quaternion receivedRootRotation;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.Quaternion receivedRootRotationPrior;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoipAudioSourceHiLevel voipSource;

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xD93FF0", Offset = "0xD93FF0", VA = "0xD93FF0")]
	public RemotePlayer()
	{
	}
}
[Token(Token = "0x200009A")]
public class RoomManager
{
	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong roomID;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong invitedRoomID;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool amIServer;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool startupDone;

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xD93FF8", Offset = "0xD93FF8", VA = "0xD93FF8")]
	public RoomManager()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xD940DC", Offset = "0xD940DC", VA = "0xD940DC")]
	private void AcceptingInviteCallback(Message<string> msg)
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xD942DC", Offset = "0xD942DC", VA = "0xD942DC")]
	public bool CheckForInvite()
	{
		return default(bool);
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xD943F4", Offset = "0xD943F4", VA = "0xD943F4")]
	public void CreateRoom()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xD944AC", Offset = "0xD944AC", VA = "0xD944AC")]
	private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xD94898", Offset = "0xD94898", VA = "0xD94898")]
	private void OnLaunchInviteWorkflowComplete(Message msg)
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xD94308", Offset = "0xD94308", VA = "0xD94308")]
	public void JoinExistingRoom(ulong roomID)
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xD94910", Offset = "0xD94910", VA = "0xD94910")]
	private void JoinRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xD950A0", Offset = "0xD950A0", VA = "0xD950A0")]
	private void RoomUpdateCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xD953EC", Offset = "0xD953EC", VA = "0xD953EC")]
	public void LeaveCurrentRoom()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xD94C50", Offset = "0xD94C50", VA = "0xD94C50")]
	private void ProcessRoomData(Message<Room> msg)
	{
	}
}
[Token(Token = "0x200009B")]
public class SocialPlatformManager : MonoBehaviour
{
	[Token(Token = "0x200009C")]
	public enum State
	{
		[Token(Token = "0x40003D3")]
		INITIALIZING,
		[Token(Token = "0x40003D4")]
		CHECKING_LAUNCH_STATE,
		[Token(Token = "0x40003D5")]
		CREATING_A_ROOM,
		[Token(Token = "0x40003D6")]
		WAITING_IN_A_ROOM,
		[Token(Token = "0x40003D7")]
		JOINING_A_ROOM,
		[Token(Token = "0x40003D8")]
		CONNECTED_IN_A_ROOM,
		[Token(Token = "0x40003D9")]
		LEAVING_A_ROOM,
		[Token(Token = "0x40003DA")]
		SHUTDOWN
	}

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly UnityEngine.Vector3 START_ROTATION_ONE;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly UnityEngine.Vector3 START_POSITION_ONE;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly UnityEngine.Vector3 START_ROTATION_TWO;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly UnityEngine.Vector3 START_POSITION_TWO;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly UnityEngine.Vector3 START_ROTATION_THREE;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly UnityEngine.Vector3 START_POSITION_THREE;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly UnityEngine.Vector3 START_ROTATION_FOUR;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static readonly UnityEngine.Vector3 START_POSITION_FOUR;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly UnityEngine.Color BLACK;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly UnityEngine.Color WHITE;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly UnityEngine.Color CYAN;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static readonly UnityEngine.Color BLUE;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static readonly UnityEngine.Color GREEN;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float voiceCurrent;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private uint packetSequence;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar localAvatarPrefab;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar remoteAvatarPrefab;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject helpPanel;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MeshRenderer helpMesh;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material riftMaterial;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material gearMaterial;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected OvrAvatar localAvatar;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected UnityEngine.GameObject localTrackingSpace;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected UnityEngine.GameObject localPlayerHead;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<ulong, RemotePlayer> remoteUsers;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.GameObject roomSphere;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected MeshRenderer sphereMesh;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.GameObject roomFloor;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MeshRenderer floorMesh;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected State currentState;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected static SocialPlatformManager s_instance;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected RoomManager roomManager;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected P2PManager p2pManager;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected VoipManager voipManager;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ulong myID;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected string myOculusID;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly float VOIP_SCALE;

	[Token(Token = "0x17000048")]
	public static State CurrentState
	{
		[Token(Token = "0x60002AF")]
		[Address(RVA = "0xD971AC", Offset = "0xD971AC", VA = "0xD971AC")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x17000049")]
	public static ulong MyID
	{
		[Token(Token = "0x60002B0")]
		[Address(RVA = "0xD925CC", Offset = "0xD925CC", VA = "0xD925CC")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x1700004A")]
	public static string MyOculusID
	{
		[Token(Token = "0x60002B1")]
		[Address(RVA = "0xD97210", Offset = "0xD97210", VA = "0xD97210")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xD93950", Offset = "0xD93950", VA = "0xD93950", Slot = "4")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xD9355C", Offset = "0xD9355C", VA = "0xD9355C", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xD95E94", Offset = "0xD95E94", VA = "0xD95E94")]
	private void InitCallback(Message<PlatformInitialize> msg)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xD93934", Offset = "0xD93934", VA = "0xD93934", Slot = "6")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xD9601C", Offset = "0xD9601C", VA = "0xD9601C")]
	private void IsEntitledCallback(Message msg)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xD96114", Offset = "0xD96114", VA = "0xD96114")]
	private void GetLoggedInUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xD968FC", Offset = "0xD968FC", VA = "0xD968FC")]
	private void GetLoggedInUserFriendsAndRoomsCallback(Message<UserAndRoomList> msg)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xD96D14", Offset = "0xD96D14", VA = "0xD96D14")]
	public void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xD96F38", Offset = "0xD96F38", VA = "0xD96F38")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xD97144", Offset = "0xD97144", VA = "0xD97144")]
	public void AddUser(ulong userID, ref RemotePlayer remoteUser)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xD95D20", Offset = "0xD95D20", VA = "0xD95D20")]
	public void LogOutputLine(string line)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xD94230", Offset = "0xD94230", VA = "0xD94230")]
	public static void TerminateWithError(Message msg)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xD94598", Offset = "0xD94598", VA = "0xD94598")]
	public static void TransitionToState(State newState)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xD97314", Offset = "0xD97314", VA = "0xD97314")]
	private static void SetSphereColorForState()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xD947D8", Offset = "0xD947D8", VA = "0xD947D8")]
	public static void SetFloorColorForState(bool host)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xD95454", Offset = "0xD95454", VA = "0xD95454")]
	public static void MarkAllRemoteUsersAsNotInRoom()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xD9584C", Offset = "0xD9584C", VA = "0xD9584C")]
	public static void MarkRemoteUserInRoom(ulong userID)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xD9592C", Offset = "0xD9592C", VA = "0xD9592C")]
	public static void ForgetRemoteUsersNotInRoom()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xD92690", Offset = "0xD92690", VA = "0xD92690")]
	public static void LogOutput(string line)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xD955D8", Offset = "0xD955D8", VA = "0xD955D8")]
	public static bool IsUserInRoom(ulong userID)
	{
		return default(bool);
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xD95660", Offset = "0xD95660", VA = "0xD95660")]
	public static void AddRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xD97498", Offset = "0xD97498", VA = "0xD97498")]
	public static void RemoveRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xD9775C", Offset = "0xD9775C", VA = "0xD9775C")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xD95CA8", Offset = "0xD95CA8", VA = "0xD95CA8")]
	[MonoPInvokeCallback(typeof(CAPI.FilterCallback))]
	public static void MicFilter(short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels)
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xD927B4", Offset = "0xD927B4", VA = "0xD927B4")]
	public static RemotePlayer GetRemoteUser(ulong userID)
	{
		return null;
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xD93F68", Offset = "0xD93F68", VA = "0xD93F68")]
	public SocialPlatformManager()
	{
	}
}
[Token(Token = "0x200009D")]
public class VoipManager
{
	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xD95DC8", Offset = "0xD95DC8", VA = "0xD95DC8")]
	public VoipManager()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xD97694", Offset = "0xD97694", VA = "0xD97694")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xD970D4", Offset = "0xD970D4", VA = "0xD970D4")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xD979D4", Offset = "0xD979D4", VA = "0xD979D4")]
	private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xD97B24", Offset = "0xD97B24", VA = "0xD97B24")]
	private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}
}
[Token(Token = "0x200009E")]
public class GazeTarget : MonoBehaviour
{
	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xD98D10", Offset = "0xD98D10", VA = "0xD98D10")]
	static GazeTarget()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xD98D94", Offset = "0xD98D94", VA = "0xD98D94")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xD98ED8", Offset = "0xD98ED8", VA = "0xD98ED8")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xD98F2C", Offset = "0xD98F2C", VA = "0xD98F2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xD98DC4", Offset = "0xD98DC4", VA = "0xD98DC4")]
	private void UpdateGazeTarget()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xD98FDC", Offset = "0xD98FDC", VA = "0xD98FDC")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, UnityEngine.Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xD98FF4", Offset = "0xD98FF4", VA = "0xD98FF4")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x200009F")]
public class AvatarLayer
{
	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xD98FFC", Offset = "0xD98FFC", VA = "0xD98FFC")]
	public AvatarLayer()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A0")]
public class PacketRecordSettings
{
	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xD99004", Offset = "0xD99004", VA = "0xD99004")]
	public PacketRecordSettings()
	{
	}
}
[Token(Token = "0x20000A1")]
public class OvrAvatar : MonoBehaviour
{
	[Token(Token = "0x20000A2")]
	public class PacketEventArgs : EventArgs
	{
		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Token(Token = "0x6000303")]
		[Address(RVA = "0xD9DC00", Offset = "0xD9DC00", VA = "0xD9DC00")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	[Token(Token = "0x20000A3")]
	public enum HandType
	{
		[Token(Token = "0x400043C")]
		Right,
		[Token(Token = "0x400043D")]
		Left,
		[Token(Token = "0x400043E")]
		Max
	}

	[Token(Token = "0x20000A4")]
	public enum HandJoint
	{
		[Token(Token = "0x4000440")]
		HandBase,
		[Token(Token = "0x4000441")]
		IndexBase,
		[Token(Token = "0x4000442")]
		IndexTip,
		[Token(Token = "0x4000443")]
		ThumbBase,
		[Token(Token = "0x4000444")]
		ThumbTip,
		[Token(Token = "0x4000445")]
		Max
	}

	[Token(Token = "0x20000A5")]
	[CompilerGenerated]
	private sealed class <WaitForMouthAudioSource>d__137 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		[Token(Token = "0x1700004B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000307")]
			[Address(RVA = "0xDA00AC", Offset = "0xDA00AC", VA = "0xDA00AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000309")]
			[Address(RVA = "0xDA00F4", Offset = "0xDA00F4", VA = "0xDA00F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0xD9FAA0", Offset = "0xD9FAA0", VA = "0xD9FAA0")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__137(int <>1__state)
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0xD9FF04", Offset = "0xD9FF04", VA = "0xD9FF04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0xD9FF08", Offset = "0xD9FF08", VA = "0xD9FF08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0xDA00B4", Offset = "0xDA00B4", VA = "0xDA00B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Avatar")]
	public IntPtr sdkAvatar;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string oculusUserID;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Capabilities")]
	public bool EnableBody;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool EnableHands;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool EnableBase;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool EnableExpressive;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Header("Network")]
	public bool RecordPackets;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseSDKPackets;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PacketRecordSettings PacketSettings;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Visibility")]
	public bool StartWithControllers;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AvatarLayer FirstPersonLayer;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarLayer ThirdPersonLayer;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShowFirstPerson;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ShowThirdPerson;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal ovrAvatarCapabilities Capabilities;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Performance")]
	[SerializeField]
	[UnityEngine.Tooltip("LOD mesh complexity and texture resolution. Highest LOD recommended on PC and simple mobile apps. Medium LOD recommended on mobile devices or for background characters on PC. Lowest LOD recommended for background characters on mobile.")]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[UnityEngine.Tooltip("Enable to use combined meshes to reduce draw calls. Currently only available on mobile devices. Will be forced to false on PC.")]
	private bool CombineMeshes;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[UnityEngine.Tooltip("Enable to use transparent queue, disable to use geometry queue. Requires restart to take effect.")]
	public bool UseTransparentRenderQueue;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Shaders")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader EyeLens;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader ControllerShader;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Other")]
	public bool CanOwnMicrophone;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[UnityEngine.Tooltip("Enable laughter detection and animation as part of OVRLipSync.")]
	public bool EnableLaughter;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public UnityEngine.GameObject MouthAnchor;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform LeftHandCustomPose;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform RightHandCustomPose;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<ulong> assetLoadingIds;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool assetsFinishedLoading;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OvrAvatarMaterialManager materialManager;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool waitingForCombinedMesh;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool doneExpressiveGlobalInit;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private UnityEngine.Vector4 clothingAlphaOffset;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ulong clothingAlphaTexture;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private OVRLipSyncMicInput micInput;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private OVRLipSyncContext lipsyncContext;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private OVRLipSync.Frame currentFrame;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float[] visemes;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private AudioSource audioSource;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private ONSPAudioSource spatializedSource;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<float[]> voiceUpdates;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform cachedLeftHandCustomPose;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform[] cachedCustomLeftHandJoints;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Transform cachedRightHandCustomPose;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform[] cachedCustomRightHandJoints;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool showLeftController;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool showRightController;

	[Token(Token = "0x400041C")]
	private const bool USE_MOBILE_TEXTURE_FORMAT = true;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly UnityEngine.Vector3 MOUTH_HEAD_OFFSET;

	[Token(Token = "0x400041E")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Token(Token = "0x400041F")]
	private const int VISEME_COUNT = 16;

	[Token(Token = "0x4000420")]
	private const float ACTION_UNIT_ONSET_SPEED = 30f;

	[Token(Token = "0x4000421")]
	private const float ACTION_UNIT_FALLOFF_SPEED = 20f;

	[Token(Token = "0x4000422")]
	private const float VISEME_LEVEL_MULTIPLIER = 1.5f;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal ulong oculusUserIDInternal;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal OvrAvatarBase Base;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal OvrAvatarTouchController ControllerLeft;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal OvrAvatarTouchController ControllerRight;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	internal OvrAvatarBody Body;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	internal OvrAvatarHand HandLeft;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	internal OvrAvatarHand HandRight;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string[,] HandJoints;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static UnityEngine.Vector3 MOUTH_POSITION_OFFSET;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string VOICE_PROPERTY;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_POSITION_PROPERTY;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static string MOUTH_SCALE_PROPERTY;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float MOUTH_SCALE_GLOBAL;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float MOUTH_MAX_GLOBAL;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static string NECK_JONT;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public float VoiceAmplitude;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public bool EnableMouthVertexAnimation;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static ovrAvatarLights ovrLights;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xD99018", Offset = "0xD99018", VA = "0xD99018")]
	static OvrAvatar()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xD994AC", Offset = "0xD994AC", VA = "0xD994AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xD99544", Offset = "0xD99544", VA = "0xD99544")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xD995A0", Offset = "0xD995A0", VA = "0xD995A0")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xD996B4", Offset = "0xD996B4", VA = "0xD996B4")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(UnityEngine.GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xD99908", Offset = "0xD99908", VA = "0xD99908")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(UnityEngine.GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xD99B24", Offset = "0xD99B24", VA = "0xD99B24")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, UnityEngine.GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel)
	{
		return null;
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xD9A12C", Offset = "0xD9A12C", VA = "0xD9A12C")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xD9A1F4", Offset = "0xD9A1F4", VA = "0xD9A1F4")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xD9A268", Offset = "0xD9A268", VA = "0xD9A268")]
	internal static void ConvertTransform(float[] transform, ref ovrAvatarTransform target)
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xD9A320", Offset = "0xD9A320", VA = "0xD9A320")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xD9A3A8", Offset = "0xD9A3A8", VA = "0xD9A3A8")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(UnityEngine.Vector3 position, UnityEngine.Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xD9A44C", Offset = "0xD9A44C", VA = "0xD9A44C")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, UnityEngine.Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xD9A464", Offset = "0xD9A464", VA = "0xD9A464")]
	private void BuildRenderComponents()
	{
	}

	[Token(Token = "0x60002DD")]
	private void AddAvatarComponent<T>(ref T root, ovrAvatarComponent nativeComponent) where T : OvrAvatarComponent
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xD9A870", Offset = "0xD9A870", VA = "0xD9A870")]
	private void UpdateCustomPoses()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xD9AB9C", Offset = "0xD9AB9C", VA = "0xD9AB9C")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xD9AD74", Offset = "0xD9AD74", VA = "0xD9AD74")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xD9AFB0", Offset = "0xD9AFB0", VA = "0xD9AFB0")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xD9B0E4", Offset = "0xD9B0E4", VA = "0xD9B0E4")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xD9BDB0", Offset = "0xD9BDB0", VA = "0xD9BDB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xD9C33C", Offset = "0xD9C33C", VA = "0xD9C33C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xD9CE58", Offset = "0xD9CE58", VA = "0xD9CE58")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xD9CE9C", Offset = "0xD9CE9C", VA = "0xD9CE9C")]
	public void ShowControllers(bool show)
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xD9B368", Offset = "0xD9B368", VA = "0xD9B368")]
	public void ShowLeftController(bool show)
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xD9B410", Offset = "0xD9B410", VA = "0xD9B410")]
	public void ShowRightController(bool show)
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xD9CEC8", Offset = "0xD9CEC8", VA = "0xD9CEC8")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xD9C71C", Offset = "0xD9C71C", VA = "0xD9C71C")]
	private void RecordFrame()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xD9D150", Offset = "0xD9D150", VA = "0xD9D150")]
	private void RecordUnityFrame()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xD9CF78", Offset = "0xD9CF78", VA = "0xD9CF78")]
	private void RecordSDKFrame()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xD9DDC8", Offset = "0xD9DDC8", VA = "0xD9DDC8")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xD9E24C", Offset = "0xD9E24C", VA = "0xD9E24C")]
	public void RefreshBodyParts()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xD9E664", Offset = "0xD9E664", VA = "0xD9E664")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xD9E79C", Offset = "0xD9E79C", VA = "0xD9E79C")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xD9E968", Offset = "0xD9E968", VA = "0xD9E968")]
	public void GetPointingDirection(HandType hand, ref UnityEngine.Vector3 forward, ref UnityEngine.Vector3 up)
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xD9C930", Offset = "0xD9C930", VA = "0xD9C930")]
	private void UpdateVoiceBehavior()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xD9EA30", Offset = "0xD9EA30", VA = "0xD9EA30")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xD9C72C", Offset = "0xD9C72C", VA = "0xD9C72C")]
	private void InitPostLoad()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xD9EB0C", Offset = "0xD9EB0C", VA = "0xD9EB0C")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xD9F13C", Offset = "0xD9F13C", VA = "0xD9F13C")]
	private static void InitializeLights()
	{
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xD9F5C4", Offset = "0xD9F5C4", VA = "0xD9F5C4")]
	private static ovrAvatarLight CreateLightDirectional(uint id, UnityEngine.Vector3 direction, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xD9F5EC", Offset = "0xD9F5EC", VA = "0xD9F5EC")]
	private static ovrAvatarLight CreateLightPoint(uint id, UnityEngine.Vector3 position, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xD9F614", Offset = "0xD9F614", VA = "0xD9F614")]
	private static ovrAvatarLight CreateLightSpot(uint id, UnityEngine.Vector3 position, UnityEngine.Vector3 direction, float spotAngleDeg, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xD9CD00", Offset = "0xD9CD00", VA = "0xD9CD00")]
	private void UpdateExpressive()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xD9EBC8", Offset = "0xD9EBC8", VA = "0xD9EBC8")]
	private void ConfigureHelpers()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xD9FA2C", Offset = "0xD9FA2C", VA = "0xD9FA2C")]
	[IteratorStateMachine(typeof(<WaitForMouthAudioSource>d__137))]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xD9FAC8", Offset = "0xD9FAC8", VA = "0xD9FAC8")]
	public void DestroyHelperObjects()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xD9F8C0", Offset = "0xD9F8C0", VA = "0xD9F8C0")]
	public UnityEngine.GameObject CreateHelperObject(Transform parent, UnityEngine.Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xD9FB6C", Offset = "0xD9FB6C", VA = "0xD9FB6C")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xD9FC34", Offset = "0xD9FC34", VA = "0xD9FC34")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xD9F650", Offset = "0xD9F650", VA = "0xD9F650")]
	private void UpdateFacewave()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xD9FCFC", Offset = "0xD9FCFC", VA = "0xD9FCFC")]
	public OvrAvatar()
	{
	}
}
[Token(Token = "0x20000A6")]
public class OvrAvatarAsset
{
	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xDA00FC", Offset = "0xDA00FC", VA = "0xDA00FC")]
	public OvrAvatarAsset()
	{
	}
}
[Token(Token = "0x20000A7")]
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xDA0104", Offset = "0xDA0104", VA = "0xDA0104")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xDA1298", Offset = "0xDA1298", VA = "0xDA1298")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xDA0EE4", Offset = "0xDA0EE4", VA = "0xDA0EE4")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xDA0C68", Offset = "0xDA0C68", VA = "0xDA0C68")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xDA0D48", Offset = "0xDA0D48", VA = "0xDA0D48")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xDA14E4", Offset = "0xDA14E4", VA = "0xDA14E4")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(UnityEngine.GameObject target)
	{
		return null;
	}
}
[Token(Token = "0x20000A8")]
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Token(Token = "0x400044E")]
	private const int ASTCHeaderSize = 16;

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xDA1A74", Offset = "0xDA1A74", VA = "0xDA1A74")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
[Token(Token = "0x20000A9")]
public class OvrAvatarBase : OvrAvatarComponent
{
	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ovrAvatarBaseComponent component;

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xDA1CBC", Offset = "0xDA1CBC", VA = "0xDA1CBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xDA20D4", Offset = "0xDA20D4", VA = "0xDA20D4")]
	public OvrAvatarBase()
	{
	}
}
[Token(Token = "0x20000AA")]
public class OvrAvatarBody : OvrAvatarComponent
{
	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ovrAvatarBodyComponent component;

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xD9E518", Offset = "0xD9E518", VA = "0xD9E518")]
	public ovrAvatarComponent? GetNativeAvatarComponent()
	{
		return null;
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xDA2200", Offset = "0xDA2200", VA = "0xDA2200")]
	private void Update()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xDA2314", Offset = "0xDA2314", VA = "0xDA2314")]
	public OvrAvatarBody()
	{
	}
}
[Token(Token = "0x20000AB")]
public class OvrAvatarComponent : MonoBehaviour
{
	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected OvrAvatar owner;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ovrAvatarComponent nativeAvatarComponent;

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xDA2368", Offset = "0xDA2368", VA = "0xDA2368")]
	public void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xDA1DD0", Offset = "0xDA1DD0", VA = "0xDA1DD0")]
	public void UpdateAvatar(IntPtr nativeComponent)
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xDA2930", Offset = "0xDA2930", VA = "0xDA2930")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xDA2984", Offset = "0xDA2984", VA = "0xDA2984")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xDA308C", Offset = "0xDA308C", VA = "0xDA308C")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xDA2128", Offset = "0xDA2128", VA = "0xDA2128")]
	public OvrAvatarComponent()
	{
	}
}
[Token(Token = "0x20000AC")]
public abstract class OvrAvatarDriver : MonoBehaviour
{
	[Token(Token = "0x20000AD")]
	public enum PacketMode
	{
		[Token(Token = "0x4000462")]
		SDK,
		[Token(Token = "0x4000463")]
		Unity
	}

	[Token(Token = "0x20000AE")]
	public struct ControllerPose
	{
		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Vector2 joystickPosition;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Token(Token = "0x6000324")]
		[Address(RVA = "0xDA4DAC", Offset = "0xDA4DAC", VA = "0xDA4DAC")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	[Token(Token = "0x20000AF")]
	public struct PoseFrame
	{
		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Vector3 headPosition;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public UnityEngine.Quaternion headRotation;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 handLeftPosition;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Quaternion handLeftRotation;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector3 handRightPosition;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public UnityEngine.Quaternion handRightRotation;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Token(Token = "0x6000325")]
		[Address(RVA = "0xD9D908", Offset = "0xD9D908", VA = "0xD9D908")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private ovrAvatarControllerType ControllerType;

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xDA4D08", Offset = "0xDA4D08", VA = "0xDA4D08")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	[Token(Token = "0x600031F")]
	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xDA4D18", Offset = "0xDA4D18", VA = "0xDA4D18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xD9B4B8", Offset = "0xD9B4B8", VA = "0xD9B4B8")]
	public void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xDA4D94", Offset = "0xDA4D94", VA = "0xDA4D94")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xDA4D9C", Offset = "0xDA4D9C", VA = "0xDA4D9C")]
	protected OvrAvatarDriver()
	{
	}
}
[Token(Token = "0x20000B0")]
public class OvrAvatarHand : OvrAvatarComponent
{
	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarHandComponent component;

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xDA4E1C", Offset = "0xDA4E1C", VA = "0xDA4E1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xDA4F5C", Offset = "0xDA4F5C", VA = "0xDA4F5C")]
	public OvrAvatarHand()
	{
	}
}
[Token(Token = "0x20000B1")]
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private UnityEngine.Vector3 centerEyePosition;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private UnityEngine.Quaternion centerEyeRotation;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xDA4FB8", Offset = "0xDA4FB8", VA = "0xDA4FB8")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xDA50F8", Offset = "0xDA50F8", VA = "0xDA50F8")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xDA5428", Offset = "0xDA5428", VA = "0xDA5428")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xDA5644", Offset = "0xDA5644", VA = "0xDA5644", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xDA566C", Offset = "0xDA566C", VA = "0xDA566C")]
	public OvrAvatarLocalDriver()
	{
	}
}
[Token(Token = "0x20000B2")]
public class OvrAvatarMaterialManager : MonoBehaviour
{
	[Token(Token = "0x20000B3")]
	public enum TextureType
	{
		[Token(Token = "0x4000499")]
		DiffuseTextures,
		[Token(Token = "0x400049A")]
		NormalMaps,
		[Token(Token = "0x400049B")]
		RoughnessMaps,
		[Token(Token = "0x400049C")]
		Count
	}

	[Token(Token = "0x20000B4")]
	public struct AvatarComponentMaterialProperties
	{
		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public UnityEngine.Color Color;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DiffuseIntensity;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RimIntensity;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReflectionIntensity;
	}

	[Token(Token = "0x20000B5")]
	public struct AvatarTextureArrayProperties
	{
		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Token(Token = "0x20000B6")]
	public struct AvatarMaterialPropertyBlock
	{
		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Vector4[] Colors;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	[Token(Token = "0x20000B7")]
	public class AvatarMaterialConfig
	{
		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xDA7690", Offset = "0xDA7690", VA = "0xDA7690")]
		public AvatarMaterialConfig()
		{
		}
	}

	[Token(Token = "0x20000B8")]
	[CompilerGenerated]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callBack;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <srcBlend>5__2;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dstBlend>5__3;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <lightModeTag>5__4;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <renderTypeTag>5__5;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string <renderQueueTag>5__6;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string <ignoreProjectorTag>5__7;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <renderQueue>5__8;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool <transparentQueue>5__9;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000340")]
			[Address(RVA = "0xDA8148", Offset = "0xDA8148", VA = "0xDA8148", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000342")]
			[Address(RVA = "0xDA8190", Offset = "0xDA8190", VA = "0xDA8190", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xDA744C", Offset = "0xDA744C", VA = "0xDA744C")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0xDA7AE8", Offset = "0xDA7AE8", VA = "0xDA7AE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0xDA7AEC", Offset = "0xDA7AEC", VA = "0xDA7AEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0xDA8150", Offset = "0xDA8150", VA = "0xDA8150", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer TargetRenderer;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] TextureTypeToShaderProperties;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader CombinedShader;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static float[] DiffuseIntensities;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static float[] RimIntensities;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static float[] ReflectionIntensities;

	[Token(Token = "0x4000494")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Token(Token = "0x4000495")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Token(Token = "0x4000496")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Token(Token = "0x4000497")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xDA570C", Offset = "0xDA570C", VA = "0xDA570C")]
	public void CreateTextureArrays()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xDA58E0", Offset = "0xDA58E0", VA = "0xDA58E0")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xDA591C", Offset = "0xDA591C", VA = "0xDA591C")]
	public void OnCombinedMeshReady()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xDA6050", Offset = "0xDA6050", VA = "0xDA6050")]
	public void AddTextureIDToTextureManager(ulong assetID, bool isSingleComponent)
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xDA6124", Offset = "0xDA6124", VA = "0xDA6124")]
	private void DeleteTextureSet()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xDA59BC", Offset = "0xDA59BC", VA = "0xDA59BC")]
	public void InitTextureArrays()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xDA616C", Offset = "0xDA616C", VA = "0xDA616C")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xDA5E08", Offset = "0xDA5E08", VA = "0xDA5E08")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xDA6240", Offset = "0xDA6240", VA = "0xDA6240")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xDA64C4", Offset = "0xDA64C4", VA = "0xDA64C4")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xDA65E8", Offset = "0xDA65E8", VA = "0xDA65E8")]
	private ulong GetTextureIDForType(ovrAvatarPBSMaterialState materialState, TextureType type)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xDA6620", Offset = "0xDA6620", VA = "0xDA6620")]
	public void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xDA5FC0", Offset = "0xDA5FC0", VA = "0xDA5FC0")]
	[IteratorStateMachine(typeof(<RunLoadingAnimation>d__49))]
	private IEnumerator RunLoadingAnimation(Action callBack)
	{
		return null;
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xDA7474", Offset = "0xDA7474", VA = "0xDA7474")]
	public OvrAvatarMaterialManager()
	{
	}
}
[Token(Token = "0x20000B9")]
public class OvrAvatarPacket
{
	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	[Token(Token = "0x1700004F")]
	public float Duration
	{
		[Token(Token = "0x6000343")]
		[Address(RVA = "0xD9D698", Offset = "0xD9D698", VA = "0xD9D698")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000050")]
	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Token(Token = "0x6000344")]
		[Address(RVA = "0xD9D880", Offset = "0xD9D880", VA = "0xD9D880")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xD9DC74", Offset = "0xD9DC74", VA = "0xD9DC74")]
	public OvrAvatarPacket()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xD9D400", Offset = "0xD9D400", VA = "0xD9D400")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xDA8198", Offset = "0xDA8198", VA = "0xDA8198")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xD9D6FC", Offset = "0xD9D6FC", VA = "0xD9D6FC")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xDA8324", Offset = "0xDA8324", VA = "0xDA8324")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xDA8500", Offset = "0xDA8500", VA = "0xDA8500")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xDA8A4C", Offset = "0xDA8A4C", VA = "0xDA8A4C")]
	public void Write(Stream stream)
	{
	}
}
[Token(Token = "0x20000BA")]
internal static class BinaryWriterExtensions
{
	[Token(Token = "0x600034C")]
	[Address(RVA = "0xDA8C70", Offset = "0xDA8C70", VA = "0xDA8C70")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xDA8D78", Offset = "0xDA8D78", VA = "0xDA8D78")]
	public static void Write(this BinaryWriter writer, UnityEngine.Vector3 vec3)
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xDA8F04", Offset = "0xDA8F04", VA = "0xDA8F04")]
	public static void Write(this BinaryWriter writer, UnityEngine.Vector2 vec2)
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xDA8DDC", Offset = "0xDA8DDC", VA = "0xDA8DDC")]
	public static void Write(this BinaryWriter writer, UnityEngine.Quaternion quat)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xDA8E64", Offset = "0xDA8E64", VA = "0xDA8E64")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
[Token(Token = "0x20000BB")]
internal static class BinaryReaderExtensions
{
	[Token(Token = "0x6000351")]
	[Address(RVA = "0xDA88B0", Offset = "0xDA88B0", VA = "0xDA88B0")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xDA912C", Offset = "0xDA912C", VA = "0xDA912C")]
	public static UnityEngine.Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(UnityEngine.Vector2);
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xDA8F4C", Offset = "0xDA8F4C", VA = "0xDA8F4C")]
	public static UnityEngine.Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xDA8FB8", Offset = "0xDA8FB8", VA = "0xDA8FB8")]
	public static UnityEngine.Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(UnityEngine.Quaternion);
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xDA9048", Offset = "0xDA9048", VA = "0xDA9048")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
[Token(Token = "0x20000BC")]
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Token(Token = "0x40004BE")]
	private const int MinPacketQueue = 1;

	[Token(Token = "0x40004BF")]
	private const int MaxPacketQueue = 4;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xDA917C", Offset = "0xDA917C", VA = "0xDA917C")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xDA9200", Offset = "0xDA9200", VA = "0xDA9200", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0xDA921C", Offset = "0xDA921C", VA = "0xDA921C")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0xDA93CC", Offset = "0xDA93CC", VA = "0xDA93CC")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0xDA9588", Offset = "0xDA9588", VA = "0xDA9588")]
	public OvrAvatarRemoteDriver()
	{
	}
}
[Token(Token = "0x20000BD")]
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isBodyComponent;

	[Token(Token = "0x600035B")]
	[Address(RVA = "0xDA9644", Offset = "0xDA9644", VA = "0xDA9644")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xDA9720", Offset = "0xDA9720", VA = "0xDA9720")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer)
	{
		return null;
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xDA9908", Offset = "0xDA9908", VA = "0xDA9908")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xDA9C48", Offset = "0xDA9C48", VA = "0xDA9C48")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xDA9D4C", Offset = "0xDA9D4C", VA = "0xDA9D4C")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Token(Token = "0x20000BE")]
[Flags]
public enum ovrAvatarCapabilities
{
	[Token(Token = "0x40004C8")]
	Body = 1,
	[Token(Token = "0x40004C9")]
	Hands = 2,
	[Token(Token = "0x40004CA")]
	Base = 4,
	[Token(Token = "0x40004CB")]
	BodyTilt = 0x10,
	[Token(Token = "0x40004CC")]
	Expressive = 0x20,
	[Token(Token = "0x40004CD")]
	All = -1
}
[Token(Token = "0x20000BF")]
public enum ovrAvatarMessageType
{
	[Token(Token = "0x40004CF")]
	AvatarSpecification,
	[Token(Token = "0x40004D0")]
	AssetLoaded,
	[Token(Token = "0x40004D1")]
	Count
}
[Token(Token = "0x20000C0")]
public struct ovrAvatarMessage_AvatarSpecification
{
	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
[Token(Token = "0x20000C1")]
public struct ovrAvatarMessage_AssetLoaded
{
	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
[Token(Token = "0x20000C2")]
public enum ovrAvatarAssetType
{
	[Token(Token = "0x40004D7")]
	Mesh,
	[Token(Token = "0x40004D8")]
	Texture,
	[Token(Token = "0x40004D9")]
	Pose,
	[Token(Token = "0x40004DA")]
	Material,
	[Token(Token = "0x40004DB")]
	CombinedMesh,
	[Token(Token = "0x40004DC")]
	PBSMaterial,
	[Token(Token = "0x40004DD")]
	FailedLoad,
	[Token(Token = "0x40004DE")]
	Count
}
[Token(Token = "0x20000C3")]
public struct ovrAvatarMeshVertex
{
	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
[Token(Token = "0x20000C4")]
public struct ovrAvatarMeshVertexV2
{
	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
[Token(Token = "0x20000C5")]
public struct ovrAvatarBlendVertex
{
	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
[Token(Token = "0x20000C6")]
public struct ovrAvatarMeshAssetData
{
	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x20000C7")]
public struct ovrAvatarMeshAssetDataV2
{
	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x20000C8")]
public enum ovrAvatarTextureFormat
{
	[Token(Token = "0x4000513")]
	RGB24,
	[Token(Token = "0x4000514")]
	DXT1,
	[Token(Token = "0x4000515")]
	DXT5,
	[Token(Token = "0x4000516")]
	ASTC_RGB_6x6,
	[Token(Token = "0x4000517")]
	ASTC_RGB_6x6_MIPMAPS,
	[Token(Token = "0x4000518")]
	Count
}
[Token(Token = "0x20000C9")]
public struct ovrAvatarTextureAssetData
{
	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
[Token(Token = "0x20000CA")]
public enum ovrAvatarRenderPartType
{
	[Token(Token = "0x4000520")]
	SkinnedMeshRender,
	[Token(Token = "0x4000521")]
	SkinnedMeshRenderPBS,
	[Token(Token = "0x4000522")]
	ProjectorRender,
	[Token(Token = "0x4000523")]
	SkinnedMeshRenderPBS_V2,
	[Token(Token = "0x4000524")]
	Count
}
[Token(Token = "0x20000CB")]
public enum ovrAvatarLogLevel
{
	[Token(Token = "0x4000526")]
	Unknown,
	[Token(Token = "0x4000527")]
	Default,
	[Token(Token = "0x4000528")]
	Verbose,
	[Token(Token = "0x4000529")]
	Debug,
	[Token(Token = "0x400052A")]
	Info,
	[Token(Token = "0x400052B")]
	Warn,
	[Token(Token = "0x400052C")]
	Error,
	[Token(Token = "0x400052D")]
	Fatal,
	[Token(Token = "0x400052E")]
	Silent
}
[Token(Token = "0x20000CC")]
public struct ovrAvatarTransform
{
	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 position;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Quaternion orientation;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector3 scale;
}
[Token(Token = "0x20000CD")]
[Flags]
public enum ovrAvatarButton
{
	[Token(Token = "0x4000533")]
	One = 1,
	[Token(Token = "0x4000534")]
	Two = 2,
	[Token(Token = "0x4000535")]
	Three = 4,
	[Token(Token = "0x4000536")]
	Joystick = 8
}
[Token(Token = "0x20000CE")]
[Flags]
public enum ovrAvatarTouch
{
	[Token(Token = "0x4000538")]
	One = 1,
	[Token(Token = "0x4000539")]
	Two = 2,
	[Token(Token = "0x400053A")]
	Joystick = 4,
	[Token(Token = "0x400053B")]
	ThumbRest = 8,
	[Token(Token = "0x400053C")]
	Index = 0x10,
	[Token(Token = "0x400053D")]
	Pointing = 0x40,
	[Token(Token = "0x400053E")]
	ThumbUp = 0x80
}
[Token(Token = "0x20000CF")]
public struct ovrAvatarHandInputState
{
	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
[Token(Token = "0x20000D0")]
public struct ovrAvatarComponent
{
	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
[Token(Token = "0x20000D1")]
internal struct ovrAvatarComponent_Offsets
{
	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long transform;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderPartCount;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int renderParts;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int name;
}
[Token(Token = "0x20000D2")]
public struct ovrAvatarBaseComponent
{
	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 basePosition;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000D3")]
public struct ovrAvatarBodyComponent
{
	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000D4")]
public struct ovrAvatarBodyComponent_Offsets
{
	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long leftEyeTransform;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long rightEyeTransform;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long centerEyeTransform;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long renderComponent;
}
[Token(Token = "0x20000D5")]
public struct ovrAvatarControllerComponent
{
	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000D6")]
public struct ovrAvatarHandComponent
{
	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x20000D7")]
public enum ovrAvatarMaterialLayerBlendMode
{
	[Token(Token = "0x400055E")]
	Add,
	[Token(Token = "0x400055F")]
	Multiply,
	[Token(Token = "0x4000560")]
	Count
}
[Token(Token = "0x20000D8")]
public enum ovrAvatarMaterialLayerSampleMode
{
	[Token(Token = "0x4000562")]
	Color,
	[Token(Token = "0x4000563")]
	Texture,
	[Token(Token = "0x4000564")]
	TextureSingleChannel,
	[Token(Token = "0x4000565")]
	Parallax,
	[Token(Token = "0x4000566")]
	Count
}
[Token(Token = "0x20000D9")]
public enum ovrAvatarMaterialMaskType
{
	[Token(Token = "0x4000568")]
	None,
	[Token(Token = "0x4000569")]
	Positional,
	[Token(Token = "0x400056A")]
	ViewReflection,
	[Token(Token = "0x400056B")]
	Fresnel,
	[Token(Token = "0x400056C")]
	Pulse,
	[Token(Token = "0x400056D")]
	Count
}
[Token(Token = "0x20000DA")]
public enum ovrAvatarControllerType
{
	[Token(Token = "0x400056F")]
	Touch,
	[Token(Token = "0x4000570")]
	Malibu,
	[Token(Token = "0x4000571")]
	Go,
	[Token(Token = "0x4000572")]
	Quest,
	[Token(Token = "0x4000573")]
	Count
}
[Token(Token = "0x20000DB")]
public enum ovrAvatarAssetLevelOfDetail
{
	[Token(Token = "0x4000575")]
	Lowest = 1,
	[Token(Token = "0x4000576")]
	Medium = 3,
	[Token(Token = "0x4000577")]
	Highest = 5
}
[Token(Token = "0x20000DC")]
public enum ovrAvatarLookAndFeelVersion
{
	[Token(Token = "0x4000579")]
	Unknown = -1,
	[Token(Token = "0x400057A")]
	One,
	[Token(Token = "0x400057B")]
	Two
}
[Token(Token = "0x20000DD")]
public struct ovrAvatarMaterialLayerState
{
	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Vector4 layerColor;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector4 sampleParameters;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.Vector4 sampleScaleOffset;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.Vector4 maskParameters;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.Vector4 maskAxis;

	[Token(Token = "0x6000362")]
	[Address(RVA = "0xDAA124", Offset = "0xDAA124", VA = "0xDAA124")]
	private static bool VectorEquals(UnityEngine.Vector4 a, UnityEngine.Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xDAA154", Offset = "0xDAA154", VA = "0xDAA154", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xDAA364", Offset = "0xDAA364", VA = "0xDAA364", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000DE")]
public struct ovrAvatarMaterialState
{
	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector4 baseColor;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UnityEngine.Vector4 baseMaskParameters;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UnityEngine.Vector4 baseMaskAxis;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.Vector4 alphaMaskScaleOffset;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.Vector4 normalMapScaleOffset;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.Vector4 parallaxMapScaleOffset;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEngine.Vector4 roughnessMapScaleOffset;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xDAA5A8", Offset = "0xDAA5A8", VA = "0xDAA5A8")]
	private static bool VectorEquals(UnityEngine.Vector4 a, UnityEngine.Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0xDAA5D8", Offset = "0xDAA5D8", VA = "0xDAA5D8", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0xDAA968", Offset = "0xDAA968", VA = "0xDAA968", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000DF")]
public struct ovrAvatarExpressiveParameters
{
	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector4 irisColor;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEngine.Vector4 scleraColor;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.Vector4 lashColor;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Vector4 browColor;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.Vector4 lipColor;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.Vector4 teethColor;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.Vector4 gumColor;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xDAAD10", Offset = "0xDAAD10", VA = "0xDAAD10")]
	private static bool VectorEquals(UnityEngine.Vector4 a, UnityEngine.Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xDAAD40", Offset = "0xDAAD40", VA = "0xDAAD40", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xDAAF88", Offset = "0xDAAF88", VA = "0xDAAF88", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000E0")]
public struct ovrAvatarPBSMaterialState
{
	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector4 baseColor;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector4 albedoMultiplier;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.Vector4 emissionMultiplier;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xDAB25C", Offset = "0xDAB25C", VA = "0xDAB25C")]
	private static bool VectorEquals(UnityEngine.Vector4 a, UnityEngine.Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xDAB28C", Offset = "0xDAB28C", VA = "0xDAB28C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xDAB454", Offset = "0xDAB454", VA = "0xDAB454", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x20000E1")]
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xDAB668", Offset = "0xDAB668", VA = "0xDAB668")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
[Token(Token = "0x20000E2")]
public struct ovrAvatarSkinnedMeshPose
{
	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Token(Token = "0x20000E3")]
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Token(Token = "0x40005B0")]
	FirstPerson = 1,
	[Token(Token = "0x40005B1")]
	ThirdPerson = 2,
	[Token(Token = "0x40005B2")]
	SelfOccluding = 4
}
[Token(Token = "0x20000E4")]
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000E5")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000E6")]
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
[Token(Token = "0x20000E7")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x20000E8")]
public enum ovrAvatarHandGesture
{
	[Token(Token = "0x40005C8")]
	Default,
	[Token(Token = "0x40005C9")]
	GripSphere,
	[Token(Token = "0x40005CA")]
	GripCube,
	[Token(Token = "0x40005CB")]
	Count
}
[Token(Token = "0x20000E9")]
public enum ovrAvatarBodyPartType
{
	[Token(Token = "0x40005CD")]
	Body,
	[Token(Token = "0x40005CE")]
	Clothing,
	[Token(Token = "0x40005CF")]
	Eyewear,
	[Token(Token = "0x40005D0")]
	Hair,
	[Token(Token = "0x40005D1")]
	Beard,
	[Token(Token = "0x40005D2")]
	Count
}
[Token(Token = "0x20000EA")]
public struct ovrAvatarBlendShapeParams
{
	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
[Token(Token = "0x20000EB")]
internal struct ovrAvatarBlendShapeParams_Offsets
{
	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int blendShapeParamCount;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long blendShapeParams;
}
[Token(Token = "0x20000EC")]
public struct ovrAvatarVisemes
{
	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
[Token(Token = "0x20000ED")]
internal struct ovrAvatarVisemes_Offsets
{
	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int visemeParamCount;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long visemeParams;
}
[Token(Token = "0x20000EE")]
public enum ovrAvatarGazeTargetType
{
	[Token(Token = "0x40005DC")]
	AvatarHead,
	[Token(Token = "0x40005DD")]
	AvatarHand,
	[Token(Token = "0x40005DE")]
	Object,
	[Token(Token = "0x40005DF")]
	ObjectStatic,
	[Token(Token = "0x40005E0")]
	Count
}
[Token(Token = "0x20000EF")]
public struct ovrAvatarGazeTarget
{
	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public UnityEngine.Vector3 worldPosition;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
[Token(Token = "0x20000F0")]
internal struct ovrAvatarGazeTarget_Offsets
{
	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int id;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int worldPosition;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int type;
}
[Token(Token = "0x20000F1")]
public struct ovrAvatarGazeTargets
{
	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
[Token(Token = "0x20000F2")]
internal struct ovrAvatarGazeTargets_Offsets
{
	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int targetCount;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long targets;
}
[Token(Token = "0x20000F3")]
public enum ovrAvatarLightType
{
	[Token(Token = "0x40005EC")]
	Point,
	[Token(Token = "0x40005ED")]
	Direction,
	[Token(Token = "0x40005EE")]
	Spot,
	[Token(Token = "0x40005EF")]
	Count
}
[Token(Token = "0x20000F4")]
public struct ovrAvatarLight
{
	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Vector3 worldDirection;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 worldPosition;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
[Token(Token = "0x20000F5")]
internal struct ovrAvatarLight_Offsets
{
	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long id;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long type;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long intensity;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long worldDirection;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static long worldPosition;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static long range;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static long spotAngleDeg;
}
[Token(Token = "0x20000F6")]
public struct ovrAvatarLights
{
	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
[Token(Token = "0x20000F7")]
internal struct ovrAvatarLights_Offsets
{
	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long ambientIntensity;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long lightCount;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long lights;
}
[Token(Token = "0x20000F8")]
[Flags]
public enum ovrAvatarDebugContext : uint
{
	[Token(Token = "0x4000605")]
	None = 0u,
	[Token(Token = "0x4000606")]
	GazeTarget = 1u,
	[Token(Token = "0x4000607")]
	Any = uint.MaxValue
}
[Token(Token = "0x20000F9")]
public struct ovrAvatarDebugLine
{
	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 startPoint;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Vector3 endPoint;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 color;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IntPtr text;
}
[Token(Token = "0x20000FA")]
public struct ovrAvatarDebugTransform
{
	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr text;
}
[Token(Token = "0x20000FB")]
public delegate void specificationCallback(IntPtr specification);
[Token(Token = "0x20000FC")]
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
[Token(Token = "0x20000FD")]
public delegate void combinedMeshLoadedCallback(IntPtr asset);
[Token(Token = "0x20000FE")]
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Token(Token = "0x20000FF")]
	public struct AvatarSpecRequestParams
	{
		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _userId;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public specificationCallback _callback;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _useCombinedMesh;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ovrAvatarAssetLevelOfDetail _lod;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _forceMobileTextureFormat;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ovrAvatarLookAndFeelVersion _lookVersion;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ovrAvatarLookAndFeelVersion _fallbackVersion;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool _enableExpressive;

		[Token(Token = "0x6000392")]
		[Address(RVA = "0xD9C1A8", Offset = "0xD9C1A8", VA = "0xD9C1A8")]
		public AvatarSpecRequestParams(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
		{
		}
	}

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OvrAvatarTextureCopyManager textureCopyManager;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarLogLevel LoggingLevel;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Queue<AvatarSpecRequestParams> avatarSpecificationQueue;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> loadingAvatars;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool avatarSpecRequestAvailable;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastDispatchedAvatarSpecRequestTime;

	[Token(Token = "0x400061C")]
	private const float AVATAR_SPEC_REQUEST_TIMEOUT = 5f;

	[Token(Token = "0x17000051")]
	public static OvrAvatarSDKManager Instance
	{
		[Token(Token = "0x6000381")]
		[Address(RVA = "0xD9B704", Offset = "0xD9B704", VA = "0xD9B704")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xDAC1E0", Offset = "0xDAC1E0", VA = "0xDAC1E0")]
	private bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xDAC530", Offset = "0xDAC530", VA = "0xDAC530")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xDAC594", Offset = "0xDAC594", VA = "0xDAC594")]
	private void Update()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xDACF2C", Offset = "0xDACF2C", VA = "0xDACF2C")]
	public bool IsAvatarSpecWaiting()
	{
		return default(bool);
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xDACF7C", Offset = "0xDACF7C", VA = "0xDACF7C")]
	public bool IsAvatarLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xD9C294", Offset = "0xD9C294", VA = "0xD9C294")]
	public void AddLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xD9C8D8", Offset = "0xD9C8D8", VA = "0xD9C8D8")]
	public void RemoveLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xD9C210", Offset = "0xD9C210", VA = "0xD9C210")]
	public void RequestAvatarSpecification(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xDACD4C", Offset = "0xDACD4C", VA = "0xDACD4C")]
	private void DispatchAvatarSpecificationRequest(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xD9BAA4", Offset = "0xD9BAA4", VA = "0xD9BAA4")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xD9BCC4", Offset = "0xD9BCC4", VA = "0xD9BCC4")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xD9B8F0", Offset = "0xD9B8F0", VA = "0xD9B8F0")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xDACFCC", Offset = "0xDACFCC", VA = "0xDACFCC")]
	public void DeleteAssetFromCache(ulong assetId)
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xDAC4F0", Offset = "0xDAC4F0", VA = "0xDAC4F0")]
	public string GetAppId()
	{
		return null;
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xDA60B0", Offset = "0xDA60B0", VA = "0xDA60B0")]
	public OvrAvatarTextureCopyManager GetTextureCopyManager()
	{
		return null;
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xDAD094", Offset = "0xDAD094", VA = "0xDAD094")]
	public OvrAvatarSDKManager()
	{
	}
}
[Token(Token = "0x2000100")]
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	[Token(Token = "0x17000052")]
	public static string AppID
	{
		[Token(Token = "0x6000393")]
		[Address(RVA = "0xDAD05C", Offset = "0xDAD05C", VA = "0xDAD05C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000394")]
		[Address(RVA = "0xDAD1F0", Offset = "0xDAD1F0", VA = "0xDAD1F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000053")]
	public static string MobileAppID
	{
		[Token(Token = "0x6000395")]
		[Address(RVA = "0xDAD078", Offset = "0xDAD078", VA = "0xDAD078")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000396")]
		[Address(RVA = "0xDAD214", Offset = "0xDAD214", VA = "0xDAD214")]
		set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public static OvrAvatarSettings Instance
	{
		[Token(Token = "0x6000397")]
		[Address(RVA = "0xDAD0AC", Offset = "0xDAD0AC", VA = "0xDAD0AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000398")]
		[Address(RVA = "0xDAD238", Offset = "0xDAD238", VA = "0xDAD238")]
		set
		{
		}
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xDAD290", Offset = "0xDAD290", VA = "0xDAD290")]
	public OvrAvatarSettings()
	{
	}
}
[Token(Token = "0x2000101")]
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surface;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader surfaceSelfOccluding;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool previouslyActive;

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xD9978C", Offset = "0xD9978C", VA = "0xD9978C")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xDA2370", Offset = "0xDA2370", VA = "0xDA2370")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xDAD2F8", Offset = "0xDAD2F8", VA = "0xDAD2F8")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xDAD440", Offset = "0xDAD440", VA = "0xDAD440")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
[Token(Token = "0x2000102")]
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isMaterialInitilized;

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xD999D4", Offset = "0xD999D4", VA = "0xD999D4")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xDA257C", Offset = "0xDA257C", VA = "0xDA257C")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xDAD450", Offset = "0xDAD450", VA = "0xDAD450")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
[Token(Token = "0x2000103")]
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarMaterialManager avatarMaterialManager;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isCombinedMaterial;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool EnableExpressive;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int blendShapeCount;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ovrAvatarBlendShapeParams blendShapeParams;

	[Token(Token = "0x4000633")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Token(Token = "0x4000634")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Token(Token = "0x4000635")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xD99CF0", Offset = "0xD99CF0", VA = "0xD99CF0")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, bool combinedMesh, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar, bool isControllerModel)
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xDA2724", Offset = "0xDA2724", VA = "0xDA2724")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xDADFC8", Offset = "0xDADFC8", VA = "0xDADFC8")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xDAD764", Offset = "0xDAD764", VA = "0xDAD764")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xDAD460", Offset = "0xDAD460", VA = "0xDAD460")]
	private void SetMaterialTransparent(Material mat)
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xDAD5D8", Offset = "0xDAD5D8", VA = "0xDAD5D8")]
	private void SetMaterialOpaque(Material mat)
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xDAE7D0", Offset = "0xDAE7D0", VA = "0xDAE7D0")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
[Token(Token = "0x2000104")]
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000105")]
	public struct FallbackTextureSet
	{
		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Initialized;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2D DiffuseRoughness;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D Normal;
	}

	[Token(Token = "0x2000106")]
	private struct CopyTextureParams
	{
		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xDAF130", Offset = "0xDAF130", VA = "0xDAF130")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[Token(Token = "0x2000107")]
	public struct TextureSet
	{
		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<ulong, bool> TextureIDSingleMeshPair;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsProcessed;

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0xDAF380", Offset = "0xDAF380", VA = "0xDAF380")]
		public TextureSet(Dictionary<ulong, bool> textureIDSingleMeshPair, bool isProcessed)
		{
		}
	}

	[Token(Token = "0x2000108")]
	[CompilerGenerated]
	private sealed class <DeleteTextureSetCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureSet textureSetToDelete;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OvrAvatarTextureCopyManager <>4__this;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int gameobjectID;

		[Token(Token = "0x17000055")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B7")]
			[Address(RVA = "0xDAFC9C", Offset = "0xDAFC9C", VA = "0xDAFC9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003B9")]
			[Address(RVA = "0xDAFCE4", Offset = "0xDAFCE4", VA = "0xDAFCE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xDAF4E8", Offset = "0xDAF4E8", VA = "0xDAF4E8")]
		[DebuggerHidden]
		public <DeleteTextureSetCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0xDAF6B4", Offset = "0xDAF6B4", VA = "0xDAF6B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0xDAF6B8", Offset = "0xDAF6B8", VA = "0xDAF6B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xDAFCA4", Offset = "0xDAFCA4", VA = "0xDAFCA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FallbackTextureSet[] FallbackTextureSets;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, TextureSet> textureSets;

	[Token(Token = "0x4000639")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Token(Token = "0x400063A")]
	private const int COPIES_PER_FRAME = 8;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_DIFFUSE_ROUGHNESS;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_NORMAL;

	[Token(Token = "0x400063D")]
	private const string PATH_HIGHEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_2048";

	[Token(Token = "0x400063E")]
	private const string PATH_MEDIUM_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_1024";

	[Token(Token = "0x400063F")]
	private const string PATH_LOWEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_256";

	[Token(Token = "0x4000640")]
	private const string PATH_HIGHEST_NORMAL = "FallbackTextures/fallback_normal_2048";

	[Token(Token = "0x4000641")]
	private const string PATH_MEDIUM_NORMAL = "FallbackTextures/fallback_normal_1024";

	[Token(Token = "0x4000642")]
	private const string PATH_LOWEST_NORMAL = "FallbackTextures/fallback_normal_256";

	[Token(Token = "0x4000643")]
	private const int GPU_TEXTURE_COPY_WAIT_TIME = 10;

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xDAE7E0", Offset = "0xDAE7E0", VA = "0xDAE7E0")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xDAED44", Offset = "0xDAED44", VA = "0xDAED44")]
	public void Update()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xDAEF28", Offset = "0xDAEF28", VA = "0xDAEF28")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xDAEF70", Offset = "0xDAEF70", VA = "0xDAEF70")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xDAEEA8", Offset = "0xDAEEA8", VA = "0xDAEEA8")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xDAF180", Offset = "0xDAF180", VA = "0xDAF180")]
	public void AddTextureIDToTextureSet(int gameobjectID, ulong textureID, bool isSingleMesh)
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xDAF3A8", Offset = "0xDAF3A8", VA = "0xDAF3A8")]
	public void DeleteTextureSet(int gameobjectID)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xDAF440", Offset = "0xDAF440", VA = "0xDAF440")]
	[IteratorStateMachine(typeof(<DeleteTextureSetCoroutine>d__24))]
	private IEnumerator DeleteTextureSetCoroutine(TextureSet textureSetToDelete, int gameobjectID)
	{
		return null;
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xDAF510", Offset = "0xDAF510", VA = "0xDAF510")]
	public void CheckFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xDAF550", Offset = "0xDAF550", VA = "0xDAF550")]
	private void InitFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}
}
[Token(Token = "0x2000109")]
public class OvrAvatarTouchController : OvrAvatarComponent
{
	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarControllerComponent component;

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xDAFCEC", Offset = "0xDAFCEC", VA = "0xDAFCEC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xDAFE30", Offset = "0xDAFE30", VA = "0xDAFE30")]
	public OvrAvatarTouchController()
	{
	}
}
[Token(Token = "0x200010A")]
public class OVRMetricsToolSDK : MonoBehaviour
{
	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaClass _MetricsService;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static AndroidJavaObject _Context;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool _IsBound;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static OVRMetricsToolSDK _Instance;

	[Token(Token = "0x17000057")]
	public static OVRMetricsToolSDK Instance
	{
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xDAFE90", Offset = "0xDAFE90", VA = "0xDAFE90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xDAFFD4", Offset = "0xDAFFD4", VA = "0xDAFFD4")]
	[Conditional("JNI_AVAILABLE")]
	private static void InitJava()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xDB0118", Offset = "0xDB0118", VA = "0xDB0118")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xDB0228", Offset = "0xDB0228", VA = "0xDB0228")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xDB032C", Offset = "0xDB032C", VA = "0xDB032C")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xDB011C", Offset = "0xDB011C", VA = "0xDB011C")]
	private void Bind()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xDB022C", Offset = "0xDB022C", VA = "0xDB022C")]
	private void Shutdown()
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xDB0338", Offset = "0xDB0338", VA = "0xDB0338")]
	public bool AppendCsvDebugString(string debugString)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xDB04AC", Offset = "0xDB04AC", VA = "0xDB04AC")]
	public bool SetOverlayDebugString(string debugString)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xDB0620", Offset = "0xDB0620", VA = "0xDB0620")]
	public OVRMetricsToolSDK()
	{
	}
}
[Token(Token = "0x200010B")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x200010C")]
	public delegate void OnClick();

	[Token(Token = "0x200010D")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x200010E")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x200010F")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x4000659")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x400065A")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x400065B")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform[] additionalButtonPrefab;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnityEngine.GameObject uiHelpersToInstantiate;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] reEnable;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<UnityEngine.GameObject> toEnable;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<UnityEngine.GameObject> toDisable;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float elementSpacing;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float marginH;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float marginV;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private UnityEngine.Vector2[] insertPositions;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UnityEngine.Vector3 menuOffset;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private LaserPointer lp;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LineRenderer lr;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool isHorizontal;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool usePanelCentricRelayout;

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xDB0628", Offset = "0xDB0628", VA = "0xDB0628")]
	public void Awake()
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xDB0B94", Offset = "0xDB0B94", VA = "0xDB0B94")]
	public void Show()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xDB0F10", Offset = "0xDB0F10", VA = "0xDB0F10")]
	public void Hide()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xDB108C", Offset = "0xDB108C", VA = "0xDB108C")]
	private void StackedRelayout()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xDB12A4", Offset = "0xDB12A4", VA = "0xDB12A4")]
	private void PanelCentricRelayout()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xDB0F00", Offset = "0xDB0F00", VA = "0xDB0F00")]
	private void Relayout()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xDB1598", Offset = "0xDB1598", VA = "0xDB1598")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xDB1914", Offset = "0xDB1914", VA = "0xDB1914")]
	public RectTransform AddButton(string label, [Optional] OnClick handler, int buttonIndex = -1, int targetCanvas = 0, bool highResolutionText = false)
	{
		return null;
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xDB1CC4", Offset = "0xDB1CC4", VA = "0xDB1CC4")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xDB1DBC", Offset = "0xDB1DBC", VA = "0xDB1DBC")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xDB1F8C", Offset = "0xDB1F8C", VA = "0xDB1F8C")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xDB2024", Offset = "0xDB2024", VA = "0xDB2024")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xDB2200", Offset = "0xDB2200", VA = "0xDB2200")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xDB23FC", Offset = "0xDB23FC", VA = "0xDB23FC")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xDB26F4", Offset = "0xDB26F4", VA = "0xDB26F4")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xDB27E4", Offset = "0xDB27E4", VA = "0xDB27E4")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xDB2878", Offset = "0xDB2878", VA = "0xDB2878")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x2000115")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xDB2EF8", Offset = "0xDB2EF8", VA = "0xDB2EF8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xDB2F9C", Offset = "0xDB2F9C", VA = "0xDB2F9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xDB3038", Offset = "0xDB3038", VA = "0xDB3038")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xDB3070", Offset = "0xDB3070", VA = "0xDB3070")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x2000116")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x2000117")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x400068B")]
		On,
		[Token(Token = "0x400068C")]
		Off,
		[Token(Token = "0x400068D")]
		OnWhenHitTarget
	}

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject cursorVisual;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private UnityEngine.Vector3 _startPoint;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 _forward;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 _endPoint;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000058")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xDB3078", Offset = "0xDB3078", VA = "0xDB3078")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x60003F5")]
		[Address(RVA = "0xDB0B54", Offset = "0xDB0B54", VA = "0xDB0B54")]
		set
		{
		}
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xDB3080", Offset = "0xDB3080", VA = "0xDB3080")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xDB30D8", Offset = "0xDB30D8", VA = "0xDB30D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xDB3210", Offset = "0xDB3210", VA = "0xDB3210", Slot = "5")]
	public override void SetCursorStartDest(UnityEngine.Vector3 start, UnityEngine.Vector3 dest, UnityEngine.Vector3 normal)
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xDB322C", Offset = "0xDB322C", VA = "0xDB322C", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xDB327C", Offset = "0xDB327C", VA = "0xDB327C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xDB341C", Offset = "0xDB341C", VA = "0xDB341C")]
	private void UpdateLaserBeam(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xDB352C", Offset = "0xDB352C", VA = "0xDB352C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xDB35B0", Offset = "0xDB35B0", VA = "0xDB35B0")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xDB3670", Offset = "0xDB3670", VA = "0xDB3670")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xDB3718", Offset = "0xDB3718", VA = "0xDB3718")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xDB3804", Offset = "0xDB3804", VA = "0xDB3804")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x2000118")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x400068E")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x400068F")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x4000690")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("Collision layers to be used for the purposes of fading out the screen when the HMD is inside world geometry and adjusting the capsule height.")]
	public LayerMask CollideLayers;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Offset is added to camera's real world height, effectively treating it as though the player was taller/standing higher.")]
	public float HeightOffset;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("Minimum height that the character capsule can shrink to.  To disable, set to capsule's height.")]
	public float MinimumHeight;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("Maximum height that the character capsule can grow to.  To disable, set to capsule's height.")]
	public float MaximumHeight;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xDB3814", Offset = "0xDB3814", VA = "0xDB3814")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xDB381C", Offset = "0xDB381C", VA = "0xDB381C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xDB38AC", Offset = "0xDB38AC", VA = "0xDB38AC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xDB39D0", Offset = "0xDB39D0", VA = "0xDB39D0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xDB3AF4", Offset = "0xDB3AF4", VA = "0xDB3AF4")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xDB3E14", Offset = "0xDB3E14", VA = "0xDB3E14")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xDB4074", Offset = "0xDB4074", VA = "0xDB4074")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000119")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xDB47CC", Offset = "0xDB47CC", VA = "0xDB47CC")]
	private void Start()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xDB4878", Offset = "0xDB4878", VA = "0xDB4878")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x200011A")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x200011B")]
	public enum States
	{
		[Token(Token = "0x40006BE")]
		Ready,
		[Token(Token = "0x40006BF")]
		Aim,
		[Token(Token = "0x40006C0")]
		CancelAim,
		[Token(Token = "0x40006C1")]
		PreTeleport,
		[Token(Token = "0x40006C2")]
		CancelTeleport,
		[Token(Token = "0x40006C3")]
		Teleporting,
		[Token(Token = "0x40006C4")]
		PostTeleport
	}

	[Token(Token = "0x200011C")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40006C6")]
		None,
		[Token(Token = "0x40006C7")]
		Aim,
		[Token(Token = "0x40006C8")]
		PreTeleport,
		[Token(Token = "0x40006C9")]
		Teleport
	}

	[Token(Token = "0x200011D")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x40006CB")]
		Point,
		[Token(Token = "0x40006CC")]
		Sphere,
		[Token(Token = "0x40006CD")]
		Capsule
	}

	[Token(Token = "0x200011E")]
	public class AimData
	{
		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Vector3? Destination;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x1700005C")]
		public List<UnityEngine.Vector3> Points
		{
			[Token(Token = "0x6000440")]
			[Address(RVA = "0xDB65B8", Offset = "0xDB65B8", VA = "0xDB65B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000441")]
			[Address(RVA = "0xDB65C0", Offset = "0xDB65C0", VA = "0xDB65C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xDB6530", Offset = "0xDB6530", VA = "0xDB6530")]
		public AimData()
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xDB65C8", Offset = "0xDB65C8", VA = "0xDB65C8")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200011F")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700005D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000446")]
			[Address(RVA = "0xDB6730", Offset = "0xDB6730", VA = "0xDB6730", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000448")]
			[Address(RVA = "0xDB6778", Offset = "0xDB6778", VA = "0xDB6778", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xDB5284", Offset = "0xDB5284", VA = "0xDB5284")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xDB6620", Offset = "0xDB6620", VA = "0xDB6620", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xDB6624", Offset = "0xDB6624", VA = "0xDB6624", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xDB6738", Offset = "0xDB6738", VA = "0xDB6738", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000120")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700005F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600044C")]
			[Address(RVA = "0xDB68DC", Offset = "0xDB68DC", VA = "0xDB68DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000060")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600044E")]
			[Address(RVA = "0xDB6924", Offset = "0xDB6924", VA = "0xDB6924", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xDB570C", Offset = "0xDB570C", VA = "0xDB570C")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xDB6780", Offset = "0xDB6780", VA = "0xDB6780", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xDB6784", Offset = "0xDB6784", VA = "0xDB6784", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0xDB68E4", Offset = "0xDB68E4", VA = "0xDB68E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000121")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000061")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000452")]
			[Address(RVA = "0xDB69DC", Offset = "0xDB69DC", VA = "0xDB69DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000062")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000454")]
			[Address(RVA = "0xDB6A24", Offset = "0xDB6A24", VA = "0xDB6A24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xDB58E0", Offset = "0xDB58E0", VA = "0xDB58E0")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xDB692C", Offset = "0xDB692C", VA = "0xDB692C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0xDB6930", Offset = "0xDB6930", VA = "0xDB6930", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xDB69E4", Offset = "0xDB69E4", VA = "0xDB69E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000122")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000063")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000458")]
			[Address(RVA = "0xDB6B14", Offset = "0xDB6B14", VA = "0xDB6B14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000064")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600045A")]
			[Address(RVA = "0xDB6B5C", Offset = "0xDB6B5C", VA = "0xDB6B5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0xDB5AB4", Offset = "0xDB5AB4", VA = "0xDB5AB4")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xDB6A2C", Offset = "0xDB6A2C", VA = "0xDB6A2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0xDB6A30", Offset = "0xDB6A30", VA = "0xDB6A30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0xDB6B1C", Offset = "0xDB6B1C", VA = "0xDB6B1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000123")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000065")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600045E")]
			[Address(RVA = "0xDB6C14", Offset = "0xDB6C14", VA = "0xDB6C14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000066")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000460")]
			[Address(RVA = "0xDB6C5C", Offset = "0xDB6C5C", VA = "0xDB6C5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xDB5C88", Offset = "0xDB5C88", VA = "0xDB5C88")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xDB6B64", Offset = "0xDB6B64", VA = "0xDB6B64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xDB6B68", Offset = "0xDB6B68", VA = "0xDB6B68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xDB6C1C", Offset = "0xDB6C1C", VA = "0xDB6C1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000124")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000067")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000464")]
			[Address(RVA = "0xDB6D48", Offset = "0xDB6D48", VA = "0xDB6D48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000068")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000466")]
			[Address(RVA = "0xDB6D90", Offset = "0xDB6D90", VA = "0xDB6D90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xDB5E5C", Offset = "0xDB5E5C", VA = "0xDB5E5C")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xDB6C64", Offset = "0xDB6C64", VA = "0xDB6C64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xDB6C68", Offset = "0xDB6C68", VA = "0xDB6C68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0xDB6D50", Offset = "0xDB6D50", VA = "0xDB6D50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000125")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000069")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600046A")]
			[Address(RVA = "0xDB6E98", Offset = "0xDB6E98", VA = "0xDB6E98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600046C")]
			[Address(RVA = "0xDB6EE0", Offset = "0xDB6EE0", VA = "0xDB6EE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0xDB6030", Offset = "0xDB6030", VA = "0xDB6030")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xDB6D98", Offset = "0xDB6D98", VA = "0xDB6D98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xDB6D9C", Offset = "0xDB6D9C", VA = "0xDB6D9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xDB6EA0", Offset = "0xDB6EA0", VA = "0xDB6EA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[UnityEngine.Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[UnityEngine.Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[UnityEngine.Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[UnityEngine.Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[UnityEngine.Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[UnityEngine.Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[UnityEngine.Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[UnityEngine.Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[UnityEngine.Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[UnityEngine.Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[UnityEngine.Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[UnityEngine.Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000059")]
	public States CurrentState
	{
		[Token(Token = "0x600040D")]
		[Address(RVA = "0xDB48C8", Offset = "0xDB48C8", VA = "0xDB48C8")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x600040E")]
		[Address(RVA = "0xDB48D0", Offset = "0xDB48D0", VA = "0xDB48D0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700005A")]
	public UnityEngine.Quaternion DestinationRotation
	{
		[Token(Token = "0x6000412")]
		[Address(RVA = "0xDB4AA0", Offset = "0xDB4AA0", VA = "0xDB4AA0")]
		get
		{
			return default(UnityEngine.Quaternion);
		}
	}

	[Token(Token = "0x1700005B")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x6000413")]
		[Address(RVA = "0xDB4AC4", Offset = "0xDB4AC4", VA = "0xDB4AC4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000414")]
		[Address(RVA = "0xDB4ACC", Offset = "0xDB4ACC", VA = "0xDB4ACC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action<bool, UnityEngine.Vector3?, UnityEngine.Quaternion?, UnityEngine.Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x600040F")]
		[Address(RVA = "0xDB48D8", Offset = "0xDB48D8", VA = "0xDB48D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000410")]
		[Address(RVA = "0xDB4988", Offset = "0xDB4988", VA = "0xDB4988")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x600041E")]
		[Address(RVA = "0xDB514C", Offset = "0xDB514C", VA = "0xDB514C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600041F")]
		[Address(RVA = "0xDB51E8", Offset = "0xDB51E8", VA = "0xDB51E8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0xDB52AC", Offset = "0xDB52AC", VA = "0xDB52AC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000422")]
		[Address(RVA = "0xDB5348", Offset = "0xDB5348", VA = "0xDB5348")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x6000423")]
		[Address(RVA = "0xDB53E4", Offset = "0xDB53E4", VA = "0xDB53E4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000424")]
		[Address(RVA = "0xDB5494", Offset = "0xDB5494", VA = "0xDB5494")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x6000426")]
		[Address(RVA = "0xDB5560", Offset = "0xDB5560", VA = "0xDB5560")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000427")]
		[Address(RVA = "0xDB55FC", Offset = "0xDB55FC", VA = "0xDB55FC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x6000429")]
		[Address(RVA = "0xDB5734", Offset = "0xDB5734", VA = "0xDB5734")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600042A")]
		[Address(RVA = "0xDB57D0", Offset = "0xDB57D0", VA = "0xDB57D0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x600042C")]
		[Address(RVA = "0xDB5908", Offset = "0xDB5908", VA = "0xDB5908")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600042D")]
		[Address(RVA = "0xDB59A4", Offset = "0xDB59A4", VA = "0xDB59A4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x600042F")]
		[Address(RVA = "0xDB5ADC", Offset = "0xDB5ADC", VA = "0xDB5ADC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000430")]
		[Address(RVA = "0xDB5B78", Offset = "0xDB5B78", VA = "0xDB5B78")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x6000432")]
		[Address(RVA = "0xDB5CB0", Offset = "0xDB5CB0", VA = "0xDB5CB0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000433")]
		[Address(RVA = "0xDB5D4C", Offset = "0xDB5D4C", VA = "0xDB5D4C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x6000435")]
		[Address(RVA = "0xDB5E84", Offset = "0xDB5E84", VA = "0xDB5E84")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000436")]
		[Address(RVA = "0xDB5F20", Offset = "0xDB5F20", VA = "0xDB5F20")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event Action<Transform, UnityEngine.Vector3, UnityEngine.Quaternion> Teleported
	{
		[Token(Token = "0x6000438")]
		[Address(RVA = "0xDB6058", Offset = "0xDB6058", VA = "0xDB6058")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000439")]
		[Address(RVA = "0xDB6108", Offset = "0xDB6108", VA = "0xDB6108")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xDB4880", Offset = "0xDB4880", VA = "0xDB4880")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xDB48A4", Offset = "0xDB48A4", VA = "0xDB48A4")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xDB4A38", Offset = "0xDB4A38", VA = "0xDB4A38")]
	public void OnUpdateTeleportDestination(bool isValidDestination, UnityEngine.Vector3? position, UnityEngine.Quaternion? rotation, UnityEngine.Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xDB4AD4", Offset = "0xDB4AD4", VA = "0xDB4AD4")]
	public bool AimCollisionTest(UnityEngine.Vector3 start, UnityEngine.Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xDB4D9C", Offset = "0xDB4D9C", VA = "0xDB4D9C")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xDB4E44", Offset = "0xDB4E44", VA = "0xDB4E44")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xDB4F30", Offset = "0xDB4F30", VA = "0xDB4F30")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xDB4F6C", Offset = "0xDB4F6C", VA = "0xDB4F6C")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xDB501C", Offset = "0xDB501C", VA = "0xDB501C")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xDB504C", Offset = "0xDB504C", VA = "0xDB504C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xDB50AC", Offset = "0xDB50AC", VA = "0xDB50AC", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xDB5144", Offset = "0xDB5144", VA = "0xDB5144", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xDB50D0", Offset = "0xDB50D0", VA = "0xDB50D0")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xDB5544", Offset = "0xDB5544", VA = "0xDB5544")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xDB5698", Offset = "0xDB5698", VA = "0xDB5698")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xDB586C", Offset = "0xDB586C", VA = "0xDB586C")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xDB5A40", Offset = "0xDB5A40", VA = "0xDB5A40")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xDB5C14", Offset = "0xDB5C14", VA = "0xDB5C14")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xDB5DE8", Offset = "0xDB5DE8", VA = "0xDB5DE8")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xDB5FBC", Offset = "0xDB5FBC", VA = "0xDB5FBC")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xDB61B8", Offset = "0xDB61B8", VA = "0xDB61B8")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xDB62CC", Offset = "0xDB62CC", VA = "0xDB62CC")]
	public UnityEngine.Vector3 GetCharacterPosition()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xDB62FC", Offset = "0xDB62FC", VA = "0xDB62FC")]
	public UnityEngine.Quaternion GetHeadRotationY()
	{
		return default(UnityEngine.Quaternion);
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xDB6438", Offset = "0xDB6438", VA = "0xDB6438")]
	public void DoWarp(UnityEngine.Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xDB6520", Offset = "0xDB6520", VA = "0xDB6520")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x2000126")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000D")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x600046D")]
		[Address(RVA = "0xDB3934", Offset = "0xDB3934", VA = "0xDB3934")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600046E")]
		[Address(RVA = "0xDB3A58", Offset = "0xDB3A58", VA = "0xDB3A58")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x600046F")]
		[Address(RVA = "0xDB6EE8", Offset = "0xDB6EE8", VA = "0xDB6EE8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000470")]
		[Address(RVA = "0xDB6F84", Offset = "0xDB6F84", VA = "0xDB6F84")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xDB7020", Offset = "0xDB7020", VA = "0xDB7020")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xDB7100", Offset = "0xDB7100", VA = "0xDB7100")]
	private void Start()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xDB7104", Offset = "0xDB7104", VA = "0xDB7104")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xDB7178", Offset = "0xDB7178", VA = "0xDB7178")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xDB729C", Offset = "0xDB729C", VA = "0xDB729C")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xDB7514", Offset = "0xDB7514", VA = "0xDB7514")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xDB7734", Offset = "0xDB7734", VA = "0xDB7734")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x2000127")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x6000478")]
	[Address(RVA = "0xDB7754", Offset = "0xDB7754", VA = "0xDB7754", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xDB77E4", Offset = "0xDB77E4", VA = "0xDB77E4", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600047A")]
	public abstract void GetPoints(List<UnityEngine.Vector3> points);

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xDB78B4", Offset = "0xDB78B4", VA = "0xDB78B4")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x2000128")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xDB78C4", Offset = "0xDB78C4", VA = "0xDB78C4", Slot = "8")]
	public override void GetPoints(List<UnityEngine.Vector3> points)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xDB7A54", Offset = "0xDB7A54", VA = "0xDB7A54")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x2000129")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	[Range(0.001f, 50f)]
	public float AimVelocity;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0.001f, 1f)]
	[UnityEngine.Tooltip("The AimStep is the how much to subdivide the iteration.")]
	public float AimStep;

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xDB7A64", Offset = "0xDB7A64", VA = "0xDB7A64", Slot = "8")]
	public override void GetPoints(List<UnityEngine.Vector3> points)
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xDB7C38", Offset = "0xDB7C38", VA = "0xDB7C38")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x200012A")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3[] _linePoints;

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xDB7C4C", Offset = "0xDB7C4C", VA = "0xDB7C4C")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xDB7D78", Offset = "0xDB7D78", VA = "0xDB7D78")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xDB7DA4", Offset = "0xDB7DA4", VA = "0xDB7DA4")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xDB7DD0", Offset = "0xDB7DD0", VA = "0xDB7DD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xDB7E74", Offset = "0xDB7E74", VA = "0xDB7E74", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xDB7EC8", Offset = "0xDB7EC8", VA = "0xDB7EC8", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xDB7F18", Offset = "0xDB7F18", VA = "0xDB7F18")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x200012B")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[UnityEngine.Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public UnityEngine.Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, UnityEngine.Vector3?, UnityEngine.Quaternion?, UnityEngine.Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x1700006B")]
	public bool IsValidDestination
	{
		[Token(Token = "0x6000487")]
		[Address(RVA = "0xDB8014", Offset = "0xDB8014", VA = "0xDB8014")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000488")]
		[Address(RVA = "0xDB801C", Offset = "0xDB801C", VA = "0xDB801C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x600048D")]
		[Address(RVA = "0xDB81A4", Offset = "0xDB81A4", VA = "0xDB81A4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600048E")]
		[Address(RVA = "0xDB8254", Offset = "0xDB8254", VA = "0xDB8254")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xDB8028", Offset = "0xDB8028", VA = "0xDB8028")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xDB80AC", Offset = "0xDB80AC", VA = "0xDB80AC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xDB8170", Offset = "0xDB8170", VA = "0xDB8170")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xDB81A0", Offset = "0xDB81A0", VA = "0xDB81A0")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xDB4F48", Offset = "0xDB4F48", VA = "0xDB4F48")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xDB8304", Offset = "0xDB8304", VA = "0xDB8304")]
	public void Recycle()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xDB8320", Offset = "0xDB8320", VA = "0xDB8320", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, UnityEngine.Vector3? position, UnityEngine.Quaternion? rotation, UnityEngine.Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x200012C")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x200012D")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700006C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600049E")]
			[Address(RVA = "0xDB88E8", Offset = "0xDB88E8", VA = "0xDB88E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004A0")]
			[Address(RVA = "0xDB8930", Offset = "0xDB8930", VA = "0xDB8930", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xDB8754", Offset = "0xDB8754", VA = "0xDB8754")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xDB8858", Offset = "0xDB8858", VA = "0xDB8858", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xDB885C", Offset = "0xDB885C", VA = "0xDB885C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xDB88F0", Offset = "0xDB88F0", VA = "0xDB88F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200012E")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700006E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004A4")]
			[Address(RVA = "0xDB89D4", Offset = "0xDB89D4", VA = "0xDB89D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004A6")]
			[Address(RVA = "0xDB8A1C", Offset = "0xDB8A1C", VA = "0xDB8A1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xDB87F0", Offset = "0xDB87F0", VA = "0xDB87F0")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xDB8938", Offset = "0xDB8938", VA = "0xDB8938", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xDB893C", Offset = "0xDB893C", VA = "0xDB893C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xDB89DC", Offset = "0xDB89DC", VA = "0xDB89DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xDB8514", Offset = "0xDB8514", VA = "0xDB8514")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xDB85E8", Offset = "0xDB85E8", VA = "0xDB85E8", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xDB8634", Offset = "0xDB8634", VA = "0xDB8634", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xDB86E0", Offset = "0xDB86E0", VA = "0xDB86E0")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xDB877C", Offset = "0xDB877C", VA = "0xDB877C")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000497")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x6000498")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x200012F")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x17000070")]
	public Transform Pointer
	{
		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xDB8A24", Offset = "0xDB8A24", VA = "0xDB8A24")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xDB8A2C", Offset = "0xDB8A2C", VA = "0xDB8A2C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xDB8A34", Offset = "0xDB8A34", VA = "0xDB8A34", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xDB8B60", Offset = "0xDB8B60", VA = "0xDB8B60", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xDB8C14", Offset = "0xDB8C14", VA = "0xDB8C14")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x2000130")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x2000131")]
	public enum InputModes
	{
		[Token(Token = "0x400071E")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x400071F")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x4000720")]
		ThumbstickTeleport,
		[Token(Token = "0x4000721")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x2000132")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x4000723")]
		A,
		[Token(Token = "0x4000724")]
		B,
		[Token(Token = "0x4000725")]
		LeftTrigger,
		[Token(Token = "0x4000726")]
		LeftThumbstick,
		[Token(Token = "0x4000727")]
		RightTrigger,
		[Token(Token = "0x4000728")]
		RightThumbstick,
		[Token(Token = "0x4000729")]
		X,
		[Token(Token = "0x400072A")]
		Y
	}

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[UnityEngine.Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[UnityEngine.Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[UnityEngine.Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[UnityEngine.Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xDB8C18", Offset = "0xDB8C18", VA = "0xDB8C18")]
	private void Start()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xDB8C1C", Offset = "0xDB8C1C", VA = "0xDB8C1C", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xDB9050", Offset = "0xDB9050", VA = "0xDB9050", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xDB910C", Offset = "0xDB910C", VA = "0xDB910C")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x2000133")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x2000134")]
	public enum OrientationModes
	{
		[Token(Token = "0x400072F")]
		HeadRelative,
		[Token(Token = "0x4000730")]
		ForwardFacing
	}

	[Token(Token = "0x2000135")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004BC")]
			[Address(RVA = "0xDB95BC", Offset = "0xDB95BC", VA = "0xDB95BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004BE")]
			[Address(RVA = "0xDB9604", Offset = "0xDB9604", VA = "0xDB9604", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xDB93CC", Offset = "0xDB93CC", VA = "0xDB93CC")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xDB950C", Offset = "0xDB950C", VA = "0xDB950C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xDB9510", Offset = "0xDB9510", VA = "0xDB9510", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xDB95C4", Offset = "0xDB95C4", VA = "0xDB95C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xDB91FC", Offset = "0xDB91FC", VA = "0xDB91FC")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xDB92E4", Offset = "0xDB92E4", VA = "0xDB92E4")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xDB92EC", Offset = "0xDB92EC", VA = "0xDB92EC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xDB9324", Offset = "0xDB9324", VA = "0xDB9324", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xDB9358", Offset = "0xDB9358", VA = "0xDB9358")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60004B5")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x60004B6")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xDB93F4", Offset = "0xDB93F4", VA = "0xDB93F4")]
	protected UnityEngine.Quaternion GetLandingOrientation(OrientationModes mode, UnityEngine.Quaternion rotation)
	{
		return default(UnityEngine.Quaternion);
	}
}
[Token(Token = "0x2000136")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xDB960C", Offset = "0xDB960C", VA = "0xDB960C", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xDB9610", Offset = "0xDB9610", VA = "0xDB9610", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xDB96B8", Offset = "0xDB96B8", VA = "0xDB96B8")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x2000137")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[UnityEngine.Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Quaternion _initialRotation;

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xDB96BC", Offset = "0xDB96BC", VA = "0xDB96BC", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xDB970C", Offset = "0xDB970C", VA = "0xDB970C", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xDB9BD0", Offset = "0xDB9BD0", VA = "0xDB9BD0")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x2000138")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private UnityEngine.Quaternion _initialRotation;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private UnityEngine.Quaternion _currentRotation;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private UnityEngine.Vector2 _lastValidDirection;

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xDB9BD4", Offset = "0xDB9BD4", VA = "0xDB9BD4", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xDB9C08", Offset = "0xDB9C08", VA = "0xDB9C08", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xDBA104", Offset = "0xDBA104", VA = "0xDBA104")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x2000139")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xDBA114", Offset = "0xDBA114", VA = "0xDBA114")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xDBA118", Offset = "0xDBA118", VA = "0xDBA118")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xDBA120", Offset = "0xDBA120", VA = "0xDBA120")]
	private void Update()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xDBA20C", Offset = "0xDBA20C", VA = "0xDBA20C")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xDBA228", Offset = "0xDBA228", VA = "0xDBA228")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x200013A")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000073")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xDBA240", Offset = "0xDBA240", VA = "0xDBA240")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xDBA248", Offset = "0xDBA248", VA = "0xDBA248")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xDB777C", Offset = "0xDB777C", VA = "0xDB777C", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xDB788C", Offset = "0xDB788C", VA = "0xDB788C", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xDBA250", Offset = "0xDBA250", VA = "0xDBA250")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xDB7EBC", Offset = "0xDB7EBC", VA = "0xDB7EBC", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xDB7F10", Offset = "0xDB7F10", VA = "0xDB7F10", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xDB78BC", Offset = "0xDB78BC", VA = "0xDB78BC")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x200013B")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x200013C")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x17000074")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004E0")]
			[Address(RVA = "0xDBA940", Offset = "0xDBA940", VA = "0xDBA940", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004E2")]
			[Address(RVA = "0xDBA988", Offset = "0xDBA988", VA = "0xDBA988", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xDBA4F8", Offset = "0xDBA4F8", VA = "0xDBA4F8")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xDBA674", Offset = "0xDBA674", VA = "0xDBA674", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xDBA678", Offset = "0xDBA678", VA = "0xDBA678", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xDBA948", Offset = "0xDBA948", VA = "0xDBA948", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<UnityEngine.Vector3> _aimPoints;

	[Token(Token = "0x400074A")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xDBA320", Offset = "0xDBA320", VA = "0xDBA320")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xDBA438", Offset = "0xDBA438", VA = "0xDBA438", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0xDBA460", Offset = "0xDBA460", VA = "0xDBA460", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xDBA484", Offset = "0xDBA484", VA = "0xDBA484")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xDBA520", Offset = "0xDBA520", VA = "0xDBA520", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x60004DA")]
	protected abstract bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end);

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0xDBA538", Offset = "0xDBA538", VA = "0xDBA538", Slot = "10")]
	public virtual UnityEngine.Vector3? ConsiderDestination(UnityEngine.Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x200013D")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xDBA990", Offset = "0xDBA990", VA = "0xDBA990")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xDBA9F8", Offset = "0xDBA9F8", VA = "0xDBA9F8", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xDBAB60", Offset = "0xDBAB60", VA = "0xDBAB60", Slot = "10")]
	public override UnityEngine.Vector3? ConsiderDestination(UnityEngine.Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xDBAC4C", Offset = "0xDBAC4C", VA = "0xDBAC4C")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xDBAC50", Offset = "0xDBAC50", VA = "0xDBAC50")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x200013E")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[UnityEngine.Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xDBAC5C", Offset = "0xDBAC5C", VA = "0xDBAC5C", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xDBAE54", Offset = "0xDBAE54", VA = "0xDBAE54")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x200013F")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xDBAE60", Offset = "0xDBAE60", VA = "0xDBAE60", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xDBAFC8", Offset = "0xDBAFC8", VA = "0xDBAFC8")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x2000140")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xDBAFCC", Offset = "0xDBAFCC", VA = "0xDBAFCC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xDBB050", Offset = "0xDBB050", VA = "0xDBB050", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60004EE")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xDBB0D0", Offset = "0xDBB0D0", VA = "0xDBB0D0")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x2000141")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x2000142")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000076")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004F6")]
			[Address(RVA = "0xDBB434", Offset = "0xDBB434", VA = "0xDBB434", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004F8")]
			[Address(RVA = "0xDBB47C", Offset = "0xDBB47C", VA = "0xDBB47C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xDBB16C", Offset = "0xDBB16C", VA = "0xDBB16C")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xDBB330", Offset = "0xDBB330", VA = "0xDBB330", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xDBB334", Offset = "0xDBB334", VA = "0xDBB334", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xDBB43C", Offset = "0xDBB43C", VA = "0xDBB43C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 2f)]
	[UnityEngine.Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	public float TransitionDuration;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	[Range(0f, 1f)]
	public float TeleportDelay;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xDBB0D8", Offset = "0xDBB0D8", VA = "0xDBB0D8", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xDBB0F8", Offset = "0xDBB0F8", VA = "0xDBB0F8")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xDBB194", Offset = "0xDBB194", VA = "0xDBB194")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x2000143")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xDBB484", Offset = "0xDBB484", VA = "0xDBB484", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xDBB49C", Offset = "0xDBB49C", VA = "0xDBB49C")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x2000144")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x2000145")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <startPosition>5__2;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000501")]
			[Address(RVA = "0xDBB6C0", Offset = "0xDBB6C0", VA = "0xDBB6C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000503")]
			[Address(RVA = "0xDBB708", Offset = "0xDBB708", VA = "0xDBB708", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xDBB538", Offset = "0xDBB538", VA = "0xDBB538")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xDBB5A8", Offset = "0xDBB5A8", VA = "0xDBB5A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0xDBB5AC", Offset = "0xDBB5AC", VA = "0xDBB5AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0xDBB6C8", Offset = "0xDBB6C8", VA = "0xDBB6C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[UnityEngine.Tooltip("How much time the warp transition takes to complete.")]
	[Range(0.01f, 1f)]
	public float TransitionDuration;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xDBB4A4", Offset = "0xDBB4A4", VA = "0xDBB4A4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xDBB4C4", Offset = "0xDBB4C4", VA = "0xDBB4C4")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xDBB560", Offset = "0xDBB560", VA = "0xDBB560")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x2000146")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x2000147")]
	public enum PlabackState
	{
		[Token(Token = "0x400077A")]
		Idle = 1,
		[Token(Token = "0x400077B")]
		Preparing,
		[Token(Token = "0x400077C")]
		Buffering,
		[Token(Token = "0x400077D")]
		Ready,
		[Token(Token = "0x400077E")]
		Ended
	}

	[Token(Token = "0x2000148")]
	public enum StereoMode
	{
		[Token(Token = "0x4000780")]
		Unknown = -1,
		[Token(Token = "0x4000781")]
		Mono,
		[Token(Token = "0x4000782")]
		TopBottom,
		[Token(Token = "0x4000783")]
		LeftRight,
		[Token(Token = "0x4000784")]
		Mesh
	}

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x1700007A")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000504")]
		[Address(RVA = "0xDBB710", Offset = "0xDBB710", VA = "0xDBB710")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700007B")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000505")]
		[Address(RVA = "0xDBBA00", Offset = "0xDBBA00", VA = "0xDBBA00")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700007C")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000506")]
		[Address(RVA = "0xDBBC80", Offset = "0xDBBC80", VA = "0xDBBC80")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007D")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000507")]
		[Address(RVA = "0xDBBCF4", Offset = "0xDBBCF4", VA = "0xDBBCF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007E")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x6000508")]
		[Address(RVA = "0xDBBDF8", Offset = "0xDBBDF8", VA = "0xDBBDF8")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700007F")]
	public static long Duration
	{
		[Token(Token = "0x6000509")]
		[Address(RVA = "0xDBBF00", Offset = "0xDBBF00", VA = "0xDBBF00")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000080")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x600050A")]
		[Address(RVA = "0xDBC008", Offset = "0xDBC008", VA = "0xDBC008")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000081")]
	public static int VideoWidth
	{
		[Token(Token = "0x600050B")]
		[Address(RVA = "0xDBC110", Offset = "0xDBC110", VA = "0xDBC110")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000082")]
	public static int VideoHeight
	{
		[Token(Token = "0x600050C")]
		[Address(RVA = "0xDBC218", Offset = "0xDBC218", VA = "0xDBC218")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000083")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x600050D")]
		[Address(RVA = "0xDBC320", Offset = "0xDBC320", VA = "0xDBC320")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600050E")]
		[Address(RVA = "0xDBC428", Offset = "0xDBC428", VA = "0xDBC428")]
		set
		{
		}
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xDBC590", Offset = "0xDBC590", VA = "0xDBC590")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xDBC7A8", Offset = "0xDBC7A8", VA = "0xDBC7A8")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xDBC8B0", Offset = "0xDBC8B0", VA = "0xDBC8B0")]
	public static void Play()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xDBC9B8", Offset = "0xDBC9B8", VA = "0xDBC9B8")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xDBCAC0", Offset = "0xDBCAC0", VA = "0xDBCAC0")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xDBCC30", Offset = "0xDBCC30", VA = "0xDBCC30")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xDBCD9C", Offset = "0xDBCD9C", VA = "0xDBCD9C")]
	public static void SetListenerRotation(UnityEngine.Quaternion rotation)
	{
	}
}
[Token(Token = "0x2000149")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x14000010")]
	public event Action onButtonDown
	{
		[Token(Token = "0x6000517")]
		[Address(RVA = "0xDBCFF0", Offset = "0xDBCFF0", VA = "0xDBCFF0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000518")]
		[Address(RVA = "0xDBD08C", Offset = "0xDBD08C", VA = "0xDBD08C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xDBD128", Offset = "0xDBD128", VA = "0xDBD128", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xDBD144", Offset = "0xDBD144", VA = "0xDBD144")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x200014A")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x200014B")]
	public enum ButtonType
	{
		[Token(Token = "0x4000788")]
		Play,
		[Token(Token = "0x4000789")]
		Pause,
		[Token(Token = "0x400078A")]
		FastForward,
		[Token(Token = "0x400078B")]
		Rewind,
		[Token(Token = "0x400078C")]
		SkipForward,
		[Token(Token = "0x400078D")]
		SkipBack,
		[Token(Token = "0x400078E")]
		Stop
	}

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000084")]
	public ButtonType buttonType
	{
		[Token(Token = "0x600051B")]
		[Address(RVA = "0xDBD14C", Offset = "0xDBD14C", VA = "0xDBD14C")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x600051C")]
		[Address(RVA = "0xDBD154", Offset = "0xDBD154", VA = "0xDBD154")]
		set
		{
		}
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xDBD178", Offset = "0xDBD178", VA = "0xDBD178", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xDBDFCC", Offset = "0xDBDFCC", VA = "0xDBDFCC")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x200014C")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x200014D")]
	public enum VideoShape
	{
		[Token(Token = "0x40007A3")]
		_360,
		[Token(Token = "0x40007A4")]
		_180,
		[Token(Token = "0x40007A5")]
		Quad
	}

	[Token(Token = "0x200014E")]
	public enum VideoStereo
	{
		[Token(Token = "0x40007A7")]
		Mono,
		[Token(Token = "0x40007A8")]
		TopBottom,
		[Token(Token = "0x40007A9")]
		LeftRight,
		[Token(Token = "0x40007AA")]
		BottomTop
	}

	[Token(Token = "0x200014F")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000535")]
			[Address(RVA = "0xDBF4F4", Offset = "0xDBF4F4", VA = "0xDBF4F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000537")]
			[Address(RVA = "0xDBF53C", Offset = "0xDBF53C", VA = "0xDBF53C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xDBE6B0", Offset = "0xDBE6B0", VA = "0xDBE6B0")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xDBF348", Offset = "0xDBF348", VA = "0xDBF348", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xDBF34C", Offset = "0xDBF34C", VA = "0xDBF34C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xDBF4FC", Offset = "0xDBF4FC", VA = "0xDBF4FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000085")]
	public bool IsPlaying
	{
		[Token(Token = "0x600051F")]
		[Address(RVA = "0xDBE024", Offset = "0xDBE024", VA = "0xDBE024")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000520")]
		[Address(RVA = "0xDBE02C", Offset = "0xDBE02C", VA = "0xDBE02C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000086")]
	public long Duration
	{
		[Token(Token = "0x6000521")]
		[Address(RVA = "0xDBE038", Offset = "0xDBE038", VA = "0xDBE038")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000522")]
		[Address(RVA = "0xDBE040", Offset = "0xDBE040", VA = "0xDBE040")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000087")]
	public long PlaybackPosition
	{
		[Token(Token = "0x6000523")]
		[Address(RVA = "0xDBE048", Offset = "0xDBE048", VA = "0xDBE048")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000524")]
		[Address(RVA = "0xDBE050", Offset = "0xDBE050", VA = "0xDBE050")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xDBE058", Offset = "0xDBE058", VA = "0xDBE058")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xDBE2DC", Offset = "0xDBE2DC", VA = "0xDBE2DC")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xDBE33C", Offset = "0xDBE33C", VA = "0xDBE33C")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xDBE63C", Offset = "0xDBE63C", VA = "0xDBE63C")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xDBE6D8", Offset = "0xDBE6D8", VA = "0xDBE6D8")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xDBE9B0", Offset = "0xDBE9B0", VA = "0xDBE9B0")]
	public void Play()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xDBEA34", Offset = "0xDBEA34", VA = "0xDBEA34")]
	public void Pause()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xDBEAB4", Offset = "0xDBEAB4", VA = "0xDBEAB4")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xDBEBA0", Offset = "0xDBEBA0", VA = "0xDBEBA0")]
	private void Update()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xDBF13C", Offset = "0xDBF13C", VA = "0xDBF13C")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xDBF1D8", Offset = "0xDBF1D8", VA = "0xDBF1D8")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xDBF258", Offset = "0xDBF258", VA = "0xDBF258")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xDBF338", Offset = "0xDBF338", VA = "0xDBF338")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x2000151")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x2000152")]
	private enum PlaybackState
	{
		[Token(Token = "0x40007C7")]
		Playing,
		[Token(Token = "0x40007C8")]
		Paused,
		[Token(Token = "0x40007C9")]
		Rewinding,
		[Token(Token = "0x40007CA")]
		FastForwarding
	}

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject LeftHand;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject RightHand;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.UI.Slider ProgressBar;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xDBF618", Offset = "0xDBF618", VA = "0xDBF618")]
	private void Start()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xDBF944", Offset = "0xDBF944", VA = "0xDBF944")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xDBFB14", Offset = "0xDBFB14", VA = "0xDBFB14")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xDBFC38", Offset = "0xDBFC38", VA = "0xDBFC38")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xDBFD34", Offset = "0xDBFD34", VA = "0xDBFD34")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xDBFC0C", Offset = "0xDBFC0C", VA = "0xDBFC0C")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xDBFD94", Offset = "0xDBFD94", VA = "0xDBFD94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xDBF844", Offset = "0xDBF844", VA = "0xDBF844")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xDC00C4", Offset = "0xDC00C4", VA = "0xDC00C4")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x2000153")]
public static class VectorUtil
{
	[Token(Token = "0x6000543")]
	[Address(RVA = "0xDBF0C4", Offset = "0xDBF0C4", VA = "0xDBF0C4")]
	public static UnityEngine.Vector4 ToVector(this UnityEngine.Rect rect)
	{
		return default(UnityEngine.Vector4);
	}
}
[Token(Token = "0x2000154")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x40007CB")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x40007CC")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xDC00D4", Offset = "0xDC00D4", VA = "0xDC00D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xDC06F4", Offset = "0xDC06F4", VA = "0xDC06F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xDC0948", Offset = "0xDC0948", VA = "0xDC0948")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xDC0AAC", Offset = "0xDC0AAC", VA = "0xDC0AAC")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xDC0C14", Offset = "0xDC0C14", VA = "0xDC0C14")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xDC0D98", Offset = "0xDC0D98", VA = "0xDC0D98")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x2000155")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x40007D5")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xDC0DA8", Offset = "0xDC0DA8", VA = "0xDC0DA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xDC0E00", Offset = "0xDC0E00", VA = "0xDC0E00")]
	private void Start()
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xDC0E04", Offset = "0xDC0E04", VA = "0xDC0E04")]
	private void Update()
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xDC049C", Offset = "0xDC049C", VA = "0xDC049C")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xDC0E08", Offset = "0xDC0E08", VA = "0xDC0E08")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xDC1024", Offset = "0xDC1024", VA = "0xDC1024")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x2000156")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xDC102C", Offset = "0xDC102C", VA = "0xDC102C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xDC1534", Offset = "0xDC1534", VA = "0xDC1534")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xDC15E0", Offset = "0xDC15E0", VA = "0xDC15E0")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xDC1870", Offset = "0xDC1870", VA = "0xDC1870")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xDC1944", Offset = "0xDC1944", VA = "0xDC1944")]
	private void Update()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xDC1A14", Offset = "0xDC1A14", VA = "0xDC1A14")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xDC1A7C", Offset = "0xDC1A7C", VA = "0xDC1A7C")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x2000157")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x600055B")]
	[Address(RVA = "0xDC1C24", Offset = "0xDC1C24", VA = "0xDC1C24")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x2000158")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xDC1C2C", Offset = "0xDC1C2C", VA = "0xDC1C2C")]
	private void Start()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xDC1CC4", Offset = "0xDC1CC4", VA = "0xDC1CC4")]
	private void Update()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xDC1D9C", Offset = "0xDC1D9C", VA = "0xDC1D9C")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xDC1DF8", Offset = "0xDC1DF8", VA = "0xDC1DF8")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x2000159")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x6000560")]
	[Address(RVA = "0xDC1E00", Offset = "0xDC1E00", VA = "0xDC1E00")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x200015A")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x200015B")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x1700008A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000568")]
			[Address(RVA = "0xDC2210", Offset = "0xDC2210", VA = "0xDC2210", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600056A")]
			[Address(RVA = "0xDC2258", Offset = "0xDC2258", VA = "0xDC2258", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xDC20AC", Offset = "0xDC20AC", VA = "0xDC20AC")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xDC20DC", Offset = "0xDC20DC", VA = "0xDC20DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xDC20E0", Offset = "0xDC20E0", VA = "0xDC20E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0xDC2218", Offset = "0xDC2218", VA = "0xDC2218", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.GameObject _notificationPrefab;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.GameObject _notification;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xDC1E08", Offset = "0xDC1E08", VA = "0xDC1E08")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xDC1F14", Offset = "0xDC1F14", VA = "0xDC1F14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xDC1EA0", Offset = "0xDC1EA0", VA = "0xDC1EA0")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xDC20D4", Offset = "0xDC20D4", VA = "0xDC20D4")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x200015C")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector3[] _vertices;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xDC2260", Offset = "0xDC2260", VA = "0xDC2260")]
	private void Update()
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xDC3C08", Offset = "0xDC3C08", VA = "0xDC3C08")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x200015D")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x1700008C")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x600056D")]
		[Address(RVA = "0xDC3C10", Offset = "0xDC3C10", VA = "0xDC3C10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xDC3C60", Offset = "0xDC3C60", VA = "0xDC3C60")]
	public void Start()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xDC4098", Offset = "0xDC4098", VA = "0xDC4098")]
	public void Update()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xDC4170", Offset = "0xDC4170", VA = "0xDC4170")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x6000571")]
	public static TActivate ActivateCategory<TCategory, TActivate>(UnityEngine.GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000572")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x6000573")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x6000574")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x6000575")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x6000576")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x6000577")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x6000578")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xDC41C8", Offset = "0xDC41C8", VA = "0xDC41C8")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xDC4208", Offset = "0xDC4208", VA = "0xDC4208")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xDC4274", Offset = "0xDC4274", VA = "0xDC4274")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xDC43C0", Offset = "0xDC43C0", VA = "0xDC43C0")]
	protected UnityEngine.GameObject AddInstance(UnityEngine.GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xDC4490", Offset = "0xDC4490", VA = "0xDC4490")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xDC3F74", Offset = "0xDC3F74", VA = "0xDC3F74")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xDC4560", Offset = "0xDC4560", VA = "0xDC4560")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xDC45AC", Offset = "0xDC45AC", VA = "0xDC45AC")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xDC46BC", Offset = "0xDC46BC", VA = "0xDC46BC")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x200015E")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x200015F")]
	public enum DrawMode
	{
		[Token(Token = "0x4000804")]
		Opaque,
		[Token(Token = "0x4000805")]
		OpaqueWithClip,
		[Token(Token = "0x4000806")]
		TransparentDefaultAlpha,
		[Token(Token = "0x4000807")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private Shader _opaqueShader;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x1700008D")]
	public bool overlayEnabled
	{
		[Token(Token = "0x6000588")]
		[Address(RVA = "0xDC5D00", Offset = "0xDC5D00", VA = "0xDC5D00")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000589")]
		[Address(RVA = "0xDC5D84", Offset = "0xDC5D84", VA = "0xDC5D84")]
		set
		{
		}
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xDC46C4", Offset = "0xDC46C4", VA = "0xDC46C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xDC5388", Offset = "0xDC5388", VA = "0xDC5388")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xDC53FC", Offset = "0xDC53FC", VA = "0xDC53FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xDC54CC", Offset = "0xDC54CC", VA = "0xDC54CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xDC559C", Offset = "0xDC559C", VA = "0xDC559C", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xDC57A0", Offset = "0xDC57A0", VA = "0xDC57A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xDC5E40", Offset = "0xDC5E40", VA = "0xDC5E40")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x2000160")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xDC5EFC", Offset = "0xDC5EFC", VA = "0xDC5EFC")]
	private void Start()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xDC629C", Offset = "0xDC629C", VA = "0xDC629C")]
	private void Update()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xDC6430", Offset = "0xDC6430", VA = "0xDC6430")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xDC6438", Offset = "0xDC6438", VA = "0xDC6438")]
	public void Release()
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xDC6420", Offset = "0xDC6420", VA = "0xDC6420")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xDC6440", Offset = "0xDC6440", VA = "0xDC6440")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x2000161")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x2000162")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public UnityEngine.Color newColor;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Color <currentColor>5__3;

		[Token(Token = "0x1700008E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600059C")]
			[Address(RVA = "0xDC6B88", Offset = "0xDC6B88", VA = "0xDC6B88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600059E")]
			[Address(RVA = "0xDC6BD0", Offset = "0xDC6BD0", VA = "0xDC6BD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xDC6A2C", Offset = "0xDC6A2C", VA = "0xDC6A2C")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xDC6A84", Offset = "0xDC6A84", VA = "0xDC6A84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xDC6A88", Offset = "0xDC6A88", VA = "0xDC6A88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0xDC6B90", Offset = "0xDC6B90", VA = "0xDC6B90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000163")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Color newColor;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private UnityEngine.Color <currentColor>5__3;

		[Token(Token = "0x17000090")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005A2")]
			[Address(RVA = "0xDC6D54", Offset = "0xDC6D54", VA = "0xDC6D54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005A4")]
			[Address(RVA = "0xDC6D9C", Offset = "0xDC6D9C", VA = "0xDC6D9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0xDC6A54", Offset = "0xDC6A54", VA = "0xDC6A54")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xDC6BD8", Offset = "0xDC6BD8", VA = "0xDC6BD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xDC6BDC", Offset = "0xDC6BDC", VA = "0xDC6BDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xDC6D5C", Offset = "0xDC6D5C", VA = "0xDC6D5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xDC6448", Offset = "0xDC6448", VA = "0xDC6448")]
	private void Start()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xDC6728", Offset = "0xDC6728", VA = "0xDC6728")]
	private void Update()
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xDC6778", Offset = "0xDC6778", VA = "0xDC6778")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xDC68F0", Offset = "0xDC68F0", VA = "0xDC68F0")]
	public void Release()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xDC6994", Offset = "0xDC6994", VA = "0xDC6994")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(UnityEngine.Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xDC6830", Offset = "0xDC6830", VA = "0xDC6830")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(UnityEngine.Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xDC6A7C", Offset = "0xDC6A7C", VA = "0xDC6A7C")]
	public BrushController()
	{
	}
}
[Token(Token = "0x2000164")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xDC6DA4", Offset = "0xDC6DA4", VA = "0xDC6DA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xDC6DF8", Offset = "0xDC6DF8", VA = "0xDC6DF8")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x2000165")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject lightVolume;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject bulbGlow;

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xDC6E00", Offset = "0xDC6E00", VA = "0xDC6E00")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xDC6FD4", Offset = "0xDC6FD4", VA = "0xDC6FD4")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xDC7064", Offset = "0xDC7064", VA = "0xDC7064")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xDC70C0", Offset = "0xDC70C0", VA = "0xDC70C0")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x2000166")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x2000167")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Color newColor;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private UnityEngine.Color <currentColor>5__3;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x17000092")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005B7")]
			[Address(RVA = "0xDC8298", Offset = "0xDC8298", VA = "0xDC8298", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000093")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005B9")]
			[Address(RVA = "0xDC82E0", Offset = "0xDC82E0", VA = "0xDC82E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xDC8000", Offset = "0xDC8000", VA = "0xDC8000")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xDC80C8", Offset = "0xDC80C8", VA = "0xDC80C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xDC80CC", Offset = "0xDC80CC", VA = "0xDC80CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xDC82A0", Offset = "0xDC82A0", VA = "0xDC82A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 localPosition;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Quaternion localRotation;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xDC70C8", Offset = "0xDC70C8", VA = "0xDC70C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xDC73B0", Offset = "0xDC73B0", VA = "0xDC73B0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xDC769C", Offset = "0xDC769C", VA = "0xDC769C")]
	private void FindHands()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xDC79C4", Offset = "0xDC79C4", VA = "0xDC79C4")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xDC7C9C", Offset = "0xDC7C9C", VA = "0xDC7C9C")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xDC7D84", Offset = "0xDC7D84", VA = "0xDC7D84")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xDC7F1C", Offset = "0xDC7F1C", VA = "0xDC7F1C")]
	public void Release()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xDC7E6C", Offset = "0xDC7E6C", VA = "0xDC7E6C")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(UnityEngine.Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xDC8028", Offset = "0xDC8028", VA = "0xDC8028")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x2000168")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x2000169")]
	public enum ManipulationType
	{
		[Token(Token = "0x400083C")]
		Default,
		[Token(Token = "0x400083D")]
		ForcedHand,
		[Token(Token = "0x400083E")]
		DollyHand,
		[Token(Token = "0x400083F")]
		DollyAttached,
		[Token(Token = "0x4000840")]
		HorizontalScaled,
		[Token(Token = "0x4000841")]
		VerticalScaled,
		[Token(Token = "0x4000842")]
		Menu
	}

	[Token(Token = "0x200016A")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x200016B")]
	public delegate void ReleasedObject();

	[Token(Token = "0x200016C")]
	public delegate void SetCursorPosition(UnityEngine.Vector3 cursorPosition);

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public UnityEngine.Quaternion grabbedRotation;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xDC82E8", Offset = "0xDC82E8", VA = "0xDC82E8")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xDC8348", Offset = "0xDC8348", VA = "0xDC8348")]
	public void Release()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xDC8364", Offset = "0xDC8364", VA = "0xDC8364")]
	public void CursorPos(UnityEngine.Vector3 cursorPos)
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xDC8380", Offset = "0xDC8380", VA = "0xDC8380")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x200016D")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[UnityEngine.Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[UnityEngine.Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[UnityEngine.Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.GameObject maskMeshObject;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3[] handVertices;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.Vector2[] handUVs;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private UnityEngine.Color32[] handColors;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xDC8638", Offset = "0xDC8638", VA = "0xDC8638")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xDC8898", Offset = "0xDC8898", VA = "0xDC8898")]
	private void Update()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xDC8A60", Offset = "0xDC8A60", VA = "0xDC8A60")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xDC90B4", Offset = "0xDC90B4", VA = "0xDC90B4")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, UnityEngine.Vector3 point1, UnityEngine.Vector3 point2)
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xDC964C", Offset = "0xDC964C", VA = "0xDC964C")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xDCB954", Offset = "0xDCB954", VA = "0xDCB954")]
	private void AddVertex(UnityEngine.Vector3 position, UnityEngine.Vector2 uv, UnityEngine.Color color)
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xDCBCC8", Offset = "0xDCBCC8", VA = "0xDCBCC8")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x200016E")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xDCBCEC", Offset = "0xDCBCEC", VA = "0xDCBCEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xDCC054", Offset = "0xDCC054", VA = "0xDCC054")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xDCBD88", Offset = "0xDCBD88", VA = "0xDCBD88")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xDCC4BC", Offset = "0xDCC4BC", VA = "0xDCC4BC")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xDCCA2C", Offset = "0xDCCA2C", VA = "0xDCCA2C")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x200016F")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x2000170")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x17000094")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005E5")]
			[Address(RVA = "0xDCF2D4", Offset = "0xDCF2D4", VA = "0xDCF2D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005E7")]
			[Address(RVA = "0xDCF31C", Offset = "0xDCF31C", VA = "0xDCF31C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0xDCEC14", Offset = "0xDCEC14", VA = "0xDCEC14")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0xDCEFFC", Offset = "0xDCEFFC", VA = "0xDCEFFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xDCF000", Offset = "0xDCF000", VA = "0xDCF000", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xDCF2DC", Offset = "0xDCF2DC", VA = "0xDCF2DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.GameObject hoverObject;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.GameObject grabObject;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Vector3 localGrabOffset;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Quaternion localGrabRotation;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 camGrabPosition;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private UnityEngine.Quaternion camGrabRotation;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private UnityEngine.Vector3 handGrabPosition;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private UnityEngine.Quaternion handGrabRotation;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private UnityEngine.Vector3 cursorPosition;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public UnityEngine.GameObject demoObjects;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xDCCA3C", Offset = "0xDCCA3C", VA = "0xDCCA3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xDCCC38", Offset = "0xDCCC38", VA = "0xDCCC38")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xDCDB74", Offset = "0xDCDB74", VA = "0xDCDB74")]
	private void GrabHoverObject(UnityEngine.GameObject grbObj, UnityEngine.Vector3 controllerPos, UnityEngine.Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xDCE908", Offset = "0xDCE908", VA = "0xDCE908")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xDCCBC4", Offset = "0xDCCBC4", VA = "0xDCCBC4")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xDCCE88", Offset = "0xDCCE88", VA = "0xDCCE88")]
	private void FindHoverObject(UnityEngine.Vector3 controllerPos, UnityEngine.Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xDCDE68", Offset = "0xDCDE68", VA = "0xDCDE68")]
	private void ManipulateObject(UnityEngine.GameObject obj, UnityEngine.Vector3 controllerPos, UnityEngine.Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xDCEC3C", Offset = "0xDCEC3C", VA = "0xDCEC3C")]
	private void ClampGrabOffset(ref UnityEngine.Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xDCECF0", Offset = "0xDCECF0", VA = "0xDCECF0")]
	private UnityEngine.Vector3 ClampScale(UnityEngine.Vector3 localScale, UnityEngine.Vector2 thumb)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xDCED20", Offset = "0xDCED20", VA = "0xDCED20")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xDCEAF8", Offset = "0xDCEAF8", VA = "0xDCEAF8")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xDCEE10", Offset = "0xDCEE10", VA = "0xDCEE10")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x2000171")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xDCF324", Offset = "0xDCF324", VA = "0xDCF324")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xDCF490", Offset = "0xDCF490", VA = "0xDCF490")]
	private void Update()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xDCF544", Offset = "0xDCF544", VA = "0xDCF544")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x2000172")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x2000173")]
	public enum BrushState
	{
		[Token(Token = "0x400087F")]
		Idle,
		[Token(Token = "0x4000880")]
		Inking
	}

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject lineSegmentPrefab;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject lineContainer;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<UnityEngine.Vector3> inkPositions;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xDCF54C", Offset = "0xDCF54C", VA = "0xDCF54C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xDCF554", Offset = "0xDCF554", VA = "0xDCF554")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xDCF804", Offset = "0xDCF804", VA = "0xDCF804")]
	private void StartLine(UnityEngine.Vector3 inkPos)
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xDCFA38", Offset = "0xDCFA38", VA = "0xDCFA38")]
	private void UpdateLine(UnityEngine.Vector3 inkPos)
	{
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xDCFC78", Offset = "0xDCFC78", VA = "0xDCFC78")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xDCF71C", Offset = "0xDCF71C", VA = "0xDCF71C")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xDCFD48", Offset = "0xDCFD48", VA = "0xDCFD48")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x2000174")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xDCFDE4", Offset = "0xDCFDE4", VA = "0xDCFDE4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xDCFF50", Offset = "0xDCFF50", VA = "0xDCFF50")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xDD0138", Offset = "0xDD0138", VA = "0xDD0138")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x2000175")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xDD0140", Offset = "0xDD0140", VA = "0xDD0140")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xDD0328", Offset = "0xDD0328", VA = "0xDD0328")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xDD04C8", Offset = "0xDD04C8", VA = "0xDD04C8")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x2000176")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x2000177")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Color <edgeCol>5__6;

		[Token(Token = "0x17000096")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600060A")]
			[Address(RVA = "0xDD114C", Offset = "0xDD114C", VA = "0xDD114C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600060C")]
			[Address(RVA = "0xDD1194", Offset = "0xDD1194", VA = "0xDD1194", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0xDD0E74", Offset = "0xDD0E74", VA = "0xDD0E74")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xDD0FD8", Offset = "0xDD0FD8", VA = "0xDD0FD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0xDD0FDC", Offset = "0xDD0FDC", VA = "0xDD0FDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xDD1154", Offset = "0xDD1154", VA = "0xDD1154", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000178")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Color <edgeCol>5__6;

		[Token(Token = "0x17000098")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000610")]
			[Address(RVA = "0xDD1324", Offset = "0xDD1324", VA = "0xDD1324", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000612")]
			[Address(RVA = "0xDD136C", Offset = "0xDD136C", VA = "0xDD136C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xDD0E9C", Offset = "0xDD0E9C", VA = "0xDD0E9C")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xDD119C", Offset = "0xDD119C", VA = "0xDD119C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xDD11A0", Offset = "0xDD11A0", VA = "0xDD11A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xDD132C", Offset = "0xDD132C", VA = "0xDD132C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 cursorPosition;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private UnityEngine.Color savedColor;

	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float savedPosterize;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEngine.GameObject[] compactObjects;

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xDD04D0", Offset = "0xDD04D0", VA = "0xDD04D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xDD07F8", Offset = "0xDD07F8", VA = "0xDD07F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xDD0B98", Offset = "0xDD0B98", VA = "0xDD0B98")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xDD0D0C", Offset = "0xDD0D0C", VA = "0xDD0D0C")]
	public void Release()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xDD0C88", Offset = "0xDD0C88", VA = "0xDD0C88")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__19))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xDD0DF0", Offset = "0xDD0DF0", VA = "0xDD0DF0")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__20))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xDD0EC4", Offset = "0xDD0EC4", VA = "0xDD0EC4")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xDD0EE4", Offset = "0xDD0EE4", VA = "0xDD0EE4")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xDD0F04", Offset = "0xDD0F04", VA = "0xDD0F04")]
	public void OnPosterizeChanged(float newValue)
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xDD0F24", Offset = "0xDD0F24", VA = "0xDD0F24")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xDD0790", Offset = "0xDD0790", VA = "0xDD0790")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xDD0F58", Offset = "0xDD0F58", VA = "0xDD0F58")]
	public void Cursor(UnityEngine.Vector3 cP)
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xDD0F64", Offset = "0xDD0F64", VA = "0xDD0F64")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xDD0810", Offset = "0xDD0810", VA = "0xDD0810")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xDD0F70", Offset = "0xDD0F70", VA = "0xDD0F70")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x2000179")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xDD1374", Offset = "0xDD1374", VA = "0xDD1374")]
	private void Start()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xDD1428", Offset = "0xDD1428", VA = "0xDD1428")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x200017A")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject displayText;

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xDD1430", Offset = "0xDD1430", VA = "0xDD1430")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xDD149C", Offset = "0xDD149C", VA = "0xDD149C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xDD1790", Offset = "0xDD1790", VA = "0xDD1790")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x200017B")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject leftMaskObject;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject rightMaskObject;

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xDD1798", Offset = "0xDD1798", VA = "0xDD1798")]
	private void Update()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xDD1BEC", Offset = "0xDD1BEC", VA = "0xDD1BEC")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x200017C")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xDD1BF4", Offset = "0xDD1BF4", VA = "0xDD1BF4")]
	private void Start()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xDD1E54", Offset = "0xDD1E54", VA = "0xDD1E54")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xDD1EA0", Offset = "0xDD1EA0", VA = "0xDD1EA0")]
	public void Release()
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xDD1EE0", Offset = "0xDD1EE0", VA = "0xDD1EE0")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x200017D")]
public class Anchor : MonoBehaviour
{
	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong anchorHandle_;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Canvas canvas_;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform pivot_;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.GameObject anchorMenu_;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isSelected_;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isHovered_;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshProUGUI anchorName_;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UnityEngine.GameObject saveIcon_;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Image labelImage_;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnityEngine.Color labelBaseColor_;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private UnityEngine.Color labelHighlightColor_;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UnityEngine.Color labelSelectedColor_;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AnchorUIManager uiManager_;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private MeshRenderer[] renderers_;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int menuIndex_;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private List<UnityEngine.UI.Button> buttonList_;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private UnityEngine.UI.Button selectedButton_;

	[Token(Token = "0x1700009A")]
	public ulong anchorHandle
	{
		[Token(Token = "0x600061E")]
		[Address(RVA = "0xDD1EE8", Offset = "0xDD1EE8", VA = "0xDD1EE8")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xDD1EF0", Offset = "0xDD1EF0", VA = "0xDD1EF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xDD1FD8", Offset = "0xDD1FD8", VA = "0xDD1FD8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xDD2238", Offset = "0xDD2238", VA = "0xDD2238")]
	public void OnSaveLocalButtonPressed()
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0xDD229C", Offset = "0xDD229C", VA = "0xDD229C")]
	public void OnHideButtonPressed()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xDD22FC", Offset = "0xDD22FC", VA = "0xDD22FC")]
	public void OnEraseButtonPressed()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xDD235C", Offset = "0xDD235C", VA = "0xDD235C")]
	public void OnHoverStart()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xDD2478", Offset = "0xDD2478", VA = "0xDD2478")]
	public void OnHoverEnd()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xDD2580", Offset = "0xDD2580", VA = "0xDD2580")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xDD26A8", Offset = "0xDD26A8", VA = "0xDD26A8")]
	public void SetAnchorHandle(ulong handle)
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xDD2738", Offset = "0xDD2738", VA = "0xDD2738")]
	public void ShowSaveIcon()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xDD2010", Offset = "0xDD2010", VA = "0xDD2010")]
	private void BillboardPanel(Transform panel)
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xDD2144", Offset = "0xDD2144", VA = "0xDD2144")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xDD2758", Offset = "0xDD2758", VA = "0xDD2758")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xDD2858", Offset = "0xDD2858", VA = "0xDD2858")]
	public Anchor()
	{
	}
}
[Token(Token = "0x200017E")]
public class AnchorHelpers
{
	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Camera camera;

	[Token(Token = "0x1700009B")]
	private static Camera MainCamera
	{
		[Token(Token = "0x600062D")]
		[Address(RVA = "0xDD2860", Offset = "0xDD2860", VA = "0xDD2860")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xDD2910", Offset = "0xDD2910", VA = "0xDD2910")]
	public static OVRPose getTransformUnityWorldFromDevice()
	{
		return default(OVRPose);
	}

	[Token(Token = "0x600062F")]
	public static T ByteArrayToStruct<T>(byte[] bytes) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xDD295C", Offset = "0xDD295C", VA = "0xDD295C")]
	public static string UuidToString(byte[] encodedMessage)
	{
		return null;
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xDD2BDC", Offset = "0xDD2BDC", VA = "0xDD2BDC")]
	public static byte[] StringToUuid(string str)
	{
		return null;
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xDD2D40", Offset = "0xDD2D40", VA = "0xDD2D40")]
	private static int GetHexVal(char hex)
	{
		return default(int);
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xDD2DF8", Offset = "0xDD2DF8", VA = "0xDD2DF8")]
	public AnchorHelpers()
	{
	}
}
[Token(Token = "0x200017F")]
public abstract class AnchorSession : MonoBehaviour
{
	[Token(Token = "0x2000180")]
	public enum StorageLocation
	{
		[Token(Token = "0x40008C8")]
		LOCAL
	}

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorSession Instance;

	[Token(Token = "0x40008C2")]
	public const ulong kInvalidHandle = ulong.MaxValue;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<ulong, Anchor> handleToAnchor;

	[Token(Token = "0x40008C4")]
	protected const int maxEvents = 5;

	[Token(Token = "0x40008C5")]
	protected const float eventPollingRate = 0.1f;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected UnityEngine.GameObject anchorPrefab_;

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xDD2E00", Offset = "0xDD2E00", VA = "0xDD2E00", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xDD2B50", Offset = "0xDD2B50", VA = "0xDD2B50")]
	public static void Log(string message)
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xDD2EFC", Offset = "0xDD2EFC", VA = "0xDD2EFC")]
	protected static bool isFlagSet(uint bitset, uint flag)
	{
		return default(bool);
	}

	[Token(Token = "0x6000637")]
	public abstract ulong CreateSpatialAnchor(Transform T_UnityWorld_Anchor);

	[Token(Token = "0x6000638")]
	public abstract void DestroyAnchor(ulong anchorHandle);

	[Token(Token = "0x6000639")]
	public abstract void SaveAnchor(ulong anchorHandle, StorageLocation location);

	[Token(Token = "0x600063A")]
	public abstract void EraseAnchor(ulong anchorHandle);

	[Token(Token = "0x600063B")]
	public abstract void QueryAllLocalAnchors();

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xDD2F08", Offset = "0xDD2F08", VA = "0xDD2F08")]
	protected AnchorSession()
	{
	}
}
[Token(Token = "0x2000181")]
public class AnchorSpawner : MonoBehaviour
{
	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorSpawner Instance;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.GameObject anchorPrefab_;

	[Token(Token = "0x1700009C")]
	public UnityEngine.GameObject AnchorPrefab
	{
		[Token(Token = "0x600063D")]
		[Address(RVA = "0xDD2F90", Offset = "0xDD2F90", VA = "0xDD2F90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xDD2F98", Offset = "0xDD2F98", VA = "0xDD2F98")]
	private void Awake()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xDD308C", Offset = "0xDD308C", VA = "0xDD308C")]
	public void PlaceAnchorAtTransform(Transform transform)
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xDD32B4", Offset = "0xDD32B4", VA = "0xDD32B4")]
	public AnchorSpawner()
	{
	}
}
[Token(Token = "0x2000182")]
public class AnchorUIManager : MonoBehaviour
{
	[Token(Token = "0x2000183")]
	public enum AnchorMode
	{
		[Token(Token = "0x40008DE")]
		Create,
		[Token(Token = "0x40008DF")]
		Select
	}

	[Token(Token = "0x2000184")]
	private delegate void PrimaryPressDelegate();

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorUIManager Instance;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.GameObject mainMenu_;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEngine.GameObject createModeButton_;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEngine.GameObject selectModeButton_;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform trackedDevice_;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform raycastOrigin_;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool drawRaycast_;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private LineRenderer lineRenderer_;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Anchor hoveredAnchor_;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Anchor selectedAnchor_;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private AnchorMode mode_;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<UnityEngine.UI.Button> buttonList_;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int menuIndex_;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private UnityEngine.UI.Button selectedButton_;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UnityEngine.GameObject placementPreview_;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform anchorPlacementTransform_;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PrimaryPressDelegate primaryPressDelegate_;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool isFocused_;

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xDD32BC", Offset = "0xDD32BC", VA = "0xDD32BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xDD3388", Offset = "0xDD3388", VA = "0xDD3388")]
	private void Start()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xDD34D8", Offset = "0xDD34D8", VA = "0xDD34D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xDD3948", Offset = "0xDD3948", VA = "0xDD3948")]
	public void OnCreateModeButtonPressed()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xDD39B4", Offset = "0xDD39B4", VA = "0xDD39B4")]
	public void OnLoadAnchorsButtonPressed()
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xDD3470", Offset = "0xDD3470", VA = "0xDD3470")]
	private void ToggleCreateMode()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xDD3A2C", Offset = "0xDD3A2C", VA = "0xDD3A2C")]
	private void StartPlacementMode()
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xDD3AB4", Offset = "0xDD3AB4", VA = "0xDD3AB4")]
	private void EndPlacementMode()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xDD3AD4", Offset = "0xDD3AD4", VA = "0xDD3AD4")]
	private void StartSelectMode()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xDD3A0C", Offset = "0xDD3A0C", VA = "0xDD3A0C")]
	private void EndSelectMode()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xDD3854", Offset = "0xDD3854", VA = "0xDD3854")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xDD3CD4", Offset = "0xDD3CD4", VA = "0xDD3CD4")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xDD3B5C", Offset = "0xDD3B5C", VA = "0xDD3B5C")]
	private void ShowAnchorPreview()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xDD3C48", Offset = "0xDD3C48", VA = "0xDD3C48")]
	private void HideAnchorPreview()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xDD3DD4", Offset = "0xDD3DD4", VA = "0xDD3DD4")]
	private void PlaceAnchor()
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xDD3C68", Offset = "0xDD3C68", VA = "0xDD3C68")]
	private void ShowRaycastLine()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xDD3CA0", Offset = "0xDD3CA0", VA = "0xDD3CA0")]
	private void HideRaycastLine()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xDD35D8", Offset = "0xDD35D8", VA = "0xDD35D8")]
	private void ControllerRaycast()
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xDD3E2C", Offset = "0xDD3E2C", VA = "0xDD3E2C")]
	private void HoverAnchor(Anchor anchor)
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xDD3E54", Offset = "0xDD3E54", VA = "0xDD3E54")]
	private void UnhoverAnchor()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xDD3EE4", Offset = "0xDD3EE4", VA = "0xDD3EE4")]
	private void SelectAnchor()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xDD402C", Offset = "0xDD402C", VA = "0xDD402C")]
	public AnchorUIManager()
	{
	}
}
[Token(Token = "0x2000185")]
public class SpatialAnchorSession : AnchorSession
{
	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<ulong, ulong> locateAnchorRequest;

	[Token(Token = "0x40008E1")]
	private const string numUuids = "numUuids";

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xDD407C", Offset = "0xDD407C", VA = "0xDD407C")]
	private void Start()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xDD4278", Offset = "0xDD4278", VA = "0xDD4278")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xDD4474", Offset = "0xDD4474", VA = "0xDD4474")]
	private void SpatialEntitySetComponentEnabled(ulong requestId, bool result, OVRPlugin.SpatialEntityComponentType componentType, ulong space)
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xDD466C", Offset = "0xDD466C", VA = "0xDD466C")]
	private void SpatialAnchorSaved(ulong requestId, ulong space, bool result, OVRPlugin.SpatialEntityUuid uuid)
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xDD4B68", Offset = "0xDD4B68", VA = "0xDD4B68")]
	private void SpatialEntityStorageErase(ulong requestId, bool result, OVRPlugin.SpatialEntityUuid uuid, OVRPlugin.SpatialEntityStorageLocation location)
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xDD4EA8", Offset = "0xDD4EA8", VA = "0xDD4EA8")]
	private void SpatialEntityQueryResults(ulong requestId, int numResults, OVRPlugin.SpatialEntityQueryResult[] results)
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xDD559C", Offset = "0xDD559C", VA = "0xDD559C")]
	private void SpatialEntityQueryComplete(ulong requestId, bool result, int numFound)
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xDD4A9C", Offset = "0xDD4A9C", VA = "0xDD4A9C")]
	private string GetUuidString(OVRPlugin.SpatialEntityUuid uuid)
	{
		return null;
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xDD519C", Offset = "0xDD519C", VA = "0xDD519C")]
	private void tryEnableComponent(ulong anchorHandle, OVRPlugin.SpatialEntityComponentType type)
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xDD4560", Offset = "0xDD4560", VA = "0xDD4560")]
	private void CreateAnchorGameobject(ulong anchorHandle)
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xDD5804", Offset = "0xDD5804", VA = "0xDD5804")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xDD5AC4", Offset = "0xDD5AC4", VA = "0xDD5AC4", Slot = "5")]
	public override ulong CreateSpatialAnchor(Transform T_UnityWorld_Anchor)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xDD5C54", Offset = "0xDD5C54", VA = "0xDD5C54", Slot = "6")]
	public override void DestroyAnchor(ulong anchorHandle)
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xDD5DF4", Offset = "0xDD5DF4", VA = "0xDD5DF4", Slot = "8")]
	public override void EraseAnchor(ulong anchorHandle)
	{
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xDD5FA4", Offset = "0xDD5FA4", VA = "0xDD5FA4")]
	public void QueryAnchorByUuid()
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xDD6264", Offset = "0xDD6264", VA = "0xDD6264", Slot = "9")]
	public override void QueryAllLocalAnchors()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xDD6368", Offset = "0xDD6368", VA = "0xDD6368", Slot = "7")]
	public override void SaveAnchor(ulong anchorHandle, StorageLocation location)
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xDD64AC", Offset = "0xDD64AC", VA = "0xDD64AC")]
	public SpatialAnchorSession()
	{
	}
}
[Token(Token = "0x2000186")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xDD6530", Offset = "0xDD6530", VA = "0xDD6530")]
	private void Start()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xDD6744", Offset = "0xDD6744", VA = "0xDD6744")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xDD6848", Offset = "0xDD6848", VA = "0xDD6848")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x2000188")]
public class ItemAreaSpawner : MonoBehaviour
{
	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject itemToSpread;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numItemsToSpawn;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float itemXSpread;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float itemYSpread;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float itemZSpread;

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xDD686C", Offset = "0xDD686C", VA = "0xDD686C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xDD68AC", Offset = "0xDD68AC", VA = "0xDD68AC")]
	private void SpreadItem()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xDD69F4", Offset = "0xDD69F4", VA = "0xDD69F4")]
	public ItemAreaSpawner()
	{
	}
}
[Token(Token = "0x2000189")]
public class PickItem : MonoBehaviour
{
	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject[] itemsToPickFrom;

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xDD6A10", Offset = "0xDD6A10", VA = "0xDD6A10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xDD6A14", Offset = "0xDD6A14", VA = "0xDD6A14")]
	private void Pick()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0xDD6B44", Offset = "0xDD6B44", VA = "0xDD6B44")]
	public PickItem()
	{
	}
}
[Token(Token = "0x200018A")]
public class RandomizeRotation : MonoBehaviour
{
	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 randomRotationRange;

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xDD6B4C", Offset = "0xDD6B4C", VA = "0xDD6B4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xDD6CD0", Offset = "0xDD6CD0", VA = "0xDD6CD0")]
	private void RandomizeMyRotation()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xDD6B58", Offset = "0xDD6B58", VA = "0xDD6B58")]
	public void RandomizeByAxis(UnityEngine.Vector3 randomRotationConstraints)
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xDD6D00", Offset = "0xDD6D00", VA = "0xDD6D00")]
	public RandomizeRotation()
	{
	}
}
[Token(Token = "0x200018B")]
public class RandomlyPlaceObjectsOnSurface : MonoBehaviour
{
	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject[] objectsToSpawn;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float spawnRadius;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int numberOfObjects;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool randomOrientation;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool orientToSurface;

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xDD6D08", Offset = "0xDD6D08", VA = "0xDD6D08")]
	private void Start()
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xDD6F40", Offset = "0xDD6F40", VA = "0xDD6F40")]
	public RandomlyPlaceObjectsOnSurface()
	{
	}
}
[Token(Token = "0x200018C")]
public class RaycastItemAligner : MonoBehaviour
{
	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float raycastDistance;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject objectToSpawn;

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xDD6F54", Offset = "0xDD6F54", VA = "0xDD6F54")]
	private void Start()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xDD6F58", Offset = "0xDD6F58", VA = "0xDD6F58")]
	private void PositionRaycast()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xDD7128", Offset = "0xDD7128", VA = "0xDD7128")]
	public RaycastItemAligner()
	{
	}
}
[Token(Token = "0x200018D")]
public class PlayerInfo : MonoBehaviour
{
	[Token(Token = "0x6000681")]
	[Address(RVA = "0xDD7138", Offset = "0xDD7138", VA = "0xDD7138")]
	public void Start()
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xDD7210", Offset = "0xDD7210", VA = "0xDD7210")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xDD7290", Offset = "0xDD7290", VA = "0xDD7290")]
	private void Update()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xDD72F8", Offset = "0xDD72F8", VA = "0xDD72F8")]
	public PlayerInfo()
	{
	}
}
[Token(Token = "0x200018E")]
public class RotateAround : MonoBehaviour
{
	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject target;

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xDD7300", Offset = "0xDD7300", VA = "0xDD7300")]
	private void Start()
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0xDD7304", Offset = "0xDD7304", VA = "0xDD7304")]
	private void Update()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xDD73E4", Offset = "0xDD73E4", VA = "0xDD73E4")]
	public RotateAround()
	{
	}
}
[Serializable]
[Token(Token = "0x200018F")]
public class Save
{
	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<int> livingTargetPositions;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<int> livingTargetsTypes;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int hits;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int shots;

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xDD73EC", Offset = "0xDD73EC", VA = "0xDD73EC")]
	public Save()
	{
	}
}
[Serializable]
[Token(Token = "0x2000190")]
public class AllBuildingsData
{
	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public BuildingData[] buildingDatas;

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xDD74A4", Offset = "0xDD74A4", VA = "0xDD74A4")]
	public AllBuildingsData(BuildingData[] buildingDatas)
	{
	}
}
[Serializable]
[Token(Token = "0x2000191")]
public class BuildingData
{
	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float[] position;

	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float[] rotation;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string id;

	[Token(Token = "0x600068A")]
	[Address(RVA = "0xDD74D4", Offset = "0xDD74D4", VA = "0xDD74D4")]
	public BuildingData(BuildingScript B)
	{
	}
}
[Token(Token = "0x2000192")]
public class BuildingScript : MonoBehaviour
{
	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Quaternion rot;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Vector3 pos;

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xDD76BC", Offset = "0xDD76BC", VA = "0xDD76BC")]
	private void Update()
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xDD7790", Offset = "0xDD7790", VA = "0xDD7790")]
	public BuildingScript()
	{
	}
}
[Token(Token = "0x2000193")]
public class GameManager : MonoBehaviour
{
	[Token(Token = "0x600068D")]
	[Address(RVA = "0xDD7798", Offset = "0xDD7798", VA = "0xDD7798")]
	private void Update()
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xDD7818", Offset = "0xDD7818", VA = "0xDD7818")]
	public void Save()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xDD78C4", Offset = "0xDD78C4", VA = "0xDD78C4")]
	public void Load()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xDD7D08", Offset = "0xDD7D08", VA = "0xDD7D08")]
	public GameManager()
	{
	}
}
[Token(Token = "0x2000194")]
public class BlocksController : MonoBehaviour
{
	[Token(Token = "0x6000691")]
	[Address(RVA = "0xDD7D10", Offset = "0xDD7D10", VA = "0xDD7D10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xDD7D14", Offset = "0xDD7D14", VA = "0xDD7D14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xDD7D18", Offset = "0xDD7D18", VA = "0xDD7D18")]
	public BlocksController()
	{
	}
}
[Token(Token = "0x2000195")]
public class BlocksPrefs : MonoBehaviour
{
	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public List<UnityEngine.GameObject> blocks;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<float> xPos;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<float> yPos;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<float> zPos;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<float> xRot;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<float> yRot;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<float> zRot;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<float> wRot;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int blockCount;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int SavedBlocksCount;

	[Token(Token = "0x6000694")]
	[Address(RVA = "0xDD7D20", Offset = "0xDD7D20", VA = "0xDD7D20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xDD7D24", Offset = "0xDD7D24", VA = "0xDD7D24")]
	public void Update()
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xDD8184", Offset = "0xDD8184", VA = "0xDD8184")]
	public void AddBlockToList(UnityEngine.GameObject block)
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0xDD8260", Offset = "0xDD8260", VA = "0xDD8260")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xDD7E94", Offset = "0xDD7E94", VA = "0xDD7E94")]
	private void SaveBlocks()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xDD7F78", Offset = "0xDD7F78", VA = "0xDD7F78")]
	private void LoadBlocks()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xDD8264", Offset = "0xDD8264", VA = "0xDD8264")]
	public BlocksPrefs()
	{
	}
}
[Token(Token = "0x2000196")]
public static class SaveSystem
{
	[Token(Token = "0x600069B")]
	[Address(RVA = "0xDD7970", Offset = "0xDD7970", VA = "0xDD7970")]
	public static void Save(BuildingScript[] buildingScripts)
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xDD7B8C", Offset = "0xDD7B8C", VA = "0xDD7B8C")]
	public static AllBuildingsData Load()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000197")]
public enum BlockType
{
	[Token(Token = "0x400090C")]
	Small,
	[Token(Token = "0x400090D")]
	Basic,
	[Token(Token = "0x400090E")]
	Large
}
[Serializable]
[Token(Token = "0x2000198")]
public class BlockData
{
	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string id;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BlockType blockType;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector3 position;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Quaternion rotation;

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xDD8434", Offset = "0xDD8434", VA = "0xDD8434")]
	public BlockData()
	{
	}
}
[Token(Token = "0x2000199")]
public class BlocksHandler : MonoBehaviour
{
	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BlockType blockType;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BlockData blockData;

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xDD843C", Offset = "0xDD843C", VA = "0xDD843C")]
	public void Start()
	{
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xDD8664", Offset = "0xDD8664", VA = "0xDD8664")]
	private void Update()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xDD86CC", Offset = "0xDD86CC", VA = "0xDD86CC")]
	private void DestroyMe()
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xDD8738", Offset = "0xDD8738", VA = "0xDD8738")]
	public BlocksHandler()
	{
	}
}
[Token(Token = "0x200019A")]
public class QuaternionSerializationSurrogate : ISerializationSurrogate
{
	[Token(Token = "0x60006A2")]
	[Address(RVA = "0xDD8740", Offset = "0xDD8740", VA = "0xDD8740", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0xDD8850", Offset = "0xDD8850", VA = "0xDD8850", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0xDD8AAC", Offset = "0xDD8AAC", VA = "0xDD8AAC")]
	public QuaternionSerializationSurrogate()
	{
	}
}
[Serializable]
[Token(Token = "0x200019B")]
public class SaveData
{
	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SaveData _current;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int toyCars;

	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int toyDolls;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<BlockData> block;

	[Token(Token = "0x1700009D")]
	public static SaveData current
	{
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0xDD85D4", Offset = "0xDD85D4", VA = "0xDD85D4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0xDD8ABC", Offset = "0xDD8ABC", VA = "0xDD8ABC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0xDD8AB4", Offset = "0xDD8AB4", VA = "0xDD8AB4")]
	public SaveData()
	{
	}
}
[Token(Token = "0x200019C")]
public class SaveManager : MonoBehaviour
{
	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int currentBlock;

	[Token(Token = "0x1700009E")]
	public static SaveManager instance
	{
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xDD8AC0", Offset = "0xDD8AC0", VA = "0xDD8AC0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xDD8B08", Offset = "0xDD8B08", VA = "0xDD8B08")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0xDD8B60", Offset = "0xDD8B60", VA = "0xDD8B60")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0xDD8CF0", Offset = "0xDD8CF0", VA = "0xDD8CF0")]
	public void Load()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0xDD8E24", Offset = "0xDD8E24", VA = "0xDD8E24")]
	public void Save()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0xDD8F24", Offset = "0xDD8F24", VA = "0xDD8F24")]
	public SaveManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200019D")]
internal class PlayerData_Storeage
{
	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int currentBlock;

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xDD8F1C", Offset = "0xDD8F1C", VA = "0xDD8F1C")]
	public PlayerData_Storeage()
	{
	}
}
[Token(Token = "0x200019E")]
public class SerializationManager : MonoBehaviour
{
	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xDD8F2C", Offset = "0xDD8F2C", VA = "0xDD8F2C")]
	public static bool Save(string saveName, object saveData)
	{
		return default(bool);
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xDD9238", Offset = "0xDD9238", VA = "0xDD9238")]
	public static object Load(string path)
	{
		return null;
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xDD9060", Offset = "0xDD9060", VA = "0xDD9060")]
	public static BinaryFormatter GetBinaryFormatter()
	{
		return null;
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xDD93E4", Offset = "0xDD93E4", VA = "0xDD93E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xDD93E8", Offset = "0xDD93E8", VA = "0xDD93E8")]
	public SerializationManager()
	{
	}
}
[Token(Token = "0x200019F")]
public class Vector3SerializationSurrogate : ISerializationSurrogate
{
	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xDD93F0", Offset = "0xDD93F0", VA = "0xDD93F0", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xDD94E4", Offset = "0xDD94E4", VA = "0xDD94E4", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xDD93DC", Offset = "0xDD93DC", VA = "0xDD93DC")]
	public Vector3SerializationSurrogate()
	{
	}
}
[Token(Token = "0x20001A0")]
[CreateAssetMenu]
public class HeightMapSettings : UpdatableData
{
	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NoiseSettings2 noiseSettings;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useFalloff;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float heightMultiplier;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve heightCurve;

	[Token(Token = "0x1700009F")]
	public float minHeight
	{
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xDD96E0", Offset = "0xDD96E0", VA = "0xDD96E0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000A0")]
	public float maxHeight
	{
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xDD9718", Offset = "0xDD9718", VA = "0xDD9718")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0xDD9750", Offset = "0xDD9750", VA = "0xDD9750")]
	public HeightMapSettings()
	{
	}
}
[Token(Token = "0x20001A1")]
[CreateAssetMenu]
public class MeshSettings : UpdatableData
{
	[Token(Token = "0x4000920")]
	public const int numSupportedLODs = 5;

	[Token(Token = "0x4000921")]
	public const int numSupportedChunkSizes = 9;

	[Token(Token = "0x4000922")]
	public const int numSupportedFlatshadedChunkSizes = 3;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int[] supportedChunkSizes;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float meshScale;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool useFlatShading;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 8f)]
	public int chunkSizeIndex;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 2f)]
	public int flatshadedChunkSizeIndex;

	[Token(Token = "0x170000A1")]
	public int numVertsPerLine
	{
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xDD9760", Offset = "0xDD9760", VA = "0xDD9760")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000A2")]
	public float meshWorldSize
	{
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xDD97F8", Offset = "0xDD97F8", VA = "0xDD97F8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0xDD981C", Offset = "0xDD981C", VA = "0xDD981C")]
	public MeshSettings()
	{
	}
}
[Token(Token = "0x20001A2")]
[CreateAssetMenu]
public class TextureData : UpdatableData
{
	[Serializable]
	[Token(Token = "0x20001A3")]
	public class Layer
	{
		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D texture;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Color tint;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float tintStrength;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float startHeight;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float blendStrength;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float textureScale;

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xDDA05C", Offset = "0xDDA05C", VA = "0xDDA05C")]
		public Layer()
		{
		}
	}

	[Token(Token = "0x4000928")]
	private const int textureSize = 512;

	[Token(Token = "0x4000929")]
	private const TextureFormat textureFormat = TextureFormat.RGB565;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Layer[] layers;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float savedMinHeight;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float savedMaxHeight;

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xDD98CC", Offset = "0xDD98CC", VA = "0xDD98CC")]
	public void ApplyToMaterial(Material material)
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xDD9FBC", Offset = "0xDD9FBC", VA = "0xDD9FBC")]
	public void UpdateMeshHeights(Material material, float minHeight, float maxHeight)
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xDD9EDC", Offset = "0xDD9EDC", VA = "0xDD9EDC")]
	private Texture2DArray GenerateTextureArray(Texture2D[] textures)
	{
		return null;
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xDDA054", Offset = "0xDDA054", VA = "0xDDA054")]
	public TextureData()
	{
	}
}
[Token(Token = "0x20001A5")]
public class UpdatableData : ScriptableObject
{
	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool autoUpdate;

	[Token(Token = "0x14000011")]
	public event Action OnValuesUpdated
	{
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xDDA170", Offset = "0xDDA170", VA = "0xDDA170")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xDDA20C", Offset = "0xDDA20C", VA = "0xDDA20C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0xDD9758", Offset = "0xDD9758", VA = "0xDD9758")]
	public UpdatableData()
	{
	}
}
[Token(Token = "0x20001A6")]
public class DestroyTrigger : MonoBehaviour
{
	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject target;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject target1;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject target2;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject target3;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject target4;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject target5;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.GameObject target6;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject target7;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.GameObject target8;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.GameObject target9;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEngine.GameObject target10;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.GameObject target11;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.GameObject target12;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.GameObject target13;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEngine.GameObject target14;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEngine.GameObject target15;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEngine.GameObject target16;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEngine.GameObject target17;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEngine.GameObject target18;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEngine.GameObject target19;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEngine.GameObject target20;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public UnityEngine.GameObject target21;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public UnityEngine.GameObject target22;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Rigidbody rb;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Rigidbody rb1;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Rigidbody rb2;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Rigidbody rb3;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Rigidbody rb4;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Rigidbody rb5;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Rigidbody rb6;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Rigidbody rb7;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Rigidbody rb8;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Rigidbody rb9;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Rigidbody rb10;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Rigidbody rb11;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Rigidbody rb12;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Rigidbody rb13;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Rigidbody rb14;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Rigidbody rb15;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Rigidbody rb16;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Rigidbody rb17;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Rigidbody rb18;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Rigidbody rb19;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Rigidbody rb20;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public Rigidbody rb21;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Rigidbody rb22;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public AudioSource mAudioSrc;

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0xDDA2A8", Offset = "0xDDA2A8", VA = "0xDDA2A8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0xDDA34C", Offset = "0xDDA34C", VA = "0xDDA34C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0xDDA5FC", Offset = "0xDDA5FC", VA = "0xDDA5FC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xDDA6C8", Offset = "0xDDA6C8", VA = "0xDDA6C8")]
	public DestroyTrigger()
	{
	}
}
[Token(Token = "0x20001A7")]
public class DevWindCompass : MonoBehaviour
{
	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject windManagerObject;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private WindManager windManager;

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xDDA75C", Offset = "0xDDA75C", VA = "0xDDA75C")]
	private void Start()
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0xDDA7BC", Offset = "0xDDA7BC", VA = "0xDDA7BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xDDA8AC", Offset = "0xDDA8AC", VA = "0xDDA8AC")]
	public DevWindCompass()
	{
	}
}
[Serializable]
[Token(Token = "0x20001A8")]
public class TestClass
{
	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string myString;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject go;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string go_id;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Vector3 somePosition;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public UnityEngine.Color color;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int[] myArray;

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0xDDA8B4", Offset = "0xDDA8B4", VA = "0xDDA8B4")]
	public TestClass()
	{
	}
}
[Token(Token = "0x20001A9")]
public class TestScript : MonoBehaviour
{
	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string testString;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject someGameObject;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string someGameObject_id;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TestClass testClass;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TestClass[] testClassArray;

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0xDDA944", Offset = "0xDDA944", VA = "0xDDA944")]
	public void OnSerialize()
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0xDDAB14", Offset = "0xDDAB14", VA = "0xDDAB14")]
	public void OnDeserialize()
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0xDDAD50", Offset = "0xDDAD50", VA = "0xDDAD50")]
	public TestScript()
	{
	}
}
[Token(Token = "0x20001AA")]
public static class FalloffGenerator
{
	[Token(Token = "0x60006DA")]
	[Address(RVA = "0xDDAE1C", Offset = "0xDDAE1C", VA = "0xDDAE1C")]
	public static float[,] GenerateFalloffMap(int size)
	{
		return null;
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xDDAF7C", Offset = "0xDDAF7C", VA = "0xDDAF7C")]
	private static float Evaluate(float value)
	{
		return default(float);
	}
}
[Token(Token = "0x20001AB")]
public class GrassHandler : MonoBehaviour
{
	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material grassMaterial;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject windManagerObject;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private WindManager windManager;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool findWindManagerInScene;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool grassIsFirstMaterial;

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xDDAFCC", Offset = "0xDDAFCC", VA = "0xDDAFCC")]
	private void Start()
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xDDB108", Offset = "0xDDB108", VA = "0xDDB108")]
	public void Update()
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xDDB170", Offset = "0xDDB170", VA = "0xDDB170")]
	public GrassHandler()
	{
	}
}
[Token(Token = "0x20001AC")]
public static class HeightMapGenerator
{
	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xDDB178", Offset = "0xDDB178", VA = "0xDDB178")]
	public static HeightMap GenerateHeightMap(int width, int height, HeightMapSettings settings, UnityEngine.Vector2 sampleCentre)
	{
		return default(HeightMap);
	}
}
[Token(Token = "0x20001AD")]
public struct HeightMap
{
	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public readonly float[,] values;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly float minValue;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public readonly float maxValue;

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xDDB768", Offset = "0xDDB768", VA = "0xDDB768")]
	public HeightMap(float[,] values, float minValue, float maxValue)
	{
	}
}
[Token(Token = "0x20001AE")]
public class HideOnPlay : MonoBehaviour
{
	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xDDB794", Offset = "0xDDB794", VA = "0xDDB794")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xDDB7B8", Offset = "0xDDB7B8", VA = "0xDDB7B8")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xDDB7BC", Offset = "0xDDB7BC", VA = "0xDDB7BC")]
	public HideOnPlay()
	{
	}
}
[Token(Token = "0x20001AF")]
public class InteractionHolder : MonoBehaviour
{
	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public List<UnityEngine.GameObject> bendObjects;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector4[] bendPositions;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<UnityEngine.GameObject> cutObjects;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Vector4[] cutPositions;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material grassMaterial;

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xDDB7C4", Offset = "0xDDB7C4", VA = "0xDDB7C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xDDB9E4", Offset = "0xDDB9E4", VA = "0xDDB9E4")]
	public void AddCutObject(UnityEngine.GameObject go)
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xDDBB90", Offset = "0xDDBB90", VA = "0xDDBB90")]
	public InteractionHolder()
	{
	}
}
[Token(Token = "0x20001B0")]
public static class Noise
{
	[Token(Token = "0x20001B1")]
	public enum NormalizeMode
	{
		[Token(Token = "0x4000986")]
		Local,
		[Token(Token = "0x4000987")]
		Global
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xDDB350", Offset = "0xDDB350", VA = "0xDDB350")]
	public static float[,] GenerateNoiseMap(int mapWidth, int mapHeight, NoiseSettings2 settings, UnityEngine.Vector2 sampleCentre)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x20001B2")]
public class NoiseSettings2
{
	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Noise.NormalizeMode normalizeMode;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float scale;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int octaves;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 1f)]
	public float persistance;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lacunarity;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int seed;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Vector2 offset;

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xDDBC10", Offset = "0xDDBC10", VA = "0xDDBC10")]
	public void ValidateValues()
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0xDDBC58", Offset = "0xDDBC58", VA = "0xDDBC58")]
	public NoiseSettings2()
	{
	}
}
[Token(Token = "0x20001B3")]
public class DemoArcadeMachine : FPEGenericSaveableGameObject
{
	[Token(Token = "0x20001B4")]
	private enum eGameState
	{
		[Token(Token = "0x40009BB")]
		ATTRACTMODE,
		[Token(Token = "0x40009BC")]
		WELCOME,
		[Token(Token = "0x40009BD")]
		GAMEPLAY,
		[Token(Token = "0x40009BE")]
		GAMEOVER,
		[Token(Token = "0x40009BF")]
		GOODBYE
	}

	[Token(Token = "0x20001B5")]
	private enum eFrobState
	{
		[Token(Token = "0x40009C1")]
		DOWN,
		[Token(Token = "0x40009C2")]
		UP
	}

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Scoreboard UI elements")]
	private Text attractModeText;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Text scoreText;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Image livesLeftImage;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Sprite[] livesLeftSprites;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Text highScoreText;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private eGameState currentGameState;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Sound Effects")]
	[SerializeField]
	private AudioClip attractModeLoop;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AudioClip welcomeToGame;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioClip gameStart;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private AudioClip gameOverRegular;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private AudioClip gameOverNewHighScore;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private AudioClip goodbye;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private AudioClip frobsUp;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private AudioClip frobsDown;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AudioClip frobImpact;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private AudioClip frobMissed;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private AudioSource myAudio;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private string[] attractModeMessages;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int attractModeMessageIndex;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float attractModeScrollRate;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float attractModeScrollCounter;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float welcomeDuration;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float welcomeCounter;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float goodbyeDuration;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float goodbyeCounter;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int highScore;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int currentScore;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[Header("Frobs")]
	private UnityEngine.GameObject[] frobs;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private UnityEngine.Vector3[] frobUpPositions;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private UnityEngine.Vector3[] frobDownPositions;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private UnityEngine.GameObject goButton;

	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int[,] currentFrobsToClob;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int frobClobIndex;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool[] frobsClobbedThisRound;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private int frobsMissed;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private int frobsMissedForGameOver;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private float gameOverDuration;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float gameOverCounter;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private eFrobState currentFrobState;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private float frobPopupInterval;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float frobPopupCounter;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private float frobHideTime;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float frobHideCounter;

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xDDBC78", Offset = "0xDDBC78", VA = "0xDDBC78")]
	private void Start()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xDDC190", Offset = "0xDDC190", VA = "0xDDC190")]
	private void Update()
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xDDCA20", Offset = "0xDDCA20", VA = "0xDDCA20")]
	public void registerClobbedFrob(int index)
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xDDC950", Offset = "0xDDC950", VA = "0xDDC950")]
	private void addToScore(int amount)
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xDDC78C", Offset = "0xDDC78C", VA = "0xDDC78C")]
	private void updateScoreboard()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xDDCB48", Offset = "0xDDCB48", VA = "0xDDCB48")]
	public void startGame()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xDDC860", Offset = "0xDDC860", VA = "0xDDC860")]
	private void gameOver()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xDDC960", Offset = "0xDDC960", VA = "0xDDC960")]
	public void endGame(bool sayGoodbye = false)
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xDDC078", Offset = "0xDDC078", VA = "0xDDC078")]
	public void startAttractMode()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xDDCC3C", Offset = "0xDDCC3C", VA = "0xDDCC3C", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xDDCCD0", Offset = "0xDDCCD0", VA = "0xDDCCD0", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xDDCD60", Offset = "0xDDCD60", VA = "0xDDCD60")]
	public DemoArcadeMachine()
	{
	}
}
[Token(Token = "0x20001B6")]
[Obsolete("DemoCabinetScript will not be maintained beyond v2.2. Please migrate your objects using this script to use the new FPESwingingDoor class. See demoComplexDesk prefab for an example.")]
[RequireComponent(typeof(AudioSource))]
public class DemoCabinetScript : FPEGenericSaveableGameObject
{
	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool cabinetOpen;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.GameObject doorOpenerLeft;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.GameObject doorOpenerRight;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip cabinetOpenSound;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip cabinetCloseSound;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource cabinetSpeaker;

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xDDD0B8", Offset = "0xDDD0B8", VA = "0xDDD0B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xDDD1B8", Offset = "0xDDD1B8", VA = "0xDDD1B8")]
	public void toggleDoors()
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xDDD34C", Offset = "0xDDD34C", VA = "0xDDD34C")]
	public void openCabinet()
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xDDD1C8", Offset = "0xDDD1C8", VA = "0xDDD1C8")]
	public void closeCabinet()
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xDDD4D0", Offset = "0xDDD4D0", VA = "0xDDD4D0")]
	public void setCabinetOpen()
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xDDD4DC", Offset = "0xDDD4DC", VA = "0xDDD4DC")]
	public void setCabinetClosed()
	{
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xDDD4E4", Offset = "0xDDD4E4", VA = "0xDDD4E4")]
	public bool isCabinetOpen()
	{
		return default(bool);
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xDDD4EC", Offset = "0xDDD4EC", VA = "0xDDD4EC", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xDDD584", Offset = "0xDDD584", VA = "0xDDD584", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xDDD704", Offset = "0xDDD704", VA = "0xDDD704")]
	public DemoCabinetScript()
	{
	}
}
[Token(Token = "0x20001B7")]
public class DemoCutscene : MonoBehaviour
{
	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DemoForcePlayerLookAt myForcedLookTarget;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool cutsceneHasPlayed;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.GameObject revealCurtain;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource mySpeaker;

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xDDD70C", Offset = "0xDDD70C", VA = "0xDDD70C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0xDDD98C", Offset = "0xDDD98C", VA = "0xDDD98C")]
	public void startMyCutscene()
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xDDDAFC", Offset = "0xDDDAFC", VA = "0xDDDAFC")]
	public DemoCutscene()
	{
	}
}
[Token(Token = "0x20001B8")]
public class DemoCutsceneWithUI : FPEGenericSaveableGameObject
{
	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.GameObject cutsceneCanvas;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.GameObject myButton;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool cutsceneHasPlayed;

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xDDDB04", Offset = "0xDDDB04", VA = "0xDDDB04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xDDDBF0", Offset = "0xDDDBF0", VA = "0xDDDBF0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xDDDC58", Offset = "0xDDDC58", VA = "0xDDDC58")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xDDDCDC", Offset = "0xDDDCDC", VA = "0xDDDCDC")]
	public void startCutscene()
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xDDDDE8", Offset = "0xDDDDE8", VA = "0xDDDDE8")]
	public void stopCutscene()
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xDDDE58", Offset = "0xDDDE58", VA = "0xDDDE58", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xDDDEF0", Offset = "0xDDDEF0", VA = "0xDDDEF0", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xDDDF0C", Offset = "0xDDDF0C", VA = "0xDDDF0C")]
	public DemoCutsceneWithUI()
	{
	}
}
[Token(Token = "0x20001B9")]
public class DemoDebugHelperScript : MonoBehaviour
{
	[Token(Token = "0x600070B")]
	[Address(RVA = "0xDDDF14", Offset = "0xDDDF14", VA = "0xDDDF14")]
	private void Update()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xDDDF3C", Offset = "0xDDDF3C", VA = "0xDDDF3C")]
	public DemoDebugHelperScript()
	{
	}
}
[Token(Token = "0x20001BA")]
public class DemoDoorCardScannerScript : FPEInteractableActivateScript
{
	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	[Header("Additional Stuff for Card Reader")]
	private Material lockedMaterial;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private Material errorMaterial;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private Material unlockedMaterial;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private AudioClip doorUnlockFailure;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private AudioClip doorUnlockSuccess;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private UnityEngine.GameObject statusLight;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Light lightSource;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private float errorLightTime;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private float errorLightBlinkInterval;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float doorOpenDelay;

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xDDDF44", Offset = "0xDDDF44", VA = "0xDDDF44", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xDDE088", Offset = "0xDDE088", VA = "0xDDE088")]
	private void Update()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xDDE300", Offset = "0xDDE300", VA = "0xDDE300")]
	public void attemptToOpen()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xDDE480", Offset = "0xDDE480", VA = "0xDDE480")]
	public void cardError()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xDDE538", Offset = "0xDDE538", VA = "0xDDE538")]
	public void setLockLightColor(bool locked)
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xDDE610", Offset = "0xDDE610", VA = "0xDDE610")]
	public DemoDoorCardScannerScript()
	{
	}
}
[Token(Token = "0x20001BB")]
public class DemoFanMachine : FPEGenericSaveableGameObject
{
	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform mySwitch;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform fanBlade;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float mySwitchMotion;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MeshRenderer fanPowerLight;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MeshRenderer fanBatteryLight;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject battery;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material fanPowerLightOn;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material fanPowerLightOff;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material fanBatteryLightOn;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material fanBatteryLightOff;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip errorLightBlink;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool fanBatteryLightLit;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool hasBattery;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float failDelay;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float failCountdown;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool fanFailure;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	private bool fanSwitchIsOn;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	private bool fanTurning;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float fanAcceleration;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float fanDeceleration;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float fanSpeed;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float maxFanSpeed;

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xDDE624", Offset = "0xDDE624", VA = "0xDDE624")]
	private void Start()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xDDE670", Offset = "0xDDE670", VA = "0xDDE670")]
	private void Update()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xDDE888", Offset = "0xDDE888", VA = "0xDDE888")]
	public void turnOnFan()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xDDE9E8", Offset = "0xDDE9E8", VA = "0xDDE9E8")]
	public void turnOffFan()
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xDDEA68", Offset = "0xDDEA68", VA = "0xDDEA68")]
	public void placeBattery()
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xDDE958", Offset = "0xDDE958", VA = "0xDDE958")]
	public void fanFailed()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xDDEB68", Offset = "0xDDEB68", VA = "0xDDEB68", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xDDEC18", Offset = "0xDDEC18", VA = "0xDDEC18", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xDDEC5C", Offset = "0xDDEC5C", VA = "0xDDEC5C")]
	public DemoFanMachine()
	{
	}
}
[Token(Token = "0x20001BC")]
public class DemoForcePlayerLookAt : MonoBehaviour
{
	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float gazeCounter;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UnityEngine.Vector3 currentFocusPosition;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float focusLerpFactor;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float delayCounter;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[UnityEngine.Tooltip("The letterbox you want to be viewed when this forced look moment occurs")]
	[SerializeField]
	private DemoLetterbox myLetterBoxCanvas;

	[Token(Token = "0x600071C")]
	[Address(RVA = "0xDDEC8C", Offset = "0xDDEC8C", VA = "0xDDEC8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xDDD9F0", Offset = "0xDDD9F0", VA = "0xDDD9F0")]
	public void forceLookAt(float gazeDurationInSeconds = 2f, float focusChangeLerpFactor = 5f, float delayInSeconds = 0f)
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xDDEFA0", Offset = "0xDDEFA0", VA = "0xDDEFA0")]
	public DemoForcePlayerLookAt()
	{
	}
}
[Token(Token = "0x20001BD")]
[RequireComponent(typeof(AudioSource))]
public class DemoGenericButton : MonoBehaviour
{
	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("The distance the button 'press' will travel relative to its own Transform when PressButton() is called. Should be pretty small most of the time.")]
	private UnityEngine.Vector3 buttonActionVector;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	[UnityEngine.Tooltip("The time (in seconds) the button remains in its 'pressed' position before resetting. Foe best results, match this with an FPEInteractableActivateScript's 'Event Repeat Delay' value.")]
	private float pressTime;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float pressCounter;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource buttonSpeaker;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 upPosition;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 downPosition;

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xDDF004", Offset = "0xDDF004", VA = "0xDDF004")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xDDF1A8", Offset = "0xDDF1A8", VA = "0xDDF1A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xDDF210", Offset = "0xDDF210", VA = "0xDDF210")]
	public void PressButton()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xDDF254", Offset = "0xDDF254", VA = "0xDDF254")]
	public DemoGenericButton()
	{
	}
}
[Token(Token = "0x20001BE")]
public class DemoIdolScript : MonoBehaviour
{
	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DemoIdolTrapScript theTrap;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool pickedUpOnce;

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xDDF268", Offset = "0xDDF268", VA = "0xDDF268")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xDDF2E0", Offset = "0xDDF2E0", VA = "0xDDF2E0")]
	public void idolPickupEvent()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xDDF38C", Offset = "0xDDF38C", VA = "0xDDF38C")]
	public void idolReturnEvent()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xDDF408", Offset = "0xDDF408", VA = "0xDDF408")]
	public DemoIdolScript()
	{
	}
}
[Token(Token = "0x20001BF")]
public class DemoIdolTrapScript : FPEGenericSaveableGameObject
{
	[Token(Token = "0x20001C0")]
	private enum eTrapState
	{
		[Token(Token = "0x4000A0E")]
		IDLE,
		[Token(Token = "0x4000A0F")]
		PLATE_MOVING,
		[Token(Token = "0x4000A10")]
		SIGN_LAUGH,
		[Token(Token = "0x4000A11")]
		BARS_RELEASE,
		[Token(Token = "0x4000A12")]
		COMPLETE
	}

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Custom Idol Items")]
	public Material lightOn;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material lightOff;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip stoneScrape;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip trapStartSound;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip trapReleaseSound;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.GameObject trapTriggerPlate;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private UnityEngine.GameObject trapSign;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.GameObject trapLight;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.GameObject trapLightbulb;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private UnityEngine.GameObject trapBars;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UnityEngine.Vector3 signPosition;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private UnityEngine.Vector3 plateDownPosition;

	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private UnityEngine.Vector3 releasedBarsPosition;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private UnityEngine.Vector3 barsLockedPosition;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private eTrapState currentTrapState;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float trapStateCountdown;

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xDDF410", Offset = "0xDDF410", VA = "0xDDF410")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xDDF738", Offset = "0xDDF738", VA = "0xDDF738")]
	private void Update()
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xDDF378", Offset = "0xDDF378", VA = "0xDDF378")]
	public void idolPickedUp()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xDDFD50", Offset = "0xDDFD50", VA = "0xDDFD50")]
	private void setBoxColliderState(bool collidersEnabled)
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xDDFDF8", Offset = "0xDDFDF8", VA = "0xDDFDF8")]
	public void idolReturnEvent()
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xDDF9E0", Offset = "0xDDF9E0", VA = "0xDDF9E0")]
	private void MoveToState(eTrapState state)
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xDDFE74", Offset = "0xDDFE74", VA = "0xDDFE74", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xDDFF14", Offset = "0xDDFF14", VA = "0xDDFF14", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xDDFF2C", Offset = "0xDDFF2C", VA = "0xDDFF2C")]
	public DemoIdolTrapScript()
	{
	}
}
[Token(Token = "0x20001C1")]
public class DemoInventoryConsumer : FPEInventoryConsumer
{
	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("This sound is played when the item is consumed")]
	private AudioClip consumptionAudioClip;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("This prefab is created and thrown on the ground when the item is consumed")]
	private UnityEngine.GameObject discardedPiece;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource myAudio;

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xDDFFC8", Offset = "0xDDFFC8", VA = "0xDDFFC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xDE00DC", Offset = "0xDE00DC", VA = "0xDE00DC", Slot = "4")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xDE0124", Offset = "0xDE0124", VA = "0xDE0124", Slot = "5")]
	public override void consumeItem()
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xDE027C", Offset = "0xDE027C", VA = "0xDE027C")]
	public DemoInventoryConsumer()
	{
	}
}
[Token(Token = "0x20001C2")]
public class DemoLetterbox : MonoBehaviour
{
	[Token(Token = "0x20001C3")]
	private enum eLetterBoxState
	{
		[Token(Token = "0x4000A22")]
		OUT,
		[Token(Token = "0x4000A23")]
		MOVING_IN,
		[Token(Token = "0x4000A24")]
		IN,
		[Token(Token = "0x4000A25")]
		MOVING_OUT
	}

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private eLetterBoxState currentLetterBoxState;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.GameObject myCanvas;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform topBox;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform bottomBox;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 homePositionTop;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 homePositionBottom;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 viewedPositionTop;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private UnityEngine.Vector3 viewedPositionBottom;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float transitionTimeInSeconds;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private UnityEngine.Vector3 transitionStepSize;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float movementAmountInCanvasUnits;

	[Token(Token = "0x6000734")]
	[Address(RVA = "0xDE0284", Offset = "0xDE0284", VA = "0xDE0284")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0xDE04E4", Offset = "0xDE04E4", VA = "0xDE04E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0xDE0584", Offset = "0xDE0584", VA = "0xDE0584")]
	private void Update()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xDDEEFC", Offset = "0xDDEEFC", VA = "0xDDEEFC")]
	public void moveInLetterBox()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xDDEE60", Offset = "0xDDEE60", VA = "0xDDEE60")]
	public void moveOutLetterBox()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xDE0760", Offset = "0xDE0760", VA = "0xDE0760")]
	public void cancelLetterBox()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xDE07C8", Offset = "0xDE07C8", VA = "0xDE07C8")]
	public DemoLetterbox()
	{
	}
}
[Token(Token = "0x20001C4")]
public class DemoLevelBoxTriggerIndicator : FPEGenericSaveableGameObject
{
	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3 myRotation;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip alarmSound;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.GameObject indicatorMesh;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool taskComplete;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Light myLight;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float startTime;

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xDE07E0", Offset = "0xDE07E0", VA = "0xDE07E0")]
	private void Start()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xDE09E8", Offset = "0xDE09E8", VA = "0xDE09E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xDE0B20", Offset = "0xDE0B20", VA = "0xDE0B20")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xDE0A90", Offset = "0xDE0A90", VA = "0xDE0A90")]
	private void turnOffIndicator()
	{
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xDE0C4C", Offset = "0xDE0C4C", VA = "0xDE0C4C", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xDE0CE4", Offset = "0xDE0CE4", VA = "0xDE0CE4", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xDE0D0C", Offset = "0xDE0D0C", VA = "0xDE0D0C")]
	public DemoLevelBoxTriggerIndicator()
	{
	}
}
[Token(Token = "0x20001C5")]
[RequireComponent(typeof(AudioSource))]
public class DemoRadioComplexScript : MonoBehaviour
{
	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip switchOn;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip switchOff;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material radioIlluminated;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material radioRegular;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.GameObject switchSound;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Light radioLight;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool radioOn;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Light[] radioLights;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float lightFlickerInterval;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float lightFlickerCounter;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform powerKnob;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UnityEngine.Quaternion powerOffKnobRotation;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private UnityEngine.Quaternion powerOnKnobRotation;

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xDE0D6C", Offset = "0xDE0D6C", VA = "0xDE0D6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xDE0FE0", Offset = "0xDE0FE0", VA = "0xDE0FE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xDE1188", Offset = "0xDE1188", VA = "0xDE1188")]
	public void turnRadioOn()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xDE1388", Offset = "0xDE1388", VA = "0xDE1388")]
	public void turnRadioOff()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xDE157C", Offset = "0xDE157C", VA = "0xDE157C")]
	public DemoRadioComplexScript()
	{
	}
}
[Token(Token = "0x20001C6")]
[RequireComponent(typeof(AudioSource))]
public class DemoRadioSimpleScript : MonoBehaviour
{
	[Token(Token = "0x6000747")]
	[Address(RVA = "0xDE15E8", Offset = "0xDE15E8", VA = "0xDE15E8")]
	public void turnRadioOn()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xDE169C", Offset = "0xDE169C", VA = "0xDE169C")]
	public void turnRadioOff()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xDE1750", Offset = "0xDE1750", VA = "0xDE1750")]
	public DemoRadioSimpleScript()
	{
	}
}
[Token(Token = "0x20001C7")]
[RequireComponent(typeof(AudioSource))]
public class DemoSecuritySystem : MonoBehaviour
{
	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[UnityEngine.Tooltip("The door(s) the security system will lock or unlock")]
	private FPEDoor[] doorsToControl;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[UnityEngine.Tooltip("The code required to open the door (e.g. 0451)")]
	private int[] doorCode;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[UnityEngine.Tooltip("Sound that plays when correct code is entered")]
	private AudioClip correctCodeSound;

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[UnityEngine.Tooltip("Sound that plays when incorrect code is entered")]
	private AudioClip incorrectCodeSound;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[UnityEngine.Tooltip("Material for Neutral status light")]
	[SerializeField]
	private Material statusLightNeutral;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[UnityEngine.Tooltip("Material for OK status light")]
	[SerializeField]
	private Material statusLightOkay;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[UnityEngine.Tooltip("Material for Error status light")]
	[SerializeField]
	private Material statusLightError;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AudioSource securitySpeaker;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int numberOfDigitsEntered;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int[] digits;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Text displayText;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private MeshRenderer statusLight;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool haveResult;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float resultDuration;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float resultCounter;

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xDE1758", Offset = "0xDE1758", VA = "0xDE1758")]
	private void Start()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xDE1C48", Offset = "0xDE1C48", VA = "0xDE1C48")]
	private void Update()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xDE1CB0", Offset = "0xDE1CB0", VA = "0xDE1CB0")]
	public void EnterDigit(int nextDigit)
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xDE1DB0", Offset = "0xDE1DB0", VA = "0xDE1DB0")]
	private void correctCodeEntered()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xDE1E00", Offset = "0xDE1E00", VA = "0xDE1E00")]
	private void incorrectCodeEntered()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xDE1B4C", Offset = "0xDE1B4C", VA = "0xDE1B4C")]
	private void refreshDisplay()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xDE1E50", Offset = "0xDE1E50", VA = "0xDE1E50")]
	private void unlockDoors()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xDE1F14", Offset = "0xDE1F14", VA = "0xDE1F14")]
	public DemoSecuritySystem()
	{
	}
}
[Token(Token = "0x20001C8")]
[Obsolete("DemoSlidingDoorScript will not be maintained beyond v2.2. Please migrate your doors to use the new door classes such as FPESlidingDoor, FPESwingingDoor, etc.")]
public class DemoSlidingDoorScript : FPEGenericSaveableGameObject
{
	[Token(Token = "0x20001C9")]
	private enum eDoorState
	{
		[Token(Token = "0x4000A59")]
		CLOSED,
		[Token(Token = "0x4000A5A")]
		CLOSING,
		[Token(Token = "0x4000A5B")]
		OPENING,
		[Token(Token = "0x4000A5C")]
		OPEN
	}

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.GameObject thePlayer;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.GameObject doorA;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.GameObject doorB;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.GameObject walkBlocker;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 doorAOpenPosition;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 doorAClosedPosition;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 doorBOpenPosition;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private UnityEngine.Vector3 doorBClosedPosition;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float doorMovementSpeed;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float doorAutoCloseTime;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float doorAutoCloseCountdown;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float doorAutoCloseZoneRadius;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool doAutoOpenClose;

	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool doorLocked;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private eDoorState currentDoorState;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private DemoDoorCardScannerScript myCardScanner;

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xDE1FC8", Offset = "0xDE1FC8", VA = "0xDE1FC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xDE2054", Offset = "0xDE2054", VA = "0xDE2054")]
	private void Start()
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xDE2264", Offset = "0xDE2264", VA = "0xDE2264")]
	private void Update()
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xDE2A7C", Offset = "0xDE2A7C", VA = "0xDE2A7C")]
	public bool isDoorLocked()
	{
		return default(bool);
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0xDDE2F8", Offset = "0xDDE2F8", VA = "0xDDE2F8")]
	public void unlockTheDoor()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0xDE2918", Offset = "0xDE2918", VA = "0xDE2918")]
	private void setDoorOpen()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xDE29D0", Offset = "0xDE29D0", VA = "0xDE29D0")]
	private void setDoorClosed()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xDE2A84", Offset = "0xDE2A84", VA = "0xDE2A84", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xDE2B34", Offset = "0xDE2B34", VA = "0xDE2B34", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xDE2BA8", Offset = "0xDE2BA8", VA = "0xDE2BA8")]
	public DemoSlidingDoorScript()
	{
	}
}
[Token(Token = "0x20001CA")]
[RequireComponent(typeof(AudioSource))]
public class DemoSoundOnExamineObjectScript : FPEInteractablePickupScript
{
	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
	[UnityEngine.Tooltip("Set to true if you want to play a sound when Examination starts.")]
	[Header("Special 'Examine' Sound Items")]
	public bool playSoundOnExamination;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFE")]
	[UnityEngine.Tooltip("If set to true, the specified sound is looped as long as player is examining object. If player stops examining object, looping sounds are stopped. Non-looping sounds will play to completion.")]
	public bool loopExaminationSound;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFF")]
	[UnityEngine.Tooltip("Set to true if the object should play the sound every time the object is examined.")]
	public bool playSoundEveryTime;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[UnityEngine.Tooltip("The Audio Clip you want to be played on examination start. If no Audio Clip is specified, no sound is played.")]
	public AudioClip examinationSound;

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private AudioSource myAudioSource;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool havePlayedSoundOnce;

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xDE2BC8", Offset = "0xDE2BC8", VA = "0xDE2BC8", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xDE2CE8", Offset = "0xDE2CE8", VA = "0xDE2CE8", Slot = "5")]
	public override void Start()
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xDE2CF0", Offset = "0xDE2CF0", VA = "0xDE2CF0", Slot = "9")]
	public override void Update()
	{
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0xDE2CF8", Offset = "0xDE2CF8", VA = "0xDE2CF8", Slot = "11")]
	public override void startExamination()
	{
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0xDE2D6C", Offset = "0xDE2D6C", VA = "0xDE2D6C", Slot = "12")]
	public override void endExamination()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0xDE2DD4", Offset = "0xDE2DD4", VA = "0xDE2DD4")]
	public DemoSoundOnExamineObjectScript()
	{
	}
}
[Token(Token = "0x20001CB")]
public class DemoSwitchActivationScript : FPEInteractableActivateScript
{
	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Header("Additional Demo Switch Stuff")]
	public Material lightOnMaterial;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Material lightOffMaterial;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Transform childSwitch;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool buttonActionInProgress;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private UnityEngine.GameObject demoSwitchLightBulb;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private UnityEngine.GameObject demoSwitchLightSource;

	[Token(Token = "0x6000762")]
	[Address(RVA = "0xDE2DDC", Offset = "0xDE2DDC", VA = "0xDE2DDC", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0xDE30C0", Offset = "0xDE30C0", VA = "0xDE30C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0xDE31D8", Offset = "0xDE31D8", VA = "0xDE31D8")]
	public void buttonAction()
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0xDE3350", Offset = "0xDE3350", VA = "0xDE3350")]
	public DemoSwitchActivationScript()
	{
	}
}
[Token(Token = "0x20001CC")]
public class DemoTapeDeck : FPEGenericSaveableGameObject
{
	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem mySmoke;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool destroyed;

	[Token(Token = "0x6000766")]
	[Address(RVA = "0xDE3358", Offset = "0xDE3358", VA = "0xDE3358")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0xDE344C", Offset = "0xDE344C", VA = "0xDE344C")]
	public void destroyTapeDeck()
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0xDE34DC", Offset = "0xDE34DC", VA = "0xDE34DC", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0xDE3574", Offset = "0xDE3574", VA = "0xDE3574", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xDE35AC", Offset = "0xDE35AC", VA = "0xDE35AC")]
	public DemoTapeDeck()
	{
	}
}
[Token(Token = "0x20001CD")]
[RequireComponent(typeof(AudioSource))]
public class DemoToiletFlushScript : FPEInteractableActivateScript
{
	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private UnityEngine.GameObject toiletRoot;

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xDE35B4", Offset = "0xDE35B4", VA = "0xDE35B4", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xDE36AC", Offset = "0xDE36AC", VA = "0xDE36AC", Slot = "9")]
	public override void activate()
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xDE37EC", Offset = "0xDE37EC", VA = "0xDE37EC")]
	public DemoToiletFlushScript()
	{
	}
}
[Token(Token = "0x20001CE")]
public class DemoToiletScript : FPEGenericSaveableGameObject
{
	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool canFlush;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float flushCooldown;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float reflushCountdown;

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DemoToiletSeatScript mySeat;

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xDE37F4", Offset = "0xDE37F4", VA = "0xDE37F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xDE38E4", Offset = "0xDE38E4", VA = "0xDE38E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xDE374C", Offset = "0xDE374C", VA = "0xDE374C")]
	public bool flushToilet()
	{
		return default(bool);
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xDE3928", Offset = "0xDE3928", VA = "0xDE3928", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xDE39C0", Offset = "0xDE39C0", VA = "0xDE39C0", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xDE3A64", Offset = "0xDE3A64", VA = "0xDE3A64")]
	public DemoToiletScript()
	{
	}
}
[Token(Token = "0x20001CF")]
[RequireComponent(typeof(AudioSource))]
public class DemoToiletSeatScript : FPEInteractableActivateScript
{
	[Token(Token = "0x20001D0")]
	private enum eSeatState
	{
		[Token(Token = "0x4000A7B")]
		OPEN,
		[Token(Token = "0x4000A7C")]
		OPENING,
		[Token(Token = "0x4000A7D")]
		CLOSING,
		[Token(Token = "0x4000A7E")]
		CLOSED
	}

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AudioClip toiletSeatUp;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public AudioClip toiletSeatDown;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private AudioSource myAudio;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private UnityEngine.Vector3 seatOpenAngles;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private UnityEngine.Vector3 seatClosedAngles;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private UnityEngine.Quaternion seatOpenRotation;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private UnityEngine.Quaternion seatClosedRotation;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float rotationRate;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private float snapAngle;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private eSeatState currentSeatState;

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xDE3A7C", Offset = "0xDE3A7C", VA = "0xDE3A7C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xDE3B4C", Offset = "0xDE3B4C", VA = "0xDE3B4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xDE3EDC", Offset = "0xDE3EDC", VA = "0xDE3EDC", Slot = "9")]
	public override void activate()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xDE3F00", Offset = "0xDE3F00", VA = "0xDE3F00")]
	public int GetSeatState()
	{
		return default(int);
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xDE39E0", Offset = "0xDE39E0", VA = "0xDE39E0")]
	public void RestorSeatState(int state)
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xDE3F08", Offset = "0xDE3F08", VA = "0xDE3F08")]
	public DemoToiletSeatScript()
	{
	}
}
[Token(Token = "0x20001D1")]
public class DemoTriggerSequenceHelper : FPEGenericSaveableGameObject
{
	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MeshRenderer triggerIndicatorA;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MeshRenderer triggerIndicatorB;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshRenderer triggerIndicatorC;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material triggerArmed;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material triggerDisarmed;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UnityEngine.GameObject triggeredWall;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int sequenceState;

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xDE3F94", Offset = "0xDE3F94", VA = "0xDE3F94")]
	private void Awake()
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xDE40B0", Offset = "0xDE40B0", VA = "0xDE40B0")]
	public void armA()
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xDE40DC", Offset = "0xDE40DC", VA = "0xDE40DC")]
	public void tripA()
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xDE4134", Offset = "0xDE4134", VA = "0xDE4134")]
	public void tripB()
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xDE41A0", Offset = "0xDE41A0", VA = "0xDE41A0")]
	public void tripC()
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xDE41F8", Offset = "0xDE41F8", VA = "0xDE41F8")]
	public void resetSequence()
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xDE4260", Offset = "0xDE4260", VA = "0xDE4260", Slot = "6")]
	public override FPEGenericObjectSaveData getSaveGameData()
	{
		return null;
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xDE42F4", Offset = "0xDE42F4", VA = "0xDE42F4", Slot = "7")]
	public override void restoreSaveGameData(FPEGenericObjectSaveData data)
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xDE4414", Offset = "0xDE4414", VA = "0xDE4414")]
	public DemoTriggerSequenceHelper()
	{
	}
}
[Token(Token = "0x20001D2")]
public class FPECubePageMover : MonoBehaviour
{
	[Token(Token = "0x6000783")]
	[Address(RVA = "0xDE441C", Offset = "0xDE441C", VA = "0xDE441C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xDE450C", Offset = "0xDE450C", VA = "0xDE450C")]
	public FPECubePageMover()
	{
	}
}
[Token(Token = "0x20001D3")]
public class FPEInputTester : MonoBehaviour
{
	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FPEInputTester _instance;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text resultsText;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text dataLogText;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.GameObject pauseIndicator;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool paused;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int maxStringLengh;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string inputState;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string dataLog;

	[Token(Token = "0x170000A3")]
	public static FPEInputTester Instance
	{
		[Token(Token = "0x6000785")]
		[Address(RVA = "0xDE4514", Offset = "0xDE4514", VA = "0xDE4514")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xDE455C", Offset = "0xDE455C", VA = "0xDE455C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xDE46B0", Offset = "0xDE46B0", VA = "0xDE46B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xDE4940", Offset = "0xDE4940", VA = "0xDE4940")]
	private void Update()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xDE5DA0", Offset = "0xDE5DA0", VA = "0xDE5DA0")]
	public FPEInputTester()
	{
	}
}
[Token(Token = "0x20001D4")]
public class DontSaveField : Attribute
{
	[Token(Token = "0x600078A")]
	[Address(RVA = "0xDE5E10", Offset = "0xDE5E10", VA = "0xDE5E10")]
	public DontSaveField()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D5")]
public class ObjectComponent
{
	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string componentName;

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<string, object> fields;

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xDE5E18", Offset = "0xDE5E18", VA = "0xDE5E18")]
	public ObjectComponent()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D6")]
public class SaveGame
{
	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string savegameName;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<SceneObject> sceneObjects;

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xDE5E20", Offset = "0xDE5E20", VA = "0xDE5E20")]
	public SaveGame()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xDE5ED4", Offset = "0xDE5ED4", VA = "0xDE5ED4")]
	public SaveGame(string s, List<SceneObject> list)
	{
	}
}
[Serializable]
[Token(Token = "0x20001D7")]
public class SceneObject
{
	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string prefabName;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string id;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string idParent;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool active;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public UnityEngine.Vector3 position;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.Vector3 localScale;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public UnityEngine.Quaternion rotation;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<ObjectComponent> objectComponents;

	[Token(Token = "0x600078E")]
	[Address(RVA = "0xDE5FC0", Offset = "0xDE5FC0", VA = "0xDE5FC0")]
	public SceneObject()
	{
	}
}
[Token(Token = "0x20001D8")]
public class ObjectIdentifier : MonoBehaviour
{
	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public new string name;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string prefabName;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string id;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string idParent;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool dontSave;

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xDE6048", Offset = "0xDE6048", VA = "0xDE6048")]
	public void SetID()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xDE6090", Offset = "0xDE6090", VA = "0xDE6090")]
	private void CheckForRelatives()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xDE6214", Offset = "0xDE6214", VA = "0xDE6214")]
	public ObjectIdentifier()
	{
	}
}
[Token(Token = "0x20001D9")]
public static class SaveLoad
{
	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string saveGamePath;

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xDE621C", Offset = "0xDE621C", VA = "0xDE621C")]
	public static void Save(SaveGame saveGame)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xDE68D8", Offset = "0xDE68D8", VA = "0xDE68D8")]
	public static SaveGame Load(string gameToLoad)
	{
		return null;
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xDE63C4", Offset = "0xDE63C4", VA = "0xDE63C4")]
	private static void AddSurrogates(ref SurrogateSelector ss)
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xDE675C", Offset = "0xDE675C", VA = "0xDE675C")]
	private static void CheckPath(string path)
	{
	}
}
[Token(Token = "0x20001DA")]
public class SaveLoadMenu : MonoBehaviour
{
	[Token(Token = "0x20001DB")]
	[CompilerGenerated]
	private sealed class <wait>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x170000A4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xDE9468", Offset = "0xDE9468", VA = "0xDE9468", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007AA")]
			[Address(RVA = "0xDE94B0", Offset = "0xDE94B0", VA = "0xDE94B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xDE7218", Offset = "0xDE7218", VA = "0xDE7218")]
		[DebuggerHidden]
		public <wait>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xDE93B8", Offset = "0xDE93B8", VA = "0xDE93B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xDE93BC", Offset = "0xDE93BC", VA = "0xDE93BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xDE9470", Offset = "0xDE9470", VA = "0xDE9470", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool showMenu;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool usePersistentDataPath;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string savePath;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<string, UnityEngine.GameObject> prefabDictionary;

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xDE6BF4", Offset = "0xDE6BF4", VA = "0xDE6BF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xDE6E4C", Offset = "0xDE6E4C", VA = "0xDE6E4C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xDE6F3C", Offset = "0xDE6F3C", VA = "0xDE6F3C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xDE71A8", Offset = "0xDE71A8", VA = "0xDE71A8")]
	[IteratorStateMachine(typeof(<wait>d__7))]
	private IEnumerator wait(float time)
	{
		return null;
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xDE6EAC", Offset = "0xDE6EAC", VA = "0xDE6EAC")]
	public void SaveGame()
	{
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xDE7240", Offset = "0xDE7240", VA = "0xDE7240")]
	public void SaveGame(string saveGameName)
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xDE6EF4", Offset = "0xDE6EF4", VA = "0xDE6EF4")]
	public void LoadGame()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xDE7E2C", Offset = "0xDE7E2C", VA = "0xDE7E2C")]
	public void LoadGame(string saveGameName)
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xDE84B8", Offset = "0xDE84B8", VA = "0xDE84B8")]
	public void ClearScene()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xDE7818", Offset = "0xDE7818", VA = "0xDE7818")]
	public SceneObject PackGameObject(UnityEngine.GameObject go)
	{
		return null;
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xDE8A0C", Offset = "0xDE8A0C", VA = "0xDE8A0C")]
	public ObjectComponent PackComponent(object component)
	{
		return null;
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xDE869C", Offset = "0xDE869C", VA = "0xDE869C")]
	public UnityEngine.GameObject UnpackGameObject(SceneObject sceneObject)
	{
		return null;
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xDE8F74", Offset = "0xDE8F74", VA = "0xDE8F74")]
	public void UnpackComponents(ref UnityEngine.GameObject go, SceneObject sceneObject)
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xDE93A8", Offset = "0xDE93A8", VA = "0xDE93A8")]
	public SaveLoadMenu()
	{
	}
}
[Token(Token = "0x20001DC")]
internal sealed class ColorSurrogate : ISerializationSurrogate
{
	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xDE94B8", Offset = "0xDE94B8", VA = "0xDE94B8", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xDE95E4", Offset = "0xDE95E4", VA = "0xDE95E4", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xDE6B58", Offset = "0xDE6B58", VA = "0xDE6B58")]
	public ColorSurrogate()
	{
	}
}
[Token(Token = "0x20001DD")]
internal sealed class GameObjectSurrogate : ISerializationSurrogate
{
	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xDE9840", Offset = "0xDE9840", VA = "0xDE9840", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xDE986C", Offset = "0xDE986C", VA = "0xDE986C", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xDE6B60", Offset = "0xDE6B60", VA = "0xDE6B60")]
	public GameObjectSurrogate()
	{
	}
}
[Token(Token = "0x20001DE")]
internal sealed class QuaternionSurrogate : ISerializationSurrogate
{
	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xDE98A8", Offset = "0xDE98A8", VA = "0xDE98A8", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xDE99D4", Offset = "0xDE99D4", VA = "0xDE99D4", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xDE6B70", Offset = "0xDE6B70", VA = "0xDE6B70")]
	public QuaternionSurrogate()
	{
	}
}
[Token(Token = "0x20001DF")]
internal sealed class Texture2DSurrogate : ISerializationSurrogate
{
	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xDE9C30", Offset = "0xDE9C30", VA = "0xDE9C30", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xDE9C5C", Offset = "0xDE9C5C", VA = "0xDE9C5C", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xDE6B50", Offset = "0xDE6B50", VA = "0xDE6B50")]
	public Texture2DSurrogate()
	{
	}
}
[Token(Token = "0x20001E0")]
internal sealed class TransformSurrogate : ISerializationSurrogate
{
	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xDE9C98", Offset = "0xDE9C98", VA = "0xDE9C98", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xDE9CC4", Offset = "0xDE9CC4", VA = "0xDE9CC4", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0xDE6B68", Offset = "0xDE6B68", VA = "0xDE6B68")]
	public TransformSurrogate()
	{
	}
}
[Token(Token = "0x20001E1")]
internal sealed class Vector3Surrogate : ISerializationSurrogate
{
	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xDE9D00", Offset = "0xDE9D00", VA = "0xDE9D00", Slot = "4")]
	public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xDE9DF4", Offset = "0xDE9DF4", VA = "0xDE9DF4", Slot = "5")]
	public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)
	{
		return null;
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xDE6B48", Offset = "0xDE6B48", VA = "0xDE6B48")]
	public Vector3Surrogate()
	{
	}
}
[Token(Token = "0x20001E2")]
internal static class TypeSystem
{
	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xDE8ECC", Offset = "0xDE8ECC", VA = "0xDE8ECC")]
	internal static Type GetElementType(Type seqType)
	{
		return null;
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xDE9FF0", Offset = "0xDE9FF0", VA = "0xDE9FF0")]
	private static Type FindIEnumerable(Type seqType)
	{
		return null;
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0xDE8DAC", Offset = "0xDE8DAC", VA = "0xDE8DAC")]
	public static bool IsEnumerableType(Type type)
	{
		return default(bool);
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xDE8E3C", Offset = "0xDE8E3C", VA = "0xDE8E3C")]
	public static bool IsCollectionType(Type type)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001E3")]
public static class TextureGenerator
{
	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xDEA410", Offset = "0xDEA410", VA = "0xDEA410")]
	public static Texture2D TextureFromColourMap(UnityEngine.Color[] colourMap, int width, int height)
	{
		return null;
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0xDEA4C4", Offset = "0xDEA4C4", VA = "0xDEA4C4")]
	public static Texture2D TextureFromHeightMap(HeightMap heightMap)
	{
		return null;
	}
}
[Token(Token = "0x20001E4")]
public class ThreadedDataRequester : MonoBehaviour
{
	[Token(Token = "0x20001E5")]
	private struct ThreadInfo
	{
		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Action<object> callback;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly object parameter;

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xDEB93C", Offset = "0xDEB93C", VA = "0xDEB93C")]
		public ThreadInfo(Action<object> callback, object parameter)
		{
		}
	}

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ThreadedDataRequester instance;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<ThreadInfo> dataQueue;

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0xDEB648", Offset = "0xDEB648", VA = "0xDEB648")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0xDEB6DC", Offset = "0xDEB6DC", VA = "0xDEB6DC")]
	public static void RequestData(Func<object> generateData, Action<object> callback)
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xDEB7EC", Offset = "0xDEB7EC", VA = "0xDEB7EC")]
	private void DataThread(Func<object> generateData, Action<object> callback)
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xDEB96C", Offset = "0xDEB96C", VA = "0xDEB96C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xDEBA0C", Offset = "0xDEBA0C", VA = "0xDEBA0C")]
	public ThreadedDataRequester()
	{
	}
}
[Token(Token = "0x20001E7")]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
public class WaterController : MonoBehaviour
{
	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<UnityEngine.GameObject> waveSources;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float waterLevelY;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float surfaceActualWidth;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float surfaceActualLength;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int surfaceWidthPoints;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int surfaceLengthPoints;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float localTime;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float localTimeScale;

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xDEBAEC", Offset = "0xDEBAEC", VA = "0xDEBAEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xDEC1F0", Offset = "0xDEC1F0", VA = "0xDEC1F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xDEC228", Offset = "0xDEC228", VA = "0xDEC228")]
	private void UpdateWaterMesh()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xDEC320", Offset = "0xDEC320", VA = "0xDEC320")]
	private float RecalculatePointY(UnityEngine.Vector3 point)
	{
		return default(float);
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xDEBBEC", Offset = "0xDEBBEC", VA = "0xDEBBEC")]
	private void CreateMesh()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xDEC4A8", Offset = "0xDEC4A8", VA = "0xDEC4A8")]
	private float MapValue(float refValue, float refMin, float refMax, float targetMin, float targetMax)
	{
		return default(float);
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xDEC4C4", Offset = "0xDEC4C4", VA = "0xDEC4C4")]
	public WaterController()
	{
	}
}
[Token(Token = "0x20001E8")]
public class WindManager : MonoBehaviour
{
	[Token(Token = "0x20001E9")]
	[CompilerGenerated]
	private sealed class <Wait>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WindManager <>4__this;

		[Token(Token = "0x170000A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007DF")]
			[Address(RVA = "0xDECB98", Offset = "0xDECB98", VA = "0xDECB98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E1")]
			[Address(RVA = "0xDECBE0", Offset = "0xDECBE0", VA = "0xDECBE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xDEC598", Offset = "0xDEC598", VA = "0xDEC598")]
		[DebuggerHidden]
		public <Wait>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xDECAA8", Offset = "0xDECAA8", VA = "0xDECAA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xDECAAC", Offset = "0xDECAAC", VA = "0xDECAAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xDECBA0", Offset = "0xDECBA0", VA = "0xDECBA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EA")]
	[CompilerGenerated]
	private sealed class <ChangeWindDirection>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WindManager <>4__this;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timeInSeconds;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <startingValue>5__2;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <targetValue>5__3;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <t>5__4;

		[Token(Token = "0x170000A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E5")]
			[Address(RVA = "0xDECD48", Offset = "0xDECD48", VA = "0xDECD48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E7")]
			[Address(RVA = "0xDECD90", Offset = "0xDECD90", VA = "0xDECD90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xDEC644", Offset = "0xDEC644", VA = "0xDEC644")]
		[DebuggerHidden]
		public <ChangeWindDirection>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xDECBE8", Offset = "0xDECBE8", VA = "0xDECBE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xDECBEC", Offset = "0xDECBEC", VA = "0xDECBEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xDECD50", Offset = "0xDECD50", VA = "0xDECD50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float windDirection;

	[Token(Token = "0x4000AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool isRotating;

	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float previousWindDirection;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float currentRotationAmount;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve windRotationCurve;

	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float previousRotationTime;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float currentRotationSpeed;

	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly float windVectorBaseCoefficient;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool waiting;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int windTransitionTime;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int transitionTime;

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xDEC4CC", Offset = "0xDEC4CC", VA = "0xDEC4CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xDEC4D4", Offset = "0xDEC4D4", VA = "0xDEC4D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xDEC524", Offset = "0xDEC524", VA = "0xDEC524")]
	[IteratorStateMachine(typeof(<Wait>d__13))]
	private IEnumerator Wait()
	{
		return null;
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xDEC5C0", Offset = "0xDEC5C0", VA = "0xDEC5C0")]
	[IteratorStateMachine(typeof(<ChangeWindDirection>d__14))]
	public IEnumerator ChangeWindDirection(float timeInSeconds = 1f)
	{
		return null;
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xDEC66C", Offset = "0xDEC66C", VA = "0xDEC66C")]
	public UnityEngine.Vector4 GetWindDirectionVector()
	{
		return default(UnityEngine.Vector4);
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xDEC988", Offset = "0xDEC988", VA = "0xDEC988")]
	public float GetWindDirectionEuler(bool forShader = true)
	{
		return default(float);
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xDEC9B0", Offset = "0xDEC9B0", VA = "0xDEC9B0")]
	private float AddDegreeToAngle(float currentAngle, float degreesToAdd)
	{
		return default(float);
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xDEC9E0", Offset = "0xDEC9E0", VA = "0xDEC9E0")]
	private static float Clamp0360(float eulerAngles)
	{
		return default(float);
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xDECA7C", Offset = "0xDECA7C", VA = "0xDECA7C")]
	private static float InvertRadian(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xDECA94", Offset = "0xDECA94", VA = "0xDECA94")]
	public WindManager()
	{
	}
}
[Token(Token = "0x20001EB")]
public class SkyDome : MonoBehaviour
{
	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material material;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float cycleSpeed;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float offSet;

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xDECD98", Offset = "0xDECD98", VA = "0xDECD98")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xDECE00", Offset = "0xDECE00", VA = "0xDECE00")]
	private void Update()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xDECE9C", Offset = "0xDECE9C", VA = "0xDECE9C")]
	public SkyDome()
	{
	}
}
[Token(Token = "0x20001EC")]
public class spawner : MonoBehaviour
{
	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform spawnPos;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject spawnee;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int i;

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xDECEA4", Offset = "0xDECEA4", VA = "0xDECEA4")]
	public void update()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xDED064", Offset = "0xDED064", VA = "0xDED064")]
	public spawner()
	{
	}
}
[Token(Token = "0x20001ED")]
public class PlayerPrefsPlus
{
	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int ID;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PlayerPrefsSQL sql;

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xDED06C", Offset = "0xDED06C", VA = "0xDED06C")]
	public PlayerPrefsPlus()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xDED1C0", Offset = "0xDED1C0", VA = "0xDED1C0", Slot = "1")]
	~PlayerPrefsPlus()
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0xDED284", Offset = "0xDED284", VA = "0xDED284")]
	public PlayerPrefsPlus(string PlayerName)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0xDED3B4", Offset = "0xDED3B4", VA = "0xDED3B4")]
	public PlayerPrefsPlus(int PlayerID)
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0xDED4E0", Offset = "0xDED4E0", VA = "0xDED4E0")]
	public PlayerPrefsPlus(MonoBehaviour mono)
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0xDED640", Offset = "0xDED640", VA = "0xDED640")]
	public void OpenAsync(Action<bool> callback)
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0xDED30C", Offset = "0xDED30C", VA = "0xDED30C")]
	public void GetPlayerByName(string PlayerName)
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xDED43C", Offset = "0xDED43C", VA = "0xDED43C")]
	public void GetPlayerByID(int PlayerID)
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xDED8E4", Offset = "0xDED8E4", VA = "0xDED8E4")]
	public int GetAllPlayers(out playerprefsplus_player[] Players)
	{
		return default(int);
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0xDEDA48", Offset = "0xDEDA48", VA = "0xDEDA48")]
	public int GetPlayerCount()
	{
		return default(int);
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0xDEDB88", Offset = "0xDEDB88", VA = "0xDEDB88")]
	public bool SetDefaults()
	{
		return default(bool);
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xDEDC2C", Offset = "0xDEDC2C", VA = "0xDEDC2C")]
	public bool HasKey(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xDEDD98", Offset = "0xDEDD98", VA = "0xDEDD98")]
	public bool DeleteAll()
	{
		return default(bool);
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xDEE180", Offset = "0xDEE180", VA = "0xDEE180")]
	public bool DeleteAllValues()
	{
		return default(bool);
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xDEE4F4", Offset = "0xDEE4F4", VA = "0xDEE4F4")]
	public bool DeleteKey(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xDEE8C0", Offset = "0xDEE8C0", VA = "0xDEE8C0")]
	public Dictionary<string, object> Get()
	{
		return null;
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xDEED38", Offset = "0xDEED38", VA = "0xDEED38")]
	public object Get(string key)
	{
		return null;
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xDEF100", Offset = "0xDEF100", VA = "0xDEF100")]
	public object Get(string key, int seq)
	{
		return null;
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xDEF4FC", Offset = "0xDEF4FC", VA = "0xDEF4FC")]
	public bool Set(string key, string value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xDEF618", Offset = "0xDEF618", VA = "0xDEF618")]
	public bool Set(string key, int value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xDEF6EC", Offset = "0xDEF6EC", VA = "0xDEF6EC")]
	public bool Set(string key, bool value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xDEF7C4", Offset = "0xDEF7C4", VA = "0xDEF7C4")]
	public bool Set(string key, UnityEngine.Vector2 value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xDEF89C", Offset = "0xDEF89C", VA = "0xDEF89C")]
	public bool Set(string key, UnityEngine.Vector3 value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xDEF98C", Offset = "0xDEF98C", VA = "0xDEF98C")]
	public bool Set(string key, UnityEngine.Vector4 value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xDEFA80", Offset = "0xDEFA80", VA = "0xDEFA80")]
	public bool Set(string key, float value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xDEFB5C", Offset = "0xDEFB5C", VA = "0xDEFB5C")]
	public bool Set(string key, byte value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xDEFC30", Offset = "0xDEFC30", VA = "0xDEFC30")]
	public bool Set(string key, long value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xDEFD04", Offset = "0xDEFD04", VA = "0xDEFD04")]
	public bool Set(string key, UnityEngine.GameObject value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xDEFD9C", Offset = "0xDEFD9C", VA = "0xDEFD9C")]
	public bool Set(string key, DateTime value)
	{
		return default(bool);
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xDEFE70", Offset = "0xDEFE70", VA = "0xDEFE70")]
	public bool Set(string key, UnityEngine.Color value)
	{
		return default(bool);
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xDEFF64", Offset = "0xDEFF64", VA = "0xDEFF64")]
	public bool Set(string key, UnityEngine.Quaternion value)
	{
		return default(bool);
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xDF0058", Offset = "0xDF0058", VA = "0xDF0058")]
	public bool Set(string key, UnityEngine.Rect value)
	{
		return default(bool);
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xDF014C", Offset = "0xDF014C", VA = "0xDF014C")]
	public bool Set(string key, Sprite value)
	{
		return default(bool);
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xDF01E4", Offset = "0xDF01E4", VA = "0xDF01E4")]
	public bool Set(string key, UnityEngine.Object value)
	{
		return default(bool);
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xDF027C", Offset = "0xDF027C", VA = "0xDF027C")]
	public bool Set(string key, string[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xDF0314", Offset = "0xDF0314", VA = "0xDF0314")]
	public bool Set(string key, int[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xDF03AC", Offset = "0xDF03AC", VA = "0xDF03AC")]
	public bool Set(string key, bool[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0xDF0444", Offset = "0xDF0444", VA = "0xDF0444")]
	public bool Set(string key, UnityEngine.Vector2[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0xDF04DC", Offset = "0xDF04DC", VA = "0xDF04DC")]
	public bool Set(string key, UnityEngine.Vector3[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xDF0574", Offset = "0xDF0574", VA = "0xDF0574")]
	public bool Set(string key, UnityEngine.Vector4[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xDF060C", Offset = "0xDF060C", VA = "0xDF060C")]
	public bool Set(string key, float[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xDF06A4", Offset = "0xDF06A4", VA = "0xDF06A4")]
	public bool Set(string key, byte[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xDF073C", Offset = "0xDF073C", VA = "0xDF073C")]
	public bool Set(string key, long[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xDF07D4", Offset = "0xDF07D4", VA = "0xDF07D4")]
	public bool Set(string key, UnityEngine.GameObject[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xDF086C", Offset = "0xDF086C", VA = "0xDF086C")]
	public bool Set(string key, DateTime[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xDF0904", Offset = "0xDF0904", VA = "0xDF0904")]
	public bool Set(string key, UnityEngine.Color[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xDF099C", Offset = "0xDF099C", VA = "0xDF099C")]
	public bool Set(string key, UnityEngine.Quaternion[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xDF0A34", Offset = "0xDF0A34", VA = "0xDF0A34")]
	public bool Set(string key, UnityEngine.Rect[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xDF0ACC", Offset = "0xDF0ACC", VA = "0xDF0ACC")]
	public bool Set(string key, Sprite[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xDF0B64", Offset = "0xDF0B64", VA = "0xDF0B64")]
	public bool Set(string key, UnityEngine.Object[] values)
	{
		return default(bool);
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xDF0BFC", Offset = "0xDF0BFC", VA = "0xDF0BFC")]
	public bool Set(string key, string value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xDF13C8", Offset = "0xDF13C8", VA = "0xDF13C8")]
	public bool Set(string key, int value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xDF14A4", Offset = "0xDF14A4", VA = "0xDF14A4")]
	public bool Set(string key, bool value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xDF1584", Offset = "0xDF1584", VA = "0xDF1584")]
	public bool Set(string key, UnityEngine.Vector2 value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xDF166C", Offset = "0xDF166C", VA = "0xDF166C")]
	public bool Set(string key, UnityEngine.Vector3 value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xDF1764", Offset = "0xDF1764", VA = "0xDF1764")]
	public bool Set(string key, UnityEngine.Vector4 value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xDF1860", Offset = "0xDF1860", VA = "0xDF1860")]
	public bool Set(string key, float value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xDF193C", Offset = "0xDF193C", VA = "0xDF193C")]
	public bool Set(string key, byte value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xDF1A18", Offset = "0xDF1A18", VA = "0xDF1A18")]
	public bool Set(string key, long value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xDF1AF4", Offset = "0xDF1AF4", VA = "0xDF1AF4")]
	public bool Set(string key, UnityEngine.GameObject value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xDF1B9C", Offset = "0xDF1B9C", VA = "0xDF1B9C")]
	public bool Set(string key, DateTime value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xDF1C78", Offset = "0xDF1C78", VA = "0xDF1C78")]
	public bool Set(string key, UnityEngine.Color value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xDF1D74", Offset = "0xDF1D74", VA = "0xDF1D74")]
	public bool Set(string key, UnityEngine.Quaternion value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xDF1E70", Offset = "0xDF1E70", VA = "0xDF1E70")]
	public bool Set(string key, UnityEngine.Rect value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xDF1F6C", Offset = "0xDF1F6C", VA = "0xDF1F6C")]
	public bool Set(string key, Sprite value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xDF2014", Offset = "0xDF2014", VA = "0xDF2014")]
	public bool Set(string key, UnityEngine.Object value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xDF20BC", Offset = "0xDF20BC", VA = "0xDF20BC")]
	public void AutoSave(bool save)
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xDF2170", Offset = "0xDF2170", VA = "0xDF2170")]
	public void Save()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xDF221C", Offset = "0xDF221C", VA = "0xDF221C")]
	public void Open()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xDED254", Offset = "0xDED254", VA = "0xDED254")]
	public void Close()
	{
	}
}
[Token(Token = "0x20001EE")]
public class PlayerPrefsSetup
{
	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PlayerPrefsSQL sql;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string query;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SQLResult result;

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xDF22C0", Offset = "0xDF22C0", VA = "0xDF22C0", Slot = "1")]
	~PlayerPrefsSetup()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xDF2384", Offset = "0xDF2384", VA = "0xDF2384")]
	public PlayerPrefsSetup()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xDF2428", Offset = "0xDF2428", VA = "0xDF2428")]
	public PlayerPrefsSetup(MonoBehaviour mono, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xDF24F0", Offset = "0xDF24F0", VA = "0xDF24F0")]
	public bool AddPref(string key, string dataType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xDF2ED0", Offset = "0xDF2ED0", VA = "0xDF2ED0")]
	public bool RenamePref(string oldKey, string newKey)
	{
		return default(bool);
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xDF302C", Offset = "0xDF302C", VA = "0xDF302C")]
	public bool DeletePref(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xDF31E0", Offset = "0xDF31E0", VA = "0xDF31E0")]
	public bool DeletePref(int prefID)
	{
		return default(bool);
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xDF355C", Offset = "0xDF355C", VA = "0xDF355C")]
	public bool AddPlayer(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0xDF375C", Offset = "0xDF375C", VA = "0xDF375C")]
	public bool RenamePlayer(string oldName, string newName)
	{
		return default(bool);
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xDF38B8", Offset = "0xDF38B8", VA = "0xDF38B8")]
	public bool DeletePlayer(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xDF3A6C", Offset = "0xDF3A6C", VA = "0xDF3A6C")]
	public bool DeletePlayer(int playerID)
	{
		return default(bool);
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xDF2354", Offset = "0xDF2354", VA = "0xDF2354")]
	public void Close()
	{
	}
}
[Token(Token = "0x20001EF")]
public class PlayerPrefsSQL
{
	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private SQLExecute sql;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SQLResult result;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool autoSave;

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xDED0DC", Offset = "0xDED0DC", VA = "0xDED0DC")]
	public PlayerPrefsSQL()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0xDED560", Offset = "0xDED560", VA = "0xDED560")]
	public PlayerPrefsSQL(MonoBehaviour mono)
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0xDF3BE0", Offset = "0xDF3BE0", VA = "0xDF3BE0", Slot = "1")]
	~PlayerPrefsSQL()
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0xDED650", Offset = "0xDED650", VA = "0xDED650")]
	public void OpenAsync(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0xDED6B4", Offset = "0xDED6B4", VA = "0xDED6B4")]
	public int GetPlayerByName(string PlayerName)
	{
		return default(int);
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0xDED7D8", Offset = "0xDED7D8", VA = "0xDED7D8")]
	public string GetPlayerByID(int PlayerID)
	{
		return null;
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0xDED964", Offset = "0xDED964", VA = "0xDED964")]
	public int GetAllPlayers(out playerprefsplus_player[] Players)
	{
		return default(int);
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0xDEDAC0", Offset = "0xDEDAC0", VA = "0xDEDAC0")]
	public int GetPlayerCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xDEDC24", Offset = "0xDEDC24", VA = "0xDEDC24")]
	public bool SetPlayerDefaults(int PlayerID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xDF3C74", Offset = "0xDF3C74", VA = "0xDF3C74")]
	public bool CopyPlayerValues(int PlayerID, int CopyID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0xDEDCBC", Offset = "0xDEDCBC", VA = "0xDEDCBC")]
	public bool PlayerHasKey(int PlayerID, string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0xDEDE18", Offset = "0xDEDE18", VA = "0xDEDE18")]
	public bool PlayerDeleteAll(int PlayerID)
	{
		return default(bool);
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0xDEE200", Offset = "0xDEE200", VA = "0xDEE200")]
	public bool PlayerDeleteValues(int PlayerID)
	{
		return default(bool);
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xDEE584", Offset = "0xDEE584", VA = "0xDEE584")]
	public bool PlayerDeleteKey(int PlayerID, string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xDF445C", Offset = "0xDF445C", VA = "0xDF445C")]
	public bool PlayerDeleteKeyValues(int PlayerID, string key)
	{
		return default(bool);
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xDEE960", Offset = "0xDEE960", VA = "0xDEE960")]
	public bool PlayerGet(int PlayerID, out Dictionary<string, object> values)
	{
		return default(bool);
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xDEEDE0", Offset = "0xDEEDE0", VA = "0xDEEDE0")]
	public bool PlayerGet(int PlayerID, string key, out object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0xDEF1B8", Offset = "0xDEF1B8", VA = "0xDEF1B8")]
	public bool PlayerGet(int PlayerID, string key, int seq, out object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0xDEF594", Offset = "0xDEF594", VA = "0xDEF594")]
	public bool PlayerSet(int PlayerID, string key, object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0xDF0CA4", Offset = "0xDF0CA4", VA = "0xDF0CA4")]
	public bool PlayerSet(int PlayerID, string key, object value, int seq)
	{
		return default(bool);
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0xDF45C0", Offset = "0xDF45C0", VA = "0xDF45C0")]
	public bool PlayerSetArray(int PlayerID, string key, object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0xDF2704", Offset = "0xDF2704", VA = "0xDF2704")]
	public string getColName(string type)
	{
		return null;
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0xDF4D2C", Offset = "0xDF4D2C", VA = "0xDF4D2C")]
	private bool isValid(string type, object value)
	{
		return default(bool);
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0xDF5434", Offset = "0xDF5434", VA = "0xDF5434")]
	private bool isValidArray(string type, object values, out object[] outVals)
	{
		return default(bool);
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xDF2E40", Offset = "0xDF2E40", VA = "0xDF2E40")]
	public SQLResult SQL(string query)
	{
		return null;
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0xDF214C", Offset = "0xDF214C", VA = "0xDF214C")]
	public void AutoSave(bool save)
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xDF2200", Offset = "0xDF2200", VA = "0xDF2200")]
	public void Save()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xDF2288", Offset = "0xDF2288", VA = "0xDF2288")]
	public void Close()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0xDF2CF4", Offset = "0xDF2CF4", VA = "0xDF2CF4")]
	public string tostring(object value)
	{
		return null;
	}
}
[Token(Token = "0x20001F0")]
public class playerprefsplus_player : SQLRow
{
	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int ID;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Title;

	[Token(Token = "0x600085C")]
	[Address(RVA = "0xDF6EDC", Offset = "0xDF6EDC", VA = "0xDF6EDC", Slot = "4")]
	public override void Get(Dictionary<string, object> row)
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0xDF72B4", Offset = "0xDF72B4", VA = "0xDF72B4")]
	public playerprefsplus_player()
	{
	}
}
[Token(Token = "0x20001F1")]
public class playerprefsplus_playerpref : SQLRow
{
	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int ID;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int PlayerID;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int PrefID;

	[Token(Token = "0x600085E")]
	[Address(RVA = "0xDF72BC", Offset = "0xDF72BC", VA = "0xDF72BC", Slot = "4")]
	public override void Get(Dictionary<string, object> row)
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xDF76D8", Offset = "0xDF76D8", VA = "0xDF76D8")]
	public playerprefsplus_playerpref()
	{
	}
}
[Token(Token = "0x20001F2")]
public class playerprefsplus_playerprefvalue : SQLRow
{
	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int PlayerPrefID;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Seq;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string StringVal;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int IntVal;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool BoolVal;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Vector2 V2Val;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.Vector3 V3Val;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public UnityEngine.Vector4 V4Val;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.GameObject GoVal;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float FloatVal;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public long LongVal;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public byte ByteVal;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SQLDate DateVal;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.Color ColVal;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEngine.Quaternion QuatVal;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEngine.Rect RectVal;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Sprite SpriteVal;

	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEngine.Object ResVal;

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xDF76E0", Offset = "0xDF76E0", VA = "0xDF76E0", Slot = "4")]
	public override void Get(Dictionary<string, object> row)
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xDF8500", Offset = "0xDF8500", VA = "0xDF8500")]
	public playerprefsplus_playerprefvalue()
	{
	}
}
[Token(Token = "0x20001F3")]
public class playerprefsplus_pref : SQLRow
{
	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int ID;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Title;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Type;

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xDF8508", Offset = "0xDF8508", VA = "0xDF8508", Slot = "4")]
	public override void Get(Dictionary<string, object> row)
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xDF8964", Offset = "0xDF8964", VA = "0xDF8964")]
	public playerprefsplus_pref()
	{
	}
}
[Token(Token = "0x20001F4")]
public class Water : MonoBehaviour
{
	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3[] verticies;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int[] triangles;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector2[] uvs;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 256f)]
	public int Size;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(1f, 8f)]
	public int octaves;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float height;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float speed;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float frequency;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float off;

	[Token(Token = "0x6000864")]
	[Address(RVA = "0xDF896C", Offset = "0xDF896C", VA = "0xDF896C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0xDF8D50", Offset = "0xDF8D50", VA = "0xDF8D50")]
	public Water()
	{
	}
}
[Token(Token = "0x20001F5")]
public class TerrainHitPoint : MonoBehaviour
{
	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Collider thisCollider;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float LastRelativeVelocity;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public RaycastHit outHitPoint;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isRockIn;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Terraformer terraformer;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ChunkSpawner spawner;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool _left;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool _right;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool _flatten;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	public bool _mine;

	[Token(Token = "0x4000B07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool _flattendown;

	[Token(Token = "0x4000B08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool _editing;

	[Token(Token = "0x4000B09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.GameObject mineEffect;

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.GameObject sandBlock;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.GameObject grassBlock;

	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UnityEngine.GameObject rockBlock;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public LineRenderer terraLine;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform terraLineStart;

	[Token(Token = "0x4000B0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public RaycastHit hitPoint;

	[Token(Token = "0x4000B10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Collision otherHit;

	[Token(Token = "0x6000866")]
	[Address(RVA = "0xDF8D58", Offset = "0xDF8D58", VA = "0xDF8D58")]
	public void Update()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0xDF8E60", Offset = "0xDF8E60", VA = "0xDF8E60")]
	public void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xDF95BC", Offset = "0xDF95BC", VA = "0xDF95BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0xDF96EC", Offset = "0xDF96EC", VA = "0xDF96EC")]
	public TerrainHitPoint()
	{
	}
}
[Token(Token = "0x20001F6")]
public class ToolTipManager : MonoBehaviour
{
	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int IsFirst;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public List<UnityEngine.GameObject> tooltips;

	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject toolTipsMenu;

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool toolTipsisOn;

	[Token(Token = "0x600086A")]
	[Address(RVA = "0xDF96F4", Offset = "0xDF96F4", VA = "0xDF96F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0xDF9764", Offset = "0xDF9764", VA = "0xDF9764")]
	private void Start()
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0xDF9BE4", Offset = "0xDF9BE4", VA = "0xDF9BE4")]
	private void Update()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0xDF9AEC", Offset = "0xDF9AEC", VA = "0xDF9AEC")]
	public void ClearTooltips()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0xDF9BE8", Offset = "0xDF9BE8", VA = "0xDF9BE8")]
	public void ToolTipsToggle()
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0xDF9E50", Offset = "0xDF9E50", VA = "0xDF9E50")]
	public ToolTipManager()
	{
	}
}
[Token(Token = "0x20001F7")]
public class TooltipsLoadingManager : MonoBehaviour
{
	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public List<UnityEngine.GameObject> tooltipsLoading;

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int randomInt;

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xDF9ED8", Offset = "0xDF9ED8", VA = "0xDF9ED8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xDF9F88", Offset = "0xDF9F88", VA = "0xDF9F88")]
	private void Update()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xDF9F8C", Offset = "0xDF9F8C", VA = "0xDF9F8C")]
	public TooltipsLoadingManager()
	{
	}
}
[Token(Token = "0x20001F8")]
public class TreeController : MonoBehaviour
{
	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DistanceFromGround;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private RaycastHit groundHitUp;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RaycastHit groundHitDown;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public LayerMask layerMask3;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private RaycastHit hitTreeUp;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private RaycastHit hitTreeDown;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool snapDown;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	private bool snapUp;

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xDFA014", Offset = "0xDFA014", VA = "0xDFA014")]
	private void Start()
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xDFA0EC", Offset = "0xDFA0EC", VA = "0xDFA0EC", Slot = "4")]
	public virtual void UpdateDistanceFromGround()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xDFA904", Offset = "0xDFA904", VA = "0xDFA904")]
	public TreeController()
	{
	}
}
[Token(Token = "0x20001F9")]
[ExecuteAlways]
public class playerpos : MonoBehaviour
{
	[Token(Token = "0x6000876")]
	[Address(RVA = "0xDFA90C", Offset = "0xDFA90C", VA = "0xDFA90C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0xDFA910", Offset = "0xDFA910", VA = "0xDFA910")]
	private void Update()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0xDFA978", Offset = "0xDFA978", VA = "0xDFA978")]
	public playerpos()
	{
	}
}
[Token(Token = "0x20001FA")]
public class GrassCutter : MonoBehaviour
{
	[Token(Token = "0x6000879")]
	[Address(RVA = "0xDFA980", Offset = "0xDFA980", VA = "0xDFA980")]
	private void Update()
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0xDFACEC", Offset = "0xDFACEC", VA = "0xDFACEC")]
	public GrassCutter()
	{
	}
}
[Token(Token = "0x20001FB")]
public class GrassDisplacement : MonoBehaviour
{
	[Token(Token = "0x600087B")]
	[Address(RVA = "0xDFACF4", Offset = "0xDFACF4", VA = "0xDFACF4")]
	private void Update()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0xDFAD5C", Offset = "0xDFAD5C", VA = "0xDFAD5C")]
	public GrassDisplacement()
	{
	}
}
[Token(Token = "0x20001FC")]
public class PlayerInput : MonoBehaviour
{
	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MoveSpeed;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MouseSens;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera cam;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float camDistance;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float camRotX;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float camRotY;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody rb;

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xDFAD64", Offset = "0xDFAD64", VA = "0xDFAD64")]
	private void Start()
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xDFADBC", Offset = "0xDFADBC", VA = "0xDFADBC")]
	private void Update()
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0xDFB3C8", Offset = "0xDFB3C8", VA = "0xDFB3C8")]
	public PlayerInput()
	{
	}
}
[Token(Token = "0x20001FD")]
public static class Util
{
	[Token(Token = "0x6000880")]
	[Address(RVA = "0xDFB3E8", Offset = "0xDFB3E8", VA = "0xDFB3E8")]
	public static void ResetTransform(this Transform _transform)
	{
	}
}
[Token(Token = "0x20001FE")]
public class WandController : GrabbableEvents
{
	[Token(Token = "0x20001FF")]
	[CompilerGenerated]
	private sealed class <ResetTool>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WandController <>4__this;

		[Token(Token = "0x170000AA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0xDFC644", Offset = "0xDFC644", VA = "0xDFC644", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000893")]
			[Address(RVA = "0xDFC68C", Offset = "0xDFC68C", VA = "0xDFC68C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xDFB634", Offset = "0xDFB634", VA = "0xDFB634")]
		[DebuggerHidden]
		public <ResetTool>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0xDFC4F0", Offset = "0xDFC4F0", VA = "0xDFC4F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0xDFC4F4", Offset = "0xDFC4F4", VA = "0xDFC4F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000892")]
		[Address(RVA = "0xDFC64C", Offset = "0xDFC64C", VA = "0xDFC64C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform HandPointTransform;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public BuildSystem buildSystem;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Preview preview;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool pauseBuilding;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool wandIsHeld;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip TerraformAudio;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioSource terraformSound;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEngine.GameObject particleEffect;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isTerraforming;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public LayerMask layer;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public RaycastHit hit;

	[Token(Token = "0x4000B31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Terraformer terraformer;

	[Token(Token = "0x4000B32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float minHeightForRespawn;

	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEngine.GameObject spawnPoint;

	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public BuildManager buildManager;

	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool particleEffectOn;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AudioClip CollisionAudio;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AudioSource audioSource;

	[Token(Token = "0x6000881")]
	[Address(RVA = "0xDFB4BC", Offset = "0xDFB4BC", VA = "0xDFB4BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xDFB53C", Offset = "0xDFB53C", VA = "0xDFB53C")]
	public void StartTerraforming()
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xDFB5C0", Offset = "0xDFB5C0", VA = "0xDFB5C0")]
	[IteratorStateMachine(typeof(<ResetTool>d__7))]
	private IEnumerator ResetTool()
	{
		return null;
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xDFB65C", Offset = "0xDFB65C", VA = "0xDFB65C", Slot = "14")]
	public override void OnGrip(float gripValue)
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xDFBAB4", Offset = "0xDFBAB4", VA = "0xDFBAB4", Slot = "5")]
	public override void OnRelease()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xDFBBE4", Offset = "0xDFBBE4", VA = "0xDFBBE4", Slot = "4")]
	public override void OnGrab(Grabber grabber)
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xDFBBE8", Offset = "0xDFBBE8", VA = "0xDFBBE8", Slot = "19")]
	public override void OnButton1Down()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xDFBDF8", Offset = "0xDFBDF8", VA = "0xDFBDF8", Slot = "22")]
	public override void OnButton2Down()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xDFBE8C", Offset = "0xDFBE8C", VA = "0xDFBE8C", Slot = "23")]
	public override void OnButton2Up()
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xDFBF04", Offset = "0xDFBF04", VA = "0xDFBF04", Slot = "16")]
	public override void OnTriggerDown()
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xDFC1A8", Offset = "0xDFC1A8", VA = "0xDFC1A8", Slot = "21")]
	public override void OnButton2()
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xDFC2B4", Offset = "0xDFC2B4", VA = "0xDFC2B4", Slot = "15")]
	public override void OnTrigger(float triggerValue)
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xDFC4E8", Offset = "0xDFC4E8", VA = "0xDFC4E8")]
	public WandController()
	{
	}
}
[Token(Token = "0x2000200")]
public class ArtifactTrigger : MonoBehaviour
{
	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArtifactsManager artifactManager;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject forceField;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject[] forceFields;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int forceFieldIndex;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool forceFieldIsOn;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool[] forceFieldsIsOn;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.Vector3 boxCollidervSize;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public UnityEngine.Vector3 boxCollidervCentar;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public BoxCollider boxCollider;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int IsFirst;

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xDFC694", Offset = "0xDFC694", VA = "0xDFC694")]
	public void Start()
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xDFC740", Offset = "0xDFC740", VA = "0xDFC740")]
	private void Update()
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xDFC744", Offset = "0xDFC744", VA = "0xDFC744")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xDFC86C", Offset = "0xDFC86C", VA = "0xDFC86C")]
	public ArtifactTrigger()
	{
	}
}
[Token(Token = "0x2000201")]
public class BlockController : GrabbableEvents
{
	[Token(Token = "0x2000202")]
	[CompilerGenerated]
	private sealed class <KinematicDelay>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlockController <>4__this;

		[Token(Token = "0x170000AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008A9")]
			[Address(RVA = "0xDFD29C", Offset = "0xDFD29C", VA = "0xDFD29C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008AB")]
			[Address(RVA = "0xDFD2E4", Offset = "0xDFD2E4", VA = "0xDFD2E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xDFC9D8", Offset = "0xDFC9D8", VA = "0xDFC9D8")]
		[DebuggerHidden]
		public <KinematicDelay>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xDFD174", Offset = "0xDFD174", VA = "0xDFD174", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xDFD178", Offset = "0xDFD178", VA = "0xDFD178", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0xDFD2A4", Offset = "0xDFD2A4", VA = "0xDFD2A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Collider TriggerCollider;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Collider boxCollider;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform HandPointTransform;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public BuildSystem buildSystem;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool pauseBuilding;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool blockIsHeld;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public BuildManager buildManager;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float currentY;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float yBlockRotation;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public CraftController craftController;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool isTrigger;

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xDFC874", Offset = "0xDFC874", VA = "0xDFC874")]
	private void Start()
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xDFC9B8", Offset = "0xDFC9B8", VA = "0xDFC9B8")]
	public void KinematicDelayForCollision()
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xDFC944", Offset = "0xDFC944", VA = "0xDFC944")]
	[IteratorStateMachine(typeof(<KinematicDelay>d__8))]
	private IEnumerator KinematicDelay()
	{
		return null;
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0xDFCA00", Offset = "0xDFCA00", VA = "0xDFCA00")]
	private void Update()
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0xDFCA04", Offset = "0xDFCA04", VA = "0xDFCA04", Slot = "14")]
	public override void OnGrip(float gripValue)
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0xDFCA8C", Offset = "0xDFCA8C", VA = "0xDFCA8C", Slot = "5")]
	public override void OnRelease()
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0xDFCB24", Offset = "0xDFCB24", VA = "0xDFCB24", Slot = "4")]
	public override void OnGrab(Grabber grabber)
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0xDFCBBC", Offset = "0xDFCBBC", VA = "0xDFCBBC", Slot = "22")]
	public override void OnButton2Down()
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0xDFCCB4", Offset = "0xDFCCB4", VA = "0xDFCCB4", Slot = "19")]
	public override void OnButton1Down()
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0xDFCF4C", Offset = "0xDFCF4C", VA = "0xDFCF4C", Slot = "23")]
	public override void OnButton2Up()
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0xDFCF50", Offset = "0xDFCF50", VA = "0xDFCF50", Slot = "21")]
	public override void OnButton2()
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0xDFCF54", Offset = "0xDFCF54", VA = "0xDFCF54", Slot = "24")]
	public override void OnSnapZoneEnter()
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xDFCFF0", Offset = "0xDFCFF0", VA = "0xDFCFF0", Slot = "15")]
	public override void OnTrigger(float triggerValue)
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0xDFD164", Offset = "0xDFD164", VA = "0xDFD164")]
	public BlockController()
	{
	}
}
[Token(Token = "0x2000203")]
public class CustomizationManager : MonoBehaviour
{
	[Token(Token = "0x2000204")]
	private enum AppearanceDetail
	{
		[Token(Token = "0x4000B6A")]
		TOP_MODEL,
		[Token(Token = "0x4000B6B")]
		COAT_MODEL,
		[Token(Token = "0x4000B6C")]
		FACE_MODEL,
		[Token(Token = "0x4000B6D")]
		COAT_COLOR,
		[Token(Token = "0x4000B6E")]
		SKIN_COLOR,
		[Token(Token = "0x4000B6F")]
		EMOTION_STATE,
		[Token(Token = "0x4000B70")]
		HANDS_COLOR
	}

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.GameObject[] coatModels;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEngine.Color32[] skinColors;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEngine.Color32[] coatColors;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.Color32[] handsColors;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UnityEngine.GameObject[] emoStates;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform headAnchor;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform eyeAnchor;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject firstEmo;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.GameObject firstCoat;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private UnityEngine.GameObject activeCoat;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UnityEngine.GameObject activeEmoState;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UnityEngine.GameObject activeHandL;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.GameObject activeHandR;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Dictionary<AppearanceDetail, int> chosenApperance;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private MeshRenderer skindRenderer;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private MeshRenderer coatedRenderer;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int coatIndex;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public int skinColorIndex;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int emotionStateIndex;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public int coatColorIndex;

	[Token(Token = "0x4000B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public int handsColorIndex;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public int isFirstInMenu;

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0xDFD2EC", Offset = "0xDFD2EC", VA = "0xDFD2EC")]
	public void CoatModelUp()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0xDFD8E8", Offset = "0xDFD8E8", VA = "0xDFD8E8")]
	public void CoatModelDown()
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0xDFD9A4", Offset = "0xDFD9A4", VA = "0xDFD9A4")]
	public void SkinColorUp()
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0xDFD9E4", Offset = "0xDFD9E4", VA = "0xDFD9E4")]
	public void SkinColorDown()
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0xDFDA28", Offset = "0xDFDA28", VA = "0xDFDA28")]
	public void CoatColorUp()
	{
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0xDFDA68", Offset = "0xDFDA68", VA = "0xDFDA68")]
	public void CoatColorDown()
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0xDFDAAC", Offset = "0xDFDAAC", VA = "0xDFDAAC")]
	public void EmoStateUp()
	{
	}

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0xDFDAEC", Offset = "0xDFDAEC", VA = "0xDFDAEC")]
	public void EmoStateDown()
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0xDFDB30", Offset = "0xDFDB30", VA = "0xDFDB30")]
	public void HandsColorUp()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0xDFDB70", Offset = "0xDFDB70", VA = "0xDFDB70")]
	public void HandsColorDown()
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0xDFD3B4", Offset = "0xDFD3B4", VA = "0xDFD3B4")]
	private void ApplyModification(AppearanceDetail detail, int id)
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0xDFDBB4", Offset = "0xDFDBB4", VA = "0xDFDBB4")]
	public void SaveApperance()
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0xDFD7FC", Offset = "0xDFD7FC", VA = "0xDFD7FC")]
	public void SaveApperancePlayerPrefs()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0xDFDCC0", Offset = "0xDFDCC0", VA = "0xDFDCC0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0xDFE030", Offset = "0xDFE030", VA = "0xDFE030")]
	private void Update()
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0xDFE034", Offset = "0xDFE034", VA = "0xDFE034")]
	public CustomizationManager()
	{
	}
}
[Token(Token = "0x2000205")]
public class MenuChanger : MonoBehaviour
{
	[Token(Token = "0x60008BC")]
	[Address(RVA = "0xDFE03C", Offset = "0xDFE03C", VA = "0xDFE03C")]
	public MenuChanger()
	{
	}
}
[Token(Token = "0x2000206")]
public class MenuTrigger : MonoBehaviour
{
	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject hexMenu;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject hexMenuMenu;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject hexWorldMenu;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public NoGravityFloat _float;

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0xDFE044", Offset = "0xDFE044", VA = "0xDFE044")]
	private void Start()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0xDFE094", Offset = "0xDFE094", VA = "0xDFE094")]
	public void MenuStartDelay()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0xDFE0E0", Offset = "0xDFE0E0", VA = "0xDFE0E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0xDFE0E4", Offset = "0xDFE0E4", VA = "0xDFE0E4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0xDFE17C", Offset = "0xDFE17C", VA = "0xDFE17C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0xDFE214", Offset = "0xDFE214", VA = "0xDFE214")]
	public MenuTrigger()
	{
	}
}
[Token(Token = "0x2000207")]
public class ArtifactSaveTransform : MonoBehaviour
{
	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject wand;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float xWand;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float yWand;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float zWand;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject sceptre;

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float xSceptre;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ySceptre;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float zSceptre;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.GameObject cannon;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float xCannon;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float yCannon;

	[Token(Token = "0x4000B80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float zCannon;

	[Token(Token = "0x4000B81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.GameObject jet;

	[Token(Token = "0x4000B82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float xJet;

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float yJet;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float zJet;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UnityEngine.GameObject hammer;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float xHammer;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float yHammer;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float zHammer;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float xWandRot;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float yWandRot;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float zWandRot;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float xSceptreRot;

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float ySceptreRot;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float zSceptreRot;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float xCannonRot;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float yCannonRot;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float zCannonRot;

	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float xJetRot;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float yJetRot;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float zJetRot;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float xHammerRot;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float yHammerRot;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float zHammerRot;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public UnityEngine.GameObject teleportA;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float xTelA;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float yTelA;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float zTelA;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityEngine.GameObject teleportB;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float xTelB;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float yTelB;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float zTelB;

	[Token(Token = "0x4000BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float xTelARot;

	[Token(Token = "0x4000BA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public float yTelARot;

	[Token(Token = "0x4000BA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public float zTelARot;

	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float wTelARot;

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float xTelBRot;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float yTelBRot;

	[Token(Token = "0x4000BA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public float zTelBRot;

	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float wTelBRot;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public UnityEngine.GameObject craft;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public float xCraft;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public float yCraft;

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public float zCraft;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public float xCraftRot;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public float yCraftRot;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public float zCraftRot;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public float wCraftRot;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	public UnityEngine.GameObject[] artifacts;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<ArtifactController> masterArtifacts;

	[Token(Token = "0x4000BB2")]
	private const string MASTERARTIFACTS_SUB = "/artifact";

	[Token(Token = "0x4000BB3")]
	private const string MASTERARTIFACTS_COUNT_SUB = "/artifact.count";

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public ChunkSpawner chunkSpawner;

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0xDFE21C", Offset = "0xDFE21C", VA = "0xDFE21C")]
	private void Start()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0xDFE220", Offset = "0xDFE220", VA = "0xDFE220")]
	public void SaveArtifacts()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0xDFE850", Offset = "0xDFE850", VA = "0xDFE850")]
	public void LoadArtifacts()
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0xDFF068", Offset = "0xDFF068", VA = "0xDFF068")]
	private void Update()
	{
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0xDFF06C", Offset = "0xDFF06C", VA = "0xDFF06C")]
	public void SaveArtifactsPrefs()
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0xDFFA30", Offset = "0xDFFA30", VA = "0xDFFA30")]
	public void LoadArtifactsPrefs()
	{
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0xE00114", Offset = "0xE00114", VA = "0xE00114")]
	public ArtifactSaveTransform()
	{
	}
}
[Token(Token = "0x2000208")]
public class DayNightCycle : MonoBehaviour
{
	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sun;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float secondsInFullDay;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float updateRateInSeconds;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 1f)]
	public float currentTimeOfDay;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeMultiplier;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(10f)]
	public Gradient nightDayColor;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxIntensity;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float minIntensity;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float minPoint;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float maxBounceIntensity;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float minBounceIntensity;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxAmbient;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float minAmbient;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float minAmbientPoint;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Gradient nightDayFogColor;

	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve fogDensityCurve;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float fogScale;

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float exposureMultiplier;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float dayAtmosphereThickness;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float nightAtmosphereThickness;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Skybox sky;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Material skyMat;

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0xE001B4", Offset = "0xE001B4", VA = "0xE001B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xE00258", Offset = "0xE00258", VA = "0xE00258")]
	private void UpdateCycle()
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0xE002F4", Offset = "0xE002F4", VA = "0xE002F4")]
	private void UpdatePosition()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0xE0036C", Offset = "0xE0036C", VA = "0xE0036C")]
	private void UpdateFX()
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xE0061C", Offset = "0xE0061C", VA = "0xE0061C")]
	public DayNightCycle()
	{
	}
}
[Token(Token = "0x2000209")]
public class PortalTeleportation : MonoBehaviour
{
	[Token(Token = "0x4000BCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform destination;

	[Token(Token = "0x4000BCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider player;

	[Token(Token = "0x4000BCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider teleport;

	[Token(Token = "0x4000BCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool teleportIsOn;

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float destinationY;

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0xE0065C", Offset = "0xE0065C", VA = "0xE0065C")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0xE00688", Offset = "0xE00688", VA = "0xE00688")]
	private void Connect()
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0xE00870", Offset = "0xE00870", VA = "0xE00870")]
	public void Teleport()
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0xE008CC", Offset = "0xE008CC", VA = "0xE008CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0xE008D0", Offset = "0xE008D0", VA = "0xE008D0")]
	private void OnTriggerStay(Collider Col)
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0xE009FC", Offset = "0xE009FC", VA = "0xE009FC")]
	private void OnTriggerExit(Collider Col)
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0xE00A8C", Offset = "0xE00A8C", VA = "0xE00A8C")]
	public PortalTeleportation()
	{
	}
}
[Token(Token = "0x200020A")]
public class SavePlayerTransform : MonoBehaviour
{
	[Token(Token = "0x4000BD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Transform playerTransform;

	[Token(Token = "0x4000BD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float xPlayerPos;

	[Token(Token = "0x4000BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float yPlayerPos;

	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float zPlayerPos;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public ChunkSpawner chunkSpawner;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<PlayerInfo> playerLoacation;

	[Token(Token = "0x4000BD6")]
	private const string PLAYER_SUB = "/player";

	[Token(Token = "0x4000BD7")]
	private const string PLAYER_COUNT_SUB = "/player.count";

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0xE00A94", Offset = "0xE00A94", VA = "0xE00A94")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0xE00A98", Offset = "0xE00A98", VA = "0xE00A98")]
	public void SavePlayerPosition()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0xE010B0", Offset = "0xE010B0", VA = "0xE010B0")]
	public void LoadPlayerPosition()
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0xE01960", Offset = "0xE01960", VA = "0xE01960")]
	public void SavePlayerPositionPrefs()
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0xE01A54", Offset = "0xE01A54", VA = "0xE01A54")]
	public void LoadPlayerPositionPrefs()
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0xE01B14", Offset = "0xE01B14", VA = "0xE01B14")]
	public SavePlayerTransform()
	{
	}
}
[Token(Token = "0x200020B")]
public class WayPointSaveSystem : MonoBehaviour
{
	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject wayPoint;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject wayPoint2;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject wayPoint3;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject wayPoint4;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject wayPoint5;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject wayPoint6;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float xPos;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float yPos;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zPos;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float xRot;

	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float yRot;

	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float zRot;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float wRot;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float xPos2;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float yPos2;

	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float zPos2;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float xRot2;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float yRot2;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float zRot2;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float wRot2;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float xPos3;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float yPos3;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float zPos3;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float xRot3;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float yRot3;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float zRot3;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float wRot3;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float xPos4;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float yPos4;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float zPos4;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float xRot4;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float yRot4;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float zRot4;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float wRot4;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float xPos5;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float yPos5;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float zPos5;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float xRot5;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float yRot5;

	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float zRot5;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float wRot5;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float xPos6;

	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float yPos6;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float zPos6;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float xRot6;

	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float yRot6;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float zRot6;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float wRot6;

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0xE01BB4", Offset = "0xE01BB4", VA = "0xE01BB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0xE026C0", Offset = "0xE026C0", VA = "0xE026C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0xE02DE8", Offset = "0xE02DE8", VA = "0xE02DE8")]
	public void SaveBlocks()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0xE01BB8", Offset = "0xE01BB8", VA = "0xE01BB8")]
	public void LoadBlocks()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0xE036D0", Offset = "0xE036D0", VA = "0xE036D0")]
	public WayPointSaveSystem()
	{
	}
}
[Token(Token = "0x200020C")]
public class WayPointSaveSystem2 : MonoBehaviour
{
	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject owayPoint;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject owayPoint2;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject owayPoint3;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject owayPoint4;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject owayPoint5;

	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject owayPoint6;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float xxPos;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float yyPos;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zzPos;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float xxRot;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float yyRot;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float zzRot;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float wwRot;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float oxPos2;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float oyPos2;

	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float ozPos2;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float oxRot2;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float oyRot2;

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float ozRot2;

	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float owRot2;

	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float oxPos3;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float oyPos3;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float ozPos3;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float oxRot3;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float oyRot3;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float ozRot3;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float owRot3;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float oxPos4;

	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float oyPos4;

	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float ozPos4;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float oxRot4;

	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float oyRot4;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float ozRot4;

	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float owRot4;

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float oxPos5;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float oyPos5;

	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float ozPos5;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public float oxRot5;

	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float oyRot5;

	[Token(Token = "0x4000C2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float ozRot5;

	[Token(Token = "0x4000C30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float owRot5;

	[Token(Token = "0x4000C31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float oxPos6;

	[Token(Token = "0x4000C32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float oyPos6;

	[Token(Token = "0x4000C33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float ozPos6;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float oxRot6;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float oyRot6;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float ozRot6;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float owRot6;

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0xE036D8", Offset = "0xE036D8", VA = "0xE036D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0xE041E4", Offset = "0xE041E4", VA = "0xE041E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0xE0490C", Offset = "0xE0490C", VA = "0xE0490C")]
	public void SaveBlocks()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0xE036DC", Offset = "0xE036DC", VA = "0xE036DC")]
	public void LoadBlocks()
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0xE051F4", Offset = "0xE051F4", VA = "0xE051F4")]
	public WayPointSaveSystem2()
	{
	}
}
[Token(Token = "0x200020D")]
public class Block : MonoBehaviour
{
	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Data")]
	public int health;

	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public new string name;

	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Settings")]
	private float moveTimeMin;

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Components")]
	private Rigidbody2D rb;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private SpriteRenderer body;

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0xE051FC", Offset = "0xE051FC", VA = "0xE051FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0xE05658", Offset = "0xE05658", VA = "0xE05658")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0xE056D8", Offset = "0xE056D8", VA = "0xE056D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0xE056DC", Offset = "0xE056DC", VA = "0xE056DC")]
	private void OnTransformParentChanged()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0xE05C8C", Offset = "0xE05C8C", VA = "0xE05C8C")]
	public Block()
	{
	}
}
[Token(Token = "0x200020E")]
public class BlockBasic : MonoBehaviour
{
	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Data")]
	public int health;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public new string name;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string treeModel;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Settings")]
	[SerializeField]
	private float moveTimeMin;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Header("Components")]
	private Rigidbody2D rb;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private SpriteRenderer body;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Color")]
	[SerializeField]
	public UnityEngine.Color32[] blockColor;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public MeshRenderer blockRenderer;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int blockColorIndex;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public BlockBasic basicBlockScript;

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0xE05CF4", Offset = "0xE05CF4", VA = "0xE05CF4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0xE05E94", Offset = "0xE05E94", VA = "0xE05E94")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0xE05F14", Offset = "0xE05F14", VA = "0xE05F14")]
	public BlockBasic()
	{
	}
}
[Serializable]
[Token(Token = "0x200020F")]
public class BlockBasicData
{
	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	public int health;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public string name;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public float[] position;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public float[] rotation;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public string treeModel;

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0xE05F7C", Offset = "0xE05F7C", VA = "0xE05F7C")]
	public BlockBasicData(BlockBasic blockBasic)
	{
	}
}
[Serializable]
[Token(Token = "0x2000210")]
public class BlockDataNew
{
	[Token(Token = "0x4000C4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int health;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] position;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] rotation;

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0xE060EC", Offset = "0xE060EC", VA = "0xE060EC")]
	public BlockDataNew(Block block)
	{
	}
}
[Token(Token = "0x2000211")]
public class BlockWood : MonoBehaviour
{
	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Data")]
	public int health;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public new string name;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Settings")]
	private float moveTimeMin;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Components")]
	private Rigidbody2D rb;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Rigidbody rbd;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private SpriteRenderer body;

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Wood Models")]
	[SerializeField]
	public UnityEngine.GameObject[] woodModels;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject activeWoodModel;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.GameObject firstWoodBlock;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public Transform headAnchor;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Preview preview;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public int woodModelIndex;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material[] destructedMaterial;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UnityEngine.GameObject[] activeDestructedModel;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public BuildSystem bs;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int climbableIsOn;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool boolClimbableIsOn;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEngine.GameObject climbHandles;

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0xE0624C", Offset = "0xE0624C", VA = "0xE0624C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xE06250", Offset = "0xE06250", VA = "0xE06250")]
	private void Start()
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xE06408", Offset = "0xE06408", VA = "0xE06408")]
	public void CraftApply()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xE068C8", Offset = "0xE068C8", VA = "0xE068C8")]
	public void ChangeWoodModel(int id)
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xE068CC", Offset = "0xE068CC", VA = "0xE068CC")]
	public void WoodModelUp()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xE068FC", Offset = "0xE068FC", VA = "0xE068FC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xE0697C", Offset = "0xE0697C", VA = "0xE0697C")]
	private void OnTransformParentChanged()
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xE06F2C", Offset = "0xE06F2C", VA = "0xE06F2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xE06F30", Offset = "0xE06F30", VA = "0xE06F30")]
	public void SetSnapZoneScale()
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xE06F90", Offset = "0xE06F90", VA = "0xE06F90")]
	public void ToggleClimbHandles()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xE06FCC", Offset = "0xE06FCC", VA = "0xE06FCC")]
	public void ActivateHandlesOnStart()
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xE07048", Offset = "0xE07048", VA = "0xE07048")]
	public BlockWood()
	{
	}
}
[Serializable]
[Token(Token = "0x2000212")]
public class BlockWoodData
{
	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int health;

	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] position;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] rotation;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int woodModelIndex;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int climbableIsOn;

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xE070B0", Offset = "0xE070B0", VA = "0xE070B0")]
	public BlockWoodData(BlockWood blockWood)
	{
	}
}
[Token(Token = "0x2000213")]
public class PlayerBoxi : MonoBehaviour
{
	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Data")]
	public int health;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public new string name;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Settings")]
	private float moveTimeMin;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Components")]
	private Rigidbody2D rb;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private SpriteRenderer body;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Color")]
	public UnityEngine.Color32[] blockColor;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public MeshRenderer blockRenderer;

	[Token(Token = "0x4000C6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int blockColorIndex;

	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public BlockBasic basicBlockScript;

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xE07224", Offset = "0xE07224", VA = "0xE07224")]
	private void Start()
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xE075A4", Offset = "0xE075A4", VA = "0xE075A4")]
	private void ChangeBlockColor(int id)
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xE07634", Offset = "0xE07634", VA = "0xE07634")]
	public void BlockColorUp()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xE07664", Offset = "0xE07664", VA = "0xE07664")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xE07668", Offset = "0xE07668", VA = "0xE07668")]
	private void Update()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xE07804", Offset = "0xE07804", VA = "0xE07804")]
	private void OnTransformParentChanged()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xE07DD8", Offset = "0xE07DD8", VA = "0xE07DD8")]
	public PlayerBoxi()
	{
	}
}
[Serializable]
[Token(Token = "0x2000214")]
public class PlayerBoxiData
{
	[Token(Token = "0x4000C71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int health;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] position;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] rotation;

	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int blockColorIndex;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int coatIndex;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int skinColorIndex;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int emotionStateIndex;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int coatColorIndex;

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xE07E40", Offset = "0xE07E40", VA = "0xE07E40")]
	public PlayerBoxiData(CustomizationManager CustomizationManager)
	{
	}
}
[Token(Token = "0x2000215")]
public class SaveSystemBasicBlock : MonoBehaviour
{
	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Prefabs")]
	private BlockBasic blockBasicPrefab;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<BlockBasic> blocksBasic;

	[Token(Token = "0x4000C7C")]
	private const string BLOCKBASIC_SUB = "/blockBasic";

	[Token(Token = "0x4000C7D")]
	private const string BLOCKBASIC_COUNT_SUB = "/blockBasic.count";

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xE07E7C", Offset = "0xE07E7C", VA = "0xE07E7C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xE07F04", Offset = "0xE07F04", VA = "0xE07F04")]
	public void SaveCurrentPlayerBlocks()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xE07F08", Offset = "0xE07F08", VA = "0xE07F08")]
	public void LoadCurrentPlayerBlocks()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xE07F0C", Offset = "0xE07F0C", VA = "0xE07F0C")]
	private void SaveBasicBlock()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xE08260", Offset = "0xE08260", VA = "0xE08260")]
	private void LoadBasicBlock()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xE086F8", Offset = "0xE086F8", VA = "0xE086F8")]
	public SaveSystemBasicBlock()
	{
	}
}
[Token(Token = "0x2000216")]
public class SaveSystemNew : MonoBehaviour
{
	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Prefabs")]
	[SerializeField]
	public BlockBasic blockBasicPrefab;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public BlockBasic blockBasicPrefab1;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public BlockBasic blockBasicPrefab2;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public BlockWood blockWoodPrefab;

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PoolObject poolObject;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Block> blocks;

	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static List<BlockBasic> blocksBasic;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static List<BlockWood> blocksWood;

	[Token(Token = "0x4000C86")]
	private const string BLOCK_SUB = "/block";

	[Token(Token = "0x4000C87")]
	private const string BLOCK_COUNT_SUB = "/block.count";

	[Token(Token = "0x4000C88")]
	private const string BLOCKBASIC_SUB = "/blockBasic";

	[Token(Token = "0x4000C89")]
	private const string BLOCKBASIC_COUNT_SUB = "/blockBasic.count";

	[Token(Token = "0x4000C8A")]
	private const string BLOCKWOOD_SUB = "/blockWood";

	[Token(Token = "0x4000C8B")]
	private const string BLOCKWOOD_COUNT_SUB = "/blockWood.count";

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private EasyObjectPool eop;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private BlockWood BlockWood;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int IsFirst;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SavePlayerTransform savePlayer;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ToolTipManager tooltipManager;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ArtifactSaveTransform artifactSave;

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xE08798", Offset = "0xE08798", VA = "0xE08798")]
	public void Start()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xE0897C", Offset = "0xE0897C", VA = "0xE0897C")]
	public void Update()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0xE08980", Offset = "0xE08980", VA = "0xE08980")]
	public void SaveAll()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xE0906C", Offset = "0xE0906C", VA = "0xE0906C")]
	public void LoadAll()
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xE0942C", Offset = "0xE0942C", VA = "0xE0942C")]
	public void LoadBlocksOverall()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xE09110", Offset = "0xE09110", VA = "0xE09110")]
	public void LoadNatureOverall()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xE08CFC", Offset = "0xE08CFC", VA = "0xE08CFC")]
	public void SaveBlock()
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xE09544", Offset = "0xE09544", VA = "0xE09544")]
	public void LoadBlock()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0xE089A8", Offset = "0xE089A8", VA = "0xE089A8")]
	public void SaveNature()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xE09050", Offset = "0xE09050", VA = "0xE09050")]
	public void SaveArtifacts()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xE099F4", Offset = "0xE099F4", VA = "0xE099F4")]
	public void LoadNature()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0xE09FA4", Offset = "0xE09FA4", VA = "0xE09FA4")]
	public SaveSystemNew()
	{
	}
}
[Token(Token = "0x2000217")]
public class SaveSystemWoodBlock : MonoBehaviour
{
	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Prefabs")]
	[SerializeField]
	private BlockWood blockWoodPrefab;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<BlockWood> blocksWood;

	[Token(Token = "0x4000C94")]
	private const string BLOCKWOOD_SUB = "/blockWood";

	[Token(Token = "0x4000C95")]
	private const string BLOCKWOOD_COUNT_SUB = "/blockWood.count";

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xE0A0EC", Offset = "0xE0A0EC", VA = "0xE0A0EC")]
	public void Update()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xE0A174", Offset = "0xE0A174", VA = "0xE0A174")]
	public void SaveCurrentPlayerBlocks()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xE0A178", Offset = "0xE0A178", VA = "0xE0A178")]
	public void LoadCurrentPlayerBlocks()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xE0A17C", Offset = "0xE0A17C", VA = "0xE0A17C")]
	private void SaveWoodBlock()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0xE0A4D0", Offset = "0xE0A4D0", VA = "0xE0A4D0")]
	private void LoadWoodBlock()
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xE0A968", Offset = "0xE0A968", VA = "0xE0A968")]
	public SaveSystemWoodBlock()
	{
	}
}
[Token(Token = "0x2000218")]
public class FlyCameraBehaviour : MonoBehaviour
{
	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float cameraSensitivity;

	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float climbSpeed;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float normalMoveSpeed;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float slowMoveFactor;

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float fastMoveFactor;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float rotationX;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float rotationY;

	[Token(Token = "0x6000922")]
	[Address(RVA = "0xE0AA08", Offset = "0xE0AA08", VA = "0xE0AA08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xE0AA14", Offset = "0xE0AA14", VA = "0xE0AA14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xE0B110", Offset = "0xE0B110", VA = "0xE0B110")]
	public FlyCameraBehaviour()
	{
	}
}
[Token(Token = "0x2000219")]
public class ChestDemo : MonoBehaviour
{
	[Token(Token = "0x200021A")]
	[CompilerGenerated]
	private sealed class <OpenCloseChest>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ChestDemo <>4__this;

		[Token(Token = "0x170000AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600092B")]
			[Address(RVA = "0xE0B3A8", Offset = "0xE0B3A8", VA = "0xE0B3A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600092D")]
			[Address(RVA = "0xE0B3F0", Offset = "0xE0B3F0", VA = "0xE0B3F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xE0B210", Offset = "0xE0B210", VA = "0xE0B210")]
		[DebuggerHidden]
		public <OpenCloseChest>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xE0B240", Offset = "0xE0B240", VA = "0xE0B240", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xE0B244", Offset = "0xE0B244", VA = "0xE0B244", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xE0B3B0", Offset = "0xE0B3B0", VA = "0xE0B3B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator chestAnim;

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xE0B12C", Offset = "0xE0B12C", VA = "0xE0B12C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xE0B19C", Offset = "0xE0B19C", VA = "0xE0B19C")]
	[IteratorStateMachine(typeof(<OpenCloseChest>d__2))]
	private IEnumerator OpenCloseChest()
	{
		return null;
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xE0B238", Offset = "0xE0B238", VA = "0xE0B238")]
	public ChestDemo()
	{
	}
}
[Token(Token = "0x200021B")]
public class MaterialMover : MonoBehaviour
{
	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scrollSpeed;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer rend;

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xE0B3F8", Offset = "0xE0B3F8", VA = "0xE0B3F8")]
	private void Start()
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xE0B450", Offset = "0xE0B450", VA = "0xE0B450")]
	private void Update()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xE0B4D0", Offset = "0xE0B4D0", VA = "0xE0B4D0")]
	public MaterialMover()
	{
	}
}
[Token(Token = "0x200021C")]
public class Rotator : MonoBehaviour
{
	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xE0B4E0", Offset = "0xE0B4E0", VA = "0xE0B4E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xE0B4E4", Offset = "0xE0B4E4", VA = "0xE0B4E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xE0B588", Offset = "0xE0B588", VA = "0xE0B588")]
	public Rotator()
	{
	}
}
[Token(Token = "0x200021D")]
public class WheelController : MonoBehaviour
{
	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 rotateDirection;

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotateSpeed;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isRotating;

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xE0B590", Offset = "0xE0B590", VA = "0xE0B590")]
	private void Update()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0xE0B610", Offset = "0xE0B610", VA = "0xE0B610")]
	public WheelController()
	{
	}
}
[Token(Token = "0x200021E")]
public class AnimationScript : MonoBehaviour
{
	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isAnimated;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isRotating;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool isFloating;

	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool isScaling;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector3 rotationAngle;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rotationSpeed;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float floatSpeed;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool goingUp;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float floatRate;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float floatTimer;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UnityEngine.Vector3 startScale;

	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.Vector3 endScale;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool scalingUp;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float scaleSpeed;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float scaleRate;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float scaleTimer;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool isPaused;

	[Token(Token = "0x6000936")]
	[Address(RVA = "0xE0B618", Offset = "0xE0B618", VA = "0xE0B618")]
	private void Start()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0xE0B61C", Offset = "0xE0B61C", VA = "0xE0B61C")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0xE0B62C", Offset = "0xE0B62C", VA = "0xE0B62C")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0xE0B638", Offset = "0xE0B638", VA = "0xE0B638")]
	private void Update()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0xE0B8C0", Offset = "0xE0B8C0", VA = "0xE0B8C0")]
	public AnimationScript()
	{
	}
}
[Token(Token = "0x200021F")]
public class CubePlacer : MonoBehaviour
{
	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GridScript grid;

	[Token(Token = "0x600093B")]
	[Address(RVA = "0xE0B8D4", Offset = "0xE0B8D4", VA = "0xE0B8D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0xE0B94C", Offset = "0xE0B94C", VA = "0xE0B94C")]
	private void Update()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0xE0B9EC", Offset = "0xE0B9EC", VA = "0xE0B9EC")]
	private void PlaceCubeNear(UnityEngine.Vector3 clickPoint)
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0xE0BD18", Offset = "0xE0BD18", VA = "0xE0BD18")]
	public CubePlacer()
	{
	}
}
[Token(Token = "0x2000220")]
public class GridScript : MonoBehaviour
{
	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float size;

	[Token(Token = "0x600093F")]
	[Address(RVA = "0xE0BA50", Offset = "0xE0BA50", VA = "0xE0BA50")]
	public UnityEngine.Vector3 GetNearestPointOnGrid(UnityEngine.Vector3 position)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0xE0BD20", Offset = "0xE0BD20", VA = "0xE0BD20")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xE0BDC0", Offset = "0xE0BDC0", VA = "0xE0BDC0")]
	public GridScript()
	{
	}
}
[Token(Token = "0x2000221")]
public class Test01 : MonoBehaviour
{
	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask mask;

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xE0BDD4", Offset = "0xE0BDD4", VA = "0xE0BDD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xE0C070", Offset = "0xE0C070", VA = "0xE0C070")]
	public Test01()
	{
	}
}
[Token(Token = "0x2000222")]
public class Test02 : MonoBehaviour
{
	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer LineRenderer;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform objectToPlace;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform grabber;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform BoxPointTransform;

	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform HandPointTransform;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Camera gameCamera;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LayerMask mask;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private UnityEngine.Vector3 pos;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int distance;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float distToGround;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _slopeAngle;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool isGrounded;

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text debug;

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Grabber dropItem;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Grabbable HeldGrabbable;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RaycastHit hitGround;

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private RaycastHit hitInfo;

	[Token(Token = "0x6000944")]
	[Address(RVA = "0xE0C078", Offset = "0xE0C078", VA = "0xE0C078")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0xE0C2E8", Offset = "0xE0C2E8", VA = "0xE0C2E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0xE0C7B4", Offset = "0xE0C7B4", VA = "0xE0C7B4")]
	private void GroundCheck()
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0xE0C07C", Offset = "0xE0C07C", VA = "0xE0C07C")]
	private void GroundSnap()
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0xE0C9C0", Offset = "0xE0C9C0", VA = "0xE0C9C0")]
	public Test02()
	{
	}
}
[Token(Token = "0x2000223")]
public class Test03 : MonoBehaviour
{
	[Token(Token = "0x6000949")]
	[Address(RVA = "0xE0C9E4", Offset = "0xE0C9E4", VA = "0xE0C9E4")]
	private void Start()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0xE0CA38", Offset = "0xE0CA38", VA = "0xE0CA38")]
	private void Update()
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0xE0CC98", Offset = "0xE0CC98", VA = "0xE0CC98")]
	public Test03()
	{
	}
}
[Token(Token = "0x2000224")]
public class NoGravityFloat : MonoBehaviour
{
	[Token(Token = "0x2000225")]
	public enum Direction
	{
		[Token(Token = "0x4000CD4")]
		UP,
		[Token(Token = "0x4000CD5")]
		DOWN
	}

	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _distance;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UnityEngine.Vector3 _top;

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 _bottom;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float _percent;

	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float _speed;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Direction _direction;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float speed;

	[Token(Token = "0x600094C")]
	[Address(RVA = "0xE0CCA0", Offset = "0xE0CCA0", VA = "0xE0CCA0")]
	private void Start()
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0xE0CD80", Offset = "0xE0CD80", VA = "0xE0CD80")]
	private void Update()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0xE0CD98", Offset = "0xE0CD98", VA = "0xE0CD98")]
	private void ApplyFloatingEffect()
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0xE0CEC0", Offset = "0xE0CEC0", VA = "0xE0CEC0")]
	private void ApplyRotationEffect()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0xE0CF58", Offset = "0xE0CF58", VA = "0xE0CF58")]
	public NoGravityFloat()
	{
	}
}
[Token(Token = "0x2000226")]
public class RigidBodyHandControl : MonoBehaviour
{
	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rb;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float offsetTime;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float timer;

	[Token(Token = "0x6000951")]
	[Address(RVA = "0xE0CF6C", Offset = "0xE0CF6C", VA = "0xE0CF6C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0xE0CFC4", Offset = "0xE0CFC4", VA = "0xE0CFC4")]
	private void EnableRagdoll()
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0xE0CFE4", Offset = "0xE0CFE4", VA = "0xE0CFE4")]
	private void DisableRagdoll()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0xE0D004", Offset = "0xE0D004", VA = "0xE0D004")]
	private void Update()
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0xE0D2C0", Offset = "0xE0D2C0", VA = "0xE0D2C0")]
	public RigidBodyHandControl()
	{
	}
}
[Token(Token = "0x2000227")]
public class TriggerUnlock : MonoBehaviour
{
	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool[] isUnlocked;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject disableLockedObject;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject enableUnlockedObject;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject disableLockedInventory;

	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject enableUnlockedInventory;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int[] value;

	[Token(Token = "0x6000956")]
	[Address(RVA = "0xE0D2D0", Offset = "0xE0D2D0", VA = "0xE0D2D0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0xE0D388", Offset = "0xE0D388", VA = "0xE0D388")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0xE0DBDC", Offset = "0xE0DBDC", VA = "0xE0DBDC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0xE0E27C", Offset = "0xE0E27C", VA = "0xE0E27C")]
	public void DeleteUnlocked()
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0xE0E778", Offset = "0xE0E778", VA = "0xE0E778")]
	public TriggerUnlock()
	{
	}
}
[Token(Token = "0x2000228")]
public class OptOutHandler : MonoBehaviour
{
	[Token(Token = "0x2000229")]
	[CompilerGenerated]
	private sealed class <LoadYourAsyncMenu>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <asyncLoad>5__2;

		[Token(Token = "0x170000B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000969")]
			[Address(RVA = "0xE0EFC4", Offset = "0xE0EFC4", VA = "0xE0EFC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600096B")]
			[Address(RVA = "0xE0F00C", Offset = "0xE0F00C", VA = "0xE0F00C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0xE0EC9C", Offset = "0xE0EC9C", VA = "0xE0EC9C")]
		[DebuggerHidden]
		public <LoadYourAsyncMenu>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0xE0EE78", Offset = "0xE0EE78", VA = "0xE0EE78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xE0EE7C", Offset = "0xE0EE7C", VA = "0xE0EE7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xE0EFCC", Offset = "0xE0EFCC", VA = "0xE0EFCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isPaused;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject warning;

	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject welcomeText;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool urlOpened;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject privacyButton;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int IsFirstPrivacy;

	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool urlIsActive;

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool addTime;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float timeAdded;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float time;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject gameButton;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Image redImage;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.Color32 red;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public UnityEngine.Color32 green;

	[Token(Token = "0x600095B")]
	[Address(RVA = "0xE0E780", Offset = "0xE0E780", VA = "0xE0E780")]
	private void OnFailure(string reason)
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0xE0E8D4", Offset = "0xE0E8D4", VA = "0xE0E8D4")]
	private void OnURLReceived(string url)
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0xE0E950", Offset = "0xE0E950", VA = "0xE0E950")]
	public void OpenDataURL()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0xE0EA08", Offset = "0xE0EA08", VA = "0xE0EA08")]
	public void WarningNote()
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0xE0EA28", Offset = "0xE0EA28", VA = "0xE0EA28")]
	public void WelcomeNote()
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0xE0EA48", Offset = "0xE0EA48", VA = "0xE0EA48")]
	public void OpenDataURLButton()
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0xE0EC28", Offset = "0xE0EC28", VA = "0xE0EC28")]
	public void SceneChange()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0xE0E864", Offset = "0xE0E864", VA = "0xE0E864")]
	[IteratorStateMachine(typeof(<LoadYourAsyncMenu>d__17))]
	public IEnumerator LoadYourAsyncMenu(float time)
	{
		return null;
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0xE0ECC4", Offset = "0xE0ECC4", VA = "0xE0ECC4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0xE0EE6C", Offset = "0xE0EE6C", VA = "0xE0EE6C")]
	public void runGameAfterTime()
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0xE0EE70", Offset = "0xE0EE70", VA = "0xE0EE70")]
	public OptOutHandler()
	{
	}
}
[Token(Token = "0x200022A")]
public class ChunkLoading : MonoBehaviour
{
	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int ChunkView;

	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UnityEngine.Vector2 PlayerChunkPos;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private UnityEngine.Vector2 lastPlayerChunk;

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject Player;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject Chunk;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool ChunksLoaded;

	[Token(Token = "0x600096C")]
	[Address(RVA = "0xE0F014", Offset = "0xE0F014", VA = "0xE0F014")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0xE0F0DC", Offset = "0xE0F0DC", VA = "0xE0F0DC")]
	private void LoadChunks()
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0xE0F368", Offset = "0xE0F368", VA = "0xE0F368")]
	public ChunkLoading()
	{
	}
}
[Token(Token = "0x200022B")]
public class LodSystem : MonoBehaviour
{
	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MaxDistance;

	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject Player;

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.GameObject CurrentActive;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject[] Objects;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float step;

	[Token(Token = "0x600096F")]
	[Address(RVA = "0xE0F370", Offset = "0xE0F370", VA = "0xE0F370")]
	private void Start()
	{
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0xE0F4F8", Offset = "0xE0F4F8", VA = "0xE0F4F8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0xE0F858", Offset = "0xE0F858", VA = "0xE0F858")]
	public LodSystem()
	{
	}
}
[Token(Token = "0x200022C")]
public class LandGenerator : MonoBehaviour
{
	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Gradient Color;

	[Token(Token = "0x4000CFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject Tile;

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject[] Props;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float NoiseScale;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 1f)]
	public float FillPercent;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int size;

	[Token(Token = "0x6000972")]
	[Address(RVA = "0xE0F860", Offset = "0xE0F860", VA = "0xE0F860")]
	private void Start()
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0xE0FBC4", Offset = "0xE0FBC4", VA = "0xE0FBC4")]
	public LandGenerator()
	{
	}
}
[Token(Token = "0x200022D")]
public class DialogueSystemTutorial : MonoBehaviour
{
	[Token(Token = "0x200022E")]
	[CompilerGenerated]
	private sealed class <ShowText>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DialogueSystemTutorial <>4__this;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextVars[] <>7__wrap1;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <>7__wrap2;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextVars <t>5__4;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private string <v>5__5;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string <>7__wrap5;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int <>7__wrap6;

		[Token(Token = "0x170000B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600097A")]
			[Address(RVA = "0xE0FF60", Offset = "0xE0FF60", VA = "0xE0FF60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0xE0FFA8", Offset = "0xE0FFA8", VA = "0xE0FFA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xE0FC60", Offset = "0xE0FC60", VA = "0xE0FC60")]
		[DebuggerHidden]
		public <ShowText>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xE0FC90", Offset = "0xE0FC90", VA = "0xE0FC90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0xE0FC94", Offset = "0xE0FC94", VA = "0xE0FC94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xE0FF68", Offset = "0xE0FF68", VA = "0xE0FF68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI TextObj;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextVars[] text;

	[Token(Token = "0x6000974")]
	[Address(RVA = "0xE0FBCC", Offset = "0xE0FBCC", VA = "0xE0FBCC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0xE0FBEC", Offset = "0xE0FBEC", VA = "0xE0FBEC")]
	[IteratorStateMachine(typeof(<ShowText>d__3))]
	private IEnumerator ShowText()
	{
		return null;
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xE0FC88", Offset = "0xE0FC88", VA = "0xE0FC88")]
	public DialogueSystemTutorial()
	{
	}
}
[Serializable]
[Token(Token = "0x200022F")]
public struct TextVars
{
	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[TextArea(3, 20)]
	public string Sentence;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float Speed;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float EndDelay;

	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float TextSize;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UnityEngine.Color TextColor;
}
[Token(Token = "0x2000230")]
public class TextScroller : MonoBehaviour
{
	[Token(Token = "0x2000231")]
	[CompilerGenerated]
	private sealed class <ShowText>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextScroller <>4__this;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string s;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <>7__wrap1;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Token(Token = "0x170000B4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000983")]
			[Address(RVA = "0xE1023C", Offset = "0xE1023C", VA = "0xE1023C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000985")]
			[Address(RVA = "0xE10284", Offset = "0xE10284", VA = "0xE10284", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xE10098", Offset = "0xE10098", VA = "0xE10098")]
		[DebuggerHidden]
		public <ShowText>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xE100C8", Offset = "0xE100C8", VA = "0xE100C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xE100CC", Offset = "0xE100CC", VA = "0xE100CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xE10244", Offset = "0xE10244", VA = "0xE10244", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Text;

	[Token(Token = "0x4000D13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text textObject;

	[Token(Token = "0x600097D")]
	[Address(RVA = "0xE0FFB0", Offset = "0xE0FFB0", VA = "0xE0FFB0")]
	private void Start()
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0xE10008", Offset = "0xE10008", VA = "0xE10008")]
	[IteratorStateMachine(typeof(<ShowText>d__3))]
	private IEnumerator ShowText(string s)
	{
		return null;
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0xE100C0", Offset = "0xE100C0", VA = "0xE100C0")]
	public TextScroller()
	{
	}
}
[Token(Token = "0x2000232")]
public class IslandTextureGeneration : MonoBehaviour
{
	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TextureSize;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float NoiseScale;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float IslandSize;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(1f, 20f)]
	public int NoiseOctaves;

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 100000000f)]
	public int Seed;

	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Color[] col;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Texture2D tex;

	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Gradient ColorGradient;

	[Token(Token = "0x6000986")]
	[Address(RVA = "0xE1028C", Offset = "0xE1028C", VA = "0xE1028C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0xE104CC", Offset = "0xE104CC", VA = "0xE104CC")]
	private float Noisefunction(float x, float y, UnityEngine.Vector2 Origin)
	{
		return default(float);
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0xE105DC", Offset = "0xE105DC", VA = "0xE105DC")]
	private float FallOffMap(float x, float y, int size, float islandSize)
	{
		return default(float);
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0xE10620", Offset = "0xE10620", VA = "0xE10620")]
	public IslandTextureGeneration()
	{
	}
}
[Token(Token = "0x2000233")]
public class Noisefunction
{
	[Token(Token = "0x600098A")]
	[Address(RVA = "0xE10628", Offset = "0xE10628", VA = "0xE10628")]
	public static UnityEngine.Color FinalNoise(float x, float y, int Octaves, UnityEngine.Vector2 Origin, int Size, float NoiseScale, float IslandSize, Texture2D BiomeTex)
	{
		return default(UnityEngine.Color);
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0xE1093C", Offset = "0xE1093C", VA = "0xE1093C")]
	private static float TempNoise(float x, float y, int Octaves, UnityEngine.Vector2 Origin, int Size, float NoiseScale, float IslandSize)
	{
		return default(float);
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0xE109C4", Offset = "0xE109C4", VA = "0xE109C4")]
	private static float RainNoise(float x, float y, int Octaves, UnityEngine.Vector2 Origin, int Size, float NoiseScale, float IslandSize)
	{
		return default(float);
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0xE108B0", Offset = "0xE108B0", VA = "0xE108B0")]
	public static float WarpedNoise(float x, float y, int Octaves, UnityEngine.Vector2 Origin, int Size, float NoiseScale)
	{
		return default(float);
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0xE10AAC", Offset = "0xE10AAC", VA = "0xE10AAC")]
	public static float Noise(float x, float y, int Octaves, UnityEngine.Vector2 Origin, int Size, float NoiseScale)
	{
		return default(float);
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xE10A70", Offset = "0xE10A70", VA = "0xE10A70")]
	private static float FalloffMap(float x, float y, float size, float islandSize)
	{
		return default(float);
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0xE10A4C", Offset = "0xE10A4C", VA = "0xE10A4C")]
	public static UnityEngine.Color terraincol(int temperaturemap, int rainfallmap, Texture2D biomeTexture)
	{
		return default(UnityEngine.Color);
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0xE10B74", Offset = "0xE10B74", VA = "0xE10B74")]
	public Noisefunction()
	{
	}
}
[Token(Token = "0x2000234")]
public class NoiseGenerationWithOctaves : MonoBehaviour
{
	[Token(Token = "0x4000D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TextureSize;

	[Token(Token = "0x4000D23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float NoiseScale;

	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float IslandSize;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(1f, 20f)]
	public int NoiseOctaves;

	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Texture2D biomeTexture;

	[Token(Token = "0x4000D27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string Seed;

	[Token(Token = "0x6000992")]
	[Address(RVA = "0xE10B7C", Offset = "0xE10B7C", VA = "0xE10B7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0xE10DB4", Offset = "0xE10DB4", VA = "0xE10DB4")]
	public NoiseGenerationWithOctaves()
	{
	}
}
[Token(Token = "0x2000235")]
public class SimplifiedScript : MonoBehaviour
{
	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3Int Dimentions;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float NoiseScale;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private byte[,,] Voxels;

	[Token(Token = "0x6000994")]
	[Address(RVA = "0xE10DBC", Offset = "0xE10DBC", VA = "0xE10DBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0xE10E44", Offset = "0xE10E44", VA = "0xE10E44")]
	private void GenerateNoise()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0xE10F40", Offset = "0xE10F40", VA = "0xE10F40")]
	private void GenerateMesh()
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xE11B9C", Offset = "0xE11B9C", VA = "0xE11B9C")]
	public SimplifiedScript()
	{
	}
}
[Token(Token = "0x200023B")]
public class UnderWaterDetection : MonoBehaviour
{
	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject BoundingBox;

	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject Player;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Volume Post;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.Color UnderWaterColor;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool UnderWater;

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vignette VG;

	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private DepthOfField DOF;

	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ColorAdjustments CA;

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xE11BA4", Offset = "0xE11BA4", VA = "0xE11BA4")]
	private void Start()
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xE11C6C", Offset = "0xE11C6C", VA = "0xE11C6C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xE11E04", Offset = "0xE11E04", VA = "0xE11E04")]
	public UnderWaterDetection()
	{
	}
}
[Token(Token = "0x200023C")]
public class WaterNew : MonoBehaviour
{
	[Token(Token = "0x4000D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3[] verticies;

	[Token(Token = "0x4000D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int[] triangles;

	[Token(Token = "0x4000D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector2[] uvs;

	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 256f)]
	public int Size;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(1f, 8f)]
	public int octaves;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float height;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float speed;

	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float frequency;

	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float off;

	[Token(Token = "0x600099C")]
	[Address(RVA = "0xE11E0C", Offset = "0xE11E0C", VA = "0xE11E0C")]
	private void Update()
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0xE121F0", Offset = "0xE121F0", VA = "0xE121F0")]
	public WaterNew()
	{
	}
}
[Token(Token = "0x200023D")]
public class RaySnapToggle : MonoBehaviour
{
	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject Slots;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool SlotsOn;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject[] Slot;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject snapUp;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject snapDown;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject snapL;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject snapR;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.GameObject snapFront;

	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject snapBack;

	[Token(Token = "0x600099E")]
	[Address(RVA = "0xE121F8", Offset = "0xE121F8", VA = "0xE121F8")]
	private void Start()
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0xE121FC", Offset = "0xE121FC", VA = "0xE121FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0xE12200", Offset = "0xE12200", VA = "0xE12200")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0xE12380", Offset = "0xE12380", VA = "0xE12380")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0xE12500", Offset = "0xE12500", VA = "0xE12500")]
	public void SlotOff()
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0xE12564", Offset = "0xE12564", VA = "0xE12564")]
	public void SlotOn()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xE125CC", Offset = "0xE125CC", VA = "0xE125CC")]
	public RaySnapToggle()
	{
	}
}
[Token(Token = "0x200023E")]
public class RequestPermissionScript : MonoBehaviour
{
	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool _locationPermissionAsked;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool _microphonePermissionAsked;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool _cameraPermissionAsked;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool _storagePermissionAsked;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject note;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject logo;

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xE125D4", Offset = "0xE125D4", VA = "0xE125D4")]
	internal void PermissionCallbacks_PermissionDeniedAndDontAskAgain(string permissionName)
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xE12660", Offset = "0xE12660", VA = "0xE12660")]
	internal void PermissionCallbacks_PermissionGranted(string permissionName)
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xE126EC", Offset = "0xE126EC", VA = "0xE126EC")]
	internal void PermissionCallbacks_PermissionDenied(string permissionName)
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0xE12778", Offset = "0xE12778", VA = "0xE12778")]
	public void quitApp()
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0xE12780", Offset = "0xE12780", VA = "0xE12780")]
	private void Start()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0xE12878", Offset = "0xE12878", VA = "0xE12878")]
	public RequestPermissionScript()
	{
	}
}
[Token(Token = "0x200023F")]
public class Distributor : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000240")]
	public struct Target
	{
		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ItemInfo itemInfo;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GVRI.Slot slot;
	}

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Inserter inserter;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Target[] targets;

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0xE12880", Offset = "0xE12880", VA = "0xE12880")]
	private void Start()
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0xE12ACC", Offset = "0xE12ACC", VA = "0xE12ACC")]
	public GVRI.Slot InsertionIntoInserter(Inserter inserter, Item i)
	{
		return null;
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0xE12BA4", Offset = "0xE12BA4", VA = "0xE12BA4")]
	public Distributor()
	{
	}
}
[Token(Token = "0x2000241")]
public class MenuPauseManager : MonoBehaviour
{
	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject OVRCameraRig;

	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject Canvas;

	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.GameObject EventSystem;

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0xE12BAC", Offset = "0xE12BAC", VA = "0xE12BAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0xE12BB0", Offset = "0xE12BB0", VA = "0xE12BB0")]
	private void Update()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0xE12C40", Offset = "0xE12C40", VA = "0xE12C40")]
	private void PauseGame()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0xE12C34", Offset = "0xE12C34", VA = "0xE12C34")]
	private void ContinueGame()
	{
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0xE12C4C", Offset = "0xE12C4C", VA = "0xE12C4C")]
	public MenuPauseManager()
	{
	}
}
[Token(Token = "0x2000242")]
public class OrbitSun : MonoBehaviour
{
	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float theta;

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0xE12C54", Offset = "0xE12C54", VA = "0xE12C54")]
	private void Start()
	{
	}

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0xE12C58", Offset = "0xE12C58", VA = "0xE12C58")]
	private void Update()
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0xE12DA0", Offset = "0xE12DA0", VA = "0xE12DA0")]
	public OrbitSun()
	{
	}
}
[Token(Token = "0x2000243")]
public class PlayMusicManager : MonoBehaviour
{
	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource track1;

	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource track2;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource track3;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource track4;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource track5;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource track6;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource track7;

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0xE12DA8", Offset = "0xE12DA8", VA = "0xE12DA8")]
	public void PlayTrack1()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0xE12E28", Offset = "0xE12E28", VA = "0xE12E28")]
	public void PlayTrack2()
	{
	}

	[Token(Token = "0x60009B8")]
	[Address(RVA = "0xE12EA8", Offset = "0xE12EA8", VA = "0xE12EA8")]
	public void PlayTrack3()
	{
	}

	[Token(Token = "0x60009B9")]
	[Address(RVA = "0xE12F28", Offset = "0xE12F28", VA = "0xE12F28")]
	public void PlayTrack4()
	{
	}

	[Token(Token = "0x60009BA")]
	[Address(RVA = "0xE12FA8", Offset = "0xE12FA8", VA = "0xE12FA8")]
	public void PlayTrack5()
	{
	}

	[Token(Token = "0x60009BB")]
	[Address(RVA = "0xE13028", Offset = "0xE13028", VA = "0xE13028")]
	public void PlayTrack6()
	{
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0xE130A8", Offset = "0xE130A8", VA = "0xE130A8")]
	public void PlayTrack7()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0xE13128", Offset = "0xE13128", VA = "0xE13128")]
	public void StopMusic()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0xE13178", Offset = "0xE13178", VA = "0xE13178")]
	public void PauseMusic()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0xE131F8", Offset = "0xE131F8", VA = "0xE131F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0xE131FC", Offset = "0xE131FC", VA = "0xE131FC")]
	public PlayMusicManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000244")]
public class ArtifactsData
{
	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int artifactIndex;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string blockName;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string blockTag;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int blockID;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int health;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float drag;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float mass;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] position;

	[Token(Token = "0x4000D6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float[] rotation;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int climbableIsOn;

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0xE13204", Offset = "0xE13204", VA = "0xE13204")]
	public ArtifactsData(ArtifactController artifact)
	{
	}
}
[Token(Token = "0x2000245")]
[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
public class BuildBlockMesh : MonoBehaviour
{
	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject newBlock;

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public KeyCode saveKey;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string saveName;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform selectedGameObject;

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0xE13354", Offset = "0xE13354", VA = "0xE13354")]
	public void Combine(UnityEngine.GameObject block)
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0xE137A4", Offset = "0xE137A4", VA = "0xE137A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0xE137A8", Offset = "0xE137A8", VA = "0xE137A8")]
	public void BuildNewBlock()
	{
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0xE13A98", Offset = "0xE13A98", VA = "0xE13A98")]
	private void Update()
	{
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0xE13CA0", Offset = "0xE13CA0", VA = "0xE13CA0")]
	private void SaveAsset()
	{
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0xE13DD4", Offset = "0xE13DD4", VA = "0xE13DD4")]
	public BuildBlockMesh()
	{
	}
}
[Token(Token = "0x2000246")]
public class MasterBlock : MonoBehaviour
{
	[Token(Token = "0x2000247")]
	[CompilerGenerated]
	private sealed class <SetPhysicsBlock>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MasterBlock <>4__this;

		[Token(Token = "0x170000B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009DC")]
			[Address(RVA = "0xE15B18", Offset = "0xE15B18", VA = "0xE15B18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009DE")]
			[Address(RVA = "0xE15B60", Offset = "0xE15B60", VA = "0xE15B60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xE144CC", Offset = "0xE144CC", VA = "0xE144CC")]
		[DebuggerHidden]
		public <SetPhysicsBlock>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xE1599C", Offset = "0xE1599C", VA = "0xE1599C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xE159A0", Offset = "0xE159A0", VA = "0xE159A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xE15B20", Offset = "0xE15B20", VA = "0xE15B20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000248")]
	[CompilerGenerated]
	private sealed class <SetPhysicsBlockOnImpactCannon>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MasterBlock <>4__this;

		[Token(Token = "0x170000B8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0xE15C74", Offset = "0xE15C74", VA = "0xE15C74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xE15CBC", Offset = "0xE15CBC", VA = "0xE15CBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xE14568", Offset = "0xE14568", VA = "0xE14568")]
		[DebuggerHidden]
		public <SetPhysicsBlockOnImpactCannon>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xE15B68", Offset = "0xE15B68", VA = "0xE15B68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xE15B6C", Offset = "0xE15B6C", VA = "0xE15B6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xE15C7C", Offset = "0xE15C7C", VA = "0xE15C7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000249")]
	[CompilerGenerated]
	private sealed class <SetPhysicsBlockOnImpact>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MasterBlock <>4__this;

		[Token(Token = "0x170000BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xE15DB8", Offset = "0xE15DB8", VA = "0xE15DB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xE15E00", Offset = "0xE15E00", VA = "0xE15E00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xE14604", Offset = "0xE14604", VA = "0xE14604")]
		[DebuggerHidden]
		public <SetPhysicsBlockOnImpact>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xE15CC4", Offset = "0xE15CC4", VA = "0xE15CC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xE15CC8", Offset = "0xE15CC8", VA = "0xE15CC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xE15DC0", Offset = "0xE15DC0", VA = "0xE15DC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Data")]
	public string blockName;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string blockTag;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int blockID;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int health;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float drag;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float mass;

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] position;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float[] rotation;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.GameObject blockPrefab;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int climbableIsOn;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public MasterBlockObject masterBlock;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.GameObject activeWoodModel;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material blockMaterial;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ItemInfo itemInfo;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material transMat;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Models")]
	public MasterBlockObject[] masterBlocks;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Header("Settings")]
	private float moveTimeMin;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Header("Components")]
	private Rigidbody2D rb;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Rigidbody rbd;

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private SpriteRenderer body;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	public UnityEngine.GameObject[] woodModels;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEngine.GameObject firstWoodBlock;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	public Transform headAnchor;

	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Preview preview;

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	public int woodModelIndex;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Material[] destructedMaterial;

	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public UnityEngine.GameObject[] activeDestructedModel;

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityEngine.GameObject craftController;

	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool isBlockPhysicsOn;

	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public BuildSystem bs;

	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool boolClimbableIsOn;

	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public UnityEngine.GameObject climbHandles;

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0xE13E34", Offset = "0xE13E34", VA = "0xE13E34")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0xE13E38", Offset = "0xE13E38", VA = "0xE13E38")]
	public void UpdateMasterBlock()
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0xE14130", Offset = "0xE14130", VA = "0xE14130")]
	public void SpawnMasterBlock()
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0xE14458", Offset = "0xE14458", VA = "0xE14458")]
	[IteratorStateMachine(typeof(<SetPhysicsBlock>d__31))]
	public IEnumerator SetPhysicsBlock()
	{
		return null;
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0xE144F4", Offset = "0xE144F4", VA = "0xE144F4")]
	[IteratorStateMachine(typeof(<SetPhysicsBlockOnImpactCannon>d__32))]
	public IEnumerator SetPhysicsBlockOnImpactCannon()
	{
		return null;
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0xE14590", Offset = "0xE14590", VA = "0xE14590")]
	[IteratorStateMachine(typeof(<SetPhysicsBlockOnImpact>d__33))]
	public IEnumerator SetPhysicsBlockOnImpact()
	{
		return null;
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0xE1462C", Offset = "0xE1462C", VA = "0xE1462C")]
	private void Update()
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0xE14630", Offset = "0xE14630", VA = "0xE14630")]
	public void Start()
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0xE14EB0", Offset = "0xE14EB0", VA = "0xE14EB0")]
	public void SwitchPhysics()
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0xE14EC0", Offset = "0xE14EC0", VA = "0xE14EC0")]
	public void CraftApply()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0xE15380", Offset = "0xE15380", VA = "0xE15380")]
	public void WoodModelUp()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0xE153B0", Offset = "0xE153B0", VA = "0xE153B0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0xE154B4", Offset = "0xE154B4", VA = "0xE154B4")]
	private void OnTransformParentChanged()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0xE158F0", Offset = "0xE158F0", VA = "0xE158F0")]
	public void SetSnapZoneScale()
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0xE15950", Offset = "0xE15950", VA = "0xE15950")]
	public void ToggleClimbHandles()
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0xE14E34", Offset = "0xE14E34", VA = "0xE14E34")]
	public void ActivateHandlesOnStart()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0xE1598C", Offset = "0xE1598C", VA = "0xE1598C")]
	public MasterBlock()
	{
	}
}
[Serializable]
[Token(Token = "0x200024A")]
public class MasterBlockData
{
	[Token(Token = "0x4000D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string blockName;

	[Token(Token = "0x4000D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string blockTag;

	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int blockID;

	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int health;

	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float drag;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float mass;

	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float[] position;

	[Token(Token = "0x4000DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] rotation;

	[Token(Token = "0x4000DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int climbableIsOn;

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0xE15E08", Offset = "0xE15E08", VA = "0xE15E08")]
	public MasterBlockData(MasterBlock masterBlock)
	{
	}
}
[Serializable]
[Token(Token = "0x200024B")]
[CreateAssetMenu(fileName = "New MasterBlockObject", menuName = "Block System / Blocks / MasterBlockObject")]
public class MasterBlockObject : ScriptableObject
{
	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string blockName;

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string blockTag;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int blockID;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MasterBlockObject masterBlock;

	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int health;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float drag;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float mass;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] position;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float[] rotation;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.GameObject blockPrefab;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int climbableIsOn;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material material;

	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ItemInfo itemInfo;

	[Token(Token = "0x4000DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material transMat;

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0xE15F8C", Offset = "0xE15F8C", VA = "0xE15F8C")]
	public MasterBlockObject()
	{
	}
}
[Token(Token = "0x200024C")]
public class MasterSaveSystem : MonoBehaviour
{
	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Prefabs")]
	[SerializeField]
	public BlockBasic blockBasicPrefab;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public BlockBasic blockBasicPrefab1;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public BlockBasic blockBasicPrefab2;

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public MasterBlock[] masterBlockPrefab;

	[Token(Token = "0x4000DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PoolObject poolObject;

	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Block> blocks;

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static List<BlockBasic> blocksBasic;

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static List<MasterBlock> masterBlocks;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject[] trees;

	[Token(Token = "0x4000DB9")]
	private const string BLOCK_SUB = "/block";

	[Token(Token = "0x4000DBA")]
	private const string BLOCK_COUNT_SUB = "/block.count";

	[Token(Token = "0x4000DBB")]
	private const string BLOCKBASIC_SUB = "/blockBasic";

	[Token(Token = "0x4000DBC")]
	private const string BLOCKBASIC_COUNT_SUB = "/blockBasic.count";

	[Token(Token = "0x4000DBD")]
	private const string masterBlock_SUB = "/masterBlock";

	[Token(Token = "0x4000DBE")]
	private const string masterBlock_COUNT_SUB = "/masterBlock.count";

	[Token(Token = "0x4000DBF")]
	private const string MASTERBLOCK_SUB = "/masterBlock";

	[Token(Token = "0x4000DC0")]
	private const string MASTERBLOCK_COUNT_SUB = "/masterBlock.count";

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private EasyObjectPool eop;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int IsFirst;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SavePlayerTransform savePlayer;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int blockID;

	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ChunkSpawner chunkSpawner;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ArtifactSaveTransform artifactSave;

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0xE15F94", Offset = "0xE15F94", VA = "0xE15F94")]
	public void Start()
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0xE1617C", Offset = "0xE1617C", VA = "0xE1617C")]
	public void SaveAll()
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0xE17074", Offset = "0xE17074", VA = "0xE17074")]
	public void LoadAll()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0xE17118", Offset = "0xE17118", VA = "0xE17118")]
	public void LoadBlocksOverall()
	{
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0xE183D8", Offset = "0xE183D8", VA = "0xE183D8")]
	public void LoadNatureOverall()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0xE1618C", Offset = "0xE1618C", VA = "0xE1618C")]
	public void SaveMasterBlock()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0xE17B6C", Offset = "0xE17B6C", VA = "0xE17B6C")]
	public void LoadMasterBlock()
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0xE16A8C", Offset = "0xE16A8C", VA = "0xE16A8C")]
	public void SaveNature()
	{
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0xE17230", Offset = "0xE17230", VA = "0xE17230")]
	public void LoadNature()
	{
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0xE185CC", Offset = "0xE185CC", VA = "0xE185CC")]
	public MasterSaveSystem()
	{
	}
}
[Token(Token = "0x200024D")]
public class MeshDestroyer : MonoBehaviour
{
	[Token(Token = "0x200024E")]
	public class PartMesh
	{
		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<UnityEngine.Vector3> _Verticies;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<UnityEngine.Vector3> _Normals;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<List<int>> _Triangles;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<UnityEngine.Vector2> _UVs;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3[] Vertices;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector3[] Normals;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int[][] Triangles;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Vector2[] UV;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.GameObject GameObject;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Bounds Bounds;

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xE18E18", Offset = "0xE18E18", VA = "0xE18E18")]
		public PartMesh()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xE1A6F0", Offset = "0xE1A6F0", VA = "0xE1A6F0")]
		public void AddTriangle(int submesh, UnityEngine.Vector3 vert1, UnityEngine.Vector3 vert2, UnityEngine.Vector3 vert3, UnityEngine.Vector3 normal1, UnityEngine.Vector3 normal2, UnityEngine.Vector3 normal3, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2, UnityEngine.Vector2 uv3)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xE1B16C", Offset = "0xE1B16C", VA = "0xE1B16C")]
		public void FillArrays()
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xE1A310", Offset = "0xE1A310", VA = "0xE1A310")]
		public void MakeGameobject(MeshDestroyer original)
		{
		}
	}

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool edgeSet;

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UnityEngine.Vector3 edgeVertex;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector2 edgeUV;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Plane edgePlane;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int CutCascades;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float ExplodeForce;

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0xE18714", Offset = "0xE18714", VA = "0xE18714")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0xE18718", Offset = "0xE18718", VA = "0xE18718")]
	private void Update()
	{
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0xE1871C", Offset = "0xE1871C", VA = "0xE1871C")]
	public void DestroyMesh()
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0xE18F70", Offset = "0xE18F70", VA = "0xE18F70")]
	private PartMesh GenerateMesh(PartMesh original, Plane plane, bool left)
	{
		return null;
	}

	[Token(Token = "0x60009FC")]
	[Address(RVA = "0xE1AFD8", Offset = "0xE1AFD8", VA = "0xE1AFD8")]
	private void AddEdge(int subMesh, PartMesh partMesh, UnityEngine.Vector3 normal, UnityEngine.Vector3 vertex1, UnityEngine.Vector3 vertex2, UnityEngine.Vector2 uv1, UnityEngine.Vector2 uv2)
	{
	}

	[Token(Token = "0x60009FD")]
	[Address(RVA = "0xE1B34C", Offset = "0xE1B34C", VA = "0xE1B34C")]
	public MeshDestroyer()
	{
	}
}
[Serializable]
[Token(Token = "0x200024F")]
public class PlayerData
{
	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float[] position;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float[] rotation;

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0xE1B3EC", Offset = "0xE1B3EC", VA = "0xE1B3EC")]
	public PlayerData(PlayerInfo player)
	{
	}
}
[Serializable]
[Token(Token = "0x2000250")]
[CreateAssetMenu(fileName = "New PreviewObject", menuName = "Block System / Blocks / PreviewObject")]
public class PreviewObject : ScriptableObject
{
	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject previewPrefab;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material material;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int blockID;

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0xE1B534", Offset = "0xE1B534", VA = "0xE1B534")]
	public PreviewObject()
	{
	}
}
[Token(Token = "0x2000251")]
public class Database : MonoBehaviour
{
	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Database instance;

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0xE1B53C", Offset = "0xE1B53C", VA = "0xE1B53C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0xE1B64C", Offset = "0xE1B64C", VA = "0xE1B64C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0xE1B650", Offset = "0xE1B650", VA = "0xE1B650")]
	public Database()
	{
	}
}
[Token(Token = "0x2000252")]
[CreateAssetMenu(fileName = "New Default Object", menuName = "Inventory System/Items/Default")]
public class DefaultObject : ItemObjectOld
{
	[Token(Token = "0x6000A07")]
	[Address(RVA = "0xE1B658", Offset = "0xE1B658", VA = "0xE1B658")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0xE1B65C", Offset = "0xE1B65C", VA = "0xE1B65C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0xE1B660", Offset = "0xE1B660", VA = "0xE1B660")]
	public DefaultObject()
	{
	}
}
[Token(Token = "0x2000253")]
public class DisplayInventory : MonoBehaviour
{
	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InventoryObjectOld inventory;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int X_SPACE_BETWEEN_ITEM;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int X_START;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Y_START;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int NUMBER_OF_COLUMS;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int Y_SPACE_BETWEEN_ITEMS;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<InventorySlotOld, UnityEngine.GameObject> ItemsDisplayed;

	[Token(Token = "0x6000A0A")]
	[Address(RVA = "0xE1B670", Offset = "0xE1B670", VA = "0xE1B670")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0xE1B950", Offset = "0xE1B950", VA = "0xE1B950")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0xE1B954", Offset = "0xE1B954", VA = "0xE1B954")]
	public void UpdateDisplay()
	{
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0xE1B674", Offset = "0xE1B674", VA = "0xE1B674")]
	public void CreateDispaly()
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0xE1BD28", Offset = "0xE1BD28", VA = "0xE1BD28")]
	public UnityEngine.Vector3 GetPosition(int i)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xE1BD50", Offset = "0xE1BD50", VA = "0xE1BD50")]
	public DisplayInventory()
	{
	}
}
[Token(Token = "0x2000254")]
[CreateAssetMenu(fileName = "New Food Object", menuName = "Inventory System/Items/Food")]
public class FoodObject : ItemObjectOld
{
	[Token(Token = "0x4000DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int restoreHealthValue;

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xE1BDD8", Offset = "0xE1BDD8", VA = "0xE1BDD8")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xE1BDDC", Offset = "0xE1BDDC", VA = "0xE1BDDC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0xE1BDE0", Offset = "0xE1BDE0", VA = "0xE1BDE0")]
	public FoodObject()
	{
	}
}
[Token(Token = "0x2000255")]
[CreateAssetMenu(fileName = "New Inventory", menuName = "Inventory System/Inventory")]
public class InventoryObjectOld : ScriptableObject
{
	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ItemDatabaseObjectOld database;

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<InventorySlotOld> Container;

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0xE1BDE8", Offset = "0xE1BDE8", VA = "0xE1BDE8")]
	public void AddItem(ItemObjectOld _item, int _amount)
	{
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0xE1C07C", Offset = "0xE1C07C", VA = "0xE1C07C")]
	public InventoryObjectOld()
	{
	}
}
[Serializable]
[Token(Token = "0x2000256")]
public class InventorySlotOld
{
	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int ID;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ItemObjectOld item;

	[Token(Token = "0x4000DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int amount;

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xE1C030", Offset = "0xE1C030", VA = "0xE1C030")]
	public InventorySlotOld(int _id, ItemObjectOld _item, int _amount)
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xE1C020", Offset = "0xE1C020", VA = "0xE1C020")]
	public void AddAmount(int value)
	{
	}
}
[Token(Token = "0x2000257")]
[CreateAssetMenu(fileName = "New Item Database", menuName = "Inventory System/Items/Database")]
public class ItemDatabaseObjectOld : ScriptableObject, ISerializationCallbackReceiver
{
	[Token(Token = "0x4000DEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ItemObjectOld[] Items;

	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Dictionary<ItemObjectOld, int> GetId;

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xE1C104", Offset = "0xE1C104", VA = "0xE1C104", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xE1C1F0", Offset = "0xE1C1F0", VA = "0xE1C1F0", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000A19")]
	[Address(RVA = "0xE1C1F4", Offset = "0xE1C1F4", VA = "0xE1C1F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A1A")]
	[Address(RVA = "0xE1C1F8", Offset = "0xE1C1F8", VA = "0xE1C1F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0xE1C1FC", Offset = "0xE1C1FC", VA = "0xE1C1FC")]
	public ItemDatabaseObjectOld()
	{
	}
}
[Token(Token = "0x2000258")]
public enum ItemTypeOld
{
	[Token(Token = "0x4000DED")]
	MasterBlock,
	[Token(Token = "0x4000DEE")]
	Tool
}
[Token(Token = "0x2000259")]
public abstract class ItemObjectOld : ScriptableObject
{
	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject prefab;

	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ItemTypeOld type;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[TextArea(15, 20)]
	public string description;

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0xE1C284", Offset = "0xE1C284", VA = "0xE1C284")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0xE1C288", Offset = "0xE1C288", VA = "0xE1C288")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0xE1B668", Offset = "0xE1B668", VA = "0xE1B668")]
	protected ItemObjectOld()
	{
	}
}
[Token(Token = "0x200025A")]
public class Player1 : MonoBehaviour
{
	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0xE1C28C", Offset = "0xE1C28C", VA = "0xE1C28C")]
	public Player1()
	{
	}
}
[Token(Token = "0x200025B")]
public class Tool : MonoBehaviour
{
	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ToolData toolData;

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0xE1C294", Offset = "0xE1C294", VA = "0xE1C294")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0xE1C390", Offset = "0xE1C390", VA = "0xE1C390")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0xE1C394", Offset = "0xE1C394", VA = "0xE1C394")]
	public Tool()
	{
	}
}
[Token(Token = "0x200025C")]
[CreateAssetMenu(fileName = "New ToolData", menuName = "Tool Data", order = 51)]
public abstract class ToolData : ScriptableObject
{
	[Token(Token = "0x4000DF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string toolID;

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string toolName;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string description;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Sprite icon;

	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int coinCost;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int attackDamage;

	[Token(Token = "0x170000BC")]
	public string ToolID
	{
		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xE1C39C", Offset = "0xE1C39C", VA = "0xE1C39C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BD")]
	public string ToolName
	{
		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xE1C3A4", Offset = "0xE1C3A4", VA = "0xE1C3A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BE")]
	public string Description
	{
		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xE1C3AC", Offset = "0xE1C3AC", VA = "0xE1C3AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BF")]
	public Sprite Icon
	{
		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xE1C3B4", Offset = "0xE1C3B4", VA = "0xE1C3B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C0")]
	public int CoinCost
	{
		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xE1C3BC", Offset = "0xE1C3BC", VA = "0xE1C3BC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000C1")]
	public int AttackDamage
	{
		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xE1C3C4", Offset = "0xE1C3C4", VA = "0xE1C3C4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0xE1C3CC", Offset = "0xE1C3CC", VA = "0xE1C3CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0xE1C3D0", Offset = "0xE1C3D0", VA = "0xE1C3D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0xE1C3D4", Offset = "0xE1C3D4", VA = "0xE1C3D4")]
	protected ToolData()
	{
	}
}
[Token(Token = "0x200025D")]
[CreateAssetMenu(fileName = "New ToolDatabase", menuName = "Tool Database", order = 51)]
public class ToolDatabase : ScriptableObject
{
	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ToolData> allTools;

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0xE1C3DC", Offset = "0xE1C3DC", VA = "0xE1C3DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0xE1C3E0", Offset = "0xE1C3E0", VA = "0xE1C3E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A2E")]
	[Address(RVA = "0xE1C3E4", Offset = "0xE1C3E4", VA = "0xE1C3E4")]
	public ToolDatabase()
	{
	}
}
[Token(Token = "0x200025E")]
public class SetQualityLevel : MonoBehaviour
{
	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text level;

	[Token(Token = "0x6000A2F")]
	[Address(RVA = "0xE1C3EC", Offset = "0xE1C3EC", VA = "0xE1C3EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A30")]
	[Address(RVA = "0xE1C520", Offset = "0xE1C520", VA = "0xE1C520")]
	public void SetQualityLevelBasedOnDevicePICO()
	{
	}

	[Token(Token = "0x6000A31")]
	[Address(RVA = "0xE1C63C", Offset = "0xE1C63C", VA = "0xE1C63C")]
	public void SetQualityLevelBasedOnDeviceMETA()
	{
	}

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0xE1C7A4", Offset = "0xE1C7A4", VA = "0xE1C7A4")]
	public SetQualityLevel()
	{
	}
}
[Token(Token = "0x200025F")]
public class VolumeSaveController : MonoBehaviour
{
	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixer musicMixer;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixer sfxMixer;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UnityEngine.UI.Slider musicVolumeSlider;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.UI.Slider sfxVolumeSlider;

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0xE1C7AC", Offset = "0xE1C7AC", VA = "0xE1C7AC")]
	public void Start()
	{
	}

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0xE1C8A8", Offset = "0xE1C8A8", VA = "0xE1C8A8")]
	public void MusicVolumeSlider(float musicValue)
	{
	}

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0xE1C948", Offset = "0xE1C948", VA = "0xE1C948")]
	public void SFXVolumeSlider(float sfxValue)
	{
	}

	[Token(Token = "0x6000A36")]
	[Address(RVA = "0xE1C9E8", Offset = "0xE1C9E8", VA = "0xE1C9E8")]
	private void SaveVolume()
	{
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0xE1C7B0", Offset = "0xE1C7B0", VA = "0xE1C7B0")]
	public void LoadVolume()
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0xE1C9EC", Offset = "0xE1C9EC", VA = "0xE1C9EC")]
	public VolumeSaveController()
	{
	}
}
[Token(Token = "0x2000260")]
public class ShootingWandController : GrabbableEvents
{
	[Token(Token = "0x2000261")]
	[CompilerGenerated]
	private sealed class <PreventSpam>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShootingWandController <>4__this;

		[Token(Token = "0x170000C2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0xE1CD48", Offset = "0xE1CD48", VA = "0xE1CD48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A4D")]
			[Address(RVA = "0xE1CD90", Offset = "0xE1CD90", VA = "0xE1CD90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xE1CB54", Offset = "0xE1CB54", VA = "0xE1CB54")]
		[DebuggerHidden]
		public <PreventSpam>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xE1CC84", Offset = "0xE1CC84", VA = "0xE1CC84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xE1CC88", Offset = "0xE1CC88", VA = "0xE1CC88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xE1CD50", Offset = "0xE1CD50", VA = "0xE1CD50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000262")]
	[CompilerGenerated]
	private sealed class <ShootCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShootingWandController <>4__this;

		[Token(Token = "0x170000C4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A51")]
			[Address(RVA = "0xE1CE68", Offset = "0xE1CE68", VA = "0xE1CE68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A53")]
			[Address(RVA = "0xE1CEB0", Offset = "0xE1CEB0", VA = "0xE1CEB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xE1CC20", Offset = "0xE1CC20", VA = "0xE1CC20")]
		[DebuggerHidden]
		public <ShootCoroutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xE1CD98", Offset = "0xE1CD98", VA = "0xE1CD98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xE1CD9C", Offset = "0xE1CD9C", VA = "0xE1CD9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xE1CE70", Offset = "0xE1CE70", VA = "0xE1CE70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000263")]
	[CompilerGenerated]
	private sealed class <ResetTool>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShootingWandController <>4__this;

		[Token(Token = "0x170000C6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A57")]
			[Address(RVA = "0xE1D00C", Offset = "0xE1D00C", VA = "0xE1D00C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A59")]
			[Address(RVA = "0xE1D054", Offset = "0xE1D054", VA = "0xE1D054", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xE1CC48", Offset = "0xE1CC48", VA = "0xE1CC48")]
		[DebuggerHidden]
		public <ResetTool>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xE1CEB8", Offset = "0xE1CEB8", VA = "0xE1CEB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xE1CEBC", Offset = "0xE1CEBC", VA = "0xE1CEBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xE1D014", Offset = "0xE1D014", VA = "0xE1D014", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject torchLight;

	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ProjectileLauncher launcher;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isReadyForInstantiate;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool canShoot;

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float minHeightForRespawn;

	[Token(Token = "0x4000E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEngine.GameObject spawnPoint;

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0xE1C9F4", Offset = "0xE1C9F4", VA = "0xE1C9F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0xE1C9F8", Offset = "0xE1C9F8", VA = "0xE1C9F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xE1C9FC", Offset = "0xE1C9FC", VA = "0xE1C9FC", Slot = "14")]
	public override void OnGrip(float gripValue)
	{
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xE1CA00", Offset = "0xE1CA00", VA = "0xE1CA00", Slot = "5")]
	public override void OnRelease()
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xE1CA94", Offset = "0xE1CA94", VA = "0xE1CA94", Slot = "4")]
	public override void OnGrab(Grabber grabber)
	{
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0xE1CA98", Offset = "0xE1CA98", VA = "0xE1CA98", Slot = "22")]
	public override void OnButton2Down()
	{
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0xE1CAB8", Offset = "0xE1CAB8", VA = "0xE1CAB8", Slot = "19")]
	public override void OnButton1Down()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0xE1CABC", Offset = "0xE1CABC", VA = "0xE1CABC", Slot = "23")]
	public override void OnButton2Up()
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0xE1CADC", Offset = "0xE1CADC", VA = "0xE1CADC", Slot = "21")]
	public override void OnButton2()
	{
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xE1CAE0", Offset = "0xE1CAE0", VA = "0xE1CAE0")]
	[IteratorStateMachine(typeof(<PreventSpam>d__12))]
	public IEnumerator PreventSpam()
	{
		return null;
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0xE1CB7C", Offset = "0xE1CB7C", VA = "0xE1CB7C", Slot = "16")]
	public override void OnTriggerDown()
	{
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0xE1CBAC", Offset = "0xE1CBAC", VA = "0xE1CBAC")]
	[IteratorStateMachine(typeof(<ShootCoroutine>d__15))]
	private IEnumerator ShootCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xE1CA20", Offset = "0xE1CA20", VA = "0xE1CA20")]
	[IteratorStateMachine(typeof(<ResetTool>d__18))]
	private IEnumerator ResetTool()
	{
		return null;
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0xE1CC70", Offset = "0xE1CC70", VA = "0xE1CC70", Slot = "15")]
	public override void OnTrigger(float triggerValue)
	{
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0xE1CC74", Offset = "0xE1CC74", VA = "0xE1CC74")]
	public ShootingWandController()
	{
	}
}
[Token(Token = "0x2000264")]
public class SpriteFader : MonoBehaviour
{
	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float fadeInTime;

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0xE1D05C", Offset = "0xE1D05C", VA = "0xE1D05C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0xE1D11C", Offset = "0xE1D11C", VA = "0xE1D11C")]
	public SpriteFader()
	{
	}
}
[Token(Token = "0x2000265")]
public class TimedSpawn1 : MonoBehaviour
{
	[Token(Token = "0x2000266")]
	public enum SpawnTypes
	{
		[Token(Token = "0x4000E21")]
		Normal,
		[Token(Token = "0x4000E22")]
		Once,
		[Token(Token = "0x4000E23")]
		Wave,
		[Token(Token = "0x4000E24")]
		TimedWave
	}

	[Token(Token = "0x2000267")]
	public enum EnemyLevels
	{
		[Token(Token = "0x4000E26")]
		Easy,
		[Token(Token = "0x4000E27")]
		Medium,
		[Token(Token = "0x4000E28")]
		Hard,
		[Token(Token = "0x4000E29")]
		Boss
	}

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Color gizmoColor;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyLevels enemyLevel;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnityEngine.GameObject EasyEnemy;

	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject MediumEnemy;

	[Token(Token = "0x4000E13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEngine.GameObject HardEnemy;

	[Token(Token = "0x4000E14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEngine.GameObject BossEnemy;

	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int totalEnemy;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int numEnemy;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int spawnedEnemy;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int SpawnID;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool waveSpawn;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool Spawn;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public SpawnTypes spawnType;

	[Token(Token = "0x4000E1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float waveTimer;

	[Token(Token = "0x4000E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float timeTillWave;

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int totalWaves;

	[Token(Token = "0x4000E1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int numWaves;

	[Token(Token = "0x170000C8")]
	public float TimeTillWave
	{
		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xE1D65C", Offset = "0xE1D65C", VA = "0xE1D65C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0xE1D124", Offset = "0xE1D124", VA = "0xE1D124")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0xE1D148", Offset = "0xE1D148", VA = "0xE1D148")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000A5E")]
	[Address(RVA = "0xE1D194", Offset = "0xE1D194", VA = "0xE1D194")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0xE1D2F0", Offset = "0xE1D2F0", VA = "0xE1D2F0")]
	private void spawnEnemy()
	{
	}

	[Token(Token = "0x6000A60")]
	[Address(RVA = "0xE1D614", Offset = "0xE1D614", VA = "0xE1D614")]
	public void killEnemy(int sID)
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0xE1D630", Offset = "0xE1D630", VA = "0xE1D630")]
	public void enableSpawner(int sID)
	{
	}

	[Token(Token = "0x6000A62")]
	[Address(RVA = "0xE1D648", Offset = "0xE1D648", VA = "0xE1D648")]
	public void disableSpawner(int sID)
	{
	}

	[Token(Token = "0x6000A64")]
	[Address(RVA = "0xE1D664", Offset = "0xE1D664", VA = "0xE1D664")]
	public void enableTrigger()
	{
	}

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0xE1D670", Offset = "0xE1D670", VA = "0xE1D670")]
	public TimedSpawn1()
	{
	}
}
[Token(Token = "0x2000268")]
public class TriggerCheck : MonoBehaviour
{
	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.GameObject[] blocksInScene;

	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.GameObject[] blockControllersInScene;

	[Token(Token = "0x4000E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CustomSnapToSystem SnapSystem;

	[Token(Token = "0x4000E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Grabbable boxGrabbable;

	[Token(Token = "0x4000E2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.GameObject previewBlock;

	[Token(Token = "0x4000E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool collision;

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0xE1D6A4", Offset = "0xE1D6A4", VA = "0xE1D6A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0xE1D6A8", Offset = "0xE1D6A8", VA = "0xE1D6A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0xE1D6AC", Offset = "0xE1D6AC", VA = "0xE1D6AC")]
	public TriggerCheck()
	{
	}
}
namespace GVRI
{
	[Token(Token = "0x2000269")]
	public class DynamicInventory : Inventory
	{
		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Inserter inserter;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.GameObject invSlotPrefab;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint maxSlots;

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xE1D6B4", Offset = "0xE1D6B4", VA = "0xE1D6B4", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xE1D90C", Offset = "0xE1D90C", VA = "0xE1D90C", Slot = "10")]
		public virtual void SlotChanged(GVRI.core.Slot slot)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xE1DA60", Offset = "0xE1DA60", VA = "0xE1DA60", Slot = "11")]
		public virtual Slot InsertionIntoInserter(Inserter inserter, Item i)
		{
			return null;
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xE1DE44", Offset = "0xE1DE44", VA = "0xE1DE44")]
		public DynamicInventory()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class DynamicQuickAccessInventory : DynamicInventory
	{
		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Hand hand;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float radius;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float separation;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool lastFrameValue;

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xE1DE5C", Offset = "0xE1DE5C", VA = "0xE1DE5C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xE1DFBC", Offset = "0xE1DFBC", VA = "0xE1DFBC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xE1E084", Offset = "0xE1E084", VA = "0xE1E084")]
		private void Input(bool value)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xE1E0B0", Offset = "0xE1E0B0", VA = "0xE1E0B0", Slot = "8")]
		public override void Open()
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xE1E290", Offset = "0xE1E290", VA = "0xE1E290", Slot = "9")]
		public override void Close()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xE1E470", Offset = "0xE1E470", VA = "0xE1E470", Slot = "7")]
		public override void UpdateSlots()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xE1EA78", Offset = "0xE1EA78", VA = "0xE1EA78")]
		public DynamicQuickAccessInventory()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public XRNode node;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.XR.InputDevice device;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.GameObject gameObjectInHand;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool justPressed;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool lastTriggerState;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Slot slot;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody rb;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Vector3 oldPos;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 velocity;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource grab;

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xE1EA94", Offset = "0xE1EA94", VA = "0xE1EA94")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xE1EB60", Offset = "0xE1EB60", VA = "0xE1EB60")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xE1ECA0", Offset = "0xE1ECA0", VA = "0xE1ECA0")]
		private void Input(bool triggerValue)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xE1F008", Offset = "0xE1F008", VA = "0xE1F008")]
		private void DropGameObjectInHand()
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xE1EF00", Offset = "0xE1EF00", VA = "0xE1EF00")]
		private void AttachGameObject(UnityEngine.GameObject go)
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xE1F0F0", Offset = "0xE1F0F0", VA = "0xE1F0F0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xE1F19C", Offset = "0xE1F19C", VA = "0xE1F19C")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xE1F350", Offset = "0xE1F350", VA = "0xE1F350")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xE1F3FC", Offset = "0xE1F3FC", VA = "0xE1F3FC")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class Inserter : MonoBehaviour
	{
		[Token(Token = "0x200026D")]
		public delegate Slot notifyIncomingItem(Inserter inserter, Item i);

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public notifyIncomingItem target;

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xE1F40C", Offset = "0xE1F40C", VA = "0xE1F40C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xE1F410", Offset = "0xE1F410", VA = "0xE1F410")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xE1F414", Offset = "0xE1F414", VA = "0xE1F414")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xE1F810", Offset = "0xE1F810", VA = "0xE1F810")]
		public Inserter()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public class Inventory : MonoBehaviour
	{
		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GVRI.core.Inventory coreInv;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Slot> slots;

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xE1D820", Offset = "0xE1D820", VA = "0xE1D820", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xE1F8E8", Offset = "0xE1F8E8", VA = "0xE1F8E8", Slot = "5")]
		public virtual Slot FindSlotWithItem(ItemInfo itemInfo)
		{
			return null;
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xE1FA8C", Offset = "0xE1FA8C", VA = "0xE1FA8C", Slot = "6")]
		public virtual Slot FindSlotWithSlot(GVRI.core.Slot slot)
		{
			return null;
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xE1E87C", Offset = "0xE1E87C", VA = "0xE1E87C", Slot = "7")]
		public virtual void UpdateSlots()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xE1E148", Offset = "0xE1E148", VA = "0xE1E148", Slot = "8")]
		public virtual void Open()
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xE1E328", Offset = "0xE1E328", VA = "0xE1E328", Slot = "9")]
		public virtual void Close()
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xE1DE54", Offset = "0xE1DE54", VA = "0xE1DE54")]
		public Inventory()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class Item : MonoBehaviour
	{
		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemInfo itemInfo;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rb;

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xE1FC68", Offset = "0xE1FC68", VA = "0xE1FC68")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xE1FD24", Offset = "0xE1FD24", VA = "0xE1FD24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xE1FD28", Offset = "0xE1FD28", VA = "0xE1FD28")]
		public void push(UnityEngine.Vector3 force)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xE1FE0C", Offset = "0xE1FE0C", VA = "0xE1FE0C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xE1FE10", Offset = "0xE1FE10", VA = "0xE1FE10")]
		public Item()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class ItemCountUI : MonoBehaviour
	{
		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMesh tm;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer mr;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slot slot;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.GameObject target;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform origin;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float circleFitRadius;

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xE1FE18", Offset = "0xE1FE18", VA = "0xE1FE18", Slot = "1")]
		~ItemCountUI()
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xE1FFA0", Offset = "0xE1FFA0", VA = "0xE1FFA0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xE20038", Offset = "0xE20038", VA = "0xE20038")]
		public void CountChanged(GVRI.core.Slot s)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xE2015C", Offset = "0xE2015C", VA = "0xE2015C")]
		private UnityEngine.Vector2 TextMeshSpan()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xE202B0", Offset = "0xE202B0", VA = "0xE202B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xE20694", Offset = "0xE20694", VA = "0xE20694")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xE20750", Offset = "0xE20750", VA = "0xE20750")]
		public ItemCountUI()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public class SimpleInventory : Inventory
	{
		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Hand hand;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool copy_orientation;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool toggleable;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		protected bool lastFrameValue;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		private bool isOpen;

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xE20760", Offset = "0xE20760", VA = "0xE20760", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xE20818", Offset = "0xE20818", VA = "0xE20818", Slot = "10")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xE208FC", Offset = "0xE208FC", VA = "0xE208FC")]
		private void SetOrientation()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xE20990", Offset = "0xE20990", VA = "0xE20990", Slot = "11")]
		protected virtual void Input(bool value)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xE20A4C", Offset = "0xE20A4C", VA = "0xE20A4C")]
		public SimpleInventory()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public class Slot : MonoBehaviour
	{
		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private GVRI.core.Slot _coreSlot;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float pushForce;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private (UnityEngine.GameObject, ItemInfo) preview;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float previewRotationSpeed;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float previewSizeFactor;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.GameObject previewExtra;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioSource grab;

		[Token(Token = "0x170000C9")]
		public GVRI.core.Slot CoreSlot
		{
			[Token(Token = "0x6000A9F")]
			[Address(RVA = "0xE20FFC", Offset = "0xE20FFC", VA = "0xE20FFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xE20E70", Offset = "0xE20E70", VA = "0xE20E70")]
			set
			{
			}
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xE20A5C", Offset = "0xE20A5C", VA = "0xE20A5C", Slot = "1")]
		~Slot()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xE20B90", Offset = "0xE20B90", VA = "0xE20B90")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xE21104", Offset = "0xE21104", VA = "0xE21104")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xE21004", Offset = "0xE21004", VA = "0xE21004")]
		private void NotifySlotChange(GVRI.core.Slot s)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xE218F0", Offset = "0xE218F0", VA = "0xE218F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xE21A40", Offset = "0xE21A40", VA = "0xE21A40")]
		public void RemovePreviewFromTargets()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xE21230", Offset = "0xE21230", VA = "0xE21230")]
		private UnityEngine.GameObject CreatePreviewCopy(UnityEngine.GameObject original)
		{
			return null;
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xE1F570", Offset = "0xE1F570", VA = "0xE1F570")]
		public bool Store(UnityEngine.GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xE1FC20", Offset = "0xE1FC20", VA = "0xE1FC20")]
		public void Open()
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xE1FC44", Offset = "0xE1FC44", VA = "0xE1FC44")]
		public void Close()
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xE21E08", Offset = "0xE21E08", VA = "0xE21E08")]
		public Slot()
		{
		}
	}
}
namespace GVRI.core
{
	[Token(Token = "0x2000273")]
	public class Inventory
	{
		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HashSet<Slot> slots;

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xE21E8C", Offset = "0xE21E8C", VA = "0xE21E8C", Slot = "4")]
		public virtual Slot FindSlotWithItem(ItemInfo itemInfo)
		{
			return null;
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xE1F860", Offset = "0xE1F860", VA = "0xE1F860")]
		public Inventory()
		{
		}
	}
	[Token(Token = "0x2000274")]
	[CreateAssetMenu(fileName = "ItemInfo", menuName = "Inventory/ItemInfo")]
	public class ItemInfo : ScriptableObject
	{
		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject prefab;

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xE22020", Offset = "0xE22020", VA = "0xE22020")]
		public ItemInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000275")]
	public class Slot
	{
		[Token(Token = "0x2000276")]
		public delegate void notifyNewItemCount(Slot slot);

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<notifyNewItemCount> subscribers;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ItemInfo _itemInfo;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private uint _itemCount;

		[Token(Token = "0x170000CA")]
		public ItemInfo ItemInfo
		{
			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0xE22028", Offset = "0xE22028", VA = "0xE22028")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0xE22030", Offset = "0xE22030", VA = "0xE22030")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public uint ItemCount
		{
			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0xE2234C", Offset = "0xE2234C", VA = "0xE2234C")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xE22354", Offset = "0xE22354", VA = "0xE22354")]
			set
			{
			}
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xE20CC4", Offset = "0xE20CC4", VA = "0xE20CC4")]
		public Slot()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xE21D3C", Offset = "0xE21D3C", VA = "0xE21D3C")]
		public uint Add(ItemInfo itemInfo, uint count)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xE22400", Offset = "0xE22400", VA = "0xE22400")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xE1EEA0", Offset = "0xE1EEA0", VA = "0xE1EEA0")]
		public uint Remove(uint count)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xE22128", Offset = "0xE22128", VA = "0xE22128")]
		private void NotifySubscribers()
		{
		}
	}
}
namespace TheTide.utils
{
	[Token(Token = "0x2000278")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(MeshFilter))]
	public class SerializeMesh : MonoBehaviour
	{
		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private UnityEngine.Vector2[] uv;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		private UnityEngine.Vector3[] verticies;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		private int[] triangles;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		private bool serialized;

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xE224CC", Offset = "0xE224CC", VA = "0xE224CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xE225F4", Offset = "0xE225F4", VA = "0xE225F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xE22604", Offset = "0xE22604", VA = "0xE22604")]
		public void Serialize()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xE2254C", Offset = "0xE2254C", VA = "0xE2254C")]
		public Mesh Rebuild()
		{
			return null;
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xE226C0", Offset = "0xE226C0", VA = "0xE226C0")]
		public SerializeMesh()
		{
		}
	}
}
namespace ChristopherCreates.SmoothSave
{
	[Serializable]
	[Token(Token = "0x2000279")]
	public class SmoothSaveDataPool
	{
		[NonSerialized]
		[Token(Token = "0x4000E68")]
		private const string FileNameBase = "SmoothSave";

		[NonSerialized]
		[Token(Token = "0x4000E69")]
		private const int FileIdStringSize = 4;

		[NonSerialized]
		[Token(Token = "0x4000E6A")]
		private const int PlayerPrefsSearchSize = 10;

		[Token(Token = "0x170000CC")]
		public int Id
		{
			[Token(Token = "0x6000AC2")]
			[Address(RVA = "0xE226C8", Offset = "0xE226C8", VA = "0xE226C8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0xE226D0", Offset = "0xE226D0", VA = "0xE226D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public List<SmoothSaveDataSource> DataSources
		{
			[Token(Token = "0x6000AC4")]
			[Address(RVA = "0xE226D8", Offset = "0xE226D8", VA = "0xE226D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0xE226E0", Offset = "0xE226E0", VA = "0xE226E0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public string FilePath
		{
			[Token(Token = "0x6000AC6")]
			[Address(RVA = "0xE226E8", Offset = "0xE226E8", VA = "0xE226E8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0xE226F0", Offset = "0xE226F0", VA = "0xE226F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public string Name
		{
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0xE226F8", Offset = "0xE226F8", VA = "0xE226F8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0xE22700", Offset = "0xE22700", VA = "0xE22700")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xE22708", Offset = "0xE22708", VA = "0xE22708")]
		public SmoothSaveDataPool()
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xE22710", Offset = "0xE22710", VA = "0xE22710")]
		public SmoothSaveDataPool([Optional] string name)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xE231C4", Offset = "0xE231C4", VA = "0xE231C4")]
		public SmoothSaveDataPool(int id, bool ignoreEmpty = false)
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xE23AEC", Offset = "0xE23AEC", VA = "0xE23AEC")]
		public static int FindFirstFileId()
		{
			return default(int);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xE2285C", Offset = "0xE2285C", VA = "0xE2285C")]
		private static int GetNewId()
		{
			return default(int);
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xE229D0", Offset = "0xE229D0", VA = "0xE229D0")]
		public static string GetFilePath(int id)
		{
			return null;
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xE22B30", Offset = "0xE22B30", VA = "0xE22B30")]
		public bool Save(bool ignoreEmpty = false)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x200027A")]
	public class SmoothSaveDataSource
	{
		[NonSerialized]
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NamedVariable _fsmVariable;

		[NonSerialized]
		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<VariableType, int> _dataTypeSizes;

		[Token(Token = "0x170000D0")]
		public VariableType FsmVariableType
		{
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0xE23D40", Offset = "0xE23D40", VA = "0xE23D40")]
			[CompilerGenerated]
			get
			{
				return default(VariableType);
			}
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0xE23D48", Offset = "0xE23D48", VA = "0xE23D48")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public string Key
		{
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0xE23D50", Offset = "0xE23D50", VA = "0xE23D50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0xE23D58", Offset = "0xE23D58", VA = "0xE23D58")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public string FsmVariableName
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0xE23D60", Offset = "0xE23D60", VA = "0xE23D60")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0xE23D68", Offset = "0xE23D68", VA = "0xE23D68")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public bool IsGlobal
		{
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0xE23D70", Offset = "0xE23D70", VA = "0xE23D70")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0xE23D78", Offset = "0xE23D78", VA = "0xE23D78")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public bool IsArray
		{
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0xE23D84", Offset = "0xE23D84", VA = "0xE23D84")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0xE23D8C", Offset = "0xE23D8C", VA = "0xE23D8C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public string SceneName
		{
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0xE23D98", Offset = "0xE23D98", VA = "0xE23D98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0xE23DA0", Offset = "0xE23DA0", VA = "0xE23DA0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public string OwnerName
		{
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xE23DA8", Offset = "0xE23DA8", VA = "0xE23DA8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ADE")]
			[Address(RVA = "0xE23DB0", Offset = "0xE23DB0", VA = "0xE23DB0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public string FsmName
		{
			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0xE23DB8", Offset = "0xE23DB8", VA = "0xE23DB8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xE23DC0", Offset = "0xE23DC0", VA = "0xE23DC0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public object[] SerializedValue
		{
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xE23DC8", Offset = "0xE23DC8", VA = "0xE23DC8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xE23DD0", Offset = "0xE23DD0", VA = "0xE23DD0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xE23DD8", Offset = "0xE23DD8", VA = "0xE23DD8")]
		public SmoothSaveDataSource()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xE23DE0", Offset = "0xE23DE0", VA = "0xE23DE0")]
		public SmoothSaveDataSource(NamedVariable fsmVariable, string key, bool isGlobal, Fsm fsm)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xE247FC", Offset = "0xE247FC", VA = "0xE247FC")]
		public bool MatchSignature(SmoothSaveDataSource dataSource, bool logMismatch = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xE24A5C", Offset = "0xE24A5C", VA = "0xE24A5C")]
		public void SetFsmVariable(SmoothSaveDataSource dataSource)
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xE24C08", Offset = "0xE24C08", VA = "0xE24C08")]
		public NamedVariable GetFsmVariable()
		{
			return null;
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xE245E0", Offset = "0xE245E0", VA = "0xE245E0")]
		public void Serialize()
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0xE24C10", Offset = "0xE24C10", VA = "0xE24C10")]
		private object[] BreakValue(object value)
		{
			return null;
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xE252A4", Offset = "0xE252A4", VA = "0xE252A4")]
		public object Deserialize()
		{
			return null;
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xE25808", Offset = "0xE25808", VA = "0xE25808")]
		private object MakeValue(object[] parts)
		{
			return null;
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xE24588", Offset = "0xE24588", VA = "0xE24588")]
		private static string StringEmptyToNull(string target)
		{
			return null;
		}
	}
	[Token(Token = "0x200027C")]
	public static class GameObjectPropertyTag
	{
		[Token(Token = "0x4000E78")]
		public const string Active = ":SSGOactiveSelf";

		[Token(Token = "0x4000E79")]
		public const string Layer = ":SSGOlayer";

		[Token(Token = "0x4000E7A")]
		public const string Name = ":SSGOname";

		[Token(Token = "0x4000E7B")]
		public const string Tag = ":SSGOtag";

		[Token(Token = "0x4000E7C")]
		public const string Position = ":SSGOtransform.position";

		[Token(Token = "0x4000E7D")]
		public const string Rotation = ":SSGOtransform.rotation";

		[Token(Token = "0x4000E7E")]
		public const string Scale = ":SSGOtransform.localScale";
	}
	[Token(Token = "0x200027D")]
	public enum VariableAction
	{
		[Token(Token = "0x4000E80")]
		CopyVariableToPool,
		[Token(Token = "0x4000E81")]
		CopyPoolToVariable
	}
	[Token(Token = "0x200027E")]
	public enum FsmVariableType
	{
		[Token(Token = "0x4000E83")]
		All,
		[Token(Token = "0x4000E84")]
		Bool,
		[Token(Token = "0x4000E85")]
		Color,
		[Token(Token = "0x4000E86")]
		Float,
		[Token(Token = "0x4000E87")]
		GameObject,
		[Token(Token = "0x4000E88")]
		Int,
		[Token(Token = "0x4000E89")]
		Quaternion,
		[Token(Token = "0x4000E8A")]
		Rect,
		[Token(Token = "0x4000E8B")]
		String,
		[Token(Token = "0x4000E8C")]
		Vector2,
		[Token(Token = "0x4000E8D")]
		Vector3,
		[Token(Token = "0x4000E8E")]
		Array,
		[Token(Token = "0x4000E8F")]
		Enum
	}
	[Token(Token = "0x200027F")]
	public enum FileActionResult
	{
		[Token(Token = "0x4000E91")]
		Success,
		[Token(Token = "0x4000E92")]
		NotFound,
		[Token(Token = "0x4000E93")]
		AccessError
	}
}
namespace Whilefun.FPEKit
{
	[Token(Token = "0x2000280")]
	public class FPECore : MonoBehaviour
	{
		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPECore _instance;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("")]
		[SerializeField]
		private UnityEngine.GameObject eventSystemPrefab;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("")]
		private UnityEngine.GameObject interactionManagerPrefab;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("")]
		[SerializeField]
		private UnityEngine.GameObject HUDPrefab;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("")]
		[SerializeField]
		private UnityEngine.GameObject playerPrefab;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("")]
		[SerializeField]
		private UnityEngine.GameObject inputManagerPrefab;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("")]
		[SerializeField]
		private UnityEngine.GameObject saveLoadManagerPrefab;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("")]
		[SerializeField]
		private UnityEngine.GameObject menuPrefab;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool initialized;

		[Token(Token = "0x170000D9")]
		public static FPECore Instance
		{
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0xCBE1D0", Offset = "0xCBE1D0", VA = "0xCBE1D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xCBE218", Offset = "0xCBE218", VA = "0xCBE218")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xCBE988", Offset = "0xCBE988", VA = "0xCBE988")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xCBEA2C", Offset = "0xCBEA2C", VA = "0xCBEA2C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xCBE394", Offset = "0xCBE394", VA = "0xCBE394")]
		private void initialize()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xCBF3A4", Offset = "0xCBF3A4", VA = "0xCBF3A4")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xCBF540", Offset = "0xCBF540", VA = "0xCBF540")]
		public FPECore()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class FPEEventSystem : MonoBehaviour
	{
		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPEEventSystem _instance;

		[Token(Token = "0x170000DA")]
		public static FPEEventSystem Instance
		{
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0xCBF548", Offset = "0xCBF548", VA = "0xCBF548")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xCBF590", Offset = "0xCBF590", VA = "0xCBF590")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xCBF6E4", Offset = "0xCBF6E4", VA = "0xCBF6E4")]
		public FPEEventSystem()
		{
		}
	}
	[Token(Token = "0x2000282")]
	public class FPEInputManager : MonoBehaviour
	{
		[Token(Token = "0x2000283")]
		public enum eFPEInput
		{
			[Token(Token = "0x4000EB0")]
			FPE_INPUT_INTERACT,
			[Token(Token = "0x4000EB1")]
			FPE_INPUT_EXAMINE,
			[Token(Token = "0x4000EB2")]
			FPE_INPUT_ZOOM,
			[Token(Token = "0x4000EB3")]
			FPE_INPUT_CLOSE,
			[Token(Token = "0x4000EB4")]
			FPE_INPUT_PUT_IN_INVENTORY,
			[Token(Token = "0x4000EB5")]
			FPE_INPUT_MENU,
			[Token(Token = "0x4000EB6")]
			FPE_INPUT_MENU_PREVIOUS_TAB,
			[Token(Token = "0x4000EB7")]
			FPE_INPUT_MENU_NEXT_TAB,
			[Token(Token = "0x4000EB8")]
			FPE_INPUT_MENU_PREVIOUS_PAGE,
			[Token(Token = "0x4000EB9")]
			FPE_INPUT_MENU_NEXT_PAGE,
			[Token(Token = "0x4000EBA")]
			FPE_INPUT_MOUSELOOKX,
			[Token(Token = "0x4000EBB")]
			FPE_INPUT_MOUSELOOKY,
			[Token(Token = "0x4000EBC")]
			FPE_INPUT_LOOKX,
			[Token(Token = "0x4000EBD")]
			FPE_INPUT_LOOKY,
			[Token(Token = "0x4000EBE")]
			FPE_INPUT_HORIZONTAL,
			[Token(Token = "0x4000EBF")]
			FPE_INPUT_VERTICAL,
			[Token(Token = "0x4000EC0")]
			FPE_INPUT_JUMP,
			[Token(Token = "0x4000EC1")]
			FPE_INPUT_CROUCH,
			[Token(Token = "0x4000EC2")]
			FPE_INPUT_RUN
		}

		[Token(Token = "0x2000284")]
		public class FPEInputButton
		{
			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int lastPressedFrame;

			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int releasedFrame;

			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private bool pressed;

			[Token(Token = "0x170000E1")]
			public eFPEInput id
			{
				[Token(Token = "0x6000B0F")]
				[Address(RVA = "0xCC1CC0", Offset = "0xCC1CC0", VA = "0xCC1CC0")]
				[CompilerGenerated]
				get
				{
					return default(eFPEInput);
				}
				[Token(Token = "0x6000B10")]
				[Address(RVA = "0xCC1CC8", Offset = "0xCC1CC8", VA = "0xCC1CC8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E2")]
			public string friendlyName
			{
				[Token(Token = "0x6000B11")]
				[Address(RVA = "0xCC1CD0", Offset = "0xCC1CD0", VA = "0xCC1CD0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000B12")]
				[Address(RVA = "0xCC1CD8", Offset = "0xCC1CD8", VA = "0xCC1CD8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E3")]
			public bool GetButton
			{
				[Token(Token = "0x6000B16")]
				[Address(RVA = "0xCC1CE0", Offset = "0xCC1CE0", VA = "0xCC1CE0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000E4")]
			public bool GetButtonDown
			{
				[Token(Token = "0x6000B17")]
				[Address(RVA = "0xCC16D0", Offset = "0xCC16D0", VA = "0xCC16D0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000E5")]
			public bool GetButtonUp
			{
				[Token(Token = "0x6000B18")]
				[Address(RVA = "0xCC1858", Offset = "0xCC1858", VA = "0xCC1858")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xCC01D8", Offset = "0xCC01D8", VA = "0xCC01D8")]
			public FPEInputButton(eFPEInput id, string name)
			{
			}

			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xCC13C8", Offset = "0xCC13C8", VA = "0xCC13C8")]
			public void Pressed()
			{
			}

			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xCC13F4", Offset = "0xCC13F4", VA = "0xCC13F4")]
			public void Released()
			{
			}

			[Token(Token = "0x6000B19")]
			[Address(RVA = "0xCC1B8C", Offset = "0xCC1B8C", VA = "0xCC1B8C")]
			public void Flush()
			{
			}
		}

		[Token(Token = "0x2000285")]
		public class FPEInputAxis
		{
			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float value;

			[Token(Token = "0x170000E6")]
			public eFPEInput id
			{
				[Token(Token = "0x6000B1A")]
				[Address(RVA = "0xCC1CE8", Offset = "0xCC1CE8", VA = "0xCC1CE8")]
				[CompilerGenerated]
				get
				{
					return default(eFPEInput);
				}
				[Token(Token = "0x6000B1B")]
				[Address(RVA = "0xCC1CF0", Offset = "0xCC1CF0", VA = "0xCC1CF0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E7")]
			public string name
			{
				[Token(Token = "0x6000B1C")]
				[Address(RVA = "0xCC1CF8", Offset = "0xCC1CF8", VA = "0xCC1CF8")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000B1D")]
				[Address(RVA = "0xCC1D00", Offset = "0xCC1D00", VA = "0xCC1D00")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000E8")]
			public float GetValue
			{
				[Token(Token = "0x6000B20")]
				[Address(RVA = "0xCC1D10", Offset = "0xCC1D10", VA = "0xCC1D10")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x170000E9")]
			public float GetValueRaw
			{
				[Token(Token = "0x6000B21")]
				[Address(RVA = "0xCC1D18", Offset = "0xCC1D18", VA = "0xCC1D18")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0xCC0218", Offset = "0xCC0218", VA = "0xCC0218")]
			public FPEInputAxis(eFPEInput id, string name)
			{
			}

			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0xCC1D08", Offset = "0xCC1D08", VA = "0xCC1D08")]
			public void Update(float latestValue)
			{
			}
		}

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, Gamepad Y Axis will be flipped for Look")]
		[Header("User Input options")]
		private bool flipGamepadYAxis;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Look sensitivity (basic multiplier)")]
		[SerializeField]
		private UnityEngine.Vector2 lookSensitivity;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float gamepadAnalogStickSensitivityMultplier;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, player look movements will be smoothed")]
		private bool lookSmoothing;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, player look movement sensitivity will be boosted up (by gamepadLookSensitivityBoost)")]
		private bool useGamepad;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("If Use Gamepad is true, gamepad look input is multiplied by this factor.")]
		[SerializeField]
		private float gamepadBoostMultiplier;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float appliedGamepadBoost;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[UnityEngine.Tooltip("If smoothing is on, this factor determines how quickly the mouse slows down. Higher value means snappier look movements.")]
		private float lookSmoothFactor;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[UnityEngine.Tooltip("The absolute value the right stick must meet or exceed before a virtual 'right' button press is captured.")]
		private float rightStickButtonThreshold;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[UnityEngine.Tooltip("The number of seconds before a right stick 'button press' will be repeated if the stick is held left or right in position.")]
		private float rightStickButtonRepeatTime;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float rightStickButtonRepeatCounter;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Deadzone for game pad analog sticks. Any value less than this will be considered 'zero'")]
		[SerializeField]
		private float analogStickDeadzone;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float triggerDeadzone;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float previousLeftTriggerValue;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Dictionary<eFPEInput, FPEInputAxis> FPEVirtualAxes;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Dictionary<eFPEInput, FPEInputButton> FPEVirtualButtons;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPEInputManager _instance;

		[Token(Token = "0x170000DB")]
		public bool LookSmoothing
		{
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0xCBF6EC", Offset = "0xCBF6EC", VA = "0xCBF6EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0xCBF6F4", Offset = "0xCBF6F4", VA = "0xCBF6F4")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public bool UseGamepad
		{
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0xCBF700", Offset = "0xCBF700", VA = "0xCBF700")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0xCBF708", Offset = "0xCBF708", VA = "0xCBF708")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public float LookSmoothFactor
		{
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0xCBF714", Offset = "0xCBF714", VA = "0xCBF714")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000DE")]
		public bool FlipGamepadYAxis
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0xCBF71C", Offset = "0xCBF71C", VA = "0xCBF71C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0xCBF724", Offset = "0xCBF724", VA = "0xCBF724")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public UnityEngine.Vector2 LookSensitivity
		{
			[Token(Token = "0x6000B02")]
			[Address(RVA = "0xCBF730", Offset = "0xCBF730", VA = "0xCBF730")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6000B03")]
			[Address(RVA = "0xCBF738", Offset = "0xCBF738", VA = "0xCBF738")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public static FPEInputManager Instance
		{
			[Token(Token = "0x6000B04")]
			[Address(RVA = "0xCBF740", Offset = "0xCBF740", VA = "0xCBF740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xCBF788", Offset = "0xCBF788", VA = "0xCBF788")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xCC0250", Offset = "0xCC0250", VA = "0xCC0250")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xCC0254", Offset = "0xCC0254", VA = "0xCC0254")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xCC1414", Offset = "0xCC1414", VA = "0xCC1414")]
		public bool GetButton(eFPEInput buttonID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xCC156C", Offset = "0xCC156C", VA = "0xCC156C")]
		public bool GetButtonDown(eFPEInput buttonID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xCC16F4", Offset = "0xCC16F4", VA = "0xCC16F4")]
		public bool GetButtonUp(eFPEInput buttonID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xCC187C", Offset = "0xCC187C", VA = "0xCC187C")]
		public float GetAxis(eFPEInput axisID)
		{
			return default(float);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xCC19CC", Offset = "0xCC19CC", VA = "0xCC19CC")]
		public float GetAxisRaw(eFPEInput axisID)
		{
			return default(float);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xCC1B1C", Offset = "0xCC1B1C", VA = "0xCC1B1C")]
		public void FlushInputs()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xCC1BAC", Offset = "0xCC1BAC", VA = "0xCC1BAC")]
		public FPEInputManager()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public class FPEInteractionManagerScript : MonoBehaviour
	{
		[Token(Token = "0x2000287")]
		public enum eInteractionState
		{
			[Token(Token = "0x4000F08")]
			FREE,
			[Token(Token = "0x4000F09")]
			IN_MENU,
			[Token(Token = "0x4000F0A")]
			SUSPENDED
		}

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPEInteractionManagerScript _instance;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("When examining an object, it will only rotate if axis input is greater than this deadzone value. Default is 0.1.")]
		[Header("Examination Options")]
		public float examinationDeadzone;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("When examining an object, this value acts as a multiplier to Input Mouse X/Y values. Default is 150.")]
		public float examineRotationSpeed;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Custom Journal Cursor. Note: Only works when using Unity 5+")]
		public Texture2D journalCursor;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Special Interaction Masks")]
		[UnityEngine.Tooltip("This should be assigned to FPEPutbackObjects layer")]
		public LayerMask putbackLayerMask;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("This should be assigned to be mixed to include everything except the FPEPutbackObjects and FPEIgnore layers")]
		public LayerMask interactionLayerMask;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float interactionRange;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Sprite[] currentJournalPages;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int currentJournalPageIndex;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool playingAudioDiary;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool audioDiaryPlaybackIsReplay;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string currentDiaryTitle;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.GameObject currentAudioDiary;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityEngine.GameObject currentInteractableObject;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.GameObject currentHeldObject;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.GameObject currentPutbackObject;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UnityEngine.GameObject interactionObjectPickupLocation;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.GameObject interactionObjectExamineLocation;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityEngine.GameObject interactionObjectTossLocation;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.GameObject interactionInventoryLocation;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.GameObject audioDiaryPlayer;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.GameObject secondaryInteractionSoundPlayer;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private UnityEngine.GameObject journalSFXPlayer;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.GameObject genericSFXPlayer;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool examiningObject;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[UnityEngine.Tooltip("This is the FOV the camera will use when player Right-Clicks to zoom in. Un-zoomed FOV is set to be that of Main Camera when scene starts. If you change FOV in Main Camera, also change it in ExaminationCamera.")]
		[Header("Mouse Zoom and Sensitivity Options")]
		public float zoomedFOV;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float unZoomedFOV;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool cameraZoomedIn;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float cameraZoomChangeRate;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[UnityEngine.Tooltip("Zoomed mouse sensitivity multiplier (e.g. 0.5 would be half as fast)")]
		public float zoomedMouseSensitivityMultiplier;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UnityEngine.Vector2 zoomedMouseSensitivity;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[UnityEngine.Tooltip("Apply special mouse sensitivity when reticle is over an interactable object")]
		public bool slowMouseOnInteractableObjectHighlight;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[UnityEngine.Tooltip("Mouse sensitivity when reticle is over an interactable object (0.5 would be half as sensitive)")]
		public float highlightedMouseSensitivityMultiplier;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private UnityEngine.Vector2 highlightedMouseSensitivity;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private UnityEngine.Vector2 startingMouseSensitivity;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private UnityEngine.Vector2 targetMouseSensitivity;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool smoothMouseChange;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float smoothMouseChangeRate;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private UnityEngine.GameObject thePlayer;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool mouseLookEnabled;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private UnityEngine.Quaternion lastObjectHeldRotation;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float tossImpulseFactor;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("The sounds journals make when used. Use 2D sounds for best effect.")]
		public AudioClip journalOpen;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AudioClip journalClose;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AudioClip journalPageTurn;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private UnityEngine.GameObject currentJournal;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private UnityEngine.GameObject currentDock;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Header("Other generic sound effects. Use 2D sounds for best effect.")]
		public AudioClip inventoryPickup;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public AudioClip noteAdded;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[UnityEngine.Tooltip("Volume fade out amount per 100ms (0.0 to 1.0, with 1.0 being 100% of the volume)")]
		public float fadeAmountPerTenthSecond;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private bool fadingDiaryAudio;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float fadeCounter;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private bool dockingInProgress;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private FPEFirstPersonController.ePlayerDockingState currentDockActionType;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private bool playerSuspendedForSaveLoad;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private FPEInventoryManagerScript inventoryManager;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private FPEHUD myHUD;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private FPEHUDData myHUDData;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private eInteractionState currentInteractionState;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private bool initialized;

		[Token(Token = "0x170000EA")]
		public static FPEInteractionManagerScript Instance
		{
			[Token(Token = "0x6000B22")]
			[Address(RVA = "0xCC1D20", Offset = "0xCC1D20", VA = "0xCC1D20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		public bool PlayerSuspendedForSaveLoad
		{
			[Token(Token = "0x6000B23")]
			[Address(RVA = "0xCC1D68", Offset = "0xCC1D68", VA = "0xCC1D68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xCC1D70", Offset = "0xCC1D70", VA = "0xCC1D70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xCC1EC4", Offset = "0xCC1EC4", VA = "0xCC1EC4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xCBEAD0", Offset = "0xCBEAD0", VA = "0xCBEAD0")]
		public void initialize()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xCC20D0", Offset = "0xCC20D0", VA = "0xCC20D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xCC697C", Offset = "0xCC697C", VA = "0xCC697C")]
		public void playNewAudioDiary(UnityEngine.GameObject diary)
		{
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xCC6D38", Offset = "0xCC6D38", VA = "0xCC6D38")]
		public void playAudioDiaryEntry(FPEAudioDiaryEntry diaryEntry, bool isReplay = true)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xCC6ECC", Offset = "0xCC6ECC", VA = "0xCC6ECC")]
		public void stopAllDiaryPlayback()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xCC6FD8", Offset = "0xCC6FD8", VA = "0xCC6FD8")]
		public void playSecondaryInteractionAudio(AudioClip secondaryClip, bool playAsAudioDiary, string audioLogText = "")
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xCC71AC", Offset = "0xCC71AC", VA = "0xCC71AC")]
		public void stopSecondaryInteractionAudio()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xCC61CC", Offset = "0xCC61CC", VA = "0xCC61CC")]
		public void hideAudioDiaryTitle()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xCC58F8", Offset = "0xCC58F8", VA = "0xCC58F8")]
		public void openJournal()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xCC7208", Offset = "0xCC7208", VA = "0xCC7208")]
		public void nextJournalPage()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xCC7330", Offset = "0xCC7330", VA = "0xCC7330")]
		public void previousJournalPage()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xCC1F4C", Offset = "0xCC1F4C", VA = "0xCC1F4C")]
		public void closeJournal(bool playSound = true)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xCC6000", Offset = "0xCC6000", VA = "0xCC6000")]
		public void openMenu()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xCC4508", Offset = "0xCC4508", VA = "0xCC4508")]
		public void closeMenu()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xCC56D8", Offset = "0xCC56D8", VA = "0xCC56D8")]
		private void moveObjectToPlayersHand(UnityEngine.GameObject go)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xCC5C40", Offset = "0xCC5C40", VA = "0xCC5C40")]
		public void putObjectIntoInventory(FPEInteractableInventoryItemScript item, bool playSound = true)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xCC7588", Offset = "0xCC7588", VA = "0xCC7588")]
		public void dropObjectFromInventory(FPEInteractableInventoryItemScript itemToDrop)
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xCC7674", Offset = "0xCC7674", VA = "0xCC7674")]
		public void holdObjectFromGameLoad(FPEInteractablePickupScript itemToHold)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xCC76A0", Offset = "0xCC76A0", VA = "0xCC76A0")]
		public void holdObjectFromInventory(FPEInteractableInventoryItemScript itemToHold)
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xCC7924", Offset = "0xCC7924", VA = "0xCC7924")]
		public void consumeObjectFromInventory(FPEInteractableInventoryItemScript itemToConsume)
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xCC534C", Offset = "0xCC534C", VA = "0xCC534C")]
		public void tossObject(FPEInteractablePickupScript pickup)
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xCC7884", Offset = "0xCC7884", VA = "0xCC7884")]
		public FPEInteractableBaseScript.eInteractionType getHeldObjectType()
		{
			return default(FPEInteractableBaseScript.eInteractionType);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xCC7A98", Offset = "0xCC7A98", VA = "0xCC7A98")]
		public UnityEngine.GameObject getHeldObject()
		{
			return null;
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xCC464C", Offset = "0xCC464C", VA = "0xCC464C")]
		private void retrieveNote(UnityEngine.GameObject interactableObject)
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xCC4804", Offset = "0xCC4804", VA = "0xCC4804")]
		private void retrievePassiveAudioDiary(UnityEngine.GameObject interactableObject, bool wasInteractedWith)
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xCC4F08", Offset = "0xCC4F08", VA = "0xCC4F08")]
		private void attemptActivation(UnityEngine.GameObject objectToActivate)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xCC7AA0", Offset = "0xCC7AA0", VA = "0xCC7AA0")]
		private void showNotification(string message)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xCC4A80", Offset = "0xCC4A80", VA = "0xCC4A80")]
		private void updateObjectHighlights()
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xCC6208", Offset = "0xCC6208", VA = "0xCC6208")]
		private void refreshHUDData()
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xCC81DC", Offset = "0xCC81DC", VA = "0xCC81DC")]
		public FPEHUDData GetHUDData()
		{
			return null;
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xCC81E4", Offset = "0xCC81E4", VA = "0xCC81E4")]
		public string[] FetchCurrentInteractionDebugData()
		{
			return null;
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xCC20A8", Offset = "0xCC20A8", VA = "0xCC20A8")]
		private void setCursorVisibility(bool visible)
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xCC863C", Offset = "0xCC863C", VA = "0xCC863C")]
		private void setCursorTexture(Texture2D cursorTex)
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xCC61B4", Offset = "0xCC61B4", VA = "0xCC61B4")]
		public void unhideAllUI()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xCC8694", Offset = "0xCC8694", VA = "0xCC8694")]
		private void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xCC86D4", Offset = "0xCC86D4", VA = "0xCC86D4")]
		public void BeginCutscene(bool showCursor = false)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xCC878C", Offset = "0xCC878C", VA = "0xCC878C")]
		public void EndCutscene(bool hideCursor = false)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xCC7448", Offset = "0xCC7448", VA = "0xCC7448")]
		private void setInteractionState(eInteractionState newState)
		{
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xCC1EC8", Offset = "0xCC1EC8", VA = "0xCC1EC8")]
		private void rememberStartingMouseSensitivity()
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xCC1F24", Offset = "0xCC1F24", VA = "0xCC1F24")]
		public void refreshAlternateMouseSensitivities()
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xCC4A14", Offset = "0xCC4A14", VA = "0xCC4A14")]
		private void setMouseSensitivity(UnityEngine.Vector2 sensitivity)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xCC4E84", Offset = "0xCC4E84", VA = "0xCC4E84")]
		private void restorePreviousMouseSensitivity(bool smoothTransition)
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xCC8838", Offset = "0xCC8838", VA = "0xCC8838")]
		public void changeMouseSensitivityFromMenu(float sensitivity)
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xCC5AC0", Offset = "0xCC5AC0", VA = "0xCC5AC0")]
		private void disableMouseLook()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xCC5B7C", Offset = "0xCC5B7C", VA = "0xCC5B7C")]
		private void enableMouseLook()
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xCC5B20", Offset = "0xCC5B20", VA = "0xCC5B20")]
		private void disableMovement()
		{
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xCC5BE0", Offset = "0xCC5BE0", VA = "0xCC5BE0")]
		private void enableMovement()
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xCC88E0", Offset = "0xCC88E0", VA = "0xCC88E0")]
		public bool isMouseLookEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xCC5258", Offset = "0xCC5258", VA = "0xCC5258")]
		private void DockPlayer(FPEInteractableDockScript dock)
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xCC5F5C", Offset = "0xCC5F5C", VA = "0xCC5F5C")]
		private void UnDockPlayer(bool smoothDock = false)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xCC6150", Offset = "0xCC6150", VA = "0xCC6150")]
		private bool dockingCompleted()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xCC8C78", Offset = "0xCC8C78", VA = "0xCC8C78")]
		public UnityEngine.GameObject getCurrentDockForSaveGame()
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xCC8C80", Offset = "0xCC8C80", VA = "0xCC8C80")]
		public void restoreCurrentDockFromSavedGame(UnityEngine.GameObject cd)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xCC8CA0", Offset = "0xCC8CA0", VA = "0xCC8CA0")]
		public void RestrictPlayerLookFromCurrentView(UnityEngine.Vector2 angles)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xCC8D6C", Offset = "0xCC8D6C", VA = "0xCC8D6C")]
		public void FreePlayerLookFromCurrentViewRestrictions()
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xCBF494", Offset = "0xCBF494", VA = "0xCBF494")]
		public void suspendPlayerAndInteraction()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xCC8DD0", Offset = "0xCC8DD0", VA = "0xCC8DD0")]
		public void resumePlayerAndInteraction(bool resetLook)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xCC9030", Offset = "0xCC9030", VA = "0xCC9030")]
		public void resetPlayerOnReturnToMainMenu()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xCC9118", Offset = "0xCC9118", VA = "0xCC9118")]
		public FPEInteractionManagerScript()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public class FPEInventoryManagerScript : MonoBehaviour
	{
		[Token(Token = "0x2000289")]
		public enum eInventoryItems
		{
			[Token(Token = "0x4000F11")]
			KEYCARD,
			[Token(Token = "0x4000F12")]
			BATTERY,
			[Token(Token = "0x4000F13")]
			PUZZLEBALL,
			[Token(Token = "0x4000F14")]
			APPLE,
			[Token(Token = "0x4000F15")]
			COLLECTIBLE,
			[Token(Token = "0x4000F16")]
			SIMPLEKEY
		}

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<FPEInteractableInventoryItemScript> inventoryItems;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] inventoryQuantities;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<FPEAudioDiaryEntry> audioDiaries;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<FPENoteEntry> notes;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPEInventoryManagerScript _instance;

		[Token(Token = "0x170000EC")]
		public static FPEInventoryManagerScript Instance
		{
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0xCC9250", Offset = "0xCC9250", VA = "0xCC9250")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xCC9298", Offset = "0xCC9298", VA = "0xCC9298")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xCC7B80", Offset = "0xCC7B80", VA = "0xCC7B80")]
		public int inventoryQuantity(eInventoryItems itemToCheck)
		{
			return default(int);
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xCC7BB0", Offset = "0xCC7BB0", VA = "0xCC7BB0")]
		public void destroyInventoryItemsOfType(eInventoryItems itemType, int quantity)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xCC7470", Offset = "0xCC7470", VA = "0xCC7470")]
		public bool addInventoryItem(FPEInteractableInventoryItemScript item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xCC9598", Offset = "0xCC9598", VA = "0xCC9598")]
		private FPEInteractableInventoryItemScript removeInventoryItem(int instanceIDToRemove)
		{
			return null;
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xCC97A8", Offset = "0xCC97A8", VA = "0xCC97A8")]
		public int dropItemFromInventory(int instanceIDToDrop)
		{
			return default(int);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xCC992C", Offset = "0xCC992C", VA = "0xCC992C")]
		public int holdItemFromInventory(int instanceIDToHold)
		{
			return default(int);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xCC9AB0", Offset = "0xCC9AB0", VA = "0xCC9AB0")]
		public int consumeItemFromInventory(int instanceIDToConsume)
		{
			return default(int);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xCC9C34", Offset = "0xCC9C34", VA = "0xCC9C34")]
		public FPEInventoryItemData[] getInventoryData()
		{
			return null;
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xCC9F2C", Offset = "0xCC9F2C", VA = "0xCC9F2C")]
		private void sortInventory()
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xCC6C78", Offset = "0xCC6C78", VA = "0xCC6C78")]
		public void addAudioDiaryEntry(FPEAudioDiaryEntry diary)
		{
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xCCA034", Offset = "0xCCA034", VA = "0xCCA034")]
		public FPEAudioDiaryData[] getAudioDiaryData()
		{
			return null;
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xCCA188", Offset = "0xCCA188", VA = "0xCCA188")]
		public void playbackAudioDiary(int diaryIndex)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xCCA2EC", Offset = "0xCCA2EC", VA = "0xCCA2EC")]
		public void stopAllDiaryPlayback()
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xCC7AC0", Offset = "0xCC7AC0", VA = "0xCC7AC0")]
		public void addNoteEntry(FPENoteEntry note)
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xCCA334", Offset = "0xCCA334", VA = "0xCCA334")]
		public FPENoteData[] getNoteData()
		{
			return null;
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xCCA4B4", Offset = "0xCCA4B4", VA = "0xCCA4B4")]
		public List<FPEInteractableInventoryItemScript> getInventoryItems()
		{
			return null;
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xCCA4BC", Offset = "0xCCA4BC", VA = "0xCCA4BC")]
		public void setInventoryItems(List<FPEInteractableInventoryItemScript> items)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xCCA4C4", Offset = "0xCCA4C4", VA = "0xCCA4C4")]
		public int[] getInventoryQuantities()
		{
			return null;
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xCCA4CC", Offset = "0xCCA4CC", VA = "0xCCA4CC")]
		public void setInventoryQuantities(int[] quantities)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xCCA4D4", Offset = "0xCCA4D4", VA = "0xCCA4D4")]
		public FPENoteEntry[] getNoteDataForSavedGame()
		{
			return null;
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xCCA524", Offset = "0xCCA524", VA = "0xCCA524")]
		public void setNoteDataFromSavedGame(List<FPENoteEntry> loadedNotes)
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xCCA52C", Offset = "0xCCA52C", VA = "0xCCA52C")]
		public FPEAudioDiaryEntry[] getAudioDiaryDataForSavedGame()
		{
			return null;
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xCCA57C", Offset = "0xCCA57C", VA = "0xCCA57C")]
		public void setAudioDiaryDataFromSavedGame(List<FPEAudioDiaryEntry> loadedAudioDiaries)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xCCA584", Offset = "0xCCA584", VA = "0xCCA584")]
		public void clearInventoryItems()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xCCA78C", Offset = "0xCCA78C", VA = "0xCCA78C")]
		public void clearAudioDiariesAndNotes()
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xCCA834", Offset = "0xCCA834", VA = "0xCCA834")]
		public FPEInventoryManagerScript()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class FPEPlayer : MonoBehaviour
	{
		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPEPlayer _instance;

		[Token(Token = "0x170000ED")]
		public static FPEPlayer Instance
		{
			[Token(Token = "0x6000B80")]
			[Address(RVA = "0xCCA944", Offset = "0xCCA944", VA = "0xCCA944")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xCCA98C", Offset = "0xCCA98C", VA = "0xCCA98C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xCCAAE0", Offset = "0xCCAAE0", VA = "0xCCAAE0")]
		public FPEPlayer()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[RequireComponent(typeof(CharacterController))]
	[RequireComponent(typeof(AudioSource))]
	[RequireComponent(typeof(FPEMouseLook))]
	public class FPEFirstPersonController : MonoBehaviour
	{
		[Token(Token = "0x200028D")]
		public enum ePlayerDockingState
		{
			[Token(Token = "0x4000F5A")]
			IDLE,
			[Token(Token = "0x4000F5B")]
			DOCKING,
			[Token(Token = "0x4000F5C")]
			UNDOCKING
		}

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Movement Speeds")]
		[SerializeField]
		private float m_WalkSpeedCrouching;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_RunSpeedCrouching;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_WalkSpeedStanding;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_RunSpeedStanding;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isWalking;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Header("Movement Stride Sizes (For Audio)")]
		private float walkStepLengthCrouching;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float runStepLengthCrouching;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float walkStepLengthStanding;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float runStepLengthStanding;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Header("Jumping")]
		private float m_JumpSpeed;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[UnityEngine.Tooltip("Minimum downward speed required before player is considered to have landed from a jump or fall. Default is -1;")]
		private float minimumFallSpeed;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float cumulativeStepCycleCount;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float nextStepInCycle;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private float stepInterval;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Header("View Bob")]
		private bool cameraBobEnabled;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private FPELerpControlledBob m_JumpBob;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AnimationCurve CameraBobCurve;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private UnityEngine.Vector2 bobRangeStanding;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private UnityEngine.Vector2 bobRangeCrouching;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Header("Audio")]
		private FPESoundBank footstepSounds;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private FPESoundBank jumpSounds;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private FPESoundBank landingSounds;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera m_Camera;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool m_Jump;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float m_YRotation;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.Vector2 m_Input;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Vector3 m_MoveDir;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		private bool m_Jumping;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioSource m_AudioSource;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool isCrouching;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float standingHeight;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float crouchingHeight;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float previousCharacterHeight;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float characterCrouchDivisor;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private CharacterController controller;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private UnityEngine.Vector3 cameraOffsetStanding;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private UnityEngine.Vector3 cameraOffsetCrouching;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float bobCurveTime;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float bobCycleX;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float bobCycleY;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private bool movementEnabled;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float currentSpeed;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private bool movementStarted;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
		[UnityEngine.Tooltip("Toggle movement sounds on and off")]
		[Header("Custom Flags for Movement Options")]
		public bool enableMovementSounds;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x126")]
		[SerializeField]
		[UnityEngine.Tooltip("Toggle jump ability on and off")]
		private bool jumpEnabled;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x127")]
		[UnityEngine.Tooltip("Toggle run ability on and off")]
		[SerializeField]
		private bool runEnabled;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		[UnityEngine.Tooltip("Toggle crouch ability on and off")]
		private bool crouchEnabled;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, crouch will be a toggle")]
		private bool crouchAsToggle;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[UnityEngine.Tooltip("Distance at which the player will stop moving and snap to dock and undock positions")]
		[SerializeField]
		private float dockSnapDistance;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[UnityEngine.Tooltip("Rate at which the player will smoothly move to dock and undock positions (larger number means quicker movement)")]
		[SerializeField]
		private float dockingLerpFactor;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private bool playerDocked;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private ePlayerDockingState currentDockingState;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private UnityEngine.Vector2 targetMaxAngles;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private UnityEngine.Vector3 targetFocalPoint;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private UnityEngine.Vector3 targetDockPosition;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private UnityEngine.Vector3 previousFocalPoint;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private UnityEngine.Vector3 previousWorldPosition;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public bool playerFrozen;

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xCCAAE8", Offset = "0xCCAAE8", VA = "0xCCAAE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xCCAC20", Offset = "0xCCAC20", VA = "0xCCAC20")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xCCAD8C", Offset = "0xCCAD8C", VA = "0xCCAD8C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xCCB738", Offset = "0xCCB738", VA = "0xCCB738")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xCCC220", Offset = "0xCCC220", VA = "0xCCC220")]
		private void UpdateCameraPosition(float speed)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xCCC080", Offset = "0xCCC080", VA = "0xCCC080")]
		private void PlayJumpSound()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xCCB59C", Offset = "0xCCB59C", VA = "0xCCB59C")]
		private void PlayLandingSound()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xCCC0B8", Offset = "0xCCC0B8", VA = "0xCCC0B8")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xCCB6E4", Offset = "0xCCB6E4", VA = "0xCCB6E4")]
		private void PlayFootStepAudio()
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xCCBE90", Offset = "0xCCBE90", VA = "0xCCBE90")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xCCBDFC", Offset = "0xCCBDFC", VA = "0xCCBDFC")]
		private void RotateView()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xCCC9B0", Offset = "0xCCC9B0", VA = "0xCCC9B0")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xCCB5F4", Offset = "0xCCB5F4", VA = "0xCCB5F4")]
		private bool haveHeadRoomToStand()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xCC88E8", Offset = "0xCC88E8", VA = "0xCC88E8")]
		public void dockThePlayer(Transform dockTransform, UnityEngine.Vector2 maxAngleFromFocalPoint, UnityEngine.Vector3 focalPoint, bool smoothDock = false)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xCC8B18", Offset = "0xCC8B18", VA = "0xCC8B18")]
		public void unDockThePlayer(bool smoothUndock = false)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xCCCAD4", Offset = "0xCCCAD4", VA = "0xCCCAD4")]
		public UnityEngine.Vector3 GetCurrentPlayerFocalPoint()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xCC88D4", Offset = "0xCC88D4", VA = "0xCC88D4")]
		public void enableMovement()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xCC88CC", Offset = "0xCC88CC", VA = "0xCC88CC")]
		public void disableMovement()
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xCCCB58", Offset = "0xCCCB58", VA = "0xCCCB58")]
		public void enableRun()
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xCCCB64", Offset = "0xCCCB64", VA = "0xCCCB64")]
		public void disableRun()
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xCCCB6C", Offset = "0xCCCB6C", VA = "0xCCCB6C")]
		public void enableJump()
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xCCCB78", Offset = "0xCCCB78", VA = "0xCCCB78")]
		public void disableJump()
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xCCCB80", Offset = "0xCCCB80", VA = "0xCCCB80")]
		public void enableCrouch()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xCCCB8C", Offset = "0xCCCB8C", VA = "0xCCCB8C")]
		public void disableCrouch()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xCC8C68", Offset = "0xCC8C68", VA = "0xCC8C68")]
		public bool dockInProgress()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xCCCB94", Offset = "0xCCCB94", VA = "0xCCCB94")]
		public void forcePlayerLookToPosition(UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xCCCC50", Offset = "0xCCCC50", VA = "0xCCCC50")]
		public FPEPlayerStateSaveData getPlayerStateDataForSavedGame()
		{
			return null;
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xCCCE50", Offset = "0xCCCE50", VA = "0xCCCE50")]
		public void restorePlayerStateFromSavedGame(FPEPlayerStateSaveData data)
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xCC8ED4", Offset = "0xCC8ED4", VA = "0xCC8ED4")]
		public void setPlayerLookToNeutralLevelLoadedPosition()
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xCC90AC", Offset = "0xCC90AC", VA = "0xCC90AC")]
		public void resetPlayerForMainMenu()
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xCCD30C", Offset = "0xCCD30C", VA = "0xCCD30C")]
		public FPEFirstPersonController()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class FPEMouseLook : MonoBehaviour
	{
		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Quaternion m_CharacterTargetRot;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Quaternion m_CameraTargetRot;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Custom Flags")]
		[UnityEngine.Tooltip("Toggle mouse look on and off")]
		public bool enableMouseLook;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		private bool restrictLook;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector2 lookRestrictionAngles;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Vector2 rotationSum;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityEngine.Vector2 lastRotationChanges;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FPEInputManager inputManager;

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xCCAD3C", Offset = "0xCCAD3C", VA = "0xCCAD3C")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xCCD730", Offset = "0xCCD730", VA = "0xCCD730")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xCCC5C4", Offset = "0xCCC5C4", VA = "0xCCC5C4")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xCCD820", Offset = "0xCCD820", VA = "0xCCD820")]
		private UnityEngine.Quaternion ClampRotationAroundXAxis(UnityEngine.Quaternion q)
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xCCB3E8", Offset = "0xCCB3E8", VA = "0xCCB3E8")]
		public void LookAtPosition(Transform character, Transform camera, UnityEngine.Vector3 focalPoint)
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xCC8D10", Offset = "0xCC8D10", VA = "0xCC8D10")]
		public void enableLookRestriction(UnityEngine.Vector2 maxAnglesFromOrigin)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xCC8DC8", Offset = "0xCC8DC8", VA = "0xCC8DC8")]
		public void disableLookRestriction()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xCCD884", Offset = "0xCCD884", VA = "0xCCD884")]
		public FPEMouseLook()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028F")]
	public class FPECurveControlledBob
	{
		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Header("Standing")]
		private float HorizontalBobRangeStanding;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private float VerticalBobRangeStanding;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float VerticalToHorizontalRatioStanding;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Header("Crouching")]
		private float HorizontalBobRangeCrouching;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float VerticalBobRangeCrouching;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float VerticalToHorizontalRatioCrouching;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("General")]
		[SerializeField]
		private AnimationCurve Bobcurve;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_CyclePositionX;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_CyclePositionY;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_BobBaseInterval;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xCCD908", Offset = "0xCCD908", VA = "0xCCD908")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xCCD984", Offset = "0xCCD984", VA = "0xCCD984")]
		public UnityEngine.Vector3 DoHeadBob(float speed, bool isCrouching, UnityEngine.Vector3 basePosition)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xCCDAB0", Offset = "0xCCDAB0", VA = "0xCCDAB0")]
		public FPECurveControlledBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000290")]
	public class FPEFOVKick
	{
		[Token(Token = "0x2000291")]
		[CompilerGenerated]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FPEFOVKick <>4__this;

			[Token(Token = "0x4000F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170000EE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BB6")]
				[Address(RVA = "0xCCE0C4", Offset = "0xCCE0C4", VA = "0xCCE0C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BB8")]
				[Address(RVA = "0xCCE10C", Offset = "0xCCE10C", VA = "0xCCE10C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0xCCDEAC", Offset = "0xCCDEAC", VA = "0xCCDEAC")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000BB4")]
			[Address(RVA = "0xCCDF8C", Offset = "0xCCDF8C", VA = "0xCCDF8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0xCCDF90", Offset = "0xCCDF90", VA = "0xCCDF90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xCCE0CC", Offset = "0xCCE0CC", VA = "0xCCE0CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000292")]
		[CompilerGenerated]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FPEFOVKick <>4__this;

			[Token(Token = "0x4000F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170000F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BBC")]
				[Address(RVA = "0xCCE260", Offset = "0xCCE260", VA = "0xCCE260", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BBE")]
				[Address(RVA = "0xCCE2A8", Offset = "0xCCE2A8", VA = "0xCCE2A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0xCCDF48", Offset = "0xCCDF48", VA = "0xCCDF48")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0xCCE114", Offset = "0xCCE114", VA = "0xCCE114", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0xCCE118", Offset = "0xCCE118", VA = "0xCCE118", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xCCE268", Offset = "0xCCE268", VA = "0xCCE268", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xCCDD00", Offset = "0xCCDD00", VA = "0xCCDD00")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xCCDD48", Offset = "0xCCDD48", VA = "0xCCDD48")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xCCDE30", Offset = "0xCCDE30", VA = "0xCCDE30")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xCCDE38", Offset = "0xCCDE38", VA = "0xCCDE38")]
		[IteratorStateMachine(typeof(<FOVKickUp>d__9))]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xCCDED4", Offset = "0xCCDED4", VA = "0xCCDED4")]
		[IteratorStateMachine(typeof(<FOVKickDown>d__10))]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xCCDF70", Offset = "0xCCDF70", VA = "0xCCDF70")]
		public FPEFOVKick()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000293")]
	public class FPELerpControlledBob
	{
		[Token(Token = "0x2000294")]
		[CompilerGenerated]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FPELerpControlledBob <>4__this;

			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170000F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BC5")]
				[Address(RVA = "0xCCE498", Offset = "0xCCE498", VA = "0xCCE498", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BC7")]
				[Address(RVA = "0xCCE4E0", Offset = "0xCCE4E0", VA = "0xCCE4E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0xCCE2B8", Offset = "0xCCE2B8", VA = "0xCCE2B8")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xCCE2E0", Offset = "0xCCE2E0", VA = "0xCCE2E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0xCCE2E4", Offset = "0xCCE2E4", VA = "0xCCE2E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0xCCE4A0", Offset = "0xCCE4A0", VA = "0xCCE4A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xCCE2B0", Offset = "0xCCE2B0", VA = "0xCCE2B0")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xCCB528", Offset = "0xCCB528", VA = "0xCCB528")]
		[IteratorStateMachine(typeof(<DoBobCycle>d__4))]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xCCD728", Offset = "0xCCD728", VA = "0xCCD728")]
		public FPELerpControlledBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000295")]
	public class FPEAudioDiaryEntry
	{
		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string diaryTitle;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioClip diaryAudio;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool showDiaryTitle;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool collected;

		[Token(Token = "0x170000F4")]
		public string DiaryTitle
		{
			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0xCCE4E8", Offset = "0xCCE4E8", VA = "0xCCE4E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		public AudioClip DiaryAudio
		{
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0xCCE4F0", Offset = "0xCCE4F0", VA = "0xCCE4F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		public bool ShowDiaryTitle
		{
			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0xCCE4F8", Offset = "0xCCE4F8", VA = "0xCCE4F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F7")]
		public bool Collected
		{
			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0xCCE500", Offset = "0xCCE500", VA = "0xCCE500")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xCC6BD0", Offset = "0xCC6BD0", VA = "0xCC6BD0")]
		public FPEAudioDiaryEntry(string title, AudioClip audio, bool showTitle)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xCCE508", Offset = "0xCCE508", VA = "0xCCE508")]
		public void collectAudioDiary()
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xCCE514", Offset = "0xCCE514", VA = "0xCCE514")]
		public string getAudioDiaryClipPath()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000296")]
	public class FPENoteEntry
	{
		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string noteTitle;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string noteBody;

		[Token(Token = "0x170000F8")]
		public string NoteTitle
		{
			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0xCCE530", Offset = "0xCCE530", VA = "0xCCE530")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public string NoteBody
		{
			[Token(Token = "0x6000BD0")]
			[Address(RVA = "0xCCE538", Offset = "0xCCE538", VA = "0xCCE538")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xCCE540", Offset = "0xCCE540", VA = "0xCCE540")]
		public FPENoteEntry(string title, string body)
		{
		}
	}
	[Token(Token = "0x2000297")]
	[ExecuteInEditMode]
	public class FPEAlwaysSwingOutDoor : FPEDoor
	{
		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[UnityEngine.Tooltip("The angle from closed the door will swing open in either direction. 135 is a good default for most realistic doors.")]
		[Header("Door-Specific Behaviour")]
		[SerializeField]
		private float swingAngle;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[UnityEngine.Tooltip("The time (in seconds) it takes for the door to fully open or close.")]
		private float swingOpenTimeInSeconds;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[UnityEngine.Tooltip("The angle (in degrees) at which the door snaps closed. Default is 1.")]
		[SerializeField]
		private float doorSwingSnapAngle;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Quaternion closedRotation;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private UnityEngine.Quaternion openRotationLeft;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private UnityEngine.Quaternion openRotationRight;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform swingingPart;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float maxSwingDegreesPerSecond;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private UnityEngine.Quaternion currentSwingOpenRotation;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform leftHandSide;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform rightHandSide;

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xCCE5FC", Offset = "0xCCE5FC", VA = "0xCCE5FC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xCCF244", Offset = "0xCCF244", VA = "0xCCF244", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xCCF24C", Offset = "0xCCF24C", VA = "0xCCF24C", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xCCF7A4", Offset = "0xCCF7A4", VA = "0xCCF7A4", Slot = "7")]
		protected override bool doorHitSomething()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xCCF9E0", Offset = "0xCCF9E0", VA = "0xCCF9E0", Slot = "11")]
		public override void activateDoor()
		{
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xCCFC7C", Offset = "0xCCFC7C", VA = "0xCCFC7C", Slot = "13")]
		protected override void closeTheDoor()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xCCFD18", Offset = "0xCCFD18", VA = "0xCCFD18", Slot = "12")]
		protected override void openTheDoor(bool makeSound = true)
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xCD00B8", Offset = "0xCD00B8", VA = "0xCD00B8", Slot = "14")]
		protected override void handleExternalLockActivation()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xCCFEC0", Offset = "0xCCFEC0", VA = "0xCCFEC0")]
		private bool playerCloserToLeftHandSide()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xCD0150", Offset = "0xCD0150", VA = "0xCD0150", Slot = "15")]
		public override FPEDoorSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xCD02B4", Offset = "0xCD02B4", VA = "0xCD02B4", Slot = "16")]
		public override void restoreSaveGameData(FPEDoorSaveData data)
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xCD0668", Offset = "0xCD0668", VA = "0xCD0668")]
		public FPEAlwaysSwingOutDoor()
		{
		}
	}
	[Token(Token = "0x2000298")]
	[RequireComponent(typeof(BoxCollider))]
	public class FPEAutomaticDoorTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The tag of the object(s) to listen for. When one of these objects enters the trigger, it will activate. Default is 'Player'")]
		[SerializeField]
		private string targetTag;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, player standing inside trigger volume will send 'keep alive' to doors so they will not close until player leaves trigger. Default is true.")]
		private bool keepDoorsOpenIfPlayerPresent;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("The set of Manual Sliding Doors to control with this trigger.")]
		private FPESlidingDoor[] doorsToRemotelyControl;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BoxCollider myCollider;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool targetPresent;

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xCD06F8", Offset = "0xCD06F8", VA = "0xCD06F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xCD093C", Offset = "0xCD093C", VA = "0xCD093C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xCD0940", Offset = "0xCD0940", VA = "0xCD0940")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xCD0A60", Offset = "0xCD0A60", VA = "0xCD0A60")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xCD0B44", Offset = "0xCD0B44", VA = "0xCD0B44")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xCD0B78", Offset = "0xCD0B78", VA = "0xCD0B78")]
		public FPEAutomaticDoorTrigger()
		{
		}
	}
	[Token(Token = "0x2000299")]
	public abstract class FPEDoor : MonoBehaviour
	{
		[Token(Token = "0x200029A")]
		public enum eDoorState
		{
			[Token(Token = "0x4000FB6")]
			CLOSED,
			[Token(Token = "0x4000FB7")]
			CLOSING,
			[Token(Token = "0x4000FB8")]
			OPENING,
			[Token(Token = "0x4000FB9")]
			OPEN,
			[Token(Token = "0x4000FBA")]
			BLOCKED_PARTLY_OPEN,
			[Token(Token = "0x4000FBB")]
			BLOCKED_PARTLY_CLOSED
		}

		[Token(Token = "0x200029B")]
		public enum eDoorSide
		{
			[Token(Token = "0x4000FBD")]
			LEFT,
			[Token(Token = "0x4000FBE")]
			RIGHT
		}

		[Token(Token = "0x200029C")]
		public enum eDoorActionType
		{
			[Token(Token = "0x4000FC0")]
			OPEN,
			[Token(Token = "0x4000FC1")]
			CLOSE
		}

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected eDoorState currentDoorState;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("General Configuration")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, the door will be unlocked the first time the player activates its handle using the Required Key.")]
		protected bool startInternallyLocked;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("The type of inventory item required to unlock the door")]
		protected FPEInventoryManagerScript.eInventoryItems requiredKeyType;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("If true, the door will never open until an external object unlocks it. (e.g. A security computer is hacked and releases a magnetic lock).")]
		[SerializeField]
		protected bool startExternallyLocked;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, door's default state will be 'OPEN'. Used for doors that are cracked open a little when the game starts. To use, set to true then rotate the SwingingPart transform a little bit in the direction the door swings open.")]
		protected bool startOpened;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, will stop swinging if its FPEDoorAndDrawerHitHelpers hit something.")]
		protected bool stopIfDoorHitsSomething;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Door Handle Interaction Text Overrides")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to door handle when door can be opened")]
		protected string openDoorString;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to door handle when door can be closed")]
		protected string closeDoorString;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("String assigned to door handle when door cannot open and player tries to open it. (E.g. 'It's locked.', 'I think it's jammed.', etc.)")]
		[SerializeField]
		protected string openDoorFailureString;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to door handle when door was internally locked and player tried to open it with the required key or item. (E.g. 'It's unlocked now.', etc.)")]
		protected string internalUnlockString;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to door handle when door is externally locked and player tries to open it. (E.g. 'I have to disable the security system first.', etc.)")]
		protected string externalLockString;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("If true, door will play sounds for various states and actions")]
		[SerializeField]
		[Header("Sounds")]
		protected bool playSounds;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Door Opening sounds here. If this field is left unassigned, these sounds will not be played")]
		[SerializeField]
		protected FPESimpleSoundBank doorOpenSounds;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Door Closing sounds here. If this field is left unassigned, these sounds will not be played")]
		[SerializeField]
		protected FPESimpleSoundBank doorCloseSounds;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Door Latching sounds here. If this field is left unassigned, these sounds will not be played")]
		[SerializeField]
		protected FPESimpleSoundBank doorLatchSounds;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Door Blocked sounds here. If this field is left unassigned, these sounds will not be played")]
		[SerializeField]
		protected FPESimpleSoundBank doorBlockedSounds;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Door Unlock sounds here. If this field is left unassigned, these sounds will not be played")]
		protected FPESimpleSoundBank doorUnlockSounds;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Door Open Failure sounds here. If this field is left unassigned, these sounds will not be played")]
		[SerializeField]
		protected FPESimpleSoundBank doorOpenFailureSounds;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected AudioSource doorSpeaker;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected List<Transform> doorHandles;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected FPEDoorAndDrawerHitHelper[] myHitHelpers;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected bool internallyLocked;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		protected bool externallyLocked;

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xCD0BD8", Offset = "0xCD0BD8", VA = "0xCD0BD8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xCD0CE4", Offset = "0xCD0CE4", VA = "0xCD0CE4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xCD0CE8", Offset = "0xCD0CE8", VA = "0xCD0CE8", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xCD0CEC", Offset = "0xCD0CEC", VA = "0xCD0CEC", Slot = "7")]
		protected virtual bool doorHitSomething()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xCD0D4C", Offset = "0xCD0D4C", VA = "0xCD0D4C")]
		protected void resetHitHelpers()
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xCD0E18", Offset = "0xCD0E18", VA = "0xCD0E18", Slot = "8")]
		protected virtual void setDoorHandleInteractionStrings(string s)
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xCD0FC8", Offset = "0xCD0FC8", VA = "0xCD0FC8", Slot = "9")]
		public virtual bool ExternallyUnlockDoor()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xCD0FD8", Offset = "0xCD0FD8", VA = "0xCD0FD8", Slot = "10")]
		public virtual bool ExternallyLockDoor()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEC")]
		public abstract void activateDoor();

		[Token(Token = "0x6000BED")]
		protected abstract void openTheDoor(bool makeSound = true);

		[Token(Token = "0x6000BEE")]
		protected abstract void closeTheDoor();

		[Token(Token = "0x6000BEF")]
		protected abstract void handleExternalLockActivation();

		[Token(Token = "0x6000BF0")]
		public abstract FPEDoorSaveData getSaveGameData();

		[Token(Token = "0x6000BF1")]
		public abstract void restoreSaveGameData(FPEDoorSaveData data);

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xCD0FEC", Offset = "0xCD0FEC", VA = "0xCD0FEC")]
		protected FPEDoor()
		{
		}
	}
	[Token(Token = "0x200029D")]
	[RequireComponent(typeof(Collider))]
	public class FPEDoorAndDrawerHitHelper : MonoBehaviour
	{
		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool hasHitSomething;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int examinationIgnoreLayer;

		[Token(Token = "0x170000FA")]
		public bool HasHitSomething
		{
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0xCD10F4", Offset = "0xCD10F4", VA = "0xCD10F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xCD10FC", Offset = "0xCD10FC", VA = "0xCD10FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xCD11D4", Offset = "0xCD11D4", VA = "0xCD11D4")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xCD0E10", Offset = "0xCD0E10", VA = "0xCD0E10")]
		public void ResetHits()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xCD1220", Offset = "0xCD1220", VA = "0xCD1220")]
		public FPEDoorAndDrawerHitHelper()
		{
		}
	}
	[Token(Token = "0x200029E")]
	[ExecuteInEditMode]
	public class FPEDrawer : MonoBehaviour
	{
		[Token(Token = "0x200029F")]
		public enum eDrawerState
		{
			[Token(Token = "0x4000FE8")]
			CLOSED,
			[Token(Token = "0x4000FE9")]
			CLOSING,
			[Token(Token = "0x4000FEA")]
			OPENING,
			[Token(Token = "0x4000FEB")]
			OPEN,
			[Token(Token = "0x4000FEC")]
			BLOCKED_PARTLY_OPEN,
			[Token(Token = "0x4000FED")]
			BLOCKED_PARTLY_CLOSED
		}

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected eDrawerState currentDrawerState;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("If true, the drawer will be unlocked the first time the player activates its drawer pull. Drawer Pull Activate components should be configured to require an inventory item. (e.g. Drawer starts locked, and unlocks when player activates with required inventory object.)")]
		[SerializeField]
		[Header("Drawer Configuration")]
		protected bool startInternallyLocked;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The type of inventory item required to unlock the drawer")]
		[SerializeField]
		protected FPEInventoryManagerScript.eInventoryItems requiredKeyType;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("If true, the drawer will never open until an external object unlocks it. (e.g. A hidden security button under a desk is pressed and releases the lock).")]
		[SerializeField]
		protected bool startExternallyLocked;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[UnityEngine.Tooltip("If true, drawer's default state will be 'OPEN'. Used for drawers that are open a little when the game starts.")]
		[SerializeField]
		private bool startOpened;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, will stop sliding if its FPEDoorAndDrawerHitHelpers hit something.")]
		private bool stopIfDrawerHitsSomething;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		private bool internallyLocked;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool externallyLocked;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform slidingPart;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Transform> drawerPulls;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FPEDoorAndDrawerHitHelper openHitHelper;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FPEDoorAndDrawerHitHelper closeHitHelper;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Vector3 closedPosition;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 openedPosition;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float drawerSlideDistancePerSecond;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Drawer Pull Interaction Text Overrides")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to drawer pull when drawer can be opened")]
		private string openDrawerString;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to drawer pull when drawer can be closed")]
		private string closeDrawerString;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("String assigned to drawer pull when drawer cannot open and player tries to open it. (E.g. 'It's locked.', 'I think it's jammed.', etc.)")]
		[SerializeField]
		private string openDrawerFailureString;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to drawer pull when drawer was internally locked and player tried to open it with the required key or item. (E.g. 'It's unlocked now.', etc.)")]
		protected string internalUnlockString;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[UnityEngine.Tooltip("String assigned to drawer pull when drawer is externally locked and player tries to open it. (E.g. 'I have to find the secret button to open this.', etc.)")]
		protected string externalLockString;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Sounds")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, door will play sounds for various states and actions")]
		private bool playSounds;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Drawer Opening sounds here. If this field is left unassigned, these sounds will not be played")]
		private FPESimpleSoundBank drawerOpenSounds;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Drawer Closing sounds here. If this field is left unassigned, these sounds will not be played")]
		private FPESimpleSoundBank drawerCloseSounds;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Drawer Blocked sounds here. If this field is left unassigned, these sounds will not be played")]
		private FPESimpleSoundBank drawerBlockedSounds;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Drawer Open Failure sounds here. If this field is left unassigned, these sounds will not be played")]
		private FPESimpleSoundBank drawerOpenFailureSounds;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[UnityEngine.Tooltip("If playSounds is true, assign a sound bank for Drawer Unlock sounds here. If this field is left unassigned, these sounds will not be played")]
		protected FPESimpleSoundBank drawerUnlockSounds;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UnityEngine.Tooltip("The distance (in Unity units) and direction (positive or negative) the drawer will slide open along its local z-axis")]
		[Header("Drawer-Specific Behaviour")]
		[SerializeField]
		private float slideDistance;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[UnityEngine.Tooltip("The time (in seconds) it takes for the drawer to fully open or close.")]
		private float slideOpenTimeInSeconds;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[UnityEngine.Tooltip("The distance (in units) at which the drawer snaps open and closed. Default is 0.01.")]
		[SerializeField]
		private float drawerSlideSnapDistance;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[UnityEngine.Tooltip("If true, Player will be automatically moved into safe zone so the drawer will be less likely to hit them.")]
		[SerializeField]
		private bool autoMovePlayerToSafeZone;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform safeZone;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float playerAutoMoveUnitsPerSecond;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private bool needToMovePlayerToSafeZone;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private UnityEngine.Vector3 currentSafeZoneTargetPosition;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private AudioSource drawerSpeaker;

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xCD1228", Offset = "0xCD1228", VA = "0xCD1228")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xCD1C10", Offset = "0xCD1C10", VA = "0xCD1C10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xCD1C14", Offset = "0xCD1C14", VA = "0xCD1C14")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xCD242C", Offset = "0xCD242C", VA = "0xCD242C")]
		public void activateDrawer()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xCD27E8", Offset = "0xCD27E8", VA = "0xCD27E8")]
		private void closeTheDrawer()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xCD273C", Offset = "0xCD273C", VA = "0xCD273C")]
		private void openTheDrawer()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xCD26AC", Offset = "0xCD26AC", VA = "0xCD26AC")]
		private void handleExternalLockActivation()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xCD2930", Offset = "0xCD2930", VA = "0xCD2930")]
		private void putPlayerInSafeZone(Transform zone)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xCD23C8", Offset = "0xCD23C8", VA = "0xCD23C8")]
		private void releasePlayerFromSafeZone()
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xCD2250", Offset = "0xCD2250", VA = "0xCD2250")]
		private void movePlayerCloserToSafeZone()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xCD21D0", Offset = "0xCD21D0", VA = "0xCD21D0")]
		private bool drawerOpenHitHelperHitSomething()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xCD2150", Offset = "0xCD2150", VA = "0xCD2150")]
		private bool drawerCloseHitHelperHitSomething()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xCD2884", Offset = "0xCD2884", VA = "0xCD2884")]
		private void resetHitHelpers()
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0xCD1A60", Offset = "0xCD1A60", VA = "0xCD1A60")]
		private void setDrawerPullInteractionStrings(string s)
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xCD2A0C", Offset = "0xCD2A0C", VA = "0xCD2A0C")]
		public void ExternallyUnlockDrawer()
		{
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0xCD2A98", Offset = "0xCD2A98", VA = "0xCD2A98")]
		public FPEDrawerSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xCD2BD8", Offset = "0xCD2BD8", VA = "0xCD2BD8")]
		public void restoreSaveGameData(FPEDrawerSaveData data)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xCD2D1C", Offset = "0xCD2D1C", VA = "0xCD2D1C")]
		public FPEDrawer()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	[RequireComponent(typeof(BoxCollider))]
	[ExecuteInEditMode]
	public class FPEDrawerContentsGrabber : MonoBehaviour
	{
		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BoxCollider myBoxCollider;

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xCD2ED8", Offset = "0xCD2ED8", VA = "0xCD2ED8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xCD3370", Offset = "0xCD3370", VA = "0xCD3370")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xCD349C", Offset = "0xCD349C", VA = "0xCD349C")]
		public FPEDrawerContentsGrabber()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	[Obsolete("FPESimpleDoor will not be maintained beyond v2.2. Please migrate your doors to use the new door classes such as FPESlidingDoor, FPESwingingDoor, etc.")]
	public class FPESimpleDoor : FPEDoor
	{
		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private UnityEngine.Vector3 openedPosition;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.Vector3 closedPosition;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private FPEInteractableActivateScript myDoorHandle;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[UnityEngine.Tooltip("How far the sliding part of the door slides.")]
		[Header("Moving Parts Configuration")]
		private float slidingDistance;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[UnityEngine.Tooltip("How quickly the door opens.")]
		private float openSpeed;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[UnityEngine.Tooltip("How quickly the door closes.")]
		private float closeSpeed;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[UnityEngine.Tooltip("The distance at which the door will snap to open position when opening.")]
		private float openSnapDistance;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[UnityEngine.Tooltip("The distance at which the door will snap to closed position when closing.")]
		[SerializeField]
		private float closeSnapDistance;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[UnityEngine.Tooltip("The sliding part of the door.")]
		[SerializeField]
		private UnityEngine.GameObject slidingPart;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[UnityEngine.Tooltip("This object blocks the player's path when the door is opening, closing, or fully closed. Should have a primitive collider attached (e.g. a basic cube will work fine).")]
		public UnityEngine.GameObject playerBlocker;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[UnityEngine.Tooltip("This optional object blocks the raycast from player to door handle. It prevents player from closing door on themselves from inside the doorway.")]
		public UnityEngine.GameObject playerInteractionBlocker;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[Header("Sound")]
		[UnityEngine.Tooltip("Sound plays when door is opened")]
		private AudioClip doorOpen;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[UnityEngine.Tooltip("Sound plays when door is closed")]
		private AudioClip doorClose;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[UnityEngine.Tooltip("Sound plays when door is locked and someone tries to open it")]
		private AudioClip doorLocked;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private AudioSource myAudio;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[Header("Interaction Text")]
		private string openText;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private string closeText;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private string lockedText;

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xCD34A4", Offset = "0xCD34A4", VA = "0xCD34A4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xCD3850", Offset = "0xCD3850", VA = "0xCD3850", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xCD3C8C", Offset = "0xCD3C8C", VA = "0xCD3C8C", Slot = "11")]
		public override void activateDoor()
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0xCD3CC8", Offset = "0xCD3CC8", VA = "0xCD3CC8", Slot = "12")]
		protected override void openTheDoor(bool makeSound = true)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0xCD3D84", Offset = "0xCD3D84", VA = "0xCD3D84", Slot = "13")]
		protected override void closeTheDoor()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0xCD3E40", Offset = "0xCD3E40", VA = "0xCD3E40")]
		public void doorOpenFailure()
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xCD3E7C", Offset = "0xCD3E7C", VA = "0xCD3E7C", Slot = "14")]
		protected override void handleExternalLockActivation()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xCD3EE4", Offset = "0xCD3EE4", VA = "0xCD3EE4", Slot = "8")]
		protected override void setDoorHandleInteractionStrings(string s)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xCD3B90", Offset = "0xCD3B90", VA = "0xCD3B90")]
		protected void setDoorClosed(UnityEngine.Vector3 customVector)
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0xCD3C3C", Offset = "0xCD3C3C", VA = "0xCD3C3C")]
		protected void setDoorOpen(UnityEngine.Vector3 customVector)
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xCD3F00", Offset = "0xCD3F00", VA = "0xCD3F00", Slot = "15")]
		public override FPEDoorSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xCD3FFC", Offset = "0xCD3FFC", VA = "0xCD3FFC", Slot = "16")]
		public override void restoreSaveGameData(FPEDoorSaveData data)
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xCD4180", Offset = "0xCD4180", VA = "0xCD4180")]
		public FPESimpleDoor()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[ExecuteInEditMode]
	public class FPESlidingDoor : FPEDoor
	{
		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Header("Door-Specific Behaviour")]
		[SerializeField]
		[UnityEngine.Tooltip("The distance (in Unity units) and direction (positive or negative) the door will slide open along its local x-axis")]
		private float slideDistance;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[UnityEngine.Tooltip("The time (in seconds) it takes for the door to fully open or close.")]
		private float slideOpenTimeInSeconds;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[UnityEngine.Tooltip("The distance (in units) at which the door snaps open and closed. Default is 0.05.")]
		private float doorSlideSnapDistance;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, doors will be closed after number of seconds set in Automatic Close Time field.")]
		private bool closeAutomatically;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[UnityEngine.Tooltip("Time (in seconds) before doors will close after being remotely opened. Ignored if Close Automatically is set to false")]
		private float automaticCloseTime;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float automaticCloseCounter;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private UnityEngine.Vector3 closedPosition;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UnityEngine.Vector3 openedPosition;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float doorSlideDistancePerSecond;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform slidingPart;

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xCD4290", Offset = "0xCD4290", VA = "0xCD4290", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xCD49C0", Offset = "0xCD49C0", VA = "0xCD49C0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xCD49C4", Offset = "0xCD49C4", VA = "0xCD49C4", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xCD4F8C", Offset = "0xCD4F8C", VA = "0xCD4F8C", Slot = "11")]
		public override void activateDoor()
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xCD522C", Offset = "0xCD522C", VA = "0xCD522C", Slot = "13")]
		protected override void closeTheDoor()
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xCD52C4", Offset = "0xCD52C4", VA = "0xCD52C4", Slot = "12")]
		protected override void openTheDoor(bool makeSound = true)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xCD0A0C", Offset = "0xCD0A0C", VA = "0xCD0A0C")]
		public void RemotelyOpenDoor(bool makeSound = true)
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xCD5364", Offset = "0xCD5364", VA = "0xCD5364")]
		public void RemotelyCloseDoor()
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xCD5374", Offset = "0xCD5374", VA = "0xCD5374", Slot = "14")]
		protected override void handleExternalLockActivation()
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xCD540C", Offset = "0xCD540C", VA = "0xCD540C", Slot = "15")]
		public override FPEDoorSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xCD554C", Offset = "0xCD554C", VA = "0xCD554C", Slot = "16")]
		public override void restoreSaveGameData(FPEDoorSaveData data)
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xCD56D8", Offset = "0xCD56D8", VA = "0xCD56D8")]
		public FPESlidingDoor()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	[ExecuteInEditMode]
	public class FPESwingingDoor : FPEDoor
	{
		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Header("Door-Specific Behaviour")]
		[SerializeField]
		[UnityEngine.Tooltip("The angle from closed the door will swing open. 135 is a good default for most realistic doors.")]
		private float swingAngle;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UnityEngine.Tooltip("The time (in seconds) it takes for the door to fully open or close.")]
		[SerializeField]
		private float swingOpenTimeInSeconds;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[UnityEngine.Tooltip("The angle (in degrees) at which the door snaps closed. Default is 1.")]
		private float doorSwingSnapAngle;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UnityEngine.Tooltip("If true, Player will be automatically moved into safe zones and pan their view so the door will be less likely to hit them.")]
		[SerializeField]
		private bool autoMovePlayerToSafeZones;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private UnityEngine.Quaternion closedRotation;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private UnityEngine.Quaternion openRotation;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform swingingPart;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float maxSwingDegreesPerSecond;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float playerAutoMoveUnitsPerSecond;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float playerAutoMoveLookPanSpeed;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool needToMovePlayerToSafeZone;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Transform swingOutSide;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform swingInSide;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Transform safeZoneSwingIn;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Transform safeZoneSwingOut;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Transform doorActionLookTarget;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private UnityEngine.Vector3 currentSafeZoneTargetPosition;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private UnityEngine.Vector3 currentSafeLookTargetPosition;

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xCD5768", Offset = "0xCD5768", VA = "0xCD5768", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xCD6458", Offset = "0xCD6458", VA = "0xCD6458", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xCD645C", Offset = "0xCD645C", VA = "0xCD645C", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xCD6CA8", Offset = "0xCD6CA8", VA = "0xCD6CA8", Slot = "7")]
		protected override bool doorHitSomething()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xCD6DC8", Offset = "0xCD6DC8", VA = "0xCD6DC8", Slot = "11")]
		public override void activateDoor()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xCD7068", Offset = "0xCD7068", VA = "0xCD7068", Slot = "12")]
		protected override void openTheDoor(bool makeSound = true)
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xCD74B4", Offset = "0xCD74B4", VA = "0xCD74B4", Slot = "13")]
		protected override void closeTheDoor()
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xCD7574", Offset = "0xCD7574", VA = "0xCD7574", Slot = "14")]
		protected override void handleExternalLockActivation()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xCD7138", Offset = "0xCD7138", VA = "0xCD7138")]
		private bool playerCloserToSwingOutSide()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xCD7340", Offset = "0xCD7340", VA = "0xCD7340")]
		private void putPlayerInSafeZone(Transform zone)
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xCD6C44", Offset = "0xCD6C44", VA = "0xCD6C44")]
		private void releasePlayerFromSafeZone()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xCD69D8", Offset = "0xCD69D8", VA = "0xCD69D8")]
		private void movePlayerCloserToSafeZone()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xCD760C", Offset = "0xCD760C", VA = "0xCD760C", Slot = "15")]
		public override FPEDoorSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xCD7770", Offset = "0xCD7770", VA = "0xCD7770", Slot = "16")]
		public override void restoreSaveGameData(FPEDoorSaveData data)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xCD79A8", Offset = "0xCD79A8", VA = "0xCD79A8")]
		public FPESwingingDoor()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class FPEAttachedNote : MonoBehaviour
	{
		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string noteTitle;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[TextArea]
		private string noteBody;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool collected;

		[Token(Token = "0x170000FB")]
		public string NoteTitle
		{
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0xCD7A84", Offset = "0xCD7A84", VA = "0xCD7A84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		public string NoteBody
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0xCD7A8C", Offset = "0xCD7A8C", VA = "0xCD7A8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		public bool Collected
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xCD7A94", Offset = "0xCD7A94", VA = "0xCD7A94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xCD7A9C", Offset = "0xCD7A9C", VA = "0xCD7A9C")]
		public FPENoteEntry collectNote()
		{
			return null;
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xCD7B20", Offset = "0xCD7B20", VA = "0xCD7B20")]
		public FPEAttachedNoteSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xCD7BB0", Offset = "0xCD7BB0", VA = "0xCD7BB0")]
		public void restoreSaveGameData(FPEAttachedNoteSaveData data)
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xCD7BCC", Offset = "0xCD7BCC", VA = "0xCD7BCC")]
		public FPEAttachedNote()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class FPEInteractableActivateScript : FPEInteractableBaseScript
	{
		[Token(Token = "0x20002A6")]
		public enum eInventoryRequirementMode
		{
			[Token(Token = "0x4001036")]
			IN_HAND,
			[Token(Token = "0x4001037")]
			IN_INVENTORY,
			[Token(Token = "0x4001038")]
			IN_HAND_OR_INVENTORY
		}

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, player can interact with this while holding something. If false, they cannot.")]
		protected bool canInteractWithWhileHoldingObject;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[Header("Inventory Item Requirements (Optional)")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, activation will require an inventory item with the parameters as configured below")]
		private bool requireInventoryItem;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[UnityEngine.Tooltip("The type of inventory item required to activate")]
		[SerializeField]
		private FPEInventoryManagerScript.eInventoryItems requiredItemType;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("The quantity of inventory item required for the activation")]
		[SerializeField]
		private int requiredInventoryQuantity;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[UnityEngine.Tooltip("Specify how the inventory item must be in player's possession for activation. Things like keycards might be required to be in hand, whereas a secret password written down on a scrap of paper can be in inventory or in hand.")]
		[SerializeField]
		private eInventoryRequirementMode requiredToBeInHand;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("If true, the activation will remove the item(s) once activation is triggered. (e.g. Remove battery when placed in radio. Don't remove keycard when swiped to open door.")]
		[SerializeField]
		private bool removeOnUse;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("This will dictate the nature of the events. ONCE: Will only fire the first time. EVERYTIME: Will fire on every activation.")]
		[Header("Type of Activation and Events")]
		[SerializeField]
		private FPEGenericEvent.eEventFireType eventFireType;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[UnityEngine.Tooltip("If using the EVERYTIME event fire type, set this time to some value (in seconds) which will suspend the interaction for that amount of time before the activation can be repeated. Not to be used as a replacement for complex state management.")]
		private float eventRepeatDelay;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float eventRepeatCounter;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string previousInteractionString;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Shared 'Activation' and 'Toggle On' Event")]
		[UnityEngine.Tooltip("If specified, this event will fire on activation. It will adhere to defined occurrence type (e.g. fire once, fire every time, etc.)")]
		[SerializeField]
		private FPEGenericEvent ActivationEvent;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UnityEngine.Tooltip("If specified, this event is fired when the player needs inventory to activate the object but does not have it. (e.g. beep and flash a 'keycard required' warning light)")]
		[SerializeField]
		[Header("Shared 'Activation Failure' Event")]
		private FPEGenericEvent ActivationFailureEvent;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UnityEngine.Tooltip("If specified, this event will fire on de-activation or 'toggle off'.")]
		[SerializeField]
		[Header("TOGGLE-specific 'Toggle Off' Event")]
		private FPEGenericEvent DeactivationEvent;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UnityEngine.Tooltip("If true, toggling object OFF will also adhere to inventory requirements above")]
		[SerializeField]
		private bool toggleOffRequiresInventory;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[UnityEngine.Tooltip("Overrides interaction string, and applied when toggle is currently OFF")]
		private string toggleOnInteractionString;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UnityEngine.Tooltip("Overrides interaction string, and applied when toggle is currently ON")]
		[SerializeField]
		private string toggleOffInteractionString;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[UnityEngine.Tooltip("If true, the toggle will toggle ON and fire the ToggleOnEvent when scene starts.")]
		[SerializeField]
		private bool toggleOnAtStart;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		[UnityEngine.Tooltip("If true, the toggle will toggle OFF and fire the ToggleOnEvent when scene starts.")]
		[SerializeField]
		private bool toggleOffAtStart;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		[Header("Save Game Options")]
		[SerializeField]
		[UnityEngine.Tooltip("If Event Fire Type is TOGGLE, and this value is true, the Toggle On and Toggle Off events will re-occur when game is loaded. For some objects like lights, a value of true is advised. For other objects like doors, a value of false makes more sense.")]
		private bool fireToggleEventsOnLoadGame;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
		private bool toggleOn;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool eventHasFiredOnce;

		[Token(Token = "0x170000FE")]
		public bool RequireInventoryItem
		{
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0xCD7C50", Offset = "0xCD7C50", VA = "0xCD7C50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FF")]
		public FPEInventoryManagerScript.eInventoryItems RequiredItemType
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0xCD7C58", Offset = "0xCD7C58", VA = "0xCD7C58")]
			get
			{
				return default(FPEInventoryManagerScript.eInventoryItems);
			}
		}

		[Token(Token = "0x17000100")]
		public int RequiredInventoryQuantity
		{
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0xCD7C60", Offset = "0xCD7C60", VA = "0xCD7C60")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000101")]
		public eInventoryRequirementMode RequiredToBeInHand
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0xCD7C68", Offset = "0xCD7C68", VA = "0xCD7C68")]
			get
			{
				return default(eInventoryRequirementMode);
			}
		}

		[Token(Token = "0x17000102")]
		public bool RemoveOnUse
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xCD7C70", Offset = "0xCD7C70", VA = "0xCD7C70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000103")]
		public FPEGenericEvent.eEventFireType EventFireType
		{
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0xCD7C78", Offset = "0xCD7C78", VA = "0xCD7C78")]
			get
			{
				return default(FPEGenericEvent.eEventFireType);
			}
		}

		[Token(Token = "0x17000104")]
		public bool ToggleOffRequiresInventory
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0xCD7C80", Offset = "0xCD7C80", VA = "0xCD7C80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000105")]
		public bool IsToggledOn
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xCD7C88", Offset = "0xCD7C88", VA = "0xCD7C88")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xCD7C90", Offset = "0xCD7C90", VA = "0xCD7C90", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xCD8328", Offset = "0xCD8328", VA = "0xCD8328", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xCD8800", Offset = "0xCD8800", VA = "0xCD8800")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xCD8860", Offset = "0xCD8860", VA = "0xCD8860", Slot = "6")]
		public override bool interactionsAllowedWhenHoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xCD8868", Offset = "0xCD8868", VA = "0xCD8868", Slot = "9")]
		public virtual void activate()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xCD8BE4", Offset = "0xCD8BE4", VA = "0xCD8BE4")]
		public void failToActivate()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xCD878C", Offset = "0xCD878C", VA = "0xCD878C")]
		private void doToggleOn()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xCD87C8", Offset = "0xCD87C8", VA = "0xCD87C8")]
		private void doToggleOff()
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xCD8BF8", Offset = "0xCD8BF8", VA = "0xCD8BF8")]
		public FPEActivateSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xCD8CD8", Offset = "0xCD8CD8", VA = "0xCD8CD8")]
		public void restoreSaveGameData(FPEActivateSaveData data)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xCD8D58", Offset = "0xCD8D58", VA = "0xCD8D58")]
		public FPEInteractableActivateScript()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public class FPEInteractableAudioDiaryScript : FPEInteractableBaseScript
	{
		[Serializable]
		[Token(Token = "0x20002A8")]
		public class AudioDiaryStopEvent : UnityEvent
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xCD934C", Offset = "0xCD934C", VA = "0xCD934C")]
			public AudioDiaryStopEvent()
			{
			}
		}

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, player can interact with this while holding something. If false, they cannot.")]
		protected bool canInteractWithWhileHoldingObject;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("The audio diary title is displayed on screen when the diary is playing.")]
		public string audioDiaryTitle;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("The actual audio clip the diary represents. This is played when the diary is triggered.")]
		public AudioClip audioDiaryClip;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("The interacton string assigned once the audio diary has started playback. Leave blank to keep the same pre-diary interaction string.")]
		public string duringPlaybackInteractionString;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UnityEngine.Tooltip("The interacton string assigned after the audio diary has finished/been skipped. Leave blank to keep the same pre-diary interaction string.")]
		public string postPlaybackInteractionString;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, the audio diary will play as soon as player looks at the object. If false, player must manually interact with it to begin playback.")]
		private bool automaticPlayback;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, the audio diary will be added to the inventory list once playback starts.")]
		private bool addEntryToInventory;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[UnityEngine.Tooltip("If true, audio title will be displayed during playback.")]
		[SerializeField]
		private bool showDiaryTitle;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[UnityEngine.Tooltip("If specified, this event will fire when the audio diary is stopped, or finishes playing on its own.")]
		private AudioDiaryStopEvent myStopEvent;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool hasBeenPlayed;

		[Token(Token = "0x17000106")]
		public bool AutomaticPlayback
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0xCD8E74", Offset = "0xCD8E74", VA = "0xCD8E74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000107")]
		public bool AddEntryToInventory
		{
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0xCD8E7C", Offset = "0xCD8E7C", VA = "0xCD8E7C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000108")]
		public bool ShowDiaryTitle
		{
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0xCD8E84", Offset = "0xCD8E84", VA = "0xCD8E84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xCD8E8C", Offset = "0xCD8E8C", VA = "0xCD8E8C", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xCD8FE4", Offset = "0xCD8FE4", VA = "0xCD8FE4", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xCD8FE8", Offset = "0xCD8FE8", VA = "0xCD8FE8", Slot = "6")]
		public override bool interactionsAllowedWhenHoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xCD8FF0", Offset = "0xCD8FF0", VA = "0xCD8FF0", Slot = "7")]
		public override void interact()
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xCD90E0", Offset = "0xCD90E0", VA = "0xCD90E0", Slot = "8")]
		public override void discoverObject()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xCD9104", Offset = "0xCD9104", VA = "0xCD9104")]
		public void stopAudioDiary()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xCD9018", Offset = "0xCD9018", VA = "0xCD9018")]
		private void playDiary()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xCD9180", Offset = "0xCD9180", VA = "0xCD9180")]
		public FPEAudioDiaryPlayedStateSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xCD9210", Offset = "0xCD9210", VA = "0xCD9210")]
		public void restoreSaveGameData(FPEAudioDiaryPlayedStateSaveData data)
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xCD9294", Offset = "0xCD9294", VA = "0xCD9294")]
		public FPEInteractableAudioDiaryScript()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[RequireComponent(typeof(Collider))]
	public abstract class FPEInteractableBaseScript : MonoBehaviour
	{
		[Token(Token = "0x20002AA")]
		public enum eInteractionType
		{
			[Token(Token = "0x4001054")]
			NULL_TYPE,
			[Token(Token = "0x4001055")]
			PUT_BACK,
			[Token(Token = "0x4001056")]
			STATIC,
			[Token(Token = "0x4001057")]
			PICKUP,
			[Token(Token = "0x4001058")]
			ACTIVATE,
			[Token(Token = "0x4001059")]
			JOURNAL,
			[Token(Token = "0x400105A")]
			AUDIODIARY,
			[Token(Token = "0x400105B")]
			INVENTORY,
			[Token(Token = "0x400105C")]
			DOCK
		}

		[Token(Token = "0x20002AB")]
		public enum eInteractSoundPlaybackType
		{
			[Token(Token = "0x400105E")]
			PLAY_ONCE,
			[Token(Token = "0x400105F")]
			PLAY_EVERY_TIME
		}

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected eInteractionType interactionType;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected FPEInteractionManagerScript interactionManager;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("If true, the object will be highlighted when player moves reticle over the object")]
		[Header("Highlighting and Interacting")]
		public bool highlightOnMouseOver;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("The highlight color, which will tint the object when it is highlighted. Default is blueish, #9292FFFF or RGBA (0.57f, 0.57f, 1.0f, 1.0f)")]
		public UnityEngine.Color highlightColor;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool highlightMaterialSet;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The maximum straight-line distance from the player that an object can be interacted with. Default is 2.0.")]
		public float interactionDistance;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool hasBeenDiscovered;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[UnityEngine.Tooltip("Check this box to play a secondary sound when this object is interacted with. For example, the narration of a journal page.")]
		[Header("Optionally play a Secondary Sound on Interact")]
		public bool playSecondarySoundOnInteract;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		protected bool hasPlayedOnce;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		[UnityEngine.Tooltip("If checked, the secondary sound will behave the same way as an audio log, including log title and skip functionality. Note that if this is false, the specified sound will not stop until completed and cannot be skipped.")]
		public bool showWithText;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("If 'Show With Text' is checked, this text will appear as the audio log title.")]
		public string audioLogText;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("PLAY_ONCE means the secondary sound will only play on the first interaction. PLAY_EVER_TIME means it will play on every interaction.")]
		public eInteractSoundPlaybackType soundPlaybackBehaviour;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("The AudioClip for the secondary sound. If this is not specified, no sound will be played, regardless of other values set in this section.")]
		public AudioClip soundToPlayOnInteract;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Interaction Stings")]
		[UnityEngine.Tooltip("The string that appears below the reticle when the object is highlighted")]
		public string interactionString;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material[] baseMaterials;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material[] highlightMaterials;

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xCD8324", Offset = "0xCD8324", VA = "0xCD8324", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0xCD869C", Offset = "0xCD869C", VA = "0xCD869C", Slot = "5")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000C5F")]
		public abstract bool interactionsAllowedWhenHoldingObject();

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xCD8A30", Offset = "0xCD8A30", VA = "0xCD8A30", Slot = "7")]
		public virtual void interact()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xCD9354", Offset = "0xCD9354", VA = "0xCD9354")]
		public void highlightObject()
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0xCD9498", Offset = "0xCD9498", VA = "0xCD9498")]
		public void unHighlightObject()
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xCD956C", Offset = "0xCD956C", VA = "0xCD956C")]
		public eInteractionType getInteractionType()
		{
			return default(eInteractionType);
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0xCD9574", Offset = "0xCD9574", VA = "0xCD9574")]
		public float getInteractionDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0xCD9380", Offset = "0xCD9380", VA = "0xCD9380")]
		private void setHighlightMaterial()
		{
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xCD949C", Offset = "0xCD949C", VA = "0xCD949C")]
		private void removeHighlightMaterial()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xCD98DC", Offset = "0xCD98DC", VA = "0xCD98DC")]
		public void forceHighlightMaterialUpdate()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xCD957C", Offset = "0xCD957C", VA = "0xCD957C")]
		private void saveBaseMaterials()
		{
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0xCD98F4", Offset = "0xCD98F4", VA = "0xCD98F4")]
		private void refreshBaseMaterials()
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xCD96B0", Offset = "0xCD96B0", VA = "0xCD96B0")]
		private void refreshHighlightMaterials()
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xCD90F8", Offset = "0xCD90F8", VA = "0xCD90F8", Slot = "8")]
		public virtual void discoverObject()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xCD9A48", Offset = "0xCD9A48", VA = "0xCD9A48")]
		public void setInteractionString(string updatedString)
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xCD8DCC", Offset = "0xCD8DCC", VA = "0xCD8DCC")]
		protected FPEInteractableBaseScript()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class FPEInteractableDockScript : FPEInteractableBaseScript
	{
		[Serializable]
		[Token(Token = "0x20002AD")]
		public class DockEvent : UnityEvent
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xCD9F08", Offset = "0xCD9F08", VA = "0xCD9F08")]
			public DockEvent()
			{
			}
		}

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, player can interact with this while holding something. If false, they cannot.")]
		protected bool canInteractWithWhileHoldingObject;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Dock Specific Values")]
		[SerializeField]
		[UnityEngine.Tooltip("The transform where the player will be moved when they dock")]
		private Transform myDockTransform;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[UnityEngine.Tooltip("The transform where the player will focus when they dock.")]
		private Transform myFocusTransform;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("The width and height of the restricted view area. Larger means player has more view freedom. In exact units, should be tweaked through testing with focus transform position, distance from dock transform, etc.")]
		[SerializeField]
		private UnityEngine.Vector2 dockedViewLimits;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, docking will be smoothed. Based on smoothing values found on the FPEFirstPersonController prefab.")]
		private bool smoothDock;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		[UnityEngine.Tooltip("Text hint that is applied to the UI when player looks at this dock object")]
		private string dockHintText;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[UnityEngine.Tooltip("Text hint that is applied to the UI when player is docked (e.g. 'stand up')")]
		private string unDockHintText;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Sound")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, docking/undocking will make sound")]
		private bool playDockSounds;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[UnityEngine.Tooltip("Sound to play when docking")]
		private AudioClip dockingSound;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[UnityEngine.Tooltip("Sound to play when un-docking")]
		private AudioClip unDockingSound;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private AudioSource dockAudio;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool occupied;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Collider[] myColliders;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[UnityEngine.Tooltip("If specified, this event will fire when DOCKING is started (e.g. pull chair out from table)")]
		private DockEvent DockStartedEvent;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[UnityEngine.Tooltip("If specified, this event will fire when DOCKING is complete (e.g. turn on computer screen)")]
		[SerializeField]
		private DockEvent DockFinishedEvent;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[UnityEngine.Tooltip("If specified, this event will fire when UNDOCKING is started (e.g. turn off computer screen)")]
		private DockEvent UnDockStartedEvent;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[UnityEngine.Tooltip("If specified, this event will fire when UNDOCKING is complete (e.g. tuck chair under table)")]
		private DockEvent UnDockFinishedEvent;

		[Token(Token = "0x17000109")]
		public Transform DockTransform
		{
			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0xCD9A50", Offset = "0xCD9A50", VA = "0xCD9A50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public Transform FocusTransform
		{
			[Token(Token = "0x6000C6F")]
			[Address(RVA = "0xCD9A58", Offset = "0xCD9A58", VA = "0xCD9A58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public UnityEngine.Vector2 DockedViewLimits
		{
			[Token(Token = "0x6000C70")]
			[Address(RVA = "0xCD9A60", Offset = "0xCD9A60", VA = "0xCD9A60")]
			get
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x1700010C")]
		public bool SmoothDock
		{
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0xCD9A68", Offset = "0xCD9A68", VA = "0xCD9A68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010D")]
		public string DockHintText
		{
			[Token(Token = "0x6000C72")]
			[Address(RVA = "0xCD9A70", Offset = "0xCD9A70", VA = "0xCD9A70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public string UnDockHintText
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0xCD9A78", Offset = "0xCD9A78", VA = "0xCD9A78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		public bool Occupied
		{
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0xCD9A80", Offset = "0xCD9A80", VA = "0xCD9A80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xCD9A88", Offset = "0xCD9A88", VA = "0xCD9A88", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xCD9CD0", Offset = "0xCD9CD0", VA = "0xCD9CD0", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xCD9CD4", Offset = "0xCD9CD4", VA = "0xCD9CD4", Slot = "6")]
		public override bool interactionsAllowedWhenHoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xCD9CDC", Offset = "0xCD9CDC", VA = "0xCD9CDC")]
		public void dock()
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xCD9D90", Offset = "0xCD9D90", VA = "0xCD9D90")]
		public void unDock()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xCD9E3C", Offset = "0xCD9E3C", VA = "0xCD9E3C")]
		public void finishDocking()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xCD9E50", Offset = "0xCD9E50", VA = "0xCD9E50")]
		public void finishUnDocking()
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xCD9E64", Offset = "0xCD9E64", VA = "0xCD9E64")]
		public bool isOccupied()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xCD9E6C", Offset = "0xCD9E6C", VA = "0xCD9E6C")]
		public FPEInteractableDockScript()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	[RequireComponent(typeof(AudioSource))]
	public class FPEInteractableInventoryItemScript : FPEInteractablePickupScript
	{
		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[UnityEngine.Tooltip("The type of inventory item this is.")]
		[SerializeField]
		[Header("Inventory Type and Quantity")]
		private FPEInventoryManagerScript.eInventoryItems inventoryItemType;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		[UnityEngine.Tooltip("The number of items of this type to give in inventory when this item is picked acquired (E.g. Box of 4 batteries would be 4). Default value is 1.")]
		private int inventoryQuantity;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Header("Additional Sounds")]
		[UnityEngine.Tooltip("Inventory Get sound (optional). This sound is played when the inventory item is grabbed by the player. If no sound is specified, the generic inventory sound will be used instead.")]
		[SerializeField]
		private AudioClip inventoryGetSound;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[UnityEngine.Tooltip("If true, player can pick this up to examine it. If false, they can only move object from world position into inventory. Note: for items where this is false, Interaction String should reflect this (e.g. use 'Take' rather than 'Pickup')")]
		[Header("Interaction Options")]
		[SerializeField]
		private bool pickupPermitted;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x111")]
		[Header("Permitted Actions")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, the player can move item from inventory into their hand.")]
		private bool canBeHeld;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x112")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, the player can drop from their inventory onto the ground")]
		private bool canBeDropped;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x113")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, the player can consume (eat, use, etc.) the item from inventory.")]
		private bool canBeConsumed;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Header("Inventory Screen Information")]
		[SerializeField]
		[UnityEngine.Tooltip("The short name or 'title' of the inventory item.")]
		private string itemName;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[UnityEngine.Tooltip("The image to represent the inventory item on the inventory screen.")]
		private Sprite itemImage;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[TextArea]
		[SerializeField]
		[UnityEngine.Tooltip("The long description of the item.")]
		private string itemDescription;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, all items of this type will be stacked into a single slot.")]
		private bool stackable;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private FPEInventoryConsumer myConsumer;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool hasBeenConsumed;

		[Token(Token = "0x17000110")]
		public FPEInventoryManagerScript.eInventoryItems InventoryItemType
		{
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xCD9F10", Offset = "0xCD9F10", VA = "0xCD9F10")]
			get
			{
				return default(FPEInventoryManagerScript.eInventoryItems);
			}
		}

		[Token(Token = "0x17000111")]
		public int InventoryQuantity
		{
			[Token(Token = "0x6000C80")]
			[Address(RVA = "0xCD9F18", Offset = "0xCD9F18", VA = "0xCD9F18")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000112")]
		public AudioClip InventoryGetSound
		{
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0xCD9F20", Offset = "0xCD9F20", VA = "0xCD9F20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public bool PickupPermitted
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0xCD9F28", Offset = "0xCD9F28", VA = "0xCD9F28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000114")]
		public bool CanBeHeld
		{
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0xCD9F30", Offset = "0xCD9F30", VA = "0xCD9F30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000115")]
		public bool CanBeDropped
		{
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0xCD9F38", Offset = "0xCD9F38", VA = "0xCD9F38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000116")]
		public bool CanBeConsumed
		{
			[Token(Token = "0x6000C85")]
			[Address(RVA = "0xCD9F40", Offset = "0xCD9F40", VA = "0xCD9F40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000117")]
		public string ItemName
		{
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0xCD9F48", Offset = "0xCD9F48", VA = "0xCD9F48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		public Sprite ItemImage
		{
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0xCD9F50", Offset = "0xCD9F50", VA = "0xCD9F50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public string ItemDescription
		{
			[Token(Token = "0x6000C88")]
			[Address(RVA = "0xCD9F58", Offset = "0xCD9F58", VA = "0xCD9F58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		public bool Stackable
		{
			[Token(Token = "0x6000C89")]
			[Address(RVA = "0xCD9F60", Offset = "0xCD9F60", VA = "0xCD9F60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xCD9F68", Offset = "0xCD9F68", VA = "0xCD9F68", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xCDA580", Offset = "0xCDA580", VA = "0xCDA580", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xCDA6EC", Offset = "0xCDA6EC", VA = "0xCDA6EC", Slot = "9")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xCDA89C", Offset = "0xCDA89C", VA = "0xCDA89C")]
		[Obsolete("getInventoryItemType() is deprecated, please use InventoryItemType instead.", true)]
		public FPEInventoryManagerScript.eInventoryItems getInventoryItemType()
		{
			return default(FPEInventoryManagerScript.eInventoryItems);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xCDA8A4", Offset = "0xCDA8A4", VA = "0xCDA8A4")]
		[Obsolete("getInventoryQuantity() is deprecated, please use InventoryQuantity instead.", true)]
		public int getInventoryQuantity()
		{
			return default(int);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xCDA8AC", Offset = "0xCDA8AC", VA = "0xCDA8AC")]
		public void consumeInventoryItem()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xCDA8E4", Offset = "0xCDA8E4", VA = "0xCDA8E4")]
		public FPEInteractableInventoryItemScript()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class FPEInteractableJournalScript : FPEInteractableBaseScript
	{
		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("You can optionally give the journal a new interaction string once it has been read (e.g. 'Some crumpled paper' becomes 'That old note from Grandma'). If left blank, the interaction string will remain unchanged.")]
		public string postReadInteractionString;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Journal Pages")]
		[UnityEngine.Tooltip("The journal pages that will be readable when the journal is opened. Must be 1 or more pages.")]
		public Sprite[] journalPages;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool hasBeenRead;

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xCDAA5C", Offset = "0xCDAA5C", VA = "0xCDAA5C", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xCDAA68", Offset = "0xCDAA68", VA = "0xCDAA68")]
		public void activateJournal()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xCDAAD8", Offset = "0xCDAAD8", VA = "0xCDAAD8")]
		public void deactivateJournal()
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xCDAB80", Offset = "0xCDAB80", VA = "0xCDAB80", Slot = "6")]
		public override bool interactionsAllowedWhenHoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xCDAB88", Offset = "0xCDAB88", VA = "0xCDAB88")]
		public FPEJournalSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xCDAC18", Offset = "0xCDAC18", VA = "0xCDAC18")]
		public void restoreSaveGameData(FPEJournalSaveData data)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xCDAC9C", Offset = "0xCDAC9C", VA = "0xCDAC9C")]
		public FPEInteractableJournalScript()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	[RequireComponent(typeof(AudioSource))]
	[RequireComponent(typeof(Collider))]
	[RequireComponent(typeof(Rigidbody))]
	public class FPEInteractablePickupScript : FPEInteractableBaseScript
	{
		[Token(Token = "0x20002B1")]
		public enum eRotationType
		{
			[Token(Token = "0x400109B")]
			FREE,
			[Token(Token = "0x400109C")]
			HORIZONTAL,
			[Token(Token = "0x400109D")]
			VERTICAL,
			[Token(Token = "0x400109E")]
			NONE
		}

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("The string that appears when object is being held, and put back position is highlighted by the reticle.")]
		public string putBackString;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("This replaces the interaction string for the object once it is examined by the player. If left blank, the interaction string will not be changed")]
		public string postExaminationInteractionString;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Object Position, Physics, Manipulation")]
		[UnityEngine.Tooltip("If checked, the script will automatically generate a put back location for you. NOTE: Game objects that use Models with mesh colliders may have mixed results. Check import rotation and collider vs. mesh rotations carefully.")]
		public bool autoGeneratePutBackObject;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("How far UP from examination position this object will be when examined. For example, if you wanted to direct the player to read the bottom of a bottle label, you'd want the bottle to be offset up so that the bottom of the label around the center of the screen.")]
		public float examinationOffsetUp;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("How far FORWARD (away from camera) the object will be when examined. When setting up big objects, this value should generally have a higher value (e.g. 1.0). Smaller objects should have a slightly negative value (e.g. -0.2)")]
		public float examinationOffsetForward;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("Some imported models might be flipped in one or more axes. If so, use this to offset that effect. Recommended approach is to ensure models are imported in same coordinate orientation as Unity, and leave this value as (0,0,0).")]
		public UnityEngine.Vector3 pickupRotationOffset;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UnityEngine.Tooltip("Toss Strength acts as a Physics Force multiplier when the object is tossed Higher values mean the object is tossed harder, and goes farther. Default is 1.0. 5.0 or above is probably too strong.")]
		public float tossStrength;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[UnityEngine.Tooltip("How far UP from examination position this object will be when toss/dropped. Bigger/heaver objects should have a higher value (default is 0.1)")]
		public float tossOffsetUp;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UnityEngine.Tooltip("How far FORWARD (away from camera) the object will be when toss/dropped. Bigger/heavier objects should have a higher value (default is 0.1)")]
		public float tossOffsetForward;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[UnityEngine.Tooltip("FREE - Free rotation in both axes.\nHORIZONTAL - Only rotate side to side.\nVERTICAL - Only rotate up and down.\nNONE - No rotation allowed.")]
		public eRotationType rotationLockType;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("Sound Management")]
		[UnityEngine.Tooltip("Uncheck this if you don't want this object to make sounds")]
		public bool enableSounds;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UnityEngine.Tooltip("Pick Up sounds (optional). If more than one is specified, a random sound will be chosen each time a sound of this type needs to be played")]
		[Header("If no sounds are specified, generic sounds will be used instead.")]
		public AudioClip[] pickupSounds;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UnityEngine.Tooltip("Put Down sounds (optional). If more than one is specified, a random sound will be chosen each time a sound of this type needs to be played")]
		public AudioClip[] putBackSounds;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UnityEngine.Tooltip("Physics sounds (optional). Played when object hits another object. If more than one is specified, a random sound will be chosen each time a sound of this type needs to be played")]
		public AudioClip[] impactSounds;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float impactSoundCountdown;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float minImpactSoundVolume;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool playImpactSounds;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		protected bool beingPutBack;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		protected bool pickedUp;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[UnityEngine.Tooltip("If specified, this event will fire when the object is picked up")]
		[SerializeField]
		[Header("Pickup and Put Back events")]
		private FPEGenericEvent OnPickupEvent;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[UnityEngine.Tooltip("If ONETIME, the event will only fire the first time object is picked up. If REPEAT, event will fire every time the object is picked up")]
		[SerializeField]
		private FPEGenericEvent.eRepeatMode pickupRepeatMode;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private bool pickupEventFiredOnce;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[UnityEngine.Tooltip("If specified, this event will fire when the object is put back")]
		private FPEGenericEvent OnPutBackEvent;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[UnityEngine.Tooltip("If ONETIME, the event will only fire the first time object is put back. If REPEAT, event will fire every time the object is put back")]
		private FPEGenericEvent.eRepeatMode putbackRepeatMode;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool putbackEventFiredOnce;

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xCDA144", Offset = "0xCDA144", VA = "0xCDA144", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xCDA7E8", Offset = "0xCDA7E8", VA = "0xCDA7E8", Slot = "9")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xCDB410", Offset = "0xCDB410", VA = "0xCDB410", Slot = "6")]
		public override bool interactionsAllowedWhenHoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xCDB418", Offset = "0xCDB418", VA = "0xCDB418")]
		private void OnCollisionEnter()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xCDB66C", Offset = "0xCDB66C", VA = "0xCDB66C", Slot = "10")]
		public virtual void doPickupPutdown(bool putback)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xCDB938", Offset = "0xCDB938", VA = "0xCDB938")]
		public void drop()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xCDB940", Offset = "0xCDB940", VA = "0xCDB940", Slot = "11")]
		public virtual void startExamination()
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xCDB944", Offset = "0xCDB944", VA = "0xCDB944", Slot = "12")]
		public virtual void endExamination()
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xCDB948", Offset = "0xCDB948", VA = "0xCDB948")]
		public bool isCurrentlyPickedUp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xCDACF0", Offset = "0xCDACF0", VA = "0xCDACF0")]
		private void generatePutBackPlace()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xCDA970", Offset = "0xCDA970", VA = "0xCDA970")]
		public FPEInteractablePickupScript()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public class FPEInteractableStaticScript : FPEInteractableBaseScript
	{
		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, player can interact with this while holding something. If false, they cannot.")]
		protected bool canInteractWithWhileHoldingObject;

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xCDB970", Offset = "0xCDB970", VA = "0xCDB970", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xCDB97C", Offset = "0xCDB97C", VA = "0xCDB97C", Slot = "6")]
		public override bool interactionsAllowedWhenHoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xCDB984", Offset = "0xCDB984", VA = "0xCDB984")]
		public FPEInteractableStaticScript()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public abstract class FPEInventoryConsumer : MonoBehaviour
	{
		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool consumptionStarted;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool consumptionCompleted;

		[Token(Token = "0x1700011B")]
		protected bool ConsumptionStarted
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0xCDB990", Offset = "0xCDB990", VA = "0xCDB990")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xCDB998", Offset = "0xCDB998", VA = "0xCDB998", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xCDBA18", Offset = "0xCDBA18", VA = "0xCDBA18", Slot = "5")]
		public virtual void consumeItem()
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xCDBA24", Offset = "0xCDBA24", VA = "0xCDBA24")]
		public void finishConsumption()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xCDBA30", Offset = "0xCDBA30", VA = "0xCDBA30")]
		protected FPEInventoryConsumer()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public class FPEPassiveAudioDiary : MonoBehaviour
	{
		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[UnityEngine.Tooltip("The audio diary title is displayed on screen when the diary is playing.")]
		private string diaryTitle;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("The actual audio clip the diary represents. This is played when the diary is triggered.")]
		private AudioClip diaryAudio;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("If true, the audio diary entry will play as soon as player looks at the parent object. If false, entry will not play until parent Interactable is interacted with.")]
		[SerializeField]
		private bool automaticPlayback;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[UnityEngine.Tooltip("If true, the audio diary entry will be added to the inventory list once playback starts.")]
		[SerializeField]
		private bool addEntryToInventory;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[UnityEngine.Tooltip("If true, audio title will be displayed during playback.")]
		[SerializeField]
		private bool showDiaryTitle;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		private bool hasBeenPlayed;

		[Token(Token = "0x1700011C")]
		public string DiaryTitle
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0xCDBA38", Offset = "0xCDBA38", VA = "0xCDBA38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public AudioClip DiaryAudio
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0xCDBA40", Offset = "0xCDBA40", VA = "0xCDBA40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		public bool AutomaticPlayback
		{
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0xCDBA48", Offset = "0xCDBA48", VA = "0xCDBA48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011F")]
		public bool AddEntryToInventory
		{
			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0xCDBA50", Offset = "0xCDBA50", VA = "0xCDBA50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000120")]
		public bool ShowDiaryTitle
		{
			[Token(Token = "0x6000CAF")]
			[Address(RVA = "0xCDBA58", Offset = "0xCDBA58", VA = "0xCDBA58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000121")]
		public bool HasBeenPlayed
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0xCDBA60", Offset = "0xCDBA60", VA = "0xCDBA60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xCDBA68", Offset = "0xCDBA68", VA = "0xCDBA68")]
		public void collectAudioDiary()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xCDBA74", Offset = "0xCDBA74", VA = "0xCDBA74")]
		public FPEAudioDiaryPlayedStateSaveData getSaveGameData()
		{
			return null;
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xCDBB04", Offset = "0xCDBB04", VA = "0xCDBB04")]
		public void restoreSaveGameData(FPEAudioDiaryPlayedStateSaveData data)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xCDBB20", Offset = "0xCDBB20", VA = "0xCDBB20")]
		public FPEPassiveAudioDiary()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	[RequireComponent(typeof(Collider))]
	public class FPEPutBackScript : MonoBehaviour
	{
		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If set in the inspector, this put back position will be tied to the assigned object. This allows for drag and drop assignment in the Scene editor.")]
		public UnityEngine.GameObject myPickupObject;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The maximum straight-line distance from the player that an object can be put back. Strongly recommended that this be given the same value as the Pickup Object's interaction distance if manually creating Put Back object.")]
		public float interactionDistance;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string objectNameToMatch;

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xCDBB88", Offset = "0xCDBB88", VA = "0xCDBB88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xCDBD5C", Offset = "0xCDBD5C", VA = "0xCDBD5C")]
		public bool putBackMatchesGameObject(UnityEngine.GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xCDB950", Offset = "0xCDB950", VA = "0xCDB950")]
		public void assignMatchingForGameObject(UnityEngine.GameObject go)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xCDBCC0", Offset = "0xCDBCC0", VA = "0xCDBCC0")]
		private string generateMatchStringFromGameObject(UnityEngine.GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xCDBD7C", Offset = "0xCDBD7C", VA = "0xCDBD7C")]
		public void setInteractionDistance(float distance)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xCDBD84", Offset = "0xCDBD84", VA = "0xCDBD84")]
		public float getInteractionDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xCDBD8C", Offset = "0xCDBD8C", VA = "0xCDBD8C")]
		public FPEPutBackScript()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	[RequireComponent(typeof(BoxCollider))]
	public class FPEDoorway : MonoBehaviour
	{
		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The scene build index of the connected scene. When Player enters the door trigger, this scene is loaded. When player returns to this scene from the connected scene, player will be placed at the doorway transform.")]
		[SerializeField]
		private int connectedSceneIndex;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("The transform that will act as the 'Entrance' for the player. When the player uses this door to ENTER a level, they are placed at the entrance transform.")]
		private Transform doorwayEntranceTransform;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, current level's state will be saved before changing to next scene. If false, current level's state will not be saved. It is strongly recommended that ALL doors in your game do this consistently.")]
		private bool autoSaveOnExit;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BoxCollider myCollider;

		[Token(Token = "0x17000122")]
		public int ConnectedSceneIndex
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0xCDBDEC", Offset = "0xCDBDEC", VA = "0xCDBDEC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000123")]
		public Transform DoorwayEntranceTransform
		{
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xCDBDF4", Offset = "0xCDBDF4", VA = "0xCDBDF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xCDBDFC", Offset = "0xCDBDFC", VA = "0xCDBDFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xCDBF44", Offset = "0xCDBF44", VA = "0xCDBF44")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xCDC1C0", Offset = "0xCDC1C0", VA = "0xCDC1C0")]
		public FPEDoorway()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class FPEPlayerStartLocation : MonoBehaviour
	{
		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xCDC1D0", Offset = "0xCDC1D0", VA = "0xCDC1D0")]
		public FPEPlayerStartLocation()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public abstract class FPEGenericSaveableGameObject : MonoBehaviour, FPEGenericSaveableInterface
	{
		[Token(Token = "0x6000CC2")]
		public abstract FPEGenericObjectSaveData getSaveGameData();

		[Token(Token = "0x6000CC3")]
		public abstract void restoreSaveGameData(FPEGenericObjectSaveData data);

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xCDC1D8", Offset = "0xCDC1D8", VA = "0xCDC1D8")]
		protected FPEGenericSaveableGameObject()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	internal interface FPEGenericSaveableInterface
	{
		[Token(Token = "0x6000CC5")]
		FPEGenericObjectSaveData getSaveGameData();

		[Token(Token = "0x6000CC6")]
		void restoreSaveGameData(FPEGenericObjectSaveData data);
	}
	[Token(Token = "0x20002BA")]
	public class FPESaveLoadLogic : MonoBehaviour
	{
		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPEObjectTypeLookup myLookup;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<FPEInventoryManagerScript.eInventoryItems, string> inventoryLookupTable;

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xCDC1E0", Offset = "0xCDC1E0", VA = "0xCDC1E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xCDC264", Offset = "0xCDC264", VA = "0xCDC264")]
		public FPESceneSaveData gatherSceneData()
		{
			return null;
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xCDC30C", Offset = "0xCDC30C", VA = "0xCDC30C")]
		public FPEInventorySaveData gatherInventorySaveData()
		{
			return null;
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xCDCA84", Offset = "0xCDCA84", VA = "0xCDCA84")]
		public void restoreInventorySaveData(FPEInventorySaveData data)
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xCDDA38", Offset = "0xCDDA38", VA = "0xCDDA38")]
		public FPEInventoryWorldSaveData[] gatherInventoryInWorld()
		{
			return null;
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xCDDF98", Offset = "0xCDDF98", VA = "0xCDDF98")]
		public void removeAllInventoryInWorld(bool removeHeldObject)
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xCDE1C4", Offset = "0xCDE1C4", VA = "0xCDE1C4")]
		public void createWorldInventory(FPEInventoryWorldSaveData[] data)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xCDE788", Offset = "0xCDE788", VA = "0xCDE788")]
		public FPEPickupWorldSaveData[] gatherPickupsInWorld()
		{
			return null;
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xCDEE90", Offset = "0xCDEE90", VA = "0xCDEE90")]
		public void removeAllPickupsInWorld(bool removeHeldObject)
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xCDF1B8", Offset = "0xCDF1B8", VA = "0xCDF1B8")]
		public void createWorldPickups(FPEPickupWorldSaveData[] data)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xCDF5E0", Offset = "0xCDF5E0", VA = "0xCDF5E0")]
		public FPEPlayerStateSaveData gatherPlayerData()
		{
			return null;
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xCDF6FC", Offset = "0xCDF6FC", VA = "0xCDF6FC")]
		public void relocatePlayer(FPEPlayerStateSaveData stateData)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xCDF824", Offset = "0xCDF824", VA = "0xCDF824")]
		public FPETriggerSaveData[] gatherTriggerData()
		{
			return null;
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xCDF964", Offset = "0xCDF964", VA = "0xCDF964")]
		public void restoreTriggerData(FPETriggerSaveData[] data)
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xCDFB54", Offset = "0xCDFB54", VA = "0xCDFB54")]
		public FPEActivateSaveData[] gatherActivateTypeData()
		{
			return null;
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xCDFC90", Offset = "0xCDFC90", VA = "0xCDFC90")]
		public void restoreActivateData(FPEActivateSaveData[] data)
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xCDFE7C", Offset = "0xCDFE7C", VA = "0xCDFE7C")]
		public FPEDoorSaveData[] gatherDoorTypeData()
		{
			return null;
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xCE0130", Offset = "0xCE0130", VA = "0xCE0130")]
		public void restoreDoorData(FPEDoorSaveData[] data)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xCE0328", Offset = "0xCE0328", VA = "0xCE0328")]
		public FPEDrawerSaveData[] gatherDrawerTypeData()
		{
			return null;
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xCE05D0", Offset = "0xCE05D0", VA = "0xCE05D0")]
		public void restoreDrawerData(FPEDrawerSaveData[] data)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xCE07BC", Offset = "0xCE07BC", VA = "0xCE07BC")]
		public FPEAttachedNoteSaveData[] gatherAttachedNoteTypeData()
		{
			return null;
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xCE08F8", Offset = "0xCE08F8", VA = "0xCE08F8")]
		public void restoreAttachedNoteData(FPEAttachedNoteSaveData[] data)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xCE0AEC", Offset = "0xCE0AEC", VA = "0xCE0AEC")]
		public FPEAudioDiaryPlayedStateSaveData[] gatherAudioDiaryPlayedStateData()
		{
			return null;
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xCE0CDC", Offset = "0xCE0CDC", VA = "0xCE0CDC")]
		public void restoreAudioDiaryPlaybackStateData(FPEAudioDiaryPlayedStateSaveData[] data)
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xCE0FA4", Offset = "0xCE0FA4", VA = "0xCE0FA4")]
		public FPEJournalSaveData[] gatherJournalSaveData()
		{
			return null;
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xCE10E0", Offset = "0xCE10E0", VA = "0xCE10E0")]
		public void restoreJournalData(FPEJournalSaveData[] data)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xCE12CC", Offset = "0xCE12CC", VA = "0xCE12CC")]
		public FPEGameOptionsSaveData gatherGameOptionsSaveData()
		{
			return null;
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xCE1388", Offset = "0xCE1388", VA = "0xCE1388")]
		public void restoreGameOptionsData(FPEGameOptionsSaveData data)
		{
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xCE14D0", Offset = "0xCE14D0", VA = "0xCE14D0")]
		public FPEGenericObjectSaveData[] gatherGenericSaveTypeData()
		{
			return null;
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xCE1714", Offset = "0xCE1714", VA = "0xCE1714")]
		public void restoreGenericSaveTypeData(FPEGenericObjectSaveData[] data)
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xCE1908", Offset = "0xCE1908", VA = "0xCE1908")]
		public FPESaveLoadLogic()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class FPESaveLoadManager : MonoBehaviour
	{
		[Token(Token = "0x20002BC")]
		private enum eOperationStatus
		{
			[Token(Token = "0x40010D7")]
			IDLE,
			[Token(Token = "0x40010D8")]
			SAVING_GAME,
			[Token(Token = "0x40010D9")]
			LOADING_GAME,
			[Token(Token = "0x40010DA")]
			CHANGING_SCENE,
			[Token(Token = "0x40010DB")]
			CHANGING_SCENE_NOSAVE,
			[Token(Token = "0x40010DC")]
			RETURN_TO_MAIN_MENU,
			[Token(Token = "0x40010DD")]
			UX_WAIT
		}

		[Token(Token = "0x20002BD")]
		private enum eChangeSceneStatus
		{
			[Token(Token = "0x40010DF")]
			IDLE,
			[Token(Token = "0x40010E0")]
			SAVING,
			[Token(Token = "0x40010E1")]
			LOADING_NEXT_SCENE,
			[Token(Token = "0x40010E2")]
			RESTORING_SCENE_DATA
		}

		[Token(Token = "0x20002BE")]
		private enum eLoadGameStatus
		{
			[Token(Token = "0x40010E4")]
			IDLE,
			[Token(Token = "0x40010E5")]
			LOADING_LAST_SCENE,
			[Token(Token = "0x40010E6")]
			RESTORING_SCENE_DATA
		}

		[Token(Token = "0x20002BF")]
		[CompilerGenerated]
		private sealed class <loadNewScene>d__69 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FPESaveLoadManager <>4__this;

			[Token(Token = "0x40010EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int sceneIndex;

			[Token(Token = "0x17000127")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D07")]
				[Address(RVA = "0xCE4A1C", Offset = "0xCE4A1C", VA = "0xCE4A1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000128")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D09")]
				[Address(RVA = "0xCE4A64", Offset = "0xCE4A64", VA = "0xCE4A64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xCE472C", Offset = "0xCE472C", VA = "0xCE472C")]
			[DebuggerHidden]
			public <loadNewScene>d__69(int <>1__state)
			{
			}

			[Token(Token = "0x6000D05")]
			[Address(RVA = "0xCE49B4", Offset = "0xCE49B4", VA = "0xCE49B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D06")]
			[Address(RVA = "0xCE49B8", Offset = "0xCE49B8", VA = "0xCE49B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xCE4A24", Offset = "0xCE4A24", VA = "0xCE4A24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002C0")]
		[CompilerGenerated]
		private sealed class <saveDataForCurrentScene>d__70 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FPESaveLoadManager <>4__this;

			[Token(Token = "0x40010EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool fullSave;

			[Token(Token = "0x17000129")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D0D")]
				[Address(RVA = "0xCE52E4", Offset = "0xCE52E4", VA = "0xCE52E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D0F")]
				[Address(RVA = "0xCE532C", Offset = "0xCE532C", VA = "0xCE532C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xCE4754", Offset = "0xCE4754", VA = "0xCE4754")]
			[DebuggerHidden]
			public <saveDataForCurrentScene>d__70(int <>1__state)
			{
			}

			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xCE4A6C", Offset = "0xCE4A6C", VA = "0xCE4A6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0xCE4A70", Offset = "0xCE4A70", VA = "0xCE4A70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xCE52EC", Offset = "0xCE52EC", VA = "0xCE52EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002C1")]
		[CompilerGenerated]
		private sealed class <restoreDataForCurrentScene>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool fullLoad;

			[Token(Token = "0x40010F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public FPESaveLoadManager <>4__this;

			[Token(Token = "0x1700012B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D13")]
				[Address(RVA = "0xCE5E90", Offset = "0xCE5E90", VA = "0xCE5E90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D15")]
				[Address(RVA = "0xCE5ED8", Offset = "0xCE5ED8", VA = "0xCE5ED8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xCE477C", Offset = "0xCE477C", VA = "0xCE477C")]
			[DebuggerHidden]
			public <restoreDataForCurrentScene>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x6000D11")]
			[Address(RVA = "0xCE5334", Offset = "0xCE5334", VA = "0xCE5334", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D12")]
			[Address(RVA = "0xCE5338", Offset = "0xCE5338", VA = "0xCE5338", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D14")]
			[Address(RVA = "0xCE5E98", Offset = "0xCE5E98", VA = "0xCE5E98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPESaveLoadManager _instance;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("UI Components")]
		[UnityEngine.Tooltip("The parent game object that houses your save/load status. Should probably just be a Canvas child of this game object.")]
		[SerializeField]
		private UnityEngine.GameObject loadingUIParentCanvas;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("The text component that will display the status string while a save or load operation is in progress.")]
		private Text statusText;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("The progress indication spinner. It spins while save/load operation is in progress.")]
		private RectTransform progressSpinner;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The degrees per second the spinner should spin. Defaulty is 360.")]
		[SerializeField]
		private float spinnerRotationRate;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[UnityEngine.Tooltip("If a save or load takes less time than this, the save/load UI remains displayed for the difference. May help address general UX gulf issues.")]
		private float minimumUIDisplayTime;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool savingInProgress;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool loadingLevelInProgress;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool restoringDataInProgress;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float operationStartTime;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool resetPlayerLook;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		private bool returningToMainMenu;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private readonly int invalidSceneIndexToken;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int previousSceneIndex;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int destinationSceneIndex;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("This is the build index of the first 'real level' scene of your game. For example, if your Main Menu scene is at build index 0, and the starting level scene is at build index 1, make this value 1.")]
		[SerializeField]
		[Header("Scene Management")]
		private int firstLevelSceneBuildIndex;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		[UnityEngine.Tooltip("The build index of the scene that is considered to be your Main Menu (default is 0)")]
		private int mainMenuSceneBuildIndex;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private eOperationStatus currentOperationStatus;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private eChangeSceneStatus currentChangeSceneStatus;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private eLoadGameStatus currentLoadGameStatus;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string baseSavePath;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string autoSavePath;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string fullSavePath;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string autoSaveDirName;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string fullSaveDirName;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string coreSaveFile;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private string playerLocationDataSaveFile;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private string inventoryDataSaveFile;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private string optionsDataSaveFile;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private string levelDataFilePrefix;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private string levelDataFilePostfix;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private string optionsDataSaveFileFullPath;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private string fullCoreSaveFileFullPath;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private string fullPlayerLocationDataSaveFileFullPath;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private string fullInventoryDataSaveFileFullPath;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private FPESaveLoadLogic mySaveLoadLogic;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool initialized;

		[Token(Token = "0x17000124")]
		public static FPESaveLoadManager Instance
		{
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0xCE1910", Offset = "0xCE1910", VA = "0xCE1910")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000125")]
		public int FirstLevelSceneBuildIndex
		{
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0xCE1958", Offset = "0xCE1958", VA = "0xCE1958")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000126")]
		public int MainMenuSceneBuildIndex
		{
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0xCE1960", Offset = "0xCE1960", VA = "0xCE1960")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xCE1968", Offset = "0xCE1968", VA = "0xCE1968")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xCE1E60", Offset = "0xCE1E60", VA = "0xCE1E60")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xCE1F04", Offset = "0xCE1F04", VA = "0xCE1F04")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xCE1AE4", Offset = "0xCE1AE4", VA = "0xCE1AE4")]
		private void initialize()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xCE1FA8", Offset = "0xCE1FA8", VA = "0xCE1FA8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xCE28A8", Offset = "0xCE28A8", VA = "0xCE28A8")]
		private void initializeOperation(eOperationStatus opType)
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xCE2744", Offset = "0xCE2744", VA = "0xCE2744")]
		private void endOperation()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xCE2C18", Offset = "0xCE2C18", VA = "0xCE2C18")]
		public void loadScene(int sceneIndex)
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xCE2C84", Offset = "0xCE2C84", VA = "0xCE2C84")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xCE2C8C", Offset = "0xCE2C8C", VA = "0xCE2C8C")]
		public void SaveGame()
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xCE2D44", Offset = "0xCE2D44", VA = "0xCE2D44")]
		public void LoadGame()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xCDC054", Offset = "0xCDC054", VA = "0xCDC054")]
		public void ChangeSceneToAndAutoSave(int sceneIndex)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xCDC0F8", Offset = "0xCDC0F8", VA = "0xCDC0F8")]
		public void ChangeSceneToNoSave(int sceneIndex)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xCE3374", Offset = "0xCE3374", VA = "0xCE3374")]
		public void ReturnToMainMenu()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xCE2DF4", Offset = "0xCE2DF4", VA = "0xCE2DF4")]
		public bool SavedGameExists()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xCE3414", Offset = "0xCE3414", VA = "0xCE3414")]
		public bool StartANewGame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xCE3D20", Offset = "0xCE3D20", VA = "0xCE3D20")]
		public bool SaveGameOptions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xCE3F7C", Offset = "0xCE3F7C", VA = "0xCE3F7C")]
		public bool LoadGameOptions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xCE226C", Offset = "0xCE226C", VA = "0xCE226C")]
		private void updateStatusMessage(string msg)
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xCE30C8", Offset = "0xCE30C8", VA = "0xCE30C8")]
		private int fetchLastSavedGameSceneIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xCE239C", Offset = "0xCE239C", VA = "0xCE239C")]
		private void movePlayerToSuitableEntranceOrStartPosition()
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xCE3AC8", Offset = "0xCE3AC8", VA = "0xCE3AC8")]
		private bool deleteAllLevelDataFromPath(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xCE42E0", Offset = "0xCE42E0", VA = "0xCE42E0")]
		private bool copyAllLevelDataFromPathToPath(string sourcePath, string destPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xCE2318", Offset = "0xCE2318", VA = "0xCE2318")]
		[IteratorStateMachine(typeof(<loadNewScene>d__69))]
		private IEnumerator loadNewScene(int sceneIndex)
		{
			return null;
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xCE2CBC", Offset = "0xCE2CBC", VA = "0xCE2CBC")]
		[IteratorStateMachine(typeof(<saveDataForCurrentScene>d__70))]
		private IEnumerator saveDataForCurrentScene(bool fullSave)
		{
			return null;
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xCE2290", Offset = "0xCE2290", VA = "0xCE2290")]
		[IteratorStateMachine(typeof(<restoreDataForCurrentScene>d__71))]
		private IEnumerator restoreDataForCurrentScene(bool fullLoad)
		{
			return null;
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xCE47A4", Offset = "0xCE47A4", VA = "0xCE47A4")]
		public FPESaveLoadManager()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public class FPEBuildIndexTester : MonoBehaviour
	{
		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int buildIndexToCheck;

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xCE5EE0", Offset = "0xCE5EE0", VA = "0xCE5EE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xCE624C", Offset = "0xCE624C", VA = "0xCE624C")]
		public FPEBuildIndexTester()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class FPEInteractableDebugger : MonoBehaviour
	{
		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPEInteractionManagerScript interactionManager;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text myDebugText;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string[] currentInteractionData;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool drawInteractDebug;

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xCE625C", Offset = "0xCE625C", VA = "0xCE625C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xCE638C", Offset = "0xCE638C", VA = "0xCE638C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xCE69D8", Offset = "0xCE69D8", VA = "0xCE69D8")]
		public FPEInteractableDebugger()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	public class FPEAudioDiaryData
	{
		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string _diaryTitle;

		[Token(Token = "0x1700012D")]
		public string DiaryTitle
		{
			[Token(Token = "0x6000D1B")]
			[Address(RVA = "0xCE69E8", Offset = "0xCE69E8", VA = "0xCE69E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xCE69F0", Offset = "0xCE69F0", VA = "0xCE69F0")]
		public FPEAudioDiaryData(string diaryTitle)
		{
		}
	}
	[Token(Token = "0x20002C5")]
	public class FPEAudioDiaryEntrySlot : Selectable, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private UnityEngine.Color regularColor;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private UnityEngine.Color highlightColor;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private UnityEngine.Color disabledColor;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Image frameImage;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Image iconImage;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Text myTitle;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool highlighted;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private FPEAudioDiaryEntrySlot[] allDiarySlots;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int currentAudioDiaryIndex;

		[Token(Token = "0x1700012E")]
		public int CurrentAudioDiaryIndex
		{
			[Token(Token = "0x6000D1D")]
			[Address(RVA = "0xCE6A68", Offset = "0xCE6A68", VA = "0xCE6A68")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xCE6A70", Offset = "0xCE6A70", VA = "0xCE6A70", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xCE6D3C", Offset = "0xCE6D3C", VA = "0xCE6D3C", Slot = "34")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xCE6E24", Offset = "0xCE6E24", VA = "0xCE6E24", Slot = "35")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xCE6EAC", Offset = "0xCE6EAC", VA = "0xCE6EAC", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xCE6EDC", Offset = "0xCE6EDC", VA = "0xCE6EDC", Slot = "39")]
		public void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xCE6EF4", Offset = "0xCE6EF4", VA = "0xCE6EF4", Slot = "31")]
		public override void OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xCE6EFC", Offset = "0xCE6EFC", VA = "0xCE6EFC", Slot = "36")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xCE6F18", Offset = "0xCE6F18", VA = "0xCE6F18", Slot = "37")]
		public override void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xCE6F34", Offset = "0xCE6F34", VA = "0xCE6F34")]
		public void ForceUnhighlight()
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xCE6E28", Offset = "0xCE6E28", VA = "0xCE6E28")]
		private void unhighlight()
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xCE6F38", Offset = "0xCE6F38", VA = "0xCE6F38")]
		public void enableSlot()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xCE6FA4", Offset = "0xCE6FA4", VA = "0xCE6FA4")]
		public void disableSlot()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xCE7018", Offset = "0xCE7018", VA = "0xCE7018")]
		private void playDiary()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xCE6EC4", Offset = "0xCE6EC4", VA = "0xCE6EC4")]
		private void executeClick()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xCE6D40", Offset = "0xCE6D40", VA = "0xCE6D40")]
		private void executeSelect()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xCE70A8", Offset = "0xCE70A8", VA = "0xCE70A8")]
		public void setAudioData(int index, string title)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xCE7104", Offset = "0xCE7104", VA = "0xCE7104")]
		public void clearAudioData()
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xCE7190", Offset = "0xCE7190", VA = "0xCE7190")]
		public FPEAudioDiaryEntrySlot()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class FPEDefaultHUD : FPEHUD
	{
		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Uncheck this to disabled HUD completely. If this is false, the values of the other checkboxes in this section will have no effect.")]
		[Header("General")]
		public bool HUDEnabled;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[UnityEngine.Tooltip("Uncheck this to disable Reticle completely")]
		public bool reticleEnabled;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[UnityEngine.Tooltip("Uncheck this to disable Interaction Text completely")]
		public bool interactionTextEnabled;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		[UnityEngine.Tooltip("Uncheck this to disable Control Hints completely")]
		public bool controlHintUIEnabled;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Uncheck this to disable Audio Diary labels and icon")]
		public bool audioDiaryUIEnabled;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[UnityEngine.Tooltip("Uncheck this to disable Notification label")]
		public bool notificationUIEnabled;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Reticle")]
		[UnityEngine.Tooltip("Reticle sprite when it is inactive")]
		public Sprite inactiveReticle;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Reticle sprite when it is active")]
		public Sprite activeReticle;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Reticle sprite when action is not permitted or unavailable")]
		public Sprite unavailableReticle;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Custom Journal Cursor. Note: Only works when using Unity 5+")]
		public Texture2D journalCursor;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RectTransform reticle;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RectTransform interactionLabel;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 interactionLabelTargetScale;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 interactionLabelLargestScale;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 interactionLabelSmallestScale;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float interactionLabelScaleChangeFactor;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.GameObject journalCloseIndicator;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.GameObject journalPreviousButton;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.GameObject journalNextButton;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private UnityEngine.GameObject journalBackground;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.GameObject journalPage;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RectTransform audioDiaryLabel;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private UnityEngine.Vector3 audioDiaryLabelTargetScale;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private UnityEngine.Vector3 audioDiaryLabelLargestScale;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private UnityEngine.Vector3 audioDiaryLabelSmallestScale;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RectTransform audioDiarySkipHintLabel;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool audioDiaryIsPlaying;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		private bool fadingDiaryText;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private UnityEngine.Color defaultDiaryColor;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private UnityEngine.Color diaryFadeColor;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private RectTransform notificationLabel;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private UnityEngine.Vector3 notificationLabelTargetScale;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private UnityEngine.Vector3 notificationLabelLargestScale;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private UnityEngine.Vector3 notificationLabelSmallestScale;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private bool fadingNotificationText;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private UnityEngine.Color defaultNotificationColor;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private UnityEngine.Color notificationFadeColor;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float notificationCounter;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float notificationDuration;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float notificationColorLerpFactor;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float notificationScaleLerpFactor;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Header("Control Hints UI")]
		[UnityEngine.Tooltip("Text hint for Pick Up action")]
		public string mouseHintPickUpText;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[UnityEngine.Tooltip("Text hint for Pick Up object when hands are full")]
		public string mouseHintPickUpHandsFullText;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[UnityEngine.Tooltip("Text hint for Put Back action")]
		public string mouseHintPutBackText;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[UnityEngine.Tooltip("Text hint for Examine action")]
		public string mouseHintExamineText;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[UnityEngine.Tooltip("Text hint for Drop action")]
		public string mouseHintDropText;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[UnityEngine.Tooltip("Text hint for Zoom In action")]
		public string mouseHintZoomText;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[UnityEngine.Tooltip("Text hint for Activate action")]
		public string mouseHintActivateText;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[UnityEngine.Tooltip("Text hint for telling player they need 2 hands to activate an object")]
		public string activateTwoHandsHint;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[UnityEngine.Tooltip("Text hint for Journal Read action")]
		public string mouseHintJournalText;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[UnityEngine.Tooltip("Text hint for telling player they need 2 hands to read a journal")]
		public string journalTwoHandsHint;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[UnityEngine.Tooltip("Text hint for Inventory 'Pre' action-from-world text (e.g. Take [x] ")]
		public string inventoryHintFromWorldPreText;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[UnityEngine.Tooltip("Text hint for Inventory 'Post' action-from-hand text (e.g. PUT [x] [postText]")]
		public string inventoryHintFromHandPreText;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[UnityEngine.Tooltip("Text hint for Inventory 'Post' action-from-hand text (e.g. [preText] [x] AWAY")]
		public string inventoryHintFromHandPostText;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[UnityEngine.Tooltip("Text hint for Audio Diary manual playback")]
		public string audioDiaryHint;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[UnityEngine.Tooltip("UI label for prefix audio diary title (e.g. PLAYING [diaryTitle] [postText]")]
		public string audioDiaryPlayingPreText;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[UnityEngine.Tooltip("UI label for prefix audio diary title replay from inventory (e.g. RE-PLAYING [diaryTitle] [postText]")]
		public string audioDiaryReplayPreText;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[UnityEngine.Tooltip("UI label for postfix audio diary title (e.g. [preText] [diaryTitle] [postText]")]
		public string audioDiaryPlayingPostText;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private FPEUIHint zoomExamineHint;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private FPEUIHint interactHint;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private FPEUIHint inventoryHint;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private FPEUIHint unDockHint;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool manuallyHidingInterface;

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xCE8218", Offset = "0xCE8218", VA = "0xCE8218", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xCE8230", Offset = "0xCE8230", VA = "0xCE8230", Slot = "5")]
		public override void initialize()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xCE8FD8", Offset = "0xCE8FD8", VA = "0xCE8FD8", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xCE9898", Offset = "0xCE9898", VA = "0xCE9898")]
		private void activateReticle(string interactionString, string additionalHint = "")
		{
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xCE99FC", Offset = "0xCE99FC", VA = "0xCE99FC")]
		private void deactivateReticle()
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xCE9AD0", Offset = "0xCE9AD0", VA = "0xCE9AD0")]
		private void hideReticleAndInteractionLabel()
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xCE9BBC", Offset = "0xCE9BBC", VA = "0xCE9BBC")]
		private void showReticleAndInteractionLabel()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xCE8F24", Offset = "0xCE8F24", VA = "0xCE8F24")]
		private void setMouseHints(string zoomExamineHintText, string interactHintText, string inventoryHintText)
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xCE9CA8", Offset = "0xCE9CA8", VA = "0xCE9CA8")]
		private void setDockHint(string dockHintText)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xCE9D08", Offset = "0xCE9D08", VA = "0xCE9D08", Slot = "7")]
		protected override void updateHUD()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xCEA7A0", Offset = "0xCEA7A0", VA = "0xCEA7A0")]
		private void hideAllUI()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xCEA7F8", Offset = "0xCEA7F8", VA = "0xCEA7F8")]
		private void unhideAllUI()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xCEA8D8", Offset = "0xCEA8D8", VA = "0xCEA8D8", Slot = "8")]
		public override void InteractionStateChangeTo(FPEInteractionManagerScript.eInteractionState updatedState)
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xCEA908", Offset = "0xCEA908", VA = "0xCEA908", Slot = "9")]
		public override void ShowNotification(string message)
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xCEA9CC", Offset = "0xCEA9CC", VA = "0xCEA9CC", Slot = "10")]
		public override void StartPlayingNewAudioDiary(string title, bool isReplay)
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xCEAC7C", Offset = "0xCEAC7C", VA = "0xCEAC7C", Slot = "11")]
		public override void StopPlayingAudioDiary()
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xCEAD44", Offset = "0xCEAD44", VA = "0xCEAD44", Slot = "12")]
		public override void ResetAudioDiaryLabel()
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xCEADEC", Offset = "0xCEADEC", VA = "0xCEADEC", Slot = "13")]
		public override void FadeAudioDiaryLabel()
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xCEAE24", Offset = "0xCEAE24", VA = "0xCEAE24", Slot = "14")]
		public override void ShowJournalUI()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xCEAF24", Offset = "0xCEAF24", VA = "0xCEAF24", Slot = "15")]
		public override void SetJournalPage(Sprite journalPageSprite)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xCEAFA0", Offset = "0xCEAFA0", VA = "0xCEAFA0", Slot = "16")]
		public override void HideJournalUI()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xCEB014", Offset = "0xCEB014", VA = "0xCEB014", Slot = "17")]
		public override void PreviousJournalPage()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xCEB060", Offset = "0xCEB060", VA = "0xCEB060", Slot = "18")]
		public override void NextJournalPage()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xCEB0AC", Offset = "0xCEB0AC", VA = "0xCEB0AC", Slot = "19")]
		public override void CloseJournal()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xCEB0FC", Offset = "0xCEB0FC", VA = "0xCEB0FC")]
		public FPEDefaultHUD()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class FPEGameMenu : FPEMenu
	{
		[Token(Token = "0x20002C8")]
		public enum eMenuTab
		{
			[Token(Token = "0x4001180")]
			ITEMS,
			[Token(Token = "0x4001181")]
			AUDIO_DIARIES,
			[Token(Token = "0x4001182")]
			NOTES,
			[Token(Token = "0x4001183")]
			SYSTEM
		}

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private eMenuTab currentMenuTab;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Menu Audio")]
		[SerializeField]
		private AudioClip menuOpen;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private AudioClip menuClose;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AudioClip menuSelect;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AudioClip menuTabSelect;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioClip menuBack;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip menuError;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private AudioClip menuDiaryPlayback;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private AudioClip menuDiaryStop;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AudioClip menuPageTurn;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private AudioClip menuGenericButton;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource menuAudio;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.GameObject menuCanvas;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FPEInventoryItemData[] itemData;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private FPEAudioDiaryData[] audioDiaryData;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private FPENoteData[] noteData;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private FPEMenuTab itemsTab;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private FPEMenuTab audioDiariesTab;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private FPEMenuTab notesTab;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private FPEMenuTab systemTab;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UnityEngine.GameObject inventoryItemsListPanel;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private UnityEngine.GameObject inventoryItemInfoPanelParent;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private FPEInventoryItemInfoPanel itemInfoPanel;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private UnityEngine.GameObject audioDiariesPanel;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private UnityEngine.GameObject notesPanel;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private UnityEngine.GameObject noteContentsPanelParent;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private FPENoteContentsPanel noteContentsPanel;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private UnityEngine.GameObject systemPanel;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private UnityEngine.GameObject exitConfirmationPanel;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private UnityEngine.GameObject actionsPanelParent;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private FPEInventoryActionsPanel inventoryActionsPanel;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private UnityEngine.GameObject pageControlPanel;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private FPEInventoryItemSlot[] inventorySlots;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private FPEAudioDiaryEntrySlot[] audioDiarySlots;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private FPENoteEntrySlot[] noteSlots;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private FPEMenuButton[] systemButtons;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private FPEMenuButton[] exitConfirmationButtons;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private UnityEngine.GameObject previousPageButton;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private UnityEngine.GameObject nextPageButton;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private UnityEngine.GameObject previousPageHint;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private UnityEngine.GameObject nextPageHint;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Text pageIndicatorText;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private eMenuTab previouslySelectedTab;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private FPEInventoryItemSlot previouslySelectedItemSlot;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private int slotActionItemIndex;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private FPEAudioDiaryEntrySlot previouslySelectedAudioDiarySlot;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private int previouslySelectedNoteSlotIndex;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private int[] itemsPerPage;

		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private int[] previouslySelectedPage;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		[UnityEngine.Tooltip("Minimum allowed mouse sensitivity value.")]
		private float minSensitivity;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[UnityEngine.Tooltip("Maximum allowed mouse sensitivity value")]
		[SerializeField]
		private float maxSensitivity;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Text mouseSensitivityValueText;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private FPEMenuToggle lookSmoothingToggle;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private FPEMenuToggle useGamepadToggle;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private FPEMenuButton loadGameButton;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, elements such as tabs will jiggle when an error occurs. For example, when player tries to move left from the leftmost tab.")]
		private bool shakeUIOnError;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private RectTransform elementToJiggle;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private UnityEngine.Vector3 originalElementPosition;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private float jiggleDuration;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private float jiggleDistance;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private float jiggleTimer;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private float jiggleOffset;

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xCEB4CC", Offset = "0xCEB4CC", VA = "0xCEB4CC", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xCECB00", Offset = "0xCECB00", VA = "0xCECB00", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xCECD20", Offset = "0xCECD20", VA = "0xCECD20", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xCED3B8", Offset = "0xCED3B8", VA = "0xCED3B8", Slot = "7")]
		public override void activateMenu()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xCED55C", Offset = "0xCED55C", VA = "0xCED55C", Slot = "8")]
		public override void deactivateMenu()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xCED7CC", Offset = "0xCED7CC", VA = "0xCED7CC")]
		public void changeMenuTabTo(int tab)
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xCED428", Offset = "0xCED428", VA = "0xCED428")]
		private void restoreTabSelection(eMenuTab tab)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xCED054", Offset = "0xCED054", VA = "0xCED054")]
		private void selectPreviousMenuTab()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xCED120", Offset = "0xCED120", VA = "0xCED120")]
		private void selectNextMenuTab()
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xCEDBBC", Offset = "0xCEDBBC", VA = "0xCEDBBC")]
		private void menuTabError(FPEMenuTab tab)
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xCEDCA0", Offset = "0xCEDCA0", VA = "0xCEDCA0")]
		private void menuButtonError(FPEMenuButton button)
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xCED8A4", Offset = "0xCED8A4", VA = "0xCED8A4")]
		private void refreshMenuTab()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xCEE314", Offset = "0xCEE314", VA = "0xCEE314")]
		public void updateItemDataView(int itemIndex, bool playAudio = true)
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xCEE5C4", Offset = "0xCEE5C4", VA = "0xCEE5C4")]
		public void clearItemDataView()
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xCED69C", Offset = "0xCED69C", VA = "0xCED69C")]
		private void saveSelectedItemSlot()
		{
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xCEDF24", Offset = "0xCEDF24", VA = "0xCEDF24")]
		private void restoreSelectedItemSlot()
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xCEE628", Offset = "0xCEE628", VA = "0xCEE628")]
		public void showActionsForItem(int itemIndex, bool playAudio = true)
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xCED2BC", Offset = "0xCED2BC", VA = "0xCED2BC")]
		public void hideActionsForItem()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xCEDE7C", Offset = "0xCEDE7C", VA = "0xCEDE7C")]
		private void refreshItemSlotsAndDetailsView()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0xCEE938", Offset = "0xCEE938", VA = "0xCEE938")]
		private void selectItemPage(int pageNumber)
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0xCEF12C", Offset = "0xCEF12C", VA = "0xCEF12C")]
		public void performDropAction()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0xCEF1C0", Offset = "0xCEF1C0", VA = "0xCEF1C0")]
		public void performHoldAction()
		{
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0xCEF254", Offset = "0xCEF254", VA = "0xCEF254")]
		public void performConsumeAction()
		{
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xCEDD44", Offset = "0xCEDD44", VA = "0xCEDD44")]
		private void saveSelectedAudioDiarySlot()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xCEE058", Offset = "0xCEE058", VA = "0xCEE058")]
		private void restoreSelectedAudioDiarySlot()
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xCEDFC8", Offset = "0xCEDFC8", VA = "0xCEDFC8")]
		private void refreshAudioDiarySlotsView()
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xCEF324", Offset = "0xCEF324", VA = "0xCEF324")]
		private void selectAudioDiaryPage(int pageNumber)
		{
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xCEF44C", Offset = "0xCEF44C", VA = "0xCEF44C")]
		public void performReplayAudioDiaryAction(int diaryIndex)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xCED34C", Offset = "0xCED34C", VA = "0xCED34C")]
		public void stopAllDiaries()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xCEF50C", Offset = "0xCEF50C", VA = "0xCEF50C")]
		private void saveSelectedNoteSlot()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xCEF61C", Offset = "0xCEF61C", VA = "0xCEF61C")]
		private void restoreSelectedNoteSlot()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xCEE0A4", Offset = "0xCEE0A4", VA = "0xCEE0A4")]
		private void refreshNoteSlotsView()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xCEF864", Offset = "0xCEF864", VA = "0xCEF864")]
		private void selectNotePage(int pageNumber)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xCEFA7C", Offset = "0xCEFA7C", VA = "0xCEFA7C")]
		public void displayNote(int noteIndex)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xCEE134", Offset = "0xCEE134", VA = "0xCEE134")]
		private void refreshSystemMenu()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xCEFD30", Offset = "0xCEFD30", VA = "0xCEFD30")]
		public void SaveGame()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xCEFD94", Offset = "0xCEFD94", VA = "0xCEFD94")]
		public void LoadGame()
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xCEFDF8", Offset = "0xCEFDF8", VA = "0xCEFDF8")]
		public void showExitConfirmation()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xCEFE64", Offset = "0xCEFE64", VA = "0xCEFE64")]
		public void hideExitConfirmation()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xCEFED0", Offset = "0xCEFED0", VA = "0xCEFED0")]
		public void exitGameButtonPressed()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xCEFF74", Offset = "0xCEFF74", VA = "0xCEFF74")]
		public void changeMouseSensitivity(float amount)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xCEFB50", Offset = "0xCEFB50", VA = "0xCEFB50")]
		private void refreshOptionsValues()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xCF0094", Offset = "0xCF0094", VA = "0xCF0094")]
		public void toggleLookSmoothing(bool toggleValue)
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xCF00F8", Offset = "0xCF00F8", VA = "0xCF00F8")]
		public void toggleUseGamepad(bool toggleValue)
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xCED1EC", Offset = "0xCED1EC", VA = "0xCED1EC")]
		public void moveToPreviousPage()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xCED250", Offset = "0xCED250", VA = "0xCED250")]
		public void moveToNextPage()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xCF015C", Offset = "0xCF015C", VA = "0xCF015C")]
		private void refreshPage()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xCEED80", Offset = "0xCEED80", VA = "0xCEED80")]
		private void refreshPageHintsUI(int pageNumber)
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xCEEA98", Offset = "0xCEEA98", VA = "0xCEEA98")]
		private int getMaxPagesForTab()
		{
			return default(int);
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xCF02D8", Offset = "0xCF02D8", VA = "0xCF02D8")]
		public FPEGameMenu()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public abstract class FPEHUD : MonoBehaviour
	{
		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPEHUD _instance;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool initialized;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected FPEHUDData myHUDData;

		[Token(Token = "0x1700012F")]
		public static FPEHUD Instance
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xCF0364", Offset = "0xCF0364", VA = "0xCF0364")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xCF03AC", Offset = "0xCF03AC", VA = "0xCF03AC")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xCE8224", Offset = "0xCE8224", VA = "0xCE8224", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000D7E")]
		public abstract void initialize();

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xCE9828", Offset = "0xCE9828", VA = "0xCE9828", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000D80")]
		protected abstract void updateHUD();

		[Token(Token = "0x6000D81")]
		public abstract void InteractionStateChangeTo(FPEInteractionManagerScript.eInteractionState updatedState);

		[Token(Token = "0x6000D82")]
		public abstract void ShowNotification(string message);

		[Token(Token = "0x6000D83")]
		public abstract void StartPlayingNewAudioDiary(string title, bool isReplay);

		[Token(Token = "0x6000D84")]
		public abstract void StopPlayingAudioDiary();

		[Token(Token = "0x6000D85")]
		public abstract void ResetAudioDiaryLabel();

		[Token(Token = "0x6000D86")]
		public abstract void FadeAudioDiaryLabel();

		[Token(Token = "0x6000D87")]
		public abstract void ShowJournalUI();

		[Token(Token = "0x6000D88")]
		public abstract void SetJournalPage(Sprite journalPageSprite);

		[Token(Token = "0x6000D89")]
		public abstract void HideJournalUI();

		[Token(Token = "0x6000D8A")]
		public abstract void PreviousJournalPage();

		[Token(Token = "0x6000D8B")]
		public abstract void NextJournalPage();

		[Token(Token = "0x6000D8C")]
		public abstract void CloseJournal();

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xCEB4C4", Offset = "0xCEB4C4", VA = "0xCEB4C4")]
		protected FPEHUD()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public class FPEHUDData
	{
		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool examiningObject;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool zoomedIn;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool dockedRightNow;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool dockTransitionHappeningRightNow;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string currentDockHint;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string currentUndockHint;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FPEInteractableBaseScript.eInteractionType heldType;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string heldObjectInteractionString;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool heldObjectinteractionsAllowedWhenHoldingObject;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string heldObjectInventoryItemName;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FPEInteractableBaseScript.eInteractionType lookedAtType;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string lookedAtInteractionString;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool lookedAtInventoryPickupPermitted;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string lookedAtInventoryItemName;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string lookedAtDockHint;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool lookedAtDockOccupied;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool lookedAtPickupInteractionsAllowedWhenHoldingObject;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string lookedAtPickupPutbackString;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool lookedAtActivateAllowedWhenHoldingObject;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool lookedAtAudioDiaryAutoPlay;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public bool audioDiaryPlayingRightNow;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string audioDiaryTitle;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool audioDiaryIsReplay;

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xCE8D00", Offset = "0xCE8D00", VA = "0xCE8D00")]
		public FPEHUDData()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class FPEInventoryActionsPanel : MonoBehaviour
	{
		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPEMenuButton holdButton;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FPEMenuButton dropButton;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPEMenuButton consumeButton;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FPEMenuButton cancelButton;

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xCF0550", Offset = "0xCF0550", VA = "0xCF0550")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xCEE7AC", Offset = "0xCEE7AC", VA = "0xCEE7AC")]
		public void setButtonStates(bool canHold, bool canDrop, bool canConsume)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xCEE844", Offset = "0xCEE844", VA = "0xCEE844")]
		public FPEMenuButton getFirstPermittedActionButton()
		{
			return null;
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xCF07E8", Offset = "0xCF07E8", VA = "0xCF07E8")]
		public FPEInventoryActionsPanel()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class FPEInventoryItemData
	{
		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string _itemName;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Sprite _itemImage;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string _itemDescription;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _stackable;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int _quantity;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _canBeHeld;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool _canBeDropped;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool _canBeConsumed;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _gameObjectInstanceID;

		[Token(Token = "0x17000130")]
		public string ItemName
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0xCF07F0", Offset = "0xCF07F0", VA = "0xCF07F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		public Sprite ItemImage
		{
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0xCF07F8", Offset = "0xCF07F8", VA = "0xCF07F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000132")]
		public string ItemDescription
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0xCF0800", Offset = "0xCF0800", VA = "0xCF0800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000133")]
		public bool Stackable
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0xCF0808", Offset = "0xCF0808", VA = "0xCF0808")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000134")]
		public int Quantity
		{
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0xCF0810", Offset = "0xCF0810", VA = "0xCF0810")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000135")]
		public bool CanBeHeld
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xCF0818", Offset = "0xCF0818", VA = "0xCF0818")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000136")]
		public bool CanBeDropped
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xCF0820", Offset = "0xCF0820", VA = "0xCF0820")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000137")]
		public bool CanBeConsumed
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0xCF0828", Offset = "0xCF0828", VA = "0xCF0828")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000138")]
		public int GameObjectInstanceID
		{
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xCF0830", Offset = "0xCF0830", VA = "0xCF0830")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xCF0838", Offset = "0xCF0838", VA = "0xCF0838")]
		public FPEInventoryItemData(string itemName, Sprite itemImage, string itemDescription, bool stackable, int quantity, bool canBeHeld, bool canBeDropped, bool canBeConsumed, int instanceID)
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class FPEInventoryItemInfoPanel : MonoBehaviour
	{
		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text myTitle;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Image myImage;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text myDescription;

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0xCF095C", Offset = "0xCF095C", VA = "0xCF095C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xCEE51C", Offset = "0xCEE51C", VA = "0xCEE51C")]
		public void setItemDetails(FPEInventoryItemData data)
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xCEE5DC", Offset = "0xCEE5DC", VA = "0xCEE5DC")]
		public void clearItemDetails()
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xCF0BE8", Offset = "0xCF0BE8", VA = "0xCF0BE8")]
		public FPEInventoryItemInfoPanel()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class FPEInventoryItemSlot : Selectable, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private UnityEngine.Color regularColor;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private UnityEngine.Color highlightColor;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private UnityEngine.Color disabledColor;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private string stackablePrefixString;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Image frameImage;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Image myImage;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Text myName;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Text myCount;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool highlighted;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private int currentInventoryDataIndex;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private FPEInventoryItemSlot[] allItemSlots;

		[Token(Token = "0x17000139")]
		public int CurrentInventoryDataIndex
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0xCF0BF0", Offset = "0xCF0BF0", VA = "0xCF0BF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xCF0BF8", Offset = "0xCF0BF8", VA = "0xCF0BF8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xCF0F4C", Offset = "0xCF0F4C", VA = "0xCF0F4C", Slot = "34")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xCF101C", Offset = "0xCF101C", VA = "0xCF101C", Slot = "35")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xCF107C", Offset = "0xCF107C", VA = "0xCF107C", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xCF10AC", Offset = "0xCF10AC", VA = "0xCF10AC", Slot = "39")]
		public void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xCF10C4", Offset = "0xCF10C4", VA = "0xCF10C4", Slot = "31")]
		public override void OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xCF10CC", Offset = "0xCF10CC", VA = "0xCF10CC", Slot = "36")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xCF10E8", Offset = "0xCF10E8", VA = "0xCF10E8", Slot = "37")]
		public override void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xCEE4BC", Offset = "0xCEE4BC", VA = "0xCEE4BC")]
		public void ForceUnhighlight()
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xCEE8CC", Offset = "0xCEE8CC", VA = "0xCEE8CC")]
		public void enableSlot()
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xCEE738", Offset = "0xCEE738", VA = "0xCEE738")]
		public void disableSlot()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xCEEC28", Offset = "0xCEEC28", VA = "0xCEEC28")]
		public void setItemData(int index, FPEInventoryItemData data)
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xCEED28", Offset = "0xCEED28", VA = "0xCEED28")]
		public void clearItemData()
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xCF1150", Offset = "0xCF1150", VA = "0xCF1150")]
		public void setStackableItemQuantity(int quantity)
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xCF11AC", Offset = "0xCF11AC", VA = "0xCF11AC")]
		private void passItemDetailsToMenu()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xCF1260", Offset = "0xCF1260", VA = "0xCF1260")]
		private void showMyActions()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xCF1094", Offset = "0xCF1094", VA = "0xCF1094")]
		private void executeClick()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xCF0F50", Offset = "0xCF0F50", VA = "0xCF0F50")]
		private void executeSelect()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xCF1308", Offset = "0xCF1308", VA = "0xCF1308")]
		public FPEInventoryItemSlot()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class FPEMainMenu : MonoBehaviour
	{
		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.GameObject menuCanvas;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FPEMenuButton newGameButton;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPEMenuButton continueGameButton;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FPEMenuButton quitGameButton;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.GameObject newGameConfirmationPanel;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FPEMenuButton[] newGameConfirmationButtons;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Text errorText;

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xCF13B4", Offset = "0xCF13B4", VA = "0xCF13B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xCF1A4C", Offset = "0xCF1A4C", VA = "0xCF1A4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xCF18B4", Offset = "0xCF18B4", VA = "0xCF18B4")]
		private void refreshButtonStates()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xCF1A7C", Offset = "0xCF1A7C", VA = "0xCF1A7C")]
		public void startNewGame()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xCF1BB8", Offset = "0xCF1BB8", VA = "0xCF1BB8")]
		public void confirmStartNewGame()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xCF1CE8", Offset = "0xCF1CE8", VA = "0xCF1CE8")]
		public void hideNewGameConfirmationDialog()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xCF1D14", Offset = "0xCF1D14", VA = "0xCF1D14")]
		public void continueGame()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xCF1A74", Offset = "0xCF1A74", VA = "0xCF1A74")]
		public void exitGame()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xCF1D60", Offset = "0xCF1D60", VA = "0xCF1D60")]
		public FPEMainMenu()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public abstract class FPEMenu : MonoBehaviour
	{
		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FPEMenu _instance;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool menuActive;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected EventSystem myEventSystem;

		[Token(Token = "0x1700013A")]
		public static FPEMenu Instance
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0xCF1D68", Offset = "0xCF1D68", VA = "0xCF1D68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xCEC958", Offset = "0xCEC958", VA = "0xCEC958", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xCECBF8", Offset = "0xCECBF8", VA = "0xCECBF8", Slot = "5")]
		public virtual void Start()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xCED050", Offset = "0xCED050", VA = "0xCED050", Slot = "6")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xCF1DB0", Offset = "0xCF1DB0", VA = "0xCF1DB0", Slot = "7")]
		public virtual void activateMenu()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xCF1E18", Offset = "0xCF1E18", VA = "0xCF1E18", Slot = "8")]
		public virtual void deactivateMenu()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xCF035C", Offset = "0xCF035C", VA = "0xCF035C")]
		protected FPEMenu()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class FPEMenuButton : Selectable, ISubmitHandler, IEventSystemHandler
	{
		[Serializable]
		[Token(Token = "0x20002D2")]
		public class MenuTabEvent : UnityEvent
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xCF25A0", Offset = "0xCF25A0", VA = "0xCF25A0")]
			public MenuTabEvent()
			{
			}
		}

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("Button colors")]
		[SerializeField]
		protected UnityEngine.Color regularColor;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		protected UnityEngine.Color highlightColor;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		protected UnityEngine.Color disabledColor;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Header("Button sounds")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, sounds will be played. If none are specified, default sounds will be used.")]
		protected bool playSounds;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		protected AudioClip buttonSelect;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		protected AudioClip buttonClick;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected AudioSource myAudio;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected Image myImage;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected bool highlighted;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		protected MenuTabEvent OnClickEvent;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected FPEMenuButton[] allSiblingButtons;

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xCF1E80", Offset = "0xCF1E80", VA = "0xCF1E80", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xCF21D4", Offset = "0xCF21D4", VA = "0xCF21D4", Slot = "34")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xCF21F0", Offset = "0xCF21F0", VA = "0xCF21F0", Slot = "35")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xCF2234", Offset = "0xCF2234", VA = "0xCF2234", Slot = "33")]
		public override void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xCF2244", Offset = "0xCF2244", VA = "0xCF2244", Slot = "39")]
		public void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xCF2254", Offset = "0xCF2254", VA = "0xCF2254", Slot = "40")]
		protected virtual void executeSelect()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xCF22F0", Offset = "0xCF22F0", VA = "0xCF22F0", Slot = "41")]
		protected virtual void executeClick()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xCF22D4", Offset = "0xCF22D4", VA = "0xCF22D4")]
		public void ForceUnhighlight()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xCF234C", Offset = "0xCF234C", VA = "0xCF234C")]
		public void ForceHighlight()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xCF2368", Offset = "0xCF2368", VA = "0xCF2368", Slot = "36")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xCF23A0", Offset = "0xCF23A0", VA = "0xCF23A0", Slot = "37")]
		public override void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xCF23D8", Offset = "0xCF23D8", VA = "0xCF23D8", Slot = "42")]
		public virtual void enableButton()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xCF241C", Offset = "0xCF241C", VA = "0xCF241C", Slot = "43")]
		public virtual void disableButton()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xCF07C8", Offset = "0xCF07C8", VA = "0xCF07C8")]
		public void setButtonInteractionState(bool interactable)
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xCF2468", Offset = "0xCF2468", VA = "0xCF2468", Slot = "44")]
		protected virtual void highlight()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xCF24DC", Offset = "0xCF24DC", VA = "0xCF24DC", Slot = "45")]
		protected virtual void unhighlight()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xCF2518", Offset = "0xCF2518", VA = "0xCF2518")]
		public FPEMenuButton()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class FPEMenuTab : Selectable
	{
		[Serializable]
		[Token(Token = "0x20002D4")]
		public class MenuTabEvent : UnityEvent
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0xCF299C", Offset = "0xCF299C", VA = "0xCF299C")]
			public MenuTabEvent()
			{
			}
		}

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private UnityEngine.Color regularColor;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private UnityEngine.Color highlightColor;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private Sprite regularTabImage;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Sprite selectedTabImage;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Image myImage;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Text myText;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private bool highlighted;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private MenuTabEvent OnClickEvent;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private FPEMenuTab[] allTabs;

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xCF25A8", Offset = "0xCF25A8", VA = "0xCF25A8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xCF2764", Offset = "0xCF2764", VA = "0xCF2764", Slot = "34")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xCF27D4", Offset = "0xCF27D4", VA = "0xCF27D4", Slot = "35")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xCF2838", Offset = "0xCF2838", VA = "0xCF2838", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xCF2854", Offset = "0xCF2854", VA = "0xCF2854", Slot = "36")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xCF28E4", Offset = "0xCF28E4", VA = "0xCF28E4", Slot = "37")]
		public override void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xCEDE78", Offset = "0xCEDE78", VA = "0xCEDE78")]
		public void ForceSelectTab()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xCF2900", Offset = "0xCF2900", VA = "0xCF2900")]
		public void ForceUnhighlight()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xCF2870", Offset = "0xCF2870", VA = "0xCF2870")]
		private void executeSelect()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xCF2768", Offset = "0xCF2768", VA = "0xCF2768")]
		private void highlight()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xCF27D8", Offset = "0xCF27D8", VA = "0xCF27D8")]
		private void unhighlight()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xCF292C", Offset = "0xCF292C", VA = "0xCF292C")]
		public FPEMenuTab()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class FPEMenuToggle : FPEMenuButton
	{
		[Serializable]
		[Token(Token = "0x20002D6")]
		public class MenuToggleEvent : UnityEvent
		{
			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0xCF2C00", Offset = "0xCF2C00", VA = "0xCF2C00")]
			public MenuToggleEvent()
			{
			}
		}

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[UnityEngine.Tooltip("If toggle is on, this image is shown on the toggle.")]
		[Header("Toggle Specific Stuff")]
		[SerializeField]
		private Sprite toggleOnImage;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[UnityEngine.Tooltip("If toggle is off, this image is shown on the toggle.")]
		[SerializeField]
		private Sprite toggleOffImage;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Image myIcon;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private MenuToggleEvent ToggleOnEvent;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private MenuToggleEvent ToggleOffEvent;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool toggledOn;

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xCF29A4", Offset = "0xCF29A4", VA = "0xCF29A4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xCF2AC0", Offset = "0xCF2AC0", VA = "0xCF2AC0", Slot = "41")]
		protected override void executeClick()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xCF2B6C", Offset = "0xCF2B6C", VA = "0xCF2B6C", Slot = "42")]
		public override void enableButton()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xCF2BB0", Offset = "0xCF2BB0", VA = "0xCF2BB0", Slot = "43")]
		public override void disableButton()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xCF0044", Offset = "0xCF0044", VA = "0xCF0044")]
		public void ForceToggleState(bool toggleOn)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xCF2BFC", Offset = "0xCF2BFC", VA = "0xCF2BFC")]
		public FPEMenuToggle()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class FPEMinimalHUD : FPEHUD
	{
		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Uncheck this to disabled HUD completely. If this is false, the values of the other checkboxes in this section will have no effect.")]
		[Header("General")]
		public bool HUDEnabled;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Reticle")]
		[UnityEngine.Tooltip("Reticle sprite when it is inactive")]
		public Sprite inactiveReticle;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Reticle sprite when it is active")]
		public Sprite activeReticle;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Reticle sprite when action is not permitted or unavailable")]
		public Sprite unavailableReticle;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Reticle interaction icons")]
		public Sprite interactionIconActivate;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sprite interactionIconActivateTwoHands;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Sprite interactionIconPickup;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Sprite interactionIconHandsFull;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Sprite interactionIconJournal;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Sprite interactionIconJournalTwoHands;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Sprite interactionIconPutBack;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Sprite interactionIconAudioDiary;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Sprite interactionIconInventory;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Sprite interactionIconStatic;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Sprite interactionIconDock;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RectTransform reticle;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RectTransform interactionIcon;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private UnityEngine.GameObject journalCloseIndicator;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private UnityEngine.GameObject journalPreviousButton;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private UnityEngine.GameObject journalNextButton;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UnityEngine.GameObject journalBackground;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private UnityEngine.GameObject journalPage;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RectTransform audioDiaryIcon;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool audioDiaryIsPlaying;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool fadingDiaryText;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private UnityEngine.Vector3 audioReelRotationPerSecond;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RectTransform notificationIcon;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float notificationScaleLerpFactor;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private UnityEngine.Vector3 notificationIconTargetScale;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private UnityEngine.Vector3 notificationIconLargestScale;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private UnityEngine.Vector3 notificationIconSmallestScale;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool fadingNotificationText;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private UnityEngine.Color defaultNotificationColor;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private UnityEngine.Color notificationFadeColor;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float notificationCounter;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float notificationDuration;

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xCF2C08", Offset = "0xCF2C08", VA = "0xCF2C08", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xCF2C14", Offset = "0xCF2C14", VA = "0xCF2C14", Slot = "5")]
		public override void initialize()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xCF3170", Offset = "0xCF3170", VA = "0xCF3170", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xCF34B0", Offset = "0xCF34B0", VA = "0xCF34B0")]
		private void activateReticle(string interactionString, Sprite icon)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xCF3568", Offset = "0xCF3568", VA = "0xCF3568")]
		private void deactivateReticle()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xCF35FC", Offset = "0xCF35FC", VA = "0xCF35FC")]
		private void hideReticleAndInteractionLabel()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xCF3690", Offset = "0xCF3690", VA = "0xCF3690")]
		private void showReticleAndInteractionLabel()
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xCF3758", Offset = "0xCF3758", VA = "0xCF3758", Slot = "7")]
		protected override void updateHUD()
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xCF39E4", Offset = "0xCF39E4", VA = "0xCF39E4")]
		private void hideAllUI()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xCF39E8", Offset = "0xCF39E8", VA = "0xCF39E8")]
		private void unhideAllUI()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xCF39EC", Offset = "0xCF39EC", VA = "0xCF39EC", Slot = "8")]
		public override void InteractionStateChangeTo(FPEInteractionManagerScript.eInteractionState updatedState)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xCF39F0", Offset = "0xCF39F0", VA = "0xCF39F0", Slot = "9")]
		public override void ShowNotification(string message)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xCF3A44", Offset = "0xCF3A44", VA = "0xCF3A44", Slot = "10")]
		public override void StartPlayingNewAudioDiary(string title, bool isReplay)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xCF3A8C", Offset = "0xCF3A8C", VA = "0xCF3A8C", Slot = "11")]
		public override void StopPlayingAudioDiary()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xCF3AB8", Offset = "0xCF3AB8", VA = "0xCF3AB8", Slot = "12")]
		public override void ResetAudioDiaryLabel()
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xCF3ABC", Offset = "0xCF3ABC", VA = "0xCF3ABC", Slot = "13")]
		public override void FadeAudioDiaryLabel()
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xCF3AF4", Offset = "0xCF3AF4", VA = "0xCF3AF4", Slot = "14")]
		public override void ShowJournalUI()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xCF3B68", Offset = "0xCF3B68", VA = "0xCF3B68", Slot = "15")]
		public override void SetJournalPage(Sprite journalPageSprite)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xCF3BE4", Offset = "0xCF3BE4", VA = "0xCF3BE4", Slot = "16")]
		public override void HideJournalUI()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xCF3C58", Offset = "0xCF3C58", VA = "0xCF3C58", Slot = "17")]
		public override void PreviousJournalPage()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xCF3CA4", Offset = "0xCF3CA4", VA = "0xCF3CA4", Slot = "18")]
		public override void NextJournalPage()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xCF3CF0", Offset = "0xCF3CF0", VA = "0xCF3CF0", Slot = "19")]
		public override void CloseJournal()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xCF3D40", Offset = "0xCF3D40", VA = "0xCF3D40")]
		public FPEMinimalHUD()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public class FPENoteContentsPanel : MonoBehaviour
	{
		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text noteTitle;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text noteBody;

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xCF3DF4", Offset = "0xCF3DF4", VA = "0xCF3DF4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xCEFB00", Offset = "0xCEFB00", VA = "0xCEFB00")]
		public void displayNoteContents(string title, string body)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xCEF7E8", Offset = "0xCEF7E8", VA = "0xCEF7E8")]
		public void clearNoteContents()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xCF3F78", Offset = "0xCF3F78", VA = "0xCF3F78")]
		public FPENoteContentsPanel()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class FPENoteData
	{
		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string _noteTitle;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string _noteBody;

		[Token(Token = "0x1700013B")]
		public string NoteTitle
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0xCF3F80", Offset = "0xCF3F80", VA = "0xCF3F80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public string NoteBody
		{
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0xCF3F88", Offset = "0xCF3F88", VA = "0xCF3F88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xCF3F90", Offset = "0xCF3F90", VA = "0xCF3F90")]
		public FPENoteData(string noteTitle, string noteBody)
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class FPENoteEntrySlot : Selectable, ISubmitHandler, IEventSystemHandler
	{
		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private UnityEngine.Color regularColor;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private UnityEngine.Color highlightColor;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private UnityEngine.Color disabledColor;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private Sprite regularImage;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private Sprite activatedImage;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Image frameImage;

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Image iconImage;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Text myTitle;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool highlighted;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private FPENoteEntrySlot[] allNoteSlots;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int currentNoteIndex;

		[Token(Token = "0x1700013D")]
		public int CurrentNoteIndex
		{
			[Token(Token = "0x6000E09")]
			[Address(RVA = "0xCF4030", Offset = "0xCF4030", VA = "0xCF4030")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xCF4038", Offset = "0xCF4038", VA = "0xCF4038", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xCF4314", Offset = "0xCF4314", VA = "0xCF4314", Slot = "34")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xCF438C", Offset = "0xCF438C", VA = "0xCF438C", Slot = "35")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xCF4414", Offset = "0xCF4414", VA = "0xCF4414", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xCF44BC", Offset = "0xCF44BC", VA = "0xCF44BC", Slot = "39")]
		public void OnSubmit(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xCF44C0", Offset = "0xCF44C0", VA = "0xCF44C0", Slot = "31")]
		public override void OnMove(AxisEventData eventData)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xCF44C8", Offset = "0xCF44C8", VA = "0xCF44C8", Slot = "36")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xCF44E4", Offset = "0xCF44E4", VA = "0xCF44E4", Slot = "37")]
		public override void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xCEF7A8", Offset = "0xCEF7A8", VA = "0xCEF7A8")]
		public void ForceActivateSlot()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xCEF7C0", Offset = "0xCEF7C0", VA = "0xCEF7C0")]
		public void ForceDeactivateSlot()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xCF4594", Offset = "0xCF4594", VA = "0xCF4594")]
		public void ForceUnhighlight()
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xCEF860", Offset = "0xCEF860", VA = "0xCEF860")]
		public void ForceHighlight()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xCF4500", Offset = "0xCF4500", VA = "0xCF4500")]
		private void highlight()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xCF4390", Offset = "0xCF4390", VA = "0xCF4390")]
		private void unhighlight()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xCF4598", Offset = "0xCF4598", VA = "0xCF4598")]
		public void enableSlot()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xCF45B8", Offset = "0xCF45B8", VA = "0xCF45B8")]
		public void disableSlot()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xCF462C", Offset = "0xCF462C", VA = "0xCF462C")]
		private void displayNote()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xCF4418", Offset = "0xCF4418", VA = "0xCF4418")]
		private void executeClick()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xCF4318", Offset = "0xCF4318", VA = "0xCF4318")]
		private void executeSelect()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xCEF994", Offset = "0xCEF994", VA = "0xCEF994")]
		public void setNoteData(int index, string title)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xCEF9F0", Offset = "0xCEF9F0", VA = "0xCEF9F0")]
		public void clearNoteData()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xCF46D0", Offset = "0xCF46D0", VA = "0xCF46D0")]
		public FPENoteEntrySlot()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class FPESimpleMenu : FPEMenu
	{
		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.GameObject menuCanvas;

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xCF4758", Offset = "0xCF4758", VA = "0xCF4758", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xCF4868", Offset = "0xCF4868", VA = "0xCF4868", Slot = "5")]
		public override void Start()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xCF486C", Offset = "0xCF486C", VA = "0xCF486C", Slot = "7")]
		public override void activateMenu()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xCF48AC", Offset = "0xCF48AC", VA = "0xCF48AC", Slot = "8")]
		public override void deactivateMenu()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xCF48E0", Offset = "0xCF48E0", VA = "0xCF48E0")]
		public void exitGameButtonPressed()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xCF48E8", Offset = "0xCF48E8", VA = "0xCF48E8")]
		public FPESimpleMenu()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class FPETextButton : FPEMenuButton
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Text myText;

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xCF48F0", Offset = "0xCF48F0", VA = "0xCF48F0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xCF49E8", Offset = "0xCF49E8", VA = "0xCF49E8", Slot = "35")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xCF4A50", Offset = "0xCF4A50", VA = "0xCF4A50", Slot = "42")]
		public override void enableButton()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xCF4A88", Offset = "0xCF4A88", VA = "0xCF4A88", Slot = "43")]
		public override void disableButton()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xCF4AC4", Offset = "0xCF4AC4", VA = "0xCF4AC4", Slot = "44")]
		protected override void highlight()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xCF4B00", Offset = "0xCF4B00", VA = "0xCF4B00", Slot = "45")]
		protected override void unhighlight()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xCF4B38", Offset = "0xCF4B38", VA = "0xCF4B38")]
		public FPETextButton()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class FPEUIHint : MonoBehaviour
	{
		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text hintText;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Image[] myIcons;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool hidingHint;

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xCF4B3C", Offset = "0xCF4B3C", VA = "0xCF4B3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xCE8DD8", Offset = "0xCE8DD8", VA = "0xCE8DD8")]
		public void setHint(string hintMessage)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xCEA850", Offset = "0xCEA850", VA = "0xCEA850")]
		public void setHintVisibility(bool visible)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xCF4CE0", Offset = "0xCF4CE0", VA = "0xCF4CE0")]
		public FPEUIHint()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[RequireComponent(typeof(BoxCollider))]
	public class FPEEventTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[UnityEngine.Tooltip("The tag of the object(s) to listen for. When one of these objects enters the trigger, it will activate. Default is 'Player'")]
		private string targetTag;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[UnityEngine.Tooltip("If true, trigger will be enabled on Start")]
		private bool armOnStart;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[UnityEngine.Tooltip("List of other triggers to arm when this trigger is activated")]
		private FPEEventTrigger[] triggersToArmOnActivation;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("List of other triggers to disarm when this trigger is activated")]
		[SerializeField]
		private FPEEventTrigger[] triggersToDisarmOnActivation;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("If specified, this event will fire when the trigger is armed.")]
		[SerializeField]
		private FPEGenericEvent ArmEvent;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[UnityEngine.Tooltip("If specified, this event will fire when the trigger is disarmed")]
		private FPEGenericEvent DisarmEvent;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[UnityEngine.Tooltip("If specified, this event will fire when a target object enters the trigger.")]
		private FPEGenericEvent ActivationEvent;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("If true, the trigger will disarm itself when activated. If false, it will not, and every subsequent activation will repeat arming/disarming other triggers, and fire the activation event.")]
		[SerializeField]
		private bool disarmOnActivation;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoxCollider myCollider;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool armed;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool tripped;

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xCF4CE8", Offset = "0xCF4CE8", VA = "0xCF4CE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xCF4E30", Offset = "0xCF4E30", VA = "0xCF4E30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xCF4E78", Offset = "0xCF4E78", VA = "0xCF4E78")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xCF4EBC", Offset = "0xCF4EBC", VA = "0xCF4EBC")]
		private void activateTrigger()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xCF4E58", Offset = "0xCF4E58", VA = "0xCF4E58")]
		public void armTheTrigger()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xCF5068", Offset = "0xCF5068", VA = "0xCF5068")]
		public void disarmTheTrigger()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xCF5084", Offset = "0xCF5084", VA = "0xCF5084")]
		public void resetTrigger()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xCF508C", Offset = "0xCF508C", VA = "0xCF508C")]
		public FPETriggerSaveData getSaveData()
		{
			return null;
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xCF5180", Offset = "0xCF5180", VA = "0xCF5180")]
		public void restoreSaveGameData(FPETriggerSaveData data)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xCF51A4", Offset = "0xCF51A4", VA = "0xCF51A4")]
		public FPEEventTrigger()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002DF")]
	public class FPEGenericEvent : UnityEvent
	{
		[Token(Token = "0x20002E0")]
		public enum eEventFireType
		{
			[Token(Token = "0x4001221")]
			ONCE,
			[Token(Token = "0x4001222")]
			EVERYTIME,
			[Token(Token = "0x4001223")]
			TOGGLE
		}

		[Token(Token = "0x20002E1")]
		public enum eRepeatMode
		{
			[Token(Token = "0x4001225")]
			ONETIME,
			[Token(Token = "0x4001226")]
			REPEAT
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xCF5204", Offset = "0xCF5204", VA = "0xCF5204")]
		public FPEGenericEvent()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class FPEMinMaxRangeAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minLimit;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxLimit;

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xCF520C", Offset = "0xCF520C", VA = "0xCF520C")]
		public FPEMinMaxRangeAttribute(float minLimit, float maxLimit)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E3")]
	public class FPEMinMaxRange
	{
		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minValue;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxValue;

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xCF5238", Offset = "0xCF5238", VA = "0xCF5238")]
		public float GetRandomValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xCF5244", Offset = "0xCF5244", VA = "0xCF5244")]
		public FPEMinMaxRange()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class FPEObjectTypeLookup
	{
		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string InventoryResourcePath;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string PickupResourcePath;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string AudioDiaryResourcePath;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly char[] PickupPrefabDelimiter;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<FPEInventoryManagerScript.eInventoryItems, string> inventoryItemsLookup;

		[Token(Token = "0x1700013E")]
		public Dictionary<FPEInventoryManagerScript.eInventoryItems, string> InventoryItemsLookup
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xCF524C", Offset = "0xCF524C", VA = "0xCF524C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xCF5254", Offset = "0xCF5254", VA = "0xCF5254")]
		public FPEObjectTypeLookup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E5")]
	public class FPEVector2
	{
		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected float[] data;

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xCF5624", Offset = "0xCF5624", VA = "0xCF5624")]
		public FPEVector2(UnityEngine.Vector2 v)
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xCF56C4", Offset = "0xCF56C4", VA = "0xCF56C4")]
		public UnityEngine.Vector2 getVector2()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xCF56F4", Offset = "0xCF56F4", VA = "0xCF56F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002E6")]
	public class FPEVector3
	{
		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected float[] data;

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xCF5928", Offset = "0xCF5928", VA = "0xCF5928")]
		public FPEVector3(UnityEngine.Vector3 v)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xCF59E0", Offset = "0xCF59E0", VA = "0xCF59E0")]
		public UnityEngine.Vector3 getVector3()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xCF5A1C", Offset = "0xCF5A1C", VA = "0xCF5A1C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002E7")]
	public class FPEQuaternion
	{
		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected float[] data;

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xCF5CF0", Offset = "0xCF5CF0", VA = "0xCF5CF0")]
		public FPEQuaternion(UnityEngine.Quaternion q)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xCF5DB8", Offset = "0xCF5DB8", VA = "0xCF5DB8")]
		public UnityEngine.Quaternion getQuaternion()
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xCF5DFC", Offset = "0xCF5DFC", VA = "0xCF5DFC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002E8")]
	public class FPETransform
	{
		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected float[] positionFloats;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float[] rotationFloats;

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xCF6170", Offset = "0xCF6170", VA = "0xCF6170")]
		public FPETransform(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xCF62A0", Offset = "0xCF62A0", VA = "0xCF62A0")]
		public UnityEngine.Vector3 getPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xCF62DC", Offset = "0xCF62DC", VA = "0xCF62DC")]
		public UnityEngine.Quaternion getRotation()
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xCF6320", Offset = "0xCF6320", VA = "0xCF6320")]
		public string getPositionRotationString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002E9")]
	public class FPEInventoryWorldSaveData : FPETransform
	{
		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FPEInventoryManagerScript.eInventoryItems invType;

		[Token(Token = "0x1700013F")]
		public FPEInventoryManagerScript.eInventoryItems InventoryItemType
		{
			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0xCF6884", Offset = "0xCF6884", VA = "0xCF6884")]
			get
			{
				return default(FPEInventoryManagerScript.eInventoryItems);
			}
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xCF688C", Offset = "0xCF688C", VA = "0xCF688C")]
		public FPEInventoryWorldSaveData(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, FPEInventoryManagerScript.eInventoryItems type)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xCF68B0", Offset = "0xCF68B0", VA = "0xCF68B0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002EA")]
	public class FPEPickupWorldSaveData : FPETransform
	{
		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string prefabName;

		[Token(Token = "0x17000140")]
		public string PrefabName
		{
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0xCF6FA0", Offset = "0xCF6FA0", VA = "0xCF6FA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xCF6FA8", Offset = "0xCF6FA8", VA = "0xCF6FA8")]
		public FPEPickupWorldSaveData(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, string name)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xCF6FD4", Offset = "0xCF6FD4", VA = "0xCF6FD4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002EB")]
	public class FPEPlayerStateSaveData
	{
		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FPETransform playerTransform;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPEVector3 playerFocus;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool crouching;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool docked;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string curDockName;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private FPEVector2 maxAngles;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FPEVector3 tarFocalPos;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FPEVector3 tarDockPos;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FPEVector3 prevFocalPos;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private FPEVector3 prevWorldPos;

		[Token(Token = "0x17000141")]
		public bool Crouching
		{
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0xCF7680", Offset = "0xCF7680", VA = "0xCF7680")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000142")]
		public bool Docked
		{
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0xCF7688", Offset = "0xCF7688", VA = "0xCF7688")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000143")]
		public string DockName
		{
			[Token(Token = "0x6000E57")]
			[Address(RVA = "0xCF7690", Offset = "0xCF7690", VA = "0xCF7690")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000144")]
		public UnityEngine.Vector3 MaxAngles
		{
			[Token(Token = "0x6000E58")]
			[Address(RVA = "0xCF7698", Offset = "0xCF7698", VA = "0xCF7698")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000145")]
		public UnityEngine.Vector3 TargetFocalPos
		{
			[Token(Token = "0x6000E59")]
			[Address(RVA = "0xCF76B8", Offset = "0xCF76B8", VA = "0xCF76B8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000146")]
		public UnityEngine.Vector3 TargetDockPos
		{
			[Token(Token = "0x6000E5A")]
			[Address(RVA = "0xCF76D0", Offset = "0xCF76D0", VA = "0xCF76D0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000147")]
		public UnityEngine.Vector3 PreviousFocalPos
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0xCF76E8", Offset = "0xCF76E8", VA = "0xCF76E8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000148")]
		public UnityEngine.Vector3 PreviousWorldPos
		{
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0xCF7700", Offset = "0xCF7700", VA = "0xCF7700")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xCF7718", Offset = "0xCF7718", VA = "0xCF7718")]
		public FPEPlayerStateSaveData(Transform player, UnityEngine.Vector3 focalPoint, bool isCrouching, bool playerDocked, string dockName, UnityEngine.Vector2 targetMaxAngles, UnityEngine.Vector3 targetFocalPoint, UnityEngine.Vector3 targetDockPosition, UnityEngine.Vector3 previousFocalPoint, UnityEngine.Vector3 previousWorldPosition)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xCF79CC", Offset = "0xCF79CC", VA = "0xCF79CC")]
		public UnityEngine.Vector3 playerPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xCF79E4", Offset = "0xCF79E4", VA = "0xCF79E4")]
		public UnityEngine.Quaternion playerRotation()
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xCF79FC", Offset = "0xCF79FC", VA = "0xCF79FC")]
		public UnityEngine.Vector3 playerLookAt()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xCF7A14", Offset = "0xCF7A14", VA = "0xCF7A14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002EC")]
	public class FPETriggerSaveData
	{
		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool armed;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool wasTripped;

		[Token(Token = "0x17000149")]
		public string ObjectName
		{
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0xCF7CDC", Offset = "0xCF7CDC", VA = "0xCF7CDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		public bool Armed
		{
			[Token(Token = "0x6000E63")]
			[Address(RVA = "0xCF7CE4", Offset = "0xCF7CE4", VA = "0xCF7CE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014B")]
		public bool Tripped
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0xCF7CEC", Offset = "0xCF7CEC", VA = "0xCF7CEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xCF5134", Offset = "0xCF5134", VA = "0xCF5134")]
		public FPETriggerSaveData(string name, bool isArmed, bool tripped)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xCF7CF4", Offset = "0xCF7CF4", VA = "0xCF7CF4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002ED")]
	public class FPEActivateSaveData
	{
		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool firedOnce;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool toggleCurrentlyOn;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string interactString;

		[Token(Token = "0x1700014C")]
		public string ObjectName
		{
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0xCF7F98", Offset = "0xCF7F98", VA = "0xCF7F98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public bool FiredOnce
		{
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xCF7FA0", Offset = "0xCF7FA0", VA = "0xCF7FA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014E")]
		public bool ToggleCurrentlyOn
		{
			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xCF7FA8", Offset = "0xCF7FA8", VA = "0xCF7FA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014F")]
		public string InteractionString
		{
			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xCF7FB0", Offset = "0xCF7FB0", VA = "0xCF7FB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xCF7FB8", Offset = "0xCF7FB8", VA = "0xCF7FB8")]
		public FPEActivateSaveData(string objectName, bool eventFiredOnce, bool toggleOn, string interactionString)
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xCF8014", Offset = "0xCF8014", VA = "0xCF8014", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002EE")]
	public class FPEAttachedNoteSaveData
	{
		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool collected;

		[Token(Token = "0x17000150")]
		public string ObjectName
		{
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xCF8338", Offset = "0xCF8338", VA = "0xCF8338")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000151")]
		public bool Collected
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xCF8340", Offset = "0xCF8340", VA = "0xCF8340")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xCF8348", Offset = "0xCF8348", VA = "0xCF8348")]
		public FPEAttachedNoteSaveData(string objectName, bool hasBeenCollected)
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xCF8384", Offset = "0xCF8384", VA = "0xCF8384", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002EF")]
	public class FPEAudioDiaryPlayedStateSaveData
	{
		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool played;

		[Token(Token = "0x17000152")]
		public string ObjectName
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xCF8588", Offset = "0xCF8588", VA = "0xCF8588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		public bool HasBeenPlayed
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xCF8590", Offset = "0xCF8590", VA = "0xCF8590")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xCF8598", Offset = "0xCF8598", VA = "0xCF8598")]
		public FPEAudioDiaryPlayedStateSaveData(string objectName, bool hasBeenPlayed)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xCF85D4", Offset = "0xCF85D4", VA = "0xCF85D4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F0")]
	public class FPEJournalSaveData
	{
		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool read;

		[Token(Token = "0x17000154")]
		public string ObjectName
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xCF87D8", Offset = "0xCF87D8", VA = "0xCF87D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		public bool HasBeenRead
		{
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xCF87E0", Offset = "0xCF87E0", VA = "0xCF87E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xCF87E8", Offset = "0xCF87E8", VA = "0xCF87E8")]
		public FPEJournalSaveData(string objectName, bool hasBeenRead)
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xCF8824", Offset = "0xCF8824", VA = "0xCF8824", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F1")]
	public class FPESceneSaveData
	{
		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int lastSavedSceneIndex;

		[Token(Token = "0x17000156")]
		public int LastSavedSceneIndex
		{
			[Token(Token = "0x6000E79")]
			[Address(RVA = "0xCF8A28", Offset = "0xCF8A28", VA = "0xCF8A28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xCF8A30", Offset = "0xCF8A30", VA = "0xCF8A30")]
		public FPESceneSaveData(int index)
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xCF8A58", Offset = "0xCF8A58", VA = "0xCF8A58", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F2")]
	public class FPEHeldObjectSaveData
	{
		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool heldSomething;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string puPrefabName;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FPEInventoryManagerScript.eInventoryItems invItemType;

		[Token(Token = "0x4001252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPEQuaternion localRot;

		[Token(Token = "0x17000157")]
		public bool HeldSomething
		{
			[Token(Token = "0x6000E7C")]
			[Address(RVA = "0xCF8AD4", Offset = "0xCF8AD4", VA = "0xCF8AD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000158")]
		public string PickupPrefabName
		{
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0xCF8ADC", Offset = "0xCF8ADC", VA = "0xCF8ADC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		public FPEInventoryManagerScript.eInventoryItems InventoryItemType
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0xCF8AE4", Offset = "0xCF8AE4", VA = "0xCF8AE4")]
			get
			{
				return default(FPEInventoryManagerScript.eInventoryItems);
			}
		}

		[Token(Token = "0x1700015A")]
		public UnityEngine.Quaternion LocalRotation
		{
			[Token(Token = "0x6000E7F")]
			[Address(RVA = "0xCF8AEC", Offset = "0xCF8AEC", VA = "0xCF8AEC")]
			get
			{
				return default(UnityEngine.Quaternion);
			}
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xCF8B04", Offset = "0xCF8B04", VA = "0xCF8B04")]
		public FPEHeldObjectSaveData(bool playerWasHoldingSomething, string pickupPrefabName, FPEInventoryManagerScript.eInventoryItems inventoryItemType, UnityEngine.Quaternion localRotation)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xCF8BDC", Offset = "0xCF8BDC", VA = "0xCF8BDC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F3")]
	public class FPEInventoryItemSaveData
	{
		[Token(Token = "0x4001253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FPEInventoryManagerScript.eInventoryItems invType;

		[Token(Token = "0x1700015B")]
		public FPEInventoryManagerScript.eInventoryItems InventoryItemType
		{
			[Token(Token = "0x6000E82")]
			[Address(RVA = "0xCF8F44", Offset = "0xCF8F44", VA = "0xCF8F44")]
			get
			{
				return default(FPEInventoryManagerScript.eInventoryItems);
			}
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xCF8F4C", Offset = "0xCF8F4C", VA = "0xCF8F4C")]
		public FPEInventoryItemSaveData(FPEInventoryManagerScript.eInventoryItems type)
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xCF8F74", Offset = "0xCF8F74", VA = "0xCF8F74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F4")]
	public class FPEAudioDiaryEntrySaveData
	{
		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string title;

		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string clipName;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool showTitle;

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xCF9024", Offset = "0xCF9024", VA = "0xCF9024")]
		public FPEAudioDiaryEntrySaveData(string diaryTitle, string audioClipName, bool showDiaryTitle)
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xCF907C", Offset = "0xCF907C", VA = "0xCF907C")]
		public FPEAudioDiaryEntry getAudioDiaryEntry()
		{
			return null;
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xCF9458", Offset = "0xCF9458", VA = "0xCF9458", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F5")]
	public class FPENoteSaveData
	{
		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string title;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string body;

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xCF9650", Offset = "0xCF9650", VA = "0xCF9650")]
		public FPENoteSaveData(string noteTitle, string noteBody)
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xCF9694", Offset = "0xCF9694", VA = "0xCF9694")]
		public FPENoteEntry getNoteEntry()
		{
			return null;
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xCF9700", Offset = "0xCF9700", VA = "0xCF9700", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F6")]
	public class FPEInventorySaveData
	{
		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FPEHeldObjectSaveData heldObjData;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPEInventoryItemSaveData[] invItems;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FPEAudioDiaryEntrySaveData[] audioDiaryData;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPENoteSaveData[] noteData;

		[Token(Token = "0x1700015C")]
		public FPEHeldObjectSaveData HeldObjectData
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xCF991C", Offset = "0xCF991C", VA = "0xCF991C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015D")]
		public FPEInventoryItemSaveData[] InventoryItemData
		{
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0xCF9924", Offset = "0xCF9924", VA = "0xCF9924")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		public FPEAudioDiaryEntrySaveData[] AudioDiaryData
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xCF992C", Offset = "0xCF992C", VA = "0xCF992C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015F")]
		public FPENoteSaveData[] NoteData
		{
			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0xCF9934", Offset = "0xCF9934", VA = "0xCF9934")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xCF993C", Offset = "0xCF993C", VA = "0xCF993C")]
		public FPEInventorySaveData(FPEHeldObjectSaveData heldObjectData, FPEInventoryItemSaveData[] inventoryItems, FPEAudioDiaryEntrySaveData[] audioDiaries, FPENoteSaveData[] notes)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xCF99B0", Offset = "0xCF99B0", VA = "0xCF99B0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F7")]
	public class FPEGameOptionsSaveData
	{
		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float sensitivity;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool smoothing;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool gamepad;

		[Token(Token = "0x17000160")]
		public float LookSensitivity
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xCF9B38", Offset = "0xCF9B38", VA = "0xCF9B38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000161")]
		public bool LookSmoothing
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xCF9B40", Offset = "0xCF9B40", VA = "0xCF9B40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000162")]
		public bool UseGamepad
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xCF9B48", Offset = "0xCF9B48", VA = "0xCF9B48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xCF9B50", Offset = "0xCF9B50", VA = "0xCF9B50")]
		public FPEGameOptionsSaveData(float lookSensitivity, bool lookSmoothing, bool useGamepad)
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xCF9B90", Offset = "0xCF9B90", VA = "0xCF9B90", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F8")]
	public class FPEDoorSaveData
	{
		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPEDoor.eDoorState state;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string doorHandleString;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPEVector3 customDoorVector;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isInternallyLocked;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool isExternallyLocked;

		[Token(Token = "0x17000163")]
		public string ObjectName
		{
			[Token(Token = "0x6000E96")]
			[Address(RVA = "0xCF9DA0", Offset = "0xCF9DA0", VA = "0xCF9DA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000164")]
		public FPEDoor.eDoorState DoorState
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xCF9DA8", Offset = "0xCF9DA8", VA = "0xCF9DA8")]
			get
			{
				return default(FPEDoor.eDoorState);
			}
		}

		[Token(Token = "0x17000165")]
		public string DoorHandleString
		{
			[Token(Token = "0x6000E98")]
			[Address(RVA = "0xCF9DB0", Offset = "0xCF9DB0", VA = "0xCF9DB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		public UnityEngine.Vector3 CustomDoorVector
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xCF9DB8", Offset = "0xCF9DB8", VA = "0xCF9DB8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000167")]
		public bool IsInternallyLocked
		{
			[Token(Token = "0x6000E9A")]
			[Address(RVA = "0xCF9DD4", Offset = "0xCF9DD4", VA = "0xCF9DD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000168")]
		public bool IsExternallyLocked
		{
			[Token(Token = "0x6000E9B")]
			[Address(RVA = "0xCF9DDC", Offset = "0xCF9DDC", VA = "0xCF9DDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xCF9DE4", Offset = "0xCF9DE4", VA = "0xCF9DE4")]
		public FPEDoorSaveData(string objectName, FPEDoor.eDoorState doorState, string handleString, UnityEngine.Vector3 customVector, bool internallyLocked, bool externallyLocked)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xCF9EE4", Offset = "0xCF9EE4", VA = "0xCF9EE4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002F9")]
	public class FPEDrawerSaveData
	{
		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FPEDrawer.eDrawerState state;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string drawerPullString;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPEVector3 customDrawerVector;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isInternallyLocked;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool isExternallyLocked;

		[Token(Token = "0x17000169")]
		public string ObjectName
		{
			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0xCFA398", Offset = "0xCFA398", VA = "0xCFA398")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016A")]
		public FPEDrawer.eDrawerState DrawerState
		{
			[Token(Token = "0x6000E9F")]
			[Address(RVA = "0xCFA3A0", Offset = "0xCFA3A0", VA = "0xCFA3A0")]
			get
			{
				return default(FPEDrawer.eDrawerState);
			}
		}

		[Token(Token = "0x1700016B")]
		public string DrawerPullString
		{
			[Token(Token = "0x6000EA0")]
			[Address(RVA = "0xCFA3A8", Offset = "0xCFA3A8", VA = "0xCFA3A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		public UnityEngine.Vector3 CustomDrawerVector
		{
			[Token(Token = "0x6000EA1")]
			[Address(RVA = "0xCFA3B0", Offset = "0xCFA3B0", VA = "0xCFA3B0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700016D")]
		public bool IsInternallyLocked
		{
			[Token(Token = "0x6000EA2")]
			[Address(RVA = "0xCFA3CC", Offset = "0xCFA3CC", VA = "0xCFA3CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016E")]
		public bool IsExternallyLocked
		{
			[Token(Token = "0x6000EA3")]
			[Address(RVA = "0xCFA3D4", Offset = "0xCFA3D4", VA = "0xCFA3D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xCFA3DC", Offset = "0xCFA3DC", VA = "0xCFA3DC")]
		public FPEDrawerSaveData(string objectName, FPEDrawer.eDrawerState drawerState, string handleString, UnityEngine.Vector3 customVector, bool internallyLocked, bool externallyLocked)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xCFA4DC", Offset = "0xCFA4DC", VA = "0xCFA4DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002FA")]
	public class FPEGenericObjectSaveData
	{
		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string objName;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int objInt;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float objFloat;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool objBool;

		[Token(Token = "0x1700016F")]
		public string SavedName
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xCFA990", Offset = "0xCFA990", VA = "0xCFA990")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000170")]
		public int SavedInt
		{
			[Token(Token = "0x6000EA7")]
			[Address(RVA = "0xCFA998", Offset = "0xCFA998", VA = "0xCFA998")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000171")]
		public float SavedFloat
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xCFA9A0", Offset = "0xCFA9A0", VA = "0xCFA9A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000172")]
		public bool SavedBool
		{
			[Token(Token = "0x6000EA9")]
			[Address(RVA = "0xCFA9A8", Offset = "0xCFA9A8", VA = "0xCFA9A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xCFA9B0", Offset = "0xCFA9B0", VA = "0xCFA9B0")]
		public FPEGenericObjectSaveData(string objectName, int objectInt, float objectFloat, bool objectBool)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xCFAA0C", Offset = "0xCFAA0C", VA = "0xCFAA0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002FB")]
	[CreateAssetMenu(menuName = "While Fun Games/Simple Sound Bank")]
	public class FPESimpleSoundBank : FPESoundBank
	{
		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] clips;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[FPEMinMaxRange(0f, 1f)]
		public FPEMinMaxRange volume;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FPEMinMaxRange(0.1f, 2f)]
		public FPEMinMaxRange pitch;

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xCFAD50", Offset = "0xCFAD50", VA = "0xCFAD50", Slot = "4")]
		public override void Play(AudioSource source)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xCFAE08", Offset = "0xCFAE08", VA = "0xCFAE08")]
		public FPESimpleSoundBank()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FC")]
	public abstract class FPESoundBank : ScriptableObject
	{
		[Token(Token = "0x6000EAE")]
		public abstract void Play(AudioSource source);

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xCFAE10", Offset = "0xCFAE10", VA = "0xCFAE10")]
		protected FPESoundBank()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public class FPETagAndLayerHelper : MonoBehaviour
	{
		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xCFAE18", Offset = "0xCFAE18", VA = "0xCFAE18")]
		public FPETagAndLayerHelper()
		{
		}
	}
}
namespace CarterGames.Assets.SaveManager
{
	[Serializable]
	[Token(Token = "0x20002FE")]
	public class SaveData
	{
		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xCFAE20", Offset = "0xCFAE20", VA = "0xCFAE20")]
		public SaveData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002FF")]
	public class SaveVector2
	{
		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float _x;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float _y;

		[Token(Token = "0x17000173")]
		public UnityEngine.Vector2 Vector2
		{
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xCFAE28", Offset = "0xCFAE28", VA = "0xCFAE28")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xCFAE30", Offset = "0xCFAE30", VA = "0xCFAE30")]
			set
			{
			}
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xCFAE38", Offset = "0xCFAE38", VA = "0xCFAE38")]
		public SaveVector2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000300")]
	public class SaveVector3
	{
		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float _x;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float _y;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float _z;

		[Token(Token = "0x17000174")]
		public UnityEngine.Vector3 Vector3
		{
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0xCFAE40", Offset = "0xCFAE40", VA = "0xCFAE40")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xCFAE4C", Offset = "0xCFAE4C", VA = "0xCFAE4C")]
			set
			{
			}
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xCFAE58", Offset = "0xCFAE58", VA = "0xCFAE58")]
		public SaveVector3()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000301")]
	public class SaveVector4
	{
		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float _x;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float _y;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float _z;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float _w;

		[Token(Token = "0x17000175")]
		public UnityEngine.Vector4 Vector4
		{
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xCFAE60", Offset = "0xCFAE60", VA = "0xCFAE60")]
			get
			{
				return default(UnityEngine.Vector4);
			}
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xCFAE6C", Offset = "0xCFAE6C", VA = "0xCFAE6C")]
			set
			{
			}
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xCFAE78", Offset = "0xCFAE78", VA = "0xCFAE78")]
		public SaveVector4()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000302")]
	public class SaveColor
	{
		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float _r;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float _g;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float _b;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float _a;

		[Token(Token = "0x17000176")]
		public UnityEngine.Color Color
		{
			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0xCFAE80", Offset = "0xCFAE80", VA = "0xCFAE80")]
			get
			{
				return default(UnityEngine.Color);
			}
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0xCFAE8C", Offset = "0xCFAE8C", VA = "0xCFAE8C")]
			set
			{
			}
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xCFAE98", Offset = "0xCFAE98", VA = "0xCFAE98")]
		public SaveColor()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public static class SaveManager
	{
		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xCFAEA0", Offset = "0xCFAEA0", VA = "0xCFAEA0")]
		public static void SaveGame(SaveData _data)
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xCFAFA0", Offset = "0xCFAFA0", VA = "0xCFAFA0")]
		public static SaveData LoadGame()
		{
			return null;
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xCFB11C", Offset = "0xCFB11C", VA = "0xCFB11C")]
		public static void ResetSaveFile()
		{
		}
	}
}
namespace CarterGames.Assets.SaveManager.Example
{
	[Token(Token = "0x2000304")]
	public class SaveManagerExample : MonoBehaviour
	{
		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input Fields")]
		public Text playerName;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text playerHealth;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text playerPosition0;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text playerPosition1;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text playerPosition2;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Text playerShield;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ExampleClass exampleClass;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Output Text Components")]
		public Text displayPlayerName;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Text displayPlayerHealth;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Text displayPlayerPosition;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Text displayPlayerShield;

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xCFB244", Offset = "0xCFB244", VA = "0xCFB244")]
		public void SaveGame()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xCFB4E8", Offset = "0xCFB4E8", VA = "0xCFB4E8")]
		public void LoadGame()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xCFB75C", Offset = "0xCFB75C", VA = "0xCFB75C")]
		public SaveManagerExample()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000305")]
	public class ExampleSaveData
	{
		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string examplePlayerName;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float examplePlayerHealth;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public SaveVector3 examplePlayerPosition;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public ExampleClass exampleCustomClass;

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xCFB3E0", Offset = "0xCFB3E0", VA = "0xCFB3E0")]
		public ExampleSaveData()
		{
		}
	}
	[Token(Token = "0x2000306")]
	public class ExampleSaveManager
	{
		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xCFB3E8", Offset = "0xCFB3E8", VA = "0xCFB3E8")]
		public static void SaveGame(ExampleSaveData _data)
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xCFB5E0", Offset = "0xCFB5E0", VA = "0xCFB5E0")]
		public static ExampleSaveData LoadGame()
		{
			return null;
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xCFB7E8", Offset = "0xCFB7E8", VA = "0xCFB7E8")]
		public ExampleSaveManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000307")]
	public class ExampleClass
	{
		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public int shieldAmount;

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xCFB7D8", Offset = "0xCFB7D8", VA = "0xCFB7D8")]
		public ExampleClass()
		{
		}
	}
}
namespace Unity.Services.Analytics
{
	[Token(Token = "0x2000308")]
	public class AnalyticsEventHandler : MonoBehaviour
	{
		[StructLayout(3)]
		[Token(Token = "0x2000309")]
		[CompilerGenerated]
		private struct <Start>d__5 : IAsyncStateMachine
		{
			[Token(Token = "0x4001292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4001294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private TaskAwaiter <>u__1;

			[Token(Token = "0x4001295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private TaskAwaiter<List<string>> <>u__2;

			[Token(Token = "0x6000EDE")]
			[Address(RVA = "0xD003A0", Offset = "0xD003A0", VA = "0xD003A0", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0xD00714", Offset = "0xD00714", VA = "0xD00714", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text consoleOutput;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ScrollRect consoleScrollRect;

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xCFB7F0", Offset = "0xCFB7F0", VA = "0xCFB7F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xCFB870", Offset = "0xCFB870", VA = "0xCFB870")]
		private void OnLogMessageReceived(string condition, string stacktrace, LogType type)
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xCFB9DC", Offset = "0xCFB9DC", VA = "0xCFB9DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xCFBA5C", Offset = "0xCFBA5C", VA = "0xCFBA5C")]
		[AsyncStateMachine(typeof(<Start>d__5))]
		private void Start()
		{
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xCFBAF8", Offset = "0xCFBAF8", VA = "0xCFBAF8")]
		public void RecordMinimalAdImpressionEvent()
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xCFBD34", Offset = "0xCFBD34", VA = "0xCFBD34")]
		public void RecordCompleteAdImpressionEvent()
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xCFC170", Offset = "0xCFC170", VA = "0xCFC170")]
		public void RecordSaleTransactionWithOnlyRequiredValues()
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xCFC37C", Offset = "0xCFC37C", VA = "0xCFC37C")]
		public void RecordSaleTransactionWithRealCurrency()
		{
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xCFC898", Offset = "0xCFC898", VA = "0xCFC898")]
		public void RecordSaleTransactionWithVirtualCurrency()
		{
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xCFCDC4", Offset = "0xCFCDC4", VA = "0xCFCDC4")]
		public void RecordSaleTransactionWithMultipleVirtualCurrencies()
		{
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xCFD3C0", Offset = "0xCFD3C0", VA = "0xCFD3C0")]
		public void RecordSaleEventWithOneItem()
		{
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xCFD8D8", Offset = "0xCFD8D8", VA = "0xCFD8D8")]
		public void RecordSaleEventWithMultipleItems()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xCFE2EC", Offset = "0xCFE2EC", VA = "0xCFE2EC")]
		public void RecordSaleEventWithOptionalParameters()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xCFE6F4", Offset = "0xCFE6F4", VA = "0xCFE6F4")]
		public void RecordAcquisitionSourceEventWithOnlyRequiredValues()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xCFE950", Offset = "0xCFE950", VA = "0xCFE950")]
		public void RecordAcquisitionSourceEventWithOptionalParameters()
		{
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xCFEC68", Offset = "0xCFEC68", VA = "0xCFEC68")]
		public void RecordPurchaseEventWithOneItem()
		{
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xCFF180", Offset = "0xCFF180", VA = "0xCFF180")]
		public void RecordPurchaseEventWithMultipleItems()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xCFF798", Offset = "0xCFF798", VA = "0xCFF798")]
		public void RecordPurchaseEventWithMultipleCurrencies()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xCFFD84", Offset = "0xCFFD84", VA = "0xCFFD84")]
		public void RecordCustomEventWithNoParameters()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xCFFF4C", Offset = "0xCFFF4C", VA = "0xCFFF4C")]
		public void RecordCustomEventWithParameters()
		{
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xD00398", Offset = "0xD00398", VA = "0xD00398")]
		public AnalyticsEventHandler()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public static class CustomEventSample
	{
		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xCFFDF0", Offset = "0xCFFDF0", VA = "0xCFFDF0")]
		public static void RecordCustomEventWithNoParameters()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xCFFFB8", Offset = "0xCFFFB8", VA = "0xCFFFB8")]
		public static void RecordCustomEventWithParameters()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class StandardEventSample
	{
		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xCFBB64", Offset = "0xCFBB64", VA = "0xCFBB64")]
		public static void RecordMinimalAdImpressionEvent()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xCFBDA0", Offset = "0xCFBDA0", VA = "0xCFBDA0")]
		public static void RecordCompleteAdImpressionEvent()
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xCFC1DC", Offset = "0xCFC1DC", VA = "0xCFC1DC")]
		public static void RecordSaleTransactionWithOnlyRequiredValues()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xCFC3E8", Offset = "0xCFC3E8", VA = "0xCFC3E8")]
		public static void RecordSaleTransactionWithRealCurrency()
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xCFC904", Offset = "0xCFC904", VA = "0xCFC904")]
		public static void RecordSaleTransactionWithVirtualCurrency()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xCFCE30", Offset = "0xCFCE30", VA = "0xCFCE30")]
		public static void RecordSaleTransactionWithMultipleVirtualCurrencies()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xCFD42C", Offset = "0xCFD42C", VA = "0xCFD42C")]
		public static void RecordSaleEventWithOneItem()
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xCFD944", Offset = "0xCFD944", VA = "0xCFD944")]
		public static void RecordSaleEventWithMultipleItems()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xCFE358", Offset = "0xCFE358", VA = "0xCFE358")]
		public static void RecordSaleEventWithOptionalParameters()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xCFE760", Offset = "0xCFE760", VA = "0xCFE760")]
		public static void RecordAcquisitionSourceEventWithOnlyRequiredValues()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xCFE9BC", Offset = "0xCFE9BC", VA = "0xCFE9BC")]
		public static void RecordAcquisitionSourceEventWithOptionalParameters()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xCFECD4", Offset = "0xCFECD4", VA = "0xCFECD4")]
		public static void RecordPurchaseEventWithOneItem()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xCFF1EC", Offset = "0xCFF1EC", VA = "0xCFF1EC")]
		public static void RecordPurchaseEventWithMultipleItems()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xCFF804", Offset = "0xCFF804", VA = "0xCFF804")]
		public static void RecordPurchaseEventWithMultipleCurrencies()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xD00720", Offset = "0xD00720", VA = "0xD00720")]
		public StandardEventSample()
		{
		}
	}
}
namespace HutongGames.PlayMaker.Actions
{
	[Token(Token = "0x200030C")]
	[Tooltip("Load Data saved using Binary Save, for Array only type of float, integer, string that are currently working, feel free to test other data types")]
	[ActionCategory("Input Output")]
	public class BinaryLoad : FsmStateAction
	{
		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("load your float variable here if there are any saved, can be more than one")]
		public FsmFloat[] floatVar;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("load your int variable here if there are any saved, can be more than one")]
		public FsmInt[] intVar;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("load your string variable here if there are any saved, can be more than one")]
		public FsmString[] stringVar;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("load your bool variable here if there are any saved, can be more than one")]
		public FsmBool[] boolVar;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("load your array variable here, can be more than one and can be a different type (only float, integer and string are currently tested)")]
		[UIHint(UIHint.Variable)]
		public FsmArray[] arrayVar;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("name of the save file that will be loaded, make sure the name its the same with the one on Binary Save")]
		public FsmString filename;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public FsmEvent notFoundEvent;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SavedData loadData;

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xD00728", Offset = "0xD00728", VA = "0xD00728", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xD00770", Offset = "0xD00770", VA = "0xD00770", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xD0078C", Offset = "0xD0078C", VA = "0xD0078C")]
		private void DoLoad()
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xD00C80", Offset = "0xD00C80", VA = "0xD00C80")]
		public BinaryLoad()
		{
		}
	}
	[Token(Token = "0x200030D")]
	[Tooltip("Save Data to be load later using Binary Load, for Array only type of float, integer, string that are currently working, feel free to test other data types")]
	[ActionCategory("Input Output")]
	public class BinarySave : FsmStateAction
	{
		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Save your float variable here, can be more than one")]
		public FsmFloat[] floatVar;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Save your integer variable here, can be more than one")]
		public FsmInt[] intVar;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Save your string variable here, can be more than one")]
		public FsmString[] stringVar;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Save your bool variable here, can be more than one")]
		public FsmBool[] boolVar;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Save your array variable here, can be more than one and can be a different type (only float, integer and string are currently tested)")]
		public FsmArray[] arrayVar;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("name of the save file that will be outputted")]
		public FsmString filename;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SavedData saveData;

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xD00CFC", Offset = "0xD00CFC", VA = "0xD00CFC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xD00D44", Offset = "0xD00D44", VA = "0xD00D44", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xD00D60", Offset = "0xD00D60", VA = "0xD00D60")]
		private void DoSave()
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xD01038", Offset = "0xD01038", VA = "0xD01038")]
		public BinarySave()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200030E")]
	public class SavedData
	{
		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FsmFloat[] savedFloat;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FsmInt[] savedInt;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FsmString[] savedString;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FsmBool[] savedBool;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FsmArray[] savedArray;

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xD00CF4", Offset = "0xD00CF4", VA = "0xD00CF4")]
		public SavedData()
		{
		}
	}
	[Token(Token = "0x200030F")]
	[Tooltip("Copies an Array variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyArrayToPool : SSKey
	{
		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Copy this variable to the data pool.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmArray Array;

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xD010AC", Offset = "0xD010AC", VA = "0xD010AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xD010E0", Offset = "0xD010E0", VA = "0xD010E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xD01784", Offset = "0xD01784", VA = "0xD01784", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xD0188C", Offset = "0xD0188C", VA = "0xD0188C")]
		public CopyArrayToPool()
		{
		}
	}
	[Token(Token = "0x2000310")]
	[Tooltip("Copies a Bool variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyBoolToPool : SSKey
	{
		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Copy this variable to the data pool.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmBool Bool;

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xD018E8", Offset = "0xD018E8", VA = "0xD018E8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xD01910", Offset = "0xD01910", VA = "0xD01910", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xD01960", Offset = "0xD01960", VA = "0xD01960")]
		public CopyBoolToPool()
		{
		}
	}
	[Token(Token = "0x2000311")]
	[Tooltip("Copies a Color variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyColorToPool : SSKey
	{
		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Copy this variable to the data pool.")]
		[UIHint(UIHint.Variable)]
		public FsmColor Color;

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xD01964", Offset = "0xD01964", VA = "0xD01964", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xD0198C", Offset = "0xD0198C", VA = "0xD0198C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xD019DC", Offset = "0xD019DC", VA = "0xD019DC")]
		public CopyColorToPool()
		{
		}
	}
	[Token(Token = "0x2000312")]
	[Tooltip("Copies an Array variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyEnumToPool : SSKey
	{
		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Copy this variable to the data pool.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmEnum Enum;

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xD019E0", Offset = "0xD019E0", VA = "0xD019E0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xD01A08", Offset = "0xD01A08", VA = "0xD01A08", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xD01A58", Offset = "0xD01A58", VA = "0xD01A58")]
		public CopyEnumToPool()
		{
		}
	}
	[Token(Token = "0x2000313")]
	[Tooltip("Copies a Float variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyFloatToPool : SSKey
	{
		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Copy this variable to the data pool.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmFloat Float;

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xD01A5C", Offset = "0xD01A5C", VA = "0xD01A5C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xD01A84", Offset = "0xD01A84", VA = "0xD01A84", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xD01AD4", Offset = "0xD01AD4", VA = "0xD01AD4")]
		public CopyFloatToPool()
		{
		}
	}
	[Token(Token = "0x2000314")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies variables from the current FSM to the data pool.")]
	public class CopyFsmToPool : SSSaveAll
	{
		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xD01AD8", Offset = "0xD01AD8", VA = "0xD01AD8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xD01B88", Offset = "0xD01B88", VA = "0xD01B88")]
		public CopyFsmToPool()
		{
		}
	}
	[Token(Token = "0x2000315")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies a GameObject variable to the data pool.")]
	public class CopyGameObjectToPool : SSKey
	{
		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Copy this variable to the data pool.")]
		public FsmGameObject GameObject;

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xD01B90", Offset = "0xD01B90", VA = "0xD01B90", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xD01BB8", Offset = "0xD01BB8", VA = "0xD01BB8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xD01C08", Offset = "0xD01C08", VA = "0xD01C08")]
		public CopyGameObjectToPool()
		{
		}
	}
	[Token(Token = "0x2000316")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies variables from the Globals to the data pool.")]
	public class CopyGlobalsToPool : SSSaveAll
	{
		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xD01C0C", Offset = "0xD01C0C", VA = "0xD01C0C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xD01C38", Offset = "0xD01C38", VA = "0xD01C38")]
		public CopyGlobalsToPool()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies a Int variable to the data pool.")]
	public class CopyIntToPool : SSKey
	{
		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Copy this variable to the data pool.")]
		[UIHint(UIHint.Variable)]
		public FsmInt Int;

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xD01C3C", Offset = "0xD01C3C", VA = "0xD01C3C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xD01C64", Offset = "0xD01C64", VA = "0xD01C64", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xD01CB4", Offset = "0xD01CB4", VA = "0xD01CB4")]
		public CopyIntToPool()
		{
		}
	}
	[Token(Token = "0x2000318")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to an Array variable.")]
	public class CopyPoolToArray : SSKeyData
	{
		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Copy data from the pool to this variable.")]
		[UIHint(UIHint.Variable)]
		public FsmArray Array;

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xD01CB8", Offset = "0xD01CB8", VA = "0xD01CB8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xD01D18", Offset = "0xD01D18", VA = "0xD01D18", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xD01DA0", Offset = "0xD01DA0", VA = "0xD01DA0", Slot = "61")]
		public override string ErrorCheck()
		{
			return null;
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0xD01DA8", Offset = "0xD01DA8", VA = "0xD01DA8")]
		public CopyPoolToArray()
		{
		}
	}
	[Token(Token = "0x2000319")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to a Bool variable.")]
	public class CopyPoolToBool : SSKeyData
	{
		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Copy data from the pool to this variable.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmBool Bool;

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xD01E04", Offset = "0xD01E04", VA = "0xD01E04", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xD01E3C", Offset = "0xD01E3C", VA = "0xD01E3C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xD01E90", Offset = "0xD01E90", VA = "0xD01E90")]
		public CopyPoolToBool()
		{
		}
	}
	[Token(Token = "0x200031A")]
	[Tooltip("Copies data from the pool to a Color variable.")]
	[ActionCategory("Smooth Save")]
	public class CopyPoolToColor : SSKeyData
	{
		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Copy data from the pool to this variable.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmColor Color;

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xD01E94", Offset = "0xD01E94", VA = "0xD01E94", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xD01ECC", Offset = "0xD01ECC", VA = "0xD01ECC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0xD01F20", Offset = "0xD01F20", VA = "0xD01F20")]
		public CopyPoolToColor()
		{
		}
	}
	[Token(Token = "0x200031B")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to a Bool variable.")]
	public class CopyPoolToEnum : SSKeyData
	{
		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		[Tooltip("Copy data from the pool to this variable.")]
		public FsmEnum Enum;

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xD01F24", Offset = "0xD01F24", VA = "0xD01F24", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xD01F5C", Offset = "0xD01F5C", VA = "0xD01F5C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xD01FB0", Offset = "0xD01FB0", VA = "0xD01FB0")]
		public CopyPoolToEnum()
		{
		}
	}
	[Token(Token = "0x200031C")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to a Float variable.")]
	public class CopyPoolToFloat : SSKeyData
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Copy data from the pool to this variable.")]
		[RequiredField]
		public FsmFloat Float;

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xD01FB4", Offset = "0xD01FB4", VA = "0xD01FB4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xD01FEC", Offset = "0xD01FEC", VA = "0xD01FEC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xD02040", Offset = "0xD02040", VA = "0xD02040")]
		public CopyPoolToFloat()
		{
		}
	}
	[Token(Token = "0x200031D")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to variables in the current FSM.")]
	public class CopyPoolToFsm : SSLoadAll
	{
		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xD02044", Offset = "0xD02044", VA = "0xD02044", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xD02114", Offset = "0xD02114", VA = "0xD02114")]
		public CopyPoolToFsm()
		{
		}
	}
	[Token(Token = "0x200031E")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to a Game Object variable.")]
	public class CopyPoolToGameObject : SSKeyData
	{
		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Copy data from the pool to this variable.")]
		public FsmGameObject GameObject;

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xD0211C", Offset = "0xD0211C", VA = "0xD0211C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xD02154", Offset = "0xD02154", VA = "0xD02154", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xD021A8", Offset = "0xD021A8", VA = "0xD021A8")]
		public CopyPoolToGameObject()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[Tooltip("Copies data from the pool to variables in the Globals.")]
	[ActionCategory("Smooth Save")]
	public class CopyPoolToGlobals : SSLoadAll
	{
		[Token(Token = "0x6000F29")]
		[Address(RVA = "0xD021AC", Offset = "0xD021AC", VA = "0xD021AC", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xD021D8", Offset = "0xD021D8", VA = "0xD021D8")]
		public CopyPoolToGlobals()
		{
		}
	}
	[Token(Token = "0x2000320")]
	[Tooltip("Copies data from the pool to a Int variable.")]
	[ActionCategory("Smooth Save")]
	public class CopyPoolToInt : SSKeyData
	{
		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Copy data from the pool to this variable.")]
		[UIHint(UIHint.Variable)]
		public FsmInt Int;

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xD021DC", Offset = "0xD021DC", VA = "0xD021DC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xD02214", Offset = "0xD02214", VA = "0xD02214", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xD02268", Offset = "0xD02268", VA = "0xD02268")]
		public CopyPoolToInt()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to a Quaternion variable.")]
	public class CopyPoolToQuaternion : SSKeyData
	{
		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Copy data from the pool to this variable.")]
		[UIHint(UIHint.Variable)]
		public FsmQuaternion Quaternion;

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xD0226C", Offset = "0xD0226C", VA = "0xD0226C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xD022A4", Offset = "0xD022A4", VA = "0xD022A4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xD022F8", Offset = "0xD022F8", VA = "0xD022F8")]
		public CopyPoolToQuaternion()
		{
		}
	}
	[Token(Token = "0x2000322")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to a Rect variable.")]
	public class CopyPoolToRect : SSKeyData
	{
		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Copy data from the pool to this variable.")]
		public FsmRect Rect;

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xD022FC", Offset = "0xD022FC", VA = "0xD022FC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xD02334", Offset = "0xD02334", VA = "0xD02334", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xD02388", Offset = "0xD02388", VA = "0xD02388")]
		public CopyPoolToRect()
		{
		}
	}
	[Token(Token = "0x2000323")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies data from the pool to a String variable.")]
	public class CopyPoolToString : SSKeyData
	{
		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Copy data from the pool to this variable.")]
		public FsmString String;

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xD0238C", Offset = "0xD0238C", VA = "0xD0238C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xD023C4", Offset = "0xD023C4", VA = "0xD023C4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xD02418", Offset = "0xD02418", VA = "0xD02418")]
		public CopyPoolToString()
		{
		}
	}
	[Token(Token = "0x2000324")]
	[Tooltip("Copies data from the pool to a Vector2 variable.")]
	[ActionCategory("Smooth Save")]
	public class CopyPoolToVector2 : SSKeyData
	{
		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[Tooltip("Copy data from the pool to this variable.")]
		[UIHint(UIHint.Variable)]
		public FsmVector2 Vector2;

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xD0241C", Offset = "0xD0241C", VA = "0xD0241C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xD02454", Offset = "0xD02454", VA = "0xD02454", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xD024A8", Offset = "0xD024A8", VA = "0xD024A8")]
		public CopyPoolToVector2()
		{
		}
	}
	[Token(Token = "0x2000325")]
	[Tooltip("Copies data from the pool to a Vector3 variable.")]
	[ActionCategory("Smooth Save")]
	public class CopyPoolToVector3 : SSKeyData
	{
		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Copy data from the pool to this variable.")]
		public FsmVector3 Vector3;

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xD024AC", Offset = "0xD024AC", VA = "0xD024AC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xD024E4", Offset = "0xD024E4", VA = "0xD024E4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xD02538", Offset = "0xD02538", VA = "0xD02538")]
		public CopyPoolToVector3()
		{
		}
	}
	[Token(Token = "0x2000326")]
	[Tooltip("Copies a Quaternion variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyQuaternionToPool : SSKey
	{
		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Copy this variable to the data pool.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmQuaternion Quaternion;

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xD0253C", Offset = "0xD0253C", VA = "0xD0253C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xD02564", Offset = "0xD02564", VA = "0xD02564", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xD025B4", Offset = "0xD025B4", VA = "0xD025B4")]
		public CopyQuaternionToPool()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies a Rect variable to the data pool.")]
	public class CopyRectToPool : SSKey
	{
		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[Tooltip("Copy this variable to the data pool.")]
		[UIHint(UIHint.Variable)]
		public FsmRect Rect;

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xD025B8", Offset = "0xD025B8", VA = "0xD025B8", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xD025E0", Offset = "0xD025E0", VA = "0xD025E0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xD02630", Offset = "0xD02630", VA = "0xD02630")]
		public CopyRectToPool()
		{
		}
	}
	[Token(Token = "0x2000328")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Copies a String variable to the data pool.")]
	public class CopyStringToPool : SSKey
	{
		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		[Tooltip("Copy this variable to the data pool.")]
		public FsmString String;

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xD02634", Offset = "0xD02634", VA = "0xD02634", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xD0265C", Offset = "0xD0265C", VA = "0xD0265C", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xD026AC", Offset = "0xD026AC", VA = "0xD026AC")]
		public CopyStringToPool()
		{
		}
	}
	[Token(Token = "0x2000329")]
	[Tooltip("Copies a Vector2 variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyVector2ToPool : SSKey
	{
		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Copy this variable to the data pool.")]
		[UIHint(UIHint.Variable)]
		[RequiredField]
		public FsmVector2 Vector2;

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xD026B0", Offset = "0xD026B0", VA = "0xD026B0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xD026D8", Offset = "0xD026D8", VA = "0xD026D8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xD02728", Offset = "0xD02728", VA = "0xD02728")]
		public CopyVector2ToPool()
		{
		}
	}
	[Token(Token = "0x200032A")]
	[Tooltip("Copies a Vector3 variable to the data pool.")]
	[ActionCategory("Smooth Save")]
	public class CopyVector3ToPool : SSKey
	{
		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Copy this variable to the data pool.")]
		[RequiredField]
		[UIHint(UIHint.Variable)]
		public FsmVector3 Vector3;

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xD0272C", Offset = "0xD0272C", VA = "0xD0272C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xD02754", Offset = "0xD02754", VA = "0xD02754", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xD027A4", Offset = "0xD027A4", VA = "0xD027A4")]
		public CopyVector3ToPool()
		{
		}
	}
	[Token(Token = "0x200032B")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Displays the contents of the data pool on the console.")]
	public class DebugDataPool : SSBase
	{
		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UIHint(UIHint.Description)]
		public string description;

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xD027A8", Offset = "0xD027A8", VA = "0xD027A8", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xD031A4", Offset = "0xD031A4", VA = "0xD031A4")]
		public DebugDataPool()
		{
		}
	}
	[Token(Token = "0x200032C")]
	[Tooltip("Deletes a data pool file and, if loaded, removes it from memory.")]
	[ActionCategory("Smooth Save")]
	public class DeleteDataPool : SSFileAccess
	{
		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If given, deletes the pool with this ID.  If None, the default pool is deleted.")]
		public FsmInt PoolId;

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xD03230", Offset = "0xD03230", VA = "0xD03230", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xD032A0", Offset = "0xD032A0", VA = "0xD032A0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xD03528", Offset = "0xD03528", VA = "0xD03528")]
		public DeleteDataPool()
		{
		}
	}
	[Token(Token = "0x200032D")]
	[Tooltip("Gets information about the current data pool.")]
	[ActionCategory("Smooth Save")]
	public class GetDataPoolInfo : SSUnloaded
	{
		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Returns the ID of the current data pool.  -1 if no pool is loaded.")]
		public FsmInt PoolId;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Returns the name of the current data pool.")]
		[UIHint(UIHint.Variable)]
		public FsmString PoolName;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Returns the number of values stored in the current data pool.")]
		[UIHint(UIHint.Variable)]
		public FsmInt PoolSize;

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xD0355C", Offset = "0xD0355C", VA = "0xD0355C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xD035B0", Offset = "0xD035B0", VA = "0xD035B0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xD036F8", Offset = "0xD036F8", VA = "0xD036F8")]
		public GetDataPoolInfo()
		{
		}
	}
	[Token(Token = "0x200032E")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Loads a data pool from file.")]
	public class LoadDataPool : SSLoadFileAccess
	{
		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xD03754", Offset = "0xD03754", VA = "0xD03754", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xD038F8", Offset = "0xD038F8", VA = "0xD038F8")]
		public LoadDataPool()
		{
		}
	}
	[Token(Token = "0x200032F")]
	[Tooltip("Creates and loads a new data pool.  Unloads any previous data pool.")]
	[ActionCategory("Smooth Save")]
	public class MakeDataPool : SSAccess
	{
		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If given, sets the data pool name.")]
		public FsmString PoolName;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Returns the ID of the created data pool.")]
		[UIHint(UIHint.Variable)]
		public FsmInt PoolId;

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xD0392C", Offset = "0xD0392C", VA = "0xD0392C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xD03970", Offset = "0xD03970", VA = "0xD03970", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xD03B64", Offset = "0xD03B64", VA = "0xD03B64")]
		public MakeDataPool()
		{
		}
	}
	[Token(Token = "0x2000330")]
	[Tooltip("Saves the current data pool to file.")]
	[ActionCategory("Smooth Save")]
	public class SaveDataPool : SSUnloadedAccess
	{
		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xD03BC0", Offset = "0xD03BC0", VA = "0xD03BC0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xD03C80", Offset = "0xD03C80", VA = "0xD03C80")]
		public SaveDataPool()
		{
		}
	}
	[Token(Token = "0x2000331")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Sets the name of the current data pool.")]
	public class SetDataPoolName : SSUnloaded
	{
		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The new name for the current data pool.")]
		public FsmString PoolName;

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xD03C88", Offset = "0xD03C88", VA = "0xD03C88", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xD03CB0", Offset = "0xD03CB0", VA = "0xD03CB0", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xD03D64", Offset = "0xD03D64", VA = "0xD03D64")]
		public SetDataPoolName()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public abstract class SSAccess : SSBase
	{
		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Call this event if there is an error accessing the data pool file.")]
		public FsmEvent FileErrorEvent;

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xD03964", Offset = "0xD03964", VA = "0xD03964", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xD03B68", Offset = "0xD03B68", VA = "0xD03B68")]
		protected SSAccess()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public abstract class SSBase : FsmStateAction
	{
		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static SmoothSaveDataPool _dataPool;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly VariableType[] _validFsmVariableTypes;

		[Token(Token = "0x17000177")]
		public static bool UsePlayerPrefs
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0xD03D68", Offset = "0xD03D68", VA = "0xD03D68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xD03DC0", Offset = "0xD03DC0", VA = "0xD03DC0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public static bool EncodePlayerPrefs
		{
			[Token(Token = "0x6000F62")]
			[Address(RVA = "0xD03E1C", Offset = "0xD03E1C", VA = "0xD03E1C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0xD03E74", Offset = "0xD03E74", VA = "0xD03E74")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xD03ED0", Offset = "0xD03ED0", VA = "0xD03ED0")]
		private SmoothSaveDataSource FindDataSource(SmoothSaveDataSource newDataSource)
		{
			return null;
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0xD01130", Offset = "0xD01130", VA = "0xD01130")]
		protected bool DoVariableAction(VariableAction variableAction, NamedVariable fsmVariable, string key, [Optional] bool? isGlobal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xD043F8", Offset = "0xD043F8", VA = "0xD043F8")]
		protected bool DoBatchVariableAction(FsmVariables fsmVariables, VariableAction variableAction, string filter, FsmVariableType fsmVariableType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xD046B8", Offset = "0xD046B8", VA = "0xD046B8")]
		private bool MatchFilter(string target, string filter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xD041D0", Offset = "0xD041D0", VA = "0xD041D0")]
		private bool DoGameObjectAction(VariableAction variableAction, FsmGameObject fsmGameObject, string key, bool isGlobal, int index = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xD059D4", Offset = "0xD059D4", VA = "0xD059D4")]
		private string GetGameObjectPropertyKey(string key, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xD04920", Offset = "0xD04920", VA = "0xD04920")]
		private bool GameObjectToPool(FsmGameObject fsmGameObject, string key, bool isGlobal, int index = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xD05084", Offset = "0xD05084", VA = "0xD05084")]
		private bool PoolToGameObject(FsmGameObject fsmGameObject, string key, bool isGlobal, int index = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xD040F4", Offset = "0xD040F4", VA = "0xD040F4")]
		private void DefaultDataPool()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xD05A1C", Offset = "0xD05A1C", VA = "0xD05A1C")]
		private int GetDefaultPoolId()
		{
			return default(int);
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xD03BE0", Offset = "0xD03BE0", VA = "0xD03BE0")]
		protected FileActionResult SaveDataPool()
		{
			return default(FileActionResult);
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xD03794", Offset = "0xD03794", VA = "0xD03794")]
		public FileActionResult LoadDataPool(int id, bool ignoreEmpty = false)
		{
			return default(FileActionResult);
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xD039D4", Offset = "0xD039D4", VA = "0xD039D4")]
		protected int MakeDataPool([Optional] string name)
		{
			return default(int);
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xD032DC", Offset = "0xD032DC", VA = "0xD032DC")]
		protected FileActionResult DeleteDataPool(int id = -1)
		{
			return default(FileActionResult);
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xD027C4", Offset = "0xD027C4", VA = "0xD027C4")]
		protected void DebugDataPool()
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0xD05AAC", Offset = "0xD05AAC", VA = "0xD05AAC")]
		protected bool UnloadDataPool()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xD0178C", Offset = "0xD0178C", VA = "0xD0178C")]
		protected string CheckArrayType(FsmArray array)
		{
			return null;
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xD04810", Offset = "0xD04810", VA = "0xD04810")]
		protected bool IsValidFsmVariableType(NamedVariable fsmVariable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xD01D6C", Offset = "0xD01D6C", VA = "0xD01D6C")]
		protected void FailEventOrFinish(bool success, FsmEvent failEvent)
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xD034D4", Offset = "0xD034D4", VA = "0xD034D4")]
		protected void FailEventOrFinish(FileActionResult fileActionResult, FsmEvent notFoundEvent, FsmEvent accessErrorEvent)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xD03228", Offset = "0xD03228", VA = "0xD03228")]
		protected SSBase()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public abstract class SSFileAccess : SSAccess
	{
		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Call this event if the data pool file is not found.")]
		public FsmEvent FileNotFoundEvent;

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xD03278", Offset = "0xD03278", VA = "0xD03278", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xD03558", Offset = "0xD03558", VA = "0xD03558")]
		protected SSFileAccess()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public abstract class SSFilterTypeDataNowLoadFileAccess : SSLoadFileAccess
	{
		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If given, selects variables by name.  \"abc*\" for starts with, \"*abc\" for ends with, or \"abc\" for anywhere.  Not case sensitive.  Leave blank to select all variables.")]
		public FsmString Filter;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The type of variables to copy to.")]
		public FsmVariableType VariableType;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Call this event if the variable data is not found in the pool.")]
		public FsmEvent DataNotFoundEvent;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Load the data pool from file before copying to the variables.")]
		public FsmBool LoadNow;

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xD05C6C", Offset = "0xD05C6C", VA = "0xD05C6C", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xD05D14", Offset = "0xD05D14", VA = "0xD05D14")]
		protected SSFilterTypeDataNowLoadFileAccess()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public abstract class SSFilterTypeSaveAccess : SSAccess
	{
		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If given, selects variables by name.  \"abc*\" for starts with, \"*abc\" for ends with, or \"abc\" for anywhere.  Not case sensitive.  Leave blank to select all variables.")]
		public FsmString Filter;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The type of variables to copy from.")]
		public FsmVariableType VariableType;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Save the data pool to file after copying from the variables.")]
		public FsmBool SaveNow;

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xD05D44", Offset = "0xD05D44", VA = "0xD05D44", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xD05D8C", Offset = "0xD05D8C", VA = "0xD05D8C")]
		protected SSFilterTypeSaveAccess()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public abstract class SSKey : SSBase
	{
		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If given, used to identify the data.  If blank, automatic identifiers are used.")]
		public FsmString Key;

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xD010D4", Offset = "0xD010D4", VA = "0xD010D4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xD01890", Offset = "0xD01890", VA = "0xD01890")]
		protected SSKey()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public abstract class SSKeyData : SSBase
	{
		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If given, used to identify the data.  If blank, automatic identifiers are used.")]
		public FsmString Key;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Call this event if the variable data is not found in the pool.")]
		public FsmEvent DataNotFoundEvent;

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xD01CF0", Offset = "0xD01CF0", VA = "0xD01CF0", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xD01DAC", Offset = "0xD01DAC", VA = "0xD01DAC")]
		protected SSKeyData()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public abstract class SSLoadAll : SSFilterTypeDataNowLoadFileAccess
	{
		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected FsmVariables _loadFsmVariables;

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xD02070", Offset = "0xD02070", VA = "0xD02070", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xD02118", Offset = "0xD02118", VA = "0xD02118")]
		protected SSLoadAll()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public abstract class SSLoadFileAccess : SSFileAccess
	{
		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UIHint(UIHint.Variable)]
		[Tooltip("If given, loads the pool with this ID.  If None, the default pool is loaded.")]
		public FsmInt PoolId;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UIHint(UIHint.Variable)]
		[Tooltip("Returns the name of the loaded data pool.")]
		public FsmString PoolName;

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xD05CBC", Offset = "0xD05CBC", VA = "0xD05CBC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xD038FC", Offset = "0xD038FC", VA = "0xD038FC")]
		protected SSLoadFileAccess()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public abstract class SSSaveAll : SSFilterTypeSaveAccess
	{
		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected FsmVariables _saveFsmVariables;

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xD01B04", Offset = "0xD01B04", VA = "0xD01B04", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xD01B8C", Offset = "0xD01B8C", VA = "0xD01B8C")]
		protected SSSaveAll()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public abstract class SSUnloaded : SSBase
	{
		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Called if no data pool is currently loaded.")]
		public FsmEvent NotLoadedEvent;

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xD035A4", Offset = "0xD035A4", VA = "0xD035A4", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xD036FC", Offset = "0xD036FC", VA = "0xD036FC")]
		protected SSUnloaded()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public abstract class SSUnloadedAccess : SSAccess
	{
		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Called if no data pool is currently loaded.")]
		public FsmEvent NotLoadedEvent;

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0xD05DBC", Offset = "0xD05DBC", VA = "0xD05DBC", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xD03C84", Offset = "0xD03C84", VA = "0xD03C84")]
		protected SSUnloadedAccess()
		{
		}
	}
	[Token(Token = "0x200033F")]
	[Tooltip("Removes the data pool from memory.  Does not affect the saved data pool file.")]
	[ActionCategory("Smooth Save")]
	public class UnloadDataPool : SSUnloaded
	{
		[Token(Token = "0x6000F91")]
		[Address(RVA = "0xD05DE4", Offset = "0xD05DE4", VA = "0xD05DE4", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xD05E04", Offset = "0xD05E04", VA = "0xD05E04")]
		public UnloadDataPool()
		{
		}
	}
	[Token(Token = "0x2000340")]
	[ActionCategory("Smooth Save")]
	[Tooltip("Instructs Smooth Save to use PlayerPrefs instead of files.  Use for platforms without a conventional file system.  See the documentation for details.")]
	public class UsePlayerPrefs : SSBase
	{
		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Makes the saved data cheat-resistant, but uses more memory.")]
		public FsmBool EncodeData;

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xD05E08", Offset = "0xD05E08", VA = "0xD05E08", Slot = "28")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xD05E30", Offset = "0xD05E30", VA = "0xD05E30", Slot = "32")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0xD05F24", Offset = "0xD05F24", VA = "0xD05F24")]
		public UsePlayerPrefs()
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000341")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UnityEngine.Color COLOR_GRAB;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly UnityEngine.Color COLOR_HIGHLIGHT;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Color m_color;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x17000179")]
		public bool Highlight
		{
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0xD05F98", Offset = "0xD05F98", VA = "0xD05F98")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xD05FA0", Offset = "0xD05FA0", VA = "0xD05FA0")]
			set
			{
			}
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0xD05FAC", Offset = "0xD05FAC", VA = "0xD05FAC")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0xD0614C", Offset = "0xD0614C", VA = "0xD0614C", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0xD06168", Offset = "0xD06168", VA = "0xD06168", Slot = "5")]
		public override void GrabEnd(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xD06184", Offset = "0xD06184", VA = "0xD06184")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xD06058", Offset = "0xD06058", VA = "0xD06058")]
		private void SetColor(UnityEngine.Color color)
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xD06438", Offset = "0xD06438", VA = "0xD06438")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x1700017A")]
		public bool InRange
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0xD064B0", Offset = "0xD064B0", VA = "0xD064B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0xD064B8", Offset = "0xD064B8", VA = "0xD064B8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public bool Targeted
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0xD06624", Offset = "0xD06624", VA = "0xD06624")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0xD0662C", Offset = "0xD0662C", VA = "0xD0662C")]
			set
			{
			}
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xD06638", Offset = "0xD06638", VA = "0xD06638", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xD064C4", Offset = "0xD064C4", VA = "0xD064C4")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xD06828", Offset = "0xD06828", VA = "0xD06828")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x2000343")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x1700017C")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0xD06830", Offset = "0xD06830", VA = "0xD06830")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0xD06838", Offset = "0xD06838", VA = "0xD06838")]
			set
			{
			}
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xD06854", Offset = "0xD06854", VA = "0xD06854", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xD06A60", Offset = "0xD06A60", VA = "0xD06A60", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xD0734C", Offset = "0xD0734C", VA = "0xD0734C", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0xD078B4", Offset = "0xD078B4", VA = "0xD078B4", Slot = "8")]
		protected override void MoveGrabbedObject(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0xD07CC4", Offset = "0xD07CC4", VA = "0xD07CC4")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0xD06C88", Offset = "0xD06C88", VA = "0xD06C88")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0xD07DB0", Offset = "0xD07DB0", VA = "0xD07DB0")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xD081B0", Offset = "0xD081B0", VA = "0xD081B0", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xD081C8", Offset = "0xD081C8", VA = "0xD081C8", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0xD081D0", Offset = "0xD081D0", VA = "0xD081D0")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x2000345")]
		public enum CrosshairState
		{
			[Token(Token = "0x4001301")]
			Disabled,
			[Token(Token = "0x4001302")]
			Enabled,
			[Token(Token = "0x4001303")]
			Targeted
		}

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.GameObject m_targetedCrosshair;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.GameObject m_enabledCrosshair;

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xD081F0", Offset = "0xD081F0", VA = "0xD081F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xD0679C", Offset = "0xD0679C", VA = "0xD0679C")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xD08258", Offset = "0xD08258", VA = "0xD08258")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xD08290", Offset = "0xD08290", VA = "0xD08290")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Color OutlineColorInRange;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Color OutlineColorHighlighted;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Color OutlineColorOutOfRange;

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xD08298", Offset = "0xD08298", VA = "0xD08298")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xD08344", Offset = "0xD08344", VA = "0xD08344")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0xD083EC", Offset = "0xD083EC", VA = "0xD083EC")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isPaused;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioListener listener;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public skyDomeDayNight enemyManager;

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0xD083F4", Offset = "0xD083F4", VA = "0xD083F4")]
		private void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0xD08404", Offset = "0xD08404", VA = "0xD08404")]
		private void OnApplicationPause(bool pauseStatus)
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0xD08410", Offset = "0xD08410", VA = "0xD08410")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0xD0844C", Offset = "0xD0844C", VA = "0xD0844C")]
		public void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xD08458", Offset = "0xD08458", VA = "0xD08458")]
		public void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xD08464", Offset = "0xD08464", VA = "0xD08464")]
		public void GamePause()
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0xD08508", Offset = "0xD08508", VA = "0xD08508")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xD08510", Offset = "0xD08510", VA = "0xD08510")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xD08560", Offset = "0xD08560", VA = "0xD08560")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xD08938", Offset = "0xD08938", VA = "0xD08938")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xD08A24", Offset = "0xD08A24", VA = "0xD08A24")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0xD08564", Offset = "0xD08564", VA = "0xD08564")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0xD08B10", Offset = "0xD08B10", VA = "0xD08B10")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x2000349")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x200034A")]
		public enum ContactTest
		{
			[Token(Token = "0x400131D")]
			PerpenTest,
			[Token(Token = "0x400131E")]
			BackwardsPress
		}

		[Token(Token = "0x400130E")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x400130F")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private UnityEngine.GameObject _proximityZone;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private UnityEngine.GameObject _contactZone;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private UnityEngine.GameObject _actionZone;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private UnityEngine.Vector3 _localButtonDirection;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x1700017D")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xD08BE8", Offset = "0xD08BE8", VA = "0xD08BE8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017E")]
		public UnityEngine.Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6000FC7")]
			[Address(RVA = "0xD08BF0", Offset = "0xD08BF0", VA = "0xD08BF0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700017F")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xD08BFC", Offset = "0xD08BFC", VA = "0xD08BFC")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x6000FC9")]
			[Address(RVA = "0xD08C04", Offset = "0xD08C04", VA = "0xD08C04")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xD08C0C", Offset = "0xD08C0C", VA = "0xD08C0C", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xD08D5C", Offset = "0xD08D5C", VA = "0xD08D5C")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0xD08F64", Offset = "0xD08F64", VA = "0xD08F64", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0xD09528", Offset = "0xD09528", VA = "0xD09528")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0xD09690", Offset = "0xD09690", VA = "0xD09690")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0xD0944C", Offset = "0xD0944C", VA = "0xD0944C")]
		private bool IsValidContact(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0xD0979C", Offset = "0xD0979C", VA = "0xD0979C")]
		private bool PassEntryTest(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xD098A8", Offset = "0xD098A8", VA = "0xD098A8")]
		private bool PassPerpTest(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xD09930", Offset = "0xD09930", VA = "0xD09930")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.GameObject _parentInteractableObj;

		[Token(Token = "0x17000180")]
		public Collider Collider
		{
			[Token(Token = "0x6000FD3")]
			[Address(RVA = "0xD09A54", Offset = "0xD09A54", VA = "0xD09A54", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FD4")]
			[Address(RVA = "0xD09A5C", Offset = "0xD09A5C", VA = "0xD09A5C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6000FD5")]
			[Address(RVA = "0xD09A64", Offset = "0xD09A64", VA = "0xD09A64", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FD6")]
			[Address(RVA = "0xD09A6C", Offset = "0xD09A6C", VA = "0xD09A6C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0xD09A74", Offset = "0xD09A74", VA = "0xD09A74", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xD09AC4", Offset = "0xD09AC4", VA = "0xD09AC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xD09B58", Offset = "0xD09B58", VA = "0xD09B58")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000183")]
		Collider Collider
		{
			[Token(Token = "0x6000FDA")]
			get;
		}

		[Token(Token = "0x17000184")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6000FDB")]
			get;
		}

		[Token(Token = "0x17000185")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000FDC")]
			get;
		}
	}
	[Token(Token = "0x200034D")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0xD08EB8", Offset = "0xD08EB8", VA = "0xD08EB8")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x200034E")]
	public enum InteractionType
	{
		[Token(Token = "0x4001327")]
		Enter,
		[Token(Token = "0x4001328")]
		Stay,
		[Token(Token = "0x4001329")]
		Exit
	}
	[Token(Token = "0x200034F")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000350")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x400133B")]
			Mesh,
			[Token(Token = "0x400133C")]
			Skeleton,
			[Token(Token = "0x400133D")]
			Both
		}

		[Token(Token = "0x2000351")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400133E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000191")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FFF")]
				[Address(RVA = "0xD0AFB8", Offset = "0xD0AFB8", VA = "0xD0AFB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000192")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001001")]
				[Address(RVA = "0xD0B000", Offset = "0xD0B000", VA = "0xD0B000", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FFC")]
			[Address(RVA = "0xD0A5B0", Offset = "0xD0A5B0", VA = "0xD0A5B0")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6000FFD")]
			[Address(RVA = "0xD0AD98", Offset = "0xD0AD98", VA = "0xD0AD98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0xD0AD9C", Offset = "0xD0AD9C", VA = "0xD0AD9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001000")]
			[Address(RVA = "0xD0AFC0", Offset = "0xD0AFC0", VA = "0xD0AFC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400132A")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.GameObject _leftHand;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private UnityEngine.GameObject _rightHand;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.GameObject _leftSkeletonVisual;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UnityEngine.GameObject _rightSkeletonVisual;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000186")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xD09B60", Offset = "0xD09B60", VA = "0xD09B60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xD09B8C", Offset = "0xD09B8C", VA = "0xD09B8C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x6000FE0")]
			[Address(RVA = "0xD09BF0", Offset = "0xD09BF0", VA = "0xD09BF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xD09C1C", Offset = "0xD09C1C", VA = "0xD09C1C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x6000FE2")]
			[Address(RVA = "0xD09C80", Offset = "0xD09C80", VA = "0xD09C80")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xD09CAC", Offset = "0xD09CAC", VA = "0xD09CAC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0xD09D10", Offset = "0xD09D10", VA = "0xD09D10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE5")]
			[Address(RVA = "0xD09D3C", Offset = "0xD09D3C", VA = "0xD09D3C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700018A")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6000FE6")]
			[Address(RVA = "0xD09DA0", Offset = "0xD09DA0", VA = "0xD09DA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0xD09DCC", Offset = "0xD09DCC", VA = "0xD09DCC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700018B")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6000FE8")]
			[Address(RVA = "0xD09E30", Offset = "0xD09E30", VA = "0xD09E30")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0xD09E58", Offset = "0xD09E58", VA = "0xD09E58")]
			private set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0xD09EB8", Offset = "0xD09EB8", VA = "0xD09EB8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0xD09EE0", Offset = "0xD09EE0", VA = "0xD09EE0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700018D")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6000FEC")]
			[Address(RVA = "0xD09F40", Offset = "0xD09F40", VA = "0xD09F40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FED")]
			[Address(RVA = "0xD09F68", Offset = "0xD09F68", VA = "0xD09F68")]
			private set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6000FEE")]
			[Address(RVA = "0xD09FC8", Offset = "0xD09FC8", VA = "0xD09FC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEF")]
			[Address(RVA = "0xD09FF0", Offset = "0xD09FF0", VA = "0xD09FF0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x6000FF0")]
			[Address(RVA = "0xD0A050", Offset = "0xD0A050", VA = "0xD0A050")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF1")]
			[Address(RVA = "0xD0A078", Offset = "0xD0A078", VA = "0xD0A078")]
			private set
			{
			}
		}

		[Token(Token = "0x17000190")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6000FF2")]
			[Address(RVA = "0xD0A0D8", Offset = "0xD0A0D8", VA = "0xD0A0D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FF3")]
			[Address(RVA = "0xD0A120", Offset = "0xD0A120", VA = "0xD0A120")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0xD0A178", Offset = "0xD0A178", VA = "0xD0A178")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0xD0A534", Offset = "0xD0A534", VA = "0xD0A534")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xD0A4C0", Offset = "0xD0A4C0", VA = "0xD0A4C0")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xD0A5D8", Offset = "0xD0A5D8", VA = "0xD0A5D8")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xD0A69C", Offset = "0xD0A69C", VA = "0xD0A69C")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xD0A86C", Offset = "0xD0A86C", VA = "0xD0A86C")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xD0AAD0", Offset = "0xD0AAD0", VA = "0xD0AAD0")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xD0AC30", Offset = "0xD0AC30", VA = "0xD0AC30")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x2000352")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000353")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6001013")]
			[Address(RVA = "0xD0B650", Offset = "0xD0B650", VA = "0xD0B650")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000193")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x6001002")]
			[Address(RVA = "0xD0B008", Offset = "0xD0B008", VA = "0xD0B008")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xD0B010", Offset = "0xD0B010", VA = "0xD0B010")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000195")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x6001004")]
			[Address(RVA = "0xD0B018", Offset = "0xD0B018", VA = "0xD0B018")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xD0B020", Offset = "0xD0B020", VA = "0xD0B020", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000012")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6001006")]
			[Address(RVA = "0xD0B028", Offset = "0xD0B028", VA = "0xD0B028")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001007")]
			[Address(RVA = "0xD0B0D8", Offset = "0xD0B0D8", VA = "0xD0B0D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6001009")]
			[Address(RVA = "0xD0B1A4", Offset = "0xD0B1A4", VA = "0xD0B1A4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600100A")]
			[Address(RVA = "0xD0B254", Offset = "0xD0B254", VA = "0xD0B254")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000014")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x600100C")]
			[Address(RVA = "0xD0B320", Offset = "0xD0B320", VA = "0xD0B320")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600100D")]
			[Address(RVA = "0xD0B3D0", Offset = "0xD0B3D0", VA = "0xD0B3D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0xD0B188", Offset = "0xD0B188", VA = "0xD0B188", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0xD0B304", Offset = "0xD0B304", VA = "0xD0B304", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xD0B480", Offset = "0xD0B480", VA = "0xD0B480", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x600100F")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6001010")]
		[Address(RVA = "0xD08D08", Offset = "0xD08D08", VA = "0xD08D08", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xD0B54C", Offset = "0xD0B54C", VA = "0xD0B54C", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xD09A4C", Offset = "0xD09A4C", VA = "0xD09A4C")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x2000354")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4001349")]
		None,
		[Token(Token = "0x400134A")]
		Proximity,
		[Token(Token = "0x400134B")]
		Contact,
		[Token(Token = "0x400134C")]
		Action
	}
	[Token(Token = "0x2000355")]
	public enum InteractableState
	{
		[Token(Token = "0x400134E")]
		Default,
		[Token(Token = "0x400134F")]
		ProximityState,
		[Token(Token = "0x4001350")]
		ContactState,
		[Token(Token = "0x4001351")]
		ActionState
	}
	[Token(Token = "0x2000356")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xD095D8", Offset = "0xD095D8", VA = "0xD095D8")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x2000357")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000197")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6001015")]
			[Address(RVA = "0xD0B698", Offset = "0xD0B698", VA = "0xD0B698")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xD0B49C", Offset = "0xD0B49C", VA = "0xD0B49C")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xD0B5A0", Offset = "0xD0B5A0", VA = "0xD0B5A0")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xD0B6F0", Offset = "0xD0B6F0", VA = "0xD0B6F0")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x2000358")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x2000359")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400135A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400135B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400135C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x400135D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x400135E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x400135F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x4001360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x4001361")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4001362")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000198")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001022")]
				[Address(RVA = "0xD0BEB0", Offset = "0xD0BEB0", VA = "0xD0BEB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000199")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001024")]
				[Address(RVA = "0xD0BEF8", Offset = "0xD0BEF8", VA = "0xD0BEF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600101E")]
			[Address(RVA = "0xD0B898", Offset = "0xD0B898", VA = "0xD0B898")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x600101F")]
			[Address(RVA = "0xD0B9D4", Offset = "0xD0B9D4", VA = "0xD0B9D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001020")]
			[Address(RVA = "0xD0B9F0", Offset = "0xD0B9F0", VA = "0xD0B9F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001021")]
			[Address(RVA = "0xD0BE60", Offset = "0xD0BE60", VA = "0xD0BE60")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001023")]
			[Address(RVA = "0xD0BEB8", Offset = "0xD0BEB8", VA = "0xD0BEB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xD0B790", Offset = "0xD0B790", VA = "0xD0B790")]
		private void Awake()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xD0B7FC", Offset = "0xD0B7FC", VA = "0xD0B7FC")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xD0B8C0", Offset = "0xD0B8C0", VA = "0xD0B8C0")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xD0B9CC", Offset = "0xD0B9CC", VA = "0xD0B9CC")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x200035A")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700019A")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6001025")]
			[Address(RVA = "0xD0BF00", Offset = "0xD0BF00", VA = "0xD0BF00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xD0C05C", Offset = "0xD0C05C", VA = "0xD0C05C")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xD0C0F8", Offset = "0xD0C0F8", VA = "0xD0C0F8")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xD0C194", Offset = "0xD0C194", VA = "0xD0C194")]
		private void Update()
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xD0C430", Offset = "0xD0C430", VA = "0xD0C430")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xD0C46C", Offset = "0xD0C46C", VA = "0xD0C46C")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xD0C744", Offset = "0xD0C744", VA = "0xD0C744")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xD0C94C", Offset = "0xD0C94C", VA = "0xD0C94C")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x200035B")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x200035C")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001375")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001376")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001377")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x1700019F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600103E")]
				[Address(RVA = "0xD0DB1C", Offset = "0xD0DB1C", VA = "0xD0DB1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001040")]
				[Address(RVA = "0xD0DB64", Offset = "0xD0DB64", VA = "0xD0DB64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600103B")]
			[Address(RVA = "0xD0CBE8", Offset = "0xD0CBE8", VA = "0xD0CBE8")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x600103C")]
			[Address(RVA = "0xD0D68C", Offset = "0xD0D68C", VA = "0xD0D68C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600103D")]
			[Address(RVA = "0xD0D690", Offset = "0xD0D690", VA = "0xD0D690", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600103F")]
			[Address(RVA = "0xD0DB24", Offset = "0xD0DB24", VA = "0xD0DB24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400136A")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3[] _velocityFrames;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector3 _position;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700019B")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x600102D")]
			[Address(RVA = "0xD0CA54", Offset = "0xD0CA54", VA = "0xD0CA54", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700019C")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x600102E")]
			[Address(RVA = "0xD0CA5C", Offset = "0xD0CA5C", VA = "0xD0CA5C", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700019D")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x600102F")]
			[Address(RVA = "0xD0CA64", Offset = "0xD0CA64", VA = "0xD0CA64", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019E")]
		public override bool EnableState
		{
			[Token(Token = "0x6001030")]
			[Address(RVA = "0xD0CA6C", Offset = "0xD0CA6C", VA = "0xD0CA6C", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001031")]
			[Address(RVA = "0xD0CA94", Offset = "0xD0CA94", VA = "0xD0CA94", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xD0CAC4", Offset = "0xD0CAC4", VA = "0xD0CAC4", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xD0CB74", Offset = "0xD0CB74", VA = "0xD0CB74")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xD0CC10", Offset = "0xD0CC10", VA = "0xD0CC10")]
		private void Update()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0xD0CE90", Offset = "0xD0CE90", VA = "0xD0CE90")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xD0D04C", Offset = "0xD0D04C", VA = "0xD0D04C")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xD0D134", Offset = "0xD0D134", VA = "0xD0D134", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xD0D4C8", Offset = "0xD0D4C8", VA = "0xD0D4C8", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xD0D4CC", Offset = "0xD0D4CC", VA = "0xD0D4CC", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xD0D4D0", Offset = "0xD0D4D0", VA = "0xD0D4D0")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x170001A1")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001041")]
			[Address(RVA = "0xD0DB6C", Offset = "0xD0DB6C", VA = "0xD0DB6C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001042")]
			[Address(RVA = "0xD0DB74", Offset = "0xD0DB74", VA = "0xD0DB74")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public bool EnableState
		{
			[Token(Token = "0x6001043")]
			[Address(RVA = "0xD0DB7C", Offset = "0xD0DB7C", VA = "0xD0DB7C", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001044")]
			[Address(RVA = "0xD0DB98", Offset = "0xD0DB98", VA = "0xD0DB98", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001045")]
			[Address(RVA = "0xD0DBB8", Offset = "0xD0DBB8", VA = "0xD0DBB8", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001046")]
			[Address(RVA = "0xD0DBC0", Offset = "0xD0DBC0", VA = "0xD0DBC0", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public float SphereRadius
		{
			[Token(Token = "0x6001047")]
			[Address(RVA = "0xD0DBCC", Offset = "0xD0DBCC", VA = "0xD0DBCC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001048")]
			[Address(RVA = "0xD0DBD4", Offset = "0xD0DBD4", VA = "0xD0DBD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xD0DBDC", Offset = "0xD0DBDC", VA = "0xD0DBDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xD0DC18", Offset = "0xD0DC18", VA = "0xD0DC18", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xD0DC1C", Offset = "0xD0DC1C", VA = "0xD0DC1C")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x200035E")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x400137D")]
		None = 0,
		[Token(Token = "0x400137E")]
		Ray = 1,
		[Token(Token = "0x400137F")]
		Poke = 4,
		[Token(Token = "0x4001380")]
		All = -1
	}
	[Token(Token = "0x200035F")]
	public enum ToolInputState
	{
		[Token(Token = "0x4001382")]
		Inactive,
		[Token(Token = "0x4001383")]
		PrimaryInputDown,
		[Token(Token = "0x4001384")]
		PrimaryInputDownStay,
		[Token(Token = "0x4001385")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000360")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x4001386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x4001387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xD0D474", Offset = "0xD0D474", VA = "0xD0D474")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000361")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x170001A5")]
		public Transform ToolTransform
		{
			[Token(Token = "0x600104D")]
			[Address(RVA = "0xD09928", Offset = "0xD09928", VA = "0xD09928")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A6")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x600104E")]
			[Address(RVA = "0xD0DC24", Offset = "0xD0DC24", VA = "0xD0DC24")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600104F")]
			[Address(RVA = "0xD0DC2C", Offset = "0xD0DC2C", VA = "0xD0DC2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001A7")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001050")]
			get;
		}

		[Token(Token = "0x170001A8")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6001051")]
			get;
		}

		[Token(Token = "0x170001A9")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6001052")]
			get;
		}

		[Token(Token = "0x170001AA")]
		public UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x6001053")]
			[Address(RVA = "0xD0DC38", Offset = "0xD0DC38", VA = "0xD0DC38")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001054")]
			[Address(RVA = "0xD0DC44", Offset = "0xD0DC44", VA = "0xD0DC44")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public UnityEngine.Vector3 InteractionPosition
		{
			[Token(Token = "0x6001055")]
			[Address(RVA = "0xD0DC50", Offset = "0xD0DC50", VA = "0xD0DC50")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001056")]
			[Address(RVA = "0xD0DC5C", Offset = "0xD0DC5C", VA = "0xD0DC5C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public abstract bool EnableState
		{
			[Token(Token = "0x600105B")]
			get;
			[Token(Token = "0x600105C")]
			set;
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xD0DC68", Offset = "0xD0DC68", VA = "0xD0DC68")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001058")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6001059")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x600105A")]
		public abstract void DeFocus();

		[Token(Token = "0x600105D")]
		public abstract void Initialize();

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xD0C8B4", Offset = "0xD0C8B4", VA = "0xD0C8B4")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x600105F")]
		[Address(RVA = "0xD0C8FC", Offset = "0xD0C8FC", VA = "0xD0C8FC")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0xD0DC70", Offset = "0xD0DC70", VA = "0xD0DC70", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0xD0DF38", Offset = "0xD0DF38", VA = "0xD0DF38", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0xD0D4E4", Offset = "0xD0D4E4", VA = "0xD0D4E4")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x2000362")]
	public interface InteractableToolView
	{
		[Token(Token = "0x170001AD")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6001063")]
			get;
		}

		[Token(Token = "0x170001AE")]
		bool EnableState
		{
			[Token(Token = "0x6001065")]
			get;
			[Token(Token = "0x6001066")]
			set;
		}

		[Token(Token = "0x170001AF")]
		bool ToolActivateState
		{
			[Token(Token = "0x6001067")]
			get;
			[Token(Token = "0x6001068")]
			set;
		}

		[Token(Token = "0x6001064")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x2000363")]
	public class PinchStateModule
	{
		[Token(Token = "0x2000364")]
		private enum PinchState
		{
			[Token(Token = "0x4001396")]
			None,
			[Token(Token = "0x4001397")]
			PinchDown,
			[Token(Token = "0x4001398")]
			PinchStay,
			[Token(Token = "0x4001399")]
			PinchUp
		}

		[Token(Token = "0x4001392")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x170001B0")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6001069")]
			[Address(RVA = "0xD0E7D4", Offset = "0xD0E7D4", VA = "0xD0E7D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B1")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x600106A")]
			[Address(RVA = "0xD0E850", Offset = "0xD0E850", VA = "0xD0E850")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B2")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x600106B")]
			[Address(RVA = "0xD0E8CC", Offset = "0xD0E8CC", VA = "0xD0E8CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xD0E948", Offset = "0xD0E948", VA = "0xD0E948")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xD0E970", Offset = "0xD0E970", VA = "0xD0E970")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x400139A")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x400139B")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x400139C")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x400139D")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x400139E")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 45f)]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x170001B3")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0xD0EAE8", Offset = "0xD0EAE8", VA = "0xD0EAE8", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x170001B4")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x600106F")]
			[Address(RVA = "0xD0EAF0", Offset = "0xD0EAF0", VA = "0xD0EAF0", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x170001B5")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0xD0EB4C", Offset = "0xD0EB4C", VA = "0xD0EB4C", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B6")]
		public override bool EnableState
		{
			[Token(Token = "0x6001071")]
			[Address(RVA = "0xD0EB54", Offset = "0xD0EB54", VA = "0xD0EB54", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001072")]
			[Address(RVA = "0xD0EB94", Offset = "0xD0EB94", VA = "0xD0EB94", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xD0EC04", Offset = "0xD0EC04", VA = "0xD0EC04", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xD0EC58", Offset = "0xD0EC58", VA = "0xD0EC58")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xD0ECE4", Offset = "0xD0ECE4", VA = "0xD0ECE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xD0EF88", Offset = "0xD0EF88", VA = "0xD0EF88")]
		private UnityEngine.Vector3 GetRayCastOrigin()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xD0F004", Offset = "0xD0F004", VA = "0xD0F004", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xD0F3F8", Offset = "0xD0F3F8", VA = "0xD0F3F8")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xD0F594", Offset = "0xD0F594", VA = "0xD0F594")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xD0F6AC", Offset = "0xD0F6AC", VA = "0xD0F6AC")]
		private Interactable FindPrimaryRaycastHit(UnityEngine.Vector3 rayOrigin, UnityEngine.Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xD0F9D0", Offset = "0xD0F9D0", VA = "0xD0F9D0")]
		private Interactable FindInteractableViaConeTest(UnityEngine.Vector3 rayOrigin, UnityEngine.Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xD0FD4C", Offset = "0xD0FD4C", VA = "0xD0FD4C", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xD0FE24", Offset = "0xD0FE24", VA = "0xD0FE24", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xD0FE54", Offset = "0xD0FE54", VA = "0xD0FE54")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x2000366")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x40013AA")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x40013AB")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3[] linePositions;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x170001B7")]
		public bool EnableState
		{
			[Token(Token = "0x600107F")]
			[Address(RVA = "0xD0EB78", Offset = "0xD0EB78", VA = "0xD0EB78", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001080")]
			[Address(RVA = "0xD0EBB0", Offset = "0xD0EBB0", VA = "0xD0EBB0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001081")]
			[Address(RVA = "0xD0FF68", Offset = "0xD0FF68", VA = "0xD0FF68", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001082")]
			[Address(RVA = "0xD0EF4C", Offset = "0xD0EF4C", VA = "0xD0EF4C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001084")]
			[Address(RVA = "0xD10190", Offset = "0xD10190", VA = "0xD10190", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001085")]
			[Address(RVA = "0xD10198", Offset = "0xD10198", VA = "0xD10198")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xD0FF70", Offset = "0xD0FF70", VA = "0xD0FF70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0xD0FD84", Offset = "0xD0FD84", VA = "0xD0FD84", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xD101A0", Offset = "0xD101A0", VA = "0xD101A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xD1044C", Offset = "0xD1044C", VA = "0xD1044C")]
		public static UnityEngine.Vector3 GetPointOnBezierCurve(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, float t)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xD104F4", Offset = "0xD104F4", VA = "0xD104F4")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x170001BA")]
		public bool UseSpherecast
		{
			[Token(Token = "0x600108A")]
			[Address(RVA = "0xD10558", Offset = "0xD10558", VA = "0xD10558")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600108B")]
			[Address(RVA = "0xD10560", Offset = "0xD10560", VA = "0xD10560")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x600108C")]
			[Address(RVA = "0xD105DC", Offset = "0xD105DC", VA = "0xD105DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600108D")]
			[Address(RVA = "0xD105E4", Offset = "0xD105E4", VA = "0xD105E4")]
			set
			{
			}
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xD10640", Offset = "0xD10640", VA = "0xD10640")]
		private void Start()
		{
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xD108E0", Offset = "0xD108E0", VA = "0xD108E0")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xD108F0", Offset = "0xD108F0", VA = "0xD108F0")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xD10900", Offset = "0xD10900", VA = "0xD10900")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xD10908", Offset = "0xD10908", VA = "0xD10908")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xD1090C", Offset = "0xD1090C", VA = "0xD1090C")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xD10940", Offset = "0xD10940", VA = "0xD10940")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xD10974", Offset = "0xD10974", VA = "0xD10974")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xD109A8", Offset = "0xD109A8", VA = "0xD109A8")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xD109DC", Offset = "0xD109DC", VA = "0xD109DC")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xD10A10", Offset = "0xD10A10", VA = "0xD10A10")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xD10A44", Offset = "0xD10A44", VA = "0xD10A44")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xD10AA4", Offset = "0xD10AA4", VA = "0xD10AA4")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xD10B04", Offset = "0xD10B04", VA = "0xD10B04")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x2000369")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xD10B0C", Offset = "0xD10B0C", VA = "0xD10B0C")]
		private void Start()
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xD10B10", Offset = "0xD10B10", VA = "0xD10B10")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xD10AD4", Offset = "0xD10AD4", VA = "0xD10AD4")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xD10B44", Offset = "0xD10B44", VA = "0xD10B44")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x200036A")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x200036B")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x40013C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityEngine.Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x40013C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x40013CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x170001BC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010A8")]
				[Address(RVA = "0xD111C4", Offset = "0xD111C4", VA = "0xD111C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010AA")]
				[Address(RVA = "0xD1120C", Offset = "0xD1120C", VA = "0xD1120C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010A5")]
			[Address(RVA = "0xD10F3C", Offset = "0xD10F3C", VA = "0xD10F3C")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60010A6")]
			[Address(RVA = "0xD11004", Offset = "0xD11004", VA = "0xD11004", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010A7")]
			[Address(RVA = "0xD11008", Offset = "0xD11008", VA = "0xD11008", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010A9")]
			[Address(RVA = "0xD111CC", Offset = "0xD111CC", VA = "0xD111CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013BB")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x40013BC")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 _panelInitialPosition;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 _prevPos;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private UnityEngine.Vector3 _lastMovedToPos;

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xD10B4C", Offset = "0xD10B4C", VA = "0xD10B4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xD10BEC", Offset = "0xD10BEC", VA = "0xD10BEC")]
		private void Update()
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xD10EFC", Offset = "0xD10EFC", VA = "0xD10EFC")]
		private UnityEngine.Vector3 CalculateIdealAnchorPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xD10E88", Offset = "0xD10E88", VA = "0xD10E88")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xD10F64", Offset = "0xD10F64", VA = "0xD10F64")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x200036C")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x200036D")]
		public enum SelectionState
		{
			[Token(Token = "0x40013D2")]
			Off,
			[Token(Token = "0x40013D3")]
			Selected,
			[Token(Token = "0x40013D4")]
			Highlighted
		}

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Color[] _defaultSelectionColors;

		[Token(Token = "0x40013CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Color[] _highlightColors;

		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x170001BE")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x60010AB")]
			[Address(RVA = "0xD11214", Offset = "0xD11214", VA = "0xD11214")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x60010AC")]
			[Address(RVA = "0xD1121C", Offset = "0xD1121C", VA = "0xD1121C")]
			set
			{
			}
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xD11370", Offset = "0xD11370", VA = "0xD11370")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xD11534", Offset = "0xD11534", VA = "0xD11534")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xD11290", Offset = "0xD11290", VA = "0xD11290")]
		private void AffectSelectionColor(UnityEngine.Color[] newColors)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xD115FC", Offset = "0xD115FC", VA = "0xD115FC")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x200036F")]
		public enum SegmentType
		{
			[Token(Token = "0x40013E3")]
			Straight,
			[Token(Token = "0x40013E4")]
			LeftTurn,
			[Token(Token = "0x40013E5")]
			RightTurn,
			[Token(Token = "0x40013E6")]
			Switch
		}

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x40013DB")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x40013DC")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityEngine.GameObject _mesh;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x170001BF")]
		public float StartDistance
		{
			[Token(Token = "0x60010B2")]
			[Address(RVA = "0xD1266C", Offset = "0xD1266C", VA = "0xD1266C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010B3")]
			[Address(RVA = "0xD12674", Offset = "0xD12674", VA = "0xD12674")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001C0")]
		public float GridSize
		{
			[Token(Token = "0x60010B4")]
			[Address(RVA = "0xD1267C", Offset = "0xD1267C", VA = "0xD1267C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010B5")]
			[Address(RVA = "0xD12684", Offset = "0xD12684", VA = "0xD12684")]
			private set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public int SubDivCount
		{
			[Token(Token = "0x60010B6")]
			[Address(RVA = "0xD1268C", Offset = "0xD1268C", VA = "0xD1268C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010B7")]
			[Address(RVA = "0xD12694", Offset = "0xD12694", VA = "0xD12694")]
			set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public SegmentType Type
		{
			[Token(Token = "0x60010B8")]
			[Address(RVA = "0xD1269C", Offset = "0xD1269C", VA = "0xD1269C")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x170001C3")]
		public Pose EndPose
		{
			[Token(Token = "0x60010B9")]
			[Address(RVA = "0xD126A4", Offset = "0xD126A4", VA = "0xD126A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C4")]
		public float Radius
		{
			[Token(Token = "0x60010BA")]
			[Address(RVA = "0xD12A78", Offset = "0xD12A78", VA = "0xD12A78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C5")]
		public float SegmentLength
		{
			[Token(Token = "0x60010BC")]
			[Address(RVA = "0xD12700", Offset = "0xD12700", VA = "0xD12700")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xD12A88", Offset = "0xD12A88", VA = "0xD12A88")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xD12AA0", Offset = "0xD12AA0", VA = "0xD12AA0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xD12740", Offset = "0xD12740", VA = "0xD12740")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xD12AA4", Offset = "0xD12AA4", VA = "0xD12AA4")]
		private void Update()
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xD12AA8", Offset = "0xD12AA8", VA = "0xD12AA8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xD12B04", Offset = "0xD12B04", VA = "0xD12B04")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xD13438", Offset = "0xD13438", VA = "0xD13438")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xD136BC", Offset = "0xD136BC", VA = "0xD136BC")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000370")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000371")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x40013FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x40013FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x170001C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010D2")]
				[Address(RVA = "0xD141F0", Offset = "0xD141F0", VA = "0xD141F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010D4")]
				[Address(RVA = "0xD14238", Offset = "0xD14238", VA = "0xD14238", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xD14024", Offset = "0xD14024", VA = "0xD14024")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x60010D0")]
			[Address(RVA = "0xD14074", Offset = "0xD14074", VA = "0xD14074", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010D1")]
			[Address(RVA = "0xD14078", Offset = "0xD14078", VA = "0xD14078", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010D3")]
			[Address(RVA = "0xD141F8", Offset = "0xD141F8", VA = "0xD141F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013E7")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x40013E8")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.Color _buttonContactColor;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEngine.Color _buttonActionColor;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Color _buttonDefaultColor;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3 _oldPosition;

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xD1381C", Offset = "0xD1381C", VA = "0xD1381C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xD138D4", Offset = "0xD138D4", VA = "0xD138D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xD13964", Offset = "0xD13964", VA = "0xD13964")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xD13AB4", Offset = "0xD13AB4", VA = "0xD13AB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xD13C48", Offset = "0xD13C48", VA = "0xD13C48")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xD13D58", Offset = "0xD13D58", VA = "0xD13D58")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xD13F5C", Offset = "0xD13F5C", VA = "0xD13F5C")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xD13E68", Offset = "0xD13E68", VA = "0xD13E68")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xD13E7C", Offset = "0xD13E7C", VA = "0xD13E7C")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xD13FB0", Offset = "0xD13FB0", VA = "0xD13FB0")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xD1404C", Offset = "0xD1404C", VA = "0xD1404C")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000372")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x170001C8")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x60010D5")]
			[Address(RVA = "0xD14240", Offset = "0xD14240", VA = "0xD14240")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0xD14250", Offset = "0xD14250", VA = "0xD14250", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xD14258", Offset = "0xD14258", VA = "0xD14258", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xD14588", Offset = "0xD14588", VA = "0xD14588")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x2000373")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UnityEngine.Vector3 OFFSET;

		[Token(Token = "0x4001400")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4001401")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x170001C9")]
		public float Distance
		{
			[Token(Token = "0x60010D9")]
			[Address(RVA = "0xD14684", Offset = "0xD14684", VA = "0xD14684")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010DA")]
			[Address(RVA = "0xD1468C", Offset = "0xD1468C", VA = "0xD1468C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public float Scale
		{
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xD14694", Offset = "0xD14694", VA = "0xD14694")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0xD1469C", Offset = "0xD1469C", VA = "0xD1469C")]
			set
			{
			}
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xD14254", Offset = "0xD14254", VA = "0xD14254", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0xD146A4", Offset = "0xD146A4", VA = "0xD146A4")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xD14294", Offset = "0xD14294", VA = "0xD14294")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xD144A4", Offset = "0xD144A4", VA = "0xD144A4")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x60010E1")]
		public abstract void UpdatePosition();

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xD145E8", Offset = "0xD145E8", VA = "0xD145E8")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x2000374")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x2000375")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001414")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001415")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001416")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4001417")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4001418")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4001419")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x400141A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x400141B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x400141C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x400141D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x400141E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private UnityEngine.Color <onColor>5__8;

			[Token(Token = "0x400141F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private UnityEngine.Color <offColor>5__9;

			[Token(Token = "0x170001CB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010F0")]
				[Address(RVA = "0xD14F78", Offset = "0xD14F78", VA = "0xD14F78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010F2")]
				[Address(RVA = "0xD14FC0", Offset = "0xD14FC0", VA = "0xD14FC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010ED")]
			[Address(RVA = "0xD14BEC", Offset = "0xD14BEC", VA = "0xD14BEC")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60010EE")]
			[Address(RVA = "0xD14D60", Offset = "0xD14D60", VA = "0xD14D60", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010EF")]
			[Address(RVA = "0xD14D64", Offset = "0xD14D64", VA = "0xD14D64", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010F1")]
			[Address(RVA = "0xD14F80", Offset = "0xD14F80", VA = "0xD14F80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xD14814", Offset = "0xD14814", VA = "0xD14814")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xD14870", Offset = "0xD14870", VA = "0xD14870")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xD14948", Offset = "0xD14948", VA = "0xD14948")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xD14A9C", Offset = "0xD14A9C", VA = "0xD14A9C")]
		private void Update()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xD149A4", Offset = "0xD149A4", VA = "0xD149A4")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xD14B68", Offset = "0xD14B68", VA = "0xD14B68")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xD14C14", Offset = "0xD14C14", VA = "0xD14C14")]
		private void AffectMaterials(Material[] materials, UnityEngine.Color newColor)
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xD14CAC", Offset = "0xD14CAC", VA = "0xD14CAC")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xD14D08", Offset = "0xD14D08", VA = "0xD14D08")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x2000376")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x2000377")]
		private enum EngineSoundState
		{
			[Token(Token = "0x400143E")]
			Start,
			[Token(Token = "0x400143F")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x4001440")]
			Stop
		}

		[Token(Token = "0x2000378")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001442")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001443")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4001444")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4001445")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4001446")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4001447")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4001448")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4001449")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x170001CD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001105")]
				[Address(RVA = "0xD15AAC", Offset = "0xD15AAC", VA = "0xD15AAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001107")]
				[Address(RVA = "0xD15AF4", Offset = "0xD15AF4", VA = "0xD15AF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001102")]
			[Address(RVA = "0xD152C4", Offset = "0xD152C4", VA = "0xD152C4")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6001103")]
			[Address(RVA = "0xD15884", Offset = "0xD15884", VA = "0xD15884", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001104")]
			[Address(RVA = "0xD15888", Offset = "0xD15888", VA = "0xD15888", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001106")]
			[Address(RVA = "0xD15AB4", Offset = "0xD15AB4", VA = "0xD15AB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001420")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4001421")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4001422")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4001423")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0.2f, 2.7f)]
		protected float _initialSpeed;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private UnityEngine.GameObject _startStopButton;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private UnityEngine.GameObject _decreaseSpeedButton;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private UnityEngine.GameObject _increaseSpeedButton;

		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private UnityEngine.GameObject _smokeButton;

		[Token(Token = "0x4001429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private UnityEngine.GameObject _whistleButton;

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private UnityEngine.GameObject _reverseButton;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xD14FC8", Offset = "0xD14FC8", VA = "0xD14FC8")]
		private void Start()
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xD15124", Offset = "0xD15124", VA = "0xD15124")]
		private void Update()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xD15130", Offset = "0xD15130", VA = "0xD15130", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xD15268", Offset = "0xD15268", VA = "0xD15268")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xD1509C", Offset = "0xD1509C", VA = "0xD1509C")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0xD152EC", Offset = "0xD152EC", VA = "0xD152EC")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0xD15208", Offset = "0xD15208", VA = "0xD15208")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0xD15500", Offset = "0xD15500", VA = "0xD15500")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0xD15654", Offset = "0xD15654", VA = "0xD15654")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0xD15560", Offset = "0xD15560", VA = "0xD15560")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0xD156B4", Offset = "0xD156B4", VA = "0xD156B4")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xD156F0", Offset = "0xD156F0", VA = "0xD156F0")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xD1576C", Offset = "0xD1576C", VA = "0xD1576C")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xD15818", Offset = "0xD15818", VA = "0xD15818")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xD15828", Offset = "0xD15828", VA = "0xD15828")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x2000379")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x170001CF")]
		public float TrackLength
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0xD15AFC", Offset = "0xD15AFC", VA = "0xD15AFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001109")]
			[Address(RVA = "0xD15B04", Offset = "0xD15B04", VA = "0xD15B04")]
			private set
			{
			}
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xD15B0C", Offset = "0xD15B0C", VA = "0xD15B0C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xD1470C", Offset = "0xD1470C", VA = "0xD1470C")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xD15B10", Offset = "0xD15B10", VA = "0xD15B10")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xD15D08", Offset = "0xD15D08", VA = "0xD15D08")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xD15DE8", Offset = "0xD15DE8", VA = "0xD15DE8")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x200037A")]
	public class Pose
	{
		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 Position;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Quaternion Rotation;

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xD13784", Offset = "0xD13784", VA = "0xD13784")]
		public Pose()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xD15E04", Offset = "0xD15E04", VA = "0xD15E04")]
		public Pose(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200037B")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x200037C")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400145E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400145F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001460")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001461")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4001462")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4001463")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x170001D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600111D")]
				[Address(RVA = "0xD163F8", Offset = "0xD163F8", VA = "0xD163F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600111F")]
				[Address(RVA = "0xD16440", Offset = "0xD16440", VA = "0xD16440", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600111A")]
			[Address(RVA = "0xD160E0", Offset = "0xD160E0", VA = "0xD160E0")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x600111B")]
			[Address(RVA = "0xD16254", Offset = "0xD16254", VA = "0xD16254", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600111C")]
			[Address(RVA = "0xD16258", Offset = "0xD16258", VA = "0xD16258", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600111E")]
			[Address(RVA = "0xD16400", Offset = "0xD16400", VA = "0xD16400", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200037D")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001464")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001465")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001466")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001467")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4001468")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4001469")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x170001D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001123")]
				[Address(RVA = "0xD1651C", Offset = "0xD1651C", VA = "0xD1651C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001125")]
				[Address(RVA = "0xD16564", Offset = "0xD16564", VA = "0xD16564", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001120")]
			[Address(RVA = "0xD161BC", Offset = "0xD161BC", VA = "0xD161BC")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001121")]
			[Address(RVA = "0xD16448", Offset = "0xD16448", VA = "0xD16448", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001122")]
			[Address(RVA = "0xD1644C", Offset = "0xD1644C", VA = "0xD1644C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001124")]
			[Address(RVA = "0xD16524", Offset = "0xD16524", VA = "0xD16524", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001453")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Quaternion _originalRotation;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x170001D0")]
		public bool IsMoving
		{
			[Token(Token = "0x6001111")]
			[Address(RVA = "0xD15E68", Offset = "0xD15E68", VA = "0xD15E68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001112")]
			[Address(RVA = "0xD15E70", Offset = "0xD15E70", VA = "0xD15E70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0xD15E7C", Offset = "0xD15E7C", VA = "0xD15E7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0xD15EAC", Offset = "0xD15EAC", VA = "0xD15EAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0xD15FEC", Offset = "0xD15FEC", VA = "0xD15FEC")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0xD1605C", Offset = "0xD1605C", VA = "0xD1605C")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0xD16108", Offset = "0xD16108", VA = "0xD16108")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0xD161E4", Offset = "0xD161E4", VA = "0xD161E4")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0xD1624C", Offset = "0xD1624C", VA = "0xD1624C")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.GameObject _startStopButton;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6001126")]
		[Address(RVA = "0xD1656C", Offset = "0xD1656C", VA = "0xD1656C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xD165E0", Offset = "0xD165E0", VA = "0xD165E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xD166A8", Offset = "0xD166A8", VA = "0xD166A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xD167B8", Offset = "0xD167B8", VA = "0xD167B8")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xD16834", Offset = "0xD16834", VA = "0xD16834")]
		private void Update()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xD16900", Offset = "0xD16900", VA = "0xD16900")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4001470")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4001471")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4001472")]
		EUDT_None,
		[Token(Token = "0x4001473")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000380")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000381")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400148C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400148D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400148E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x170001D5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600113F")]
				[Address(RVA = "0xD17F90", Offset = "0xD17F90", VA = "0xD17F90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001141")]
				[Address(RVA = "0xD17FD8", Offset = "0xD17FD8", VA = "0xD17FD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600113C")]
			[Address(RVA = "0xD17620", Offset = "0xD17620", VA = "0xD17620")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x600113D")]
			[Address(RVA = "0xD17D94", Offset = "0xD17D94", VA = "0xD17D94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600113E")]
			[Address(RVA = "0xD17D98", Offset = "0xD17D98", VA = "0xD17D98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001140")]
			[Address(RVA = "0xD17F98", Offset = "0xD17F98", VA = "0xD17F98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x4001475")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4001476")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4001477")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public UnityEngine.GameObject mainCamera;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.GameObject uiCamera;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.GameObject uiGeoParent;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.GameObject worldspaceGeoParent;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public UnityEngine.GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x400148A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<UnityEngine.GameObject> spawnedCubes;

		[Token(Token = "0x600112C")]
		[Address(RVA = "0xD16910", Offset = "0xD16910", VA = "0xD16910")]
		private void Start()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0xD17150", Offset = "0xD17150", VA = "0xD17150")]
		private void Update()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0xD17278", Offset = "0xD17278", VA = "0xD17278")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0xD173A8", Offset = "0xD173A8", VA = "0xD173A8")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0xD174D8", Offset = "0xD174D8", VA = "0xD174D8")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0xD17258", Offset = "0xD17258", VA = "0xD17258")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xD175AC", Offset = "0xD175AC", VA = "0xD175AC")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xD17648", Offset = "0xD17648", VA = "0xD17648")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xD16D80", Offset = "0xD16D80", VA = "0xD16D80")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xD17790", Offset = "0xD17790", VA = "0xD17790")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xD17670", Offset = "0xD17670", VA = "0xD17670")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xD17B18", Offset = "0xD17B18", VA = "0xD17B18")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xD17C04", Offset = "0xD17C04", VA = "0xD17C04")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x2000382")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x400148F")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4001490")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4001491")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4001492")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4001493")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4001494")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4001495")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4001496")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x4001497")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x4001498")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4001499")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x400149A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x400149B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x40014A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x40014A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x40014A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x40014A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xD17FE0", Offset = "0xD17FE0", VA = "0xD17FE0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xD18038", Offset = "0xD18038", VA = "0xD18038")]
		private void Start()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xD18488", Offset = "0xD18488", VA = "0xD18488")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xD18574", Offset = "0xD18574", VA = "0xD18574")]
		private void Update()
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xD186D8", Offset = "0xD186D8", VA = "0xD186D8")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xD189A8", Offset = "0xD189A8", VA = "0xD189A8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xD18A8C", Offset = "0xD18A8C", VA = "0xD18A8C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xD18C3C", Offset = "0xD18C3C", VA = "0xD18C3C")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xD18764", Offset = "0xD18764", VA = "0xD18764")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xD187B8", Offset = "0xD187B8", VA = "0xD187B8")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xD18348", Offset = "0xD18348", VA = "0xD18348")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xD18D60", Offset = "0xD18D60", VA = "0xD18D60")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x2000384")]
	public enum HandPoseId
	{
		[Token(Token = "0x40014AE")]
		Default,
		[Token(Token = "0x40014AF")]
		Generic,
		[Token(Token = "0x40014B0")]
		PingPongBall,
		[Token(Token = "0x40014B1")]
		Controller
	}
	[Token(Token = "0x2000385")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x170001D7")]
		public bool AllowPointing
		{
			[Token(Token = "0x6001151")]
			[Address(RVA = "0xD18E18", Offset = "0xD18E18", VA = "0xD18E18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D8")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0xD18E20", Offset = "0xD18E20", VA = "0xD18E20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D9")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6001153")]
			[Address(RVA = "0xD18E28", Offset = "0xD18E28", VA = "0xD18E28")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xD18E30", Offset = "0xD18E30", VA = "0xD18E30")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x2000386")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xD18E38", Offset = "0xD18E38", VA = "0xD18E38")]
		private void Update()
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xD19104", Offset = "0xD19104", VA = "0xD19104")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xD19154", Offset = "0xD19154", VA = "0xD19154")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xD1918C", Offset = "0xD1918C", VA = "0xD1918C")]
		public TouchController()
		{
		}
	}
}
namespace Oculus.Platform.Samples.EntitlementCheck
{
	[Token(Token = "0x2000387")]
	public class EntitlementCheck : MonoBehaviour
	{
		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool exitAppOnFailure;

		[Token(Token = "0x14000015")]
		public static event Action UserFailedEntitlementCheck
		{
			[Token(Token = "0x6001159")]
			[Address(RVA = "0xD19194", Offset = "0xD19194", VA = "0xD19194")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600115A")]
			[Address(RVA = "0xD1924C", Offset = "0xD1924C", VA = "0xD1924C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public static event Action UserPassedEntitlementCheck
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0xD19304", Offset = "0xD19304", VA = "0xD19304")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xD193C0", Offset = "0xD193C0", VA = "0xD193C0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0xD1947C", Offset = "0xD1947C", VA = "0xD1947C")]
		private void Start()
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xD198AC", Offset = "0xD198AC", VA = "0xD198AC")]
		private void EntitlementCheckCallback(Message msg)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xD19630", Offset = "0xD19630", VA = "0xD19630")]
		private void HandleEntitlementCheckResult(bool result)
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xD198DC", Offset = "0xD198DC", VA = "0xD198DC")]
		public EntitlementCheck()
		{
		}
	}
}
namespace Oculus.Voice.Demo.UIShapesDemo
{
	[Token(Token = "0x2000388")]
	public class InteractionHandler : MonoBehaviour
	{
		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Multiline]
		[Header("Default States")]
		private string freshStateText;

		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("UI")]
		[SerializeField]
		private Text textArea;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool showJson;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("Voice")]
		private AppVoiceExperience appVoiceExperience;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string pendingText;

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xD198EC", Offset = "0xD198EC", VA = "0xD198EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xD1999C", Offset = "0xD1999C", VA = "0xD1999C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xD19A4C", Offset = "0xD19A4C", VA = "0xD19A4C")]
		private void OnRequestStarted(WitRequest r)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xD19AEC", Offset = "0xD19AEC", VA = "0xD19AEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xD19B34", Offset = "0xD19B34", VA = "0xD19B34")]
		public void OnResponse(WitResponseNode response)
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xD19C20", Offset = "0xD19C20", VA = "0xD19C20")]
		public void OnError(string error, string message)
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xD19E38", Offset = "0xD19E38", VA = "0xD19E38")]
		public void ToggleActivation()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xD19E8C", Offset = "0xD19E8C", VA = "0xD19E8C")]
		public InteractionHandler()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public class ColorChanger : MonoBehaviour
	{
		[Token(Token = "0x600116A")]
		[Address(RVA = "0xD19EEC", Offset = "0xD19EEC", VA = "0xD19EEC")]
		private void SetColor(Transform trans, UnityEngine.Color color)
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xD19F84", Offset = "0xD19F84", VA = "0xD19F84")]
		public void UpdateColor(WitResponseNode commandResult)
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xD1A1A0", Offset = "0xD1A1A0", VA = "0xD1A1A0")]
		public void UpdateColor(string[] results)
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xD1A014", Offset = "0xD1A014", VA = "0xD1A014")]
		public void UpdateColor(string colorName, string shape)
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xD1A1D0", Offset = "0xD1A1D0", VA = "0xD1A1D0")]
		public ColorChanger()
		{
		}
	}
	[Token(Token = "0x200038A")]
	[ExecuteAlways]
	public class Instructions : MonoBehaviour
	{
		[Token(Token = "0x200038B")]
		internal enum Step
		{
			[Token(Token = "0x40014C4")]
			SetupWit,
			[Token(Token = "0x40014C5")]
			MissingServerToken,
			[Token(Token = "0x40014C6")]
			MissingClientToken,
			[Token(Token = "0x40014C7")]
			AddConfig,
			[Token(Token = "0x40014C8")]
			AddVoiceExperiences,
			[Token(Token = "0x40014C9")]
			SetConfig,
			[Token(Token = "0x40014CA")]
			Ready
		}

		[Token(Token = "0x40014C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] steps;

		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Text instructionText;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Step currentStep;

		[Token(Token = "0x170001DA")]
		internal Step CurrentStep
		{
			[Token(Token = "0x600116F")]
			[Address(RVA = "0xD1A1D8", Offset = "0xD1A1D8", VA = "0xD1A1D8")]
			get
			{
				return default(Step);
			}
		}

		[Token(Token = "0x170001DB")]
		internal string CurrentStepText
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0xD1A1E0", Offset = "0xD1A1E0", VA = "0xD1A1E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xD1A260", Offset = "0xD1A260", VA = "0xD1A260")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xD1A268", Offset = "0xD1A268", VA = "0xD1A268")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xD1A26C", Offset = "0xD1A26C", VA = "0xD1A26C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xD1A264", Offset = "0xD1A264", VA = "0xD1A264")]
		private void UpdateStep()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xD1A270", Offset = "0xD1A270", VA = "0xD1A270")]
		public Instructions()
		{
		}
	}
}
namespace Oculus.Voice.Demo.BuiltInDemo
{
	[Token(Token = "0x200038C")]
	public class TimerController : MonoBehaviour
	{
		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _time;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool _timerExist;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool _timerRunning;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The UI text element to show app messages.")]
		public Text logText;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("The timer ring sound.")]
		public AudioClip buzzSound;

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xD1A590", Offset = "0xD1A590", VA = "0xD1A590")]
		private void Update()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xD1A67C", Offset = "0xD1A67C", VA = "0xD1A67C")]
		private void Log(string msg)
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xD1A5E4", Offset = "0xD1A5E4", VA = "0xD1A5E4")]
		private void OnElapsedTime()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xD1A700", Offset = "0xD1A700", VA = "0xD1A700")]
		public void DeleteTimer()
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xD1A770", Offset = "0xD1A770", VA = "0xD1A770")]
		public void CreateTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xD1AB4C", Offset = "0xD1AB4C", VA = "0xD1AB4C")]
		public void GetTimerIntent()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xD1ABE4", Offset = "0xD1ABE4", VA = "0xD1ABE4")]
		public void PauseTimer()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xD1AC30", Offset = "0xD1AC30", VA = "0xD1AC30")]
		public void ResumeTimer()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xD1AC80", Offset = "0xD1AC80", VA = "0xD1AC80")]
		public void SubtractTimeTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xD1AD8C", Offset = "0xD1AD8C", VA = "0xD1AD8C")]
		public void AddTimeToTimer(string[] entityValues)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xD1AE8C", Offset = "0xD1AE8C", VA = "0xD1AE8C")]
		public float GetRemainingTime()
		{
			return default(float);
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0xD1AB68", Offset = "0xD1AB68", VA = "0xD1AB68")]
		public string GetFormattedTimeFromSeconds()
		{
			return null;
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0xD1A9E8", Offset = "0xD1A9E8", VA = "0xD1A9E8")]
		private bool ParseTime(string[] entityValues, out float time)
		{
			return default(bool);
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0xD1AE94", Offset = "0xD1AE94", VA = "0xD1AE94")]
		public TimerController()
		{
		}
	}
	[Token(Token = "0x200038D")]
	public class TimerDisplay : MonoBehaviour
	{
		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TimerController timer;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _uiText;

		[Token(Token = "0x6001185")]
		[Address(RVA = "0xD1AE9C", Offset = "0xD1AE9C", VA = "0xD1AE9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0xD1AEF4", Offset = "0xD1AEF4", VA = "0xD1AEF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0xD1AF30", Offset = "0xD1AF30", VA = "0xD1AF30")]
		public TimerDisplay()
		{
		}
	}
	[Token(Token = "0x200038E")]
	public class WitActivation : MonoBehaviour
	{
		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppVoiceExperience voiceExperience;

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xD1AF38", Offset = "0xD1AF38", VA = "0xD1AF38")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xD1AFE4", Offset = "0xD1AFE4", VA = "0xD1AFE4")]
		private void Start()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xD1B03C", Offset = "0xD1B03C", VA = "0xD1B03C")]
		private void Update()
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0xD1B0BC", Offset = "0xD1B0BC", VA = "0xD1B0BC")]
		public void ActivateWit()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0xD1B0E0", Offset = "0xD1B0E0", VA = "0xD1B0E0")]
		public WitActivation()
		{
		}
	}
}
namespace Oculus.Avatar
{
	[Token(Token = "0x200038F")]
	public static class AvatarLogger
	{
		[Token(Token = "0x40014D3")]
		public const string LogAvatar = "[Avatars] - ";

		[Token(Token = "0x40014D4")]
		public const string Tab = "    ";

		[Token(Token = "0x600118D")]
		[Address(RVA = "0xD1B0E8", Offset = "0xD1B0E8", VA = "0xD1B0E8")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		[Conditional("ENABLE_AVATAR_LOG_BASIC")]
		public static void Log(string logMsg)
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0xD1B174", Offset = "0xD1B174", VA = "0xD1B174")]
		[Conditional("ENABLE_AVATAR_LOG_BASIC")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xD1B208", Offset = "0xD1B208", VA = "0xD1B208")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		[Conditional("ENABLE_AVATAR_LOG_WARNING")]
		public static void LogWarning(string logMsg)
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xD1B294", Offset = "0xD1B294", VA = "0xD1B294")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		[Conditional("ENABLE_AVATAR_LOG_ERROR")]
		public static void LogError(string logMsg)
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xD1B320", Offset = "0xD1B320", VA = "0xD1B320")]
		[Conditional("ENABLE_AVATAR_LOGS")]
		[Conditional("ENABLE_AVATAR_LOG_ERROR")]
		public static void LogError(string logMsg, UnityEngine.Object context)
		{
		}
	}
	[Token(Token = "0x2000390")]
	public class CAPI
	{
		[Token(Token = "0x2000391")]
		public delegate void LoggingDelegate(IntPtr str);

		[Token(Token = "0x2000392")]
		public enum Result
		{
			[Token(Token = "0x40014E0")]
			Success = 0,
			[Token(Token = "0x40014E1")]
			Failure = -1000,
			[Token(Token = "0x40014E2")]
			Failure_InvalidParameter = -1001,
			[Token(Token = "0x40014E3")]
			Failure_NotInitialized = -1002,
			[Token(Token = "0x40014E4")]
			Failure_InvalidOperation = -1003,
			[Token(Token = "0x40014E5")]
			Failure_Unsupported = -1004,
			[Token(Token = "0x40014E6")]
			Failure_NotYetImplemented = -1005,
			[Token(Token = "0x40014E7")]
			Failure_OperationFailed = -1006,
			[Token(Token = "0x40014E8")]
			Failure_InsufficientSize = -1007
		}

		[Token(Token = "0x2000393")]
		private static class OVRP_1_30_0
		{
			[Token(Token = "0x40014E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Token(Token = "0x6001226")]
			[Address(RVA = "0xD228A8", Offset = "0xD228A8", VA = "0xD228A8")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Token(Token = "0x40014D5")]
		private const string LibFile = "ovravatarloader";

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr nativeVisemeData;

		[Token(Token = "0x40014D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr nativeGazeTargetsData;

		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr nativeAvatarLightsData;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr DebugLineCountData;

		[Token(Token = "0x40014DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] scratchBufferFloat;

		[Token(Token = "0x40014DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static UnityEngine.GameObject debugLineGo;

		[Token(Token = "0x40014DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string SDKRuntimePrefix;

		[Token(Token = "0x40014DD")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Token(Token = "0x6001192")]
		[Address(RVA = "0xD1B40C", Offset = "0xD1B40C", VA = "0xD1B40C")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xD1B498", Offset = "0xD1B498", VA = "0xD1B498")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xD1B6B4", Offset = "0xD1B6B4", VA = "0xD1B6B4")]
		public static void Shutdown()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001195")]
		[Address(RVA = "0xD1B78C", Offset = "0xD1B78C", VA = "0xD1B78C")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6001196")]
		[Address(RVA = "0xD1B7F0", Offset = "0xD1B7F0", VA = "0xD1B7F0")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Token(Token = "0x6001197")]
		[Address(RVA = "0xD1B858", Offset = "0xD1B858", VA = "0xD1B858")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Token(Token = "0x6001198")]
		[Address(RVA = "0xD1B8D4", Offset = "0xD1B8D4", VA = "0xD1B8D4")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Token(Token = "0x6001199")]
		[Address(RVA = "0xD1BA04", Offset = "0xD1BA04", VA = "0xD1BA04")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Token(Token = "0x600119A")]
		[Address(RVA = "0xD1BA80", Offset = "0xD1BA80", VA = "0xD1BA80")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Token(Token = "0x600119B")]
		[Address(RVA = "0xD1BBB0", Offset = "0xD1BBB0", VA = "0xD1BBB0")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x600119C")]
		[Address(RVA = "0xD1BC2C", Offset = "0xD1BC2C", VA = "0xD1BC2C")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x600119D")]
		[Address(RVA = "0xD1BCA8", Offset = "0xD1BCA8", VA = "0xD1BCA8")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Token(Token = "0x600119E")]
		[Address(RVA = "0xD1BD24", Offset = "0xD1BD24", VA = "0xD1BD24")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x600119F")]
		[Address(RVA = "0xD1BDA0", Offset = "0xD1BDA0", VA = "0xD1BDA0")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xD1BE24", Offset = "0xD1BE24", VA = "0xD1BE24")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xD1BEA8", Offset = "0xD1BEA8", VA = "0xD1BEA8")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xD1BF2C", Offset = "0xD1BF2C", VA = "0xD1BF2C")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xD1BFA8", Offset = "0xD1BFA8", VA = "0xD1BFA8")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xD1C024", Offset = "0xD1C024", VA = "0xD1C024")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xD1C0A8", Offset = "0xD1C0A8", VA = "0xD1C0A8")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xD1C12C", Offset = "0xD1C12C", VA = "0xD1C12C")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xD1C1B0", Offset = "0xD1C1B0", VA = "0xD1C1B0")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xD1C22C", Offset = "0xD1C22C", VA = "0xD1C22C")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0xD1C2C0", Offset = "0xD1C2C0", VA = "0xD1C2C0")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60011AA")]
		[Address(RVA = "0xD1C328", Offset = "0xD1C328", VA = "0xD1C328")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Token(Token = "0x60011AB")]
		[Address(RVA = "0xD1C3C4", Offset = "0xD1C3C4", VA = "0xD1C3C4")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Token(Token = "0x60011AC")]
		[Address(RVA = "0xD1C478", Offset = "0xD1C478", VA = "0xD1C478")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Token(Token = "0x60011AD")]
		[Address(RVA = "0xD1C53C", Offset = "0xD1C53C", VA = "0xD1C53C")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xD1C5C8", Offset = "0xD1C5C8", VA = "0xD1C5C8")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xD1C64C", Offset = "0xD1C64C", VA = "0xD1C64C")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xD1C6D0", Offset = "0xD1C6D0", VA = "0xD1C6D0")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xD1C754", Offset = "0xD1C754", VA = "0xD1C754")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xD1C7D8", Offset = "0xD1C7D8", VA = "0xD1C7D8")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0xD1C854", Offset = "0xD1C854", VA = "0xD1C854")]
		public static void ovrAvatarComponent_Get(IntPtr avatar, uint index, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0xD1C958", Offset = "0xD1C958", VA = "0xD1C958")]
		public static void ovrAvatarComponent_Get(IntPtr componentPtr, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60011B5")]
		[Address(RVA = "0xD1C8D4", Offset = "0xD1C8D4", VA = "0xD1C8D4")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0xD1CB44", Offset = "0xD1CB44", VA = "0xD1CB44")]
		public static bool ovrAvatarPose_GetBaseComponent(IntPtr avatar, ref ovrAvatarBaseComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60011B7")]
		[Address(RVA = "0xD1CCA8", Offset = "0xD1CCA8", VA = "0xD1CCA8")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Token(Token = "0x60011B8")]
		public static IntPtr MarshalRenderComponent<T>(IntPtr ptr) where T : struct
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xD1CD24", Offset = "0xD1CD24", VA = "0xD1CD24")]
		public static bool ovrAvatarPose_GetBodyComponent(IntPtr avatar, ref ovrAvatarBodyComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xD1CFB8", Offset = "0xD1CFB8", VA = "0xD1CFB8")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xD1D034", Offset = "0xD1D034", VA = "0xD1D034")]
		public static bool ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xD1D198", Offset = "0xD1D198", VA = "0xD1D198")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0xD1D214", Offset = "0xD1D214", VA = "0xD1D214")]
		public static bool ovrAvatarPose_GetRightControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xD1D378", Offset = "0xD1D378", VA = "0xD1D378")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xD1D3F4", Offset = "0xD1D3F4", VA = "0xD1D3F4")]
		public static bool ovrAvatarPose_GetLeftHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xD1D558", Offset = "0xD1D558", VA = "0xD1D558")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xD1D5D4", Offset = "0xD1D5D4", VA = "0xD1D5D4")]
		public static bool ovrAvatarPose_GetRightHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xD1D738", Offset = "0xD1D738", VA = "0xD1D738")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xD1D7B4", Offset = "0xD1D7B4", VA = "0xD1D7B4")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Token(Token = "0x60011C4")]
		[Address(RVA = "0xD1D830", Offset = "0xD1D830", VA = "0xD1D830")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x60011C5")]
		[Address(RVA = "0xD1D8BC", Offset = "0xD1D8BC", VA = "0xD1D8BC")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xD1D938", Offset = "0xD1D938", VA = "0xD1D938")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xD1DAF0", Offset = "0xD1DAF0", VA = "0xD1DAF0")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xD1DC2C", Offset = "0xD1DC2C", VA = "0xD1DC2C")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xD1DA74", Offset = "0xD1DA74", VA = "0xD1DA74")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xD1DCA8", Offset = "0xD1DCA8", VA = "0xD1DCA8")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60011CB")]
		[Address(RVA = "0xD1DD24", Offset = "0xD1DD24", VA = "0xD1DD24")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0xD1DDA8", Offset = "0xD1DDA8", VA = "0xD1DDA8")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xD1DE24", Offset = "0xD1DE24", VA = "0xD1DE24")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xD1DEA8", Offset = "0xD1DEA8", VA = "0xD1DEA8")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xD1DF24", Offset = "0xD1DF24", VA = "0xD1DF24")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xD1DFA0", Offset = "0xD1DFA0", VA = "0xD1DFA0")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xD1E1E8", Offset = "0xD1E1E8", VA = "0xD1E1E8")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xD1E26C", Offset = "0xD1E26C", VA = "0xD1E26C")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref UnityEngine.Vector4 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xD1E480", Offset = "0xD1E480", VA = "0xD1E480")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xD1E514", Offset = "0xD1E514", VA = "0xD1E514")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xD1E648", Offset = "0xD1E648", VA = "0xD1E648")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x60011D6")]
		[Address(RVA = "0xD1E6C4", Offset = "0xD1E6C4", VA = "0xD1E6C4")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0xD1E740", Offset = "0xD1E740", VA = "0xD1E740")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Token(Token = "0x60011D8")]
		[Address(RVA = "0xD1E878", Offset = "0xD1E878", VA = "0xD1E878")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0xD1E8F4", Offset = "0xD1E8F4", VA = "0xD1E8F4")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Token(Token = "0x60011DA")]
		[Address(RVA = "0xD1EA2C", Offset = "0xD1EA2C", VA = "0xD1EA2C")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011DB")]
		[Address(RVA = "0xD1EAA8", Offset = "0xD1EAA8", VA = "0xD1EAA8")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xD1EB2C", Offset = "0xD1EB2C", VA = "0xD1EB2C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xD1EBB0", Offset = "0xD1EBB0", VA = "0xD1EBB0")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xD1EC34", Offset = "0xD1EC34", VA = "0xD1EC34")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xD1ECB0", Offset = "0xD1ECB0", VA = "0xD1ECB0")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xD1ED34", Offset = "0xD1ED34", VA = "0xD1ED34")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xD1EDB8", Offset = "0xD1EDB8", VA = "0xD1EDB8")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xD1EE34", Offset = "0xD1EE34", VA = "0xD1EE34")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xD1EEB0", Offset = "0xD1EEB0", VA = "0xD1EEB0")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xD1EF60", Offset = "0xD1EF60", VA = "0xD1EF60")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xD1EFE4", Offset = "0xD1EFE4", VA = "0xD1EFE4")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xD1F068", Offset = "0xD1F068", VA = "0xD1F068")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xD1F0E4", Offset = "0xD1F0E4", VA = "0xD1F0E4")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xD1F160", Offset = "0xD1F160", VA = "0xD1F160")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011E9")]
		[Address(RVA = "0xD1F1DC", Offset = "0xD1F1DC", VA = "0xD1F1DC")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x60011EA")]
		[Address(RVA = "0xD1F270", Offset = "0xD1F270", VA = "0xD1F270")]
		public static extern void ovrAvatar_SetActionUnitOnsetSpeed(IntPtr avatar, float onsetSpeed);

		[PreserveSig]
		[Token(Token = "0x60011EB")]
		[Address(RVA = "0xD1F2FC", Offset = "0xD1F2FC", VA = "0xD1F2FC")]
		public static extern void ovrAvatar_SetActionUnitFalloffSpeed(IntPtr avatar, float falloffSpeed);

		[PreserveSig]
		[Token(Token = "0x60011EC")]
		[Address(RVA = "0xD1F388", Offset = "0xD1F388", VA = "0xD1F388")]
		public static extern void ovrAvatar_SetVisemeMultiplier(IntPtr avatar, float visemeMultiplier);

		[PreserveSig]
		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xD1F414", Offset = "0xD1F414", VA = "0xD1F414")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xD1F4A8", Offset = "0xD1F4A8", VA = "0xD1F4A8")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x60011EF")]
		[Address(RVA = "0xD1F53C", Offset = "0xD1F53C", VA = "0xD1F53C")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011F0")]
		[Address(RVA = "0xD1F5B8", Offset = "0xD1F5B8", VA = "0xD1F5B8")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xD1F634", Offset = "0xD1F634", VA = "0xD1F634")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xD1F76C", Offset = "0xD1F76C", VA = "0xD1F76C")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xD1F7E8", Offset = "0xD1F7E8", VA = "0xD1F7E8")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Token(Token = "0x60011F4")]
		[Address(RVA = "0xD1F920", Offset = "0xD1F920", VA = "0xD1F920")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0xD1F99C", Offset = "0xD1F99C", VA = "0xD1F99C")]
		public static void ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart, ref ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x60011F6")]
		[Address(RVA = "0xD1FABC", Offset = "0xD1FABC", VA = "0xD1FABC")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0xD1FB38", Offset = "0xD1FB38", VA = "0xD1FB38")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0xD1FCEC", Offset = "0xD1FCEC", VA = "0xD1FCEC")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x60011F9")]
		[Address(RVA = "0xD1FF94", Offset = "0xD1FF94", VA = "0xD1FF94")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xD1FC70", Offset = "0xD1FC70", VA = "0xD1FC70")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xD20018", Offset = "0xD20018", VA = "0xD20018")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xD20094", Offset = "0xD20094", VA = "0xD20094")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xD20118", Offset = "0xD20118", VA = "0xD20118")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xD2019C", Offset = "0xD2019C", VA = "0xD2019C")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xD20220", Offset = "0xD20220", VA = "0xD20220")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6001200")]
		[Address(RVA = "0xD202BC", Offset = "0xD202BC", VA = "0xD202BC")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6001201")]
		[Address(RVA = "0xD20358", Offset = "0xD20358", VA = "0xD20358")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Token(Token = "0x6001202")]
		[Address(RVA = "0xD203EC", Offset = "0xD203EC", VA = "0xD203EC")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001203")]
		[Address(RVA = "0xD20468", Offset = "0xD20468", VA = "0xD20468")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6001204")]
		[Address(RVA = "0xD204E4", Offset = "0xD204E4", VA = "0xD204E4")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6001205")]
		[Address(RVA = "0xD20560", Offset = "0xD20560", VA = "0xD20560")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6001206")]
		[Address(RVA = "0xD205DC", Offset = "0xD205DC", VA = "0xD205DC")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6001207")]
		[Address(RVA = "0xD20658", Offset = "0xD20658", VA = "0xD20658")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6001208")]
		[Address(RVA = "0xD2077C", Offset = "0xD2077C", VA = "0xD2077C")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6001209")]
		[Address(RVA = "0xD20808", Offset = "0xD20808", VA = "0xD20808")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xD20884", Offset = "0xD20884", VA = "0xD20884")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xD208D8", Offset = "0xD208D8", VA = "0xD208D8")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600120C")]
		[Address(RVA = "0xD20A0C", Offset = "0xD20A0C", VA = "0xD20A0C")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xD20A90", Offset = "0xD20A90", VA = "0xD20A90")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600120E")]
		[Address(RVA = "0xD20BC4", Offset = "0xD20BC4", VA = "0xD20BC4")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Token(Token = "0x600120F")]
		[Address(RVA = "0xD20C48", Offset = "0xD20C48", VA = "0xD20C48")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xD20CDC", Offset = "0xD20CDC", VA = "0xD20CDC")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001211")]
		[Address(RVA = "0xD21014", Offset = "0xD21014", VA = "0xD21014")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Token(Token = "0x6001212")]
		[Address(RVA = "0xD21090", Offset = "0xD21090", VA = "0xD21090")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xD2111C", Offset = "0xD2111C", VA = "0xD2111C")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001214")]
		[Address(RVA = "0xD21870", Offset = "0xD21870", VA = "0xD21870")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Token(Token = "0x6001215")]
		[Address(RVA = "0xD218EC", Offset = "0xD218EC", VA = "0xD218EC")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xD1B3B4", Offset = "0xD1B3B4", VA = "0xD1B3B4")]
		[MonoPInvokeCallback(typeof(LoggingDelegate))]
		public static void LoggingCallback(IntPtr str)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6001217")]
		[Address(RVA = "0xD21978", Offset = "0xD21978", VA = "0xD21978")]
		public static extern void ovrAvatar_RegisterLoggingCallback(LoggingDelegate callback);

		[PreserveSig]
		[Token(Token = "0x6001218")]
		[Address(RVA = "0xD219F8", Offset = "0xD219F8", VA = "0xD219F8")]
		public static extern void ovrAvatar_SetLoggingLevel(ovrAvatarLogLevel level);

		[PreserveSig]
		[Token(Token = "0x6001219")]
		[Address(RVA = "0xD21A74", Offset = "0xD21A74", VA = "0xD21A74")]
		public static extern IntPtr ovrAvatar_GetDebugTransforms_Native(IntPtr count);

		[PreserveSig]
		[Token(Token = "0x600121A")]
		[Address(RVA = "0xD21AF0", Offset = "0xD21AF0", VA = "0xD21AF0")]
		public static extern IntPtr ovrAvatar_GetDebugLines_Native(IntPtr count);

		[Token(Token = "0x600121B")]
		[Address(RVA = "0xD21B6C", Offset = "0xD21B6C", VA = "0xD21B6C")]
		public static void ovrAvatar_DrawDebugLines()
		{
		}

		[PreserveSig]
		[Token(Token = "0x600121C")]
		[Address(RVA = "0xD224C4", Offset = "0xD224C4", VA = "0xD224C4")]
		public static extern void ovrAvatar_SetDebugDrawContext(uint context);

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xD22540", Offset = "0xD22540", VA = "0xD22540")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x600121E")]
		[Address(RVA = "0xD22980", Offset = "0xD22980", VA = "0xD22980")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xD22824", Offset = "0xD22824", VA = "0xD22824")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xD229E8", Offset = "0xD229E8", VA = "0xD229E8")]
		public CAPI()
		{
		}
	}
}
namespace B83.MeshHelper
{
	[Token(Token = "0x2000394")]
	public enum EVertexAttribute
	{
		[Token(Token = "0x40014EB")]
		Position = 1,
		[Token(Token = "0x40014EC")]
		Normal = 2,
		[Token(Token = "0x40014ED")]
		Tangent = 4,
		[Token(Token = "0x40014EE")]
		Color = 8,
		[Token(Token = "0x40014EF")]
		UV1 = 0x10,
		[Token(Token = "0x40014F0")]
		UV2 = 0x20,
		[Token(Token = "0x40014F1")]
		UV3 = 0x40,
		[Token(Token = "0x40014F2")]
		UV4 = 0x80,
		[Token(Token = "0x40014F3")]
		BoneWeight = 0x100
	}
	[Token(Token = "0x2000395")]
	public class Vertex
	{
		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 pos;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 normal;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector4 tangent;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Color color;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Vector2 uv1;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.Vector2 uv2;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Vector2 uv3;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.Vector2 uv4;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BoneWeight bWeight;

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xD22CC8", Offset = "0xD22CC8", VA = "0xD22CC8")]
		public Vertex(UnityEngine.Vector3 aPos)
		{
		}
	}
	[Token(Token = "0x2000396")]
	public class MeshWelder
	{
		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vertex[] vertices;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Vertex> newVerts;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] map;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private EVertexAttribute m_Attributes;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Mesh m_Mesh;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MaxUVDelta;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float MaxPositionDelta;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MaxAngleDelta;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxColorDelta;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MaxBWeightDelta;

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xD22D04", Offset = "0xD22D04", VA = "0xD22D04")]
		public MeshWelder(Mesh aMesh)
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xD22D4C", Offset = "0xD22D4C", VA = "0xD22D4C")]
		private bool HasAttr(EVertexAttribute aAttr)
		{
			return default(bool);
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xD22D5C", Offset = "0xD22D5C", VA = "0xD22D5C")]
		private bool CompareColor(UnityEngine.Color c1, UnityEngine.Color c2)
		{
			return default(bool);
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xD22D9C", Offset = "0xD22D9C", VA = "0xD22D9C")]
		private bool CompareBoneWeight(BoneWeight v1, BoneWeight v2)
		{
			return default(bool);
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xD22F14", Offset = "0xD22F14", VA = "0xD22F14")]
		private bool Compare(Vertex v1, Vertex v2)
		{
			return default(bool);
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xD23284", Offset = "0xD23284", VA = "0xD23284")]
		private void CreateVertexList()
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xD23724", Offset = "0xD23724", VA = "0xD23724")]
		private void RemoveDuplicates()
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xD2394C", Offset = "0xD2394C", VA = "0xD2394C")]
		private void AssignNewVertexArrays()
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xD2417C", Offset = "0xD2417C", VA = "0xD2417C")]
		private void RemapTriangles()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xD24238", Offset = "0xD24238", VA = "0xD24238")]
		public void Weld()
		{
		}
	}
}
namespace JoaoMilone
{
	[Token(Token = "0x2000398")]
	public class ObjectPooler : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000399")]
		private class PoolObject
		{
			[Token(Token = "0x4001518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[UnityEngine.Tooltip("If you want to call object by name of object it self, leave idObject blank!")]
			public string idObject;

			[Token(Token = "0x4001519")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[UnityEngine.Tooltip("The prefab reference you want to create a pool to!")]
			public UnityEngine.GameObject prefabModel;

			[Token(Token = "0x400151A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("The max ammount of each objects in pool! If you wish to make it adaptive leave if with value 0")]
			[Range(0f, 100f)]
			public int max_Qty_Object;

			[Token(Token = "0x400151B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(0f, 500f)]
			[UnityEngine.Tooltip("The ammount objects that you want to pre create in pool! If you wish to have these objects available from Awake!")]
			public int preMake_Qty;

			[Token(Token = "0x6001256")]
			[Address(RVA = "0xD26DF0", Offset = "0xD26DF0", VA = "0xD26DF0")]
			public PoolObject()
			{
			}
		}

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pool Configuration!")]
		[UnityEngine.Tooltip("If you wish to keep objects separeted in a parent, reference it here!")]
		[SerializeField]
		private Transform pool_Parent;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Object List")]
		[UnityEngine.Tooltip("Configure your PoolObjects")]
		[SerializeField]
		private List<PoolObject> objectsList;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, List<UnityEngine.GameObject>> poolDictionary;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Dictionary<string, int> poolCounter;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Dictionary<string, int> max_QtyOfObject;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<string, UnityEngine.GameObject> refGameObjects;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ObjectPooler Instance;

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xD243C8", Offset = "0xD243C8", VA = "0xD243C8")]
		public void Start()
		{
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xD243CC", Offset = "0xD243CC", VA = "0xD243CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xD2442C", Offset = "0xD2442C", VA = "0xD2442C")]
		private void InitializeReferences()
		{
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xD24850", Offset = "0xD24850", VA = "0xD24850")]
		private void PreMakeObjects(string id, int Qty)
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xD24B1C", Offset = "0xD24B1C", VA = "0xD24B1C")]
		public UnityEngine.GameObject RequestObject(string id, Transform tf)
		{
			return null;
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xD25064", Offset = "0xD25064", VA = "0xD25064")]
		public UnityEngine.GameObject RequestObject(string id, UnityEngine.Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xD256E0", Offset = "0xD256E0", VA = "0xD256E0")]
		public UnityEngine.GameObject RequestObject(string id, UnityEngine.Vector3 position, UnityEngine.Quaternion idt)
		{
			return null;
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0xD25D28", Offset = "0xD25D28", VA = "0xD25D28")]
		public UnityEngine.GameObject RequestObjectWithLocalPosition(string id, UnityEngine.Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xD24E44", Offset = "0xD24E44", VA = "0xD24E44")]
		private void PrepareObject(UnityEngine.GameObject auxObject, Transform tf)
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xD254C8", Offset = "0xD254C8", VA = "0xD254C8")]
		private void PrepareObject(UnityEngine.GameObject auxObject, UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xD25A98", Offset = "0xD25A98", VA = "0xD25A98")]
		private void PrepareObject(UnityEngine.GameObject auxObject, UnityEngine.Vector3 position, UnityEngine.Quaternion idt)
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xD2618C", Offset = "0xD2618C", VA = "0xD2618C")]
		private void PrepareObjectWithLocalPosition(UnityEngine.GameObject auxObject, UnityEngine.Vector3 localPosition)
		{
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xD24A78", Offset = "0xD24A78", VA = "0xD24A78")]
		private void SetParent(UnityEngine.GameObject objectToSetParent)
		{
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0xD26210", Offset = "0xD26210", VA = "0xD26210")]
		private UnityEngine.GameObject InstatiateInDictionaryWithLocalPosition(string idSpawn, UnityEngine.Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0xD2554C", Offset = "0xD2554C", VA = "0xD2554C")]
		private UnityEngine.GameObject InstatiateInDictionary(string idSpawn, UnityEngine.Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xD24EF0", Offset = "0xD24EF0", VA = "0xD24EF0")]
		private UnityEngine.GameObject InstatiateInDictionary(string idSpawn, Transform tf)
		{
			return null;
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xD25B64", Offset = "0xD25B64", VA = "0xD25B64")]
		private UnityEngine.GameObject InstatiateInDictionary(string idSpawn, UnityEngine.Vector3 position, UnityEngine.Quaternion idt)
		{
			return null;
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xD263A4", Offset = "0xD263A4", VA = "0xD263A4")]
		public int TotalObjectsInPool()
		{
			return default(int);
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xD265F0", Offset = "0xD265F0", VA = "0xD265F0")]
		public int TotalActiveObjects()
		{
			return default(int);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xD264D0", Offset = "0xD264D0", VA = "0xD264D0")]
		public int CountObjectWithID(string id)
		{
			return default(int);
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0xD2671C", Offset = "0xD2671C", VA = "0xD2671C")]
		public int CountActivatedObjectWithID(string id)
		{
			return default(int);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xD26920", Offset = "0xD26920", VA = "0xD26920")]
		public void ClearPoolWithID(string id)
		{
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xD26BA8", Offset = "0xD26BA8", VA = "0xD26BA8")]
		public void ClearEntirePool()
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0xD26DE8", Offset = "0xD26DE8", VA = "0xD26DE8")]
		public ObjectPooler()
		{
		}
	}
}
namespace MarchingBytes
{
	[Serializable]
	[Token(Token = "0x200039A")]
	public class PoolInfo
	{
		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string poolName;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject prefab;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int poolSize;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool fixedSize;

		[Token(Token = "0x6001257")]
		[Address(RVA = "0xD26E48", Offset = "0xD26E48", VA = "0xD26E48")]
		public PoolInfo()
		{
		}
	}
	[Token(Token = "0x200039B")]
	internal class Pool
	{
		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stack<PoolObject> availableObjStack;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool fixedSize;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.GameObject poolObjectPrefab;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int poolSize;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string poolName;

		[Token(Token = "0x6001258")]
		[Address(RVA = "0xD26E50", Offset = "0xD26E50", VA = "0xD26E50")]
		public Pool(string poolName, UnityEngine.GameObject poolObjectPrefab, int initialCount, bool fixedSize)
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0xD2703C", Offset = "0xD2703C", VA = "0xD2703C")]
		private void AddObjectToPool(PoolObject po)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xD26F50", Offset = "0xD26F50", VA = "0xD26F50")]
		public PoolObject NewObjectInstance()
		{
			return null;
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xD270C0", Offset = "0xD270C0", VA = "0xD270C0")]
		public UnityEngine.GameObject NextAvailableObject(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xD27324", Offset = "0xD27324", VA = "0xD27324")]
		public void ReturnObjectToPool(PoolObject po)
		{
		}
	}
	[Token(Token = "0x200039C")]
	public class EasyObjectPool : MonoBehaviour
	{
		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static EasyObjectPool instance;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Editing Pool Info value at runtime has no effect")]
		public PoolInfo[] poolInfo;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, Pool> poolDictionary;

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xD27450", Offset = "0xD27450", VA = "0xD27450")]
		private void Start()
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xD274B8", Offset = "0xD274B8", VA = "0xD274B8")]
		private void CheckForDuplicatePoolNames()
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0xD2769C", Offset = "0xD2769C", VA = "0xD2769C")]
		private void CreatePools()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0xD277FC", Offset = "0xD277FC", VA = "0xD277FC")]
		public UnityEngine.GameObject GetObjectFromPool(string poolName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xD279D4", Offset = "0xD279D4", VA = "0xD279D4")]
		public void ReturnObjectToPool(UnityEngine.GameObject go)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xD27B6C", Offset = "0xD27B6C", VA = "0xD27B6C")]
		public EasyObjectPool()
		{
		}
	}
	[Token(Token = "0x200039D")]
	public class PoolObject : MonoBehaviour
	{
		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string poolName;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPooled;

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xD27BF4", Offset = "0xD27BF4", VA = "0xD27BF4")]
		public PoolObject()
		{
		}
	}
}
namespace UnityStandardAssets.Characters.FirstPerson
{
	[Serializable]
	[Token(Token = "0x200039E")]
	public class MouseLook
	{
		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float XSensitivity;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float YSensitivity;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothTime;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Quaternion m_CharacterTargetRot;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private UnityEngine.Quaternion m_CameraTargetRot;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_cursorIsLocked;

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xD27BFC", Offset = "0xD27BFC", VA = "0xD27BFC")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xD27C4C", Offset = "0xD27C4C", VA = "0xD27C4C")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xD2801C", Offset = "0xD2801C", VA = "0xD2801C")]
		public void SetCursorLock(bool value)
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xD2800C", Offset = "0xD2800C", VA = "0xD2800C")]
		public void UpdateCursorLock()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xD28050", Offset = "0xD28050", VA = "0xD28050")]
		private void InternalLockUpdate()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xD27FA8", Offset = "0xD27FA8", VA = "0xD27FA8")]
		private UnityEngine.Quaternion ClampRotationAroundXAxis(UnityEngine.Quaternion q)
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0xD280C8", Offset = "0xD280C8", VA = "0xD280C8")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x200039F")]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Rigidbody))]
	public class RigidbodyFirstPersonController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003A0")]
		public class MovementSettings
		{
			[Token(Token = "0x4001541")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float ForwardSpeed;

			[Token(Token = "0x4001542")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float BackwardSpeed;

			[Token(Token = "0x4001543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float StrafeSpeed;

			[Token(Token = "0x4001544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float RunMultiplier;

			[Token(Token = "0x4001545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public KeyCode RunKey;

			[Token(Token = "0x4001546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float JumpForce;

			[Token(Token = "0x4001547")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AnimationCurve SlopeCurveModifier;

			[Token(Token = "0x4001548")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[HideInInspector]
			public float CurrentTargetSpeed;

			[Token(Token = "0x4001549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private bool m_Running;

			[Token(Token = "0x170001E0")]
			public bool Running
			{
				[Token(Token = "0x6001279")]
				[Address(RVA = "0xD29388", Offset = "0xD29388", VA = "0xD29388")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001278")]
			[Address(RVA = "0xD28FA0", Offset = "0xD28FA0", VA = "0xD28FA0")]
			public void UpdateDesiredTargetSpeed(UnityEngine.Vector2 input)
			{
			}

			[Token(Token = "0x600127A")]
			[Address(RVA = "0xD291B0", Offset = "0xD291B0", VA = "0xD291B0")]
			public MovementSettings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A1")]
		public class AdvancedSettings
		{
			[Token(Token = "0x400154A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float groundCheckDistance;

			[Token(Token = "0x400154B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float stickToGroundHelperDistance;

			[Token(Token = "0x400154C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float slowDownRate;

			[Token(Token = "0x400154D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool airControl;

			[Token(Token = "0x400154E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[UnityEngine.Tooltip("set it to 0.1 or more if you get stuck in wall")]
			public float shellOffset;

			[Token(Token = "0x600127B")]
			[Address(RVA = "0xD2936C", Offset = "0xD2936C", VA = "0xD2936C")]
			public AdvancedSettings()
			{
			}
		}

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MovementSettings movementSettings;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MouseLook mouseLook;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AdvancedSettings advancedSettings;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody m_RigidBody;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CapsuleCollider m_Capsule;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float m_YRotation;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private UnityEngine.Vector3 m_GroundContactNormal;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_Jump;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool m_Jumping;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		private bool m_IsGrounded;

		[Token(Token = "0x170001DC")]
		public UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x600126B")]
			[Address(RVA = "0xD280FC", Offset = "0xD280FC", VA = "0xD280FC")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170001DD")]
		public bool Grounded
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0xD28118", Offset = "0xD28118", VA = "0xD28118")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DE")]
		public bool Jumping
		{
			[Token(Token = "0x600126D")]
			[Address(RVA = "0xD28120", Offset = "0xD28120", VA = "0xD28120")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DF")]
		public bool Running
		{
			[Token(Token = "0x600126E")]
			[Address(RVA = "0xD28128", Offset = "0xD28128", VA = "0xD28128")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xD28144", Offset = "0xD28144", VA = "0xD28144")]
		private void Start()
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xD28214", Offset = "0xD28214", VA = "0xD28214")]
		private void Update()
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xD28434", Offset = "0xD28434", VA = "0xD28434")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xD28AF4", Offset = "0xD28AF4", VA = "0xD28AF4")]
		private float SlopeMultiplier()
		{
			return default(float);
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xD28C54", Offset = "0xD28C54", VA = "0xD28C54")]
		private void StickToGroundHelper()
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xD28A50", Offset = "0xD28A50", VA = "0xD28A50")]
		private UnityEngine.Vector2 GetInput()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xD282B8", Offset = "0xD282B8", VA = "0xD282B8")]
		private void RotateView()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xD28884", Offset = "0xD28884", VA = "0xD28884")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0xD29088", Offset = "0xD29088", VA = "0xD29088")]
		public RigidbodyFirstPersonController()
		{
		}
	}
}
namespace UnityStandardAssets.Utility
{
	[Token(Token = "0x20003A2")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xD29390", Offset = "0xD29390", VA = "0xD29390")]
		private void Start()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xD29394", Offset = "0xD29394", VA = "0xD29394")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0xD296C8", Offset = "0xD296C8", VA = "0xD296C8")]
		public SmoothFollow()
		{
		}
	}
}
namespace UnityStandardAssets._2D
{
	[Token(Token = "0x20003A3")]
	public class CameraFollow : MonoBehaviour
	{
		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float xMargin;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMargin;

		[Token(Token = "0x4001556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float xSmooth;

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float ySmooth;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector2 maxXAndY;

		[Token(Token = "0x4001559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector2 minXAndY;

		[Token(Token = "0x400155A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform m_Player;

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xD296DC", Offset = "0xD296DC", VA = "0xD296DC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0xD296E0", Offset = "0xD296E0", VA = "0xD296E0")]
		private bool CheckXMargin()
		{
			return default(bool);
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0xD29734", Offset = "0xD29734", VA = "0xD29734")]
		private bool CheckYMargin()
		{
			return default(bool);
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0xD29788", Offset = "0xD29788", VA = "0xD29788")]
		private void Update()
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0xD2978C", Offset = "0xD2978C", VA = "0xD2978C")]
		private void TrackPlayer()
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0xD2992C", Offset = "0xD2992C", VA = "0xD2992C")]
		public CameraFollow()
		{
		}
	}
}
namespace BNG
{
	[Token(Token = "0x20003A4")]
	public enum HandPoseId
	{
		[Token(Token = "0x400155C")]
		Default = 0,
		[Token(Token = "0x400155D")]
		Generic = 1,
		[Token(Token = "0x400155E")]
		PingPongBall = 2,
		[Token(Token = "0x400155F")]
		Controller = 3,
		[Token(Token = "0x4001560")]
		Rock = 4,
		[Token(Token = "0x4001561")]
		PistolGrip = 50
	}
	[Token(Token = "0x20003A5")]
	public class HandPoseDefinitions : MonoBehaviour
	{
		[Token(Token = "0x6001285")]
		[Address(RVA = "0xD29940", Offset = "0xD29940", VA = "0xD29940")]
		public HandPoseDefinitions()
		{
		}
	}
	[Token(Token = "0x20003A6")]
	public class LinkedSet<T> : IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4001562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LinkedList<T> list;

		[Token(Token = "0x4001563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<T, LinkedListNode<T>> dictionary;

		[Token(Token = "0x170001E1")]
		public int Count
		{
			[Token(Token = "0x600128C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001286")]
		public LinkedSet()
		{
		}

		[Token(Token = "0x6001287")]
		public LinkedSet(IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x6001288")]
		public bool Add(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x6001289")]
		public bool Remove(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x600128A")]
		public void Clear()
		{
		}

		[Token(Token = "0x600128B")]
		public bool Contains(T t)
		{
			return default(bool);
		}

		[Token(Token = "0x600128D")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600128E")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20003A7")]
	[RequireComponent(typeof(Renderer))]
	public class Outline : MonoBehaviour
	{
		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int color;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool eraseRenderer;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material[] _SharedMaterials;

		[Token(Token = "0x170001E2")]
		public Renderer Renderer
		{
			[Token(Token = "0x600128F")]
			[Address(RVA = "0xD29948", Offset = "0xD29948", VA = "0xD29948")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001290")]
			[Address(RVA = "0xD29950", Offset = "0xD29950", VA = "0xD29950")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public SkinnedMeshRenderer SkinnedMeshRenderer
		{
			[Token(Token = "0x6001291")]
			[Address(RVA = "0xD29958", Offset = "0xD29958", VA = "0xD29958")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001292")]
			[Address(RVA = "0xD29960", Offset = "0xD29960", VA = "0xD29960")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E4")]
		public MeshFilter MeshFilter
		{
			[Token(Token = "0x6001293")]
			[Address(RVA = "0xD29968", Offset = "0xD29968", VA = "0xD29968")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001294")]
			[Address(RVA = "0xD29970", Offset = "0xD29970", VA = "0xD29970")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E5")]
		public Material[] SharedMaterials
		{
			[Token(Token = "0x6001298")]
			[Address(RVA = "0xD29B00", Offset = "0xD29B00", VA = "0xD29B00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xD29978", Offset = "0xD29978", VA = "0xD29978")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xD29A38", Offset = "0xD29A38", VA = "0xD29A38")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xD29A9C", Offset = "0xD29A9C", VA = "0xD29A9C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xD29B44", Offset = "0xD29B44", VA = "0xD29B44")]
		public Outline()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(Camera))]
	public class OutlineEffect : MonoBehaviour
	{
		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly LinkedSet<Outline> outlines;

		[Token(Token = "0x400156C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1f, 6f)]
		public float lineThickness;

		[Token(Token = "0x400156D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 10f)]
		public float lineIntensity;

		[Token(Token = "0x400156E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float fillAmount;

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Color lineColor0;

		[Token(Token = "0x4001570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public UnityEngine.Color lineColor1;

		[Token(Token = "0x4001571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public UnityEngine.Color lineColor2;

		[Token(Token = "0x4001572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public UnityEngine.Color lineColor3;

		[Token(Token = "0x4001573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool additiveRendering;

		[Token(Token = "0x4001574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool backfaceCulling;

		[Token(Token = "0x4001575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[Header("These settings can affect performance!")]
		public bool cornerOutlines;

		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool addLinesBetweenColors;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Advanced settings")]
		public bool scaleWithScreenSize;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0.1f, 0.9f)]
		public float alphaCutoff;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool flipY;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Camera sourceCamera;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool autoEnableOutlines;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Camera outlineCamera;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material outline1Material;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material outline2Material;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material outline3Material;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Material outline4Material;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material outlineEraseMaterial;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Shader outlineShader;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Shader outlineBufferShader;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Material outlineShaderMaterial;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public RenderTexture renderTexture;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		public RenderTexture extraRenderTexture;

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private CommandBuffer commandBuffer;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private List<Material> materialBuffer;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool RenderTheNextFrame;

		[Token(Token = "0x170001E6")]
		public static OutlineEffect Instance
		{
			[Token(Token = "0x600129A")]
			[Address(RVA = "0xD2AB4C", Offset = "0xD2AB4C", VA = "0xD2AB4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600129B")]
			[Address(RVA = "0xD2AB94", Offset = "0xD2AB94", VA = "0xD2AB94")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xD2ABEC", Offset = "0xD2ABEC", VA = "0xD2ABEC")]
		private Material GetMaterialFromID(int ID)
		{
			return null;
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xD2AC34", Offset = "0xD2AC34", VA = "0xD2AC34")]
		private Material CreateMaterial(UnityEngine.Color emissionColor)
		{
			return null;
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xD2ADFC", Offset = "0xD2ADFC", VA = "0xD2ADFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xD2AEF0", Offset = "0xD2AEF0", VA = "0xD2AEF0")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xD2BC14", Offset = "0xD2BC14", VA = "0xD2BC14")]
		public void OnPreRender()
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xD2CACC", Offset = "0xD2CACC", VA = "0xD2CACC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xD2CBA4", Offset = "0xD2CBA4", VA = "0xD2CBA4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0xD2CEE0", Offset = "0xD2CEE0", VA = "0xD2CEE0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0xD2B294", Offset = "0xD2B294", VA = "0xD2B294")]
		private void CreateMaterialsIfNeeded()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0xD2CC5C", Offset = "0xD2CC5C", VA = "0xD2CC5C")]
		private void DestroyMaterials()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0xD2B5F4", Offset = "0xD2B5F4", VA = "0xD2B5F4")]
		public void UpdateMaterialsPublicProperties()
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0xD2BB08", Offset = "0xD2BB08", VA = "0xD2BB08")]
		private void UpdateOutlineCameraFromSource()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0xD2D030", Offset = "0xD2D030", VA = "0xD2D030")]
		public void AddOutline(Outline outline)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0xD2D088", Offset = "0xD2D088", VA = "0xD2D088")]
		public void RemoveOutline(Outline outline)
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0xD2D0E0", Offset = "0xD2D0E0", VA = "0xD2D0E0")]
		public OutlineEffect()
		{
		}
	}
	[Token(Token = "0x20003A9")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If true, the Escape key will exit the game")]
		public bool ExitOnEscape;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject DebugMenu;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text LabelToUpdate;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProjectileLauncher DemoLauncher;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<UnityEngine.GameObject> launchedObjects;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Text JoystickText;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.GameObject AmmoObject;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform ItemsHolder;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Grabbable, PosRot> _initalGrabbables;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody cubeRigid;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigid1;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody cubeRigid2;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody cubeRigid3;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Grabbable> demoClips;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3 rotateX;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private UnityEngine.Vector3 rotateY;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.Vector3 rotateZ;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private UnityEngine.Vector3 rotateXYX;

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0xD2D21C", Offset = "0xD2D21C", VA = "0xD2D21C")]
		private void Start()
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0xD2D6E4", Offset = "0xD2D6E4", VA = "0xD2D6E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0xD2D928", Offset = "0xD2D928", VA = "0xD2D928")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0xD2DA78", Offset = "0xD2DA78", VA = "0xD2DA78")]
		public void UpdateJoystickText(float leverX, float leverY)
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0xD2DBB4", Offset = "0xD2DBB4", VA = "0xD2DBB4")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0xD2DE34", Offset = "0xD2DE34", VA = "0xD2DE34")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0xD2E3D8", Offset = "0xD2E3D8", VA = "0xD2E3D8")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xD2D4A4", Offset = "0xD2D4A4", VA = "0xD2D4A4")]
		private void initGravityCubes()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xD2D7EC", Offset = "0xD2D7EC", VA = "0xD2D7EC")]
		private void rotateGravityCubes()
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0xD2E5B4", Offset = "0xD2E5B4", VA = "0xD2E5B4")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	public class PosRot
	{
		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 Position;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Quaternion Rotation;

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0xD2D49C", Offset = "0xD2D49C", VA = "0xD2D49C")]
		public PosRot()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public class CharacterConstraint : MonoBehaviour
	{
		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BNGPlayerController bngController;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xD2E5E8", Offset = "0xD2E5E8", VA = "0xD2E5E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xD2E680", Offset = "0xD2E680", VA = "0xD2E680")]
		private void Update()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xD2E68C", Offset = "0xD2E68C", VA = "0xD2E68C", Slot = "4")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xD2E7FC", Offset = "0xD2E7FC", VA = "0xD2E7FC")]
		public CharacterConstraint()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class CharacterIK : MonoBehaviour
	{
		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowLeftController;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FollowRightController;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform FollowLeftFoot;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform FollowRightFoot;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform FollowHead;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float FootYPosition;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IKActive;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool IKFeetActive;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool HideHead;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool HideLeftArm;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HideRightArm;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool HideLeftHand;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool HideRightHand;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool HideLegs;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HipsJoint;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterController FollowPlayer;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform headBone;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform leftShoulderJoint;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform rightShoulderJoint;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leftHandJoint;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform rightHandJoint;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float HipOffset;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public UnityEngine.Vector3 hideBoneScale;

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xD2E804", Offset = "0xD2E804", VA = "0xD2E804")]
		private void Start()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xD2E928", Offset = "0xD2E928", VA = "0xD2E928")]
		private void Update()
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xD2ED90", Offset = "0xD2ED90", VA = "0xD2ED90")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xD2F1D8", Offset = "0xD2F1D8", VA = "0xD2F1D8")]
		public CharacterIK()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public class CharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xD2F204", Offset = "0xD2F204", VA = "0xD2F204")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xD2F2A8", Offset = "0xD2F2A8", VA = "0xD2F2A8")]
		public CharacterYOffset()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class Climbable : Grabbable
	{
		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x40015BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Transform initialHandParent;

		[Token(Token = "0x40015BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private UnityEngine.Vector3 initialHandPosition;

		[Token(Token = "0x40015BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private UnityEngine.Quaternion initialHandRotation;

		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public MenuToggle handswitcher;

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xD2F2B0", Offset = "0xD2F2B0", VA = "0xD2F2B0")]
		public void Start()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xD2F3C0", Offset = "0xD2F3C0", VA = "0xD2F3C0", Slot = "11")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xD2FC28", Offset = "0xD2FC28", VA = "0xD2FC28", Slot = "18")]
		public override void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xD30010", Offset = "0xD30010", VA = "0xD30010")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip CollisionAudio;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource audioSource;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float startTime;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider col;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinimumVolume;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaximumVolume;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool RecentlyPlayedSound;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastPlayedSound;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LastRelativeVelocity;

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xD3008C", Offset = "0xD3008C", VA = "0xD3008C")]
		public void Start()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xD30210", Offset = "0xD30210", VA = "0xD30210")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xD306BC", Offset = "0xD306BC", VA = "0xD306BC")]
		private void resetLastPlayedSound()
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xD306C4", Offset = "0xD306C4", VA = "0xD306C4")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public class ConstrainLocalPosition : MonoBehaviour
	{
		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ConstrainLocalX;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalXMin;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalXMax;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConstrainLocalY;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalYMin;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMax;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ConstrainLocalZ;

		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LocalZMin;

		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float LocalZMax;

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xD306D8", Offset = "0xD306D8", VA = "0xD306D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xD306DC", Offset = "0xD306DC", VA = "0xD306DC")]
		private void doConstrain()
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xD307D8", Offset = "0xD307D8", VA = "0xD307D8")]
		public ConstrainLocalPosition()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public class Damageable : MonoBehaviour
	{
		[Token(Token = "0x20003B2")]
		[CompilerGenerated]
		private sealed class <SetPhysicsForTime>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Damageable <>4__this;

			[Token(Token = "0x170001E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012D7")]
				[Address(RVA = "0xD324AC", Offset = "0xD324AC", VA = "0xD324AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012D9")]
				[Address(RVA = "0xD324F4", Offset = "0xD324F4", VA = "0xD324F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012D4")]
			[Address(RVA = "0xD32168", Offset = "0xD32168", VA = "0xD32168")]
			[DebuggerHidden]
			public <SetPhysicsForTime>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x60012D5")]
			[Address(RVA = "0xD323A8", Offset = "0xD323A8", VA = "0xD323A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012D6")]
			[Address(RVA = "0xD323AC", Offset = "0xD323AC", VA = "0xD323AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012D8")]
			[Address(RVA = "0xD324B4", Offset = "0xD324B4", VA = "0xD324B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003B3")]
		[CompilerGenerated]
		private sealed class <RespawnRoutine>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x40015F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable <>4__this;

			[Token(Token = "0x170001E9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012DD")]
				[Address(RVA = "0xD3291C", Offset = "0xD3291C", VA = "0xD3291C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012DF")]
				[Address(RVA = "0xD32964", Offset = "0xD32964", VA = "0xD32964", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012DA")]
			[Address(RVA = "0xD32358", Offset = "0xD32358", VA = "0xD32358")]
			[DebuggerHidden]
			public <RespawnRoutine>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x60012DB")]
			[Address(RVA = "0xD324FC", Offset = "0xD324FC", VA = "0xD324FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012DC")]
			[Address(RVA = "0xD32500", Offset = "0xD32500", VA = "0xD32500", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012DE")]
			[Address(RVA = "0xD32924", Offset = "0xD32924", VA = "0xD32924", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Health;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startingHealth;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If specified, this GameObject will be instantiated at this transform's position on death.")]
		public UnityEngine.GameObject[] SpawnOnDeathMasterBlock;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject SpawnOnDeath;

		[Token(Token = "0x40015D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Activate these GameObjects on Death")]
		public List<UnityEngine.GameObject> ActivateGameObjectsOnDeath;

		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Deactivate these GameObjects on Death")]
		public List<UnityEngine.GameObject> DeactivateGameObjectsOnDeath;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Deactivate these GameObjects on Death")]
		public List<MeshRenderer> DeactivateRenderersOnDeath;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Deactivate these Colliders on Death")]
		public List<Collider> DeactivateCollidersOnDeath;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Destroy this object on Death? False if need to respawn.")]
		public bool DestroyOnDeath;

		[Token(Token = "0x40015DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[UnityEngine.Tooltip("If this object is a Grabbable it can be dropped on Death")]
		public bool DropOnDeath;

		[Token(Token = "0x40015DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("How long to wait before destroying this objects")]
		public float DestroyDelay;

		[Token(Token = "0x40015DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("If true the object will be reactivated according to RespawnTime")]
		public bool Respawn;

		[Token(Token = "0x40015DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("If Respawn true, this gameObject will reactivate after RespawnTime. In seconds.")]
		public float RespawnTime;

		[Token(Token = "0x40015DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Remove any decals that were parented to this object on death. Useful for clearing unused decals.")]
		public bool RemoveBulletHolesOnDeath;

		[Token(Token = "0x40015DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Optional Event to be called when receiving damage. Takes damage amount as a float parameter.")]
		[Header("Events")]
		public FloatEvent onDamaged;

		[Token(Token = "0x40015E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("Optional Event to be called once health is <= 0")]
		public UnityEvent onDestroyed;

		[Token(Token = "0x40015E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("Optional Event to be called once the object has been respawned, if Respawn is true and after RespawnTime")]
		public UnityEvent onRespawn;

		[Token(Token = "0x40015E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool destroyed;

		[Token(Token = "0x40015E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Rigidbody rigid;

		[Token(Token = "0x40015E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool initialWasKinematic;

		[Token(Token = "0x40015E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private skyDomeDayNight lightsManager;

		[Token(Token = "0x40015E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool isSpawning;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEngine.GameObject masterBlocks;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int blockID;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEngine.GameObject flint;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform spawnPlace;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UnityEngine.GameObject ObjectToDestroy;

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xD307F4", Offset = "0xD307F4", VA = "0xD307F4")]
		private void Start()
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0xD308E0", Offset = "0xD308E0", VA = "0xD308E0", Slot = "4")]
		public virtual void DealDamage(float damageAmount)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xD31B04", Offset = "0xD31B04", VA = "0xD31B04")]
		public void Spawn()
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0xD320F4", Offset = "0xD320F4", VA = "0xD320F4")]
		[IteratorStateMachine(typeof(<SetPhysicsForTime>d__28))]
		public IEnumerator SetPhysicsForTime()
		{
			return null;
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xD32190", Offset = "0xD32190", VA = "0xD32190")]
		public void SpawnLight()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xD30974", Offset = "0xD30974", VA = "0xD30974")]
		public void DestroyThis()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xD32348", Offset = "0xD32348", VA = "0xD32348")]
		public void GrassHealth()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xD322C4", Offset = "0xD322C4", VA = "0xD322C4")]
		[IteratorStateMachine(typeof(<RespawnRoutine>d__34))]
		private IEnumerator RespawnRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xD32380", Offset = "0xD32380", VA = "0xD32380")]
		public Damageable()
		{
		}
	}
	[Token(Token = "0x20003B4")]
	public class DamageCollider : MonoBehaviour
	{
		[Token(Token = "0x20003B5")]
		[CompilerGenerated]
		private sealed class <ExplosionRoutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001601")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DamageCollider <>4__this;

			[Token(Token = "0x170001EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012EF")]
				[Address(RVA = "0xD33C2C", Offset = "0xD33C2C", VA = "0xD33C2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012F1")]
				[Address(RVA = "0xD33C74", Offset = "0xD33C74", VA = "0xD33C74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012EC")]
			[Address(RVA = "0xD337AC", Offset = "0xD337AC", VA = "0xD337AC")]
			[DebuggerHidden]
			public <ExplosionRoutine>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60012ED")]
			[Address(RVA = "0xD33A7C", Offset = "0xD33A7C", VA = "0xD33A7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012EE")]
			[Address(RVA = "0xD33A80", Offset = "0xD33A80", VA = "0xD33A80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012F0")]
			[Address(RVA = "0xD33C34", Offset = "0xD33C34", VA = "0xD33C34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Damage;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody ColliderRigidbody;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinForce;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LastRelativeVelocity;

		[Token(Token = "0x40015F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LastDamageForce;

		[Token(Token = "0x40015F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool TakeCollisionDamage;

		[Token(Token = "0x40015F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float CollisionDamage;

		[Token(Token = "0x40015FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Damageable thisDamageable;

		[Token(Token = "0x40015FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Collider[] colliders;

		[Token(Token = "0x40015FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int layerMask;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Collider[] hitColliders;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RaycastHit[] hits;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BlockWood blockwood;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ExplosionRadius;

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0xD3296C", Offset = "0xD3296C", VA = "0xD3296C")]
		public void Start()
		{
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0xD32BB4", Offset = "0xD32BB4", VA = "0xD32BB4")]
		public void Update()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0xD32BB8", Offset = "0xD32BB8", VA = "0xD32BB8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xD32BFC", Offset = "0xD32BFC", VA = "0xD32BFC", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xD32C90", Offset = "0xD32C90", VA = "0xD32C90")]
		public void ExplosionDamage()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xD32DE0", Offset = "0xD32DE0", VA = "0xD32DE0")]
		public void DamageHammer()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xD32F88", Offset = "0xD32F88", VA = "0xD32F88")]
		public void ExplosionDamageRayCastBlock()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xD33264", Offset = "0xD33264", VA = "0xD33264")]
		public void ExplosionDamageCannon()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xD334AC", Offset = "0xD334AC", VA = "0xD334AC")]
		public void ExplosionDamageRaycast()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xD32C1C", Offset = "0xD32C1C", VA = "0xD32C1C")]
		[IteratorStateMachine(typeof(<ExplosionRoutine>d__21))]
		private IEnumerator ExplosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xD337D4", Offset = "0xD337D4", VA = "0xD337D4", Slot = "5")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xD33A48", Offset = "0xD33A48", VA = "0xD33A48")]
		public DamageCollider()
		{
		}
	}
	[Token(Token = "0x20003B6")]
	public class DestroyObjectWithDelay : MonoBehaviour
	{
		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DestroySeconds;

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xD33C7C", Offset = "0xD33C7C", VA = "0xD33C7C")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0xD33CF8", Offset = "0xD33CF8", VA = "0xD33CF8")]
		public DestroyObjectWithDelay()
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public class FollowRigidbody : MonoBehaviour
	{
		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTransform;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigid;

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xD33D00", Offset = "0xD33D00", VA = "0xD33D00")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0xD33D58", Offset = "0xD33D58", VA = "0xD33D58")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xD33D98", Offset = "0xD33D98", VA = "0xD33D98")]
		public FollowRigidbody()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class FollowTransform : MonoBehaviour
	{
		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTarget;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MatchRotation;

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xD33DA0", Offset = "0xD33DA0", VA = "0xD33DA0")]
		private void Update()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xD33F38", Offset = "0xD33F38", VA = "0xD33F38")]
		public FollowTransform()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class GrabAction : GrabbableEvents
	{
		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrabberEvent OnGrabEvent;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabbable g;

		[Token(Token = "0x400160B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastGrabTime;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float minTimeBetweenGrabs;

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xD33F48", Offset = "0xD33F48", VA = "0xD33F48", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xD34090", Offset = "0xD34090", VA = "0xD34090")]
		public GrabAction()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	public class GrabbableHaptics : GrabbableEvents
	{
		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HapticsOnValidPickup;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HapticsOnValidRemotePickup;

		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool HapticsOnCollision;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool HapticsOnGrab;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateFrequency;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float VibrateAmplitude;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float VibrateDuration;

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabber currentGrabber;

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xD340A4", Offset = "0xD340A4", VA = "0xD340A4", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xD34190", Offset = "0xD34190", VA = "0xD34190", Slot = "5")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xD3419C", Offset = "0xD3419C", VA = "0xD3419C", Slot = "6")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xD341AC", Offset = "0xD341AC", VA = "0xD341AC", Slot = "10")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xD340F4", Offset = "0xD340F4", VA = "0xD340F4")]
		private void doHaptics(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0xD341BC", Offset = "0xD341BC", VA = "0xD341BC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0xD342C4", Offset = "0xD342C4", VA = "0xD342C4")]
		public GrabbableHaptics()
		{
		}
	}
	[Token(Token = "0x20003BB")]
	public class GrabbableHighlight : GrabbableEvents
	{
		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Outline outline;

		[Token(Token = "0x6001302")]
		[Address(RVA = "0xD342EC", Offset = "0xD342EC", VA = "0xD342EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0xD34544", Offset = "0xD34544", VA = "0xD34544", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0xD345D0", Offset = "0xD345D0", VA = "0xD345D0", Slot = "6")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0xD34668", Offset = "0xD34668", VA = "0xD34668", Slot = "8")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xD34678", Offset = "0xD34678", VA = "0xD34678", Slot = "10")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xD34688", Offset = "0xD34688", VA = "0xD34688", Slot = "12")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xD345E0", Offset = "0xD345E0", VA = "0xD345E0")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0xD34548", Offset = "0xD34548", VA = "0xD34548")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xD34698", Offset = "0xD34698", VA = "0xD34698")]
		public GrabbableHighlight()
		{
		}
	}
	[Token(Token = "0x20003BC")]
	public class GrabbableHighlightMaterial : GrabbableEvents
	{
		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Materials to assign to Renderer when not being highlighted. ")]
		public List<Material> StandardMaterials;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Materials to assign to Renderer when being highlighted")]
		public List<Material> HighlightMaterials;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer Renderer;

		[Token(Token = "0x600130B")]
		[Address(RVA = "0xD346A8", Offset = "0xD346A8", VA = "0xD346A8")]
		private void Start()
		{
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0xD348A8", Offset = "0xD348A8", VA = "0xD348A8", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xD3495C", Offset = "0xD3495C", VA = "0xD3495C", Slot = "6")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xD34A1C", Offset = "0xD34A1C", VA = "0xD34A1C", Slot = "8")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xD34A2C", Offset = "0xD34A2C", VA = "0xD34A2C", Slot = "10")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xD34A3C", Offset = "0xD34A3C", VA = "0xD34A3C", Slot = "12")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xD3496C", Offset = "0xD3496C", VA = "0xD3496C")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xD348AC", Offset = "0xD348AC", VA = "0xD348AC")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xD34A4C", Offset = "0xD34A4C", VA = "0xD34A4C")]
		public GrabbableHighlightMaterial()
		{
		}
	}
	[Token(Token = "0x20003BD")]
	public class GrabbableRingHelper : GrabbableEvents
	{
		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool RingOnValidPickup;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool RingOnValidRemotePickup;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RingHelperScale;

		[Token(Token = "0x6001314")]
		[Address(RVA = "0xD34A5C", Offset = "0xD34A5C", VA = "0xD34A5C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xD34D10", Offset = "0xD34D10", VA = "0xD34D10")]
		public GrabbableRingHelper()
		{
		}
	}
	[Token(Token = "0x20003BE")]
	public class GrabPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x20003BF")]
		public enum HandMovement
		{
			[Token(Token = "0x400162D")]
			Instant,
			[Token(Token = "0x400162E")]
			Lerp,
			[Token(Token = "0x400162F")]
			None
		}

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If specified this Grabbable will be grabbed if the user holds down the grab button while this preview is actuve")]
		public Grabbable GrabObject;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If specified this Grabbable must be held for this component to work")]
		public Grabbable OtherGrabbableMustBeHeld;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("How to move the hand to the nearest grab point")]
		public HandMovement MoveInStyle;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("How to move the hand back to the grabber")]
		public HandMovement MoveOutStyle;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("How to fast to move the hand if MovementStyle = 'Lerp' or 'Linear'")]
		public float HandSpeed;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool LiveUpdateNearestGrabPoint;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Grabber currentGrabber;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _originalTransformParent;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Grab Points to move towards when the grabber is within the Trigger area.")]
		public List<GrabPoint> GrabPoints;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabbable dummyGrabbable;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabPoint closestPoint;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabber grabberInTrigger;

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xD34D2C", Offset = "0xD34D2C", VA = "0xD34D2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0xD35088", Offset = "0xD35088", VA = "0xD35088")]
		private void Update()
		{
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xD35560", Offset = "0xD35560", VA = "0xD35560", Slot = "4")]
		public virtual void UpdateGrabPoint(GrabPoint newPoint)
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xD356D4", Offset = "0xD356D4", VA = "0xD356D4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xD35904", Offset = "0xD35904", VA = "0xD35904")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xD354D4", Offset = "0xD354D4", VA = "0xD354D4")]
		private void setGrabber(Grabber theGrabber)
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xD35A48", Offset = "0xD35A48", VA = "0xD35A48", Slot = "5")]
		public virtual void ReleaseGrabber()
		{
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xD35B28", Offset = "0xD35B28", VA = "0xD35B28")]
		public GrabPointTrigger()
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public class LineToTransform : MonoBehaviour
	{
		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ConnectTo;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xD35B40", Offset = "0xD35B40", VA = "0xD35B40")]
		private void Start()
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xD35B44", Offset = "0xD35B44", VA = "0xD35B44")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xD35B48", Offset = "0xD35B48", VA = "0xD35B48")]
		public void UpdateLine()
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xD35CFC", Offset = "0xD35CFC", VA = "0xD35CFC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xD35D00", Offset = "0xD35D00", VA = "0xD35D00")]
		public LineToTransform()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	public class LookAtTransform : MonoBehaviour
	{
		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseLerp;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Speed;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseUpdate;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool UseLateUpdate;

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xD35D08", Offset = "0xD35D08", VA = "0xD35D08")]
		private void Update()
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xD35F08", Offset = "0xD35F08", VA = "0xD35F08")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xD35D18", Offset = "0xD35D18", VA = "0xD35D18")]
		private void lookAt()
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xD35F18", Offset = "0xD35F18", VA = "0xD35F18")]
		public LookAtTransform()
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public class PlaySoundOnGrab : GrabbableEvents
	{
		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip SoundToPlay;

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xD35F34", Offset = "0xD35F34", VA = "0xD35F34", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xD35FFC", Offset = "0xD35FFC", VA = "0xD35FFC")]
		public PlaySoundOnGrab()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public class ReturnToSnapZone : MonoBehaviour
	{
		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The SnapZone to return to if not being held")]
		public SnapZone ReturnTo;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("How fast to Lerp Towards the SnapZone")]
		public float LerpSpeed;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("How long to wait before starting to Lerp the object back towards the SnapZone. In Seconds.")]
		public float ReturnDelay;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentDelay;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool useGravityInitial;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Initiate snap if distance between the Grabbable and SnapZone is <= SnapDistance")]
		public float SnapDistance;

		[Token(Token = "0x6001329")]
		[Address(RVA = "0xD36004", Offset = "0xD36004", VA = "0xD36004")]
		private void Start()
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xD360B8", Offset = "0xD360B8", VA = "0xD360B8")]
		private void Update()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0xD361DC", Offset = "0xD361DC", VA = "0xD361DC")]
		private void moveToSnapZone()
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0xD36474", Offset = "0xD36474", VA = "0xD36474")]
		public ReturnToSnapZone()
		{
		}
	}
	[Token(Token = "0x20003C4")]
	public class RotateTowards : MonoBehaviour
	{
		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TargetTransform;

		[Token(Token = "0x600132D")]
		[Address(RVA = "0xD36494", Offset = "0xD36494", VA = "0xD36494")]
		private void Update()
		{
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0xD3657C", Offset = "0xD3657C", VA = "0xD3657C")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x20003C5")]
	public class RotateWithHMD : MonoBehaviour
	{
		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The Character Capsule to  rotate along with")]
		public CharacterController Character;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector3 Offset;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float RotateSpeed;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MovementSmoothing;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 velocity;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("If true this transform will be parented to the characterController. Set this to true if you want the position and rotation to align with the character controller without delay.")]
		public bool ParentToCharacter;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform originalParent;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform followTransform;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform camTransform;

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xD36584", Offset = "0xD36584", VA = "0xD36584")]
		private void Start()
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xD3675C", Offset = "0xD3675C", VA = "0xD3675C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xD36760", Offset = "0xD36760", VA = "0xD36760")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xD36B24", Offset = "0xD36B24", VA = "0xD36B24")]
		public RotateWithHMD()
		{
		}
	}
	[Token(Token = "0x20003C6")]
	public class ScaleBetweenPoints : MonoBehaviour
	{
		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Begin;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DoUpdate;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DoLateUpdate;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool LookAtTarget;

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xD36B90", Offset = "0xD36B90", VA = "0xD36B90")]
		private void Update()
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xD36D94", Offset = "0xD36D94", VA = "0xD36D94")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xD36BA0", Offset = "0xD36BA0", VA = "0xD36BA0")]
		private void doScale()
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xD36DA4", Offset = "0xD36DA4", VA = "0xD36DA4")]
		public ScaleBetweenPoints()
		{
		}
	}
	[Token(Token = "0x20003C7")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x20003C8")]
		[CompilerGenerated]
		private sealed class <fadeOutWithDelay>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400165A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400165B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400165C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x400165D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x170001ED")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001346")]
				[Address(RVA = "0xD37A6C", Offset = "0xD37A6C", VA = "0xD37A6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001348")]
				[Address(RVA = "0xD37AB4", Offset = "0xD37AB4", VA = "0xD37AB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001343")]
			[Address(RVA = "0xD374DC", Offset = "0xD374DC", VA = "0xD374DC")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001344")]
			[Address(RVA = "0xD379A8", Offset = "0xD379A8", VA = "0xD379A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001345")]
			[Address(RVA = "0xD379AC", Offset = "0xD379AC", VA = "0xD379AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001347")]
			[Address(RVA = "0xD37A74", Offset = "0xD37A74", VA = "0xD37A74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003C9")]
		[CompilerGenerated]
		private sealed class <doFade>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400165E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400165F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x4001661")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x4001662")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x4001663")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <alpha>5__2;

			[Token(Token = "0x170001EF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600134C")]
				[Address(RVA = "0xD37CDC", Offset = "0xD37CDC", VA = "0xD37CDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600134E")]
				[Address(RVA = "0xD37D24", Offset = "0xD37D24", VA = "0xD37D24", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001349")]
			[Address(RVA = "0xD377EC", Offset = "0xD377EC", VA = "0xD377EC")]
			[DebuggerHidden]
			public <doFade>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x600134A")]
			[Address(RVA = "0xD37ABC", Offset = "0xD37ABC", VA = "0xD37ABC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600134B")]
			[Address(RVA = "0xD37AC0", Offset = "0xD37AC0", VA = "0xD37AC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600134D")]
			[Address(RVA = "0xD37CE4", Offset = "0xD37CE4", VA = "0xD37CE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Should the screen fade in when a new level is loaded")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Color of the fade. Alpha will be modified when fading in / out")]
		public UnityEngine.Color FadeColor;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("How fast to fade in / out")]
		public float FadeInSpeed;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Wait X seconds before fading scene in")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4001654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.GameObject fadeObject;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform fadeObjectRect;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas fadeCanvas;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Image fadeImage;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xD36DB4", Offset = "0xD36DB4", VA = "0xD36DB4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xD36DC0", Offset = "0xD36DC0", VA = "0xD36DC0", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xD37224", Offset = "0xD37224", VA = "0xD37224")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xD372C8", Offset = "0xD372C8", VA = "0xD372C8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xD3736C", Offset = "0xD3736C", VA = "0xD3736C")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xD37458", Offset = "0xD37458", VA = "0xD37458")]
		[IteratorStateMachine(typeof(<fadeOutWithDelay>d__16))]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xD37504", Offset = "0xD37504", VA = "0xD37504", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xD37658", Offset = "0xD37658", VA = "0xD37658", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xD376C4", Offset = "0xD376C4", VA = "0xD376C4", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xD375CC", Offset = "0xD375CC", VA = "0xD375CC")]
		[IteratorStateMachine(typeof(<doFade>d__20))]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xD37814", Offset = "0xD37814", VA = "0xD37814", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0xD37978", Offset = "0xD37978", VA = "0xD37978")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x20003CA")]
	public class SnapZoneRingHelper : MonoBehaviour
	{
		[Token(Token = "0x4001664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SnapZone Snap;

		[Token(Token = "0x4001665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Color RestingColor;

		[Token(Token = "0x4001666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Color ValidSnapColor;

		[Token(Token = "0x4001667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Vector3 restingSizeObject;

		[Token(Token = "0x4001668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public UnityEngine.Vector3 validSizeObject;

		[Token(Token = "0x4001669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float RestingScale;

		[Token(Token = "0x400166A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float ValidSnapScale;

		[Token(Token = "0x400166B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CanvasScaler ringCanvas;

		[Token(Token = "0x400166C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Text ringText;

		[Token(Token = "0x400166D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GrabbablesInTrigger nearbyGrabbables;

		[Token(Token = "0x400166E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool validSnap;

		[Token(Token = "0x400166F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float ScaleSpeed;

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xD37D2C", Offset = "0xD37D2C", VA = "0xD37D2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xD37E2C", Offset = "0xD37E2C", VA = "0xD37E2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xD37F7C", Offset = "0xD37F7C", VA = "0xD37F7C")]
		private bool checkIsValidSnap()
		{
			return default(bool);
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xD38054", Offset = "0xD38054", VA = "0xD38054")]
		public SnapZoneRingHelper()
		{
		}
	}
	[Token(Token = "0x20003CB")]
	public class Tooltip : MonoBehaviour
	{
		[Token(Token = "0x4001670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 TipOffset;

		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool UseWorldYAxis;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxViewDistance;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform childTransform;

		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DrawLineTo;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineToTransform lineTo;

		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lookAt;

		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ToolTipManager tooltipManager;

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool isTipOn;

		[Token(Token = "0x4001679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.GameObject[] slides;

		[Token(Token = "0x400167A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int slidesIndex;

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xD38088", Offset = "0xD38088", VA = "0xD38088")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xD3825C", Offset = "0xD3825C", VA = "0xD3825C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xD38494", Offset = "0xD38494", VA = "0xD38494")]
		private void Update()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0xD38730", Offset = "0xD38730", VA = "0xD38730")]
		public void Toggle()
		{
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xD387FC", Offset = "0xD387FC", VA = "0xD387FC")]
		public Tooltip()
		{
		}
	}
	[Token(Token = "0x20003CC")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x20003CD")]
		public enum VelocityTrackingType
		{
			[Token(Token = "0x4001688")]
			Device,
			[Token(Token = "0x4001689")]
			PerFrame
		}

		[Token(Token = "0x400167B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("This setting determines how retrieve the velocity. If 'Device' is selected and ControllerHand is specified, then velocity will be retrieved from the connected physical controller. Otherwise velocity is calculated on a per frame basis.")]
		public VelocityTrackingType trackingType;

		[Token(Token = "0x400167C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("If ControllerHand is specified as Left or Right then velocity will attempt to be retrieved from the physical controller. If None, velocity will be calculated per frame.")]
		public ControllerHand controllerHand;

		[Token(Token = "0x400167D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("How many frames to use when averaging retrieving velocity using GetAveragedVelocity / GetAveragedAngularVelocity")]
		public float AverageVelocityCount;

		[Token(Token = "0x400167E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Vector3 _velocity;

		[Token(Token = "0x400167F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 _angularVelocity;

		[Token(Token = "0x4001680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 _lastPosition;

		[Token(Token = "0x4001681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Quaternion _lastRotation;

		[Token(Token = "0x4001682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<UnityEngine.Vector3> previousVelocities;

		[Token(Token = "0x4001683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<UnityEngine.Vector3> previousAngularVelocities;

		[Token(Token = "0x4001684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float angle;

		[Token(Token = "0x4001685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 axis;

		[Token(Token = "0x4001686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.GameObject playSpace;

		[Token(Token = "0x6001358")]
		[Address(RVA = "0xD38824", Offset = "0xD38824", VA = "0xD38824")]
		private void Start()
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xD3887C", Offset = "0xD3887C", VA = "0xD3887C")]
		private void Update()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xD388DC", Offset = "0xD388DC", VA = "0xD388DC", Slot = "4")]
		public virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xD38904", Offset = "0xD38904", VA = "0xD38904", Slot = "5")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xD38A60", Offset = "0xD38A60", VA = "0xD38A60", Slot = "6")]
		public virtual void UpdateAngularVelocity()
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xD38C8C", Offset = "0xD38C8C", VA = "0xD38C8C", Slot = "7")]
		public virtual UnityEngine.Vector3 GetVelocity()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xD38E18", Offset = "0xD38E18", VA = "0xD38E18", Slot = "8")]
		public virtual UnityEngine.Vector3 GetAveragedVelocity()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xD38E28", Offset = "0xD38E28", VA = "0xD38E28", Slot = "9")]
		public virtual UnityEngine.Vector3 GetAngularVelocity()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xD38E34", Offset = "0xD38E34", VA = "0xD38E34", Slot = "10")]
		public virtual UnityEngine.Vector3 GetAveragedAngularVelocity()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xD38E44", Offset = "0xD38E44", VA = "0xD38E44", Slot = "11")]
		public virtual UnityEngine.Vector3 GetAveragedVector(List<UnityEngine.Vector3> vectors)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xD38F4C", Offset = "0xD38F4C", VA = "0xD38F4C")]
		public VelocityTracker()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public enum LocomotionType
	{
		[Token(Token = "0x400168B")]
		Teleport,
		[Token(Token = "0x400168C")]
		SmoothLocomotion,
		[Token(Token = "0x400168D")]
		None
	}
	[Token(Token = "0x20003CF")]
	public class BNGPlayerController : MonoBehaviour
	{
		[Token(Token = "0x400168E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If true the CharacterController will move along with the HMD, as long as there are no obstacle's in the way")]
		[Header("Camera Options : ")]
		public bool MoveCharacterWithCamera;

		[Token(Token = "0x400168F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[UnityEngine.Tooltip("If true the CharacterController will rotate it's Y angle to match the HMD's Y angle")]
		public bool RotateCharacterWithCamera;

		[Token(Token = "0x4001690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The TrackingSpace represents your tracking space origin.")]
		[Header("Transform Setup ")]
		public Transform TrackingSpace;

		[Token(Token = "0x4001691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("The CameraRig is a Transform that is used to offset the main camera. The main camera should be parented to this.")]
		public Transform CameraRig;

		[Token(Token = "0x4001692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The CenterEyeAnchor is typically the Transform that contains your Main Camera")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x4001693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("If true, the player will be parented to any object below it that has the 'MovingPlatform' component attached.")]
		[Header("Moving Platform Support")]
		public bool CheckForMovingPlatforms;

		[Token(Token = "0x4001694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Ground checks : ")]
		[UnityEngine.Tooltip("Raycast against these layers to check if player is grounded")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4001695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("How far off the ground the player currently is. 0 = Grounded, 1 = 1 Meter in the air.")]
		public float DistanceFromGround;

		[Token(Token = "0x4001696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Player Capsule Settings : ")]
		[UnityEngine.Tooltip("Minimum Height our Player's capsule collider can be (in meters)")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4001697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Maximum Height our Player's capsule collider can be (in meters)")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4001698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4001699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Player Y Offset : ")]
		[UnityEngine.Tooltip("Offset the height of the CharacterController by this amount")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x400169A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x400169B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Misc : ")]
		[UnityEngine.Tooltip("If true the Camera will be offset by ElevateCameraHeight if no HMD is active or connected. This prevents the camera from falling to the floor and can allow you to use keyboard controls.")]
		public bool ElevateCameraIfNoHMDPresent;

		[Token(Token = "0x400169C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("How high (in meters) to elevate the player camera if no HMD is present and ElevateCameraIfNoHMDPresent is true. 1.65 = about 5.4' tall. ")]
		public float ElevateCameraHeight;

		[Token(Token = "0x400169D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
		public float MinElevation;

		[Token(Token = "0x400169E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float MaxElevation;

		[Token(Token = "0x400169F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x40016A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CharacterController characterController;

		[Token(Token = "0x40016A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayerRotation playerRotation;

		[Token(Token = "0x40016A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x40016A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RaycastHit groundHit;

		[Token(Token = "0x40016A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform mainCamera;

		[Token(Token = "0x40016A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private UnityEngine.Vector3 lastPlayerPosition;

		[Token(Token = "0x40016A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private UnityEngine.Quaternion lastPlayerRotation;

		[Token(Token = "0x40016A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float lastSnapTime;

		[Token(Token = "0x40016A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private UnityEngine.Vector3 _initialPosition;

		[Token(Token = "0x40016A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Transform _initialCharacterParent;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float elapsedTime;

		[Token(Token = "0x40016AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float timeLimit;

		[Token(Token = "0x40016AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public bool isSeated;

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xD39010", Offset = "0xD39010", VA = "0xD39010")]
		private void Start()
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xD39604", Offset = "0xD39604", VA = "0xD39604")]
		private void RestartLevel()
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xD39674", Offset = "0xD39674", VA = "0xD39674")]
		private void Update()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xD3988C", Offset = "0xD3988C", VA = "0xD3988C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xD398B4", Offset = "0xD398B4", VA = "0xD398B4", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xD3A0C0", Offset = "0xD3A0C0", VA = "0xD3A0C0", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xD3A4B4", Offset = "0xD3A4B4", VA = "0xD3A4B4", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xD3A5DC", Offset = "0xD3A5DC", VA = "0xD3A5DC", Slot = "7")]
		public virtual void UpdateLastSnapTime()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xD3A5F8", Offset = "0xD3A5F8", VA = "0xD3A5F8", Slot = "8")]
		public virtual bool RecentlyMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xD3A7B8", Offset = "0xD3A7B8", VA = "0xD3A7B8", Slot = "9")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xD3A8E0", Offset = "0xD3A8E0", VA = "0xD3A8E0")]
		public void isSeatedPress()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xD3A934", Offset = "0xD3A934", VA = "0xD3A934")]
		public void isStandingPress()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xD3A984", Offset = "0xD3A984", VA = "0xD3A984", Slot = "10")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xD3AB2C", Offset = "0xD3AB2C", VA = "0xD3AB2C", Slot = "11")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xD3ABA8", Offset = "0xD3ABA8", VA = "0xD3ABA8", Slot = "12")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xD3AD5C", Offset = "0xD3AD5C", VA = "0xD3AD5C", Slot = "13")]
		public virtual void checkMovingPlatform()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xD3AF1C", Offset = "0xD3AF1C", VA = "0xD3AF1C", Slot = "14")]
		public virtual void UpdateLastPlayerPosition()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xD3AFF4", Offset = "0xD3AFF4", VA = "0xD3AFF4")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xD3B090", Offset = "0xD3B090", VA = "0xD3B090")]
		public BNGPlayerController()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	public class Button : MonoBehaviour
	{
		[Token(Token = "0x40016AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The Local Y position of the button when it is pushed all the way down. Local Y position will never be less than this.")]
		public float MinLocalY;

		[Token(Token = "0x40016AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("The Local Y position of the button when it is not being pushed. Local Y position will never be greater than this.")]
		public float MaxLocalY;

		[Token(Token = "0x40016AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("How far away from MinLocalY / MaxLocalY to be considered a click")]
		public float ClickTolerance;

		[Token(Token = "0x40016B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("If true the button can be pressed by physical object by utiizing a Spring Joint. Set to false if you don't need / want physics interactions, or are using this on a moving platform.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x40016B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Grabber> grabbers;

		[Token(Token = "0x40016B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SpringJoint joint;

		[Token(Token = "0x40016B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool clickingDown;

		[Token(Token = "0x40016B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioClip ButtonClick;

		[Token(Token = "0x40016B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ButtonClickUp;

		[Token(Token = "0x40016B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onButtonDown;

		[Token(Token = "0x40016B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onButtonUp;

		[Token(Token = "0x40016B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioSource audioSource;

		[Token(Token = "0x40016B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x40016BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float ButtonSpeed;

		[Token(Token = "0x40016BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float SpringForce;

		[Token(Token = "0x40016BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 buttonDownPosition;

		[Token(Token = "0x40016BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private UnityEngine.Vector3 buttonUpPosition;

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xD3B0E4", Offset = "0xD3B0E4", VA = "0xD3B0E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xD3B280", Offset = "0xD3B280", VA = "0xD3B280")]
		private void Update()
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xD3B5D0", Offset = "0xD3B5D0", VA = "0xD3B5D0", Slot = "4")]
		public virtual UnityEngine.Vector3 GetButtonUpPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xD3B628", Offset = "0xD3B628", VA = "0xD3B628", Slot = "5")]
		public virtual UnityEngine.Vector3 GetButtonDownPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xD3B680", Offset = "0xD3B680", VA = "0xD3B680", Slot = "6")]
		public virtual void OnButtonDown()
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xD3B748", Offset = "0xD3B748", VA = "0xD3B748", Slot = "7")]
		public virtual void OnButtonUp()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xD3B810", Offset = "0xD3B810", VA = "0xD3B810")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xD3B9B4", Offset = "0xD3B9B4", VA = "0xD3B9B4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xD3BAA8", Offset = "0xD3BAA8", VA = "0xD3BAA8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xD3BC74", Offset = "0xD3BC74", VA = "0xD3BC74")]
		public Button()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	public class ControllerModelSelector : MonoBehaviour
	{
		[Token(Token = "0x40016BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int disableIndex;

		[Token(Token = "0x40016BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isQuitting;

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xD3BCA8", Offset = "0xD3BCA8", VA = "0xD3BCA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xD3BD4C", Offset = "0xD3BD4C", VA = "0xD3BD4C")]
		public void UpdateControllerModel()
		{
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0xD3BE68", Offset = "0xD3BE68", VA = "0xD3BE68")]
		public void EnableChildController(int childIndex)
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xD3BEF8", Offset = "0xD3BEF8", VA = "0xD3BEF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xD3BFB0", Offset = "0xD3BFB0", VA = "0xD3BFB0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xD3BFBC", Offset = "0xD3BFBC", VA = "0xD3BFBC")]
		public ControllerModelSelector()
		{
		}
	}
	[Token(Token = "0x20003D2")]
	public enum GrabType
	{
		[Token(Token = "0x40016C1")]
		Snap,
		[Token(Token = "0x40016C2")]
		Precise
	}
	[Token(Token = "0x20003D3")]
	public enum GrabPhysics
	{
		[Token(Token = "0x40016C4")]
		None = 2,
		[Token(Token = "0x40016C5")]
		PhysicsJoint = 0,
		[Token(Token = "0x40016C6")]
		FixedJoint = 3,
		[Token(Token = "0x40016C7")]
		Velocity = 4,
		[Token(Token = "0x40016C8")]
		Kinematic = 1
	}
	[Token(Token = "0x20003D4")]
	public enum OtherGrabBehavior
	{
		[Token(Token = "0x40016CA")]
		None,
		[Token(Token = "0x40016CB")]
		SwapHands,
		[Token(Token = "0x40016CC")]
		DualGrab
	}
	[Token(Token = "0x20003D5")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool BeingHeld;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Grabber> validGrabbers;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<Grabber> heldByGrabbers;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool wasKinematic;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool usedGravity;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected CollisionDetectionMode initialCollisionMode;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RigidbodyInterpolation initialInterpolationMode;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool remoteGrabbing;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Configure which button is used to initiate the grab")]
		[Header("Grab Settings")]
		public GrabButton GrabButton;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("'Inherit' will inherit this setting from the Grabber. 'Hold' requires the user to hold the GrabButton down. 'Toggle' will drop / release the Grabbable on button activation.")]
		public HoldType Grabtype;

		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Kinematic Physics locks the object in place on the hand / grabber. Physics Joint and Velocity types allow collisions with the environment.")]
		public GrabPhysics GrabPhysics;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("Snap to a location or grab anywhere on the object")]
		public GrabType GrabMechanic;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("How fast to Lerp the object to the hand")]
		public float GrabSpeed;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Remote Grab")]
		[UnityEngine.Tooltip("Can the object be picked up from far away. Must be within RemoteGrabber Trigger")]
		public bool RemoteGrabbable;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Max Distance Object can be Remote Grabbed. Not applicable if RemoteGrabbable is false")]
		public float RemoteGrabDistance;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Header("Throwing")]
		[UnityEngine.Tooltip("Multiply controller's velocity times this when throwing")]
		public float ThrowForceMultiplier;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Multiply controller's angular velocity times this when throwing")]
		public float ThrowForceMultiplierAngular;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[UnityEngine.Tooltip("Drop the item if object's center travels this far from the Grabber's Center (in meters). Set to 0 to disable distance break.")]
		public float BreakDistance;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Enabling this will hide the Transform specified in the Grabber's HandGraphics property")]
		[Header("Hand Options")]
		public bool HideHandGraphics;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[UnityEngine.Tooltip("Parent this object to the hands for better stability during movement (Recommended unless this object is a Kinematic Rigidbody or child Grabbable / Rigidbody)")]
		public bool ParentToHands;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[UnityEngine.Tooltip("If true, the hand model will be attached to the grabbed object. This separates it from a 1:1 match with the controller, but may look more realistic.")]
		public bool ParentHandModel;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[UnityEngine.Tooltip("If true, the hand model will snap to the nearest GrabPoint. Otherwise the hand model will stay with the Grabber.")]
		public bool SnapHandModel;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Misc")]
		[UnityEngine.Tooltip("Set to false to disable dropping. If false, will be permanently attached to whatever grabs this.")]
		public bool CanBeDropped;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[UnityEngine.Tooltip("Can this object be snapped to snap zones? Set to false if you never want this to be snappable. Further filtering can be done on the SnapZones")]
		public bool CanBeSnappedToSnapZone;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[UnityEngine.Tooltip("If true, the object will always have kinematic disabled when dropped, even if it was initially kinematic.")]
		public bool ForceDisableKinematicOnDrop;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Default Hand Pose")]
		[UnityEngine.Tooltip("This HandPose Id will be passed to the Hand Animator when equipped. You can add new hand poses in the HandPoseDefinitions.cs file.")]
		public HandPoseId CustomHandPose;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected HandPoseId initialHandPoseId;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("What to do if another grabber grabs this while equipped. DualGrab is currently unsupported.")]
		[Header("Secondary Grab")]
		public OtherGrabBehavior SecondaryGrabBehavior;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("The Grabbable can only be grabbed if this grabbable is being held. Example : If you only want a weapon part to be grabbable if the weapon itself is being held.")]
		public Grabbable OtherGrabbableMustBeGrabbed;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("Look at this object if it is being held. For example, a rifle may look at a Grabable Grip on the object.")]
		[Header("Secondary Grab Look Settings")]
		public Grabbable SecondaryGrabbable;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("How quickly to Lerp towards the SecondaryGrabbable")]
		public float SecondHandLookSpeed;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("A higher Spring Force will make the Grabbable more rigid")]
		[Header("Physics Joint Settings")]
		public float CollisionSpring;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UnityEngine.Tooltip("How much Slerp Force to apply to the joint when something is in contact with the grabbable")]
		public float CollisionSlerp;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[UnityEngine.Tooltip("How to restrict the Configurable Joint's xMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionX;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UnityEngine.Tooltip("How to restrict the Configurable Joint's yMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionY;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[UnityEngine.Tooltip("How to restrict the Configurable Joint's zMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionZ;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UnityEngine.Tooltip("Restrict the rotation around the X axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionX;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[UnityEngine.Tooltip("Restrict the rotation around the Y axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionY;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UnityEngine.Tooltip("Restrict the rotation around Z axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionZ;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[UnityEngine.Tooltip("If true, the object's velocity will be adjusted to match the grabber. This is in addition to any forces added by the configurable joint.")]
		public bool ApplyCorrectiveForce;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Velocity Grab Settings")]
		public float MoveVelocityForce;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float MoveAngularVelocityForce;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public float LastGrabTime;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		public float LastDropTime;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public bool AddControllerVelocityOnDrop;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float journeyLength;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		[Header("Shown for Debug : ")]
		protected List<Collider> collisions;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected float lastCollisionSeconds;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected float lastNoCollisionSeconds;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected float requestSpringTime;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Transform primaryGrabOffset;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public GrabPoint ActiveGrabPoint;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		public UnityEngine.Vector3 SecondaryLookOffset;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public Transform SecondaryLookAtTransform;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public Transform LocalOffsetTransform;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform _grabTransform;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Header("Grab Points")]
		[UnityEngine.Tooltip("If Grab Mechanic is set to Snap, the closest GrabPoint will be used. Add a SnapPoint Component to a GrabPoint to specify custom hand poses and rotation.")]
		public List<Transform> GrabPoints;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool _canBeMoved;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		protected Transform originalParent;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected InputBridge input;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected ConfigurableJoint connectedJoint;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected UnityEngine.Vector3 previousPosition;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		protected float lastItemTeleportTime;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected bool recentlyTeleported;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		[HideInInspector]
		public bool UseCustomInspector;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private BNGPlayerController _player;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected Collider col;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected Rigidbody rigid;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected Grabber flyingTo;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected List<GrabbableEvents> events;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected bool didParentHands;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		private bool quitting;

		[Token(Token = "0x170001F1")]
		public List<Grabber> HeldByGrabbers
		{
			[Token(Token = "0x6001386")]
			[Address(RVA = "0xD3BFC4", Offset = "0xD3BFC4", VA = "0xD3BFC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F2")]
		public float OriginalScale
		{
			[Token(Token = "0x6001387")]
			[Address(RVA = "0xD3BFCC", Offset = "0xD3BFCC", VA = "0xD3BFCC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001388")]
			[Address(RVA = "0xD3BFD4", Offset = "0xD3BFD4", VA = "0xD3BFD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001F3")]
		private bool grabbingTwoHands
		{
			[Token(Token = "0x6001389")]
			[Address(RVA = "0xD3BFDC", Offset = "0xD3BFDC", VA = "0xD3BFDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F4")]
		private UnityEngine.Vector3 grabPosition
		{
			[Token(Token = "0x600138A")]
			[Address(RVA = "0xD3C064", Offset = "0xD3C064", VA = "0xD3C064")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170001F5")]
		[HideInInspector]
		public UnityEngine.Vector3 GrabPositionOffset
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0xD2E318", Offset = "0xD2E318", VA = "0xD2E318")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170001F6")]
		[HideInInspector]
		public UnityEngine.Vector3 GrabRotationOffset
		{
			[Token(Token = "0x600138C")]
			[Address(RVA = "0xD3C0EC", Offset = "0xD3C0EC", VA = "0xD3C0EC")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170001F7")]
		public Transform grabTransform
		{
			[Token(Token = "0x600138D")]
			[Address(RVA = "0xD3C1AC", Offset = "0xD3C1AC", VA = "0xD3C1AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F8")]
		public bool CanBeMoved
		{
			[Token(Token = "0x600138E")]
			[Address(RVA = "0xD3C314", Offset = "0xD3C314", VA = "0xD3C314")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F9")]
		protected BNGPlayerController player
		{
			[Token(Token = "0x600138F")]
			[Address(RVA = "0xD2F3B0", Offset = "0xD2F3B0", VA = "0xD2F3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FA")]
		public bool DidParentHands
		{
			[Token(Token = "0x6001390")]
			[Address(RVA = "0xD3C31C", Offset = "0xD3C31C", VA = "0xD3C31C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xD3C324", Offset = "0xD3C324", VA = "0xD3C324")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xD3C7F4", Offset = "0xD3C7F4", VA = "0xD3C7F4", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xD3E558", Offset = "0xD3E558", VA = "0xD3E558", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xD3CF28", Offset = "0xD3CF28", VA = "0xD3CF28")]
		protected UnityEngine.Vector3 getGrabberWithOffsetWorldPosition(Grabber grabber)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0xD3DF10", Offset = "0xD3DF10", VA = "0xD3DF10")]
		protected void positionHandGraphics()
		{
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0xD3E664", Offset = "0xD3E664", VA = "0xD3E664", Slot = "6")]
		public virtual bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0xD3E70C", Offset = "0xD3E70C", VA = "0xD3E70C", Slot = "7")]
		public virtual void UpdateFixedJoints()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xD3EA5C", Offset = "0xD3EA5C", VA = "0xD3EA5C", Slot = "8")]
		public virtual void UpdatePhysicsJoints()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xD3F080", Offset = "0xD3F080", VA = "0xD3F080")]
		private void setPositionSpring(float spring, float damper)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xD3F20C", Offset = "0xD3F20C", VA = "0xD3F20C")]
		private void setSlerpDrive(float slerp, float damper)
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xD3E850", Offset = "0xD3E850", VA = "0xD3E850")]
		private void moveWithVelocity()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xD3F2E4", Offset = "0xD3F2E4", VA = "0xD3F2E4")]
		private void rotateWithVelocity()
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xD3F57C", Offset = "0xD3F57C", VA = "0xD3F57C", Slot = "9")]
		public virtual void UpdateKinematicPhysics()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xD3FB68", Offset = "0xD3FB68", VA = "0xD3FB68", Slot = "10")]
		public virtual void UpdateVelocityPhysics()
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xD3DAB4", Offset = "0xD3DAB4", VA = "0xD3DAB4")]
		private void checkParentHands()
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xD3C708", Offset = "0xD3C708", VA = "0xD3C708")]
		private bool canBeMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xD3DFC4", Offset = "0xD3DFC4", VA = "0xD3DFC4")]
		private void checkSecondaryLook()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xD3FE20", Offset = "0xD3FE20", VA = "0xD3FE20")]
		private void rotateGrabber(bool lerp = false)
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xD3FFE8", Offset = "0xD3FFE8", VA = "0xD3FFE8")]
		public Transform GetGrabPoint()
		{
			return null;
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xD2F62C", Offset = "0xD2F62C", VA = "0xD2F62C", Slot = "11")]
		public virtual void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xD4020C", Offset = "0xD4020C", VA = "0xD4020C", Slot = "12")]
		protected virtual void setupConfigJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xD4043C", Offset = "0xD4043C", VA = "0xD4043C", Slot = "13")]
		protected virtual void setupFixedJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xD4054C", Offset = "0xD4054C", VA = "0xD4054C", Slot = "14")]
		protected virtual void setupKinematicGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xD40614", Offset = "0xD40614", VA = "0xD40614", Slot = "15")]
		protected virtual void setupVelocityGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xD4072C", Offset = "0xD4072C", VA = "0xD4072C", Slot = "16")]
		public virtual void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xD3FFF0", Offset = "0xD3FFF0", VA = "0xD3FFF0")]
		public void ResetGrabbing()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xD408B0", Offset = "0xD408B0", VA = "0xD408B0", Slot = "17")]
		public virtual void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xD3FD30", Offset = "0xD3FD30", VA = "0xD3FD30")]
		private void clearLookAtTransform()
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xD41028", Offset = "0xD41028", VA = "0xD41028")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xD41168", Offset = "0xD41168", VA = "0xD41168")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xD3D5A0", Offset = "0xD3D5A0", VA = "0xD3D5A0")]
		private void callEvents(Grabber g)
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xD2FFF8", Offset = "0xD2FFF8", VA = "0xD2FFF8", Slot = "18")]
		public virtual void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xD412F8", Offset = "0xD412F8", VA = "0xD412F8", Slot = "19")]
		public virtual void DropItem(bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xD41348", Offset = "0xD41348", VA = "0xD41348")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xD40D24", Offset = "0xD40D24", VA = "0xD40D24")]
		public void ResetParent()
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xD41378", Offset = "0xD41378", VA = "0xD41378")]
		public void UpdateOriginalParent(Transform newOriginalParent)
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xD41388", Offset = "0xD41388", VA = "0xD41388")]
		public void UpdateOriginalParent()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xD413BC", Offset = "0xD413BC", VA = "0xD413BC")]
		public ControllerHand GetControllerHand(Grabber g)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xD41434", Offset = "0xD41434", VA = "0xD41434", Slot = "20")]
		public virtual Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xD41538", Offset = "0xD41538", VA = "0xD41538", Slot = "21")]
		public virtual Grabber GetClosestGrabber()
		{
			return null;
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xD416E4", Offset = "0xD416E4", VA = "0xD416E4", Slot = "22")]
		public virtual Transform GetClosestGrabPoint(Grabber grabber)
		{
			return null;
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0xD41A14", Offset = "0xD41A14", VA = "0xD41A14", Slot = "23")]
		public virtual void Release(UnityEngine.Vector3 velocity, UnityEngine.Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0xD41B54", Offset = "0xD41B54", VA = "0xD41B54", Slot = "24")]
		public virtual bool IsValidCollision(Collision collision)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0xD41B8C", Offset = "0xD41B8C", VA = "0xD41B8C", Slot = "25")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xD41D24", Offset = "0xD41D24", VA = "0xD41D24", Slot = "26")]
		public virtual void parentHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xD40324", Offset = "0xD40324", VA = "0xD40324")]
		private void setupConfigJoint(Grabber g)
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xD40D4C", Offset = "0xD40D4C", VA = "0xD40D4C")]
		private void removeConfigJoint()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xD400CC", Offset = "0xD400CC", VA = "0xD400CC")]
		private void addGrabber(Grabber g)
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xD40E20", Offset = "0xD40E20", VA = "0xD40E20")]
		private void removeGrabber(Grabber g)
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xD3D280", Offset = "0xD3D280", VA = "0xD3D280")]
		private void movePosition(UnityEngine.Vector3 worldPosition)
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xD3D350", Offset = "0xD3D350", VA = "0xD3D350")]
		private void moveRotation(UnityEngine.Quaternion worldRotation)
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xD3F9B4", Offset = "0xD3F9B4", VA = "0xD3F9B4")]
		protected UnityEngine.Vector3 getRemotePosition(Grabber toGrabber)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xD3D04C", Offset = "0xD3D04C", VA = "0xD3D04C")]
		protected UnityEngine.Quaternion getRemoteRotation(Grabber grabber)
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xD3D42C", Offset = "0xD3D42C", VA = "0xD3D42C")]
		private void filterCollisions()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xD41E18", Offset = "0xD41E18", VA = "0xD41E18", Slot = "27")]
		public virtual BNGPlayerController GetBNGPlayerController()
		{
			return null;
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xD41F54", Offset = "0xD41F54", VA = "0xD41F54", Slot = "28")]
		public virtual void RequestSpringTime(float seconds)
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xD41F8C", Offset = "0xD41F8C", VA = "0xD41F8C", Slot = "29")]
		public virtual void AddValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xD420CC", Offset = "0xD420CC", VA = "0xD420CC", Slot = "30")]
		public virtual void RemoveValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xD4215C", Offset = "0xD4215C", VA = "0xD4215C")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0xD42324", Offset = "0xD42324", VA = "0xD42324")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0xD4244C", Offset = "0xD4244C", VA = "0xD4244C")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0xD42508", Offset = "0xD42508", VA = "0xD42508")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0xD42514", Offset = "0xD42514", VA = "0xD42514")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0xD42540", Offset = "0xD42540", VA = "0xD42540")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xD30014", Offset = "0xD30014", VA = "0xD30014")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The Parent Grabbable Object to be grabbed.")]
		public Grabbable ParentGrabbable;

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xD43690", Offset = "0xD43690", VA = "0xD43690")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	[RequireComponent(typeof(Grabbable))]
	public abstract class GrabbableEvents : MonoBehaviour
	{
		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Grabbable grab;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Grabber thisGrabber;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected InputBridge input;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isOnTriggerDown;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool isOnButton2;

		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xD43698", Offset = "0xD43698", VA = "0xD43698")]
		private void Awake()
		{
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xD438F8", Offset = "0xD438F8", VA = "0xD438F8", Slot = "4")]
		public virtual void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xD43900", Offset = "0xD43900", VA = "0xD43900", Slot = "5")]
		public virtual void OnRelease()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xD43904", Offset = "0xD43904", VA = "0xD43904", Slot = "6")]
		public virtual void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xD43908", Offset = "0xD43908", VA = "0xD43908", Slot = "7")]
		public virtual void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xD4390C", Offset = "0xD4390C", VA = "0xD4390C", Slot = "8")]
		public virtual void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xD43910", Offset = "0xD43910", VA = "0xD43910", Slot = "9")]
		public virtual void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xD43914", Offset = "0xD43914", VA = "0xD43914", Slot = "10")]
		public virtual void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xD43918", Offset = "0xD43918", VA = "0xD43918", Slot = "11")]
		public virtual void OnBecomesClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xD4391C", Offset = "0xD4391C", VA = "0xD4391C", Slot = "12")]
		public virtual void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xD43920", Offset = "0xD43920", VA = "0xD43920", Slot = "13")]
		public virtual void OnNoLongerClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xD43924", Offset = "0xD43924", VA = "0xD43924", Slot = "14")]
		public virtual void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xD43928", Offset = "0xD43928", VA = "0xD43928", Slot = "15")]
		public virtual void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xD4392C", Offset = "0xD4392C", VA = "0xD4392C", Slot = "16")]
		public virtual void OnTriggerDown()
		{
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xD43930", Offset = "0xD43930", VA = "0xD43930", Slot = "17")]
		public virtual void OnTriggerUp()
		{
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xD43934", Offset = "0xD43934", VA = "0xD43934", Slot = "18")]
		public virtual void OnButton1()
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xD43938", Offset = "0xD43938", VA = "0xD43938", Slot = "19")]
		public virtual void OnButton1Down()
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xD4393C", Offset = "0xD4393C", VA = "0xD4393C", Slot = "20")]
		public virtual void OnButton1Up()
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xD43940", Offset = "0xD43940", VA = "0xD43940", Slot = "21")]
		public virtual void OnButton2()
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xD43944", Offset = "0xD43944", VA = "0xD43944", Slot = "22")]
		public virtual void OnButton2Down()
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xD43948", Offset = "0xD43948", VA = "0xD43948", Slot = "23")]
		public virtual void OnButton2Up()
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xD4394C", Offset = "0xD4394C", VA = "0xD4394C", Slot = "24")]
		public virtual void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xD43950", Offset = "0xD43950", VA = "0xD43950", Slot = "25")]
		public virtual void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xD43954", Offset = "0xD43954", VA = "0xD43954")]
		protected GrabbableEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003D8")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xD4395C", Offset = "0xD4395C", VA = "0xD4395C")]
		public FloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003D9")]
	public class FloatFloatEvent : UnityEvent<float, float>
	{
		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xD439A4", Offset = "0xD439A4", VA = "0xD439A4")]
		public FloatFloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003DA")]
	public class GrabberEvent : UnityEvent<Grabber>
	{
		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xD439EC", Offset = "0xD439EC", VA = "0xD439EC")]
		public GrabberEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003DB")]
	public class GrabbableEvent : UnityEvent<Grabbable>
	{
		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xD43A34", Offset = "0xD43A34", VA = "0xD43A34")]
		public GrabbableEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003DC")]
	public class RaycastHitEvent : UnityEvent<RaycastHit>
	{
		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xD43A7C", Offset = "0xD43A7C", VA = "0xD43A7C")]
		public RaycastHitEvent()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class GrabbablesInTrigger : MonoBehaviour
	{
		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, Grabbable> NearbyGrabbables;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Collider, Grabbable> ValidGrabbables;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Collider, Grabbable> ValidRemoteGrabbables;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable ClosestRemoteGrabbable;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool FireGrabbableEvents;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable _closest;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _lastDistance;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _thisDistance;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Collider, Grabbable> _valids;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Collider, Grabbable> _filtered;

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xD43AC4", Offset = "0xD43AC4", VA = "0xD43AC4")]
		private void Start()
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xD43B98", Offset = "0xD43B98", VA = "0xD43B98")]
		private void Update()
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xD43BB0", Offset = "0xD43BB0", VA = "0xD43BB0")]
		private void updateClosestGrabbable()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xD43C28", Offset = "0xD43C28", VA = "0xD43C28")]
		private void updateClosestRemoteGrabbables()
		{
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xD442A4", Offset = "0xD442A4", VA = "0xD442A4", Slot = "4")]
		public virtual Grabbable GetClosestGrabbable(Dictionary<Collider, Grabbable> grabbables, bool remoteOnly = false)
		{
			return null;
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xD4404C", Offset = "0xD4404C", VA = "0xD4404C")]
		private Dictionary<Collider, Grabbable> getValidGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xD445E0", Offset = "0xD445E0", VA = "0xD445E0", Slot = "5")]
		protected virtual bool isValidGrabbale(Collider col, Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xD43CD0", Offset = "0xD43CD0", VA = "0xD43CD0")]
		private Dictionary<Collider, Grabbable> sanitizeGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xD44848", Offset = "0xD44848", VA = "0xD44848", Slot = "6")]
		public virtual void AddNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xD4497C", Offset = "0xD4497C", VA = "0xD4497C", Slot = "7")]
		public virtual void RemoveNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xD44A54", Offset = "0xD44A54", VA = "0xD44A54", Slot = "8")]
		public virtual void RemoveNearbyGrabbable(Grabbable grabObject)
		{
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xD44C44", Offset = "0xD44C44", VA = "0xD44C44", Slot = "9")]
		public virtual void AddValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xD44EE0", Offset = "0xD44EE0", VA = "0xD44EE0", Slot = "10")]
		public virtual void RemoveValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xD44FB8", Offset = "0xD44FB8", VA = "0xD44FB8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xD45108", Offset = "0xD45108", VA = "0xD45108")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xD45230", Offset = "0xD45230", VA = "0xD45230")]
		public GrabbablesInTrigger()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	public class GrabbableUnityEvents : GrabbableEvents
	{
		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrabberEvent onGrab;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onRelease;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onBecomesClosestGrabbable;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onNoLongerClosestGrabbable;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onBecomesClosestRemoteGrabbable;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onNoLongerClosestRemoteGrabbable;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatEvent onGrip;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public FloatEvent onTrigger;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onButton1;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onButton1Down;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEvent onButton1Up;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onButton2;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onButton2Down;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onButton2Up;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onSnapZoneEnter;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UnityEvent onSnapZoneExit;

		[Token(Token = "0x6001400")]
		[Address(RVA = "0xD45240", Offset = "0xD45240", VA = "0xD45240", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0xD452B0", Offset = "0xD452B0", VA = "0xD452B0", Slot = "5")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xD452C4", Offset = "0xD452C4", VA = "0xD452C4", Slot = "6")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xD452D8", Offset = "0xD452D8", VA = "0xD452D8", Slot = "8")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xD452EC", Offset = "0xD452EC", VA = "0xD452EC", Slot = "10")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xD45300", Offset = "0xD45300", VA = "0xD45300", Slot = "12")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xD45314", Offset = "0xD45314", VA = "0xD45314", Slot = "14")]
		public override void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xD45380", Offset = "0xD45380", VA = "0xD45380", Slot = "15")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xD453EC", Offset = "0xD453EC", VA = "0xD453EC", Slot = "16")]
		public override void OnTriggerDown()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xD45400", Offset = "0xD45400", VA = "0xD45400", Slot = "17")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xD45414", Offset = "0xD45414", VA = "0xD45414", Slot = "18")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0xD45428", Offset = "0xD45428", VA = "0xD45428", Slot = "19")]
		public override void OnButton1Down()
		{
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0xD4543C", Offset = "0xD4543C", VA = "0xD4543C", Slot = "20")]
		public override void OnButton1Up()
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0xD45450", Offset = "0xD45450", VA = "0xD45450", Slot = "21")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0xD45464", Offset = "0xD45464", VA = "0xD45464", Slot = "22")]
		public override void OnButton2Down()
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0xD45478", Offset = "0xD45478", VA = "0xD45478", Slot = "23")]
		public override void OnButton2Up()
		{
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0xD4548C", Offset = "0xD4548C", VA = "0xD4548C", Slot = "24")]
		public override void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xD454A0", Offset = "0xD454A0", VA = "0xD454A0", Slot = "25")]
		public override void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xD454B4", Offset = "0xD454B4", VA = "0xD454B4")]
		public GrabbableUnityEvents()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	[RequireComponent(typeof(GrabbablesInTrigger))]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Side")]
		[UnityEngine.Tooltip("Which controller side. None if not attached to a controller.")]
		public ControllerHand HandSide;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Grab Settings")]
		[UnityEngine.Tooltip("The default hold type for all Grabbables. A Grabbable can manually override this default.")]
		public HoldType DefaultHoldType;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The default grab button for all Grabbables. A Grabbable can manually override this default.")]
		public GrabButton DefaultGrabButton;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("0-1 determine how much to consider a grip. Example : 0.75 is holding the grip down 3/4 of the way.")]
		[Header("Hold / Release")]
		[Range(0f, 1f)]
		public float GripAmount;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("How much grip considered to release an object (0-1). Example : 0.75 is holding the grip down 3/4 of the way")]
		[Range(0f, 1f)]
		public float ReleaseGripAmount;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("How many seconds to check for grab input while Grip is held down. After grip is held down for this long, grip will need to be repressed in order to pick up an object.")]
		public float GrabCheckSeconds;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentGrabTime;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Equip on Start")]
		[UnityEngine.Tooltip("Assign a Grabbable here if you want to auto equip it on Start")]
		public Grabbable EquipGrabbableOnStart;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Root transform that holds hands models. We may want to hide these while holding certain objects, or parent this object to the grabbable so they follow the object perfectly.")]
		[Header("Hand Graphics")]
		public Transform HandsGraphics;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform HandsGraphics2;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform singleHandParent;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform handsGraphicsParent;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform handsGraphics2Parent;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3 handsGraphicsPosition;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private UnityEngine.Quaternion handsGraphicsRotation;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("The Grabbable we are currently holding. Null if not holding anything.")]
		[Header("Shown for Debug :")]
		public Grabbable HeldGrabbable;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Same as holding down grip if set to true. Should not have same value as ForceRelease.")]
		public bool ForceGrab;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[UnityEngine.Tooltip("Force the release of grip if set to true. Should not have same value as ForceGrab.")]
		public bool ForceRelease;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("Time.time when we last dropped a Grabbable")]
		public float LastDropTime;

		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable previousClosest;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Grabbable previousClosestRemote;

		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GrabbablesInTrigger grabsInTrigger;

		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Grabbable flyingGrabbable;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float flyingTime;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[HideInInspector]
		public UnityEngine.Vector3 PreviousPosition;

		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		public Transform DummyTransform;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Rigidbody rb;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputBridge input;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		public bool FreshGrip;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Header("Grabber Events")]
		public GrabbableEvent onGrabEvent;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public GrabbableEvent onReleaseEvent;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public VelocityTracker velocityTracker;

		[Token(Token = "0x170001FB")]
		public bool HoldingItem
		{
			[Token(Token = "0x6001413")]
			[Address(RVA = "0xD454BC", Offset = "0xD454BC", VA = "0xD454BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FC")]
		public bool RemoteGrabbingItem
		{
			[Token(Token = "0x6001414")]
			[Address(RVA = "0xD4551C", Offset = "0xD4551C", VA = "0xD4551C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FD")]
		public GrabbablesInTrigger GrabsInTrigger
		{
			[Token(Token = "0x6001415")]
			[Address(RVA = "0xD4557C", Offset = "0xD4557C", VA = "0xD4557C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		public UnityEngine.Vector3 handsGraphicsGrabberOffset
		{
			[Token(Token = "0x6001416")]
			[Address(RVA = "0xD45584", Offset = "0xD45584", VA = "0xD45584")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001417")]
			[Address(RVA = "0xD45590", Offset = "0xD45590", VA = "0xD45590")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public UnityEngine.Vector3 handsGraphicsGrabberOffsetRotation
		{
			[Token(Token = "0x6001418")]
			[Address(RVA = "0xD4559C", Offset = "0xD4559C", VA = "0xD4559C")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001419")]
			[Address(RVA = "0xD455A8", Offset = "0xD455A8", VA = "0xD455A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xD455B4", Offset = "0xD455B4", VA = "0xD455B4")]
		private void Start()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xD45AC4", Offset = "0xD45AC4", VA = "0xD45AC4")]
		private void Update()
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xD45C84", Offset = "0xD45C84", VA = "0xD45C84")]
		private void updateFreshGrabStatus()
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xD45CF8", Offset = "0xD45CF8", VA = "0xD45CF8")]
		private void checkGrabbableEvents()
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xD463C4", Offset = "0xD463C4", VA = "0xD463C4", Slot = "4")]
		public virtual bool InputCheckGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xD464AC", Offset = "0xD464AC", VA = "0xD464AC", Slot = "5")]
		public virtual bool GetInputDownForGrabbable(Grabbable grabObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xD46590", Offset = "0xD46590", VA = "0xD46590")]
		private HoldType getHoldType(Grabbable grab)
		{
			return default(HoldType);
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xD46714", Offset = "0xD46714", VA = "0xD46714", Slot = "6")]
		public virtual GrabButton GetGrabButton(Grabbable grab)
		{
			return default(GrabButton);
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xD463E8", Offset = "0xD463E8", VA = "0xD463E8")]
		private Grabbable getClosestOrRemote()
		{
			return null;
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xD46204", Offset = "0xD46204", VA = "0xD46204")]
		private bool inputCheckRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xD462E4", Offset = "0xD462E4", VA = "0xD462E4")]
		private float getGrabInput(GrabButton btn)
		{
			return default(float);
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xD46628", Offset = "0xD46628", VA = "0xD46628")]
		private bool getToggleInput(GrabButton btn)
		{
			return default(bool);
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xD467AC", Offset = "0xD467AC", VA = "0xD467AC", Slot = "7")]
		public virtual bool TryGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xD46904", Offset = "0xD46904", VA = "0xD46904", Slot = "8")]
		public virtual void GrabGrabbable(Grabbable item)
		{
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xD46A6C", Offset = "0xD46A6C", VA = "0xD46A6C", Slot = "9")]
		public virtual void DidDrop()
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xD46B90", Offset = "0xD46B90", VA = "0xD46B90", Slot = "10")]
		public virtual void HideHandGraphics()
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xD46E18", Offset = "0xD46E18", VA = "0xD46E18", Slot = "11")]
		public virtual void ResetHandGraphics()
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0xD46F84", Offset = "0xD46F84", VA = "0xD46F84", Slot = "12")]
		public virtual void TryRelease()
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xD45BE8", Offset = "0xD45BE8", VA = "0xD45BE8")]
		private void resetFlyingGrabbable()
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xD47018", Offset = "0xD47018", VA = "0xD47018", Slot = "13")]
		public virtual UnityEngine.Vector3 GetGrabberAveragedVelocity()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xD47038", Offset = "0xD47038", VA = "0xD47038", Slot = "14")]
		public virtual UnityEngine.Vector3 GetGrabberAveragedAngularVelocity()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xD47058", Offset = "0xD47058", VA = "0xD47058")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x20003E0")]
	public class GrabPoint : MonoBehaviour
	{
		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose")]
		public HandPoseId HandPose;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Valid Hands")]
		[UnityEngine.Tooltip("Can this Grab Point be used by a left-handed Grabber?")]
		public bool LeftHandIsValid;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[UnityEngine.Tooltip("Can this Grab Point be used by a right-handed Grabber?")]
		public bool RightHandIsValid;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If specified, the Hand Model will be parented here when snapped")]
		[Header("Parent to")]
		public Transform HandPosition;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Angle Restriction")]
		[UnityEngine.Tooltip("GrabPoint is not considered valid if the angle between the GrabPoint and Grabber is greater than this amount")]
		[Range(0f, 360f)]
		public float MaxDegreeDifferenceAllowed;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Minimum value Hand Animator will blend to. Example : If IndexBlendMin = 0.4 and Trigger button is not held down, the LayerWeight will be set to 0.4")]
		[Range(0f, 1f)]
		[Header("Finger Blending")]
		public float IndexBlendMin;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[UnityEngine.Tooltip("Maximum value Hand Animator will blend to. Example : If IndexBlendMax = 0.6 and Trigger button is held all the way down, the LayerWeight will be set to 0.6")]
		public float IndexBlendMax;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Minimum value Hand Animator will blend to if thumb control is not being touched.")]
		[Range(0f, 1f)]
		public float ThumbBlendMin;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Maximum value Hand Animator will blend to if thumb control is being touched.")]
		[Range(0f, 1f)]
		public float ThumbBlendMax;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 previewModelOffsetLeft;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 previewModelOffsetRight;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("Show a green arc in the Scene view representing MaxDegreeDifferenceAllowed")]
		[Header("Editor")]
		public bool ShowAngleGizmo;

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xD4707C", Offset = "0xD4707C", VA = "0xD4707C")]
		public void UpdatePreviewTransforms()
		{
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xD473DC", Offset = "0xD473DC", VA = "0xD473DC")]
		private void updateChildAnimators()
		{
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0xD47480", Offset = "0xD47480", VA = "0xD47480")]
		public GrabPoint()
		{
		}
	}
	[Token(Token = "0x20003E1")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Child index of the hand model to use if nothing stored in playerprefs or LoadHandSelectionFromPrefs set to false")]
		public int DefaultHandsModel;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("If true, the selected hand model will be saved and loaded from player prefs")]
		public bool LoadHandSelectionFromPrefs;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Input used to toggle between hands")]
		public ControllerBinding ToggleHandsInput;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options.")]
		public Transform LeftHandGFXHolder;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options")]
		public Transform RightHandGFXHolder;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _selectedHandGFX;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Used for IK Hands / Body option")]
		public CharacterIK IKBody;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UIPointer uiPoint;

		[Token(Token = "0x6001433")]
		[Address(RVA = "0xD474C0", Offset = "0xD474C0", VA = "0xD474C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0xD479D0", Offset = "0xD479D0", VA = "0xD479D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0xD47558", Offset = "0xD47558", VA = "0xD47558")]
		public void ChangeHandsModel(int childIndex, bool save = false)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0xD47A08", Offset = "0xD47A08", VA = "0xD47A08")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x20003E2")]
	public class HeadCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScreenFader fader;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeDistance;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float FadeOutDistance;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinFade;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxFade;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeSpeed;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Only fade the screen if the HMD is registering as Active")]
		public bool CheckOnlyIfHMDActive;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool IgnoreHeldGrabbables;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DistanceTransform;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cols;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float currentFade;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastFade;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collisions;

		[Token(Token = "0x6001437")]
		[Address(RVA = "0xD47A20", Offset = "0xD47A20", VA = "0xD47A20")]
		private void Start()
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xD47AE0", Offset = "0xD47AE0", VA = "0xD47AE0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xD47D94", Offset = "0xD47D94", VA = "0xD47D94")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xD4804C", Offset = "0xD4804C", VA = "0xD4804C")]
		private void OnCollisionExit(Collision col)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xD48168", Offset = "0xD48168", VA = "0xD48168")]
		public HeadCollisionFade()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class HingeHelper : GrabbableEvents
	{
		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[UnityEngine.Tooltip("If True the SnapGraphics tranfsorm will have its local Y rotation snapped to the nearest degrees specified in SnapDegrees")]
		public bool SnapToDegrees;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Snap the Y rotation to the nearest")]
		public float SnapDegrees;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("The Transform of the object to be rotated if SnapToDegrees is true")]
		public Transform SnapGraphics;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Play this sound on snap")]
		public AudioClip SnapSound;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Randomize pitch of SnapSound by this amount")]
		public float RandomizePitch;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("Add haptics amount (0-1) to controller if SnapToDegrees is True. Set this to 0 for no Haptics.")]
		public float SnapHaptics;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FloatEvent onHingeChange;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onHingeSnapChange;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _lastDegrees;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _lastSnapDegrees;

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xD4818C", Offset = "0xD4818C", VA = "0xD4818C")]
		private void Start()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xD481E4", Offset = "0xD481E4", VA = "0xD481E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xD48480", Offset = "0xD48480", VA = "0xD48480")]
		public void OnSnapChange(float yAngle)
		{
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0xD48824", Offset = "0xD48824", VA = "0xD48824", Slot = "5")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0xD48414", Offset = "0xD48414", VA = "0xD48414")]
		public void OnHingeChange(float hingeAmount)
		{
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0xD483F0", Offset = "0xD483F0", VA = "0xD483F0")]
		private float getSmoothedValue(float val)
		{
			return default(float);
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0xD488D0", Offset = "0xD488D0", VA = "0xD488D0")]
		public HingeHelper()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public enum ControllerHand
	{
		[Token(Token = "0x400178A")]
		Left,
		[Token(Token = "0x400178B")]
		Right,
		[Token(Token = "0x400178C")]
		None
	}
	[Token(Token = "0x20003E5")]
	public enum ControllerBinding
	{
		[Token(Token = "0x400178E")]
		None,
		[Token(Token = "0x400178F")]
		AButton,
		[Token(Token = "0x4001790")]
		AButtonDown,
		[Token(Token = "0x4001791")]
		BButton,
		[Token(Token = "0x4001792")]
		BButtonDown,
		[Token(Token = "0x4001793")]
		XButton,
		[Token(Token = "0x4001794")]
		XButtonDown,
		[Token(Token = "0x4001795")]
		YButton,
		[Token(Token = "0x4001796")]
		YButtonDown,
		[Token(Token = "0x4001797")]
		LeftTrigger,
		[Token(Token = "0x4001798")]
		LeftTriggerDown,
		[Token(Token = "0x4001799")]
		LeftGrip,
		[Token(Token = "0x400179A")]
		LeftGripDown,
		[Token(Token = "0x400179B")]
		LeftThumbstick,
		[Token(Token = "0x400179C")]
		LeftThumbstickDown,
		[Token(Token = "0x400179D")]
		RightTrigger,
		[Token(Token = "0x400179E")]
		RightTriggerDown,
		[Token(Token = "0x400179F")]
		RightGrip,
		[Token(Token = "0x40017A0")]
		RightGripDown,
		[Token(Token = "0x40017A1")]
		RightThumbstick,
		[Token(Token = "0x40017A2")]
		RightThumbstickDown,
		[Token(Token = "0x40017A3")]
		StartButton,
		[Token(Token = "0x40017A4")]
		StartButtonDown,
		[Token(Token = "0x40017A5")]
		BackButton,
		[Token(Token = "0x40017A6")]
		BackButtonDown
	}
	[Token(Token = "0x20003E6")]
	public enum GrabbedControllerBinding
	{
		[Token(Token = "0x40017A8")]
		None,
		[Token(Token = "0x40017A9")]
		Button1,
		[Token(Token = "0x40017AA")]
		Button1Down,
		[Token(Token = "0x40017AB")]
		Button2,
		[Token(Token = "0x40017AC")]
		Button2Down,
		[Token(Token = "0x40017AD")]
		Trigger,
		[Token(Token = "0x40017AE")]
		TriggerDown,
		[Token(Token = "0x40017AF")]
		Grip,
		[Token(Token = "0x40017B0")]
		GripDown
	}
	[Token(Token = "0x20003E7")]
	public enum InputAxis
	{
		[Token(Token = "0x40017B2")]
		None,
		[Token(Token = "0x40017B3")]
		LeftThumbStickAxis,
		[Token(Token = "0x40017B4")]
		LeftTouchPadAxis,
		[Token(Token = "0x40017B5")]
		RightThumbStickAxis,
		[Token(Token = "0x40017B6")]
		RightTouchPadAxis
	}
	[Token(Token = "0x20003E8")]
	public enum ControllerType
	{
		[Token(Token = "0x40017B8")]
		None,
		[Token(Token = "0x40017B9")]
		Unknown,
		[Token(Token = "0x40017BA")]
		OculusTouch,
		[Token(Token = "0x40017BB")]
		Wand,
		[Token(Token = "0x40017BC")]
		Knuckles
	}
	[Token(Token = "0x20003E9")]
	public enum HandControl
	{
		[Token(Token = "0x40017BE")]
		LeftGrip,
		[Token(Token = "0x40017BF")]
		RightGrip,
		[Token(Token = "0x40017C0")]
		LeftTrigger,
		[Token(Token = "0x40017C1")]
		RightTrigger,
		[Token(Token = "0x40017C2")]
		None
	}
	[Token(Token = "0x20003EA")]
	public enum GrabButton
	{
		[Token(Token = "0x40017C4")]
		Grip,
		[Token(Token = "0x40017C5")]
		Trigger,
		[Token(Token = "0x40017C6")]
		Inherit
	}
	[Token(Token = "0x20003EB")]
	public enum HoldType
	{
		[Token(Token = "0x40017C8")]
		HoldDown,
		[Token(Token = "0x40017C9")]
		Toggle,
		[Token(Token = "0x40017CA")]
		Inherit
	}
	[Token(Token = "0x20003EC")]
	public enum XRInputSource
	{
		[Token(Token = "0x40017CC")]
		XRInput,
		[Token(Token = "0x40017CD")]
		OVRInput,
		[Token(Token = "0x40017CE")]
		SteamVR,
		[Token(Token = "0x40017CF")]
		Pico,
		[Token(Token = "0x40017D0")]
		UnityInput
	}
	[Token(Token = "0x20003ED")]
	public enum SDKProvider
	{
		[Token(Token = "0x40017D2")]
		Unknown,
		[Token(Token = "0x40017D3")]
		OculusSDK,
		[Token(Token = "0x40017D4")]
		OpenVR
	}
	[Token(Token = "0x20003EE")]
	public class InputBridge : MonoBehaviour
	{
		[Token(Token = "0x20003EF")]
		public delegate void InputsUpdatedAction();

		[Token(Token = "0x20003F0")]
		public delegate void ControllerFoundAction();

		[Token(Token = "0x20003F1")]
		[CompilerGenerated]
		private sealed class <changeOriginModeRoutine>d__177 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400183A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400183B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400183C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputBridge <>4__this;

			[Token(Token = "0x400183D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrackingOriginModeFlags trackingOrigin;

			[Token(Token = "0x17000208")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001495")]
				[Address(RVA = "0xD4CE3C", Offset = "0xD4CE3C", VA = "0xD4CE3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000209")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001497")]
				[Address(RVA = "0xD4CE84", Offset = "0xD4CE84", VA = "0xD4CE84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001492")]
			[Address(RVA = "0xD4C85C", Offset = "0xD4C85C", VA = "0xD4C85C")]
			[DebuggerHidden]
			public <changeOriginModeRoutine>d__177(int <>1__state)
			{
			}

			[Token(Token = "0x6001493")]
			[Address(RVA = "0xD4CC0C", Offset = "0xD4CC0C", VA = "0xD4CC0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001494")]
			[Address(RVA = "0xD4CC10", Offset = "0xD4CC10", VA = "0xD4CC10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001496")]
			[Address(RVA = "0xD4CE44", Offset = "0xD4CE44", VA = "0xD4CE44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003F2")]
		[CompilerGenerated]
		private sealed class <Vibrate>d__179 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400183E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400183F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001840")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerHand hand;

			[Token(Token = "0x4001841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float frequency;

			[Token(Token = "0x4001842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float amplitude;

			[Token(Token = "0x4001843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float duration;

			[Token(Token = "0x1700020A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600149B")]
				[Address(RVA = "0xD4CFF8", Offset = "0xD4CFF8", VA = "0xD4CFF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600149D")]
				[Address(RVA = "0xD4D040", Offset = "0xD4D040", VA = "0xD4D040", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001498")]
			[Address(RVA = "0xD4C910", Offset = "0xD4C910", VA = "0xD4C910")]
			[DebuggerHidden]
			public <Vibrate>d__179(int <>1__state)
			{
			}

			[Token(Token = "0x6001499")]
			[Address(RVA = "0xD4CE8C", Offset = "0xD4CE8C", VA = "0xD4CE8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600149A")]
			[Address(RVA = "0xD4CE90", Offset = "0xD4CE90", VA = "0xD4CE90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600149C")]
			[Address(RVA = "0xD4D000", Offset = "0xD4D000", VA = "0xD4D000", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputBridge _instance;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Input Settings")]
		public XRInputSource InputSource;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Specify an InputActionSet for when using the Unity Input system. These actions will be enabled on load.")]
		[SerializeField]
		public InputActionAsset actionSet;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Set the TrackingOriginModeFlags on device connect. Should typically be set to 'Floor'")]
		[SerializeField]
		[Header("Tracking Origin")]
		public TrackingOriginModeFlags TrackingOrigin;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Thumbstick X must be greater than this amount to be considered valid")]
		[Header("Thumbstick Deadzone")]
		public float ThumbstickDeadzoneX;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Thumbstick Y must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneY;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Grip")]
		public float LeftGrip;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool LeftGripDown;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float RightGrip;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool RightGripDown;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Trigger")]
		public float LeftTrigger;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LeftTriggerNear;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool LeftTriggerUp;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool LeftTriggerDown;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RightTrigger;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool RightTriggerUp;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RightTriggerDown;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool RightTriggerNear;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool LeftThumbNear;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool RightThumbNear;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Header("Thumbstick")]
		public bool LeftThumbstickDown;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool LeftThumbstickUp;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool RightThumbstickDown;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool RightThumbstickUp;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool LeftThumbstick;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool RightThumbstick;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[Header("Buttons")]
		public bool AButton;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("Returns true if the A Button was pressed down this frame but not last")]
		public bool AButtonDown;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool AButtonUp;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool BButton;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[UnityEngine.Tooltip("Returns true if the B Button was pressed down this frame but not last")]
		public bool BButtonDown;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BButtonUp;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool XButton;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[UnityEngine.Tooltip("Returns true if the X Button was pressed down this frame but not last")]
		public bool XButtonDown;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool XButtonUp;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool YButton;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool YButtonDown;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool YButtonUp;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public bool StartButton;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool StartButtonDown;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool BackButton;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool BackButtonDown;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Axis")]
		public UnityEngine.Vector2 LeftThumbstickAxis;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public UnityEngine.Vector2 RightThumbstickAxis;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public UnityEngine.Vector2 LeftTouchPadAxis;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public UnityEngine.Vector2 RightTouchPadAxis;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Header("Finger Tracking")]
		[UnityEngine.Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		public float LeftThumbCurl;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float LeftIndexCurl;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float LeftMiddleCurl;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float LeftRingCurl;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float LeftPinkyCurl;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UnityEngine.Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		public float RightThumbCurl;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float RightIndexCurl;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float RightMiddleCurl;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float RightRingCurl;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float RightPinkyCurl;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _downThreshold;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool SteamVRSupport;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("HMD / Hardware")]
		public ControllerType ConnectedControllerType;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UnityEngine.Tooltip("Is there an HMD present and in use.")]
		public bool HMDActive;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[UnityEngine.Tooltip("Returns true if the controller has both a Touchpad and a Joystick. Currently on the Valve Index has both.")]
		public bool SupportsBothTouchPadAndJoystick;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		[UnityEngine.Tooltip("Returns true if the controllers support the 'indexTouch' XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsIndexTouch;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		[UnityEngine.Tooltip("Returns true if the controllers support the 'ThumbTouch' (or near thumbstick) XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsThumbTouch;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputAction leftGrip;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputAction leftTrigger;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputAction leftTriggerNear;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private InputAction rightGrip;

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputAction rightTrigger;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private InputAction rightTriggerNear;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputAction leftThumbstick;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private InputAction leftThumbstickDown;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private InputAction leftThumbNear;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private InputAction leftTouchpad;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private InputAction leftTouchpadDown;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private InputAction rightThumbstick;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InputAction rightThumbstickDown;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private InputAction rightThumbNear;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InputAction rightTouchpad;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private InputAction rightTouchpadDown;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InputAction aButton;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private InputAction bButton;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private InputAction xButton;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private InputAction yButton;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private InputAction startButton;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private InputAction backButton;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[HideInInspector]
		public bool ShowInputDebugger;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private UnityEngine.XR.InputDevice primaryLeftController;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private UnityEngine.XR.InputDevice primaryRightController;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private InputFeatureUsage<UnityEngine.Vector2> thumbstickAxis;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private InputFeatureUsage<UnityEngine.Vector2> thumbstickAxisSecondary;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private InputFeatureUsage<bool> thumbstickAxisClick;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool setTrackingOrigin;

		[Token(Token = "0x17000200")]
		public static InputBridge Instance
		{
			[Token(Token = "0x6001443")]
			[Address(RVA = "0xD43730", Offset = "0xD43730", VA = "0xD43730")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000201")]
		public float DownThreshold
		{
			[Token(Token = "0x6001444")]
			[Address(RVA = "0xD488EC", Offset = "0xD488EC", VA = "0xD488EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000202")]
		public SDKProvider LoadedSDK
		{
			[Token(Token = "0x6001445")]
			[Address(RVA = "0xD488F4", Offset = "0xD488F4", VA = "0xD488F4")]
			[CompilerGenerated]
			get
			{
				return default(SDKProvider);
			}
			[Token(Token = "0x6001446")]
			[Address(RVA = "0xD488FC", Offset = "0xD488FC", VA = "0xD488FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public bool IsOculusDevice
		{
			[Token(Token = "0x6001447")]
			[Address(RVA = "0xD48904", Offset = "0xD48904", VA = "0xD48904")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001448")]
			[Address(RVA = "0xD4890C", Offset = "0xD4890C", VA = "0xD4890C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public bool IsOculusQuest
		{
			[Token(Token = "0x6001449")]
			[Address(RVA = "0xD48918", Offset = "0xD48918", VA = "0xD48918")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600144A")]
			[Address(RVA = "0xD48920", Offset = "0xD48920", VA = "0xD48920")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public bool IsHTCDevice
		{
			[Token(Token = "0x600144B")]
			[Address(RVA = "0xD4892C", Offset = "0xD4892C", VA = "0xD4892C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600144C")]
			[Address(RVA = "0xD48934", Offset = "0xD48934", VA = "0xD48934")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000206")]
		public bool IsPicoDevice
		{
			[Token(Token = "0x600144D")]
			[Address(RVA = "0xD48940", Offset = "0xD48940", VA = "0xD48940")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600144E")]
			[Address(RVA = "0xD48948", Offset = "0xD48948", VA = "0xD48948")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public bool IsValveIndexController
		{
			[Token(Token = "0x600144F")]
			[Address(RVA = "0xD48954", Offset = "0xD48954", VA = "0xD48954")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001450")]
			[Address(RVA = "0xD4895C", Offset = "0xD4895C", VA = "0xD4895C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000017")]
		public static event InputsUpdatedAction OnInputsUpdated
		{
			[Token(Token = "0x6001451")]
			[Address(RVA = "0xD48968", Offset = "0xD48968", VA = "0xD48968")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001452")]
			[Address(RVA = "0xD48A44", Offset = "0xD48A44", VA = "0xD48A44")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public static event ControllerFoundAction OnControllerFound
		{
			[Token(Token = "0x6001453")]
			[Address(RVA = "0xD48B20", Offset = "0xD48B20", VA = "0xD48B20")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001454")]
			[Address(RVA = "0xD48BFC", Offset = "0xD48BFC", VA = "0xD48BFC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0xD48CD8", Offset = "0xD48CD8", VA = "0xD48CD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0xD49010", Offset = "0xD49010", VA = "0xD49010")]
		private void Start()
		{
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0xD49024", Offset = "0xD49024", VA = "0xD49024")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0xD49124", Offset = "0xD49124", VA = "0xD49124")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0xD49214", Offset = "0xD49214", VA = "0xD49214")]
		private void Update()
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0xD49240", Offset = "0xD49240", VA = "0xD49240", Slot = "4")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xD4932C", Offset = "0xD4932C", VA = "0xD4932C", Slot = "5")]
		public virtual void UpdateSteamInput()
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xD49330", Offset = "0xD49330", VA = "0xD49330", Slot = "6")]
		public virtual void UpdateXRInput()
		{
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xD4A098", Offset = "0xD4A098", VA = "0xD4A098", Slot = "7")]
		public virtual void UpdateUnityInput()
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xD4A4E0", Offset = "0xD4A4E0", VA = "0xD4A4E0", Slot = "8")]
		public virtual void CreateUnityInputActions()
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xD4ABF0", Offset = "0xD4ABF0", VA = "0xD4ABF0", Slot = "9")]
		public virtual void EnableActions()
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xD4B004", Offset = "0xD4B004", VA = "0xD4B004", Slot = "10")]
		public virtual void DisableActions()
		{
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0xD4AB58", Offset = "0xD4AB58", VA = "0xD4AB58")]
		public InputAction CreateInputAction(string actionName, string binding, bool valueType)
		{
			return null;
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xD4B418", Offset = "0xD4B418", VA = "0xD4B418", Slot = "11")]
		public virtual void UpdateOVRInput()
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xD4B884", Offset = "0xD4B884", VA = "0xD4B884", Slot = "12")]
		public virtual void UpdatePicoInput()
		{
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xD4B888", Offset = "0xD4B888", VA = "0xD4B888", Slot = "13")]
		public virtual void UpdateDeviceActive()
		{
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xD49FB8", Offset = "0xD49FB8", VA = "0xD49FB8")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xD4BA0C", Offset = "0xD4BA0C", VA = "0xD4BA0C")]
		public bool GetControllerBindingValue(ControllerBinding val)
		{
			return default(bool);
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0xD4BB54", Offset = "0xD4BB54", VA = "0xD4BB54")]
		public bool GetGrabbedControllerBinding(GrabbedControllerBinding val, ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xD4BC6C", Offset = "0xD4BC6C", VA = "0xD4BC6C")]
		public UnityEngine.Vector2 GetInputAxisValue(InputAxis val)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xD49F50", Offset = "0xD49F50", VA = "0xD49F50")]
		private UnityEngine.Vector2 ApplyDeadZones(UnityEngine.Vector2 pos, float deadZoneX, float deadZoneY)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xD4BD08", Offset = "0xD4BD08", VA = "0xD4BD08")]
		private void onDeviceChanged(UnityEngine.XR.InputDevice inputDevice)
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xD48E64", Offset = "0xD48E64", VA = "0xD48E64")]
		private void setDeviceProperties()
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xD4BD30", Offset = "0xD4BD30", VA = "0xD4BD30", Slot = "14")]
		public virtual bool GetSupportsIndexTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xD4BD38", Offset = "0xD4BD38", VA = "0xD4BD38", Slot = "15")]
		public virtual SDKProvider GetLoadedSDK()
		{
			return default(SDKProvider);
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xD4BDE0", Offset = "0xD4BDE0", VA = "0xD4BDE0", Slot = "16")]
		public virtual bool GetSupportsThumbTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xD4BDE8", Offset = "0xD4BDE8", VA = "0xD4BDE8", Slot = "17")]
		public virtual bool GetIsOculusDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xD4BEA4", Offset = "0xD4BEA4", VA = "0xD4BEA4", Slot = "18")]
		public virtual bool GetIsOculusQuest()
		{
			return default(bool);
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xD4BFAC", Offset = "0xD4BFAC", VA = "0xD4BFAC", Slot = "19")]
		public virtual bool GetIsHTCDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xD4C03C", Offset = "0xD4C03C", VA = "0xD4C03C", Slot = "20")]
		public virtual bool GetIsPicoDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xD4B93C", Offset = "0xD4B93C", VA = "0xD4B93C")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xD4C0B0", Offset = "0xD4C0B0", VA = "0xD4C0B0")]
		public string GetHMDName()
		{
			return null;
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xD4C0D8", Offset = "0xD4C0D8", VA = "0xD4C0D8")]
		public UnityEngine.Vector3 GetHMDLocalPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xD4C164", Offset = "0xD4C164", VA = "0xD4C164")]
		public UnityEngine.Quaternion GetHMDLocalRotation()
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xD49D48", Offset = "0xD49D48", VA = "0xD49D48")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xD49E18", Offset = "0xD49E18", VA = "0xD49E18")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xD4C1EC", Offset = "0xD4C1EC", VA = "0xD4C1EC")]
		public UnityEngine.Vector3 GetControllerLocalPosition(ControllerHand handSide)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xD4C2D4", Offset = "0xD4C2D4", VA = "0xD4C2D4")]
		public UnityEngine.Quaternion GetControllerLocalRotation(ControllerHand handSide)
		{
			return default(UnityEngine.Quaternion);
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xD4C3B0", Offset = "0xD4C3B0", VA = "0xD4C3B0", Slot = "21")]
		public virtual ControllerType GetControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xD4C3E4", Offset = "0xD4C3E4", VA = "0xD4C3E4")]
		public UnityEngine.Vector3 GetControllerVelocity(ControllerHand hand)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xD4C4C0", Offset = "0xD4C4C0", VA = "0xD4C4C0")]
		public UnityEngine.Vector3 GetControllerAngularVelocity(ControllerHand hand)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xD4C560", Offset = "0xD4C560", VA = "0xD4C560", Slot = "22")]
		public virtual string GetControllerName()
		{
			return null;
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xD4C6B8", Offset = "0xD4C6B8", VA = "0xD4C6B8", Slot = "23")]
		public virtual bool GetIsValveIndexController()
		{
			return default(bool);
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xD49F70", Offset = "0xD49F70", VA = "0xD49F70")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage, bool clamp = true)
		{
			return default(float);
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xD49EE8", Offset = "0xD49EE8", VA = "0xD49EE8")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xD49F1C", Offset = "0xD49F1C", VA = "0xD49F1C")]
		private UnityEngine.Vector2 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<UnityEngine.Vector2> usage)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xD4C484", Offset = "0xD4C484", VA = "0xD4C484")]
		private UnityEngine.Vector3 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<UnityEngine.Vector3> usage)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xD4C7B8", Offset = "0xD4C7B8", VA = "0xD4C7B8", Slot = "24")]
		public virtual void SetTrackingOriginMode(TrackingOriginModeFlags trackingOrigin)
		{
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xD4C7D8", Offset = "0xD4C7D8", VA = "0xD4C7D8")]
		[IteratorStateMachine(typeof(<changeOriginModeRoutine>d__177))]
		private IEnumerator changeOriginModeRoutine(TrackingOriginModeFlags trackingOrigin)
		{
			return null;
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xD48638", Offset = "0xD48638", VA = "0xD48638")]
		public void VibrateController(float frequency, float amplitude, float duration, ControllerHand hand)
		{
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0xD4C884", Offset = "0xD4C884", VA = "0xD4C884")]
		[IteratorStateMachine(typeof(<Vibrate>d__179))]
		private IEnumerator Vibrate(float frequency, float amplitude, float duration, ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xD4C938", Offset = "0xD4C938", VA = "0xD4C938")]
		public InputBridge()
		{
		}
	}
	[Token(Token = "0x20003F3")]
	public class JoystickControl : MonoBehaviour
	{
		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinDegrees;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxDegrees;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LeverPercentageX;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LeverPercentageZ;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float SmoothLookSpeed;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool KinematicWhileInactive;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabbable grab;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody rb;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Vector3 currentRotation;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float angleX;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float angleY;

		[Token(Token = "0x600149E")]
		[Address(RVA = "0xD4D048", Offset = "0xD4D048", VA = "0xD4D048")]
		private void Start()
		{
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xD4D0D8", Offset = "0xD4D0D8", VA = "0xD4D0D8")]
		private void Update()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xD4D374", Offset = "0xD4D374", VA = "0xD4D374")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xD4D378", Offset = "0xD4D378", VA = "0xD4D378")]
		private void doJoystickLook()
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xD4D740", Offset = "0xD4D740", VA = "0xD4D740", Slot = "4")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xD4D7B4", Offset = "0xD4D7B4", VA = "0xD4D7B4")]
		public JoystickControl()
		{
		}
	}
	[Token(Token = "0x20003F4")]
	public class Lever : MonoBehaviour
	{
		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotation Limits")]
		[UnityEngine.Tooltip("Minimum X value in Local Euler Angles")]
		public float MinimumXRotation;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Maximum X value in Local Euler Angles")]
		public float MaximumXRotation;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Initial Rotation")]
		public float InitialXRotation;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Audio")]
		public AudioClip SwitchOnSound;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SwitchOffSound;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Tolerance")]
		[UnityEngine.Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
		public float SwitchTolerance;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Smooth Look")]
		[UnityEngine.Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Moving Platform Support")]
		[UnityEngine.Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[UnityEngine.Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
		[Header("Return to Center (Must be Kinematic)")]
		public bool ReturnToCenter;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("How fast to return to center if not being held")]
		public float ReturnLookSpeed;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Snap Settings")]
		[UnityEngine.Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
		public bool SnapToGrabber;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Header("Misc")]
		[UnityEngine.Tooltip("If true, the Lever will be dropped once switched on or off")]
		public bool DropLeverOnActivation;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Shown for Debug")]
		[UnityEngine.Tooltip("Current position of the lever as expressed as a percentage 1-100")]
		public float LeverPercentage;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[UnityEngine.Tooltip("Called when lever was up, but is now in the down position")]
		public UnityEvent onLeverDown;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Called when lever was down, but is now in the up position")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Called if the lever changes position at all")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable grab;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rb;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioSource;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool switchedOn;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HingeJoint hingedJoint;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private UnityEngine.Vector3 _lastLocalAngle;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private UnityEngine.Quaternion initialOffset;

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xD4D7D8", Offset = "0xD4D7D8", VA = "0xD4D7D8")]
		private void Start()
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xD4D9F0", Offset = "0xD4D9F0", VA = "0xD4D9F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xD4DA20", Offset = "0xD4DA20", VA = "0xD4DA20")]
		private void Update()
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xD4DBE0", Offset = "0xD4DBE0", VA = "0xD4DBE0", Slot = "4")]
		public virtual float GetAnglePercentage(float currentAngle)
		{
			return default(float);
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xD4DD80", Offset = "0xD4DD80", VA = "0xD4DD80")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xD4DD84", Offset = "0xD4DD84", VA = "0xD4DD84")]
		private void doLeverLook()
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xD4E2F8", Offset = "0xD4E2F8", VA = "0xD4E2F8", Slot = "5")]
		public virtual void SetLeverAngle(float angle)
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xD4E344", Offset = "0xD4E344", VA = "0xD4E344", Slot = "6")]
		public virtual void OnLeverChange(float percentage)
		{
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xD4E3B0", Offset = "0xD4E3B0", VA = "0xD4E3B0", Slot = "7")]
		public virtual void OnLeverDown()
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xD4E4AC", Offset = "0xD4E4AC", VA = "0xD4E4AC", Slot = "8")]
		public virtual void OnLeverUp()
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xD4E5AC", Offset = "0xD4E5AC", VA = "0xD4E5AC")]
		public Lever()
		{
		}
	}
	[Token(Token = "0x20003F5")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Locomotion Type")]
		[UnityEngine.Tooltip("Default locomotion to use if nothing stored in playerprefs. 0 = Teleport. 1 = SmoothLocomotion")]
		public LocomotionType DefaultLocomotion;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LocomotionType selectedLocomotion;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Save / Loading")]
		[UnityEngine.Tooltip("If true, locomotion type will be saved and loaded from player prefs")]
		public bool LoadLocomotionFromPrefs;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		[UnityEngine.Tooltip("The key(s) to use to toggle locomotion type")]
		public List<ControllerBinding> locomotionToggleInput;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("(Oculus Only) - Click Left Thumbstick Down to toggle between Teleport / Smooth Locomotion")]
		public bool LeftThumbstickToggleLocomotionOculus;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BNGPlayerController player;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerTeleport teleport;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x1700020C")]
		public LocomotionType SelectedLocomotion
		{
			[Token(Token = "0x60014AF")]
			[Address(RVA = "0xD4E638", Offset = "0xD4E638", VA = "0xD4E638")]
			get
			{
				return default(LocomotionType);
			}
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xD4E640", Offset = "0xD4E640", VA = "0xD4E640")]
		private void Start()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xD4E7C8", Offset = "0xD4E7C8", VA = "0xD4E7C8")]
		private void Update()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xD4E748", Offset = "0xD4E748", VA = "0xD4E748")]
		public void ChangeLocomotion(LocomotionType locomotionType, bool save)
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xD4E964", Offset = "0xD4E964", VA = "0xD4E964")]
		public void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xD4EA78", Offset = "0xD4EA78", VA = "0xD4EA78")]
		public void ToggleLocomotionType()
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xD4E884", Offset = "0xD4E884", VA = "0xD4E884")]
		public bool CheckLocomotionTypeInput()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xD4EAC4", Offset = "0xD4EAC4", VA = "0xD4EAC4")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x20003F6")]
	public class PlayerClimbing : MonoBehaviour
	{
		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Climbing Transforms")]
		public Transform LeftControllerTransform;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightControllerTransform;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Capsule Settings")]
		[UnityEngine.Tooltip("Set the player's capsule collider height to this amount while climbing. This can allow you to shorten the capsule collider a bit, making it easier to navigate over ledges.")]
		public float ClimbingCapsuleHeight;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("Set the player's capsule collider capsule center to this amount while climbing.")]
		public float ClimbingCapsuleCenter;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Haptics")]
		public bool ApplyHapticsOnGrab;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Frequency of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateFrequency;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Amplitute of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateAmplitude;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Duration of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateDuration;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Grabber> climbers;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool wasGrippingClimbable;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Shown for Debug : ")]
		public bool GrippingClimbable;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 moveDirection;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3 previousLeftControllerPosition;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private UnityEngine.Vector3 previousRightControllerPosition;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector3 controllerMoveAmount;

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xD4EBC8", Offset = "0xD4EBC8", VA = "0xD4EBC8")]
		public void Start()
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xD4ECDC", Offset = "0xD4ECDC", VA = "0xD4ECDC")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xD4EDB0", Offset = "0xD4EDB0", VA = "0xD4EDB0", Slot = "4")]
		public virtual void AddClimber(Climbable climbable, Grabber grab)
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xD4F128", Offset = "0xD4F128", VA = "0xD4F128", Slot = "5")]
		public virtual void RemoveClimber(Grabber grab)
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xD4F238", Offset = "0xD4F238", VA = "0xD4F238", Slot = "6")]
		public virtual bool GrippingAtLeastOneClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xD4F390", Offset = "0xD4F390", VA = "0xD4F390", Slot = "7")]
		protected virtual void checkClimbing()
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xD4F70C", Offset = "0xD4F70C", VA = "0xD4F70C")]
		private void onGrabbedClimbable()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xD4F7C8", Offset = "0xD4F7C8", VA = "0xD4F7C8")]
		private void onReleasedClimbable()
		{
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xD4F900", Offset = "0xD4F900", VA = "0xD4F900")]
		public PlayerClimbing()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	public class PlayerGravity : MonoBehaviour
	{
		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("If true, will apply gravity to the CharacterController component, or RigidBody if no CC is present.")]
		public bool GravityEnabled;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Amount of Gravity to apply to the CharacterController or Rigidbody. Default is 'Physics.gravity'.")]
		public UnityEngine.Vector3 Gravity;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody playerRigidbody;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _movementY;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 _initialGravityModifier;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _validRigidBody;

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xD4F988", Offset = "0xD4F988", VA = "0xD4F988")]
		private void Start()
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xD4FA70", Offset = "0xD4FA70", VA = "0xD4FA70")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xD4FB60", Offset = "0xD4FB60", VA = "0xD4FB60")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xD4F888", Offset = "0xD4F888", VA = "0xD4F888")]
		public void ToggleGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xD4FBF8", Offset = "0xD4FBF8", VA = "0xD4FBF8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xD4FC60", Offset = "0xD4FC60", VA = "0xD4FC60")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xD4FCD0", Offset = "0xD4FCD0", VA = "0xD4FCD0")]
		public PlayerGravity()
		{
		}
	}
	[Token(Token = "0x20003F8")]
	public enum RotationMechanic
	{
		[Token(Token = "0x400188D")]
		Snap,
		[Token(Token = "0x400188E")]
		Smooth
	}
	[Token(Token = "0x20003F9")]
	public class PlayerRotation : MonoBehaviour
	{
		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Set to false to skip Update")]
		[Header("Input")]
		public bool AllowInput;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Used to determine whether to turn left / right. This can be an X Axis on the thumbstick, for example. -1 to snap left, 1 to snap right.")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Snap rotation will rotate a fixed amount of degrees on turn. Smooth will linearly rotate the player.")]
		[Header("Smooth / Snap Turning")]
		public RotationMechanic RotationType;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[UnityEngine.Tooltip("How many degrees to rotate if RotationType is set to 'Snap'")]
		public float SnapRotationAmount;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SnapInputAmount;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("How fast to rotate the player if RotationType is set to 'Smooth'")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Keyboard Input")]
		[UnityEngine.Tooltip("Allow Q,E to rotate player")]
		public bool AllowKeyboardInputs;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float recentSnapTurnTime;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationAmount;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float previousXInput;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BNGPlayerController player;

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xD4FD00", Offset = "0xD4FD00", VA = "0xD4FD00")]
		private void Start()
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xD4FD58", Offset = "0xD4FD58", VA = "0xD4FD58")]
		private void Update()
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xD4FDBC", Offset = "0xD4FDBC", VA = "0xD4FDBC", Slot = "4")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xD4FEB8", Offset = "0xD4FEB8", VA = "0xD4FEB8", Slot = "5")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xD500D4", Offset = "0xD500D4", VA = "0xD500D4", Slot = "6")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xD50104", Offset = "0xD50104", VA = "0xD50104", Slot = "7")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xD50200", Offset = "0xD50200", VA = "0xD50200")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public enum TeleportControls
	{
		[Token(Token = "0x400189C")]
		ThumbstickRotate,
		[Token(Token = "0x400189D")]
		ThumbstickDown,
		[Token(Token = "0x400189E")]
		BButton
	}
	[Token(Token = "0x20003FB")]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x20003FC")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x20003FD")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x20003FE")]
		[CompilerGenerated]
		private sealed class <doTeleport>d__62 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40018C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40018C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40018C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x40018C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UnityEngine.Vector3 playerDestination;

			[Token(Token = "0x40018C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x40018CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public UnityEngine.Quaternion playerRotation;

			[Token(Token = "0x1700020F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014F4")]
				[Address(RVA = "0xD527BC", Offset = "0xD527BC", VA = "0xD527BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000210")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014F6")]
				[Address(RVA = "0xD52804", Offset = "0xD52804", VA = "0xD52804", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014F1")]
			[Address(RVA = "0xD51E20", Offset = "0xD51E20", VA = "0xD51E20")]
			[DebuggerHidden]
			public <doTeleport>d__62(int <>1__state)
			{
			}

			[Token(Token = "0x60014F2")]
			[Address(RVA = "0xD52544", Offset = "0xD52544", VA = "0xD52544", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014F3")]
			[Address(RVA = "0xD52548", Offset = "0xD52548", VA = "0xD52548", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014F5")]
			[Address(RVA = "0xD527C4", Offset = "0xD527C4", VA = "0xD527C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The LineRenderer to use when showing a teleport preview")]
		[Header("Colors")]
		public LineRenderer TeleportLine;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If a Valid Teleport destination is found, color of 'TeleportLine' will be updated to this.")]
		public UnityEngine.Color ValidTeleport;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("If a Valid Teleport destination is not found, color of 'TeleportLine' will be updated to this.")]
		public UnityEngine.Color InvalidTeleport;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Hand Side")]
		[UnityEngine.Tooltip("Whether the Teleport should initiate from the left or right controller. This affects input and where the teleport line should begin from.")]
		public ControllerHand HandSide;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Where the Teleport Line should begin if using the left ControllerHand")]
		[Header("Transform Definitions")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Where the Teleport Line should begin if using the right ControllerHand")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("Transform indicating where Player should be placed on teleport.")]
		public Transform TeleportDestination;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("GameObject to move around when initiating a teleport.")]
		public UnityEngine.GameObject TeleportMarker;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Transform indicating direction Player will rotate to on teleport.")]
		public Transform DirectionIndicator;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Teleport Physics")]
		public float MaxRange;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("More segments means a smoother line, at the cost of performance.")]
		public int SegmentCount;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[UnityEngine.Tooltip("How much velocity to apply when calculating a parabola. Set to a very high number for a straight line.")]
		public float SimulationVelocity;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[UnityEngine.Tooltip("Scale of each segment used when calculating parabola")]
		public float SegmentScale;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Layers")]
		[UnityEngine.Tooltip("Raycast layers to use when determining collision")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[UnityEngine.Tooltip("Raycast layers to use when determining if the collided object is a valid teleport. If it is not valid then the line will be red and unable to teleport.")]
		public LayerMask ValidLayers;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Controls")]
		[UnityEngine.Tooltip("Method used to initiate a teleport. If these don't fit your needs you can override the KeyDownForTeleport() and KeyUpFromTeleport() methods.")]
		public TeleportControls ControlType;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[UnityEngine.Tooltip("If true the user can rotate the teleport marker before initiating a teleport.")]
		public bool AllowTeleportRotation;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		private bool _reachThumbThreshold;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Max Angle / Slope the teleport marker can be to be considered a valid teleport.")]
		[Header("Slope")]
		public float MaxSlope;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("Use ScreenFader on teleportation if true.")]
		[Header("Screen Fade")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UnityEngine.Tooltip("If FadeScreenOnTeleport = true, fade the screen at this speed.")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[UnityEngine.Tooltip("Seconds to wait before initiating teleport. Useful if you want to fade the screen  before teleporting.")]
		public float TeleportDelay;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CharacterController controller;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private InputBridge input;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform cameraRig;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ScreenFader fader;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool aimingTeleport;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool validTeleport;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		private bool teleportationEnabled;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int _invalidFrames;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _initialLineWidth;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private bool setVariables;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Collider _hitObject;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private UnityEngine.Vector3 _hitVector;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _hitAngle;

		[Token(Token = "0x1700020D")]
		private Transform teleportTransform
		{
			[Token(Token = "0x60014CE")]
			[Address(RVA = "0xD50314", Offset = "0xD50314", VA = "0xD50314")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020E")]
		private UnityEngine.Vector2 handedThumbstickAxis
		{
			[Token(Token = "0x60014CF")]
			[Address(RVA = "0xD50330", Offset = "0xD50330", VA = "0xD50330")]
			get
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x14000019")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x60014D0")]
			[Address(RVA = "0xD50370", Offset = "0xD50370", VA = "0xD50370")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60014D1")]
			[Address(RVA = "0xD50428", Offset = "0xD50428", VA = "0xD50428")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x60014D2")]
			[Address(RVA = "0xD504E0", Offset = "0xD504E0", VA = "0xD504E0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60014D3")]
			[Address(RVA = "0xD5059C", Offset = "0xD5059C", VA = "0xD5059C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xD50658", Offset = "0xD50658", VA = "0xD50658")]
		private void Start()
		{
		}

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xD5065C", Offset = "0xD5065C", VA = "0xD5065C")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xD5096C", Offset = "0xD5096C", VA = "0xD5096C")]
		private void Update()
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xD50D20", Offset = "0xD50D20", VA = "0xD50D20")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xD5166C", Offset = "0xD5166C", VA = "0xD5166C")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xD51678", Offset = "0xD51678", VA = "0xD51678")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xD50D30", Offset = "0xD50D30", VA = "0xD50D30")]
		private void calculateParabola()
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xD51684", Offset = "0xD51684", VA = "0xD51684")]
		private bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xD50CCC", Offset = "0xD50CCC", VA = "0xD50CCC")]
		private void hideTeleport()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xD50AE0", Offset = "0xD50AE0", VA = "0xD50AE0")]
		private void updateTeleport()
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xD518C8", Offset = "0xD518C8", VA = "0xD518C8")]
		private void rotateMarker()
		{
		}

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xD50B30", Offset = "0xD50B30", VA = "0xD50B30")]
		public void tryTeleport()
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xD51C98", Offset = "0xD51C98", VA = "0xD51C98", Slot = "4")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xD51D60", Offset = "0xD51D60", VA = "0xD51D60", Slot = "5")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xD51BC4", Offset = "0xD51BC4", VA = "0xD51BC4")]
		[IteratorStateMachine(typeof(<doTeleport>d__62))]
		private IEnumerator doTeleport(UnityEngine.Vector3 playerDestination, UnityEngine.Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xD51E48", Offset = "0xD51E48", VA = "0xD51E48")]
		public void TeleportPlayer(UnityEngine.Vector3 destination, UnityEngine.Quaternion rotation)
		{
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xD51E6C", Offset = "0xD51E6C", VA = "0xD51E6C")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xD51F08", Offset = "0xD51F08", VA = "0xD51F08", Slot = "6")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xD520D4", Offset = "0xD520D4", VA = "0xD520D4", Slot = "7")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xD521C4", Offset = "0xD521C4", VA = "0xD521C4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xD522D0", Offset = "0xD522D0", VA = "0xD522D0")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	public class RemoteGrabber : MonoBehaviour
	{
		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabbablesInTrigger ParentGrabber;

		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xD5280C", Offset = "0xD5280C", VA = "0xD5280C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xD529D4", Offset = "0xD529D4", VA = "0xD529D4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xD52B54", Offset = "0xD52B54", VA = "0xD52B54")]
		public RemoteGrabber()
		{
		}
	}
	[Token(Token = "0x2000400")]
	public class Slider : MonoBehaviour
	{
		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x17000211")]
		public float SlidePercentage
		{
			[Token(Token = "0x60014FA")]
			[Address(RVA = "0xD52B5C", Offset = "0xD52B5C", VA = "0xD52B5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xD52B64", Offset = "0xD52B64", VA = "0xD52B64")]
		private void Start()
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xD52C6C", Offset = "0xD52C6C", VA = "0xD52C6C")]
		private void Update()
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xD52CE8", Offset = "0xD52CE8", VA = "0xD52CE8", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xD52D54", Offset = "0xD52D54", VA = "0xD52D54")]
		public Slider()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public class SliderPlatform : MonoBehaviour
	{
		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text LabelToUpdate;

		[Token(Token = "0x17000212")]
		public float SlidePercentage
		{
			[Token(Token = "0x60014FF")]
			[Address(RVA = "0xD52D68", Offset = "0xD52D68", VA = "0xD52D68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xD52D70", Offset = "0xD52D70", VA = "0xD52D70")]
		private void Start()
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xD52E78", Offset = "0xD52E78", VA = "0xD52E78")]
		private void Update()
		{
		}

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xD52EF0", Offset = "0xD52EF0", VA = "0xD52EF0")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xD52FF4", Offset = "0xD52FF4", VA = "0xD52FF4", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xD53060", Offset = "0xD53060", VA = "0xD53060")]
		public SliderPlatform()
		{
		}
	}
	[Token(Token = "0x2000402")]
	public enum MovementVector
	{
		[Token(Token = "0x40018DA")]
		HMD,
		[Token(Token = "0x40018DB")]
		Controller
	}
	[Token(Token = "0x2000403")]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Movement : ")]
		public float MovementSpeed;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Used to determine which direction to move. Example : Left Thumbstick Axis or Touchpad. ")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Sprint : ")]
		public float SprintSpeed;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The key(s) to use to initiate sprint. You can also override the SprintKeyDown() function to determine your sprint criteria.")]
		public List<ControllerBinding> SprintInput;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Strafe : ")]
		public float StrafeSpeed;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Amount of 'force' to apply to the player during Jump")]
		[Header("Jump : ")]
		public float JumpForce;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("The key(s) to use to initiate a jump. You can also override the CheckJump() function to determine your jump criteria.")]
		public List<ControllerBinding> JumpInput;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Can the player move when not grounded? Set to true if you want to be able to move the joysticks and have the player respond to input even when not grounded.")]
		[Header("Air Control : ")]
		public bool AirControl;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("How fast the player can move in the air if AirControl = true. Example : 0.5 = Player will move at half the speed of MovementSpeed")]
		public float AirControlSpeed;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Keyboard Input : ")]
		public bool AllowKeyboardInputs;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BNGPlayerController playerController;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CharacterController characterController;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float movementX;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float movementY;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float movementZ;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool movementDisabled;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float _verticalSpeed;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float sphereCastRadius;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float sphereCastDistance;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public LayerMask castingMask;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float groundSlopeAngle;

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xD53074", Offset = "0xD53074", VA = "0xD53074", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xD530AC", Offset = "0xD530AC", VA = "0xD530AC", Slot = "5")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xD531B8", Offset = "0xD531B8", VA = "0xD531B8", Slot = "6")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xD5334C", Offset = "0xD5334C", VA = "0xD5334C", Slot = "7")]
		public virtual UnityEngine.Vector2 GetAxisInput()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xD535C0", Offset = "0xD535C0", VA = "0xD535C0", Slot = "8")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xD53A10", Offset = "0xD53A10", VA = "0xD53A10", Slot = "9")]
		public virtual void GetKeyBoardInputs()
		{
		}

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xD53AE0", Offset = "0xD53AE0", VA = "0xD53AE0", Slot = "10")]
		public virtual bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xD53C28", Offset = "0xD53C28", VA = "0xD53C28", Slot = "11")]
		public virtual bool SprintKeyDown()
		{
			return default(bool);
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xD53D30", Offset = "0xD53D30", VA = "0xD53D30", Slot = "12")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xD53D38", Offset = "0xD53D38", VA = "0xD53D38", Slot = "13")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xD53D44", Offset = "0xD53D44", VA = "0xD53D44")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x2000404")]
	public class SnapZone : MonoBehaviour
	{
		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Starting / Held Item")]
		[UnityEngine.Tooltip("The currently held item. Set this in the editor to equip on start.")]
		public Grabbable HeldItem;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If false, Item will Move back to inventory space if player drops it.")]
		[Header("Options")]
		public bool CanDropItem;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[UnityEngine.Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanSwapItem;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("Multiply Item Scale times this when in snap zone.")]
		public float ScaleItem;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _scaleTo;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DisableColliders;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("If true the item inside the SnapZone will be duplicated, instead of removed, from the SnapZone.")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Only snap if Grabbable was dropped maximum of X seconds ago")]
		public float MaxDropTime;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Filtering")]
		[UnityEngine.Tooltip("If not empty, can only snap objects if transform name contains one of these strings")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> OnlyAllowTags;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Do not allow snapping if transform contains one of these names")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Audio")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Events")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable trackedItem;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private SnapZoneOffset offset;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEngine.GameObject[] snaps;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Grabbable heldHexItem;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEngine.GameObject returnMenu;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool isHexInventroySnapped;

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xD53FD4", Offset = "0xD53FD4", VA = "0xD53FD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xD54E24", Offset = "0xD54E24", VA = "0xD54E24")]
		private void OnTransformParentChanged()
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xD5507C", Offset = "0xD5507C", VA = "0xD5507C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xD553EC", Offset = "0xD553EC", VA = "0xD553EC")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xD54098", Offset = "0xD54098", VA = "0xD54098")]
		public void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xD55F74", Offset = "0xD55F74", VA = "0xD55F74")]
		public void ReturnToInventory()
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0xD55E68", Offset = "0xD55E68", VA = "0xD55E68")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xD5602C", Offset = "0xD5602C", VA = "0xD5602C")]
		public void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x6001518")]
		[Address(RVA = "0xD559D8", Offset = "0xD559D8", VA = "0xD559D8")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xD5634C", Offset = "0xD5634C", VA = "0xD5634C")]
		public SnapZone()
		{
		}
	}
	[Token(Token = "0x2000405")]
	public class SnapZoneOffset : MonoBehaviour
	{
		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 LocalPositionOffset;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public UnityEngine.Vector3 LocalRotationOffset;

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xD563F8", Offset = "0xD563F8", VA = "0xD563F8")]
		public SnapZoneOffset()
		{
		}
	}
	[Token(Token = "0x2000406")]
	public class SnapZoneScale : MonoBehaviour
	{
		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Local Scale (x, y and z) of Grabbable when inside the SnapZone")]
		public float Scale;

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xD56400", Offset = "0xD56400", VA = "0xD56400")]
		public SnapZoneScale()
		{
		}
	}
	[Token(Token = "0x2000407")]
	public class SnapZoneTool : MonoBehaviour
	{
		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Starting / Held Item")]
		[UnityEngine.Tooltip("The currently held item. Set this in the editor to equip on start.")]
		public Grabbable HeldItem;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Options")]
		[UnityEngine.Tooltip("If false, Item will Move back to inventory space if player drops it.")]
		public bool CanDropItem;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[UnityEngine.Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanSwapItem;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("Multiply Item Scale times this when in snap zone.")]
		public float ScaleItem;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _scaleTo;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DisableColliders;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("If true the item inside the SnapZone will be duplicated, instead of removed, from the SnapZone.")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Only snap if Grabbable was dropped maximum of X seconds ago")]
		public float MaxDropTime;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("If not empty, can only snap objects if transform name contains one of these strings")]
		[Header("Filtering")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> OnlyAllowTags;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Do not allow snapping if transform contains one of these names")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Audio")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Events")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable trackedItem;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private SnapZoneOffset offset;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEngine.GameObject[] snaps;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Grabbable heldHexItem;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool isRockIn;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UnityEngine.GameObject returnMenu;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool isHexInventroySnapped;

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xD56410", Offset = "0xD56410", VA = "0xD56410")]
		private void Start()
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xD572DC", Offset = "0xD572DC", VA = "0xD572DC")]
		private void OnTransformParentChanged()
		{
		}

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xD57534", Offset = "0xD57534", VA = "0xD57534")]
		private void Update()
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xD578A4", Offset = "0xD578A4", VA = "0xD578A4")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xD564D4", Offset = "0xD564D4", VA = "0xD564D4")]
		public void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xD5842C", Offset = "0xD5842C", VA = "0xD5842C")]
		public void ReturnToInventory()
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xD58320", Offset = "0xD58320", VA = "0xD58320")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xD584A0", Offset = "0xD584A0", VA = "0xD584A0")]
		public void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xD57E90", Offset = "0xD57E90", VA = "0xD57E90")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xD587C0", Offset = "0xD587C0", VA = "0xD587C0")]
		public SnapZoneTool()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public class SteeringWheel : GrabbableEvents
	{
		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[UnityEngine.Tooltip("Maximum Z value in Local Euler Angles. Can be < -360. Ex : -450")]
		[Header("Rotation Limits")]
		public float MinAngle;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Maximum Z value in Local Euler Angles. Can be > 360. Ex : 450")]
		public float MaxAngle;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("The Transform to rotate on its Z axis.")]
		[Header("Rotation Object")]
		public Transform RotatorObject;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Rotation Speed")]
		[UnityEngine.Tooltip("How fast to move the wheel towards the target angle. 0 = Instant.")]
		public float RotationSpeed;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Two-Handed Option")]
		[UnityEngine.Tooltip("IF true both hands will effect the rotation of the steering wheel while grabbed with both hands. Set to false if you only want one hand to control the rotation.")]
		public bool AllowTwoHanded;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Header("Return to Center")]
		public bool ReturnToCenter;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Debug Options")]
		public Text DebugText;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Events")]
		[UnityEngine.Tooltip("Called if the SteeringWheel changes angle. Returns the current angle in degrees, clamped between MinAngle / MaxAngle")]
		public FloatEvent onAngleChange;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Called every frame. Returns the current current rotation between -1, 1")]
		public FloatEvent onValueChange;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Editor Option")]
		[UnityEngine.Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected UnityEngine.Vector3 rotatePosition;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected UnityEngine.Vector3 previousPrimaryPosition;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected UnityEngine.Vector3 previousSecondaryPosition;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float angle;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected float prevAngle;

		[Token(Token = "0x17000213")]
		public float Angle
		{
			[Token(Token = "0x6001526")]
			[Address(RVA = "0xD5886C", Offset = "0xD5886C", VA = "0xD5886C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000214")]
		public float ScaleValue
		{
			[Token(Token = "0x6001527")]
			[Address(RVA = "0xD58874", Offset = "0xD58874", VA = "0xD58874")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000215")]
		public float ScaleValueInverted
		{
			[Token(Token = "0x6001528")]
			[Address(RVA = "0xD5888C", Offset = "0xD5888C", VA = "0xD5888C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000216")]
		public float AngleInverted
		{
			[Token(Token = "0x6001529")]
			[Address(RVA = "0xD588B4", Offset = "0xD588B4", VA = "0xD588B4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000217")]
		public Grabber PrimaryGrabber
		{
			[Token(Token = "0x600152A")]
			[Address(RVA = "0xD588C0", Offset = "0xD588C0", VA = "0xD588C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000218")]
		public Grabber SecondaryGrabber
		{
			[Token(Token = "0x600152B")]
			[Address(RVA = "0xD58968", Offset = "0xD58968", VA = "0xD58968")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xD58A0C", Offset = "0xD58A0C", VA = "0xD58A0C")]
		private void Update()
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xD58AB0", Offset = "0xD58AB0", VA = "0xD58AB0", Slot = "26")]
		public virtual void UpdateAngleCalculations()
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xD58EC4", Offset = "0xD58EC4", VA = "0xD58EC4", Slot = "27")]
		public virtual void ApplyAngleToSteeringWheel(float angle)
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xD58EEC", Offset = "0xD58EEC", VA = "0xD58EEC", Slot = "28")]
		public virtual void UpdatePreviewText()
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xD59044", Offset = "0xD59044", VA = "0xD59044", Slot = "29")]
		public virtual void CallEvents()
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xD590D0", Offset = "0xD590D0", VA = "0xD590D0", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xD591D8", Offset = "0xD591D8", VA = "0xD591D8", Slot = "30")]
		public virtual void ReturnToCenterAngle()
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xD588C4", Offset = "0xD588C4", VA = "0xD588C4")]
		public Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xD5896C", Offset = "0xD5896C", VA = "0xD5896C")]
		public Grabber GetSecondaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xD59278", Offset = "0xD59278", VA = "0xD59278", Slot = "31")]
		public virtual void UpdatePreviousAngle(float angle)
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xD59280", Offset = "0xD59280", VA = "0xD59280", Slot = "32")]
		public virtual float GetScaledValue(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xD592A0", Offset = "0xD592A0", VA = "0xD592A0")]
		public SteeringWheel()
		{
		}
	}
	[Token(Token = "0x2000409")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x200040A")]
		[CompilerGenerated]
		private sealed class <QueueDestroy>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x17000219")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001544")]
				[Address(RVA = "0xD5A3D8", Offset = "0xD5A3D8", VA = "0xD5A3D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001546")]
				[Address(RVA = "0xD5A420", Offset = "0xD5A420", VA = "0xD5A420", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001541")]
			[Address(RVA = "0xD59894", Offset = "0xD59894", VA = "0xD59894")]
			[DebuggerHidden]
			public <QueueDestroy>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001542")]
			[Address(RVA = "0xD5A25C", Offset = "0xD5A25C", VA = "0xD5A25C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001543")]
			[Address(RVA = "0xD5A260", Offset = "0xD5A260", VA = "0xD5A260", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001545")]
			[Address(RVA = "0xD5A3E0", Offset = "0xD5A3E0", VA = "0xD5A3E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200040B")]
		[CompilerGenerated]
		private sealed class <ReEnableCollider>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400194A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x400194B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <waitFrames>5__2;

			[Token(Token = "0x400194C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <x>5__3;

			[Token(Token = "0x1700021B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600154A")]
				[Address(RVA = "0xD5A508", Offset = "0xD5A508", VA = "0xD5A508", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600154C")]
				[Address(RVA = "0xD5A550", Offset = "0xD5A550", VA = "0xD5A550", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001547")]
			[Address(RVA = "0xD598BC", Offset = "0xD598BC", VA = "0xD598BC")]
			[DebuggerHidden]
			public <ReEnableCollider>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001548")]
			[Address(RVA = "0xD5A428", Offset = "0xD5A428", VA = "0xD5A428", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001549")]
			[Address(RVA = "0xD5A42C", Offset = "0xD5A42C", VA = "0xD5A42C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600154B")]
			[Address(RVA = "0xD5A510", Offset = "0xD5A510", VA = "0xD5A510", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grab;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Flying;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ZVel;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider ShaftCollider;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource impactSound;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float flightTime;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float destroyTime;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine queueDestroy;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Projectile ProjectileObject;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float arrowDamage;

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xD592C8", Offset = "0xD592C8", VA = "0xD592C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xD59478", Offset = "0xD59478", VA = "0xD59478")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xD596AC", Offset = "0xD596AC", VA = "0xD596AC")]
		public void ShootArrow(UnityEngine.Vector3 shotForce)
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xD59820", Offset = "0xD59820", VA = "0xD59820")]
		[IteratorStateMachine(typeof(<QueueDestroy>d__14))]
		private IEnumerator QueueDestroy()
		{
			return null;
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xD597AC", Offset = "0xD597AC", VA = "0xD597AC")]
		[IteratorStateMachine(typeof(<ReEnableCollider>d__15))]
		private IEnumerator ReEnableCollider()
		{
			return null;
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xD598E4", Offset = "0xD598E4", VA = "0xD598E4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xD59D20", Offset = "0xD59D20", VA = "0xD59D20")]
		private void tryStickArrow(Collision collision)
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xD5A13C", Offset = "0xD5A13C", VA = "0xD5A13C")]
		private void playSoundInterval(float fromSeconds, float toSeconds)
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0xD5A24C", Offset = "0xD5A24C", VA = "0xD5A24C")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x200040C")]
	public class ArrowGrabArea : MonoBehaviour
	{
		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bow theBow;

		[Token(Token = "0x600154D")]
		[Address(RVA = "0xD5A558", Offset = "0xD5A558", VA = "0xD5A558")]
		private void Start()
		{
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xD5A5CC", Offset = "0xD5A5CC", VA = "0xD5A5CC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0xD5A950", Offset = "0xD5A950", VA = "0xD5A950")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0xD5AA70", Offset = "0xD5AA70", VA = "0xD5AA70")]
		public ArrowGrabArea()
		{
		}
	}
	[Token(Token = "0x200040D")]
	public class Bow : MonoBehaviour
	{
		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BowForce;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Name of the prefab used to create an arrow. Must be in a /Resources/ directory.")]
		public string ArrowPrefabName;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CanGrabArrowFromKnock;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Arrow will rotate around this if bow is held in left hand or ArrowRestLeftHanded is null")]
		public Transform ArrowRest;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Arrow will rotate around this if bow is being held in right hand")]
		public Transform ArrowRestLeftHanded;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform ArrowKnock;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool IgnoreXPosition;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool IgnoreYPosition;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool AllowNegativeZ;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private InputBridge input;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool CanGrabArrow;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Grabber ClosestGrabber;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Arrow GrabbedArrow;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable arrowGrabbable;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Grabber arrowGrabber;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.Vector3 LastValidPosition;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float MaxStringDistance;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float StringDistance;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _lastDrawPercent;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _lastDrawHaptic;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastDrawHapticTime;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool playedDrawSound;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private UnityEngine.Vector3 initialKnockPosition;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool holdingArrow;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Grabbable bowGrabbable;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Text PercentageUI;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<DrawDefinition> drawDefs;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AudioSource audioSource;

		[Token(Token = "0x1700021D")]
		public float DrawPercent
		{
			[Token(Token = "0x6001551")]
			[Address(RVA = "0xD5AA78", Offset = "0xD5AA78", VA = "0xD5AA78")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001552")]
			[Address(RVA = "0xD5AA80", Offset = "0xD5AA80", VA = "0xD5AA80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0xD5AA88", Offset = "0xD5AA88", VA = "0xD5AA88")]
		private void Start()
		{
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0xD5B070", Offset = "0xD5B070", VA = "0xD5B070")]
		private void Update()
		{
		}

		[Token(Token = "0x6001555")]
		[Address(RVA = "0xD5B9A4", Offset = "0xD5B9A4", VA = "0xD5B9A4")]
		private Transform getArrowRest()
		{
			return null;
		}

		[Token(Token = "0x6001556")]
		[Address(RVA = "0xD5B91C", Offset = "0xD5B91C", VA = "0xD5B91C")]
		private bool canGrabArrowFromKnock()
		{
			return default(bool);
		}

		[Token(Token = "0x6001557")]
		[Address(RVA = "0xD5BDF0", Offset = "0xD5BDF0", VA = "0xD5BDF0")]
		private float getGrabArrowInput()
		{
			return default(float);
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0xD5BF24", Offset = "0xD5BF24", VA = "0xD5BF24")]
		private float getGripInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xD5BEE4", Offset = "0xD5BEE4", VA = "0xD5BEE4")]
		private float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xD5BA44", Offset = "0xD5BA44", VA = "0xD5BA44")]
		private void setKnockPosition()
		{
		}

		[Token(Token = "0x600155B")]
		[Address(RVA = "0xD5BD9C", Offset = "0xD5BD9C", VA = "0xD5BD9C")]
		private void checkDrawSound()
		{
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xD5B438", Offset = "0xD5B438", VA = "0xD5B438")]
		private void updateDrawDistance()
		{
		}

		[Token(Token = "0x600155D")]
		[Address(RVA = "0xD5B5F4", Offset = "0xD5B5F4", VA = "0xD5B5F4")]
		private void checkBowHaptics()
		{
		}

		[Token(Token = "0x600155E")]
		[Address(RVA = "0xD5B86C", Offset = "0xD5B86C", VA = "0xD5B86C")]
		private void resetStringPosition()
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xD5BC74", Offset = "0xD5BC74", VA = "0xD5BC74")]
		private void alignArrow()
		{
		}

		[Token(Token = "0x6001560")]
		[Address(RVA = "0xD5A778", Offset = "0xD5A778", VA = "0xD5A778")]
		public void GrabArrow(Arrow arrow)
		{
		}

		[Token(Token = "0x6001561")]
		[Address(RVA = "0xD5B750", Offset = "0xD5B750", VA = "0xD5B750")]
		public void ReleaseArrow()
		{
		}

		[Token(Token = "0x6001562")]
		[Address(RVA = "0xD5BF98", Offset = "0xD5BF98", VA = "0xD5BF98")]
		private void resetArrowValues()
		{
		}

		[Token(Token = "0x6001563")]
		[Address(RVA = "0xD5BFDC", Offset = "0xD5BFDC", VA = "0xD5BFDC")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6001564")]
		[Address(RVA = "0xD5BF64", Offset = "0xD5BF64", VA = "0xD5BF64")]
		private void playBowDraw()
		{
		}

		[Token(Token = "0x6001565")]
		[Address(RVA = "0xD5BF7C", Offset = "0xD5BF7C", VA = "0xD5BF7C")]
		private void playBowRelease()
		{
		}

		[Token(Token = "0x6001566")]
		[Address(RVA = "0xD5C110", Offset = "0xD5C110", VA = "0xD5C110")]
		public Bow()
		{
		}
	}
	[Token(Token = "0x200040E")]
	public class DrawDefinition
	{
		[Token(Token = "0x1700021E")]
		public float DrawPercentage
		{
			[Token(Token = "0x6001568")]
			[Address(RVA = "0xD5C1C0", Offset = "0xD5C1C0", VA = "0xD5C1C0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001569")]
			[Address(RVA = "0xD5C1C8", Offset = "0xD5C1C8", VA = "0xD5C1C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700021F")]
		public float HapticAmplitude
		{
			[Token(Token = "0x600156A")]
			[Address(RVA = "0xD5C1D0", Offset = "0xD5C1D0", VA = "0xD5C1D0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600156B")]
			[Address(RVA = "0xD5C1D8", Offset = "0xD5C1D8", VA = "0xD5C1D8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000220")]
		public float HapticFrequency
		{
			[Token(Token = "0x600156C")]
			[Address(RVA = "0xD5C1E0", Offset = "0xD5C1E0", VA = "0xD5C1E0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600156D")]
			[Address(RVA = "0xD5C1E8", Offset = "0xD5C1E8", VA = "0xD5C1E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0xD5B068", Offset = "0xD5B068", VA = "0xD5B068")]
		public DrawDefinition()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public class BowArm : MonoBehaviour
	{
		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bow BowItem;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BowPercentStart;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateDegrees;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private UnityEngine.Quaternion _startRotation;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Quaternion _endRotation;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RotateX;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool RotateZ;

		[Token(Token = "0x600156F")]
		[Address(RVA = "0xD5C1F0", Offset = "0xD5C1F0", VA = "0xD5C1F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0xD5C32C", Offset = "0xD5C32C", VA = "0xD5C32C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0xD5C504", Offset = "0xD5C504", VA = "0xD5C504")]
		public BowArm()
		{
		}
	}
	[Token(Token = "0x2000410")]
	public class BulletHole : MonoBehaviour
	{
		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BulletHoleDecal;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxScale;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MinScale;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RandomYRotation;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DestroyTime;

		[Token(Token = "0x6001572")]
		[Address(RVA = "0xD5C528", Offset = "0xD5C528", VA = "0xD5C528")]
		private void Start()
		{
		}

		[Token(Token = "0x6001573")]
		[Address(RVA = "0xD5C6EC", Offset = "0xD5C6EC", VA = "0xD5C6EC")]
		public void TryAttachTo(Collider col)
		{
		}

		[Token(Token = "0x6001574")]
		[Address(RVA = "0xD5C818", Offset = "0xD5C818", VA = "0xD5C818")]
		private bool transformIsEqualScale(Transform theTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001575")]
		[Address(RVA = "0xD5C888", Offset = "0xD5C888", VA = "0xD5C888")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x6001576")]
		[Address(RVA = "0xD5C914", Offset = "0xD5C914", VA = "0xD5C914")]
		public BulletHole()
		{
		}
	}
	[Token(Token = "0x2000411")]
	public class DrawerSound : MonoBehaviour
	{
		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DrawerOpenSound;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DrawerOpenValue;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip DrawerCloseSound;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DrawerCloseValue;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool playedOpenSound;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool playedCloseSound;

		[Token(Token = "0x6001577")]
		[Address(RVA = "0xD5C938", Offset = "0xD5C938", VA = "0xD5C938")]
		public void OnDrawerUpdate(float drawerValue)
		{
		}

		[Token(Token = "0x6001578")]
		[Address(RVA = "0xD5CAC8", Offset = "0xD5CAC8", VA = "0xD5CAC8")]
		public DrawerSound()
		{
		}
	}
	[Token(Token = "0x2000412")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x2000413")]
		[CompilerGenerated]
		private sealed class <explosionRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x17000221")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001581")]
				[Address(RVA = "0xD5D080", Offset = "0xD5D080", VA = "0xD5D080", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000222")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001583")]
				[Address(RVA = "0xD5D0C8", Offset = "0xD5D0C8", VA = "0xD5D0C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600157E")]
			[Address(RVA = "0xD5CB74", Offset = "0xD5CB74", VA = "0xD5CB74")]
			[DebuggerHidden]
			public <explosionRoutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600157F")]
			[Address(RVA = "0xD5CCE4", Offset = "0xD5CCE4", VA = "0xD5CCE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001580")]
			[Address(RVA = "0xD5CCE8", Offset = "0xD5CCE8", VA = "0xD5CCE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001582")]
			[Address(RVA = "0xD5D088", Offset = "0xD5D088", VA = "0xD5D088", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000414")]
		[CompilerGenerated]
		private sealed class <dealDelayedDamaged>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400198A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400198B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x400198C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable damageable;

			[Token(Token = "0x400198D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Explosive <>4__this;

			[Token(Token = "0x17000223")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001587")]
				[Address(RVA = "0xD5D1A0", Offset = "0xD5D1A0", VA = "0xD5D1A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000224")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001589")]
				[Address(RVA = "0xD5D1E8", Offset = "0xD5D1E8", VA = "0xD5D1E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001584")]
			[Address(RVA = "0xD5CC3C", Offset = "0xD5CC3C", VA = "0xD5CC3C")]
			[DebuggerHidden]
			public <dealDelayedDamaged>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001585")]
			[Address(RVA = "0xD5D0D0", Offset = "0xD5D0D0", VA = "0xD5D0D0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001586")]
			[Address(RVA = "0xD5D0D4", Offset = "0xD5D0D4", VA = "0xD5D0D4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001588")]
			[Address(RVA = "0xD5D1A8", Offset = "0xD5D1A8", VA = "0xD5D1A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Objects within this radius will have damage and force applied to it")]
		[Header("Explosion Settings : ")]
		public float ExplosionRadius;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("Apply damage to an item if it has a Damageable component attached. ")]
		public float ExplosionDamage;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If an object has a Rigidbody and is within ExplosionRadius, it will have this amount of ExplosionForce added to it")]
		public float ExplosionForce;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("Add an UpwardsModifier to AddExplosionForce. Use this to make objects fly more up into the air, instead of just outwardly.")]
		public float ExplosiveUpwardsModifier;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowExplosionRadius;

		[Token(Token = "0x6001579")]
		[Address(RVA = "0xD5CAE0", Offset = "0xD5CAE0", VA = "0xD5CAE0", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xD5CB00", Offset = "0xD5CB00", VA = "0xD5CB00")]
		[IteratorStateMachine(typeof(<explosionRoutine>d__6))]
		private IEnumerator explosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xD5CB9C", Offset = "0xD5CB9C", VA = "0xD5CB9C")]
		[IteratorStateMachine(typeof(<dealDelayedDamaged>d__7))]
		private IEnumerator dealDelayedDamaged(Damageable damageable, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xD5CC64", Offset = "0xD5CC64", VA = "0xD5CC64")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600157D")]
		[Address(RVA = "0xD5CCC8", Offset = "0xD5CCC8", VA = "0xD5CCC8")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x2000415")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x600158A")]
		[Address(RVA = "0xD5D1F0", Offset = "0xD5D1F0", VA = "0xD5D1F0")]
		public static bool GetDown(this ControllerBinding binding)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000416")]
	public class Flashlight : GrabbableEvents
	{
		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light SpotLight;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform LightSwitch;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 originalSwitchPosition;

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xD5D258", Offset = "0xD5D258", VA = "0xD5D258")]
		private void Start()
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xD5D290", Offset = "0xD5D290", VA = "0xD5D290", Slot = "15")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xD5D2F8", Offset = "0xD5D2F8", VA = "0xD5D2F8", Slot = "17")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x600158E")]
		[Address(RVA = "0xD5D340", Offset = "0xD5D340", VA = "0xD5D340")]
		public Flashlight()
		{
		}
	}
	[Token(Token = "0x2000417")]
	public class FPSText : MonoBehaviour
	{
		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x600158F")]
		[Address(RVA = "0xD5D348", Offset = "0xD5D348", VA = "0xD5D348")]
		private void Start()
		{
		}

		[Token(Token = "0x6001590")]
		[Address(RVA = "0xD5D3A0", Offset = "0xD5D3A0", VA = "0xD5D3A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001591")]
		[Address(RVA = "0xD5D3E0", Offset = "0xD5D3E0", VA = "0xD5D3E0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001592")]
		[Address(RVA = "0xD5D4A4", Offset = "0xD5D4A4", VA = "0xD5D4A4")]
		public FPSText()
		{
		}
	}
	[Token(Token = "0x2000418")]
	public class GrappleShot : GrabbableEvents
	{
		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxRange;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float GrappleReelForce;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float MinReelDistance;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LayerMask GrappleLayers;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HitTargetPrefab;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer GrappleLine;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer HelperLine;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip GrappleShotSound;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool grappling;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool wasGrappling;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CharacterController characterController;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BNGPlayerController bngController;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioSource audioSource;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float currentGrappleDistance;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool validTargetFound;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		private bool isDynamic;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Rigidbody grappleTargetRigid;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Collider grappleTargetCollider;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform grappleTargetParent;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool requireRelease;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool climbing;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Climbable ClimbHelper;

		[Token(Token = "0x6001593")]
		[Address(RVA = "0xD5D4AC", Offset = "0xD5D4AC", VA = "0xD5D4AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xD5D678", Offset = "0xD5D678", VA = "0xD5D678")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xD5DDB0", Offset = "0xD5DDB0", VA = "0xD5DDB0", Slot = "15")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xD5DE2C", Offset = "0xD5DE2C", VA = "0xD5DE2C")]
		private void updateGrappleDistance()
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xD5E528", Offset = "0xD5E528", VA = "0xD5E528", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xD5E530", Offset = "0xD5E530", VA = "0xD5E530", Slot = "5")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xD5E374", Offset = "0xD5E374", VA = "0xD5E374")]
		private void onReleaseGrapple()
		{
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xD5D6F0", Offset = "0xD5D6F0", VA = "0xD5D6F0")]
		private void drawGrappleHelper()
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xD5DC78", Offset = "0xD5DC78", VA = "0xD5DC78")]
		private void drawGrappleLine()
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xD5DD00", Offset = "0xD5DD00", VA = "0xD5DD00")]
		private void hideGrappleLine()
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xD5E5E0", Offset = "0xD5E5E0", VA = "0xD5E5E0")]
		private void showGrappleHelper(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
		{
		}

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xD5DB64", Offset = "0xD5DB64", VA = "0xD5DB64")]
		private void hideGrappleHelper()
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xD5DF08", Offset = "0xD5DF08", VA = "0xD5DF08")]
		private void reelInGrapple(float triggerValue)
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xD5E290", Offset = "0xD5E290", VA = "0xD5E290")]
		private void shootGrapple()
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xD5E7AC", Offset = "0xD5E7AC", VA = "0xD5E7AC")]
		private void dropGrapple()
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xD5E54C", Offset = "0xD5E54C", VA = "0xD5E54C")]
		private void changeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xD5E7B8", Offset = "0xD5E7B8", VA = "0xD5E7B8")]
		public GrappleShot()
		{
		}
	}
	[Token(Token = "0x2000419")]
	public class HandJet : GrabbableEvents
	{
		[Token(Token = "0x200041A")]
		[CompilerGenerated]
		private sealed class <ResetTool>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandJet <>4__this;

			[Token(Token = "0x17000225")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015B1")]
				[Address(RVA = "0xD5EF1C", Offset = "0xD5EF1C", VA = "0xD5EF1C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000226")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015B3")]
				[Address(RVA = "0xD5EF64", Offset = "0xD5EF64", VA = "0xD5EF64", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015AE")]
			[Address(RVA = "0xD5ED74", Offset = "0xD5ED74", VA = "0xD5ED74")]
			[DebuggerHidden]
			public <ResetTool>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x60015AF")]
			[Address(RVA = "0xD5EDC8", Offset = "0xD5EDC8", VA = "0xD5EDC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015B0")]
			[Address(RVA = "0xD5EDCC", Offset = "0xD5EDCC", VA = "0xD5EDCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015B2")]
			[Address(RVA = "0xD5EF24", Offset = "0xD5EF24", VA = "0xD5EF24", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float JetForce;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem JetFX;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CharacterController characterController;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float minHeightForRespawn;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.GameObject spawnPoint;

		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xD5E7D4", Offset = "0xD5E7D4", VA = "0xD5E7D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xD5E940", Offset = "0xD5E940", VA = "0xD5E940", Slot = "15")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xD5EC30", Offset = "0xD5EC30", VA = "0xD5EC30", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xD5EC38", Offset = "0xD5EC38", VA = "0xD5EC38")]
		public void ChangeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xD5ECCC", Offset = "0xD5ECCC", VA = "0xD5ECCC", Slot = "5")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xD5ED00", Offset = "0xD5ED00", VA = "0xD5ED00")]
		[IteratorStateMachine(typeof(<ResetTool>d__12))]
		private IEnumerator ResetTool()
		{
			return null;
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xD5E984", Offset = "0xD5E984", VA = "0xD5E984")]
		private void doJet(float triggerValue)
		{
		}

		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xD5EB74", Offset = "0xD5EB74", VA = "0xD5EB74")]
		private void stopJet()
		{
		}

		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xD5ED9C", Offset = "0xD5ED9C", VA = "0xD5ED9C", Slot = "17")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xD5EDB8", Offset = "0xD5EDB8", VA = "0xD5EDB8")]
		public HandJet()
		{
		}
	}
	[Token(Token = "0x200041B")]
	public class IKDummy : MonoBehaviour
	{
		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform PlayerTransform;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HeadFollow;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform RightHandFollow;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform LeftHandFollow;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector3 HandRotationOffset;

		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform headBone;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform leftHandDummy;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform rightHandDummy;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lookatDummy;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private UnityEngine.Vector3 localPos;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private UnityEngine.Quaternion localRot;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform cam;

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xD5EF6C", Offset = "0xD5EF6C", VA = "0xD5EF6C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xD5F0C4", Offset = "0xD5F0C4", VA = "0xD5F0C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xD5F3E8", Offset = "0xD5F3E8", VA = "0xD5F3E8")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xD5F55C", Offset = "0xD5F55C", VA = "0xD5F55C")]
		public IKDummy()
		{
		}
	}
	[Token(Token = "0x200041C")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRange;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform LaserEnd;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Active;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer line;

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xD5F5BC", Offset = "0xD5F5BC", VA = "0xD5F5BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xD5F614", Offset = "0xD5F614", VA = "0xD5F614")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xD5F938", Offset = "0xD5F938", VA = "0xD5F938")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x200041D")]
	public class LaserSword : GrabbableEvents
	{
		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grabbable;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform BladeTransform;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform RaycastTransform;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LayerMask LaserCollision;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem CollisionParticle;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BladeEnabled;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool SaberSwitchOn;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float LaserLength;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float LaserActivateSpeed;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioSource CollisionAudio;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool Colliding;

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xD5F950", Offset = "0xD5F950", VA = "0xD5F950")]
		private void Start()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xD5FA14", Offset = "0xD5FA14", VA = "0xD5FA14")]
		private void Update()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xD5FF94", Offset = "0xD5FF94", VA = "0xD5FF94", Slot = "15")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xD5FC04", Offset = "0xD5FC04", VA = "0xD5FC04")]
		private void checkCollision()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xD5FFB0", Offset = "0xD5FFB0", VA = "0xD5FFB0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xD600D8", Offset = "0xD600D8", VA = "0xD600D8")]
		public LaserSword()
		{
		}
	}
	[Token(Token = "0x200041E")]
	public class LiquidWobble : MonoBehaviour
	{
		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer rend;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.Vector3 lastPos;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private UnityEngine.Vector3 velocity;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 lastRot;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private UnityEngine.Vector3 angularVelocity;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaxWobble;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float WobbleSpeed;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Recovery;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float wobbleAmountX;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wobbleAmountZ;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float wobbleAmountToAddX;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float wobbleAmountToAddZ;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulse;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float time;

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xD600EC", Offset = "0xD600EC", VA = "0xD600EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xD60144", Offset = "0xD60144", VA = "0xD60144")]
		private void Update()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xD603F4", Offset = "0xD603F4", VA = "0xD603F4")]
		public LiquidWobble()
		{
		}
	}
	[Token(Token = "0x200041F")]
	public class Marker : GrabbableEvents
	{
		[Token(Token = "0x2000420")]
		[CompilerGenerated]
		private sealed class <WriteRoutine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Marker <>4__this;

			[Token(Token = "0x17000227")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015CF")]
				[Address(RVA = "0xD61098", Offset = "0xD61098", VA = "0xD61098", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000228")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015D1")]
				[Address(RVA = "0xD610E0", Offset = "0xD610E0", VA = "0xD610E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015CC")]
			[Address(RVA = "0xD605D0", Offset = "0xD605D0", VA = "0xD605D0")]
			[DebuggerHidden]
			public <WriteRoutine>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60015CD")]
			[Address(RVA = "0xD60D90", Offset = "0xD60D90", VA = "0xD60D90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015CE")]
			[Address(RVA = "0xD60D94", Offset = "0xD60D94", VA = "0xD60D94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015D0")]
			[Address(RVA = "0xD610A0", Offset = "0xD610A0", VA = "0xD610A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material DrawMaterial;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Color DrawColor;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LineWidth;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform RaycastStart;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LayerMask DrawingLayers;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float RaycastLength;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEngine.GameObject paintCanvas;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float MinDrawDistance;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float ReuseTolerance;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool IsNewDraw;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private UnityEngine.Vector3 lastDrawPoint;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private LineRenderer LineRenderer;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform root;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform lastTransform;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Coroutine drawRoutine;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float lastLineWidth;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int renderLifeTime;

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xD60418", Offset = "0xD60418", VA = "0xD60418")]
		private void Update()
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xD604B8", Offset = "0xD604B8", VA = "0xD604B8", Slot = "4")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xD60588", Offset = "0xD60588", VA = "0xD60588", Slot = "5")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xD60514", Offset = "0xD60514", VA = "0xD60514")]
		[IteratorStateMachine(typeof(<WriteRoutine>d__20))]
		private IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xD605F8", Offset = "0xD605F8", VA = "0xD605F8")]
		private void InitDraw(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, float lineWidth, UnityEngine.Color lineColor)
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xD6076C", Offset = "0xD6076C", VA = "0xD6076C")]
		private UnityEngine.Vector3 DrawPoint(UnityEngine.Vector3 lastDrawPoint, UnityEngine.Vector3 endPosition, float lineWidth, UnityEngine.Color lineColor, UnityEngine.Quaternion rotation)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xD60CA0", Offset = "0xD60CA0", VA = "0xD60CA0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xD60D58", Offset = "0xD60D58", VA = "0xD60D58")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x2000421")]
	public class MoveToWaypoint : MonoBehaviour
	{
		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Waypoint Destination;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MovementSpeed;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ReachedDestination;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Delay in seconds to way before starting movement towards Destination")]
		public float StartDelay;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool reachedDelay;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float delayedTime;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 previousPosition;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.Vector3 PositionDifference;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool MoveInUpdate;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool MoveInFixedUpdate;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _initialMovementSpeed;

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xD610E8", Offset = "0xD610E8", VA = "0xD610E8")]
		private void Start()
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xD61168", Offset = "0xD61168", VA = "0xD61168")]
		private void Update()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xD615F0", Offset = "0xD615F0", VA = "0xD615F0")]
		public void SetForce(float newMovementSpeed)
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xD615F8", Offset = "0xD615F8", VA = "0xD615F8")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xD61600", Offset = "0xD61600", VA = "0xD61600")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xD61220", Offset = "0xD61220", VA = "0xD61220")]
		private void movePlatform(float timeDelta)
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xD6162C", Offset = "0xD6162C", VA = "0xD6162C")]
		private void resetDelayStatus()
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xD61638", Offset = "0xD61638", VA = "0xD61638")]
		public MoveToWaypoint()
		{
		}
	}
	[Token(Token = "0x2000422")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xD61658", Offset = "0xD61658", VA = "0xD61658")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x2000423")]
	public class PlayerScaler : MonoBehaviour
	{
		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> ScaleObjects;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Scale;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scaleSpeed;

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xD61660", Offset = "0xD61660", VA = "0xD61660")]
		private void Update()
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xD61898", Offset = "0xD61898", VA = "0xD61898")]
		public PlayerScaler()
		{
		}
	}
	[Token(Token = "0x2000424")]
	public class ProjectileLauncher : MonoBehaviour
	{
		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject ProjectileObject;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ProjectileForce;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject wand;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource LaunchSound;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem LaunchParticles;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _initialProjectileForce;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool isReadyForInstantiate;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<UnityEngine.GameObject> launchedObjects;

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xD618AC", Offset = "0xD618AC", VA = "0xD618AC")]
		private void Start()
		{
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xD61930", Offset = "0xD61930", VA = "0xD61930")]
		public UnityEngine.GameObject ShootProjectile(float projectileForce)
		{
			return null;
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xD61BA4", Offset = "0xD61BA4", VA = "0xD61BA4")]
		public void ShootProjectile()
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xD61BAC", Offset = "0xD61BAC", VA = "0xD61BAC")]
		public void SetForce(float force)
		{
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xD61BB4", Offset = "0xD61BB4", VA = "0xD61BB4")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xD61CF8", Offset = "0xD61CF8", VA = "0xD61CF8")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xD61D00", Offset = "0xD61D00", VA = "0xD61D00")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xD61ED0", Offset = "0xD61ED0", VA = "0xD61ED0")]
		public ProjectileLauncher()
		{
		}
	}
	[Token(Token = "0x2000425")]
	public class TimeController : MonoBehaviour
	{
		[Token(Token = "0x2000426")]
		[CompilerGenerated]
		private sealed class <resumeTimeRoutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeController <>4__this;

			[Token(Token = "0x1700022A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60015EF")]
				[Address(RVA = "0xD623BC", Offset = "0xD623BC", VA = "0xD623BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015F1")]
				[Address(RVA = "0xD62404", Offset = "0xD62404", VA = "0xD62404", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015EC")]
			[Address(RVA = "0xD62210", Offset = "0xD62210", VA = "0xD62210")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x60015ED")]
			[Address(RVA = "0xD62250", Offset = "0xD62250", VA = "0xD62250", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015EE")]
			[Address(RVA = "0xD62254", Offset = "0xD62254", VA = "0xD62254", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015F0")]
			[Address(RVA = "0xD623C4", Offset = "0xD623C4", VA = "0xD623C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("Timescale to slow down to if slow down key is pressed")]
		public float SlowTimeScale;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("If true, Y Button will always slow time. Useful for debugging. Otherwise call SlowTime / ResumeTime yourself")]
		public bool YKeySlowsTime;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("(Optional) Play this clip when starting to slow time")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("(Optional) Play this clip when ending slow mo")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("If true, will set Time.fixedDeltaTime to the device refresh rate")]
		public bool SetFixedDelta;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool _slowingTime;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool routineRunning;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float originalFixedDelta;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource audioSource;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ForceTimeScale;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x17000229")]
		public bool TimeSlowing
		{
			[Token(Token = "0x60015E5")]
			[Address(RVA = "0xD61EF0", Offset = "0xD61EF0", VA = "0xD61EF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xD61EF8", Offset = "0xD61EF8", VA = "0xD61EF8")]
		private void Start()
		{
		}

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xD61F8C", Offset = "0xD61F8C", VA = "0xD61F8C")]
		private void Update()
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xD62018", Offset = "0xD62018", VA = "0xD62018")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xD62128", Offset = "0xD62128", VA = "0xD62128")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xD6219C", Offset = "0xD6219C", VA = "0xD6219C")]
		[IteratorStateMachine(typeof(<resumeTimeRoutine>d__17))]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xD62238", Offset = "0xD62238", VA = "0xD62238")]
		public TimeController()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public class VREmulator : MonoBehaviour
	{
		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Enable / Disable : ")]
		[UnityEngine.Tooltip("Use Emulator if true and HMDIsActive is false")]
		public bool EmulatorEnabled;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Key Bindings : ")]
		public KeyCode PlayerUp;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode PlayerDown;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode RightTrigger;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode RightGrip;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KeyCode RightThumbNear;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode LeftTrigger;

		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public KeyCode LeftGrip;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyCode LeftThumbNear;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float mouseRotationX;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mouseRotationY;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Camera Look : ")]
		public float MouseSensitivityX;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MouseSensitivityY;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float MinimumCameraY;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaximumCameraY;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform mainCameraTransform;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftControllerTranform;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightControllerTranform;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BNGPlayerController player;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool didFirstActivate;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabber grabberLeft;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabber grabberRight;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _originalPlayerYOffset;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("Shown for Debug : ")]
		public bool HMDIsActive;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool isQuitting;

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xD6240C", Offset = "0xD6240C", VA = "0xD6240C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xD62584", Offset = "0xD62584", VA = "0xD62584")]
		private void onFirstActivate()
		{
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xD62604", Offset = "0xD62604", VA = "0xD62604")]
		private void Update()
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xD626C8", Offset = "0xD626C8", VA = "0xD626C8")]
		public void CheckHeadControls()
		{
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xD6293C", Offset = "0xD6293C", VA = "0xD6293C")]
		public void UpdateInputs()
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xD627FC", Offset = "0xD627FC", VA = "0xD627FC")]
		public void CheckPlayerControls()
		{
		}

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xD62B04", Offset = "0xD62B04", VA = "0xD62B04")]
		private void checkGrabbers()
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xD62D78", Offset = "0xD62D78", VA = "0xD62D78", Slot = "4")]
		public virtual void ResetHands()
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xD62EE4", Offset = "0xD62EE4", VA = "0xD62EE4", Slot = "5")]
		public virtual void ResetAll()
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xD62FBC", Offset = "0xD62FBC", VA = "0xD62FBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xD63060", Offset = "0xD63060", VA = "0xD63060")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xD63128", Offset = "0xD63128", VA = "0xD63128")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xD63134", Offset = "0xD63134", VA = "0xD63134")]
		public VREmulator()
		{
		}
	}
	[Token(Token = "0x2000428")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Waypoint Destination;

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xD63174", Offset = "0xD63174", VA = "0xD63174")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xD632CC", Offset = "0xD632CC", VA = "0xD632CC")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x2000429")]
	public class Zipline : GrabbableEvents
	{
		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ZiplineStart;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform ZiplineEnd;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ZiplineSpeed;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool UseLinearMovement;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float lastMoveTime;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool movingForward;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xD632D4", Offset = "0xD632D4", VA = "0xD632D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xD633A0", Offset = "0xD633A0", VA = "0xD633A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xD63468", Offset = "0xD63468", VA = "0xD63468")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xD63580", Offset = "0xD63580", VA = "0xD63580", Slot = "15")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xD638B8", Offset = "0xD638B8", VA = "0xD638B8", Slot = "18")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xD638F0", Offset = "0xD638F0", VA = "0xD638F0", Slot = "21")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xD635D4", Offset = "0xD635D4", VA = "0xD635D4")]
		private void moveTowards(UnityEngine.Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xD63928", Offset = "0xD63928", VA = "0xD63928")]
		public Zipline()
		{
		}
	}
	[Token(Token = "0x200042A")]
	public class ControllerOffsetHelper : MonoBehaviour
	{
		[Token(Token = "0x200042B")]
		[CompilerGenerated]
		private sealed class <checkForController>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerOffsetHelper <>4__this;

			[Token(Token = "0x1700022C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001613")]
				[Address(RVA = "0xD640A0", Offset = "0xD640A0", VA = "0xD640A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001615")]
				[Address(RVA = "0xD640E8", Offset = "0xD640E8", VA = "0xD640E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001610")]
			[Address(RVA = "0xD63A60", Offset = "0xD63A60", VA = "0xD63A60")]
			[DebuggerHidden]
			public <checkForController>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001611")]
			[Address(RVA = "0xD63F90", Offset = "0xD63F90", VA = "0xD63F90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001612")]
			[Address(RVA = "0xD63F94", Offset = "0xD63F94", VA = "0xD63F94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001614")]
			[Address(RVA = "0xD640A8", Offset = "0xD640A8", VA = "0xD640A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The model of controller found")]
		[SerializeField]
		[Header("Shown for Debug :")]
		private string thisControllerModel;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ControllerOffset thisOffset;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("The position offset is defined within this script and loaded once the controller is found.")]
		public UnityEngine.Vector3 OffsetPosition;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("The rotation offset is defined within this script and loaded once the controller is found.")]
		public UnityEngine.Vector3 OffsetRotation;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ControllerOffset> ControllerOffsets;

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xD6394C", Offset = "0xD6394C", VA = "0xD6394C")]
		private void Start()
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xD639EC", Offset = "0xD639EC", VA = "0xD639EC")]
		[IteratorStateMachine(typeof(<checkForController>d__7))]
		private IEnumerator checkForController()
		{
			return null;
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xD63A88", Offset = "0xD63A88", VA = "0xD63A88", Slot = "4")]
		public virtual void OnControllerFound()
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xD63BAC", Offset = "0xD63BAC", VA = "0xD63BAC", Slot = "5")]
		public virtual ControllerOffset GetControllerOffset(string controllerName)
		{
			return null;
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xD63C50", Offset = "0xD63C50", VA = "0xD63C50", Slot = "6")]
		public virtual void DefineControllerOffsets()
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xD63F5C", Offset = "0xD63F5C", VA = "0xD63F5C")]
		public ControllerOffsetHelper()
		{
		}
	}
	[Token(Token = "0x200042C")]
	public class ControllerOffset
	{
		[Token(Token = "0x1700022E")]
		public string ControllerName
		{
			[Token(Token = "0x6001616")]
			[Address(RVA = "0xD640F0", Offset = "0xD640F0", VA = "0xD640F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001617")]
			[Address(RVA = "0xD640F8", Offset = "0xD640F8", VA = "0xD640F8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700022F")]
		public UnityEngine.Vector3 LeftControllerPositionOffset
		{
			[Token(Token = "0x6001618")]
			[Address(RVA = "0xD64100", Offset = "0xD64100", VA = "0xD64100")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001619")]
			[Address(RVA = "0xD6410C", Offset = "0xD6410C", VA = "0xD6410C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public UnityEngine.Vector3 RightControllerPositionOffset
		{
			[Token(Token = "0x600161A")]
			[Address(RVA = "0xD64118", Offset = "0xD64118", VA = "0xD64118")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x600161B")]
			[Address(RVA = "0xD64124", Offset = "0xD64124", VA = "0xD64124")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000231")]
		public UnityEngine.Vector3 LeftControllerRotationOffset
		{
			[Token(Token = "0x600161C")]
			[Address(RVA = "0xD64130", Offset = "0xD64130", VA = "0xD64130")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x600161D")]
			[Address(RVA = "0xD6413C", Offset = "0xD6413C", VA = "0xD6413C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public UnityEngine.Vector3 RightControlleRotationOffset
		{
			[Token(Token = "0x600161E")]
			[Address(RVA = "0xD64148", Offset = "0xD64148", VA = "0xD64148")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x600161F")]
			[Address(RVA = "0xD64154", Offset = "0xD64154", VA = "0xD64154")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xD63F54", Offset = "0xD63F54", VA = "0xD63F54")]
		public ControllerOffset()
		{
		}
	}
	[Token(Token = "0x200042D")]
	public class DetachableLimb : MonoBehaviour
	{
		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ShrinkBone;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject ReplaceGrabbableWith;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject EnableOnDetach;

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xD64160", Offset = "0xD64160", VA = "0xD64160")]
		public void DoDismemberment(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xD64410", Offset = "0xD64410", VA = "0xD64410")]
		public void ReverseDismemberment()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xD64530", Offset = "0xD64530", VA = "0xD64530")]
		public DetachableLimb()
		{
		}
	}
	[Token(Token = "0x200042E")]
	public class DoorHelper : MonoBehaviour
	{
		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DoorOpenSound;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip DoorCloseSound;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Does the handle need to be turned in order to open the door from the closed position?")]
		public bool RequireHandleTurnToOpen;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform HandleFollower;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DegreesTurned;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float DegreesTurnToOpen;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform DoorLockTransform;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialLockPosition;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HingeJoint hinge;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool playedOpenSound;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyToPlayCloseSound;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AngularVelocitySnapDoor;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float AngularVelocity;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool doorLocked;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lockPos;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string DebugText;

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xD64538", Offset = "0xD64538", VA = "0xD64538")]
		private void Start()
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xD6462C", Offset = "0xD6462C", VA = "0xD6462C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xD64C4C", Offset = "0xD64C4C", VA = "0xD64C4C")]
		public DoorHelper()
		{
		}
	}
	[Token(Token = "0x200042F")]
	public class GrabberArea : MonoBehaviour
	{
		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber InArea;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Grabber> grabbersInArea;

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xD64C6C", Offset = "0xD64C6C", VA = "0xD64C6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xD64C8C", Offset = "0xD64C8C", VA = "0xD64C8C")]
		public Grabber GetOpenGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xD64E1C", Offset = "0xD64E1C", VA = "0xD64E1C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xD64FC0", Offset = "0xD64FC0", VA = "0xD64FC0")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xD650B4", Offset = "0xD650B4", VA = "0xD650B4")]
		public GrabberArea()
		{
		}
	}
	[Token(Token = "0x2000430")]
	public class HandCollision : MonoBehaviour
	{
		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandController HandControl;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber HandGrabber;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableHandCollision;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool EnableCollisionOnPoint;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool EnableCollisionOnFist;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableCollisionOnAllPoses;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableCollisionDuringGrab;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PointAmount;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GripAmount;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MakingFist;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Collider> handColliders;

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xD650BC", Offset = "0xD650BC", VA = "0xD650BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xD65238", Offset = "0xD65238", VA = "0xD65238")]
		private void Update()
		{
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xD654E0", Offset = "0xD654E0", VA = "0xD654E0")]
		public HandCollision()
		{
		}
	}
	[Token(Token = "0x2000431")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("HandController parent will be set to this on Start if specified")]
		public Transform HandAnchor;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("If true, this transform will be parented to HandAnchor and it's position / rotation set to 0,0,0.")]
		public bool ResetHandAnchorPosition;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[UnityEngine.Tooltip("If true this object movement will be moved in Update to smooth out any jitter.")]
		public bool SmoothMovement;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator HandAnimator;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Check the state of this grabber to determine animation state. If null, a child Grabber component will be used.")]
		public Grabber grabber;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float GripAmount;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _prevGrip;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float PointAmount;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _prevPoint;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ThumbAmount;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float _prevThumb;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int PoseId;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float HandAnimationSpeed;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ControllerOffsetHelper offset;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InputBridge input;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform offsetTransform;

		[Token(Token = "0x17000233")]
		private UnityEngine.Vector3 offsetPosition
		{
			[Token(Token = "0x600162F")]
			[Address(RVA = "0xD654F8", Offset = "0xD654F8", VA = "0xD654F8")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000234")]
		private UnityEngine.Vector3 offsetRotation
		{
			[Token(Token = "0x6001630")]
			[Address(RVA = "0xD655BC", Offset = "0xD655BC", VA = "0xD655BC")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xD65680", Offset = "0xD65680", VA = "0xD65680")]
		private void Start()
		{
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xD659E8", Offset = "0xD659E8", VA = "0xD659E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xD6607C", Offset = "0xD6607C", VA = "0xD6607C", Slot = "4")]
		public virtual void UpdateControllerPosition()
		{
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xD65D80", Offset = "0xD65D80", VA = "0xD65D80")]
		private void updateAnimimationStates()
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xD661D4", Offset = "0xD661D4", VA = "0xD661D4")]
		private void setAnimatorBlend(float min, float max, float input, int animationLayer)
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xD661FC", Offset = "0xD661FC", VA = "0xD661FC")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x2000432")]
	public class HandleGFXHelper : MonoBehaviour
	{
		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable HandleGrabbable;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMin;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LocalYMax;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 initialRot;

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xD66214", Offset = "0xD66214", VA = "0xD66214")]
		private void Start()
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xD66244", Offset = "0xD66244", VA = "0xD66244")]
		private void Update()
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xD664D0", Offset = "0xD664D0", VA = "0xD664D0")]
		public HandleGFXHelper()
		{
		}
	}
	[Token(Token = "0x2000433")]
	public class HandleHelper : MonoBehaviour
	{
		[Token(Token = "0x2000434")]
		[CompilerGenerated]
		private sealed class <doRelease>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandleHelper <>4__this;

			[Token(Token = "0x17000235")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001642")]
				[Address(RVA = "0xD67B9C", Offset = "0xD67B9C", VA = "0xD67B9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000236")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001644")]
				[Address(RVA = "0xD67BE4", Offset = "0xD67BE4", VA = "0xD67BE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600163F")]
			[Address(RVA = "0xD67AAC", Offset = "0xD67AAC", VA = "0xD67AAC")]
			[DebuggerHidden]
			public <doRelease>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6001640")]
			[Address(RVA = "0xD67ADC", Offset = "0xD67ADC", VA = "0xD67ADC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001641")]
			[Address(RVA = "0xD67AE0", Offset = "0xD67AE0", VA = "0xD67AE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001643")]
			[Address(RVA = "0xD67BA4", Offset = "0xD67BA4", VA = "0xD67BA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigid;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandleTransform;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable thisGrab;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool didRelease;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider col;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 lastAngularVelocity;

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xD674EC", Offset = "0xD674EC", VA = "0xD674EC")]
		private void Start()
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xD67694", Offset = "0xD67694", VA = "0xD67694")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0xD67A78", Offset = "0xD67A78", VA = "0xD67A78")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0xD67A04", Offset = "0xD67A04", VA = "0xD67A04")]
		[IteratorStateMachine(typeof(<doRelease>d__10))]
		private IEnumerator doRelease()
		{
			return null;
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xD67AD4", Offset = "0xD67AD4", VA = "0xD67AD4")]
		public HandleHelper()
		{
		}
	}
	[Token(Token = "0x2000435")]
	public class HandPhysics : MonoBehaviour
	{
		[Token(Token = "0x2000436")]
		[CompilerGenerated]
		private sealed class <UnignoreAllCollisions>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPhysics <>4__this;

			[Token(Token = "0x4001AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Grabbable <thisGrabbable>5__2;

			[Token(Token = "0x17000238")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600165B")]
				[Address(RVA = "0xD697A0", Offset = "0xD697A0", VA = "0xD697A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000239")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600165D")]
				[Address(RVA = "0xD697E8", Offset = "0xD697E8", VA = "0xD697E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001658")]
			[Address(RVA = "0xD68E28", Offset = "0xD68E28", VA = "0xD68E28")]
			[DebuggerHidden]
			public <UnignoreAllCollisions>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6001659")]
			[Address(RVA = "0xD696BC", Offset = "0xD696BC", VA = "0xD696BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600165A")]
			[Address(RVA = "0xD696C0", Offset = "0xD696C0", VA = "0xD696C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600165C")]
			[Address(RVA = "0xD697A8", Offset = "0xD697A8", VA = "0xD697A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("This is the object our physical hand should try to follow / match. Should typically be an object on the controller Transform")]
		public Transform AttachTo;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("Amount of Velocity to apply to hands when trying to reach anchor point")]
		public float HandVelocity;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[UnityEngine.Tooltip("If true, Hand COlliders will be disabled while grabbing an object")]
		public bool DisableHandCollidersOnGrab;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[UnityEngine.Tooltip("If true, the physical hand will be parented to the AttachPoint when no collisions are present. This keeps the hand 1:1 with the controller.")]
		public bool ParentToAttachPoint;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("If the hand exceeds this distance from it's origin it will snap back to the original position. Specified in meters.")]
		public float SnapBackDistance;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("This is the Grabber to use when this hand is active.")]
		public Grabber ThisGrabber;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Disable this Grabber when this hand is active. (Optional)")]
		public Grabber DisableGrabber;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("This is the RemoteGrabber to use when this hand is active.")]
		public RemoteGrabber ThisRemoteGrabber;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("Disable this RemoteGrabber when this hand is active. (Optional)")]
		public RemoteGrabber DisableRemoteGrabber;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Assign Hand Colliders this material if provided")]
		public PhysicMaterial ColliderMaterial;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform HandModel;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform HandModelOffset;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Collider> handColliders;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable heldGrabbable;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> collisions;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer line;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3 localHandOffset;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private UnityEngine.Vector3 localHandOffsetRotation;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool wasHoldingObject;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool MovePosition;

		[Token(Token = "0x17000237")]
		public bool HoldingObject
		{
			[Token(Token = "0x6001645")]
			[Address(RVA = "0xD67BEC", Offset = "0xD67BEC", VA = "0xD67BEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xD67C90", Offset = "0xD67C90", VA = "0xD67C90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xD68204", Offset = "0xD68204", VA = "0xD68204")]
		private void Update()
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xD68988", Offset = "0xD68988", VA = "0xD68988")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xD67F7C", Offset = "0xD67F7C", VA = "0xD67F7C")]
		private void initHandColliders()
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xD68690", Offset = "0xD68690", VA = "0xD68690")]
		private void drawDistanceLine()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xD6885C", Offset = "0xD6885C", VA = "0xD6885C")]
		private void checkBreakDistance()
		{
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xD684C4", Offset = "0xD684C4", VA = "0xD684C4")]
		private void updateHandGraphics()
		{
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xD68DB4", Offset = "0xD68DB4", VA = "0xD68DB4")]
		[IteratorStateMachine(typeof(<UnignoreAllCollisions>d__31))]
		private IEnumerator UnignoreAllCollisions()
		{
			return null;
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xD68E50", Offset = "0xD68E50", VA = "0xD68E50")]
		public void IgnoreGrabbableCollisions(Grabbable grab, bool ignorePhysics)
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xD68F68", Offset = "0xD68F68", VA = "0xD68F68")]
		public void DisableHandColliders()
		{
		}

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xD69078", Offset = "0xD69078", VA = "0xD69078")]
		public void EnableHandColliders()
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xD69188", Offset = "0xD69188", VA = "0xD69188", Slot = "4")]
		public virtual void OnGrabbedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xD691D4", Offset = "0xD691D4", VA = "0xD691D4", Slot = "5")]
		public virtual void OnReleasedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xD69280", Offset = "0xD69280", VA = "0xD69280")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xD69340", Offset = "0xD69340", VA = "0xD69340")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001655")]
		[Address(RVA = "0xD6946C", Offset = "0xD6946C", VA = "0xD6946C")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001656")]
		[Address(RVA = "0xD69608", Offset = "0xD69608", VA = "0xD69608")]
		public bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6001657")]
		[Address(RVA = "0xD69610", Offset = "0xD69610", VA = "0xD69610")]
		public HandPhysics()
		{
		}
	}
	[Token(Token = "0x2000437")]
	public class HandRepresentationHelper : MonoBehaviour
	{
		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The GameObject to be shown or hidden depending on Distance from OtherHandTransform")]
		public Transform HandToToggle;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("The other Hand Transform used to calculate distance")]
		public Transform OtherHandTransform;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("Distance required to show this Transform in meters")]
		public float DistanceToShow;

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xD697F0", Offset = "0xD697F0", VA = "0xD697F0")]
		private void Update()
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xD698E4", Offset = "0xD698E4", VA = "0xD698E4")]
		public HandRepresentationHelper()
		{
		}
	}
	[Token(Token = "0x2000438")]
	public class HandTracking : MonoBehaviour
	{
		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public OVRHand LeftHand;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRHand RightHand;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OVRHand.TrackingConfidence LeftHandConfidence;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public OVRHand.TrackingConfidence RightHandConfidence;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRSkeleton leftSkele;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton rightSkele;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRBone leftIndexBone;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRBone rightIndexBone;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool wasHandTracking;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Grabber LeftGrabber;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Grabber RightGrabber;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform LeftModelHolder;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform RightModelHolder;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool IsHandTracking;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool IsLeftIndexPinching;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float LeftIndexPinchStrength;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool IsRightIndexPinching;

		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float RightIndexPinchStrength;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEngine.Vector3 RightIndexPosition;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public UnityEngine.Vector3 LeftIndexPosition;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool DoPinchToGrab;

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xD698F8", Offset = "0xD698F8", VA = "0xD698F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xD6997C", Offset = "0xD6997C", VA = "0xD6997C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xD69CE8", Offset = "0xD69CE8", VA = "0xD69CE8")]
		private void updateHandTracking()
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xD69F2C", Offset = "0xD69F2C", VA = "0xD69F2C")]
		private void onHandTrackingChange(bool handTrackingEnabled)
		{
		}

		[Token(Token = "0x6001664")]
		[Address(RVA = "0xD69DA4", Offset = "0xD69DA4", VA = "0xD69DA4")]
		private void updateGrabbers()
		{
		}

		[Token(Token = "0x6001665")]
		[Address(RVA = "0xD69F8C", Offset = "0xD69F8C", VA = "0xD69F8C")]
		public HandTracking()
		{
		}
	}
	[Token(Token = "0x200043A")]
	public class IgnoreColliders : MonoBehaviour
	{
		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> CollidersToIgnore;

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xD6A054", Offset = "0xD6A054", VA = "0xD6A054")]
		private void Start()
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xD6A228", Offset = "0xD6A228", VA = "0xD6A228")]
		public IgnoreColliders()
		{
		}
	}
	[Token(Token = "0x200043B")]
	public class InvalidTeleportArea : MonoBehaviour
	{
		[Token(Token = "0x600166C")]
		[Address(RVA = "0xD6A230", Offset = "0xD6A230", VA = "0xD6A230")]
		public InvalidTeleportArea()
		{
		}
	}
	[Token(Token = "0x200043C")]
	public class JointBreaker : MonoBehaviour
	{
		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BreakDistance;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float JointDistance;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DestroyJointOnBreak;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrabberEvent OnBreakEvent;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint theJoint;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 startPos;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool brokeJoint;

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xD6A238", Offset = "0xD6A238", VA = "0xD6A238")]
		private void Start()
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xD6A2B4", Offset = "0xD6A2B4", VA = "0xD6A2B4")]
		private void Update()
		{
		}

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xD6A3A0", Offset = "0xD6A3A0", VA = "0xD6A3A0")]
		public void BreakJoint()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xD6A510", Offset = "0xD6A510", VA = "0xD6A510")]
		public JointBreaker()
		{
		}
	}
	[Token(Token = "0x200043D")]
	public class JointHelper : MonoBehaviour
	{
		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Vector3 initialPosition;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 initialRotation;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 initialScale;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 currentPosition;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private UnityEngine.Vector3 currentScale;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 currentRotation;

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xD6A528", Offset = "0xD6A528", VA = "0xD6A528")]
		private void Start()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xD6A598", Offset = "0xD6A598", VA = "0xD6A598")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xD6A778", Offset = "0xD6A778", VA = "0xD6A778")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xD6A77C", Offset = "0xD6A77C", VA = "0xD6A77C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xD6A780", Offset = "0xD6A780", VA = "0xD6A780")]
		public JointHelper()
		{
		}
	}
	[Token(Token = "0x200043E")]
	public class RagdollHelper : MonoBehaviour
	{
		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Collider> colliders;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider playerCol;

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xD6A798", Offset = "0xD6A798", VA = "0xD6A798")]
		private void Start()
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0xD6A9AC", Offset = "0xD6A9AC", VA = "0xD6A9AC")]
		public RagdollHelper()
		{
		}
	}
	[Token(Token = "0x200043F")]
	public class RingHelper : MonoBehaviour
	{
		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Color RingColor;

		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Color RingSelectedColor;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Color RingSecondarySelectedColor;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ringSizeInRange;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float ringSizeGrabbable;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float RingFadeSpeed;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Canvas canvas;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text text;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Grabbable grabbable;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CanvasScaler scaler;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Grabber leftGrabber;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabber rightGrabber;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool handsFull;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _initalOpacity;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _currentOpacity;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform mainCam;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Grabber closestGrabber;

		[Token(Token = "0x6001678")]
		[Address(RVA = "0xD6A9B4", Offset = "0xD6A9B4", VA = "0xD6A9B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0xD6AC54", Offset = "0xD6AC54", VA = "0xD6AC54")]
		private void Update()
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0xD6B098", Offset = "0xD6B098", VA = "0xD6B098")]
		private UnityEngine.Color getSelectedColor()
		{
			return default(UnityEngine.Color);
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0xD6B1A4", Offset = "0xD6B1A4", VA = "0xD6B1A4")]
		public RingHelper()
		{
		}
	}
	[Token(Token = "0x2000440")]
	public class ScaleMaterialHelper : MonoBehaviour
	{
		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer ren;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 Tiling;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector2 Offset;

		[Token(Token = "0x600167C")]
		[Address(RVA = "0xD6B1DC", Offset = "0xD6B1DC", VA = "0xD6B1DC")]
		private void Start()
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0xD6B28C", Offset = "0xD6B28C", VA = "0xD6B28C")]
		private void Update()
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xD6B23C", Offset = "0xD6B23C", VA = "0xD6B23C")]
		private void updateTexture()
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xD6B2B4", Offset = "0xD6B2B4", VA = "0xD6B2B4")]
		public ScaleMaterialHelper()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class StaticBatch : MonoBehaviour
	{
		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material CombineMaterial;

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xD6B2C4", Offset = "0xD6B2C4", VA = "0xD6B2C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xD6B97C", Offset = "0xD6B97C", VA = "0xD6B97C")]
		public StaticBatch()
		{
		}
	}
	[Token(Token = "0x2000442")]
	public class TeleportDestination : MonoBehaviour
	{
		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform DestinationTransform;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ForcePlayerRotation;

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xD6B984", Offset = "0xD6B984", VA = "0xD6B984")]
		public TeleportDestination()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class TeleportPlayerOnEnter : MonoBehaviour
	{
		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TeleportDestination;

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xD6B98C", Offset = "0xD6B98C", VA = "0xD6B98C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xD6BAC0", Offset = "0xD6BAC0", VA = "0xD6BAC0")]
		public TeleportPlayerOnEnter()
		{
		}
	}
	[Token(Token = "0x2000444")]
	public class UIPointer : MonoBehaviour
	{
		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("The controller side this pointer is on")]
		public ControllerHand ControllerSide;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[UnityEngine.Tooltip("If true this object will update the VRUISystem's Left or Right Transform property")]
		public bool AutoUpdateUITransforms;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject cursor;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.GameObject _cursor;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Example : 0.5 = Line Goes Half Way. 1 = Line reaches end.")]
		public float LineDistanceModifier;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private VRUISystem uiSystem;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("LineRenderer to use when showing a valid UI Canvas. Leave null to attempt a GetComponent<> on this object.")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xD6BAC8", Offset = "0xD6BAC8", VA = "0xD6BAC8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xD6BE24", Offset = "0xD6BE24", VA = "0xD6BE24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xD6C050", Offset = "0xD6C050", VA = "0xD6C050")]
		private void Update()
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xD6C308", Offset = "0xD6C308", VA = "0xD6C308")]
		public UIPointer()
		{
		}
	}
	[Token(Token = "0x2000445")]
	[RequireComponent(typeof(Canvas))]
	[RequireComponent(typeof(GraphicRaycaster))]
	public class VRCanvas : MonoBehaviour
	{
		[Token(Token = "0x6001689")]
		[Address(RVA = "0xD6C328", Offset = "0xD6C328", VA = "0xD6C328")]
		private void Start()
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xD6C398", Offset = "0xD6C398", VA = "0xD6C398")]
		public VRCanvas()
		{
		}
	}
	[Token(Token = "0x2000446")]
	public class VRUISystem : BaseInputModule
	{
		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("This setting determines if LeftPointerTransform or RightPointerTransform will be used as a forward vector for World Space UI events")]
		[Header("XR Controller Options : ")]
		public ControllerHand SelectedHand;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("A transform on the left controller to use when raycasting for world space UI events")]
		public Transform LeftPointerTransform;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("A transform on the right controller to use when raycasting for world space UI events")]
		public Transform RightPointerTransform;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[UnityEngine.Tooltip("Controller Binding to use for input down, up, etc.")]
		public List<ControllerBinding> ControllerInput;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[UnityEngine.Tooltip("If true, Left Mouse Button down event will be sent as a click")]
		public bool AllowMouseInput;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Shown for Debug : ")]
		public UnityEngine.GameObject PressingObject;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.GameObject DraggingObject;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEngine.GameObject ReleasingObject;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera cameraCaster;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private UnityEngine.GameObject _initialPressObject;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool _lastInputDown;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUISystem _instance;

		[Token(Token = "0x1700023A")]
		public PointerEventData EventData
		{
			[Token(Token = "0x600168B")]
			[Address(RVA = "0xD6C3A0", Offset = "0xD6C3A0", VA = "0xD6C3A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600168C")]
			[Address(RVA = "0xD6C3A8", Offset = "0xD6C3A8", VA = "0xD6C3A8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		public static VRUISystem Instance
		{
			[Token(Token = "0x600168D")]
			[Address(RVA = "0xD6BC24", Offset = "0xD6BC24", VA = "0xD6BC24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xD6C3B0", Offset = "0xD6C3B0", VA = "0xD6C3B0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0xD6C49C", Offset = "0xD6C49C", VA = "0xD6C49C")]
		private void init()
		{
		}

		[Token(Token = "0x6001690")]
		[Address(RVA = "0xD6C5EC", Offset = "0xD6C5EC", VA = "0xD6C5EC", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xD6CC4C", Offset = "0xD6CC4C", VA = "0xD6CC4C", Slot = "27")]
		public virtual bool InputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xD6CD4C", Offset = "0xD6CD4C", VA = "0xD6CD4C", Slot = "28")]
		public virtual void PressDown()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xD6C814", Offset = "0xD6C814", VA = "0xD6C814")]
		public void Press()
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xD6C9F0", Offset = "0xD6C9F0", VA = "0xD6C9F0")]
		public void Release()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xD6CF88", Offset = "0xD6CF88", VA = "0xD6CF88", Slot = "29")]
		public virtual void ClearAll()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xD6D004", Offset = "0xD6D004", VA = "0xD6D004", Slot = "30")]
		public virtual void SetPressingObject(UnityEngine.GameObject pressing)
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xD6D040", Offset = "0xD6D040", VA = "0xD6D040", Slot = "31")]
		public virtual void SetDraggingObject(UnityEngine.GameObject dragging)
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xD6D07C", Offset = "0xD6D07C", VA = "0xD6D07C", Slot = "32")]
		public virtual void SetReleasingObject(UnityEngine.GameObject releasing)
		{
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xD6D084", Offset = "0xD6D084", VA = "0xD6D084", Slot = "33")]
		public virtual void AssignCameraToAllCanvases(Camera cam)
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0xD6D158", Offset = "0xD6D158", VA = "0xD6D158", Slot = "34")]
		public virtual void AddCanvas(Canvas canvas)
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xD6D16C", Offset = "0xD6D16C", VA = "0xD6D16C", Slot = "35")]
		public virtual void AddCanvasToCamera(Canvas canvas, Camera cam)
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xD6BEA8", Offset = "0xD6BEA8", VA = "0xD6BEA8")]
		public void UpdateControllerHand(ControllerHand hand)
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xD6D188", Offset = "0xD6D188", VA = "0xD6D188")]
		public VRUISystem()
		{
		}
	}
	[Token(Token = "0x2000447")]
	public class DestroyIfPlayMode : MonoBehaviour
	{
		[Token(Token = "0x600169E")]
		[Address(RVA = "0xD6D2F8", Offset = "0xD6D2F8", VA = "0xD6D2F8")]
		private void Start()
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xD6D3A8", Offset = "0xD6D3A8", VA = "0xD6D3A8")]
		public DestroyIfPlayMode()
		{
		}
	}
	[Token(Token = "0x2000448")]
	public class VRUtils : MonoBehaviour
	{
		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUtils _instance;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Color DebugTextColor;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform DebugTextHolder;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float MaxTextEntries;

		[Token(Token = "0x1700023C")]
		public static VRUtils Instance
		{
			[Token(Token = "0x60016A0")]
			[Address(RVA = "0xD6D3B0", Offset = "0xD6D3B0", VA = "0xD6D3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xD6D524", Offset = "0xD6D524", VA = "0xD6D524")]
		private void Awake()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xD6D620", Offset = "0xD6D620", VA = "0xD6D620")]
		public void Log(string msg)
		{
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xD6DA64", Offset = "0xD6DA64", VA = "0xD6DA64")]
		public AudioSource PlaySpatialClipAt(AudioClip clip, UnityEngine.Vector3 pos, float volume, float spatialBlend = 1f, float randomizePitch = 0f)
		{
			return null;
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xD6DC2C", Offset = "0xD6DC2C", VA = "0xD6DC2C")]
		private float getRandomizedPitch(float randomAmount)
		{
			return default(float);
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xD6DC70", Offset = "0xD6DC70", VA = "0xD6DC70")]
		public VRUtils()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public class AmmoDispenser : MonoBehaviour
	{
		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber LeftGrabber;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber RightGrabber;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject AmmoDispenserObject;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.GameObject PistolClip;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.GameObject ShotgunShell;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.GameObject RifleClip;

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xD6DC88", Offset = "0xD6DC88", VA = "0xD6DC88")]
		private void Update()
		{
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0xD6DCFC", Offset = "0xD6DCFC", VA = "0xD6DCFC")]
		private bool grabberHasWeapon(Grabber g)
		{
			return default(bool);
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0xD6DE38", Offset = "0xD6DE38", VA = "0xD6DE38")]
		private UnityEngine.GameObject getAmmo()
		{
			return null;
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0xD6E074", Offset = "0xD6E074", VA = "0xD6E074")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0xD6E2CC", Offset = "0xD6E2CC", VA = "0xD6E2CC")]
		public AmmoDispenser()
		{
		}
	}
	[Token(Token = "0x200044A")]
	public class AmmoDisplay : MonoBehaviour
	{
		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text AmmoLabel;

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xD6E2D4", Offset = "0xD6E2D4", VA = "0xD6E2D4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xD6E3B8", Offset = "0xD6E3B8", VA = "0xD6E3B8")]
		public AmmoDisplay()
		{
		}
	}
	[Token(Token = "0x200044B")]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xD6E3C0", Offset = "0xD6E3C0", VA = "0xD6E3C0")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x200044C")]
	public class BulletInsert : MonoBehaviour
	{
		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AcceptBulletName;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip InsertSound;

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xD6E3C8", Offset = "0xD6E3C8", VA = "0xD6E3C8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xD6E610", Offset = "0xD6E610", VA = "0xD6E610")]
		public BulletInsert()
		{
		}
	}
	[Token(Token = "0x200044D")]
	public class MagazineSlide : MonoBehaviour
	{
		[Token(Token = "0x200044E")]
		[CompilerGenerated]
		private sealed class <EjectMagRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable ejectedMag;

			[Token(Token = "0x4001B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagazineSlide <>4__this;

			[Token(Token = "0x1700023D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016BF")]
				[Address(RVA = "0xD6F934", Offset = "0xD6F934", VA = "0xD6F934", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016C1")]
				[Address(RVA = "0xD6F97C", Offset = "0xD6F97C", VA = "0xD6F97C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016BC")]
			[Address(RVA = "0xD6F474", Offset = "0xD6F474", VA = "0xD6F474")]
			[DebuggerHidden]
			public <EjectMagRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x60016BD")]
			[Address(RVA = "0xD6F6AC", Offset = "0xD6F6AC", VA = "0xD6F6AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016BE")]
			[Address(RVA = "0xD6F6B0", Offset = "0xD6F6B0", VA = "0xD6F6B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016C0")]
			[Address(RVA = "0xD6F93C", Offset = "0xD6F93C", VA = "0xD6F93C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string AcceptableMagazineName;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable AttachedWeapon;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ClipSnapDistance;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ClipUnsnapDistance;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float EjectForce;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable HeldMagazine;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider HeldCollider;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MagazineDistance;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool magazineInPlace;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool lockedInPlace;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ClipAttachSound;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip ClipDetachSound;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabberArea grabClipArea;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastEjectTime;

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xD6E668", Offset = "0xD6E668", VA = "0xD6E668")]
		private void Start()
		{
		}

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xD6E770", Offset = "0xD6E770", VA = "0xD6E770")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xD6ED5C", Offset = "0xD6ED5C", VA = "0xD6ED5C")]
		private bool recentlyEjected()
		{
			return default(bool);
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xD6ED0C", Offset = "0xD6ED0C", VA = "0xD6ED0C")]
		private void moveMagazine(UnityEngine.Vector3 localPosition)
		{
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xD6EB44", Offset = "0xD6EB44", VA = "0xD6EB44")]
		public void CheckGrabClipInput()
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xD6ED8C", Offset = "0xD6ED8C", VA = "0xD6ED8C")]
		private void attachMagazine()
		{
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xD6F000", Offset = "0xD6F000", VA = "0xD6F000")]
		private Grabbable detachMagazine()
		{
			return null;
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xD6F3A0", Offset = "0xD6F3A0", VA = "0xD6F3A0")]
		public void EjectMagazine()
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xD6F3E4", Offset = "0xD6F3E4", VA = "0xD6F3E4")]
		[IteratorStateMachine(typeof(<EjectMagRoutine>d__23))]
		private IEnumerator EjectMagRoutine(Grabbable ejectedMag)
		{
			return null;
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xD6F2D4", Offset = "0xD6F2D4", VA = "0xD6F2D4")]
		public void OnGrabClipArea(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xD6F49C", Offset = "0xD6F49C", VA = "0xD6F49C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xD6F640", Offset = "0xD6F640", VA = "0xD6F640")]
		public MagazineSlide()
		{
		}
	}
	[Token(Token = "0x200044F")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x2000450")]
		[CompilerGenerated]
		private sealed class <CheckForRaycast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Projectile <>4__this;

			[Token(Token = "0x1700023F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016CC")]
				[Address(RVA = "0xD70250", Offset = "0xD70250", VA = "0xD70250", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000240")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016CE")]
				[Address(RVA = "0xD70298", Offset = "0xD70298", VA = "0xD70298", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016C9")]
			[Address(RVA = "0xD70124", Offset = "0xD70124", VA = "0xD70124")]
			[DebuggerHidden]
			public <CheckForRaycast>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60016CA")]
			[Address(RVA = "0xD7016C", Offset = "0xD7016C", VA = "0xD7016C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016CB")]
			[Address(RVA = "0xD70170", Offset = "0xD70170", VA = "0xD70170", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016CD")]
			[Address(RVA = "0xD70258", Offset = "0xD70258", VA = "0xD70258", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject HitFXPrefab;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _checkRaycast;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Damage;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AddRigidForce;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool StickToObject;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MinForceHit;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("Unity Event called when the projectile damages something")]
		public UnityEvent onDealtDamageEvent;

		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xD6F984", Offset = "0xD6F984", VA = "0xD6F984")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xD6F990", Offset = "0xD6F990", VA = "0xD6F990", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xD6FCA8", Offset = "0xD6FCA8", VA = "0xD6FCA8", Slot = "5")]
		public virtual void DoHitFX(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, Collider col)
		{
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xD6FE8C", Offset = "0xD6FE8C", VA = "0xD6FE8C", Slot = "6")]
		public virtual void MarkAsRaycastBullet()
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xD6FF28", Offset = "0xD6FF28", VA = "0xD6FF28", Slot = "7")]
		public virtual void DoRayCastProjectile()
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xD6FEB4", Offset = "0xD6FEB4", VA = "0xD6FEB4")]
		[IteratorStateMachine(typeof(<CheckForRaycast>d__13))]
		private IEnumerator CheckForRaycast()
		{
			return null;
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xD7014C", Offset = "0xD7014C", VA = "0xD7014C")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x2000451")]
	public class RaycastWeapon : GrabbableEvents
	{
		[Token(Token = "0x2000452")]
		[CompilerGenerated]
		private sealed class <doMuzzleFlash>d__67 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x17000241")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016E8")]
				[Address(RVA = "0xD71EF4", Offset = "0xD71EF4", VA = "0xD71EF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000242")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016EA")]
				[Address(RVA = "0xD71F3C", Offset = "0xD71F3C", VA = "0xD71F3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016E5")]
			[Address(RVA = "0xD71B48", Offset = "0xD71B48", VA = "0xD71B48")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__67(int <>1__state)
			{
			}

			[Token(Token = "0x60016E6")]
			[Address(RVA = "0xD71DBC", Offset = "0xD71DBC", VA = "0xD71DBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016E7")]
			[Address(RVA = "0xD71DC0", Offset = "0xD71DC0", VA = "0xD71DC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016E9")]
			[Address(RVA = "0xD71EFC", Offset = "0xD71EFC", VA = "0xD71EFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000453")]
		[CompilerGenerated]
		private sealed class <animateSlideAndEject>d__68 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x4001B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x4001B71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x4001B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityEngine.Vector3 <slideDestination>5__4;

			[Token(Token = "0x4001B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x17000243")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016EE")]
				[Address(RVA = "0xD726A0", Offset = "0xD726A0", VA = "0xD726A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000244")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016F0")]
				[Address(RVA = "0xD726E8", Offset = "0xD726E8", VA = "0xD726E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016EB")]
			[Address(RVA = "0xD71B70", Offset = "0xD71B70", VA = "0xD71B70")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__68(int <>1__state)
			{
			}

			[Token(Token = "0x60016EC")]
			[Address(RVA = "0xD71F44", Offset = "0xD71F44", VA = "0xD71F44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016ED")]
			[Address(RVA = "0xD71F48", Offset = "0xD71F48", VA = "0xD71F48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016EF")]
			[Address(RVA = "0xD726A8", Offset = "0xD726A8", VA = "0xD726A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("General : ")]
		public float MaxRange;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Damage;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[UnityEngine.Tooltip("Semi requires user to press trigger repeatedly, Auto to hold down")]
		public FiringType FiringMethod;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[UnityEngine.Tooltip("Ex : 0.2 = 5 Shots per second")]
		public float FiringRate;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastShotTime;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[UnityEngine.Tooltip("Amount of force to apply to a Rigidbody once damaged")]
		public float BulletImpactForce;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("Maximum amount of internal ammo this weapon can hold. Does not account for attached clips.  For example, a shotgun has internal ammo")]
		public float MaxInternalAmmo;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[UnityEngine.Tooltip("Set true to automatically chamber a new round on fire. False to require charging. Example : Bolt-Action Rifle does not auto chamber. ")]
		public bool AutoChamberRounds;

		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[UnityEngine.Tooltip("Does it matter if rounds are chambered or not. Does the user have to charge weapon as soon as ammo is inserted")]
		public bool MustChamberRounds;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		[UnityEngine.Tooltip("If true a projectile will always be used instead of a raycast")]
		[Header("Projectile Settings : ")]
		public bool AlwaysFireProjectile;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		[UnityEngine.Tooltip("If true the ProjectilePrefab will be instantiated during slowmo instead of using a raycast.")]
		public bool FireProjectileInSlowMo;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("How fast to fire the weapon during slowmo. Keep in mind this is affected by Time.timeScale")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[UnityEngine.Tooltip("Amount of force to apply to Projectile")]
		public float ShotForce;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Recoil : ")]
		[UnityEngine.Tooltip("How much force to apply to the tip of the barrel")]
		public UnityEngine.Vector3 RecoilForce;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[UnityEngine.Tooltip("Time in seconds to allow the gun to be springy")]
		public float RecoilDuration;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Raycast Options : ")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("Transform of trigger to animate rotation of")]
		[Header("Weapon Setup : ")]
		public Transform TriggerTransform;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[UnityEngine.Tooltip("Animate this back on fire")]
		public Transform SlideTransform;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Where our raycast or projectile will start from.")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[UnityEngine.Tooltip("Where to eject a bullet casing (optional)")]
		public Transform EjectPointTransform;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[UnityEngine.Tooltip("Transform of Chambered Bullet inside the weapon. Hide this when no bullet is chambered. (Optional)")]
		public Transform ChamberedBullet;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[UnityEngine.Tooltip("Make this active on fire. Randomize scale / rotation")]
		public UnityEngine.GameObject MuzzleFlashObject;

		[Token(Token = "0x4001B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[UnityEngine.Tooltip("Eject this at EjectPointTransform (optional)")]
		public UnityEngine.GameObject BulletCasingPrefab;

		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[UnityEngine.Tooltip("If time is slowed this object will be instantiated at muzzle point instead of using a raycast")]
		public UnityEngine.GameObject ProjectilePrefab;

		[Token(Token = "0x4001B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[UnityEngine.Tooltip("Hit Effects spawned at point of impact")]
		public UnityEngine.GameObject HitFXPrefab;

		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[UnityEngine.Tooltip("Play this sound on shoot")]
		public AudioClip GunShotSound;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[UnityEngine.Tooltip("Play this sound if no ammo and user presses trigger")]
		public AudioClip EmptySound;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Slide Configuration : ")]
		[UnityEngine.Tooltip("How far back to move the slide on fire")]
		public float SlideDistance;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[UnityEngine.Tooltip("Should the slide be forced back if we shoot the last bullet")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[UnityEngine.Tooltip("How fast to move back the slide on fire. Default : 1")]
		public float slideSpeed;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float minSlideDistance;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[UnityEngine.Tooltip("Controller Input used to eject clip")]
		[Header("Inputs : ")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[UnityEngine.Tooltip("Controller Input used to release the charging mechanism.")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("Shown for Debug : ")]
		[UnityEngine.Tooltip("Is there currently a bullet chambered and ready to be fired")]
		public bool BulletInChamber;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		[UnityEngine.Tooltip("Is there currently a bullet chambered and that must be ejected")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Header("Events")]
		[UnityEngine.Tooltip("Unity Event called when Shoot() method is successfully called")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[UnityEngine.Tooltip("Unity Event called when something attaches ammo to the weapon")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[UnityEngine.Tooltip("Unity Event called when something detaches ammo from the weapon")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[UnityEngine.Tooltip("Unity Event called when the charging handle is successfully pulled back on the weapon")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[UnityEngine.Tooltip("Unity Event called when weapon damaged something")]
		public FloatEvent onDealtDamageEvent;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[UnityEngine.Tooltip("Passes along Raycast Hit info whenever a Raycast hit is successfully detected. Use this to display fx, add force, etc.")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool slideForcedBack;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private WeaponSlide ws;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool readyToShoot;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		private bool playedEmptySound;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private IEnumerator shotRoutine;

		[Token(Token = "0x60016CF")]
		[Address(RVA = "0xD702A0", Offset = "0xD702A0", VA = "0xD702A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60016D0")]
		[Address(RVA = "0xD70438", Offset = "0xD70438", VA = "0xD70438", Slot = "15")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xD70560", Offset = "0xD70560", VA = "0xD70560")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xD70668", Offset = "0xD70668", VA = "0xD70668")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xD70770", Offset = "0xD70770", VA = "0xD70770", Slot = "26")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xD708F0", Offset = "0xD708F0", VA = "0xD708F0", Slot = "27")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xD709A0", Offset = "0xD709A0", VA = "0xD709A0", Slot = "28")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xD710E0", Offset = "0xD710E0", VA = "0xD710E0", Slot = "29")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xD71260", Offset = "0xD71260", VA = "0xD71260", Slot = "30")]
		public virtual void OnRaycastHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xD71518", Offset = "0xD71518", VA = "0xD71518", Slot = "31")]
		public virtual void ApplyParticleFX(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xD71678", Offset = "0xD71678", VA = "0xD71678", Slot = "32")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0xD716A0", Offset = "0xD716A0", VA = "0xD716A0", Slot = "33")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xD716C8", Offset = "0xD716C8", VA = "0xD716C8", Slot = "34")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0xD71734", Offset = "0xD71734", VA = "0xD71734")]
		private void removeBullet()
		{
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xD7038C", Offset = "0xD7038C", VA = "0xD7038C")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xD70F28", Offset = "0xD70F28", VA = "0xD70F28")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xD71814", Offset = "0xD71814", VA = "0xD71814")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xD718FC", Offset = "0xD718FC", VA = "0xD718FC", Slot = "35")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xD719A4", Offset = "0xD719A4", VA = "0xD719A4", Slot = "36")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xD7106C", Offset = "0xD7106C", VA = "0xD7106C")]
		[IteratorStateMachine(typeof(<doMuzzleFlash>d__67))]
		private IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0xD70FF8", Offset = "0xD70FF8", VA = "0xD70FF8")]
		[IteratorStateMachine(typeof(<animateSlideAndEject>d__68))]
		private IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0xD71B98", Offset = "0xD71B98", VA = "0xD71B98")]
		public RaycastWeapon()
		{
		}
	}
	[Token(Token = "0x2000454")]
	public enum FiringType
	{
		[Token(Token = "0x4001B75")]
		Semi,
		[Token(Token = "0x4001B76")]
		Automatic
	}
	[Token(Token = "0x2000455")]
	public enum ReloadType
	{
		[Token(Token = "0x4001B78")]
		InfiniteAmmo,
		[Token(Token = "0x4001B79")]
		ManualClip
	}
	[Token(Token = "0x2000456")]
	public class WeaponSlide : MonoBehaviour
	{
		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinLocalZ;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxLocalZ;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool slidingBack;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool LockedBack;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SlideReleaseSound;

		[Token(Token = "0x4001B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip LockedBackSound;

		[Token(Token = "0x4001B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ZeroMassWhenNotHeld;

		[Token(Token = "0x4001B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4001B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable parentGrabbable;

		[Token(Token = "0x4001B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.Vector3 initialLocalPos;

		[Token(Token = "0x4001B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x4001B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float initialMass;

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0xD726F0", Offset = "0xD726F0", VA = "0xD726F0")]
		private void Start()
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0xD728F0", Offset = "0xD728F0", VA = "0xD728F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xD72B78", Offset = "0xD72B78", VA = "0xD72B78")]
		public void OnSliderChange(float sliderValue)
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xD72BE0", Offset = "0xD72BE0", VA = "0xD72BE0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0xD70F68", Offset = "0xD70F68", VA = "0xD70F68")]
		public void LockBack()
		{
		}

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0xD707F0", Offset = "0xD707F0", VA = "0xD707F0")]
		public void UnlockBack()
		{
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xD72A58", Offset = "0xD72A58", VA = "0xD72A58")]
		private void onSlideBack()
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0xD72B20", Offset = "0xD72B20", VA = "0xD72B20")]
		private void onSlideForward()
		{
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0xD72CBC", Offset = "0xD72CBC", VA = "0xD72CBC")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0xD72DF0", Offset = "0xD72DF0", VA = "0xD72DF0")]
		public WeaponSlide()
		{
		}
	}
	[Token(Token = "0x2000457")]
	public class DestroyMagic : MonoBehaviour
	{
		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool UltrasonicOff;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider UltrasonicCollider;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject ballMagic;

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0xD72E10", Offset = "0xD72E10", VA = "0xD72E10")]
		private void Start()
		{
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0xD72E58", Offset = "0xD72E58", VA = "0xD72E58")]
		private void Update()
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xD72F14", Offset = "0xD72F14", VA = "0xD72F14")]
		public DestroyMagic()
		{
		}
	}
	[Token(Token = "0x2000458")]
	public class MenuToggle : MonoBehaviour
	{
		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool SlotsOn;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool MenuOn;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public static bool InventroyMenuOn;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject GameMenuUI;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject InventroyMenu;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject looksButton;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.GameObject enableInvasion;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.GameObject disableInvasion;

		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool isInvasionOn;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool isLeftHand;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool isRightHand;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEngine.GameObject handRPlace;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEngine.GameObject handLPlace;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.GameObject inventroyPlace;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEngine.GameObject inventroyPlaceL;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEngine.GameObject handLParent;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEngine.GameObject handRParent;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEngine.GameObject handL;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEngine.GameObject handR;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UIPointer handUIL;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UIPointer handUIR;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEngine.GameObject handToolhex;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEngine.GameObject handCamera;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool isSelfie;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEngine.GameObject looksMenu;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool looksMenuIsOn;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool settingsMenuIsOn;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		public bool activeHandLIsOn;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UnityEngine.GameObject[] handMenus;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool exitMenuisOn;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool saveMenuIsOn;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public bool inventroyIsOn;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public UnityEngine.GameObject toolTipsMenu;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool toolTipsisOn;

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xD72F1C", Offset = "0xD72F1C", VA = "0xD72F1C")]
		private void Start()
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xD736E8", Offset = "0xD736E8", VA = "0xD736E8")]
		public void TurnOnSaveMenu()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xD73818", Offset = "0xD73818", VA = "0xD73818")]
		public void TurnOnInventroy()
		{
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0xD73948", Offset = "0xD73948", VA = "0xD73948")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xD737B4", Offset = "0xD737B4", VA = "0xD737B4")]
		public void Off()
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xD7374C", Offset = "0xD7374C", VA = "0xD7374C")]
		public void On()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xD738E4", Offset = "0xD738E4", VA = "0xD738E4")]
		public void InventroyOff()
		{
		}

		[Token(Token = "0x6001705")]
		[Address(RVA = "0xD7387C", Offset = "0xD7387C", VA = "0xD7387C")]
		public void InventroyOn()
		{
		}

		[Token(Token = "0x6001706")]
		[Address(RVA = "0xD73950", Offset = "0xD73950", VA = "0xD73950")]
		public void LoadMenu()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xD739B8", Offset = "0xD739B8", VA = "0xD739B8")]
		public void EnableInvasion()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xD73A90", Offset = "0xD73A90", VA = "0xD73A90")]
		public void LoadWorld1()
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xD73AF8", Offset = "0xD73AF8", VA = "0xD73AF8")]
		public void Quit()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xD73100", Offset = "0xD73100", VA = "0xD73100")]
		public void UsingLeftHand()
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xD733F0", Offset = "0xD733F0", VA = "0xD733F0")]
		public void UsingRightHand()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xD73B00", Offset = "0xD73B00", VA = "0xD73B00")]
		public void SwitchCamera()
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xD73D04", Offset = "0xD73D04", VA = "0xD73D04")]
		public void ToggleActiveHand()
		{
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xD73D48", Offset = "0xD73D48", VA = "0xD73D48")]
		public void ToggleLooksMenu()
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xD73E3C", Offset = "0xD73E3C", VA = "0xD73E3C")]
		public void ToggleSettingsMenu()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xD73F30", Offset = "0xD73F30", VA = "0xD73F30")]
		public void ToggleExitMenu()
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xD74024", Offset = "0xD74024", VA = "0xD74024")]
		public void ToggleSaveMenu()
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xD7410C", Offset = "0xD7410C", VA = "0xD7410C")]
		public void ToggleInventory()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xD74280", Offset = "0xD74280", VA = "0xD74280")]
		public void ToggleTooltips()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xD74318", Offset = "0xD74318", VA = "0xD74318")]
		public MenuToggle()
		{
		}
	}
	[Token(Token = "0x2000459")]
	public class ModelToggle : MonoBehaviour
	{
		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool SlotsOn;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool MenuOn;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public static bool InventroyMenuOn;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject Model1;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject Model2;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject Model3;

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xD74320", Offset = "0xD74320", VA = "0xD74320")]
		private void Start()
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xD7436C", Offset = "0xD7436C", VA = "0xD7436C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xD7443C", Offset = "0xD7443C", VA = "0xD7443C")]
		public ModelToggle()
		{
		}
	}
	[Token(Token = "0x200045A")]
	public class SlotsToggle : MonoBehaviour
	{
		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool SlotsOn;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool MenuOn;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public static bool InventroyMenuOn;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject GameMenuUI;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject InventroyMenu;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject Slots;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.GameObject Slot;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.GameObject PauseMenuUI2;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool grabbed;

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xD74444", Offset = "0xD74444", VA = "0xD74444")]
		private void Start()
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0xD7447C", Offset = "0xD7447C", VA = "0xD7447C")]
		private void Update()
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xD74480", Offset = "0xD74480", VA = "0xD74480")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xD744FC", Offset = "0xD744FC", VA = "0xD744FC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xD74500", Offset = "0xD74500", VA = "0xD74500")]
		public void SlotOff()
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0xD74564", Offset = "0xD74564", VA = "0xD74564")]
		public void SlotOn()
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0xD745CC", Offset = "0xD745CC", VA = "0xD745CC")]
		public SlotsToggle()
		{
		}
	}
	[Token(Token = "0x200045B")]
	public class SlotToggleOnStay : MonoBehaviour
	{
		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool SlotsOn;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool MenuOn;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public static bool InventroyMenuOn;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.GameObject GameMenuUI;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.GameObject InventroyMenu;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.GameObject Slots;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.GameObject Slot;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.GameObject PauseMenuUI2;

		[Token(Token = "0x600171F")]
		[Address(RVA = "0xD745D4", Offset = "0xD745D4", VA = "0xD745D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0xD7460C", Offset = "0xD7460C", VA = "0xD7460C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0xD74610", Offset = "0xD74610", VA = "0xD74610")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0xD7468C", Offset = "0xD7468C", VA = "0xD7468C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0xD74708", Offset = "0xD74708", VA = "0xD74708")]
		public void SlotOff()
		{
		}

		[Token(Token = "0x6001724")]
		[Address(RVA = "0xD7476C", Offset = "0xD7476C", VA = "0xD7476C")]
		public void SlotOn()
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0xD747D4", Offset = "0xD747D4", VA = "0xD747D4")]
		public SlotToggleOnStay()
		{
		}
	}
	[Token(Token = "0x200045C")]
	public class SpecialMovmentLocomotion : MonoBehaviour
	{
		[Token(Token = "0x6001726")]
		[Address(RVA = "0xD747DC", Offset = "0xD747DC", VA = "0xD747DC")]
		public SpecialMovmentLocomotion()
		{
		}
	}
}
namespace BayatGames.SaveGameFree
{
	[Token(Token = "0x200045D")]
	public enum SaveGamePath
	{
		[Token(Token = "0x4001BC5")]
		PersistentDataPath,
		[Token(Token = "0x4001BC6")]
		DataPath
	}
	[Token(Token = "0x200045E")]
	public static class SaveGame
	{
		[Token(Token = "0x200045F")]
		public delegate void SaveHandler(object obj, string identifier, bool encode, string password, ISaveGameSerializer serializer, ISaveGameEncoder encoder, Encoding encoding, SaveGamePath path);

		[Token(Token = "0x2000460")]
		public delegate void LoadHandler(object loadedObj, string identifier, bool encode, string password, ISaveGameSerializer serializer, ISaveGameEncoder encoder, Encoding encoding, SaveGamePath path);

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static SaveHandler SaveCallback;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static LoadHandler LoadCallback;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static ISaveGameSerializer m_Serializer;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static ISaveGameEncoder m_Encoder;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Encoding m_Encoding;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static bool m_Encode;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static SaveGamePath m_SavePath;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string m_EncodePassword;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static bool m_LogError;

		[Token(Token = "0x17000245")]
		public static ISaveGameSerializer Serializer
		{
			[Token(Token = "0x600172B")]
			[Address(RVA = "0xD74B4C", Offset = "0xD74B4C", VA = "0xD74B4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600172C")]
			[Address(RVA = "0xD74C20", Offset = "0xD74C20", VA = "0xD74C20")]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public static ISaveGameEncoder Encoder
		{
			[Token(Token = "0x600172D")]
			[Address(RVA = "0xD74C80", Offset = "0xD74C80", VA = "0xD74C80")]
			get
			{
				return null;
			}
			[Token(Token = "0x600172E")]
			[Address(RVA = "0xD74D54", Offset = "0xD74D54", VA = "0xD74D54")]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public static Encoding DefaultEncoding
		{
			[Token(Token = "0x600172F")]
			[Address(RVA = "0xD74DB4", Offset = "0xD74DB4", VA = "0xD74DB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001730")]
			[Address(RVA = "0xD74E60", Offset = "0xD74E60", VA = "0xD74E60")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public static bool Encode
		{
			[Token(Token = "0x6001731")]
			[Address(RVA = "0xD74EC0", Offset = "0xD74EC0", VA = "0xD74EC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001732")]
			[Address(RVA = "0xD74F18", Offset = "0xD74F18", VA = "0xD74F18")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public static SaveGamePath SavePath
		{
			[Token(Token = "0x6001733")]
			[Address(RVA = "0xD74F74", Offset = "0xD74F74", VA = "0xD74F74")]
			get
			{
				return default(SaveGamePath);
			}
			[Token(Token = "0x6001734")]
			[Address(RVA = "0xD74FCC", Offset = "0xD74FCC", VA = "0xD74FCC")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public static string EncodePassword
		{
			[Token(Token = "0x6001735")]
			[Address(RVA = "0xD75028", Offset = "0xD75028", VA = "0xD75028")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001736")]
			[Address(RVA = "0xD75080", Offset = "0xD75080", VA = "0xD75080")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public static bool LogError
		{
			[Token(Token = "0x6001737")]
			[Address(RVA = "0xD750E0", Offset = "0xD750E0", VA = "0xD750E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001738")]
			[Address(RVA = "0xD75138", Offset = "0xD75138", VA = "0xD75138")]
			set
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public static event SaveHandler OnSaved
		{
			[Token(Token = "0x6001727")]
			[Address(RVA = "0xD747E4", Offset = "0xD747E4", VA = "0xD747E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001728")]
			[Address(RVA = "0xD748BC", Offset = "0xD748BC", VA = "0xD748BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public static event LoadHandler OnLoaded
		{
			[Token(Token = "0x6001729")]
			[Address(RVA = "0xD74994", Offset = "0xD74994", VA = "0xD74994")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600172A")]
			[Address(RVA = "0xD74A70", Offset = "0xD74A70", VA = "0xD74A70")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001739")]
		public static void Save<T>(string identifier, T obj)
		{
		}

		[Token(Token = "0x600173A")]
		public static void Save<T>(string identifier, T obj, bool encode)
		{
		}

		[Token(Token = "0x600173B")]
		public static void Save<T>(string identifier, T obj, string encodePassword)
		{
		}

		[Token(Token = "0x600173C")]
		public static void Save<T>(string identifier, T obj, ISaveGameSerializer serializer)
		{
		}

		[Token(Token = "0x600173D")]
		public static void Save<T>(string identifier, T obj, ISaveGameEncoder encoder)
		{
		}

		[Token(Token = "0x600173E")]
		public static void Save<T>(string identifier, T obj, Encoding encoding)
		{
		}

		[Token(Token = "0x600173F")]
		public static void Save<T>(string identifier, T obj, SaveGamePath savePath)
		{
		}

		[Token(Token = "0x6001740")]
		public static void Save<T>(string identifier, T obj, bool encode, string password, ISaveGameSerializer serializer, ISaveGameEncoder encoder, Encoding encoding, SaveGamePath path)
		{
		}

		[Token(Token = "0x6001741")]
		public static T Load<T>(string identifier)
		{
			return (T)null;
		}

		[Token(Token = "0x6001742")]
		public static T Load<T>(string identifier, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6001743")]
		public static T Load<T>(string identifier, bool encode, string encodePassword)
		{
			return (T)null;
		}

		[Token(Token = "0x6001744")]
		public static T Load<T>(string identifier, ISaveGameSerializer serializer)
		{
			return (T)null;
		}

		[Token(Token = "0x6001745")]
		public static T Load<T>(string identifier, ISaveGameEncoder encoder)
		{
			return (T)null;
		}

		[Token(Token = "0x6001746")]
		public static T Load<T>(string identifier, Encoding encoding)
		{
			return (T)null;
		}

		[Token(Token = "0x6001747")]
		public static T Load<T>(string identifier, SaveGamePath savePath)
		{
			return (T)null;
		}

		[Token(Token = "0x6001748")]
		public static T Load<T>(string identifier, T defaultValue, bool encode)
		{
			return (T)null;
		}

		[Token(Token = "0x6001749")]
		public static T Load<T>(string identifier, T defaultValue, string encodePassword)
		{
			return (T)null;
		}

		[Token(Token = "0x600174A")]
		public static T Load<T>(string identifier, T defaultValue, ISaveGameSerializer serializer)
		{
			return (T)null;
		}

		[Token(Token = "0x600174B")]
		public static T Load<T>(string identifier, T defaultValue, ISaveGameEncoder encoder)
		{
			return (T)null;
		}

		[Token(Token = "0x600174C")]
		public static T Load<T>(string identifier, T defaultValue, Encoding encoding)
		{
			return (T)null;
		}

		[Token(Token = "0x600174D")]
		public static T Load<T>(string identifier, T defaultValue, SaveGamePath savePath)
		{
			return (T)null;
		}

		[Token(Token = "0x600174E")]
		public static T Load<T>(string identifier, T defaultValue, bool encode, string password, ISaveGameSerializer serializer, ISaveGameEncoder encoder, Encoding encoding, SaveGamePath path)
		{
			return (T)null;
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0xD75194", Offset = "0xD75194", VA = "0xD75194")]
		public static bool Exists(string identifier)
		{
			return default(bool);
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0xD75224", Offset = "0xD75224", VA = "0xD75224")]
		public static bool Exists(string identifier, SaveGamePath path)
		{
			return default(bool);
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xD75500", Offset = "0xD75500", VA = "0xD75500")]
		public static void Delete(string identifier)
		{
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xD75590", Offset = "0xD75590", VA = "0xD75590")]
		public static void Delete(string identifier, SaveGamePath path)
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xD7570C", Offset = "0xD7570C", VA = "0xD7570C")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xD7591C", Offset = "0xD7591C", VA = "0xD7591C")]
		public static void Clear(SaveGamePath path)
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xD75970", Offset = "0xD75970", VA = "0xD75970")]
		public static void DeleteAll()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xD75794", Offset = "0xD75794", VA = "0xD75794")]
		public static void DeleteAll(SaveGamePath path)
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xD759F8", Offset = "0xD759F8", VA = "0xD759F8")]
		public static FileInfo[] GetFiles()
		{
			return null;
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xD75C34", Offset = "0xD75C34", VA = "0xD75C34")]
		public static FileInfo[] GetFiles(string identifier)
		{
			return null;
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0xD75AA4", Offset = "0xD75AA4", VA = "0xD75AA4")]
		public static FileInfo[] GetFiles(string identifier, SaveGamePath path)
		{
			return null;
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0xD75CC4", Offset = "0xD75CC4", VA = "0xD75CC4")]
		public static DirectoryInfo[] GetDirectories()
		{
			return null;
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0xD75F00", Offset = "0xD75F00", VA = "0xD75F00")]
		public static DirectoryInfo[] GetDirectories(string identifier)
		{
			return null;
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0xD75D70", Offset = "0xD75D70", VA = "0xD75D70")]
		public static DirectoryInfo[] GetDirectories(string identifier, SaveGamePath path)
		{
			return null;
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0xD7547C", Offset = "0xD7547C", VA = "0xD7547C")]
		public static bool IOSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xD75384", Offset = "0xD75384", VA = "0xD75384")]
		public static bool IsFilePath(string str)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000461")]
	[AddComponentMenu("Save Game Free/Auto Save")]
	public class SaveGameAuto : MonoBehaviour
	{
		[Token(Token = "0x2000462")]
		public enum SaveFormat
		{
			[Token(Token = "0x4001BF3")]
			XML,
			[Token(Token = "0x4001BF4")]
			JSON,
			[Token(Token = "0x4001BF5")]
			Binary
		}

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[UnityEngine.Tooltip("You must specify a value for this to be able to save it.")]
		[Space]
		[Header("Settings")]
		public string positionIdentifier;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[UnityEngine.Tooltip("You must specify a value for this to be able to save it.")]
		public string rotationIdentifier;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[UnityEngine.Tooltip("You must specify a value for this to be able to save it.")]
		public string scaleIdentifier;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[UnityEngine.Tooltip("Encode the data?")]
		public bool encode;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[UnityEngine.Tooltip("If you leave it blank this will reset to it's default value.")]
		public string encodePassword;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[UnityEngine.Tooltip("Which serialization format?")]
		public SaveFormat format;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[UnityEngine.Tooltip("If you leave it blank this will reset to it's default value.")]
		public ISaveGameSerializer serializer;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[UnityEngine.Tooltip("If you leave it blank this will reset to it's default value.")]
		public ISaveGameEncoder encoder;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[UnityEngine.Tooltip("If you leave it blank this will reset to it's default value.")]
		public Encoding encoding;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[UnityEngine.Tooltip("Where to save? (PersistentDataPath highly recommended).")]
		public SaveGamePath savePath;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[UnityEngine.Tooltip("Reset the empty fields to their default value.")]
		public bool resetBlanks;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		[Header("What to Save?")]
		[Space]
		[UnityEngine.Tooltip("Save Position?")]
		public bool savePosition;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		[UnityEngine.Tooltip("Save Rotation?")]
		public bool saveRotation;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		[UnityEngine.Tooltip("Save Scale?")]
		public bool saveScale;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Defaults")]
		[Space]
		[UnityEngine.Tooltip("Default Position Value")]
		public UnityEngine.Vector3 defaultPosition;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[UnityEngine.Tooltip("Default Rotation Value")]
		public UnityEngine.Vector3 defaultRotation;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[UnityEngine.Tooltip("Default Scale Value")]
		public UnityEngine.Vector3 defaultScale;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Header("Save Events")]
		[Space]
		[UnityEngine.Tooltip("Save on Awake()")]
		public bool saveOnAwake;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[UnityEngine.Tooltip("Save on Start()")]
		public bool saveOnStart;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8E")]
		[UnityEngine.Tooltip("Save on OnEnable()")]
		public bool saveOnEnable;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8F")]
		[UnityEngine.Tooltip("Save on OnDisable()")]
		public bool saveOnDisable;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[UnityEngine.Tooltip("Save on OnApplicationQuit()")]
		public bool saveOnApplicationQuit;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[UnityEngine.Tooltip("Save on OnApplicationPause()")]
		public bool saveOnApplicationPause;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[Space]
		[UnityEngine.Tooltip("Load on Awake()")]
		[Header("Load Events")]
		public bool loadOnAwake;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
		[UnityEngine.Tooltip("Load on Start()")]
		public bool loadOnStart;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[UnityEngine.Tooltip("Load on OnEnable()")]
		public bool loadOnEnable;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int prefabIndex;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		protected InputField identifierField;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		protected UnityEngine.GameObject[] prefabs;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		protected Material[] availableMaterials;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		protected List<UnityEngine.GameObject> spawnedInstances;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		protected Transform container;

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xD7654C", Offset = "0xD7654C", VA = "0xD7654C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xD76648", Offset = "0xD76648", VA = "0xD76648", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xD7668C", Offset = "0xD7668C", VA = "0xD7668C", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xD766D0", Offset = "0xD766D0", VA = "0xD766D0", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xD766E8", Offset = "0xD766E8", VA = "0xD766E8", Slot = "8")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xD76700", Offset = "0xD76700", VA = "0xD76700", Slot = "9")]
		protected virtual void OnApplicationPause()
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xD76718", Offset = "0xD76718", VA = "0xD76718")]
		public UnityEngine.GameObject SpawnNewObject(UnityEngine.Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xD76908", Offset = "0xD76908", VA = "0xD76908")]
		public void DestroySpawnedObjects()
		{
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xD768AC", Offset = "0xD768AC", VA = "0xD768AC")]
		public UnityEngine.GameObject GetPrefab()
		{
			return null;
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xD76A04", Offset = "0xD76A04", VA = "0xD76A04")]
		public Material GetMaterial()
		{
			return null;
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xD76A44", Offset = "0xD76A44", VA = "0xD76A44", Slot = "10")]
		public virtual void Save()
		{
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xD76CA8", Offset = "0xD76CA8", VA = "0xD76CA8", Slot = "11")]
		public virtual void Load()
		{
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xD76F50", Offset = "0xD76F50", VA = "0xD76F50")]
		public SaveGameAuto()
		{
		}
	}
	[Token(Token = "0x2000463")]
	public class SaveGameWeb
	{
		[Token(Token = "0x2000464")]
		[CompilerGenerated]
		private sealed class <Save>d__82<T> : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4001C0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private object <>2__current;

			[Token(Token = "0x4001C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SaveGameWeb <>4__this;

			[Token(Token = "0x4001C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T obj;

			[Token(Token = "0x4001C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string identifier;

			[Token(Token = "0x1700025F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017AA")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000260")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017AC")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017A7")]
			[DebuggerHidden]
			public <Save>d__82(int <>1__state)
			{
			}

			[Token(Token = "0x60017A8")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017A9")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017AB")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000465")]
		[CompilerGenerated]
		private sealed class <Download>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SaveGameWeb <>4__this;

			[Token(Token = "0x4001C11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string identifier;

			[Token(Token = "0x17000261")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017B0")]
				[Address(RVA = "0xD784E0", Offset = "0xD784E0", VA = "0xD784E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000262")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017B2")]
				[Address(RVA = "0xD78528", Offset = "0xD78528", VA = "0xD78528", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017AD")]
			[Address(RVA = "0xD78110", Offset = "0xD78110", VA = "0xD78110")]
			[DebuggerHidden]
			public <Download>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x60017AE")]
			[Address(RVA = "0xD783BC", Offset = "0xD783BC", VA = "0xD783BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017AF")]
			[Address(RVA = "0xD783C0", Offset = "0xD783C0", VA = "0xD783C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017B1")]
			[Address(RVA = "0xD784E8", Offset = "0xD784E8", VA = "0xD784E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000466")]
		[CompilerGenerated]
		private sealed class <Send>d__86 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string identifier;

			[Token(Token = "0x4001C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string action;

			[Token(Token = "0x4001C16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SaveGameWeb <>4__this;

			[Token(Token = "0x4001C17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string data;

			[Token(Token = "0x17000263")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017B6")]
				[Address(RVA = "0xD7882C", Offset = "0xD7882C", VA = "0xD7882C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000264")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017B8")]
				[Address(RVA = "0xD78874", Offset = "0xD78874", VA = "0xD78874", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017B3")]
			[Address(RVA = "0xD781F8", Offset = "0xD781F8", VA = "0xD781F8")]
			[DebuggerHidden]
			public <Send>d__86(int <>1__state)
			{
			}

			[Token(Token = "0x60017B4")]
			[Address(RVA = "0xD78530", Offset = "0xD78530", VA = "0xD78530", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017B5")]
			[Address(RVA = "0xD78534", Offset = "0xD78534", VA = "0xD78534", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017B7")]
			[Address(RVA = "0xD78834", Offset = "0xD78834", VA = "0xD78834", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string m_DefaultUsername;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string m_DefaultPassword;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string m_DefaultURL;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool m_DefaultEncode;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static string m_DefaultEncodePassword;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static ISaveGameSerializer m_DefaultSerializer;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static ISaveGameEncoder m_DefaultEncoder;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Encoding m_DefaultEncoding;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string m_Username;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string m_Password;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected string m_URL;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool m_Encode;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected string m_EncodePassword;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected ISaveGameSerializer m_Serializer;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected ISaveGameEncoder m_Encoder;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Encoding m_Encoding;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected UnityWebRequest m_Request;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool m_IsError;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected string m_Error;

		[Token(Token = "0x1700024C")]
		public static string DefaultUsername
		{
			[Token(Token = "0x6001775")]
			[Address(RVA = "0xD77174", Offset = "0xD77174", VA = "0xD77174")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001776")]
			[Address(RVA = "0xD771CC", Offset = "0xD771CC", VA = "0xD771CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public static string DefaultPassword
		{
			[Token(Token = "0x6001777")]
			[Address(RVA = "0xD77234", Offset = "0xD77234", VA = "0xD77234")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001778")]
			[Address(RVA = "0xD7728C", Offset = "0xD7728C", VA = "0xD7728C")]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public static string DefaultURL
		{
			[Token(Token = "0x6001779")]
			[Address(RVA = "0xD772EC", Offset = "0xD772EC", VA = "0xD772EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177A")]
			[Address(RVA = "0xD77344", Offset = "0xD77344", VA = "0xD77344")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public static bool DefaultEncode
		{
			[Token(Token = "0x600177B")]
			[Address(RVA = "0xD773A4", Offset = "0xD773A4", VA = "0xD773A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600177C")]
			[Address(RVA = "0xD773FC", Offset = "0xD773FC", VA = "0xD773FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public static string DefaultEncodePassword
		{
			[Token(Token = "0x600177D")]
			[Address(RVA = "0xD77458", Offset = "0xD77458", VA = "0xD77458")]
			get
			{
				return null;
			}
			[Token(Token = "0x600177E")]
			[Address(RVA = "0xD774B0", Offset = "0xD774B0", VA = "0xD774B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public static ISaveGameSerializer DefaultSerializer
		{
			[Token(Token = "0x600177F")]
			[Address(RVA = "0xD77510", Offset = "0xD77510", VA = "0xD77510")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001780")]
			[Address(RVA = "0xD775DC", Offset = "0xD775DC", VA = "0xD775DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public static ISaveGameEncoder DefaultEncoder
		{
			[Token(Token = "0x6001781")]
			[Address(RVA = "0xD7763C", Offset = "0xD7763C", VA = "0xD7763C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001782")]
			[Address(RVA = "0xD77708", Offset = "0xD77708", VA = "0xD77708")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public static Encoding DefaultEncoding
		{
			[Token(Token = "0x6001783")]
			[Address(RVA = "0xD77768", Offset = "0xD77768", VA = "0xD77768")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001784")]
			[Address(RVA = "0xD77814", Offset = "0xD77814", VA = "0xD77814")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public virtual string Username
		{
			[Token(Token = "0x6001785")]
			[Address(RVA = "0xD77874", Offset = "0xD77874", VA = "0xD77874", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001786")]
			[Address(RVA = "0xD7787C", Offset = "0xD7787C", VA = "0xD7787C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public virtual string Password
		{
			[Token(Token = "0x6001787")]
			[Address(RVA = "0xD77884", Offset = "0xD77884", VA = "0xD77884", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001788")]
			[Address(RVA = "0xD7788C", Offset = "0xD7788C", VA = "0xD7788C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public virtual string URL
		{
			[Token(Token = "0x6001789")]
			[Address(RVA = "0xD77894", Offset = "0xD77894", VA = "0xD77894", Slot = "8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600178A")]
			[Address(RVA = "0xD7789C", Offset = "0xD7789C", VA = "0xD7789C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000257")]
		public virtual bool Encode
		{
			[Token(Token = "0x600178B")]
			[Address(RVA = "0xD778A4", Offset = "0xD778A4", VA = "0xD778A4", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600178C")]
			[Address(RVA = "0xD778AC", Offset = "0xD778AC", VA = "0xD778AC", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public virtual string EncodePassword
		{
			[Token(Token = "0x600178D")]
			[Address(RVA = "0xD778B8", Offset = "0xD778B8", VA = "0xD778B8", Slot = "12")]
			get
			{
				return null;
			}
			[Token(Token = "0x600178E")]
			[Address(RVA = "0xD778C0", Offset = "0xD778C0", VA = "0xD778C0", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x17000259")]
		public virtual ISaveGameSerializer Serializer
		{
			[Token(Token = "0x600178F")]
			[Address(RVA = "0xD778C8", Offset = "0xD778C8", VA = "0xD778C8", Slot = "14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001790")]
			[Address(RVA = "0xD77940", Offset = "0xD77940", VA = "0xD77940", Slot = "15")]
			set
			{
			}
		}

		[Token(Token = "0x1700025A")]
		public virtual ISaveGameEncoder Encoder
		{
			[Token(Token = "0x6001791")]
			[Address(RVA = "0xD77948", Offset = "0xD77948", VA = "0xD77948", Slot = "16")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001792")]
			[Address(RVA = "0xD779C0", Offset = "0xD779C0", VA = "0xD779C0", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x1700025B")]
		public virtual Encoding Encoding
		{
			[Token(Token = "0x6001793")]
			[Address(RVA = "0xD779C8", Offset = "0xD779C8", VA = "0xD779C8", Slot = "18")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001794")]
			[Address(RVA = "0xD779F8", Offset = "0xD779F8", VA = "0xD779F8", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700025C")]
		public virtual UnityWebRequest Request
		{
			[Token(Token = "0x6001795")]
			[Address(RVA = "0xD77A00", Offset = "0xD77A00", VA = "0xD77A00", Slot = "20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025D")]
		public virtual bool IsError
		{
			[Token(Token = "0x6001796")]
			[Address(RVA = "0xD77A08", Offset = "0xD77A08", VA = "0xD77A08", Slot = "21")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025E")]
		public virtual string Error
		{
			[Token(Token = "0x6001797")]
			[Address(RVA = "0xD77A10", Offset = "0xD77A10", VA = "0xD77A10", Slot = "22")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0xD77A18", Offset = "0xD77A18", VA = "0xD77A18")]
		public SaveGameWeb()
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0xD77AA8", Offset = "0xD77AA8", VA = "0xD77AA8")]
		public SaveGameWeb(string username)
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0xD77B48", Offset = "0xD77B48", VA = "0xD77B48")]
		public SaveGameWeb(string username, string password)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xD77BF0", Offset = "0xD77BF0", VA = "0xD77BF0")]
		public SaveGameWeb(string username, string password, string url)
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xD77CA8", Offset = "0xD77CA8", VA = "0xD77CA8")]
		public SaveGameWeb(string username, string password, string url, bool encode)
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xD77D68", Offset = "0xD77D68", VA = "0xD77D68")]
		public SaveGameWeb(string username, string password, string url, bool encode, string encodePassword)
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xD77E04", Offset = "0xD77E04", VA = "0xD77E04")]
		public SaveGameWeb(string username, string password, string url, bool encode, string encodePassword, ISaveGameSerializer serializer)
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0xD77EB4", Offset = "0xD77EB4", VA = "0xD77EB4")]
		public SaveGameWeb(string username, string password, string url, bool encode, string encodePassword, ISaveGameSerializer serializer, ISaveGameEncoder encoder)
		{
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xD77F74", Offset = "0xD77F74", VA = "0xD77F74")]
		public SaveGameWeb(string username, string password, string url, bool encode, string encodePassword, ISaveGameSerializer serializer, ISaveGameEncoder encoder, Encoding encoding)
		{
		}

		[Token(Token = "0x60017A1")]
		[IteratorStateMachine(typeof(<Save>d__82<>))]
		public virtual IEnumerator Save<T>(string identifier, T obj)
		{
			return null;
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xD78080", Offset = "0xD78080", VA = "0xD78080", Slot = "24")]
		[IteratorStateMachine(typeof(<Download>d__83))]
		public virtual IEnumerator Download(string identifier)
		{
			return null;
		}

		[Token(Token = "0x60017A3")]
		public virtual T Load<T>(string identifier)
		{
			return (T)null;
		}

		[Token(Token = "0x60017A4")]
		public virtual T Load<T>(string identifier, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0xD78138", Offset = "0xD78138", VA = "0xD78138", Slot = "27")]
		[IteratorStateMachine(typeof(<Send>d__86))]
		public virtual IEnumerator Send(string identifier, string data, string action)
		{
			return null;
		}
	}
}
namespace BayatGames.SaveGameFree.Types
{
	[Serializable]
	[Token(Token = "0x2000467")]
	public struct Color32Save
	{
		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte r;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte g;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte b;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte a;

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xD7887C", Offset = "0xD7887C", VA = "0xD7887C")]
		public Color32Save(UnityEngine.Color32 color)
		{
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xD78884", Offset = "0xD78884", VA = "0xD78884")]
		public static implicit operator Color32Save(UnityEngine.Color32 color)
		{
			return default(Color32Save);
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xD7888C", Offset = "0xD7888C", VA = "0xD7888C")]
		public static implicit operator UnityEngine.Color32(Color32Save color)
		{
			return default(UnityEngine.Color32);
		}
	}
	[Serializable]
	[Token(Token = "0x2000468")]
	public struct ColorSave
	{
		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xD78894", Offset = "0xD78894", VA = "0xD78894")]
		public ColorSave(UnityEngine.Color color)
		{
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xD788A0", Offset = "0xD788A0", VA = "0xD788A0")]
		public static implicit operator ColorSave(UnityEngine.Color color)
		{
			return default(ColorSave);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xD788A4", Offset = "0xD788A4", VA = "0xD788A4")]
		public static implicit operator UnityEngine.Color(ColorSave color)
		{
			return default(UnityEngine.Color);
		}
	}
	[Serializable]
	[Token(Token = "0x2000469")]
	public class MeshSave
	{
		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3Save[] vertices;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] triangles;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2Save[] uv;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3Save[] normals;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Color[] colors;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Color32[] colors32;

		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xD788A8", Offset = "0xD788A8", VA = "0xD788A8")]
		public MeshSave(Mesh mesh)
		{
		}

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xD78AA0", Offset = "0xD78AA0", VA = "0xD78AA0")]
		public static implicit operator MeshSave(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xD78B00", Offset = "0xD78B00", VA = "0xD78B00")]
		public static implicit operator Mesh(MeshSave mesh)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200046A")]
	public struct QuaternionSave
	{
		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xD78CE8", Offset = "0xD78CE8", VA = "0xD78CE8")]
		public QuaternionSave(float x)
		{
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xD78CF8", Offset = "0xD78CF8", VA = "0xD78CF8")]
		public QuaternionSave(float x, float y)
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xD78D04", Offset = "0xD78D04", VA = "0xD78D04")]
		public QuaternionSave(float x, float y, float z)
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xD78D14", Offset = "0xD78D14", VA = "0xD78D14")]
		public QuaternionSave(float x, float y, float z, float w)
		{
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xD78D20", Offset = "0xD78D20", VA = "0xD78D20")]
		public QuaternionSave(UnityEngine.Quaternion quaternion)
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xD76CA4", Offset = "0xD76CA4", VA = "0xD76CA4")]
		public static implicit operator QuaternionSave(UnityEngine.Quaternion quaternion)
		{
			return default(QuaternionSave);
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xD76F4C", Offset = "0xD76F4C", VA = "0xD76F4C")]
		public static implicit operator UnityEngine.Quaternion(QuaternionSave quaternion)
		{
			return default(UnityEngine.Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x200046B")]
	public struct Vector2Save
	{
		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xD78D2C", Offset = "0xD78D2C", VA = "0xD78D2C")]
		public Vector2Save(float x)
		{
		}

		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xD78D38", Offset = "0xD78D38", VA = "0xD78D38")]
		public Vector2Save(float x, float y)
		{
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xD78D40", Offset = "0xD78D40", VA = "0xD78D40")]
		public Vector2Save(UnityEngine.Vector2 vector)
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xD78D48", Offset = "0xD78D48", VA = "0xD78D48")]
		public Vector2Save(UnityEngine.Vector3 vector)
		{
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xD78D50", Offset = "0xD78D50", VA = "0xD78D50")]
		public Vector2Save(UnityEngine.Vector4 vector)
		{
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xD78D58", Offset = "0xD78D58", VA = "0xD78D58")]
		public Vector2Save(Vector2Save vector)
		{
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xD78D60", Offset = "0xD78D60", VA = "0xD78D60")]
		public Vector2Save(Vector3Save vector)
		{
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xD78D68", Offset = "0xD78D68", VA = "0xD78D68")]
		public Vector2Save(Vector4Save vector)
		{
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xD78D70", Offset = "0xD78D70", VA = "0xD78D70")]
		public static implicit operator Vector2Save(UnityEngine.Vector2 vector)
		{
			return default(Vector2Save);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xD78D74", Offset = "0xD78D74", VA = "0xD78D74")]
		public static implicit operator UnityEngine.Vector2(Vector2Save vector)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xD78D78", Offset = "0xD78D78", VA = "0xD78D78")]
		public static implicit operator Vector2Save(UnityEngine.Vector3 vector)
		{
			return default(Vector2Save);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xD78D7C", Offset = "0xD78D7C", VA = "0xD78D7C")]
		public static implicit operator UnityEngine.Vector3(Vector2Save vector)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xD78D84", Offset = "0xD78D84", VA = "0xD78D84")]
		public static implicit operator Vector2Save(UnityEngine.Vector4 vector)
		{
			return default(Vector2Save);
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xD78D88", Offset = "0xD78D88", VA = "0xD78D88")]
		public static implicit operator UnityEngine.Vector4(Vector2Save vector)
		{
			return default(UnityEngine.Vector4);
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xD78D94", Offset = "0xD78D94", VA = "0xD78D94")]
		public static implicit operator Vector2Save(Vector3Save vector)
		{
			return default(Vector2Save);
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xD78D98", Offset = "0xD78D98", VA = "0xD78D98")]
		public static implicit operator Vector3Save(Vector2Save vector)
		{
			return default(Vector3Save);
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xD78DAC", Offset = "0xD78DAC", VA = "0xD78DAC")]
		public static implicit operator Vector2Save(Vector4Save vector)
		{
			return default(Vector2Save);
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xD78DB0", Offset = "0xD78DB0", VA = "0xD78DB0")]
		public static implicit operator Vector4Save(Vector2Save vector)
		{
			return default(Vector4Save);
		}
	}
	[Serializable]
	[Token(Token = "0x200046C")]
	public struct Vector3Save
	{
		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xD78DC8", Offset = "0xD78DC8", VA = "0xD78DC8")]
		public Vector3Save(float x)
		{
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xD78DD4", Offset = "0xD78DD4", VA = "0xD78DD4")]
		public Vector3Save(float x, float y)
		{
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xD78DE0", Offset = "0xD78DE0", VA = "0xD78DE0")]
		public Vector3Save(float x, float y, float z)
		{
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xD78DEC", Offset = "0xD78DEC", VA = "0xD78DEC")]
		public Vector3Save(UnityEngine.Vector2 vector)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xD78DF8", Offset = "0xD78DF8", VA = "0xD78DF8")]
		public Vector3Save(UnityEngine.Vector3 vector)
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xD78E04", Offset = "0xD78E04", VA = "0xD78E04")]
		public Vector3Save(UnityEngine.Vector4 vector)
		{
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xD78DA0", Offset = "0xD78DA0", VA = "0xD78DA0")]
		public Vector3Save(Vector2Save vector)
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xD78E10", Offset = "0xD78E10", VA = "0xD78E10")]
		public Vector3Save(Vector3Save vector)
		{
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xD78E1C", Offset = "0xD78E1C", VA = "0xD78E1C")]
		public Vector3Save(Vector4Save vector)
		{
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xD78E28", Offset = "0xD78E28", VA = "0xD78E28")]
		public static implicit operator Vector3Save(UnityEngine.Vector2 vector)
		{
			return default(Vector3Save);
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xD78E30", Offset = "0xD78E30", VA = "0xD78E30")]
		public static implicit operator UnityEngine.Vector2(Vector3Save vector)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xD76CA0", Offset = "0xD76CA0", VA = "0xD76CA0")]
		public static implicit operator Vector3Save(UnityEngine.Vector3 vector)
		{
			return default(Vector3Save);
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xD76F48", Offset = "0xD76F48", VA = "0xD76F48")]
		public static implicit operator UnityEngine.Vector3(Vector3Save vector)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xD78E34", Offset = "0xD78E34", VA = "0xD78E34")]
		public static implicit operator Vector3Save(UnityEngine.Vector4 vector)
		{
			return default(Vector3Save);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xD78E38", Offset = "0xD78E38", VA = "0xD78E38")]
		public static implicit operator UnityEngine.Vector4(Vector3Save vector)
		{
			return default(UnityEngine.Vector4);
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0xD78E40", Offset = "0xD78E40", VA = "0xD78E40")]
		public static implicit operator Vector3Save(Vector2Save vector)
		{
			return default(Vector3Save);
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xD78E48", Offset = "0xD78E48", VA = "0xD78E48")]
		public static implicit operator Vector2Save(Vector3Save vector)
		{
			return default(Vector2Save);
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xD78E4C", Offset = "0xD78E4C", VA = "0xD78E4C")]
		public static implicit operator Vector3Save(Vector4Save vector)
		{
			return default(Vector3Save);
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xD78E50", Offset = "0xD78E50", VA = "0xD78E50")]
		public static implicit operator Vector4Save(Vector3Save vector)
		{
			return default(Vector4Save);
		}
	}
	[Serializable]
	[Token(Token = "0x200046D")]
	public struct Vector4Save
	{
		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xD78E68", Offset = "0xD78E68", VA = "0xD78E68")]
		public Vector4Save(float x)
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xD78E78", Offset = "0xD78E78", VA = "0xD78E78")]
		public Vector4Save(float x, float y)
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xD78E84", Offset = "0xD78E84", VA = "0xD78E84")]
		public Vector4Save(float x, float y, float z)
		{
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xD78E94", Offset = "0xD78E94", VA = "0xD78E94")]
		public Vector4Save(float x, float y, float z, float w)
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xD78EA0", Offset = "0xD78EA0", VA = "0xD78EA0")]
		public Vector4Save(UnityEngine.Vector2 vector)
		{
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xD78EAC", Offset = "0xD78EAC", VA = "0xD78EAC")]
		public Vector4Save(UnityEngine.Vector3 vector)
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xD78EBC", Offset = "0xD78EBC", VA = "0xD78EBC")]
		public Vector4Save(UnityEngine.Vector4 vector)
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xD78DBC", Offset = "0xD78DBC", VA = "0xD78DBC")]
		public Vector4Save(Vector2Save vector)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xD78E58", Offset = "0xD78E58", VA = "0xD78E58")]
		public Vector4Save(Vector3Save vector)
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xD78EC8", Offset = "0xD78EC8", VA = "0xD78EC8")]
		public Vector4Save(Vector4Save vector)
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0xD78ED4", Offset = "0xD78ED4", VA = "0xD78ED4")]
		public static implicit operator Vector4Save(UnityEngine.Vector2 vector)
		{
			return default(Vector4Save);
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0xD78EE0", Offset = "0xD78EE0", VA = "0xD78EE0")]
		public static implicit operator UnityEngine.Vector2(Vector4Save vector)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0xD78EE4", Offset = "0xD78EE4", VA = "0xD78EE4")]
		public static implicit operator Vector4Save(UnityEngine.Vector3 vector)
		{
			return default(Vector4Save);
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xD78EEC", Offset = "0xD78EEC", VA = "0xD78EEC")]
		public static implicit operator UnityEngine.Vector3(Vector4Save vector)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xD78EF0", Offset = "0xD78EF0", VA = "0xD78EF0")]
		public static implicit operator Vector4Save(UnityEngine.Vector4 vector)
		{
			return default(Vector4Save);
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xD78EF4", Offset = "0xD78EF4", VA = "0xD78EF4")]
		public static implicit operator UnityEngine.Vector4(Vector4Save vector)
		{
			return default(UnityEngine.Vector4);
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0xD78EFC", Offset = "0xD78EFC", VA = "0xD78EFC")]
		public static implicit operator Vector4Save(Vector2Save vector)
		{
			return default(Vector4Save);
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xD78F08", Offset = "0xD78F08", VA = "0xD78F08")]
		public static implicit operator Vector2Save(Vector4Save vector)
		{
			return default(Vector2Save);
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0xD78F0C", Offset = "0xD78F0C", VA = "0xD78F0C")]
		public static implicit operator Vector4Save(Vector3Save vector)
		{
			return default(Vector4Save);
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0xD78F14", Offset = "0xD78F14", VA = "0xD78F14")]
		public static implicit operator Vector3Save(Vector4Save vector)
		{
			return default(Vector3Save);
		}
	}
}
namespace BayatGames.SaveGameFree.Serializers
{
	[Token(Token = "0x200046E")]
	public interface ISaveGameSerializer
	{
		[Token(Token = "0x6001802")]
		void Serialize<T>(T obj, Stream stream, Encoding encoding);

		[Token(Token = "0x6001803")]
		T Deserialize<T>(Stream stream, Encoding encoding);
	}
	[Token(Token = "0x200046F")]
	public class SaveGameBinarySerializer : ISaveGameSerializer
	{
		[Token(Token = "0x6001804")]
		public void Serialize<T>(T obj, Stream stream, Encoding encoding)
		{
		}

		[Token(Token = "0x6001805")]
		public T Deserialize<T>(Stream stream, Encoding encoding)
		{
			return (T)null;
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0xD76638", Offset = "0xD76638", VA = "0xD76638")]
		public SaveGameBinarySerializer()
		{
		}
	}
	[Token(Token = "0x2000470")]
	public class SaveGameJsonSerializer : ISaveGameSerializer
	{
		[Token(Token = "0x6001807")]
		public void Serialize<T>(T obj, Stream stream, Encoding encoding)
		{
		}

		[Token(Token = "0x6001808")]
		public T Deserialize<T>(Stream stream, Encoding encoding)
		{
			return (T)null;
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0xD74C18", Offset = "0xD74C18", VA = "0xD74C18")]
		public SaveGameJsonSerializer()
		{
		}
	}
	[Token(Token = "0x2000471")]
	public class SaveGameXmlSerializer : ISaveGameSerializer
	{
		[Token(Token = "0x600180A")]
		public void Serialize<T>(T obj, Stream stream, Encoding encoding)
		{
		}

		[Token(Token = "0x600180B")]
		public T Deserialize<T>(Stream stream, Encoding encoding)
		{
			return (T)null;
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0xD76640", Offset = "0xD76640", VA = "0xD76640")]
		public SaveGameXmlSerializer()
		{
		}
	}
}
namespace BayatGames.SaveGameFree.Encoders
{
	[Token(Token = "0x2000472")]
	public interface ISaveGameEncoder
	{
		[Token(Token = "0x600180D")]
		string Encode(string input, string password);

		[Token(Token = "0x600180E")]
		string Decode(string input, string password);
	}
	[Token(Token = "0x2000473")]
	public class SaveGameSimpleEncoder : ISaveGameEncoder
	{
		[Token(Token = "0x4001C33")]
		private const int Keysize = 256;

		[Token(Token = "0x4001C34")]
		private const int DerivationIterations = 1000;

		[Token(Token = "0x600180F")]
		[Address(RVA = "0xD78F18", Offset = "0xD78F18", VA = "0xD78F18", Slot = "4")]
		public string Encode(string input, string password)
		{
			return null;
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xD79724", Offset = "0xD79724", VA = "0xD79724", Slot = "5")]
		public string Decode(string input, string password)
		{
			return null;
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xD7968C", Offset = "0xD7968C", VA = "0xD7968C")]
		private static byte[] Generate256BitsOfRandomEntropy()
		{
			return null;
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xD74D4C", Offset = "0xD74D4C", VA = "0xD74D4C")]
		public SaveGameSimpleEncoder()
		{
		}
	}
}
namespace BayatGames.SaveGameFree.Examples
{
	[Token(Token = "0x2000474")]
	public class ExampleMoveObject : MonoBehaviour
	{
		[Token(Token = "0x6001813")]
		[Address(RVA = "0xD79EF0", Offset = "0xD79EF0", VA = "0xD79EF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xD79FC4", Offset = "0xD79FC4", VA = "0xD79FC4")]
		public ExampleMoveObject()
		{
		}
	}
	[Token(Token = "0x2000475")]
	public class ExampleSaveCustom : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000476")]
		public struct Level
		{
			[Token(Token = "0x4001C3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool unlocked;

			[Token(Token = "0x4001C3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool completed;

			[Token(Token = "0x600181B")]
			[Address(RVA = "0xD7A520", Offset = "0xD7A520", VA = "0xD7A520")]
			public Level(bool unlocked, bool completed)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000477")]
		public class CustomData
		{
			[Token(Token = "0x4001C3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int score;

			[Token(Token = "0x4001C3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int highScore;

			[Token(Token = "0x4001C3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<Level> levels;

			[Token(Token = "0x600181C")]
			[Address(RVA = "0xD7A2B4", Offset = "0xD7A2B4", VA = "0xD7A2B4")]
			public CustomData()
			{
			}
		}

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CustomData customData;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool loadOnStart;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputField scoreInputField;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InputField highScoreInputField;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string identifier;

		[Token(Token = "0x6001815")]
		[Address(RVA = "0xD79FCC", Offset = "0xD79FCC", VA = "0xD79FCC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xD7A168", Offset = "0xD7A168", VA = "0xD7A168")]
		public void SetScore(string score)
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xD7A190", Offset = "0xD7A190", VA = "0xD7A190")]
		public void SetHighScore(string highScore)
		{
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xD7A1B8", Offset = "0xD7A1B8", VA = "0xD7A1B8")]
		public void Save()
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xD79FDC", Offset = "0xD79FDC", VA = "0xD79FDC")]
		public void Load()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xD7A4C0", Offset = "0xD7A4C0", VA = "0xD7A4C0")]
		public ExampleSaveCustom()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000478")]
	public class StorageSG
	{
		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DateTime myDateTime;

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xD7A534", Offset = "0xD7A534", VA = "0xD7A534")]
		public StorageSG()
		{
		}
	}
	[Token(Token = "0x2000479")]
	public class ExampleSavePosition : MonoBehaviour
	{
		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int blockIndex;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool loadOnEnable;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public List<Transform> blocksInScene;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected Material[] availableMaterials;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected List<UnityEngine.GameObject> blocks;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform[] blockInScene;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected Transform container;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool saveOnApplicationQuit;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string _encodePassword;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool loadOnStart;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string identifier;

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xD7A59C", Offset = "0xD7A59C", VA = "0xD7A59C")]
		private void Start()
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xD7AACC", Offset = "0xD7AACC", VA = "0xD7AACC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xD7AF84", Offset = "0xD7AF84", VA = "0xD7AF84")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xD7AB58", Offset = "0xD7AB58", VA = "0xD7AB58")]
		public void Save()
		{
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xD7A80C", Offset = "0xD7A80C", VA = "0xD7A80C")]
		public void Load()
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xD7AF88", Offset = "0xD7AF88", VA = "0xD7AF88")]
		public ExampleSavePosition()
		{
		}
	}
	[Token(Token = "0x200047A")]
	public class ExampleSaveRotation : MonoBehaviour
	{
		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool loadOnStart;

		[Token(Token = "0x4001C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string identifier;

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool saveOnApplicationQuit;

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xD7B090", Offset = "0xD7B090", VA = "0xD7B090")]
		private void Start()
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xD7B200", Offset = "0xD7B200", VA = "0xD7B200")]
		private void Update()
		{
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xD7B274", Offset = "0xD7B274", VA = "0xD7B274")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xD7B278", Offset = "0xD7B278", VA = "0xD7B278")]
		public void Save()
		{
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xD7B0A0", Offset = "0xD7B0A0", VA = "0xD7B0A0")]
		public void Load()
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xD7B3A4", Offset = "0xD7B3A4", VA = "0xD7B3A4")]
		public ExampleSaveRotation()
		{
		}
	}
	[Token(Token = "0x200047B")]
	public class ExampleSaveScale : MonoBehaviour
	{
		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool loadOnStart;

		[Token(Token = "0x4001C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string identifier;

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xD7B408", Offset = "0xD7B408", VA = "0xD7B408")]
		private void Start()
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xD7B52C", Offset = "0xD7B52C", VA = "0xD7B52C")]
		private void Update()
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xD7B5E4", Offset = "0xD7B5E4", VA = "0xD7B5E4")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xD7B5E8", Offset = "0xD7B5E8", VA = "0xD7B5E8")]
		public void Save()
		{
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xD7B418", Offset = "0xD7B418", VA = "0xD7B418")]
		public void Load()
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xD7B70C", Offset = "0xD7B70C", VA = "0xD7B70C")]
		public ExampleSaveScale()
		{
		}
	}
	[Token(Token = "0x200047C")]
	public class ExampleSaveWeb : MonoBehaviour
	{
		[Token(Token = "0x200047D")]
		[CompilerGenerated]
		private sealed class <LoadEnumerator>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExampleSaveWeb <>4__this;

			[Token(Token = "0x4001C5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private SaveGameWeb <web>5__2;

			[Token(Token = "0x17000265")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600183A")]
				[Address(RVA = "0xD7BD68", Offset = "0xD7BD68", VA = "0xD7BD68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000266")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600183C")]
				[Address(RVA = "0xD7BDB0", Offset = "0xD7BDB0", VA = "0xD7BDB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001837")]
			[Address(RVA = "0xD7B96C", Offset = "0xD7B96C", VA = "0xD7B96C")]
			[DebuggerHidden]
			public <LoadEnumerator>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6001838")]
			[Address(RVA = "0xD7BA98", Offset = "0xD7BA98", VA = "0xD7BA98", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001839")]
			[Address(RVA = "0xD7BA9C", Offset = "0xD7BA9C", VA = "0xD7BA9C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600183B")]
			[Address(RVA = "0xD7BD70", Offset = "0xD7BD70", VA = "0xD7BD70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200047E")]
		[CompilerGenerated]
		private sealed class <SaveEnumerator>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ExampleSaveWeb <>4__this;

			[Token(Token = "0x17000267")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001840")]
				[Address(RVA = "0xD7C0C8", Offset = "0xD7C0C8", VA = "0xD7C0C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000268")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001842")]
				[Address(RVA = "0xD7C110", Offset = "0xD7C110", VA = "0xD7C110", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600183D")]
			[Address(RVA = "0xD7BDB8", Offset = "0xD7BDB8", VA = "0xD7BDB8")]
			[DebuggerHidden]
			public <SaveEnumerator>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600183E")]
			[Address(RVA = "0xD7BDE0", Offset = "0xD7BDE0", VA = "0xD7BDE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600183F")]
			[Address(RVA = "0xD7BDE4", Offset = "0xD7BDE4", VA = "0xD7BDE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001841")]
			[Address(RVA = "0xD7C0D0", Offset = "0xD7C0D0", VA = "0xD7C0D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool loadOnStart;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string identifier;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string username;

		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string password;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string url;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool encode;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string encodePassword;

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xD7B76C", Offset = "0xD7B76C", VA = "0xD7B76C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xD7B7AC", Offset = "0xD7B7AC", VA = "0xD7B7AC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xD7B78C", Offset = "0xD7B78C", VA = "0xD7B78C")]
		public void Load()
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xD7B8D8", Offset = "0xD7B8D8", VA = "0xD7B8D8")]
		public void Save()
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xD7B864", Offset = "0xD7B864", VA = "0xD7B864")]
		[IteratorStateMachine(typeof(<LoadEnumerator>d__12))]
		private IEnumerator LoadEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xD7B8F8", Offset = "0xD7B8F8", VA = "0xD7B8F8")]
		[IteratorStateMachine(typeof(<SaveEnumerator>d__13))]
		private IEnumerator SaveEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xD7B994", Offset = "0xD7B994", VA = "0xD7B994")]
		public ExampleSaveWeb()
		{
		}
	}
	[Token(Token = "0x200047F")]
	public class SerializerDropdown : Dropdown
	{
		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SerializerDropdown m_Singleton;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ISaveGameSerializer[] m_Serializers;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected ISaveGameSerializer m_ActiveSerializer;

		[Token(Token = "0x17000269")]
		public static SerializerDropdown Singleton
		{
			[Token(Token = "0x6001843")]
			[Address(RVA = "0xD7C118", Offset = "0xD7C118", VA = "0xD7C118")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026A")]
		public ISaveGameSerializer ActiveSerializer
		{
			[Token(Token = "0x6001844")]
			[Address(RVA = "0xD7C04C", Offset = "0xD7C04C", VA = "0xD7C04C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xD7C170", Offset = "0xD7C170", VA = "0xD7C170", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xD7C634", Offset = "0xD7C634", VA = "0xD7C634", Slot = "51")]
		protected virtual void OnValueChanged(int index)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xD7C6C4", Offset = "0xD7C6C4", VA = "0xD7C6C4", Slot = "52")]
		protected virtual void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xD7C80C", Offset = "0xD7C80C", VA = "0xD7C80C")]
		public SerializerDropdown()
		{
		}
	}
}
namespace BayatGames.Serialization.Formatters.Binary
{
	[Token(Token = "0x2000480")]
	public class Example01 : MonoBehaviour
	{
		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected InputField m_Input;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected InputField m_Output;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected byte[] m_Buffer;

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xD7CA00", Offset = "0xD7CA00", VA = "0xD7CA00")]
		public void Serialize()
		{
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xD7CC10", Offset = "0xD7CC10", VA = "0xD7CC10")]
		public void Deserialize()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xD7CEAC", Offset = "0xD7CEAC", VA = "0xD7CEAC")]
		public Example01()
		{
		}
	}
	[Token(Token = "0x2000481")]
	public static class BinaryExtensions
	{
		[Token(Token = "0x600184D")]
		[Address(RVA = "0xD7CEB4", Offset = "0xD7CEB4", VA = "0xD7CEB4")]
		public static byte[] ToBinary(this object value)
		{
			return null;
		}
	}
	[Token(Token = "0x2000482")]
	public class BinaryFormatter
	{
		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected ISurrogateSelector m_SurrogateSelector;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected StreamingContext m_Context;

		[Token(Token = "0x1700026B")]
		public virtual ISurrogateSelector surrogateSelector
		{
			[Token(Token = "0x600184E")]
			[Address(RVA = "0xD7CEB8", Offset = "0xD7CEB8", VA = "0xD7CEB8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600184F")]
			[Address(RVA = "0xD7CEC0", Offset = "0xD7CEC0", VA = "0xD7CEC0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700026C")]
		public virtual StreamingContext context
		{
			[Token(Token = "0x6001850")]
			[Address(RVA = "0xD7CEC8", Offset = "0xD7CEC8", VA = "0xD7CEC8", Slot = "6")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x6001851")]
			[Address(RVA = "0xD7CED4", Offset = "0xD7CED4", VA = "0xD7CED4", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xD7CEE4", Offset = "0xD7CEE4", VA = "0xD7CEE4")]
		public BinaryFormatter()
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0xD7CF20", Offset = "0xD7CF20", VA = "0xD7CF20")]
		public BinaryFormatter(ISurrogateSelector selector, StreamingContext context)
		{
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xD7CF74", Offset = "0xD7CF74", VA = "0xD7CF74")]
		public byte[] Serialize(object value)
		{
			return null;
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xD7D128", Offset = "0xD7D128", VA = "0xD7D128")]
		public void Serialize(Stream output, object value)
		{
		}

		[Token(Token = "0x6001856")]
		public T Deserialize<T>(Stream input)
		{
			return (T)null;
		}

		[Token(Token = "0x6001857")]
		public T Deserialize<T>(byte[] buffer)
		{
			return (T)null;
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xD7D370", Offset = "0xD7D370", VA = "0xD7D370")]
		public object Deserialize(byte[] buffer, Type type)
		{
			return null;
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xD7D514", Offset = "0xD7D514", VA = "0xD7D514")]
		public object Deserialize(Stream input, Type type)
		{
			return null;
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xD7CBB0", Offset = "0xD7CBB0", VA = "0xD7CBB0")]
		public static byte[] SerializeObject(object value)
		{
			return null;
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xD7D768", Offset = "0xD7D768", VA = "0xD7D768")]
		public static void SerializeObject(Stream output, object value)
		{
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xD7CE3C", Offset = "0xD7CE3C", VA = "0xD7CE3C")]
		public static object DeserializeObject(byte[] buffer, Type type)
		{
			return null;
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xD7D7D8", Offset = "0xD7D7D8", VA = "0xD7D7D8")]
		public static object DeserializeObject(Stream input, Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000483")]
	public class BinaryObjectReader : IDisposable
	{
		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected BinaryReader m_Reader;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ISurrogateSelector m_SurrogateSelector;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected StreamingContext m_Context;

		[Token(Token = "0x1700026D")]
		public virtual BinaryReader reader
		{
			[Token(Token = "0x600185E")]
			[Address(RVA = "0xD7D848", Offset = "0xD7D848", VA = "0xD7D848", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026E")]
		public virtual ISurrogateSelector surrogateSelector
		{
			[Token(Token = "0x600185F")]
			[Address(RVA = "0xD7D850", Offset = "0xD7D850", VA = "0xD7D850", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001860")]
			[Address(RVA = "0xD7D858", Offset = "0xD7D858", VA = "0xD7D858", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		public virtual StreamingContext context
		{
			[Token(Token = "0x6001861")]
			[Address(RVA = "0xD7D860", Offset = "0xD7D860", VA = "0xD7D860", Slot = "8")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x6001862")]
			[Address(RVA = "0xD7D86C", Offset = "0xD7D86C", VA = "0xD7D86C", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xD7D87C", Offset = "0xD7D87C", VA = "0xD7D87C")]
		public BinaryObjectReader(Stream stream)
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xD7D8C8", Offset = "0xD7D8C8", VA = "0xD7D8C8")]
		public BinaryObjectReader(BinaryReader reader)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xD7D6D4", Offset = "0xD7D6D4", VA = "0xD7D6D4")]
		public BinaryObjectReader(Stream stream, ISurrogateSelector selector, StreamingContext context)
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xD7D914", Offset = "0xD7D914", VA = "0xD7D914")]
		public BinaryObjectReader(BinaryReader reader, ISurrogateSelector selector, StreamingContext context)
		{
		}

		[Token(Token = "0x6001867")]
		public virtual T Read<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xD7D97C", Offset = "0xD7D97C", VA = "0xD7D97C", Slot = "11")]
		public virtual object Read(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xD7EA98", Offset = "0xD7EA98", VA = "0xD7EA98", Slot = "12")]
		protected virtual object ReadObject(Type type)
		{
			return null;
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xD7EEC4", Offset = "0xD7EEC4", VA = "0xD7EEC4", Slot = "13")]
		public virtual void Dispose()
		{
		}
	}
	[Token(Token = "0x2000484")]
	public class BinaryObjectWriter : IDisposable
	{
		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected BinaryWriter m_Writer;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ISurrogateSelector m_SurrogateSelector;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected StreamingContext m_Context;

		[Token(Token = "0x17000270")]
		public virtual BinaryWriter writer
		{
			[Token(Token = "0x600186B")]
			[Address(RVA = "0xD7EEDC", Offset = "0xD7EEDC", VA = "0xD7EEDC", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000271")]
		public virtual ISurrogateSelector surrogateSelector
		{
			[Token(Token = "0x600186C")]
			[Address(RVA = "0xD7EEE4", Offset = "0xD7EEE4", VA = "0xD7EEE4", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x600186D")]
			[Address(RVA = "0xD7EEEC", Offset = "0xD7EEEC", VA = "0xD7EEEC", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public virtual StreamingContext context
		{
			[Token(Token = "0x600186E")]
			[Address(RVA = "0xD7EEF4", Offset = "0xD7EEF4", VA = "0xD7EEF4", Slot = "8")]
			get
			{
				return default(StreamingContext);
			}
			[Token(Token = "0x600186F")]
			[Address(RVA = "0xD7EF00", Offset = "0xD7EF00", VA = "0xD7EF00", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xD7EF10", Offset = "0xD7EF10", VA = "0xD7EF10")]
		public BinaryObjectWriter(Stream stream)
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xD7F014", Offset = "0xD7F014", VA = "0xD7F014")]
		public BinaryObjectWriter(BinaryWriter writer)
		{
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xD7D2DC", Offset = "0xD7D2DC", VA = "0xD7D2DC")]
		public BinaryObjectWriter(Stream stream, ISurrogateSelector selector, StreamingContext context)
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xD7EFAC", Offset = "0xD7EFAC", VA = "0xD7EFAC")]
		public BinaryObjectWriter(BinaryWriter writer, ISurrogateSelector selector, StreamingContext context)
		{
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xD7F060", Offset = "0xD7F060", VA = "0xD7F060", Slot = "10")]
		public virtual void Write(object value)
		{
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xD80344", Offset = "0xD80344", VA = "0xD80344", Slot = "11")]
		protected virtual void WriteObject(object value, Type type)
		{
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xD80628", Offset = "0xD80628", VA = "0xD80628", Slot = "12")]
		protected virtual void WriteSerializationInfo(SerializationInfo info)
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xD806B0", Offset = "0xD806B0", VA = "0xD806B0", Slot = "13")]
		public virtual void Dispose()
		{
		}
	}
}
namespace jcsilva.CharacterController
{
	[Token(Token = "0x2000485")]
	public class EnemyController : MonoBehaviour
	{
		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("References")]
		[SerializeField]
		private AIStateMachine stateMachine;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Enemy Settings")]
		[SerializeField]
		private float fireRate;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float elapsedTime;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool canShoot;

		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public skyDomeDayNight enemyManager;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int randomInt;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public UnityEngine.Vector3 target;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int targetInt;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.GameObject ProjectileObject;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float projectileForce;

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xD806C8", Offset = "0xD806C8", VA = "0xD806C8")]
		public void Awake()
		{
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xD807BC", Offset = "0xD807BC", VA = "0xD807BC")]
		public void Start()
		{
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xD80890", Offset = "0xD80890", VA = "0xD80890")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xD809F4", Offset = "0xD809F4", VA = "0xD809F4")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xD80B58", Offset = "0xD80B58", VA = "0xD80B58")]
		private void Update()
		{
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xD81098", Offset = "0xD81098", VA = "0xD81098")]
		private void Shoot()
		{
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xD810A4", Offset = "0xD810A4", VA = "0xD810A4")]
		private void CantShoot()
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xD80D60", Offset = "0xD80D60", VA = "0xD80D60")]
		private void IsShooting()
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xD810B0", Offset = "0xD810B0", VA = "0xD810B0")]
		public EnemyController()
		{
		}
	}
	[Token(Token = "0x2000486")]
	[RequireComponent(typeof(Rigidbody))]
	public class PlayerController : MonoBehaviour
	{
		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Player Settings")]
		[Range(0.5f, 10f)]
		[SerializeField]
		private float movementSpeed;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rb;

		[Token(Token = "0x6001881")]
		[Address(RVA = "0xD810C0", Offset = "0xD810C0", VA = "0xD810C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xD81118", Offset = "0xD81118", VA = "0xD81118")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0xD8136C", Offset = "0xD8136C", VA = "0xD8136C")]
		public PlayerController()
		{
		}
	}
}
namespace jcsilva.AISystem
{
	[Token(Token = "0x2000487")]
	public abstract class AIBehaviour
	{
		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected MonoBehaviour self;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected AIStateMachine stateMachine;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string behaviourName;

		[Token(Token = "0x6001884")]
		[Address(RVA = "0xD8137C", Offset = "0xD8137C", VA = "0xD8137C")]
		public AIBehaviour(MonoBehaviour self, AIStateMachine stateMachine, string behaviourName = "DEFAULT NAME")
		{
		}

		[Token(Token = "0x6001885")]
		public abstract void OnUpdate();

		[Token(Token = "0x6001886")]
		public abstract void OnBehaviourStart();

		[Token(Token = "0x6001887")]
		public abstract void OnBehaviourEnd();
	}
	[Token(Token = "0x2000488")]
	[CreateAssetMenu(fileName = "New Behaviour", menuName = "jcsilva/New Behaviour")]
	public class AIBehaviourSettings : ScriptableObject
	{
		[Token(Token = "0x6001888")]
		[Address(RVA = "0xD813DC", Offset = "0xD813DC", VA = "0xD813DC")]
		public AIBehaviourSettings()
		{
		}
	}
	[Token(Token = "0x2000489")]
	public enum AIEvents
	{
		[Token(Token = "0x4001C81")]
		NoLongerIdle,
		[Token(Token = "0x4001C82")]
		ReachedDestination,
		[Token(Token = "0x4001C83")]
		SeePlayer,
		[Token(Token = "0x4001C84")]
		LostPlayer,
		[Token(Token = "0x4001C85")]
		OutOfRange,
		[Token(Token = "0x4001C86")]
		InRange,
		[Token(Token = "0x4001C87")]
		PlayerNotFound
	}
	[Token(Token = "0x200048A")]
	public enum AIStates
	{
		[Token(Token = "0x4001C89")]
		Idle,
		[Token(Token = "0x4001C8A")]
		Patrol,
		[Token(Token = "0x4001C8B")]
		Chase,
		[Token(Token = "0x4001C8C")]
		Attack
	}
	[Token(Token = "0x200048B")]
	public class AIUtils
	{
		[Token(Token = "0x6001889")]
		[Address(RVA = "0xD813E4", Offset = "0xD813E4", VA = "0xD813E4")]
		public static bool HasVisionOfTarget(Transform self, Transform target, float maxDistanceRange, float maxFieldOfView)
		{
			return default(bool);
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xD81670", Offset = "0xD81670", VA = "0xD81670")]
		public static bool IsInRange(Transform self, Transform target, float distanceToAttack)
		{
			return default(bool);
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0xD81740", Offset = "0xD81740", VA = "0xD81740")]
		public AIUtils()
		{
		}
	}
	[Token(Token = "0x200048C")]
	[RequireComponent(typeof(NavMeshAgent))]
	public class AIStateMachine : MonoBehaviour
	{
		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action EventAIEnableIdle;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action EventAIDisableIdle;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action EventAIEnablePatrol;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action EventAIDisablePatrol;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action EventAIEnableChase;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action EventAIDisableChase;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action EventAIEnableAttack;

		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action EventAIDisableAttack;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("AI Settings")]
		[SerializeField]
		private bool isEnable;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private AIStates initialState;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public Transform target;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public NavMeshAgent agent;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("AI Behaviours Settings")]
		[SerializeField]
		private float idleDuration;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float maxDistanceToView;

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private float minDistanceToAttack;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private float maxFieldOfView;

		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<Transform> targets;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[HideInInspector]
		public List<Transform> waypoints;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[HideInInspector]
		private bool enableDebug;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		[HideInInspector]
		private AIStates currentState;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		private AIBehaviour currentBehaviour;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AIBehaviour[] l_behaviours;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<AIEvents, AIStates> nextEvent;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform selfTransform;

		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int randomInt;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEngine.GameObject explosion;

		[Token(Token = "0x600188C")]
		[Address(RVA = "0xD81748", Offset = "0xD81748", VA = "0xD81748")]
		private void Start()
		{
		}

		[Token(Token = "0x600188D")]
		[Address(RVA = "0xD81A40", Offset = "0xD81A40", VA = "0xD81A40")]
		private void InitializeBehaviours()
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0xD81BFC", Offset = "0xD81BFC", VA = "0xD81BFC")]
		public void HandleState(AIEvents AIEvent)
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xD81C68", Offset = "0xD81C68", VA = "0xD81C68")]
		public void Update()
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xD81D28", Offset = "0xD81D28", VA = "0xD81D28")]
		public void ChasePlayer()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xD80D58", Offset = "0xD80D58", VA = "0xD80D58")]
		public Transform GetSelfPosition()
		{
			return null;
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xD8184C", Offset = "0xD8184C", VA = "0xD8184C")]
		public void SetTarget()
		{
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xD81DBC", Offset = "0xD81DBC", VA = "0xD81DBC")]
		public Transform GetTargetPosition()
		{
			return null;
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xD81DC4", Offset = "0xD81DC4", VA = "0xD81DC4")]
		public float GetMaxDistanceToView()
		{
			return default(float);
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xD81DCC", Offset = "0xD81DCC", VA = "0xD81DCC")]
		public float GetMaxFieldOfView()
		{
			return default(float);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xD81DD4", Offset = "0xD81DD4", VA = "0xD81DD4")]
		public float GetIdleDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xD81DDC", Offset = "0xD81DDC", VA = "0xD81DDC")]
		public List<Transform> GetWaypoints()
		{
			return null;
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xD81E34", Offset = "0xD81E34", VA = "0xD81E34")]
		public NavMeshAgent GetNavMeshAgent()
		{
			return null;
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xD81E3C", Offset = "0xD81E3C", VA = "0xD81E3C")]
		public float GetMinDistanceToAttack()
		{
			return default(float);
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xD81910", Offset = "0xD81910", VA = "0xD81910")]
		public void ClearEmptyWaypoints()
		{
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xD81E44", Offset = "0xD81E44", VA = "0xD81E44")]
		public AIStateMachine()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public class AttackBehaviour : AIBehaviour
	{
		[Token(Token = "0x4001CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isActive;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform selfTransform;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform target;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NavMeshAgent agent;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float maxDistance;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float maxFieldOfView;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float minDistanceToAttack;

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xD81B1C", Offset = "0xD81B1C", VA = "0xD81B1C")]
		public AttackBehaviour(MonoBehaviour self, AIStateMachine aiStateMachine)
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xD82114", Offset = "0xD82114", VA = "0xD82114", Slot = "5")]
		public override void OnBehaviourStart()
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xD82170", Offset = "0xD82170", VA = "0xD82170", Slot = "6")]
		public override void OnBehaviourEnd()
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xD821BC", Offset = "0xD821BC", VA = "0xD821BC", Slot = "4")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xD82264", Offset = "0xD82264", VA = "0xD82264")]
		public void ChasePlayer()
		{
		}
	}
	[Token(Token = "0x200048F")]
	public class ChaseBehaviour : AIBehaviour
	{
		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isActive;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform target;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform selfTransform;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NavMeshAgent agent;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float maxDistance;

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float maxFieldOfView;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float minDistanceToAttack;

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xD82318", Offset = "0xD82318", VA = "0xD82318")]
		public ChaseBehaviour(MonoBehaviour self, AIStateMachine aIStateMachine)
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xD823F8", Offset = "0xD823F8", VA = "0xD823F8", Slot = "5")]
		public override void OnBehaviourStart()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xD824B8", Offset = "0xD824B8", VA = "0xD824B8", Slot = "6")]
		public override void OnBehaviourEnd()
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xD82504", Offset = "0xD82504", VA = "0xD82504", Slot = "4")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xD82470", Offset = "0xD82470", VA = "0xD82470")]
		public void ChasePlayer()
		{
		}
	}
	[Token(Token = "0x2000490")]
	public class IdleBehaviour : AIBehaviour
	{
		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isActive;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float idleDuration;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float elapsedIdleTimer;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform selfTransform;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform target;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private NavMeshAgent agent;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float maxDistance;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float maxFieldOfView;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float minDistanceToAttack;

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xD82574", Offset = "0xD82574", VA = "0xD82574")]
		public IdleBehaviour(MonoBehaviour self, AIStateMachine aIStateMachine)
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xD8263C", Offset = "0xD8263C", VA = "0xD8263C", Slot = "5")]
		public override void OnBehaviourStart()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xD82678", Offset = "0xD82678", VA = "0xD82678", Slot = "6")]
		public override void OnBehaviourEnd()
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xD826B4", Offset = "0xD826B4", VA = "0xD826B4", Slot = "4")]
		public override void OnUpdate()
		{
		}
	}
	[Token(Token = "0x2000491")]
	public class PatrolBehaviour : AIBehaviour
	{
		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isActive;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool hasWaypoints;

		[Token(Token = "0x4001CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NavMeshAgent agent;

		[Token(Token = "0x4001CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform selfTransform;

		[Token(Token = "0x4001CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform target;

		[Token(Token = "0x4001CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Transform> waypoints;

		[Token(Token = "0x4001CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int currentWayPoint;

		[Token(Token = "0x4001CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float maxDistance;

		[Token(Token = "0x4001CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float maxFieldOfView;

		[Token(Token = "0x60018AE")]
		[Address(RVA = "0xD827D0", Offset = "0xD827D0", VA = "0xD827D0")]
		public PatrolBehaviour(MonoBehaviour self, AIStateMachine aIStateMachine)
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xD82938", Offset = "0xD82938", VA = "0xD82938", Slot = "6")]
		public override void OnBehaviourEnd()
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xD82970", Offset = "0xD82970", VA = "0xD82970", Slot = "5")]
		public override void OnBehaviourStart()
		{
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xD82A84", Offset = "0xD82A84", VA = "0xD82A84", Slot = "4")]
		public override void OnUpdate()
		{
		}

		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xD829E4", Offset = "0xD829E4", VA = "0xD829E4")]
		private UnityEngine.Vector3 GetNextWaypoint()
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Token(Token = "0x2000492")]
	public class Creator
	{
		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xD82B74", Offset = "0xD82B74", VA = "0xD82B74")]
		public static UnityEngine.GameObject CreateWaypointsHolder()
		{
			return null;
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xD82BF4", Offset = "0xD82BF4", VA = "0xD82BF4")]
		public static UnityEngine.GameObject CreateGameObject(UnityEngine.GameObject parent, string name)
		{
			return null;
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xD82CA4", Offset = "0xD82CA4", VA = "0xD82CA4")]
		public static string SetInternalName(string title)
		{
			return null;
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xD82D58", Offset = "0xD82D58", VA = "0xD82D58")]
		public Creator()
		{
		}
	}
}
