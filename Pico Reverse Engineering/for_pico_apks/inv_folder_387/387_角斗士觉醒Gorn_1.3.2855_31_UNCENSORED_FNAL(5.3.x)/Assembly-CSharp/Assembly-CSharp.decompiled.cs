using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml.Serialization;
using BitCode;
using BitCode.AssetManagement;
using BitCode.AssetManagement.Loaders;
using BitCode.IO;
using BitCode.L10n;
using BitCode.Maths;
using BitCode.Pooling;
using BitCode.SceneManagement;
using BitCode.Users;
using FreeLives;
using Il2CppDummyDll;
using InControl;
using JetBrains.Annotations;
using Poly2Tri;
using RTLTMPro;
using TFBG.Scoring;
using TFBGames;
using TFBGames.Attributes;
using TFBGames.Choptimizer;
using TFBGames.Common;
using TFBGames.Input;
using TFBGames.Pooling;
using TFBGames.SceneManagement;
using TMPro;
using UltimateFracturing;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.XR;
using UnityStandardAssets.ImageEffects;
using Util;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class SkinnedSplatterTest : MonoBehaviour
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0x7AB62C", Offset = "0x7AB62C", VA = "0x7AB62C")]
	public SkinnedSplatterTest()
	{
	}
}
[Serializable]
[Token(Token = "0x2000003")]
public class SoundInfo
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] clips;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float volumeMod;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float pitchVariance;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public int lastClipUsed;

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x7AB634", Offset = "0x7AB634", VA = "0x7AB634")]
	public SoundInfo()
	{
	}
}
[Token(Token = "0x2000004")]
public class InverseKinematics : MonoBehaviour
{
	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform upperArm;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform forearm;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform hand;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform elbow;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform target;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Space(20f)]
	public Vector3 uppperArm_OffsetRotation;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 forearm_OffsetRotation;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 hand_OffsetRotation;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Space(20f)]
	public bool handMatchesTargetRotation;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[Space(20f)]
	public bool debug;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float angle;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float upperArm_Length;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float forearm_Length;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float arm_Length;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float targetDistance;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float adyacent;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x7AB648", Offset = "0x7AB648", VA = "0x7AB648")]
	private void Start()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x7AB64C", Offset = "0x7AB64C", VA = "0x7AB64C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x7ABB1C", Offset = "0x7ABB1C", VA = "0x7ABB1C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x7ABDC8", Offset = "0x7ABDC8", VA = "0x7ABDC8")]
	public InverseKinematics()
	{
	}
}
[Serializable]
[Token(Token = "0x2000005")]
public class ActionClipBinding
{
	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public WeaponType weaponType;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CharacterActionClip[] clips;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x7ABDD8", Offset = "0x7ABDD8", VA = "0x7ABDD8")]
	public ActionClipBinding()
	{
	}
}
[Token(Token = "0x2000006")]
public class ActionClipHolder : MonoBehaviour
{
	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ActionClipBinding> bindings;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ActionClipBinding defaultBinding;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CharacterActionClip rightArmOverhead;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CharacterActionClip rightArmSide;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CharacterActionClip rightArmBackhand;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CharacterActionClip rightArmSweepClip;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CharacterActionClip rightArmOverhead2;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CharacterActionClip rightArmStabQuick;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public CharacterActionClip leftArmStabQuick;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public CharacterActionClip hammerOverhead;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public CharacterActionClip hammerSideSwipe;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public CharacterActionClip twoHandedStab;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public CharacterActionClip twoHandedOverheadLeap;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CharacterActionClip twoHandedSpin;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CharacterActionClip twoHandedFlailSwipe;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public CharacterActionClip fireBowClip;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public CharacterActionClip throwKnifeClip;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public CharacterActionClip rightArmPunch;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public CharacterActionClip leftArmPunch;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TakeStepClip takeStepClip;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public TakeBalanceStepClip balanceStepClip;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public CrawlClip crawlClip;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public RollOverClip rollOverClip;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GetUpClip getUpClip;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public IdleAction idleClip;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public SaluteClip saluteClip;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public CharacterActionClip leftHandQuickAttack;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public CharacterActionClip rightHandQuickAttack;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public CharacterActionClip playerControlledClip;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public CharacterActionClip dodgeClip;

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x7ABDE0", Offset = "0x7ABDE0", VA = "0x7ABDE0")]
	public CharacterActionClip GetClipForBinding(WeaponType weapon, int index)
	{
		return null;
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x7ABFB8", Offset = "0x7ABFB8", VA = "0x7ABFB8")]
	public ActionClipHolder()
	{
	}
}
[Token(Token = "0x2000007")]
public class AnimationRigController : MonoBehaviour
{
	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x7ABFC0", Offset = "0x7ABFC0", VA = "0x7ABFC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x7AC030", Offset = "0x7AC030", VA = "0x7AC030")]
	public void Play(string animName, float normalizedTime)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x7AC050", Offset = "0x7AC050", VA = "0x7AC050")]
	public AnimationRigController()
	{
	}
}
[Token(Token = "0x2000008")]
public class ArenaCarving : MonoBehaviour
{
	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("BloodTarget")]
	private GameObject bloodTarget;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material[] materials;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Mask;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int BlendTex;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int DiffuseBack;

	[Token(Token = "0x17000001")]
	public GameObject BloodTarget
	{
		[Token(Token = "0x600000D")]
		[Address(RVA = "0x7AC058", Offset = "0x7AC058", VA = "0x7AC058")]
		get
		{
			return null;
		}
		[Token(Token = "0x600000E")]
		[Address(RVA = "0x7AC060", Offset = "0x7AC060", VA = "0x7AC060")]
		set
		{
		}
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x7AC068", Offset = "0x7AC068", VA = "0x7AC068")]
	public void SetTexture(Texture2D texture, Texture2D normal)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x7AC118", Offset = "0x7AC118", VA = "0x7AC118")]
	public void InitBlood()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x7AC714", Offset = "0x7AC714", VA = "0x7AC714")]
	private void Start()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x7ACA40", Offset = "0x7ACA40", VA = "0x7ACA40")]
	public ArenaCarving()
	{
	}
}
[Token(Token = "0x2000009")]
public class ArenaDoor : MonoBehaviour
{
	[Token(Token = "0x200000A")]
	protected enum State
	{
		[Token(Token = "0x4000053")]
		Closed,
		[Token(Token = "0x4000054")]
		Open,
		[Token(Token = "0x4000055")]
		Transitioning
	}

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Transform spawnPoint;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Transform walkToPoint;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected float lowerDistance;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected GameObject shatteredDoorPrefab;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected bool testBreakOpen;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	protected bool canSpawnGiant;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected string doorOpenSound;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected string doorCloseSound;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	protected float stuckEnemyRadius;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[FormerlySerializedAs("GameObjectsToDisableWhenClosed")]
	[SerializeField]
	protected GameObject[] gameObjectsToDisableWhenClosed;

	[Token(Token = "0x4000046")]
	protected const float DoorDistanceCheck = 1f;

	[Token(Token = "0x4000047")]
	private const int OverlapSphereColliderMax = 16;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	internal bool isReadyToSpawn;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected float stuckDudeCheckDelay;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected bool dudeIsStuckInside;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected State state;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool broken;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float defaultYPos;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly Collider[] colliders;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int keepAwayLayer;

	[Token(Token = "0x17000002")]
	public bool IsInUse
	{
		[Token(Token = "0x6000014")]
		[Address(RVA = "0x7ACB10", Offset = "0x7ACB10", VA = "0x7ACB10")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000015")]
		[Address(RVA = "0x7ACB18", Offset = "0x7ACB18", VA = "0x7ACB18")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public bool ShouldBeOpen
	{
		[Token(Token = "0x6000016")]
		[Address(RVA = "0x7ACB24", Offset = "0x7ACB24", VA = "0x7ACB24")]
		[CompilerGenerated]
		protected get
		{
			return default(bool);
		}
		[Token(Token = "0x6000017")]
		[Address(RVA = "0x7ACB2C", Offset = "0x7ACB2C", VA = "0x7ACB2C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public bool CanSpawnGiant
	{
		[Token(Token = "0x6000018")]
		[Address(RVA = "0x7ACB38", Offset = "0x7ACB38", VA = "0x7ACB38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000005")]
	public Transform SpawnPoint
	{
		[Token(Token = "0x6000019")]
		[Address(RVA = "0x7ACB40", Offset = "0x7ACB40", VA = "0x7ACB40")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000006")]
	public Transform WalkToPoint
	{
		[Token(Token = "0x600001A")]
		[Address(RVA = "0x7ACB48", Offset = "0x7ACB48", VA = "0x7ACB48")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x7ACB50", Offset = "0x7ACB50", VA = "0x7ACB50")]
	public void BreakOpen()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x7ACD5C", Offset = "0x7ACD5C", VA = "0x7ACD5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x7ACDAC", Offset = "0x7ACDAC", VA = "0x7ACDAC", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x7ACCF4", Offset = "0x7ACCF4", VA = "0x7ACCF4")]
	protected void SetObjectsActive(bool active)
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x7ACDD8", Offset = "0x7ACDD8", VA = "0x7ACDD8", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x7AD1D8", Offset = "0x7AD1D8", VA = "0x7AD1D8")]
	protected void CheckForStuckDude()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x7AD39C", Offset = "0x7AD39C", VA = "0x7AD39C")]
	public ArenaDoor()
	{
	}
}
[Token(Token = "0x200000B")]
public enum BirdState
{
	[Token(Token = "0x4000057")]
	Resting,
	[Token(Token = "0x4000058")]
	Flocking,
	[Token(Token = "0x4000059")]
	ReturningToPosition,
	[Token(Token = "0x400005A")]
	Feasting
}
[Token(Token = "0x200000C")]
[SelectionBase]
public class Bird : MonoBehaviour
{
	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BirdState currentstate;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator animator;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool canBeKilled;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float killVelocityThreshold;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GibHolder gibs;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GibHolder gibsPinata;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float gibFeastCheckInterval;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float gibFeastChance;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Flocking Properties")]
	public float flockingVelocityInfluence;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float minMovementSpeed;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float maxMovementSpeed;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float turningSpeed;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float positionSmoothing;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float settlingDistance;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 currentVelocity;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 flockingVelocity;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool overrideFlockGoal;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 goalPositionOverride;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float goalFollowStrengthOverride;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float velocityToStartle;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float minDisturbanceTime;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float maxDisturbanceTime;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool isAlive;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float speakDelay;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float gibFeastCheckTimer;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform gibToFeastOn;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool wasLookingForGib;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float feastCancelTimer;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float stopFlockingTimer;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 restingPosition;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Quaternion restingRotation;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Rigidbody rigidbody;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float movementSpeed;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 targetPosition;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Quaternion targetRotation;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int flapSpeedAnimationKey;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int idleOffsetAnimationKey;

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x7AD408", Offset = "0x7AD408", VA = "0x7AD408")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x7AD4CC", Offset = "0x7AD4CC", VA = "0x7AD4CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x7AD5C0", Offset = "0x7AD5C0", VA = "0x7AD5C0")]
	private void EnterState(BirdState state)
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x7AD7B8", Offset = "0x7AD7B8", VA = "0x7AD7B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x7AD7F0", Offset = "0x7AD7F0", VA = "0x7AD7F0")]
	private void UpdateResting()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x7ADB90", Offset = "0x7ADB90", VA = "0x7ADB90")]
	private void UpdateFlocking()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x7ADC9C", Offset = "0x7ADC9C", VA = "0x7ADC9C")]
	private void UpdateReturningToPosition()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x7ADEC8", Offset = "0x7ADEC8", VA = "0x7ADEC8")]
	private void UpdateFeasting()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x7AE4CC", Offset = "0x7AE4CC", VA = "0x7AE4CC")]
	private void UpdateMovement(float maxSpeed)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x7AEBB4", Offset = "0x7AEBB4", VA = "0x7AEBB4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x7AED1C", Offset = "0x7AED1C", VA = "0x7AED1C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x7AE14C", Offset = "0x7AE14C", VA = "0x7AE14C")]
	private Transform FindGibToFeastOn()
	{
		return null;
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x7AEECC", Offset = "0x7AEECC", VA = "0x7AEECC")]
	private void Die(Vector3 hitVelocity)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x7AF1A0", Offset = "0x7AF1A0", VA = "0x7AF1A0")]
	private void Hide()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x7AF2D4", Offset = "0x7AF2D4", VA = "0x7AF2D4")]
	public Bird()
	{
	}
}
[Token(Token = "0x200000E")]
public class Flock : MonoBehaviour
{
	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Bird> birds;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numToDestroyOnStart;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool haveAgentsFollow;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform followTarget;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float agentFollowStrength;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int agentUpdatesPerFixedUpdate;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float neighbourhoodRadius;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int maxNumNeighboursToCheck;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float noiseStrength;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float alignmentStrength;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float cohesionStrength;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float neighbourAvoidanceRadius;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float neighbourAvoidanceStrength;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public LayerMask obstacleLayerMask;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float obstacleAvoidanceCheckDistance;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float obstacleAvoidanceRayThickness;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float obstacleAvoidanceStrength;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int agentUpdateIndex;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 currentGoalPosition;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float currentFollowStrength;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Bird currentNeighbour;

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x7AF510", Offset = "0x7AF510", VA = "0x7AF510")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x7AF728", Offset = "0x7AF728", VA = "0x7AF728")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x7AF85C", Offset = "0x7AF85C", VA = "0x7AF85C")]
	public void SetGoalPosition(Vector3 goalPosition, float followStrength)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x7AF868", Offset = "0x7AF868", VA = "0x7AF868")]
	private void CalculateAgentVelocity(Bird bird)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x7B0108", Offset = "0x7B0108", VA = "0x7B0108")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x7B010C", Offset = "0x7B010C", VA = "0x7B010C")]
	public Flock()
	{
	}
}
[Token(Token = "0x200000F")]
public class BreakablePillarChunk : MonoBehaviour
{
	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Collider collider;

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x7B015C", Offset = "0x7B015C", VA = "0x7B015C")]
	private void Start()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x7B01CC", Offset = "0x7B01CC", VA = "0x7B01CC")]
	public void Detach()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x7B02E8", Offset = "0x7B02E8", VA = "0x7B02E8")]
	public BreakablePillarChunk()
	{
	}
}
[Token(Token = "0x2000010")]
public class DamageableTerrainDeathpit : DamageableTerrainDeathpitBase
{
	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<BreakablePillarChunk> chunks;

	[Token(Token = "0x4000099")]
	private const float ChunkDistanceCheck = 400f;

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x7B02F0", Offset = "0x7B02F0", VA = "0x7B02F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x7B03FC", Offset = "0x7B03FC", VA = "0x7B03FC", Slot = "4")]
	public override void CrackPillar()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x7B04C4", Offset = "0x7B04C4", VA = "0x7B04C4", Slot = "5")]
	public override void Break()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x7B0680", Offset = "0x7B0680", VA = "0x7B0680", Slot = "6")]
	public override void Damage(Collision col, AngryCrowdPerson head)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x7B0C20", Offset = "0x7B0C20", VA = "0x7B0C20")]
	public DamageableTerrainDeathpit()
	{
	}
}
[Token(Token = "0x2000011")]
public abstract class DamageableTerrainDeathpitBase : MonoBehaviour
{
	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SoundHolder soundHolder;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject[] enableOnBreakObjects;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject[] enableOnBreakPinata;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject deathGibs;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected bool damageable;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected int health;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool havePlayedCrack;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int BreakHash;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int CrackHash;

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x7B0CE4", Offset = "0x7B0CE4", VA = "0x7B0CE4")]
	public void Crack()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x7B0D94", Offset = "0x7B0D94", VA = "0x7B0D94")]
	public void PlayCrackSound()
	{
	}

	[Token(Token = "0x6000045")]
	public abstract void CrackPillar();

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x7B0DFC", Offset = "0x7B0DFC", VA = "0x7B0DFC")]
	public void SpawnDeathGibs()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x7B0EA4", Offset = "0x7B0EA4", VA = "0x7B0EA4")]
	public void PlayCrushSound()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x7B05C8", Offset = "0x7B05C8", VA = "0x7B05C8", Slot = "5")]
	public virtual void Break()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x7B0F08", Offset = "0x7B0F08", VA = "0x7B0F08")]
	private void PlayBreakAnimation()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x7B0AE4", Offset = "0x7B0AE4", VA = "0x7B0AE4", Slot = "6")]
	public virtual void Damage(Collision col, AngryCrowdPerson head)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x7B0CD4", Offset = "0x7B0CD4", VA = "0x7B0CD4")]
	protected DamageableTerrainDeathpitBase()
	{
	}
}
[Token(Token = "0x2000012")]
public class DamageableTerrainDeathpitMobile : DamageableTerrainDeathpitBase
{
	[Serializable]
	[Token(Token = "0x2000013")]
	public struct HealthStateObjects
	{
		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject[] objects;
	}

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private HealthStateObjects[] HealthObjects;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ParticleSystem[] DamageDust;

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x7B10C0", Offset = "0x7B10C0", VA = "0x7B10C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x7B10C8", Offset = "0x7B10C8", VA = "0x7B10C8")]
	private void SetHealthObjects(int health)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x7B116C", Offset = "0x7B116C", VA = "0x7B116C", Slot = "4")]
	public override void CrackPillar()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x7B11B4", Offset = "0x7B11B4", VA = "0x7B11B4", Slot = "6")]
	public override void Damage(Collision col, AngryCrowdPerson head)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x7B137C", Offset = "0x7B137C", VA = "0x7B137C")]
	public DamageableTerrainDeathpitMobile()
	{
	}
}
[Token(Token = "0x2000014")]
public class FlockingTarget : MonoBehaviour
{
	[Token(Token = "0x6000052")]
	[Address(RVA = "0x7B13DC", Offset = "0x7B13DC", VA = "0x7B13DC")]
	public FlockingTarget()
	{
	}
}
[Token(Token = "0x2000015")]
public class Gate : MonoBehaviour
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float lowerSpeed;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioSource gateAudioSource;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject[] spikes;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject[] bases;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool havePlayedSound;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float[] lowerDelays;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float[] lowerSpeeds;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] lowerMaxSpeeds;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool[] finishedLowering;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] puffDelays;

	[Token(Token = "0x17000007")]
	public bool IsLowering
	{
		[Token(Token = "0x6000053")]
		[Address(RVA = "0x7B13E4", Offset = "0x7B13E4", VA = "0x7B13E4")]
		[CompilerGenerated]
		private get
		{
			return default(bool);
		}
		[Token(Token = "0x6000054")]
		[Address(RVA = "0x7B13EC", Offset = "0x7B13EC", VA = "0x7B13EC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x7B13F8", Offset = "0x7B13F8", VA = "0x7B13F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x7B176C", Offset = "0x7B176C", VA = "0x7B176C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x7B1BA0", Offset = "0x7B1BA0", VA = "0x7B1BA0")]
	public Gate()
	{
	}
}
[Token(Token = "0x2000016")]
public class Gong : MonoBehaviour
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Gong instance;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float lastRingTime;

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x7B1BA8", Offset = "0x7B1BA8", VA = "0x7B1BA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x7B1C00", Offset = "0x7B1C00", VA = "0x7B1C00")]
	public static void Ring()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x7B1D8C", Offset = "0x7B1D8C", VA = "0x7B1D8C")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x7B1CA0", Offset = "0x7B1CA0", VA = "0x7B1CA0")]
	public void RingInternal()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x7B1FEC", Offset = "0x7B1FEC", VA = "0x7B1FEC")]
	public Gong()
	{
	}
}
[Token(Token = "0x2000017")]
[CreateAssetMenu(fileName = "GraffitiDirectory", menuName = "GORN/GraffitiDirectory", order = 1)]
public class GraffitiDirectory : ScriptableObject
{
	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Texture2D> cellGraffiti;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Texture2D> standsGraffiti;

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x7B1FFC", Offset = "0x7B1FFC", VA = "0x7B1FFC")]
	public GraffitiDirectory()
	{
	}
}
[Token(Token = "0x2000018")]
public class GraffitiPlacer : MonoBehaviour
{
	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GraffitiDirectory graffitiDirectory;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float testProb;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool debug;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x7B2004", Offset = "0x7B2004", VA = "0x7B2004")]
	public void Start()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x7B25C0", Offset = "0x7B25C0", VA = "0x7B25C0")]
	public GraffitiPlacer()
	{
	}
}
[Token(Token = "0x2000019")]
public class OutOfBoundsGladiatorKiller : MonoBehaviour
{
	[Token(Token = "0x6000060")]
	[Address(RVA = "0x7B25C8", Offset = "0x7B25C8", VA = "0x7B25C8")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x7B2B74", Offset = "0x7B2B74", VA = "0x7B2B74")]
	public OutOfBoundsGladiatorKiller()
	{
	}
}
[Token(Token = "0x200001A")]
public class Seagull : MonoBehaviour
{
	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool isAirborne;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float acceleration;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float topSpeed;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float minSpeedMuliplier;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float maxSpeedMuliplier;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float turnSpeed;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float maxTurnSpeed;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float uprightCorrectionStrength;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float minFlockingTime;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float maxFlockingTime;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float minGlidingTime;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float maxGlidingTime;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float neighbourCheckRadius;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float neighbourAvoidanceStrength;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float noiseStrength;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float noiseSpeed;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float noiseRandomization;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float noiseFalloffDistance;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float killVelocityThreshold;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float positionSettleSpeed;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float rotationSettleSpeed;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float gibFeastChance;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GibHolder gibs;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GibHolder gibsPinata;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool isAlive;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool isFeasting;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Rigidbody rigidbody;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform flockingTarget;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform followTarget;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 startingPosition;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Quaternion startingRotation;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float flockingTimer;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float takeOffCooldown;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private List<Seagull> neighbours;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float neighbourUpdateTimer;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float noiseX;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float noiseY;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float glideTimer;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float glideCooldownTimer;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float shriekTimer;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int flapSpeedAnimationKey;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int idleOffsetAnimationKey;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int IsGliding;

	[Token(Token = "0x40000E5")]
	private const int OverlapSphereColliderMax = 16;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Collider[] colliders;

	[Token(Token = "0x17000008")]
	private bool IsFlocking
	{
		[Token(Token = "0x6000062")]
		[Address(RVA = "0x7B2B7C", Offset = "0x7B2B7C", VA = "0x7B2B7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x7B2BF4", Offset = "0x7B2BF4", VA = "0x7B2BF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x7B2DD4", Offset = "0x7B2DD4", VA = "0x7B2DD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x7B2E50", Offset = "0x7B2E50", VA = "0x7B2E50")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x7B3C88", Offset = "0x7B3C88", VA = "0x7B3C88")]
	private void Update()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x7B45D8", Offset = "0x7B45D8", VA = "0x7B45D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x7B4770", Offset = "0x7B4770", VA = "0x7B4770")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x7B4168", Offset = "0x7B4168", VA = "0x7B4168")]
	[ContextMenu("Start flocking")]
	public void StartFlocking()
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x7B3BD8", Offset = "0x7B3BD8", VA = "0x7B3BD8")]
	private void Settle()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x7B4918", Offset = "0x7B4918", VA = "0x7B4918")]
	private void Die(Vector3 hitVelocity)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x7B4C00", Offset = "0x7B4C00", VA = "0x7B4C00")]
	private void Hide()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x7B4240", Offset = "0x7B4240", VA = "0x7B4240")]
	private Transform FindGibToFeastOn()
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x7B4D34", Offset = "0x7B4D34", VA = "0x7B4D34")]
	public Seagull()
	{
	}
}
[Token(Token = "0x200001C")]
public class SimpleGraffiti : MonoBehaviour
{
	[Token(Token = "0x6000073")]
	[Address(RVA = "0x7B4FBC", Offset = "0x7B4FBC", VA = "0x7B4FBC", Slot = "4")]
	public virtual void SetTexture(Texture2D texture)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x7B5030", Offset = "0x7B5030", VA = "0x7B5030")]
	public SimpleGraffiti()
	{
	}
}
[Token(Token = "0x200001D")]
public class SlowlyRotate : MonoBehaviour
{
	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x7B5038", Offset = "0x7B5038", VA = "0x7B5038")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x7B5088", Offset = "0x7B5088", VA = "0x7B5088")]
	public SlowlyRotate()
	{
	}
}
[Token(Token = "0x200001E")]
public class SpringBoard : MonoBehaviour
{
	[Token(Token = "0x200001F")]
	private enum State
	{
		[Token(Token = "0x40000EF")]
		Ready,
		[Token(Token = "0x40000F0")]
		Sprung,
		[Token(Token = "0x40000F1")]
		Resetting
	}

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ConfigurableJoint joint;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Collider triggerCollider;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float resetTimer;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private State state;

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x7B5090", Offset = "0x7B5090", VA = "0x7B5090")]
	private void Update()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x7B5354", Offset = "0x7B5354", VA = "0x7B5354")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x7B5558", Offset = "0x7B5558", VA = "0x7B5558")]
	public SpringBoard()
	{
	}
}
[Token(Token = "0x2000020")]
public class TwoSidedArenaDoor : ArenaDoor
{
	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Transform leftDoor;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Transform rightDoor;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private bool swing;

	[Token(Token = "0x40000F5")]
	private const float DoorAngleCheck = 1f;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float defaultXPosLeft;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float defaultXPosRight;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float defaultYRotLeft;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float defaultYRotRight;

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x7B5560", Offset = "0x7B5560", VA = "0x7B5560", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x7B560C", Offset = "0x7B560C", VA = "0x7B560C", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x7B61FC", Offset = "0x7B61FC", VA = "0x7B61FC")]
	public TwoSidedArenaDoor()
	{
	}
}
[Token(Token = "0x2000021")]
public class BadgerBody : MonoBehaviour
{
	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody rigidbody;

	[Token(Token = "0x17000009")]
	public BadgerBouncer owner
	{
		[Token(Token = "0x600007D")]
		[Address(RVA = "0x7B6200", Offset = "0x7B6200", VA = "0x7B6200")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600007E")]
		[Address(RVA = "0x7B6208", Offset = "0x7B6208", VA = "0x7B6208")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x7B6210", Offset = "0x7B6210", VA = "0x7B6210")]
	private void Start()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x7B62A0", Offset = "0x7B62A0", VA = "0x7B62A0")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x7B669C", Offset = "0x7B669C", VA = "0x7B669C")]
	public BadgerBody()
	{
	}
}
[Token(Token = "0x2000022")]
public class BadgerBouncer : MonoBehaviour
{
	[Token(Token = "0x2000023")]
	[CompilerGenerated]
	private sealed class <RunBlendShape>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BadgerBouncer <>4__this;

		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <value>5__2;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <currentValue>5__3;

		[Token(Token = "0x1700000A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600008D")]
			[Address(RVA = "0x7B772C", Offset = "0x7B772C", VA = "0x7B772C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600008F")]
			[Address(RVA = "0x7B7774", Offset = "0x7B7774", VA = "0x7B7774", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600008A")]
		[Address(RVA = "0x7B6728", Offset = "0x7B6728", VA = "0x7B6728")]
		[DebuggerHidden]
		public <RunBlendShape>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600008B")]
		[Address(RVA = "0x7B758C", Offset = "0x7B758C", VA = "0x7B758C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600008C")]
		[Address(RVA = "0x7B7590", Offset = "0x7B7590", VA = "0x7B7590", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0x7B7734", Offset = "0x7B7734", VA = "0x7B7734", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform bounceTowardsTransform;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float straightenForce;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody body;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public BadgerLegWalker[] legs;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public BadgerHead head;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Grabbable grabbable;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool wasGrabbed;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool leaping;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float leapProgress;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float leapForce;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float leapImpulseForce;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float leapDistance;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool haveDoneLeapImpulse;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float knockedTime;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public SkinnedMeshRenderer skinnedMesh;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int blendShapeCount;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool haveNotifiedMasterThatIWasThrownOut;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float life;

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x7B28B8", Offset = "0x7B28B8", VA = "0x7B28B8")]
	public void HitOutOfBoundsArea()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x7B66A4", Offset = "0x7B66A4", VA = "0x7B66A4")]
	[IteratorStateMachine(typeof(<RunBlendShape>d__18))]
	private IEnumerator RunBlendShape(int index)
	{
		return null;
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x7B6750", Offset = "0x7B6750", VA = "0x7B6750")]
	public void Attach()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x7B6690", Offset = "0x7B6690", VA = "0x7B6690")]
	public void Knock()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x7B6628", Offset = "0x7B6628", VA = "0x7B6628")]
	public void Detach()
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x7B69B8", Offset = "0x7B69B8", VA = "0x7B69B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x7B6A80", Offset = "0x7B6A80", VA = "0x7B6A80")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x7B757C", Offset = "0x7B757C", VA = "0x7B757C")]
	public BadgerBouncer()
	{
	}
}
[Token(Token = "0x2000024")]
public class BadgerEyeTwitch : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion targetRotation;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float twitchDelayMax;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float eyeRollSpeed;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float twitchDelay;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion startRotation;

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x7B777C", Offset = "0x7B777C", VA = "0x7B777C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x7B77AC", Offset = "0x7B77AC", VA = "0x7B77AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x7B7A08", Offset = "0x7B7A08", VA = "0x7B7A08")]
	public BadgerEyeTwitch()
	{
	}
}
[Token(Token = "0x2000025")]
public class BadgerHead : MonoBehaviour
{
	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private BadgerBouncer owner;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform jawTransform;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ConfigurableJoint joint;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float jointSpeed;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float counter;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform biteTransform;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float biteRange;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public FixedJoint attachJoint;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool attached;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float damageDelay;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float damageCounter;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float detachDelay;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float detachCounter;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public DamageRelay attachedTo;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float bloodCounter;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float attachCooldown;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip[] growlIdle;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip[] growlBiting;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip[] growlAnticipate;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float idleGrowlPitch;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float bitingGrowlPitch;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private AudioSource audioSource;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Rigidbody myRigidbody;

	[Token(Token = "0x4000131")]
	private const float PlayerBadgerDistanceMultiplier = 12.5f;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float headSide;

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x7B7A10", Offset = "0x7B7A10", VA = "0x7B7A10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x7B7BC4", Offset = "0x7B7BC4", VA = "0x7B7BC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x7B68A8", Offset = "0x7B68A8", VA = "0x7B68A8")]
	public void Detach()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x7B8620", Offset = "0x7B8620", VA = "0x7B8620")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x7B8B9C", Offset = "0x7B8B9C", VA = "0x7B8B9C")]
	public BadgerHead()
	{
	}
}
[Token(Token = "0x2000026")]
[CreateAssetMenu(fileName = "WalkAnim", menuName = "Badger Anims/List", order = 1)]
public class BadgerLegAnim : ScriptableObject
{
	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve upperLegRotationM;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Quaternion upperLegRotation0;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Quaternion upperLegRotation1;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve lowerLegRotationM;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Quaternion lowerLegRotation0;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Quaternion lowerLegRotation1;

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x7B8BAC", Offset = "0x7B8BAC", VA = "0x7B8BAC")]
	public BadgerLegAnim()
	{
	}
}
[Token(Token = "0x2000027")]
public class BadgerLegWalker : MonoBehaviour
{
	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float phase;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BadgerLegAnim anim;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody upperLeg;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Rigidbody lowerLeg;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ConfigurableJoint upperLegJoint;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ConfigurableJoint lowerLegJoint;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float speed;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool overRideCounter;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float overrideValue;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float positionSpringActivated;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float positionSpringDeactivated;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float counter;

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x7B6828", Offset = "0x7B6828", VA = "0x7B6828")]
	public void Activate()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x7B67AC", Offset = "0x7B67AC", VA = "0x7B67AC")]
	public void Deactivate()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x7B8BB4", Offset = "0x7B8BB4", VA = "0x7B8BB4")]
	private void Start()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x7B8C38", Offset = "0x7B8C38", VA = "0x7B8C38")]
	private void Update()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x7B8D98", Offset = "0x7B8D98", VA = "0x7B8D98")]
	public BadgerLegWalker()
	{
	}
}
[Token(Token = "0x2000028")]
public class BezierConnector : MonoBehaviour
{
	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform origin;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform end;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform[] midPoints;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float clampAngleTo;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool orientTransforms;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SerializeField]
	private bool alternateOrientation;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[SerializeField]
	private bool offsetOrientation;

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x7B8DA0", Offset = "0x7B8DA0", VA = "0x7B8DA0")]
	private void Update()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x7B91A4", Offset = "0x7B91A4", VA = "0x7B91A4")]
	private Vector3 GetPointAt(float t, Vector3 topPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x7B9258", Offset = "0x7B9258", VA = "0x7B9258")]
	public BezierConnector()
	{
	}
}
[Token(Token = "0x2000029")]
public class BloodSprayableSurface : MonoBehaviour
{
	[Token(Token = "0x200002A")]
	private class BloodBlobInfo
	{
		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector2 pos;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int growsLeft;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int size;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedM;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float updateDelay;

		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x7BA2C4", Offset = "0x7BA2C4", VA = "0x7BA2C4")]
		public BloodBlobInfo()
		{
		}
	}

	[Token(Token = "0x200002B")]
	private struct JoinBlobJob
	{
		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2 uv1;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 uv2;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float size1;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float size2;

		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x7BA424", Offset = "0x7BA424", VA = "0x7BA424")]
		public JoinBlobJob(RaycastHit hit1, float size1, RaycastHit hit2, float size2)
		{
		}
	}

	[Token(Token = "0x200002C")]
	[CompilerGenerated]
	private sealed class <JoinBlobsWorker>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloodSprayableSurface <>4__this;

		[Token(Token = "0x1700000C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000B2")]
			[Address(RVA = "0x7BAA80", Offset = "0x7BAA80", VA = "0x7BAA80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000B4")]
			[Address(RVA = "0x7BAAC8", Offset = "0x7BAAC8", VA = "0x7BAAC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x7BA3FC", Offset = "0x7BA3FC", VA = "0x7BA3FC")]
		[DebuggerHidden]
		public <JoinBlobsWorker>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x7BA67C", Offset = "0x7BA67C", VA = "0x7BA67C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x7BA680", Offset = "0x7BA680", VA = "0x7BA680", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x7BAA88", Offset = "0x7BAA88", VA = "0x7BAA88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool horizontal;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool dontGrow;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private int blendTexWidth;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int blendTexHeight;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[FormerlySerializedAs("UVToWorldScale")]
	[SerializeField]
	private float uvToWorldScale;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[FormerlySerializedAs("DrawTexture")]
	private Texture2D drawTexture;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[FormerlySerializedAs("FadeMaterial")]
	private Material fadeMaterial;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[FormerlySerializedAs("FadeDelay")]
	private float fadeDelay;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float counter;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material material;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture blendTex;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Collider collider;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<JoinBlobJob> joinBlobJobs;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly List<BloodBlobInfo> blobs;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<int, Texture2D> blankTexDict;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Stopwatch stopwatch;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int BlendTex;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float fadeBloodTimer;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float timeOfLastBlob;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Rect> queuedCircles;

	[Token(Token = "0x4000160")]
	private const float FadeTime = 10f;

	[Token(Token = "0x4000161")]
	private const int MaxBloodCirclesPerFrame = 10;

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x7B9260", Offset = "0x7B9260", VA = "0x7B9260")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x7B9364", Offset = "0x7B9364", VA = "0x7B9364")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x7B9618", Offset = "0x7B9618", VA = "0x7B9618")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x7B9754", Offset = "0x7B9754", VA = "0x7B9754")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x7B9B1C", Offset = "0x7B9B1C", VA = "0x7B9B1C")]
	public void Hit(RaycastHit hit, float size)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x7B9BB4", Offset = "0x7B9BB4", VA = "0x7B9BB4")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x7B9E48", Offset = "0x7B9E48", VA = "0x7B9E48")]
	public void MakeBlob(RaycastHit hit, float size, Vector3 velocity)
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x7B95A4", Offset = "0x7B95A4", VA = "0x7B95A4")]
	[IteratorStateMachine(typeof(<JoinBlobsWorker>d__31))]
	private IEnumerator JoinBlobsWorker()
	{
		return null;
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x7BA2CC", Offset = "0x7BA2CC", VA = "0x7BA2CC")]
	public void JoinBlobs(RaycastHit hit1, float size1, RaycastHit hit2, float size2)
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x7B99EC", Offset = "0x7B99EC", VA = "0x7B99EC")]
	public void DrawCircle(int centerX, int centerY, int radius)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x7BA474", Offset = "0x7BA474", VA = "0x7BA474")]
	public BloodSprayableSurface()
	{
	}
}
[Token(Token = "0x200002D")]
public class BoxCrane : MonoBehaviour
{
	[Token(Token = "0x200002E")]
	[CompilerGenerated]
	private sealed class <DropBoxesRoutine>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoxCrane <>4__this;

		[Token(Token = "0x1700000F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000BD")]
			[Address(RVA = "0x7BB330", Offset = "0x7BB330", VA = "0x7BB330", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000BF")]
			[Address(RVA = "0x7BB378", Offset = "0x7BB378", VA = "0x7BB378", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x7BABE8", Offset = "0x7BABE8", VA = "0x7BABE8")]
		[DebuggerHidden]
		public <DropBoxesRoutine>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x7BAC20", Offset = "0x7BAC20", VA = "0x7BAC20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x7BAC24", Offset = "0x7BAC24", VA = "0x7BAC24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x7BB338", Offset = "0x7BB338", VA = "0x7BB338", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animation animation;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Rigidbody hookEndPoint;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float swingDrag;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject chain;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<SurpriseBox> surpriseBoxes;

	[Token(Token = "0x1700000E")]
	public Rigidbody HookEndPoint
	{
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x7BAAD0", Offset = "0x7BAAD0", VA = "0x7BAAD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x7BAAD8", Offset = "0x7BAAD8", VA = "0x7BAAD8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x7BAAF8", Offset = "0x7BAAF8", VA = "0x7BAAF8")]
	public void DropBoxes(List<SurpriseBox> surpriseBoxes)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x7BAB74", Offset = "0x7BAB74", VA = "0x7BAB74")]
	[IteratorStateMachine(typeof(<DropBoxesRoutine>d__9))]
	private IEnumerator DropBoxesRoutine()
	{
		return null;
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x7BAC10", Offset = "0x7BAC10", VA = "0x7BAC10")]
	public BoxCrane()
	{
	}
}
[Token(Token = "0x200002F")]
public class BreakableProp : MonoBehaviour
{
	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject brokenPrefab;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float health;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string soundEffectName;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float breakExplosionForce;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool broken;

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x7BB380", Offset = "0x7BB380", VA = "0x7BB380", Slot = "4")]
	protected virtual void Break(Vector3 pos, float force)
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x7BB5DC", Offset = "0x7BB5DC", VA = "0x7BB5DC")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x7BB7DC", Offset = "0x7BB7DC", VA = "0x7BB7DC")]
	public BreakableProp()
	{
	}
}
[Serializable]
[Token(Token = "0x2000030")]
public class Campaign
{
	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool playerDied;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool abandoned;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool objectiveCompleted;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isDemoCampaign;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float gameTime;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x7BB7F0", Offset = "0x7BB7F0", VA = "0x7BB7F0")]
	public Campaign()
	{
	}
}
[Token(Token = "0x2000031")]
public class BadgerBox : MonoBehaviour
{
	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioClip[] growlClips;

	[Token(Token = "0x4000182")]
	private const float MoveMultiplier = 15f;

	[Token(Token = "0x4000183")]
	private const float ForceMultiplier = 10f;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int clipSize;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float shakeDelay;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 startPos;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion startRot;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Rigidbody myRigidbody;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AudioSource audioSource;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x7BB7F8", Offset = "0x7BB7F8", VA = "0x7BB7F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x7BB968", Offset = "0x7BB968", VA = "0x7BB968")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x7BBBDC", Offset = "0x7BBBDC", VA = "0x7BBBDC")]
	public BadgerBox()
	{
	}
}
[Token(Token = "0x2000032")]
public class CaestusSelectPanel : MonoBehaviour
{
	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CaestusType leftCaestusType;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static CaestusType rightCaestusType;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<CaestusSlab> slabs;

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x7BBBE4", Offset = "0x7BBBE4", VA = "0x7BBBE4")]
	public void Start()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x7BBD50", Offset = "0x7BBD50", VA = "0x7BBD50")]
	private void SetupButtons()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x7BBF68", Offset = "0x7BBF68", VA = "0x7BBF68")]
	private CaestusSlab GetSlabForCaestus(CaestusType type)
	{
		return null;
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x7BC15C", Offset = "0x7BC15C", VA = "0x7BC15C")]
	public void CaestusButtonPressed(CaestusType caestus, bool left)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x7BC1F0", Offset = "0x7BC1F0", VA = "0x7BC1F0")]
	public CaestusSelectPanel()
	{
	}
}
[Token(Token = "0x2000033")]
public class CaestusSlab : MonoBehaviour
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CaestusType caestusType;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer slabRenderer;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DiageticButton leftButton;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DiageticButton rightbutton;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material lockedMaterial;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material unlockedMaterial;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject buttonBlocker;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text text;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject warningMessage;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CaestusSelectPanel panel;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Renderer buttonBlockerRenderer;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material slabMaterialInstance;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Progress;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float hackCheckDelay;

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x7BC1F8", Offset = "0x7BC1F8", VA = "0x7BC1F8")]
	private void ButtonWasPressed(UnityEngine.Object button)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x7BC318", Offset = "0x7BC318", VA = "0x7BC318")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x7BC78C", Offset = "0x7BC78C", VA = "0x7BC78C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x7BC430", Offset = "0x7BC430", VA = "0x7BC430")]
	private void UpdateRenderers()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x7BC7E4", Offset = "0x7BC7E4", VA = "0x7BC7E4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x7BC874", Offset = "0x7BC874", VA = "0x7BC874")]
	public CaestusSlab()
	{
	}
}
[Token(Token = "0x2000034")]
public class CellConditionalDisplayItem : MonoBehaviour
{
	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string[] completedCampaigns;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] perfectedCampaigns;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string[] masteredCampaigns;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool debugAlwaysDisplay;

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x7BC8E4", Offset = "0x7BC8E4", VA = "0x7BC8E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x7BCAE4", Offset = "0x7BCAE4", VA = "0x7BCAE4")]
	public CellConditionalDisplayItem()
	{
	}
}
[Token(Token = "0x2000035")]
public class CellController : MonoBehaviour
{
	[Token(Token = "0x2000036")]
	[CompilerGenerated]
	private sealed class <RunCheckCheatCode>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string code;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CellController <>4__this;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string function;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <currentIndex>5__2;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private char[] <ca>5__3;

		[Token(Token = "0x17000012")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60000E8")]
			[Address(RVA = "0x7BEBFC", Offset = "0x7BEBFC", VA = "0x7BEBFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000013")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000EA")]
			[Address(RVA = "0x7BEC44", Offset = "0x7BEC44", VA = "0x7BEC44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x7BD2C4", Offset = "0x7BD2C4", VA = "0x7BD2C4")]
		[DebuggerHidden]
		public <RunCheckCheatCode>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x7BEA68", Offset = "0x7BEA68", VA = "0x7BEA68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x7BEA6C", Offset = "0x7BEA6C", VA = "0x7BEA6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x7BEC04", Offset = "0x7BEC04", VA = "0x7BEC04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PrefabHolder prefabHolder;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text championText;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LevelSetupInfo testLevelSetupInfo;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool generateTestLevel;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CellController instance;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Elevator elevator;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float lastElevatorHeight;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CellMainScroll mainScroll;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Canvas movementCanvas;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RTLTextMeshPro endlessScoreText;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnlockProgressDisplayController unlockDisplayController;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DoorLever endlessLever;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public DoorLever customLever;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject endlessDoorLock;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject[] endlessDoorTorches;

	[Token(Token = "0x17000011")]
	public static bool IsCellScene
	{
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x7B2548", Offset = "0x7B2548", VA = "0x7B2548")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x7BCAEC", Offset = "0x7BCAEC", VA = "0x7BCAEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x7BD168", Offset = "0x7BD168", VA = "0x7BD168")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x7BD220", Offset = "0x7BD220", VA = "0x7BD220")]
	[IteratorStateMachine(typeof(<RunCheckCheatCode>d__19))]
	private IEnumerator RunCheckCheatCode(string code, string function)
	{
		return null;
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x7BD2EC", Offset = "0x7BD2EC", VA = "0x7BD2EC")]
	private void SwitchPulled(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x7BD830", Offset = "0x7BD830", VA = "0x7BD830")]
	public static void LoadCellScene()
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x7BD8F0", Offset = "0x7BD8F0", VA = "0x7BD8F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x7BDA84", Offset = "0x7BDA84", VA = "0x7BDA84")]
	public static void StartDemoMode()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x7BD41C", Offset = "0x7BD41C", VA = "0x7BD41C")]
	public static void StartCustomBattle()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x7BDAF4", Offset = "0x7BDAF4", VA = "0x7BDAF4")]
	public static void SwitchToGameplayScene(Arena arena = Arena.Standard)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x7BD630", Offset = "0x7BD630", VA = "0x7BD630")]
	public static void StartEndlessMode()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x7BDBF0", Offset = "0x7BDBF0", VA = "0x7BDBF0")]
	public static void StartChampionBattle(ChampionType champ = ChampionType.Nothing, Arena arena = Arena.Great)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x7BE594", Offset = "0x7BE594", VA = "0x7BE594")]
	public static void StartCampaign(string campaignName)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x7BE7FC", Offset = "0x7BE7FC", VA = "0x7BE7FC")]
	public static bool IsWeapon(PlayerInventoryItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x7BE914", Offset = "0x7BE914", VA = "0x7BE914")]
	private void PositionPlayer(Transform anchor)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x7BEA60", Offset = "0x7BEA60", VA = "0x7BEA60")]
	public CellController()
	{
	}
}
[Token(Token = "0x2000037")]
public class CellMainScroll : MonoBehaviour
{
	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int materialIndex;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material oculusMaterial;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material questMaterial;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material viveMaterial;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material psvrMaterial;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material picoNeo3Material;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material psvr2Material;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material UIRenderMaterial;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject questTexts;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject oculusTexts;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject viveTexts;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject psvrTexts;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject picoNeo3Texts;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject psvr2Texts;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool showUI;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private ControllerType activeControllerType;

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x7BEC4C", Offset = "0x7BEC4C", VA = "0x7BEC4C")]
	public void Update()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x7BD158", Offset = "0x7BD158", VA = "0x7BD158")]
	public void ShowUI()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x7BF074", Offset = "0x7BF074", VA = "0x7BF074")]
	private void SetActiveIfNotNull(GameObject go, bool active)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x7BED5C", Offset = "0x7BED5C", VA = "0x7BED5C")]
	private void SetUpScroll()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x7BEFA4", Offset = "0x7BEFA4", VA = "0x7BEFA4")]
	private void SetMaterial(Material newmat)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x7BF108", Offset = "0x7BF108", VA = "0x7BF108")]
	public CellMainScroll()
	{
	}
}
[Token(Token = "0x2000038")]
public class ChampionDoor : MonoBehaviour
{
	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string campaignName;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numCampaignVictoriesToUnlock;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro championNameText;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject lockObject;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ConfigurableJoint handleJoint;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GazeTrigger doorActivationTrigger;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isLocked;

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x7BF110", Offset = "0x7BF110", VA = "0x7BF110")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x7BF234", Offset = "0x7BF234", VA = "0x7BF234")]
	private void SwitchPulled()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x7BF114", Offset = "0x7BF114", VA = "0x7BF114")]
	public void UpdateLockState()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x7BF2EC", Offset = "0x7BF2EC", VA = "0x7BF2EC")]
	private void OnGazeEnter(GazeTrigger trigger)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x7BF358", Offset = "0x7BF358", VA = "0x7BF358")]
	public ChampionDoor()
	{
	}
}
[Token(Token = "0x2000039")]
public class ChampionHelmetDisplay : MonoBehaviour
{
	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ChampionType champion;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string trialName;

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x7BF360", Offset = "0x7BF360", VA = "0x7BF360")]
	private void ButtonWasPressed(object button)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x7BF394", Offset = "0x7BF394", VA = "0x7BF394")]
	public ChampionHelmetDisplay()
	{
	}
}
[Token(Token = "0x200003A")]
public class CreditsPanel : MonoBehaviour
{
	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform creditsText;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshProUGUI text;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startingDelay;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float creditsScrollSpeed;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int englishLicenseSize;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int nonEnglishLicenseSize;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int englishUrlSize;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int nonEnglishUrlSize;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[TextArea(20, 40)]
	public string creditsFormatText;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isDisplaying;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float delayTimer;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool hasFinishedScrolling;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OutroController outroController;

	[Token(Token = "0x40001DB")]
	private const float ScrollBuffer = 1.15f;

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x7BF39C", Offset = "0x7BF39C", VA = "0x7BF39C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x7BFB1C", Offset = "0x7BFB1C", VA = "0x7BFB1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x7BFB28", Offset = "0x7BFB28", VA = "0x7BFB28")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x7BFC94", Offset = "0x7BFC94", VA = "0x7BFC94")]
	public CreditsPanel()
	{
	}
}
[Token(Token = "0x200003B")]
public class DiageticButton : MonoBehaviour
{
	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Notify a gameobject of the press by sending a 'ButtonWasPressed' message to the gameobject.")]
	public GameObject notifyOnPress;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro text;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ConfigurableJoint joint;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool pressedLastFrame;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool showLinearOffset;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Renderer buttonRenderer;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material onMaterial;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material offMaterial;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("A unity event invoked whenever this button is pressed.")]
	public UnityEvent OnButtonPressed;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float canPressDelay;

	[Token(Token = "0x17000014")]
	public bool Lit
	{
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x7BFCA8", Offset = "0x7BFCA8", VA = "0x7BFCA8")]
		set
		{
		}
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x7BFCDC", Offset = "0x7BFCDC", VA = "0x7BFCDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x7BFDBC", Offset = "0x7BFDBC", VA = "0x7BFDBC", Slot = "4")]
	protected virtual void WasPressed()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x7BFEC8", Offset = "0x7BFEC8", VA = "0x7BFEC8")]
	public DiageticButton()
	{
	}
}
[Token(Token = "0x200003C")]
public class DiageticOptionsController : MonoBehaviour
{
	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DiageticButton qualityOptionsButton;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DiageticButton gameplayOptionsButton;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DiageticButton movementOptionsButton;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DiageticButton creditsButton;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject qualityOptionsPanel;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject gameplayOptionsPanel;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject movementOptionsPanel;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public DiageticButton pinyataButton;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public DiageticButton vignetteButton;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DiageticButton strictChaperoneButton;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public DiageticButton quitButton;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public DiageticButton movementButton;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DiageticButton demoButton;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public DiageticButton easyModeButton;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public DiageticButton armorShattersButton;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public DiageticButton persistentBloodButton;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public DiageticButton rotationButton;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public DiageticButton blurButton;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public DiageticButton smoothCameraButton;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public DiageticButton slowmoOnKillButton;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public DiageticButton heightCalibration;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public DiageticButton playAreaWarning;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text headerText;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Animator animator;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public DiageticShittyOptionsController diageticShittyOptionsController;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private GameObject optionsPanelToDisplay;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float hintTextDisplayTimeLeft;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float randomFloat;

	[Token(Token = "0x4000202")]
	private const string Ninety = "90";

	[Token(Token = "0x4000203")]
	private const string FortyFive = "45";

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x7BFF44", Offset = "0x7BFF44", VA = "0x7BFF44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x7BFF6C", Offset = "0x7BFF6C", VA = "0x7BFF6C")]
	private void DisableAllPanels()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x7BFFB8", Offset = "0x7BFFB8", VA = "0x7BFFB8")]
	private void SetupButtons()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x7C0844", Offset = "0x7C0844", VA = "0x7C0844")]
	private void ButtonWasPressed(object button)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x7C14F8", Offset = "0x7C14F8", VA = "0x7C14F8")]
	public void RefreshRightPanel()
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x7C1528", Offset = "0x7C1528", VA = "0x7C1528")]
	private void NotifyButtonPointedAt(UnityEngine.Object button)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x7C1D98", Offset = "0x7C1D98", VA = "0x7C1D98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x7C07B0", Offset = "0x7C07B0", VA = "0x7C07B0")]
	private string GetRotationAmount(RotationHand rotation)
	{
		return null;
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x7C1E38", Offset = "0x7C1E38", VA = "0x7C1E38")]
	public DiageticOptionsController()
	{
	}
}
[Token(Token = "0x200003D")]
public class DiageticShittyOptionsController : MonoBehaviour
{
	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] customOptionPanels;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ToggleSwitch customGameToggleSwitch;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator flippySign;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public DiageticButton resetButton;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public DiageticButton invulnerablePlayerButton;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DiageticButton invulerableEnemiesButton;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public DiageticButton sortofFlightModeButton;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public DiageticButton royalRumbleButton;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public DiageticButton enemyWeaponsButton;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DiageticButton championModeButton;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public DiageticButton arenaSelectButton;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public DiageticSlider playerSizeSlider;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DiageticSlider gameSpeedSlider;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public DiageticSlider enemySpeedSlider;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public DiageticSlider bloodSlider;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public DiageticSlider gravitySlider;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public DiageticSlider knockSlider;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public DiageticSlider damageSlider;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public DiageticSlider headSizeSlider;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public DiageticSlider enemyArmorSlider;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public DiageticSlider enemyAggressionSlider;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ShittyOptionsPresetPanel shittyOptionsPresetPanel;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject sortOfFlightWarning;

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x7C1E40", Offset = "0x7C1E40", VA = "0x7C1E40")]
	private void SetupButtons()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x7C20C4", Offset = "0x7C20C4", VA = "0x7C20C4")]
	private void SetSliderTexts()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x7C26D8", Offset = "0x7C26D8", VA = "0x7C26D8")]
	private void SetupSliders()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x7C2884", Offset = "0x7C2884", VA = "0x7C2884")]
	public void Start()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x7C137C", Offset = "0x7C137C", VA = "0x7C137C")]
	public void UpdateSortOfFlightModeButton()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x7C28A4", Offset = "0x7C28A4", VA = "0x7C28A4")]
	private void ButtonWasPressed(object button)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x7C3190", Offset = "0x7C3190", VA = "0x7C3190")]
	private void ToggleSwitchChanged(ToggleSwitch toggleSwitch)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x7C32F4", Offset = "0x7C32F4", VA = "0x7C32F4")]
	private void SliderGrabbed(UnityEngine.Object slider)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x7C337C", Offset = "0x7C337C", VA = "0x7C337C")]
	private void UpdateSliderValue(DiageticSlider s)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x7C36C4", Offset = "0x7C36C4", VA = "0x7C36C4")]
	private void SliderReleased(UnityEngine.Object slider)
	{
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x7C3790", Offset = "0x7C3790", VA = "0x7C3790")]
	public DiageticShittyOptionsController()
	{
	}
}
[Token(Token = "0x200003E")]
public class DiageticSlider : MonoBehaviour
{
	[Token(Token = "0x400021B")]
	private const float DialAngle = 105f;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Grabbable slideyPart;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject notifyOnRelease;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro text;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lerpSpeed;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float normalizedValue;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool wasGrabbed;

	[Token(Token = "0x17000015")]
	public string Text
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0x7C3798", Offset = "0x7C3798", VA = "0x7C3798")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000115")]
		[Address(RVA = "0x7C26B4", Offset = "0x7C26B4", VA = "0x7C26B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public float NormalizedValue
	{
		[Token(Token = "0x6000116")]
		[Address(RVA = "0x7C37BC", Offset = "0x7C37BC", VA = "0x7C37BC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000117")]
		[Address(RVA = "0x7C37C4", Offset = "0x7C37C4", VA = "0x7C37C4")]
		set
		{
		}
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x7C37CC", Offset = "0x7C37CC", VA = "0x7C37CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x7C39FC", Offset = "0x7C39FC", VA = "0x7C39FC")]
	private Quaternion GetSliderTargetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x7C3A9C", Offset = "0x7C3A9C", VA = "0x7C3A9C")]
	public DiageticSlider()
	{
	}
}
[Token(Token = "0x200003F")]
public class DoorLever : MonoBehaviour
{
	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float triggerAngle;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject notifyOnPull;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 defaultForward;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 defaultRight;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float triggerAngleDirection;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool hasBeenTriggered;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool testTrigger;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Grabbable grabbable;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float triggerWindowTimer;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool useKeyBoard;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.InputSystem.Key key;

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x7C3AAC", Offset = "0x7C3AAC", VA = "0x7C3AAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x7C3B5C", Offset = "0x7C3B5C", VA = "0x7C3B5C")]
	private void Update()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x7C3E84", Offset = "0x7C3E84", VA = "0x7C3E84")]
	private void TriggerLever()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x7C408C", Offset = "0x7C408C", VA = "0x7C408C")]
	public DoorLever()
	{
	}
}
[Serializable]
[Token(Token = "0x2000040")]
public class ElevatorFloorStop
{
	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform stop;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isLocked;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FloorObjects floorObjects;

	[Token(Token = "0x17000017")]
	public Vector3 position
	{
		[Token(Token = "0x600011F")]
		[Address(RVA = "0x7C40A8", Offset = "0x7C40A8", VA = "0x7C40A8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x7C40C4", Offset = "0x7C40C4", VA = "0x7C40C4")]
	public ElevatorFloorStop()
	{
	}
}
[Token(Token = "0x2000041")]
public class Elevator : MonoBehaviour
{
	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float acceleration;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxSpeed;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<ElevatorFloorStop> floorStops;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FloorGate[] floorGates;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ElevatorControls elevatorControls;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource audioSource;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float elevatorAudioMaxVolume;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject elevatorBlockers;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float velocity;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ElevatorFloorStop targetFloor;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int targetFloorIndex;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool hasElevatorMoved;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float targetFloorDirection;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float bottomFloorHeight;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float topFloorHeight;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rigidbody;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int lastFloorIndex;

	[Token(Token = "0x17000018")]
	public float Velocity
	{
		[Token(Token = "0x6000121")]
		[Address(RVA = "0x7C40CC", Offset = "0x7C40CC", VA = "0x7C40CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x7C40D4", Offset = "0x7C40D4", VA = "0x7C40D4")]
	public void Setup()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x7C48AC", Offset = "0x7C48AC", VA = "0x7C48AC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x7C4C40", Offset = "0x7C4C40", VA = "0x7C4C40")]
	private void CheckForFloor()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x7C4E28", Offset = "0x7C4E28", VA = "0x7C4E28")]
	public void MoveToFloor(int floorIndex)
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x7C4D60", Offset = "0x7C4D60", VA = "0x7C4D60")]
	private int GetCurrentFloorIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x7C4ED8", Offset = "0x7C4ED8", VA = "0x7C4ED8")]
	public int GetFloorIndexByPosition()
	{
		return default(int);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x7C4FC0", Offset = "0x7C4FC0", VA = "0x7C4FC0")]
	public float GetElevatorHeightNormalized()
	{
		return default(float);
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x7C5018", Offset = "0x7C5018", VA = "0x7C5018")]
	public void SetupCurrentFloor(int leverPosition)
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x7C50E8", Offset = "0x7C50E8", VA = "0x7C50E8")]
	public Elevator()
	{
	}
}
[Token(Token = "0x2000042")]
public class ElevatorControls : MonoBehaviour
{
	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Elevator elevator;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ConfigurableJoint leverJoint;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool releaseLeverToMove;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float playerMaxDistanceToUse;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Renderer[] floorIndicatorLights;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material lightOnMaterial;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material lightDisabledMaterial;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material lightOffMaterial;

	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform frontCog;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform sideCog;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string leverSwitchSoundName;

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform floorIndicatorFinger;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector3 floorIndicatorTopPosition;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 floorIndicatorBottomPosition;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Grabbable leverGrabbable;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float defaultLowAngularLimit;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float defaultHighAngularLimit;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float leverAngleIncrement;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float currentAngle;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int leverPosition;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int lastLeverPosition;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool wasGrabbed;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float debugAngle;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int minFloor;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int maxFloor;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float safetyTimer;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float leverYStartRotation;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 playerStartPosition;

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x7C50F8", Offset = "0x7C50F8", VA = "0x7C50F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x7C4434", Offset = "0x7C4434", VA = "0x7C4434")]
	public void Setup()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x7C53C4", Offset = "0x7C53C4", VA = "0x7C53C4")]
	private void Update()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x7C51A4", Offset = "0x7C51A4", VA = "0x7C51A4")]
	private void UpdateLightState()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x7C58F0", Offset = "0x7C58F0", VA = "0x7C58F0")]
	private float GetPlayerDistanceFromCenter()
	{
		return default(float);
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x7C5A34", Offset = "0x7C5A34", VA = "0x7C5A34")]
	public ElevatorControls()
	{
	}
}
[Token(Token = "0x2000043")]
public class ElevatorLight : MonoBehaviour
{
	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float bottomPosition;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float topPosition;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gradient colorGradient;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve rangeCurve;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light light;

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x7C5A48", Offset = "0x7C5A48", VA = "0x7C5A48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x7C5AA0", Offset = "0x7C5AA0", VA = "0x7C5AA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x7C5B58", Offset = "0x7C5B58", VA = "0x7C5B58")]
	public ElevatorLight()
	{
	}
}
[Token(Token = "0x2000044")]
public class ExitOutroLever : MonoBehaviour
{
	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable grabbable;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OutroController outroController;

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x7C5B60", Offset = "0x7C5B60", VA = "0x7C5B60")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x7C5C10", Offset = "0x7C5C10", VA = "0x7C5C10")]
	private void Update()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x7C5CB8", Offset = "0x7C5CB8", VA = "0x7C5CB8")]
	private void TriggerLever()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x7C5DCC", Offset = "0x7C5DCC", VA = "0x7C5DCC")]
	public ExitOutroLever()
	{
	}
}
[Token(Token = "0x2000045")]
public class FlippySwitch : MonoBehaviour
{
	[Token(Token = "0x4000264")]
	private const float ChainGrabbedMass = 5f;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject notifyOnPull;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject chain;

	[Token(Token = "0x4000267")]
	private const float SqrDist = 81f;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool wasOn;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float lastSoundTime;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 position;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Grabbable grabbable;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Grabbable chainGrabbable;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Rigidbody chainGrabbableRigidbody;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float chainDefaultMass;

	[Token(Token = "0x17000019")]
	private bool IsOn
	{
		[Token(Token = "0x6000138")]
		[Address(RVA = "0x7C5DD4", Offset = "0x7C5DD4", VA = "0x7C5DD4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x7C5E80", Offset = "0x7C5E80", VA = "0x7C5E80")]
	private void Start()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x7C6078", Offset = "0x7C6078", VA = "0x7C6078")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x7C6268", Offset = "0x7C6268", VA = "0x7C6268")]
	private bool IsPlayerCloseEnough()
	{
		return default(bool);
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x7C62D4", Offset = "0x7C62D4", VA = "0x7C62D4")]
	public FlippySwitch()
	{
	}
}
[Token(Token = "0x2000046")]
public class FloorGate : MonoBehaviour
{
	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action Closed;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int lockedFloorIndex;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int completedCampaignsRequired;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator gateAnimator;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] gateBars;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve barOpenCurve;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float barOpenOffset;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource openAudio;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] barPositions;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] barOpenDelays;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float[] barOpenDurations;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float[] barOpenTimers;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Open_State;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int Close_State;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int Open_Trigger;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int Close_Trigger;

	[Token(Token = "0x1700001A")]
	public bool IsOpen
	{
		[Token(Token = "0x600013D")]
		[Address(RVA = "0x7C62DC", Offset = "0x7C62DC", VA = "0x7C62DC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600013E")]
		[Address(RVA = "0x7C62E4", Offset = "0x7C62E4", VA = "0x7C62E4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x7C62F0", Offset = "0x7C62F0", VA = "0x7C62F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x7C641C", Offset = "0x7C641C", VA = "0x7C641C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x7C43A8", Offset = "0x7C43A8", VA = "0x7C43A8")]
	public void UpdateLockState()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x7C6420", Offset = "0x7C6420", VA = "0x7C6420")]
	public void OnClosed()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x7C643C", Offset = "0x7C643C", VA = "0x7C643C")]
	public void DoCloseAnimation()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x7C64C8", Offset = "0x7C64C8", VA = "0x7C64C8")]
	[ContextMenu("Open")]
	public void DoOpenAnimation()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x7C6578", Offset = "0x7C6578", VA = "0x7C6578")]
	public void InstantClose()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x7C65F0", Offset = "0x7C65F0", VA = "0x7C65F0")]
	public void InstantOpen()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x7C6668", Offset = "0x7C6668", VA = "0x7C6668")]
	public FloorGate()
	{
	}
}
[Token(Token = "0x2000047")]
public class HandAnchorTutorial : MonoBehaviour
{
	[Token(Token = "0x2000048")]
	private enum MovementTutorialState
	{
		[Token(Token = "0x40002A1")]
		MoveHand,
		[Token(Token = "0x40002A2")]
		Press,
		[Token(Token = "0x40002A3")]
		Pull,
		[Token(Token = "0x40002A4")]
		Release
	}

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int numRepeats;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float repeatOffsetDistance;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool forceMovementButtonPress;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float handDetectionRadius;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform tutorialContainer;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform ghostHand;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject ghostViveController;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ghostOculusController;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject ghostQuestController;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject ghostPicoNeo3Controller;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject ghostPsvrController;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject ghostPsvr2Controller;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform controllerContainer;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshProUGUI tutorialText;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject handArc;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject pullStringContainer;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform pullStringLine;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform pullStringBall;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform podium;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private MovementTutorialState tutorialState;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform cameraTransform;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Transform controllerTransform;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform closestHand;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Fist closestHandFist;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform trackedHand;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float closestHandDistance;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 defaultTutorialContainerLocalPosition;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float pullStringCounter;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool showPullString;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float pullStringBallDuration;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private IInputReader inputReader;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private ControllerType activeControllerType;

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x7C6774", Offset = "0x7C6774", VA = "0x7C6774")]
	private void Awake()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x7C67A0", Offset = "0x7C67A0", VA = "0x7C67A0")]
	private void Start()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x7C7900", Offset = "0x7C7900", VA = "0x7C7900")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x7C79F0", Offset = "0x7C79F0", VA = "0x7C79F0")]
	private void Update()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x7C6C54", Offset = "0x7C6C54", VA = "0x7C6C54")]
	private void SetupControllerMesh()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x7C6E64", Offset = "0x7C6E64", VA = "0x7C6E64")]
	private void EnterState(MovementTutorialState state)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x7C8398", Offset = "0x7C8398", VA = "0x7C8398")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x7C83C4", Offset = "0x7C83C4", VA = "0x7C83C4")]
	public HandAnchorTutorial()
	{
	}
}
[Token(Token = "0x2000049")]
public class JointHack : MonoBehaviour
{
	[Token(Token = "0x200004A")]
	[CompilerGenerated]
	private sealed class <RecreateJoint>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public JointHack <>4__this;

		[Token(Token = "0x1700001B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000159")]
			[Address(RVA = "0x7C8948", Offset = "0x7C8948", VA = "0x7C8948", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600015B")]
			[Address(RVA = "0x7C8990", Offset = "0x7C8990", VA = "0x7C8990", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x7C84FC", Offset = "0x7C84FC", VA = "0x7C84FC")]
		[DebuggerHidden]
		public <RecreateJoint>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x7C852C", Offset = "0x7C852C", VA = "0x7C852C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x7C8530", Offset = "0x7C8530", VA = "0x7C8530", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x7C8950", Offset = "0x7C8950", VA = "0x7C8950", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion startingRotation;

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x7C8438", Offset = "0x7C8438", VA = "0x7C8438")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x7C8468", Offset = "0x7C8468", VA = "0x7C8468")]
	private void Start()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x7C8488", Offset = "0x7C8488", VA = "0x7C8488")]
	[IteratorStateMachine(typeof(<RecreateJoint>d__3))]
	private IEnumerator RecreateJoint()
	{
		return null;
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x7C8524", Offset = "0x7C8524", VA = "0x7C8524")]
	public JointHack()
	{
	}
}
[Token(Token = "0x200004B")]
public class LightFlicker : MonoBehaviour
{
	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Light pointLight;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rangeVariance;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float intensityVariance;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float rangeSpeed;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float intensitySpeed;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float movementRange;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float movementSpeed;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float rangeCounter;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float intensityCounter;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float movementCounter;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float baseRange;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float baseIntensity;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[FormerlySerializedAs("usePs4Scale")]
	public bool useOptimisedRange;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("ps4BaseRangeScale")]
	public float tier1RangeScale;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform CameraTransform;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 basePos;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool alwaysOn;

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x7C8998", Offset = "0x7C8998", VA = "0x7C8998")]
	private void Start()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x7C8BC8", Offset = "0x7C8BC8", VA = "0x7C8BC8")]
	private void Update()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x7C8E5C", Offset = "0x7C8E5C", VA = "0x7C8E5C")]
	public LightFlicker()
	{
	}
}
[Token(Token = "0x200004C")]
public class MovementIntroCellController : MonoBehaviour
{
	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DoorLever startSwitch;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform cameraTransform;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool hasEnabledHands;

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x7C8E70", Offset = "0x7C8E70", VA = "0x7C8E70")]
	private void Start()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x7C8F68", Offset = "0x7C8F68", VA = "0x7C8F68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x7C9180", Offset = "0x7C9180", VA = "0x7C9180")]
	private void SwitchPulled(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x7C94B4", Offset = "0x7C94B4", VA = "0x7C94B4")]
	public static void StartTutorialFight()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x7C9260", Offset = "0x7C9260", VA = "0x7C9260")]
	public static void StartPAXDemo()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x7C9324", Offset = "0x7C9324", VA = "0x7C9324")]
	public static void StartDemoMode()
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x7C94F8", Offset = "0x7C94F8", VA = "0x7C94F8")]
	public MovementIntroCellController()
	{
	}
}
[Token(Token = "0x200004D")]
public class Odalbe : MonoBehaviour
{
	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hasSomethingToSay;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isSleepTalking;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioSource;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform head;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform jaw;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxJawOffset;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float maxJawPitch;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float maxJawRoll;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float headBobMultiplier;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float jawRollSpeed;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform followTransform;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float followSpeed;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Animator animator;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector3 worldUp;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 defaultJawLocalPosition;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Quaternion defaultJawLocalRotation;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private AudioData audioData;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float[] samples;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float jawRollc;

	[Token(Token = "0x1700001D")]
	private bool IsSpeaking
	{
		[Token(Token = "0x6000166")]
		[Address(RVA = "0x7C9500", Offset = "0x7C9500", VA = "0x7C9500")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x7C951C", Offset = "0x7C951C", VA = "0x7C951C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x7C96EC", Offset = "0x7C96EC", VA = "0x7C96EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x7C99C4", Offset = "0x7C99C4", VA = "0x7C99C4")]
	private void FocusHead(float jawOffset)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x7C9C80", Offset = "0x7C9C80", VA = "0x7C9C80")]
	public void SetIsAwake(bool isAwake)
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x7C9CDC", Offset = "0x7C9CDC", VA = "0x7C9CDC")]
	public void StartSpeaking(AudioClip clip, AudioData data)
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x7C9D50", Offset = "0x7C9D50", VA = "0x7C9D50")]
	public void StopSpeaking()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x7C9D90", Offset = "0x7C9D90", VA = "0x7C9D90")]
	public Odalbe()
	{
	}
}
[Serializable]
[Token(Token = "0x200004E")]
public class ChampionDialogue
{
	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string championName;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OdalbeDialogue failDialogue;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OdalbeDialogue winDialogue;

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x7C9DF4", Offset = "0x7C9DF4", VA = "0x7C9DF4")]
	public ChampionDialogue()
	{
	}
}
[Token(Token = "0x200004F")]
public class OdalbeInteractionController : MonoBehaviour
{
	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OdalbeDialogue dialogueToTrigger;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Odalbe odalbe;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RTLTextMeshPro3D englishText;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshPro kiroodrokiText;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform triggerOrigin;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float triggerRadius;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float cancelDialogueHeightCutoff;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public KiroodrokiCharacterTable kiroodrokiCharacterTable;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Dialogue Lookup")]
	public OdalbeDialogue sleeptalkingDialogue;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public OdalbeDialogue forcedFirstDialogue;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public OdalbeDialogue completeFirstFloorDialogue;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public OdalbeDialogue completeSecondFloorDialogue;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public OdalbeDialogue completeThirdFloorDialogue;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<ChampionDialogue> championDialogues;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<OdalbeDialogue> generalDialogues;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform cameraTransform;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool isLookingAtOdalbe;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OdalbeDialogueSegment currentDialogueSegment;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Queue<OdalbeDialogueSegment> dialogueSegmentQueue;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float letterInterval;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float nextLetterTime;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int letterIndex;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float nextDialogueTime;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float speakStartDelay;

	[Token(Token = "0x1700001E")]
	public bool IsSpeaking
	{
		[Token(Token = "0x600016F")]
		[Address(RVA = "0x7C9DFC", Offset = "0x7C9DFC", VA = "0x7C9DFC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x7C9E0C", Offset = "0x7C9E0C", VA = "0x7C9E0C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x7CA3C8", Offset = "0x7CA3C8", VA = "0x7CA3C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x7CB00C", Offset = "0x7CB00C", VA = "0x7CB00C")]
	public void OnGazeEnter(GazeTrigger gazeTrigger)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x7CB018", Offset = "0x7CB018", VA = "0x7CB018")]
	public void OnGazeExit(GazeTrigger gazeTrigger)
	{
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x7C9F7C", Offset = "0x7C9F7C", VA = "0x7C9F7C")]
	public void FindDialogueResponse()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x7CAE08", Offset = "0x7CAE08", VA = "0x7CAE08")]
	public void StartDialogue(OdalbeDialogue dialogue)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x7CAAE4", Offset = "0x7CAAE4", VA = "0x7CAAE4")]
	private void AdvanceDialogue()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x7CA678", Offset = "0x7CA678", VA = "0x7CA678")]
	private string UpdateTextVisibility(int index)
	{
		return null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x7CB020", Offset = "0x7CB020", VA = "0x7CB020")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x7CB04C", Offset = "0x7CB04C", VA = "0x7CB04C")]
	public OdalbeInteractionController()
	{
	}
}
[Token(Token = "0x2000051")]
public class OptionsPointNotifier : PointNotifier
{
	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DiageticButton button;

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x7CB158", Offset = "0x7CB158", VA = "0x7CB158")]
	private void Start()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x7CB1B0", Offset = "0x7CB1B0", VA = "0x7CB1B0", Slot = "4")]
	public override void YouAreBeingPointedAt()
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x7CB22C", Offset = "0x7CB22C", VA = "0x7CB22C")]
	public OptionsPointNotifier()
	{
	}
}
[Token(Token = "0x2000052")]
public class PartyModeLobbyCellController : MonoBehaviour
{
	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DoorLever startSwitch;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject waitingText;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject pullText;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int playerCount;

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x7CB23C", Offset = "0x7CB23C", VA = "0x7CB23C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x7CB268", Offset = "0x7CB268", VA = "0x7CB268")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x7CB2CC", Offset = "0x7CB2CC", VA = "0x7CB2CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x7CB6FC", Offset = "0x7CB6FC", VA = "0x7CB6FC")]
	private void SwitchPulled(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x7CB3E0", Offset = "0x7CB3E0", VA = "0x7CB3E0")]
	public static void StartFight()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x7CB7B4", Offset = "0x7CB7B4", VA = "0x7CB7B4")]
	public PartyModeLobbyCellController()
	{
	}
}
[Token(Token = "0x2000053")]
public class PointLabelDisplay : PointNotifier
{
	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float hideDelay;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject label;

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x7CB7BC", Offset = "0x7CB7BC", VA = "0x7CB7BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x7CB824", Offset = "0x7CB824", VA = "0x7CB824", Slot = "4")]
	public override void YouAreBeingPointedAt()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x7CB864", Offset = "0x7CB864", VA = "0x7CB864")]
	public PointLabelDisplay()
	{
	}
}
[Token(Token = "0x2000054")]
public class PointNotifier : MonoBehaviour
{
	[Token(Token = "0x6000189")]
	[Address(RVA = "0x7CB86C", Offset = "0x7CB86C", VA = "0x7CB86C", Slot = "4")]
	public virtual void YouAreBeingPointedAt()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x7CB234", Offset = "0x7CB234", VA = "0x7CB234")]
	public PointNotifier()
	{
	}
}
[Token(Token = "0x2000055")]
public class PointTrigger : MonoBehaviour
{
	[Token(Token = "0x600018B")]
	[Address(RVA = "0x7CB870", Offset = "0x7CB870", VA = "0x7CB870")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x7CB91C", Offset = "0x7CB91C", VA = "0x7CB91C")]
	private void OnTriggerExit(Collider col)
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x7CB9C4", Offset = "0x7CB9C4", VA = "0x7CB9C4")]
	public PointTrigger()
	{
	}
}
[Token(Token = "0x2000056")]
public class SavePresetsPanel : MonoBehaviour
{
	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DiageticButton[] saveButtons;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ShittyOptionsPresetPanel presetPanel;

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x7CB9CC", Offset = "0x7CB9CC", VA = "0x7CB9CC")]
	private void ButtonWasPressed(UnityEngine.Object pressedButton)
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x7CBA90", Offset = "0x7CBA90", VA = "0x7CBA90")]
	private void SavePreset(int slot)
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x7CBBFC", Offset = "0x7CBBFC", VA = "0x7CBBFC")]
	public SavePresetsPanel()
	{
	}
}
[Token(Token = "0x2000057")]
public class ShittyOptionsPresetPanel : MonoBehaviour
{
	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool showPlayerPresets;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<ShittyOptionPreset> presets;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DiageticButton buttonPrefab;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<DiageticButton> buttons;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Transform> spawns;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DiageticShittyOptionsController shittyOptionsController;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<ShittyOptionPreset> playerPresets;

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x7CBC04", Offset = "0x7CBC04", VA = "0x7CBC04")]
	public void Start()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x7CC400", Offset = "0x7CC400", VA = "0x7CC400")]
	public void ButtonWasPressed(object button)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x7CC63C", Offset = "0x7CC63C", VA = "0x7CC63C")]
	private void ApplyPresetOptions(ShittyOptionPreset preset)
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x7C2D74", Offset = "0x7C2D74", VA = "0x7C2D74")]
	public void LightPresetButtonByCurrentOptions()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x7CBB70", Offset = "0x7CBB70", VA = "0x7CBB70")]
	public void UpdatePlayerPreset(int slot)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x7CC8B8", Offset = "0x7CC8B8", VA = "0x7CC8B8")]
	public ShittyOptionsPresetPanel()
	{
	}
}
[Token(Token = "0x2000058")]
public class StyleActionDisplayItem : MonoBehaviour
{
	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StyleActionCount requiredStyleActionCount;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool debugAlwaysDisplay;

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x7CC940", Offset = "0x7CC940", VA = "0x7CC940")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x7CCA0C", Offset = "0x7CCA0C", VA = "0x7CCA0C")]
	public StyleActionDisplayItem()
	{
	}
}
[Token(Token = "0x2000059")]
public class ToggleSwitch : MonoBehaviour
{
	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int toggledPosition;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float toggledAngle;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject notifyOnChange;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ConfigurableJoint joint;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastSoundTime;

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x7CCA14", Offset = "0x7CCA14", VA = "0x7CCA14")]
	private void Awake()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x7CCA6C", Offset = "0x7CCA6C", VA = "0x7CCA6C")]
	private void Start()
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x7CCAC4", Offset = "0x7CCAC4", VA = "0x7CCAC4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x7CCC70", Offset = "0x7CCC70", VA = "0x7CCC70")]
	public ToggleSwitch()
	{
	}
}
[Token(Token = "0x200005A")]
public class WeaponUnlockDisplayPhysical : MonoBehaviour
{
	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material axeMaterial;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material armorBreakerMaterial;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material bowMaterial;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material flailMaterial;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material glaiveMaterial;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material hammerMaterial;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material maceMaterial;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material nunchucksMaterial;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material shieldMaterial;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material spearMaterial;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material swordMaterial;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material throwingKnivesMaterial;

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material gladiusMaterial;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Material giantFlailMaterial;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Material boulderMaterial;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Material quarterStaffMaterial;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Material chainbladeMaterial;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Material greataxeMaterial;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Material greatswordMaterial;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public DiageticButton startTrialButton;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public PlayerInventoryItem item;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Canvas UICanvas;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text text;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Renderer scrollRenderer;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Renderer blockFaceRenderer;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Camera uicamera;

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x7CCC84", Offset = "0x7CCC84", VA = "0x7CCC84")]
	private void ButtonWasPressed(UnityEngine.Object button)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x7CCC88", Offset = "0x7CCC88", VA = "0x7CCC88")]
	private Material GetMaterial(PlayerInventoryItem item)
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x7CCE14", Offset = "0x7CCE14", VA = "0x7CCE14")]
	private void DisableCamera()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x7CCE34", Offset = "0x7CCE34", VA = "0x7CCE34")]
	public WeaponUnlockDisplayPhysical()
	{
	}
}
[Token(Token = "0x200005B")]
public class CellCamera : MonoBehaviour
{
	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform playerHead;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Canvas hackHideCanvas;

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x7CCE3C", Offset = "0x7CCE3C", VA = "0x7CCE3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x7CCE90", Offset = "0x7CCE90", VA = "0x7CCE90")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x7CD154", Offset = "0x7CD154", VA = "0x7CD154")]
	private void EnableCamera()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x7CD208", Offset = "0x7CD208", VA = "0x7CD208")]
	public CellCamera()
	{
	}
}
[Token(Token = "0x200005C")]
public interface AITargetable
{
	[Token(Token = "0x1700001F")]
	Renderer Renderer
	{
		[Token(Token = "0x60001A8")]
		get;
	}

	[Token(Token = "0x17000020")]
	Vector3 position
	{
		[Token(Token = "0x60001A9")]
		get;
	}

	[Token(Token = "0x17000021")]
	Vector3 leftArmPos
	{
		[Token(Token = "0x60001AA")]
		get;
	}

	[Token(Token = "0x17000022")]
	Vector3 rightArmPos
	{
		[Token(Token = "0x60001AB")]
		get;
	}

	[Token(Token = "0x17000023")]
	bool IsDead
	{
		[Token(Token = "0x60001AC")]
		get;
	}

	[Token(Token = "0x60001A5")]
	bool IsPlayer();

	[Token(Token = "0x60001A6")]
	bool HasRightArm();

	[Token(Token = "0x60001A7")]
	bool HasLeftArm();
}
[Token(Token = "0x200005D")]
public class AngryCrowdPerson : MonoBehaviour
{
	[Token(Token = "0x200005E")]
	public enum State
	{
		[Token(Token = "0x4000346")]
		Awakening,
		[Token(Token = "0x4000347")]
		Swarming,
		[Token(Token = "0x4000348")]
		Attacking,
		[Token(Token = "0x4000349")]
		Fleeing
	}

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody rigidbody;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform targetTransform;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float straightenForce;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float thrust;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool stunned;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SoundHolder voiceLines;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform jawTransform;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 jawDefaultPos;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float maxJawOffsetNormal;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float maxJawOffsetAttack;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ParticleSystem attackParticles;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public State state;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public NaziTalkingHead copyHead;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool exitingTunnel;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool chargingUp;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
	private bool explosive;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private readonly Vector3 attackFromPos;

	[Token(Token = "0x4000333")]
	private const float DbValueOffset = 30f;

	[Token(Token = "0x4000334")]
	private const float DbValueScale = 50f;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool haveCopied;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float stunTime;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float swarmWidthClampM;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float arenaSize;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Collider collider;

	[Token(Token = "0x400033A")]
	private const float DistanceSqr = 225f;

	[Token(Token = "0x400033B")]
	private const int OverlapSphereColliderMax = 16;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private readonly Collider[] colliders;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int groundLayer;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private SoundController.AudioDataCache cachedDbValues;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Vector3 swarmTarget;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float attackDelay;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float chargeDelay;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float attackTime;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float speakDelay;

	[Token(Token = "0x4000344")]
	private const float DamageScale = 240f;

	[Token(Token = "0x17000024")]
	public IHeadVariationController VariationController
	{
		[Token(Token = "0x60001AD")]
		[Address(RVA = "0x7CD210", Offset = "0x7CD210", VA = "0x7CD210")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001AE")]
		[Address(RVA = "0x7CD218", Offset = "0x7CD218", VA = "0x7CD218")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x7CD220", Offset = "0x7CD220", VA = "0x7CD220")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x7CD5A8", Offset = "0x7CD5A8", VA = "0x7CD5A8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x7CD5CC", Offset = "0x7CD5CC", VA = "0x7CD5CC")]
	public void CopyLookFrom(NaziTalkingHead copyHead)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x7CD698", Offset = "0x7CD698", VA = "0x7CD698")]
	public void Stun()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x7CD6AC", Offset = "0x7CD6AC", VA = "0x7CD6AC")]
	public void Attack()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x7CD70C", Offset = "0x7CD70C", VA = "0x7CD70C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x7CE27C", Offset = "0x7CE27C", VA = "0x7CE27C")]
	private void RunVoice()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x7CE568", Offset = "0x7CE568", VA = "0x7CE568")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x7CF0F4", Offset = "0x7CF0F4", VA = "0x7CF0F4")]
	public AngryCrowdPerson()
	{
	}
}
[Token(Token = "0x200005F")]
public class CharacterActionClip : MonoBehaviour
{
	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsBusy;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Enemy guy;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float progress;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float duration;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speed;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float clampSpeedTo;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool checkBalanceDuring;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float footPushDownForce;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float initialSpeed;

	[Token(Token = "0x17000025")]
	public float InitialSpeed
	{
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x7CF180", Offset = "0x7CF180", VA = "0x7CF180")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000026")]
	public virtual float SpeedMod
	{
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x7CF188", Offset = "0x7CF188", VA = "0x7CF188", Slot = "4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x7CF1E4", Offset = "0x7CF1E4", VA = "0x7CF1E4", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x7CF224", Offset = "0x7CF224", VA = "0x7CF224", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x7CF284", Offset = "0x7CF284", VA = "0x7CF284", Slot = "6")]
	protected virtual bool CheckFinishClip()
	{
		return default(bool);
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x7CF298", Offset = "0x7CF298", VA = "0x7CF298", Slot = "7")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x7CF358", Offset = "0x7CF358", VA = "0x7CF358", Slot = "8")]
	public virtual void FinishClip()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x7CF368", Offset = "0x7CF368", VA = "0x7CF368", Slot = "9")]
	public virtual void StartClip()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x7CF398", Offset = "0x7CF398", VA = "0x7CF398")]
	protected void PushDownFeet()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x7CF418", Offset = "0x7CF418", VA = "0x7CF418")]
	protected void PushDownLeftFoot()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x7CF460", Offset = "0x7CF460", VA = "0x7CF460")]
	protected void PushDownRightFoot()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x7CF4A8", Offset = "0x7CF4A8", VA = "0x7CF4A8", Slot = "10")]
	public virtual float EvaluateSuitability()
	{
		return default(float);
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x7CF4B0", Offset = "0x7CF4B0", VA = "0x7CF4B0")]
	public CharacterActionClip()
	{
	}
}
[Token(Token = "0x2000060")]
public class CharacterAnimCopyActionClip : CharacterActionClip
{
	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string animationName;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float pullBackTime;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public FisticuffFist fist;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool inPullBack;

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x7CF4CC", Offset = "0x7CF4CC", VA = "0x7CF4CC", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x7CF580", Offset = "0x7CF580", VA = "0x7CF580", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x7CF6A0", Offset = "0x7CF6A0", VA = "0x7CF6A0", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x7CF784", Offset = "0x7CF784", VA = "0x7CF784")]
	public CharacterAnimCopyActionClip()
	{
	}
}
[Token(Token = "0x2000061")]
public class CharacterDamageDisplay : MonoBehaviour
{
	[Token(Token = "0x2000062")]
	private struct DamageCircle
	{
		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Rect destRect;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color damageColor;
	}

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D drawTexture;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material damageMaterial;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int blendTexWidth;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int blendTexHeight;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float UVToWorldScale;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool alphaIn;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int BlendTex;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	private bool isDirty;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material material;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Texture blendTexOrig;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<DamageCircle> queuedCircles;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture blendTexRT;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float rtScale;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float lastFloorDamageDisplayTime;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float lastFloorDamageDisplayAmount;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RenderTexture blendTex;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int BloodTex;

	[Token(Token = "0x17000027")]
	public bool isChoppedLimb
	{
		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x7CF7A0", Offset = "0x7CF7A0", VA = "0x7CF7A0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x7CF7A8", Offset = "0x7CF7A8", VA = "0x7CF7A8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public RenderTexture BlendRT
	{
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x7CF7B4", Offset = "0x7CF7B4", VA = "0x7CF7B4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x7CF7BC", Offset = "0x7CF7BC", VA = "0x7CF7BC")]
	public bool ShouldDisplayFloorDamage(float damage)
	{
		return default(bool);
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x7CF808", Offset = "0x7CF808", VA = "0x7CF808")]
	public void UpdateLastFloorDamage(float damage)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x7CF830", Offset = "0x7CF830", VA = "0x7CF830")]
	public void InitDamage()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x7CFA28", Offset = "0x7CFA28", VA = "0x7CFA28")]
	public void SetBlendTexture(RenderTexture blendTex)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x7CFBB8", Offset = "0x7CFBB8", VA = "0x7CFBB8")]
	public void DrawCircle(Vector2 uv, int radius, float r, float a)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x7CFDCC", Offset = "0x7CFDCC", VA = "0x7CFDCC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x7CF970", Offset = "0x7CF970", VA = "0x7CF970")]
	public void ResetDamageTexture()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x7D00DC", Offset = "0x7D00DC", VA = "0x7D00DC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x7D0244", Offset = "0x7D0244", VA = "0x7D0244")]
	public CharacterDamageDisplay()
	{
	}
}
[Token(Token = "0x2000063")]
public class CharacterMaintainHeight : MonoBehaviour
{
	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Rigidbody rigidbody;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float desiredHeight;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float pullUpForce;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float bonusHeight;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool stunned;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float stunRevoveryForceFactor;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float stunRecoveryRate;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Enemy guy;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int layerMask;

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x83809C", Offset = "0x83809C", VA = "0x83809C")]
	public void Stun()
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x8380A8", Offset = "0x8380A8", VA = "0x8380A8")]
	public void UnStun()
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x8380B4", Offset = "0x8380B4", VA = "0x8380B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x838174", Offset = "0x838174", VA = "0x838174")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x8384DC", Offset = "0x8384DC", VA = "0x8384DC")]
	public CharacterMaintainHeight()
	{
	}
}
[Token(Token = "0x2000064")]
public class CharacterUpright : MonoBehaviour
{
	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Rigidbody rigidbody;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Enemy guy;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool keepUpright;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float uprightForce;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float uprightOffset;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool hoverAboveFeet;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float maxAngularOffset;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float dampAngle;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float onlyStraightenBelowHeight;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool drawDebugRay;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool stunned;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float stunRevoveryForceFactor;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float stunRecoveryRate;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float hoverForce;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float hoverDamper;

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x8384FC", Offset = "0x8384FC", VA = "0x8384FC")]
	public void Weaken()
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x838508", Offset = "0x838508", VA = "0x838508")]
	public void Stun()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x838514", Offset = "0x838514", VA = "0x838514")]
	public void UnStun()
	{
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x838524", Offset = "0x838524", VA = "0x838524")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x8385B4", Offset = "0x8385B4", VA = "0x8385B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x838614", Offset = "0x838614", VA = "0x838614")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x838658", Offset = "0x838658", VA = "0x838658")]
	private void RunHover(float angleM)
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x83897C", Offset = "0x83897C", VA = "0x83897C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x838E88", Offset = "0x838E88", VA = "0x838E88")]
	public CharacterUpright()
	{
	}
}
[Serializable]
[Token(Token = "0x2000065")]
public class LimbFollowSubClip
{
	[Token(Token = "0x2000066")]
	public enum SubClipType
	{
		[Token(Token = "0x4000395")]
		RelativePointToTransform,
		[Token(Token = "0x4000396")]
		RelativeToTransformFacingTarget,
		[Token(Token = "0x4000397")]
		RelativeToTransformWorldSpace,
		[Token(Token = "0x4000398")]
		RelativeToTargetDirectional,
		[Token(Token = "0x4000399")]
		RelativeToTransformFacingTargetNoY
	}

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool debugIgnoreClip;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public SubClipType type;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SeverableLimb limb;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public IKMuscleChain muscleChain;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform relativeTo;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float xScale;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float yScale;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float zScale;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve xCurve;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve yCurve;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve zCurve;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve forceCurve;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float force;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool smartFollow;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool addForceAtPosition;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool debugDrawTargetPosLine;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Vector3 addForceAtPositionOffset;

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x838EB0", Offset = "0x838EB0", VA = "0x838EB0")]
	public LimbFollowSubClip()
	{
	}
}
[Token(Token = "0x2000067")]
public class ComplexLimbFollowClip : CharacterActionClip
{
	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LimbFollowSubClip[] subClips;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool pushDownLeftFoot;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool pushDownRightFoot;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	public bool pushDownLeftFootBackSwing;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	public bool pushDownRightFootBackswing;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve torsoTurnOffsetCurve;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 torsoTurnOffset;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float torsoTurnForce;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool debugDrawChestForce;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float speakPoint;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float speakPointDelay;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool disableUprightsDuringAttack;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool disableHeighDuringAttack;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public IKMuscleChain waitForMuscle;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float maxWaitTimeLeft;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float followThroughWaitTime;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float speakPointDelayLeft;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected bool haveSpoken;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool debugDontWaitAtEnd;

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x838EB8", Offset = "0x838EB8", VA = "0x838EB8", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x838F14", Offset = "0x838F14", VA = "0x838F14", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x83A484", Offset = "0x83A484", VA = "0x83A484", Slot = "11")]
	protected virtual void RunTorso()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x83AC80", Offset = "0x83AC80", VA = "0x83AC80", Slot = "6")]
	protected override bool CheckFinishClip()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x83AD50", Offset = "0x83AD50", VA = "0x83AD50", Slot = "12")]
	protected virtual void SpeakEffort()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x83ADD8", Offset = "0x83ADD8", VA = "0x83ADD8", Slot = "13")]
	protected virtual void SpeakAnticipation()
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x83AE30", Offset = "0x83AE30", VA = "0x83AE30", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x83B010", Offset = "0x83B010", VA = "0x83B010", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x83B4DC", Offset = "0x83B4DC", VA = "0x83B4DC")]
	public ComplexLimbFollowClip()
	{
	}
}
[Token(Token = "0x2000068")]
public class Crab : MonoBehaviour, AITargetable
{
	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private sealed class <Attack>d__54 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Crab <>4__this;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CrabLegMuscleControl <active>5__2;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrabLegMuscleControl <passive>5__3;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <timer>5__4;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600020D")]
			[Address(RVA = "0x83DD50", Offset = "0x83DD50", VA = "0x83DD50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600020F")]
			[Address(RVA = "0x83DD98", Offset = "0x83DD98", VA = "0x83DD98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x83CCEC", Offset = "0x83CCEC", VA = "0x83CCEC")]
		[DebuggerHidden]
		public <Attack>d__54(int <>1__state)
		{
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x83D420", Offset = "0x83D420", VA = "0x83D420", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600020C")]
		[Address(RVA = "0x83D424", Offset = "0x83D424", VA = "0x83D424", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x83DD58", Offset = "0x83DD58", VA = "0x83DD58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006A")]
	[CompilerGenerated]
	private sealed class <Bounce>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Crab <>4__this;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000213")]
			[Address(RVA = "0x83E084", Offset = "0x83E084", VA = "0x83E084", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000215")]
			[Address(RVA = "0x83E0CC", Offset = "0x83E0CC", VA = "0x83E0CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x83CD90", Offset = "0x83CD90", VA = "0x83CD90")]
		[DebuggerHidden]
		public <Bounce>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x83DDA0", Offset = "0x83DDA0", VA = "0x83DDA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x83DDA4", Offset = "0x83DDA4", VA = "0x83DDA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x83E08C", Offset = "0x83E08C", VA = "0x83E08C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006B")]
	[CompilerGenerated]
	private sealed class <Walk>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Crab <>4__this;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <phase>5__2;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <t>5__3;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <haveDoneMidStepPause>5__4;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <stepM>5__5;

		[Token(Token = "0x17000033")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000219")]
			[Address(RVA = "0x83E8E0", Offset = "0x83E8E0", VA = "0x83E8E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600021B")]
			[Address(RVA = "0x83E928", Offset = "0x83E928", VA = "0x83E928", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x83CDB8", Offset = "0x83CDB8", VA = "0x83CDB8")]
		[DebuggerHidden]
		public <Walk>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x83E0D4", Offset = "0x83E0D4", VA = "0x83E0D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x83E0D8", Offset = "0x83E0D8", VA = "0x83E0D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x83E8E8", Offset = "0x83E8E8", VA = "0x83E8E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 attackTarget;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 moveTarget;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool walking;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool attacking;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool bouncing;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<CrabLegMuscleControl> legMuscles;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<CrabLegMuscleControl> armMuscles;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material pinataMaterialInsides;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Material pinataMaterialClawInsides;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public CrabClaw leftClaw;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public CrabClaw rightClaw;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float health;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float stepTime;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float stepDist;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float stepPauseTime;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float stepHeight;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float straightenForce;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Rigidbody body;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Rigidbody leftEye;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Rigidbody rightEye;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool dead;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Enemy jockey;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Enemy formerJockey;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public ShoulderSeatArmorPiece seat;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform targetTranslationTransform;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public SkinnedMeshRenderer[] internals;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public SkinnedMeshRenderer[] eyeMeshes;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private int currentExpression;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float expressionTimeOut;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float internalBled;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float internalBlendAnimSpeed;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float uprightForce;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float hoverForce;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool showDebug;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float bounceSpeed;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float bounceHeight;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float walkForce;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int limbsSevered;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private bool notifiedClawsDead;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
	private bool notifiedAllLegsDead;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Joint leftReinJoint;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Joint rightReinJoint;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private CrabReinAnim leftReinAnim;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private CrabReinAnim rightReinAnim;

	[Token(Token = "0x17000029")]
	public Vector3 position
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x83B4E4", Offset = "0x83B4E4", VA = "0x83B4E4", Slot = "8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700002A")]
	public Vector3 leftArmPos
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x83B500", Offset = "0x83B500", VA = "0x83B500", Slot = "9")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700002B")]
	public Vector3 rightArmPos
	{
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x83B528", Offset = "0x83B528", VA = "0x83B528", Slot = "10")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700002C")]
	public bool IsDead
	{
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x83B550", Offset = "0x83B550", VA = "0x83B550", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002D")]
	public Renderer Renderer
	{
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x83B558", Offset = "0x83B558", VA = "0x83B558", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002E")]
	public bool HasJockey
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x83B580", Offset = "0x83B580", VA = "0x83B580")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x83B5E0", Offset = "0x83B5E0", VA = "0x83B5E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x83B8A4", Offset = "0x83B8A4", VA = "0x83B8A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x83BB60", Offset = "0x83BB60", VA = "0x83BB60")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x83C7F4", Offset = "0x83C7F4", VA = "0x83C7F4")]
	private void RunExpressions()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x83C91C", Offset = "0x83C91C", VA = "0x83C91C")]
	public void SetExpressionAngry(float time = 1f)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x83C928", Offset = "0x83C928", VA = "0x83C928")]
	public void SetExpressionSurprised()
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x83C938", Offset = "0x83C938", VA = "0x83C938")]
	public void Damage(float amount)
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x83C144", Offset = "0x83C144", VA = "0x83C144")]
	private void Die()
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x83B7BC", Offset = "0x83B7BC", VA = "0x83B7BC")]
	[IteratorStateMachine(typeof(<Attack>d__54))]
	private IEnumerator Attack()
	{
		return null;
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x83CD14", Offset = "0x83CD14", VA = "0x83CD14")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x83B830", Offset = "0x83B830", VA = "0x83B830")]
	[IteratorStateMachine(typeof(<Bounce>d__58))]
	private IEnumerator Bounce()
	{
		return null;
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x83B748", Offset = "0x83B748", VA = "0x83B748")]
	[IteratorStateMachine(typeof(<Walk>d__60))]
	private IEnumerator Walk()
	{
		return null;
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x83CDE0", Offset = "0x83CDE0", VA = "0x83CDE0")]
	public void NotifyLimbSevered(CrabDamageRelay limb, bool isClaw)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x83CFB0", Offset = "0x83CFB0", VA = "0x83CFB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x83CFB4", Offset = "0x83CFB4", VA = "0x83CFB4")]
	public void AddReins()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x83D264", Offset = "0x83D264", VA = "0x83D264")]
	public void RemoveLeftRein()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x83D310", Offset = "0x83D310", VA = "0x83D310")]
	public void RemoveRightRein()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x83D01C", Offset = "0x83D01C", VA = "0x83D01C")]
	private Joint AddRein(Rigidbody hand, Rigidbody eye)
	{
		return null;
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x83D3C0", Offset = "0x83D3C0", VA = "0x83D3C0", Slot = "4")]
	public bool IsPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x83D3C8", Offset = "0x83D3C8", VA = "0x83D3C8", Slot = "5")]
	public bool HasRightArm()
	{
		return default(bool);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x83D3EC", Offset = "0x83D3EC", VA = "0x83D3EC", Slot = "6")]
	public bool HasLeftArm()
	{
		return default(bool);
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x83D410", Offset = "0x83D410", VA = "0x83D410")]
	public Crab()
	{
	}
}
[Token(Token = "0x200006C")]
public class CrabAI : MonoBehaviour
{
	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Crab owner;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AITargetable target;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float attackDistance;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool rotatingLeft;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float thinkDelay;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool showDebug;

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x83E930", Offset = "0x83E930", VA = "0x83E930")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x83F2F4", Offset = "0x83F2F4", VA = "0x83F2F4")]
	public CrabAI()
	{
	}
}
[Token(Token = "0x200006D")]
public class CrabClaw : MonoBehaviour
{
	[Token(Token = "0x200006E")]
	public enum ClawAnimState
	{
		[Token(Token = "0x40003FC")]
		Closed,
		[Token(Token = "0x40003FD")]
		Open,
		[Token(Token = "0x40003FE")]
		AnimatingIdle,
		[Token(Token = "0x40003FF")]
		AnimatingAttack
	}

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Crab ownerCrab;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool zAxis;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool severed;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ClawAnimState state;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform clawBottom;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float clawRotClosed;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float clawRotOpen;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MeshRenderer insides;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool opening;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float pauseTime;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float openSpeed;

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x83F304", Offset = "0x83F304", VA = "0x83F304")]
	private void Start()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x83F370", Offset = "0x83F370", VA = "0x83F370")]
	private void Update()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x83FC04", Offset = "0x83FC04", VA = "0x83FC04")]
	public CrabClaw()
	{
	}
}
[Token(Token = "0x200006F")]
public class CrabDamageRelay : DamageRelay
{
	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public bool damageOwner;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Crab ownerCrab;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool isSevered;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public List<DamageableShieldChunk> shellPieces;

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x83FC14", Offset = "0x83FC14", VA = "0x83FC14", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x83FC6C", Offset = "0x83FC6C", VA = "0x83FC6C", Slot = "7")]
	public override bool Damage(DamageType damageType, Vector3 relativeVelocity, Vector3 force, Vector3 pos, GameObject sender, Vector3 hitNormal, Collision collision, AITargetable responsibleEntity, bool isFloor = false, bool showDamage = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x8408EC", Offset = "0x8408EC", VA = "0x8408EC", Slot = "8")]
	protected override void DamageInternal(float damage, GameObject sender)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x840C10", Offset = "0x840C10", VA = "0x840C10")]
	public CrabDamageRelay()
	{
	}
}
[Token(Token = "0x2000070")]
public class CrabLegMuscleControl : MonoBehaviour
{
	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CrabClaw claw;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetTransform;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform ikHand;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform upperFollowTransform;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform lowerFollowTransform;

	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ConfigurableJoint upperMuscle;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ConfigurableJoint lowerMuscle;

	[Token(Token = "0x400040B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion upperArmRotationOffset;

	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion lowerArmRotationOffset;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected JointDriveInfo stunnedDriveInfo;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform targetsAreRelativeTo;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector3 neutralPos;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public FloorSticky floorSticky;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float rotationSpeed;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 targetPosRelative;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 targetWorldPos;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private bool lockTargetInWorld;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float currentUpperRotationDifference;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float currentLowerRotationDifference;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public bool debugDontLerpTarget;

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x840C40", Offset = "0x840C40", VA = "0x840C40")]
	public void SetTargetPos(Vector3 target, Space space = Space.Self, bool dontLerp = false)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x840CBC", Offset = "0x840CBC", VA = "0x840CBC")]
	protected float GetRotationSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x840CC4", Offset = "0x840CC4", VA = "0x840CC4")]
	public void LockTargetInWorldSpace(bool lockPos = true)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x840D04", Offset = "0x840D04", VA = "0x840D04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x840D48", Offset = "0x840D48", VA = "0x840D48", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x840E14", Offset = "0x840E14", VA = "0x840E14")]
	public float GetRotationDifferenceBetweenTargetAndActual()
	{
		return default(float);
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x840E20", Offset = "0x840E20", VA = "0x840E20", Slot = "5")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x84152C", Offset = "0x84152C", VA = "0x84152C")]
	public CrabLegMuscleControl()
	{
	}
}
[Token(Token = "0x2000071")]
public class CrabReinAnim : MonoBehaviour
{
	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material material;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int midPoints;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SeverableLimb connectedTo;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform reinAnchor;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool showing;

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x83D3B4", Offset = "0x83D3B4", VA = "0x83D3B4")]
	public void Show()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x83D308", Offset = "0x83D308", VA = "0x83D308")]
	public void Hide()
	{
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x8415A8", Offset = "0x8415A8", VA = "0x8415A8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x8418C8", Offset = "0x8418C8", VA = "0x8418C8")]
	public CrabReinAnim()
	{
	}
}
[Token(Token = "0x2000072")]
public class CrawlClip : CharacterActionClip
{
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve upwardCurve;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve forwardCurve;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SeverableLimb arm;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SeverableLimb upperArm;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SeverableLimb otherArm;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SeverableLimb otherUpperArm;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool leftArm;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float liftTime;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float forwardForce;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float upwardForce;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float downwardForce;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float torsoForce;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float shoulderForce;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 moveTarget;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 turnTarget;

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x8418D0", Offset = "0x8418D0", VA = "0x8418D0", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x841F94", Offset = "0x841F94", VA = "0x841F94")]
	private bool ArmIsBehindChest()
	{
		return default(bool);
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x842064", Offset = "0x842064", VA = "0x842064", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x842128", Offset = "0x842128", VA = "0x842128", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x842168", Offset = "0x842168", VA = "0x842168", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x84254C", Offset = "0x84254C", VA = "0x84254C")]
	public CrawlClip()
	{
	}
}
[Token(Token = "0x2000073")]
public class CrowdPersonDamageRelay : DamageRelay
{
	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public AngryCrowdPerson ownerPerson;

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x842554", Offset = "0x842554", VA = "0x842554", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x8425AC", Offset = "0x8425AC", VA = "0x8425AC", Slot = "7")]
	public override bool Damage(DamageType damageType, Vector3 relativeVelocity, Vector3 force, Vector3 pos, GameObject sender, Vector3 hitNormal, Collision collision, AITargetable responsibleEntity, bool isFloor = false, bool showDamage = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x842790", Offset = "0x842790", VA = "0x842790", Slot = "8")]
	protected override void DamageInternal(float damage, GameObject sender)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x8427A0", Offset = "0x8427A0", VA = "0x8427A0")]
	public CrowdPersonDamageRelay()
	{
	}
}
[Token(Token = "0x2000074")]
public class DamageRelay : MonoBehaviour
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Enemy owner;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageType[] immuneToDamageTypes;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float health;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float healthDamageMod;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float staminaDamageMod;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float cutThreshhold;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isHead;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool dontStunOnDamage;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool printDamageDebug;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool pauseOnDamage;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool vomitOnDamage;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 lastPos;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool canTakeFloorDamage;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool canGib;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GibHolder gibHolderPrefab;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GibHolder gibHolderPinata;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float gibHealthCutoff;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private LimbType limbType;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Rigidbody rigidbody;

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected float startHealth;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected Vector3 bloodSpurtDirection;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Vector3 bloodSpurtPoint;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected float bloodSpurtTimeLeft;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected float bloodSpurtCounter;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private SeverableLimb severableLimb;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float chopThreshhold;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float lastFloorDamageTime;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool gibbed;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GibHolder gibHolder;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Head head;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float startCutThreshold;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Choppable choppable;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private ScoreController scoreController;

	[Token(Token = "0x17000035")]
	public virtual bool IsArmorPiece
	{
		[Token(Token = "0x600023B")]
		[Address(RVA = "0x8427B8", Offset = "0x8427B8", VA = "0x8427B8", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000036")]
	public LimbType LimbType
	{
		[Token(Token = "0x600023C")]
		[Address(RVA = "0x8427C0", Offset = "0x8427C0", VA = "0x8427C0")]
		get
		{
			return default(LimbType);
		}
	}

	[Token(Token = "0x17000037")]
	public virtual bool IsTakingFloorDamage
	{
		[Token(Token = "0x600023D")]
		[Address(RVA = "0x8427C8", Offset = "0x8427C8", VA = "0x8427C8", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x842D60", Offset = "0x842D60", VA = "0x842D60", Slot = "6")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x842EEC", Offset = "0x842EEC", VA = "0x842EEC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x842FD8", Offset = "0x842FD8", VA = "0x842FD8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x843008", Offset = "0x843008", VA = "0x843008")]
	private void Update()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x8431FC", Offset = "0x8431FC", VA = "0x8431FC", Slot = "7")]
	public virtual bool Damage(DamageType damageType, Vector3 relativeVelocity, Vector3 force, Vector3 pos, GameObject sender, Vector3 hitNormal, Collision collision, AITargetable responsibleEntity, bool isFloor = false, bool showDamage = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x845648", Offset = "0x845648", VA = "0x845648")]
	private void Gib(Vector3 pos, Vector3 force, GameObject sender)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x845878", Offset = "0x845878", VA = "0x845878")]
	public void InitGibHolder(Vector3 pos, Vector3 force)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x8459F8", Offset = "0x8459F8", VA = "0x8459F8", Slot = "8")]
	protected virtual void DamageInternal(float damage, GameObject sender)
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x845A08", Offset = "0x845A08", VA = "0x845A08")]
	public void ResetForPool()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x845A20", Offset = "0x845A20", VA = "0x845A20")]
	public void RegisterDamagedBy(AITargetable responsibleEntity)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x840C28", Offset = "0x840C28", VA = "0x840C28")]
	public DamageRelay()
	{
	}
}
[Token(Token = "0x2000075")]
public enum DamageType
{
	[Token(Token = "0x4000450")]
	Fist,
	[Token(Token = "0x4000451")]
	Blunt,
	[Token(Token = "0x4000452")]
	Arrow,
	[Token(Token = "0x4000453")]
	Cut,
	[Token(Token = "0x4000454")]
	Stab,
	[Token(Token = "0x4000455")]
	Bleed,
	[Token(Token = "0x4000456")]
	HeartRip,
	[Token(Token = "0x4000457")]
	Bite,
	[Token(Token = "0x4000458")]
	None
}
[Token(Token = "0x2000076")]
public class DamagerRigidbody : MonoBehaviour
{
	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scaleDamage;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float bonusVelocity;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float armorBonusDamage;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float playerWieldedBonusVelocity;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isDamaging;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool addKinematicVelocity;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool ignoreOtherWeaponHits;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool useTransformRightForHitNormalCalc;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float impaledConnectedBodyMassScale;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float impaledZDamper;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float impaledBreakForce;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float impaleDepth;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool isFloorDamager;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool deathOnImpale;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 lastCenterOfMass;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 velocity;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public DamageType damageType;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool differentDamageDuringSlowmo;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public DamageType slowmoDamageType;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float minimumDamageVelocity;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool isPlayerFist;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool onlyStunPlayer;

	[Token(Token = "0x4000471")]
	private const int velocitySampleCount = 5;

	[Token(Token = "0x4000472")]
	private const float StartingDamageDelay = 0.15f;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float canDamageDelay;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Vector3[] velocitySamples;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int velocitySampleIndex;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool printCollisionNormal;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	public bool isHeavy;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Collider nonDamagingCollider;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool canAlsoCut;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform heartStabPoint;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Heart stabbedHeart;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected Rigidbody rigidBody;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool stickOnDamage;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	public bool pauseOnDamage;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Dictionary<Rigidbody, float> lastDamageTimes;

	[Token(Token = "0x4000480")]
	private const int OverlapSphereColliderMax = 16;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private readonly Collider[] colliders;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	internal bool impaled;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	internal SeverableLimb impaledTo;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private FisticuffFist fisticuffFist;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Fist fistInParent;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float unImpaleDelay;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Vector3 trackedVelocity;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool printAvgVelocity;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	public bool printCollision;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
	private bool stuck;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private ConfigurableJoint stuckJoint;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private ConfigurableJoint impaleJoint;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool impaledToChoppableLimb;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private int OverlapSpherLayerMask;

	[Token(Token = "0x17000038")]
	public WeaponBase weaponBase
	{
		[Token(Token = "0x6000249")]
		[Address(RVA = "0x845A64", Offset = "0x845A64", VA = "0x845A64")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600024A")]
		[Address(RVA = "0x845A6C", Offset = "0x845A6C", VA = "0x845A6C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public SeverableLimb severableLimb
	{
		[Token(Token = "0x600024B")]
		[Address(RVA = "0x845A74", Offset = "0x845A74", VA = "0x845A74")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600024C")]
		[Address(RVA = "0x845A7C", Offset = "0x845A7C", VA = "0x845A7C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public Vector3 AverageVelocity
	{
		[Token(Token = "0x6000255")]
		[Address(RVA = "0x8464B8", Offset = "0x8464B8", VA = "0x8464B8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x845A84", Offset = "0x845A84", VA = "0x845A84")]
	public void EnableDamage()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x845A90", Offset = "0x845A90", VA = "0x845A90")]
	public bool CanDamageFromDelay()
	{
		return default(bool);
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x845AB0", Offset = "0x845AB0", VA = "0x845AB0")]
	public void SetCanDamageDelay(float time = 0.15f)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x845B08", Offset = "0x845B08", VA = "0x845B08")]
	public void InitAverageVelocity(Vector3 vel)
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x845B5C", Offset = "0x845B5C", VA = "0x845B5C")]
	private bool IsThisGameObjectMyWielder(DamageRelay dmg)
	{
		return default(bool);
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x84603C", Offset = "0x84603C", VA = "0x84603C")]
	private bool IsWieldedByPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x8460C4", Offset = "0x8460C4", VA = "0x8460C4", Slot = "4")]
	protected virtual void DoDamage(DamageRelay dr)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x846320", Offset = "0x846320", VA = "0x846320")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x84655C", Offset = "0x84655C", VA = "0x84655C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x846588", Offset = "0x846588", VA = "0x846588", Slot = "5")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x8472BC", Offset = "0x8472BC", VA = "0x8472BC", Slot = "6")]
	protected virtual void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x849DF8", Offset = "0x849DF8", VA = "0x849DF8")]
	internal void ForceUnStuck()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x849E84", Offset = "0x849E84", VA = "0x849E84")]
	internal void ForceUnimpale()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x849B30", Offset = "0x849B30", VA = "0x849B30")]
	private bool HasSameWielder(DamagerRigidbody damager)
	{
		return default(bool);
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x849838", Offset = "0x849838", VA = "0x849838")]
	private void CreateStuckJoint(SeverableLimb limb, Collision col)
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x849E94", Offset = "0x849E94", VA = "0x849E94")]
	private void OnJointBreak()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x849318", Offset = "0x849318", VA = "0x849318")]
	private void Impale(DamageRelay db, Vector3 hitPoint, AITargetable responsibleEntity)
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x846E1C", Offset = "0x846E1C", VA = "0x846E1C")]
	private void UnImpale()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x84A5CC", Offset = "0x84A5CC", VA = "0x84A5CC")]
	public void ResetForPool()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0x84A5DC", Offset = "0x84A5DC", VA = "0x84A5DC")]
	public DamagerRigidbody()
	{
	}
}
[Token(Token = "0x2000077")]
public class DodgeActionClip : CharacterActionClip
{
	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float chestImpulse;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float chestForce;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float footImpulse;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float footForce;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float chestUpImpulse;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve chestForceCurve;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float impulsePoint;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool hasDoneImpulse;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 direction;

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x84A6E8", Offset = "0x84A6E8", VA = "0x84A6E8", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x84AEC4", Offset = "0x84AEC4", VA = "0x84AEC4", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x84AF08", Offset = "0x84AF08", VA = "0x84AF08", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x84B0FC", Offset = "0x84B0FC", VA = "0x84B0FC")]
	public DodgeActionClip()
	{
	}
}
[Token(Token = "0x2000078")]
public class Enemy : MonoBehaviour, AITargetable, IPoolable
{
	[Token(Token = "0x4000498")]
	private const int FramesUntilSpeak = 60;

	[Token(Token = "0x4000499")]
	private const int BakedMeshLifetime = 5;

	[Token(Token = "0x400049A")]
	private const int InitialFramesUntilFunctions = 120;

	[Token(Token = "0x400049B")]
	private const float SpawnZoneStuckDespawnTime = 10f;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpecialEnemyType type;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer meshRenderer;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<CharacterMaintainHeight> maintainHeights;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	internal List<CharacterUpright> uprights;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CharacterMaintainHeight characterMaintainHeight;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Collider chestKeepawayCollider;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool heartBeatThisFrame;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform hammerSpawn;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float heartBeatDelay;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float heartRate;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float scale;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public StunnedIndicator[] stunnedIndicators;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<ArmorPiece> armorPieces;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action onSeveredLimb;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 startingLocalscale;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float startingVoiceAudioPitch;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool inSpawnZone;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float spawnZoneTimer;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool hasReceivedPlayerDamage;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private DamagerRigidbody[] damagerRigidbodies;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Dictionary<Rigidbody, float> rigidBodyMassCache;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float _speedMod;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<GameObject> skeletonPartsOnlyForPinataMode;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public SeverableLimb chest;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public SeverableLimb lowerChest;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public SeverableLimb pelvis;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Head head;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public SeverableLimb leftShin;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public SeverableLimb rightShin;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public SeverableLimb leftThigh;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public SeverableLimb rightThigh;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public SeverableLimb leftUpperArm;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public SeverableLimb rightUpperArm;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public SeverableLimb leftLowerArm;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public SeverableLimb rightLowerArm;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public SeverableFoot leftFoot;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public SeverableFoot rightFoot;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public List<Grabbable> grabbables;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public FisticuffFist leftFist;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public FisticuffFist rightFist;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public float maxHealth;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public IKMuscleChain rightArmMuscle;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public IKMuscleChain leftArmMuscle;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public IKMuscleChain leftLegMuscle;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public IKMuscleChain rightLegMuscle;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public SpineMuscleChain spineMuscle;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public AnimationRigController animationRigController;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public bool dead;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public PhysicMaterial footHighFriction;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public PhysicMaterial footNoFriction;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal Voice voice;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private Mesh bakedMesh;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private List<Vector3> bakedMeshVertices;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private List<Vector2> bakedMeshUVs;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private int rebakeCountdown;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	public float lastNonBleedDamageTime;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private AITargetable lastDamagedBy;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public float jointDamper;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public Material berserkerSkinMaterial;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public Material pinataMaterial;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public Material pinataSkeletonMaterial;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public Material skeletonMaterial;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public Material giantMaterial;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public Material mitchMaterial;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	public Material rokibeMaterial;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public Material pinataMaterialBerserker;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public Mesh pinataMesh;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	public Mesh giantMesh;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	public Mesh mitchMesh;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	public Mesh rokibeMesh;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private Enemy formelyMountedTo;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private List<DespawnTracker> choppedLimbGameObjects;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private DamageRelay[] damageRelays;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private Heart heart;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	public bool stunThisFrame;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
	public float balanceThreshhold;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	public float balanceToppleThreshold;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
	public float health;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private float stunTime;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	private float dazedTime;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private float combatDelay;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
	private float headSizeMult;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private DespawnTracker despawnTracker;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private IKMuscleChain[] muscleChains;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private Choppable[] choppables;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private SeverableLimb[] severableLimbs;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private float lastCheckGrabTime;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
	private bool wasLastGrabbed;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private float totalGrabTime;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
	private bool haveGivenKnockout;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private int armorPiecesRemoved;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	private int parriedCount;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private float lastParriedTime;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	private int riposteCount;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private int limbsRippedCount;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
	private int friendlyFireCount;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private bool postDeathFunctionsQueued;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B9")]
	private bool speak;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
	private int framesUntilFunctions;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private GameObject damager;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private DamageType damagedType;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private ScoreController scoreController;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	private bool hasSaluted;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
	private float deathTime;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
	private float stunDamageThreshold;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
	private float dazeDamageThreshold;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
	private float firstPlayerDamageTime;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
	private float initialStunDamageThreshold;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
	private float initialDazeDamageThreshold;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	private Joint mountJoint;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	public Crab MountedToCrab;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	private bool isCrabJockey;

	[Token(Token = "0x1700003B")]
	public EnemyAI AI
	{
		[Token(Token = "0x6000266")]
		[Address(RVA = "0x84B104", Offset = "0x84B104", VA = "0x84B104")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000267")]
		[Address(RVA = "0x84B10C", Offset = "0x84B10C", VA = "0x84B10C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003C")]
	public Mesh BaseMesh
	{
		[Token(Token = "0x6000268")]
		[Address(RVA = "0x84B11C", Offset = "0x84B11C", VA = "0x84B11C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000269")]
		[Address(RVA = "0x84B124", Offset = "0x84B124", VA = "0x84B124")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public GameObject rightWeapon
	{
		[Token(Token = "0x600026A")]
		[Address(RVA = "0x84B134", Offset = "0x84B134", VA = "0x84B134")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600026B")]
		[Address(RVA = "0x84B13C", Offset = "0x84B13C", VA = "0x84B13C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public GameObject leftWeapon
	{
		[Token(Token = "0x600026C")]
		[Address(RVA = "0x84B14C", Offset = "0x84B14C", VA = "0x84B14C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600026D")]
		[Address(RVA = "0x84B154", Offset = "0x84B154", VA = "0x84B154")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003F")]
	public bool HasReceivedPlayerDamage
	{
		[Token(Token = "0x600026E")]
		[Address(RVA = "0x84B164", Offset = "0x84B164", VA = "0x84B164")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000040")]
	public float SpeedMod
	{
		[Token(Token = "0x600026F")]
		[Address(RVA = "0x838E4C", Offset = "0x838E4C", VA = "0x838E4C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000270")]
		[Address(RVA = "0x84B16C", Offset = "0x84B16C", VA = "0x84B16C")]
		set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public Enemy MountedTo
	{
		[Token(Token = "0x6000271")]
		[Address(RVA = "0x84B174", Offset = "0x84B174", VA = "0x84B174")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000272")]
		[Address(RVA = "0x84B17C", Offset = "0x84B17C", VA = "0x84B17C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public Enemy ShoulderLackey
	{
		[Token(Token = "0x6000273")]
		[Address(RVA = "0x84B18C", Offset = "0x84B18C", VA = "0x84B18C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000274")]
		[Address(RVA = "0x84B194", Offset = "0x84B194", VA = "0x84B194")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public Renderer Renderer
	{
		[Token(Token = "0x6000275")]
		[Address(RVA = "0x84B1A4", Offset = "0x84B1A4", VA = "0x84B1A4", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000044")]
	public bool hasLostLeg
	{
		[Token(Token = "0x6000276")]
		[Address(RVA = "0x838840", Offset = "0x838840", VA = "0x838840")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000045")]
	public float HealthPct
	{
		[Token(Token = "0x6000277")]
		[Address(RVA = "0x84B1AC", Offset = "0x84B1AC", VA = "0x84B1AC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000046")]
	public float CombatDelay
	{
		[Token(Token = "0x6000279")]
		[Address(RVA = "0x84B1C4", Offset = "0x84B1C4", VA = "0x84B1C4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000278")]
		[Address(RVA = "0x84B1BC", Offset = "0x84B1BC", VA = "0x84B1BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public float HalfScale
	{
		[Token(Token = "0x600027A")]
		[Address(RVA = "0x8447C4", Offset = "0x8447C4", VA = "0x8447C4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000048")]
	public float ScaleSquared
	{
		[Token(Token = "0x600027B")]
		[Address(RVA = "0x84B1CC", Offset = "0x84B1CC", VA = "0x84B1CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000049")]
	public bool IsStunned
	{
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x838900", Offset = "0x838900", VA = "0x838900")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004A")]
	public bool IsDazed
	{
		[Token(Token = "0x600027D")]
		[Address(RVA = "0x838910", Offset = "0x838910", VA = "0x838910")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004B")]
	public bool IsAttacking
	{
		[Token(Token = "0x600027E")]
		[Address(RVA = "0x83DD00", Offset = "0x83DD00", VA = "0x83DD00")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700004C")]
	public float TimeSinceDeath
	{
		[Token(Token = "0x600027F")]
		[Address(RVA = "0x84728C", Offset = "0x84728C", VA = "0x84728C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700004D")]
	public float TimeSinceDamage
	{
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x84B1D8", Offset = "0x84B1D8", VA = "0x84B1D8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700004E")]
	public Vector3 position
	{
		[Token(Token = "0x6000281")]
		[Address(RVA = "0x84B1F8", Offset = "0x84B1F8", VA = "0x84B1F8", Slot = "8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700004F")]
	public Vector3 leftArmPos
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x84B2F0", Offset = "0x84B2F0", VA = "0x84B2F0", Slot = "9")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000050")]
	public Vector3 rightArmPos
	{
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x84B384", Offset = "0x84B384", VA = "0x84B384", Slot = "10")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000051")]
	public bool HasBalance
	{
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x838920", Offset = "0x838920", VA = "0x838920")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000052")]
	public bool IsDead
	{
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x84B6AC", Offset = "0x84B6AC", VA = "0x84B6AC", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000053")]
	public IPool Owner
	{
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x84B6B4", Offset = "0x84B6B4", VA = "0x84B6B4", Slot = "12")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x84B6BC", Offset = "0x84B6BC", VA = "0x84B6BC", Slot = "13")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x84B6CC", Offset = "0x84B6CC", VA = "0x84B6CC")]
	public void AddArmor(ArmorPiece armor)
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x84B834", Offset = "0x84B834", VA = "0x84B834")]
	private void OnArmorDetached(ArmorPiece armor)
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x8383F8", Offset = "0x8383F8", VA = "0x8383F8")]
	public bool HasFootOnGround()
	{
		return default(bool);
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x84B944", Offset = "0x84B944", VA = "0x84B944")]
	public void MarkAsDamagedByPlayer()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x84B950", Offset = "0x84B950", VA = "0x84B950")]
	public void RegisterChoppedLimb(DespawnTracker limb)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x84BA00", Offset = "0x84BA00", VA = "0x84BA00")]
	public void ResetForPool()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x84C9BC", Offset = "0x84C9BC", VA = "0x84C9BC")]
	public void ResetLimbJoints()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x84C0FC", Offset = "0x84C0FC", VA = "0x84C0FC")]
	private void ResetMuscle(IKMuscleChain muscleChain, Joint upperJoint, Joint lowerJoint)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x84CABC", Offset = "0x84CABC", VA = "0x84CABC")]
	public bool IsRightArmBehindBack()
	{
		return default(bool);
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x84CB8C", Offset = "0x84CB8C", VA = "0x84CB8C")]
	private void SetAllJointDampers(float dampValue)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x84CD3C", Offset = "0x84CD3C", VA = "0x84CD3C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x84CD50", Offset = "0x84CD50", VA = "0x84CD50")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x84CDE0", Offset = "0x84CDE0", VA = "0x84CDE0")]
	public void GetBakedMeshData(out List<Vector3> vertices, out List<Vector2> uvs)
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x84CEE4", Offset = "0x84CEE4", VA = "0x84CEE4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x84CFF8", Offset = "0x84CFF8", VA = "0x84CFF8")]
	public void OnDeathNotifyStyleAction()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x84D3BC", Offset = "0x84D3BC", VA = "0x84D3BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x84C7D8", Offset = "0x84C7D8", VA = "0x84C7D8")]
	private void PoolOrDestroyArmor()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x84DDA8", Offset = "0x84DDA8", VA = "0x84DDA8")]
	private void SetupSpecialEnemyType()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x84E434", Offset = "0x84E434", VA = "0x84E434")]
	public void Start()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x84E4D8", Offset = "0x84E4D8", VA = "0x84E4D8")]
	public void SetupEnemy()
	{
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0x84E868", Offset = "0x84E868", VA = "0x84E868")]
	private void ApplyScale()
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x83ADA8", Offset = "0x83ADA8", VA = "0x83ADA8")]
	public void Speak(string sound, bool interrupt = true, Head.Expression expression = Head.Expression.Neutral)
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x84EC10", Offset = "0x84EC10", VA = "0x84EC10")]
	public void AddHeart(Heart heart)
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x84EC20", Offset = "0x84EC20", VA = "0x84EC20")]
	public void StunArms(float time)
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x84F12C", Offset = "0x84F12C", VA = "0x84F12C")]
	public void UnStunArms()
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x84F348", Offset = "0x84F348", VA = "0x84F348")]
	internal void CheckCleanDecapitationStylePoint()
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x8428A0", Offset = "0x8428A0", VA = "0x8428A0")]
	public bool AreAnyLimbsGrabbed()
	{
		return default(bool);
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x84F4BC", Offset = "0x84F4BC", VA = "0x84F4BC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x850050", Offset = "0x850050", VA = "0x850050")]
	public void HitOutOfBoundsArea()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x850100", Offset = "0x850100", VA = "0x850100")]
	internal void IgnorAreArmorCollisionsWith(WeaponBase weap, bool ignore = true)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x850270", Offset = "0x850270", VA = "0x850270")]
	internal void IgnoreAllCollisionsWith(GameObject weap, bool ignore)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x83A1EC", Offset = "0x83A1EC", VA = "0x83A1EC")]
	public void DisableUprights()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x83B278", Offset = "0x83B278", VA = "0x83B278")]
	public void EnableUprights()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x850390", Offset = "0x850390", VA = "0x850390")]
	public void NotifyArmorPieceRemoved(SeverableLimb attachedTo)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x8505E8", Offset = "0x8505E8", VA = "0x8505E8")]
	public void NotifyHelmetRippedOff(ArmorPiece helmet)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x850720", Offset = "0x850720", VA = "0x850720")]
	public void NotifyDisarmed(Transform handle)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x8507A0", Offset = "0x8507A0", VA = "0x8507A0")]
	public void NotifyMassiveShieldDamage()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x850840", Offset = "0x850840", VA = "0x850840")]
	public void NotifyParried(DamagerRigidbody parriedBy)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x84F3CC", Offset = "0x84F3CC", VA = "0x84F3CC")]
	public void NotiftyThrown()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x850A50", Offset = "0x850A50", VA = "0x850A50")]
	public void NotifyRipostied()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x850B28", Offset = "0x850B28", VA = "0x850B28")]
	public void NotifyLimbRipped()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x850C30", Offset = "0x850C30", VA = "0x850C30")]
	public void NotifyLimbSevered(SeverableLimb limb)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x850EC4", Offset = "0x850EC4", VA = "0x850EC4")]
	public void NotifyPlayerDamagedByMe()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x83C95C", Offset = "0x83C95C", VA = "0x83C95C")]
	public void NotifyMountDied()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x850F7C", Offset = "0x850F7C", VA = "0x850F7C")]
	public void NotifyGrabbed()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x850F80", Offset = "0x850F80", VA = "0x850F80")]
	public void NotifyLackeyFriendlyFire(Enemy offender)
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x851040", Offset = "0x851040", VA = "0x851040")]
	public void NotifyGotHitByLackey(Enemy lackey)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x8510E4", Offset = "0x8510E4", VA = "0x8510E4")]
	public void NotifyGotHitByRokibe(Enemy enemy)
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x85127C", Offset = "0x85127C", VA = "0x85127C")]
	public void NotifyHitAnotherRikobe(Enemy hit)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x8513E0", Offset = "0x8513E0", VA = "0x8513E0")]
	public void InsultPlayer()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x851590", Offset = "0x851590", VA = "0x851590")]
	public void Salute()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x84FA08", Offset = "0x84FA08", VA = "0x84FA08")]
	public void Stun(float time, bool dropWeapons = false)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x85184C", Offset = "0x85184C", VA = "0x85184C")]
	internal void DropWeapons()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x84EE80", Offset = "0x84EE80", VA = "0x84EE80")]
	private void SetAllLimbsGrabbable(bool grabbable)
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x83A138", Offset = "0x83A138", VA = "0x83A138")]
	public void SetFootFriction(SeverableLimb foot, bool highFriction)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x84C270", Offset = "0x84C270", VA = "0x84C270")]
	private void UnStun()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x8447DC", Offset = "0x8447DC", VA = "0x8447DC")]
	public void VomitBlood(bool burst = true)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x85188C", Offset = "0x85188C", VA = "0x85188C")]
	public bool IsSpeaking()
	{
		return default(bool);
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x849F10", Offset = "0x849F10", VA = "0x849F10")]
	public void Die(GameObject sender, DamageType damageType, bool isPlayerResponsible = false)
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x84480C", Offset = "0x84480C", VA = "0x84480C")]
	internal void Damage(float dmg, float dmgMod, GameObject sender, DamageType type, bool dontStun, AITargetable responsibleEntity, bool isFloorDamager)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x8518BC", Offset = "0x8518BC", VA = "0x8518BC")]
	public bool CheckBalance()
	{
		return default(bool);
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x84B448", Offset = "0x84B448", VA = "0x84B448")]
	public float GetBalanceFactor()
	{
		return default(float);
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x8519B4", Offset = "0x8519B4", VA = "0x8519B4")]
	public void MountShoulder(Enemy mount, ShoulderSeatArmorPiece seat)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x851AE8", Offset = "0x851AE8", VA = "0x851AE8")]
	public void MountCrab(Crab mount, ShoulderSeatArmorPiece seat)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x83C9D0", Offset = "0x83C9D0", VA = "0x83C9D0")]
	public void Dismount()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x845A4C", Offset = "0x845A4C", VA = "0x845A4C")]
	public void RegisterDamagedBy(AITargetable responsibleEntity)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x851C30", Offset = "0x851C30", VA = "0x851C30", Slot = "4")]
	public bool IsPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x851C38", Offset = "0x851C38", VA = "0x851C38", Slot = "5")]
	public bool HasRightArm()
	{
		return default(bool);
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x851CC0", Offset = "0x851CC0", VA = "0x851CC0", Slot = "6")]
	public bool HasLeftArm()
	{
		return default(bool);
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x851D48", Offset = "0x851D48", VA = "0x851D48")]
	public void SetWeaponsActive(bool active)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x851ECC", Offset = "0x851ECC", VA = "0x851ECC")]
	public void PelvisEnteredSpawnZone()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x851ED8", Offset = "0x851ED8", VA = "0x851ED8")]
	public void PelvisExitedSpawnZone()
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x851EE4", Offset = "0x851EE4", VA = "0x851EE4")]
	public Enemy()
	{
	}
}
[Token(Token = "0x2000079")]
public class EnemyAI : MonoBehaviour
{
	[Token(Token = "0x200007A")]
	public enum State
	{
		[Token(Token = "0x400053F")]
		Idle,
		[Token(Token = "0x4000540")]
		Saluting,
		[Token(Token = "0x4000541")]
		Fighting,
		[Token(Token = "0x4000542")]
		Waiting,
		[Token(Token = "0x4000543")]
		MoveToPoint,
		[Token(Token = "0x4000544")]
		Enraged
	}

	[Token(Token = "0x200007B")]
	[CompilerGenerated]
	private sealed class <BerserkerSecondaryAttacksCoroutine>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyAI <>4__this;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool <haveDoneWeaponRemovalResponse>5__2;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool <haveDoneHumiliatedResponse>5__3;

		[Token(Token = "0x1700005B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002F6")]
			[Address(RVA = "0x858B50", Offset = "0x858B50", VA = "0x858B50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002F8")]
			[Address(RVA = "0x858B98", Offset = "0x858B98", VA = "0x858B98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x853D30", Offset = "0x853D30", VA = "0x853D30")]
		[DebuggerHidden]
		public <BerserkerSecondaryAttacksCoroutine>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x8585B8", Offset = "0x8585B8", VA = "0x8585B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x8585BC", Offset = "0x8585BC", VA = "0x8585BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x858B58", Offset = "0x858B58", VA = "0x858B58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public List<Enemy> lackeys;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float targetSpeedDodgeThreshold;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float targetRangeDodgeThreshhold;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 inputMoveTarget;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 inputBodyTarget;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float inputLeanDirection;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GamepadPlayer controlledBy;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Enemy guy;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Enemy isLackeyFor;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float attackCooldown;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastAttackFinishTime;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private FakeTarget fakeTargetMainCamera;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int lackeyInSpawnQueue;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AITargetable target;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private AITargetable lastTarget;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float lastTargetDistance;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform moveTarget;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public State state;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public bool hasWarned;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject selectedHighlight;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject crosshair;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float selectionHighlightFlashTimer;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool drawTarget;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	public bool respondToInput;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ActionClipHolder clipHolder;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int walkClipCount;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public CharacterActionClip currentClip;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public CharacterActionClip lastClip;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public CharacterActionClip secondaryClip;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float distanceFromOpponent;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Renderer _selectionHighlightRenderer;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool getUpNextThink;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float lastThinkTime;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Vector3 lastStepPos;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private readonly Dictionary<AITargetable, int> transgressions;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float enragedTime;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private AITargetable enragedTarget;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float lastBowShootTime;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public bool printClips;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private CharacterActionClip nextInputClip;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float inputSetTime;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public bool instantlyRespondToInput;

	[Token(Token = "0x17000054")]
	public bool CanDodge
	{
		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x8532BC", Offset = "0x8532BC", VA = "0x8532BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000055")]
	public bool IsEnraged
	{
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x853314", Offset = "0x853314", VA = "0x853314")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000056")]
	private bool IsAttackOnCooldown
	{
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x853338", Offset = "0x853338", VA = "0x853338")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000057")]
	public Vector3 moveTargetOffset
	{
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x8533A8", Offset = "0x8533A8", VA = "0x8533A8")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x8533B4", Offset = "0x8533B4", VA = "0x8533B4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000058")]
	public float defaultDistanceFromOpponent
	{
		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x8535F0", Offset = "0x8535F0", VA = "0x8535F0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000059")]
	public float attackRange
	{
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x8538D0", Offset = "0x8538D0", VA = "0x8538D0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700005A")]
	private Renderer SelectionHighlightRenderer
	{
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x853540", Offset = "0x853540", VA = "0x853540")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x8531E8", Offset = "0x8531E8", VA = "0x8531E8")]
	public void AddLackey(Enemy newLackey)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x8532F8", Offset = "0x8532F8", VA = "0x8532F8")]
	public void AttackFinished()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x8533C0", Offset = "0x8533C0", VA = "0x8533C0")]
	public void ResetForPool()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x8539DC", Offset = "0x8539DC", VA = "0x8539DC")]
	internal void InterruptAttack()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x853BB4", Offset = "0x853BB4", VA = "0x853BB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x853C48", Offset = "0x853C48", VA = "0x853C48")]
	public void Setup()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x853CBC", Offset = "0x853CBC", VA = "0x853CBC")]
	[IteratorStateMachine(typeof(<BerserkerSecondaryAttacksCoroutine>d__50))]
	private IEnumerator BerserkerSecondaryAttacksCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x853D58", Offset = "0x853D58", VA = "0x853D58")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x8556FC", Offset = "0x8556FC", VA = "0x8556FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x856968", Offset = "0x856968", VA = "0x856968")]
	public void Stun()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x853A0C", Offset = "0x853A0C", VA = "0x853A0C")]
	private void StopCurrentClip(bool includeSecondary = false)
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x854424", Offset = "0x854424", VA = "0x854424")]
	private void Think()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x8569E0", Offset = "0x8569E0", VA = "0x8569E0")]
	private void TakeAStep(bool secondary = false)
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x857640", Offset = "0x857640", VA = "0x857640")]
	public void NoteTransgression(AITargetable transgressor)
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x8577E8", Offset = "0x8577E8", VA = "0x8577E8")]
	public void BecomeEnranged(AITargetable transgressor)
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x854194", Offset = "0x854194", VA = "0x854194")]
	private bool IsFacingTarget()
	{
		return default(bool);
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x856A20", Offset = "0x856A20", VA = "0x856A20")]
	private CharacterActionClip GetAttackClip()
	{
		return null;
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x853B10", Offset = "0x853B10", VA = "0x853B10")]
	private void StartClip(CharacterActionClip clip, bool secondary = false)
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x857818", Offset = "0x857818", VA = "0x857818")]
	public void Daze()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x855C3C", Offset = "0x855C3C", VA = "0x855C3C")]
	private void CheckInput()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x8581A8", Offset = "0x8581A8", VA = "0x8581A8")]
	public float GetRelativeXPos(Vector3 target)
	{
		return default(float);
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x857820", Offset = "0x857820", VA = "0x857820")]
	public void SwitchToNearestTarget()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x857C80", Offset = "0x857C80", VA = "0x857C80")]
	public void SwitchTarget(bool further)
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x8573E8", Offset = "0x8573E8", VA = "0x8573E8")]
	private void DoInputClip()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x858298", Offset = "0x858298", VA = "0x858298")]
	public bool CanBeSeenByPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x8584A8", Offset = "0x8584A8", VA = "0x8584A8")]
	public EnemyAI()
	{
	}
}
[Token(Token = "0x200007C")]
public class Eye : MonoBehaviour
{
	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool poppedOut;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ConfigurableJoint joint;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject stringer;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject mesh;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool detached;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float enlargeAmount;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody rigidbody;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Collider collider;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform parentTransform;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 startLocalPosition;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Quaternion startLocalRotation;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public JointInfo jointInfo;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Rigidbody connectedBody;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private DisableDespawnTracker despawnTracker;

	[Token(Token = "0x1700005D")]
	public bool CanLook
	{
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x858BA0", Offset = "0x858BA0", VA = "0x858BA0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x858BC0", Offset = "0x858BC0", VA = "0x858BC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x858D5C", Offset = "0x858D5C", VA = "0x858D5C")]
	public void Enlarge(float amount)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x858D80", Offset = "0x858D80", VA = "0x858D80")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x858F2C", Offset = "0x858F2C", VA = "0x858F2C")]
	public void Detach()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x859054", Offset = "0x859054", VA = "0x859054")]
	public void Reattach()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x859134", Offset = "0x859134", VA = "0x859134")]
	public void Popout()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x85922C", Offset = "0x85922C", VA = "0x85922C")]
	public void ResetForPool()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x85913C", Offset = "0x85913C", VA = "0x85913C")]
	private void SetPopOut(bool popOut)
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x859248", Offset = "0x859248", VA = "0x859248")]
	private void OnJointBreak(float force)
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x859258", Offset = "0x859258", VA = "0x859258")]
	public Eye()
	{
	}
}
[Token(Token = "0x200007D")]
public class FireBowClip : CharacterActionClip
{
	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GrabHand leftGrabHand;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private TestGrabJoint leftGrabHandTest;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Bow heldBow;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Arrow firingArrow;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float fistForce;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float grabRange;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float aimDelay;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float maxNockTime;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float maxGrabTime;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool haveWarned;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	private bool haveSpoken;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 targetPoint;

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x859268", Offset = "0x859268", VA = "0x859268", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x85A660", Offset = "0x85A660", VA = "0x85A660", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x85A920", Offset = "0x85A920", VA = "0x85A920", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x85AB04", Offset = "0x85AB04", VA = "0x85AB04")]
	public FireBowClip()
	{
	}
}
[Token(Token = "0x200007E")]
public class FistDamageRelay : DamageRelay
{
	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public FisticuffFist fist;

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x85AB14", Offset = "0x85AB14", VA = "0x85AB14", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x85ABD0", Offset = "0x85ABD0", VA = "0x85ABD0", Slot = "8")]
	protected override void DamageInternal(float damage, GameObject sender)
	{
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x85AE6C", Offset = "0x85AE6C", VA = "0x85AE6C")]
	public FistDamageRelay()
	{
	}
}
[Token(Token = "0x200007F")]
public class FisticuffFist : SeverableLimb
{
	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Transform targetTransform;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform weaponTargetTransForm;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public SeverableLimb lowerArm;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public SeverableLimb upperArm;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public DamagerRigidbody damager;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public FisticuffFist otherFist;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public bool isMainFist;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public int grabBlendIndex;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public IKMuscleChain IKchain;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float temporarilyWeakenM;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public int shieldStyle;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public bool isLeftHand;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float shieldLeftBias;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float shieldUpBias;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x165")]
	private bool isAttacking;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public float lastAttackEndTime;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public float swingExtraHeight;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float swingSpeed;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public float swingWidth;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public bool recovering;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private Vector3 recoveringFrom;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float recoverProgress;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	public bool keepUpright;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18E")]
	public bool isSaluting;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18F")]
	private bool wasGrabbing;

	[Token(Token = "0x1700005E")]
	public GrabHand grabHand
	{
		[Token(Token = "0x600030B")]
		[Address(RVA = "0x85AE74", Offset = "0x85AE74", VA = "0x85AE74")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600030C")]
		[Address(RVA = "0x85AE7C", Offset = "0x85AE7C", VA = "0x85AE7C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public bool isAnimating
	{
		[Token(Token = "0x600030D")]
		[Address(RVA = "0x85AE8C", Offset = "0x85AE8C", VA = "0x85AE8C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600030E")]
		[Address(RVA = "0x85AE94", Offset = "0x85AE94", VA = "0x85AE94")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000060")]
	public bool IsAttacking
	{
		[Token(Token = "0x6000310")]
		[Address(RVA = "0x85AFA4", Offset = "0x85AFA4", VA = "0x85AFA4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000311")]
		[Address(RVA = "0x85AFAC", Offset = "0x85AFAC", VA = "0x85AFAC")]
		set
		{
		}
	}

	[Token(Token = "0x17000061")]
	public bool RecentlyAttacked
	{
		[Token(Token = "0x6000312")]
		[Address(RVA = "0x85B06C", Offset = "0x85B06C", VA = "0x85B06C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000062")]
	public bool swing
	{
		[Token(Token = "0x6000315")]
		[Address(RVA = "0x85B1E4", Offset = "0x85B1E4", VA = "0x85B1E4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000063")]
	public bool IsStable
	{
		[Token(Token = "0x6000316")]
		[Address(RVA = "0x85B250", Offset = "0x85B250", VA = "0x85B250")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x85B258", Offset = "0x85B258", VA = "0x85B258")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000064")]
	public bool isWieldingWeapon
	{
		[Token(Token = "0x6000318")]
		[Address(RVA = "0x8537FC", Offset = "0x8537FC", VA = "0x8537FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000065")]
	public bool isWieldingTwoHandedWeapon
	{
		[Token(Token = "0x6000319")]
		[Address(RVA = "0x85B264", Offset = "0x85B264", VA = "0x85B264")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000066")]
	public WeaponType WieldedWeaponType
	{
		[Token(Token = "0x600031A")]
		[Address(RVA = "0x8536F8", Offset = "0x8536F8", VA = "0x8536F8")]
		get
		{
			return default(WeaponType);
		}
	}

	[Token(Token = "0x17000067")]
	public bool isWieldingShield
	{
		[Token(Token = "0x600031C")]
		[Address(RVA = "0x85B318", Offset = "0x85B318", VA = "0x85B318")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x85AEA0", Offset = "0x85AEA0", VA = "0x85AEA0", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x85B0AC", Offset = "0x85B0AC", VA = "0x85B0AC")]
	public void CommenceAttack()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x85A9EC", Offset = "0x85A9EC", VA = "0x85A9EC")]
	public void FinishAttack()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x85B140", Offset = "0x85B140", VA = "0x85B140")]
	public void TemporarilyWeaken(float amount)
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x85B344", Offset = "0x85B344", VA = "0x85B344", Slot = "4")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x85C534", Offset = "0x85C534", VA = "0x85C534")]
	private Vector3 GetFistTargetDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x85C878", Offset = "0x85C878", VA = "0x85C878", Slot = "7")]
	public override void Sever(GameObject sender)
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x85C99C", Offset = "0x85C99C", VA = "0x85C99C", Slot = "8")]
	public override void AddForce(Vector3 force, ForceMode forceMode = ForceMode.Force)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x85CB68", Offset = "0x85CB68", VA = "0x85CB68", Slot = "9")]
	public override void AddForceAtPosition(Vector3 force, Vector3 position, ForceMode forceMode = ForceMode.Force)
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x85CDB0", Offset = "0x85CDB0", VA = "0x85CDB0")]
	public FisticuffFist()
	{
	}
}
[Token(Token = "0x2000080")]
public class FloorSticky : MonoBehaviour
{
	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float downForce;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool sticking;

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x85CDD8", Offset = "0x85CDD8", VA = "0x85CDD8")]
	private void OnCollisionStay(Collision other)
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x85CF3C", Offset = "0x85CF3C", VA = "0x85CF3C")]
	public FloorSticky()
	{
	}
}
[Token(Token = "0x2000081")]
public class FootCollisionTracker : MonoBehaviour
{
	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float collisionTime;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody collidedWith;

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x85CF44", Offset = "0x85CF44", VA = "0x85CF44")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x85CFF8", Offset = "0x85CFF8", VA = "0x85CFF8")]
	public FootCollisionTracker()
	{
	}
}
[Token(Token = "0x2000082")]
public class GetUpClip : CharacterActionClip
{
	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float chestLiftForce;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve forceCurve;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool boostNextGetup;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float defaultDrag;

	[Token(Token = "0x17000068")]
	public override float SpeedMod
	{
		[Token(Token = "0x6000328")]
		[Address(RVA = "0x85D258", Offset = "0x85D258", VA = "0x85D258", Slot = "4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x85D000", Offset = "0x85D000", VA = "0x85D000", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x85D288", Offset = "0x85D288", VA = "0x85D288", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x85D2C8", Offset = "0x85D2C8", VA = "0x85D2C8", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x85D31C", Offset = "0x85D31C", VA = "0x85D31C", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x85D37C", Offset = "0x85D37C", VA = "0x85D37C")]
	public GetUpClip()
	{
	}
}
[Token(Token = "0x2000083")]
public class Head : SeverableLimb
{
	[Token(Token = "0x2000084")]
	public enum Expression
	{
		[Token(Token = "0x40005B5")]
		Neutral,
		[Token(Token = "0x40005B6")]
		Smile,
		[Token(Token = "0x40005B7")]
		Shocked,
		[Token(Token = "0x40005B8")]
		Angry,
		[Token(Token = "0x40005B9")]
		Effort
	}

	[Token(Token = "0x2000085")]
	[CompilerGenerated]
	private sealed class <EyeBlinkCoroutine>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Head <>4__this;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <blinkAmount>5__2;

		[Token(Token = "0x17000069")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000342")]
			[Address(RVA = "0x85FDE4", Offset = "0x85FDE4", VA = "0x85FDE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000344")]
			[Address(RVA = "0x85FE2C", Offset = "0x85FE2C", VA = "0x85FE2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x85F2BC", Offset = "0x85F2BC", VA = "0x85F2BC")]
		[DebuggerHidden]
		public <EyeBlinkCoroutine>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x85FAB4", Offset = "0x85FAB4", VA = "0x85FAB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x85FAB8", Offset = "0x85FAB8", VA = "0x85FAB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x85FDEC", Offset = "0x85FDEC", VA = "0x85FDEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Renderer skullRenderer;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private float blinkRotationAmount;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Transform leftEyelidBone;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Transform rightEyelidBone;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Transform mainCameraTransform;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Vector3 jawStartPosition;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private Quaternion jawStartRotation;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private Vector3 jawBoneStartPosition;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Quaternion jawBoneStartRotation;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject jawBone;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Transform jawAttachPoint;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform jawBaseAttachPoint;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int shockedBlendshape;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private int rightEyeBlendShapeIndex;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private int leftEyeBlendshapeIndex;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private int smileBlendshape;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private int angryBlendshape;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private int bottomEyelids;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private float expressionTimeout;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private Expression currentExpression;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject moustache;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float smileAmt;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private float shockedAmt;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private float angryAmt;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	private float bottomEyelidsAmt;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public Eye leftEye;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public Eye rightEye;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public Transform leftEyeHolder;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public Transform rightEyeHolder;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public Rigidbody jawRigidbody;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public List<GameObject> teeth;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private List<GameObject> removedTeeth;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private List<KnockedOutTooth> knockedOutTeeth;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private float blinkDelay;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
	private float blinkStartZRot;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private float blinkSpeed;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
	public bool jawActive;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private float lookingAtEnemyWeaponTime;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private Transform lookTarget;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private float lookTime;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	private Vector3 lookTargetPos;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private float stunnedEyeRotationCounter;

	[Token(Token = "0x40005B3")]
	private const float EyeSqrDistanceCheck = 0.5625f;

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x85D384", Offset = "0x85D384", VA = "0x85D384", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x85D498", Offset = "0x85D498", VA = "0x85D498")]
	public void SetExpression(Expression expression, float timeOut = -1f)
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x85D54C", Offset = "0x85D54C", VA = "0x85D54C")]
	private void RunExpressions()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x85D898", Offset = "0x85D898", VA = "0x85D898")]
	public void RelaxJaw()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x85D8C4", Offset = "0x85D8C4", VA = "0x85D8C4")]
	public void EnableJaw()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x85D8F0", Offset = "0x85D8F0", VA = "0x85D8F0")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x85D9F4", Offset = "0x85D9F4", VA = "0x85D9F4")]
	public void CloseEyes()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x85DACC", Offset = "0x85DACC", VA = "0x85DACC", Slot = "6")]
	public override void ResetLimb()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x85E010", Offset = "0x85E010", VA = "0x85E010")]
	private void Start()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x856984", Offset = "0x856984", VA = "0x856984")]
	public void SetTempLookTarget(Transform target, float time)
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x85E0A4", Offset = "0x85E0A4", VA = "0x85E0A4")]
	public void SetTempLookTarget(Vector3 pos, float time)
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x85E114", Offset = "0x85E114", VA = "0x85E114", Slot = "4")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x85DF9C", Offset = "0x85DF9C", VA = "0x85DF9C")]
	[IteratorStateMachine(typeof(<EyeBlinkCoroutine>d__56))]
	private IEnumerator EyeBlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x85F2E4", Offset = "0x85F2E4", VA = "0x85F2E4")]
	internal void DisplayHeadDamage(Vector3 force, float damage, Vector3 hitPos)
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x85F510", Offset = "0x85F510", VA = "0x85F510")]
	private void LaunchTooth(Vector3 force, Vector3 hitPos)
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x85F7D8", Offset = "0x85F7D8", VA = "0x85F7D8")]
	public void RemoveKnockedOutTooth(KnockedOutTooth knockedOutTooth)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x85F830", Offset = "0x85F830", VA = "0x85F830")]
	public void GetChopped(bool reparentJaw = true)
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x85F9AC", Offset = "0x85F9AC", VA = "0x85F9AC")]
	public Head()
	{
	}
}
[Token(Token = "0x2000086")]
public class HeadVariationController : MonoBehaviour, IHeadVariationController
{
	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer[] hairs;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer[] hairsLOD1;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Renderer[] hairsLOD2;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Renderer[] eyebrows;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject[] teeths;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Renderer[] beards;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Renderer[] beardsLOD1;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Renderer[] beardsLOD2;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Material[] hairMaterials;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material selectedHairMaterial;

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x85FE34", Offset = "0x85FE34", VA = "0x85FE34")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x85FE38", Offset = "0x85FE38", VA = "0x85FE38", Slot = "4")]
	public void RandomizeAppearance()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x860214", Offset = "0x860214", VA = "0x860214", Slot = "5")]
	public void CopyFrom(IHeadVariationController variationController)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x8605EC", Offset = "0x8605EC", VA = "0x8605EC")]
	public HeadVariationController()
	{
	}
}
[Token(Token = "0x2000087")]
public class HeadVariationControllerMobile : MonoBehaviour, IHeadVariationController
{
	[Serializable]
	[Token(Token = "0x2000088")]
	private struct MeshVariationContainer
	{
		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Mesh Lod0;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Mesh Lod1;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh Lod2;
	}

	[Serializable]
	[Token(Token = "0x2000089")]
	private struct HairMaterialContainer
	{
		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Material Lod0;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Material Lod1;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material Lod2;
	}

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SkinnedMeshRenderer lod0Renderer;

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SkinnedMeshRenderer lod1Renderer;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SkinnedMeshRenderer lod2Renderer;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private MeshVariationContainer[] meshVariations;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private HairMaterialContainer[] hairMaterials;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int selectedHairMaterialIndex;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int selectedMeshVariation;

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x8605F4", Offset = "0x8605F4", VA = "0x8605F4", Slot = "4")]
	public void RandomizeAppearance()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x8607E8", Offset = "0x8607E8", VA = "0x8607E8", Slot = "5")]
	public void CopyFrom(IHeadVariationController variationController)
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x860644", Offset = "0x860644", VA = "0x860644")]
	private void UpdateVariations()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x860880", Offset = "0x860880", VA = "0x860880")]
	public HeadVariationControllerMobile()
	{
	}
}
[Token(Token = "0x200008A")]
public class Heart : MonoBehaviour
{
	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hasBeenRemoved;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem removalBloodSpurtParticles;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem removalCandySpurtParticles;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject meshStandard;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject meshPinata;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform[] spurtPoints;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Renderer heartRenderer;

	[Token(Token = "0x40005DC")]
	private const float InitialJointBreakDelay = 0.2f;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Enemy owner;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject activeMesh;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int spurtsLeft;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float heartBeatDelay;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float jointBreakDelay;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private FixedJoint fj;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody stuckTo;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody rb;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float heartPower;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float spurtPower;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float spurtDelay;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Grabbable grabbable;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform myTransform;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform startParent;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 startLocalPosition;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 startLocalRotation;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int startLayer;

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x860890", Offset = "0x860890", VA = "0x860890")]
	private void Awake()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x860998", Offset = "0x860998", VA = "0x860998")]
	private void Start()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x860AF0", Offset = "0x860AF0", VA = "0x860AF0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x860F18", Offset = "0x860F18", VA = "0x860F18")]
	private void SetUpRigidBodyAndFixedJoint()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x861084", Offset = "0x861084", VA = "0x861084")]
	public void Remove(Rigidbody stuckTo)
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x861120", Offset = "0x861120", VA = "0x861120")]
	public void ReturnToOwner()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x861314", Offset = "0x861314", VA = "0x861314")]
	public Heart()
	{
	}
}
[Token(Token = "0x200008B")]
public class IdleAction : CharacterActionClip
{
	[Token(Token = "0x6000354")]
	[Address(RVA = "0x861328", Offset = "0x861328", VA = "0x861328", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x8616E4", Offset = "0x8616E4", VA = "0x8616E4")]
	public IdleAction()
	{
	}
}
[Token(Token = "0x200008C")]
public interface IHeadVariationController
{
	[Token(Token = "0x6000356")]
	void RandomizeAppearance();

	[Token(Token = "0x6000357")]
	void CopyFrom(IHeadVariationController variationController);
}
[Serializable]
[Token(Token = "0x200008D")]
public class JointDriveInfo
{
	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float spring;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float damper;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxForce;

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x8616EC", Offset = "0x8616EC", VA = "0x8616EC")]
	public JointDriveInfo()
	{
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x8616F4", Offset = "0x8616F4", VA = "0x8616F4")]
	public JointDriveInfo(JointDriveInfo other)
	{
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x861730", Offset = "0x861730", VA = "0x861730")]
	public void CopyFrom(JointDriveInfo other)
	{
	}
}
[Token(Token = "0x200008E")]
public class IKMuscleChain : MonoBehaviour
{
	[Token(Token = "0x200008F")]
	public enum Tension
	{
		[Token(Token = "0x4000615")]
		Idle,
		[Token(Token = "0x4000616")]
		Tense,
		[Token(Token = "0x4000617")]
		Backswing,
		[Token(Token = "0x4000618")]
		Stunned
	}

	[Token(Token = "0x2000090")]
	public enum State
	{
		[Token(Token = "0x400061A")]
		Inactive,
		[Token(Token = "0x400061B")]
		IKFollow,
		[Token(Token = "0x400061C")]
		AnimFollow
	}

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetsAreRelativeTo;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform targetTransform;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SeverableLimb actuatorLimb;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform ikHand;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform upperFollowTransform;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform lowerFollowTransform;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ConfigurableJoint upperMuscle;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ConfigurableJoint lowerMuscle;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform upperAnimFollowTransform;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform lowerAnimFollowTransform;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool printDistance;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public JointDriveInfo tenseJointDrive;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public JointDriveInfo IdleJointDrive;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public JointDriveInfo backswingJointDrive;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float rotSpeedIdle;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float rotSpeedTense;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float rotSpeedBackswing;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool debugDontLerpTarget;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected Enemy guy;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected JointDriveInfo stunnedDriveInfo;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected JointDriveInfo initialStunnedDriveInfo;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Quaternion upperArmRotationOffset;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Quaternion lowerArmRotationOffset;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Quaternion upperArmRotationOffsetAnim;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Quaternion lowerArmRotationOffsetAnim;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Tension currentTension;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private JointDriveInfo initialTenseJointDrive;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private JointDriveInfo initialIdleJointDrive;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private JointDriveInfo initialBackswingJointDrive;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private State state;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Vector3 targetPosRelative;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Vector3 targetWorldPos;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private bool lockTargetInWorld;

	[Token(Token = "0x4000612")]
	private const float StartTemporarilyWeakenM = 0f;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float temporarilyWeakenM;

	[Token(Token = "0x1700006B")]
	public float ActuatorToHandDistance
	{
		[Token(Token = "0x600035B")]
		[Address(RVA = "0x861754", Offset = "0x861754", VA = "0x861754")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x85A904", Offset = "0x85A904", VA = "0x85A904")]
	public void SetState(State newState)
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x85A510", Offset = "0x85A510", VA = "0x85A510")]
	public void SetTargetPos(Vector3 target, Space space = Space.Self, bool dontLerp = false)
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x8618A8", Offset = "0x8618A8", VA = "0x8618A8")]
	protected float GetRotationSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x861928", Offset = "0x861928", VA = "0x861928")]
	public void LockTargetInWorldSpace(bool lockPos = true)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x86196C", Offset = "0x86196C", VA = "0x86196C")]
	private void SetupSlerpDrive(ConfigurableJoint joint, JointDriveInfo info)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x85B2F0", Offset = "0x85B2F0", VA = "0x85B2F0")]
	public void TemporarilyWeaken(float amount)
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x861AC8", Offset = "0x861AC8", VA = "0x861AC8")]
	private JointDriveInfo GetJointDriveForTension(Tension tension)
	{
		return null;
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x861B10", Offset = "0x861B10", VA = "0x861B10", Slot = "4")]
	public virtual void SetMuscleTension(Tension tension)
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x861BDC", Offset = "0x861BDC", VA = "0x861BDC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x861D40", Offset = "0x861D40", VA = "0x861D40", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x861E7C", Offset = "0x861E7C", VA = "0x861E7C", Slot = "6")]
	protected virtual void RunIkMuscleFollow()
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x8624F0", Offset = "0x8624F0", VA = "0x8624F0", Slot = "7")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x862B40", Offset = "0x862B40", VA = "0x862B40")]
	public void ResetForPooling()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x862BD4", Offset = "0x862BD4", VA = "0x862BD4")]
	public IKMuscleChain()
	{
	}
}
[Token(Token = "0x2000091")]
public class KeyFrameActionClip : CharacterActionClip
{
	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public KeyFrameActionClipInfo info;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float scale;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int currentKeyFrameIndex;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float timeThisKeyFrame;

	[Token(Token = "0x1700006C")]
	private ActionClipKeyFrame CurrentKeyFrame
	{
		[Token(Token = "0x600036A")]
		[Address(RVA = "0x862C70", Offset = "0x862C70", VA = "0x862C70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x862CCC", Offset = "0x862CCC", VA = "0x862CCC", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x86366C", Offset = "0x86366C", VA = "0x86366C")]
	private void StartKeyFrame()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x8638EC", Offset = "0x8638EC", VA = "0x8638EC")]
	private IKMuscleChain GetMuscleChain(KeyFrameLimbPos.Limb limb)
	{
		return null;
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x86345C", Offset = "0x86345C", VA = "0x86345C")]
	private bool IsCurrentKeyFrameRequirementsMet()
	{
		return default(bool);
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x863968", Offset = "0x863968", VA = "0x863968", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x8639DC", Offset = "0x8639DC", VA = "0x8639DC", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x863A4C", Offset = "0x863A4C", VA = "0x863A4C")]
	public KeyFrameActionClip()
	{
	}
}
[Token(Token = "0x2000092")]
public class ManualArmControlActionClip : CharacterActionClip
{
	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool haveSpoken;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float speakCooldown;

	[Token(Token = "0x6000372")]
	[Address(RVA = "0x863A5C", Offset = "0x863A5C", VA = "0x863A5C", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000373")]
	[Address(RVA = "0x864660", Offset = "0x864660", VA = "0x864660", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x8646F4", Offset = "0x8646F4", VA = "0x8646F4", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x8647C0", Offset = "0x8647C0", VA = "0x8647C0")]
	public ManualArmControlActionClip()
	{
	}
}
[Token(Token = "0x2000093")]
public class PlayerControllerActionClip : CharacterActionClip
{
	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float fistForceCharge;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float fistForceAttack;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool charging;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool haveSpoken;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float minChargeTime;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float maxChargeTime;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float chargeTime;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float chargePower;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 chargeVector;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 chargeEndVector;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 chargeTargetDirection;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 chargeEndTargetDirection;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 chargedOffset;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 strongestOffset;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 lastOffset;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Vector3 offsetDifference;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float lastAngle;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x8647C8", Offset = "0x8647C8", VA = "0x8647C8", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x865E34", Offset = "0x865E34", VA = "0x865E34", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x865EC8", Offset = "0x865EC8", VA = "0x865EC8", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x865FC8", Offset = "0x865FC8", VA = "0x865FC8")]
	public PlayerControllerActionClip()
	{
	}
}
[Token(Token = "0x2000094")]
public class RollOverClip : CharacterActionClip
{
	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SeverableLimb arm;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float chestForce;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 sideDirection;

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x865FD0", Offset = "0x865FD0", VA = "0x865FD0", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x8660D8", Offset = "0x8660D8", VA = "0x8660D8", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x866234", Offset = "0x866234", VA = "0x866234")]
	public RollOverClip()
	{
	}
}
[Token(Token = "0x2000095")]
public class SaluteClip : CharacterActionClip
{
	[Token(Token = "0x600037D")]
	[Address(RVA = "0x86623C", Offset = "0x86623C", VA = "0x86623C", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x866598", Offset = "0x866598", VA = "0x866598", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x8665CC", Offset = "0x8665CC", VA = "0x8665CC", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x8665FC", Offset = "0x8665FC", VA = "0x8665FC")]
	public SaluteClip()
	{
	}
}
[Token(Token = "0x2000096")]
public class SeverableFoot : SeverableLimb
{
	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int groundTouches;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public bool showDebug;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int groundLayerMask;

	[Token(Token = "0x1700006D")]
	public bool TouchingGround
	{
		[Token(Token = "0x6000381")]
		[Address(RVA = "0x866604", Offset = "0x866604", VA = "0x866604")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x866614", Offset = "0x866614", VA = "0x866614", Slot = "6")]
	public override void ResetLimb()
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x86680C", Offset = "0x86680C", VA = "0x86680C", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x866DE8", Offset = "0x866DE8", VA = "0x866DE8")]
	public void PushDown(float force)
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x866FC0", Offset = "0x866FC0", VA = "0x866FC0")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x867008", Offset = "0x867008", VA = "0x867008")]
	private void OnCollisionExit(Collision col)
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x867050", Offset = "0x867050", VA = "0x867050")]
	public SeverableFoot()
	{
	}
}
[Token(Token = "0x2000097")]
public class SeverableLimb : MonoBehaviour
{
	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidbody;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SeverableLimb parentLimb;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<SeverableLimb> childLimbs;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject deadBodyPusher;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource stretchAudioSource;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool IsSevered;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public MonoBehaviour[] disableComponentsOnSever;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Joint severJoint;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float impaledJointBreakForce;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float impaledJointBreakTorque;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Enemy owner;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ArmorPiece armorPiece;

	[Token(Token = "0x4000646")]
	private const float StartingJointFatigue = 1.25f;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected float jointFatigue;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool killOwnerOnSever;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	public bool isHead;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color debugColor;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool showDebugForces;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Collider collider;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float snapDistance;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool printJointForces;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 bloodSpurtDirection;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 bloodSpurtPoint;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float bloodSpurtTimeLeft;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float bloodSpurtCounter;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool impaled;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected Choppable choppable;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public ConfigurableJoint ConfigurableJoint;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool bonusFatigue;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Joint impaleJoint;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool isImpaleJoint;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private DamagerRigidbody impaledTo;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool hasCustomDamper;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Grabbable grabbable;

	[Token(Token = "0x1700006E")]
	public float drag
	{
		[Token(Token = "0x6000389")]
		[Address(RVA = "0x867090", Offset = "0x867090", VA = "0x867090")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600038A")]
		[Address(RVA = "0x8670AC", Offset = "0x8670AC", VA = "0x8670AC")]
		set
		{
		}
	}

	[Token(Token = "0x1700006F")]
	public float defaultDrag
	{
		[Token(Token = "0x600038E")]
		[Address(RVA = "0x868B30", Offset = "0x868B30", VA = "0x868B30")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600038F")]
		[Address(RVA = "0x868B38", Offset = "0x868B38", VA = "0x868B38")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x867088", Offset = "0x867088", VA = "0x867088")]
	public void SetJointFatigue(float value)
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x8670C8", Offset = "0x8670C8", VA = "0x8670C8", Slot = "4")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x868B18", Offset = "0x868B18", VA = "0x868B18")]
	public void AddBonusJointFatigue(float amt)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x868864", Offset = "0x868864", VA = "0x868864")]
	private void RunStretchAudio()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x866864", Offset = "0x866864", VA = "0x866864", Slot = "5")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x868B40", Offset = "0x868B40", VA = "0x868B40")]
	public void ResetLimbJoint()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x86662C", Offset = "0x86662C", VA = "0x86662C", Slot = "6")]
	public virtual void ResetLimb()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x868E58", Offset = "0x868E58", VA = "0x868E58", Slot = "7")]
	public virtual void Sever(GameObject weapon)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x869440", Offset = "0x869440", VA = "0x869440", Slot = "8")]
	public virtual void AddForce(Vector3 force, ForceMode forceMode = ForceMode.Force)
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x869560", Offset = "0x869560", VA = "0x869560", Slot = "9")]
	public virtual void AddForceAtPosition(Vector3 force, Vector3 position, ForceMode forceMode = ForceMode.Force)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x8696B0", Offset = "0x8696B0", VA = "0x8696B0", Slot = "10")]
	public virtual void Knock(Vector3 force, Vector3 position, ForceMode forceMode = ForceMode.Force)
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x8698F0", Offset = "0x8698F0", VA = "0x8698F0")]
	public void AddRelativeTorque(Vector3 torque)
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x86991C", Offset = "0x86991C", VA = "0x86991C")]
	public void Impale(Vector3 impalePoint, Vector3 impaleDirection, Joint impaleJoint, DamagerRigidbody impaledTo, AITargetable responsibleEntity)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x869B90", Offset = "0x869B90", VA = "0x869B90")]
	public void UnImpale()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x869D24", Offset = "0x869D24", VA = "0x869D24")]
	private void OnJointBreak(float force)
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x86706C", Offset = "0x86706C", VA = "0x86706C")]
	public SeverableLimb()
	{
	}
}
[Token(Token = "0x2000098")]
public class Shin : SeverableLimb
{
	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private ConfigurableJoint configurableJoint;

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x869F10", Offset = "0x869F10", VA = "0x869F10", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x869F70", Offset = "0x869F70", VA = "0x869F70", Slot = "7")]
	public override void Sever(GameObject weapon)
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x86A044", Offset = "0x86A044", VA = "0x86A044")]
	public Shin()
	{
	}
}
[Token(Token = "0x2000099")]
public class SpineMuscleChain : IKMuscleChain
{
	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public Quaternion upperTargetRot;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public Quaternion lowerTargetRot;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public float massScale;

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x86A060", Offset = "0x86A060", VA = "0x86A060", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x86A09C", Offset = "0x86A09C", VA = "0x86A09C", Slot = "4")]
	public override void SetMuscleTension(Tension tension)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x86A1D8", Offset = "0x86A1D8", VA = "0x86A1D8", Slot = "6")]
	protected override void RunIkMuscleFollow()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x86A608", Offset = "0x86A608", VA = "0x86A608")]
	public SpineMuscleChain()
	{
	}
}
[Token(Token = "0x200009A")]
public class TakeBalanceStepClip : CharacterActionClip
{
	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SeverableLimb leg;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SeverableLimb otherLeg;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Rigidbody head;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SeverableLimb torso;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private IKMuscleChain muscle;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IKMuscleChain otherMuscle;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float liftTime;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float forwardForce;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float upwardForce;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float downwardForce;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 target;

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x86A610", Offset = "0x86A610", VA = "0x86A610", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x86A6A0", Offset = "0x86A6A0", VA = "0x86A6A0", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x86ABDC", Offset = "0x86ABDC", VA = "0x86ABDC", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x86AD0C", Offset = "0x86AD0C", VA = "0x86AD0C", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x86AD14", Offset = "0x86AD14", VA = "0x86AD14", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x86AD78", Offset = "0x86AD78", VA = "0x86AD78")]
	public TakeBalanceStepClip()
	{
	}
}
[Token(Token = "0x200009B")]
public class TakeStepClip : CharacterActionClip
{
	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AnimationCurve upwardCurve;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve forwardCurve;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve shinTorqueCurve;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve thighTorqueCurve;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AnimationCurve maintainHeightBonusCurve;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private SeverableLimb shin;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private SeverableLimb thigh;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private SeverableLimb otherShin;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private SeverableLimb otherThigh;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SeverableLimb chest;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private SeverableFoot foot;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private SeverableFoot otherFoot;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private IKMuscleChain muscle;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private IKMuscleChain otherMuscle;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool leftLeg;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private CharacterMaintainHeight heightMaintainer;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float shinMotorSpringForce;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float stepDistance;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float stepHeight;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float maintainHeightBonus;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float liftTime;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float forwardForce;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float upwardForce;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float downwardForce;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float torsoForce;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float torsoTurnForce;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float inputControlledTorsoForce;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float moveToPointTorsoForce;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Vector3 footStartPos;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector3 otherFootStartPos;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float thighTorque;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Transform debugMoveTarget;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Vector3 moveTarget;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private Vector3 turnTarget;

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x86AD80", Offset = "0x86AD80", VA = "0x86AD80", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x86ADF4", Offset = "0x86ADF4", VA = "0x86ADF4", Slot = "7")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x86B60C", Offset = "0x86B60C", VA = "0x86B60C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x86B6D0", Offset = "0x86B6D0", VA = "0x86B6D0", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x86B904", Offset = "0x86B904", VA = "0x86B904")]
	private Vector3 ClampMoveTarget(Vector3 moveTarget)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x86BA90", Offset = "0x86BA90", VA = "0x86BA90", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x86C4F8", Offset = "0x86C4F8", VA = "0x86C4F8")]
	public TakeStepClip()
	{
	}
}
[Token(Token = "0x200009C")]
public class TwoHandedLeapAttack : ComplexLimbFollowClip
{
	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float leapForce;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float targetLeapSpeed;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float dipDepth;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float straightenForce;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private bool haveLeftGround;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float launchHeight;

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float apex;

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x86C500", Offset = "0x86C500", VA = "0x86C500", Slot = "9")]
	public override void StartClip()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x86C520", Offset = "0x86C520", VA = "0x86C520", Slot = "11")]
	protected override void RunTorso()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x86D264", Offset = "0x86D264", VA = "0x86D264", Slot = "13")]
	protected override void SpeakAnticipation()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x86D028", Offset = "0x86D028", VA = "0x86D028")]
	private void AddStraightenForce(Rigidbody rb, Vector3 force)
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x86D348", Offset = "0x86D348", VA = "0x86D348", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x86D394", Offset = "0x86D394", VA = "0x86D394")]
	public TwoHandedLeapAttack()
	{
	}
}
[Token(Token = "0x200009D")]
public class TwoHandedSpinAttack : ComplexLimbFollowClip
{
	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float spinSpeed;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float spinAccel;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float curSpinSpeed;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float speedDamping;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private SeverableFoot closestFoot;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float footSwitchDelay;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float footSwitchDelayLeft;

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x86D39C", Offset = "0x86D39C", VA = "0x86D39C")]
	private void RunFeet()
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x86D7BC", Offset = "0x86D7BC", VA = "0x86D7BC")]
	private void AddSpin(SeverableLimb limb, Vector3 around)
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x86D958", Offset = "0x86D958", VA = "0x86D958", Slot = "12")]
	protected override void SpeakEffort()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x86DC88", Offset = "0x86DC88", VA = "0x86DC88", Slot = "11")]
	protected override void RunTorso()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x86E12C", Offset = "0x86E12C", VA = "0x86E12C", Slot = "8")]
	public override void FinishClip()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x86E1B8", Offset = "0x86E1B8", VA = "0x86E1B8")]
	public TwoHandedSpinAttack()
	{
	}
}
[Token(Token = "0x200009E")]
public class Voice : MonoBehaviour
{
	[Token(Token = "0x200009F")]
	[CompilerGenerated]
	private sealed class <VomitBloodCoroutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Voice <>4__this;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool burst;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <rot>5__2;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <bloodVomitTime>5__3;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003CE")]
			[Address(RVA = "0x86F3C8", Offset = "0x86F3C8", VA = "0x86F3C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003D0")]
			[Address(RVA = "0x86F410", Offset = "0x86F410", VA = "0x86F410", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x86EA90", Offset = "0x86EA90", VA = "0x86EA90")]
		[DebuggerHidden]
		public <VomitBloodCoroutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x86EFB8", Offset = "0x86EFB8", VA = "0x86EFB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x86EFBC", Offset = "0x86EFBC", VA = "0x86EFBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x86F3D0", Offset = "0x86F3D0", VA = "0x86F3D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform jawTransform;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float jawMoveScale;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool testSpeak;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool testVomit;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform bloodVomitTransform;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audio;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SoundHolder voiceSoundHolder;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion jawDefaultRotation;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool vomitingBlood;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float audioPitch;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float specialResponseDelay;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Enemy guy;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string specialResponseQueued;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float specialResponseQueuedPriority;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Head.Expression specialResponseExpression;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Head head;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Rigidbody rigidbody;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private readonly HashSet<string> specialResponsesUsed;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SoundController.AudioDataCache cachedDbValues;

	[Token(Token = "0x17000070")]
	public float AudioPitch
	{
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x86E1C0", Offset = "0x86E1C0", VA = "0x86E1C0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x86E1C8", Offset = "0x86E1C8", VA = "0x86E1C8")]
		set
		{
		}
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x86E264", Offset = "0x86E264", VA = "0x86E264")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x86E3E4", Offset = "0x86E3E4", VA = "0x86E3E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x86E438", Offset = "0x86E438", VA = "0x86E438")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x86E990", Offset = "0x86E990", VA = "0x86E990")]
	public void VomitBlood(bool burst)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x86EA08", Offset = "0x86EA08", VA = "0x86EA08")]
	[IteratorStateMachine(typeof(<VomitBloodCoroutine>d__26))]
	private IEnumerator VomitBloodCoroutine(bool burst = true)
	{
		return null;
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x86D9F8", Offset = "0x86D9F8", VA = "0x86D9F8")]
	public void Speak(string sound, bool interrupt = true, Head.Expression expression = Head.Expression.Neutral)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x86EAB8", Offset = "0x86EAB8", VA = "0x86EAB8")]
	public void Speak(AudioClip soundClip, bool interrupt = true, Head.Expression expression = Head.Expression.Neutral)
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x86EC74", Offset = "0x86EC74", VA = "0x86EC74")]
	public void StopSpeaking()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x86EC90", Offset = "0x86EC90", VA = "0x86EC90")]
	public bool HasVoiceLine(string sound)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x86EC9C", Offset = "0x86EC9C", VA = "0x86EC9C")]
	public void QueueSpecialResponse(string sound, Head.Expression expression = Head.Expression.Neutral, bool allowRepeat = false, float probability = 1f)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x86EE50", Offset = "0x86EE50", VA = "0x86EE50")]
	public bool IsSpeaking()
	{
		return default(bool);
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x86EE6C", Offset = "0x86EE6C", VA = "0x86EE6C")]
	public void ResetForPooling()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x86EEBC", Offset = "0x86EEBC", VA = "0x86EEBC")]
	public Voice()
	{
	}
}
[Token(Token = "0x20000A0")]
public class Choppable : MonoBehaviour
{
	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Enemy owner;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool canBeChopped;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool canBeChoppedByHeavy;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool hasBeenChopped;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] bones;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Choppable> children;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public List<Choppable> choppedChildren;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Choppable parentChoppable;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Choppable parentChoppableBase;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform parentBoneTransform;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public MeshBloodSpurter parentSpurter;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] gameObjectsToEnableOnChop;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject[] gameObjectsToEnableOnGib;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CharacterDamageDisplay characterDamageDisplay;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ChopGroup chopGroup;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<int> affectedVerts;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public SeverableLimb SeverableLimb;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public ConfigurableJoint joint;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Rigidbody connectedBody;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public JointInfo jointInfo;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private bool startingCanBeChopped;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
	private bool startingCanBeChoppedHeavy;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private SkinnedMeshRenderer ownerMeshRenderer;

	[Token(Token = "0x17000073")]
	public SkinnedMeshRenderer meshRenderer
	{
		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x86F418", Offset = "0x86F418", VA = "0x86F418")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x86F420", Offset = "0x86F420", VA = "0x86F420")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000074")]
	public List<int> TriangleList
	{
		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x86F428", Offset = "0x86F428", VA = "0x86F428")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x86F430", Offset = "0x86F430", VA = "0x86F430")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000075")]
	public Mesh ChoppedMesh
	{
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x86F438", Offset = "0x86F438", VA = "0x86F438")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x86F440", Offset = "0x86F440", VA = "0x86F440")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0x868C58", Offset = "0x868C58", VA = "0x868C58")]
	public void ResetForPool()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x868B58", Offset = "0x868B58", VA = "0x868B58")]
	public void ResetJoint()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0x86F6AC", Offset = "0x86F6AC", VA = "0x86F6AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0x86F6B0", Offset = "0x86F6B0", VA = "0x86F6B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x86F5DC", Offset = "0x86F5DC", VA = "0x86F5DC")]
	public void SetChopObjectsActive(bool active)
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x86F644", Offset = "0x86F644", VA = "0x86F644")]
	public void SetGibObjectsActive(bool active)
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x86F868", Offset = "0x86F868", VA = "0x86F868")]
	public void SetupMeshData(CharacterMeshCache meshCache)
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x86F578", Offset = "0x86F578", VA = "0x86F578")]
	public void ResetTriangleList()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x86F8C4", Offset = "0x86F8C4", VA = "0x86F8C4")]
	public void ShowDamage(Vector3 point, float damage, DamageType damageType, float size = 1.5f, bool isFloor = false)
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x86FD14", Offset = "0x86FD14", VA = "0x86FD14")]
	public Choppable GetHighestParent()
	{
		return null;
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x86F448", Offset = "0x86F448", VA = "0x86F448")]
	private void CleanupChoppedMesh()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x86FD90", Offset = "0x86FD90", VA = "0x86FD90")]
	public Choppable()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A1")]
public class LevelSetupInfo
{
	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<EnemySetupInfo> enemies;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EnemySetupInfoHolder> enemiesScriptables;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<EnemyGroupInfo> waves;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<EnemySetupInfoHolder> waveOneEnemyScriptables;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<PlayerInventoryItem> playerWeapons;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ObjectiveInfo> objectives;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool shittyOptionsEnabled;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public GameMode gameMode;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Arena arena;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string trialName;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public CaestusType leftCaestus;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public CaestusType rightCaestus;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ChampionType championType;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool royalRumble;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public LevelTier startDifficulty;

	[Token(Token = "0x17000076")]
	public bool IsChampionBattle
	{
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x86FE6C", Offset = "0x86FE6C", VA = "0x86FE6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000077")]
	public bool IsEndless
	{
		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x86FE7C", Offset = "0x86FE7C", VA = "0x86FE7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x86FE8C", Offset = "0x86FE8C", VA = "0x86FE8C")]
	public LevelSetupInfo()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x870014", Offset = "0x870014", VA = "0x870014")]
	public int CountDifficulty()
	{
		return default(int);
	}
}
[Token(Token = "0x20000A2")]
public class BloodController : MonoBehaviour
{
	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Poolable[] candyPrefab;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem gibTrailPrefab;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem gibTrailPrefabCandy;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject explosionPrefab;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public BloodDrop[] bloodPrefab;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem starPuffPrefab;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<BloodDrop> bloodDropList;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<BloodPool> bloodPoolList;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Poolable> candyList;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject bluntImpact;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject bluntImpactNoBlood;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject gamepadPlayerImpact;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject sliceImpact;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject sliceImpactNoBlood;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject shieldImpact;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject shieldImpactWeak;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ParticleSystem dustPuff;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ParticleSystem weaponDisappearPuff;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public ParticleSystem dustPuffBillboard;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public ParticleSystem weaponDisappearPuffBillboard;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject knockedOutToothPrefab;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ParticleSystem bloodSpurtParticleSystem;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public ParticleSystem candySpurtParticleSystem;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public ParticleSystem bloodTrailParticleSystem;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GibHolder angryCrowdPersonGibHolder;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GibHolder angryCrowdPersonGibHolderPinata;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GibHolderPoolable[] rokibeGibHolders;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GibHolderPoolable[] pinateRokibeGibHolders;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[FormerlySerializedAs("maxBloodDropsPS4")]
	public int maxBloodDropsTier1;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public int maxBloodDropsTier2;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public int maxBloodDrops;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public int maxBloodPools;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int maxDustPuffs;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int dustPuffCount;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private BloodPoolManager bloodPoolManager;

	[Token(Token = "0x4000701")]
	private const float ToothLifeTime = 3f;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int _bloodLayer;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static BloodController instance;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Camera cameraMain;

	[Token(Token = "0x4000705")]
	private const float DustPuffRandom = 0.25f;

	[Token(Token = "0x4000706")]
	private const float MaxDustPuffSpawns = 2f;

	[Token(Token = "0x17000078")]
	public static int BloodLayer
	{
		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x870170", Offset = "0x870170", VA = "0x870170")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000079")]
	public static ParticleSystem BloodSpurtParticleSystem
	{
		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x870310", Offset = "0x870310", VA = "0x870310")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007A")]
	public static ParticleSystem BloodTrailParticleSystem
	{
		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x870398", Offset = "0x870398", VA = "0x870398")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700007B")]
	public static bool IsPinataMode
	{
		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x8703FC", Offset = "0x8703FC", VA = "0x8703FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007C")]
	public static int BloodDropCount
	{
		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x870E80", Offset = "0x870E80", VA = "0x870E80")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700007D")]
	public static int MaxBloodDropCount
	{
		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x870FE0", Offset = "0x870FE0", VA = "0x870FE0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x87041C", Offset = "0x87041C", VA = "0x87041C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x8705D8", Offset = "0x8705D8", VA = "0x8705D8")]
	public static KnockedOutTooth LaunchTooth(GameObject tooth, Vector3 velocity, Vector3 hitPos)
	{
		return null;
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x870784", Offset = "0x870784", VA = "0x870784")]
	public static GibHolder GetRokibeGibHolder(string prefabName)
	{
		return null;
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x870804", Offset = "0x870804", VA = "0x870804")]
	public static GibHolder GetAngryPersonGibHolder(Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x8708D4", Offset = "0x8708D4", VA = "0x8708D4")]
	public static void AddGibTrail(Transform t)
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x8709C0", Offset = "0x8709C0", VA = "0x8709C0")]
	public static void CreateWeaponDisappearPuff(GameObject obj, float delay = 0f)
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x870C3C", Offset = "0x870C3C", VA = "0x870C3C")]
	public static PoolableParticleSystem GetSpurtParticleSystem()
	{
		return null;
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x870CA8", Offset = "0x870CA8", VA = "0x870CA8")]
	public static PoolableParticleSystem GetBloodTrailParticleSystem()
	{
		return null;
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x870D14", Offset = "0x870D14", VA = "0x870D14")]
	public static void CreateExplosion(Vector3 position)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x868050", Offset = "0x868050", VA = "0x868050")]
	public static void SpawnBlood(Vector3 position, Vector3 direction, float force, float radius, int count, float scaleM, Vector3 inheritedVelocity)
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x870F58", Offset = "0x870F58", VA = "0x870F58")]
	public static void NotifyBloodDropDeath(BloodDrop drop)
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x8710A4", Offset = "0x8710A4", VA = "0x8710A4")]
	public static void SpawnBloodNoRandom(Vector3 position, Vector3 direction, float force, float radius, int count, float scaleM)
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x871588", Offset = "0x871588", VA = "0x871588")]
	public static void CreateDustPuff(Vector3 pos, float size = 1f)
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x871658", Offset = "0x871658", VA = "0x871658")]
	public static void CreateDustPuff(Vector3 pos, Vector3 normal, float size = 1f)
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x8717F4", Offset = "0x8717F4", VA = "0x8717F4")]
	public static void CreateSliceImpact(Vector3 pos, Vector3 sliceNormal)
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x871928", Offset = "0x871928", VA = "0x871928")]
	public static void CreateStartImpact(Vector3 pos)
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x871A08", Offset = "0x871A08", VA = "0x871A08")]
	public static void CreateGamepadPlayerHitEffect(Vector3 pos, Color hitByColor)
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x871C78", Offset = "0x871C78", VA = "0x871C78")]
	public static void CreateImpact(Vector3 pos, Vector3 direction, float damage)
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x871EE8", Offset = "0x871EE8", VA = "0x871EE8")]
	public static void CreateShieldImpact(Vector3 pos, Vector3 direction, float damage)
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x8720D0", Offset = "0x8720D0", VA = "0x8720D0")]
	public static void CreateWeakShieldImpact(Vector3 pos, Vector3 direction, float damage)
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x8722B4", Offset = "0x8722B4", VA = "0x8722B4")]
	public static void SpawnGibs(Transform gibHolder, Vector3 direction, float force)
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x872538", Offset = "0x872538", VA = "0x872538")]
	private void Update()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x872620", Offset = "0x872620", VA = "0x872620")]
	public BloodController()
	{
	}
}
[Token(Token = "0x20000A3")]
public class FinalBattleController : MonoBehaviour
{
	[Token(Token = "0x20000A4")]
	public enum Phase
	{
		[Token(Token = "0x4000719")]
		Inactive,
		[Token(Token = "0x400071A")]
		Initial,
		[Token(Token = "0x400071B")]
		ExistingHeads,
		[Token(Token = "0x400071C")]
		Final,
		[Token(Token = "0x400071D")]
		Finished
	}

	[Token(Token = "0x20000A5")]
	[CompilerGenerated]
	private sealed class <PhaseThreeInto>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fastTransition;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FinalBattleController <>4__this;

		[Token(Token = "0x1700007E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000411")]
			[Address(RVA = "0x873664", Offset = "0x873664", VA = "0x873664", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000413")]
			[Address(RVA = "0x8736AC", Offset = "0x8736AC", VA = "0x8736AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x873224", Offset = "0x873224", VA = "0x873224")]
		[DebuggerHidden]
		public <PhaseThreeInto>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x87327C", Offset = "0x87327C", VA = "0x87327C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x873280", Offset = "0x873280", VA = "0x873280", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x87366C", Offset = "0x87366C", VA = "0x87366C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FinalBattleController instance;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DamageableTerrainDeathpitBase skull;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] craters;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] emperorHeadAttackLines;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] emperorDeathrattle;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int headLimit;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int maxLivingEnemies;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float enemyDifficultyMin;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int enemyRankMin;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float enemyDifficultyMax;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int enemyRankMax;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject outerMountainsWhole;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject outerMountainsBroken;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Phase phase;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float headSpawnDelay;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform[] angryCrowdHeadSpawn;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int killedHeads;

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x872688", Offset = "0x872688", VA = "0x872688")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x872758", Offset = "0x872758", VA = "0x872758")]
	private void Update()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x872D6C", Offset = "0x872D6C", VA = "0x872D6C")]
	public static void MakeEmperorSayWarningLine()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x872E04", Offset = "0x872E04", VA = "0x872E04")]
	public static void NotifyCrowdpersonDied()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x872EB0", Offset = "0x872EB0", VA = "0x872EB0")]
	public void StartPhaseTwo()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x872C58", Offset = "0x872C58", VA = "0x872C58")]
	public void StartPhaseThree(bool fastTransition = false)
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x872FA8", Offset = "0x872FA8", VA = "0x872FA8")]
	public void FinishFight()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x872F20", Offset = "0x872F20", VA = "0x872F20")]
	[IteratorStateMachine(typeof(<PhaseThreeInto>d__25))]
	private IEnumerator PhaseThreeInto(bool fastTransition = false)
	{
		return null;
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x87324C", Offset = "0x87324C", VA = "0x87324C")]
	public FinalBattleController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A6")]
public class Result
{
	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool victory;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool customRulesEnabled;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string trialName;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameMode gameMode;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ChampionType champType;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayerInventoryItem trialType;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<ObjectiveInfo> completedObjectives;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<StyleAction> styleActions;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int kills;

	[Token(Token = "0x17000080")]
	public bool WasChampion
	{
		[Token(Token = "0x6000414")]
		[Address(RVA = "0x8736B4", Offset = "0x8736B4", VA = "0x8736B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000081")]
	public bool WasEndless
	{
		[Token(Token = "0x6000415")]
		[Address(RVA = "0x8736C4", Offset = "0x8736C4", VA = "0x8736C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x8736D4", Offset = "0x8736D4", VA = "0x8736D4")]
	public Result()
	{
	}
}
[Token(Token = "0x20000A7")]
public enum LevelTier
{
	[Token(Token = "0x400072C")]
	Easy,
	[Token(Token = "0x400072D")]
	Normal,
	[Token(Token = "0x400072E")]
	Hard,
	[Token(Token = "0x400072F")]
	VeryHard,
	[Token(Token = "0x4000730")]
	VeryEasy
}
[Token(Token = "0x20000A8")]
public enum GameMode
{
	[Token(Token = "0x4000732")]
	Standard,
	[Token(Token = "0x4000733")]
	Endless,
	[Token(Token = "0x4000734")]
	Champion,
	[Token(Token = "0x4000735")]
	Trial,
	[Token(Token = "0x4000736")]
	Party
}
[Token(Token = "0x20000A9")]
public enum HealTutorialState
{
	[Token(Token = "0x4000738")]
	NotShown,
	[Token(Token = "0x4000739")]
	Showing,
	[Token(Token = "0x400073A")]
	Done
}
[Token(Token = "0x20000AA")]
public enum SpecialEnemyType
{
	[Token(Token = "0x400073C")]
	Standard,
	[Token(Token = "0x400073D")]
	Berserker,
	[Token(Token = "0x400073E")]
	Achilles,
	[Token(Token = "0x400073F")]
	Mountain,
	[Token(Token = "0x4000740")]
	Fencer,
	[Token(Token = "0x4000741")]
	Defender,
	[Token(Token = "0x4000742")]
	BadgerMancer,
	[Token(Token = "0x4000743")]
	Giant,
	[Token(Token = "0x4000744")]
	ShoulderLackey,
	[Token(Token = "0x4000745")]
	Crab
}
[Serializable]
[Token(Token = "0x20000AB")]
public class EnemySetupInfo
{
	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float speedBonus;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float scale;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpecialEnemyType type;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ArmorType armorType;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EnemyWeaponType leftHandWeapon;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public EnemyWeaponType rightHandWeapon;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool helmet;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool breastPlate;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool rightUpperBracer;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool rightLowerBracer;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool rightThighArmor;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool rightShinArmor;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool rightPauldron;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public bool rightHandArmor;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool rightKneepad;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool rightFootArmor;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool leftUpperBracer;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool leftLowerBracer;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool leftThighArmor;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool leftShinArmor;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool leftPauldron;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool leftHandArmor;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool leftKneepad;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool leftFootArmor;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool belt;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int difficulty;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float combatDelay;

	[Token(Token = "0x6000417")]
	[Address(RVA = "0x8737AC", Offset = "0x8737AC", VA = "0x8737AC")]
	internal bool SetArmor(EnemyArmorPieceType a)
	{
		return default(bool);
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x873914", Offset = "0x873914", VA = "0x873914")]
	public EnemySetupInfo()
	{
	}
}
[Token(Token = "0x20000AC")]
public enum StyleAction
{
	[Token(Token = "0x4000762")]
	CleanDecapitation,
	[Token(Token = "0x4000763")]
	LimbSevered,
	[Token(Token = "0x4000764")]
	ArrowHeadshot,
	[Token(Token = "0x4000765")]
	MaceKill,
	[Token(Token = "0x4000766")]
	SwordKill,
	[Token(Token = "0x4000767")]
	PunchKill,
	[Token(Token = "0x4000768")]
	MorningStarKill,
	[Token(Token = "0x4000769")]
	WarhammerKill,
	[Token(Token = "0x400076A")]
	SpearKill,
	[Token(Token = "0x400076B")]
	AxeKill,
	[Token(Token = "0x400076C")]
	ThrowingKnifeKill,
	[Token(Token = "0x400076D")]
	LimbKill,
	[Token(Token = "0x400076E")]
	DoubleKill,
	[Token(Token = "0x400076F")]
	TripleKill,
	[Token(Token = "0x4000770")]
	BleedOut,
	[Token(Token = "0x4000771")]
	KnifeHeadshot,
	[Token(Token = "0x4000772")]
	BlockAttacks,
	[Token(Token = "0x4000773")]
	BeatADudeToDeathWithHisOwnLimb,
	[Token(Token = "0x4000774")]
	GuyKnockedOutOfArena,
	[Token(Token = "0x4000775")]
	Parry,
	[Token(Token = "0x4000776")]
	UndressOpponent,
	[Token(Token = "0x4000777")]
	ThrownWeaponKill,
	[Token(Token = "0x4000778")]
	BreakShield,
	[Token(Token = "0x4000779")]
	ArrowEfficiency,
	[Token(Token = "0x400077A")]
	CrowdPleaser,
	[Token(Token = "0x400077B")]
	WinBattle,
	[Token(Token = "0x400077C")]
	HeartRemoval,
	[Token(Token = "0x400077D")]
	AchieveRank,
	[Token(Token = "0x400077E")]
	DefeatChampion,
	[Token(Token = "0x400077F")]
	DefeatBerserker,
	[Token(Token = "0x4000780")]
	DefeatAchilles,
	[Token(Token = "0x4000781")]
	DefeatMountain,
	[Token(Token = "0x4000782")]
	DefeatFencer,
	[Token(Token = "0x4000783")]
	RockKill,
	[Token(Token = "0x4000784")]
	KillEnemy,
	[Token(Token = "0x4000785")]
	ParryKill,
	[Token(Token = "0x4000786")]
	DefeatDefender,
	[Token(Token = "0x4000787")]
	Disarm,
	[Token(Token = "0x4000788")]
	DefeatBadgermander,
	[Token(Token = "0x4000789")]
	DefeatGiant,
	[Token(Token = "0x400078A")]
	DefeatCrab,
	[Token(Token = "0x400078B")]
	UniqueWeaponKill,
	[Token(Token = "0x400078C")]
	PlayerDealtDamage,
	[Token(Token = "0x400078D")]
	FrisbeeThrowKillCatch,
	[Token(Token = "0x400078E")]
	ArrowParry,
	[Token(Token = "0x400078F")]
	EnvironmentKill,
	[Token(Token = "0x4000790")]
	GoldenArrowKill,
	[Token(Token = "0x4000791")]
	LimbGibbed,
	[Token(Token = "0x4000792")]
	KillSeagull
}
[Token(Token = "0x20000AD")]
public class GameController : MonoBehaviour
{
	[Token(Token = "0x20000AE")]
	public enum State
	{
		[Token(Token = "0x40007EA")]
		Tutorial,
		[Token(Token = "0x40007EB")]
		Fighting,
		[Token(Token = "0x40007EC")]
		Finished
	}

	[Token(Token = "0x20000AF")]
	[CompilerGenerated]
	private sealed class <MakeAllEnemiesStartFighting>d__123 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameController <>4__this;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600047A")]
			[Address(RVA = "0x8804AC", Offset = "0x8804AC", VA = "0x8804AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600047C")]
			[Address(RVA = "0x8804F4", Offset = "0x8804F4", VA = "0x8804F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x87FF70", Offset = "0x87FF70", VA = "0x87FF70")]
		[DebuggerHidden]
		public <MakeAllEnemiesStartFighting>d__123(int <>1__state)
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x87FF98", Offset = "0x87FF98", VA = "0x87FF98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x87FF9C", Offset = "0x87FF9C", VA = "0x87FF9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x8804B4", Offset = "0x8804B4", VA = "0x8804B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B0")]
	[CompilerGenerated]
	private sealed class <SpawnQueuedEnemy>d__189 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameController <>4__this;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemySetupInfo esi;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EnemyAI isLackeyFor;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GamepadPlayer assignToPlayer;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <doorNumber>5__2;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool <cannotContinue>5__3;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ArenaDoor <door>5__4;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Enemy <e>5__5;

		[Token(Token = "0x170000A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000480")]
			[Address(RVA = "0x88105C", Offset = "0x88105C", VA = "0x88105C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000482")]
			[Address(RVA = "0x8810A4", Offset = "0x8810A4", VA = "0x8810A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x8804FC", Offset = "0x8804FC", VA = "0x8804FC")]
		[DebuggerHidden]
		public <SpawnQueuedEnemy>d__189(int <>1__state)
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x880524", Offset = "0x880524", VA = "0x880524", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x880528", Offset = "0x880528", VA = "0x880528", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x881064", Offset = "0x881064", VA = "0x881064", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool haveActivatedDisplay;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool devCheats;

	[Token(Token = "0x4000795")]
	private const float Tier1EnemySpawnDelay = 3f;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FinalBattleController finalBattleController;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Result lastRoundResult;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float arenaSize;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public KillCam killCam;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UnlockProgressDisplayController unlockProgressDisplay;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static LevelSetupInfo currentLevelSetup;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static HealTutorialState healTutorialState;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private EnemySpawner enemySpawner;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LevelSetupInfo[] levels;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LevelSetupInfo[] specialLevels;

	[Token(Token = "0x40007A1")]
	public const float default_Gravity = 130f;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("ps4MaxEnemies")]
	public int tier1MaxEnemies;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int tier2MaxEnemies;

	[Token(Token = "0x40007A4")]
	private const int FramesAfterDeathSpawnDelay = 120;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int framesSinceEnemyDeathOrSpawn;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool isWaitForSpawn;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 playerStartPosition;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public LevelSetupInfo testLevel;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool useTestLevel;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int skipToLevel;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentWaveNumber;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool useRandomLevel;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	public bool spawningQueuedEnemy;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static int roundNumber;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public RTCameraController cameraDirtyController;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public RTLTextMeshPro text;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ObjectiveDisplay objectiveDisplay;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ScoreController scoreController;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public ExcitementController excitementController;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int deadEnemies;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int totalEnemies;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int tutorialState;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float saluteCounter;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Gate gate;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform[] enemySpawnPoint;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform[] rockSpawnPoint;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ArenaDoor[] offscreenSpawnDoor;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Transform playerWeaponSpawn;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public PrefabHolder prefabHolder;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private List<Objective> objectives;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public List<EnemySetupInfo> queuedEnemies;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private AudioLowPassFilter lowPassFilter;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public PartyModeEnemySetups partyModeESIs;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Material skeletonMaterial;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Texture2D skeletonTexturePinata;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Animator bossBoardsAnimator;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public GameObject pitColliders;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public BoxCrane boxCrane;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private bool multiplayerEnabled;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private GongImp gongImp;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public bool playerWon;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
	private bool timeBumpActive;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float slowmotime;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float timebumpeScale;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private bool enteringTimeBump;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private State state;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private List<Enemy> enemies;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private List<Crab> crabs;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private List<StyleAction> styleActions;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public FlippySwitch abandonGameFlippySwitch;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public EndOfRoundFanfareDisplayInfo testFanfare;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public bool displayTestFanfare;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private List<GameObject> playerWeapons;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float menuButtonHoldTime;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	public float defaultTimeScale;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private bool forcedSlowmo;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private float lastEnemyDeathTime;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private int killStreak;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	private bool gamePausedByPlayerGong;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B5")]
	private bool playerCheated;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private float finishDelay;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	public int enemyCount;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private bool initialTrialObjectivesCompleted;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private List<SurpriseBox> surpriseBoxes;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private float canSpawnDelay;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private LevelTier currentWaveDifficulty;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private bool haveSetupResult;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
	private bool haveFinishedScene;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public Camera thirdpersonCamera;

	[Token(Token = "0x17000082")]
	public static bool IsSpecialPaxDemoBuild
	{
		[Token(Token = "0x6000419")]
		[Address(RVA = "0x87392C", Offset = "0x87392C", VA = "0x87392C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000083")]
	public static GameController instance
	{
		[Token(Token = "0x600041A")]
		[Address(RVA = "0x873934", Offset = "0x873934", VA = "0x873934")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600041B")]
		[Address(RVA = "0x87397C", Offset = "0x87397C", VA = "0x87397C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000084")]
	public static bool IsInCombatScene
	{
		[Token(Token = "0x600041C")]
		[Address(RVA = "0x8739CC", Offset = "0x8739CC", VA = "0x8739CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000085")]
	public static float ArenaSize
	{
		[Token(Token = "0x600041D")]
		[Address(RVA = "0x86B9BC", Offset = "0x86B9BC", VA = "0x86B9BC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000086")]
	public static float ForceToDamageMultiplier
	{
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x873A58", Offset = "0x873A58", VA = "0x873A58")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000087")]
	public static bool AreShittyOptionsActiveAndAllowed
	{
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x870DF4", Offset = "0x870DF4", VA = "0x870DF4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000088")]
	public static bool IsPlayerUsingIronFist
	{
		[Token(Token = "0x6000420")]
		[Address(RVA = "0x873B04", Offset = "0x873B04", VA = "0x873B04")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000089")]
	public int MaxEnemies
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0x873C64", Offset = "0x873C64", VA = "0x873C64")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700008A")]
	public int totalEnemiesDeadSinceSceneLoad
	{
		[Token(Token = "0x6000422")]
		[Address(RVA = "0x873C6C", Offset = "0x873C6C", VA = "0x873C6C")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000423")]
		[Address(RVA = "0x873C74", Offset = "0x873C74", VA = "0x873C74")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700008B")]
	public static List<EnemySetupInfo> QueuedEnemies
	{
		[Token(Token = "0x6000424")]
		[Address(RVA = "0x872D20", Offset = "0x872D20", VA = "0x872D20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008C")]
	private AudioLowPassFilter LowPassFilter
	{
		[Token(Token = "0x6000425")]
		[Address(RVA = "0x873C7C", Offset = "0x873C7C", VA = "0x873C7C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008D")]
	internal static bool IsEndlessMode
	{
		[Token(Token = "0x6000426")]
		[Address(RVA = "0x873E70", Offset = "0x873E70", VA = "0x873E70")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008E")]
	public static bool IsPartyMode
	{
		[Token(Token = "0x6000427")]
		[Address(RVA = "0x873ED0", Offset = "0x873ED0", VA = "0x873ED0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008F")]
	public static bool IsTrialMode
	{
		[Token(Token = "0x6000428")]
		[Address(RVA = "0x873F30", Offset = "0x873F30", VA = "0x873F30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000090")]
	public static bool IsChampionMode
	{
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x873F90", Offset = "0x873F90", VA = "0x873F90")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000091")]
	public static bool TimeBumpActive
	{
		[Token(Token = "0x600042A")]
		[Address(RVA = "0x86E9BC", Offset = "0x86E9BC", VA = "0x86E9BC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000092")]
	public static Transform PlayerHead
	{
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x873DA0", Offset = "0x873DA0", VA = "0x873DA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000093")]
	public static Transform RandomHeadTransform
	{
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x87467C", Offset = "0x87467C", VA = "0x87467C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000094")]
	public static bool GateIsDown
	{
		[Token(Token = "0x6000430")]
		[Address(RVA = "0x874828", Offset = "0x874828", VA = "0x874828")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000095")]
	public static State GameState
	{
		[Token(Token = "0x6000431")]
		[Address(RVA = "0x8748B8", Offset = "0x8748B8", VA = "0x8748B8")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x17000096")]
	public static Player Player
	{
		[Token(Token = "0x6000432")]
		[Address(RVA = "0x873C24", Offset = "0x873C24", VA = "0x873C24")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000097")]
	public static bool IsFinished
	{
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x874904", Offset = "0x874904", VA = "0x874904")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000098")]
	public static bool IsRandomOrTest
	{
		[Token(Token = "0x6000436")]
		[Address(RVA = "0x875638", Offset = "0x875638", VA = "0x875638")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000099")]
	public static bool GamePausedByGong
	{
		[Token(Token = "0x6000448")]
		[Address(RVA = "0x879930", Offset = "0x879930", VA = "0x879930")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700009A")]
	public static int PartyModePlayerKills
	{
		[Token(Token = "0x600044D")]
		[Address(RVA = "0x87A4BC", Offset = "0x87A4BC", VA = "0x87A4BC")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600044E")]
		[Address(RVA = "0x87A504", Offset = "0x87A504", VA = "0x87A504")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009B")]
	public static GamepadPlayer PlayerLastHitByGamepadPlayer
	{
		[Token(Token = "0x600044F")]
		[Address(RVA = "0x87A550", Offset = "0x87A550", VA = "0x87A550")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000450")]
		[Address(RVA = "0x87A598", Offset = "0x87A598", VA = "0x87A598")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700009C")]
	public static int StyleActionCount
	{
		[Token(Token = "0x6000455")]
		[Address(RVA = "0x87C814", Offset = "0x87C814", VA = "0x87C814")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700009D")]
	public static LevelTier CurrentWaveDifficulty
	{
		[Token(Token = "0x6000462")]
		[Address(RVA = "0x87E1A4", Offset = "0x87E1A4", VA = "0x87E1A4")]
		get
		{
			return default(LevelTier);
		}
	}

	[Token(Token = "0x1700009E")]
	private static bool IsCampaignLevel
	{
		[Token(Token = "0x600046C")]
		[Address(RVA = "0x87E4CC", Offset = "0x87E4CC", VA = "0x87E4CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700009F")]
	public static bool IsEasyModeActiveAndAllowed
	{
		[Token(Token = "0x6000475")]
		[Address(RVA = "0x873AC0", Offset = "0x873AC0", VA = "0x873AC0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x872CB4", Offset = "0x872CB4", VA = "0x872CB4")]
	public bool IsBusySpawningEnemy()
	{
		return default(bool);
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x873FEC", Offset = "0x873FEC", VA = "0x873FEC")]
	public static void TimeBump(bool longDuration = false, bool playerGotHit = false)
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x8741B8", Offset = "0x8741B8", VA = "0x8741B8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x874958", Offset = "0x874958", VA = "0x874958")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x874C04", Offset = "0x874C04", VA = "0x874C04")]
	private void SwitchPulled(UnityEngine.Object s)
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x875720", Offset = "0x875720", VA = "0x875720")]
	private void Start()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x8766E8", Offset = "0x8766E8", VA = "0x8766E8")]
	public void ResetPlayerPosition()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x876A38", Offset = "0x876A38", VA = "0x876A38")]
	[IteratorStateMachine(typeof(<MakeAllEnemiesStartFighting>d__123))]
	private IEnumerator MakeAllEnemiesStartFighting()
	{
		return null;
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x876AAC", Offset = "0x876AAC", VA = "0x876AAC")]
	private void InitializeObjectives()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x876C4C", Offset = "0x876C4C", VA = "0x876C4C")]
	private LevelSetupInfo CreateRandomLevel()
	{
		return null;
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x8770D0", Offset = "0x8770D0", VA = "0x8770D0")]
	private void EnsureEnoughArmorPieces(LevelSetupInfo lsi, int amount)
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x87735C", Offset = "0x87735C", VA = "0x87735C")]
	public static int CountArmorPieces(LevelSetupInfo lsi)
	{
		return default(int);
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x877540", Offset = "0x877540", VA = "0x877540")]
	private int GetRequiredEnemies(LevelSetupInfo lsi)
	{
		return default(int);
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x8775FC", Offset = "0x8775FC", VA = "0x8775FC")]
	private void AddScriptableEnemiesToPool(LevelSetupInfo lsi)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x8759AC", Offset = "0x8759AC", VA = "0x8759AC")]
	protected void SetupLevel()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x878C98", Offset = "0x878C98", VA = "0x878C98")]
	private void CheckSpecialLevelSetup()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x878260", Offset = "0x878260", VA = "0x878260")]
	private EnemySetupInfo GetPartyModeESIFor(GamepadPlayer player)
	{
		return null;
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x8791BC", Offset = "0x8791BC", VA = "0x8791BC")]
	public static void IgnorePlayerHeadCollisions(Collider col)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x879320", Offset = "0x879320", VA = "0x879320")]
	public static void IgnorePlayerHandCollisions(Collider col)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x878A1C", Offset = "0x878A1C", VA = "0x878A1C")]
	private void CloseBossDoors()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x8795B8", Offset = "0x8795B8", VA = "0x8795B8")]
	public static void RegisterEnemy(Enemy guy)
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x87976C", Offset = "0x87976C", VA = "0x87976C")]
	public static void RegisterCrab(Crab crab)
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x87997C", Offset = "0x87997C", VA = "0x87997C")]
	public static void GongWasRungByPlayer()
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x879980", Offset = "0x879980", VA = "0x879980")]
	public static void PlayerHitWhilePause()
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x879A30", Offset = "0x879A30", VA = "0x879A30")]
	public static void PlayerHitDuringSalute()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x879B08", Offset = "0x879B08", VA = "0x879B08")]
	public static void RegisterEnemyDeath(Enemy guy, AITargetable lastDamagedBy)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x872CD4", Offset = "0x872CD4", VA = "0x872CD4")]
	public static List<Enemy> GetEnemies()
	{
		return null;
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x87A5E8", Offset = "0x87A5E8", VA = "0x87A5E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x87C774", Offset = "0x87C774", VA = "0x87C774")]
	private int CountStyleAction(StyleAction act)
	{
		return default(int);
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x87B880", Offset = "0x87B880", VA = "0x87B880")]
	private void RunObjectives()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x87C888", Offset = "0x87C888", VA = "0x87C888")]
	public static void DespawnAllEnemies()
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x87CAE8", Offset = "0x87CAE8", VA = "0x87CAE8")]
	private bool CheckTrialFinished()
	{
		return default(bool);
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x87CC44", Offset = "0x87CC44", VA = "0x87CC44")]
	private void RunWaves(bool forceNextWave = false)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x87D838", Offset = "0x87D838", VA = "0x87D838")]
	public void FinishRound()
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x87B9C8", Offset = "0x87B9C8", VA = "0x87B9C8")]
	private void ResetForNextTrial(LevelSetupInfo lsi)
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x87DAD4", Offset = "0x87DAD4", VA = "0x87DAD4")]
	public static GameObject SpawnPlayerWeapon(PlayerInventoryItem item, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x87DE90", Offset = "0x87DE90", VA = "0x87DE90")]
	public static GameObject SpawnSurpriseBoxItem(PlayerInventoryItem item, Vector3 position, SurpriseBox box)
	{
		return null;
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x87846C", Offset = "0x87846C", VA = "0x87846C")]
	private void SpawnPlayerWeapons(bool useBox = false)
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x87B080", Offset = "0x87B080", VA = "0x87B080")]
	private void CheckRoundFinished()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x87B740", Offset = "0x87B740", VA = "0x87B740")]
	private void RunQueuedEnemies()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x87E0D8", Offset = "0x87E0D8", VA = "0x87E0D8")]
	public static bool RequestLackey(EnemyAI forEnemy)
	{
		return default(bool);
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x87D758", Offset = "0x87D758", VA = "0x87D758")]
	private void SpawnQueuedEnemy(int count)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x878364", Offset = "0x878364", VA = "0x878364")]
	public static int GetMaxLivingEnemies(LevelTier difficulty, bool royalRumble)
	{
		return default(int);
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x8775DC", Offset = "0x8775DC", VA = "0x8775DC")]
	private int GetRoyalRumbleEnemyCount(LevelTier difficulty)
	{
		return default(int);
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x87E238", Offset = "0x87E238", VA = "0x87E238")]
	public static bool HaveTakenTrialWeapon()
	{
		return default(bool);
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x87E018", Offset = "0x87E018", VA = "0x87E018")]
	[IteratorStateMachine(typeof(<SpawnQueuedEnemy>d__189))]
	private IEnumerator SpawnQueuedEnemy(EnemySetupInfo esi, [Optional] EnemyAI isLackeyFor, [Optional] GamepadPlayer assignToPlayer)
	{
		return null;
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x87D480", Offset = "0x87D480", VA = "0x87D480")]
	public int GetLivingEnemiesCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x874D50", Offset = "0x874D50", VA = "0x874D50")]
	private Result SetupLevelResult()
	{
		return null;
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x87C36C", Offset = "0x87C36C", VA = "0x87C36C")]
	public void FinishScene()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x87C6E0", Offset = "0x87C6E0", VA = "0x87C6E0")]
	public static void LoadScene(string sceneId)
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x87E52C", Offset = "0x87E52C", VA = "0x87E52C")]
	public static void MakeAllEnemiesSalute()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x87E6B8", Offset = "0x87E6B8", VA = "0x87E6B8")]
	public static void PlayerDied()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x87E75C", Offset = "0x87E75C", VA = "0x87E75C")]
	private int GetTotalRemainingEnemies()
	{
		return default(int);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x87E858", Offset = "0x87E858", VA = "0x87E858")]
	public static void NotifyObjectiveProgress()
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x87E9AC", Offset = "0x87E9AC", VA = "0x87E9AC")]
	public static void NotifyAngryCrowdPersonKilled()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x87EA78", Offset = "0x87EA78", VA = "0x87EA78")]
	public static void NotifyPlayerDealtDamage()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x869180", Offset = "0x869180", VA = "0x869180")]
	public static void NotifyStyleAction(StyleAction action, Vector3 position)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x87EC04", Offset = "0x87EC04", VA = "0x87EC04")]
	private static void CheckObjective(StyleAction action)
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x87ED8C", Offset = "0x87ED8C", VA = "0x87ED8C")]
	internal static void ActivateThirdPersonCamera()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x87EE24", Offset = "0x87EE24", VA = "0x87EE24")]
	public GameController()
	{
	}
}
[Token(Token = "0x20000B1")]
public class GuidelinesController : MonoBehaviour
{
	[Token(Token = "0x20000B2")]
	[CompilerGenerated]
	private sealed class <LoadScene>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170000A4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000489")]
			[Address(RVA = "0x881220", Offset = "0x881220", VA = "0x881220", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600048B")]
			[Address(RVA = "0x881268", Offset = "0x881268", VA = "0x881268", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x88112C", Offset = "0x88112C", VA = "0x88112C")]
		[DebuggerHidden]
		public <LoadScene>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x88115C", Offset = "0x88115C", VA = "0x88115C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x881160", Offset = "0x881160", VA = "0x881160", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x881228", Offset = "0x881228", VA = "0x881228", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x8810AC", Offset = "0x8810AC", VA = "0x8810AC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x8810CC", Offset = "0x8810CC", VA = "0x8810CC")]
	[IteratorStateMachine(typeof(<LoadScene>d__1))]
	private IEnumerator LoadScene()
	{
		return null;
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x881154", Offset = "0x881154", VA = "0x881154")]
	public GuidelinesController()
	{
	}
}
[Token(Token = "0x20000B3")]
public enum ChampionType
{
	[Token(Token = "0x40007FE")]
	Berserker,
	[Token(Token = "0x40007FF")]
	Achilles,
	[Token(Token = "0x4000800")]
	Nothing,
	[Token(Token = "0x4000801")]
	Mountain,
	[Token(Token = "0x4000802")]
	Fencer,
	[Token(Token = "0x4000803")]
	Defender,
	[Token(Token = "0x4000804")]
	BadgerMancer,
	[Token(Token = "0x4000805")]
	Giant,
	[Token(Token = "0x4000806")]
	Crab
}
[Serializable]
[Token(Token = "0x20000B4")]
public class ChampionUnlock
{
	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ChampionType champ;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int rank;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StyleAction action;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int actionsRequired;

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x881270", Offset = "0x881270", VA = "0x881270")]
	public ChampionUnlock()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B5")]
public class ItemIcon
{
	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayerInventoryItem item;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite image;

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x881278", Offset = "0x881278", VA = "0x881278")]
	public ItemIcon()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B6")]
public class ObjectiveIcon
{
	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public StyleAction styleAction;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite image;

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x881280", Offset = "0x881280", VA = "0x881280")]
	public ObjectiveIcon()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B7")]
public class PlayerWeaponUnlock
{
	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayerInventoryItem item;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int rankRequirement;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StyleAction action;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int actionsRequired;

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x881288", Offset = "0x881288", VA = "0x881288")]
	public PlayerWeaponUnlock()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B8")]
public class PlayerWeaponUnlockProgress
{
	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayerInventoryItem item;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int count;

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x881290", Offset = "0x881290", VA = "0x881290")]
	public PlayerWeaponUnlockProgress()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B9")]
public class ChampionUnlockProgress
{
	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ChampionType champ;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int count;

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x881298", Offset = "0x881298", VA = "0x881298")]
	public ChampionUnlockProgress()
	{
	}
}
[Token(Token = "0x20000BA")]
public enum RankObjectiveType
{
	[Token(Token = "0x4000818")]
	WinBattles,
	[Token(Token = "0x4000819")]
	UnlockWeapons,
	[Token(Token = "0x400081A")]
	CompleteChallenge,
	[Token(Token = "0x400081B")]
	WinMainEvent,
	[Token(Token = "0x400081C")]
	WinSpecial
}
[Serializable]
[Token(Token = "0x20000BB")]
public class RankObjective
{
	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RankObjectiveType type;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int quantity;

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x8812A0", Offset = "0x8812A0", VA = "0x8812A0")]
	public string GetDescription()
	{
		return null;
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x8813A4", Offset = "0x8813A4", VA = "0x8813A4")]
	public static string GetDescription(RankObjectiveType type)
	{
		return null;
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x8814A8", Offset = "0x8814A8", VA = "0x8814A8")]
	public RankObjective()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BC")]
public class RankUpgradeRequirements
{
	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayerRank rank;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<RankObjective> objectives;

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x8814B0", Offset = "0x8814B0", VA = "0x8814B0")]
	public RankUpgradeRequirements()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BD")]
public class UnlockableItem
{
	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayerUnlock item;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int rankRequirement;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int cost;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string description;

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x8814B8", Offset = "0x8814B8", VA = "0x8814B8")]
	public UnlockableItem()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BE")]
public class EnemyWeaponMetaInfo
{
	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EnemyWeaponType type;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int rankRequired;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int difficulty;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool biasToLeftArm;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ChampionType championToDefeat;

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x8814C0", Offset = "0x8814C0", VA = "0x8814C0")]
	public EnemyWeaponMetaInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x20000BF")]
public class EnemyArmorMetaInfo
{
	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EnemyArmorPieceType type;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int rankRequired;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int difficulty;

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x8814C8", Offset = "0x8814C8", VA = "0x8814C8")]
	public EnemyArmorMetaInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C0")]
public class MetagameConfiguration
{
	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isDemo;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool useTestProgress;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool forceUnlockCustomGameMode;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ItemIcon[] icons;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EnemyWeaponMetaInfo[] enemyWeaponUnlocks;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyArmorMetaInfo[] enemyArmorUnlocks;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TrialLevelScriptable[] trialLevels;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ObjectiveIcon> objectiveIcons;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] firstFloorCampaignNames;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string[] secondFloorCampaignNames;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string[] thirdFloorCampaignNames;

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x8814D0", Offset = "0x8814D0", VA = "0x8814D0")]
	internal Sprite GetIcon(PlayerInventoryItem item)
	{
		return null;
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x881530", Offset = "0x881530", VA = "0x881530")]
	public TrialLevelScriptable GetTrialLevelByTrialName(string trialName)
	{
		return null;
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x88160C", Offset = "0x88160C", VA = "0x88160C")]
	public MetagameConfiguration()
	{
	}
}
[Token(Token = "0x20000C1")]
public enum EnemyArmorPieceType
{
	[Token(Token = "0x4000839")]
	leftFootArmor,
	[Token(Token = "0x400083A")]
	leftShinArmor,
	[Token(Token = "0x400083B")]
	leftKneePad,
	[Token(Token = "0x400083C")]
	leftThighArmor,
	[Token(Token = "0x400083D")]
	leftPauldron,
	[Token(Token = "0x400083E")]
	leftUpperBracer,
	[Token(Token = "0x400083F")]
	leftLowerBracer,
	[Token(Token = "0x4000840")]
	leftHandArmor,
	[Token(Token = "0x4000841")]
	rightFootArmor,
	[Token(Token = "0x4000842")]
	rightShinArmor,
	[Token(Token = "0x4000843")]
	rightKneePad,
	[Token(Token = "0x4000844")]
	rightThighArmor,
	[Token(Token = "0x4000845")]
	rightPauldron,
	[Token(Token = "0x4000846")]
	rightUpperBracer,
	[Token(Token = "0x4000847")]
	rightLowerBracer,
	[Token(Token = "0x4000848")]
	rightHandArmor,
	[Token(Token = "0x4000849")]
	belt,
	[Token(Token = "0x400084A")]
	breastPlate,
	[Token(Token = "0x400084B")]
	helmet
}
[Token(Token = "0x20000C2")]
public enum EnemyWeaponType
{
	[Token(Token = "0x400084D")]
	None,
	[Token(Token = "0x400084E")]
	Sword,
	[Token(Token = "0x400084F")]
	Mace,
	[Token(Token = "0x4000850")]
	Morningstar,
	[Token(Token = "0x4000851")]
	Shield,
	[Token(Token = "0x4000852")]
	Nunchucks,
	[Token(Token = "0x4000853")]
	Axe,
	[Token(Token = "0x4000854")]
	ArmorBreaker,
	[Token(Token = "0x4000855")]
	Warhammer,
	[Token(Token = "0x4000856")]
	Spear,
	[Token(Token = "0x4000857")]
	Gladius,
	[Token(Token = "0x4000858")]
	GiantFlail,
	[Token(Token = "0x4000859")]
	Bow,
	[Token(Token = "0x400085A")]
	Glaive,
	[Token(Token = "0x400085B")]
	ThrowingKnife,
	[Token(Token = "0x400085C")]
	TowerShield,
	[Token(Token = "0x400085D")]
	Badger,
	[Token(Token = "0x400085E")]
	QuarterStaff,
	[Token(Token = "0x400085F")]
	BaseballBat,
	[Token(Token = "0x4000860")]
	Halberd,
	[Token(Token = "0x4000861")]
	ThrowingShield,
	[Token(Token = "0x4000862")]
	GreatAxe,
	[Token(Token = "0x4000863")]
	ChainBlade,
	[Token(Token = "0x4000864")]
	GreatSword,
	[Token(Token = "0x4000865")]
	Tomahawk,
	[Token(Token = "0x4000866")]
	Kitana
}
[Token(Token = "0x20000C3")]
public enum Arena
{
	[Token(Token = "0x4000868")]
	Standard,
	[Token(Token = "0x4000869")]
	Great,
	[Token(Token = "0x400086A")]
	StandardNight,
	[Token(Token = "0x400086B")]
	DeathPit
}
[Token(Token = "0x20000C4")]
public class MetagameController : MonoBehaviour
{
	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Campaign LastPlayedCampaign;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string LastCompletedTrial;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Campaign currentCampaign;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Campaign testCampaign;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static bool showEndGameOutro;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly HashSet<string> ValidCampaigns;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool infiniteCashInEditor;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayerProgress playerProgress;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MetagameConfiguration configuration;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static MetagameController instance;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int lastSavedScore;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static bool haveLoadedProgress;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HashSet<string> campaignsInScoringMode;

	[Token(Token = "0x170000A6")]
	public static bool IsDirectorVersion
	{
		[Token(Token = "0x600049E")]
		[Address(RVA = "0x881738", Offset = "0x881738", VA = "0x881738")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A7")]
	public static bool IsCustomModeUnlocked
	{
		[Token(Token = "0x600049F")]
		[Address(RVA = "0x881740", Offset = "0x881740", VA = "0x881740")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A8")]
	public static bool IsCampaign
	{
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x882B5C", Offset = "0x882B5C", VA = "0x882B5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A9")]
	public static MetagameConfiguration Config
	{
		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x882AF8", Offset = "0x882AF8", VA = "0x882AF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AA")]
	public static bool IsDemo
	{
		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x883DE0", Offset = "0x883DE0", VA = "0x883DE0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x882EA4", Offset = "0x882EA4", VA = "0x882EA4")]
		set
		{
		}
	}

	[Token(Token = "0x170000AB")]
	public static PlayerProgress PlayerProgress
	{
		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x881B6C", Offset = "0x881B6C", VA = "0x881B6C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x884428", Offset = "0x884428", VA = "0x884428")]
		set
		{
		}
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x881614", Offset = "0x881614", VA = "0x881614")]
	public static string GetSceneName(Arena arena)
	{
		return null;
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x881698", Offset = "0x881698", VA = "0x881698")]
	public static bool IsValidCampaignName(string campName)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x881934", Offset = "0x881934", VA = "0x881934")]
	public static int GetLastSavedScore()
	{
		return default(int);
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x881998", Offset = "0x881998", VA = "0x881998")]
	public static void UpdateLastSavedScore(int newScore)
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x881A00", Offset = "0x881A00", VA = "0x881A00")]
	public static bool HasInstance()
	{
		return default(bool);
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x881A8C", Offset = "0x881A8C", VA = "0x881A8C")]
	public static bool HasItem(PlayerInventoryItem item)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x881D2C", Offset = "0x881D2C", VA = "0x881D2C")]
	public static EnemySetupInfo GetDefenderLackeyESI()
	{
		return null;
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x881DA4", Offset = "0x881DA4", VA = "0x881DA4")]
	public static bool HasDefeatedChampion(ChampionType champ)
	{
		return default(bool);
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x881E84", Offset = "0x881E84", VA = "0x881E84")]
	public static void AddItemUnlock(PlayerInventoryItem item)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x881F70", Offset = "0x881F70", VA = "0x881F70")]
	public static void AddCampaignToScoringMode(string campaignName)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x882070", Offset = "0x882070", VA = "0x882070")]
	public static void RemoveCampaignFromScoringMode(string campaignName)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x882170", Offset = "0x882170", VA = "0x882170")]
	public static bool IsCurrentCampaignInScoringMode()
	{
		return default(bool);
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x8822C4", Offset = "0x8822C4", VA = "0x8822C4")]
	public static void AddCompletedCampaign(string camp)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x88257C", Offset = "0x88257C", VA = "0x88257C")]
	public static void AddPerfectedCampaign(string camp)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x8826C0", Offset = "0x8826C0", VA = "0x8826C0")]
	public static void AddMasteredCampaign(string camp)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x882804", Offset = "0x882804", VA = "0x882804")]
	public static void SetHasFought(bool hasFought)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x882868", Offset = "0x882868", VA = "0x882868")]
	public static void SetHasHeardFirstOdalbeDialogue(bool hasHeardFirstOdalbeDialogue)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x8828CC", Offset = "0x8828CC", VA = "0x8828CC")]
	public static void SetHasHeardFirstFloorCompletedDialogue(bool hasHeardFirstFloorCompletedDialogue)
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x882930", Offset = "0x882930", VA = "0x882930")]
	public static void SetHasHeardSecondFloorCompletedDialogue(bool hasHeardSecondFloorCompletedDialogue)
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x882994", Offset = "0x882994", VA = "0x882994")]
	public static void SetHasHeardThirdFloorCompletedDialogue(bool hasHeardThirdFloorCompletedDialogue)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x8829F8", Offset = "0x8829F8", VA = "0x8829F8")]
	public static LevelSetupInfo GetTrial(string trialName)
	{
		return null;
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x882BBC", Offset = "0x882BBC", VA = "0x882BBC")]
	public static int GetTotalEnemiesForTrial(LevelTier difficulty, Arena arena)
	{
		return default(int);
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x882BFC", Offset = "0x882BFC", VA = "0x882BFC")]
	public static void RegisterCurrentCampaignCompleted(EndOfRoundFanfareDisplayInfo fanfareInfo)
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x882D8C", Offset = "0x882D8C", VA = "0x882D8C")]
	public static Campaign GetCampaign(string campaignName)
	{
		return null;
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x882DFC", Offset = "0x882DFC", VA = "0x882DFC")]
	public static void ResetToDefault()
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x882F08", Offset = "0x882F08", VA = "0x882F08")]
	public static bool IsLastTrialInCampaign(string trialName)
	{
		return default(bool);
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x882F68", Offset = "0x882F68", VA = "0x882F68")]
	public static LevelSetupInfo GetNextTrial(string trialName)
	{
		return null;
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x883038", Offset = "0x883038", VA = "0x883038")]
	public static float GetOverallCampaignProgressPercentage()
	{
		return default(float);
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x8830F8", Offset = "0x8830F8", VA = "0x8830F8")]
	public static bool HasUnlockedCaestus(CaestusType type)
	{
		return default(bool);
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x883234", Offset = "0x883234", VA = "0x883234")]
	public static void GiveAllUnlockedWeapons(LevelSetupInfo lsi)
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x88341C", Offset = "0x88341C", VA = "0x88341C")]
	public static void SetupPlayerWeapons(LevelSetupInfo lsi)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x883C7C", Offset = "0x883C7C", VA = "0x883C7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x883E3C", Offset = "0x883E3C", VA = "0x883E3C")]
	public static bool IsEndlessUnlocked()
	{
		return default(bool);
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x883E88", Offset = "0x883E88", VA = "0x883E88")]
	private static void SanitiseProgress(PlayerProgress prog)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x884494", Offset = "0x884494", VA = "0x884494")]
	public static PlayerInventoryItem GetUnlockItem(string trialName)
	{
		return default(PlayerInventoryItem);
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x884548", Offset = "0x884548", VA = "0x884548")]
	public static int GetCumulativeStyleActionCount(StyleAction sa)
	{
		return default(int);
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x8846F8", Offset = "0x8846F8", VA = "0x8846F8")]
	public static void RegisterCumulativeStyleActions(Result result)
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x884B04", Offset = "0x884B04", VA = "0x884B04")]
	public static EndOfRoundFanfareDisplayInfo ProcessLevelResult(Result result)
	{
		return null;
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x884E9C", Offset = "0x884E9C", VA = "0x884E9C")]
	public static bool IsTwoHandedWeapon(EnemyWeaponType weap)
	{
		return default(bool);
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x884EC0", Offset = "0x884EC0", VA = "0x884EC0")]
	public static StyleAction GetTrialScoreStyleAction(PlayerInventoryItem item)
	{
		return default(StyleAction);
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x884D84", Offset = "0x884D84", VA = "0x884D84")]
	public static void RegisterTrialCompleted(string trialName)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x885048", Offset = "0x885048", VA = "0x885048")]
	public static bool HasCompletedCampaign(string campName)
	{
		return default(bool);
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x885134", Offset = "0x885134", VA = "0x885134")]
	public static bool HasPerfectedCampaign(string campName)
	{
		return default(bool);
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x885220", Offset = "0x885220", VA = "0x885220")]
	public static bool HasMasteredCampaign(string campName)
	{
		return default(bool);
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x88530C", Offset = "0x88530C", VA = "0x88530C")]
	public static bool HasCompletedFirstFloor()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x8853CC", Offset = "0x8853CC", VA = "0x8853CC")]
	public static bool HasCompletedSecondFloor()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x88548C", Offset = "0x88548C", VA = "0x88548C")]
	public static bool HasCompletedThirdFloor()
	{
		return default(bool);
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x88554C", Offset = "0x88554C", VA = "0x88554C")]
	public static EnemySetupInfo GetSingleEnemySetupForEndless(ref float difficulty, int rank, bool ignoreMetaUnlocks = false)
	{
		return null;
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x885ECC", Offset = "0x885ECC", VA = "0x885ECC")]
	public static int GetChampionUnlockProgress(ChampionType champ)
	{
		return default(int);
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x886054", Offset = "0x886054", VA = "0x886054")]
	public static int GetItemUnlockProgress(PlayerInventoryItem item)
	{
		return default(int);
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x8861DC", Offset = "0x8861DC", VA = "0x8861DC")]
	public static EnemySetupInfo GetChampionEnemyForEndless()
	{
		return null;
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x8862CC", Offset = "0x8862CC", VA = "0x8862CC")]
	public static EnemySetupInfo GetChampionESI(ChampionType type, bool isForEndless = false)
	{
		return null;
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x886AC4", Offset = "0x886AC4", VA = "0x886AC4")]
	public static EnemyGroupInfo GenerateEndlessWave(int playerRank)
	{
		return null;
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x886ED4", Offset = "0x886ED4", VA = "0x886ED4")]
	private static bool CanEquipEnemyWeapon(float percentChance, EnemyWeaponType weapType)
	{
		return default(bool);
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x886F58", Offset = "0x886F58", VA = "0x886F58")]
	public static bool IsEnemyWeaponUnlocked(EnemyWeaponType weaponType)
	{
		return default(bool);
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x886998", Offset = "0x886998", VA = "0x886998")]
	public static EnemySetupInfo SuitUpEnemy(int pts, EnemySetupInfo nu, List<EnemyArmorPieceType> eneArmor, ArmorType armorTpe = ArmorType.Leather)
	{
		return null;
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x8870AC", Offset = "0x8870AC", VA = "0x8870AC")]
	private static int GetArmourPieceDifficulty(EnemyArmorPieceType arm)
	{
		return default(int);
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x8870CC", Offset = "0x8870CC", VA = "0x8870CC")]
	private static int GetLevelWeaponCount(EnemyWeaponType wep, LevelSetupInfo lev)
	{
		return default(int);
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x887228", Offset = "0x887228", VA = "0x887228")]
	private static int GetDifficulty(EnemyWeaponType weapon, bool rightHand)
	{
		return default(int);
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x887260", Offset = "0x887260", VA = "0x887260")]
	private static int GetDifficulty(EnemyArmorPieceType armorPiece)
	{
		return default(int);
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x887280", Offset = "0x887280", VA = "0x887280")]
	public static string GetFormattedUnlockProgressString(CaestusType item)
	{
		return null;
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x887340", Offset = "0x887340", VA = "0x887340")]
	public static string GetFormattedUnlockProgressString(PlayerInventoryItem item)
	{
		return null;
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x887380", Offset = "0x887380", VA = "0x887380")]
	private static int CountStyleActions(List<StyleAction> styleActions, StyleAction actionType)
	{
		return default(int);
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x88178C", Offset = "0x88178C", VA = "0x88178C")]
	public static bool HasDefeatedAnyChampion()
	{
		return default(bool);
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x887428", Offset = "0x887428", VA = "0x887428")]
	public static bool HasVisitedFloor(int floor)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x8874BC", Offset = "0x8874BC", VA = "0x8874BC")]
	public static void SetFloorVisited(int floor)
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x887544", Offset = "0x887544", VA = "0x887544")]
	public static void UnlockEverything()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x88799C", Offset = "0x88799C", VA = "0x88799C")]
	public MetagameController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000C5")]
public class EnemyGroupInfo
{
	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<EnemySetupInfo> enemies;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LevelTier levelTier;

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x886E34", Offset = "0x886E34", VA = "0x886E34")]
	public EnemyGroupInfo()
	{
	}
}
[Token(Token = "0x20000C6")]
public enum MovementMode
{
	[Token(Token = "0x400087C")]
	Gorn,
	[Token(Token = "0x400087D")]
	GornTouchpadPress,
	[Token(Token = "0x400087E")]
	InferiorTouchpad,
	[Token(Token = "0x400087F")]
	InferiorTouchpadControllerOriented,
	[Token(Token = "0x4000880")]
	Calibrating,
	[Token(Token = "0x4000881")]
	PsvrHeadsetLeft,
	[Token(Token = "0x4000882")]
	PsvrHeadsetRight,
	[Token(Token = "0x4000883")]
	PsvrControllerLeft,
	[Token(Token = "0x4000884")]
	PsvrControllerRight
}
[Token(Token = "0x20000C7")]
public enum PlayAreaDistance
{
	[Token(Token = "0x4000886")]
	Standard,
	[Token(Token = "0x4000887")]
	Reduced,
	[Token(Token = "0x4000888")]
	Off
}
[Token(Token = "0x20000C8")]
public enum ChampionFrequency
{
	[Token(Token = "0x400088A")]
	Standard,
	[Token(Token = "0x400088B")]
	None,
	[Token(Token = "0x400088C")]
	Always,
	[Token(Token = "0x400088D")]
	BossRushUltra
}
[Token(Token = "0x20000C9")]
public enum RotationHand
{
	[Token(Token = "0x400088F")]
	None,
	[Token(Token = "0x4000890")]
	LeftHand,
	[Token(Token = "0x4000891")]
	RightHand,
	[Token(Token = "0x4000892")]
	LeftHandSmooth,
	[Token(Token = "0x4000893")]
	RightHandSmooth,
	[Token(Token = "0x4000894")]
	GrabAndRotate,
	[Token(Token = "0x4000895")]
	LeftHand45,
	[Token(Token = "0x4000896")]
	RightHand45
}
[Serializable]
[Token(Token = "0x20000CA")]
public class ShittyOptionPreset
{
	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ShittyOptions preset;

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x887EB4", Offset = "0x887EB4", VA = "0x887EB4")]
	public ShittyOptionPreset()
	{
	}
}
[Token(Token = "0x20000CB")]
public enum GameDifficulty
{
	[Token(Token = "0x400089A")]
	Normal,
	[Token(Token = "0x400089B")]
	Easy,
	[Token(Token = "0x400089C")]
	Hard,
	[Token(Token = "0x400089D")]
	Nightmare
}
[Serializable]
[Token(Token = "0x20000CC")]
public class Options
{
	[Token(Token = "0x400089E")]
	private const uint Version1 = 3206840010u;

	[Token(Token = "0x400089F")]
	private const uint BinMapVersion = 3206840011u;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Options options;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool pinataMode;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool strictChaperone;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool comfortVignette;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool easyMode;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool armorShatters;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool persistentBlood;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool slowmoOnKill;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool bloodGushes;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool blur;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool hideStylePopups;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool autoEnableThirdPersonCamera;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameDifficulty difficulty;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MovementMode movementMode;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public RotationHand rotationHand;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ShittyOptions shittyOptions;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<ShittyOptions> playerPresets;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PlayAreaDistance playAreaDistance;

	[Token(Token = "0x170000AC")]
	public static Options Instance
	{
		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x885D64", Offset = "0x885D64", VA = "0x885D64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AD")]
	public ShittyOptions ShittyOptions
	{
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x885E20", Offset = "0x885E20", VA = "0x885E20")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x887EBC", Offset = "0x887EBC", VA = "0x887EBC")]
	private Options()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x88800C", Offset = "0x88800C", VA = "0x88800C")]
	public void ResetShittyOptions()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x888090", Offset = "0x888090", VA = "0x888090")]
	private void ResetPlayerPresets()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x8881F8", Offset = "0x8881F8", VA = "0x8881F8")]
	public bool Deserialize(BinaryReader reader)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x8887DC", Offset = "0x8887DC", VA = "0x8887DC")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x888D0C", Offset = "0x888D0C", VA = "0x888D0C")]
	public void CopyOptionsData(Options other)
	{
	}
}
[Serializable]
[Token(Token = "0x20000CD")]
public class DanceMove
{
	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string reference;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool sing;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool bounce;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float swayMultiplier;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bobMultiplier;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool throbSpeakers;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip musicClip;

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x888D84", Offset = "0x888D84", VA = "0x888D84")]
	public DanceMove()
	{
	}
}
[Token(Token = "0x20000CE")]
public class OutroController : MonoBehaviour
{
	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject endGameOutroContainer;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject viewCreditsContainer;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject spotlight;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] brazierLightsAndParticles;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float spotlightAppearDelay;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Animator[] speakerAnimators;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject bekirood;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public CharacterMaintainHeight bekiroodPelvis;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Voice bekiroodVoice;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public DamageRelay bekiroodHeadDamageable;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip fakeVoiceClip;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Rigidbody swayHarness;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ConfigurableJoint bobHarness;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float swayStrength;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float swaySpeed;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float bobStrength;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float bobSpeed;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("-------")]
	public float danceStartDelay;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public List<DanceMove> danceMoves;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private AudioSource musicSource;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float maxMusicVolume;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float coreographyTimer;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float spotlightTimer;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float nextDanceMoveTime;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private DanceMove currentDanceMove;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float defaultDesiredHeight;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float swayCounter;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float bobCounter;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 swayHarnessStartingPoint;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool isBekiroodDead;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	private bool haveStartedLoading;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float exitSceneTimer;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 playerStartPosition;

	[Token(Token = "0x170000AE")]
	public bool IsShowingEndGameOutro
	{
		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x888D8C", Offset = "0x888D8C", VA = "0x888D8C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x888D94", Offset = "0x888D94", VA = "0x888D94")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x888DA0", Offset = "0x888DA0", VA = "0x888DA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x888E98", Offset = "0x888E98", VA = "0x888E98")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x889090", Offset = "0x889090", VA = "0x889090")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x889164", Offset = "0x889164", VA = "0x889164")]
	private void UpdateEndGameOutro()
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x889920", Offset = "0x889920", VA = "0x889920")]
	public void ReturnToCell()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x889930", Offset = "0x889930", VA = "0x889930")]
	private void ResetPlayerPoisition()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x88999C", Offset = "0x88999C", VA = "0x88999C")]
	public OutroController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CF")]
public class TrialScore
{
	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayerInventoryItem trialType;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int trialScore;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int killScore;

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x8899AC", Offset = "0x8899AC", VA = "0x8899AC")]
	public TrialScore()
	{
	}
}
[Token(Token = "0x20000D0")]
public enum PlayerInventoryItem
{
	[Token(Token = "0x40008E0")]
	None,
	[Token(Token = "0x40008E1")]
	Sword,
	[Token(Token = "0x40008E2")]
	Mace,
	[Token(Token = "0x40008E3")]
	MorningStar,
	[Token(Token = "0x40008E4")]
	Shield,
	[Token(Token = "0x40008E5")]
	Bow,
	[Token(Token = "0x40008E6")]
	Spear,
	[Token(Token = "0x40008E7")]
	Warhammer,
	[Token(Token = "0x40008E8")]
	Chair,
	[Token(Token = "0x40008E9")]
	Stool,
	[Token(Token = "0x40008EA")]
	Table,
	[Token(Token = "0x40008EB")]
	Coin,
	[Token(Token = "0x40008EC")]
	Eel,
	[Token(Token = "0x40008ED")]
	GiantFlail,
	[Token(Token = "0x40008EE")]
	Gladius,
	[Token(Token = "0x40008EF")]
	Sticker,
	[Token(Token = "0x40008F0")]
	ThrowingKnife,
	[Token(Token = "0x40008F1")]
	Nunchucks,
	[Token(Token = "0x40008F2")]
	Axe,
	[Token(Token = "0x40008F3")]
	Glaive,
	[Token(Token = "0x40008F4")]
	ArmorBreaker,
	[Token(Token = "0x40008F5")]
	Boulder,
	[Token(Token = "0x40008F6")]
	QuarterStaff,
	[Token(Token = "0x40008F7")]
	PunchCaestus,
	[Token(Token = "0x40008F8")]
	ClawCaestus,
	[Token(Token = "0x40008F9")]
	MobilityCaestus,
	[Token(Token = "0x40008FA")]
	ThrowingKnifeCaestus,
	[Token(Token = "0x40008FB")]
	GrappleCaestus,
	[Token(Token = "0x40008FC")]
	Halberd,
	[Token(Token = "0x40008FD")]
	GreatAxe,
	[Token(Token = "0x40008FE")]
	ChainBlade,
	[Token(Token = "0x40008FF")]
	CrossbowCaestus,
	[Token(Token = "0x4000900")]
	GreatSword,
	[Token(Token = "0x4000901")]
	CrabCaestus,
	[Token(Token = "0x4000902")]
	TowerShield,
	[Token(Token = "0x4000903")]
	CrabMallet,
	[Token(Token = "0x4000904")]
	ThrowingShield,
	[Token(Token = "0x4000905")]
	Kitana,
	[Token(Token = "0x4000906")]
	BaseballBat,
	[Token(Token = "0x4000907")]
	Tomahawk,
	[Token(Token = "0x4000908")]
	GoldenArrow,
	[Token(Token = "0x4000909")]
	Gun
}
[Token(Token = "0x20000D1")]
public enum PlayerUnlock
{
	[Token(Token = "0x400090B")]
	Motion,
	[Token(Token = "0x400090C")]
	SecondWeapon,
	[Token(Token = "0x400090D")]
	CarryWeapon,
	[Token(Token = "0x400090E")]
	GrabEnemies
}
[Token(Token = "0x20000D2")]
public enum PlayerRank
{
	[Token(Token = "0x4000910")]
	PeasantSlave,
	[Token(Token = "0x4000911")]
	Slave,
	[Token(Token = "0x4000912")]
	Peasant,
	[Token(Token = "0x4000913")]
	Initiate,
	[Token(Token = "0x4000914")]
	Trainee,
	[Token(Token = "0x4000915")]
	Combatant,
	[Token(Token = "0x4000916")]
	Gladiator,
	[Token(Token = "0x4000917")]
	MasterGladiator,
	[Token(Token = "0x4000918")]
	LordOfArena,
	[Token(Token = "0x4000919")]
	ColosseumHero,
	[Token(Token = "0x400091A")]
	FightingLegend,
	[Token(Token = "0x400091B")]
	ChampionOfRome,
	[Token(Token = "0x400091C")]
	GodOfWar,
	[Token(Token = "0x400091D")]
	Rank13
}
[Serializable]
[Token(Token = "0x20000D3")]
public class StyleActionCount
{
	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public StyleAction styleAction;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int count;

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x884AFC", Offset = "0x884AFC", VA = "0x884AFC")]
	public StyleActionCount()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D4")]
public class CampaignTimeScore
{
	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string campaignName;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x8899B4", Offset = "0x8899B4", VA = "0x8899B4")]
	public CampaignTimeScore()
	{
	}
}
[Serializable]
[Token(Token = "0x20000D5")]
public class PlayerProgress
{
	[Token(Token = "0x4000922")]
	private const uint BinMapVersion = 3206840012u;

	[Token(Token = "0x4000923")]
	private const uint Version1 = 3206840010u;

	[Token(Token = "0x4000924")]
	private const uint Version2 = 3206840011u;

	[Token(Token = "0x4000925")]
	private const uint Version3 = 3206840012u;

	[Token(Token = "0x4000926")]
	private const byte NumFloors = 5;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int slotNumber;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int levelsBeaten;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hasFought;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool hasHeardFirstOdalbeDialogue;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool hasHeardFirstFloorCompletedDialogue;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool hasHeardSecondFloorCompletedDialogue;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool hasHeardThirdFloorCompletedDialogue;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int endlessTopScore;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<PlayerInventoryItem> inventory;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<string> completedCampaigns;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<string> perfectedCampaigns;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<string> masteredCampaigns;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<StyleActionCount> cumulativeStyleActions;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<PlayerWeaponUnlockProgress> weaponUnlockProgresses;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<PlayerInventoryItem> unlockedButUnseenWeapons;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<int> campaignTutorialsSeen;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<ChampionType> defeatedChampions;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool hasCompletedTutorial;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool[] floorsVisited;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[XmlIgnore]
	[Obsolete]
	public List<string> completedTrials;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[XmlIgnore]
	[Obsolete]
	public PlayerRank rank;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[XmlIgnore]
	[Obsolete]
	public List<RankObjective> objectivesCompletedThisRank;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[XmlIgnore]
	[Obsolete]
	public List<PlayerUnlock> unlocks;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Obsolete]
	[XmlIgnore]
	public List<TrialScore> trialScores;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Obsolete]
	[XmlIgnore]
	public List<ChampionUnlockProgress> championUnlockProgresses;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[XmlIgnore]
	[Obsolete]
	public string lastRoundSummary;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[XmlIgnore]
	[Obsolete]
	public string lastRankSummary;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[XmlIgnore]
	[Obsolete]
	public List<ChampionUnlock> unlockedChampions;

	[Token(Token = "0x170000AF")]
	public int RankInt
	{
		[Token(Token = "0x6000500")]
		[Address(RVA = "0x885D18", Offset = "0x885D18", VA = "0x885D18")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x883F7C", Offset = "0x883F7C", VA = "0x883F7C")]
	public PlayerProgress()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x8899BC", Offset = "0x8899BC", VA = "0x8899BC")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x889EA8", Offset = "0x889EA8", VA = "0x889EA8")]
	public bool Deserialize(BinaryReader reader)
	{
		return default(bool);
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x884EE4", Offset = "0x884EE4", VA = "0x884EE4")]
	public bool HaveCompletedTrial(string trialName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x88A414", Offset = "0x88A414", VA = "0x88A414")]
	public bool HaveCompletedCampaign(string trialName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000506")]
	private static void WriteList<TElement>(BinaryWriter writer, List<TElement> list, Action<TElement> action)
	{
	}

	[Token(Token = "0x6000507")]
	private static void ReadList<TElement>(BinaryReader reader, List<TElement> list, Func<TElement> function)
	{
	}
}
[Serializable]
[Token(Token = "0x20000D8")]
public class ShittyOptions
{
	[Token(Token = "0x4000945")]
	private const uint BinMapVersion = 3206840010u;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool upsideDown;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool badger;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool spookyMode;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool invulnerablePlayer;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool invulnerableEnemies;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool sortofFlightMode;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool royalRumble;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool enemyWeapons;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float playerSize;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float blood;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float gravity;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float headSize;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float knockBack;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float gameSpeed;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float enemySpeed;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float damageScale;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float enemyArmor;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float enemyAggression;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Arena arena;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public ChampionFrequency championFrequency;

	[Token(Token = "0x170000B0")]
	public float BloodMult
	{
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x88A830", Offset = "0x88A830", VA = "0x88A830")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B1")]
	public float HeadSizeMult
	{
		[Token(Token = "0x6000515")]
		[Address(RVA = "0x88A848", Offset = "0x88A848", VA = "0x88A848")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B2")]
	public float EnemyArmorMult
	{
		[Token(Token = "0x6000516")]
		[Address(RVA = "0x885EB4", Offset = "0x885EB4", VA = "0x885EB4")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B3")]
	public float KnockbackMult
	{
		[Token(Token = "0x6000517")]
		[Address(RVA = "0x88A864", Offset = "0x88A864", VA = "0x88A864")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B4")]
	public float DamageScaleMult
	{
		[Token(Token = "0x6000518")]
		[Address(RVA = "0x88A87C", Offset = "0x88A87C", VA = "0x88A87C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B5")]
	public float PlayerSizeMult
	{
		[Token(Token = "0x6000519")]
		[Address(RVA = "0x88A894", Offset = "0x88A894", VA = "0x88A894")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B6")]
	public float GravityMult
	{
		[Token(Token = "0x600051A")]
		[Address(RVA = "0x88A8B0", Offset = "0x88A8B0", VA = "0x88A8B0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B7")]
	public float GameSpeedMult
	{
		[Token(Token = "0x600051B")]
		[Address(RVA = "0x88A8CC", Offset = "0x88A8CC", VA = "0x88A8CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B8")]
	public float EnemySpeedMult
	{
		[Token(Token = "0x600051C")]
		[Address(RVA = "0x88A8E8", Offset = "0x88A8E8", VA = "0x88A8E8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000B9")]
	public float EnemyAggressionMult
	{
		[Token(Token = "0x600051D")]
		[Address(RVA = "0x886EBC", Offset = "0x886EBC", VA = "0x886EBC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x8885B4", Offset = "0x8885B4", VA = "0x8885B4")]
	public void Deserialize(BinaryReader reader)
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0x888B10", Offset = "0x888B10", VA = "0x888B10")]
	public void Serialize(BinaryWriter writer)
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x88A904", Offset = "0x88A904", VA = "0x88A904")]
	public static ShittyOptions CopyShittyOptions(ShittyOptions original)
	{
		return null;
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x887FE8", Offset = "0x887FE8", VA = "0x887FE8")]
	public ShittyOptions()
	{
	}
}
[Token(Token = "0x20000D9")]
public class TitleScreenController : MonoBehaviour
{
	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float titleTime;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform spotlight;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform lightStartPos;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform lightEndPos;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool haveStartedLoading;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float counter;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool canCount;

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x88A9A4", Offset = "0x88A9A4", VA = "0x88A9A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x88AA00", Offset = "0x88AA00", VA = "0x88AA00")]
	private void Update()
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0x88ABE0", Offset = "0x88ABE0", VA = "0x88ABE0")]
	public void StartCount()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0x88ABEC", Offset = "0x88ABEC", VA = "0x88ABEC")]
	public void StopCount()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x88ABF4", Offset = "0x88ABF4", VA = "0x88ABF4")]
	public TitleScreenController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000DA")]
public class Cutscene
{
	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CutscenePart[] parts;

	[Token(Token = "0x6000527")]
	[Address(RVA = "0x88AC14", Offset = "0x88AC14", VA = "0x88AC14")]
	public Cutscene()
	{
	}
}
[Serializable]
[Token(Token = "0x20000DB")]
public class CutscenePart
{
	[Token(Token = "0x20000DC")]
	public enum CompletionCriteria
	{
		[Token(Token = "0x4000969")]
		LookAtSign,
		[Token(Token = "0x400096A")]
		HoldTrigger,
		[Token(Token = "0x400096B")]
		Salute,
		[Token(Token = "0x400096C")]
		HoldWeapon,
		[Token(Token = "0x400096D")]
		HitHead,
		[Token(Token = "0x400096E")]
		CelebrateVictory,
		[Token(Token = "0x400096F")]
		UseLocomotion
	}

	[Token(Token = "0x20000DD")]
	public enum HeadAction
	{
		[Token(Token = "0x4000971")]
		Talk,
		[Token(Token = "0x4000972")]
		Laugh
	}

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string key;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea(3, 5)]
	[SerializeField]
	private string startText;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string text;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CompletionCriteria criteria;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public HeadAction headAction;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip audioClip;

	[Token(Token = "0x170000BA")]
	public string Text
	{
		[Token(Token = "0x6000528")]
		[Address(RVA = "0x88AC1C", Offset = "0x88AC1C", VA = "0x88AC1C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0x88AC80", Offset = "0x88AC80", VA = "0x88AC80")]
	public CutscenePart()
	{
	}
}
[Token(Token = "0x20000DE")]
public class TutorialController : MonoBehaviour
{
	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool[] haveCompletedTutorial;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NaziTalkingHead naziHead;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CutsceneDirectory cutsceneDirectory;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RTLTextMeshPro text;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RTCameraController cameraDirtyController;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Canvas canvas;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SkinnedMeshRenderer emperorScroll;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Cutscene currentCutscene;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CutscenePart currentPart;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int partIndex;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static TutorialController instance;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static bool isFinished;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int letterProgress;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float progressDelay;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float letterProgressDelay;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool debugPassCriteria;

	[Token(Token = "0x4000984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float currentClipProgressDelay;

	[Token(Token = "0x4000985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float saluteDelay;

	[Token(Token = "0x170000BB")]
	public static NaziTalkingHead emperor
	{
		[Token(Token = "0x600052A")]
		[Address(RVA = "0x88AC88", Offset = "0x88AC88", VA = "0x88AC88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0x88AD28", Offset = "0x88AD28", VA = "0x88AD28")]
	public static void StartVictoryCutscene(string trialName, bool perfect = false)
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0x88B7BC", Offset = "0x88B7BC", VA = "0x88B7BC")]
	public static void StartIntroCutscene(string trialName, bool perfect = false)
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0x88BCC0", Offset = "0x88BCC0", VA = "0x88BCC0")]
	public static void StartVictoryCutscene()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0x88BDF4", Offset = "0x88BDF4", VA = "0x88BDF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x88BF84", Offset = "0x88BF84", VA = "0x88BF84")]
	private void AdvanceCutscenePart()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x88C0B4", Offset = "0x88C0B4", VA = "0x88C0B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x88C708", Offset = "0x88C708", VA = "0x88C708")]
	internal static void AdvanceLetterProgress(ref int caretPosition, string animatingText)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x88B4F4", Offset = "0x88B4F4", VA = "0x88B4F4")]
	private void StartPart(CutscenePart part, float delay = 0.3f)
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x88C79C", Offset = "0x88C79C", VA = "0x88C79C")]
	private void SetText()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x88C3C8", Offset = "0x88C3C8", VA = "0x88C3C8")]
	private bool CheckCriteria(CutscenePart.CompletionCriteria criteria)
	{
		return default(bool);
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x88C990", Offset = "0x88C990", VA = "0x88C990")]
	public TutorialController()
	{
	}
}
[Token(Token = "0x20000DF")]
public class CrowdController : MonoBehaviour
{
	[Token(Token = "0x20000E0")]
	[CompilerGenerated]
	private sealed class <GivePlayerCoinShower>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <i>5__2;

		[Token(Token = "0x170000BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600054F")]
			[Address(RVA = "0x88E38C", Offset = "0x88E38C", VA = "0x88E38C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000551")]
			[Address(RVA = "0x88E3D4", Offset = "0x88E3D4", VA = "0x88E3D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x88DCD0", Offset = "0x88DCD0", VA = "0x88DCD0")]
		[DebuggerHidden]
		public <GivePlayerCoinShower>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x88E1C8", Offset = "0x88E1C8", VA = "0x88E1C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x88E1CC", Offset = "0x88E1CC", VA = "0x88E1CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x88E394", Offset = "0x88E394", VA = "0x88E394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000E1")]
	[CompilerGenerated]
	private sealed class <ConvertHeadsCoroutine>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CrowdController <>4__this;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000555")]
			[Address(RVA = "0x88E740", Offset = "0x88E740", VA = "0x88E740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000557")]
			[Address(RVA = "0x88E788", Offset = "0x88E788", VA = "0x88E788", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x88DFC4", Offset = "0x88DFC4", VA = "0x88DFC4")]
		[DebuggerHidden]
		public <ConvertHeadsCoroutine>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x88E3DC", Offset = "0x88E3DC", VA = "0x88E3DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x88E3E0", Offset = "0x88E3E0", VA = "0x88E3E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x88E748", Offset = "0x88E748", VA = "0x88E748", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PrefabHolder prefabHolder;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float laughProb;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool testLaugh;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[SerializeField]
	private bool testCheer;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float talkTimer;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float talkTimerMin;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float talkTimerMax;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool testGiveWeapon;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private WeaponType testGiveWeaponType;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private bool testConvertHeads;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[FormerlySerializedAs("ps4MaxCrowd")]
	private int tier1MaxCrowd;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int tier2MaxCrowd;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool testCoinShower;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<NaziTalkingHead> heads;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CrowdController instance;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float zapDelay;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timeSinceLastLaugh;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float moodValue;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float aggro;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float exciteValue;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float angryValue;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private IEnumerator angerRoutine;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private IEnumerator coinRoutine;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly DotNetRandomNumberGenerator numberGenerator;

	[Token(Token = "0x170000BC")]
	public static float ExciteValue
	{
		[Token(Token = "0x6000536")]
		[Address(RVA = "0x88C9A0", Offset = "0x88C9A0", VA = "0x88C9A0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x88CA3C", Offset = "0x88CA3C", VA = "0x88CA3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x88D148", Offset = "0x88D148", VA = "0x88D148")]
	public void LaughLight()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x88D354", Offset = "0x88D354", VA = "0x88D354")]
	public void Laugh()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0x88D378", Offset = "0x88D378", VA = "0x88D378")]
	public static void LaughDelayed(float delay)
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0x88D154", Offset = "0x88D154", VA = "0x88D154")]
	public static void Laugh(float probability)
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x88D3F4", Offset = "0x88D3F4", VA = "0x88D3F4")]
	public static void Cheer(float probability)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x88D5F8", Offset = "0x88D5F8", VA = "0x88D5F8")]
	public static void Boo(float probability)
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0x88D800", Offset = "0x88D800", VA = "0x88D800")]
	public static Transform GetRandomCrowdTransform()
	{
		return null;
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x88D8F4", Offset = "0x88D8F4", VA = "0x88D8F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0x88DA7C", Offset = "0x88DA7C", VA = "0x88DA7C")]
	public static void ResetLaughAndInsult()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0x88DAD0", Offset = "0x88DAD0", VA = "0x88DAD0")]
	public static float GetCurrentMood()
	{
		return default(float);
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0x88DB24", Offset = "0x88DB24", VA = "0x88DB24")]
	public static void AdjustMood(float change)
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0x88DBC8", Offset = "0x88DBC8", VA = "0x88DBC8")]
	public static void SetupCoinShower()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0x88DC70", Offset = "0x88DC70", VA = "0x88DC70")]
	[IteratorStateMachine(typeof(<GivePlayerCoinShower>d__39))]
	private static IEnumerator GivePlayerCoinShower()
	{
		return null;
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0x88DCF8", Offset = "0x88DCF8", VA = "0x88DCF8")]
	internal static void GivePlayerACoin()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0x88DDC0", Offset = "0x88DDC0", VA = "0x88DDC0")]
	internal static void GivePlayerAnArrow()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0x88DEEC", Offset = "0x88DEEC", VA = "0x88DEEC")]
	public static void ConvertAllCrowdHeadsToAngryCrowdHeads()
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0x88DF50", Offset = "0x88DF50", VA = "0x88DF50")]
	[IteratorStateMachine(typeof(<ConvertHeadsCoroutine>d__43))]
	private IEnumerator ConvertHeadsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0x88CE98", Offset = "0x88CE98", VA = "0x88CE98")]
	private void SetupShadowsInCrowdPrefabs()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x88DFEC", Offset = "0x88DFEC", VA = "0x88DFEC")]
	internal static void GivePlayerWeapon(WeaponType type, bool boo = false)
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x88E134", Offset = "0x88E134", VA = "0x88E134")]
	public CrowdController()
	{
	}
}
[Token(Token = "0x20000E2")]
public class CrowdPersonSeat : MonoBehaviour
{
	[Token(Token = "0x6000558")]
	[Address(RVA = "0x88E790", Offset = "0x88E790", VA = "0x88E790")]
	public CrowdPersonSeat()
	{
	}
}
[Token(Token = "0x20000E3")]
public class CutsceneDirectory : MonoBehaviour
{
	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<CutsceneScriptable> genericCutscenes;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<CutsceneScriptable> campaignCutscenes;

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x88ADFC", Offset = "0x88ADFC", VA = "0x88ADFC")]
	public Cutscene GetPerfectCutscene(string trialName)
	{
		return null;
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x88B1A0", Offset = "0x88B1A0", VA = "0x88B1A0")]
	public Cutscene GetVictoryCutscene(string trialName)
	{
		return null;
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x88B890", Offset = "0x88B890", VA = "0x88B890")]
	public Cutscene GetPerfectIntroCutscene(string trialName)
	{
		return null;
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x88BAC0", Offset = "0x88BAC0", VA = "0x88BAC0")]
	public Cutscene GetIntroCutscene(string trialName)
	{
		return null;
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x88BD74", Offset = "0x88BD74", VA = "0x88BD74")]
	public Cutscene GetDefaultVictoryCutscene()
	{
		return null;
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x88E798", Offset = "0x88E798", VA = "0x88E798")]
	public Cutscene GetDefaultIntroCutscene()
	{
		return null;
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x88E818", Offset = "0x88E818", VA = "0x88E818")]
	public CutsceneDirectory()
	{
	}
}
[Token(Token = "0x20000E4")]
public class DamageableTerrainChunk : MonoBehaviour
{
	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float health;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private bool detached;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private DamageableTerrainChunk[] parentChunks;

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string breakSound;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool haveEnabledColliders;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float detachCheckDelay;

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x88E820", Offset = "0x88E820", VA = "0x88E820")]
	private void Update()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x88E824", Offset = "0x88E824", VA = "0x88E824")]
	public void CheckDetachFromParent()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x88EE78", Offset = "0x88EE78", VA = "0x88EE78")]
	internal bool Damage(Collision col, Vector3 velocity, Vector3 damage)
	{
		return default(bool);
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x88E9B4", Offset = "0x88E9B4", VA = "0x88E9B4")]
	public void Detach(Vector3 force, Collision collision, bool playSound = true)
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x88EF68", Offset = "0x88EF68", VA = "0x88EF68")]
	public DamageableTerrainChunk()
	{
	}
}
[Token(Token = "0x20000E5")]
public class DespawnTracker : MonoBehaviour
{
	[Token(Token = "0x40009AD")]
	private const int MaxWeapons = 9;

	[Token(Token = "0x40009AE")]
	private const int MaxOther = 12;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int NumWeapons;

	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int NumOther;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float despawnDelay;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[FormerlySerializedAs("ps4DespawnDelay")]
	[SerializeField]
	private float tier1DespawnDelay;

	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[FormerlySerializedAs("ps4RetryDelay")]
	[SerializeField]
	private float tier1RetryDelay;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float tier2DespawnDelay;

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float tier2RetryDelay;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool counted;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float currentDespawnDelay;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool isWeapon;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isPaused;

	[Token(Token = "0x170000C1")]
	private float baseDespawnDelay
	{
		[Token(Token = "0x6000565")]
		[Address(RVA = "0x88EFCC", Offset = "0x88EFCC", VA = "0x88EFCC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x88EFE8", Offset = "0x88EFE8", VA = "0x88EFE8")]
	public void SetPause(bool pause, bool resetUnpause = true)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x88F018", Offset = "0x88F018", VA = "0x88F018", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x88F0D0", Offset = "0x88F0D0", VA = "0x88F0D0", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x88F0F0", Offset = "0x88F0F0", VA = "0x88F0F0", Slot = "6")]
	protected virtual void TrackElement()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x88F150", Offset = "0x88F150", VA = "0x88F150", Slot = "7")]
	protected virtual void UntrackElement()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x88F1B0", Offset = "0x88F1B0", VA = "0x88F1B0", Slot = "8")]
	protected virtual bool ExceedsMaximum()
	{
		return default(bool);
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0x88F220", Offset = "0x88F220", VA = "0x88F220", Slot = "9")]
	protected virtual bool CanDespawn()
	{
		return default(bool);
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x88F4A4", Offset = "0x88F4A4", VA = "0x88F4A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x88F514", Offset = "0x88F514", VA = "0x88F514")]
	protected void ReturnChildPoolables()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x88F860", Offset = "0x88F860", VA = "0x88F860", Slot = "10")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x88F87C", Offset = "0x88F87C", VA = "0x88F87C", Slot = "11")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x88F898", Offset = "0x88F898", VA = "0x88F898", Slot = "12")]
	public virtual void DespawnNow()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x88FA04", Offset = "0x88FA04", VA = "0x88FA04")]
	public DespawnTracker()
	{
	}
}
[Token(Token = "0x20000E6")]
public class DirectorCamera : MonoBehaviour
{
	[Token(Token = "0x20000E7")]
	public enum DirectorCameraMode
	{
		[Token(Token = "0x40009E3")]
		DirectorCamera,
		[Token(Token = "0x40009E4")]
		FirstPerson
	}

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DirectorCamera instance;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform followTransform;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform aimTarget;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ThirdpersonCamera thirdPersonCamera;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Camera camera;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool showGUI;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isPaused;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 lastMousePos;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<int> controllerIndices;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int selectedControllerDropdownIndex;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private InControl.InputDevice gamepadDevice;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private string[] cameraModeStrings;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 movementVelocity;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector2 rotationVelocity;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform highlightedTransform;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 followTransformPositionOffset;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector2 followTransformRotationOffset;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float timeBumpTimeScale;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float timeBumpDuration;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static bool dontFinishRound;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public static bool returnToDefaultTimeScale;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static int selectedControllerIndex;

	[Token(Token = "0x40009D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static DirectorCameraMode cameraMode;

	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static GameObject trackedExtraController;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static GameObject trackedExtraControllerContainer;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Transform dummyFollowTransform;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static Transform dummyFollowTransformInner;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static float cameraFollowSpeed;

	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static float cameraRotateSpeed;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static bool stabilizeCameraRoll;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private static bool useTracker;

	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private static float movementAcceleration;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static float movementDeceleration;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static float movementMaxSpeed;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static float gamepadRotationSpeedMultiplier;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private static float timeScale;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float cameraFollowDistance;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float cameraFOV;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static float cameraRigScale;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private static bool isShowingPlayer;

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x88FA20", Offset = "0x88FA20", VA = "0x88FA20")]
	public DirectorCamera()
	{
	}
}
[Token(Token = "0x20000E8")]
public class BloodDrop : MonoBehaviour, IPoolable
{
	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Vector3 velocity;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected float currentScale;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Vector3 startingScale;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float endScale;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float shrinkSpeed;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float bloodDrawRadius;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float timeToLive;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool dying;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected LayerMask bloodLayer;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float wallSprayDelay;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private BloodSprayableSurface lastBloodSurface;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private RaycastHit lastBloodSurfaceHit;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float lastBloodSurfaceSize;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool havePlayedSound;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool haveReflected;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float bloodDrawSize;

	[Token(Token = "0x170000C2")]
	public IPool Owner
	{
		[Token(Token = "0x6000575")]
		[Address(RVA = "0x88FAB8", Offset = "0x88FAB8", VA = "0x88FAB8", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000576")]
		[Address(RVA = "0x88FAC0", Offset = "0x88FAC0", VA = "0x88FAC0", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x88FAC8", Offset = "0x88FAC8", VA = "0x88FAC8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x88FB20", Offset = "0x88FB20", VA = "0x88FB20")]
	public void ReturnToPool()
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x88FC18", Offset = "0x88FC18", VA = "0x88FC18")]
	public void Init()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x88FC40", Offset = "0x88FC40", VA = "0x88FC40")]
	private void Start()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x88FCDC", Offset = "0x88FCDC", VA = "0x88FCDC")]
	public void Launch(Vector3 velocity)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x88FCE8", Offset = "0x88FCE8", VA = "0x88FCE8")]
	protected void SetAngle()
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x88FDA4", Offset = "0x88FDA4", VA = "0x88FDA4")]
	public void BloodUpdate(Vector3 velocityInc)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x89029C", Offset = "0x89029C", VA = "0x89029C")]
	public BloodDrop()
	{
	}
}
[Token(Token = "0x20000E9")]
public class BloodDropTitle : MonoBehaviour
{
	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float growToSize;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float startSize;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float growSpeed;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float gravity;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float currentSize;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float dropPauseDelay;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 velocity;

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x8902BC", Offset = "0x8902BC", VA = "0x8902BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x89034C", Offset = "0x89034C", VA = "0x89034C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x8904FC", Offset = "0x8904FC", VA = "0x8904FC")]
	public BloodDropTitle()
	{
	}
}
[Token(Token = "0x20000EA")]
public class BloodImpactSphere : MonoBehaviour
{
	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float life;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float startSize;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float endSize;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float alphaM;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 velocity;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TrailRenderer trailRenderer;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float counter;

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x890504", Offset = "0x890504", VA = "0x890504")]
	private void Update()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x89074C", Offset = "0x89074C", VA = "0x89074C")]
	public BloodImpactSphere()
	{
	}
}
[Token(Token = "0x20000EB")]
public class BloodPool : MonoBehaviour
{
	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float startScale;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float endScale;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float growSpeed;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected float currentScale;

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x890754", Offset = "0x890754", VA = "0x890754")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x890790", Offset = "0x890790", VA = "0x890790")]
	private void Update()
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x890810", Offset = "0x890810", VA = "0x890810")]
	public BloodPool()
	{
	}
}
[Token(Token = "0x20000EC")]
public class ChainAnimator : MonoBehaviour
{
	[Token(Token = "0x4000A09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform origin;

	[Token(Token = "0x4000A0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform end;

	[Token(Token = "0x4000A0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int midPoints;

	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float clampAngleTo;

	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Mesh mesh;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material material;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material tier2Material;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float linkLength;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float linkScale;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] pos;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Matrix4x4[] matrices;

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x890824", Offset = "0x890824", VA = "0x890824")]
	private void Start()
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x8908B4", Offset = "0x8908B4", VA = "0x8908B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x890F94", Offset = "0x890F94", VA = "0x890F94")]
	private Vector3 GetPointAt(float t, Vector3 topPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x891048", Offset = "0x891048", VA = "0x891048")]
	public ChainAnimator()
	{
	}
}
[Token(Token = "0x20000ED")]
public class FireParticle : MonoBehaviour
{
	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem system;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float suckStrength;

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x891058", Offset = "0x891058", VA = "0x891058")]
	private void Start()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x89111C", Offset = "0x89111C", VA = "0x89111C")]
	private void Update()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x891270", Offset = "0x891270", VA = "0x891270")]
	public FireParticle()
	{
	}
}
[Token(Token = "0x20000EE")]
public class FlameRiseEffect : MonoBehaviour, IPoolable
{
	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float counter;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float lifeTime;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float riseSpeed;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve flameXZOffset;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve flameScale;

	[Token(Token = "0x4000A1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 startingForward;

	[Token(Token = "0x4000A1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Gradient colorGradient;

	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer renderer;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform cacheTransform;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 startScale;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float baseLifeTime;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Color;

	[Token(Token = "0x170000C3")]
	public IPool Owner
	{
		[Token(Token = "0x600058E")]
		[Address(RVA = "0x891278", Offset = "0x891278", VA = "0x891278", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600058F")]
		[Address(RVA = "0x891280", Offset = "0x891280", VA = "0x891280", Slot = "5")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x891288", Offset = "0x891288", VA = "0x891288")]
	public void ResetEffect()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x891300", Offset = "0x891300", VA = "0x891300")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x891428", Offset = "0x891428", VA = "0x891428")]
	private void Update()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x891680", Offset = "0x891680", VA = "0x891680")]
	public FlameRiseEffect()
	{
	}
}
[Token(Token = "0x20000EF")]
public class Gib : MonoBehaviour
{
	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected float bloodTime;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected float bloodCounter;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float bloodRate;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool doNotAutodestruct;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody rigidbody;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool noBlood;

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x8916FC", Offset = "0x8916FC", VA = "0x8916FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x89179C", Offset = "0x89179C", VA = "0x89179C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x891A74", Offset = "0x891A74", VA = "0x891A74")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x891B10", Offset = "0x891B10", VA = "0x891B10")]
	public Gib()
	{
	}
}
[Token(Token = "0x20000F0")]
public class GibHolder : MonoBehaviour
{
	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float explosionForce;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float explosionRadius;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 hitForce;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 hitPoint;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform explosionCenterTransform;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float gibTrailProbability;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float timeToLive;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[FormerlySerializedAs("ps4timeToLive")]
	public float tier1TimeToLive;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float tier2TimeToLive;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[FormerlySerializedAs("ps4MaxGibCount")]
	public int tier1MaxGibCount;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int tier2MaxGibCount;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Gib[] gibs;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int gibLength;

	[Token(Token = "0x4000A38")]
	private const int NumberOfRandomizedArrays = 10;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[][] randomizedNumbers;

	[Token(Token = "0x170000C4")]
	private float TimeToLive
	{
		[Token(Token = "0x6000599")]
		[Address(RVA = "0x891B2C", Offset = "0x891B2C", VA = "0x891B2C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x891B34", Offset = "0x891B34", VA = "0x891B34")]
	public void ExplodeGibs()
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x891F3C", Offset = "0x891F3C", VA = "0x891F3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x8920DC", Offset = "0x8920DC", VA = "0x8920DC")]
	public GibHolder()
	{
	}
}
[Token(Token = "0x20000F1")]
public class GornBlur : PostEffectsBase
{
	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material mat;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float intensity;

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x892108", Offset = "0x892108", VA = "0x892108")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x89217C", Offset = "0x89217C", VA = "0x89217C", Slot = "4")]
	public override bool CheckResources()
	{
		return default(bool);
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0x892184", Offset = "0x892184", VA = "0x892184")]
	public GornBlur()
	{
	}
}
[Token(Token = "0x20000F2")]
public class GornColorTint : PostEffectsBase
{
	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material mat;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float intensity;

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x89218C", Offset = "0x89218C", VA = "0x89218C")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x892230", Offset = "0x892230", VA = "0x892230", Slot = "4")]
	public override bool CheckResources()
	{
		return default(bool);
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x892238", Offset = "0x892238", VA = "0x892238")]
	public GornColorTint()
	{
	}
}
[Token(Token = "0x20000F3")]
public class GornVignette : PostEffectsBase
{
	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material mat;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float intensity;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float colorTint;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int IntensityID;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int TintID;

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x892240", Offset = "0x892240", VA = "0x892240")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x8922B4", Offset = "0x8922B4", VA = "0x8922B4")]
	public void SetParams(float i, float c)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x89235C", Offset = "0x89235C", VA = "0x89235C", Slot = "4")]
	public override bool CheckResources()
	{
		return default(bool);
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x892364", Offset = "0x892364", VA = "0x892364", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x892370", Offset = "0x892370", VA = "0x892370")]
	public GornVignette()
	{
	}
}
[Token(Token = "0x20000F4")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform lookAtTransform;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool looking;

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x892414", Offset = "0x892414", VA = "0x892414")]
	private void Update()
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x892500", Offset = "0x892500", VA = "0x892500")]
	public LookAt()
	{
	}
}
[Token(Token = "0x20000F5")]
public class MeshBloodSpurter : MonoBehaviour
{
	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Mesh mesh;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SkinnedMeshRenderer meshRenderer;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PoolableParticleSystem bloodSpurtPoolable;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector3> verts;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 normalDirLocal;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 normalDirWorld;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float currentSpurtPower;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float spurtBatchCounter;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int spurtsLeft;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float spurtDropDelay;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform attachedTo;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int totalVerts;

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x892510", Offset = "0x892510", VA = "0x892510")]
	public void Awake()
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x8925E4", Offset = "0x8925E4", VA = "0x8925E4")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x892694", Offset = "0x892694", VA = "0x892694")]
	public void SetupBloodSpawn(Transform parent)
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x8929F8", Offset = "0x8929F8", VA = "0x8929F8")]
	public void SetUpParticleSystem()
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x892CD8", Offset = "0x892CD8", VA = "0x892CD8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x892CE4", Offset = "0x892CE4", VA = "0x892CE4")]
	public void Spurt()
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x892D80", Offset = "0x892D80", VA = "0x892D80")]
	private void Update()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x89309C", Offset = "0x89309C", VA = "0x89309C")]
	public MeshBloodSpurter()
	{
	}
}
[Token(Token = "0x20000F6")]
public class Particle3DRotation : MonoBehaviour
{
	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 rotationOffset;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSystem;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x89412C", Offset = "0x89412C", VA = "0x89412C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x894184", Offset = "0x894184", VA = "0x894184")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x894290", Offset = "0x894290", VA = "0x894290")]
	private void InitIfNeeded()
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x8943AC", Offset = "0x8943AC", VA = "0x8943AC")]
	public Particle3DRotation()
	{
	}
}
[Token(Token = "0x20000F7")]
public class PinataMaterialSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material pinataMaterial;

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x8943B4", Offset = "0x8943B4", VA = "0x8943B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x894430", Offset = "0x894430", VA = "0x894430")]
	public PinataMaterialSwitcher()
	{
	}
}
[Token(Token = "0x20000F8")]
public class ShatteredDoor : MonoBehaviour
{
	[Token(Token = "0x4000A55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 explosionCenter;

	[Token(Token = "0x4000A56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float explosionForce;

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float explosionRange;

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x894438", Offset = "0x894438", VA = "0x894438")]
	private void Start()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x8945A8", Offset = "0x8945A8", VA = "0x8945A8")]
	public ShatteredDoor()
	{
	}
}
[Token(Token = "0x20000F9")]
public class SpurtPainterObject : MonoBehaviour
{
	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform PaintChild;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float BlobSize;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float SquirtDuration;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float SquirtAngleJitter;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 lastPos;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float _ticker;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float squirtDistance;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float squirtFreq;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float squirtDelayLeft;

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x8945B0", Offset = "0x8945B0", VA = "0x8945B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x8945BC", Offset = "0x8945BC", VA = "0x8945BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x8949D4", Offset = "0x8949D4", VA = "0x8949D4")]
	public SpurtPainterObject()
	{
	}
}
[Token(Token = "0x20000FA")]
public class StunnedIndicator : MonoBehaviour
{
	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotSpeed;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float wobbleAmount;

	[Token(Token = "0x4000A63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float wobbleSpeed;

	[Token(Token = "0x4000A64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float starRotSpeed;

	[Token(Token = "0x4000A65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float wobbleCounter;

	[Token(Token = "0x4000A66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] stars;

	[Token(Token = "0x4000A67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TrailRenderer[] starTrailRenderers;

	[Token(Token = "0x4000A68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool showing;

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x8949FC", Offset = "0x8949FC", VA = "0x8949FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x894B20", Offset = "0x894B20", VA = "0x894B20")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x895014", Offset = "0x895014", VA = "0x895014")]
	public void Show()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x895040", Offset = "0x895040", VA = "0x895040")]
	public void Hide()
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x895130", Offset = "0x895130", VA = "0x895130")]
	public StunnedIndicator()
	{
	}
}
[Token(Token = "0x20000FB")]
public class TorchFlameEmitter : MonoBehaviour
{
	[Token(Token = "0x4000A69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FlameRiseEffect flameEffectPrefab;

	[Token(Token = "0x4000A6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float spawnRotationIncrement;

	[Token(Token = "0x4000A6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float spawnRotation;

	[Token(Token = "0x4000A6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float flameRate;

	[Token(Token = "0x4000A6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float counter;

	[Token(Token = "0x4000A6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AutoComponentPrefabPool<FlameRiseEffect> pool;

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x895138", Offset = "0x895138", VA = "0x895138")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0x89524C", Offset = "0x89524C", VA = "0x89524C")]
	private void ResetPoolable(FlameRiseEffect flameRiseEffect)
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x895264", Offset = "0x895264", VA = "0x895264")]
	private void Init(FlameRiseEffect flameRiseEffect)
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x895288", Offset = "0x895288", VA = "0x895288")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x895294", Offset = "0x895294", VA = "0x895294")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x895314", Offset = "0x895314", VA = "0x895314")]
	private void SpawnFlameEffect()
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x8953C8", Offset = "0x8953C8", VA = "0x8953C8")]
	public TorchFlameEmitter()
	{
	}
}
[Token(Token = "0x20000FC")]
public class WeaponBlood : MonoBehaviour
{
	[Token(Token = "0x20000FD")]
	private class SplatterInfo
	{
		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Vector3> pos;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float size;

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x896D38", Offset = "0x896D38", VA = "0x896D38")]
		public SplatterInfo(string name)
		{
		}
	}

	[Token(Token = "0x4000A6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector4 ClearVector;

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float SplatterScaleFactor;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Mesh> weaponMeshes;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Material> materials;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer[] meshRenderers;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SkinnedMeshRenderer[] skinnedMeshesRenderers;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform velocityTrackTransform;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 lastTransformPosition;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float testSprayAmount;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool noDrips;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SplatterInfo[] splatters;

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x8953E4", Offset = "0x8953E4", VA = "0x8953E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x89601C", Offset = "0x89601C", VA = "0x89601C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x8964EC", Offset = "0x8964EC", VA = "0x8964EC")]
	public void SplatterWeapon(Vector3 position, float size)
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x8967CC", Offset = "0x8967CC", VA = "0x8967CC")]
	private void SetSplatterMaterial(SplatterInfo info)
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x895B10", Offset = "0x895B10", VA = "0x895B10")]
	private void SaveObjPosToUV()
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x895CEC", Offset = "0x895CEC", VA = "0x895CEC")]
	public void ResetSplatterPatterns()
	{
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x896ADC", Offset = "0x896ADC", VA = "0x896ADC")]
	private Vector3 PosedWorldSpaceToLocalMeshSpace(Vector3 worldSpacePos, SkinnedMeshRenderer skin)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x896DDC", Offset = "0x896DDC", VA = "0x896DDC")]
	public WeaponBlood()
	{
	}
}
[Serializable]
[Token(Token = "0x20000FE")]
public class EndOfRoundFanfareDisplayInfo
{
	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<PlayerInventoryItem> unlockedItems;

	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool playerVictory;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool campaignFinished;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool campaignPerfected;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool campaignMastered;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float campaignTime;

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x896E3C", Offset = "0x896E3C", VA = "0x896E3C")]
	public EndOfRoundFanfareDisplayInfo()
	{
	}
}
[Token(Token = "0x20000FF")]
public class EnemySpawner : MonoBehaviour
{
	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PrefabHolder prefabHolder;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EnemySetupInfoHolder shoulderLackeyESIHolder;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Queue<EnemySetupInfo> enemiesToPool;

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<int, Dictionary<int, AutoComponentPrefabPool<Poolable>>> armorPool;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AutoComponentPrefabPool<Enemy> enemiesPool;

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0x896EC4", Offset = "0x896EC4", VA = "0x896EC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0x896F5C", Offset = "0x896F5C", VA = "0x896F5C")]
	private void SetupArmorPool()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0x8971B0", Offset = "0x8971B0", VA = "0x8971B0")]
	private ArmorPiece GetArmorFromPool(EnemyArmorPieceType enemyArmorPieceType, ArmorType armorType)
	{
		return null;
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0x897338", Offset = "0x897338", VA = "0x897338")]
	private Enemy GetEnemyFromPool(Vector3 position, Quaternion rotation, float scale)
	{
		return null;
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0x897448", Offset = "0x897448", VA = "0x897448")]
	public Enemy SpawnEnemy(EnemySetupInfo esi, Vector3 pos, Quaternion rot, EnemyAI isLackeyFor)
	{
		return null;
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x89832C", Offset = "0x89832C", VA = "0x89832C")]
	private void SetupHemlet(EnemySetupInfo esi, EnemyAI isLackeyFor, Crab crab, Enemy enemy)
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0x898720", Offset = "0x898720", VA = "0x898720")]
	private void SetupLeftBracer(EnemySetupInfo esi, Enemy enemy)
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x8985E4", Offset = "0x8985E4", VA = "0x8985E4")]
	private void SetupArmor(EnemySetupInfo esi, Enemy enemy, EnemyArmorPieceType armorType, bool assignArmorPiece = true)
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x898870", Offset = "0x898870", VA = "0x898870")]
	private static SeverableLimb ArmorTypeToLimb(Enemy enemy, EnemyArmorPieceType armorType)
	{
		return null;
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x898960", Offset = "0x898960", VA = "0x898960")]
	public Enemy SpawnEnemy(EnemySetupInfo esi, Transform spawn, EnemyAI isLackeyFor, bool ignorePool = false)
	{
		return null;
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x898A14", Offset = "0x898A14", VA = "0x898A14")]
	public EnemySpawner()
	{
	}
}
[Token(Token = "0x2000100")]
public class FootStepSound : MonoBehaviour
{
	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string soundEffectName;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float dustPuffSizeMod;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float minVolumeToTrigger;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float velocityToSizeM;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float lastFootstepTime;

	[Token(Token = "0x4000A8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int groundLayerMask;

	[Token(Token = "0x4000A8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float initialVelocityToSizeM;

	[Token(Token = "0x170000C5")]
	public float VelocityToSizeM
	{
		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x898A9C", Offset = "0x898A9C", VA = "0x898A9C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x898AA4", Offset = "0x898AA4", VA = "0x898AA4")]
		set
		{
		}
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0x898AAC", Offset = "0x898AAC", VA = "0x898AAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x898B00", Offset = "0x898B00", VA = "0x898B00")]
	protected void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x898D58", Offset = "0x898D58", VA = "0x898D58")]
	public void ResetForPooling()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0x898D64", Offset = "0x898D64", VA = "0x898D64")]
	public FootStepSound()
	{
	}
}
[Token(Token = "0x2000101")]
public class GazeTrigger : MonoBehaviour
{
	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject objectToNotify;

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x898D84", Offset = "0x898D84", VA = "0x898D84")]
	public void OnGazeEnter()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x898DE0", Offset = "0x898DE0", VA = "0x898DE0")]
	public void OnGazeExit()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x898E3C", Offset = "0x898E3C", VA = "0x898E3C")]
	public GazeTrigger()
	{
	}
}
[Token(Token = "0x2000102")]
public class GongImp : MonoBehaviour
{
	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x898E44", Offset = "0x898E44", VA = "0x898E44")]
	public void HitGong()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x898EC4", Offset = "0x898EC4", VA = "0x898EC4")]
	private void RingGong()
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x898ECC", Offset = "0x898ECC", VA = "0x898ECC")]
	public GongImp()
	{
	}
}
[Token(Token = "0x2000103")]
public class Grabbable : MonoBehaviour
{
	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer meshRenderer;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody grabRigidbody;

	[Token(Token = "0x4000A93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool setRotationOnGrab;

	[Token(Token = "0x4000A94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool setPositionOnGrab;

	[Token(Token = "0x4000A95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool grabWobbly;

	[Token(Token = "0x4000A96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool bonusDamping;

	[Token(Token = "0x4000A97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool kinematicGrab;

	[Token(Token = "0x4000A98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GrabHand grabbedBy;

	[Token(Token = "0x4000A99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool hideHandModelOnGrab;

	[Token(Token = "0x4000A9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform grabOrientTransform;

	[Token(Token = "0x4000A9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform grabOrientTransformLeftHand;

	[Token(Token = "0x4000A9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Fist cantBeGrabbedBy;

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string grabSoundName;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool doNotLockRotation;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool doNotLockPosition;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool isBackHandGrip;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool isFrontHandGrip;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool isLimb;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[FormerlySerializedAs("isCurrentlyGrabbale")]
	public bool isCurrentlyGrabbable;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool grabbableByFist;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float lastGrabbedTime;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float wobblyMaxForce;

	[Token(Token = "0x170000C6")]
	public SeverableLimb SeverableLimb
	{
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x898ED4", Offset = "0x898ED4", VA = "0x898ED4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x898EDC", Offset = "0x898EDC", VA = "0x898EDC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000C7")]
	public virtual DamagerRigidbody DamagerRigidbody
	{
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x898EE4", Offset = "0x898EE4", VA = "0x898EE4", Slot = "4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x898EEC", Offset = "0x898EEC", VA = "0x898EEC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000C8")]
	public virtual bool IsTelekineticallyGrabbable
	{
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x898EF4", Offset = "0x898EF4", VA = "0x898EF4", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000C9")]
	public bool IsGrabbed
	{
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x898F04", Offset = "0x898F04", VA = "0x898F04")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x898EFC", Offset = "0x898EFC", VA = "0x898EFC", Slot = "6")]
	public virtual WeaponType GetHeldWeaponType()
	{
		return default(WeaponType);
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x898F64", Offset = "0x898F64", VA = "0x898F64", Slot = "7")]
	public virtual void PrepareForTelekineticPull()
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x898F68", Offset = "0x898F68", VA = "0x898F68", Slot = "8")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x898F8C", Offset = "0x898F8C", VA = "0x898F8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x899098", Offset = "0x899098", VA = "0x899098")]
	public void ResetForPool(bool resetGrabbable)
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x899130", Offset = "0x899130", VA = "0x899130", Slot = "9")]
	public virtual void Grabbed(GrabHand hand)
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x89927C", Offset = "0x89927C", VA = "0x89927C", Slot = "10")]
	public virtual void LetGo(GrabHand hand)
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x8990AC", Offset = "0x8990AC", VA = "0x8990AC")]
	public void ForceLetGo()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x899288", Offset = "0x899288", VA = "0x899288")]
	public void Highlight()
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0x89928C", Offset = "0x89928C", VA = "0x89928C")]
	public void StopHighlighting()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0x899290", Offset = "0x899290", VA = "0x899290")]
	public bool HasSameWielderAs(Grabbable other)
	{
		return default(bool);
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0x899354", Offset = "0x899354", VA = "0x899354")]
	public Grabbable()
	{
	}
}
[Token(Token = "0x2000104")]
public class GrappleAnimator : MonoBehaviour
{
	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Grapple grapple;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform[] turnTransforms;

	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform[] inverseTurnTransforms;

	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float grappleToTurnRatio;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float inverseRatio;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Mesh chainMesh;

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material chainMaterial;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float linkDistance;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform chainOrigin;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float chainLinkScale;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float lastDist;

	[Token(Token = "0x4000AB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform myTransform;

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0x899364", Offset = "0x899364", VA = "0x899364")]
	private void Start()
	{
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x899388", Offset = "0x899388", VA = "0x899388")]
	private void Update()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x89988C", Offset = "0x89988C", VA = "0x89988C")]
	public GrappleAnimator()
	{
	}
}
[Token(Token = "0x2000105")]
public class GroupAIController : MonoBehaviour
{
	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<EnemyAI> ais;

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<CrabAI> crabs;

	[Token(Token = "0x4000AB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<AngryCrowdPerson> angryCrowdPeople;

	[Token(Token = "0x4000AB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string testSpeak;

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Head.Expression testExpression;

	[Token(Token = "0x4000ABA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool sayTestThing;

	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool sayTestThingQueued;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	public bool isRoyalRumble;

	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	public bool includePlayer;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly HashSet<string> specialResponsesUsed;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float lastBowFireTime;

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float thinkDelay;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool engagementIncreased;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int nextAssignedPlayer;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int angryCrowdHeadAttackDelay;

	[Token(Token = "0x170000CA")]
	public static List<AngryCrowdPerson> AngryCrowdPeople
	{
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x89989C", Offset = "0x89989C", VA = "0x89989C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CB")]
	public static int MaxEngagements
	{
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x899AD4", Offset = "0x899AD4", VA = "0x899AD4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000CC")]
	public static GroupAIController instance
	{
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x899BD8", Offset = "0x899BD8", VA = "0x899BD8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x899C20", Offset = "0x899C20", VA = "0x899C20")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x8998E8", Offset = "0x8998E8", VA = "0x8998E8")]
	public static bool CanFireArrow()
	{
		return default(bool);
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x89999C", Offset = "0x89999C", VA = "0x89999C")]
	public static void NotifyArrowFired()
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0x8999F0", Offset = "0x8999F0", VA = "0x8999F0")]
	public static void RegisterAngryCrowdPerson(AngryCrowdPerson person)
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0x899C78", Offset = "0x899C78", VA = "0x899C78")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x899FBC", Offset = "0x899FBC", VA = "0x899FBC")]
	public static void TemporarilyIncreaseEngagement()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x89A040", Offset = "0x89A040", VA = "0x89A040")]
	private void ResetEngagements()
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x89A048", Offset = "0x89A048", VA = "0x89A048")]
	public static AITargetable GetClosestTargetable(Vector3 point, bool includePlayer = true, [Optional] AITargetable exclude)
	{
		return null;
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x89A6D0", Offset = "0x89A6D0", VA = "0x89A6D0")]
	private void ConsiderSpeaking()
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0x89B3C0", Offset = "0x89B3C0", VA = "0x89B3C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0x89E364", Offset = "0x89E364", VA = "0x89E364")]
	public static void ThinkNextFrame()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0x89E3B0", Offset = "0x89E3B0", VA = "0x89E3B0")]
	public static bool SomeoneInsult()
	{
		return default(bool);
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x89E668", Offset = "0x89E668", VA = "0x89E668")]
	public void FleeAllAngryCrowdHeads()
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0x89D9CC", Offset = "0x89D9CC", VA = "0x89D9CC")]
	private void RunAngryCrowdHeads()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0x89E7B0", Offset = "0x89E7B0", VA = "0x89E7B0")]
	public static bool HasSpecialResponseBeenUsed(string clip)
	{
		return default(bool);
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0x89E83C", Offset = "0x89E83C", VA = "0x89E83C")]
	public static void SpecialReponseWasUsed(string clip)
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x89A974", Offset = "0x89A974", VA = "0x89A974")]
	public static bool SomeoneSay(string clip, Head.Expression expression, float probability = 1f, bool allowRepeat = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x89DE64", Offset = "0x89DE64", VA = "0x89DE64")]
	public static void SpookAllEnemies()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x89E92C", Offset = "0x89E92C", VA = "0x89E92C")]
	public static void NotifyPointOfInterest(Vector3 pos, float interestingness = 0.75f, float time = 3f)
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x89EB50", Offset = "0x89EB50", VA = "0x89EB50")]
	public static void NotifyInterestingTransform(Transform transform, float interestingness = 0.85f, float time = 3f)
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x89B060", Offset = "0x89B060", VA = "0x89B060")]
	public static void EveryoneSay(string clip, Head.Expression expression, bool allowRepeat = true)
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x89D64C", Offset = "0x89D64C", VA = "0x89D64C")]
	public static void EveryoneQueue(string clip, Head.Expression expression, bool allowRepeat = true)
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0x899DEC", Offset = "0x899DEC", VA = "0x899DEC")]
	public void AddAI(EnemyAI ai)
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0x899ED4", Offset = "0x899ED4", VA = "0x899ED4")]
	public void AddCrabAI(CrabAI ai)
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x89E5B0", Offset = "0x89E5B0", VA = "0x89E5B0")]
	private static bool TryGetCollectionCount(ICollection list, out int count)
	{
		return default(bool);
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0x89ED50", Offset = "0x89ED50", VA = "0x89ED50")]
	public GroupAIController()
	{
	}
}
[Token(Token = "0x2000108")]
public class SurpriseBox : BreakableProp
{
	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float autoDestruct;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MeshRenderer boxMesh;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool haveSpawned;

	[Token(Token = "0x170000CD")]
	public PlayerInventoryItem SurpriseType
	{
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x89F10C", Offset = "0x89F10C", VA = "0x89F10C")]
		[CompilerGenerated]
		private get
		{
			return default(PlayerInventoryItem);
		}
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x89F114", Offset = "0x89F114", VA = "0x89F114")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x89F11C", Offset = "0x89F11C", VA = "0x89F11C", Slot = "4")]
	protected override void Break(Vector3 pos, float force)
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x89F2F0", Offset = "0x89F2F0", VA = "0x89F2F0")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x89F168", Offset = "0x89F168", VA = "0x89F168")]
	private void SpawnSurprise()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x89F35C", Offset = "0x89F35C", VA = "0x89F35C")]
	public void HideBoxMesh()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x89F3E4", Offset = "0x89F3E4", VA = "0x89F3E4")]
	public void ShowBoxMesh()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x89F46C", Offset = "0x89F46C", VA = "0x89F46C")]
	public void SetDestructTime(float time)
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x89F474", Offset = "0x89F474", VA = "0x89F474")]
	public SurpriseBox()
	{
	}
}
[Token(Token = "0x2000109")]
public class KillCam : MonoBehaviour
{
	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RenderTexture renderTexture;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material imageEffectMaterial;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Renderer killCamScroll;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool debugFollow;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Enemy debugFollowTarget;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool pauseOnKilllShot;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Camera camera;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer victimRenderer;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer killerRenderer;

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x89F484", Offset = "0x89F484", VA = "0x89F484")]
	private void Awake()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x89F4DC", Offset = "0x89F4DC", VA = "0x89F4DC")]
	public void Update()
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x89FDAC", Offset = "0x89FDAC", VA = "0x89FDAC")]
	private void TakeShotNow()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0x89FF88", Offset = "0x89FF88", VA = "0x89FF88")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0x89FFF8", Offset = "0x89FFF8", VA = "0x89FFF8")]
	private void ButtonWasPressed(object button)
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0x8A02B4", Offset = "0x8A02B4", VA = "0x8A02B4")]
	public void TakeKillShot(Renderer victimBounds, Renderer killerBounds)
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0x89F814", Offset = "0x89F814", VA = "0x89F814")]
	public void PositionCamera(Bounds deadGuyPos, Bounds killedByPos)
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0x8A0348", Offset = "0x8A0348", VA = "0x8A0348")]
	public KillCam()
	{
	}
}
[Token(Token = "0x200010A")]
public class MobilityCaestusAnim : MonoBehaviour
{
	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator anim;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float lerpToSpeed;

	[Token(Token = "0x6000635")]
	[Address(RVA = "0x8A0350", Offset = "0x8A0350", VA = "0x8A0350")]
	private void Start()
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0x8A03A8", Offset = "0x8A03A8", VA = "0x8A03A8")]
	public void SetSpeed(float speed)
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0x8A03B0", Offset = "0x8A03B0", VA = "0x8A03B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0x8A0428", Offset = "0x8A0428", VA = "0x8A0428")]
	public MobilityCaestusAnim()
	{
	}
}
[Token(Token = "0x200010B")]
public class NaziTalkingHead : MonoBehaviour
{
	[Token(Token = "0x200010C")]
	[CompilerGenerated]
	private sealed class <ThrowWeapon>d__63 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NaziTalkingHead <>4__this;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WeaponType item;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform throwAt;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WeaponBase <weapon>5__2;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <grabRigidbody>5__3;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform <oldParent>5__4;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <invSpeed>5__5;

		[Token(Token = "0x170000D1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000652")]
			[Address(RVA = "0x8A2A28", Offset = "0x8A2A28", VA = "0x8A2A28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000654")]
			[Address(RVA = "0x8A2A70", Offset = "0x8A2A70", VA = "0x8A2A70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x8A0C54", Offset = "0x8A0C54", VA = "0x8A0C54")]
		[DebuggerHidden]
		public <ThrowWeapon>d__63(int <>1__state)
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x8A2484", Offset = "0x8A2484", VA = "0x8A2484", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x8A2488", Offset = "0x8A2488", VA = "0x8A2488", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x8A2A30", Offset = "0x8A2A30", VA = "0x8A2A30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010D")]
	[CompilerGenerated]
	private sealed class <ThrowCoin>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NaziTalkingHead <>4__this;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform throwAt;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <coin>5__2;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <speedMod>5__3;

		[Token(Token = "0x170000D3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000658")]
			[Address(RVA = "0x8A2FC8", Offset = "0x8A2FC8", VA = "0x8A2FC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600065A")]
			[Address(RVA = "0x8A3010", Offset = "0x8A3010", VA = "0x8A3010", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x8A0C7C", Offset = "0x8A0C7C", VA = "0x8A0C7C")]
		[DebuggerHidden]
		public <ThrowCoin>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x8A2A78", Offset = "0x8A2A78", VA = "0x8A2A78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x8A2A7C", Offset = "0x8A2A7C", VA = "0x8A2A7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x8A2FD0", Offset = "0x8A2FD0", VA = "0x8A2FD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform jaw;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform head;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 lookRotationAxis;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 lookRotationFix;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Animator animator;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform leftEye;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform rightEye;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 talkJawOffset;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float jawMovementMultiplier;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool testThrow;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool wasHit;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool isMainHead;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	public bool isTalking;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool isLaughing;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float talkTime;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float laughOffset;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float maxJawOffset;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public PrefabHolder prefabHolder;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform throwSpawnTransform;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool isThrowing;

	[Token(Token = "0x4000AEC")]
	private const float DbValueOffset = 30f;

	[Token(Token = "0x4000AED")]
	private const float DbValueTalkingScale = 50f;

	[Token(Token = "0x4000AEE")]
	private const float DbValueLaughingScale = 20f;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int Speaking;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 eyeTwitchOffset;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 leftEyeTwitchOffset;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3 rightEyeTwitchOffset;

	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float eyeTwitchDelay;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool leftEyeTwitch;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool rightEyeTwitch;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 rightEyeSkew;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 leftEyeSkew;

	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float jawMoveDelay;

	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float jawMoveSpeed;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Vector3 jawMoveOffset;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float laughTime;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private AudioSource audioSource;

	[Token(Token = "0x4000AFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float focusSwitchDelay;

	[Token(Token = "0x4000AFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Transform focusTransform;

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float timeOffset;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private Vector3 basePos;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Vector3 defaultJawPos;

	[Token(Token = "0x4000B03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private Vector3 defaultJawLocalPos;

	[Token(Token = "0x4000B04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Transform playerHead;

	[Token(Token = "0x4000B05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool isLeftEye;

	[Token(Token = "0x4000B06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private SoundController.AudioDataCache cachedDbValues;

	[Token(Token = "0x170000CE")]
	public bool IsAudioPlaying
	{
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x8A0430", Offset = "0x8A0430", VA = "0x8A0430")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000CF")]
	public bool TutorialIsActive
	{
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x8A044C", Offset = "0x8A044C", VA = "0x8A044C")]
		set
		{
		}
	}

	[Token(Token = "0x170000D0")]
	public IHeadVariationController VariationController
	{
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x8A04CC", Offset = "0x8A04CC", VA = "0x8A04CC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x8A04D4", Offset = "0x8A04D4", VA = "0x8A04D4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0x8A04DC", Offset = "0x8A04DC", VA = "0x8A04DC")]
	public void AnimateTalk()
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0x8A04E8", Offset = "0x8A04E8", VA = "0x8A04E8")]
	public void Laugh()
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0x8A0648", Offset = "0x8A0648", VA = "0x8A0648")]
	public void Cheer()
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x8A07A0", Offset = "0x8A07A0", VA = "0x8A07A0")]
	public void SpeakLine(AudioClip clip)
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x8A0800", Offset = "0x8A0800", VA = "0x8A0800")]
	public void Boo()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x8A0958", Offset = "0x8A0958", VA = "0x8A0958")]
	public void Laugh(bool delay)
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x8A09F0", Offset = "0x8A09F0", VA = "0x8A09F0")]
	public void ThrowCoinAt(Transform transform)
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x8A0AB8", Offset = "0x8A0AB8", VA = "0x8A0AB8")]
	public void ThrowArrowAt(Transform transform)
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x8A0C1C", Offset = "0x8A0C1C", VA = "0x8A0C1C")]
	public void ThrowWeaponAt(Transform transform, WeaponType type, bool boo = false)
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x8A0B84", Offset = "0x8A0B84", VA = "0x8A0B84")]
	[IteratorStateMachine(typeof(<ThrowWeapon>d__63))]
	private IEnumerator ThrowWeapon(Transform throwAt, WeaponType item)
	{
		return null;
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x8A0A28", Offset = "0x8A0A28", VA = "0x8A0A28")]
	[IteratorStateMachine(typeof(<ThrowCoin>d__64))]
	private IEnumerator ThrowCoin(Transform throwAt)
	{
		return null;
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x8A0CA4", Offset = "0x8A0CA4", VA = "0x8A0CA4")]
	public void Mumble(Transform mumbleAt, bool excited = false)
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x8A0F14", Offset = "0x8A0F14", VA = "0x8A0F14")]
	public void Idle()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x8A0F4C", Offset = "0x8A0F4C", VA = "0x8A0F4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x8A12EC", Offset = "0x8A12EC", VA = "0x8A12EC", Slot = "4")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x8A2224", Offset = "0x8A2224", VA = "0x8A2224")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x8A239C", Offset = "0x8A239C", VA = "0x8A239C")]
	public NaziTalkingHead()
	{
	}
}
[Serializable]
[Token(Token = "0x200010E")]
public class ObjectiveInfo
{
	[Token(Token = "0x200010F")]
	public enum Type
	{
		[Token(Token = "0x4000B1B")]
		StyleAction,
		[Token(Token = "0x4000B1C")]
		Survive,
		[Token(Token = "0x4000B1D")]
		Combo,
		[Token(Token = "0x4000B1E")]
		StyleActionVariety,
		[Token(Token = "0x4000B1F")]
		SmashEnemies,
		[Token(Token = "0x4000B20")]
		SwordSkill
	}

	[Token(Token = "0x4000B16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Type type;

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public StyleAction styleAction;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int amount;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeOut;

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x8A3018", Offset = "0x8A3018", VA = "0x8A3018", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x8A3080", Offset = "0x8A3080", VA = "0x8A3080")]
	public static string GetPromotionalBlurb(Type type)
	{
		return null;
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x8A3114", Offset = "0x8A3114", VA = "0x8A3114")]
	public ObjectiveInfo()
	{
	}
}
[Token(Token = "0x2000110")]
public class Objective
{
	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int progressI;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float startTime;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool initialized;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<StyleAction> uniqueActions;

	[Token(Token = "0x170000D5")]
	public ObjectiveInfo info
	{
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x8A311C", Offset = "0x8A311C", VA = "0x8A311C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x8A3124", Offset = "0x8A3124", VA = "0x8A3124")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000D6")]
	public virtual bool IsComplete
	{
		[Token(Token = "0x6000661")]
		[Address(RVA = "0x8A315C", Offset = "0x8A315C", VA = "0x8A315C", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D7")]
	public float ComboTimeLeft
	{
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x8A3A0C", Offset = "0x8A3A0C", VA = "0x8A3A0C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x8A312C", Offset = "0x8A312C", VA = "0x8A312C")]
	public Objective(ObjectiveInfo info)
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x8A31D0", Offset = "0x8A31D0", VA = "0x8A31D0", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x8A3A68", Offset = "0x8A3A68", VA = "0x8A3A68")]
	public void Update()
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x8A3AC8", Offset = "0x8A3AC8", VA = "0x8A3AC8")]
	public void Initialize()
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x8A3B70", Offset = "0x8A3B70", VA = "0x8A3B70")]
	public void RegisterStyleAction(StyleAction act)
	{
	}
}
[Token(Token = "0x2000111")]
public class OculusPlatformEntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool doTest;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Quit app on Entitlement Check Fail")]
	public bool quitOnFail;

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x8A3D2C", Offset = "0x8A3D2C", VA = "0x8A3D2C")]
	public OculusPlatformEntitlementCheck()
	{
	}
}
[Token(Token = "0x2000112")]
public class Controller : MonoBehaviour
{
	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform fingertip;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject controllerModel;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Fist fist;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 oculusRHOffset;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 oculusLHOffset;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text textDisplay;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool right;

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x8A3D3C", Offset = "0x8A3D3C", VA = "0x8A3D3C")]
	public float GetVerticalAngle()
	{
		return default(float);
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x8A3FFC", Offset = "0x8A3FFC", VA = "0x8A3FFC")]
	public Vector3 GetGrabPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x8A4084", Offset = "0x8A4084", VA = "0x8A4084")]
	public Controller()
	{
	}
}
[Token(Token = "0x2000113")]
public class FakeParent : MonoBehaviour
{
	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform fakeParentTo;

	[Token(Token = "0x4000B30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform myTransform;

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x8A40A4", Offset = "0x8A40A4", VA = "0x8A40A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x8A40C8", Offset = "0x8A40C8", VA = "0x8A40C8")]
	private void Update()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x8A4128", Offset = "0x8A4128", VA = "0x8A4128")]
	public FakeParent()
	{
	}
}
[Token(Token = "0x2000114")]
public enum CaestusType
{
	[Token(Token = "0x4000B32")]
	None,
	[Token(Token = "0x4000B33")]
	Punch,
	[Token(Token = "0x4000B34")]
	Wolverine,
	[Token(Token = "0x4000B35")]
	Grapple,
	[Token(Token = "0x4000B36")]
	Mobility,
	[Token(Token = "0x4000B37")]
	ThrowingKnife,
	[Token(Token = "0x4000B38")]
	Crossbow,
	[Token(Token = "0x4000B39")]
	CrabClaw,
	[Token(Token = "0x4000B3A")]
	Controller
}
[Token(Token = "0x2000115")]
public class Fist : PlayerWeapon
{
	[Token(Token = "0x2000116")]
	public enum State
	{
		[Token(Token = "0x4000B7F")]
		Open,
		[Token(Token = "0x4000B80")]
		Grabbing,
		[Token(Token = "0x4000B81")]
		Punching
	}

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandAnimator handModelGameobject;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject gloveMesh;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject punchCaestusMesh;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject wolverineMesh;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject grappleMesh;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject crossbowMesh;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject crabMesh;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject viveControllerMesh;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject oculusControllerMesh;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject questControllerMesh;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject psvrControllerMesh;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject picoNeo3ControllerMesh;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject psvr2ControllerMesh;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public MobilityCaestusAnim mobilityMesh;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CaestusType caestusType;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform grabPointTransform;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform knifePouchAttach;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform leftFistModelHolder;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject punchFist;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject punchCaestusFist;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject wolverineFist;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject grappleFist;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject knifePouch;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public CrabCaestus crabFist;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public CrossbowCaestus crossbow;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Collider wolverineColliderLeft;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Collider wolverineColliderRight;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GrabHand grabHand;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Material mobilityCaestusGloveMaterial;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Material mobilityCaestusGloveMaterialTier1;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Material mobilityCaestusGloveMaterialTier2;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public SkinnedMeshRenderer glovedHandRenderer;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Transform pointTransform;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Transform gestureOrientTransform;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Transform fistCentreTransform;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Grabbable highlightedObject;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public float vibrateStrengthTest;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public bool left;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float grabRange;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Text invertNotifyText;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public ClawVisual clawVisual;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public bool isWorldGrabbing;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public Vector3 worldGrabBasePos;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Player player;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject moveIndicator;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject playerTransform;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public Fist otherFist;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public bool testZap;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
	private bool invertingGrab;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
	private bool hasMadeFistThisRoundAlready;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x193")]
	public bool testInput;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	public float testInputFloat;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public Transform crabAnchorRight;

	[Token(Token = "0x4000B71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public State state;

	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float vibrationBonusThisFrame;

	[Token(Token = "0x4000B73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal bool inPointZone;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private IInputReader InputReader;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private Transform mainHandTransform;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private ControllerType activeControllerType;

	[Token(Token = "0x4000B77")]
	private const int MaxSphereCollisions = 16;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private readonly Collider[] cols;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool wasGrab;

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private float invertNotifyTime;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private HandAnimator.HandPose currentGesture;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private bool wasGesturing;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public LayerMask grabLayer;

	[Token(Token = "0x170000D8")]
	public GameObject ActiveControllerMesh
	{
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x8A4130", Offset = "0x8A4130", VA = "0x8A4130")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x8A4138", Offset = "0x8A4138", VA = "0x8A4138")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000D9")]
	public bool IsZapping
	{
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x8A4148", Offset = "0x8A4148", VA = "0x8A4148")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x8A416C", Offset = "0x8A416C", VA = "0x8A416C")]
	public void VibrateControllerContinuous(float magnitude)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x8A4254", Offset = "0x8A4254", VA = "0x8A4254")]
	private void Start()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x8A483C", Offset = "0x8A483C", VA = "0x8A483C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x8A43F0", Offset = "0x8A43F0", VA = "0x8A43F0")]
	public void SetupControllerMesh()
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x8A492C", Offset = "0x8A492C", VA = "0x8A492C", Slot = "5")]
	public virtual void SetupCaestus()
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x8A4E40", Offset = "0x8A4E40", VA = "0x8A4E40")]
	public void ShowDefaultHand()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x8A417C", Offset = "0x8A417C", VA = "0x8A417C")]
	public void VibrateControllerPulse(float magnitude, float time, float freq = 0.25f)
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x8A50D8", Offset = "0x8A50D8", VA = "0x8A50D8", Slot = "4")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x8A64D4", Offset = "0x8A64D4", VA = "0x8A64D4")]
	private void RunCrossbow()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x8A5EA0", Offset = "0x8A5EA0", VA = "0x8A5EA0")]
	private void RunCrabClaw(bool grab, float grabAmount)
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x8A6470", Offset = "0x8A6470", VA = "0x8A6470")]
	private void RunGrapple(bool grab)
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x8A6708", Offset = "0x8A6708", VA = "0x8A6708")]
	private HandAnimator.HandPose FindGesture()
	{
		return default(HandAnimator.HandPose);
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x8A6900", Offset = "0x8A6900", VA = "0x8A6900")]
	private void RunGesture()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x8A5820", Offset = "0x8A5820", VA = "0x8A5820")]
	protected void RunStandardFist(bool grab, float grabAmount)
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x8A5EBC", Offset = "0x8A5EBC", VA = "0x8A5EBC")]
	private void RunPunchFist(bool grab, float grabAmount)
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x8A771C", Offset = "0x8A771C", VA = "0x8A771C")]
	public void ShowMoveIndicator()
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x8A77B0", Offset = "0x8A77B0", VA = "0x8A77B0")]
	public void HideMoveIndicator()
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x8A6E50", Offset = "0x8A6E50", VA = "0x8A6E50")]
	private void RunPointing()
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x8A72DC", Offset = "0x8A72DC", VA = "0x8A72DC")]
	public void GrabObject([Optional] Grabbable overrideGrabbable)
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x8A6A6C", Offset = "0x8A6A6C", VA = "0x8A6A6C")]
	private void CheckHighlightGrabObject()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x8A7844", Offset = "0x8A7844", VA = "0x8A7844")]
	private bool CanGrab(Grabbable grabbable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x8A753C", Offset = "0x8A753C", VA = "0x8A753C")]
	public void OpenFist()
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x8A7064", Offset = "0x8A7064", VA = "0x8A7064")]
	private void EnterPunchMode()
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x8A791C", Offset = "0x8A791C", VA = "0x8A791C")]
	public Fist()
	{
	}
}
[Token(Token = "0x2000117")]
public class GamepadPlayer
{
	[Token(Token = "0x4000B82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public InputReader.Device inputDevice;

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputState inputState;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EnemyAI controllingAI;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color color;

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int powerLevel;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int number;

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x8A7988", Offset = "0x8A7988", VA = "0x8A7988")]
	public GamepadPlayer(InputReader.Device device, Color color, int number)
	{
	}
}
[Token(Token = "0x2000118")]
public class GamepadPlayerController : MonoBehaviour
{
	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<GamepadPlayer> activeGamepadPlayers;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<GamepadPlayer> inactiveGamepadPlayers;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isInPartyModeLobby;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static GamepadPlayerController instance;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float controllerCheckDelay;

	[Token(Token = "0x170000DA")]
	public static bool AllowGamepadPlayerDropin
	{
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x89DDD4", Offset = "0x89DDD4", VA = "0x89DDD4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000DB")]
	public static bool AlwaysTargetPlayer
	{
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x8A7BFC", Offset = "0x8A7BFC", VA = "0x8A7BFC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000DC")]
	public static List<GamepadPlayer> ActiveGamepadPlayers
	{
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x8A7C64", Offset = "0x8A7C64", VA = "0x8A7C64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000DD")]
	public static int ActivePlayerCount
	{
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x89E278", Offset = "0x89E278", VA = "0x89E278")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0x8A7A40", Offset = "0x8A7A40", VA = "0x8A7A40")]
	public static void ResetActivePlayers()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0x8A7C04", Offset = "0x8A7C04", VA = "0x8A7C04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x8A7CBC", Offset = "0x8A7CBC", VA = "0x8A7CBC")]
	public static void ClearPlayers()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0x8A81AC", Offset = "0x8A81AC", VA = "0x8A81AC")]
	public static void ResetPlayerScores()
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0x8A8384", Offset = "0x8A8384", VA = "0x8A8384")]
	private void Start()
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x8A7DAC", Offset = "0x8A7DAC", VA = "0x8A7DAC")]
	private void SetupLists()
	{
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0x8A8388", Offset = "0x8A8388", VA = "0x8A8388")]
	private void Update()
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0x8A8408", Offset = "0x8A8408", VA = "0x8A8408")]
	private void RunPartyModeLobby()
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0x8A86BC", Offset = "0x8A86BC", VA = "0x8A86BC")]
	private void RunCustomGameDropin()
	{
	}

	[Token(Token = "0x6000697")]
	[Address(RVA = "0x8A8B30", Offset = "0x8A8B30", VA = "0x8A8B30")]
	public GamepadPlayerController()
	{
	}
}
[Token(Token = "0x2000119")]
public class GazeTracker : MonoBehaviour
{
	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float triggerDistance;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float triggerRayRadius;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GazeTrigger> gazeEnterTriggers;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<GazeTrigger> gazeExitTriggers;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int lookMask;

	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RaycastHit[] hits;

	[Token(Token = "0x6000699")]
	[Address(RVA = "0x8A8BD8", Offset = "0x8A8BD8", VA = "0x8A8BD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0x8A8D5C", Offset = "0x8A8D5C", VA = "0x8A8D5C")]
	private void Update()
	{
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0x8A91B4", Offset = "0x8A91B4", VA = "0x8A91B4")]
	public GazeTracker()
	{
	}
}
[Token(Token = "0x200011A")]
public class GrabHand : MonoBehaviour
{
	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ConfigurableJoint joint;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform anchorPoint;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable _grabbedObject;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Collider colliderToDisable;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Fist ownerFist;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 lastPos;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 currentVelocity;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 averageVelocity;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject visualModel;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool isPlayer;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private FisticuffFist fisticuffFist;

	[Token(Token = "0x4000BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Collider[] childColliders;

	[Token(Token = "0x4000BA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float defaultSlerpSpring;

	[Token(Token = "0x4000BA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float defaultPosSpring;

	[Token(Token = "0x170000DE")]
	public ConfigurableJoint GrabJoint
	{
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x8A91C8", Offset = "0x8A91C8", VA = "0x8A91C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000DF")]
	public Grabbable GrabbedObject
	{
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x8A91D0", Offset = "0x8A91D0", VA = "0x8A91D0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x8A91D8", Offset = "0x8A91D8", VA = "0x8A91D8")]
		protected set
		{
		}
	}

	[Token(Token = "0x170000E0")]
	public Enemy owner
	{
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x8A91E0", Offset = "0x8A91E0", VA = "0x8A91E0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x8A91E8", Offset = "0x8A91E8", VA = "0x8A91E8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E1")]
	public float GripStrength
	{
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x8A91F0", Offset = "0x8A91F0", VA = "0x8A91F0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x8A91F8", Offset = "0x8A91F8", VA = "0x8A91F8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60006A3")]
	[Address(RVA = "0x8A9200", Offset = "0x8A9200", VA = "0x8A9200", Slot = "4")]
	protected virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x8A9C6C", Offset = "0x8A9C6C", VA = "0x8A9C6C")]
	public void HitSomething(Vector3 relativeVel, GameObject hitObj)
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x8A9D88", Offset = "0x8A9D88", VA = "0x8A9D88")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x8A9E90", Offset = "0x8A9E90", VA = "0x8A9E90")]
	public void GrabObject(Grabbable obj)
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x8AB2C4", Offset = "0x8AB2C4", VA = "0x8AB2C4")]
	private void IgnoreArmorCollisions(Grabbable obj)
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x8AB108", Offset = "0x8AB108", VA = "0x8AB108")]
	public void SetupJointGrabRigid(bool resetAxis = false, bool lockrotaion = true)
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x8AB4F4", Offset = "0x8AB4F4", VA = "0x8AB4F4")]
	public void SetupJointGrabBackHand(Rigidbody grabRigidbody)
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x8AAEF0", Offset = "0x8AAEF0", VA = "0x8AAEF0")]
	public void SetupJointGrabWobbly(Grabbable obj)
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x8AB6DC", Offset = "0x8AB6DC", VA = "0x8AB6DC")]
	public void LetGo()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x8AB9E0", Offset = "0x8AB9E0", VA = "0x8AB9E0")]
	public void ResetForPool()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x8AAD28", Offset = "0x8AAD28", VA = "0x8AAD28")]
	private void CreateJoint(Grabbable obj)
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x8ABB58", Offset = "0x8ABB58", VA = "0x8ABB58")]
	private void CreateTwoHandedJoint(Grabbable obj)
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x8ABCD8", Offset = "0x8ABCD8", VA = "0x8ABCD8")]
	public GrabHand()
	{
	}
}
[Token(Token = "0x200011B")]
public class Grapple : MonoBehaviour
{
	[Token(Token = "0x200011C")]
	private enum State
	{
		[Token(Token = "0x4000BBB")]
		Idle,
		[Token(Token = "0x4000BBC")]
		Firing,
		[Token(Token = "0x4000BBD")]
		Attached,
		[Token(Token = "0x4000BBE")]
		Retracting,
		[Token(Token = "0x4000BBF")]
		Grabbing
	}

	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GrabHand grabHand;

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform fireTransform;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float retractDamper;

	[Token(Token = "0x4000BA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private State state;

	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GrappleHead grappleHeadPrefab;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ConfigurableJoint grappleJoint;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GrappleHeadVisual grappleHeadVisual;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Grabbable homeToGrabbable;

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float grappleShootSpeed;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float grappleTimeoutTimeLeft;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AudioSource audioSource;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float grabRange;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 grapplePoint;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 grappleDirection;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 lastPos;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool retracting;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool wasInputButton;

	[Token(Token = "0x4000BB7")]
	private const int OverlapSphereColliderMax = 8;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private readonly Collider[] colliders;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float attachedRetractSpeed;

	[Token(Token = "0x170000E2")]
	public GrappleHead currentGrappleHead
	{
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x8ABCE0", Offset = "0x8ABCE0", VA = "0x8ABCE0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x8ABCE8", Offset = "0x8ABCE8", VA = "0x8ABCE8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E3")]
	public bool inputButton
	{
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x8ABCF0", Offset = "0x8ABCF0", VA = "0x8ABCF0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x8ABCF8", Offset = "0x8ABCF8", VA = "0x8ABCF8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x8ABD04", Offset = "0x8ABD04", VA = "0x8ABD04")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x8ABEBC", Offset = "0x8ABEBC", VA = "0x8ABEBC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x8AC910", Offset = "0x8AC910", VA = "0x8AC910")]
	private void RunLaser()
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x8ACA0C", Offset = "0x8ACA0C", VA = "0x8ACA0C")]
	public float GetGrappleDistance()
	{
		return default(float);
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x8AC11C", Offset = "0x8AC11C", VA = "0x8AC11C")]
	public Vector3 GetHomeToPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x8ACAEC", Offset = "0x8ACAEC", VA = "0x8ACAEC")]
	private void RunGrappleHeadHoming()
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x8ACDE8", Offset = "0x8ACDE8", VA = "0x8ACDE8")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x8ADC74", Offset = "0x8ADC74", VA = "0x8ADC74")]
	private void CheckGrabGrappledObject()
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x8AD68C", Offset = "0x8AD68C", VA = "0x8AD68C")]
	public void FireGrapple()
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x8AD8E4", Offset = "0x8AD8E4", VA = "0x8AD8E4")]
	public void RetractGrapple()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x8ADB08", Offset = "0x8ADB08", VA = "0x8ADB08")]
	private void OrientGrapple()
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x8ADD54", Offset = "0x8ADD54", VA = "0x8ADD54")]
	private void AttachGrappleHead(Rigidbody attachTo, Vector3 attachPoint)
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x8AE1D0", Offset = "0x8AE1D0", VA = "0x8AE1D0")]
	public void GrappleHeadHit(Rigidbody rb, Collision col)
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x8AE3BC", Offset = "0x8AE3BC", VA = "0x8AE3BC")]
	public Grapple()
	{
	}
}
[Token(Token = "0x200011D")]
public class HandAnimator : MonoBehaviour
{
	[Token(Token = "0x200011E")]
	public enum HandPose
	{
		[Token(Token = "0x4000BC5")]
		Open,
		[Token(Token = "0x4000BC6")]
		Zap,
		[Token(Token = "0x4000BC7")]
		Fist,
		[Token(Token = "0x4000BC8")]
		Grab,
		[Token(Token = "0x4000BC9")]
		GrabAnticipate,
		[Token(Token = "0x4000BCA")]
		Point,
		[Token(Token = "0x4000BCB")]
		Peace,
		[Token(Token = "0x4000BCC")]
		Vygie,
		[Token(Token = "0x4000BCD")]
		ThumbsUp
	}

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator anim;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<HandPose> allPoses;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int[] allPosesHash;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HandPose currentPose;

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x8AE430", Offset = "0x8AE430", VA = "0x8AE430")]
	public void SetPose(HandPose pose)
	{
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x8AE438", Offset = "0x8AE438", VA = "0x8AE438")]
	private void Start()
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x8AE944", Offset = "0x8AE944", VA = "0x8AE944")]
	private void Update()
	{
	}

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x8AEA84", Offset = "0x8AEA84", VA = "0x8AEA84")]
	public HandAnimator()
	{
	}
}
[Token(Token = "0x200011F")]
public class HandPoseFollower : MonoBehaviour
{
	[Token(Token = "0x4000BCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandPoseTracker myPose;

	[Token(Token = "0x4000BCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HandPoseTracker openPose;

	[Token(Token = "0x4000BD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HandPoseTracker closedPose;

	[Token(Token = "0x4000BD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HandPoseTracker grabPose;

	[Token(Token = "0x4000BD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HandPoseTracker readyToGrabPose;

	[Token(Token = "0x4000BD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandPoseTracker pointPose;

	[Token(Token = "0x4000BD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandPoseTracker zapPose;

	[Token(Token = "0x4000BD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animator anim;

	[Token(Token = "0x4000BD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public HandPoseTracker poseToFollow;

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0x8AEA8C", Offset = "0x8AEA8C", VA = "0x8AEA8C")]
	public void Open()
	{
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x8AEA98", Offset = "0x8AEA98", VA = "0x8AEA98")]
	public void Zap()
	{
	}

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0x8AEAA4", Offset = "0x8AEAA4", VA = "0x8AEAA4")]
	public void Close()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x8AEAB0", Offset = "0x8AEAB0", VA = "0x8AEAB0")]
	public void Grab()
	{
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x8AEABC", Offset = "0x8AEABC", VA = "0x8AEABC")]
	public void GrabAnticipate()
	{
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x8AEAC8", Offset = "0x8AEAC8", VA = "0x8AEAC8")]
	public void Point()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x8AEAD4", Offset = "0x8AEAD4", VA = "0x8AEAD4")]
	private void Update()
	{
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x8AED28", Offset = "0x8AED28", VA = "0x8AED28")]
	private void BoneFollow(Transform myTranform, Transform otherTransform)
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x8AEE00", Offset = "0x8AEE00", VA = "0x8AEE00")]
	public HandPoseFollower()
	{
	}
}
[Token(Token = "0x2000120")]
public class HandPoseTracker : MonoBehaviour
{
	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform index1;

	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform index2;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform index3;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform middle1;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform middle2;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform middle3;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform ring1;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform ring2;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform ring3;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform pinky1;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform pinky2;

	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform pinky3;

	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform thumb1;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform thumb2;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform thumb3;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float followSpeed;

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x8AEE08", Offset = "0x8AEE08", VA = "0x8AEE08")]
	public HandPoseTracker()
	{
	}
}
[Token(Token = "0x2000121")]
public class Player : MonoBehaviour, AITargetable
{
	[Token(Token = "0x2000122")]
	private enum RotationIntention
	{
		[Token(Token = "0x4000C2D")]
		Unknown,
		[Token(Token = "0x4000C2E")]
		Rotating,
		[Token(Token = "0x4000C2F")]
		NotRotating
	}

	[Token(Token = "0x2000123")]
	[CompilerGenerated]
	private sealed class <DoPlayspaceRotation>d__111 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Player <>4__this;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool left;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <rotationLeft>5__2;

		[Token(Token = "0x170000EB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000705")]
			[Address(RVA = "0x8B3D7C", Offset = "0x8B3D7C", VA = "0x8B3D7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000707")]
			[Address(RVA = "0x8B3DC4", Offset = "0x8B3DC4", VA = "0x8B3DC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x8B3790", Offset = "0x8B3790", VA = "0x8B3790")]
		[DebuggerHidden]
		public <DoPlayspaceRotation>d__111(int <>1__state)
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x8B3BB4", Offset = "0x8B3BB4", VA = "0x8B3BB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x8B3BB8", Offset = "0x8B3BB8", VA = "0x8B3BB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x8B3D84", Offset = "0x8B3D84", VA = "0x8B3D84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000124")]
	[CompilerGenerated]
	private sealed class <FeelPainIRL>d__119 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 force;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Player <>4__this;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <haveRotatedAmount>5__2;

		[Token(Token = "0x170000ED")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600070B")]
			[Address(RVA = "0x8B40F8", Offset = "0x8B40F8", VA = "0x8B40F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600070D")]
			[Address(RVA = "0x8B4140", Offset = "0x8B4140", VA = "0x8B4140", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x8B3AD8", Offset = "0x8B3AD8", VA = "0x8B3AD8")]
		[DebuggerHidden]
		public <FeelPainIRL>d__119(int <>1__state)
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x8B3DCC", Offset = "0x8B3DCC", VA = "0x8B3DCC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x8B3DD0", Offset = "0x8B3DD0", VA = "0x8B3DD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x8B4100", Offset = "0x8B4100", VA = "0x8B4100", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Controller handLeft;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Controller handRight;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform head;

	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SphereCollider keepawayCollider;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Collider playerCollider;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Fist playerFistPrefab;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool feelingPainInRealLife;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Renderer thirdPersonRenderer;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 testPainDirection;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool testPainIRL;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool showControllerHands;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] bounds;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool inStrictChaperoneMode;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float strictChaperoneDelay;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string chaperoneTextCache;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string healTutorialTextCache;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public RTLTextMeshPro3D chaperoneText;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Camera eyeCamera;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Grayscale chaperoneGrayScale;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 lastPos;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float comfortVignetteRemoveDelay;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public PlayerDamageRelay damageRelay;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float trackpadMoveSpeed;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float smoothRotationSpeed;

	[Token(Token = "0x4000BFF")]
	private const float TopSurfaceHitMomentumDecay = 0.1f;

	[Token(Token = "0x4000C00")]
	private const float TowardsPlayerDotThreshold = 0.65f;

	[Token(Token = "0x4000C01")]
	private const float CameraNormalDotThreshold = 0.55f;

	[Token(Token = "0x4000C02")]
	private const float RotationDecideTime = 0.125f;

	[Token(Token = "0x4000C03")]
	private const float MinMotionThreshold = 0.025f;

	[Token(Token = "0x4000C04")]
	private const float MinMotionThresholdSquared = 0.00062500004f;

	[Token(Token = "0x4000C05")]
	private const float DownwardsAngleChangeThreshold = 8f;

	[Token(Token = "0x4000C06")]
	private const float DownwardsAngleEndThreshold = 9f;

	[Token(Token = "0x4000C07")]
	private const float DownwardsAngleChangeThreshold2 = 1f;

	[Token(Token = "0x4000C08")]
	private const float DownwardsAngleEndThreshold2 = -25f;

	[Token(Token = "0x4000C09")]
	private const float RotationDotSmoothing = 0.25f;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float rotationSampleTime;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private RotationIntention rotationIntention;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float towardsPlayerDot;

	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float cameraNormalDot;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float startDownwardsAngle;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 fistStartPosition;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private GornVignette vignette;

	[Token(Token = "0x4000C11")]
	private const int OverlapSphereColliderMax = 16;

	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private readonly Collider[] colliders;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool isMenu;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	private bool isArena;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
	private bool hasPaused;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Transform elevatorFloor;

	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private string chaperoneWarning;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private string chaperoneDisable;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int moveDelay;

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Vector3 startPos;

	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private IInputReader InputReader;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float floorHeight;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float movementBoostM;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Controller worldGrabbingFist;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Vector3 worldGrabBasePos;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private Vector3 headSpaceGrabPos;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Vector3 momentum;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private float rotationMomentum;

	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private bool wasOnGround;

	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
	private bool rotationReset;

	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
	private bool trackingRotation;

	[Token(Token = "0x4000C27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private Vector2 trackingRotationFrom;

	[Token(Token = "0x4000C28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private Vector2 lastTrackpadPos;

	[Token(Token = "0x4000C29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private bool wasTouched;

	[Token(Token = "0x4000C2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
	private bool rotationInProgress;

	[Token(Token = "0x4000C2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private int OverlapSphereLayerMask;

	[Token(Token = "0x170000E4")]
	public Renderer Renderer
	{
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x8AEE18", Offset = "0x8AEE18", VA = "0x8AEE18", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E5")]
	public Vector3 position
	{
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x8AEE20", Offset = "0x8AEE20", VA = "0x8AEE20", Slot = "8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000E6")]
	public Vector3 leftArmPos
	{
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x8AEE3C", Offset = "0x8AEE3C", VA = "0x8AEE3C", Slot = "9")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000E7")]
	public Vector3 rightArmPos
	{
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x8AEE64", Offset = "0x8AEE64", VA = "0x8AEE64", Slot = "10")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x170000E8")]
	public Vector3 movementVelocity
	{
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x8AEE8C", Offset = "0x8AEE8C", VA = "0x8AEE8C")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x8AEE9C", Offset = "0x8AEE9C", VA = "0x8AEE9C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000E9")]
	public float MovementM
	{
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x8B0DBC", Offset = "0x8B0DBC", VA = "0x8B0DBC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000EA")]
	public bool IsDead
	{
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x8B3B18", Offset = "0x8B3B18", VA = "0x8B3B18", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x8AEEAC", Offset = "0x8AEEAC", VA = "0x8AEEAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x8AEF04", Offset = "0x8AEF04", VA = "0x8AEF04")]
	private void SetupCaestus()
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x8AF3F4", Offset = "0x8AF3F4", VA = "0x8AF3F4")]
	public void ResetCaestus()
	{
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x8AF4C0", Offset = "0x8AF4C0", VA = "0x8AF4C0")]
	public void ResetHitsTaken()
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x8AF514", Offset = "0x8AF514", VA = "0x8AF514")]
	public bool IsOnFloor()
	{
		return default(bool);
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x8AF548", Offset = "0x8AF548", VA = "0x8AF548")]
	private void Start()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x8AFCE8", Offset = "0x8AFCE8", VA = "0x8AFCE8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x8AFE3C", Offset = "0x8AFE3C", VA = "0x8AFE3C")]
	public float DistanceFromStart()
	{
		return default(float);
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x8AFEEC", Offset = "0x8AFEEC", VA = "0x8AFEEC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x8B0DCC", Offset = "0x8B0DCC", VA = "0x8B0DCC")]
	public void StunMovement(float stunTime)
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x8B0DD8", Offset = "0x8B0DD8", VA = "0x8B0DD8")]
	public CaestusType GetCaestusType(TFBGames.Common.Hand hand)
	{
		return default(CaestusType);
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x8B0EFC", Offset = "0x8B0EFC", VA = "0x8B0EFC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x8B0CF4", Offset = "0x8B0CF4", VA = "0x8B0CF4")]
	private void RunMovement()
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x8B24D4", Offset = "0x8B24D4", VA = "0x8B24D4")]
	private void RunPlayerMoveMovement(bool leftHand, Vector3 direction)
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x8B2E78", Offset = "0x8B2E78", VA = "0x8B2E78")]
	private void MoveGrabbedObjects(Vector3 movement)
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x8B3050", Offset = "0x8B3050", VA = "0x8B3050")]
	private void MoveGrabbedWeapon(WeaponHandle handle, Vector3 movement)
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x8AFB68", Offset = "0x8AFB68", VA = "0x8AFB68")]
	private float GetGiantHeight()
	{
		return default(float);
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x8B3158", Offset = "0x8B3158", VA = "0x8B3158")]
	public float GetGiantHeight(float floorOffset)
	{
		return default(float);
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x8B0CAC", Offset = "0x8B0CAC", VA = "0x8B0CAC")]
	private Vector3 WorldPosToPlayspace(Vector3 worldPos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x8B31B4", Offset = "0x8B31B4", VA = "0x8B31B4")]
	private Vector3 WorldDirectionToPlayspace(Vector3 direction)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x8B31FC", Offset = "0x8B31FC", VA = "0x8B31FC")]
	private Vector3 PlayspaceToWorldSpace(Vector3 playspacePos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x8B3244", Offset = "0x8B3244", VA = "0x8B3244")]
	private Vector3 HeadInPlayspace()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x8B0F50", Offset = "0x8B0F50", VA = "0x8B0F50")]
	private void RunPlayerMovementGorn()
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x8B3278", Offset = "0x8B3278", VA = "0x8B3278")]
	private bool RunMomentum()
	{
		return default(bool);
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x8B1C68", Offset = "0x8B1C68", VA = "0x8B1C68")]
	private void RunPlayerMovementTouchpad()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x8B2894", Offset = "0x8B2894", VA = "0x8B2894")]
	private bool TryMovePlayer(ref Vector3 diff)
	{
		return default(bool);
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0x8B088C", Offset = "0x8B088C", VA = "0x8B088C")]
	private void RunRotation()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0x8B36A8", Offset = "0x8B36A8", VA = "0x8B36A8")]
	private void RotatePlayer(float amount)
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0x8B3620", Offset = "0x8B3620", VA = "0x8B3620")]
	[IteratorStateMachine(typeof(<DoPlayspaceRotation>d__111))]
	private IEnumerator DoPlayspaceRotation(bool left)
	{
		return null;
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0x8B0328", Offset = "0x8B0328", VA = "0x8B0328")]
	private void RunStrictChaperone()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0x8B37B8", Offset = "0x8B37B8", VA = "0x8B37B8")]
	private string GetHealTutorialText()
	{
		return null;
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x8B0764", Offset = "0x8B0764", VA = "0x8B0764")]
	private void HandleHealTutorial()
	{
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0x8B385C", Offset = "0x8B385C", VA = "0x8B385C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0x8B02F0", Offset = "0x8B02F0", VA = "0x8B02F0")]
	public void FeelPainInRealLife(Vector3 force)
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0x8AFBE8", Offset = "0x8AFBE8", VA = "0x8AFBE8")]
	private void OnGamePaused(string pauseMessage)
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x8B39A4", Offset = "0x8B39A4", VA = "0x8B39A4")]
	private void OnGameUnpaused()
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x8B390C", Offset = "0x8B390C", VA = "0x8B390C")]
	[IteratorStateMachine(typeof(<FeelPainIRL>d__119))]
	private IEnumerator FeelPainIRL(Vector3 force)
	{
		return null;
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0x8B3B00", Offset = "0x8B3B00", VA = "0x8B3B00", Slot = "4")]
	public bool IsPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0x8B3B08", Offset = "0x8B3B08", VA = "0x8B3B08", Slot = "5")]
	public bool HasRightArm()
	{
		return default(bool);
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0x8B3B10", Offset = "0x8B3B10", VA = "0x8B3B10", Slot = "6")]
	public bool HasLeftArm()
	{
		return default(bool);
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0x8B3B34", Offset = "0x8B3B34", VA = "0x8B3B34")]
	public void SetFloorHeight(float height)
	{
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x8B3B3C", Offset = "0x8B3B3C", VA = "0x8B3B3C")]
	public Player()
	{
	}
}
[Token(Token = "0x2000125")]
public class PlayerDamageRelay : DamageRelay
{
	[Token(Token = "0x4000C3A")]
	private const int DeathRecoveryTime = 2;

	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private int totalHits;

	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[SerializeField]
	private int totalHitsEasyMode;

	[Token(Token = "0x4000C3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private GameObject deathTimer;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private Image deathTimerFillImage;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private Camera eyeCamera;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private bool invulnerable;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float lastDamageTime;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float lastRecoverTime;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float damageRecoveryTimeLeft;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float totalDamageRecoveryTime;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Color hitByColor;

	[Token(Token = "0x4000C48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Enemy lastHitBy;

	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float heartBeatCounter;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private CameraMotionBlur cameraMotionBlur;

	[Token(Token = "0x4000C4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private GornVignette gornVignette;

	[Token(Token = "0x4000C4C")]
	private const float TotalRecoveryDuration = 0.5f;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private bool hasRecovered;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float currentDeathPercent;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float targetRecoveryDuration;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float currentRecoveryDuration;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private int recoverFromDeathFrames;

	[Token(Token = "0x170000EF")]
	public bool IsDead
	{
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x8B4148", Offset = "0x8B4148", VA = "0x8B4148")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x8B4150", Offset = "0x8B4150", VA = "0x8B4150")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000F0")]
	public int HitsTaken
	{
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x8B415C", Offset = "0x8B415C", VA = "0x8B415C")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x8B4164", Offset = "0x8B4164", VA = "0x8B4164")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000F1")]
	public bool inDamageRecovery
	{
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x8B416C", Offset = "0x8B416C", VA = "0x8B416C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x8B4174", Offset = "0x8B4174", VA = "0x8B4174")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000F2")]
	public float HealthM
	{
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x8B4180", Offset = "0x8B4180", VA = "0x8B4180")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000F3")]
	private int TotalHits
	{
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x8B41A0", Offset = "0x8B41A0", VA = "0x8B41A0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x8B41CC", Offset = "0x8B41CC", VA = "0x8B41CC", Slot = "7")]
	public override bool Damage(DamageType type, Vector3 relativeVelocity, Vector3 force, Vector3 pos, GameObject sender, Vector3 hitNormal, Collision collision, AITargetable responsibleEntity, bool isFloor = false, bool showDamage = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x8B4F94", Offset = "0x8B4F94", VA = "0x8B4F94", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x8B5034", Offset = "0x8B5034", VA = "0x8B5034")]
	private void Update()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x8B57C4", Offset = "0x8B57C4", VA = "0x8B57C4")]
	public void EnemyWasKilled()
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x8AF4FC", Offset = "0x8AF4FC", VA = "0x8AF4FC")]
	public void RecoverFromDying()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x8B58C8", Offset = "0x8B58C8", VA = "0x8B58C8")]
	private void EnterRecoveryFadeOut()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x8B56E8", Offset = "0x8B56E8", VA = "0x8B56E8")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x8B4B90", Offset = "0x8B4B90", VA = "0x8B4B90")]
	private bool IsCrabDamageValid(float damage, DamagerRigidbody damagerRigidbody)
	{
		return default(bool);
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x8B4ED4", Offset = "0x8B4ED4", VA = "0x8B4ED4")]
	private bool IsFisticuffDamageValid(DamagerRigidbody damagerRigidbody, out FisticuffFist fisticuffFist)
	{
		return default(bool);
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x8B4CA0", Offset = "0x8B4CA0", VA = "0x8B4CA0")]
	private bool IsArrowDamageValid(DamagerRigidbody damagerRigidbody, out Arrow arrow)
	{
		return default(bool);
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0x8B4D98", Offset = "0x8B4D98", VA = "0x8B4D98")]
	private bool IsThrowingDamageValid(DamagerRigidbody damagerRigidbody, out ThrowingKnife throwingKnife)
	{
		return default(bool);
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0x8B59CC", Offset = "0x8B59CC", VA = "0x8B59CC")]
	public PlayerDamageRelay()
	{
	}
}
[Token(Token = "0x2000126")]
public class PlayerWeapon : MonoBehaviour
{
	[Token(Token = "0x6000722")]
	[Address(RVA = "0x8B59D4", Offset = "0x8B59D4", VA = "0x8B59D4", Slot = "4")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0x8B59D8", Offset = "0x8B59D8", VA = "0x8B59D8")]
	public PlayerWeapon()
	{
	}
}
[Token(Token = "0x2000127")]
public class ThirdPersonPlayerAnimator : MonoBehaviour
{
	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform leftFootTargetTransform;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightFootTargetTransform;

	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform headFollowTransform;

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform head;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform body;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform bodyAttach;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform leftFoot;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform rightFoot;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 leftFootTarget;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 rightFootTarget;

	[Token(Token = "0x4000C5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform rightLowerArmBone;

	[Token(Token = "0x4000C5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform rightHandBone;

	[Token(Token = "0x4000C5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float maxArmLength;

	[Token(Token = "0x4000C60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float defaultMaxHeight;

	[Token(Token = "0x4000C61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float defaultMinHeight;

	[Token(Token = "0x4000C62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Vector3 leftFootDefaultTarget;

	[Token(Token = "0x4000C63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 rightFootDefaultTarget;

	[Token(Token = "0x4000C64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform center;

	[Token(Token = "0x4000C65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 lastPos;

	[Token(Token = "0x4000C66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Vector3 avgVelocity;

	[Token(Token = "0x4000C67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float speedToStepM;

	[Token(Token = "0x4000C68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float stepTime;

	[Token(Token = "0x4000C69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float stepHeight;

	[Token(Token = "0x4000C6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public float avgSpeedLerpFactor;

	[Token(Token = "0x4000C6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float bodyVelocityToFootOffsetFactor;

	[Token(Token = "0x4000C6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private bool steppingLeftFoot;

	[Token(Token = "0x4000C6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float stepTimeLeft;

	[Token(Token = "0x4000C6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float avgSpeed;

	[Token(Token = "0x6000724")]
	[Address(RVA = "0x8B59E0", Offset = "0x8B59E0", VA = "0x8B59E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x8B5A7C", Offset = "0x8B5A7C", VA = "0x8B5A7C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x8B62D8", Offset = "0x8B62D8", VA = "0x8B62D8")]
	public ThirdPersonPlayerAnimator()
	{
	}
}
[Token(Token = "0x2000128")]
public enum ArmorType
{
	[Token(Token = "0x4000C70")]
	Steel,
	[Token(Token = "0x4000C71")]
	Wood,
	[Token(Token = "0x4000C72")]
	Leather,
	[Token(Token = "0x4000C73")]
	Heavy,
	[Token(Token = "0x4000C74")]
	Giant
}
[Serializable]
[Token(Token = "0x2000129")]
public class ArmorPrefabHolder
{
	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ArmorPiece helmetPrefab;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArmorPiece rightLowerBracerPrefab;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ArmorPiece rightUpperBracerPrefab;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ArmorPiece rightThighArmorPrefab;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ArmorPiece rightShinArmorPrefab;

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ArmorPiece rightPauldronPrefab;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ArmorPiece rightHandArmorPrefab;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ArmorPiece rightKneepadPrefab;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ArmorPiece rightFootArmorPrefab;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ArmorPiece breastPlatePrefab;

	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ArmorPiece leftLowerBracerPrefab;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ArmorPiece leftUpperBracerPrefab;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ArmorPiece leftThighArmorPrefab;

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ArmorPiece leftShinArmorPrefab;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ArmorPiece leftPauldronPrefab;

	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public ArmorPiece beltPrefab;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ArmorPiece leftHandArmorPrefab;

	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ArmorPiece leftKneepadPrefab;

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ArmorPiece leftFootArmorPrefab;

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x8B62E0", Offset = "0x8B62E0", VA = "0x8B62E0")]
	public ArmorPrefabHolder()
	{
	}
}
[Token(Token = "0x200012A")]
public class PrefabHolder : MonoBehaviour
{
	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Weapons")]
	public WeaponBase macePrefab;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public WeaponBase morningstarPrefab;

	[Token(Token = "0x4000C8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public WeaponBase shieldPrefab;

	[Token(Token = "0x4000C8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public WeaponBase swordPrefab;

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public WeaponBase kitanaPrefab;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public WeaponBase bowPrefab;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public WeaponBase arrowPrefab;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public WeaponBase spearPrefab;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public WeaponBase spikedRockPrefab;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public WeaponBase warhammerPrefab;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public WeaponBase gladiusPrefab;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public WeaponBase giantFlailPrefab;

	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public WeaponBase throwingKnifePrefab;

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public WeaponBase nunchuckPrefab;

	[Token(Token = "0x4000C96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public WeaponBase axePrefab;

	[Token(Token = "0x4000C97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public WeaponBase glaivePrefab;

	[Token(Token = "0x4000C98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public WeaponBase armorBreakerPrefab;

	[Token(Token = "0x4000C99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public WeaponBase boulderPrefab;

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public WeaponBase towerShieldPrefab;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public WeaponBase quarterStaffPrefab;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public WeaponBase baseballBatPrefab;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public WeaponBase throwingShieldPrefab;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public WeaponBase halbertPrefab;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public WeaponBase greatAxePrefab;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public WeaponBase chainBladePrefab;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public WeaponBase greatSwordPrefab;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public WeaponBase crabMalletPrefab;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public WeaponBase tomahawkPrefab;

	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public WeaponBase gunPrefab;

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public ArmorPrefabHolder steelArmorHolder;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public ArmorPrefabHolder woodArmorHolder;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public ArmorPrefabHolder leatherArmorHolder;

	[Token(Token = "0x4000CA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public ArmorPrefabHolder heavyArmorHolder;

	[Token(Token = "0x4000CA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public ArmorPrefabHolder giantArmorHolder;

	[Token(Token = "0x4000CAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[FormerlySerializedAs("heavyArmorPSVRHolder")]
	public ArmorPrefabHolder tier1HeavyArmorHolder;

	[Token(Token = "0x4000CAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[Header("Champion Armor")]
	public ArmorPiece achillesHelmetPrefab;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public ArmorPiece fencerHelmetPrefab;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public ArmorPiece berserkerHelmetPrefab;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public ArmorPiece mountainHelmetPrefab;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public ArmorPiece defenderHelmetPrefab;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public ArmorPiece badgermancerHelmetPrefab;

	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public ArmorPiece giantHelmetPrefab;

	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public ArmorPiece mitchHelmetPrefab;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public ArmorPiece shoulderSeatPrefab;

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public ArmorPiece crabHelmetPrefab;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public ArmorPiece leftUpperBracerGiant;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	[Header("Misc")]
	protected Enemy enemyPrefab;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	protected Enemy enemyPrefabTier1Optimisations;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	protected Enemy enemyPrefabTier2Optimisations;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	protected NaziTalkingHead crowdPerson;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	protected NaziTalkingHead crowdPersonTier2;

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	protected AngryCrowdPerson angryCrowdPersonPrefab;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	protected AngryCrowdPerson angryCrowdPersonTier2Prefab;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public Crab crabPrefab;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[FormerlySerializedAs("crabPSVRPrefab")]
	public Crab tier1CrabPrefab;

	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public Crab tier2CrabPrefab;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public SurpriseBox surpriseBoxPrefab;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public GameObject knifePouchPrefab;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public GameObject coin;

	[Token(Token = "0x4000CC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public BadgerBouncer badgerPrefab;

	[Token(Token = "0x4000CC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public GameObject bulletPrefab;

	[Token(Token = "0x170000F4")]
	public Enemy EnemyPrefab
	{
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x8B62E8", Offset = "0x8B62E8", VA = "0x8B62E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F5")]
	public NaziTalkingHead CrowdPerson
	{
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x8B62F0", Offset = "0x8B62F0", VA = "0x8B62F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000F6")]
	public AngryCrowdPerson AngryCrowdPersonPrefab
	{
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x8B62F8", Offset = "0x8B62F8", VA = "0x8B62F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x8B6300", Offset = "0x8B6300", VA = "0x8B6300")]
	public WeaponBase GetWeaponPrefab(EnemyWeaponType weapon)
	{
		return null;
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x8B652C", Offset = "0x8B652C", VA = "0x8B652C")]
	public BadgerBouncer GetBadgerPrefab()
	{
		return null;
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x8B643C", Offset = "0x8B643C", VA = "0x8B643C")]
	public WeaponBase GetWeaponPrefab(WeaponType weapon)
	{
		return null;
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0x8B6534", Offset = "0x8B6534", VA = "0x8B6534")]
	public GameObject GetPrefab(PlayerInventoryItem item)
	{
		return null;
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x8B67AC", Offset = "0x8B67AC", VA = "0x8B67AC")]
	public ArmorPiece GetArmorPiece(EnemyArmorPieceType type, ArmorType quality)
	{
		return null;
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x8B6918", Offset = "0x8B6918", VA = "0x8B6918")]
	public PrefabHolder()
	{
	}
}
[Token(Token = "0x200012B")]
[CreateAssetMenu(fileName = "Campaign", menuName = "GORN/Campaign", order = -1)]
public class CampaignScriptable : ScriptableObject
{
	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<string> trialNames;

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x8B6920", Offset = "0x8B6920", VA = "0x8B6920")]
	public CampaignScriptable()
	{
	}
}
[Token(Token = "0x200012C")]
[CreateAssetMenu(fileName = "Cutscene", menuName = "GORN/Cutscene", order = -1)]
public class CutsceneScriptable : ScriptableObject
{
	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Cutscene startCutscene;

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Cutscene perfectStartCutscene;

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Cutscene victoryCutscene;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Cutscene perfectVictoryCutscene;

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x8B6928", Offset = "0x8B6928", VA = "0x8B6928")]
	public CutsceneScriptable()
	{
	}
}
[Token(Token = "0x200012D")]
[CreateAssetMenu(fileName = "ESIHolder", menuName = "GORN/ESIHolder", order = 1)]
public class EnemySetupInfoHolder : ScriptableObject
{
	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EnemySetupInfo> esis;

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x8B6930", Offset = "0x8B6930", VA = "0x8B6930")]
	public EnemySetupInfoHolder()
	{
	}
}
[Serializable]
[Token(Token = "0x200012E")]
public class KeyFrameLimbPos
{
	[Token(Token = "0x200012F")]
	public enum Limb
	{
		[Token(Token = "0x4000CCF")]
		LeftArm,
		[Token(Token = "0x4000CD0")]
		RightArm,
		[Token(Token = "0x4000CD1")]
		LeftLeg,
		[Token(Token = "0x4000CD2")]
		RightLeg
	}

	[Token(Token = "0x4000CCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Limb limb;

	[Token(Token = "0x4000CCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 relativePos;

	[Token(Token = "0x4000CCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool waitForThisLimb;

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x8B6938", Offset = "0x8B6938", VA = "0x8B6938")]
	public KeyFrameLimbPos()
	{
	}
}
[Serializable]
[Token(Token = "0x2000130")]
public class ActionClipKeyFrame
{
	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<KeyFrameLimbPos> limbs;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 chestRotation;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public IKMuscleChain.Tension muscleTensions;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool pushDownLeftFoot;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool pushDownRightFoot;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minTime;

	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxTime;

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x8B6940", Offset = "0x8B6940", VA = "0x8B6940")]
	public ActionClipKeyFrame()
	{
	}
}
[Token(Token = "0x2000131")]
[CreateAssetMenu(fileName = "KFActionClipInfo", menuName = "GORN/KeyFrameAction", order = 1)]
public class KeyFrameActionClipInfo : ScriptableObject
{
	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ActionClipKeyFrame> KeyFrames;

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x8B6950", Offset = "0x8B6950", VA = "0x8B6950")]
	public KeyFrameActionClipInfo()
	{
	}
}
[Serializable]
[Token(Token = "0x2000132")]
public class WordSymbolLink
{
	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string word;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string symbol;

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x8B6958", Offset = "0x8B6958", VA = "0x8B6958")]
	public WordSymbolLink()
	{
	}
}
[Token(Token = "0x2000133")]
[CreateAssetMenu(menuName = "GORN/Kiroodroki Character Table")]
public class KiroodrokiCharacterTable : ScriptableObject
{
	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string sampleText;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string convertedSymbols;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<WordSymbolLink> characters;

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x8B6960", Offset = "0x8B6960", VA = "0x8B6960")]
	[ContextMenu("Order alphabetically...")]
	private void OrderAlphabetically()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x8B6A90", Offset = "0x8B6A90", VA = "0x8B6A90")]
	[ContextMenu("Log all symbols")]
	private void LogAllSymbols()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x8B6CF8", Offset = "0x8B6CF8", VA = "0x8B6CF8")]
	[ContextMenu("Log all symbols alphabetically")]
	private void LogSymbolsAlphabetically()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x8B6F14", Offset = "0x8B6F14", VA = "0x8B6F14")]
	[ContextMenu("Convert Sample Text")]
	private void ConvertSampleText()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x8B6F38", Offset = "0x8B6F38", VA = "0x8B6F38")]
	public string ConvertWordsToSymbols(string text)
	{
		return null;
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x8B7140", Offset = "0x8B7140", VA = "0x8B7140")]
	public KiroodrokiCharacterTable()
	{
	}
}
[Serializable]
[Token(Token = "0x2000136")]
public class OdalbeDialogueSegment
{
	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string key;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string englishText;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string kiroodrokiText;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip voiceClip;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioData audioData;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string text;

	[Token(Token = "0x170000F7")]
	public string Text
	{
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x8B7264", Offset = "0x8B7264", VA = "0x8B7264")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0x8B72B4", Offset = "0x8B72B4", VA = "0x8B72B4")]
	public OdalbeDialogueSegment()
	{
	}
}
[Token(Token = "0x2000137")]
[CreateAssetMenu(menuName = "GORN/Odalbe Dialogue")]
public class OdalbeDialogue : ScriptableObject
{
	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OdalbeDialogueSegment> dialogueSegments;

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x8B72BC", Offset = "0x8B72BC", VA = "0x8B72BC")]
	public OdalbeDialogue()
	{
	}
}
[Token(Token = "0x2000138")]
[CreateAssetMenu(fileName = "PartyModeESIs", menuName = "GORN/PartyModeESIs", order = 1)]
public class PartyModeEnemySetups : ScriptableObject
{
	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EnemySetupInfoHolder> esiHolders;

	[Token(Token = "0x6000747")]
	[Address(RVA = "0x8B72C4", Offset = "0x8B72C4", VA = "0x8B72C4")]
	public PartyModeEnemySetups()
	{
	}
}
[Token(Token = "0x2000139")]
[CreateAssetMenu(fileName = "TrialLevel", menuName = "GORN/TrialLevel", order = -1)]
public class TrialLevelScriptable : ScriptableObject
{
	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string trialDescription;

	[Token(Token = "0x4000CEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LevelSetupInfo levelSetupInfo;

	[Token(Token = "0x4000CF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string nextTrialName;

	[Token(Token = "0x4000CF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PlayerInventoryItem unlockItem;

	[Token(Token = "0x6000748")]
	[Address(RVA = "0x8B72CC", Offset = "0x8B72CC", VA = "0x8B72CC")]
	public TrialLevelScriptable()
	{
	}
}
[Token(Token = "0x200013A")]
public class SelectionHighlighter : MonoBehaviour
{
	[Token(Token = "0x4000CF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Light highlightLight;

	[Token(Token = "0x4000CF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Grabbable lastHighlightObject;

	[Token(Token = "0x4000CF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera mainCamera;

	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float baseSize;

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x8B72D4", Offset = "0x8B72D4", VA = "0x8B72D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0x8B731C", Offset = "0x8B731C", VA = "0x8B731C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x8B7348", Offset = "0x8B7348", VA = "0x8B7348")]
	public void Highlight(Grabbable grab)
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x8B74D4", Offset = "0x8B74D4", VA = "0x8B74D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x8B7418", Offset = "0x8B7418", VA = "0x8B7418")]
	private void RecalculateSize(Grabbable grab)
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x8B7660", Offset = "0x8B7660", VA = "0x8B7660")]
	public SelectionHighlighter()
	{
	}
}
[Token(Token = "0x200013B")]
public class ShatteredArmor : MonoBehaviour
{
	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 breakVector;

	[Token(Token = "0x4000CF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 breakPoint;

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x8B7668", Offset = "0x8B7668", VA = "0x8B7668")]
	private float GetRandomDestroyTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x8B7678", Offset = "0x8B7678", VA = "0x8B7678")]
	private void Start()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x8B78AC", Offset = "0x8B78AC", VA = "0x8B78AC")]
	public ShatteredArmor()
	{
	}
}
[Token(Token = "0x200013C")]
public class ShowRandomChildrenOnStart : MonoBehaviour
{
	[Token(Token = "0x4000CF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int numToShow;

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x8B78B4", Offset = "0x8B78B4", VA = "0x8B78B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x8B7B00", Offset = "0x8B7B00", VA = "0x8B7B00")]
	public ShowRandomChildrenOnStart()
	{
	}
}
[Token(Token = "0x200013D")]
public class StyleActionBubble : MonoBehaviour
{
	[Token(Token = "0x200013E")]
	[CompilerGenerated]
	private sealed class <RunPopup>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StyleActionBubble <>4__this;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <t>5__2;

		[Token(Token = "0x170000F9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600075C")]
			[Address(RVA = "0x8B7F4C", Offset = "0x8B7F4C", VA = "0x8B7F4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600075E")]
			[Address(RVA = "0x8B7F94", Offset = "0x8B7F94", VA = "0x8B7F94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x8B7BE0", Offset = "0x8B7BE0", VA = "0x8B7BE0")]
		[DebuggerHidden]
		public <RunPopup>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x8B7C10", Offset = "0x8B7C10", VA = "0x8B7C10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x8B7C14", Offset = "0x8B7C14", VA = "0x8B7C14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x8B7F54", Offset = "0x8B7F54", VA = "0x8B7F54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float floatUpSpeed;

	[Token(Token = "0x4000CFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMesh text;

	[Token(Token = "0x4000CFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AnimationCurve popinCurve;

	[Token(Token = "0x4000CFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float stayTime;

	[Token(Token = "0x170000F8")]
	public TextMesh Text
	{
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x8B7B10", Offset = "0x8B7B10", VA = "0x8B7B10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x8B7B18", Offset = "0x8B7B18", VA = "0x8B7B18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x8B7BAC", Offset = "0x8B7BAC", VA = "0x8B7BAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x8B7B38", Offset = "0x8B7B38", VA = "0x8B7B38")]
	[IteratorStateMachine(typeof(<RunPopup>d__8))]
	private IEnumerator RunPopup()
	{
		return null;
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x8B7C08", Offset = "0x8B7C08", VA = "0x8B7C08")]
	public StyleActionBubble()
	{
	}
}
[Token(Token = "0x200013F")]
public class SwitchToTestCamera : MonoBehaviour
{
	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject normalCamera;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject testCamera;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform playerHead;

	[Token(Token = "0x170000FB")]
	public GameObject TestCamera
	{
		[Token(Token = "0x600075F")]
		[Address(RVA = "0x8B7F9C", Offset = "0x8B7F9C", VA = "0x8B7F9C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0x8B7FA4", Offset = "0x8B7FA4", VA = "0x8B7FA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x8B8048", Offset = "0x8B8048", VA = "0x8B8048")]
	public SwitchToTestCamera()
	{
	}
}
[Token(Token = "0x2000140")]
public class Test : MonoBehaviour
{
	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool printVelocity;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool printCollisions;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool printPosition;

	[Token(Token = "0x4000D07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool timebumpOnCollision;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool pauseOnCollision;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 translation;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool randomizePosition;

	[Token(Token = "0x4000D0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float randomizeSize;

	[Token(Token = "0x4000D0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 startPos;

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float velDelay;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float velocity;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool havePaused;

	[Token(Token = "0x6000762")]
	[Address(RVA = "0x8B8050", Offset = "0x8B8050", VA = "0x8B8050")]
	private void Start()
	{
	}

	[Token(Token = "0x6000763")]
	[Address(RVA = "0x8B8080", Offset = "0x8B8080", VA = "0x8B8080")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0x8B815C", Offset = "0x8B815C", VA = "0x8B815C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0x8B83F4", Offset = "0x8B83F4", VA = "0x8B83F4")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0x8B85CC", Offset = "0x8B85CC", VA = "0x8B85CC")]
	public Test()
	{
	}
}
[Token(Token = "0x2000141")]
public class TestGrabJoint : MonoBehaviour
{
	[Token(Token = "0x4000D10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Grabbable rigidbodyToGrab;

	[Token(Token = "0x4000D11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool grab;

	[Token(Token = "0x4000D12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GrabHand grabber;

	[Token(Token = "0x6000767")]
	[Address(RVA = "0x8B85D4", Offset = "0x8B85D4", VA = "0x8B85D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x8B8684", Offset = "0x8B8684", VA = "0x8B8684")]
	private void Update()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x8B8754", Offset = "0x8B8754", VA = "0x8B8754")]
	public void GrabNextFrame(Grabbable objectToGrab)
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x8B8764", Offset = "0x8B8764", VA = "0x8B8764")]
	public void Reset()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x8B8774", Offset = "0x8B8774", VA = "0x8B8774")]
	public TestGrabJoint()
	{
	}
}
[Token(Token = "0x2000142")]
public class DebugConsoleUI : MonoBehaviour
{
	[Token(Token = "0x4000D13")]
	private const int MaxLines = 50;

	[Token(Token = "0x4000D14")]
	private const int MaxHistory = 20;

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private UnityEngine.InputSystem.Key activateKey;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Canvas uiCanvas;

	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Text promptLabel;

	[Token(Token = "0x4000D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private InputField inputBox;

	[Token(Token = "0x4000D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ScrollRect scrollRect;

	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform entryList;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform viewportTransform;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform contentRootTransform;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private DebugConsoleUIOutputLine linePrefab;

	[Token(Token = "0x600076C")]
	[Address(RVA = "0x8B877C", Offset = "0x8B877C", VA = "0x8B877C")]
	public DebugConsoleUI()
	{
	}
}
[Token(Token = "0x2000143")]
public class DebugConsoleUIOutputLine : MonoBehaviour
{
	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text label;

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x8B878C", Offset = "0x8B878C", VA = "0x8B878C")]
	public void SetText(string newText)
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x8B87B0", Offset = "0x8B87B0", VA = "0x8B87B0")]
	public DebugConsoleUIOutputLine()
	{
	}
}
[Token(Token = "0x2000144")]
public static class LocaliseArabicHelper
{
	[Token(Token = "0x4000D1F")]
	public const string k_ArabicKey = "ar";

	[Token(Token = "0x4000D20")]
	private const bool k_ShowTashkeel = true;

	[Token(Token = "0x4000D21")]
	private const bool k_UseHinduNumbers = false;

	[Token(Token = "0x4000D22")]
	private const string k_DebugPrefix = "<color=#ff00ff>";

	[Token(Token = "0x4000D23")]
	private const string k_DebugPostfix = "</color>";

	[Token(Token = "0x170000FC")]
	private static bool IsDebug
	{
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x8B87B8", Offset = "0x8B87B8", VA = "0x8B87B8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x8B87C0", Offset = "0x8B87C0", VA = "0x8B87C0")]
	public static void LocaliseArabic(TextMesh textMesh, bool skipLanguageTest = false)
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x8B8940", Offset = "0x8B8940", VA = "0x8B8940")]
	public static void LocaliseArabic(TextMeshPro textMeshPro, bool skipLanguageTest = false)
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x8B8A04", Offset = "0x8B8A04", VA = "0x8B8A04")]
	public static void LocaliseArabic(TextMeshProUGUI textMeshProUgui, bool skipLanguageTest = false)
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x8B8AC8", Offset = "0x8B8AC8", VA = "0x8B8AC8")]
	public static void LocaliseArabic(TMP_Text tmpText, bool skipLanguageTest = false)
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0x8B8B8C", Offset = "0x8B8B8C", VA = "0x8B8B8C")]
	public static string LocaliseArabic(string text, bool skipLanguageTest = false)
	{
		return null;
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0x8B8864", Offset = "0x8B8864", VA = "0x8B8864")]
	public static bool IsArabic()
	{
		return default(bool);
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x8B88C0", Offset = "0x8B88C0", VA = "0x8B88C0")]
	private static string LocaliseArabicInternal(string text)
	{
		return null;
	}
}
[Token(Token = "0x2000145")]
public class LocalisedArabicTextMesh : MonoBehaviour
{
	[Token(Token = "0x4000D24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Localise immediately on start. Set this if you notice the text is only updated after 1 frame, which may happen if it starts as disabled in the scene.")]
	[SerializeField]
	protected bool localiseOnStart;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMesh textMesh;

	[Token(Token = "0x4000D26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool localise;

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x8B8BB8", Offset = "0x8B8BB8", VA = "0x8B8BB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0x8B8C10", Offset = "0x8B8C10", VA = "0x8B8C10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0x8B8D00", Offset = "0x8B8D00", VA = "0x8B8D00")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0x8B8D80", Offset = "0x8B8D80", VA = "0x8B8D80")]
	private void Update()
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0x8B8DBC", Offset = "0x8B8DBC", VA = "0x8B8DBC")]
	private void OnLanguageChanged(string language)
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0x8B8CEC", Offset = "0x8B8CEC", VA = "0x8B8CEC")]
	private void ScheduleLocalise()
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0x8B8CC0", Offset = "0x8B8CC0", VA = "0x8B8CC0")]
	private void UpdateLocalisation()
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0x8B8DD0", Offset = "0x8B8DD0", VA = "0x8B8DD0")]
	public LocalisedArabicTextMesh()
	{
	}
}
[Token(Token = "0x2000146")]
public class LocalisedChineseCharacterRemove : MonoBehaviour
{
	[Token(Token = "0x4000D27")]
	private const string traditionalChineseKey = "zh-Hant";

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string leftToRight;

	[Token(Token = "0x4000D29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMeshPro[] textMeshPro;

	[Token(Token = "0x4000D2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMesh[] textMesh;

	[Token(Token = "0x4000D2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool hasTextBeenChanged;

	[Token(Token = "0x600077F")]
	[Address(RVA = "0x8B8DD8", Offset = "0x8B8DD8", VA = "0x8B8DD8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0x8B8E58", Offset = "0x8B8E58", VA = "0x8B8E58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0x8B906C", Offset = "0x8B906C", VA = "0x8B906C")]
	private void RemoveChineseLeftToRightCharacter(string obj)
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0x8B8E5C", Offset = "0x8B8E5C", VA = "0x8B8E5C")]
	private void RemoveChineseLeftToRightCharacter()
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0x8B90E0", Offset = "0x8B90E0", VA = "0x8B90E0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x8B9160", Offset = "0x8B9160", VA = "0x8B9160")]
	public LocalisedChineseCharacterRemove()
	{
	}
}
[Serializable]
[Token(Token = "0x2000147")]
public class LocalisedFloat
{
	[Token(Token = "0x4000D2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	protected internal string language;

	[Token(Token = "0x4000D2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected internal float floatValue;

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x8B9200", Offset = "0x8B9200", VA = "0x8B9200")]
	public LocalisedFloat()
	{
	}
}
[Token(Token = "0x2000148")]
[RequireComponent(typeof(RTLTextMeshPro3D))]
public class LocalisedRtlTextMeshPro : LocalizedString
{
	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool forceUpperCase;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[Tooltip("Do not localise the font?")]
	[SerializeField]
	private bool dontLocaliseFont;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[Tooltip("Do not localise the text? (e.g. text is set in code)")]
	[SerializeField]
	private bool dontLocaliseText;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action<string> languageChanged;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RTLTextMeshPro3D textObject;

	[Token(Token = "0x4000D33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TMP_FontAsset defaultFont;

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x8B9208", Offset = "0x8B9208", VA = "0x8B9208")]
	public void SetFont(TMP_FontAsset font, bool setDefault = true)
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x8B9254", Offset = "0x8B9254", VA = "0x8B9254")]
	protected void LazyLoad()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x8B9320", Offset = "0x8B9320", VA = "0x8B9320", Slot = "7")]
	protected override void LanguageChanged(string newLanguage)
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x8B94F8", Offset = "0x8B94F8", VA = "0x8B94F8")]
	public LocalisedRtlTextMeshPro()
	{
	}
}
[Token(Token = "0x2000149")]
[RequireComponent(typeof(RTLTextMeshPro))]
public class LocalisedRtlTextMeshProUGUI : LocalizedString
{
	[Token(Token = "0x4000D34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool forceUpperCase;

	[Token(Token = "0x4000D35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[SerializeField]
	[Tooltip("Do not localise the font?")]
	private bool dontLocaliseFont;

	[Token(Token = "0x4000D36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[Tooltip("Do not localise the text? (e.g. text is set in code)")]
	[SerializeField]
	private bool dontLocaliseText;

	[Token(Token = "0x4000D37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action<string> languageChanged;

	[Token(Token = "0x4000D38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private RTLTextMeshPro textObject;

	[Token(Token = "0x4000D39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TMP_FontAsset defaultFont;

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x8B9500", Offset = "0x8B9500", VA = "0x8B9500")]
	public void SetFont(TMP_FontAsset font, bool setDefault = true)
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x8B954C", Offset = "0x8B954C", VA = "0x8B954C")]
	protected void LazyLoad()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x8B9618", Offset = "0x8B9618", VA = "0x8B9618", Slot = "7")]
	protected override void LanguageChanged(string newLanguage)
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x8B97F0", Offset = "0x8B97F0", VA = "0x8B97F0")]
	public void Test()
	{
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0x8B9840", Offset = "0x8B9840", VA = "0x8B9840")]
	public LocalisedRtlTextMeshProUGUI()
	{
	}
}
[Token(Token = "0x200014A")]
[RequireComponent(typeof(TextMeshPro))]
public class LocalisedTextMeshPro : LocalizedString
{
	[Token(Token = "0x4000D3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Do not localise the font?")]
	[SerializeField]
	private bool dontLocaliseFont;

	[Token(Token = "0x4000D3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[Tooltip("Do not localise the text? (e.g. text is set in code)")]
	[SerializeField]
	private bool dontLocaliseText;

	[Token(Token = "0x4000D3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[Tooltip("Do not fix Arabic?")]
	[SerializeField]
	private bool dontFixArabic;

	[Token(Token = "0x4000D3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action<string> languageChanged;

	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected TextMeshPro textObject;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TMP_FontAsset defaultFont;

	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string lastArabicText;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float latinoTypeCharacterOffset;

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x8B9848", Offset = "0x8B9848", VA = "0x8B9848")]
	protected void LazyLoad()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x8B9914", Offset = "0x8B9914", VA = "0x8B9914", Slot = "7")]
	protected override void LanguageChanged(string newLanguage)
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x8B9AE8", Offset = "0x8B9AE8", VA = "0x8B9AE8")]
	public LocalisedTextMeshPro()
	{
	}
}
[Token(Token = "0x200014B")]
[RequireComponent(typeof(TextMeshProUGUI))]
public class LocalisedTextMeshProUGUI : LocalizedString
{
	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceUpperCase;

	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	[Tooltip("Do not localise the font?")]
	[SerializeField]
	private bool dontLocaliseFont;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	[Tooltip("Do not localise the text? (e.g. text is set in code)")]
	[SerializeField]
	private bool dontLocaliseText;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	[SerializeField]
	[Tooltip("Do not fix Arabic? (e.g. text is set in code)")]
	private bool dontFixArabic;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action<string> languageChanged;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private TextMeshProUGUI textObject;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TMP_FontAsset defaultFont;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool hasFixedArabic;

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x8B9AFC", Offset = "0x8B9AFC", VA = "0x8B9AFC")]
	public void SetFont(TMP_FontAsset font, bool setDefault = true)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x8B9B48", Offset = "0x8B9B48", VA = "0x8B9B48")]
	protected void LazyLoad()
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x8B9C14", Offset = "0x8B9C14", VA = "0x8B9C14", Slot = "7")]
	protected override void LanguageChanged(string newLanguage)
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x8B9E1C", Offset = "0x8B9E1C", VA = "0x8B9E1C")]
	public LocalisedTextMeshProUGUI()
	{
	}
}
[Serializable]
[Token(Token = "0x200014C")]
public class LocalisedVector3
{
	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string language;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 vector;

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x8B9E24", Offset = "0x8B9E24", VA = "0x8B9E24")]
	public LocalisedVector3()
	{
	}
}
[Token(Token = "0x200014D")]
[ExecuteInEditMode]
[RequireComponent(typeof(Light))]
public class ConcertLight : MonoBehaviour
{
	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Texture2D lightCookie;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Light light;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int LightColor;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int SpotlightCookie;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int LightPos;

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x8B9E2C", Offset = "0x8B9E2C", VA = "0x8B9E2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0x8B9E84", Offset = "0x8B9E84", VA = "0x8B9E84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0x8BA070", Offset = "0x8BA070", VA = "0x8BA070")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0x8BA10C", Offset = "0x8BA10C", VA = "0x8BA10C")]
	public ConcertLight()
	{
	}
}
[Token(Token = "0x200014E")]
public class FloorObjects : MonoBehaviour
{
	[Token(Token = "0x200014F")]
	private enum State
	{
		[Token(Token = "0x4000D56")]
		On,
		[Token(Token = "0x4000D57")]
		DoorOpening,
		[Token(Token = "0x4000D58")]
		DoorClosing,
		[Token(Token = "0x4000D59")]
		Off
	}

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected GameObject[] objects;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected FloorGate floorgate;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool toggled;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private State state;

	[Token(Token = "0x600079C")]
	[Address(RVA = "0x8BA1DC", Offset = "0x8BA1DC", VA = "0x8BA1DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0x8BA300", Offset = "0x8BA300", VA = "0x8BA300")]
	private void OnFloorGateClosed()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0x8BA364", Offset = "0x8BA364", VA = "0x8BA364")]
	[ContextMenu("Toggle")]
	public void Toggle()
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0x8BA580", Offset = "0x8BA580", VA = "0x8BA580")]
	public void InstantOn()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0x8BA650", Offset = "0x8BA650", VA = "0x8BA650")]
	public void InstantOff()
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x8BA378", Offset = "0x8BA378", VA = "0x8BA378")]
	public void Toggle(bool setActive, bool ignoreDoor = false)
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x8BA720", Offset = "0x8BA720", VA = "0x8BA720")]
	public FloorObjects()
	{
	}
}
[Token(Token = "0x2000150")]
public class PoolableMeshCap : Poolable
{
	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Mesh capMesh;

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x8BA730", Offset = "0x8BA730", VA = "0x8BA730")]
	public Mesh GetCapMesh()
	{
		return null;
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x8BA804", Offset = "0x8BA804", VA = "0x8BA804")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x8BA894", Offset = "0x8BA894", VA = "0x8BA894")]
	public PoolableMeshCap()
	{
	}
}
[Token(Token = "0x2000151")]
[RequireComponent(typeof(Renderer))]
public class VisibilityDisabler : MonoBehaviour
{
	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MonoBehaviour[] monoBehaviours;

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x8BA89C", Offset = "0x8BA89C", VA = "0x8BA89C")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x8BA900", Offset = "0x8BA900", VA = "0x8BA900")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x8BA964", Offset = "0x8BA964", VA = "0x8BA964")]
	public VisibilityDisabler()
	{
	}
}
[Token(Token = "0x2000152")]
public class ThirdpersonCamera : MonoBehaviour
{
	[Token(Token = "0x2000153")]
	public enum Mode
	{
		[Token(Token = "0x4000D6B")]
		FirstPerson,
		[Token(Token = "0x4000D6C")]
		ThirdPerson,
		[Token(Token = "0x4000D6D")]
		FreeFocused,
		[Token(Token = "0x4000D6E")]
		FreeMouseLook
	}

	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera camera;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Mode mode;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 defaultPos;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion defaultRot;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ThirdpersonCamera instance;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PartyGameplayUI partyUI;

	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float followHeight;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float followDistance;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float followSpeed;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float rotationSpeed;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool forceAerialView;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3 followRotationOffset;

	[Token(Token = "0x4000D68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform followTransform;

	[Token(Token = "0x4000D69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 lastMousePos;

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x8BA96C", Offset = "0x8BA96C", VA = "0x8BA96C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x8BAA78", Offset = "0x8BAA78", VA = "0x8BAA78")]
	private void Start()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x8BAC90", Offset = "0x8BAC90", VA = "0x8BAC90")]
	private void SwitchMode(Mode mode)
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x8BAE5C", Offset = "0x8BAE5C", VA = "0x8BAE5C")]
	public void HidePlayerOnCamera()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x8BAD84", Offset = "0x8BAD84", VA = "0x8BAD84")]
	public void ShowPlayerOnCamera()
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x8BAF34", Offset = "0x8BAF34", VA = "0x8BAF34")]
	public void SwitchMode(bool suppressText = false)
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x8BB288", Offset = "0x8BB288", VA = "0x8BB288")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x8BB420", Offset = "0x8BB420", VA = "0x8BB420")]
	private void RunFirstPersonMode()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x8BB5B4", Offset = "0x8BB5B4", VA = "0x8BB5B4")]
	private void RunThirdPersonMode()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x8BBE64", Offset = "0x8BBE64", VA = "0x8BBE64")]
	private void RunFreeMode()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x8BC760", Offset = "0x8BC760", VA = "0x8BC760")]
	public ThirdpersonCamera()
	{
	}
}
[Token(Token = "0x2000154")]
public class TwoHandedBezierConnector : MonoBehaviour
{
	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private WeaponHandle handle;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform backGrip;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform frontGrip;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform end;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform frontGripModel;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform[] midPoints;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float clampAngleTo;

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0x8BC768", Offset = "0x8BC768", VA = "0x8BC768")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0x8BC818", Offset = "0x8BC818", VA = "0x8BC818")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x8BCEFC", Offset = "0x8BCEFC", VA = "0x8BCEFC")]
	private Vector3 GetPointAt(float t, Vector3 topPoint, Vector3 originPoint)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x8BCF84", Offset = "0x8BCF84", VA = "0x8BCF84")]
	public TwoHandedBezierConnector()
	{
	}
}
[Token(Token = "0x2000155")]
public class HeadsetObjectSwitcher : MonoBehaviour
{
	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject viveObject;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject oculusObject;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject questObject;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject psvrObject;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject picoObject;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject psvr2Object;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private HeadsetType activeHeadsetType;

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x8BCF8C", Offset = "0x8BCF8C", VA = "0x8BCF8C")]
	public void Start()
	{
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x8BD3C8", Offset = "0x8BD3C8", VA = "0x8BD3C8")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x8BD0C8", Offset = "0x8BD0C8", VA = "0x8BD0C8")]
	private void SwitchObjects()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x8BD4FC", Offset = "0x8BD4FC", VA = "0x8BD4FC")]
	public HeadsetObjectSwitcher()
	{
	}
}
[Token(Token = "0x2000156")]
public class ObjectiveDisplay : MonoBehaviour
{
	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject container;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image objectiveIcon;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RTLTextMeshPro progressCounter;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RTCameraController cameraDirtyController;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Objective objective;

	[Token(Token = "0x4000D82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool complete;

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x8BD504", Offset = "0x8BD504", VA = "0x8BD504")]
	private void Start()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x8BD524", Offset = "0x8BD524", VA = "0x8BD524")]
	public void Show(Objective objective)
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x8BD6A4", Offset = "0x8BD6A4", VA = "0x8BD6A4")]
	public void Hide()
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x8BD544", Offset = "0x8BD544", VA = "0x8BD544")]
	public void UpdateObjectives()
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x8BD6D4", Offset = "0x8BD6D4", VA = "0x8BD6D4")]
	public ObjectiveDisplay()
	{
	}
}
[Token(Token = "0x2000157")]
public class PartyGameplayPlayerUI : MonoBehaviour
{
	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GamepadPlayer forPlayer;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text text;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image image;

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x8BD6DC", Offset = "0x8BD6DC", VA = "0x8BD6DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x8BD710", Offset = "0x8BD710", VA = "0x8BD710")]
	private void Update()
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x8BD750", Offset = "0x8BD750", VA = "0x8BD750")]
	public PartyGameplayPlayerUI()
	{
	}
}
[Token(Token = "0x2000158")]
public class PartyGameplayUI : MonoBehaviour
{
	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<PartyGameplayPlayerUI> playerUIs;

	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text VRPlayerText;

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0x8BD758", Offset = "0x8BD758", VA = "0x8BD758")]
	private void Start()
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0x8BD8C0", Offset = "0x8BD8C0", VA = "0x8BD8C0")]
	private void Update()
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0x8BD940", Offset = "0x8BD940", VA = "0x8BD940")]
	public PartyGameplayUI()
	{
	}
}
[Token(Token = "0x2000159")]
public class PartyLobbyPlayerUI : MonoBehaviour
{
	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI text;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GamepadPlayer player;

	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float textDrift;

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0x8BD948", Offset = "0x8BD948", VA = "0x8BD948")]
	private void Update()
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0x8BDAC8", Offset = "0x8BDAC8", VA = "0x8BDAC8")]
	public PartyLobbyPlayerUI()
	{
	}
}
[Token(Token = "0x200015A")]
public class PartyLobbyUI : MonoBehaviour
{
	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PartyLobbyPlayerUI[] playerUIs;

	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image controlImagePreJoin;

	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image controlImagePostJoin;

	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshProUGUI mainText;

	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CanvasRenderer preJoinImage;

	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CanvasRenderer preJoinText;

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0x8BDAD8", Offset = "0x8BDAD8", VA = "0x8BDAD8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x8BDE64", Offset = "0x8BDE64", VA = "0x8BDE64")]
	private void SetPreJoinAlpha(float alpha)
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0x8BDEA4", Offset = "0x8BDEA4", VA = "0x8BDEA4")]
	public PartyLobbyUI()
	{
	}
}
[Token(Token = "0x200015B")]
public class PartyModeScrollUI : MonoBehaviour
{
	[Token(Token = "0x4000D91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text playerScoreText;

	[Token(Token = "0x4000D92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text nextUpPlayerText;

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x8BDEAC", Offset = "0x8BDEAC", VA = "0x8BDEAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x8BE068", Offset = "0x8BE068", VA = "0x8BE068")]
	public PartyModeScrollUI()
	{
	}
}
[Token(Token = "0x200015C")]
public class SimpleUIAnimation : MonoBehaviour
{
	[Token(Token = "0x4000D93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image image;

	[Token(Token = "0x4000D94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite[] frames;

	[Token(Token = "0x4000D95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float frameRate;

	[Token(Token = "0x4000D96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float counter;

	[Token(Token = "0x4000D97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int frame;

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x8BE070", Offset = "0x8BE070", VA = "0x8BE070")]
	private void Update()
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x8BE100", Offset = "0x8BE100", VA = "0x8BE100")]
	public SimpleUIAnimation()
	{
	}
}
[Token(Token = "0x200015D")]
public class TextGlow : MonoBehaviour
{
	[Token(Token = "0x4000D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color[] colors;

	[Token(Token = "0x4000D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text text;

	[Token(Token = "0x4000D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int colorIndex;

	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float counter;

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x8BE108", Offset = "0x8BE108", VA = "0x8BE108")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x8BE160", Offset = "0x8BE160", VA = "0x8BE160")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x8BE24C", Offset = "0x8BE24C", VA = "0x8BE24C")]
	public TextGlow()
	{
	}
}
[Token(Token = "0x200015E")]
public class ThirdPersonCameraUI : MonoBehaviour
{
	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ThirdPersonCameraUI instance;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float textClearDelay;

	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text mainText;

	[Token(Token = "0x4000DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image controlsImage;

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x8BE254", Offset = "0x8BE254", VA = "0x8BE254")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x8BE2AC", Offset = "0x8BE2AC", VA = "0x8BE2AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x8BE334", Offset = "0x8BE334", VA = "0x8BE334")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x8BB1C0", Offset = "0x8BB1C0", VA = "0x8BB1C0")]
	public static void SetText(string text, bool timeout = false)
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x8BE3CC", Offset = "0x8BE3CC", VA = "0x8BE3CC")]
	public ThirdPersonCameraUI()
	{
	}
}
[Token(Token = "0x200015F")]
public class UnlockProgressDisplayController : MonoBehaviour
{
	[Token(Token = "0x2000160")]
	[CompilerGenerated]
	private sealed class <Retract>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockProgressDisplayController <>4__this;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <scrollAmount>5__2;

		[Token(Token = "0x170000FD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E1")]
			[Address(RVA = "0x8BE8A8", Offset = "0x8BE8A8", VA = "0x8BE8A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E3")]
			[Address(RVA = "0x8BE8F0", Offset = "0x8BE8F0", VA = "0x8BE8F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x8BE648", Offset = "0x8BE648", VA = "0x8BE648")]
		[DebuggerHidden]
		public <Retract>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x8BE6A0", Offset = "0x8BE6A0", VA = "0x8BE6A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x8BE6A4", Offset = "0x8BE6A4", VA = "0x8BE6A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x8BE8B0", Offset = "0x8BE8B0", VA = "0x8BE8B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000161")]
	[CompilerGenerated]
	private sealed class <RunFanfare>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockProgressDisplayController <>4__this;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EndOfRoundFanfareDisplayInfo info;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <scrollAmount>5__2;

		[Token(Token = "0x170000FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E7")]
			[Address(RVA = "0x8BF348", Offset = "0x8BF348", VA = "0x8BF348", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E9")]
			[Address(RVA = "0x8BF390", Offset = "0x8BF390", VA = "0x8BF390", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x8BE670", Offset = "0x8BE670", VA = "0x8BE670")]
		[DebuggerHidden]
		public <RunFanfare>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x8BE8F8", Offset = "0x8BE8F8", VA = "0x8BE8F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x8BE8FC", Offset = "0x8BE8FC", VA = "0x8BE8FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x8BF350", Offset = "0x8BF350", VA = "0x8BF350", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator bannerAnim;

	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject moveInstructions;

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject victoryFist;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CanvasGroup victoryTime;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CanvasGroup campaignPerfectedDisplay;

	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CanvasGroup campaignMasteredDisplay;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CanvasGroup weaponUnlockDisplay;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image weaponUnlockIcon;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshPro timeText;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SkinnedMeshRenderer fanfareScroll;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public RTCameraController cameraDirtyController;

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x8BE3D4", Offset = "0x8BE3D4", VA = "0x8BE3D4")]
	public void Setup()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x8BE468", Offset = "0x8BE468", VA = "0x8BE468")]
	public void Setup(EndOfRoundFanfareDisplayInfo info)
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x8BE5A8", Offset = "0x8BE5A8", VA = "0x8BE5A8")]
	public void Hide()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x8BE5D4", Offset = "0x8BE5D4", VA = "0x8BE5D4")]
	[IteratorStateMachine(typeof(<Retract>d__14))]
	private IEnumerator Retract()
	{
		return null;
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x8BE518", Offset = "0x8BE518", VA = "0x8BE518")]
	[IteratorStateMachine(typeof(<RunFanfare>d__15))]
	private IEnumerator RunFanfare(EndOfRoundFanfareDisplayInfo info)
	{
		return null;
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x8BE698", Offset = "0x8BE698", VA = "0x8BE698")]
	public UnlockProgressDisplayController()
	{
	}
}
[Token(Token = "0x2000162")]
public class VRLog : MonoBehaviour
{
	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRLog instance;

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Text textOutputLog;

	[Token(Token = "0x4000DB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("TextOutputContinuous")]
	private Text textOutputContinuous;

	[Token(Token = "0x4000DB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string continuousText;

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x8BF398", Offset = "0x8BF398", VA = "0x8BF398")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x8BF3F0", Offset = "0x8BF3F0", VA = "0x8BF3F0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x8BF45C", Offset = "0x8BF45C", VA = "0x8BF45C")]
	[Conditional("ENABLE_VR_LOG")]
	public static void Log(string s)
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x8BF584", Offset = "0x8BF584", VA = "0x8BF584")]
	[Conditional("ENABLE_VR_LOG")]
	public static void Log(object o)
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x8BF58C", Offset = "0x8BF58C", VA = "0x8BF58C")]
	[Conditional("ENABLE_VR_LOG")]
	public static void LogContinuous(object o)
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x8BF590", Offset = "0x8BF590", VA = "0x8BF590")]
	[Conditional("ENABLE_VR_LOG")]
	public static void LogContinuous(string s)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x8BF6B8", Offset = "0x8BF6B8", VA = "0x8BF6B8")]
	public VRLog()
	{
	}
}
[Token(Token = "0x2000163")]
public static class CLZF2
{
	[Token(Token = "0x4000DB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly uint HLOG;

	[Token(Token = "0x4000DBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly uint HSIZE;

	[Token(Token = "0x4000DBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly uint MAX_LIT;

	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly uint MAX_OFF;

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly uint MAX_REF;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly long[] HashTable;

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x8BF718", Offset = "0x8BF718", VA = "0x8BF718")]
	public static byte[] Compress(byte[] inputBytes)
	{
		return null;
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x8BFF08", Offset = "0x8BFF08", VA = "0x8BFF08")]
	public static byte[] Decompress(byte[] inputBytes)
	{
		return null;
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x8BF808", Offset = "0x8BF808", VA = "0x8BF808")]
	public static int lzf_compress(byte[] input, ref byte[] output)
	{
		return default(int);
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x8BFFF8", Offset = "0x8BFFF8", VA = "0x8BFFF8")]
	public static int lzf_decompress(byte[] input, ref byte[] output)
	{
		return default(int);
	}
}
[Token(Token = "0x2000164")]
public static class Extensions
{
	[Token(Token = "0x60007F6")]
	[Address(RVA = "0x8C0270", Offset = "0x8C0270", VA = "0x8C0270")]
	public static void AddForceNewtonian(this Rigidbody rigidbody, Vector3 force, ForceMode forceMode, Rigidbody other)
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0x8C02D4", Offset = "0x8C02D4", VA = "0x8C02D4")]
	public static float TwoSidedLerp(float min, float midPoint, float max, float t)
	{
		return default(float);
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x8C0340", Offset = "0x8C0340", VA = "0x8C0340")]
	public static string ToFanfareString(this PlayerInventoryItem item)
	{
		return null;
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x8C0624", Offset = "0x8C0624", VA = "0x8C0624")]
	internal static void DoNothing(Vector3 foktog)
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x8C0650", Offset = "0x8C0650", VA = "0x8C0650")]
	public static string ToFanfareString(this StyleAction styleAction)
	{
		return null;
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x8C094C", Offset = "0x8C094C", VA = "0x8C094C")]
	public static Vector3 CurrentLinearOffset(this Joint joint, Space space = Space.World)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x8C0A84", Offset = "0x8C0A84", VA = "0x8C0A84")]
	public static Vector3 GetFurthestPointOnBounds(this Bounds bounds, Vector3 point)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000165")]
public class FakeTarget : MonoBehaviour, AITargetable
{
	[Token(Token = "0x17000101")]
	public Renderer Renderer
	{
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x8C0C04", Offset = "0x8C0C04", VA = "0x8C0C04", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000102")]
	public Vector3 position
	{
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x8C0C0C", Offset = "0x8C0C0C", VA = "0x8C0C0C", Slot = "8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000103")]
	public Vector3 leftArmPos
	{
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x8C0C2C", Offset = "0x8C0C2C", VA = "0x8C0C2C", Slot = "9")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000104")]
	public Vector3 rightArmPos
	{
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x8C0C4C", Offset = "0x8C0C4C", VA = "0x8C0C4C", Slot = "10")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000105")]
	public bool IsDead
	{
		[Token(Token = "0x6000801")]
		[Address(RVA = "0x8C0C6C", Offset = "0x8C0C6C", VA = "0x8C0C6C", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x8C0C74", Offset = "0x8C0C74", VA = "0x8C0C74", Slot = "4")]
	public bool IsPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x8C0C7C", Offset = "0x8C0C7C", VA = "0x8C0C7C", Slot = "5")]
	public bool HasRightArm()
	{
		return default(bool);
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x8C0C84", Offset = "0x8C0C84", VA = "0x8C0C84", Slot = "6")]
	public bool HasLeftArm()
	{
		return default(bool);
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x8C0C8C", Offset = "0x8C0C8C", VA = "0x8C0C8C")]
	public FakeTarget()
	{
	}
}
[Token(Token = "0x2000166")]
public static class FileIO
{
	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool isProgressDirty;

	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	private static bool isOptionsDirty;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly ulong mountSize;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly bool areAllSavesImmediate;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Queue<(Action saveFunction, Action callback)> saveQueue;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static PlayerProgress cachedProgress;

	[Token(Token = "0x4000DC5")]
	public const string SaveFileName = "progress.sav";

	[Token(Token = "0x4000DC6")]
	public const string OptionsFileName = "options.sav";

	[Token(Token = "0x4000DC7")]
	public const string OptionsXmlFileName = "options.xml";

	[Token(Token = "0x17000106")]
	public static string SaveFolderName
	{
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x8C0C94", Offset = "0x8C0C94", VA = "0x8C0C94")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000107")]
	public static ulong MountSize
	{
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x8C0C9C", Offset = "0x8C0C9C", VA = "0x8C0C9C")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x8C0CF4", Offset = "0x8C0CF4", VA = "0x8C0CF4")]
	static FileIO()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x8C0D9C", Offset = "0x8C0D9C", VA = "0x8C0D9C")]
	internal static PlayerProgress LoadProgress()
	{
		return null;
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x8C18F4", Offset = "0x8C18F4", VA = "0x8C18F4")]
	private static void SaveProgressImmediate()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x8C22A0", Offset = "0x8C22A0", VA = "0x8C22A0")]
	public static void SaveProgress(PlayerProgress progress, bool isImmediate = false, [Optional] Action onComplete)
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x8C2450", Offset = "0x8C2450", VA = "0x8C2450")]
	public static Options LoadOptions()
	{
		return null;
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x8C2EBC", Offset = "0x8C2EBC", VA = "0x8C2EBC")]
	private static void SaveOptionsImmediate()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x8C376C", Offset = "0x8C376C", VA = "0x8C376C")]
	public static void SaveOptions(bool isImmediate = false, [Optional] Action onComplete)
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x8C38F4", Offset = "0x8C38F4", VA = "0x8C38F4")]
	public static bool CheckSaveStatus([Optional] Action onComplete)
	{
		return default(bool);
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x8C21CC", Offset = "0x8C21CC", VA = "0x8C21CC")]
	private static void CheckSavesFolder()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x8C3B3C", Offset = "0x8C3B3C", VA = "0x8C3B3C")]
	private static void ResaveAllData()
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0x8C2254", Offset = "0x8C2254", VA = "0x8C2254")]
	private static void OnSaveComplete(Exception exception)
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0x8C3D38", Offset = "0x8C3D38", VA = "0x8C3D38")]
	private static void InvokeCallbackFromQueue()
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0x8C3E6C", Offset = "0x8C3E6C", VA = "0x8C3E6C")]
	private static void SaveIcon()
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x8C3E70", Offset = "0x8C3E70", VA = "0x8C3E70")]
	private static void SaveIconCallback(Exception exception)
	{
	}
}
[Token(Token = "0x2000167")]
public class MeshDebug : MonoBehaviour
{
	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mesh mesh;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float normalLength;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3[] normals;

	[Token(Token = "0x4000DCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3[] verts;

	[Token(Token = "0x4000DCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool drawNormals;

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x8C3E74", Offset = "0x8C3E74", VA = "0x8C3E74")]
	private void Update()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x8C41A8", Offset = "0x8C41A8", VA = "0x8C41A8")]
	public MeshDebug()
	{
	}
}
[Token(Token = "0x2000168")]
public class SimpleCameraMoveAndPush : MonoBehaviour, AITargetable
{
	[Token(Token = "0x4000DCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float pushForce;

	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float impulseForce;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float fireVelocity;

	[Token(Token = "0x4000DD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SelectionHighlighter highlighter;

	[Token(Token = "0x4000DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool accurateBlood;

	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform fistFireTransform;

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject firePrefab;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private EnemySetupInfo esi;

	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Grapple grapple;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool startInSlowMo;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private int bloodRate;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool randomFireRotation;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[SerializeField]
	private bool autoDestructProjectile;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private EnemySpawner enemySpawner;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Camera mainCamera;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Camera myCamera;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool moved;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float extraMoveBonus;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 lastMousePos;

	[Token(Token = "0x17000108")]
	public Renderer Renderer
	{
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x8C41B8", Offset = "0x8C41B8", VA = "0x8C41B8", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000109")]
	public Vector3 position
	{
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x8C41C0", Offset = "0x8C41C0", VA = "0x8C41C0", Slot = "8")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700010A")]
	public Vector3 leftArmPos
	{
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x8C41E0", Offset = "0x8C41E0", VA = "0x8C41E0", Slot = "9")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700010B")]
	public Vector3 rightArmPos
	{
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x8C4200", Offset = "0x8C4200", VA = "0x8C4200", Slot = "10")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700010C")]
	public bool IsDead
	{
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x8C4220", Offset = "0x8C4220", VA = "0x8C4220", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x8C4228", Offset = "0x8C4228", VA = "0x8C4228")]
	private void Start()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x8C4390", Offset = "0x8C4390", VA = "0x8C4390")]
	private void Update()
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x8C5DA0", Offset = "0x8C5DA0", VA = "0x8C5DA0", Slot = "4")]
	public bool IsPlayer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x8C5DA8", Offset = "0x8C5DA8", VA = "0x8C5DA8", Slot = "5")]
	public bool HasRightArm()
	{
		return default(bool);
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0x8C5DB0", Offset = "0x8C5DB0", VA = "0x8C5DB0", Slot = "6")]
	public bool HasLeftArm()
	{
		return default(bool);
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x8C5DB8", Offset = "0x8C5DB8", VA = "0x8C5DB8")]
	public SimpleCameraMoveAndPush()
	{
	}
}
[Token(Token = "0x2000169")]
public class VelocityBasedSound : MonoBehaviour
{
	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float velocityCutoff;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float velocityPitchScale;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float velocityVolumeScale;

	[Token(Token = "0x4000DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource audio;

	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody rigidbody;

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x8C5DD0", Offset = "0x8C5DD0", VA = "0x8C5DD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x8C5F64", Offset = "0x8C5F64", VA = "0x8C5F64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0x8C61F0", Offset = "0x8C61F0", VA = "0x8C61F0")]
	public VelocityBasedSound()
	{
	}
}
[Token(Token = "0x200016A")]
public class ArmorPiece : DamageRelay
{
	[Token(Token = "0x200016B")]
	public enum ShatterSound
	{
		[Token(Token = "0x4000E00")]
		Normal,
		[Token(Token = "0x4000E01")]
		Small,
		[Token(Token = "0x4000E02")]
		Special,
		[Token(Token = "0x4000E03")]
		Leather
	}

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Action<ArmorPiece> Detached;

	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool detached;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	private bool haveEnabledColliders;

	[Token(Token = "0x4000DE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public List<Collider> colliders;

	[Token(Token = "0x4000DEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private List<Collider> baseColliders;

	[Token(Token = "0x4000DEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected Poolable poolable;

	[Token(Token = "0x4000DED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Material goldMaterial;

	[Token(Token = "0x4000DEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Material blackMaterial;

	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Material bronzeMaterial;

	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Material tier2GoldMaterial;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Material tier2BronzeMaterial;

	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Material startMaterial;

	[Token(Token = "0x4000DF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Grabbable grabbable;

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private FixedJoint fixedJoint;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int startLayer;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private int defaultLayer;

	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool hasSpecialMaterial;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject shatteredPrefab;

	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public ShatterSound shatterSound;

	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Renderer[] renderers;

	[Token(Token = "0x4000DFB")]
	private const float BaseColliderEnableDelay = 0.7f;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float colliderEnableDelay;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float jointFatiqueLeft;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	protected SeverableLimb armoredTo;

	[Token(Token = "0x1700010D")]
	public bool IsInPool
	{
		[Token(Token = "0x6000826")]
		[Address(RVA = "0x8C61F8", Offset = "0x8C61F8", VA = "0x8C61F8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000827")]
		[Address(RVA = "0x8C6200", Offset = "0x8C6200", VA = "0x8C6200")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700010E")]
	public SeverableLimb ArmoredTo
	{
		[Token(Token = "0x6000828")]
		[Address(RVA = "0x8C620C", Offset = "0x8C620C", VA = "0x8C620C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000829")]
		[Address(RVA = "0x8C6214", Offset = "0x8C6214", VA = "0x8C6214")]
		set
		{
		}
	}

	[Token(Token = "0x1700010F")]
	public override bool IsTakingFloorDamage
	{
		[Token(Token = "0x600082E")]
		[Address(RVA = "0x8C67FC", Offset = "0x8C67FC", VA = "0x8C67FC", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000110")]
	public override bool IsArmorPiece
	{
		[Token(Token = "0x600082F")]
		[Address(RVA = "0x8C68B8", Offset = "0x8C68B8", VA = "0x8C68B8", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x8C62B4", Offset = "0x8C62B4", VA = "0x8C62B4")]
	public void SetMaterialGold()
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x8C63E8", Offset = "0x8C63E8", VA = "0x8C63E8", Slot = "9")]
	protected virtual void AttachToLimb()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x8C6578", Offset = "0x8C6578", VA = "0x8C6578")]
	protected void ResetArmor()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x8C66C8", Offset = "0x8C66C8", VA = "0x8C66C8")]
	public void SetMaterialBronze()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x8C68C0", Offset = "0x8C68C0", VA = "0x8C68C0", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x8C6B74", Offset = "0x8C6B74", VA = "0x8C6B74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x8C6D68", Offset = "0x8C6D68", VA = "0x8C6D68")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x8C700C", Offset = "0x8C700C", VA = "0x8C700C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x8C75DC", Offset = "0x8C75DC", VA = "0x8C75DC", Slot = "7")]
	public override bool Damage(DamageType damageType, Vector3 relativeVelocity, Vector3 force, Vector3 pos, GameObject sender, Vector3 hitNormal, Collision collision, AITargetable responsibleEntity, bool isFloor = false, bool showDamage = true)
	{
		return default(bool);
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x8C796C", Offset = "0x8C796C", VA = "0x8C796C", Slot = "10")]
	protected virtual bool DamageInternal(Vector3 pos, Vector3 force, float amount, Collision collision, DamageType damageType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x8C79A4", Offset = "0x8C79A4", VA = "0x8C79A4", Slot = "11")]
	protected virtual void Detach(Vector3 pos, Vector3 force, Collision collision)
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x8C82F8", Offset = "0x8C82F8", VA = "0x8C82F8", Slot = "12")]
	public virtual void PoolOrDestroy()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x8C81A0", Offset = "0x8C81A0", VA = "0x8C81A0")]
	protected void PlaySound()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x8C83E8", Offset = "0x8C83E8", VA = "0x8C83E8")]
	public ArmorPiece()
	{
	}
}
[Token(Token = "0x200016C")]
public class Arrow : WeaponHandle
{
	[Token(Token = "0x4000E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool isNocked;

	[Token(Token = "0x4000E05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Transform nockPoint;

	[Token(Token = "0x4000E06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform nockPointFront;

	[Token(Token = "0x4000E07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public ArrowDamagePoint damagePoint;

	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Bow nockedTo;

	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool inFlight;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	public bool isGoldenArrow;

	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Material goldenMaterial;

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Material tier2GoldenMaterial;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public FixedJoint stuckJoint;

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Vector3 lastPos;

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Bow quiveredTo;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Enemy ignoredCollisionsWith;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool isCrossbowBolt;

	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private int defaultLayer;

	[Token(Token = "0x4000E13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private bool wasArrowDroppedOrFired;

	[Token(Token = "0x17000111")]
	public bool IsNocked
	{
		[Token(Token = "0x600083A")]
		[Address(RVA = "0x8C83FC", Offset = "0x8C83FC", VA = "0x8C83FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000112")]
	public override bool IsTelekineticallyGrabbable
	{
		[Token(Token = "0x600083B")]
		[Address(RVA = "0x8C8404", Offset = "0x8C8404", VA = "0x8C8404", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000113")]
	public float FireTime
	{
		[Token(Token = "0x6000843")]
		[Address(RVA = "0x8C9438", Offset = "0x8C9438", VA = "0x8C9438")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x8C9440", Offset = "0x8C9440", VA = "0x8C9440")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x8C841C", Offset = "0x8C841C", VA = "0x8C841C")]
	protected void Start()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x8C84AC", Offset = "0x8C84AC", VA = "0x8C84AC", Slot = "7")]
	public override void PrepareForTelekineticPull()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x8C8588", Offset = "0x8C8588", VA = "0x8C8588")]
	public void Nock(Bow bow)
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x8C85AC", Offset = "0x8C85AC", VA = "0x8C85AC")]
	public void UnStick()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x8C865C", Offset = "0x8C865C", VA = "0x8C865C", Slot = "9")]
	public override void Grabbed(GrabHand hand)
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x8C8B6C", Offset = "0x8C8B6C", VA = "0x8C8B6C", Slot = "10")]
	public override void LetGo(GrabHand hand)
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x8C9118", Offset = "0x8C9118", VA = "0x8C9118")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x8C5CAC", Offset = "0x8C5CAC", VA = "0x8C5CAC")]
	internal void Fire()
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x8C94C4", Offset = "0x8C94C4", VA = "0x8C94C4")]
	internal void HitTarget(Collision collision)
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x8C97AC", Offset = "0x8C97AC", VA = "0x8C97AC")]
	private void SetBreakForce()
	{
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0x8C9838", Offset = "0x8C9838", VA = "0x8C9838")]
	private void OnJointBreak(float breakForce)
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0x8C9860", Offset = "0x8C9860", VA = "0x8C9860")]
	public Arrow()
	{
	}
}
[Token(Token = "0x200016D")]
public class ArrowDamagePoint : DamagerRigidbody
{
	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Arrow arrow;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private int damageCount;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private List<Enemy> enemiesDamaged;

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x8C9448", Offset = "0x8C9448", VA = "0x8C9448")]
	public void ClearAverageVelocity()
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0x8C9868", Offset = "0x8C9868", VA = "0x8C9868", Slot = "4")]
	protected override void DoDamage(DamageRelay dr)
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x8C9988", Offset = "0x8C9988", VA = "0x8C9988")]
	private void Deflect(Collision col)
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x8C9AB0", Offset = "0x8C9AB0", VA = "0x8C9AB0", Slot = "6")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x8C9CC8", Offset = "0x8C9CC8", VA = "0x8C9CC8")]
	public ArrowDamagePoint()
	{
	}
}
[Token(Token = "0x200016E")]
public class BoulderKnock : MonoBehaviour
{
	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float impulseM;

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x8C9D50", Offset = "0x8C9D50", VA = "0x8C9D50")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x8CA16C", Offset = "0x8CA16C", VA = "0x8CA16C")]
	public BoulderKnock()
	{
	}
}
[Token(Token = "0x200016F")]
public class Bow : WeaponHandle
{
	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private LineRenderer bowStringLine;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public PrefabHolder prefabHolder;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform[] bowStringAttachPoints;

	[Token(Token = "0x4000E1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform nockPoint;

	[Token(Token = "0x4000E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform nockRestPoint;

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform[] arrowHolders;

	[Token(Token = "0x4000E1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private AudioSource audio;

	[Token(Token = "0x4000E20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float testVel;

	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Arrow testNockArrow;

	[Token(Token = "0x4000E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool nockNow;

	[Token(Token = "0x4000E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	public bool fireNow;

	[Token(Token = "0x4000E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Transform[] topBones;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Transform[] botBones;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public float pullToAnimM;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Collider[] bowColliders;

	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float defaultDistance;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Arrow nockedArrow;

	[Token(Token = "0x4000E2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public float velocityMultiplier;

	[Token(Token = "0x4000E2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[SerializeField]
	private float psvrVelocityMultiplier;

	[Token(Token = "0x4000E2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Arrow[] heldArrows;

	[Token(Token = "0x4000E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool isHeldInPlayerRightHand;

	[Token(Token = "0x4000E2E")]
	private const int OverlapSphereColliderMax = 8;

	[Token(Token = "0x4000E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private readonly Collider[] colliders;

	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float lastVel;

	[Token(Token = "0x4000E31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private int arrowNockLayerMask;

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Collider nockedArrowCollider;

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x8CA174", Offset = "0x8CA174", VA = "0x8CA174", Slot = "9")]
	public override void Grabbed(GrabHand hand)
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x8CA2D8", Offset = "0x8CA2D8", VA = "0x8CA2D8")]
	private void SetAllArrowsGrabbable(bool grabbable)
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x8CA3E4", Offset = "0x8CA3E4", VA = "0x8CA3E4")]
	private void ResetAnimation()
	{
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x8CA6A0", Offset = "0x8CA6A0", VA = "0x8CA6A0")]
	private void RunAnimation()
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x8C8BE4", Offset = "0x8C8BE4", VA = "0x8C8BE4")]
	internal void FireArrow()
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x8CA95C", Offset = "0x8CA95C", VA = "0x8CA95C", Slot = "10")]
	public override void LetGo(GrabHand hand)
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x8CAB08", Offset = "0x8CAB08", VA = "0x8CAB08", Slot = "11")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x8CB3C4", Offset = "0x8CB3C4", VA = "0x8CB3C4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x8CB760", Offset = "0x8CB760", VA = "0x8CB760")]
	private bool TryNockArrowAround(Vector3 arrowCheckPosition, float radius)
	{
		return default(bool);
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x8CBA28", Offset = "0x8CBA28", VA = "0x8CBA28")]
	private void RunSound()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x8CB8AC", Offset = "0x8CB8AC", VA = "0x8CB8AC")]
	public void Nock(Arrow arrow)
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x8CB140", Offset = "0x8CB140", VA = "0x8CB140")]
	public void GrabArrow(Arrow arrow)
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x8C8984", Offset = "0x8C8984", VA = "0x8C8984")]
	public void LetGoOfArrow(Arrow arrow)
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x8CA390", Offset = "0x8CA390", VA = "0x8CA390")]
	private void FlipArrowHolderHandedness(Transform holder)
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x8CBF1C", Offset = "0x8CBF1C", VA = "0x8CBF1C")]
	public Bow()
	{
	}
}
[Token(Token = "0x2000170")]
public class BreakableArmorPiece : ArmorPiece
{
	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private List<DamageableShieldChunk> chunks;

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x8CBF88", Offset = "0x8CBF88", VA = "0x8CBF88", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x8CC0F0", Offset = "0x8CC0F0", VA = "0x8CC0F0", Slot = "10")]
	protected override bool DamageInternal(Vector3 pos, Vector3 force, float amount, Collision collision, DamageType damageType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x8CC434", Offset = "0x8CC434", VA = "0x8CC434", Slot = "9")]
	protected override void AttachToLimb()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x8CC58C", Offset = "0x8CC58C", VA = "0x8CC58C", Slot = "11")]
	protected override void Detach(Vector3 pos, Vector3 force, Collision collision)
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x8CC84C", Offset = "0x8CC84C", VA = "0x8CC84C", Slot = "12")]
	public override void PoolOrDestroy()
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x8CCA44", Offset = "0x8CCA44", VA = "0x8CCA44")]
	public BreakableArmorPiece()
	{
	}
}
[Token(Token = "0x2000171")]
public class Bullet : DamagerRigidbody
{
	[Token(Token = "0x4000E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public ParticleSystem trailParticles;

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x8CCA58", Offset = "0x8CCA58", VA = "0x8CCA58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x8CCAC8", Offset = "0x8CCAC8", VA = "0x8CCAC8", Slot = "6")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x8CCC88", Offset = "0x8CCC88", VA = "0x8CCC88")]
	public Bullet()
	{
	}
}
[Token(Token = "0x2000172")]
public class ChainLinkSoundPlayer : MonoBehaviour
{
	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float soundDistance;

	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float travelledDistance;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 lastPos;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x8CCC90", Offset = "0x8CCC90", VA = "0x8CCC90")]
	private void Start()
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x8CCD6C", Offset = "0x8CCD6C", VA = "0x8CCD6C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x8CCF4C", Offset = "0x8CCF4C", VA = "0x8CCF4C")]
	public ChainLinkSoundPlayer()
	{
	}
}
[Token(Token = "0x2000173")]
public class ClawVisual : MonoBehaviour
{
	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool extended;

	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SkinnedMeshRenderer rend;

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x8CCF54", Offset = "0x8CCF54", VA = "0x8CCF54")]
	private void Start()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x8CCFAC", Offset = "0x8CCFAC", VA = "0x8CCFAC")]
	private void Update()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x8CD04C", Offset = "0x8CD04C", VA = "0x8CD04C")]
	public bool IsFullyExtended()
	{
		return default(bool);
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x8CD07C", Offset = "0x8CD07C", VA = "0x8CD07C")]
	public ClawVisual()
	{
	}
}
[Token(Token = "0x2000174")]
public class CrabCaestus : GrabHand
{
	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform crankJointAnchorLeft;

	[Token(Token = "0x4000E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Transform crankJointAnchorRight;

	[Token(Token = "0x4000E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform clawBottom;

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Transform clawTop;

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Transform damagePoint;

	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public CrabCaestusClaw topClaw;

	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public CrabCaestusClaw botClaw;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Rigidbody grippedObject;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool opening;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float grabAmount;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float crankMax;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float crankConsumeSpeed;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float openSpeed;

	[Token(Token = "0x4000E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private float closeSpeed;

	[Token(Token = "0x4000E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float accelM;

	[Token(Token = "0x4000E4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Joint baseJoint;

	[Token(Token = "0x4000E4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Transform triggerTransform;

	[Token(Token = "0x4000E4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Vector3 topDefaultPos;

	[Token(Token = "0x4000E4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public Vector3 botDefaultPos;

	[Token(Token = "0x4000E4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Transform[] cogs1;

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Transform[] cogs2;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Quaternion topDefaultRot;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Quaternion botDefaultRot;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private bool haveInitialized;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float damageThreshold;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Rigidbody ignoredCollisionsWith;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Joint gripJoint;

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x8CD084", Offset = "0x8CD084", VA = "0x8CD084")]
	private void Start()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x8CD1CC", Offset = "0x8CD1CC", VA = "0x8CD1CC", Slot = "4")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x8CD9C0", Offset = "0x8CD9C0", VA = "0x8CD9C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x8CD4D0", Offset = "0x8CD4D0", VA = "0x8CD4D0")]
	private void RunAnimation()
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x8CD1E4", Offset = "0x8CD1E4", VA = "0x8CD1E4")]
	private void RunGrab()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x8CDE48", Offset = "0x8CDE48", VA = "0x8CDE48")]
	private void CheckDamage()
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x8CE37C", Offset = "0x8CE37C", VA = "0x8CE37C")]
	private void TemporarilyIgnoreCollision()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x8CE488", Offset = "0x8CE488", VA = "0x8CE488")]
	private void ReactivateCollisions()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x8CDB08", Offset = "0x8CDB08", VA = "0x8CDB08")]
	private void CheckGripObject()
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x8CE7E0", Offset = "0x8CE7E0", VA = "0x8CE7E0")]
	private void OnJointBreak(float force)
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x8CE56C", Offset = "0x8CE56C", VA = "0x8CE56C")]
	private void GripObject(Rigidbody rb)
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x8CE208", Offset = "0x8CE208", VA = "0x8CE208")]
	private void ReleaseGrippedObject()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0x8CE7EC", Offset = "0x8CE7EC", VA = "0x8CE7EC")]
	public CrabCaestus()
	{
	}
}
[Token(Token = "0x2000175")]
public class CrabCaestusClaw : MonoBehaviour
{
	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ConfigurableJoint joint;

	[Token(Token = "0x4000E57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Rigidbody> collidingRigidbodies;

	[Token(Token = "0x4000E58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody otherClaw;

	[Token(Token = "0x600087D")]
	[Address(RVA = "0x8CE800", Offset = "0x8CE800", VA = "0x8CE800")]
	private void Awake()
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0x8CE858", Offset = "0x8CE858", VA = "0x8CE858")]
	private void Start()
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0x8CE8F0", Offset = "0x8CE8F0", VA = "0x8CE8F0")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0x8CEB3C", Offset = "0x8CEB3C", VA = "0x8CEB3C")]
	private void OnCollisionExit(Collision col)
	{
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0x8CEC3C", Offset = "0x8CEC3C", VA = "0x8CEC3C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x8CED34", Offset = "0x8CED34", VA = "0x8CED34")]
	public CrabCaestusClaw()
	{
	}
}
[Token(Token = "0x2000176")]
public class CrossbowCaestus : MonoBehaviour
{
	[Token(Token = "0x4000E59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Grabbable crank;

	[Token(Token = "0x4000E5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ConfigurableJoint crankJoint;

	[Token(Token = "0x4000E5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator crossbowAnimator;

	[Token(Token = "0x4000E5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Arrow boltPrefab;

	[Token(Token = "0x4000E5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Quaternion lastRotation;

	[Token(Token = "0x4000E5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform animGear;

	[Token(Token = "0x4000E5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform mountLeftHand;

	[Token(Token = "0x4000E60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource audioSource;

	[Token(Token = "0x4000E61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject flipMesh;

	[Token(Token = "0x4000E62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform fireTransform;

	[Token(Token = "0x4000E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float fireVelocity;

	[Token(Token = "0x4000E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float rotationToCrankM;

	[Token(Token = "0x4000E65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float crankedM;

	[Token(Token = "0x4000E66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float crankToAnimM;

	[Token(Token = "0x4000E67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool testFire;

	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Fist ownerFist;

	[Token(Token = "0x17000114")]
	private bool ReadyToFire
	{
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x8CEEE8", Offset = "0x8CEEE8", VA = "0x8CEEE8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x8CED3C", Offset = "0x8CED3C", VA = "0x8CED3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x8CEEFC", Offset = "0x8CEEFC", VA = "0x8CEEFC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x8CF6E8", Offset = "0x8CF6E8", VA = "0x8CF6E8")]
	private void LoadCrossbow()
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x8CF6EC", Offset = "0x8CF6EC", VA = "0x8CF6EC")]
	public void HoldFire()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x8CF2FC", Offset = "0x8CF2FC", VA = "0x8CF2FC")]
	public void Fire()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x8CF248", Offset = "0x8CF248", VA = "0x8CF248")]
	private void RunAnimation()
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x8CF7D4", Offset = "0x8CF7D4", VA = "0x8CF7D4")]
	public CrossbowCaestus()
	{
	}
}
[Token(Token = "0x2000177")]
public class DamagableShield : MonoBehaviour
{
	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<DamageableShieldChunk> chunks;

	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float bluntAOE;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool haveNotifiedWielderOfMassiveDamage;

	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int brokenChunks;

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x7D0374", Offset = "0x7D0374", VA = "0x7D0374")]
	private void Awake()
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x7D04D4", Offset = "0x7D04D4", VA = "0x7D04D4")]
	public void Damage(Collision col, Vector3 velocity, Vector3 damage, DamageType damageType, bool isHeavy)
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0x7D0CD4", Offset = "0x7D0CD4", VA = "0x7D0CD4")]
	public DamagableShield()
	{
	}
}
[Token(Token = "0x2000178")]
public class DamageableShieldChunk : MonoBehaviour
{
	[Token(Token = "0x4000E6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float health;

	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool detached;

	[Token(Token = "0x4000E6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DamageableShieldChunk[] parentChunks;

	[Token(Token = "0x4000E70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool haveEnabledColliders;

	[Token(Token = "0x4000E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Collider col;

	[Token(Token = "0x4000E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string breakSound;

	[Token(Token = "0x4000E73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentLifeTime;

	[Token(Token = "0x4000E74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 basePosition;

	[Token(Token = "0x4000E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion baseRotation;

	[Token(Token = "0x4000E76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform parentTransform;

	[Token(Token = "0x4000E77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Rigidbody rgb;

	[Token(Token = "0x4000E78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int armorLayer;

	[Token(Token = "0x4000E79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int onlyColliderFloorLayer;

	[Token(Token = "0x4000E7A")]
	private const float LifeTime = 3f;

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x7D0CE4", Offset = "0x7D0CE4", VA = "0x7D0CE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x7D0BE4", Offset = "0x7D0BE4", VA = "0x7D0BE4")]
	internal bool Damage(Collision col, Vector3 velocity, Vector3 damage)
	{
		return default(bool);
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x7D0DF4", Offset = "0x7D0DF4", VA = "0x7D0DF4")]
	public void Detach(Vector3 force, Collision collision, bool playSound = true)
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x7D1278", Offset = "0x7D1278", VA = "0x7D1278")]
	public void ReturnToParent(bool active)
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x7D13A8", Offset = "0x7D13A8", VA = "0x7D13A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x7D13FC", Offset = "0x7D13FC", VA = "0x7D13FC")]
	public DamageableShieldChunk()
	{
	}
}
[Token(Token = "0x2000179")]
public class FrisbeeShield : WeaponBase
{
	[Token(Token = "0x4000E7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private DamagerRigidbody damager;

	[Token(Token = "0x4000E7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float damageScaleHeld;

	[Token(Token = "0x4000E7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float damageScaleThrown;

	[Token(Token = "0x4000E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float forceMultiplier;

	[Token(Token = "0x4000E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float forceOffset;

	[Token(Token = "0x4000E80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Rigidbody rigidbody;

	[Token(Token = "0x4000E81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 lastVelocity;

	[Token(Token = "0x4000E82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Quaternion lastRotation;

	[Token(Token = "0x4000E83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private Vector3 lastAngular;

	[Token(Token = "0x4000E84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<WeaponHandle> handles;

	[Token(Token = "0x4000E85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool canBounce;

	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	private bool isGrabbed;

	[Token(Token = "0x4000E87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	private bool wasGrabbed;

	[Token(Token = "0x4000E88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC3")]
	private bool killedSomeoneThisThrow;

	[Token(Token = "0x4000E89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float travelDistance;

	[Token(Token = "0x4000E8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float lastBounceTime;

	[Token(Token = "0x6000894")]
	[Address(RVA = "0x7D1454", Offset = "0x7D1454", VA = "0x7D1454", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x7D17A4", Offset = "0x7D17A4", VA = "0x7D17A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0x7D1800", Offset = "0x7D1800", VA = "0x7D1800", Slot = "4")]
	public override void NotifyEnemyKilled()
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0x7D1860", Offset = "0x7D1860", VA = "0x7D1860")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0x7D1DE4", Offset = "0x7D1DE4", VA = "0x7D1DE4")]
	private void SetAllCollidersEnabled(bool enabled)
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0x7D1E90", Offset = "0x7D1E90", VA = "0x7D1E90")]
	private void EnableColliders()
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0x7D1E98", Offset = "0x7D1E98", VA = "0x7D1E98")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0x7D2130", Offset = "0x7D2130", VA = "0x7D2130")]
	public FrisbeeShield()
	{
	}
}
[Token(Token = "0x200017A")]
public class GrappleHead : MonoBehaviour
{
	[Token(Token = "0x4000E8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Grapple firedBy;

	[Token(Token = "0x4000E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool hit;

	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isSticky;

	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float gravityResistanceFactor;

	[Token(Token = "0x600089C")]
	[Address(RVA = "0x7D21E4", Offset = "0x7D21E4", VA = "0x7D21E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x7D2248", Offset = "0x7D2248", VA = "0x7D2248")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x7D22D8", Offset = "0x7D22D8", VA = "0x7D22D8")]
	public void LetGo()
	{
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x7D2368", Offset = "0x7D2368", VA = "0x7D2368")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0x7D24E4", Offset = "0x7D24E4", VA = "0x7D24E4")]
	public GrappleHead()
	{
	}
}
[Token(Token = "0x200017B")]
public class GrappleHeadVisual : MonoBehaviour
{
	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] claws;

	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 basePos;

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0x7D24EC", Offset = "0x7D24EC", VA = "0x7D24EC")]
	private void Start()
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0x7D251C", Offset = "0x7D251C", VA = "0x7D251C")]
	public void Open()
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x7D25B4", Offset = "0x7D25B4", VA = "0x7D25B4")]
	public void ReturnToBase()
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0x7D2640", Offset = "0x7D2640", VA = "0x7D2640")]
	public void Close()
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0x7D26F8", Offset = "0x7D26F8", VA = "0x7D26F8")]
	public GrappleHeadVisual()
	{
	}
}
[Token(Token = "0x200017C")]
public class Gun : WeaponBase
{
	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Grabbable reloadLever;

	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Transform reloadLeverTransformPoint;

	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Rigidbody reloadLeverAnchor;

	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float reloadLeverBackPosition;

	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ConfigurableJoint firingPinJoint;

	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GunFiringPinTrigger firingPinTrigger;

	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public PrefabHolder prefabHolder;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float fireVelocity;

	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform fireOrigin;

	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Collider[] barrelColliders;

	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject muzzleFlashPrefab;

	[Token(Token = "0x4000E9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool wasHandleGrabbed;

	[Token(Token = "0x4000E9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float reloadLeverLockCooldown;

	[Token(Token = "0x4000E9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool hasReloadLeverBeenPulledBack;

	[Token(Token = "0x4000E9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	private bool isLoaded;

	[Token(Token = "0x4000EA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	private bool wasLeverGrabbed;

	[Token(Token = "0x4000EA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private float fireCooldown;

	[Token(Token = "0x4000EA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float lastFistDistance;

	[Token(Token = "0x4000EA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float leverGrabCooldown;

	[Token(Token = "0x4000EA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool canPlayLoadFailSound;

	[Token(Token = "0x4000EA5")]
	private const float BreakThreshold = 1f;

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0x7D2700", Offset = "0x7D2700", VA = "0x7D2700", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0x7D27EC", Offset = "0x7D27EC", VA = "0x7D27EC")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0x7D28E4", Offset = "0x7D28E4", VA = "0x7D28E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0x7D3398", Offset = "0x7D3398", VA = "0x7D3398")]
	[ContextMenu("Reload")]
	private void Reload()
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x7D2EC4", Offset = "0x7D2EC4", VA = "0x7D2EC4")]
	[ContextMenu("Fire")]
	private void Fire()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0x7D3440", Offset = "0x7D3440", VA = "0x7D3440")]
	public Gun()
	{
	}
}
[Token(Token = "0x200017D")]
public class GunFiringPinTrigger : MonoBehaviour
{
	[Token(Token = "0x4000EA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Gun gun;

	[Token(Token = "0x4000EA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Fist> fistsInTriggerRange;

	[Token(Token = "0x4000EA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float lastFistDistance;

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x7D3498", Offset = "0x7D3498", VA = "0x7D3498")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x7D3514", Offset = "0x7D3514", VA = "0x7D3514")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x7D3660", Offset = "0x7D3660", VA = "0x7D3660")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x7D2CE8", Offset = "0x7D2CE8", VA = "0x7D2CE8")]
	public float GetClosestFistDistance()
	{
		return default(float);
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0x7D3754", Offset = "0x7D3754", VA = "0x7D3754")]
	public GunFiringPinTrigger()
	{
	}
}
[Token(Token = "0x200017E")]
public class KnifeHandle : WeaponHandle
{
	[Token(Token = "0x4000EA9")]
	private const int PouchCheckResultsPoolSize = 18;

	[Token(Token = "0x4000EAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private DamagerRigidbody damagerRigidbody;

	[Token(Token = "0x4000EAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private LayerMask knifePouchCastMask;

	[Token(Token = "0x4000EAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Collider[] pouchCheckResults;

	[Token(Token = "0x17000115")]
	public override DamagerRigidbody DamagerRigidbody
	{
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x7D375C", Offset = "0x7D375C", VA = "0x7D375C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000116")]
	public override bool IsTelekineticallyGrabbable
	{
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x7D3764", Offset = "0x7D3764", VA = "0x7D3764", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0x7D39D8", Offset = "0x7D39D8", VA = "0x7D39D8", Slot = "7")]
	public override void PrepareForTelekineticPull()
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0x7D378C", Offset = "0x7D378C", VA = "0x7D378C")]
	private bool IsInKnifePouch()
	{
		return default(bool);
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x7D3B7C", Offset = "0x7D3B7C", VA = "0x7D3B7C")]
	public KnifeHandle()
	{
	}
}
[Token(Token = "0x200017F")]
public class KnifePouch : WeaponBase
{
	[Token(Token = "0x4000EAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform[] knifeHolders;

	[Token(Token = "0x4000EAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ThrowingKnife[] heldKnives;

	[Token(Token = "0x4000EAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public PrefabHolder prefabHolder;

	[Token(Token = "0x4000EB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float restockCooldown;

	[Token(Token = "0x17000117")]
	public bool HasAmmo
	{
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x7D4000", Offset = "0x7D4000", VA = "0x7D4000")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x7D3BE8", Offset = "0x7D3BE8", VA = "0x7D3BE8", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x7D40B4", Offset = "0x7D40B4", VA = "0x7D40B4")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0x7D3DE8", Offset = "0x7D3DE8", VA = "0x7D3DE8")]
	public void GrabKnife(ThrowingKnife knife)
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x7D4360", Offset = "0x7D4360", VA = "0x7D4360")]
	public void LetGoOfKnife(ThrowingKnife knife)
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x7D45C0", Offset = "0x7D45C0", VA = "0x7D45C0")]
	public KnifePouch()
	{
	}
}
[Token(Token = "0x2000180")]
public class Rope : MonoBehaviour
{
	[Token(Token = "0x4000EB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer lineRenderer;

	[Token(Token = "0x4000EB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] ropePoints;

	[Token(Token = "0x4000EB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GrappleHead grappleHead;

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x7D4618", Offset = "0x7D4618", VA = "0x7D4618")]
	private void Start()
	{
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x7D4644", Offset = "0x7D4644", VA = "0x7D4644")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0x7D470C", Offset = "0x7D470C", VA = "0x7D470C")]
	public Rope()
	{
	}
}
[Token(Token = "0x2000181")]
public class ShoulderSeatArmorPiece : ArmorPiece
{
	[Token(Token = "0x4000EB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Collider seatCollider;

	[Token(Token = "0x4000EB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public Transform spawnPos;

	[Token(Token = "0x17000118")]
	public Enemy mount
	{
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x7D4714", Offset = "0x7D4714", VA = "0x7D4714")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x7D471C", Offset = "0x7D471C", VA = "0x7D471C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x7D472C", Offset = "0x7D472C", VA = "0x7D472C", Slot = "9")]
	protected override void AttachToLimb()
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x7D4824", Offset = "0x7D4824", VA = "0x7D4824", Slot = "11")]
	protected override void Detach(Vector3 pos, Vector3 force, Collision collision)
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x7D4930", Offset = "0x7D4930", VA = "0x7D4930")]
	public ShoulderSeatArmorPiece()
	{
	}
}
[Token(Token = "0x2000182")]
public class Spear : TwoHandedWeaponBase
{
	[Token(Token = "0x4000EB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DamagerRigidbody spearHead;

	[Token(Token = "0x4000EB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Collider shaftCollider;

	[Token(Token = "0x4000EB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Collider headCollider;

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x7D4938", Offset = "0x7D4938", VA = "0x7D4938")]
	public void SetLayerToDontCollide()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x7D4A40", Offset = "0x7D4A40", VA = "0x7D4A40", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x7D4A5C", Offset = "0x7D4A5C", VA = "0x7D4A5C")]
	public Spear()
	{
	}
}
[Token(Token = "0x2000183")]
public class StraightenInAir : MonoBehaviour
{
	[Token(Token = "0x4000EBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidbody;

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x7D4AB8", Offset = "0x7D4AB8", VA = "0x7D4AB8")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x7D4E8C", Offset = "0x7D4E8C", VA = "0x7D4E8C")]
	public StraightenInAir()
	{
	}
}
[Token(Token = "0x2000184")]
public class ThrowingKnife : WeaponBase
{
	[Token(Token = "0x4000EBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Joint stuckJoint;

	[Token(Token = "0x4000EBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ThrowingKnifeTip knifeTip;

	[Token(Token = "0x4000EBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public KnifePouch holsteredTo;

	[Token(Token = "0x4000EBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool wasGrabbed;

	[Token(Token = "0x4000EBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Enemy ignoredCollisionsWith;

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x7D4E94", Offset = "0x7D4E94", VA = "0x7D4E94")]
	internal void HitTarget(Collision collision)
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x7D3ADC", Offset = "0x7D3ADC", VA = "0x7D3ADC")]
	public void UnImpale()
	{
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0x7D505C", Offset = "0x7D505C", VA = "0x7D505C")]
	protected void FixedUpdate()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0x7D544C", Offset = "0x7D544C", VA = "0x7D544C")]
	public ThrowingKnife()
	{
	}
}
[Token(Token = "0x2000185")]
public class ThrowingKnifeTip : DamagerRigidbody
{
	[Token(Token = "0x4000EC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public ThrowingKnife throwingKnife;

	[Token(Token = "0x4000EC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Grabbable handle;

	[Token(Token = "0x4000EC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public float scaleDamageWhileHeld;

	[Token(Token = "0x4000EC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float defaultScaleDamage;

	[Token(Token = "0x4000EC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private bool didDamage;

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0x7D54A4", Offset = "0x7D54A4", VA = "0x7D54A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0x7D54B0", Offset = "0x7D54B0", VA = "0x7D54B0", Slot = "4")]
	protected override void DoDamage(DamageRelay dr)
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x7D54C0", Offset = "0x7D54C0", VA = "0x7D54C0", Slot = "5")]
	protected override void FixedUpdate()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0x7D5638", Offset = "0x7D5638", VA = "0x7D5638", Slot = "6")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0x7D5684", Offset = "0x7D5684", VA = "0x7D5684")]
	public ThrowingKnifeTip()
	{
	}
}
[Token(Token = "0x2000186")]
public class TwoHandedWeaponBase : WeaponBase
{
	[Token(Token = "0x4000EC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Grabbable frontGrip;

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0x7D4A60", Offset = "0x7D4A60", VA = "0x7D4A60")]
	public TwoHandedWeaponBase()
	{
	}
}
[Token(Token = "0x2000187")]
public class TwoHandedWeaponFrontGrip : MonoBehaviour
{
	[Token(Token = "0x4000EC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ConfigurableJoint weaponJoint;

	[Token(Token = "0x4000EC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ConfigurableJoint handleJoint;

	[Token(Token = "0x4000EC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform handle;

	[Token(Token = "0x4000EC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float weaponJointConnectedBodyMassScale;

	[Token(Token = "0x4000ECA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public DamagerRigidbody damager;

	[Token(Token = "0x4000ECB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool scaleDamageAndVelocityByGripStrength;

	[Token(Token = "0x4000ECC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector2 damageRange;

	[Token(Token = "0x4000ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector2 bonusVelocityRange;

	[Token(Token = "0x4000ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float slerpMaxStrength;

	[Token(Token = "0x4000ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float slerpMinStrength;

	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float handleLength;

	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform backGrip;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Grabbable backGrabbable;

	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float grabbedDrag;

	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float standardDrag;

	[Token(Token = "0x4000ED5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Rigidbody kinematicHackRigidbody;

	[Token(Token = "0x4000ED6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Vector2 rangeLimit;

	[Token(Token = "0x4000ED7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float headAlignRotationOffset;

	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool keepWeaponDistance;

	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	private bool wasGrabbed;

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x7D568C", Offset = "0x7D568C", VA = "0x7D568C")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x7D57B4", Offset = "0x7D57B4", VA = "0x7D57B4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x7D5E84", Offset = "0x7D5E84", VA = "0x7D5E84")]
	public TwoHandedWeaponFrontGrip()
	{
	}
}
[Token(Token = "0x2000188")]
public class WarhammerWeaponBase : TwoHandedWeaponBase
{
	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Collider headCollider;

	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Collider shaftCollider;

	[Token(Token = "0x17000119")]
	public override bool IsTwoHanded
	{
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x7D5EA8", Offset = "0x7D5EA8", VA = "0x7D5EA8", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x7D5E8C", Offset = "0x7D5E8C", VA = "0x7D5E8C", Slot = "6")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x7D5EB0", Offset = "0x7D5EB0", VA = "0x7D5EB0")]
	public WarhammerWeaponBase()
	{
	}
}
[Token(Token = "0x2000189")]
[RequireComponent(typeof(GrabHand))]
public class WeaponBase : MonoBehaviour
{
	[Token(Token = "0x200018A")]
	private struct RigidbodyIterations
	{
		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Rigidbody rigidbody;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int velocityIterations;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int iterations;
	}

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WeaponType type;

	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Grabbable grabbable;

	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody addForceToRigidbodyIfWieldedByEnemy;

	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float addForceToRigidbodyFactor;

	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly float iterationScale;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool haveKilledEnemy;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float thrownTime;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool canParry;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool canBeParried;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int dontCollideWithCharacterLayer;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int defaultLayer;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RigidbodyIterations[] cachedRigidbodyPhysicsSettings;

	[Token(Token = "0x1700011A")]
	public bool HasEverBeenWielded
	{
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x7D5EB4", Offset = "0x7D5EB4", VA = "0x7D5EB4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x7D5EBC", Offset = "0x7D5EBC", VA = "0x7D5EBC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700011B")]
	public bool BeingWielded
	{
		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x7D5EC8", Offset = "0x7D5EC8", VA = "0x7D5EC8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x7D5ED0", Offset = "0x7D5ED0", VA = "0x7D5ED0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700011C")]
	public bool WieldedByPlayer
	{
		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x7D5EDC", Offset = "0x7D5EDC", VA = "0x7D5EDC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x7D5EE4", Offset = "0x7D5EE4", VA = "0x7D5EE4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700011D")]
	public Enemy WieldedBy
	{
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x7D5EF0", Offset = "0x7D5EF0", VA = "0x7D5EF0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x7D5EF8", Offset = "0x7D5EF8", VA = "0x7D5EF8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700011E")]
	public GrabHand GrabbedByHand
	{
		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x7D5F00", Offset = "0x7D5F00", VA = "0x7D5F00")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x7D5F08", Offset = "0x7D5F08", VA = "0x7D5F08")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700011F")]
	public AITargetable LastWieldedBy
	{
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x7D5F10", Offset = "0x7D5F10", VA = "0x7D5F10")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x7D5F18", Offset = "0x7D5F18", VA = "0x7D5F18")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000120")]
	public bool HaveKilledEnemy
	{
		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x7D5F20", Offset = "0x7D5F20", VA = "0x7D5F20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000121")]
	public virtual bool IsTwoHanded
	{
		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x7D6694", Offset = "0x7D6694", VA = "0x7D6694", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x7D1824", Offset = "0x7D1824", VA = "0x7D1824", Slot = "4")]
	public virtual void NotifyEnemyKilled()
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x7D5F28", Offset = "0x7D5F28", VA = "0x7D5F28")]
	public void SetLayerRecursively(GameObject obj, int newLayer)
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x7D62B0", Offset = "0x7D62B0", VA = "0x7D62B0")]
	public AITargetable Wield(GrabHand wieldingHand)
	{
		return null;
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x7D6558", Offset = "0x7D6558", VA = "0x7D6558")]
	public void Release()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x7D6664", Offset = "0x7D6664", VA = "0x7D6664")]
	public void Deflected()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x7D6688", Offset = "0x7D6688", VA = "0x7D6688")]
	public void ResetWielder()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x7D669C", Offset = "0x7D669C", VA = "0x7D669C")]
	public void RecoilArm(Vector3 relativeVel, Vector3 pos, bool attackerIsPlayer, DamagerRigidbody sender)
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x7D6338", Offset = "0x7D6338", VA = "0x7D6338")]
	public void IgnorePlayerCollisions()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x7D42BC", Offset = "0x7D42BC", VA = "0x7D42BC")]
	public void IgnoreEnemyCollisions()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x7D451C", Offset = "0x7D451C", VA = "0x7D451C")]
	public void EnableEnemyCollision()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x7D1618", Offset = "0x7D1618", VA = "0x7D1618", Slot = "6")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x7D69E0", Offset = "0x7D69E0", VA = "0x7D69E0")]
	private void UpdateIterations(Rigidbody[] rigidbodies)
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x7D658C", Offset = "0x7D658C", VA = "0x7D658C")]
	private void SetToLowPhysics()
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x7D6478", Offset = "0x7D6478", VA = "0x7D6478")]
	private void SetToDefaultPhysics()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x7D21DC", Offset = "0x7D21DC", VA = "0x7D21DC")]
	public WeaponBase()
	{
	}
}
[Token(Token = "0x200018B")]
public enum WeaponType
{
	[Token(Token = "0x4000EF2")]
	None,
	[Token(Token = "0x4000EF3")]
	Sword,
	[Token(Token = "0x4000EF4")]
	Mace,
	[Token(Token = "0x4000EF5")]
	Morningstar,
	[Token(Token = "0x4000EF6")]
	Shield,
	[Token(Token = "0x4000EF7")]
	Bow,
	[Token(Token = "0x4000EF8")]
	Arrow,
	[Token(Token = "0x4000EF9")]
	Spear,
	[Token(Token = "0x4000EFA")]
	SpikedRock,
	[Token(Token = "0x4000EFB")]
	Warhammer,
	[Token(Token = "0x4000EFC")]
	Gladius,
	[Token(Token = "0x4000EFD")]
	GiantFlail,
	[Token(Token = "0x4000EFE")]
	ThrowingKnife,
	[Token(Token = "0x4000EFF")]
	Nunchucks,
	[Token(Token = "0x4000F00")]
	Axe,
	[Token(Token = "0x4000F01")]
	Glaive,
	[Token(Token = "0x4000F02")]
	ArmorBreaker,
	[Token(Token = "0x4000F03")]
	Boulder,
	[Token(Token = "0x4000F04")]
	QuarterStaff,
	[Token(Token = "0x4000F05")]
	ThrowingShield,
	[Token(Token = "0x4000F06")]
	Halberd,
	[Token(Token = "0x4000F07")]
	ChainBlade,
	[Token(Token = "0x4000F08")]
	GreatAxe,
	[Token(Token = "0x4000F09")]
	GreatSword,
	[Token(Token = "0x4000F0A")]
	Kitana,
	[Token(Token = "0x4000F0B")]
	Gun
}
[Token(Token = "0x200018C")]
public class WeaponHandle : Grabbable
{
	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public WeaponBase weaponBase;

	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Rigidbody addForceToRigidbodyIfWieldedByEnemy;

	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float addForceFactor;

	[Token(Token = "0x4000F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float twoHandGripStrengthPivot;

	[Token(Token = "0x4000F11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float twoHandGripMaxStrength;

	[Token(Token = "0x4000F12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GrabHand otherHand;

	[Token(Token = "0x4000F13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected Rigidbody myRigidbody;

	[Token(Token = "0x17000122")]
	public bool BeingWielded
	{
		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x7D6B58", Offset = "0x7D6B58", VA = "0x7D6B58")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x7D6B60", Offset = "0x7D6B60", VA = "0x7D6B60")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x17000123")]
	public override bool IsTelekineticallyGrabbable
	{
		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x7D3978", Offset = "0x7D3978", VA = "0x7D3978", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x7D6B6C", Offset = "0x7D6B6C", VA = "0x7D6B6C", Slot = "6")]
	public override WeaponType GetHeldWeaponType()
	{
		return default(WeaponType);
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x7D6BF8", Offset = "0x7D6BF8", VA = "0x7D6BF8", Slot = "11")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x7D6CB0", Offset = "0x7D6CB0", VA = "0x7D6CB0", Slot = "9")]
	public override void Grabbed(GrabHand hand)
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0x7D6E78", Offset = "0x7D6E78", VA = "0x7D6E78", Slot = "10")]
	public override void LetGo(GrabHand hand)
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0x7D6EB4", Offset = "0x7D6EB4", VA = "0x7D6EB4", Slot = "12")]
	protected virtual void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0x7D3BE0", Offset = "0x7D3BE0", VA = "0x7D3BE0")]
	public WeaponHandle()
	{
	}
}
[Token(Token = "0x200018D")]
public class WeaponImpactSound : MonoBehaviour
{
	[Token(Token = "0x4000F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string impactType;

	[Token(Token = "0x4000F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float hardImpactThreshold;

	[Token(Token = "0x4000F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float lastNoiseTime;

	[Token(Token = "0x4000F17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string hardImpact;

	[Token(Token = "0x4000F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string softImpact;

	[Token(Token = "0x4000F19")]
	private const float VelocityCheck = 49f;

	[Token(Token = "0x4000F1A")]
	private const float VolumeCheck = 0.05f;

	[Token(Token = "0x4000F1B")]
	private const float VelocityScale = 0.00175f;

	[Token(Token = "0x4000F1C")]
	private const float MinInterval = 0.05f;

	[Token(Token = "0x6000900")]
	[Address(RVA = "0x7D6FD4", Offset = "0x7D6FD4", VA = "0x7D6FD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0x7D706C", Offset = "0x7D706C", VA = "0x7D706C")]
	private void OnCollisionEnter(Collision col)
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0x7D7324", Offset = "0x7D7324", VA = "0x7D7324")]
	public WeaponImpactSound()
	{
	}
}
[Token(Token = "0x200018E")]
public class SetCenterOfGravity : MonoBehaviour
{
	[Token(Token = "0x6000903")]
	[Address(RVA = "0x7D7334", Offset = "0x7D7334", VA = "0x7D7334")]
	private void Start()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0x7D73CC", Offset = "0x7D73CC", VA = "0x7D73CC")]
	public SetCenterOfGravity()
	{
	}
}
[Token(Token = "0x200018F")]
public class SpikeRandomizer : MonoBehaviour
{
	[Token(Token = "0x4000F1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] spikeGraphics;

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x7D73D4", Offset = "0x7D73D4", VA = "0x7D73D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0x7D742C", Offset = "0x7D742C", VA = "0x7D742C")]
	public SpikeRandomizer()
	{
	}
}
[Token(Token = "0x2000190")]
public class TradingCard : MonoBehaviour
{
	[Token(Token = "0x4000F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 restPos;

	[Token(Token = "0x4000F1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion restRotation;

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x7D7434", Offset = "0x7D7434", VA = "0x7D7434")]
	public void Start()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0x7D7484", Offset = "0x7D7484", VA = "0x7D7484")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0x7D767C", Offset = "0x7D767C", VA = "0x7D767C")]
	public TradingCard()
	{
	}
}
[Token(Token = "0x2000191")]
public class LogicArcsAndColumns : MonoBehaviour
{
	[Token(Token = "0x600090A")]
	[Address(RVA = "0x7D7684", Offset = "0x7D7684", VA = "0x7D7684")]
	private void Start()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0x7D7688", Offset = "0x7D7688", VA = "0x7D7688")]
	private void Update()
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0x7D768C", Offset = "0x7D768C", VA = "0x7D768C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x7D7D48", Offset = "0x7D7D48", VA = "0x7D7D48")]
	public LogicArcsAndColumns()
	{
	}
}
[Token(Token = "0x2000192")]
public class LogicCollidingSphere : MonoBehaviour
{
	[Token(Token = "0x4000F20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody ObjectToDrop;

	[Token(Token = "0x4000F21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool bDropped;

	[Token(Token = "0x4000F22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nChunksDetached;

	[Token(Token = "0x4000F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int nChunkCollisions;

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x7D7D50", Offset = "0x7D7D50", VA = "0x7D7D50")]
	private void Start()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x7D7D58", Offset = "0x7D7D58", VA = "0x7D7D58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x7D7DB0", Offset = "0x7D7DB0", VA = "0x7D7DB0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x7D8324", Offset = "0x7D8324", VA = "0x7D8324")]
	private void OnChunkDetach(FracturedChunk.CollisionInfo info)
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x7D8348", Offset = "0x7D8348", VA = "0x7D8348")]
	private void OnFreeChunkCollision(FracturedChunk.CollisionInfo info)
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x7D836C", Offset = "0x7D836C", VA = "0x7D836C")]
	public LogicCollidingSphere()
	{
	}
}
[Token(Token = "0x2000193")]
public class LogicCompoundObject : MonoBehaviour
{
	[Token(Token = "0x6000914")]
	[Address(RVA = "0x7D8374", Offset = "0x7D8374", VA = "0x7D8374")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x7D887C", Offset = "0x7D887C", VA = "0x7D887C")]
	public LogicCompoundObject()
	{
	}
}
[Token(Token = "0x2000194")]
public class LogicExplodingFloor : MonoBehaviour
{
	[Token(Token = "0x6000916")]
	[Address(RVA = "0x7D8884", Offset = "0x7D8884", VA = "0x7D8884")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x7D8B34", Offset = "0x7D8B34", VA = "0x7D8B34")]
	public LogicExplodingFloor()
	{
	}
}
[Token(Token = "0x2000195")]
public class LogicExplodingGoblin : MonoBehaviour
{
	[Token(Token = "0x4000F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ExplosionForce;

	[Token(Token = "0x4000F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FracturedObject TargetFracturedObject;

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x7D8B3C", Offset = "0x7D8B3C", VA = "0x7D8B3C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x7D9448", Offset = "0x7D9448", VA = "0x7D9448")]
	public LogicExplodingGoblin()
	{
	}
}
[Token(Token = "0x2000196")]
public class LogicGlobalFracturing : MonoBehaviour
{
	[Token(Token = "0x4000F26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[HideInInspector]
	public static bool HelpVisible;

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x7D9458", Offset = "0x7D9458", VA = "0x7D9458")]
	private void Start()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x7D7AE0", Offset = "0x7D7AE0", VA = "0x7D7AE0")]
	public static void GlobalGUI()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x7D94B4", Offset = "0x7D94B4", VA = "0x7D94B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x7D959C", Offset = "0x7D959C", VA = "0x7D959C")]
	public LogicGlobalFracturing()
	{
	}
}
[Token(Token = "0x2000197")]
public class UltimateFracturingFPS : MonoBehaviour
{
	[Token(Token = "0x2000198")]
	public enum Mode
	{
		[Token(Token = "0x4000F3F")]
		ShootObjects,
		[Token(Token = "0x4000F40")]
		ExplodeRaycast
	}

	[Token(Token = "0x4000F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mode ShootMode;

	[Token(Token = "0x4000F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float MouseSpeed;

	[Token(Token = "0x4000F29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture HUDTexture;

	[Token(Token = "0x4000F2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float HUDSize;

	[Token(Token = "0x4000F2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color HUDColorNormal;

	[Token(Token = "0x4000F2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color HUDColorRaycast;

	[Token(Token = "0x4000F2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform Weapon;

	[Token(Token = "0x4000F2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip AudioWeaponShot;

	[Token(Token = "0x4000F2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float WeaponShotVolume;

	[Token(Token = "0x4000F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float ExplosionForce;

	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float ExplosionRadius;

	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float RecoilDuration;

	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float RecoilIntensity;

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject ObjectToShoot;

	[Token(Token = "0x4000F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float InitialObjectSpeed;

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float ObjectScale;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float ObjectMass;

	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float ObjectLife;

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 m_v3MousePosition;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private bool m_bRaycastFound;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float m_fRecoilTimer;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector3 m_v3InitialWeaponPos;

	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Quaternion m_qInitialWeaponRot;

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x7D95F0", Offset = "0x7D95F0", VA = "0x7D95F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x7D96A0", Offset = "0x7D96A0", VA = "0x7D96A0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x7D995C", Offset = "0x7D995C", VA = "0x7D995C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x7DA620", Offset = "0x7DA620", VA = "0x7DA620")]
	public UltimateFracturingFPS()
	{
	}
}
[Token(Token = "0x2000199")]
public class CheckDynamicCollision : MonoBehaviour
{
	[Token(Token = "0x6000923")]
	[Address(RVA = "0x7DA668", Offset = "0x7DA668", VA = "0x7DA668")]
	private void Start()
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0x7DA998", Offset = "0x7DA998", VA = "0x7DA998")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0x7DA868", Offset = "0x7DA868", VA = "0x7DA868")]
	private void EnableObjectColliders(GameObject chunk, bool bEnable)
	{
	}

	[Token(Token = "0x6000926")]
	private static void SearchForAllComponentsInHierarchy<T>(GameObject current, ref List<T> listOut) where T : Component
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0x7DAD24", Offset = "0x7DAD24", VA = "0x7DAD24")]
	public CheckDynamicCollision()
	{
	}
}
[Token(Token = "0x200019A")]
public class ExplosionSource : MonoBehaviour
{
	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float InfluenceRadius;

	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float Force;

	[Token(Token = "0x4000F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool CheckStructureIntegrity;

	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool MoveManually;

	[Token(Token = "0x4000F45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 PosStart;

	[Token(Token = "0x4000F46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 PosEnd;

	[Token(Token = "0x4000F47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float MoveDuration;

	[Token(Token = "0x4000F48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private FracturedObject[] m_aFracturedObjects;

	[Token(Token = "0x4000F49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_fStartTime;

	[Token(Token = "0x6000928")]
	[Address(RVA = "0x7DAD2C", Offset = "0x7DAD2C", VA = "0x7DAD2C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0x7DAE28", Offset = "0x7DAE28", VA = "0x7DAE28")]
	private void Update()
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0x7DB518", Offset = "0x7DB518", VA = "0x7DB518")]
	public ExplosionSource()
	{
	}
}
[Serializable]
[Token(Token = "0x200019B")]
[ExecuteInEditMode]
public class FracturedChunk : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200019C")]
	public class AdjacencyInfo
	{
		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FracturedChunk chunk;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fArea;

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x7DD92C", Offset = "0x7DD92C", VA = "0x7DD92C")]
		public AdjacencyInfo(FracturedChunk chunk, float fArea)
		{
		}
	}

	[Token(Token = "0x200019D")]
	public class CollisionInfo
	{
		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FracturedChunk chunk;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 collisionPoint;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool bIsMain;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool bCancelCollisionEvent;

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x7DC348", Offset = "0x7DC348", VA = "0x7DC348")]
		public CollisionInfo(FracturedChunk chunk, Vector3 collisionPoint, bool bIsMain)
		{
		}
	}

	[Token(Token = "0x4000F4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FracturedObject FracturedObjectSource;

	[Token(Token = "0x4000F4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int SplitSubMeshIndex;

	[Token(Token = "0x4000F4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool DontDeleteAfterBroken;

	[Token(Token = "0x4000F4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool IsSupportChunk;

	[Token(Token = "0x4000F4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool IsNonSupportedChunk;

	[Token(Token = "0x4000F4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	public bool IsDetachedChunk;

	[Token(Token = "0x4000F50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float RelativeVolume;

	[Token(Token = "0x4000F51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Volume;

	[Token(Token = "0x4000F52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool HasConcaveCollider;

	[Token(Token = "0x4000F53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float PreviewDecompositionValue;

	[Token(Token = "0x4000F54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color RandomMaterialColor;

	[Token(Token = "0x4000F55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool Visited;

	[Token(Token = "0x4000F56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<AdjacencyInfo> ListAdjacentChunks;

	[Token(Token = "0x4000F57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Vector3 m_v3InitialLocalPosition;

	[Token(Token = "0x4000F58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private Quaternion m_qInitialLocalRotation;

	[Token(Token = "0x4000F59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private Vector3 m_v3InitialLocalScale;

	[Token(Token = "0x4000F5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private bool m_bInitialLocalRotScaleInitialized;

	[Token(Token = "0x4000F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<AdjacencyInfo> ListAdjacentChunksCopy;

	[Token(Token = "0x4000F5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float m_fInvisibleTimer;

	[Token(Token = "0x4000F5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool m_bNonSupportedChunkStored;

	[Token(Token = "0x600092B")]
	[Address(RVA = "0x7DB530", Offset = "0x7DB530", VA = "0x7DB530")]
	private void Awake()
	{
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0x7DB640", Offset = "0x7DB640", VA = "0x7DB640")]
	private void Update()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0x7DB764", Offset = "0x7DB764", VA = "0x7DB764")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0x7DC108", Offset = "0x7DC108", VA = "0x7DC108")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0x7DB8A0", Offset = "0x7DB8A0", VA = "0x7DB8A0")]
	private void HandleCollision(Collider other, Vector3 v3CollisionPos, float relativeSpeed)
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x7DC2B8", Offset = "0x7DC2B8", VA = "0x7DC2B8")]
	public bool IsDestructibleChunk()
	{
		return default(bool);
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x7DCB00", Offset = "0x7DCB00", VA = "0x7DCB00")]
	public void ResetChunk(FracturedObject fracturedObjectSource)
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x7DA1CC", Offset = "0x7DA1CC", VA = "0x7DA1CC")]
	public void Impact(Vector3 v3Position, float fExplosionForce, float fRadius, bool bAlsoImpactFreeChunks)
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x7DD248", Offset = "0x7DD248", VA = "0x7DD248")]
	public void OnCreateFromFracturedObject(FracturedObject fracturedComponent, int nSplitSubMeshIndex)
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x7DD318", Offset = "0x7DD318", VA = "0x7DD318")]
	public void UpdatePreviewDecompositionPosition()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x7DD4E8", Offset = "0x7DD4E8", VA = "0x7DD4E8")]
	public void ConnectTo(FracturedChunk chunk, float fArea)
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x7DD970", Offset = "0x7DD970", VA = "0x7DD970")]
	public void DisconnectFrom(FracturedChunk chunk)
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x7DD6FC", Offset = "0x7DD6FC", VA = "0x7DD6FC")]
	public bool IsConnectedTo(FracturedChunk chunk)
	{
		return default(bool);
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x7DC544", Offset = "0x7DC544", VA = "0x7DC544")]
	public void DetachFromObject(bool bCheckStructureIntegrity = true)
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x7DDB30", Offset = "0x7DDB30", VA = "0x7DDB30")]
	private void RemoveConnectionInfo()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x7DC478", Offset = "0x7DC478", VA = "0x7DC478")]
	public List<FracturedChunk> ComputeRandomConnectionBreaks()
	{
		return null;
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x7DE26C", Offset = "0x7DE26C", VA = "0x7DE26C")]
	private static void ComputeRandomConnectionBreaksRecursive(FracturedChunk chunk, List<FracturedChunk> listBreaksOut, int nLevel)
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0x7DA030", Offset = "0x7DA030", VA = "0x7DA030")]
	public static FracturedChunk ChunkRaycast(Vector3 v3Pos, Vector3 v3Forward, out RaycastHit hitInfo)
	{
		return null;
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x7DE56C", Offset = "0x7DE56C", VA = "0x7DE56C")]
	public FracturedChunk()
	{
	}
}
[Token(Token = "0x200019E")]
[ExecuteInEditMode]
public class FracturedObject : MonoBehaviour
{
	[Token(Token = "0x200019F")]
	public enum EFracturePattern
	{
		[Token(Token = "0x4000FC3")]
		BSP,
		[Token(Token = "0x4000FC4")]
		Voronoi
	}

	[Serializable]
	[Token(Token = "0x20001A0")]
	public class PrefabInfo
	{
		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float MinLifeTime;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MaxLifeTime;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject GameObject;

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x7E1524", Offset = "0x7E1524", VA = "0x7E1524")]
		public PrefabInfo()
		{
		}
	}

	[Token(Token = "0x20001A1")]
	public enum ECCAlgorithm
	{
		[Token(Token = "0x4000FC9")]
		Fast,
		[Token(Token = "0x4000FCA")]
		Normal,
		[Token(Token = "0x4000FCB")]
		Legacy
	}

	[Token(Token = "0x4000F64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool GUIExpandMain;

	[Token(Token = "0x4000F65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject SourceObject;

	[Token(Token = "0x4000F66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool GenerateIslands;

	[Token(Token = "0x4000F67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool GenerateChunkConnectionInfo;

	[Token(Token = "0x4000F68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool StartStatic;

	[Token(Token = "0x4000F69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ChunkConnectionMinArea;

	[Token(Token = "0x4000F6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float ChunkConnectionStrength;

	[Token(Token = "0x4000F6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float ChunkHorizontalRadiusSupportStrength;

	[Token(Token = "0x4000F6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool SupportChunksAreIndestructible;

	[Token(Token = "0x4000F6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ChunkIslandConnectionMaxDistance;

	[Token(Token = "0x4000F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float TotalMass;

	[Token(Token = "0x4000F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PhysicMaterial ChunkPhysicMaterial;

	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float MinColliderVolumeForBox;

	[Token(Token = "0x4000F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float CapPrecisionFix;

	[Token(Token = "0x4000F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool InvertCapNormals;

	[Token(Token = "0x4000F73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool GUIExpandSplits;

	[Token(Token = "0x4000F74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public EFracturePattern FracturePattern;

	[Token(Token = "0x4000F75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool VoronoiVolumeOptimization;

	[Token(Token = "0x4000F76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool VoronoiProximityOptimization;

	[Token(Token = "0x4000F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool VoronoiMultithreading;

	[Token(Token = "0x4000F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int VoronoiCellsXCount;

	[Token(Token = "0x4000F79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int VoronoiCellsYCount;

	[Token(Token = "0x4000F7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int VoronoiCellsZCount;

	[Token(Token = "0x4000F7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float VoronoiCellsXSizeVariation;

	[Token(Token = "0x4000F7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float VoronoiCellsYSizeVariation;

	[Token(Token = "0x4000F7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float VoronoiCellsZSizeVariation;

	[Token(Token = "0x4000F7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int GenerateNumChunks;

	[Token(Token = "0x4000F7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool SplitsWorldSpace;

	[Token(Token = "0x4000F80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	public bool SplitRegularly;

	[Token(Token = "0x4000F81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float SplitXProbability;

	[Token(Token = "0x4000F82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float SplitYProbability;

	[Token(Token = "0x4000F83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float SplitZProbability;

	[Token(Token = "0x4000F84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float SplitSizeVariation;

	[Token(Token = "0x4000F85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float SplitXVariation;

	[Token(Token = "0x4000F86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float SplitYVariation;

	[Token(Token = "0x4000F87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float SplitZVariation;

	[Token(Token = "0x4000F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Material SplitMaterial;

	[Token(Token = "0x4000F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float SplitMappingTileU;

	[Token(Token = "0x4000F8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float SplitMappingTileV;

	[Token(Token = "0x4000F8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool GUIExpandEvents;

	[Token(Token = "0x4000F8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public float EventDetachMinMass;

	[Token(Token = "0x4000F8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float EventDetachMinVelocity;

	[Token(Token = "0x4000F8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float EventDetachExitForce;

	[Token(Token = "0x4000F8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public float EventDetachUpwardsModifier;

	[Token(Token = "0x4000F90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public AudioClip EventDetachSound;

	[Token(Token = "0x4000F91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public PrefabInfo[] EventDetachPrefabsArray;

	[Token(Token = "0x4000F92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public string EventDetachCollisionCallMethod;

	[Token(Token = "0x4000F93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject EventDetachCollisionCallGameObject;

	[Token(Token = "0x4000F94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float EventDetachedMinLifeTime;

	[Token(Token = "0x4000F95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public float EventDetachedMaxLifeTime;

	[Token(Token = "0x4000F96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public float EventDetachedOffscreenLifeTime;

	[Token(Token = "0x4000F97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float EventDetachedMinMass;

	[Token(Token = "0x4000F98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public float EventDetachedMinVelocity;

	[Token(Token = "0x4000F99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public int EventDetachedMaxSounds;

	[Token(Token = "0x4000F9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public AudioClip[] EventDetachedSoundArray;

	[Token(Token = "0x4000F9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int EventDetachedMaxPrefabs;

	[Token(Token = "0x4000F9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public PrefabInfo[] EventDetachedPrefabsArray;

	[Token(Token = "0x4000F9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public string EventDetachedCollisionCallMethod;

	[Token(Token = "0x4000F9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject EventDetachedCollisionCallGameObject;

	[Token(Token = "0x4000F9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public AudioClip EventExplosionSound;

	[Token(Token = "0x4000FA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public int EventExplosionPrefabsInstanceCount;

	[Token(Token = "0x4000FA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public PrefabInfo[] EventExplosionPrefabsArray;

	[Token(Token = "0x4000FA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public AudioClip EventImpactSound;

	[Token(Token = "0x4000FA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public PrefabInfo[] EventImpactPrefabsArray;

	[Token(Token = "0x4000FA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public string EventDetachedAnyCallMethod;

	[Token(Token = "0x4000FA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject EventDetachedAnyCallGameObject;

	[Token(Token = "0x4000FA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public bool GUIExpandSupportPlanes;

	[Token(Token = "0x4000FA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public int RandomSeed;

	[Token(Token = "0x4000FA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public float DecomposePreview;

	[Token(Token = "0x4000FA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public bool AlwaysComputeColliders;

	[Token(Token = "0x4000FAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
	public bool ShowChunkConnectionLines;

	[Token(Token = "0x4000FAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16E")]
	public bool ShowChunkColoredState;

	[Token(Token = "0x4000FAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16F")]
	public bool ShowChunkColoredRandomly;

	[Token(Token = "0x4000FAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public bool SaveMeshDataToAsset;

	[Token(Token = "0x4000FAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public string MeshAssetDataFile;

	[Token(Token = "0x4000FAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public bool Verbose;

	[Token(Token = "0x4000FB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
	public bool IntegrateWithConcaveCollider;

	[Token(Token = "0x4000FB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	public ECCAlgorithm ConcaveColliderAlgorithm;

	[Token(Token = "0x4000FB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public int ConcaveColliderMaxHulls;

	[Token(Token = "0x4000FB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	public int ConcaveColliderMaxHullVertices;

	[Token(Token = "0x4000FB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public int ConcaveColliderLegacySteps;

	[Token(Token = "0x4000FB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[HideInInspector]
	public List<SupportPlane> ListSupportPlanes;

	[Token(Token = "0x4000FB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[HideInInspector]
	public List<FracturedChunk> ListFracturedChunks;

	[Token(Token = "0x4000FB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[HideInInspector]
	public GameObject SingleMeshObject;

	[Token(Token = "0x4000FB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[HideInInspector]
	public bool IsUsingSingleMeshObjectDraw;

	[Token(Token = "0x4000FB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	[HideInInspector]
	public float DecomposeRadius;

	[Token(Token = "0x4000FBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Color GizmoColorSupport;

	[Token(Token = "0x4000FBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Color GizmoColorNonSupport;

	[Token(Token = "0x4000FBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private bool m_bCheckDetachNonSupportedChunkds;

	[Token(Token = "0x4000FBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B9")]
	private bool m_bExploded;

	[Token(Token = "0x4000FBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BA")]
	private bool m_bDetached;

	[Token(Token = "0x4000FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private float[] m_afFreeChunkSoundTimers;

	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private float[] m_afFreeChunkPrefabTimers;

	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private Material m_GizmosMaterial;

	[Token(Token = "0x17000124")]
	public Material GizmosMaterial
	{
		[Token(Token = "0x6000940")]
		[Address(RVA = "0x7DE610", Offset = "0x7DE610", VA = "0x7DE610")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000941")]
		[Address(RVA = "0x7DE6EC", Offset = "0x7DE6EC", VA = "0x7DE6EC")]
		set
		{
		}
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x7DE6FC", Offset = "0x7DE6FC", VA = "0x7DE6FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0x7DE700", Offset = "0x7DE700", VA = "0x7DE700")]
	private void Start()
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0x7DEB70", Offset = "0x7DEB70", VA = "0x7DEB70")]
	private void Update()
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0x7DF604", Offset = "0x7DF604", VA = "0x7DF604")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x7DF608", Offset = "0x7DF608", VA = "0x7DF608")]
	public void OnCreateFracturedObject()
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0x7DE91C", Offset = "0x7DE91C", VA = "0x7DE91C")]
	public void SetSingleMeshVisibility(bool bEnabled)
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0x7DF6C0", Offset = "0x7DF6C0", VA = "0x7DF6C0")]
	public bool ResetChunks()
	{
		return default(bool);
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0x7DCCB0", Offset = "0x7DCCB0", VA = "0x7DCCB0")]
	public List<FracturedChunk> GetDestructibleChunksInRadius(Vector3 v3Position, float fRadius, bool bAlsoIncludeFreeChunks)
	{
		return null;
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0x7D8EFC", Offset = "0x7D8EFC", VA = "0x7D8EFC")]
	public void Explode(Vector3 v3ExplosionPosition, float fExplosionForce)
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x7DAF54", Offset = "0x7DAF54", VA = "0x7DAF54")]
	public void Explode(Vector3 v3ExplosionPosition, float fExplosionForce, float fRadius, bool bPlayExplosionSound, bool bInstanceExplosionPrefabs, bool bAlsoExplodeFree, bool bCheckStructureIntegrityAfter)
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0x7DF938", Offset = "0x7DF938", VA = "0x7DF938")]
	public void DeleteChunks()
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0x7DFB70", Offset = "0x7DFB70", VA = "0x7DFB70")]
	public void CollapseChunks()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0x7DFD6C", Offset = "0x7DFD6C", VA = "0x7DFD6C")]
	public void ExplodeChunks(float fExplosionForce, Vector3 v3ExplosionPosition, float fUpwardsModifier)
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0x7DFFEC", Offset = "0x7DFFEC", VA = "0x7DFFEC")]
	public void ComputeChunksRelativeVolume()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0x7E0504", Offset = "0x7E0504", VA = "0x7E0504")]
	public void ComputeChunksMass(float fTotalMass)
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0x7E072C", Offset = "0x7E072C", VA = "0x7E072C")]
	public bool HasDetachedChunks()
	{
		return default(bool);
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x7DDE50", Offset = "0x7DDE50", VA = "0x7DDE50")]
	public void NotifyChunkDetach(FracturedChunk chunk)
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x7DC3AC", Offset = "0x7DC3AC", VA = "0x7DC3AC")]
	public void NotifyDetachChunkCollision(FracturedChunk.CollisionInfo collisionInfo)
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x7E0734", Offset = "0x7E0734", VA = "0x7E0734")]
	public void NotifyDetachChunkCollision(Vector3 v3Position, bool bIsMain)
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x7DC730", Offset = "0x7DC730", VA = "0x7DC730")]
	public void NotifyFreeChunkCollision(FracturedChunk.CollisionInfo collisionInfo)
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x7DD00C", Offset = "0x7DD00C", VA = "0x7DD00C")]
	public void NotifyImpact(Vector3 v3Position)
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x7DE0E4", Offset = "0x7DE0E4", VA = "0x7DE0E4")]
	public void ResetAllChunkVisitedFlags()
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x7DE0CC", Offset = "0x7DE0CC", VA = "0x7DE0CC")]
	public void CheckDetachNonSupportedChunks(bool bForceImmediate = false)
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x7E097C", Offset = "0x7E097C", VA = "0x7E097C")]
	public void MarkNonSupportedChunks()
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x7DECD8", Offset = "0x7DECD8", VA = "0x7DECD8")]
	private void CheckDetachNonSupportedChunksInternal(bool bOnlyMarkThem = false)
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x7E0B10", Offset = "0x7E0B10", VA = "0x7E0B10")]
	private static bool AreSupportedChunksRecursive(FracturedChunk chunk, List<FracturedChunk> listChunksVisited, List<FracturedChunk> listChunksSupport)
	{
		return default(bool);
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x7E0E7C", Offset = "0x7E0E7C", VA = "0x7E0E7C")]
	public void AddSupportPlane()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x7E0FB4", Offset = "0x7E0FB4", VA = "0x7E0FB4")]
	public void ComputeSupportPlaneIntersections()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0x7E12A0", Offset = "0x7E12A0", VA = "0x7E12A0")]
	public FracturedObject()
	{
	}
}
[Token(Token = "0x20001A2")]
public class CombinedMesh : MonoBehaviour
{
	[Token(Token = "0x20001A3")]
	public delegate void CombineProgressDelegate(string strMessage, float fT);

	[Serializable]
	[Token(Token = "0x20001A4")]
	public class ObjectInfo
	{
		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Material[] aMaterials;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh mesh;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 v3LocalPosition;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion qLocalRotation;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 v3LocalScale;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Matrix4x4 mtxLocal;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Matrix4x4 mtxWorld;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Vector3[] av3NormalsWorld;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Vector4[] av4TangentsWorld;

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x7E4344", Offset = "0x7E4344", VA = "0x7E4344")]
		public ObjectInfo(Material[] aMaterials, Mesh mesh, Transform transform, Matrix4x4 mtxLocal)
		{
		}
	}

	[Token(Token = "0x20001A5")]
	private class MaterialMeshInfo
	{
		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh mesh;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int nSubMesh;

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x7E42EC", Offset = "0x7E42EC", VA = "0x7E42EC")]
		public MaterialMeshInfo(Transform transform, Mesh mesh, int nSubMesh)
		{
		}
	}

	[Token(Token = "0x20001A6")]
	public enum EPivotMode
	{
		[Token(Token = "0x4000FE1")]
		Keep,
		[Token(Token = "0x4000FE2")]
		Center,
		[Token(Token = "0x4000FE3")]
		BottomCenter,
		[Token(Token = "0x4000FE4")]
		TopCenter,
		[Token(Token = "0x4000FE5")]
		Min,
		[Token(Token = "0x4000FE6")]
		Max
	}

	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool SaveMeshAsset;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool KeepPosition;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public EPivotMode PivotMode;

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter[] MeshObjects;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject RootNode;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_bCancelled;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private List<ObjectInfo> m_listObjectInfo;

	[Token(Token = "0x4000FD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<Material, List<MaterialMeshInfo>> m_dicMeshEntries;

	[Token(Token = "0x6000961")]
	[Address(RVA = "0x7E1560", Offset = "0x7E1560", VA = "0x7E1560")]
	public void CancelCombining()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0x7E156C", Offset = "0x7E156C", VA = "0x7E156C")]
	public bool CombiningCancelled()
	{
		return default(bool);
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0x7E1574", Offset = "0x7E1574", VA = "0x7E1574")]
	public void TransformObjInfoMeshVectorsToLocal(Transform newTransform)
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0x7E18FC", Offset = "0x7E18FC", VA = "0x7E18FC")]
	public int GetObjectCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x7E1944", Offset = "0x7E1944", VA = "0x7E1944")]
	public ObjectInfo GetObjectInfo(int nIndex)
	{
		return null;
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x7E199C", Offset = "0x7E199C", VA = "0x7E199C")]
	public void Combine(CombineProgressDelegate progress)
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x7E4610", Offset = "0x7E4610", VA = "0x7E4610")]
	public CombinedMesh()
	{
	}
}
namespace UltimateFracturing
{
	[Token(Token = "0x20001A7")]
	public static class ConcaveColliderInterface
	{
		[Token(Token = "0x20001A8")]
		private struct SConvexDecompositionInfoInOut
		{
			[Token(Token = "0x4000FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public uint uMaxHullVertices;

			[Token(Token = "0x4000FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public uint uMaxHulls;

			[Token(Token = "0x4000FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float fPrecision;

			[Token(Token = "0x4000FEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float fBackFaceDistanceFactor;

			[Token(Token = "0x4000FEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public uint uLegacyDepth;

			[Token(Token = "0x4000FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public uint uNormalizeInputMesh;

			[Token(Token = "0x4000FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public uint uUseFastVersion;

			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public uint uTriangleCount;

			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public uint uVertexCount;

			[Token(Token = "0x4000FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int nHullsOut;
		}

		[Token(Token = "0x20001A9")]
		private struct SConvexDecompositionHullInfo
		{
			[Token(Token = "0x4000FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int nVertexCount;

			[Token(Token = "0x4000FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int nTriangleCount;
		}

		[Token(Token = "0x20001AA")]
		public delegate void LogDelegate(string message);

		[PreserveSig]
		[Token(Token = "0x600096E")]
		[Address(RVA = "0x7E4890", Offset = "0x7E4890", VA = "0x7E4890")]
		private static extern void DllInit(bool bUseMultithreading);

		[PreserveSig]
		[Token(Token = "0x600096F")]
		[Address(RVA = "0x7E490C", Offset = "0x7E490C", VA = "0x7E490C")]
		private static extern void DllClose();

		[PreserveSig]
		[Token(Token = "0x6000970")]
		[Address(RVA = "0x7E4970", Offset = "0x7E4970", VA = "0x7E4970")]
		private static extern void SetLogFunctionPointer(IntPtr pfnUnity3DLog);

		[PreserveSig]
		[Token(Token = "0x6000971")]
		[Address(RVA = "0x7E49EC", Offset = "0x7E49EC", VA = "0x7E49EC")]
		private static extern void SetProgressFunctionPointer(IntPtr pfnUnity3DProgress);

		[PreserveSig]
		[Token(Token = "0x6000972")]
		[Address(RVA = "0x7E4A68", Offset = "0x7E4A68", VA = "0x7E4A68")]
		private static extern void CancelConvexDecomposition();

		[PreserveSig]
		[Token(Token = "0x6000973")]
		[Address(RVA = "0x7E4ACC", Offset = "0x7E4ACC", VA = "0x7E4ACC")]
		private static extern bool DoConvexDecomposition(ref SConvexDecompositionInfoInOut infoInOut, Vector3[] pfVertices, int[] puIndices);

		[PreserveSig]
		[Token(Token = "0x6000974")]
		[Address(RVA = "0x7E4B78", Offset = "0x7E4B78", VA = "0x7E4B78")]
		private static extern bool GetHullInfo(uint uHullIndex, ref SConvexDecompositionHullInfo infoOut);

		[PreserveSig]
		[Token(Token = "0x6000975")]
		[Address(RVA = "0x7E4C04", Offset = "0x7E4C04", VA = "0x7E4C04")]
		private static extern bool FillHullMeshData(uint uHullIndex, ref float pfVolumeOut, int[] pnIndicesOut, Vector3[] pfVerticesOut);

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x7E4CB8", Offset = "0x7E4CB8", VA = "0x7E4CB8")]
		public static int ComputeHull(GameObject gameObject, FracturedObject fracturedObject)
		{
			return default(int);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x7E4E2C", Offset = "0x7E4E2C", VA = "0x7E4E2C")]
		private static bool ComputeHull(GameObject gameObject, FracturedObject.ECCAlgorithm eAlgorithm, int nMaxHulls, int nMaxHullVertices, int nLegacySteps, bool bVerbose, out int nTotalTrianglesOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x7E55C0", Offset = "0x7E55C0", VA = "0x7E55C0")]
		private static void Log(string message)
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public static class Fracturer
	{
		[Token(Token = "0x20001AC")]
		private class FracturingStats
		{
			[Token(Token = "0x4000FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int nChunkCount;

			[Token(Token = "0x4000FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int nTotalChunks;

			[Token(Token = "0x4000FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int nSplitCount;

			[Token(Token = "0x4000FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool bCancelFracturing;

			[Token(Token = "0x6000999")]
			[Address(RVA = "0x7E5658", Offset = "0x7E5658", VA = "0x7E5658")]
			public FracturingStats()
			{
			}
		}

		[Token(Token = "0x20001AD")]
		private class VoronoiCell
		{
			[Token(Token = "0x20001AE")]
			public class Face
			{
				[Token(Token = "0x4001001")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public Plane plane;

				[Token(Token = "0x4001002")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Matrix4x4 mtxPlane;

				[Token(Token = "0x4001003")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
				public int nAdjacentCell;

				[Token(Token = "0x600099B")]
				[Address(RVA = "0x7E5768", Offset = "0x7E5768", VA = "0x7E5768")]
				public Face(Plane plane, Matrix4x4 mtxPlane, int nAdjacentCell)
				{
				}
			}

			[Token(Token = "0x4000FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int nIndex;

			[Token(Token = "0x4000FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int x;

			[Token(Token = "0x4000FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int y;

			[Token(Token = "0x4000FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int z;

			[Token(Token = "0x4000FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 v3Center;

			[Token(Token = "0x4000FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 v3Min;

			[Token(Token = "0x4000FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 v3Max;

			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public List<Face> listCellFaces;

			[Token(Token = "0x600099A")]
			[Address(RVA = "0x7E5678", Offset = "0x7E5678", VA = "0x7E5678")]
			public VoronoiCell(int nIndex, int x, int y, int z)
			{
			}
		}

		[Token(Token = "0x20001AF")]
		private class VoronoiPointDistance
		{
			[Token(Token = "0x20001B0")]
			public class IncreasingDistanceComparer : IComparer<VoronoiPointDistance>
			{
				[Token(Token = "0x600099D")]
				[Address(RVA = "0x7E5804", Offset = "0x7E5804", VA = "0x7E5804", Slot = "4")]
				public int Compare(VoronoiPointDistance a, VoronoiPointDistance b)
				{
					return default(int);
				}

				[Token(Token = "0x600099E")]
				[Address(RVA = "0x7E5834", Offset = "0x7E5834", VA = "0x7E5834")]
				public IncreasingDistanceComparer()
				{
				}
			}

			[Token(Token = "0x4001004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int nIndex;

			[Token(Token = "0x4001005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float fDistanceSqr;

			[Token(Token = "0x600099C")]
			[Address(RVA = "0x7E57CC", Offset = "0x7E57CC", VA = "0x7E57CC")]
			public VoronoiPointDistance(int nIndex, float fDistanceSqr)
			{
			}
		}

		[Token(Token = "0x20001B1")]
		public struct VoronoiCellKey
		{
			[Token(Token = "0x20001B2")]
			public class EqualityComparer : IEqualityComparer<VoronoiCellKey>
			{
				[Token(Token = "0x60009A0")]
				[Address(RVA = "0x7E5848", Offset = "0x7E5848", VA = "0x7E5848", Slot = "4")]
				public bool Equals(VoronoiCellKey x, VoronoiCellKey y)
				{
					return default(bool);
				}

				[Token(Token = "0x60009A1")]
				[Address(RVA = "0x7E5878", Offset = "0x7E5878", VA = "0x7E5878", Slot = "5")]
				public int GetHashCode(VoronoiCellKey x)
				{
					return default(int);
				}

				[Token(Token = "0x60009A2")]
				[Address(RVA = "0x7E58D8", Offset = "0x7E58D8", VA = "0x7E58D8")]
				public EqualityComparer()
				{
				}
			}

			[Token(Token = "0x4001006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int x;

			[Token(Token = "0x4001007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int y;

			[Token(Token = "0x4001008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int z;

			[Token(Token = "0x600099F")]
			[Address(RVA = "0x7E583C", Offset = "0x7E583C", VA = "0x7E583C")]
			public VoronoiCellKey(int x, int y, int z)
			{
			}
		}

		[Token(Token = "0x20001B3")]
		private class VoronoiThreadData
		{
			[Token(Token = "0x4001009")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<VoronoiCell> listVoronoiCells;

			[Token(Token = "0x400100A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MeshData meshDataCube;

			[Token(Token = "0x400100B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<MeshData> listMeshDatasObject;

			[Token(Token = "0x400100C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<MeshData> listMeshDatasChunks;

			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public SpaceTreeNode spaceTree;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public FracturedObject fracturedComponent;

			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int nCurrentCell;

			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int nTotalCells;

			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int nCellsProcessed;

			[Token(Token = "0x4001012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public ProgressDelegate progress;

			[Token(Token = "0x60009A3")]
			[Address(RVA = "0x7E58E0", Offset = "0x7E58E0", VA = "0x7E58E0")]
			public VoronoiThreadData()
			{
			}
		}

		[Token(Token = "0x20001B4")]
		public delegate void ProgressDelegate(string strTitle, string message, float fT);

		[Token(Token = "0x20001B5")]
		private class SpaceTreeNode
		{
			[Token(Token = "0x4001013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private SpaceTreeNode nodeOneSide;

			[Token(Token = "0x4001014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private SpaceTreeNode nodeOtherSide;

			[Token(Token = "0x4001015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int nLevel;

			[Token(Token = "0x4001016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int nSplitsX;

			[Token(Token = "0x4001017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int nSplitsY;

			[Token(Token = "0x4001018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int nSplitsZ;

			[Token(Token = "0x4001019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 v3Min;

			[Token(Token = "0x400101A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 v3Max;

			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<MeshData> listMeshDatasSpace;

			[Token(Token = "0x60009A8")]
			[Address(RVA = "0x7E5B58", Offset = "0x7E5B58", VA = "0x7E5B58")]
			public SpaceTreeNode()
			{
			}

			[Token(Token = "0x60009A9")]
			[Address(RVA = "0x7E5C08", Offset = "0x7E5C08", VA = "0x7E5C08")]
			public bool ContainsCompletely(Vector3 v3Min, Vector3 v3Max)
			{
				return default(bool);
			}

			[Token(Token = "0x60009AA")]
			[Address(RVA = "0x7E5C78", Offset = "0x7E5C78", VA = "0x7E5C78")]
			public static List<MeshData> GetSmallestPossibleMeshData(SpaceTreeNode root, Vector3 v3Min, Vector3 v3Max)
			{
				return null;
			}

			[Token(Token = "0x60009AB")]
			[Address(RVA = "0x7E5D38", Offset = "0x7E5D38", VA = "0x7E5D38")]
			public static SpaceTreeNode BuildSpaceTree(MeshData meshDataIn, int nSubdivisionLevels, FracturedObject fracturedComponent, [Optional] ProgressDelegate progress)
			{
				return null;
			}
		}

		[Token(Token = "0x20001B6")]
		public class SplitOptions
		{
			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static SplitOptions Default;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool bForceNoProgressInfo;

			[Token(Token = "0x400101E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool bForceNoIslandGeneration;

			[Token(Token = "0x400101F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool bForceNoChunkConnectionInfo;

			[Token(Token = "0x4001020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			public bool bForceNoIslandConnectionInfo;

			[Token(Token = "0x4001021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool bForceNoCap;

			[Token(Token = "0x4001022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			public bool bForceCapVertexSoup;

			[Token(Token = "0x4001023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
			public bool bIgnoreNegativeSide;

			[Token(Token = "0x4001024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
			public bool bVerticesAreLocal;

			[Token(Token = "0x4001025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int nForceMeshConnectivityHash;

			[Token(Token = "0x60009AC")]
			[Address(RVA = "0x7E77F8", Offset = "0x7E77F8", VA = "0x7E77F8")]
			public SplitOptions()
			{
			}
		}

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FracturingStats s_FracturingStats;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VoronoiThreadData s_VoronoiThreadData;

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x8CF7F0", Offset = "0x8CF7F0", VA = "0x8CF7F0")]
		public static void CancelFracturing()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x8CF914", Offset = "0x8CF914", VA = "0x8CF914")]
		public static bool IsFracturingCancelled()
		{
			return default(bool);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x8CFA44", Offset = "0x8CFA44", VA = "0x8CFA44")]
		public static bool FractureToChunks(FracturedObject fracturedComponent, bool bPositionOnSourceAndHideOriginal, out List<GameObject> listGameObjectsOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x8D00B8", Offset = "0x8D00B8", VA = "0x8D00B8")]
		private static Mesh CopyMesh(MeshFilter meshfIn)
		{
			return null;
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x8D04D8", Offset = "0x8D04D8", VA = "0x8D04D8")]
		private static bool FractureToChunksBSP(FracturedObject fracturedComponent, bool bPositionOnSourceAndHideOriginal, out List<GameObject> listGameObjectsOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x8D2030", Offset = "0x8D2030", VA = "0x8D2030")]
		private static bool FractureToChunksVoronoi(FracturedObject fracturedComponent, bool bPositionOnSourceAndHideOriginal, out List<GameObject> listGameObjectsOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x8E0BF8", Offset = "0x8E0BF8", VA = "0x8E0BF8")]
		public static void ThreadVoronoiComputePlaneDependencies()
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x8E1924", Offset = "0x8E1924", VA = "0x8E1924")]
		public static void ThreadVoronoiComputeCells()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x8D4E78", Offset = "0x8D4E78", VA = "0x8D4E78")]
		public static List<MeshData> ComputeMeshDataIslands(MeshData meshDataIn, bool bVerticesAreLocal, FracturedObject fracturedComponent, ProgressDelegate progress)
		{
			return null;
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x8E01D8", Offset = "0x8E01D8", VA = "0x8E01D8")]
		public static void ComputeChunkColliders(FracturedObject fracturedComponent, ProgressDelegate progress)
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x8E2C54", Offset = "0x8E2C54", VA = "0x8E2C54")]
		public static void DeleteChunkColliders(FracturedObject fracturedComponent)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x8D6220", Offset = "0x8D6220", VA = "0x8D6220")]
		private static Matrix4x4 GetRandomPlaneSplitMatrix(MeshData meshDataIn, FracturedObject fracturedComponent, out int nSplitAxisPerformed)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x8DF9AC", Offset = "0x8DF9AC", VA = "0x8DF9AC")]
		private static GameObject CreateNewSplitGameObject(GameObject gameObjectIn, FracturedObject fracturedComponent, string strName, bool bTransformVerticesBackToLocal, MeshData meshData)
		{
			return null;
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x8E2858", Offset = "0x8E2858", VA = "0x8E2858")]
		private static int CreateMeshConnectivityVoronoiHash(int nCell1, int nCell2)
		{
			return default(int);
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x8DFE10", Offset = "0x8DFE10", VA = "0x8DFE10")]
		private static void ComputeChunkConnections(FracturedObject fracturedObject, List<GameObject> listGameObjects, List<MeshData> listMeshDatas, [Optional] ProgressDelegate progress)
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x8E2878", Offset = "0x8E2878", VA = "0x8E2878")]
		private static void RemoveEmptySubmeshes(FracturedChunk fracturedChunk)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x8E2F54", Offset = "0x8E2F54", VA = "0x8E2F54")]
		public static bool SplitMeshUsingPlane(GameObject gameObjectIn, FracturedObject fracturedComponent, SplitOptions splitOptions, Transform transformPlaneSplit, out List<GameObject> listGameObjectsPosOut, out List<GameObject> listGameObjectsNegOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x8D6AB0", Offset = "0x8D6AB0", VA = "0x8D6AB0")]
		private static bool SplitMeshUsingPlane(MeshData meshDataIn, FracturedObject fracturedComponent, SplitOptions splitOptions, Vector3 v3PlaneNormal, Vector3 v3PlaneRight, Vector3 v3PlanePoint, out List<MeshData> listMeshDatasPosOut, out List<MeshData> listMeshDatasNegOut, [Optional] ProgressDelegate progress)
		{
			return default(bool);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x8D5618", Offset = "0x8D5618", VA = "0x8D5618")]
		private static bool ComputeIslandsMeshDataConnectivity(FracturedObject fracturedComponent, bool bVerticesAreLocal, MeshData meshData1, MeshData meshData2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x8E6DB8", Offset = "0x8E6DB8", VA = "0x8E6DB8")]
		public static bool IntersectEdges2D(float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4)
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x8E6F34", Offset = "0x8E6F34", VA = "0x8E6F34")]
		private static float CrossProduct2D(Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x8E4C1C", Offset = "0x8E4C1C", VA = "0x8E4C1C")]
		private static void TriangulateConstrainedDelaunay(List<List<Vector3>> listlistPointsConstrainedDelaunay, List<List<int>> listlistHashValuesConstrainedDelaunay, bool bForceVertexSoup, FracturedObject fracturedComponent, bool bConnectivityPostprocess, MeshFaceConnectivity faceConnectivityPos, MeshFaceConnectivity faceConnectivityNeg, MeshDataConnectivity meshConnectivityPos, MeshDataConnectivity meshConnectivityNeg, int nForceMeshConnectivityHash, int nSplitCloseSubMesh, Matrix4x4 mtxPlane, Matrix4x4 mtxToLocalPos, Matrix4x4 mtxToLocalNeg, Vector3 v3CenterPos, Vector3 v3CenterNeg, List<int>[] aListIndicesPosInOut, List<VertexData> listVertexDataPosInOut, List<int>[] aListIndicesNegInOut, List<VertexData> listVertexDataNegInOut)
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x8E6F44", Offset = "0x8E6F44", VA = "0x8E6F44")]
		private static void CreateIndexedMesh(IList<DelaunayTriangle> listTriangles, List<Vector3> listVerticesOut, List<int> listIndicesOut, Matrix4x4 mtxTransform, bool bTransform)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x8E7784", Offset = "0x8E7784", VA = "0x8E7784")]
		private static void Triangulate(List<Vector3> listVertices, List<int> listIndices, FracturedObject fracturedComponent, List<List<Vector3>> listlistPointsConstrainedDelaunay, List<List<int>> listlistHashValuesConstrainedDelaunay, bool bConnectivityPostprocess, MeshFaceConnectivity faceConnectivityPos, MeshFaceConnectivity faceConnectivityNeg, MeshDataConnectivity meshConnectivityPos, MeshDataConnectivity meshConnectivityNeg, int nForceMeshConnectivityHash, int nSplitCloseSubMesh, Matrix4x4 mtxPlane, Matrix4x4 mtxToLocalPos, Matrix4x4 mtxToLocalNeg, Vector3 v3CenterPos, Vector3 v3CenterNeg, List<int>[] aListIndicesPosInOut, List<VertexData> listVertexDataPosInOut, List<int>[] aListIndicesNegInOut, List<VertexData> listVertexDataNegInOut)
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x8E86A8", Offset = "0x8E86A8", VA = "0x8E86A8")]
		private static int ComputeVertexHash(Vector3 v3Vertex, List<List<Vector3>> listlistPointsConstrainedDelaunay, List<List<int>> listlistHashValuesConstrainedDelaunay)
		{
			return default(int);
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x8E39AC", Offset = "0x8E39AC", VA = "0x8E39AC")]
		private static bool AddCapEdge(Dictionary<EdgeKeyByHash, CapEdge> dicCapEdges, int nVertexHash1, int nVertexHash2, Vector3 v3Vertex1, Vector3 v3Vertex2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x8E3B3C", Offset = "0x8E3B3C", VA = "0x8E3B3C")]
		private static bool ResolveCap(Dictionary<EdgeKeyByHash, CapEdge> dicCapEdges, List<List<Vector3>> listlistResolvedCapVertices, List<List<int>> listlistResolvedCapHashValues, FracturedObject fracturedComponent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001B7")]
	public class DieTimer : MonoBehaviour
	{
		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float SecondsToDie;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float OffscreenLifeTime;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float m_fTimer;

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x7E7898", Offset = "0x7E7898", VA = "0x7E7898")]
		private void Start()
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x7E78A0", Offset = "0x7E78A0", VA = "0x7E78A0")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x7E7944", Offset = "0x7E7944", VA = "0x7E7944")]
		public DieTimer()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public static class Parameters
	{
		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float EPSILONDISTANCEPLANE;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float EPSILONDISTANCEVERTEX;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static float EPSILONCAPPRECISIONMIN;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static float EPSILONCROSSPRODUCT;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static float EPSILONINSIDETRIANGLE;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int VERTICESSPACESUBDIVISION;
	}
	[Token(Token = "0x20001B9")]
	public class VertexData
	{
		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nVertexHash;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 v3Vertex;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 v3Normal;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector4 v4Tangent;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color32 color32;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 v2Mapping1;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2 v2Mapping2;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool bHasNormal;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool bHasTangent;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool bHasColor32;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool bHasMapping1;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool bHasMapping2;

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x7E79B8", Offset = "0x7E79B8", VA = "0x7E79B8")]
		public VertexData(int nVertexHash)
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x7E7AC0", Offset = "0x7E7AC0", VA = "0x7E7AC0")]
		public VertexData(int nVertexHash, Vector3 v3Vertex, Vector3 v3Normal, Vector3 v4Tangent, Color32 color32, Vector2 v2Mapping1, Vector2 v2Mapping2, bool bHasNormal, bool bHasTangent, bool bHasColor32, bool bHasMapping1, bool bHasMapping2)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x7E7B9C", Offset = "0x7E7B9C", VA = "0x7E7B9C")]
		public VertexData Copy()
		{
			return null;
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x7E7C68", Offset = "0x7E7C68", VA = "0x7E7C68")]
		public static VertexData Lerp(int nVertexHash, VertexData vd1, VertexData vd2, float fT)
		{
			return null;
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x7E7EE8", Offset = "0x7E7EE8", VA = "0x7E7EE8")]
		public static bool ClipAgainstPlane(VertexData[] aVertexDataInput, int nIndexA, int nIndexB, Vector3 v3A, Vector3 v3B, Plane planeSplit, ref VertexData clippedVertexDataOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x7E8194", Offset = "0x7E8194", VA = "0x7E8194")]
		public static VertexData[] BuildVertexDataArray(Mesh mesh, Matrix4x4 mtxLocalToWorld, bool bTransformVerticesToWorld)
		{
			return null;
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x7E8A7C", Offset = "0x7E8A7C", VA = "0x7E8A7C")]
		public static void SetMeshDataFromVertexDataArray(MeshFilter meshFilter, MeshData meshData, bool bTransformVertexToLocal)
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public struct EdgeKeyByIndex
	{
		[Token(Token = "0x20001BB")]
		public class EqualityComparer : IEqualityComparer<EdgeKeyByIndex>
		{
			[Token(Token = "0x60009BC")]
			[Address(RVA = "0x7E8FEC", Offset = "0x7E8FEC", VA = "0x7E8FEC", Slot = "4")]
			public bool Equals(EdgeKeyByIndex x, EdgeKeyByIndex y)
			{
				return default(bool);
			}

			[Token(Token = "0x60009BD")]
			[Address(RVA = "0x7E9024", Offset = "0x7E9024", VA = "0x7E9024", Slot = "5")]
			public int GetHashCode(EdgeKeyByIndex x)
			{
				return default(int);
			}

			[Token(Token = "0x60009BE")]
			[Address(RVA = "0x7E9060", Offset = "0x7E9060", VA = "0x7E9060")]
			public EqualityComparer()
			{
			}
		}

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nIndexA;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int nIndexB;

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x7E8FA0", Offset = "0x7E8FA0", VA = "0x7E8FA0")]
		public EdgeKeyByIndex(int nIndexA, int nIndexB)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x7E8FA8", Offset = "0x7E8FA8", VA = "0x7E8FA8")]
		public void Set(int nIndexA, int nIndexB)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x7E8FB0", Offset = "0x7E8FB0", VA = "0x7E8FB0")]
		public bool CompareTo(int nIndexA, int nIndexB)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BC")]
	public struct EdgeKeyByHash
	{
		[Token(Token = "0x20001BD")]
		public class EqualityComparer : IEqualityComparer<EdgeKeyByHash>
		{
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0x7E90B4", Offset = "0x7E90B4", VA = "0x7E90B4", Slot = "4")]
			public bool Equals(EdgeKeyByHash x, EdgeKeyByHash y)
			{
				return default(bool);
			}

			[Token(Token = "0x60009C3")]
			[Address(RVA = "0x7E90EC", Offset = "0x7E90EC", VA = "0x7E90EC", Slot = "5")]
			public int GetHashCode(EdgeKeyByHash x)
			{
				return default(int);
			}

			[Token(Token = "0x60009C4")]
			[Address(RVA = "0x7E9128", Offset = "0x7E9128", VA = "0x7E9128")]
			public EqualityComparer()
			{
			}
		}

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nHashA;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int nHashB;

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x7E9068", Offset = "0x7E9068", VA = "0x7E9068")]
		public EdgeKeyByHash(int nHashA, int nHashB)
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x7E9070", Offset = "0x7E9070", VA = "0x7E9070")]
		public void Set(int nHashA, int nHashB)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x7E9078", Offset = "0x7E9078", VA = "0x7E9078")]
		public bool CompareTo(int nHashA, int nHashB)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001BE")]
	public struct ClippedEdge
	{
		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nOldIndexA;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int nOldIndexB;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int nNewIndexA;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int nNewIndexB;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nClippedIndex;

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x7E9130", Offset = "0x7E9130", VA = "0x7E9130")]
		public ClippedEdge(int nOldIndexA, int nOldIndexB, int nNewIndexA, int nNewIndexB, int nClippedIndex)
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x7E9140", Offset = "0x7E9140", VA = "0x7E9140")]
		public int GetFirstIndex(int nOldIndexA)
		{
			return default(int);
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x7E915C", Offset = "0x7E915C", VA = "0x7E915C")]
		public int GetSecondIndex(int nOldIndexB)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001BF")]
	public struct CapEdge
	{
		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 v1;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 v2;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int nHash1;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int nHash2;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fLength;

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x7E9178", Offset = "0x7E9178", VA = "0x7E9178")]
		public CapEdge(int nHash1, int nHash2, Vector3 v1, Vector3 v2, float fLength)
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x7E9190", Offset = "0x7E9190", VA = "0x7E9190")]
		public int SharesVertex1Of(CapEdge edge)
		{
			return default(int);
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x7E91BC", Offset = "0x7E91BC", VA = "0x7E91BC")]
		public int SharesVertex2Of(CapEdge edge)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001C0")]
	public class MeshFaceConnectivity
	{
		[Token(Token = "0x20001C1")]
		public struct EdgeData
		{
			[Token(Token = "0x20001C2")]
			public struct SideData
			{
				[Token(Token = "0x4001055")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public int nFace;

				[Token(Token = "0x4001056")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
				public int nSubMesh;

				[Token(Token = "0x4001057")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public int nSubMeshFace;

				[Token(Token = "0x4001058")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				public int nEdgePos;

				[Token(Token = "0x4001059")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public int nVertexDataV1;

				[Token(Token = "0x400105A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public int nVertexDataV2;

				[Token(Token = "0x60009D3")]
				[Address(RVA = "0x7EAB50", Offset = "0x7EAB50", VA = "0x7EAB50")]
				public SideData(int nFace, int nSubMesh, int nSubMeshFace, int nEdgePos, int nVertexDataV1, int nVertexDataV2)
				{
				}
			}

			[Token(Token = "0x400104F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int nEdgeIndex;

			[Token(Token = "0x4001050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private int nVertex1Hash;

			[Token(Token = "0x4001051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private int nVertex2Hash;

			[Token(Token = "0x4001052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 v1;

			[Token(Token = "0x4001053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 v2;

			[Token(Token = "0x4001054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<SideData> listSides;

			[Token(Token = "0x60009CF")]
			[Address(RVA = "0x7EA7A0", Offset = "0x7EA7A0", VA = "0x7EA7A0")]
			public EdgeData(int nEdgeIndex, int nFace, int nSubMesh, int nSubMeshFace, int nEdgePos, Vector3 v1, Vector3 v2, int nVertex1Hash, int nVertex2Hash, int nVertexDataV1, int nVertexDataV2)
			{
			}

			[Token(Token = "0x60009D0")]
			[Address(RVA = "0x7EAB60", Offset = "0x7EAB60", VA = "0x7EAB60")]
			public bool Compare(int nVertex1Hash, int nVertex2Hash)
			{
				return default(bool);
			}

			[Token(Token = "0x60009D1")]
			[Address(RVA = "0x7EA654", Offset = "0x7EA654", VA = "0x7EA654")]
			public void AddSideData(int nFace, int nSubMesh, int nSubMeshFace, int nEdgePos, int nVertexDataV1, int nVertexDataV2)
			{
			}

			[Token(Token = "0x60009D2")]
			[Address(RVA = "0x7EAB9C", Offset = "0x7EAB9C", VA = "0x7EAB9C")]
			public bool HasMoreThanOneSide()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20001C3")]
		public class TriangleData
		{
			[Token(Token = "0x400105B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int nSubMesh;

			[Token(Token = "0x400105C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int nTriangle;

			[Token(Token = "0x400105D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] anEdges;

			[Token(Token = "0x400105E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<int>[] alistNeighborSubMeshes;

			[Token(Token = "0x400105F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<int>[] alistNeighborTriangles;

			[Token(Token = "0x4001060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool bVisited;

			[Token(Token = "0x60009D4")]
			[Address(RVA = "0x7EA93C", Offset = "0x7EA93C", VA = "0x7EA93C")]
			public TriangleData(int nSubMesh, int nTriangle)
			{
			}
		}

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<TriangleData> listTriangles;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<EdgeData> listEdges;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<int> listEdgeIndices;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<EdgeKeyByHash, EdgeData> dicEdges;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int nEdgeCount;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, int> dicSubMeshTriangleCount;

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x7E91E8", Offset = "0x7E91E8", VA = "0x7E91E8")]
		public MeshFaceConnectivity()
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x7E93F0", Offset = "0x7E93F0", VA = "0x7E93F0")]
		public void Clear()
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x7E94FC", Offset = "0x7E94FC", VA = "0x7E94FC")]
		public void ResetVisited()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x7E9584", Offset = "0x7E9584", VA = "0x7E9584")]
		public void AddEdge(int nSubMesh, Vector3 v1, Vector3 v2, int nVertex1Hash, int nVertex2Hash, int nVertexDataIndex1, int nVertexDataIndex2)
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public class MeshDataConnectivity
	{
		[Token(Token = "0x20001C5")]
		public struct Face
		{
			[Token(Token = "0x20001C6")]
			public class EqualityComparer : IEqualityComparer<Face>
			{
				[Token(Token = "0x60009DC")]
				[Address(RVA = "0x7EC580", Offset = "0x7EC580", VA = "0x7EC580", Slot = "4")]
				public bool Equals(Face x, Face y)
				{
					return default(bool);
				}

				[Token(Token = "0x60009DD")]
				[Address(RVA = "0x7EC5A0", Offset = "0x7EC5A0", VA = "0x7EC5A0", Slot = "5")]
				public int GetHashCode(Face x)
				{
					return default(int);
				}

				[Token(Token = "0x60009DE")]
				[Address(RVA = "0x7EAD6C", Offset = "0x7EAD6C", VA = "0x7EAD6C")]
				public EqualityComparer()
				{
				}
			}

			[Token(Token = "0x4001065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int nSubMesh;

			[Token(Token = "0x4001066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int nFaceIndex;

			[Token(Token = "0x60009DB")]
			[Address(RVA = "0x7EBC10", Offset = "0x7EBC10", VA = "0x7EBC10")]
			public Face(int nSubMesh, int nFaceIndex)
			{
			}
		}

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int s_CurrentSharedFaceHash;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<int, List<Face>> dicHash2FaceList;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Face, List<int>> dicFace2HashList;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Face, bool> dicFace2IsClipped;

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x7EABF0", Offset = "0x7EABF0", VA = "0x7EABF0")]
		public MeshDataConnectivity()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x7EAD74", Offset = "0x7EAD74", VA = "0x7EAD74")]
		public MeshDataConnectivity GetDeepCopy()
		{
			return null;
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x7EB6B8", Offset = "0x7EB6B8", VA = "0x7EB6B8")]
		public void NotifyNewClippedFace(MeshData meshDataSource, int nSourceSubMesh, int nSourceFaceIndex, int nDestSubMesh, int nDestFaceIndex)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x7EBC18", Offset = "0x7EBC18", VA = "0x7EBC18")]
		public static int GetNewHash()
		{
			return default(int);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x7EBD54", Offset = "0x7EBD54", VA = "0x7EBD54")]
		public void NotifyNewCapFace(int nHash, int nSubMesh, int nFaceIndex)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x7EC014", Offset = "0x7EC014", VA = "0x7EC014")]
		public void NotifyRemappedFace(MeshDataConnectivity source, int nSourceSubMesh, int nSourceFaceIndex, int nDestSubMesh, int nDestFaceIndex)
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public class MeshData
	{
		[Token(Token = "0x20001C8")]
		public class IncreasingSizeComparer : IComparer<MeshData>
		{
			[Token(Token = "0x4001073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int nSplitAxis;

			[Token(Token = "0x60009ED")]
			[Address(RVA = "0x7F0004", Offset = "0x7F0004", VA = "0x7F0004")]
			public IncreasingSizeComparer(int nSplitAxis)
			{
			}

			[Token(Token = "0x60009EE")]
			[Address(RVA = "0x7F002C", Offset = "0x7F002C", VA = "0x7F002C", Slot = "4")]
			public int Compare(MeshData a, MeshData b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x20001C9")]
		public class DecreasingSizeComparer : IComparer<MeshData>
		{
			[Token(Token = "0x4001074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int nSplitAxis;

			[Token(Token = "0x60009EF")]
			[Address(RVA = "0x7F0224", Offset = "0x7F0224", VA = "0x7F0224")]
			public DecreasingSizeComparer(int nSplitAxis)
			{
			}

			[Token(Token = "0x60009F0")]
			[Address(RVA = "0x7F024C", Offset = "0x7F024C", VA = "0x7F024C", Slot = "4")]
			public int Compare(MeshData a, MeshData b)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nSubMeshCount;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[][] aaIndices;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int nSplitCloseSubMesh;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VertexData[] aVertexData;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 v3Position;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion qRotation;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 v3Scale;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 v3Min;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 v3Max;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int nCurrentVertexHash;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Material[] aMaterials;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public MeshDataConnectivity meshDataConnectivity;

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x7EC5DC", Offset = "0x7EC5DC", VA = "0x7EC5DC")]
		private MeshData()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x7EC69C", Offset = "0x7EC69C", VA = "0x7EC69C")]
		public MeshData(Material[] aMaterials, List<int>[] alistIndices, List<VertexData> listVertexData, int nSplitCloseSubMesh, Vector3 v3Position, Quaternion qRotation, Vector3 v3Scale, Matrix4x4 mtxTransformVertices, bool bUseTransform, bool bBuildVertexHashData)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x7ED4D4", Offset = "0x7ED4D4", VA = "0x7ED4D4")]
		public MeshData(Transform transform, Mesh mesh, Material[] aMaterials, Matrix4x4 mtxLocalToWorld, bool bTransformVerticesToWorld, int nSplitCloseSubMesh, bool bBuildVertexHashData)
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x7ED5E4", Offset = "0x7ED5E4", VA = "0x7ED5E4")]
		public MeshData(Vector3 v3Position, Quaternion qRotation, Vector3 v3Scale, Mesh mesh, Material[] aMaterials, Matrix4x4 mtxLocalToWorld, bool bTransformVerticesToWorld, int nSplitCloseSubMesh, bool bBuildVertexHashData)
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x7ED8C8", Offset = "0x7ED8C8", VA = "0x7ED8C8")]
		public static MeshData CreateBoxMeshData(Vector3 v3Pos, Quaternion qRot, Vector3 v3Scale, Vector3 v3Min, Vector3 v3Max)
		{
			return null;
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x7EDC58", Offset = "0x7EDC58", VA = "0x7EDC58")]
		public MeshData GetDeepCopy()
		{
			return null;
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x7EDF10", Offset = "0x7EDF10", VA = "0x7EDF10")]
		public bool FillMeshFilter(MeshFilter meshFilter, bool bTransformVerticesToLocal)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x7EC9F4", Offset = "0x7EC9F4", VA = "0x7EC9F4")]
		public static void ComputeMinMax(IEnumerable<VertexData> VertexData, ref Vector3 v3Min, ref Vector3 v3Max)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x7ECD6C", Offset = "0x7ECD6C", VA = "0x7ECD6C")]
		private void BuildVertexHashData()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x7EE084", Offset = "0x7EE084", VA = "0x7EE084")]
		public bool GetSharedFacesArea(FracturedObject fracturedComponent, MeshData meshData2, out float fSharedArea)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x7EE950", Offset = "0x7EE950", VA = "0x7EE950")]
		private static bool Face2InsideFace1(FracturedObject fracturedComponent, MeshData meshData1, MeshData meshData2, MeshDataConnectivity.Face face1, MeshDataConnectivity.Face face2)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x7EF210", Offset = "0x7EF210", VA = "0x7EF210")]
		public static List<MeshData> PostProcessConnectivity(MeshData meshDataSource, MeshFaceConnectivity connectivity, MeshDataConnectivity meshConnectivity, List<int>[] alistIndices, List<VertexData> listVertexData, int nSplitCloseSubMesh, int nCurrentVertexHash, bool bTransformToLocal)
		{
			return null;
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x7EFF84", Offset = "0x7EFF84", VA = "0x7EFF84")]
		private static bool StillHasFacesToProcess(List<int>[] alistFacesRemaining)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x7EF9E0", Offset = "0x7EF9E0", VA = "0x7EF9E0")]
		private static void LookForClosedObjectRecursive(MeshFaceConnectivity connectivity, MeshDataConnectivity meshConnectivity, int nSubMeshStart, int nFaceSubMeshStart, List<int>[] alistIndicesIn, List<VertexData> listVertexDataIn, List<int>[] alistFacesRemainingInOut, int[] aLinearFaceIndexStart, List<int>[] alistIndicesOut, List<VertexData> listVertexDataOut, Dictionary<int, int> dicVertexRemap, MeshDataConnectivity meshConnectivityOut)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001CA")]
	public class SupportPlane
	{
		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool GUIExpanded;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string GUIName;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool GUIShowInScene;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 v3PlanePosition;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Quaternion qPlaneRotation;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 v3PlaneScale;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Mesh planeMesh;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FracturedObject fracturedObject;

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x7F0444", Offset = "0x7F0444", VA = "0x7F0444")]
		public SupportPlane(FracturedObject fracturedObject)
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x7F0A28", Offset = "0x7F0A28", VA = "0x7F0A28")]
		public Matrix4x4 GetLocalMatrix()
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x7F0A7C", Offset = "0x7F0A7C", VA = "0x7F0A7C")]
		public Vector3[] GetBoundingBoxSegments(Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x7F0D44", Offset = "0x7F0D44", VA = "0x7F0D44")]
		public bool IntersectsWith(GameObject otherGameObject, bool bBelowIsAlsoValid = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x7F1608", Offset = "0x7F1608", VA = "0x7F1608")]
		private static bool TestSegmentVsPlane(Vector3 v1, Vector3 v2, Plane plane, Matrix4x4 mtxToPlaneLocal, float fLimitRight, float fLimitUp, float fLimitForward)
		{
			return default(bool);
		}
	}
}
namespace Poly2Tri
{
	[Token(Token = "0x20001CB")]
	public static class P2T
	{
		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TriangulationAlgorithm _defaultAlgorithm;

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x7F1930", Offset = "0x7F1930", VA = "0x7F1930")]
		public static void Triangulate(PolygonSet ps)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x7F1BF8", Offset = "0x7F1BF8", VA = "0x7F1BF8")]
		public static void Triangulate(Polygon p)
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x7F1C84", Offset = "0x7F1C84", VA = "0x7F1C84")]
		public static void Triangulate(ConstrainedPointSet cps)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x7F1CD4", Offset = "0x7F1CD4", VA = "0x7F1CD4")]
		public static void Triangulate(PointSet ps)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x7F1D24", Offset = "0x7F1D24", VA = "0x7F1D24")]
		public static TriangulationContext CreateContext(TriangulationAlgorithm algorithm)
		{
			return null;
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x7F1C48", Offset = "0x7F1C48", VA = "0x7F1C48")]
		public static void Triangulate(TriangulationAlgorithm algorithm, ITriangulatable t)
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x7F1E84", Offset = "0x7F1E84", VA = "0x7F1E84")]
		public static void Triangulate(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x7F1F6C", Offset = "0x7F1F6C", VA = "0x7F1F6C")]
		public static void Warmup()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class DelaunayTriangle
	{
		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FixedArray3<TriangulationPoint> Points;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FixedArray3<DelaunayTriangle> Neighbors;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private FixedBitArray3 mEdgeIsConstrained;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public FixedBitArray3 EdgeIsDelaunay;

		[Token(Token = "0x17000125")]
		public FixedBitArray3 EdgeIsConstrained
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0x7F1F70", Offset = "0x7F1F70", VA = "0x7F1F70")]
			get
			{
				return default(FixedBitArray3);
			}
		}

		[Token(Token = "0x17000126")]
		public bool IsInterior
		{
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x7F1F80", Offset = "0x7F1F80", VA = "0x7F1F80")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x7F1F88", Offset = "0x7F1F88", VA = "0x7F1F88")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x7F1F94", Offset = "0x7F1F94", VA = "0x7F1F94")]
		public DelaunayTriangle(TriangulationPoint p1, TriangulationPoint p2, TriangulationPoint p3)
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x7F2038", Offset = "0x7F2038", VA = "0x7F2038")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x7F20E8", Offset = "0x7F20E8", VA = "0x7F20E8")]
		public int IndexCWFrom(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x7F211C", Offset = "0x7F211C", VA = "0x7F211C")]
		public int IndexCCWFrom(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x7F2150", Offset = "0x7F2150", VA = "0x7F2150")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x7F21A8", Offset = "0x7F21A8", VA = "0x7F21A8")]
		private void MarkNeighbor(TriangulationPoint p1, TriangulationPoint p2, DelaunayTriangle t)
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x7F2358", Offset = "0x7F2358", VA = "0x7F2358")]
		public void MarkNeighbor(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x7F2504", Offset = "0x7F2504", VA = "0x7F2504")]
		public void ClearNeighbors()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x7F2580", Offset = "0x7F2580", VA = "0x7F2580")]
		public void ClearNeighbor(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x7F2658", Offset = "0x7F2658", VA = "0x7F2658")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x7F2728", Offset = "0x7F2728", VA = "0x7F2728")]
		public TriangulationPoint OppositePoint(DelaunayTriangle t, TriangulationPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x7F27DC", Offset = "0x7F27DC", VA = "0x7F27DC")]
		public DelaunayTriangle NeighborCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x7F287C", Offset = "0x7F287C", VA = "0x7F287C")]
		public DelaunayTriangle NeighborCCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x7F291C", Offset = "0x7F291C", VA = "0x7F291C")]
		public DelaunayTriangle NeighborAcrossFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x7F299C", Offset = "0x7F299C", VA = "0x7F299C")]
		public TriangulationPoint PointCCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x7F2754", Offset = "0x7F2754", VA = "0x7F2754")]
		public TriangulationPoint PointCWFrom(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x7F2A24", Offset = "0x7F2A24", VA = "0x7F2A24")]
		private void RotateCW()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x7F2AF0", Offset = "0x7F2AF0", VA = "0x7F2AF0")]
		public void Legalize(TriangulationPoint oPoint, TriangulationPoint nPoint)
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x7F2B88", Offset = "0x7F2B88", VA = "0x7F2B88", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x7F2DE4", Offset = "0x7F2DE4", VA = "0x7F2DE4")]
		public void MarkNeighborEdges()
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x7F2F64", Offset = "0x7F2F64", VA = "0x7F2F64")]
		public void MarkEdge(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x7F3078", Offset = "0x7F3078", VA = "0x7F3078")]
		public void MarkEdge(List<DelaunayTriangle> tList)
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x7F32AC", Offset = "0x7F32AC", VA = "0x7F32AC")]
		public void MarkConstrainedEdge(int index)
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x7F32BC", Offset = "0x7F32BC", VA = "0x7F32BC")]
		public void MarkConstrainedEdge(DTSweepConstraint edge)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x7F2F30", Offset = "0x7F2F30", VA = "0x7F2F30")]
		public void MarkConstrainedEdge(TriangulationPoint p, TriangulationPoint q)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x7F3308", Offset = "0x7F3308", VA = "0x7F3308")]
		public double Area()
		{
			return default(double);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x7F3428", Offset = "0x7F3428", VA = "0x7F3428")]
		public TriangulationPoint Centroid()
		{
			return null;
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x7F2270", Offset = "0x7F2270", VA = "0x7F2270")]
		public int EdgeIndex(TriangulationPoint p1, TriangulationPoint p2)
		{
			return default(int);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x7F35AC", Offset = "0x7F35AC", VA = "0x7F35AC")]
		public bool GetConstrainedEdgeCCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x7F3600", Offset = "0x7F3600", VA = "0x7F3600")]
		public bool GetConstrainedEdgeCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x7F3654", Offset = "0x7F3654", VA = "0x7F3654")]
		public bool GetConstrainedEdgeAcross(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x7F3688", Offset = "0x7F3688", VA = "0x7F3688")]
		protected void SetConstrainedEdge(int idx, bool ce)
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x7F3698", Offset = "0x7F3698", VA = "0x7F3698")]
		public void SetConstrainedEdgeCCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x7F36E8", Offset = "0x7F36E8", VA = "0x7F36E8")]
		public void SetConstrainedEdgeCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x7F3738", Offset = "0x7F3738", VA = "0x7F3738")]
		public void SetConstrainedEdgeAcross(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x7F376C", Offset = "0x7F376C", VA = "0x7F376C")]
		public bool GetDelaunayEdgeCCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x7F37AC", Offset = "0x7F37AC", VA = "0x7F37AC")]
		public bool GetDelaunayEdgeCW(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x7F37EC", Offset = "0x7F37EC", VA = "0x7F37EC")]
		public bool GetDelaunayEdgeAcross(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x7F380C", Offset = "0x7F380C", VA = "0x7F380C")]
		public void SetDelaunayEdgeCCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x7F385C", Offset = "0x7F385C", VA = "0x7F385C")]
		public void SetDelaunayEdgeCW(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x7F38AC", Offset = "0x7F38AC", VA = "0x7F38AC")]
		public void SetDelaunayEdgeAcross(TriangulationPoint p, bool ce)
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x7F38DC", Offset = "0x7F38DC", VA = "0x7F38DC")]
		public bool GetEdge(int idx, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x7F3A04", Offset = "0x7F3A04", VA = "0x7F3A04")]
		public bool GetEdgeCCW(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x7F3A50", Offset = "0x7F3A50", VA = "0x7F3A50")]
		public bool GetEdgeCW(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x7F3A9C", Offset = "0x7F3A9C", VA = "0x7F3A9C")]
		public bool GetEdgeAcross(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001CD")]
	public class AdvancingFront
	{
		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AdvancingFrontNode Head;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AdvancingFrontNode Tail;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected AdvancingFrontNode Search;

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x7F3AC8", Offset = "0x7F3AC8", VA = "0x7F3AC8")]
		public AdvancingFront(AdvancingFrontNode head, AdvancingFrontNode tail)
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x7F3B1C", Offset = "0x7F3B1C", VA = "0x7F3B1C")]
		public void AddNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x7F3B20", Offset = "0x7F3B20", VA = "0x7F3B20")]
		public void RemoveNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x7F3B24", Offset = "0x7F3B24", VA = "0x7F3B24", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x7F3C1C", Offset = "0x7F3C1C", VA = "0x7F3C1C")]
		private AdvancingFrontNode FindSearchNode(double x)
		{
			return null;
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x7F3C24", Offset = "0x7F3C24", VA = "0x7F3C24")]
		public AdvancingFrontNode LocateNode(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x7F3C54", Offset = "0x7F3C54", VA = "0x7F3C54")]
		private AdvancingFrontNode LocateNode(double x)
		{
			return null;
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x7F3CC4", Offset = "0x7F3CC4", VA = "0x7F3CC4")]
		public AdvancingFrontNode LocatePoint(TriangulationPoint point)
		{
			return null;
		}
	}
	[Token(Token = "0x20001CE")]
	public class AdvancingFrontNode
	{
		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AdvancingFrontNode Next;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AdvancingFrontNode Prev;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double Value;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TriangulationPoint Point;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DelaunayTriangle Triangle;

		[Token(Token = "0x17000127")]
		public bool HasNext
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0x7F3E50", Offset = "0x7F3E50", VA = "0x7F3E50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000128")]
		public bool HasPrev
		{
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0x7F3E60", Offset = "0x7F3E60", VA = "0x7F3E60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x7F3E00", Offset = "0x7F3E00", VA = "0x7F3E00")]
		public AdvancingFrontNode(TriangulationPoint point)
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public static class DTSweep
	{
		[Token(Token = "0x400108B")]
		private const double PI_div2 = System.Math.PI / 2.0;

		[Token(Token = "0x400108C")]
		private const double PI_3div4 = System.Math.PI * 3.0 / 4.0;

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x7F1F14", Offset = "0x7F1F14", VA = "0x7F1F14")]
		public static void Triangulate(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x7F411C", Offset = "0x7F411C", VA = "0x7F411C")]
		private static void Sweep(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x7F435C", Offset = "0x7F435C", VA = "0x7F435C")]
		private static void FixupConstrainedEdges(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x7F4698", Offset = "0x7F4698", VA = "0x7F4698")]
		private static void FinalizationConvexHull(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x7F4E94", Offset = "0x7F4E94", VA = "0x7F4E94")]
		private static void TurnAdvancingFrontConvex(DTSweepContext tcx, AdvancingFrontNode b, AdvancingFrontNode c)
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x7F45E4", Offset = "0x7F45E4", VA = "0x7F45E4")]
		private static void FinalizationPolygon(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x7F580C", Offset = "0x7F580C", VA = "0x7F580C")]
		private static void FinalizationConstraints(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x7F4AB8", Offset = "0x7F4AB8", VA = "0x7F4AB8")]
		private static AdvancingFrontNode PointEvent(DTSweepContext tcx, TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x7F58D0", Offset = "0x7F58D0", VA = "0x7F58D0")]
		private static AdvancingFrontNode NewFrontTriangle(DTSweepContext tcx, TriangulationPoint point, AdvancingFrontNode node)
		{
			return null;
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x7F4C54", Offset = "0x7F4C54", VA = "0x7F4C54")]
		private static void EdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x7F5F9C", Offset = "0x7F5F9C", VA = "0x7F5F9C")]
		private static void FillEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x7F6470", Offset = "0x7F6470", VA = "0x7F6470")]
		private static void FillRightConcaveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x7F6540", Offset = "0x7F6540", VA = "0x7F6540")]
		private static void FillRightConvexEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x7F6618", Offset = "0x7F6618", VA = "0x7F6618")]
		private static void FillRightBelowEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x7F6254", Offset = "0x7F6254", VA = "0x7F6254")]
		private static void FillRightAboveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x7F6714", Offset = "0x7F6714", VA = "0x7F6714")]
		private static void FillLeftConvexEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x7F67E4", Offset = "0x7F67E4", VA = "0x7F67E4")]
		private static void FillLeftConcaveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x7F68AC", Offset = "0x7F68AC", VA = "0x7F68AC")]
		private static void FillLeftBelowEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x7F6364", Offset = "0x7F6364", VA = "0x7F6364")]
		private static void FillLeftAboveEdgeEvent(DTSweepContext tcx, DTSweepConstraint edge, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x7F5ED8", Offset = "0x7F5ED8", VA = "0x7F5ED8")]
		private static bool IsEdgeSideOfTriangle(DelaunayTriangle triangle, TriangulationPoint ep, TriangulationPoint eq)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x7F5FC8", Offset = "0x7F5FC8", VA = "0x7F5FC8")]
		private static void EdgeEvent(DTSweepContext tcx, TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle triangle, TriangulationPoint point)
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x7F6A04", Offset = "0x7F6A04", VA = "0x7F6A04")]
		private static void FlipEdgeEvent(DTSweepContext tcx, TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle t, TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x7F6E60", Offset = "0x7F6E60", VA = "0x7F6E60")]
		private static bool NextFlipPoint(TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle ot, TriangulationPoint op, out TriangulationPoint newP)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x7F6DAC", Offset = "0x7F6DAC", VA = "0x7F6DAC")]
		private static DelaunayTriangle NextFlipTriangle(DTSweepContext tcx, Orientation o, DelaunayTriangle t, DelaunayTriangle ot, TriangulationPoint p, TriangulationPoint op)
		{
			return null;
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x7F6F58", Offset = "0x7F6F58", VA = "0x7F6F58")]
		private static void FlipScanEdgeEvent(DTSweepContext tcx, TriangulationPoint ep, TriangulationPoint eq, DelaunayTriangle flipTriangle, DelaunayTriangle t, TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x7F5ACC", Offset = "0x7F5ACC", VA = "0x7F5ACC")]
		private static void FillAdvancingFront(DTSweepContext tcx, AdvancingFrontNode n)
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x7F737C", Offset = "0x7F737C", VA = "0x7F737C")]
		private static void FillBasin(DTSweepContext tcx, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x7F7600", Offset = "0x7F7600", VA = "0x7F7600")]
		private static void FillBasinReq(DTSweepContext tcx, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x7F772C", Offset = "0x7F772C", VA = "0x7F772C")]
		private static bool IsShallow(DTSweepContext tcx, AdvancingFrontNode node)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x7F7148", Offset = "0x7F7148", VA = "0x7F7148")]
		private static double HoleAngle(AdvancingFrontNode node)
		{
			return default(double);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x7F7288", Offset = "0x7F7288", VA = "0x7F7288")]
		private static double BasinAngle(AdvancingFrontNode node)
		{
			return default(double);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x7F5674", Offset = "0x7F5674", VA = "0x7F5674")]
		private static void Fill(DTSweepContext tcx, AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x7F5BC4", Offset = "0x7F5BC4", VA = "0x7F5BC4")]
		private static bool Legalize(DTSweepContext tcx, DelaunayTriangle t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x7F4F9C", Offset = "0x7F4F9C", VA = "0x7F4F9C")]
		private static void RotateTrianglePair(DelaunayTriangle t, TriangulationPoint p, DelaunayTriangle ot, TriangulationPoint op)
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class DTSweepBasin
	{
		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AdvancingFrontNode leftNode;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AdvancingFrontNode bottomNode;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdvancingFrontNode rightNode;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public double width;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool leftHighest;

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x7F77DC", Offset = "0x7F77DC", VA = "0x7F77DC")]
		public DTSweepBasin()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	public class DTSweepConstraint : TriangulationConstraint
	{
		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x7F77E4", Offset = "0x7F77E4", VA = "0x7F77E4")]
		public DTSweepConstraint(TriangulationPoint p1, TriangulationPoint p2)
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class DTSweepContext : TriangulationContext
	{
		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly float ALPHA;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AdvancingFront Front;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public DTSweepBasin Basin;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public DTSweepEdgeEvent EdgeEvent;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private DTSweepPointComparator _comparator;

		[Token(Token = "0x17000129")]
		public TriangulationPoint Head
		{
			[Token(Token = "0x6000A5D")]
			[Address(RVA = "0x7F7818", Offset = "0x7F7818", VA = "0x7F7818")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A5E")]
			[Address(RVA = "0x7F7820", Offset = "0x7F7820", VA = "0x7F7820")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public TriangulationPoint Tail
		{
			[Token(Token = "0x6000A5F")]
			[Address(RVA = "0x7F7828", Offset = "0x7F7828", VA = "0x7F7828")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A60")]
			[Address(RVA = "0x7F7830", Offset = "0x7F7830", VA = "0x7F7830")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public override TriangulationAlgorithm Algorithm
		{
			[Token(Token = "0x6000A61")]
			[Address(RVA = "0x7F7838", Offset = "0x7F7838", VA = "0x7F7838", Slot = "4")]
			get
			{
				return default(TriangulationAlgorithm);
			}
		}

		[Token(Token = "0x1700012C")]
		public override bool IsDebugEnabled
		{
			[Token(Token = "0x6000A63")]
			[Address(RVA = "0x7F7850", Offset = "0x7F7850", VA = "0x7F7850", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0x7F7858", Offset = "0x7F7858", VA = "0x7F7858", Slot = "9")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x7F1D7C", Offset = "0x7F1D7C", VA = "0x7F1D7C")]
		public DTSweepContext()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x7F55B4", Offset = "0x7F55B4", VA = "0x7F55B4")]
		public void RemoveFromList(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x7F5808", Offset = "0x7F5808", VA = "0x7F5808")]
		public void MeshClean(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x7F78F4", Offset = "0x7F78F4", VA = "0x7F78F4")]
		private void MeshCleanReq(DelaunayTriangle triangle)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x7F7A38", Offset = "0x7F7A38", VA = "0x7F7A38", Slot = "7")]
		public override void Clear()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x7F5AB4", Offset = "0x7F5AB4", VA = "0x7F5AB4")]
		public void AddNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x7F77C4", Offset = "0x7F77C4", VA = "0x7F77C4")]
		public void RemoveNode(AdvancingFrontNode node)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x7F58B8", Offset = "0x7F58B8", VA = "0x7F58B8")]
		public AdvancingFrontNode LocateNode(TriangulationPoint point)
		{
			return null;
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x7F3E70", Offset = "0x7F3E70", VA = "0x7F3E70")]
		public void CreateAdvancingFront()
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x7F54D0", Offset = "0x7F54D0", VA = "0x7F54D0")]
		public void MapTriangleToNodes(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x7F7AB4", Offset = "0x7F7AB4", VA = "0x7F7AB4", Slot = "5")]
		public override void PrepareTriangulation(ITriangulatable t)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x7F49C8", Offset = "0x7F49C8", VA = "0x7F49C8")]
		public void FinalizeTriangulation()
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x7F7E2C", Offset = "0x7F7E2C", VA = "0x7F7E2C", Slot = "6")]
		public override TriangulationConstraint NewConstraint(TriangulationPoint a, TriangulationPoint b)
		{
			return null;
		}
	}
	[Token(Token = "0x20001D3")]
	public class DTSweepDebugContext : TriangulationDebugContext
	{
		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DelaunayTriangle _primaryTriangle;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DelaunayTriangle _secondaryTriangle;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TriangulationPoint _activePoint;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AdvancingFrontNode _activeNode;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DTSweepConstraint _activeConstraint;

		[Token(Token = "0x1700012D")]
		public DelaunayTriangle PrimaryTriangle
		{
			[Token(Token = "0x6000A71")]
			[Address(RVA = "0x7F7E9C", Offset = "0x7F7E9C", VA = "0x7F7E9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A72")]
			[Address(RVA = "0x7F5E70", Offset = "0x7F5E70", VA = "0x7F5E70")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public DelaunayTriangle SecondaryTriangle
		{
			[Token(Token = "0x6000A73")]
			[Address(RVA = "0x7F7EA4", Offset = "0x7F7EA4", VA = "0x7F7EA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0x7F6D44", Offset = "0x7F6D44", VA = "0x7F6D44")]
			set
			{
			}
		}

		[Token(Token = "0x1700012F")]
		public TriangulationPoint ActivePoint
		{
			[Token(Token = "0x6000A75")]
			[Address(RVA = "0x7F7EAC", Offset = "0x7F7EAC", VA = "0x7F7EAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A76")]
			[Address(RVA = "0x7F7EB4", Offset = "0x7F7EB4", VA = "0x7F7EB4")]
			set
			{
			}
		}

		[Token(Token = "0x17000130")]
		public AdvancingFrontNode ActiveNode
		{
			[Token(Token = "0x6000A77")]
			[Address(RVA = "0x7F7F1C", Offset = "0x7F7F1C", VA = "0x7F7F1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0x7F560C", Offset = "0x7F560C", VA = "0x7F560C")]
			set
			{
			}
		}

		[Token(Token = "0x17000131")]
		public DTSweepConstraint ActiveConstraint
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0x7F7F24", Offset = "0x7F7F24", VA = "0x7F7F24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0x7F4BEC", Offset = "0x7F4BEC", VA = "0x7F4BEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000132")]
		public bool IsDebugContext
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0x7F7F2C", Offset = "0x7F7F2C", VA = "0x7F7F2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x7F78EC", Offset = "0x7F78EC", VA = "0x7F78EC")]
		public DTSweepDebugContext(DTSweepContext tcx)
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x7F7F34", Offset = "0x7F7F34", VA = "0x7F7F34", Slot = "4")]
		public override void Clear()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public class DTSweepEdgeEvent
	{
		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DTSweepConstraint ConstrainedEdge;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Right;

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x7F7840", Offset = "0x7F7840", VA = "0x7F7840")]
		public DTSweepEdgeEvent()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public class DTSweepPointComparator : IComparer<TriangulationPoint>
	{
		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x7F7F78", Offset = "0x7F7F78", VA = "0x7F7F78", Slot = "4")]
		public int Compare(TriangulationPoint p1, TriangulationPoint p2)
		{
			return default(int);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x7F7848", Offset = "0x7F7848", VA = "0x7F7848")]
		public DTSweepPointComparator()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public class PointOnEdgeException : NotImplementedException
	{
		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public readonly TriangulationPoint A;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public readonly TriangulationPoint B;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public readonly TriangulationPoint C;

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x7F69A4", Offset = "0x7F69A4", VA = "0x7F69A4")]
		public PointOnEdgeException(string message, TriangulationPoint a, TriangulationPoint b, TriangulationPoint c)
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public interface ITriangulatable
	{
		[Token(Token = "0x17000133")]
		IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x6000A82")]
			get;
		}

		[Token(Token = "0x17000134")]
		TriangulationMode TriangulationMode
		{
			[Token(Token = "0x6000A83")]
			get;
		}

		[Token(Token = "0x17000135")]
		string FileName
		{
			[Token(Token = "0x6000A84")]
			get;
			[Token(Token = "0x6000A85")]
			set;
		}

		[Token(Token = "0x17000136")]
		bool DisplayFlipX
		{
			[Token(Token = "0x6000A86")]
			get;
			[Token(Token = "0x6000A87")]
			set;
		}

		[Token(Token = "0x17000137")]
		bool DisplayFlipY
		{
			[Token(Token = "0x6000A88")]
			get;
			[Token(Token = "0x6000A89")]
			set;
		}

		[Token(Token = "0x17000138")]
		float DisplayRotate
		{
			[Token(Token = "0x6000A8A")]
			get;
			[Token(Token = "0x6000A8B")]
			set;
		}

		[Token(Token = "0x17000139")]
		double Precision
		{
			[Token(Token = "0x6000A8C")]
			get;
			[Token(Token = "0x6000A8D")]
			set;
		}

		[Token(Token = "0x1700013A")]
		double MinX
		{
			[Token(Token = "0x6000A8E")]
			get;
		}

		[Token(Token = "0x1700013B")]
		double MaxX
		{
			[Token(Token = "0x6000A8F")]
			get;
		}

		[Token(Token = "0x1700013C")]
		double MinY
		{
			[Token(Token = "0x6000A90")]
			get;
		}

		[Token(Token = "0x1700013D")]
		double MaxY
		{
			[Token(Token = "0x6000A91")]
			get;
		}

		[Token(Token = "0x1700013E")]
		Rect2D Bounds
		{
			[Token(Token = "0x6000A92")]
			get;
		}

		[Token(Token = "0x6000A93")]
		void Prepare(TriangulationContext tcx);

		[Token(Token = "0x6000A94")]
		void AddTriangle(DelaunayTriangle t);

		[Token(Token = "0x6000A95")]
		void AddTriangles(IEnumerable<DelaunayTriangle> list);

		[Token(Token = "0x6000A96")]
		void ClearTriangles();
	}
	[Token(Token = "0x20001D8")]
	public enum Orientation
	{
		[Token(Token = "0x40010A4")]
		CW,
		[Token(Token = "0x40010A5")]
		CCW,
		[Token(Token = "0x40010A6")]
		Collinear
	}
	[Token(Token = "0x20001D9")]
	public class Contour : Point2DList, ITriangulatable, IEnumerable<TriangulationPoint>, IEnumerable, IList<TriangulationPoint>, ICollection<TriangulationPoint>
	{
		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Contour> mHoles;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ITriangulatable mParent;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mName;

		[Token(Token = "0x1700013F")]
		public new TriangulationPoint this[int index]
		{
			[Token(Token = "0x6000A97")]
			[Address(RVA = "0x7F8068", Offset = "0x7F8068", VA = "0x7F8068", Slot = "49")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A98")]
			[Address(RVA = "0x7F8110", Offset = "0x7F8110", VA = "0x7F8110", Slot = "50")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public string Name
		{
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0x7F8178", Offset = "0x7F8178", VA = "0x7F8178")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0x7F8180", Offset = "0x7F8180", VA = "0x7F8180")]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x6000A9B")]
			[Address(RVA = "0x7F8188", Offset = "0x7F8188", VA = "0x7F8188", Slot = "27")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0x7F81D8", Offset = "0x7F81D8", VA = "0x7F81D8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public TriangulationMode TriangulationMode
		{
			[Token(Token = "0x6000A9D")]
			[Address(RVA = "0x7F81DC", Offset = "0x7F81DC", VA = "0x7F81DC", Slot = "28")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x17000143")]
		public string FileName
		{
			[Token(Token = "0x6000A9E")]
			[Address(RVA = "0x7F8280", Offset = "0x7F8280", VA = "0x7F8280", Slot = "29")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A9F")]
			[Address(RVA = "0x7F8324", Offset = "0x7F8324", VA = "0x7F8324", Slot = "30")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public bool DisplayFlipX
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0x7F8328", Offset = "0x7F8328", VA = "0x7F8328", Slot = "31")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0x7F83CC", Offset = "0x7F83CC", VA = "0x7F83CC", Slot = "32")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public bool DisplayFlipY
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0x7F83D0", Offset = "0x7F83D0", VA = "0x7F83D0", Slot = "33")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0x7F8474", Offset = "0x7F8474", VA = "0x7F8474", Slot = "34")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public float DisplayRotate
		{
			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0x7F8478", Offset = "0x7F8478", VA = "0x7F8478", Slot = "35")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0x7F851C", Offset = "0x7F851C", VA = "0x7F851C", Slot = "36")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public double Precision
		{
			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0x7F8520", Offset = "0x7F8520", VA = "0x7F8520", Slot = "37")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0x7F85C4", Offset = "0x7F85C4", VA = "0x7F85C4", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public double MinX
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0x7F85C8", Offset = "0x7F85C8", VA = "0x7F85C8", Slot = "39")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000149")]
		public double MaxX
		{
			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0x7F85E4", Offset = "0x7F85E4", VA = "0x7F85E4", Slot = "40")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700014A")]
		public double MinY
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0x7F8600", Offset = "0x7F8600", VA = "0x7F8600", Slot = "41")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700014B")]
		public double MaxY
		{
			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0x7F861C", Offset = "0x7F861C", VA = "0x7F861C", Slot = "42")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700014C")]
		public Rect2D Bounds
		{
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0x7F8638", Offset = "0x7F8638", VA = "0x7F8638", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x7F8640", Offset = "0x7F8640", VA = "0x7F8640")]
		public Contour(ITriangulatable parent)
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x7F872C", Offset = "0x7F872C", VA = "0x7F872C")]
		public Contour(ITriangulatable parent, IList<TriangulationPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x7F8AD8", Offset = "0x7F8AD8", VA = "0x7F8AD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x7F8B38", Offset = "0x7F8B38", VA = "0x7F8B38", Slot = "48")]
		private IEnumerator<TriangulationPoint> System.Collections.Generic.IEnumerable<Poly2Tri.TriangulationPoint>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x7F8BA0", Offset = "0x7F8BA0", VA = "0x7F8BA0", Slot = "51")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x7F8BF8", Offset = "0x7F8BF8", VA = "0x7F8BF8", Slot = "56")]
		public void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x7F8C10", Offset = "0x7F8C10", VA = "0x7F8C10", Slot = "20")]
		protected override void Add(Point2D p, int idx, bool bCalcWindingOrderAndEpsilon)
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x7F8DD0", Offset = "0x7F8DD0", VA = "0x7F8DD0", Slot = "22")]
		public override void AddRange(IEnumerator<Point2D> iter, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x7F8838", Offset = "0x7F8838", VA = "0x7F8838")]
		public void AddRange(IList<TriangulationPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x7F92A4", Offset = "0x7F92A4", VA = "0x7F92A4", Slot = "52")]
		public void Insert(int idx, TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x7F92C4", Offset = "0x7F92C4", VA = "0x7F92C4", Slot = "60")]
		public bool Remove(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x7F92D4", Offset = "0x7F92D4", VA = "0x7F92D4", Slot = "58")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x7F932C", Offset = "0x7F932C", VA = "0x7F932C", Slot = "59")]
		public void CopyTo(TriangulationPoint[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x7F94F0", Offset = "0x7F94F0", VA = "0x7F94F0")]
		protected void AddHole(Contour c)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x7F95B4", Offset = "0x7F95B4", VA = "0x7F95B4")]
		public int GetNumHoles(bool parentIsHole)
		{
			return default(int);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x7F9720", Offset = "0x7F9720", VA = "0x7F9720")]
		public int GetNumHoles()
		{
			return default(int);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x7F9768", Offset = "0x7F9768", VA = "0x7F9768")]
		public Contour GetHole(int idx)
		{
			return null;
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x7F97EC", Offset = "0x7F97EC", VA = "0x7F97EC")]
		public void GetActualHoles(bool parentIsHole, ref List<Contour> holes)
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x7F99C4", Offset = "0x7F99C4", VA = "0x7F99C4")]
		public List<Contour>.Enumerator GetHoleEnumerator()
		{
			return default(List<Contour>.Enumerator);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x7F9A38", Offset = "0x7F9A38", VA = "0x7F9A38")]
		public void InitializeHoles(ConstrainedPointSet cps)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x7F9B98", Offset = "0x7F9B98", VA = "0x7F9B98")]
		public static void InitializeHoles(List<Contour> holes, ITriangulatable parent, ConstrainedPointSet cps)
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x7FA90C", Offset = "0x7FA90C", VA = "0x7FA90C", Slot = "44")]
		public void Prepare(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x7FA95C", Offset = "0x7FA95C", VA = "0x7FA95C", Slot = "45")]
		public void AddTriangle(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x7FA9AC", Offset = "0x7FA9AC", VA = "0x7FA9AC", Slot = "46")]
		public void AddTriangles(IEnumerable<DelaunayTriangle> list)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x7FA9FC", Offset = "0x7FA9FC", VA = "0x7FA9FC", Slot = "47")]
		public void ClearTriangles()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x7FAA4C", Offset = "0x7FAA4C", VA = "0x7FAA4C")]
		public Point2D FindPointInContour()
		{
			return null;
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x7FAB68", Offset = "0x7FAB68", VA = "0x7FAB68")]
		public bool IsPointInsideContour(Point2D p)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001DA")]
	public class Polygon : Point2DList, ITriangulatable, IEnumerable<TriangulationPoint>, IEnumerable, IList<TriangulationPoint>, ICollection<TriangulationPoint>
	{
		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Dictionary<uint, TriangulationPoint> mPointMap;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<DelaunayTriangle> mTriangles;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private double mPrecision;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected List<Polygon> mHoles;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected List<TriangulationPoint> mSteinerPoints;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected PolygonPoint _last;

		[Token(Token = "0x1700014D")]
		public IList<TriangulationPoint> Points
		{
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0x7FACF0", Offset = "0x7FACF0", VA = "0x7FACF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		public IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x7FACF4", Offset = "0x7FACF4", VA = "0x7FACF4", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		public TriangulationMode TriangulationMode
		{
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0x7FACFC", Offset = "0x7FACFC", VA = "0x7FACFC", Slot = "28")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x17000150")]
		public string FileName
		{
			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0x7FAD04", Offset = "0x7FAD04", VA = "0x7FAD04", Slot = "29")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0x7FAD0C", Offset = "0x7FAD0C", VA = "0x7FAD0C", Slot = "30")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public bool DisplayFlipX
		{
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x7FAD14", Offset = "0x7FAD14", VA = "0x7FAD14", Slot = "31")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0x7FAD1C", Offset = "0x7FAD1C", VA = "0x7FAD1C", Slot = "32")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public bool DisplayFlipY
		{
			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0x7FAD28", Offset = "0x7FAD28", VA = "0x7FAD28", Slot = "33")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x7FAD30", Offset = "0x7FAD30", VA = "0x7FAD30", Slot = "34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		public float DisplayRotate
		{
			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0x7FAD3C", Offset = "0x7FAD3C", VA = "0x7FAD3C", Slot = "35")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0x7FAD44", Offset = "0x7FAD44", VA = "0x7FAD44", Slot = "36")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public double Precision
		{
			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0x7FAD4C", Offset = "0x7FAD4C", VA = "0x7FAD4C", Slot = "37")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0x7FAD54", Offset = "0x7FAD54", VA = "0x7FAD54", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public double MinX
		{
			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x7FAD5C", Offset = "0x7FAD5C", VA = "0x7FAD5C", Slot = "39")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000156")]
		public double MaxX
		{
			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x7FAD78", Offset = "0x7FAD78", VA = "0x7FAD78", Slot = "40")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000157")]
		public double MinY
		{
			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x7FAD94", Offset = "0x7FAD94", VA = "0x7FAD94", Slot = "41")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000158")]
		public double MaxY
		{
			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x7FADB0", Offset = "0x7FADB0", VA = "0x7FADB0", Slot = "42")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000159")]
		public Rect2D Bounds
		{
			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x7FADCC", Offset = "0x7FADCC", VA = "0x7FADCC", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		public new TriangulationPoint this[int index]
		{
			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0x7FADD4", Offset = "0x7FADD4", VA = "0x7FADD4", Slot = "49")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0x7FAE7C", Offset = "0x7FAE7C", VA = "0x7FAE7C", Slot = "50")]
			set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public IList<Polygon> Holes
		{
			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x7FAEE4", Offset = "0x7FAEE4", VA = "0x7FAEE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x7FAEEC", Offset = "0x7FAEEC", VA = "0x7FAEEC")]
		public Polygon(IList<PolygonPoint> points)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x7FB360", Offset = "0x7FB360", VA = "0x7FB360")]
		public Polygon(IEnumerable<PolygonPoint> points)
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x7FB3E8", Offset = "0x7FB3E8", VA = "0x7FB3E8")]
		public Polygon(params PolygonPoint[] points)
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x7FB3EC", Offset = "0x7FB3EC", VA = "0x7FB3EC", Slot = "48")]
		private IEnumerator<TriangulationPoint> System.Collections.Generic.IEnumerable<Poly2Tri.TriangulationPoint>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x7FB454", Offset = "0x7FB454", VA = "0x7FB454", Slot = "51")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x7FB4AC", Offset = "0x7FB4AC", VA = "0x7FB4AC", Slot = "19")]
		public override void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x7FB4C4", Offset = "0x7FB4C4", VA = "0x7FB4C4", Slot = "56")]
		public void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x7FB4DC", Offset = "0x7FB4DC", VA = "0x7FB4DC")]
		public void Add(PolygonPoint p)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x7FB4F4", Offset = "0x7FB4F4", VA = "0x7FB4F4", Slot = "20")]
		protected override void Add(Point2D p, int idx, bool bCalcWindingOrderAndEpsilon)
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x7FB0C0", Offset = "0x7FB0C0", VA = "0x7FB0C0")]
		public void AddRange(IList<PolygonPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x7FB6A0", Offset = "0x7FB6A0", VA = "0x7FB6A0")]
		public void AddRange(IList<TriangulationPoint> points, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x7FB940", Offset = "0x7FB940", VA = "0x7FB940", Slot = "52")]
		public void Insert(int idx, TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x7FB960", Offset = "0x7FB960", VA = "0x7FB960", Slot = "60")]
		public bool Remove(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x7FB968", Offset = "0x7FB968", VA = "0x7FB968")]
		public void RemovePoint(PolygonPoint p)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x7FBB74", Offset = "0x7FBB74", VA = "0x7FBB74", Slot = "58")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x7FBBCC", Offset = "0x7FBBCC", VA = "0x7FBBCC", Slot = "59")]
		public void CopyTo(TriangulationPoint[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x7FBD90", Offset = "0x7FBD90", VA = "0x7FBD90")]
		public void AddSteinerPoint(TriangulationPoint point)
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x7FBE98", Offset = "0x7FBE98", VA = "0x7FBE98")]
		public void AddSteinerPoints(List<TriangulationPoint> points)
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x7FBF48", Offset = "0x7FBF48", VA = "0x7FBF48")]
		public void ClearSteinerPoints()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x7FBFB4", Offset = "0x7FBFB4", VA = "0x7FBFB4")]
		public void AddHole(Polygon poly)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x7FC0BC", Offset = "0x7FC0BC", VA = "0x7FC0BC", Slot = "45")]
		public void AddTriangle(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x7FC16C", Offset = "0x7FC16C", VA = "0x7FC16C", Slot = "46")]
		public void AddTriangles(IEnumerable<DelaunayTriangle> list)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x7FC1C4", Offset = "0x7FC1C4", VA = "0x7FC1C4", Slot = "47")]
		public void ClearTriangles()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x7FC230", Offset = "0x7FC230", VA = "0x7FC230")]
		public bool IsPointInside(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x7FC238", Offset = "0x7FC238", VA = "0x7FC238", Slot = "44")]
		public void Prepare(TriangulationContext tcx)
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class PolygonPoint : TriangulationPoint
	{
		[Token(Token = "0x1700015C")]
		public PolygonPoint Next
		{
			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0x7FD6E0", Offset = "0x7FD6E0", VA = "0x7FD6E0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AF8")]
			[Address(RVA = "0x7FD6E8", Offset = "0x7FD6E8", VA = "0x7FD6E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		public PolygonPoint Previous
		{
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0x7FD6F0", Offset = "0x7FD6F0", VA = "0x7FD6F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0x7FD6F8", Offset = "0x7FD6F8", VA = "0x7FD6F8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x7FD5FC", Offset = "0x7FD5FC", VA = "0x7FD5FC")]
		public PolygonPoint(double x, double y)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x7FD700", Offset = "0x7FD700", VA = "0x7FD700")]
		public static Point2D ToBasePoint(PolygonPoint p)
		{
			return null;
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x7FD704", Offset = "0x7FD704", VA = "0x7FD704")]
		public static TriangulationPoint ToTriangulationPoint(PolygonPoint p)
		{
			return null;
		}
	}
	[Token(Token = "0x20001DC")]
	public class PolygonSet
	{
		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<Polygon> _polygons;

		[Token(Token = "0x1700015E")]
		public IEnumerable<Polygon> Polygons
		{
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x7FD95C", Offset = "0x7FD95C", VA = "0x7FD95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x7FD708", Offset = "0x7FD708", VA = "0x7FD708")]
		public PolygonSet()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x7FD790", Offset = "0x7FD790", VA = "0x7FD790")]
		public PolygonSet(Polygon poly)
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x7FD8AC", Offset = "0x7FD8AC", VA = "0x7FD8AC")]
		public void Add(Polygon p)
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class PolygonUtil
	{
		[Token(Token = "0x20001DE")]
		public enum PolyUnionError
		{
			[Token(Token = "0x40010B8")]
			None,
			[Token(Token = "0x40010B9")]
			NoIntersections,
			[Token(Token = "0x40010BA")]
			Poly1InsidePoly2,
			[Token(Token = "0x40010BB")]
			InfiniteLoop
		}

		[Token(Token = "0x20001DF")]
		[Flags]
		public enum PolyOperation : uint
		{
			[Token(Token = "0x40010BD")]
			None = 0u,
			[Token(Token = "0x40010BE")]
			Union = 1u,
			[Token(Token = "0x40010BF")]
			Intersect = 2u,
			[Token(Token = "0x40010C0")]
			Subtract = 4u
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x7FD964", Offset = "0x7FD964", VA = "0x7FD964")]
		public static Point2DList.WindingOrderType CalculateWindingOrder(IList<Point2D> l)
		{
			return default(Point2DList.WindingOrderType);
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x7FDCA4", Offset = "0x7FDCA4", VA = "0x7FDCA4")]
		public static bool PolygonsAreSame2D(IList<Point2D> poly1, IList<Point2D> poly2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x7FE1A8", Offset = "0x7FE1A8", VA = "0x7FE1A8")]
		public static bool PointInPolygon2D(IList<Point2D> polygon, Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x7FE528", Offset = "0x7FE528", VA = "0x7FE528")]
		public static bool PolygonsIntersect2D(IList<Point2D> poly1, Rect2D boundRect1, IList<Point2D> poly2, Rect2D boundRect2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x7FEA8C", Offset = "0x7FEA8C", VA = "0x7FEA8C")]
		public bool PolygonContainsPolygon(IList<Point2D> poly1, Rect2D boundRect1, IList<Point2D> poly2, Rect2D boundRect2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x7FEAA8", Offset = "0x7FEAA8", VA = "0x7FEAA8")]
		public static bool PolygonContainsPolygon(IList<Point2D> poly1, Rect2D boundRect1, IList<Point2D> poly2, Rect2D boundRect2, bool runIntersectionTest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x7FED48", Offset = "0x7FED48", VA = "0x7FED48")]
		public static void ClipPolygonToEdge2D(Point2D edgeBegin, Point2D edgeEnd, IList<Point2D> poly, out List<Point2D> outPoly)
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x7FFD48", Offset = "0x7FFD48", VA = "0x7FFD48")]
		public static void ClipPolygonToPolygon(IList<Point2D> poly, IList<Point2D> clipPoly, out List<Point2D> outPoly)
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x8000A0", Offset = "0x8000A0", VA = "0x8000A0")]
		public static PolyUnionError PolygonUnion(Point2DList polygon1, Point2DList polygon2, out Point2DList union)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x800990", Offset = "0x800990", VA = "0x800990")]
		protected static void PolygonUnionInternal(PolygonOperationContext ctx)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x8012AC", Offset = "0x8012AC", VA = "0x8012AC")]
		public static PolyUnionError PolygonIntersect(Point2DList polygon1, Point2DList polygon2, out Point2DList intersectOut)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x80134C", Offset = "0x80134C", VA = "0x80134C")]
		protected static void PolygonIntersectInternal(PolygonOperationContext ctx)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x80193C", Offset = "0x80193C", VA = "0x80193C")]
		public static PolyUnionError PolygonSubtract(Point2DList polygon1, Point2DList polygon2, out Point2DList subtract)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x8019DC", Offset = "0x8019DC", VA = "0x8019DC")]
		public static void PolygonSubtractInternal(PolygonOperationContext ctx)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x80201C", Offset = "0x80201C", VA = "0x80201C")]
		public static PolyUnionError PolygonOperation(PolyOperation operations, Point2DList polygon1, Point2DList polygon2, out Dictionary<uint, Point2DList> results)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x8020B8", Offset = "0x8020B8", VA = "0x8020B8")]
		public static PolyUnionError PolygonOperation(PolygonOperationContext ctx)
		{
			return default(PolyUnionError);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x802110", Offset = "0x802110", VA = "0x802110")]
		public static List<Point2DList> SplitComplexPolygon(Point2DList verts, double epsilon)
		{
			return null;
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x8036DC", Offset = "0x8036DC", VA = "0x8036DC")]
		private static List<Point2DList> SplitComplexPolygonCleanup(IList<Point2D> orig)
		{
			return null;
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x803FC8", Offset = "0x803FC8", VA = "0x803FC8")]
		public PolygonUtil()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public class EdgeIntersectInfo
	{
		[Token(Token = "0x1700015F")]
		public Edge EdgeOne
		{
			[Token(Token = "0x6000B15")]
			[Address(RVA = "0x804030", Offset = "0x804030", VA = "0x804030")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0x804038", Offset = "0x804038", VA = "0x804038")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public Edge EdgeTwo
		{
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0x804040", Offset = "0x804040", VA = "0x804040")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0x804048", Offset = "0x804048", VA = "0x804048")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public Point2D IntersectionPoint
		{
			[Token(Token = "0x6000B19")]
			[Address(RVA = "0x804050", Offset = "0x804050", VA = "0x804050")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0x804058", Offset = "0x804058", VA = "0x804058")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x803FD0", Offset = "0x803FD0", VA = "0x803FD0")]
		public EdgeIntersectInfo(Edge edgeOne, Edge edgeTwo, Point2D intersectionPoint)
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class SplitComplexPolygonNode
	{
		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<SplitComplexPolygonNode> mConnected;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Point2D mPosition;

		[Token(Token = "0x17000162")]
		public int NumConnected
		{
			[Token(Token = "0x6000B1B")]
			[Address(RVA = "0x8034E0", Offset = "0x8034E0", VA = "0x8034E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000163")]
		public Point2D Position
		{
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0x804060", Offset = "0x804060", VA = "0x804060")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0x804068", Offset = "0x804068", VA = "0x804068")]
			set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public SplitComplexPolygonNode this[int index]
		{
			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0x802F64", Offset = "0x802F64", VA = "0x802F64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x804070", Offset = "0x804070", VA = "0x804070")]
		public SplitComplexPolygonNode()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x802DC8", Offset = "0x802DC8", VA = "0x802DC8")]
		public SplitComplexPolygonNode(Point2D pos)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x8040F8", Offset = "0x8040F8", VA = "0x8040F8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x8041A8", Offset = "0x8041A8", VA = "0x8041A8")]
		public bool Equals(SplitComplexPolygonNode pn)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x8041D4", Offset = "0x8041D4", VA = "0x8041D4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x802FBC", Offset = "0x802FBC", VA = "0x802FBC")]
		public static bool operator ==(SplitComplexPolygonNode lhs, SplitComplexPolygonNode rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x8035A0", Offset = "0x8035A0", VA = "0x8035A0")]
		public static bool operator !=(SplitComplexPolygonNode lhs, SplitComplexPolygonNode rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x8041DC", Offset = "0x8041DC", VA = "0x8041DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x804338", Offset = "0x804338", VA = "0x804338")]
		private bool IsRighter(double sinA, double cosA, double sinB, double cosB)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x804378", Offset = "0x804378", VA = "0x804378")]
		private int remainder(int x, int modulus)
		{
			return default(int);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x802E6C", Offset = "0x802E6C", VA = "0x802E6C")]
		public void AddConnection(SplitComplexPolygonNode toMe)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x803488", Offset = "0x803488", VA = "0x803488")]
		public void RemoveConnection(SplitComplexPolygonNode fromMe)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x804390", Offset = "0x804390", VA = "0x804390")]
		private void RemoveConnectionByIndex(int index)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x8035E8", Offset = "0x8035E8", VA = "0x8035E8")]
		public void ClearConnections()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x804410", Offset = "0x804410", VA = "0x804410")]
		private bool IsConnectedTo(SplitComplexPolygonNode me)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x803A1C", Offset = "0x803A1C", VA = "0x803A1C")]
		public SplitComplexPolygonNode GetRightestConnection(SplitComplexPolygonNode incoming)
		{
			return null;
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x803658", Offset = "0x803658", VA = "0x803658")]
		public SplitComplexPolygonNode GetRightestConnection(Point2D incomingDir)
		{
			return null;
		}
	}
	[Token(Token = "0x20001E2")]
	public class PolygonOperationContext
	{
		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PolygonUtil.PolyOperation mOperations;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Point2DList mOriginalPolygon1;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Point2DList mOriginalPolygon2;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Point2DList mPoly1;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Point2DList mPoly2;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<EdgeIntersectInfo> mIntersections;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int mStartingIndex;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public PolygonUtil.PolyUnionError mError;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<int> mPoly1VectorAngles;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<int> mPoly2VectorAngles;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Dictionary<uint, Point2DList> mOutput;

		[Token(Token = "0x17000165")]
		public Point2DList Union
		{
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0x800E08", Offset = "0x800E08", VA = "0x800E08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		public Point2DList Intersect
		{
			[Token(Token = "0x6000B31")]
			[Address(RVA = "0x801824", Offset = "0x801824", VA = "0x801824")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		public Point2DList Subtract
		{
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0x801F40", Offset = "0x801F40", VA = "0x801F40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x800140", Offset = "0x800140", VA = "0x800140")]
		public PolygonOperationContext()
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x804660", Offset = "0x804660", VA = "0x804660")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x8001C8", Offset = "0x8001C8", VA = "0x8001C8")]
		public bool Init(PolygonUtil.PolyOperation operations, Point2DList polygon1, Point2DList polygon2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x8049F4", Offset = "0x8049F4", VA = "0x8049F4")]
		private bool VerticesIntersect(Point2DList polygon1, Point2DList polygon2, out List<EdgeIntersectInfo> intersections)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x801158", Offset = "0x801158", VA = "0x801158")]
		public bool PointInPolygonAngle(Point2D point, Point2DList polygon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x804D80", Offset = "0x804D80", VA = "0x804D80")]
		public double VectorAngle(Point2D p1, Point2D p2)
		{
			return default(double);
		}
	}
	[Token(Token = "0x20001E3")]
	public class ConstrainedPointSet : PointSet
	{
		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Dictionary<uint, TriangulationConstraint> mConstraintMap;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected List<Contour> mHoles;

		[Token(Token = "0x17000168")]
		public override TriangulationMode TriangulationMode
		{
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0x804E9C", Offset = "0x804E9C", VA = "0x804E9C", Slot = "61")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x804EA4", Offset = "0x804EA4", VA = "0x804EA4")]
		public ConstrainedPointSet(List<TriangulationPoint> bounds)
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x80549C", Offset = "0x80549C", VA = "0x80549C")]
		public ConstrainedPointSet(List<TriangulationPoint> bounds, List<TriangulationConstraint> constraints)
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x8057B8", Offset = "0x8057B8", VA = "0x8057B8")]
		public ConstrainedPointSet(List<TriangulationPoint> bounds, int[] indices)
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x8051D8", Offset = "0x8051D8", VA = "0x8051D8")]
		protected void AddBoundaryConstraints()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x805E64", Offset = "0x805E64", VA = "0x805E64", Slot = "19")]
		public override void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x806050", Offset = "0x806050", VA = "0x806050", Slot = "62")]
		public override void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x80605C", Offset = "0x80605C", VA = "0x80605C", Slot = "63")]
		public override bool AddRange(List<TriangulationPoint> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x8061AC", Offset = "0x8061AC", VA = "0x8061AC")]
		public bool AddHole(List<TriangulationPoint> points, string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x805598", Offset = "0x805598", VA = "0x805598")]
		public bool AddConstraints(List<TriangulationConstraint> constraints)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x805CAC", Offset = "0x805CAC", VA = "0x805CAC")]
		public bool AddConstraint(TriangulationConstraint tc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x80751C", Offset = "0x80751C", VA = "0x80751C")]
		public bool TryGetConstraint(uint constraintCode, out TriangulationConstraint tc)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x807584", Offset = "0x807584", VA = "0x807584")]
		public int GetNumConstraints()
		{
			return default(int);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x8075D4", Offset = "0x8075D4", VA = "0x8075D4")]
		public Dictionary<uint, TriangulationConstraint>.Enumerator GetConstraintEnumerator()
		{
			return default(Dictionary<uint, TriangulationConstraint>.Enumerator);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x80764C", Offset = "0x80764C", VA = "0x80764C")]
		public int GetNumHoles()
		{
			return default(int);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x8077A8", Offset = "0x8077A8", VA = "0x8077A8")]
		public Contour GetHole(int idx)
		{
			return null;
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x80782C", Offset = "0x80782C", VA = "0x80782C")]
		public int GetActualHoles(out List<Contour> holes)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x8079F4", Offset = "0x8079F4", VA = "0x8079F4")]
		protected void InitializeHoles()
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x807B58", Offset = "0x807B58", VA = "0x807B58", Slot = "65")]
		public override bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x807B74", Offset = "0x807B74", VA = "0x807B74", Slot = "66")]
		public override void Prepare(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x807E38", Offset = "0x807E38", VA = "0x807E38", Slot = "64")]
		public override void AddTriangle(DelaunayTriangle t)
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class PointSet : Point2DList, ITriangulatable, IEnumerable<TriangulationPoint>, IEnumerable, IList<TriangulationPoint>, ICollection<TriangulationPoint>
	{
		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Dictionary<uint, TriangulationPoint> mPointMap;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected double mPrecision;

		[Token(Token = "0x17000169")]
		public IList<TriangulationPoint> Points
		{
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0x807EE4", Offset = "0x807EE4", VA = "0x807EE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0x807EE8", Offset = "0x807EE8", VA = "0x807EE8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public IList<DelaunayTriangle> Triangles
		{
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0x807EEC", Offset = "0x807EEC", VA = "0x807EEC", Slot = "27")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x807EF4", Offset = "0x807EF4", VA = "0x807EF4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700016B")]
		public string FileName
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x807EFC", Offset = "0x807EFC", VA = "0x807EFC", Slot = "29")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x807F04", Offset = "0x807F04", VA = "0x807F04", Slot = "30")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016C")]
		public bool DisplayFlipX
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x807F0C", Offset = "0x807F0C", VA = "0x807F0C", Slot = "31")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0x807F14", Offset = "0x807F14", VA = "0x807F14", Slot = "32")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016D")]
		public bool DisplayFlipY
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0x807F20", Offset = "0x807F20", VA = "0x807F20", Slot = "33")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0x807F28", Offset = "0x807F28", VA = "0x807F28", Slot = "34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016E")]
		public float DisplayRotate
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x807F34", Offset = "0x807F34", VA = "0x807F34", Slot = "35")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0x807F3C", Offset = "0x807F3C", VA = "0x807F3C", Slot = "36")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700016F")]
		public double Precision
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0x807F44", Offset = "0x807F44", VA = "0x807F44", Slot = "37")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x807F4C", Offset = "0x807F4C", VA = "0x807F4C", Slot = "38")]
			set
			{
			}
		}

		[Token(Token = "0x17000170")]
		public double MinX
		{
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0x805B84", Offset = "0x805B84", VA = "0x805B84", Slot = "39")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000171")]
		public double MaxX
		{
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0x805C74", Offset = "0x805C74", VA = "0x805C74", Slot = "40")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000172")]
		public double MinY
		{
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0x805BA0", Offset = "0x805BA0", VA = "0x805BA0", Slot = "41")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000173")]
		public double MaxY
		{
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0x805C90", Offset = "0x805C90", VA = "0x805C90", Slot = "42")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000174")]
		public Rect2D Bounds
		{
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0x807F54", Offset = "0x807F54", VA = "0x807F54", Slot = "43")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		public virtual TriangulationMode TriangulationMode
		{
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0x807F5C", Offset = "0x807F5C", VA = "0x807F5C", Slot = "61")]
			get
			{
				return default(TriangulationMode);
			}
		}

		[Token(Token = "0x17000176")]
		public new TriangulationPoint this[int index]
		{
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0x807F64", Offset = "0x807F64", VA = "0x807F64", Slot = "49")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0x80800C", Offset = "0x80800C", VA = "0x80800C", Slot = "50")]
			set
			{
			}
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x804F90", Offset = "0x804F90", VA = "0x804F90")]
		public PointSet(List<TriangulationPoint> bounds)
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x808244", Offset = "0x808244", VA = "0x808244", Slot = "48")]
		private IEnumerator<TriangulationPoint> System.Collections.Generic.IEnumerable<Poly2Tri.TriangulationPoint>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x8082F8", Offset = "0x8082F8", VA = "0x8082F8", Slot = "51")]
		public int IndexOf(TriangulationPoint p)
		{
			return default(int);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x808350", Offset = "0x808350", VA = "0x808350", Slot = "19")]
		public override void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x8083D8", Offset = "0x8083D8", VA = "0x8083D8", Slot = "62")]
		public virtual void Add(TriangulationPoint p)
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x8083E4", Offset = "0x8083E4", VA = "0x8083E4", Slot = "20")]
		protected override void Add(Point2D p, int idx, bool constrainToBounds)
		{
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x805EEC", Offset = "0x805EEC", VA = "0x805EEC")]
		protected bool Add(TriangulationPoint p, int idx, bool constrainToBounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x80847C", Offset = "0x80847C", VA = "0x80847C", Slot = "22")]
		public override void AddRange(IEnumerator<Point2D> iter, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x80860C", Offset = "0x80860C", VA = "0x80860C", Slot = "63")]
		public virtual bool AddRange(List<TriangulationPoint> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x805BBC", Offset = "0x805BBC", VA = "0x805BBC")]
		public bool TryGetPoint(double x, double y, out TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x808830", Offset = "0x808830", VA = "0x808830", Slot = "52")]
		public void Insert(int idx, TriangulationPoint item)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x808898", Offset = "0x808898", VA = "0x808898", Slot = "24")]
		public override bool Remove(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x8088F0", Offset = "0x8088F0", VA = "0x8088F0", Slot = "60")]
		public bool Remove(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x808948", Offset = "0x808948", VA = "0x808948", Slot = "25")]
		public override void RemoveAt(int idx)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x8089C0", Offset = "0x8089C0", VA = "0x8089C0", Slot = "58")]
		public bool Contains(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x808A18", Offset = "0x808A18", VA = "0x808A18", Slot = "59")]
		public void CopyTo(TriangulationPoint[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x808BD8", Offset = "0x808BD8", VA = "0x808BD8")]
		protected bool ConstrainPointToBounds(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x806968", Offset = "0x806968", VA = "0x806968")]
		protected bool ConstrainPointToBounds(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x808D98", Offset = "0x808D98", VA = "0x808D98", Slot = "64")]
		public virtual void AddTriangle(DelaunayTriangle t)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x808E44", Offset = "0x808E44", VA = "0x808E44", Slot = "46")]
		public void AddTriangles(IEnumerable<DelaunayTriangle> list)
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x809128", Offset = "0x809128", VA = "0x809128", Slot = "47")]
		public void ClearTriangles()
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x807B6C", Offset = "0x807B6C", VA = "0x807B6C", Slot = "65")]
		public virtual bool Initialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x807C88", Offset = "0x807C88", VA = "0x807C88", Slot = "66")]
		public virtual void Prepare(TriangulationContext tcx)
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public enum TriangulationAlgorithm
	{
		[Token(Token = "0x40010DB")]
		DTSweep
	}
	[Token(Token = "0x20001E6")]
	public class Edge
	{
		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Point2D mP;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Point2D mQ;

		[Token(Token = "0x17000177")]
		public Point2D EdgeStart
		{
			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0x8091CC", Offset = "0x8091CC", VA = "0x8091CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0x8091D4", Offset = "0x8091D4", VA = "0x8091D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000178")]
		public Point2D EdgeEnd
		{
			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0x8091DC", Offset = "0x8091DC", VA = "0x8091DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0x8091E4", Offset = "0x8091E4", VA = "0x8091E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x8091EC", Offset = "0x8091EC", VA = "0x8091EC")]
		public Edge()
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x804D3C", Offset = "0x804D3C", VA = "0x804D3C")]
		public Edge(Point2D edgeStart, Point2D edgeEnd)
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class TriangulationConstraint : Edge
	{
		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint mContraintCode;

		[Token(Token = "0x17000179")]
		public TriangulationPoint P
		{
			[Token(Token = "0x6000B81")]
			[Address(RVA = "0x807384", Offset = "0x807384", VA = "0x807384")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B82")]
			[Address(RVA = "0x8074B4", Offset = "0x8074B4", VA = "0x8074B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public TriangulationPoint Q
		{
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0x807400", Offset = "0x807400", VA = "0x807400")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x8074E8", Offset = "0x8074E8", VA = "0x8074E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public uint ConstraintCode
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0x809220", Offset = "0x809220", VA = "0x809220")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x805A50", Offset = "0x805A50", VA = "0x805A50")]
		public TriangulationConstraint(TriangulationPoint p1, TriangulationPoint p2)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x809228", Offset = "0x809228", VA = "0x809228", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x80747C", Offset = "0x80747C", VA = "0x80747C")]
		public void CalculateContraintCode()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x80728C", Offset = "0x80728C", VA = "0x80728C")]
		public static uint CalculateContraintCode(TriangulationPoint p, TriangulationPoint q)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x20001E8")]
	public abstract class TriangulationContext
	{
		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly List<DelaunayTriangle> Triangles;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly List<TriangulationPoint> Points;

		[Token(Token = "0x1700017C")]
		public TriangulationDebugContext DebugContext
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x809554", Offset = "0x809554", VA = "0x809554")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x80955C", Offset = "0x80955C", VA = "0x80955C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public TriangulationMode TriangulationMode
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x809564", Offset = "0x809564", VA = "0x809564")]
			[CompilerGenerated]
			get
			{
				return default(TriangulationMode);
			}
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x80956C", Offset = "0x80956C", VA = "0x80956C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public ITriangulatable Triangulatable
		{
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x809574", Offset = "0x809574", VA = "0x809574")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x80957C", Offset = "0x80957C", VA = "0x80957C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public int StepCount
		{
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x809584", Offset = "0x809584", VA = "0x809584")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0x80958C", Offset = "0x80958C", VA = "0x80958C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public abstract TriangulationAlgorithm Algorithm
		{
			[Token(Token = "0x6000B93")]
			get;
		}

		[Token(Token = "0x17000181")]
		public virtual bool IsDebugEnabled
		{
			[Token(Token = "0x6000B98")]
			[Address(RVA = "0x809740", Offset = "0x809740", VA = "0x809740", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B99")]
			[Address(RVA = "0x809748", Offset = "0x809748", VA = "0x809748", Slot = "9")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public DTSweepDebugContext DTDebugContext
		{
			[Token(Token = "0x6000B9A")]
			[Address(RVA = "0x809754", Offset = "0x809754", VA = "0x809754")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x809594", Offset = "0x809594", VA = "0x809594")]
		public void Done()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x8095A4", Offset = "0x8095A4", VA = "0x8095A4", Slot = "5")]
		public virtual void PrepareTriangulation(ITriangulatable t)
		{
		}

		[Token(Token = "0x6000B95")]
		public abstract TriangulationConstraint NewConstraint(TriangulationPoint a, TriangulationPoint b);

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x8096BC", Offset = "0x8096BC", VA = "0x8096BC")]
		public void Update(string message)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x8096C0", Offset = "0x8096C0", VA = "0x8096C0", Slot = "7")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x8097D0", Offset = "0x8097D0", VA = "0x8097D0")]
		protected TriangulationContext()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public abstract class TriangulationDebugContext
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected TriangulationContext _tcx;

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x8098AC", Offset = "0x8098AC", VA = "0x8098AC")]
		public TriangulationDebugContext(TriangulationContext tcx)
		{
		}

		[Token(Token = "0x6000B9D")]
		public abstract void Clear();
	}
	[Token(Token = "0x20001EA")]
	public enum TriangulationMode
	{
		[Token(Token = "0x40010E8")]
		Unconstrained,
		[Token(Token = "0x40010E9")]
		Constrained,
		[Token(Token = "0x40010EA")]
		Polygon
	}
	[Token(Token = "0x20001EB")]
	public class TriangulationPoint : Point2D
	{
		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly double kVertexCodeDefaultPrecision;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected uint mVertexCode;

		[Token(Token = "0x17000183")]
		public override double X
		{
			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0x8098DC", Offset = "0x8098DC", VA = "0x8098DC", Slot = "5")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0x8098E4", Offset = "0x8098E4", VA = "0x8098E4", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public override double Y
		{
			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0x809970", Offset = "0x809970", VA = "0x809970", Slot = "7")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0x809978", Offset = "0x809978", VA = "0x809978", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public uint VertexCode
		{
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0x809A04", Offset = "0x809A04", VA = "0x809A04")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000186")]
		public List<DTSweepConstraint> Edges
		{
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0x809A0C", Offset = "0x809A0C", VA = "0x809A0C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0x809A14", Offset = "0x809A14", VA = "0x809A14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000187")]
		public bool HasEdges
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0x809A1C", Offset = "0x809A1C", VA = "0x809A1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x7FD668", Offset = "0x7FD668", VA = "0x7FD668")]
		public TriangulationPoint(double x, double y)
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x809A2C", Offset = "0x809A2C", VA = "0x809A2C")]
		public TriangulationPoint(double x, double y, double precision)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x809ABC", Offset = "0x809ABC", VA = "0x809ABC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x809D84", Offset = "0x809D84", VA = "0x809D84", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x809D8C", Offset = "0x809D8C", VA = "0x809D8C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x809EBC", Offset = "0x809EBC", VA = "0x809EBC", Slot = "9")]
		public override void Set(double x, double y)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x80875C", Offset = "0x80875C", VA = "0x80875C")]
		public static uint CreateVertexCode(double x, double y, double precision)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x809FD0", Offset = "0x809FD0", VA = "0x809FD0")]
		public void AddEdge(DTSweepConstraint e)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x80A0D8", Offset = "0x80A0D8", VA = "0x80A0D8")]
		public bool HasEdge(TriangulationPoint p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x80A0F4", Offset = "0x80A0F4", VA = "0x80A0F4")]
		public bool GetEdge(TriangulationPoint p, out DTSweepConstraint edge)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x80A388", Offset = "0x80A388", VA = "0x80A388")]
		public static Point2D ToPoint2D(TriangulationPoint p)
		{
			return null;
		}
	}
	[Token(Token = "0x20001EC")]
	public class TriangulationPointEnumerator : IEnumerator<TriangulationPoint>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected IList<Point2D> mPoints;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int position;

		[Token(Token = "0x17000188")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0x80A4A0", Offset = "0x80A4A0", VA = "0x80A4A0", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000189")]
		public TriangulationPoint Current
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0x80A4A4", Offset = "0x80A4A4", VA = "0x80A4A4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x8082C0", Offset = "0x8082C0", VA = "0x8082C0")]
		public TriangulationPointEnumerator(IList<Point2D> points)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x80A3D8", Offset = "0x80A3D8", VA = "0x80A3D8", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x80A490", Offset = "0x80A490", VA = "0x80A490", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x80A49C", Offset = "0x80A49C", VA = "0x80A49C", Slot = "5")]
		private void System.IDisposable.Dispose()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public class TriangulationPointList : Point2DList
	{
		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x80A620", Offset = "0x80A620", VA = "0x80A620")]
		public TriangulationPointList()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class PointGenerator
	{
		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly System.Random RNG;

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x80A674", Offset = "0x80A674", VA = "0x80A674")]
		public static List<TriangulationPoint> UniformDistribution(int n, double scale)
		{
			return null;
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x80A830", Offset = "0x80A830", VA = "0x80A830")]
		public static List<TriangulationPoint> UniformGrid(int n, double scale)
		{
			return null;
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x80A9BC", Offset = "0x80A9BC", VA = "0x80A9BC")]
		public PointGenerator()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class PolygonGenerator
	{
		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly System.Random RNG;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static double PI_2;

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x80AA48", Offset = "0x80AA48", VA = "0x80AA48")]
		public static Polygon RandomCircleSweep(double scale, int vertexCount)
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x80AD38", Offset = "0x80AD38", VA = "0x80AD38")]
		public static Polygon RandomCircleSweep2(double scale, int vertexCount)
		{
			return null;
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x80AF94", Offset = "0x80AF94", VA = "0x80AF94")]
		public PolygonGenerator()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public class TriangulationUtil
	{
		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x80B040", Offset = "0x80B040", VA = "0x80B040")]
		public static bool SmartIncircle(Point2D pa, Point2D pb, Point2D pc, Point2D pd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x80B1C0", Offset = "0x80B1C0", VA = "0x80B1C0")]
		public static bool InScanArea(Point2D pa, Point2D pb, Point2D pc, Point2D pd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x7FF8E4", Offset = "0x7FF8E4", VA = "0x7FF8E4")]
		public static Orientation Orient2d(Point2D pa, Point2D pb, Point2D pc)
		{
			return default(Orientation);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x80B2F0", Offset = "0x80B2F0", VA = "0x80B2F0")]
		public static bool PointInBoundingBox(double xmin, double xmax, double ymin, double ymax, Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x80B38C", Offset = "0x80B38C", VA = "0x80B38C")]
		public static bool PointOnLineSegment2D(Point2D lineStart, Point2D lineEnd, Point2D p, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x80B464", Offset = "0x80B464", VA = "0x80B464")]
		public static bool PointOnLineSegment2D(double x1, double y1, double x2, double y2, double x, double y, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x80B624", Offset = "0x80B624", VA = "0x80B624")]
		public static bool RectsIntersect(Rect2D r1, Rect2D r2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x803010", Offset = "0x803010", VA = "0x803010")]
		public static bool LinesIntersect2D(Point2D ptStart0, Point2D ptEnd0, Point2D ptStart1, Point2D ptEnd1, bool firstIsSegment, bool secondIsSegment, bool coincidentEndPointCollisions, ref Point2D pIntersectionPt, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x7FEA60", Offset = "0x7FEA60", VA = "0x7FEA60")]
		public static bool LinesIntersect2D(Point2D ptStart0, Point2D ptEnd0, Point2D ptStart1, Point2D ptEnd1, ref Point2D pIntersectionPt, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x80B684", Offset = "0x80B684", VA = "0x80B684")]
		public static double LI2DDotProduct(Point2D v0, Point2D v1)
		{
			return default(double);
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x7FFA74", Offset = "0x7FFA74", VA = "0x7FFA74")]
		public static bool RaysIntersect2D(Point2D ptRayOrigin0, Point2D ptRayVector0, Point2D ptRayOrigin1, Point2D ptRayVector1, ref Point2D ptIntersection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x80B710", Offset = "0x80B710", VA = "0x80B710")]
		public TriangulationUtil()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public struct FixedArray3<T> : IEnumerable<T>, IEnumerable where T : class
	{
		[Token(Token = "0x20001F2")]
		[CompilerGenerated]
		private sealed class <Enumerate>d__10 : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40010F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x40010F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40010F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FixedArray3<T> <>4__this;

			[Token(Token = "0x40010FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FixedArray3<T> <>3__<>4__this;

			[Token(Token = "0x40010FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x1700018B")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6000BD9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BDB")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BD6")]
			[DebuggerHidden]
			public <Enumerate>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000BD7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BD8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BDA")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000BDC")]
			[DebuggerHidden]
			private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000BDD")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _0;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _1;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T _2;

		[Token(Token = "0x1700018A")]
		public T this[int index]
		{
			[Token(Token = "0x6000BCD")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BCE")]
			set
			{
			}
		}

		[Token(Token = "0x6000BCF")]
		public bool Contains(T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD0")]
		public int IndexOf(T value)
		{
			return default(int);
		}

		[Token(Token = "0x6000BD1")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000BD2")]
		public void Clear(T value)
		{
		}

		[Token(Token = "0x6000BD3")]
		[IteratorStateMachine(typeof(FixedArray3<>.<Enumerate>d__10))]
		private IEnumerable<T> Enumerate()
		{
			return null;
		}

		[Token(Token = "0x6000BD4")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000BD5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F3")]
	public struct FixedBitArray3 : IEnumerable<bool>, IEnumerable
	{
		[Token(Token = "0x20001F4")]
		[CompilerGenerated]
		private sealed class <Enumerate>d__10 : IEnumerable<bool>, IEnumerable, IEnumerator<bool>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private bool <>2__current;

			[Token(Token = "0x4001101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public FixedBitArray3 <>4__this;

			[Token(Token = "0x4001103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
			public FixedBitArray3 <>3__<>4__this;

			[Token(Token = "0x4001104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int <i>5__2;

			[Token(Token = "0x1700018E")]
			private bool System.Collections.Generic.IEnumerator<System.Boolean>.Current
			{
				[Token(Token = "0x6000BEA")]
				[Address(RVA = "0x80BABC", Offset = "0x80BABC", VA = "0x80BABC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700018F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BEC")]
				[Address(RVA = "0x80BB04", Offset = "0x80BB04", VA = "0x80BB04", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0x80B968", Offset = "0x80B968", VA = "0x80B968")]
			[DebuggerHidden]
			public <Enumerate>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0x80BA48", Offset = "0x80BA48", VA = "0x80BA48", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0x80BA4C", Offset = "0x80BA4C", VA = "0x80BA4C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0x80BAC4", Offset = "0x80BAC4", VA = "0x80BAC4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000BED")]
			[Address(RVA = "0x80BB60", Offset = "0x80BB60", VA = "0x80BB60", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<bool> System.Collections.Generic.IEnumerable<System.Boolean>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0x80BC20", Offset = "0x80BC20", VA = "0x80BC20", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool _0;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool _1;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public bool _2;

		[Token(Token = "0x1700018D")]
		public bool this[int index]
		{
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x80B718", Offset = "0x80B718", VA = "0x80B718")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x80B784", Offset = "0x80B784", VA = "0x80B784")]
			set
			{
			}
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x80B7F4", Offset = "0x80B7F4", VA = "0x80B7F4")]
		public bool Contains(bool value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x80B840", Offset = "0x80B840", VA = "0x80B840")]
		public int IndexOf(bool value)
		{
			return default(int);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x80B888", Offset = "0x80B888", VA = "0x80B888")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x80B894", Offset = "0x80B894", VA = "0x80B894")]
		public void Clear(bool value)
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x80B8E4", Offset = "0x80B8E4", VA = "0x80B8E4")]
		[IteratorStateMachine(typeof(<Enumerate>d__10))]
		private IEnumerable<bool> Enumerate()
		{
			return null;
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x80B99C", Offset = "0x80B99C", VA = "0x80B99C", Slot = "4")]
		public IEnumerator<bool> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x80BA44", Offset = "0x80BA44", VA = "0x80BA44", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20001F5")]
	public class MathUtil
	{
		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static double EPSILON;

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x80BC24", Offset = "0x80BC24", VA = "0x80BC24")]
		public static bool AreValuesEqual(double val1, double val2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x80B604", Offset = "0x80B604", VA = "0x80B604")]
		public static bool AreValuesEqual(double val1, double val2, double tolerance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x80B5CC", Offset = "0x80B5CC", VA = "0x80B5CC")]
		public static bool IsValueBetween(double val, double min, double max, double tolerance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x809F54", Offset = "0x809F54", VA = "0x809F54")]
		public static double RoundWithPrecision(double f, double precision)
		{
			return default(double);
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x80BCA8", Offset = "0x80BCA8", VA = "0x80BCA8")]
		public static double Clamp(double a, double low, double high)
		{
			return default(double);
		}

		[Token(Token = "0x6000BF4")]
		public static void Swap<T>(ref T a, ref T b)
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x8094F0", Offset = "0x8094F0", VA = "0x8094F0")]
		public static uint Jenkins32Hash(byte[] data, uint nInitialValue)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x80BD2C", Offset = "0x80BD2C", VA = "0x80BD2C")]
		public MathUtil()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class Point2D : IComparable<Point2D>
	{
		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected double mX;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected double mY;

		[Token(Token = "0x17000190")]
		public virtual double X
		{
			[Token(Token = "0x6000BF8")]
			[Address(RVA = "0x80BD8C", Offset = "0x80BD8C", VA = "0x80BD8C", Slot = "5")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0x80BD94", Offset = "0x80BD94", VA = "0x80BD94", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public virtual double Y
		{
			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0x80BD9C", Offset = "0x80BD9C", VA = "0x80BD9C", Slot = "7")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0x80BDA4", Offset = "0x80BDA4", VA = "0x80BDA4", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public float Xf
		{
			[Token(Token = "0x6000BFC")]
			[Address(RVA = "0x80BDAC", Offset = "0x80BDAC", VA = "0x80BDAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000193")]
		public float Yf
		{
			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0x80BDC8", Offset = "0x80BDC8", VA = "0x80BDC8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x802FF4", Offset = "0x802FF4", VA = "0x802FF4")]
		public Point2D()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x7FE070", Offset = "0x7FE070", VA = "0x7FE070")]
		public Point2D(double x, double y)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x80BDE4", Offset = "0x80BDE4", VA = "0x80BDE4")]
		public Point2D(Point2D p)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x809B44", Offset = "0x809B44", VA = "0x809B44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x80BE38", Offset = "0x80BE38", VA = "0x80BE38", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x809E24", Offset = "0x809E24", VA = "0x809E24", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x8041CC", Offset = "0x8041CC", VA = "0x8041CC")]
		public bool Equals(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x800FD8", Offset = "0x800FD8", VA = "0x800FD8")]
		public bool Equals(Point2D p, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x80BE40", Offset = "0x80BE40", VA = "0x80BE40", Slot = "4")]
		public int CompareTo(Point2D other)
		{
			return default(int);
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x80BF2C", Offset = "0x80BF2C", VA = "0x80BF2C", Slot = "9")]
		public virtual void Set(double x, double y)
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x80BF64", Offset = "0x80BF64", VA = "0x80BF64", Slot = "10")]
		public virtual void Set(Point2D p)
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x80BFC4", Offset = "0x80BFC4", VA = "0x80BFC4")]
		public void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x80C05C", Offset = "0x80C05C", VA = "0x80C05C")]
		public void Add(double scalar)
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x7FE09C", Offset = "0x7FE09C", VA = "0x7FE09C")]
		public void Subtract(Point2D p)
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x80C0B8", Offset = "0x80C0B8", VA = "0x80C0B8")]
		public void Subtract(double scalar)
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x80C114", Offset = "0x80C114", VA = "0x80C114")]
		public void Multiply(Point2D p)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x80C1AC", Offset = "0x80C1AC", VA = "0x80C1AC")]
		public void Multiply(double scalar)
		{
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x80C208", Offset = "0x80C208", VA = "0x80C208")]
		public void Divide(Point2D p)
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x80C2A0", Offset = "0x80C2A0", VA = "0x80C2A0")]
		public void Divide(double scalar)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x80C2FC", Offset = "0x80C2FC", VA = "0x80C2FC")]
		public void Negate()
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x804468", Offset = "0x804468", VA = "0x804468")]
		public double Magnitude()
		{
			return default(double);
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x7FE134", Offset = "0x7FE134", VA = "0x7FE134")]
		public double MagnitudeSquared()
		{
			return default(double);
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x80C34C", Offset = "0x80C34C", VA = "0x80C34C")]
		public double MagnitudeReciprocal()
		{
			return default(double);
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x804528", Offset = "0x804528", VA = "0x804528")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x80C364", Offset = "0x80C364", VA = "0x80C364")]
		public double Dot(Point2D p)
		{
			return default(double);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x80C3F0", Offset = "0x80C3F0", VA = "0x80C3F0")]
		public double Cross(Point2D p)
		{
			return default(double);
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x80C47C", Offset = "0x80C47C", VA = "0x80C47C")]
		public void Clamp(Point2D low, Point2D high)
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x80C5C8", Offset = "0x80C5C8", VA = "0x80C5C8")]
		public void Abs()
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x80C668", Offset = "0x80C668", VA = "0x80C668")]
		public void Reciprocal()
		{
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x80C700", Offset = "0x80C700", VA = "0x80C700")]
		public void Translate(Point2D vector)
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x80C704", Offset = "0x80C704", VA = "0x80C704")]
		public void Translate(double x, double y)
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x80C764", Offset = "0x80C764", VA = "0x80C764")]
		public void Scale(Point2D vector)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x80C768", Offset = "0x80C768", VA = "0x80C768")]
		public void Scale(double scalar)
		{
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x80C76C", Offset = "0x80C76C", VA = "0x80C76C")]
		public void Scale(double x, double y)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x80C7CC", Offset = "0x80C7CC", VA = "0x80C7CC")]
		public void Rotate(double radians)
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x80C8A8", Offset = "0x80C8A8", VA = "0x80C8A8")]
		public void RotateDegrees(double degrees)
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x804548", Offset = "0x804548", VA = "0x804548")]
		public static double Dot(Point2D lhs, Point2D rhs)
		{
			return default(double);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x8045D4", Offset = "0x8045D4", VA = "0x8045D4")]
		public static double Cross(Point2D lhs, Point2D rhs)
		{
			return default(double);
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x80C8C4", Offset = "0x80C8C4", VA = "0x80C8C4")]
		public static Point2D Clamp(Point2D a, Point2D low, Point2D high)
		{
			return null;
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x80C944", Offset = "0x80C944", VA = "0x80C944")]
		public static Point2D Min(Point2D a, Point2D b)
		{
			return null;
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x80CA74", Offset = "0x80CA74", VA = "0x80CA74")]
		public static Point2D Max(Point2D a, Point2D b)
		{
			return null;
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x80CBA4", Offset = "0x80CBA4", VA = "0x80CBA4")]
		public static Point2D Abs(Point2D a)
		{
			return null;
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x80CC68", Offset = "0x80CC68", VA = "0x80CC68")]
		public static Point2D Reciprocal(Point2D a)
		{
			return null;
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x80CD0C", Offset = "0x80CD0C", VA = "0x80CD0C")]
		public static Point2D Perpendicular(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x80CDB8", Offset = "0x80CDB8", VA = "0x80CDB8")]
		public static Point2D Perpendicular(double scalar, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x80CE64", Offset = "0x80CE64", VA = "0x80CE64")]
		public static Point2D operator +(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x80CEDC", Offset = "0x80CEDC", VA = "0x80CEDC")]
		public static Point2D operator +(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x803528", Offset = "0x803528", VA = "0x803528")]
		public static Point2D operator -(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x80CF54", Offset = "0x80CF54", VA = "0x80CF54")]
		public static Point2D operator -(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x80CFCC", Offset = "0x80CFCC", VA = "0x80CFCC")]
		public static Point2D operator *(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x80D044", Offset = "0x80D044", VA = "0x80D044")]
		public static Point2D operator *(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x80D0BC", Offset = "0x80D0BC", VA = "0x80D0BC")]
		public static Point2D operator *(double scalar, Point2D lhs)
		{
			return null;
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x80D134", Offset = "0x80D134", VA = "0x80D134")]
		public static Point2D operator /(Point2D lhs, Point2D rhs)
		{
			return null;
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x80D1AC", Offset = "0x80D1AC", VA = "0x80D1AC")]
		public static Point2D operator /(Point2D lhs, double scalar)
		{
			return null;
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x80D224", Offset = "0x80D224", VA = "0x80D224")]
		public static Point2D operator -(Point2D p)
		{
			return null;
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x80D28C", Offset = "0x80D28C", VA = "0x80D28C")]
		public static bool operator <(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x80D2AC", Offset = "0x80D2AC", VA = "0x80D2AC")]
		public static bool operator >(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x80D2CC", Offset = "0x80D2CC", VA = "0x80D2CC")]
		public static bool operator <=(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x80D2EC", Offset = "0x80D2EC", VA = "0x80D2EC")]
		public static bool operator >=(Point2D lhs, Point2D rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001F7")]
	public class Point2DEnumerator : IEnumerator<Point2D>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected IList<Point2D> mPoints;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int position;

		[Token(Token = "0x17000194")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x80D40C", Offset = "0x80D40C", VA = "0x80D40C", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000195")]
		public Point2D Current
		{
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x80D410", Offset = "0x80D410", VA = "0x80D410", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x80D30C", Offset = "0x80D30C", VA = "0x80D30C")]
		public Point2DEnumerator(IList<Point2D> points)
		{
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x80D344", Offset = "0x80D344", VA = "0x80D344", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x80D3FC", Offset = "0x80D3FC", VA = "0x80D3FC", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x80D408", Offset = "0x80D408", VA = "0x80D408", Slot = "5")]
		private void System.IDisposable.Dispose()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class Point2DList : IEnumerable<Point2D>, IEnumerable, IList<Point2D>, ICollection<Point2D>
	{
		[Token(Token = "0x20001F9")]
		public enum WindingOrderType
		{
			[Token(Token = "0x4001112")]
			CW = 0,
			[Token(Token = "0x4001113")]
			CCW = 1,
			[Token(Token = "0x4001114")]
			Unknown = 2,
			[Token(Token = "0x4001115")]
			Default = 1
		}

		[Token(Token = "0x20001FA")]
		[Flags]
		public enum PolygonError : uint
		{
			[Token(Token = "0x4001117")]
			None = 0u,
			[Token(Token = "0x4001118")]
			NotEnoughVertices = 1u,
			[Token(Token = "0x4001119")]
			NotConvex = 2u,
			[Token(Token = "0x400111A")]
			NotSimple = 4u,
			[Token(Token = "0x400111B")]
			AreaTooSmall = 8u,
			[Token(Token = "0x400111C")]
			SidesTooCloseToParallel = 0x10u,
			[Token(Token = "0x400111D")]
			TooThin = 0x20u,
			[Token(Token = "0x400111E")]
			Degenerate = 0x40u,
			[Token(Token = "0x400111F")]
			Unknown = 0x40000000u
		}

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int kMaxPolygonVertices;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly double kLinearSlop;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly double kAngularSlop;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<Point2D> mPoints;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Rect2D mBoundingBox;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected WindingOrderType mWindingOrder;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected double mEpsilon;

		[Token(Token = "0x17000196")]
		public Rect2D BoundingBox
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0x80D54C", Offset = "0x80D54C", VA = "0x80D54C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000197")]
		public WindingOrderType WindingOrder
		{
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x80D554", Offset = "0x80D554", VA = "0x80D554")]
			get
			{
				return default(WindingOrderType);
			}
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0x804968", Offset = "0x804968", VA = "0x804968")]
			set
			{
			}
		}

		[Token(Token = "0x17000198")]
		public double Epsilon
		{
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0x80D588", Offset = "0x80D588", VA = "0x80D588")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000199")]
		public Point2D this[int index]
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0x800EC8", Offset = "0x800EC8", VA = "0x800EC8", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0x80D590", Offset = "0x80D590", VA = "0x80D590", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public int Count
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0x801264", Offset = "0x801264", VA = "0x801264", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700019B")]
		public virtual bool IsReadOnly
		{
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0x80D5F8", Offset = "0x80D5F8", VA = "0x80D5F8", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x803EA8", Offset = "0x803EA8", VA = "0x803EA8")]
		public Point2DList()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x80D624", Offset = "0x80D624", VA = "0x80D624")]
		public Point2DList(int capacity)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x803D00", Offset = "0x803D00", VA = "0x803D00")]
		public Point2DList(IList<Point2D> l)
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x804758", Offset = "0x804758", VA = "0x804758")]
		public Point2DList(Point2DList l)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x80D78C", Offset = "0x80D78C", VA = "0x80D78C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x80D888", Offset = "0x80D888", VA = "0x80D888", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x80D918", Offset = "0x80D918", VA = "0x80D918", Slot = "4")]
		private IEnumerator<Point2D> System.Collections.Generic.IEnumerable<Poly2Tri.Point2D>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x800F20", Offset = "0x800F20", VA = "0x800F20", Slot = "14")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x8010E0", Offset = "0x8010E0", VA = "0x8010E0", Slot = "8")]
		public int IndexOf(Point2D p)
		{
			return default(int);
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x80D9A4", Offset = "0x80D9A4", VA = "0x80D9A4", Slot = "19")]
		public virtual void Add(Point2D p)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x80D9BC", Offset = "0x80D9BC", VA = "0x80D9BC", Slot = "20")]
		protected virtual void Add(Point2D p, int idx, bool bCalcWindingOrderAndEpsilon)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x80DAF0", Offset = "0x80DAF0", VA = "0x80DAF0", Slot = "21")]
		public virtual void AddRange(Point2DList l)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x80DBA4", Offset = "0x80DBA4", VA = "0x80DBA4", Slot = "22")]
		public virtual void AddRange(IEnumerator<Point2D> iter, WindingOrderType windingOrder)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x80DEF4", Offset = "0x80DEF4", VA = "0x80DEF4", Slot = "23")]
		public virtual void Insert(int idx, Point2D item)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x80DF14", Offset = "0x80DF14", VA = "0x80DF14", Slot = "24")]
		public virtual bool Remove(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x80E0F4", Offset = "0x80E0F4", VA = "0x80E0F4", Slot = "25")]
		public virtual void RemoveAt(int idx)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x80E178", Offset = "0x80E178", VA = "0x80E178", Slot = "26")]
		public virtual void RemoveRange(int idxStart, int count)
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x8018E4", Offset = "0x8018E4", VA = "0x8018E4", Slot = "15")]
		public bool Contains(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x80E210", Offset = "0x80E210", VA = "0x80E210", Slot = "16")]
		public void CopyTo(Point2D[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x80DF94", Offset = "0x80DF94", VA = "0x80DF94")]
		public void CalculateBounds()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x80817C", Offset = "0x80817C", VA = "0x80817C")]
		public double CalculateEpsilon()
		{
			return default(double);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x80D55C", Offset = "0x80D55C", VA = "0x80D55C")]
		public WindingOrderType CalculateWindingOrder()
		{
			return default(WindingOrderType);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x801138", Offset = "0x801138", VA = "0x801138")]
		public int NextIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x802000", Offset = "0x802000", VA = "0x802000")]
		public int PreviousIndex(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x80E354", Offset = "0x80E354", VA = "0x80E354")]
		public double GetSignedArea()
		{
			return default(double);
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x80E464", Offset = "0x80E464", VA = "0x80E464")]
		public double GetArea()
		{
			return default(double);
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x80E580", Offset = "0x80E580", VA = "0x80E580")]
		public Point2D GetCentroid()
		{
			return null;
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x80E6F4", Offset = "0x80E6F4", VA = "0x80E6F4")]
		public void Translate(Point2D vector)
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x80E758", Offset = "0x80E758", VA = "0x80E758")]
		public void Scale(Point2D value)
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x80E7BC", Offset = "0x80E7BC", VA = "0x80E7BC")]
		public void Rotate(double radians)
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x80E9B8", Offset = "0x80E9B8", VA = "0x80E9B8")]
		public bool IsDegenerate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x80EB30", Offset = "0x80EB30", VA = "0x80EB30")]
		public bool IsConvex()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x80ED08", Offset = "0x80ED08", VA = "0x80ED08")]
		public bool IsSimple()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x806C90", Offset = "0x806C90", VA = "0x806C90")]
		public PolygonError CheckPolygon()
		{
			return default(PolygonError);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x80EE94", Offset = "0x80EE94", VA = "0x80EE94")]
		public static string GetErrorString(PolygonError error)
		{
			return null;
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x806B28", Offset = "0x806B28", VA = "0x806B28")]
		public void RemoveDuplicateNeighborPoints()
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x803FC0", Offset = "0x803FC0", VA = "0x803FC0")]
		public void Simplify()
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x80715C", Offset = "0x80715C", VA = "0x80715C")]
		public void Simplify(double bias)
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x80F2F0", Offset = "0x80F2F0", VA = "0x80F2F0")]
		public void MergeParallelEdges(double tolerance)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x80F938", Offset = "0x80F938", VA = "0x80F938")]
		public void ProjectToAxis(Point2D axis, out double min, out double max)
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class Rect2D
	{
		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double mMinX;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double mMaxX;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private double mMinY;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double mMaxY;

		[Token(Token = "0x1700019C")]
		public double MinX
		{
			[Token(Token = "0x6000C70")]
			[Address(RVA = "0x80FA3C", Offset = "0x80FA3C", VA = "0x80FA3C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0x80FA44", Offset = "0x80FA44", VA = "0x80FA44")]
			set
			{
			}
		}

		[Token(Token = "0x1700019D")]
		public double MaxX
		{
			[Token(Token = "0x6000C72")]
			[Address(RVA = "0x80FA4C", Offset = "0x80FA4C", VA = "0x80FA4C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0x80FA54", Offset = "0x80FA54", VA = "0x80FA54")]
			set
			{
			}
		}

		[Token(Token = "0x1700019E")]
		public double MinY
		{
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0x80FA5C", Offset = "0x80FA5C", VA = "0x80FA5C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0x80FA64", Offset = "0x80FA64", VA = "0x80FA64")]
			set
			{
			}
		}

		[Token(Token = "0x1700019F")]
		public double MaxY
		{
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0x80FA6C", Offset = "0x80FA6C", VA = "0x80FA6C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0x80FA74", Offset = "0x80FA74", VA = "0x80FA74")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public double Left
		{
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0x80FA7C", Offset = "0x80FA7C", VA = "0x80FA7C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0x80FA84", Offset = "0x80FA84", VA = "0x80FA84")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public double Right
		{
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0x80FA8C", Offset = "0x80FA8C", VA = "0x80FA8C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0x80FA94", Offset = "0x80FA94", VA = "0x80FA94")]
			set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public double Top
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0x80FA9C", Offset = "0x80FA9C", VA = "0x80FA9C")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0x80FAA4", Offset = "0x80FAA4", VA = "0x80FAA4")]
			set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public double Bottom
		{
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0x80FAAC", Offset = "0x80FAAC", VA = "0x80FAAC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0x80FAB4", Offset = "0x80FAB4", VA = "0x80FAB4")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public double Width
		{
			[Token(Token = "0x6000C80")]
			[Address(RVA = "0x7FEA54", Offset = "0x7FEA54", VA = "0x7FEA54")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170001A5")]
		public double Height
		{
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0x80E348", Offset = "0x80E348", VA = "0x80E348")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x170001A6")]
		public bool Empty
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0x80FABC", Offset = "0x80FABC", VA = "0x80FABC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x80D600", Offset = "0x80D600", VA = "0x80D600")]
		public Rect2D()
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x80FAE0", Offset = "0x80FAE0", VA = "0x80FAE0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x80FAE8", Offset = "0x80FAE8", VA = "0x80FAE8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x80FB7C", Offset = "0x80FB7C", VA = "0x80FB7C")]
		public bool Equals(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x80FBEC", Offset = "0x80FBEC", VA = "0x80FBEC")]
		public bool Equals(Rect2D r, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x80D994", Offset = "0x80D994", VA = "0x80D994")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x80FD10", Offset = "0x80FD10", VA = "0x80FD10")]
		public void Set(double xmin, double xmax, double ymin, double ymax)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x80D768", Offset = "0x80D768", VA = "0x80D768")]
		public void Set(Rect2D b)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x80FDF0", Offset = "0x80FDF0", VA = "0x80FDF0")]
		public void SetSize(double w, double h)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x80FE0C", Offset = "0x80FE0C", VA = "0x80FE0C")]
		public bool Contains(double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x80FE48", Offset = "0x80FE48", VA = "0x80FE48")]
		public bool Contains(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x80FED0", Offset = "0x80FED0", VA = "0x80FED0")]
		public bool Contains(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x80FF2C", Offset = "0x80FF2C", VA = "0x80FF2C")]
		public bool ContainsInclusive(double x, double y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x80FF68", Offset = "0x80FF68", VA = "0x80FF68")]
		public bool ContainsInclusive(double x, double y, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x80FFB4", Offset = "0x80FFB4", VA = "0x80FFB4")]
		public bool ContainsInclusive(Point2D p)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x81003C", Offset = "0x81003C", VA = "0x81003C")]
		public bool ContainsInclusive(Point2D p, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x8100D8", Offset = "0x8100D8", VA = "0x8100D8")]
		public bool ContainsInclusive(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x810134", Offset = "0x810134", VA = "0x810134")]
		public bool ContainsInclusive(Rect2D r, double epsilon)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x7FE9F8", Offset = "0x7FE9F8", VA = "0x7FE9F8")]
		public bool Intersects(Rect2D r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x8101A0", Offset = "0x8101A0", VA = "0x8101A0")]
		public Point2D GetCenter()
		{
			return null;
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x810230", Offset = "0x810230", VA = "0x810230")]
		public bool IsNormalized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x80FD1C", Offset = "0x80FD1C", VA = "0x80FD1C")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x808074", Offset = "0x808074", VA = "0x808074")]
		public void AddPoint(Point2D p)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x810254", Offset = "0x810254", VA = "0x810254")]
		public void Inflate(double w, double h)
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x810278", Offset = "0x810278", VA = "0x810278")]
		public void Inflate(double left, double top, double right, double bottom)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x81029C", Offset = "0x81029C", VA = "0x81029C")]
		public void Offset(double w, double h)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x8102B8", Offset = "0x8102B8", VA = "0x8102B8")]
		public void SetPosition(double x, double y)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x8102E4", Offset = "0x8102E4", VA = "0x8102E4")]
		public bool Intersection(Rect2D r1, Rect2D r2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x810388", Offset = "0x810388", VA = "0x810388")]
		public void Union(Rect2D r1, Rect2D r2)
		{
		}
	}
}
namespace TFBG.Telekinesis
{
	[Token(Token = "0x20001FC")]
	public interface ITelekineticObject
	{
		[Token(Token = "0x170001A7")]
		Transform transform
		{
			[Token(Token = "0x6000CA2")]
			get;
		}

		[Token(Token = "0x170001A8")]
		Grabbable Grabbable
		{
			[Token(Token = "0x6000CA3")]
			get;
		}

		[Token(Token = "0x6000CA0")]
		bool IsValidForPull();

		[Token(Token = "0x6000CA1")]
		void PullTowards(TelekinesisHandler telekinesisHandler);
	}
	[Token(Token = "0x20001FD")]
	public class TelekinesisHandler : MonoBehaviour
	{
		[Token(Token = "0x4001124")]
		private const float MinimumInputToConsiderAsPressed = 0.5f;

		[Token(Token = "0x4001125")]
		private const float MinimumTractorDistance = 1f;

		[Token(Token = "0x4001126")]
		private const int MaxRaycastResults = 100;

		[Token(Token = "0x4001127")]
		private const int ResetIndicatorAfterGazeSilentForXTicks = 10;

		[Token(Token = "0x4001128")]
		private const int MaximumTicksBetweenGrabReleaseAndTelekinesis = 10;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TelekinesisMode currentTelekinesisMode;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Tooltip("Does this Telekinesis Handler require a TelekinesisHandlerGazeTrigger in order to search for telekinetic objects?")]
		private bool requiresGazeToSearch;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The game object that should be enabled or disabled to indicate that this object is currently selected.")]
		private GameObject selectionIndicator;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The velocity at which the telekinetic object should fly towards the user's hand when the telekinesis handler is set up in tractor mode.")]
		[SerializeField]
		private float tractorPullVelocity;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The input reader to use for determining user input.")]
		[SerializeField]
		private IInputReader inputReader;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Excitement Cost")]
		[Tooltip("How much excitement is required for telekinesis?")]
		[SerializeField]
		[Range(0f, 5f)]
		private float telekinesisPullExcitementCost;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Tug Settings")]
		[Tooltip("The local upward velocity in M/s required to trigger a telekinetic pull. This should be a positive value, which is internally converted to negative backwards movement.")]
		[SerializeField]
		private float upwardSpeedRequiredForTug;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How long before another tug can occur?")]
		[SerializeField]
		private float tugCooldown;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How long should the controller vibrate for while grabbing?.")]
		[SerializeField]
		[Range(0f, 1f)]
		private float vibrationDuration;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How intensely controller vibrate for while grabbing?.")]
		[SerializeField]
		[Range(0f, 1f)]
		private float vibrationMagnitude;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Spherecast Settings")]
		[SerializeField]
		private float spherecastRadius;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The maximum pull range in meters.")]
		[SerializeField]
		private float maxPullRange;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private LayerMask collisionMask;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly RaycastHit[] results;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ITelekineticObject closestTelekineticObject;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isSearchingForValidTelekineticTarget;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ExcitementController excitementController;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ITelekineticObject playerTarget;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 localVelocity;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 previousFramePosition;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool isLeftHand;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool usePlayerInput;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		private bool hasExcitementController;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool hasLineRenderer;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Fist fist;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float grabInput;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float remainingTugCooldown;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int ticksSinceLastGazeSearchRequest;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int ticksSinceLastGrabRelease;

		[Token(Token = "0x170001A9")]
		public float TractorPullVelocity
		{
			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0x810420", Offset = "0x810420", VA = "0x810420")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x810428", Offset = "0x810428", VA = "0x810428")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x810680", Offset = "0x810680", VA = "0x810680")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x810DE4", Offset = "0x810DE4", VA = "0x810DE4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x810F78", Offset = "0x810F78", VA = "0x810F78")]
		public void TryGazeSearch()
		{
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x8107DC", Offset = "0x8107DC", VA = "0x8107DC")]
		private void SearchRoutine()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x8106E0", Offset = "0x8106E0", VA = "0x8106E0")]
		private void Highlight(ITelekineticObject target)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x810FA8", Offset = "0x810FA8", VA = "0x810FA8")]
		private void SelectTarget()
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x8111C8", Offset = "0x8111C8", VA = "0x8111C8")]
		private void ReleaseTarget()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x8111D4", Offset = "0x8111D4", VA = "0x8111D4")]
		private bool PlayerHasEnoughExcitementForTelekinesis()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x811260", Offset = "0x811260", VA = "0x811260")]
		private void UpdateClosestTelekineticObject()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x8115B4", Offset = "0x8115B4", VA = "0x8115B4")]
		private bool IsTelekineticObjectAngledCloserThan(ref float angleToCompare, ITelekineticObject telekineticObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x8117D0", Offset = "0x8117D0", VA = "0x8117D0")]
		public TelekinesisHandler()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class TelekinesisHandlerGazeTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001147")]
		private const int GazeResultsPoolSize = 32;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float gazeRadius;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float gazeRange;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LayerMask collisionMask;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RaycastHit[] results;

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x811868", Offset = "0x811868", VA = "0x811868")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x811A08", Offset = "0x811A08", VA = "0x811A08")]
		public TelekinesisHandlerGazeTrigger()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public enum TelekinesisMode
	{
		[Token(Token = "0x400114D")]
		Tug,
		[Token(Token = "0x400114E")]
		Tractor
	}
	[Token(Token = "0x2000200")]
	[RequireComponent(typeof(Rigidbody))]
	public class TelekineticObject : MonoBehaviour, ITelekineticObject
	{
		[Token(Token = "0x400114F")]
		private const float TimeToDisengageOnCollision = 1f;

		[Token(Token = "0x4001150")]
		private const float MinimumVelocityToDisengage = 3f;

		[Token(Token = "0x4001151")]
		private const float MaxHeightOffsetModifier = 1f;

		[Token(Token = "0x4001152")]
		private const int DrawPathResolution = 10;

		[Token(Token = "0x4001153")]
		private const float MinimumTractorDistance = 0.5f;

		[Token(Token = "0x4001154")]
		private const float ApplyCourseCorrectionAtPathCompletionMinimum = 0.6f;

		[Token(Token = "0x4001155")]
		private const float ApplyCourseCorrectionAtPathCompletionMaximum = 0.8f;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("Should the object fly into the player's hand as a held weapon if the player holds in the grab input once the object reaches it's target?")]
		private bool grabOnHold;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool shouldDisengageOnCollision;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("A list of all related rigidbodies to affect. Includes this rigidbody by default. Useful for multi-part telekinetic objects.")]
		private List<Rigidbody> relatedRigidbodies;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isEngaged;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TelekinesisHandler target;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigidbody;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rotationAtStartOfTelekinesis;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 positionAtStartOfTelekinesis;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 thisAveragePosition;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 targetPosition;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float distanceRemaining;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float distanceTotal;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float maxHeight;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float pathCompletionPercentage;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float timeRemainingToDisengageOnCollision;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable grabbable;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool hasWeaponHandle;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool isArrow;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool courseCorrectionApplied;

		[Token(Token = "0x170001AA")]
		public Grabbable Grabbable
		{
			[Token(Token = "0x6000CB3")]
			[Address(RVA = "0x811A78", Offset = "0x811A78", VA = "0x811A78", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x811A80", Offset = "0x811A80", VA = "0x811A80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x811BD8", Offset = "0x811BD8", VA = "0x811BD8")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x811D0C", Offset = "0x811D0C", VA = "0x811D0C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x81251C", Offset = "0x81251C", VA = "0x81251C", Slot = "4")]
		public bool IsValidForPull()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x81241C", Offset = "0x81241C", VA = "0x81241C")]
		private void UpdateAveragePosition()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x812550", Offset = "0x812550", VA = "0x812550", Slot = "5")]
		public void PullTowards(TelekinesisHandler telekinesisHandler)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x8123C8", Offset = "0x8123C8", VA = "0x8123C8")]
		private bool DisengageOnLowVelocity()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x8125A0", Offset = "0x8125A0", VA = "0x8125A0")]
		private void EnableTelekinesisPull(TelekinesisHandler telekinesisHandler)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x8126F4", Offset = "0x8126F4", VA = "0x8126F4")]
		private VelocityData CalculateVelocityData()
		{
			return default(VelocityData);
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x812998", Offset = "0x812998", VA = "0x812998")]
		public TelekineticObject()
		{
		}

		[SpecialName]
		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x812A30", Offset = "0x812A30", VA = "0x812A30", Slot = "6")]
		private Transform TFBG.Telekinesis.ITelekineticObject.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x2000201")]
	public readonly struct VelocityData
	{
		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly Vector3 InitialVelocity;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly float TimeToTarget;

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x81298C", Offset = "0x81298C", VA = "0x81298C")]
		public VelocityData(Vector3 initialVelocity, float timeToTarget)
		{
		}
	}
}
namespace TFBG.Scoring
{
	[Token(Token = "0x2000202")]
	public class BillboardSprite : MonoBehaviour
	{
		[Token(Token = "0x400116B")]
		private const float ScaleToUnityScaleModifier = 10f;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool lockSizeToScreen;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float scale;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Camera mainCamera;

		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 newScale;

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x812A38", Offset = "0x812A38", VA = "0x812A38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x812AD4", Offset = "0x812AD4", VA = "0x812AD4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x812D00", Offset = "0x812D00", VA = "0x812D00")]
		public BillboardSprite()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class BoardEntry : Poolable
	{
		[Token(Token = "0x4001170")]
		private const byte FadedAlphaValue = 180;

		[Token(Token = "0x4001171")]
		private const byte FillAlphaValue = byte.MaxValue;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TMP_Text entryText;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isFaded;

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x812D60", Offset = "0x812D60", VA = "0x812D60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x812D64", Offset = "0x812D64", VA = "0x812D64")]
		public float GetFontSize()
		{
			return default(float);
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x812D80", Offset = "0x812D80", VA = "0x812D80")]
		public void SetText(string text)
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x812DA4", Offset = "0x812DA4", VA = "0x812DA4")]
		public void EnableFade(bool shouldFade)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x8130FC", Offset = "0x8130FC", VA = "0x8130FC")]
		public BoardEntry()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class BoardEntryPool : AutoComponentPrefabPool<BoardEntry>
	{
		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x813104", Offset = "0x813104", VA = "0x813104")]
		public BoardEntryPool(BoardEntry prefab, int initialCapacity)
		{
		}
	}
	[Token(Token = "0x2000205")]
	public static class Constants
	{
		[Token(Token = "0x4001174")]
		public const string KillText = "Kill!";

		[Token(Token = "0x4001175")]
		public const string HitString = "";

		[Token(Token = "0x4001176")]
		public const string HighlightsTextString = "Highlights!\n\n";

		[Token(Token = "0x4001177")]
		public const string KillTextString = "Enemy Kill!\n\n";

		[Token(Token = "0x4001178")]
		public const string TotalScoreText = "TOTAL SCORE: ";

		[Token(Token = "0x4001179")]
		public const string KillMultiplierDisplayText = "KILL MULTIPLIER  X ";

		[Token(Token = "0x400117A")]
		public const string KillScoreDisplayText = "KILL SCORE  ";

		[Token(Token = "0x400117B")]
		public const string PlusSymbol = "+";

		[Token(Token = "0x400117C")]
		public const string Space = " ";

		[Token(Token = "0x400117D")]
		public const string TmpTextClosingTagBold = "</b>";

		[Token(Token = "0x400117E")]
		public const string TmpTextClosingTagSize = "</size>";

		[Token(Token = "0x400117F")]
		public const int MaxKillScore = 10;

		[Token(Token = "0x4001180")]
		public const int MaxVarietyScore = 5;

		[Token(Token = "0x4001181")]
		public const int DamageDivisionForExcitement = 100;

		[Token(Token = "0x4001182")]
		public const float MinimumExcitementValue = 0f;

		[Token(Token = "0x4001183")]
		public const float MaximumBaseExcitementValue = 4f;

		[Token(Token = "0x4001184")]
		public const int MaxExcitementScore = 5;
	}
	[Token(Token = "0x2000206")]
	public enum CrowdExcitementState
	{
		[Token(Token = "0x4001186")]
		Undefined = -1,
		[Token(Token = "0x4001187")]
		Angry = 0,
		[Token(Token = "0x4001188")]
		Bored = 1,
		[Token(Token = "0x4001189")]
		Happy = 2,
		[Token(Token = "0x400118A")]
		Entertained = 3,
		[Token(Token = "0x400118B")]
		Thrilled = 4,
		[Token(Token = "0x400118C")]
		Max = 4
	}
	[Token(Token = "0x2000207")]
	public class CrowdHeadRating : MonoBehaviour
	{
		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The board object that should be enabled and disabled, that represents the kill score.")]
		[SerializeField]
		private GameObject killRatingBoard;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TMP_Text killRatingBoardText;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The random deviation that this board can have. 0 (default) to disable.")]
		[SerializeField]
		private int randomDeviation;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The duration that the board should be displayed for in seconds.")]
		[SerializeField]
		private float boardDuration;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 0.25f)]
		[Tooltip("The random deviation percentage that should affect how long the board is displayed for.0 (default) to disable.")]
		[SerializeField]
		private float boardDurationDeviationModifier;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float timeToShowRemaining;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ScoreController scoreController;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<int> pendingScores;

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x813164", Offset = "0x813164", VA = "0x813164")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x8131C8", Offset = "0x8131C8", VA = "0x8131C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x81330C", Offset = "0x81330C", VA = "0x81330C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x8133E0", Offset = "0x8133E0", VA = "0x8133E0")]
		private void QueueShowKillScore(int rating)
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x8134B0", Offset = "0x8134B0", VA = "0x8134B0")]
		private void ShowBoard(int rating)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x813570", Offset = "0x813570", VA = "0x813570")]
		private void DisableBoard()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x813630", Offset = "0x813630", VA = "0x813630")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x813674", Offset = "0x813674", VA = "0x813674")]
		public CrowdHeadRating()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public class DamageIndicator : Poolable
	{
		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshPro hitPrefix;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshPro score;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshPro force;

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x813704", Offset = "0x813704", VA = "0x813704")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x813708", Offset = "0x813708", VA = "0x813708")]
		public void SetPrefixText(string text, Color32 color)
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x8137FC", Offset = "0x8137FC", VA = "0x8137FC")]
		public void SetScoreText(int amount, Color32 color)
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x8138F4", Offset = "0x8138F4", VA = "0x8138F4")]
		public void SetForceText(float forceAmount)
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x813AA8", Offset = "0x813AA8", VA = "0x813AA8")]
		public DamageIndicator()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class DamageIndicatorPool : AutoComponentPrefabPool<DamageIndicator>
	{
		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x813AB0", Offset = "0x813AB0", VA = "0x813AB0")]
		public DamageIndicatorPool(DamageIndicator prefab, int initialCapacity)
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class DamageUIManager : MonoBehaviour
	{
		[Token(Token = "0x4001198")]
		private const int InitialPoolCapacity = 3;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private DamageIndicator damageIndicatorPrefab;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Range(0.2f, 5f)]
		private float indicatorLifespan;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float indicatorKillYOffset;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Color32 softHitColor;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Color32 mediumHitColor;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color32 hardHitColor;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private Color32 killColor;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private bool displayHitForce;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DamageIndicatorPool damageIndicatorPool;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ScoreController scoreController;

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x813B10", Offset = "0x813B10", VA = "0x813B10")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x813B80", Offset = "0x813B80", VA = "0x813B80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x813EB0", Offset = "0x813EB0", VA = "0x813EB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x814018", Offset = "0x814018", VA = "0x814018")]
		private void ShowDamageIndicator(Vector3 position, string prefix, int damageAmount, float force, HitStrength strength, bool shouldOffsetY)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x81475C", Offset = "0x81475C", VA = "0x81475C")]
		public DamageUIManager()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class DisplayBoard : MonoBehaviour
	{
		[Token(Token = "0x40011A3")]
		private const int InitialPoolCapacity = 8;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The transform to instantiate child board entries to.")]
		[SerializeField]
		private Transform boardEntryParent;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The text object to update on receiving a new board highlight from the score controller.")]
		private BoardEntry boardEntryPrefab;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The leaderboard text object that should be hidden after receiving the first entry.")]
		[SerializeField]
		private TMP_Text leaderboardTextObject;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The text object to update with total score on receiving a new board highlight from the score controller.")]
		[SerializeField]
		private TMP_Text scoreTextObject;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int maxLines;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float totalScoreSizeBonus;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly Queue<BoardEntry> boardEntries;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tmpTextSize;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ScoreController scoreController;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Enemy previousEnemy;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly StringBuilder stringBuilder;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoardEntryPool boardEntryPool;

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x81476C", Offset = "0x81476C", VA = "0x81476C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x814B90", Offset = "0x814B90", VA = "0x814B90")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x814CF8", Offset = "0x814CF8", VA = "0x814CF8")]
		private void RefreshText(EnemyHitScoreData highlight)
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x815260", Offset = "0x815260", VA = "0x815260")]
		private void AddBoardEntry(HitInfo hit)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x815450", Offset = "0x815450", VA = "0x815450")]
		private void AddBoardEntryForKill(EnemyHitScoreData highlight)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x8151D8", Offset = "0x8151D8", VA = "0x8151D8")]
		private void ClearBoardEntries(int entriesToClear)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x8157AC", Offset = "0x8157AC", VA = "0x8157AC")]
		public DisplayBoard()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class EnemyHitScoreData
	{
		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Enemy EnemyHit;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly IReadOnlyList<HitInfo> Hits;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly int TotalScoreForEnemy;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly bool IsKill;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly int KillScore;

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x815870", Offset = "0x815870", VA = "0x815870")]
		public EnemyHitScoreData(List<HitInfo> hits, Enemy enemyHit, int totalScoreForEnemy, bool isKill, int killScore)
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class ExcitementController : MonoBehaviour
	{
		[Token(Token = "0x200020E")]
		public delegate void CrowdExcitementStateChanged(CrowdExcitementState newState);

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The rate of excitement decay per second.")]
		[SerializeField]
		private float excitementDecayRate;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How much higher is the maximum excitement value than the highest excitement threshold?")]
		[SerializeField]
		private float excitementMaximumOffset;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The starting and current excitement level of the player.")]
		private float currentExcitementValue;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private CrowdExcitementState currentCrowdExcitementLevel;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CrowdExcitementState previousCrowdExcitementLevel;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool isExcitementDecaying;

		[Token(Token = "0x170001AB")]
		public float CurrentExcitementValue
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0x81594C", Offset = "0x81594C", VA = "0x81594C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001AC")]
		public CrowdExcitementState CurrentExcitementLevel
		{
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0x815954", Offset = "0x815954", VA = "0x815954")]
			get
			{
				return default(CrowdExcitementState);
			}
		}

		[Token(Token = "0x14000001")]
		public event CrowdExcitementStateChanged OnCrowdExcitementStateChanged
		{
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0x81595C", Offset = "0x81595C", VA = "0x81595C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0x8159F8", Offset = "0x8159F8", VA = "0x8159F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x815A94", Offset = "0x815A94", VA = "0x815A94")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x815B04", Offset = "0x815B04", VA = "0x815B04")]
		public float GetNormalizedExcitementValue()
		{
			return default(float);
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x815B18", Offset = "0x815B18", VA = "0x815B18")]
		public void AddExcitement(float excitementToAdd)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x815A98", Offset = "0x815A98", VA = "0x815A98")]
		private void DecayExcitement()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x815B3C", Offset = "0x815B3C", VA = "0x815B3C")]
		private void CheckForExcitementLevelChange()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x815CC8", Offset = "0x815CC8", VA = "0x815CC8")]
		public ExcitementController()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class HitInfo : IPoolable
	{
		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WeaponType weaponType;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public DamageType damageType;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbType limbType;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scoreAmount;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DamageRelay damageReceiver;

		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DamagerRigidbody damageSender;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float hitForce;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SpecialHit specialHit;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public HitStrength strength;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float hitStrengthDamageModifier;

		[Token(Token = "0x170001AD")]
		public IPool Owner
		{
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0x815E5C", Offset = "0x815E5C", VA = "0x815E5C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0x815E64", Offset = "0x815E64", VA = "0x815E64", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x815E6C", Offset = "0x815E6C", VA = "0x815E6C")]
		public HitInfo()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class HitInfoPool : Pool<HitInfo>
	{
		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x815E74", Offset = "0x815E74", VA = "0x815E74")]
		public HitInfoPool(int initialCapacity)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x815F1C", Offset = "0x815F1C", VA = "0x815F1C")]
		private static HitInfo CreateNewHitInfoObject()
		{
			return null;
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x815F78", Offset = "0x815F78", VA = "0x815F78", Slot = "15")]
		public override void Return(HitInfo pooledItem)
		{
		}
	}
	[Token(Token = "0x2000211")]
	[CreateAssetMenu(fileName = "Hit Normalization Database", menuName = "24Bit/Scoring/Create Hit Normalization Database", order = 1)]
	public class HitNormalizationDatabase : ScriptableObject, ISerializationCallbackReceiver
	{
		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float hitFallbackVelocityForNormalization;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Hit Strength Thresholds")]
		[SerializeField]
		[Range(0f, 1f)]
		private float normalizedForceForMediumHit;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[SerializeField]
		private float normalizedForceForHardHit;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Hit Strength Score Modifiers")]
		[Range(0f, 2f)]
		[SerializeField]
		private float hitScoreModifierForSoftHit;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Range(0f, 2f)]
		private float hitScoreModifierForMediumHit;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 2f)]
		[SerializeField]
		private float hitScoreModifierForHardHit;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space(20f)]
		[SerializeField]
		private List<HitNormalizationOverride> hitNormalizationOverrides;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<WeaponType, float> hitNormalizationOverridesDictionary;

		[Token(Token = "0x170001AE")]
		public float NormalizedForceForMediumHit
		{
			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0x815FF8", Offset = "0x815FF8", VA = "0x815FF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001AF")]
		public float NormalizedForceForHardHit
		{
			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0x816000", Offset = "0x816000", VA = "0x816000")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B0")]
		public float HitScoreModifierForSoftHit
		{
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0x816008", Offset = "0x816008", VA = "0x816008")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B1")]
		public float HitScoreModifierForMediumHit
		{
			[Token(Token = "0x6000CFB")]
			[Address(RVA = "0x816010", Offset = "0x816010", VA = "0x816010")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B2")]
		public float HitScoreModifierForHardHit
		{
			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0x816018", Offset = "0x816018", VA = "0x816018")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x816020", Offset = "0x816020", VA = "0x816020")]
		public float GetForceOverride(WeaponType weaponType)
		{
			return default(float);
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x8160AC", Offset = "0x8160AC", VA = "0x8160AC", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x8160B0", Offset = "0x8160B0", VA = "0x8160B0", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x8161D0", Offset = "0x8161D0", VA = "0x8161D0")]
		public HitNormalizationDatabase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000212")]
	public class HitNormalizationOverride
	{
		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The weapon type to override the normalization calculation for.")]
		[SerializeField]
		public WeaponType weaponType;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The amount of hit force required to consider a hit at 100% strength. Higher values means a weapon needs to hit harder to be registered as a hard hit.")]
		[SerializeField]
		private float forceNormalizationOverride;

		[Token(Token = "0x170001B3")]
		public float ForceNormalizationOverride
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0x816274", Offset = "0x816274", VA = "0x816274")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x81627C", Offset = "0x81627C", VA = "0x81627C")]
		public HitNormalizationOverride()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public enum HitStrength
	{
		[Token(Token = "0x40011D2")]
		None,
		[Token(Token = "0x40011D3")]
		Soft,
		[Token(Token = "0x40011D4")]
		Medium,
		[Token(Token = "0x40011D5")]
		Hard
	}
	[Token(Token = "0x2000214")]
	public enum LimbType
	{
		[Token(Token = "0x40011D7")]
		None,
		[Token(Token = "0x40011D8")]
		Head,
		[Token(Token = "0x40011D9")]
		Chest,
		[Token(Token = "0x40011DA")]
		Stomach,
		[Token(Token = "0x40011DB")]
		Pelvis,
		[Token(Token = "0x40011DC")]
		LeftArm,
		[Token(Token = "0x40011DD")]
		LeftHand,
		[Token(Token = "0x40011DE")]
		RightArm,
		[Token(Token = "0x40011DF")]
		RightHand,
		[Token(Token = "0x40011E0")]
		LeftLeg,
		[Token(Token = "0x40011E1")]
		LeftFoot,
		[Token(Token = "0x40011E2")]
		RightLeg,
		[Token(Token = "0x40011E3")]
		RightFoot
	}
	[Token(Token = "0x2000215")]
	public class ScoreController : MonoBehaviour
	{
		[Token(Token = "0x2000216")]
		public delegate void TargetChanged(EnemyHitScoreData hitScoreData);

		[Token(Token = "0x2000217")]
		public delegate void EnemyKillScored(int score);

		[Token(Token = "0x2000218")]
		public delegate void EnemyHit(Vector3 position, string text, int damage, float force, HitStrength strength, bool shouldOffsetY);

		[Token(Token = "0x40011E4")]
		private const int HitInfoPoolStartingSize = 20;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("A scriptable object containing a list of known special hits.")]
		private SpecialHitDatabase specialHitDatabase;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("A scriptable object containing a list of weapons to have their hit normalization calculations overriden by a given value.")]
		private HitNormalizationDatabase hitNormalizationDatabase;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("Applies a multiplier to a hit adjusting how much excitement is added.")]
		private int excitementFromHitModifier;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The duration used by the bunching timer. If similar attacks occur within the bunch duration, then we bundle them into a single hit. This is to avoid physics artifacts messing up the player's variety score. 0 = Disabled")]
		[SerializeField]
		[Range(0f, 0.5f)]
		private float bunchDuration;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int lastSavedScore;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly HitInfoPool hitInfoPool;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Dictionary<Enemy, List<HitInfo>> unresolvedHits;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly List<HitInfo> bunchedHitQueue;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HitInfo currentBunchPoolType;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float remainingBunchTime;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool isBunchTimerRunning;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ExcitementController excitementController;

		[Token(Token = "0x170001B4")]
		public int TotalScore
		{
			[Token(Token = "0x6000D03")]
			[Address(RVA = "0x816284", Offset = "0x816284", VA = "0x816284")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0x81628C", Offset = "0x81628C", VA = "0x81628C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000002")]
		public event TargetChanged OnTargetChanged
		{
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0x814AF4", Offset = "0x814AF4", VA = "0x814AF4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x814C5C", Offset = "0x814C5C", VA = "0x814C5C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event EnemyKillScored OnEnemyKillScored
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0x816294", Offset = "0x816294", VA = "0x816294")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0x816330", Offset = "0x816330", VA = "0x816330")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event EnemyHit OnEnemyHit
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0x813E14", Offset = "0x813E14", VA = "0x813E14")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0x813F7C", Offset = "0x813F7C", VA = "0x813F7C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x8163CC", Offset = "0x8163CC", VA = "0x8163CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x81658C", Offset = "0x81658C", VA = "0x81658C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x816790", Offset = "0x816790", VA = "0x816790")]
		public void ResetScore()
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x816568", Offset = "0x816568", VA = "0x816568")]
		public void SetScore(int newScore)
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x816844", Offset = "0x816844", VA = "0x816844")]
		public static void UpdateLastSavedScore(int newScore)
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x816890", Offset = "0x816890", VA = "0x816890")]
		public void RegisterHit(WeaponType weaponType, DamageType damageType, float damageAmount, DamageRelay damageReceiver, DamagerRigidbody damageSender, float hitForce, bool overrideBunchPoolTimer = false)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x816B34", Offset = "0x816B34", VA = "0x816B34")]
		private bool IsInvalidHit(DamagerRigidbody damageSender)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x816F20", Offset = "0x816F20", VA = "0x816F20")]
		private static bool IsDamageSenderBodyPart(DamagerRigidbody damageSender)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x816FD0", Offset = "0x816FD0", VA = "0x816FD0")]
		private static bool IsDamageSenderAllowedToBeUsedAsAWeapon(DamagerRigidbody damageSender)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x816B68", Offset = "0x816B68", VA = "0x816B68")]
		private HitInfo InitializeHitInfo(WeaponType weaponType, DamageType damageType, float damageAmount, DamageRelay damageReceiver, DamagerRigidbody damageSender, float hitForce)
		{
			return null;
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x817034", Offset = "0x817034", VA = "0x817034")]
		public void RegisterDeath(Enemy enemy)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x817624", Offset = "0x817624", VA = "0x817624")]
		private int CountSimilarHits(IList<HitInfo> hits)
		{
			return default(int);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x817358", Offset = "0x817358", VA = "0x817358")]
		private int ResolveVarietyScore(Enemy enemy)
		{
			return default(int);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x8165DC", Offset = "0x8165DC", VA = "0x8165DC")]
		private void MergeHitsAndRegister()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x816DA8", Offset = "0x816DA8", VA = "0x816DA8")]
		private void RegisterHitWithScoreController(HitInfo hitInfo)
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x817860", Offset = "0x817860", VA = "0x817860")]
		private void AddScore(HitInfo hitInfo)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x817AC8", Offset = "0x817AC8", VA = "0x817AC8")]
		private void InvokeTargetChangedEventForHit(HitInfo hitInfo)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x817538", Offset = "0x817538", VA = "0x817538")]
		private void InvokeTargetChangedEventForKill(Enemy enemy, int totalScore, int killScore)
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x8173D0", Offset = "0x8173D0", VA = "0x8173D0")]
		private int GetTotalDamageForHits(List<HitInfo> hits)
		{
			return default(int);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x817BD4", Offset = "0x817BD4", VA = "0x817BD4")]
		public ScoreController()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class ScornSetup : MonoBehaviour
	{
		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The scorn prefab to construct, this prefab should contain a score controller, DamageUiManager, and an excitement controller.")]
		private ScoreController scornPrefab;

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x81802C", Offset = "0x81802C", VA = "0x81802C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x818254", Offset = "0x818254", VA = "0x818254")]
		public ScornSetup()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021A")]
	public class SpecialHit
	{
		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Tooltip("The name of the move, and what text appears on the hit popup.")]
		private string name;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How much additional score gets added for performing this move.")]
		[SerializeField]
		private float scoreValue;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Tooltip("How much additional excitement value gets added for performing this move.")]
		private float excitementValue;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("What type of limb should be hit to perform this move?")]
		private LimbType[] limbTypes;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("What weapon should be used to perform this move?")]
		[SerializeField]
		private WeaponType weaponType;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Tooltip("What damage type should be used to perform this move?")]
		private DamageType damageType;

		[Token(Token = "0x170001B5")]
		public string Name
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0x81825C", Offset = "0x81825C", VA = "0x81825C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B6")]
		public float ScoreValue
		{
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0x818264", Offset = "0x818264", VA = "0x818264")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B7")]
		public float ExcitementValue
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0x81826C", Offset = "0x81826C", VA = "0x81826C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B8")]
		public LimbType[] LimbTypes
		{
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0x818274", Offset = "0x818274", VA = "0x818274")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B9")]
		public WeaponType WeaponType
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0x81827C", Offset = "0x81827C", VA = "0x81827C")]
			get
			{
				return default(WeaponType);
			}
		}

		[Token(Token = "0x170001BA")]
		public DamageType DamageType
		{
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0x818284", Offset = "0x818284", VA = "0x818284")]
			get
			{
				return default(DamageType);
			}
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x81828C", Offset = "0x81828C", VA = "0x81828C")]
		public SpecialHit()
		{
		}
	}
	[Token(Token = "0x200021B")]
	[CreateAssetMenu(fileName = "Special Hit Database", menuName = "24Bit/Scoring/Create New Special Hit Database", order = 1)]
	public class SpecialHitDatabase : ScriptableObject
	{
		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SpecialHit[] knownSpecialHits;

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x816CB8", Offset = "0x816CB8", VA = "0x816CB8")]
		public SpecialHit GetMatchingSpecialHit(HitInfo hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x818294", Offset = "0x818294", VA = "0x818294")]
		private bool MoveContainsLimbType(SpecialHit specialHit, LimbType limbType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x8182F4", Offset = "0x8182F4", VA = "0x8182F4")]
		public SpecialHitDatabase()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class WristExcitementFill : MonoBehaviour
	{
		[Token(Token = "0x40011FD")]
		private const string MaterialPropertyFill = "_Cutoff";

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material fillBar;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ExcitementController excitementController;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Cutoff;

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x8182FC", Offset = "0x8182FC", VA = "0x8182FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x8183EC", Offset = "0x8183EC", VA = "0x8183EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x818484", Offset = "0x818484", VA = "0x818484")]
		public WristExcitementFill()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class WristExcitementSliderUi : MonoBehaviour
	{
		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The slider to fill, show and hide based on excitement levels.")]
		private Slider slider;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ExcitementController excitementController;

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x8184F4", Offset = "0x8184F4", VA = "0x8184F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x8185E4", Offset = "0x8185E4", VA = "0x8185E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x81862C", Offset = "0x81862C", VA = "0x81862C")]
		private void SetNormalizedExcitementValue(float value)
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x818650", Offset = "0x818650", VA = "0x818650")]
		private void SetSliderVisibilityBasedOnSliderValue()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x818724", Offset = "0x818724", VA = "0x818724")]
		public WristExcitementSliderUi()
		{
		}
	}
}
namespace Util
{
	[Token(Token = "0x200021E")]
	public class AchievementManager
	{
		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Trophy[] tier1;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Trophy[] tier2;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Trophy[] tier3;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<Trophy[], Trophy> tierLookup;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IAchievements platform;

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x81872C", Offset = "0x81872C", VA = "0x81872C")]
		public AchievementManager(IAchievements achievements)
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x81885C", Offset = "0x81885C", VA = "0x81885C")]
		public void UnlockCompleted(string campaign)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x818AC0", Offset = "0x818AC0", VA = "0x818AC0")]
		public void TryUnlockMastered(string campaign)
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x818908", Offset = "0x818908", VA = "0x818908")]
		private void AwardAchievement(Trophy trophy)
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x818A34", Offset = "0x818A34", VA = "0x818A34")]
		private void TryUnlockMastered(Trophy trophy)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x818C80", Offset = "0x818C80", VA = "0x818C80")]
		private bool CheckBonusAchieved(Trophy[] tier)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x818B60", Offset = "0x818B60", VA = "0x818B60")]
		private Trophy[] GetTier(Trophy trophy)
		{
			return null;
		}
	}
	[Token(Token = "0x200021F")]
	public enum Trophy
	{
		[Token(Token = "0x4001209")]
		Berserker,
		[Token(Token = "0x400120A")]
		Achilles,
		[Token(Token = "0x400120B")]
		General,
		[Token(Token = "0x400120C")]
		Fencer,
		[Token(Token = "0x400120D")]
		Goliath,
		[Token(Token = "0x400120E")]
		Badgermancer,
		[Token(Token = "0x400120F")]
		Crab,
		[Token(Token = "0x4001210")]
		Giant,
		[Token(Token = "0x4001211")]
		Tier1Bonus,
		[Token(Token = "0x4001212")]
		Tier2Bonus,
		[Token(Token = "0x4001213")]
		Tier3Bonus,
		[Token(Token = "0x4001214")]
		Alimta
	}
}
namespace TFBGames
{
	[Token(Token = "0x2000220")]
	public class ArmorLodGroup : MonoBehaviour
	{
		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform armorLodsParent;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected GameObject lodGroupGameObject;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LODGroup lodGroup;

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x818F98", Offset = "0x818F98", VA = "0x818F98")]
		public void Setup()
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x8193D8", Offset = "0x8193D8", VA = "0x8193D8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x819474", Offset = "0x819474", VA = "0x819474")]
		private void OnSeveredLimb()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x8194FC", Offset = "0x8194FC", VA = "0x8194FC")]
		public ArmorLodGroup()
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class ArmorLods : MonoBehaviour
	{
		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Renderer> lods;

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x819504", Offset = "0x819504", VA = "0x819504")]
		public ArmorLods()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000222")]
	public struct AudioData
	{
		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string clipName;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AudioClip clip;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] dbValues;
	}
	[Token(Token = "0x2000223")]
	public static class AudioDataHelper
	{
		[Token(Token = "0x400121C")]
		private const int samplesToGroup = 735;

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float[] data;

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x81958C", Offset = "0x81958C", VA = "0x81958C")]
		public static AudioData CacheAudioData(AudioClip clip)
		{
			return default(AudioData);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x819704", Offset = "0x819704", VA = "0x819704")]
		private static float GetDbValue(AudioClip clip, int index)
		{
			return default(float);
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x819894", Offset = "0x819894", VA = "0x819894")]
		public static float GetDbValue(AudioData audioData, int timeSample)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000224")]
	public class AudioPersist : MonoBehaviour
	{
		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioSource[] childSources;

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x819A00", Offset = "0x819A00", VA = "0x819A00", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x819AA4", Offset = "0x819AA4", VA = "0x819AA4", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x819CA0", Offset = "0x819CA0", VA = "0x819CA0")]
		public AudioPersist()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class DebugBall : MonoBehaviour
	{
		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private DamageType damageType;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float forceMultiplier;

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x819CA8", Offset = "0x819CA8", VA = "0x819CA8", Slot = "4")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x819E90", Offset = "0x819E90", VA = "0x819E90")]
		public DebugBall()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class DevicePresence
	{
		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x819EA0", Offset = "0x819EA0", VA = "0x819EA0")]
		public static bool XRDeviceIsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x81A09C", Offset = "0x81A09C", VA = "0x81A09C")]
		public DevicePresence()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class DisableDespawnTracker : DespawnTracker
	{
		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x81A0A4", Offset = "0x81A0A4", VA = "0x81A0A4", Slot = "12")]
		public override void DespawnNow()
		{
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x81A134", Offset = "0x81A134", VA = "0x81A134")]
		public DisableDespawnTracker()
		{
		}
	}
	[Token(Token = "0x2000228")]
	[RequireComponent(typeof(Enemy))]
	public class EnemyDespawnTracker : DespawnTracker
	{
		[Token(Token = "0x4001221")]
		private const int MaxTotalEnemies = 5;

		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int NumEnemies;

		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Enemy enemy;

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x81A13C", Offset = "0x81A13C", VA = "0x81A13C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x81A1A0", Offset = "0x81A1A0", VA = "0x81A1A0", Slot = "12")]
		public override void DespawnNow()
		{
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x81A2D0", Offset = "0x81A2D0", VA = "0x81A2D0", Slot = "6")]
		protected override void TrackElement()
		{
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x81A320", Offset = "0x81A320", VA = "0x81A320", Slot = "7")]
		protected override void UntrackElement()
		{
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x81A370", Offset = "0x81A370", VA = "0x81A370", Slot = "8")]
		protected override bool ExceedsMaximum()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x81A3C0", Offset = "0x81A3C0", VA = "0x81A3C0")]
		public EnemyDespawnTracker()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public static class ConfigurableJointHelper
	{
		[Token(Token = "0x6000D60")]
		[Address(RVA = "0x81A3C8", Offset = "0x81A3C8", VA = "0x81A3C8")]
		public static void UpdateJoint(this ConfigurableJoint joint, JointInfo info)
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x81A79C", Offset = "0x81A79C", VA = "0x81A79C")]
		public static void UpdateJoint(this ConfigurableJoint joint, JointInfo info, Rigidbody connectedBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022A")]
	public struct JointInfo
	{
		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 baseLocalPosition;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion baseLocalRotation;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 connectedAnchor;

		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 anchor;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 axis;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 secondaryAxis;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ConfigurableJointMotion xMotion;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ConfigurableJointMotion zMotion;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ConfigurableJointMotion yMotion;

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ConfigurableJointMotion angularXMotion;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public ConfigurableJointMotion angularYMotion;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ConfigurableJointMotion angularZMotion;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float linearLimitSpring;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float linearLimit;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float angularXLimitSpring;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lowAngularXLimit;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float highAngularXLimit;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SoftJointLimitSpringWrapper angularYZLimitSpring;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float angularYLimit;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float angularZLimit;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public JointDriveWrapper xDrive;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public JointDriveWrapper yDrive;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public JointDriveWrapper zDrive;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public RotationDriveMode rotationDriveMode;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public JointDriveWrapper slerpDrive;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public JointProjectionMode projectionMode;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float projectionDistance;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float projectionAngle;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float massScale;

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x81A7F0", Offset = "0x81A7F0", VA = "0x81A7F0")]
		public JointInfo(Transform transform)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x81A8F8", Offset = "0x81A8F8", VA = "0x81A8F8")]
		public JointInfo(ConfigurableJoint joint)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022B")]
	public struct SoftJointLimitSpringWrapper
	{
		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float spring;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float damper;

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x81AC64", Offset = "0x81AC64", VA = "0x81AC64")]
		public SoftJointLimitSpringWrapper(SoftJointLimitSpring softJointLimitSpring)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x81A704", Offset = "0x81A704", VA = "0x81A704")]
		public SoftJointLimitSpring ToSoftJointLimitSpring()
		{
			return default(SoftJointLimitSpring);
		}
	}
	[Serializable]
	[Token(Token = "0x200022C")]
	public struct JointDriveWrapper
	{
		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float positionSpring;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float positionDamper;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float maximumForce;

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x81ACA0", Offset = "0x81ACA0", VA = "0x81ACA0")]
		public JointDriveWrapper(JointDrive jointDrive)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x81A744", Offset = "0x81A744", VA = "0x81A744")]
		public JointDrive ToJointDrive()
		{
			return default(JointDrive);
		}
	}
	[Token(Token = "0x200022D")]
	public class OculusComponentAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer chaperoneMeshRenderer;

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x81ACF0", Offset = "0x81ACF0", VA = "0x81ACF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x81ADF4", Offset = "0x81ADF4", VA = "0x81ADF4")]
		public OculusComponentAdjuster()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class RenderTextureCameraInit : MonoBehaviour
	{
		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RTCameraController cameraDirtyController;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera renderTargetCamera;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer renderTextureRenderer;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int materialIndex;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int renderTextureSize;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTexture renderTexture;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int UiTexture;

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x81ADFC", Offset = "0x81ADFC", VA = "0x81ADFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x81AFDC", Offset = "0x81AFDC", VA = "0x81AFDC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x81B06C", Offset = "0x81B06C", VA = "0x81B06C")]
		public RenderTextureCameraInit()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class RTCameraController : MonoBehaviour
	{
		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Camera camera;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool dirty;

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x81B0E4", Offset = "0x81B0E4", VA = "0x81B0E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x81AFB0", Offset = "0x81AFB0", VA = "0x81AFB0")]
		public void MarkDirty()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x81B110", Offset = "0x81B110", VA = "0x81B110")]
		public void OnPostRender()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x81B148", Offset = "0x81B148", VA = "0x81B148")]
		public RTCameraController()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class SeveredLimbDespawnTracker : DisableDespawnTracker
	{
		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Mesh severedMesh;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject choppableGOB;

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x81B150", Offset = "0x81B150", VA = "0x81B150", Slot = "12")]
		public override void DespawnNow()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x81B24C", Offset = "0x81B24C", VA = "0x81B24C")]
		public new void OnDestroy()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x81B2EC", Offset = "0x81B2EC", VA = "0x81B2EC")]
		public SeveredLimbDespawnTracker()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class VisibleEventRelay : MonoBehaviour
	{
		[Token(Token = "0x14000005")]
		public event Action<bool> OnVisibilityChanged
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x81B2F4", Offset = "0x81B2F4", VA = "0x81B2F4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x81B3A4", Offset = "0x81B3A4", VA = "0x81B3A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x81B454", Offset = "0x81B454", VA = "0x81B454")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x81B474", Offset = "0x81B474", VA = "0x81B474")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x81B494", Offset = "0x81B494", VA = "0x81B494")]
		public VisibleEventRelay()
		{
		}
	}
	[Token(Token = "0x2000232")]
	[CreateAssetMenu(fileName = "Assets/TFBG/VRPlatformSettings/VRPlatform", menuName = "24Bit/VRPlatformSettings")]
	public class VRPlatformSettings : ScriptableObject
	{
		[Token(Token = "0x4001253")]
		private const string GraphicsSettingsAssetPath = "ProjectSettings/GraphicsSettings.asset";

		[Token(Token = "0x4001254")]
		private const string PlayerSpawnerAssetPath = "Assets/Prefabs/TFBGames/VR/PlayerSpawner.prefab";

		[Token(Token = "0x4001255")]
		private const string CombatPlayerSpawnerAssetPath = "Assets/Prefabs/TFBGames/VR/CombatPlayerSpawner.prefab";

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Time")]
		private float fixedTimestep;

		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float maxAllowedTimestep;

		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float maxParticleTimeStep;

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Header("Physics")]
		private float bounceThreshold;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float sleepThreshold;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float defaultContactOffset;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int defaultSolverIterations;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private int defaultSolverVelocityIterations;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("ShaderStripping")]
		private bool customShaderStripping;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Header("Custom Shader Stripping must be enabled for these to take effect.")]
		[SerializeField]
		private bool keepBakedNonDirectional;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		[SerializeField]
		private bool keepBakedDirectional;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		[SerializeField]
		private bool keepRealtimeNonDirectional;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool keepRealtimeDirectional;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool keepBakedShadowmask;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[SerializeField]
		private bool keepBakedSubtractive;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("Player")]
		private Player playerPrefab;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Player combatPlayerPrefab;

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x81B49C", Offset = "0x81B49C", VA = "0x81B49C")]
		public VRPlatformSettings()
		{
		}
	}
}
namespace TFBGames.Validation
{
	[Token(Token = "0x2000233")]
	public enum InvalidAction
	{
		[Token(Token = "0x4001268")]
		None,
		[Token(Token = "0x4001269")]
		Disable,
		[Token(Token = "0x400126A")]
		Destroy
	}
	[Token(Token = "0x2000234")]
	public static class Validation
	{
		[Token(Token = "0x6000D7B")]
		public static bool ValidateListEntries<T>(this Behaviour behaviour, InvalidAction invalidAction, IReadOnlyList<T> list, string listName) where T : UnityEngine.Object
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7C")]
		public static bool ValidateListEntries<T1, T2>(this Behaviour behaviour, InvalidAction invalidAction, IReadOnlyList<T1> list, string listName, IReadOnlyList<T2> list2, string listName2) where T1 : UnityEngine.Object where T2 : UnityEngine.Object
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x81B4D0", Offset = "0x81B4D0", VA = "0x81B4D0")]
		private static bool IsListElementNotNull(UnityEngine.Object listElement, string listName, Behaviour objectReference)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x81B538", Offset = "0x81B538", VA = "0x81B538")]
		public static bool ValidateComponents(this Behaviour behaviour, InvalidAction invalidAction, UnityEngine.Object field, string fieldName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x81B698", Offset = "0x81B698", VA = "0x81B698")]
		public static bool ValidateComponents(this Behaviour behaviour, InvalidAction invalidAction, UnityEngine.Object field, string fieldName, UnityEngine.Object field2, string fieldName2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x81B6FC", Offset = "0x81B6FC", VA = "0x81B6FC")]
		public static bool ValidateComponents(this Behaviour behaviour, InvalidAction invalidAction, UnityEngine.Object field, string fieldName, UnityEngine.Object field2, string fieldName2, UnityEngine.Object field3, string fieldName3)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0x81B770", Offset = "0x81B770", VA = "0x81B770")]
		public static bool ValidateComponents(this Behaviour behaviour, InvalidAction invalidAction, UnityEngine.Object field, string fieldName, UnityEngine.Object field2, string fieldName2, UnityEngine.Object field3, string fieldName3, UnityEngine.Object field4, string fieldName4)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x81B7FC", Offset = "0x81B7FC", VA = "0x81B7FC")]
		public static bool ValidateComponents(this Behaviour behaviour, InvalidAction invalidAction, UnityEngine.Object field, string fieldName, UnityEngine.Object field2, string fieldName2, UnityEngine.Object field3, string fieldName3, UnityEngine.Object field4, string fieldName4, UnityEngine.Object field5, string fieldName5)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x81B898", Offset = "0x81B898", VA = "0x81B898")]
		public static bool ValidateComponents(this Behaviour behaviour, InvalidAction invalidAction, UnityEngine.Object field, string fieldName, UnityEngine.Object field2, string fieldName2, UnityEngine.Object field3, string fieldName3, UnityEngine.Object field4, string fieldName4, UnityEngine.Object field5, string fieldName5, UnityEngine.Object field6, string fieldName6)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x81B94C", Offset = "0x81B94C", VA = "0x81B94C")]
		public static bool ValidateComponents(this Behaviour behaviour, InvalidAction invalidAction, UnityEngine.Object field, string fieldName, UnityEngine.Object field2, string fieldName2, UnityEngine.Object field3, string fieldName3, UnityEngine.Object field4, string fieldName4, UnityEngine.Object field5, string fieldName5, UnityEngine.Object field6, string fieldName6, UnityEngine.Object field7, string fieldName7)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x81B58C", Offset = "0x81B58C", VA = "0x81B58C")]
		private static void IsBehaviourFieldNotNull(Behaviour behaviour, UnityEngine.Object field, string fieldName, ref bool result)
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x81B600", Offset = "0x81B600", VA = "0x81B600")]
		private static void ApplyInvalidAction(Behaviour behaviour, InvalidAction failResponse)
		{
		}
	}
}
namespace TFBGames.Common
{
	[Token(Token = "0x2000235")]
	public class PicoBoundsCheck : IBoundsCheck
	{
		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool hasBounds;

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x81BA10", Offset = "0x81BA10", VA = "0x81BA10", Slot = "4")]
		public bool HasBounds()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x81BA44", Offset = "0x81BA44", VA = "0x81BA44", Slot = "5")]
		public bool IsWithinChaperoneBounds()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x81BA60", Offset = "0x81BA60", VA = "0x81BA60")]
		public PicoBoundsCheck()
		{
		}
	}
}
namespace TFBGames.Systems
{
	[Token(Token = "0x2000236")]
	public sealed class App : PersistentSingleton<App>
	{
		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AssetPath(typeof(GameObject))]
		[SerializeField]
		private string chaperonePrefab;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DebugConsoleUI debugConsoleUI;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private FastChop fastChopPrefab;

		[Token(Token = "0x400126F")]
		private const string LoadingScene = "LoadingScene";

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServiceUpdater serviceUpdater;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SceneTransitionManager transitionManger;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SaveOnTransition saveOnTransition;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PreloadShaderVariants preloadTask;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CreateFastChop fastChopInstantiateLoadTask;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IIOWrapper IoWrapper;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ContentLoadQueueProcessor<ContentLoadOperation> loadQueueProcessor;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float defaultFixedTimeScale;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SceneManifest sceneManifest;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<string, SceneContainer> sceneNameDictionary;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<string, SceneContainer> sceneIdDictionary;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string lastScene;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string currentScene;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool currentlyPaused;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private ShaderVariantCollection shaderVariantsToPreload;

		[Token(Token = "0x170001BB")]
		public bool IsUsingOvr
		{
			[Token(Token = "0x6000D8A")]
			[Address(RVA = "0x81ADE0", Offset = "0x81ADE0", VA = "0x81ADE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BC")]
		public bool IsUsingPsvr
		{
			[Token(Token = "0x6000D8B")]
			[Address(RVA = "0x81BA68", Offset = "0x81BA68", VA = "0x81BA68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BD")]
		public bool IsUsingSteamVr
		{
			[Token(Token = "0x6000D8C")]
			[Address(RVA = "0x81BA78", Offset = "0x81BA78", VA = "0x81BA78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BE")]
		public string CurrentScene
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0x81BA88", Offset = "0x81BA88", VA = "0x81BA88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BF")]
		public float DefaultFixedTimeScale
		{
			[Token(Token = "0x6000D8E")]
			[Address(RVA = "0x81BA90", Offset = "0x81BA90", VA = "0x81BA90")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C0")]
		public bool Initialized
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x81BA98", Offset = "0x81BA98", VA = "0x81BA98")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x81BAA0", Offset = "0x81BAA0", VA = "0x81BAA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C1")]
		public bool IsUsingOculusHmd
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x81BAAC", Offset = "0x81BAAC", VA = "0x81BAAC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x81BAB4", Offset = "0x81BAB4", VA = "0x81BAB4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C2")]
		public IBoundsCheck BoundsCheck
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x81BAC0", Offset = "0x81BAC0", VA = "0x81BAC0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0x81BAC8", Offset = "0x81BAC8", VA = "0x81BAC8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C3")]
		public VRPlatform CurrentVRPlatform
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x81BAD0", Offset = "0x81BAD0", VA = "0x81BAD0")]
			[CompilerGenerated]
			get
			{
				return default(VRPlatform);
			}
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x81BAD8", Offset = "0x81BAD8", VA = "0x81BAD8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C4")]
		public IDeviceTracker DeviceTracker
		{
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0x81BAE0", Offset = "0x81BAE0", VA = "0x81BAE0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x81BAE8", Offset = "0x81BAE8", VA = "0x81BAE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C5")]
		public IInputReader InputReader
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x81BAF0", Offset = "0x81BAF0", VA = "0x81BAF0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x81BAF8", Offset = "0x81BAF8", VA = "0x81BAF8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C6")]
		public ISaveDataManager SaveDataManager
		{
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x81BB00", Offset = "0x81BB00", VA = "0x81BB00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x81BB08", Offset = "0x81BB08", VA = "0x81BB08")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C7")]
		public IPlatform Platform
		{
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x81BB10", Offset = "0x81BB10", VA = "0x81BB10")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x81BB18", Offset = "0x81BB18", VA = "0x81BB18")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public PauseManager PauseManager
		{
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x81BB20", Offset = "0x81BB20", VA = "0x81BB20")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x81BB28", Offset = "0x81BB28", VA = "0x81BB28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public IChaperone Chaperone
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x81BB30", Offset = "0x81BB30", VA = "0x81BB30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x81BB38", Offset = "0x81BB38", VA = "0x81BB38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public PsvrData PsvrData
		{
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0x81BB40", Offset = "0x81BB40", VA = "0x81BB40")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA4")]
			[Address(RVA = "0x81BB48", Offset = "0x81BB48", VA = "0x81BB48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CB")]
		public AchievementManager AchievementManager
		{
			[Token(Token = "0x6000DA5")]
			[Address(RVA = "0x81BB50", Offset = "0x81BB50", VA = "0x81BB50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x81BB58", Offset = "0x81BB58", VA = "0x81BB58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public FadeSceneTransition SceneTransition
		{
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x81BB60", Offset = "0x81BB60", VA = "0x81BB60")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x81BB68", Offset = "0x81BB68", VA = "0x81BB68")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public IResourceLoader ResourceLoader
		{
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x81BB78", Offset = "0x81BB78", VA = "0x81BB78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x81BB80", Offset = "0x81BB80", VA = "0x81BB80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public ResourceManager ResourceManager
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x81BB90", Offset = "0x81BB90", VA = "0x81BB90")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0x81BB98", Offset = "0x81BB98", VA = "0x81BB98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public AudioMixerContainer AudioMixerContainer
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0x81BBA8", Offset = "0x81BBA8", VA = "0x81BBA8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0x81BBB0", Offset = "0x81BBB0", VA = "0x81BBB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public int WeaponBloodSplatters
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0x81BBC0", Offset = "0x81BBC0", VA = "0x81BBC0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x81BBC8", Offset = "0x81BBC8", VA = "0x81BBC8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public ILocalAccountManager<ILocalAccount> AccountManager
		{
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x81BBD0", Offset = "0x81BBD0", VA = "0x81BBD0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0x81BBD8", Offset = "0x81BBD8", VA = "0x81BBD8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x81BBE8", Offset = "0x81BBE8", VA = "0x81BBE8", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x81C7E0", Offset = "0x81C7E0", VA = "0x81C7E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x81C940", Offset = "0x81C940", VA = "0x81C940", Slot = "5")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x81CC34", Offset = "0x81CC34", VA = "0x81CC34")]
		public static string GetCurrentSceneId()
		{
			return null;
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x81CD44", Offset = "0x81CD44", VA = "0x81CD44")]
		public static string GetSceneName(string sceneId)
		{
			return null;
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x81CDF4", Offset = "0x81CDF4", VA = "0x81CDF4")]
		public static bool IsMenuScene()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x81CF0C", Offset = "0x81CF0C", VA = "0x81CF0C")]
		public static bool IsLoadingScene()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x81D024", Offset = "0x81D024", VA = "0x81D024")]
		public static bool IsSceneOfType(SceneType sceneType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x81D140", Offset = "0x81D140", VA = "0x81D140")]
		public void LoadSceneWithTransition(string sceneName, bool useLoadingScene = true)
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x81C50C", Offset = "0x81C50C", VA = "0x81C50C")]
		private void InitializePlatform()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x81C5FC", Offset = "0x81C5FC", VA = "0x81C5FC")]
		private void AddAchievements()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x81C5F8", Offset = "0x81C5F8", VA = "0x81C5F8")]
		private void AddAccountAndSaveManager()
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x81C58C", Offset = "0x81C58C", VA = "0x81C58C")]
		private void AddDeviceTrackerAndChaperone()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x81C70C", Offset = "0x81C70C", VA = "0x81C70C")]
		private void AddDebugConsole()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x81C590", Offset = "0x81C590", VA = "0x81C590")]
		private void AddInputReader()
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x81C138", Offset = "0x81C138", VA = "0x81C138")]
		private void CheckPlatforms()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x81C710", Offset = "0x81C710", VA = "0x81C710")]
		private void SetPerformanceValues()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x81C718", Offset = "0x81C718", VA = "0x81C718")]
		private void SetBoundsCheck()
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x81D290", Offset = "0x81D290", VA = "0x81D290")]
		private void OnFocusChanged(bool focus)
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x81D4C0", Offset = "0x81D4C0", VA = "0x81D4C0")]
		[Conditional("UNITY_EDITOR")]
		private void CleanGameObjectName()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x81D380", Offset = "0x81D380", VA = "0x81D380")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x81D424", Offset = "0x81D424", VA = "0x81D424")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x81D898", Offset = "0x81D898", VA = "0x81D898")]
		public App()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public class AudioMixerContainer
	{
		[Token(Token = "0x4001291")]
		private const float VolumeAdjustment = 0f;

		[Token(Token = "0x170001D2")]
		public AudioMixer AudioMixer
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0x81D900", Offset = "0x81D900", VA = "0x81D900")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x81D908", Offset = "0x81D908", VA = "0x81D908")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public AudioMixerGroup AudioGroup
		{
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0x81D910", Offset = "0x81D910", VA = "0x81D910")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x81D918", Offset = "0x81D918", VA = "0x81D918")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x81C844", Offset = "0x81C844", VA = "0x81C844")]
		public AudioMixerContainer()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class EnemySpawnZone : MonoBehaviour
	{
		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0x81D920", Offset = "0x81D920", VA = "0x81D920")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x81DA4C", Offset = "0x81DA4C", VA = "0x81DA4C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x81DB78", Offset = "0x81DB78", VA = "0x81DB78")]
		public EnemySpawnZone()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class FadeSceneTransition : ISceneTransition
	{
		[Token(Token = "0x170001D4")]
		public bool IsTransitionInProgress
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0x81DCE0", Offset = "0x81DCE0", VA = "0x81DCE0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0x81DCE8", Offset = "0x81DCE8", VA = "0x81DCE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event Action<Action> FadeOutEvent
		{
			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0x81DB80", Offset = "0x81DB80", VA = "0x81DB80")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0x81DC30", Offset = "0x81DC30", VA = "0x81DC30")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x81DCF4", Offset = "0x81DCF4", VA = "0x81DCF4", Slot = "4")]
		public void StartTransition(Action sceneSwitch, bool willEnterLoadingScene)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x81DD38", Offset = "0x81DD38", VA = "0x81DD38", Slot = "5")]
		public void EnteredLoadingScene(Action queueSceneLoad)
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x81DD68", Offset = "0x81DD68", VA = "0x81DD68", Slot = "6")]
		public void EnteredFinalScene(Action transitionComplete)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x81C4F4", Offset = "0x81C4F4", VA = "0x81C4F4")]
		public FadeSceneTransition()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class PauseManager
	{
		[Token(Token = "0x4001298")]
		private const string DefaultPauseMessage = "PAUSED";

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly List<object> callers;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Dictionary<object, string> callerMessages;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float cachedTimeScale;

		[Token(Token = "0x14000007")]
		public event Action<string> GamePaused
		{
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0x81DD8C", Offset = "0x81DD8C", VA = "0x81DD8C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x81DE3C", Offset = "0x81DE3C", VA = "0x81DE3C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event Action GameUnpaused
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x81DEEC", Offset = "0x81DEEC", VA = "0x81DEEC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x81DF88", Offset = "0x81DF88", VA = "0x81DF88")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x81C41C", Offset = "0x81C41C", VA = "0x81C41C")]
		public PauseManager()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x819BB0", Offset = "0x819BB0", VA = "0x819BB0")]
		public bool IsPaused(out string pauseString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x81D544", Offset = "0x81D544", VA = "0x81D544")]
		public void Pause([NotNull] object caller, [Optional] string pauseString)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x81D708", Offset = "0x81D708", VA = "0x81D708")]
		public void Unpause([NotNull] object caller)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x81E134", Offset = "0x81E134", VA = "0x81E134")]
		public void ResetCachedTimeScale(float newTimeScale = 1f)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x81E024", Offset = "0x81E024", VA = "0x81E024")]
		private void Pause(string pauseString)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x81E0FC", Offset = "0x81E0FC", VA = "0x81E0FC")]
		private void Unpause()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class PsvrData
	{
		[Token(Token = "0x400129C")]
		public const float StartingHeight = 15f;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool hasFloorOffset;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool hasMaxHandDistance;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float floorOffset;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float floorOffsetAtInitialSetup;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float hmdHeightAtInitialSetup;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxHandDistanceSqrd;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxHandDistance;

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x81C504", Offset = "0x81C504", VA = "0x81C504")]
		public PsvrData()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class SteamAchievements : IAchievements
	{
		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x81E13C", Offset = "0x81E13C", VA = "0x81E13C", Slot = "4")]
		public void AwardAchievementAsync(Achievement achievement, [Optional] Action<Achievement, bool> callback)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x81D288", Offset = "0x81D288", VA = "0x81D288")]
		public SteamAchievements()
		{
		}
	}
}
namespace TFBGames.SceneManagement
{
	[Token(Token = "0x200023D")]
	public class BakeShadowReceivingContainer : MonoBehaviour
	{
		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x81E158", Offset = "0x81E158", VA = "0x81E158")]
		public BakeShadowReceivingContainer()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class CreateFastChop : ILoadTask
	{
		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FastChop fastChopPrefab;

		[Token(Token = "0x170001D5")]
		public bool IsDone
		{
			[Token(Token = "0x6000DEA")]
			[Address(RVA = "0x81E160", Offset = "0x81E160", VA = "0x81E160", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D6")]
		public float TaskProgress
		{
			[Token(Token = "0x6000DEB")]
			[Address(RVA = "0x81E168", Offset = "0x81E168", VA = "0x81E168", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x81C7B0", Offset = "0x81C7B0", VA = "0x81C7B0")]
		public CreateFastChop(FastChop fastChopPrefab)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x81E170", Offset = "0x81E170", VA = "0x81E170", Slot = "6")]
		public void Start(bool async)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x81E1E0", Offset = "0x81E1E0", VA = "0x81E1E0", Slot = "7")]
		public void Complete()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class PreloadShaderVariants : ILoadTask
	{
		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ShaderVariantCollection shaderVariants;

		[Token(Token = "0x170001D7")]
		public bool IsDone
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0x81E1E4", Offset = "0x81E1E4", VA = "0x81E1E4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001D8")]
		public float TaskProgress
		{
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0x81E200", Offset = "0x81E200", VA = "0x81E200", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x81C780", Offset = "0x81C780", VA = "0x81C780")]
		public PreloadShaderVariants(ShaderVariantCollection shaderVariants)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x81E230", Offset = "0x81E230", VA = "0x81E230", Slot = "6")]
		public void Start(bool async)
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x81E26C", Offset = "0x81E26C", VA = "0x81E26C", Slot = "7")]
		public void Complete()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class SaveOnTransition : ILoadTask
	{
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool isProgressSaveProcessing;

		[Token(Token = "0x170001D9")]
		public float TaskProgress
		{
			[Token(Token = "0x6000DF4")]
			[Address(RVA = "0x81E270", Offset = "0x81E270", VA = "0x81E270", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001DA")]
		public bool IsDone
		{
			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0x81E288", Offset = "0x81E288", VA = "0x81E288", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x81E298", Offset = "0x81E298", VA = "0x81E298", Slot = "6")]
		public void Start(bool async)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x81E34C", Offset = "0x81E34C", VA = "0x81E34C", Slot = "7")]
		public void Complete()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x81E350", Offset = "0x81E350", VA = "0x81E350")]
		private void OnSaveComplete()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x81C4FC", Offset = "0x81C4FC", VA = "0x81C4FC")]
		public SaveOnTransition()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000241")]
	public class SceneContainer
	{
		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string id;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SceneReference scene;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool includedInBuild;

		[Token(Token = "0x40012AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public SceneType type;

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x81E358", Offset = "0x81E358", VA = "0x81E358")]
		public SceneContainer()
		{
		}
	}
	[Token(Token = "0x2000242")]
	[CreateAssetMenu(fileName = "SceneLibrary", menuName = "24Bit/SceneLibrary", order = 1)]
	public class SceneLibrary : ScriptableObject
	{
		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<SceneContainer> sceneContainers;

		[Token(Token = "0x40012AC")]
		public const string TITLE = "Title";

		[Token(Token = "0x40012AD")]
		public const string MENU = "Menu";

		[Token(Token = "0x40012AE")]
		public const string STANDARD_ARENA = "MainArena";

		[Token(Token = "0x40012AF")]
		public const string TUTORIAL = "Tutorial";

		[Token(Token = "0x40012B0")]
		public const string PARTY_MODE_LOBBY = "PartyModeLobby";

		[Token(Token = "0x40012B1")]
		public const string DEATH_PIT = "DeathPit";

		[Token(Token = "0x40012B2")]
		public const string GREAT_ARENA = "GreatArena";

		[Token(Token = "0x40012B3")]
		public const string STANDARD_ARENA_NIGHT = "MainArenaNight";

		[Token(Token = "0x40012B4")]
		public const string CREDITS = "Credits";

		[Token(Token = "0x170001DB")]
		public List<SceneContainer> SceneContainers
		{
			[Token(Token = "0x6000DFB")]
			[Address(RVA = "0x81E368", Offset = "0x81E368", VA = "0x81E368")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x81E370", Offset = "0x81E370", VA = "0x81E370")]
		public SceneLibrary()
		{
		}
	}
	[Token(Token = "0x2000243")]
	[CreateAssetMenu(fileName = "SceneManifest", menuName = "24Bit/SceneManifest", order = 1)]
	public class SceneManifest : ScriptableObject
	{
		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SceneLibrary UnityXRSteam;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SceneLibrary UnityXROculus;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SceneLibrary UnityXRQuest;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private SceneLibrary UnityXRPico;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SceneLibrary UnityXRPicoLV;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SceneLibrary UnityXRPsvr2;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private SceneLibrary SteamVR;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private SceneLibrary PSVR;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private SceneLibrary Quest;

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x81E378", Offset = "0x81E378", VA = "0x81E378")]
		[Pure]
		public SceneLibrary GetLibraryForCurrentPlatform()
		{
			return null;
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x81C2B0", Offset = "0x81C2B0", VA = "0x81C2B0")]
		[Pure]
		public Dictionary<string, SceneContainer> GenerateIdDictionaryForCurrentPlatform()
		{
			return null;
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x81C144", Offset = "0x81C144", VA = "0x81C144")]
		[Pure]
		public Dictionary<string, SceneContainer> GenerateNameDictionaryForCurrentPlatform()
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x81E380", Offset = "0x81E380", VA = "0x81E380")]
		public SceneManifest()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000245")]
	public class SceneReference : ISerializationCallbackReceiver
	{
		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string name;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string guid;

		[Token(Token = "0x170001DC")]
		public string Name
		{
			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x81E438", Offset = "0x81E438", VA = "0x81E438")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DD")]
		public string Guid
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x81E440", Offset = "0x81E440", VA = "0x81E440")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x81E448", Offset = "0x81E448", VA = "0x81E448", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x81E44C", Offset = "0x81E44C", VA = "0x81E44C", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x81E450", Offset = "0x81E450", VA = "0x81E450")]
		public SceneReference()
		{
		}
	}
}
namespace TFBGames.Pooling
{
	[Token(Token = "0x2000246")]
	public class BloodPoolManager : MonoBehaviour
	{
		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CompoundComponentPool<BloodDrop> bloodDropsPool;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CompoundComponentPool<Poolable> candyPool;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AutoComponentPrefabPool<Poolable> gibTrailPool;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AutoComponentPrefabPool<Poolable> gibCandyTrailPool;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AutoComponentPrefabPool<PoolableParticleSystem> starPuffPool;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AutoComponentPrefabPool<PoolableParticleSystem> bluntImpactPool;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AutoComponentPrefabPool<PoolableParticleSystem> bluntImpactNoBloodPool;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AutoComponentPrefabPool<PoolableParticleSystem> sliceImpactPool;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AutoComponentPrefabPool<PoolableParticleSystem> sliceImpactNoBloodPool;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AutoComponentPrefabPool<PoolableParticleSystem> shieldImpactPool;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AutoComponentPrefabPool<PoolableParticleSystem> shieldImpactWeakPool;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AutoComponentPrefabPool<PoolableParticleSystem> dustPuffPool;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AutoComponentPrefabPool<PoolableParticleSystem> weaponDustPuffPool;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AutoComponentPrefabPool<KnockedOutTooth> toothPool;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AutoComponentPrefabPool<PoolableMultiParticleSystem> explosionPool;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AutoComponentPrefabPool<GibHolderPoolable> angryPersonGibPool;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AutoComponentPrefabPool<GibHolderPoolable> angryPersonPinataGibPool;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AutoComponentPrefabPool<PoolableParticleSystem> bloodSpurtPool;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AutoComponentPrefabPool<PoolableParticleSystem> candySpurtPool;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private AutoComponentPrefabPool<PoolableParticleSystem> bloodTrailPool;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly Dictionary<string, AutoComponentPrefabPool<GibHolderPoolable>> rokibeGibHolderPool;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BloodController controller;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly DotNetRandomNumberGenerator numberGenerator;

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x81E458", Offset = "0x81E458", VA = "0x81E458")]
		public KnockedOutTooth GetTooth(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x81E4F8", Offset = "0x81E4F8", VA = "0x81E4F8")]
		public PoolableParticleSystem GetStarPuff(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x81E5A0", Offset = "0x81E5A0", VA = "0x81E5A0")]
		public PoolableParticleSystem GetDustPuff(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x81E5A8", Offset = "0x81E5A8", VA = "0x81E5A8")]
		public PoolableParticleSystem GetWeaponDustPuff(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x81E5B0", Offset = "0x81E5B0", VA = "0x81E5B0")]
		public PoolableParticleSystem GetBluntImpact(Vector3 position, Quaternion rotation, bool blood = true)
		{
			return null;
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x81E5C8", Offset = "0x81E5C8", VA = "0x81E5C8")]
		public PoolableParticleSystem GetSliceImpact(Vector3 position, Quaternion rotation, bool blood = true)
		{
			return null;
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x81E5E0", Offset = "0x81E5E0", VA = "0x81E5E0")]
		public PoolableParticleSystem GetShieldImpact(Vector3 position, Quaternion rotation, bool weak = false)
		{
			return null;
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x81E5F8", Offset = "0x81E5F8", VA = "0x81E5F8")]
		public PoolableParticleSystem GetSpurt()
		{
			return null;
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x81E640", Offset = "0x81E640", VA = "0x81E640")]
		public PoolableParticleSystem GetBloodTrail()
		{
			return null;
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x81E668", Offset = "0x81E668", VA = "0x81E668")]
		public Poolable GetGibTrail()
		{
			return null;
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x81E6B0", Offset = "0x81E6B0", VA = "0x81E6B0")]
		public BloodDrop GetRandomBloodDrop()
		{
			return null;
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x81E704", Offset = "0x81E704", VA = "0x81E704")]
		public Poolable GetRandomCandy(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x81E7AC", Offset = "0x81E7AC", VA = "0x81E7AC")]
		public PoolableMultiParticleSystem GetExplosion(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x81E84C", Offset = "0x81E84C", VA = "0x81E84C")]
		public void ReturnBloodDrop(BloodDrop bloodDrop)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x81E8C4", Offset = "0x81E8C4", VA = "0x81E8C4")]
		public GibHolderPoolable GetAngryCrowdPersonGibHolder(Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x81E988", Offset = "0x81E988", VA = "0x81E988")]
		public GibHolderPoolable GetRokibeGibHolder(string prefabName)
		{
			return null;
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x81E70C", Offset = "0x81E70C", VA = "0x81E70C")]
		private static Poolable GetPoolableAndSetTransform(IPool<Poolable> pool, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x81E500", Offset = "0x81E500", VA = "0x81E500")]
		private static PoolableParticleSystem GetPoolableAndSetTransform(IPool<PoolableParticleSystem> pool, Vector3 position, Quaternion rotation)
		{
			return null;
		}

		[Token(Token = "0x6000E1C")]
		private static T GetPoolableAndSetTransform<T>(IPool<T> pool, Vector3 position, Quaternion rotation) where T : Poolable
		{
			return null;
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x81EA1C", Offset = "0x81EA1C", VA = "0x81EA1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x81F7B8", Offset = "0x81F7B8", VA = "0x81F7B8")]
		private void PlayParticles(PoolableParticleSystem poolable)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x81F7E8", Offset = "0x81F7E8", VA = "0x81F7E8")]
		private void PlayParticles(PoolableMultiParticleSystem poolable)
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x81F88C", Offset = "0x81F88C", VA = "0x81F88C")]
		private void ResetGibHolder(GibHolderPoolable poolable)
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x81FA4C", Offset = "0x81FA4C", VA = "0x81FA4C")]
		private void InitBlood(BloodDrop drop)
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x81FA64", Offset = "0x81FA64", VA = "0x81FA64")]
		public BloodPoolManager()
		{
		}
	}
	[Token(Token = "0x2000247")]
	[RequireComponent(typeof(GibHolder))]
	public class GibHolderPoolable : Poolable
	{
		[Token(Token = "0x2000248")]
		private struct Orientation
		{
			[Token(Token = "0x40012DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 localPosition;

			[Token(Token = "0x40012DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion localRotation;

			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x81FC94", Offset = "0x81FC94", VA = "0x81FC94")]
			public Orientation(Transform transform)
			{
			}
		}

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<Transform, Orientation> cachedGibPositions;

		[Token(Token = "0x170001DE")]
		public GibHolder GibHolder
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x81FB28", Offset = "0x81FB28", VA = "0x81FB28")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x81FB30", Offset = "0x81FB30", VA = "0x81FB30")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x81FB38", Offset = "0x81FB38", VA = "0x81FB38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x81F8A0", Offset = "0x81F8A0", VA = "0x81F8A0")]
		public void ResetGibOrientation(GibHolderPoolable poolable)
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x81FCE0", Offset = "0x81FCE0", VA = "0x81FCE0")]
		public GibHolderPoolable()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public class KnockedOutTooth : Poolable
	{
		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject tooth;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 localPosition;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion localRotation;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform toothParent;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Head assignedHead;

		[Token(Token = "0x170001DF")]
		public Rigidbody rigidbody
		{
			[Token(Token = "0x6000E29")]
			[Address(RVA = "0x81FD70", Offset = "0x81FD70", VA = "0x81FD70")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E2A")]
			[Address(RVA = "0x81FD78", Offset = "0x81FD78", VA = "0x81FD78")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x81FD80", Offset = "0x81FD80", VA = "0x81FD80")]
		public void AssignHead(Head head)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x81FD88", Offset = "0x81FD88", VA = "0x81FD88")]
		public void AssignTooth(GameObject toothGameObject)
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x81FE5C", Offset = "0x81FE5C", VA = "0x81FE5C", Slot = "6")]
		public override void ReturnToPool()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x820048", Offset = "0x820048", VA = "0x820048")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x8200A0", Offset = "0x8200A0", VA = "0x8200A0")]
		public KnockedOutTooth()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class Poolable : MonoBehaviour, IPoolable
	{
		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float lifeTime;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool countdownStarted;

		[Token(Token = "0x170001E0")]
		public IPool Owner
		{
			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x8200A8", Offset = "0x8200A8", VA = "0x8200A8", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E31")]
			[Address(RVA = "0x8200B0", Offset = "0x8200B0", VA = "0x8200B0", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001E1")]
		public bool IsInPool
		{
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x8200B8", Offset = "0x8200B8", VA = "0x8200B8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0x8200C0", Offset = "0x8200C0", VA = "0x8200C0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x81474C", Offset = "0x81474C", VA = "0x81474C")]
		public void SetLifeTime(float time)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x81FF20", Offset = "0x81FF20", VA = "0x81FF20", Slot = "6")]
		public virtual void ReturnToPool()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x8200CC", Offset = "0x8200CC", VA = "0x8200CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x81FD68", Offset = "0x81FD68", VA = "0x81FD68")]
		public Poolable()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class PoolableMultiParticleSystem : Poolable
	{
		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem[] particleSystems;

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x81F7FC", Offset = "0x81F7FC", VA = "0x81F7FC")]
		public void Play()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x820120", Offset = "0x820120", VA = "0x820120")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x820178", Offset = "0x820178", VA = "0x820178")]
		public PoolableMultiParticleSystem()
		{
		}
	}
	[Token(Token = "0x200024C")]
	[RequireComponent(typeof(ParticleSystem))]
	public class PoolableParticleSystem : Poolable
	{
		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 startScale;

		[Token(Token = "0x170001E2")]
		public ParticleSystem particleSystem
		{
			[Token(Token = "0x6000E3B")]
			[Address(RVA = "0x820180", Offset = "0x820180", VA = "0x820180")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E3C")]
			[Address(RVA = "0x820188", Offset = "0x820188", VA = "0x820188")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001E3")]
		public bool playOnAwake
		{
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0x820190", Offset = "0x820190", VA = "0x820190")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x820198", Offset = "0x820198", VA = "0x820198")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x8201A4", Offset = "0x8201A4", VA = "0x8201A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x820254", Offset = "0x820254", VA = "0x820254", Slot = "6")]
		public override void ReturnToPool()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x820288", Offset = "0x820288", VA = "0x820288")]
		public PoolableParticleSystem()
		{
		}
	}
}
namespace TFBGames.PlayerSetup
{
	[Token(Token = "0x200024D")]
	public class FloorHeightController : ISetupPhase
	{
		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IInputReader inputReader;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IDeviceTracker deviceTracker;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PsvrSetupManager manager;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TFBGames.Common.Hand? currentHand;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform playerTransform;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 previousPos;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 currentPos;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentFloorHeight;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private MovementMode movementMode;

		[Token(Token = "0x14000009")]
		public event Action SetupComplete
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x820290", Offset = "0x820290", VA = "0x820290", Slot = "4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0x82032C", Offset = "0x82032C", VA = "0x82032C", Slot = "5")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x8203C8", Offset = "0x8203C8", VA = "0x8203C8", Slot = "6")]
		public void Setup(PsvrSetupManager manager)
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x8207D0", Offset = "0x8207D0", VA = "0x8207D0", Slot = "7")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x820CA0", Offset = "0x820CA0", VA = "0x820CA0")]
		private void CompleteSetup()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x820B78", Offset = "0x820B78", VA = "0x820B78")]
		private bool IsButtonReleased()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x820FF4", Offset = "0x820FF4", VA = "0x820FF4")]
		private void SetupHand(TFBGames.Common.Hand hand)
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x821120", Offset = "0x821120", VA = "0x821120")]
		public FloorHeightController()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public interface ISetupPhase
	{
		[Token(Token = "0x1400000A")]
		event Action SetupComplete;

		[Token(Token = "0x6000E4C")]
		void Setup([NotNull] PsvrSetupManager manager);

		[Token(Token = "0x6000E4D")]
		void Update();
	}
	[Token(Token = "0x200024F")]
	[RequireComponent(typeof(Light))]
	public class LightFade : MonoBehaviour
	{
		[Token(Token = "0x40012F6")]
		private const float MinIntensity = 0.05f;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float lightIntensityChangeTime;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool hideAtAwake;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light light;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float defaultLightIntensity;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float desiredLightIntensity;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float lightIntensityVel;

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x821128", Offset = "0x821128", VA = "0x821128")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x821204", Offset = "0x821204", VA = "0x821204")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x820794", Offset = "0x820794", VA = "0x820794")]
		public void FadeIn()
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x821118", Offset = "0x821118", VA = "0x821118")]
		public void FadeOut()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x821354", Offset = "0x821354", VA = "0x821354")]
		public void ShowImmediately()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x8211B8", Offset = "0x8211B8", VA = "0x8211B8")]
		public void HideImmediately()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x8213A4", Offset = "0x8213A4", VA = "0x8213A4")]
		public LightFade()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class PlayerPoseController : ISetupPhase
	{
		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IInputReader inputReader;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IDeviceTracker deviceTracker;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PsvrSetupManager manager;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform playerTransform;

		[Token(Token = "0x4001302")]
		private const float HumanErrorForgiveness = 1.25f;

		[Token(Token = "0x1400000B")]
		public event Action SetupComplete
		{
			[Token(Token = "0x6000E55")]
			[Address(RVA = "0x8213AC", Offset = "0x8213AC", VA = "0x8213AC", Slot = "4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0x821448", Offset = "0x821448", VA = "0x821448", Slot = "5")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x8214E4", Offset = "0x8214E4", VA = "0x8214E4", Slot = "6")]
		public void Setup(PsvrSetupManager manager)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x8216C4", Offset = "0x8216C4", VA = "0x8216C4", Slot = "7")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x821B74", Offset = "0x821B74", VA = "0x821B74")]
		private void CompleteSetup()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x821C20", Offset = "0x821C20", VA = "0x821C20")]
		public PlayerPoseController()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class PlayerSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Player prefab;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool spawnWithControllerHands;

		[Token(Token = "0x170001E4")]
		public static Player CurrentPlayer
		{
			[Token(Token = "0x6000E5B")]
			[Address(RVA = "0x821C28", Offset = "0x821C28", VA = "0x821C28")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x821C70", Offset = "0x821C70", VA = "0x821C70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x821CC8", Offset = "0x821CC8", VA = "0x821CC8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x821EF4", Offset = "0x821EF4", VA = "0x821EF4")]
		public PlayerSpawner()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class PsvrSetupManager : MonoBehaviour
	{
		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Setup")]
		[SerializeField]
		private float initialFloorHeight;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float visualiserOffset;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Range(0f, 1f)]
		private float triggerThreshold;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float minHeight;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float maxHeight;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private LightFade floorLight;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Floor Height Setup")]
		[SerializeField]
		private TitleScreenController titleScreenController;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private PsvrPlayer player;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private TextFade floorInstructionText1;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TextFade floorInstructionText2;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Header("T Pose Setup")]
		private TextFade tPoseInstructionText;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float minArmDistance;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<ISetupPhase> setupPhases;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ISetupPhase currentPhase;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int phaseIndex;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool areAllSetupsComplete;

		[Token(Token = "0x170001E5")]
		public float InitialFloorHeight
		{
			[Token(Token = "0x6000E5F")]
			[Address(RVA = "0x821EFC", Offset = "0x821EFC", VA = "0x821EFC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E6")]
		public float VisualiserOffset
		{
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0x821F04", Offset = "0x821F04", VA = "0x821F04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E7")]
		public float TriggerThreshold
		{
			[Token(Token = "0x6000E61")]
			[Address(RVA = "0x821F0C", Offset = "0x821F0C", VA = "0x821F0C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E8")]
		public float MinHeight
		{
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0x821F14", Offset = "0x821F14", VA = "0x821F14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E9")]
		public float MaxHeight
		{
			[Token(Token = "0x6000E63")]
			[Address(RVA = "0x821F1C", Offset = "0x821F1C", VA = "0x821F1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EA")]
		public float MinArmDistance
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0x821F24", Offset = "0x821F24", VA = "0x821F24")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EB")]
		public PsvrPlayer Player
		{
			[Token(Token = "0x6000E65")]
			[Address(RVA = "0x820660", Offset = "0x820660", VA = "0x820660")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EC")]
		public LightFade FloorLight
		{
			[Token(Token = "0x6000E66")]
			[Address(RVA = "0x821F2C", Offset = "0x821F2C", VA = "0x821F2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		public TextFade FloorInstructionText1
		{
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0x821F34", Offset = "0x821F34", VA = "0x821F34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		public TextFade FloorInstructionText2
		{
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0x821F3C", Offset = "0x821F3C", VA = "0x821F3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EF")]
		public TextFade TPoseInstructionText
		{
			[Token(Token = "0x6000E69")]
			[Address(RVA = "0x821F44", Offset = "0x821F44", VA = "0x821F44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x821F4C", Offset = "0x821F4C", VA = "0x821F4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x8220FC", Offset = "0x8220FC", VA = "0x8220FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x8222E0", Offset = "0x8222E0", VA = "0x8222E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x822398", Offset = "0x822398", VA = "0x822398")]
		private void NextPhase()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x822450", Offset = "0x822450", VA = "0x822450")]
		private void ResetPlayerPosition()
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x822428", Offset = "0x822428", VA = "0x822428")]
		private void SetupsComplete()
		{
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x82216C", Offset = "0x82216C", VA = "0x82216C")]
		private void SetupPhase(ISetupPhase phase)
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x8224C0", Offset = "0x8224C0", VA = "0x8224C0")]
		public PsvrSetupManager()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class PsvrTutorialAdjuster : MonoBehaviour
	{
		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform player;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform playerEyes;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform backDoor;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform spawnPoint;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float minDelta;

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x8224E4", Offset = "0x8224E4", VA = "0x8224E4")]
		public PsvrTutorialAdjuster()
		{
		}
	}
	[Token(Token = "0x2000254")]
	[RequireComponent(typeof(TextMeshPro))]
	public class TextFade : MonoBehaviour
	{
		[Token(Token = "0x400131B")]
		private const float MinAlpha = 0.01f;

		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float alphaChangeTime;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private bool hideAtAwake;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshPro textMesh;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float defaultAlpha;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float desiredAlpha;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float alphaVel;

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x8224F4", Offset = "0x8224F4", VA = "0x8224F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x8225F8", Offset = "0x8225F8", VA = "0x8225F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x820758", Offset = "0x820758", VA = "0x820758")]
		public void FadeIn()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x821110", Offset = "0x821110", VA = "0x821110")]
		public void FadeOut()
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x822780", Offset = "0x822780", VA = "0x822780")]
		public void ShowImmediately()
		{
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x82258C", Offset = "0x82258C", VA = "0x82258C")]
		public void HideImmediately()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x8227F0", Offset = "0x8227F0", VA = "0x8227F0")]
		public TextFade()
		{
		}
	}
}
namespace TFBGames.Optimisations
{
	[Token(Token = "0x2000255")]
	public class AnimationQualityAdjust : MonoBehaviour
	{
		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected SkinnedMeshRenderer[] LODMeshes;

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x8227F8", Offset = "0x8227F8", VA = "0x8227F8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x822944", Offset = "0x822944", VA = "0x822944")]
		public AnimationQualityAdjust()
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class CrowdPersonVisibilityDisabler : MonoBehaviour
	{
		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MonoBehaviour crowdPerson;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Renderer[] renderers;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<VisibleEventRelay> eventRelayList;

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x82294C", Offset = "0x82294C", VA = "0x82294C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x822A6C", Offset = "0x822A6C", VA = "0x822A6C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x822C0C", Offset = "0x822C0C", VA = "0x822C0C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x822DAC", Offset = "0x822DAC", VA = "0x822DAC")]
		private void OnVisibilityChange(bool visible)
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x822E44", Offset = "0x822E44", VA = "0x822E44")]
		private void EnableCrowdPerson(bool enable)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x822E64", Offset = "0x822E64", VA = "0x822E64")]
		public CrowdPersonVisibilityDisabler()
		{
		}
	}
	[Token(Token = "0x2000257")]
	[RequireComponent(typeof(Renderer))]
	public class MaterialSwapper : MonoBehaviour
	{
		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Material tier1;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Material tier2;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected Material[] tier1Materials;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Material[] tier2Materials;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material originalMaterial;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initialized;

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x822EEC", Offset = "0x822EEC", VA = "0x822EEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x822FF0", Offset = "0x822FF0", VA = "0x822FF0")]
		public Material GetOriginalMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x823014", Offset = "0x823014", VA = "0x823014")]
		public MaterialSwapper()
		{
		}
	}
	[Token(Token = "0x2000258")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleSystemSettingsOverride : MonoBehaviour
	{
		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxParticles;

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x82301C", Offset = "0x82301C", VA = "0x82301C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x82309C", Offset = "0x82309C", VA = "0x82309C")]
		public ParticleSystemSettingsOverride()
		{
		}
	}
	[Token(Token = "0x2000259")]
	[RequireComponent(typeof(Rigidbody))]
	public class RigidbodyQualityAdjust : MonoBehaviour
	{
		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x8230AC", Offset = "0x8230AC", VA = "0x8230AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x823174", Offset = "0x823174", VA = "0x823174")]
		public RigidbodyQualityAdjust()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class ShadowDisabler : MonoBehaviour
	{
		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool disableCasting;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool disableReceiving;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool disableCastingT2;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool disableReceivingT2;

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x82317C", Offset = "0x82317C", VA = "0x82317C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x823268", Offset = "0x823268", VA = "0x823268")]
		public ShadowDisabler()
		{
		}
	}
}
namespace TFBGames.OculusQuest
{
	[Token(Token = "0x200025B")]
	public class QuestIntro : MonoBehaviour
	{
		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TitleScreenController titleScreenController;

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x823270", Offset = "0x823270", VA = "0x823270")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x82328C", Offset = "0x82328C", VA = "0x82328C")]
		public QuestIntro()
		{
		}
	}
}
namespace TFBGames.L10n
{
	[Token(Token = "0x200025C")]
	public class AndroidLanguageProvider : ISystemLanguageProvider
	{
		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x823294", Offset = "0x823294", VA = "0x823294", Slot = "4")]
		public string GetLanguageCode()
		{
			return null;
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x8234E4", Offset = "0x8234E4", VA = "0x8234E4")]
		public AndroidLanguageProvider()
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class GameLocalizationInitializer : LocalizationInitializer
	{
		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ISystemLanguageProvider languageProvide;

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x8234EC", Offset = "0x8234EC", VA = "0x8234EC", Slot = "6")]
		protected override IResourceManager GetResourceManager()
		{
			return null;
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x823564", Offset = "0x823564", VA = "0x823564", Slot = "7")]
		protected override void InitializeLocalization(ILocalization initialize)
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x8238D8", Offset = "0x8238D8", VA = "0x8238D8")]
		public GameLocalizationInitializer()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public static class Localisation
	{
		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x8238E0", Offset = "0x8238E0", VA = "0x8238E0")]
		public static string Get(string key, bool fixArabic = true)
		{
			return null;
		}
	}
	[Token(Token = "0x200025F")]
	public enum FontType
	{
		[Token(Token = "0x4001334")]
		Standard,
		[Token(Token = "0x4001335")]
		Cell,
		[Token(Token = "0x4001336")]
		Elevator,
		[Token(Token = "0x4001337")]
		Shrine,
		[Token(Token = "0x4001338")]
		Glow,
		[Token(Token = "0x4001339")]
		Scroll,
		[Token(Token = "0x400133A")]
		Player
	}
	[Token(Token = "0x2000260")]
	public class LocalisationFontManager : PersistentSingleton<LocalisationFontManager>
	{
		[Serializable]
		[Token(Token = "0x2000261")]
		public class SpecialFontType
		{
			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FontType Type;

			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public TMP_FontAsset Font;

			[Token(Token = "0x6000E9D")]
			[Address(RVA = "0x823D5C", Offset = "0x823D5C", VA = "0x823D5C")]
			public SpecialFontType()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000262")]
		public class FallbackFontInfo
		{
			[Token(Token = "0x4001341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The language code for which to use the fallback font.")]
			public string Language;

			[Token(Token = "0x4001342")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Fallback font to use.")]
			public TMP_FontAsset Font;

			[Token(Token = "0x4001343")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			public SpecialFontType[] SpecialFonts;

			[Token(Token = "0x6000E9E")]
			[Address(RVA = "0x823D64", Offset = "0x823D64", VA = "0x823D64")]
			public FallbackFontInfo()
			{
			}
		}

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SpecialFontType[] fontMap;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Fallback fonts for languages.")]
		[SerializeField]
		private FallbackFontInfo[] fallbackFonts;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FallbackFontInfo currentFontInfo;

		[Token(Token = "0x170001F0")]
		public TMP_FontAsset CurrentFallbackFont
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0x82396C", Offset = "0x82396C", VA = "0x82396C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0x823974", Offset = "0x823974", VA = "0x823974")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x82397C", Offset = "0x82397C", VA = "0x82397C")]
		public TMP_FontAsset GetSpecialFont(TMP_FontAsset fontAsset)
		{
			return null;
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x823B40", Offset = "0x823B40", VA = "0x823B40")]
		public TMP_FontAsset GetSpecialFont(FontType type)
		{
			return null;
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x823BA0", Offset = "0x823BA0", VA = "0x823BA0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x823C48", Offset = "0x823C48", VA = "0x823C48", Slot = "5")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x823CF0", Offset = "0x823CF0", VA = "0x823CF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x823D10", Offset = "0x823D10", VA = "0x823D10")]
		private void OnLanguageChanged(string language)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x823A64", Offset = "0x823A64", VA = "0x823A64")]
		private void SetFallbackFont(string language)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x823D14", Offset = "0x823D14", VA = "0x823D14")]
		public LocalisationFontManager()
		{
		}
	}
	[Token(Token = "0x2000263")]
	[RequireComponent(typeof(LocalizedGameAsset))]
	public class LocalizedGameAssetKeyPlatformOverride : MonoBehaviour
	{
		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected string oculusKey;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected string viveKey;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected string psvrKey;

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x823D6C", Offset = "0x823D6C", VA = "0x823D6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x823E94", Offset = "0x823E94", VA = "0x823E94")]
		public LocalizedGameAssetKeyPlatformOverride()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class PostLocaliseFormatText : LocalisedTextMeshPro
	{
		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string text;

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x823E9C", Offset = "0x823E9C", VA = "0x823E9C", Slot = "7")]
		protected override void LanguageChanged(string newLanguage)
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x823EFC", Offset = "0x823EFC", VA = "0x823EFC")]
		public PostLocaliseFormatText()
		{
		}
	}
	[Token(Token = "0x2000265")]
	[RequireComponent(typeof(TextMeshProUGUI))]
	public class TextMeshProUGUILanguageConfig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000266")]
		private struct Config
		{
			[Token(Token = "0x400134A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string language;

			[Token(Token = "0x400134B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float lineSpacing;
		}

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Config[] configs;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMeshProUGUI textMeshPro;

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x823F04", Offset = "0x823F04", VA = "0x823F04")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x823FE8", Offset = "0x823FE8", VA = "0x823FE8")]
		public TextMeshProUGUILanguageConfig()
		{
		}
	}
}
namespace TFBGames.Input
{
	[Token(Token = "0x2000267")]
	[RequireComponent(typeof(ConfigurableJoint))]
	public class JointConstrainer : MonoBehaviour
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ConfigurableJoint joint;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigidbody;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody connectedBody;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 startRelativePos;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 startLocalEuler;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool lockXPos;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool lockYPos;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		private bool lockZPos;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private ConfigurableJointMotion xRotMode;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ConfigurableJointMotion yRotMode;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private ConfigurableJointMotion zRotMode;

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x823FF0", Offset = "0x823FF0", VA = "0x823FF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x824320", Offset = "0x824320", VA = "0x824320")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x824710", Offset = "0x824710", VA = "0x824710")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x824324", Offset = "0x824324", VA = "0x824324")]
		private void ClampPositions()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x824714", Offset = "0x824714", VA = "0x824714")]
		private float HandleRotation(float currentAngle, float startAngle, ConfigurableJointMotion lockMode, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x824764", Offset = "0x824764", VA = "0x824764")]
		public JointConstrainer()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class PsvrChaperone : MonoBehaviour, IChaperone
	{
		[Token(Token = "0x4001357")]
		private const int HeadsetInputPositionIndex = 0;

		[Token(Token = "0x4001358")]
		private const int LeftHandInputPositionIndex = 1;

		[Token(Token = "0x4001359")]
		private const int RightHandInputPositionIndex = 2;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform frustumTransform;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject chaperoneRoot;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float safeDistance;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Material chaperoneMaterial;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float smoothTime;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float standardInvDistanceThreshold;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float reducedInvDistanceThreshold;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private float standardColorAlpha;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float reducedColorAlpha;

		[Token(Token = "0x4001363")]
		private const int NumTrackedPositions = 3;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] InputPositions;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int InvDistanceThreshold;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int ColorId;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool[] handCollisions;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] handPauseCollisions;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 startScale;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 currentScale;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 currentVelocity;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 rotationLastFrame;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform hmdTransform;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Transform playerTransform;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float currentInvDistanceThreshold;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private IDeviceTracker tracker;

		[Token(Token = "0x170001F1")]
		public bool IsInBounds
		{
			[Token(Token = "0x6000EAB")]
			[Address(RVA = "0x82476C", Offset = "0x82476C", VA = "0x82476C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x824774", Offset = "0x824774", VA = "0x824774")]
		public void UpdatePlayAreaModeVisuals(PlayAreaDistance distanceMode)
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x824A08", Offset = "0x824A08", VA = "0x824A08", Slot = "4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x824A30", Offset = "0x824A30", VA = "0x824A30", Slot = "6")]
		public void NotifyHandCollision(Collider[] colliders, int size, TFBGames.Common.Hand hand, Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x824B7C", Offset = "0x824B7C", VA = "0x824B7C", Slot = "7")]
		public void NotifyPauseHandCollision(bool collided, TFBGames.Common.Hand hand)
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x824BB0", Offset = "0x824BB0", VA = "0x824BB0", Slot = "8")]
		public void Setup(IDeviceTracker deviceTracker)
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0x824C20", Offset = "0x824C20", VA = "0x824C20", Slot = "9")]
		public void UpdateHmdTransform(Transform hmd, Vector3 scale)
		{
		}

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x8248B4", Offset = "0x8248B4", VA = "0x8248B4")]
		private void UpdateMaterialInvDistance()
		{
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x824D30", Offset = "0x824D30", VA = "0x824D30")]
		public PsvrChaperone()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class PsvrControllerDevice : MonoBehaviour
	{
		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TFBGames.Common.Hand hand;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float chaperoneRadius;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float chaperonePauseRadius;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private LayerMask chaperoneLayer;

		[Token(Token = "0x4001375")]
		private const int MaxCollisions = 4;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 playerScale;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool hasHandDistance;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float maxDistanceSqrd;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float maxDistance;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float holdTimer;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float escapeHoldTimer;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float scaledChaperoneRadius;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float scaledChaperonePauseRadius;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform myTransform;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform headTransform;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform playerTransform;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Collider[] sphereCollisions;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Collider[] spherePauseCollisions;

		[Token(Token = "0x4001383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TFBGames.Common.Hand currentRotationHand;

		[Token(Token = "0x4001384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool isCurrentSceneArena;

		[Token(Token = "0x4001385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly HashSet<RotationHand> LeftHandRotations;

		[Token(Token = "0x4001386")]
		private const float DeviceTrackerResetTime = 5f;

		[Token(Token = "0x4001387")]
		private const float ArenaEscapeTime = 2f;

		[Token(Token = "0x170001F2")]
		private static IDeviceTracker DeviceTracker
		{
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0x824ECC", Offset = "0x824ECC", VA = "0x824ECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0x824F44", Offset = "0x824F44", VA = "0x824F44")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0x824FD4", Offset = "0x824FD4", VA = "0x824FD4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x8252A8", Offset = "0x8252A8", VA = "0x8252A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x8259F0", Offset = "0x8259F0", VA = "0x8259F0")]
		public void SetScale(Vector3 scale)
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x8259FC", Offset = "0x8259FC", VA = "0x8259FC")]
		public void SetupTransforms(Transform head, Transform player)
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0x825210", Offset = "0x825210", VA = "0x825210")]
		private static TFBGames.Common.Hand GetRotationHand()
		{
			return default(TFBGames.Common.Hand);
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0x825A2C", Offset = "0x825A2C", VA = "0x825A2C")]
		public PsvrControllerDevice()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class PsvrPlayer : MonoBehaviour
	{
		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Controllers")]
		private PsvrControllerDevice leftController;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private PsvrControllerDevice rightController;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("HMD")]
		[SerializeField]
		private Transform hmdTransform;

		[Token(Token = "0x400138B")]
		private const float PlayerScaleInHeightSetupScene = 10f;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float tooCloseSqrDist;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform myTransform;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Player player;

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x825B80", Offset = "0x825B80", VA = "0x825B80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0x825D58", Offset = "0x825D58", VA = "0x825D58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x826038", Offset = "0x826038", VA = "0x826038")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x825F50", Offset = "0x825F50", VA = "0x825F50")]
		private void SetupController(PsvrControllerDevice controller)
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x826244", Offset = "0x826244", VA = "0x826244")]
		private void ResetPlayerPosition()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x826500", Offset = "0x826500", VA = "0x826500")]
		public PsvrPlayer()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class UnityXRInputReader : MonoBehaviour, IInputReader
	{
		[Token(Token = "0x200026C")]
		[CompilerGenerated]
		private sealed class <DoHapticPulse>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000203")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EEB")]
				[Address(RVA = "0x82792C", Offset = "0x82792C", VA = "0x82792C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000204")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EED")]
				[Address(RVA = "0x827974", Offset = "0x827974", VA = "0x827974", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0x827854", Offset = "0x827854", VA = "0x827854")]
			[DebuggerHidden]
			public <DoHapticPulse>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6000EE9")]
			[Address(RVA = "0x827884", Offset = "0x827884", VA = "0x827884", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EEA")]
			[Address(RVA = "0x827888", Offset = "0x827888", VA = "0x827888", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0x827934", Offset = "0x827934", VA = "0x827934", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400138F")]
		private const float TriggerThresholdForPress = 0.5f;

		[Token(Token = "0x4001390")]
		private const string XrIdentifierControllerVive = "Vive Controller";

		[Token(Token = "0x4001391")]
		private const string XrIdentifierControllerRift = "Oculus Rift Controller";

		[Token(Token = "0x4001392")]
		private const string XrIdentifierControllerQuest = "Oculus Touch Controller";

		[Token(Token = "0x4001393")]
		private const string XrIdentifierControllerPico = "PicoXR Controller";

		[Token(Token = "0x4001394")]
		private const string XrIdentifierControllerPSVR1 = "PSVR1 Controller";

		[Token(Token = "0x4001395")]
		private const string XrIdentifierControllerPSVR2 = "PSVR2 Controller";

		[Token(Token = "0x4001396")]
		private const string XrIdentifierHeadsetVive = "HTC Vive";

		[Token(Token = "0x4001397")]
		private const string XrIdentifierHeadsetRift = "Oculus Rift";

		[Token(Token = "0x4001398")]
		private const string XrIdentifierHeadsetQuest = "Oculus Quest";

		[Token(Token = "0x4001399")]
		private const string XrIdentifierHeadsetPico = "Pico";

		[Token(Token = "0x400139A")]
		private const string XrIdentifierHeadsetPSVR1 = "PSVR1";

		[Token(Token = "0x400139B")]
		private const string XrIdentifierHeadsetPSVR2 = "PSVR2";

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.XR.InputDevice? headset;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.XR.InputDevice? leftController;

		[Token(Token = "0x400139F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.XR.InputDevice? rightController;

		[Token(Token = "0x40013A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool leftToggleHold;

		[Token(Token = "0x40013A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool rightToggleHold;

		[Token(Token = "0x40013A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool leftToggleHoldDown;

		[Token(Token = "0x40013A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool rightToggleHoldDown;

		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool leftGestureButton;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool leftGestureButtonDown;

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		private bool rightGestureButton;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		private bool rightGestureButtonDown;

		[Token(Token = "0x170001F3")]
		public bool LeftApplicationButtonPressDown
		{
			[Token(Token = "0x6000EC6")]
			[Address(RVA = "0x826640", Offset = "0x826640", VA = "0x826640", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F4")]
		public bool LeftApplicationButtonPressed
		{
			[Token(Token = "0x6000EC7")]
			[Address(RVA = "0x826648", Offset = "0x826648", VA = "0x826648", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F5")]
		public bool RightApplicationButtonPressed
		{
			[Token(Token = "0x6000EC8")]
			[Address(RVA = "0x826650", Offset = "0x826650", VA = "0x826650", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F6")]
		public bool LeftToggleHoldButtonPressDown
		{
			[Token(Token = "0x6000EC9")]
			[Address(RVA = "0x826658", Offset = "0x826658", VA = "0x826658", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F7")]
		public bool RightToggleHoldButtonPressDown
		{
			[Token(Token = "0x6000ECA")]
			[Address(RVA = "0x826660", Offset = "0x826660", VA = "0x826660", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F8")]
		public bool TrackpadButtonPressed
		{
			[Token(Token = "0x6000ECB")]
			[Address(RVA = "0x826668", Offset = "0x826668", VA = "0x826668", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F9")]
		public bool LeftMoveButtonPress
		{
			[Token(Token = "0x6000ECC")]
			[Address(RVA = "0x826670", Offset = "0x826670", VA = "0x826670", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FA")]
		public bool RightMoveButtonPress
		{
			[Token(Token = "0x6000ECD")]
			[Address(RVA = "0x8267A0", Offset = "0x8267A0", VA = "0x8267A0", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FB")]
		public bool LeftGestureButtonPress
		{
			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0x826830", Offset = "0x826830", VA = "0x826830", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FC")]
		public bool LeftGestureButtonPressDown
		{
			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0x826838", Offset = "0x826838", VA = "0x826838", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FD")]
		public bool RightGestureButtonPress
		{
			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0x826840", Offset = "0x826840", VA = "0x826840", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FE")]
		public bool RightGestureButtonPressDown
		{
			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0x826848", Offset = "0x826848", VA = "0x826848", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FF")]
		public float LeftGrab
		{
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0x826850", Offset = "0x826850", VA = "0x826850", Slot = "18")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000200")]
		public float RightGrab
		{
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0x826974", Offset = "0x826974", VA = "0x826974", Slot = "19")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000201")]
		public float LeftGripAmount
		{
			[Token(Token = "0x6000EE0")]
			[Address(RVA = "0x8274F8", Offset = "0x8274F8", VA = "0x8274F8", Slot = "20")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000202")]
		public float RightGripAmount
		{
			[Token(Token = "0x6000EE1")]
			[Address(RVA = "0x8275BC", Offset = "0x8275BC", VA = "0x8275BC", Slot = "21")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1400000C")]
		public event Action InputDevicesChanged
		{
			[Token(Token = "0x6000EC4")]
			[Address(RVA = "0x826508", Offset = "0x826508", VA = "0x826508", Slot = "4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000EC5")]
			[Address(RVA = "0x8265A4", Offset = "0x8265A4", VA = "0x8265A4", Slot = "5")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x826A00", Offset = "0x826A00", VA = "0x826A00")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x826BA8", Offset = "0x826BA8", VA = "0x826BA8")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x826C5C", Offset = "0x826C5C", VA = "0x826C5C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x826DC0", Offset = "0x826DC0", VA = "0x826DC0", Slot = "22")]
		public Vector2 GetTrackpadPos(bool left)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x826E78", Offset = "0x826E78", VA = "0x826E78")]
		private Vector2 GetFeatureValueSafeVector2(UnityEngine.XR.InputDevice? device, InputFeatureUsage<Vector2> feature)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x826F4C", Offset = "0x826F4C", VA = "0x826F4C")]
		public float GetOculusGripAmount(bool left)
		{
			return default(float);
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x827004", Offset = "0x827004", VA = "0x827004", Slot = "23")]
		public void VibrateController(bool left, float time, float magnitude, float freq = 0.25f)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x827088", Offset = "0x827088", VA = "0x827088", Slot = "24")]
		public ControllerType GetLeftControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x8272C0", Offset = "0x8272C0", VA = "0x8272C0", Slot = "25")]
		public ControllerType GetRightControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x8272C4", Offset = "0x8272C4", VA = "0x8272C4", Slot = "26")]
		public HeadsetType GetHeadsetType()
		{
			return default(HeadsetType);
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x826700", Offset = "0x826700", VA = "0x826700")]
		private bool GetFeatureValueSafeBool(UnityEngine.XR.InputDevice? device, InputFeatureUsage<bool> feature)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x8268DC", Offset = "0x8268DC", VA = "0x8268DC")]
		private float GetFeatureValueSafeFloat(UnityEngine.XR.InputDevice? device, InputFeatureUsage<float> feature)
		{
			return default(float);
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x826C60", Offset = "0x826C60", VA = "0x826C60")]
		private void CheckButtonPresses()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x82708C", Offset = "0x82708C", VA = "0x82708C")]
		private ControllerType GetControllerType(UnityEngine.XR.InputDevice? device)
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x826ABC", Offset = "0x826ABC", VA = "0x826ABC")]
		private void InitializeInputDevices()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x827680", Offset = "0x827680", VA = "0x827680")]
		private void OnInputDeviceChanged(UnityEngine.XR.InputDevice device)
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x827028", Offset = "0x827028", VA = "0x827028")]
		[IteratorStateMachine(typeof(<DoHapticPulse>d__75))]
		private IEnumerator DoHapticPulse(float time, bool left)
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x82787C", Offset = "0x82787C", VA = "0x82787C")]
		public UnityXRInputReader()
		{
		}
	}
}
namespace TFBGames.Debug
{
	[Token(Token = "0x200026D")]
	[RequireComponent(typeof(TextMeshPro))]
	public class DebugFps : MonoBehaviour
	{
		[Token(Token = "0x40013AA")]
		private const int MaxFps = 125;

		[Token(Token = "0x40013AB")]
		private const float MaxRenderScale = 1.7f;

		[Token(Token = "0x40013AC")]
		private const float MinRenderScale = 0.5f;

		[Token(Token = "0x40013AD")]
		private const float RenderScaleDelta = 0.1f;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("Update the FPS at these intervals (seconds).")]
		protected float updateInterval;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Prefix to add to the fps displayed text.")]
		protected string fpsPreFix;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("Prefix to add to the mspf displayed text.")]
		protected string msPreFix;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int frames;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float fps;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double lastInterval;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool updateText;

		[Token(Token = "0x40013B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TextMeshPro text;

		[Token(Token = "0x40013B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float renderScale;

		[Token(Token = "0x40013B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string[] fpsStrings;

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x82797C", Offset = "0x82797C", VA = "0x82797C", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x8279E8", Offset = "0x8279E8", VA = "0x8279E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x827AEC", Offset = "0x827AEC", VA = "0x827AEC")]
		private string GetFpsString()
		{
			return null;
		}

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x827B88", Offset = "0x827B88", VA = "0x827B88")]
		public DebugFps()
		{
		}
	}
	[Token(Token = "0x200026E")]
	public class DebugMeshAnalyser : MonoBehaviour
	{
		[Token(Token = "0x40013B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SkinnedMeshRenderer testRenderer;

		[Token(Token = "0x40013B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private SkinnedMeshRenderer secondRenderer;

		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool runLogging;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool log2;

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		private bool logging;

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x827C20", Offset = "0x827C20", VA = "0x827C20")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x827CD8", Offset = "0x827CD8", VA = "0x827CD8")]
		public static void LogMeshInfo(SkinnedMeshRenderer skinnedMesh)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x827CEC", Offset = "0x827CEC", VA = "0x827CEC")]
		public static void ContrastMeshInfo(SkinnedMeshRenderer skin0, SkinnedMeshRenderer skin1)
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x827EB8", Offset = "0x827EB8", VA = "0x827EB8")]
		public DebugMeshAnalyser()
		{
		}
	}
	[Token(Token = "0x200026F")]
	internal class DiageticButtonPusher : MonoBehaviour
	{
		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float aliveTime;

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x827EC0", Offset = "0x827EC0", VA = "0x827EC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x827F3C", Offset = "0x827F3C", VA = "0x827F3C")]
		public DiageticButtonPusher()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class GamePadInput : MonoBehaviour
	{
		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Speeds")]
		private float speed;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float rotationSpeed;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float fireVelocity;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Header("Position Offsets")]
		private float fireOffset;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Header("Prefabs")]
		private GameObject firePrefab;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject uiFirePrefab;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Raycast Settings")]
		[SerializeField]
		private LayerMask defaultLayer;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private LayerMask diageticLayer;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float sphereCastRadius;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private InControl.InputDevice device;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private InControl.InputControl control;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isMenu;

		[Token(Token = "0x40013CA")]
		private const float MAX_RAY_DIST = 300f;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform myTransform;

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x827F44", Offset = "0x827F44", VA = "0x827F44")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x827F9C", Offset = "0x827F9C", VA = "0x827F9C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x827FB8", Offset = "0x827FB8", VA = "0x827FB8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x82805C", Offset = "0x82805C", VA = "0x82805C")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode loadMode)
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x828078", Offset = "0x828078", VA = "0x828078")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x828540", Offset = "0x828540", VA = "0x828540")]
		private void FireProjectile(GameObject prefab)
		{
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x8282F0", Offset = "0x8282F0", VA = "0x8282F0")]
		private void MenuInteractions()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x8286F0", Offset = "0x8286F0", VA = "0x8286F0")]
		public GamePadInput()
		{
		}
	}
}
namespace TFBGames.Choptimizer
{
	[Serializable]
	[Token(Token = "0x2000271")]
	public class CharacterMeshCache : ISerializationCallbackReceiver
	{
		[Serializable]
		[Token(Token = "0x2000272")]
		private struct ChopGroupData
		{
			[Token(Token = "0x40013CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string name;

			[Token(Token = "0x40013D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ChopGroup chopGroup;

			[Token(Token = "0x6000F0A")]
			[Address(RVA = "0x82C5A4", Offset = "0x82C5A4", VA = "0x82C5A4")]
			public ChopGroupData(string name, ChopGroup chopGroup)
			{
			}
		}

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		[SerializeField]
		private Triangle[] Triangles;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<string, ChopGroup> ChopGroups;

		[Token(Token = "0x40013CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private ChopGroupData[] chopGroupData;

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x828714", Offset = "0x828714", VA = "0x828714")]
		public CharacterMeshCache()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x82871C", Offset = "0x82871C", VA = "0x82871C")]
		public CharacterMeshCache(SkinnedMeshRenderer sourceMesh, IEnumerable<Choppable> choppables, float threshold = 0.5f)
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x828760", Offset = "0x828760", VA = "0x828760")]
		private void BuildChopGroups(SkinnedMeshRenderer sourceMeshRenderer, IEnumerable<Choppable> choppables, float threshold)
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x82ABD4", Offset = "0x82ABD4", VA = "0x82ABD4")]
		private void ReconcileOrphanTriangles(ICollection<Triangle> totalAssignedTris, SkinnedMeshRenderer sourceMeshRenderer)
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x8291D4", Offset = "0x8291D4", VA = "0x8291D4")]
		private Transform[] RecurseChildrenForBones(Choppable choppable)
		{
			return null;
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x82B170", Offset = "0x82B170", VA = "0x82B170")]
		public ChopGroup GetChopGroup(string groupName)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x8293C4", Offset = "0x8293C4", VA = "0x8293C4")]
		private void GetBoneMappedVertIndices(Transform[] localBones, Transform[] parentBones, Transform[] childBones, SkinnedMeshRenderer sourceMeshRenderer, float threshold, List<int> vertexIndices, List<int> internalRemapVerts, List<int> parentRemapVerts, List<int> parentVertexIndices, List<int> boneList, List<int> childBoneIndices)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x82A1F0", Offset = "0x82A1F0", VA = "0x82A1F0")]
		private Triangle[] GetTrianglesAndEdges(List<int> vertices, List<int> potentialEdges, List<int> internalBindVerts, List<int> finalEdges)
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x82B1E8", Offset = "0x82B1E8", VA = "0x82B1E8", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x82B3F0", Offset = "0x82B3F0", VA = "0x82B3F0", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000274")]
	public class ChopGroup
	{
		[Token(Token = "0x2000275")]
		[Flags]
		public enum VertBoneBinding
		{
			[Token(Token = "0x40013DE")]
			None = 0,
			[Token(Token = "0x40013DF")]
			Child = 2,
			[Token(Token = "0x40013E0")]
			Parent = 4
		}

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Triangle[] TriangleObjects;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] BoneIndices;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] TriangleList;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] VertexIndices;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int[] DefaultChopEdges;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] GroupRemapVerts;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int[] ParentRemapVerts;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VertBoneBinding[] VertBoneBindings;

		[Token(Token = "0x17000205")]
		public List<int> GroupRemapVertsTempList
		{
			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0x82C65C", Offset = "0x82C65C", VA = "0x82C65C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x82C664", Offset = "0x82C664", VA = "0x82C664")]
		public ChopGroup(Triangle[] triangles, int[] defaultEdges, List<int> internalRemapVerts, int[] parentRemapVerts, int[] boneIndices, IEnumerable<int> childBoneWeightedVerts, IEnumerable<int> parentBoneWeightedVerts, int totalVerts)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x82CF4C", Offset = "0x82CF4C", VA = "0x82CF4C")]
		public void FinalizeGroupRemapVerts()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x82CCB4", Offset = "0x82CCB4", VA = "0x82CCB4")]
		public void SetTriangleObjects(Triangle[] triangles)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000276")]
	public class Triangle
	{
		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] Indices;

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x82CFD0", Offset = "0x82CFD0", VA = "0x82CFD0")]
		public Triangle()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x82CFD8", Offset = "0x82CFD8", VA = "0x82CFD8")]
		public Triangle(int[] indices)
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x82D008", Offset = "0x82D008", VA = "0x82D008")]
		public bool ContainsVertex(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x82D064", Offset = "0x82D064", VA = "0x82D064")]
		public int ContainsNumberOfVertsFromList(IList<int> testIndices)
		{
			return default(int);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x82D350", Offset = "0x82D350", VA = "0x82D350")]
		public void DetermineDefaultEdges(List<int> potentialEdges, List<int> finalEdges)
		{
		}
	}
	[Token(Token = "0x2000277")]
	public class FastChop : PersistentSingleton<FastChop>
	{
		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject rokibePrefab;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool dontRandomizeEdgeVerts;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material chopfill;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material pinataChopFill;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool chopMe;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool gibMe;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Choppable chopTarget;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Choppable gibTarget;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform chopPlane;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Poolable MeshCapPrefab;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<string, CharacterMeshCache> meshCaches;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Header("Serialized Mesh Data")]
		private CharacterMeshCache rokibeData;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private CharacterMeshCache pinataRokibeData;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private CharacterMeshCache giantData;

		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private CharacterMeshCache mitchData;

		[Token(Token = "0x40013F1")]
		private const int OverlapSphereColliderMax = 16;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<int> edges;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly List<int> outerTris;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly List<int> innerTris;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly List<int> parentWeightIndices;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly List<int> targetWeightIndices;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly List<int> innerBoneList;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly List<int> outerBoneList;

		[Token(Token = "0x40013F9")]
		private const int HorizontalChopUpperBound = 120;

		[Token(Token = "0x40013FA")]
		private const int HorizontalChopLowerBound = 50;

		[Token(Token = "0x40013FB")]
		private const int MaxChopMeshSize = 10240;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly bool[] RemainOnParent;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static readonly int[] RemainOnParentToReset;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static int RemainOnParentIndex;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Mesh BakedMesh;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static AutoComponentPrefabPool<Poolable> capMeshesPool;

		[Token(Token = "0x17000206")]
		private static Material fill
		{
			[Token(Token = "0x6000F18")]
			[Address(RVA = "0x82D6EC", Offset = "0x82D6EC", VA = "0x82D6EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x82D780", Offset = "0x82D780", VA = "0x82D780")]
		public CharacterMeshCache GetMeshCache(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x82D814", Offset = "0x82D814", VA = "0x82D814", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x82DB08", Offset = "0x82DB08", VA = "0x82DB08", Slot = "5")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x82DBBC", Offset = "0x82DBBC", VA = "0x82DBBC")]
		private void OnSceneUnloaded(Scene scene)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x82DC18", Offset = "0x82DC18", VA = "0x82DC18")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode loadSceneMode)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x82DCC8", Offset = "0x82DCC8", VA = "0x82DCC8")]
		public static bool GibAndChopChildren(Choppable target, GameObject choppedBy)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x82ED3C", Offset = "0x82ED3C", VA = "0x82ED3C")]
		private static bool Gib(Choppable target, GameObject choppedBy)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x82E12C", Offset = "0x82E12C", VA = "0x82E12C")]
		public static bool Chop(Choppable target, Vector3 slicePoint, Vector3 sliceNormal, GameObject choppedBy, bool createOuterMesh = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x82F874", Offset = "0x82F874", VA = "0x82F874")]
		private static void CapAndSpurt(Choppable target, SkinnedMeshRenderer outerMeshRenderer, Mesh outerMesh, BoneWeight[] outerWeights)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x830188", Offset = "0x830188", VA = "0x830188")]
		private static GameObject CreateCap(SkinnedMeshRenderer renderer, Mesh mesh, BoneWeight[] weights, bool facing)
		{
			return null;
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x82F4A4", Offset = "0x82F4A4", VA = "0x82F4A4")]
		private static void RemapBoneWeights(BoneWeight[] boneWeights, List<int> weightIndices, List<int> boneList)
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x830E28", Offset = "0x830E28", VA = "0x830E28")]
		private static int GetRemappedIndex(int value, int remapValue, List<int> boneList)
		{
			return default(int);
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x82F940", Offset = "0x82F940", VA = "0x82F940")]
		private static bool GetTrianglesForSlice(Choppable target, Vector3 slicePoint, Vector3 sliceNormal, SkinnedMeshRenderer skinnedMeshRenderer, Mesh bakedMesh, Choppable ignoreLink, List<int> triangles, List<int> boneIndices, out List<int> edges, List<int> rootRemapIndices, List<int> parentRemapIndices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x83103C", Offset = "0x83103C", VA = "0x83103C")]
		private static void UpdateRemainOnParent(ICollection<int> rootRemapIndices, ICollection<int> parentRemapIndices, bool remainOnParent, int vert)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x8311EC", Offset = "0x8311EC", VA = "0x8311EC")]
		private static void MoveTriangleToParent(List<int> targetTriangleList, List<int> parentTriangleList, int index, int t0, int t1, int t2)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x830F78", Offset = "0x830F78", VA = "0x830F78")]
		private static bool WillBeSlicedOff(int vert, Vector3[] bakedMeshVerts, Vector3 slicePos, Vector3 sliceNormal, Transform meshTransform, float sideOfParent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x82F314", Offset = "0x82F314", VA = "0x82F314")]
		private static bool GetTrianglesForCut(Choppable target, Choppable ignoreLink, List<int> triangles, List<int> boneIndices, [Optional] List<int> edges, [Optional] List<int> rootRemapIndices, [Optional] List<int> parentRemapIndices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x831470", Offset = "0x831470", VA = "0x831470")]
		private static bool RecurseChoppablesForTriangles(Choppable target, Choppable ignoreLink, List<int> triangles, List<int> boneIndices)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x82F770", Offset = "0x82F770", VA = "0x82F770")]
		private static Vector3[] RandomizeEdgeVerts(Vector3[] verts, List<int> edgeIndices)
		{
			return null;
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x830390", Offset = "0x830390", VA = "0x830390")]
		private static void RecursivelySeverChildren(IList<Choppable> children, Transform parent, SkinnedMeshRenderer newMeshRenderer, GameObject choppedBy)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x8317E4", Offset = "0x8317E4", VA = "0x8317E4")]
		private static Quaternion CapOrientation(Vector3[] verts, List<int> edges)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x830794", Offset = "0x830794", VA = "0x830794")]
		private static Mesh CapMesh(Mesh parent, Mesh targetMesh, List<int> edges, bool facing, BoneWeight[] boneWeights)
		{
			return null;
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x831A14", Offset = "0x831A14", VA = "0x831A14")]
		public FastChop()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public class TestChop : MonoBehaviour
	{
		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Choppable limb;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform plane;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Enemy enemyPrefab;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private EnemySpawner enemySpawner;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("Press [Spacebar] to spawn enemy")]
		private EnemySetupInfo enemySetupInfo;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AutoComponentPrefabPool<Enemy> enemiesPool;

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x831CE0", Offset = "0x831CE0", VA = "0x831CE0")]
		public TestChop()
		{
		}
	}
}
namespace TFBGames.Attributes
{
	[Token(Token = "0x2000279")]
	public class AssetPathAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001407")]
		private const string ResourcesPath = "/Resources/";

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Type assetType;

		[Token(Token = "0x17000207")]
		public Type AssetType
		{
			[Token(Token = "0x6000F32")]
			[Address(RVA = "0x831CE8", Offset = "0x831CE8", VA = "0x831CE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x831CF0", Offset = "0x831CF0", VA = "0x831CF0")]
		public AssetPathAttribute(Type type)
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x831D20", Offset = "0x831D20", VA = "0x831D20")]
		public static string ConvertToResourcesPath(string path)
		{
			return null;
		}

		[Token(Token = "0x6000F35")]
		public static T Load<T>(string path) where T : UnityEngine.Object
		{
			return null;
		}
	}
}
namespace Effects
{
	[Token(Token = "0x200027A")]
	[RequireComponent(typeof(Fade))]
	public class Blink : MonoBehaviour
	{
		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float blinkDuration;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AnimationCurve curve;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Fade fade;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentBlinkDuration;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool isBlinking;

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x831DF0", Offset = "0x831DF0", VA = "0x831DF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0x831FAC", Offset = "0x831FAC", VA = "0x831FAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x832034", Offset = "0x832034", VA = "0x832034")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x832160", Offset = "0x832160", VA = "0x832160")]
		private void HandleDeviceTrackerOnRecenterPlayer()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x832194", Offset = "0x832194", VA = "0x832194")]
		private void TriggerBlink()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x8321D0", Offset = "0x8321D0", VA = "0x8321D0")]
		public Blink()
		{
		}
	}
	[Token(Token = "0x200027B")]
	[RequireComponent(typeof(Fade))]
	public class FadeController : MonoBehaviour
	{
		[Token(Token = "0x400140E")]
		private const int FramesBeforeFadeIn = 2;

		[Token(Token = "0x400140F")]
		private const float DelayBeforeFadeIn = 0.25f;

		[Token(Token = "0x4001410")]
		private const float FadeDuration = 0.75f;

		[Token(Token = "0x4001411")]
		private const float TitleAdditionalFade = 1.75f;

		[Token(Token = "0x4001412")]
		private const float InvFadeDuration = 1.3333334f;

		[Token(Token = "0x4001413")]
		private const float maxHitchThreshold = 0.025f;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Fade fade;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool delayFade;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool canFade;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool isFadingIn;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float currentTime;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float additionalDelayBeforeFade;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int framesToWait;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentDelay;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Action callback;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint entityCount;

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x8321D8", Offset = "0x8321D8", VA = "0x8321D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x8322E4", Offset = "0x8322E4", VA = "0x8322E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0x8324E0", Offset = "0x8324E0", VA = "0x8324E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x83260C", Offset = "0x83260C", VA = "0x83260C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x8327A0", Offset = "0x8327A0", VA = "0x8327A0")]
		private void FadeInTitle()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x8324C4", Offset = "0x8324C4", VA = "0x8324C4")]
		private void FadeIn(Action fadeComplete)
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x832814", Offset = "0x832814", VA = "0x832814")]
		private void FadeOut(Action fadeComplete)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x8327C4", Offset = "0x8327C4", VA = "0x8327C4")]
		private void SetupFade(bool fadingIn, Action fadeComplete)
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0x832824", Offset = "0x832824", VA = "0x832824")]
		public FadeController()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class UnitySplashFade : MonoBehaviour
	{
		[Token(Token = "0x200027D")]
		private enum State
		{
			[Token(Token = "0x4001427")]
			Waiting,
			[Token(Token = "0x4001428")]
			Idle,
			[Token(Token = "0x4001429")]
			FadeText
		}

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Image text;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float idleTime;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float textFadeTime;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color textColor;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color textFadeColor;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color tempColor;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float currentTime;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private State currentState;

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x83282C", Offset = "0x83282C", VA = "0x83282C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x8329A4", Offset = "0x8329A4", VA = "0x8329A4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x832B18", Offset = "0x832B18", VA = "0x832B18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x832994", Offset = "0x832994", VA = "0x832994")]
		private void SetFadeColor(ref Color color, Color target)
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x832C44", Offset = "0x832C44", VA = "0x832C44")]
		private void OnHmdConnected()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x832C50", Offset = "0x832C50", VA = "0x832C50")]
		public UnitySplashFade()
		{
		}
	}
}
namespace Controllers
{
	[Token(Token = "0x200027E")]
	public class ChainTest
	{
		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x832C64", Offset = "0x832C64", VA = "0x832C64")]
		public ChainTest()
		{
		}
	}
}
namespace KetosGames.SceneTransition
{
	[Token(Token = "0x200027F")]
	public class LoadingSpinner : MonoBehaviour
	{
		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x832C6C", Offset = "0x832C6C", VA = "0x832C6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x832E34", Offset = "0x832E34", VA = "0x832E34")]
		public LoadingSpinner()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class LoadingText : MonoBehaviour
	{
		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float lastUpdate;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int numElipses;

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x832E48", Offset = "0x832E48", VA = "0x832E48")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x832F60", Offset = "0x832F60", VA = "0x832F60")]
		public LoadingText()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x2000282")]
		[CompilerGenerated]
		private sealed class <InnerLoad>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400143E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400143F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001440")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x4001441")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string name;

			[Token(Token = "0x17000209")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F63")]
				[Address(RVA = "0x833E90", Offset = "0x833E90", VA = "0x833E90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700020A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F65")]
				[Address(RVA = "0x833ED8", Offset = "0x833ED8", VA = "0x833ED8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x833990", Offset = "0x833990", VA = "0x833990")]
			[DebuggerHidden]
			public <InnerLoad>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000F61")]
			[Address(RVA = "0x833A38", Offset = "0x833A38", VA = "0x833A38", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F62")]
			[Address(RVA = "0x833A3C", Offset = "0x833A3C", VA = "0x833A3C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x833E98", Offset = "0x833E98", VA = "0x833E98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SceneLoader SceneLoaderInstance;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject LoadingScreen;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Image FadeImage;

		[Token(Token = "0x4001430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Use with VR (For best results, use a loading scene or a solid color loading screen with VR.")]
		public bool VRMode;

		[Token(Token = "0x4001431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("When checked, use the Loading scene as the Loading screen (instead of the Loading UI).")]
		public bool UseSceneForLoadingScreen;

		[Token(Token = "0x4001432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The name of the Loading scene to load.")]
		public string LoadingSceneName;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("When checked, fade in the loading screen.")]
		public bool FadeInLoadingScreen;

		[Token(Token = "0x4001434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("When checked, fade out the loading screen.")]
		public bool FadeOutLoadingScreen;

		[Token(Token = "0x4001435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The number of seconds to animate the fade.")]
		public float FadeSeconds;

		[Token(Token = "0x4001436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The number of seconds to show the loading screen after fade in. Set it to 0 to go to the new scene as soon as it's ready.")]
		public float MinimumLoadingScreenSeconds;

		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The color to use in the fade animation.")]
		public Color FadeColor;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AsyncOperation SceneLoadingOperation;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool FadingIn;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool FadingOut;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float FadeTime;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Color FadeClearColor;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool Loading;

		[Token(Token = "0x17000208")]
		public static SceneLoader Instance
		{
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0x832F70", Offset = "0x832F70", VA = "0x832F70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x833180", Offset = "0x833180", VA = "0x833180")]
		public static void LoadScene(string name)
		{
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x8331D0", Offset = "0x8331D0", VA = "0x8331D0")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x833310", Offset = "0x833310", VA = "0x833310")]
		public void Start()
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x8333FC", Offset = "0x8333FC", VA = "0x8333FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x8335D4", Offset = "0x8335D4", VA = "0x8335D4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x83377C", Offset = "0x83377C", VA = "0x83377C")]
		public void BeginFadeOut()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x83336C", Offset = "0x83336C", VA = "0x83336C")]
		public void BeginFadeIn()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x833874", Offset = "0x833874", VA = "0x833874")]
		private void EndFadeIn()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x8338C8", Offset = "0x8338C8", VA = "0x8338C8")]
		private void EndFadeOut()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x833494", Offset = "0x833494", VA = "0x833494")]
		private void UpdateFadeIn()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x833534", Offset = "0x833534", VA = "0x833534")]
		private void UpdateFadeOut()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x8331A0", Offset = "0x8331A0", VA = "0x8331A0")]
		public void Load(string name)
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0x833900", Offset = "0x833900", VA = "0x833900")]
		[IteratorStateMachine(typeof(<InnerLoad>d__31))]
		private IEnumerator InnerLoad(string name)
		{
			return null;
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x83380C", Offset = "0x83380C", VA = "0x83380C")]
		private void UpdateCamera()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x8339B8", Offset = "0x8339B8", VA = "0x8339B8")]
		public SceneLoader()
		{
		}
	}
}
namespace KetosGames.SceneTransition.Example
{
	[Token(Token = "0x2000283")]
	public class GoScript : MonoBehaviour
	{
		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ToScene;

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x833EE0", Offset = "0x833EE0", VA = "0x833EE0")]
		public void GoToNextScene()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x833EE8", Offset = "0x833EE8", VA = "0x833EE8")]
		public GoScript()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public class SettingsScript : MonoBehaviour
	{
		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle UseSceneForLoadingScreen;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Toggle FadeInLoadingScreen;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Toggle FadeOutLoadingScreen;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InputField FadeSeconds;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InputField MinimumLoadingScreenSeconds;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InputField FadeColor;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SceneLoader SceneLoaderInstance;

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x833EF0", Offset = "0x833EF0", VA = "0x833EF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x83433C", Offset = "0x83433C", VA = "0x83433C")]
		public void ClickUseSceneForLoadingScene()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x834364", Offset = "0x834364", VA = "0x834364")]
		public void ClickFadeInLoadingScreen()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x83438C", Offset = "0x83438C", VA = "0x83438C")]
		public void ClickFadeOutLoadingScreen()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x8343B4", Offset = "0x8343B4", VA = "0x8343B4")]
		public void ChangeFadeSeconds()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x8343E0", Offset = "0x8343E0", VA = "0x8343E0")]
		public void ChangeMinimumLoadingScreenSeconds()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x83440C", Offset = "0x83440C", VA = "0x83440C")]
		public void ChangeFadeColor()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x8342A4", Offset = "0x8342A4", VA = "0x8342A4")]
		private string ColorToHex(Color32 color)
		{
			return null;
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x83443C", Offset = "0x83443C", VA = "0x83443C")]
		private Color HexToColor(string hex)
		{
			return default(Color);
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x834508", Offset = "0x834508", VA = "0x834508")]
		public SettingsScript()
		{
		}
	}
}
namespace FreeLives
{
	[Token(Token = "0x2000285")]
	public static class InputReader
	{
		[Token(Token = "0x2000286")]
		public enum Device
		{
			[Token(Token = "0x4001460")]
			Keyboard1,
			[Token(Token = "0x4001461")]
			Keyboard2,
			[Token(Token = "0x4001462")]
			Gamepad1,
			[Token(Token = "0x4001463")]
			Gamepad2,
			[Token(Token = "0x4001464")]
			Gamepad3,
			[Token(Token = "0x4001465")]
			Gamepad4
		}

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static KeyCode kb1Left;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static KeyCode kb1Right;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static KeyCode kb1Up;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static KeyCode kb1Down;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static KeyCode kb1A;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static KeyCode kb1B;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static KeyCode kb1X;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static KeyCode kb1Y;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static KeyCode kb1Start;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static KeyCode kb2Left;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static KeyCode kb2Right;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static KeyCode kb2Up;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static KeyCode kb2Down;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static KeyCode kb2A;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static KeyCode kb2B;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static KeyCode kb2X;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static KeyCode kb2Y;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static KeyCode kb2Start;

		[Token(Token = "0x400145C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static float deadZone;

		[Token(Token = "0x400145D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static InControl.InputDevice[] inControlDevices;

		[Token(Token = "0x400145E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static bool haveInitialized;

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x834510", Offset = "0x834510", VA = "0x834510")]
		public static void GetInput(InputState inputState)
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x834BA8", Offset = "0x834BA8", VA = "0x834BA8")]
		public static void GetInput(Device device, InputState inputState)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x8345DC", Offset = "0x8345DC", VA = "0x8345DC")]
		private static void CacheLastInput(InputState inputState)
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x83548C", Offset = "0x83548C", VA = "0x83548C")]
		public static void CheckControllers()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x834E20", Offset = "0x834E20", VA = "0x834E20")]
		private static void Initialize()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x834608", Offset = "0x834608", VA = "0x834608")]
		private static void GetKeyboard1Input(InputState inputState)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x83519C", Offset = "0x83519C", VA = "0x83519C")]
		private static void GetKeyboard2Input(InputState inputState)
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x834848", Offset = "0x834848", VA = "0x834848")]
		private static void GetInControlInput(InControl.InputDevice device, InputState inputState)
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x83546C", Offset = "0x83546C", VA = "0x83546C")]
		public static void ClearInputState(InputState inputState)
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x8358D4", Offset = "0x8358D4", VA = "0x8358D4")]
		public static void RumbleController(Device device, float intensity)
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x8353DC", Offset = "0x8353DC", VA = "0x8353DC")]
		private static bool GamepadHasBeenAssigned(Device device)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x835AAC", Offset = "0x835AAC", VA = "0x835AAC")]
		public static void DeviceAttached(InControl.InputDevice device)
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class InputState
	{
		[Token(Token = "0x4001466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float xAxis;

		[Token(Token = "0x4001467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float yAxis;

		[Token(Token = "0x4001468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float leftTrigger;

		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rightTrigger;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float rightXAxis;

		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rightYAxis;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool aButton;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool bButton;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool xButton;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool yButton;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool up;

		[Token(Token = "0x4001471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool down;

		[Token(Token = "0x4001472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool left;

		[Token(Token = "0x4001473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public bool right;

		[Token(Token = "0x4001474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool start;

		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool leftBumper;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool rightBumper;

		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool rightJoystickPress;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool wasAButton;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool wasBButton;

		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool wasXButton;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public bool wasYButton;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool wasUp;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool wasDown;

		[Token(Token = "0x400147E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool wasLeft;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public bool wasRight;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool wasStart;

		[Token(Token = "0x4001481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public bool wasLeftBumper;

		[Token(Token = "0x4001482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		public bool wasRightBumper;

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x835CAC", Offset = "0x835CAC", VA = "0x835CAC")]
		public InputState()
		{
		}
	}
	[Token(Token = "0x2000288")]
	public static class Math
	{
		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x835CB4", Offset = "0x835CB4", VA = "0x835CB4")]
		public static float GetAngle(float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x835CC4", Offset = "0x835CC4", VA = "0x835CC4")]
		public static float GetAngle(Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x835CD4", Offset = "0x835CD4", VA = "0x835CD4")]
		public static float GetAngle(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x835CE4", Offset = "0x835CE4", VA = "0x835CE4")]
		public static Vector2 NearestPointOnLine(Vector2 start, Vector2 end, Vector2 point, bool clampToSegment)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000289")]
	public class SoundController : MonoBehaviour
	{
		[Token(Token = "0x200028A")]
		public struct AudioDataCache
		{
			[Token(Token = "0x4001492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AudioClip clip;

			[Token(Token = "0x4001493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AudioData data;
		}

		[Token(Token = "0x4001483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SoundHolder globalSounds;

		[Token(Token = "0x4001484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundHolder uiSounds;

		[Token(Token = "0x4001485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SoundHolder crowdSounds;

		[Token(Token = "0x4001486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SoundHolder emperorSounds;

		[Token(Token = "0x4001487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SoundHolder voiceSounds;

		[Token(Token = "0x4001488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private SoundHolder angryCrowdSounds;

		[Token(Token = "0x4001489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SoundController instance;

		[Token(Token = "0x400148A")]
		private const float PlatformVolumeMod = 1f;

		[Token(Token = "0x400148B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<AudioSource> activeAudioSources;

		[Token(Token = "0x400148C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<AudioSource> inactiveAudioSources;

		[Token(Token = "0x400148D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool checkedThisFrame;

		[Token(Token = "0x400148E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int activeSourceCount;

		[Token(Token = "0x400148F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int inactiveSourceCount;

		[Token(Token = "0x4001490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int totalAudioSources;

		[Token(Token = "0x4001491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HashSet<SoundInfo> soundsPlayedThisFrame;

		[Token(Token = "0x1700020B")]
		public static SoundHolder EmperorSounds
		{
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x835D50", Offset = "0x835D50", VA = "0x835D50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020C")]
		public static SoundHolder CrowdSounds
		{
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0x835DA4", Offset = "0x835DA4", VA = "0x835DA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020D")]
		public static SoundHolder UISounds
		{
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0x835DF8", Offset = "0x835DF8", VA = "0x835DF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020E")]
		public static SoundHolder VoiceSounds
		{
			[Token(Token = "0x6000F87")]
			[Address(RVA = "0x835E4C", Offset = "0x835E4C", VA = "0x835E4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020F")]
		public static SoundHolder AngryCrowdSounds
		{
			[Token(Token = "0x6000F88")]
			[Address(RVA = "0x835EA0", Offset = "0x835EA0", VA = "0x835EA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x835EF4", Offset = "0x835EF4", VA = "0x835EF4")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x8360FC", Offset = "0x8360FC", VA = "0x8360FC")]
		private void CheckActiveAudioSources()
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x836318", Offset = "0x836318", VA = "0x836318")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x83639C", Offset = "0x83639C", VA = "0x83639C")]
		public static AudioSource PlaySoundEffect(string soundEffectName)
		{
			return null;
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x836458", Offset = "0x836458", VA = "0x836458")]
		public static AudioSource PlaySoundEffect(SoundHolder soundHolder, string soundEffectName)
		{
			return null;
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x836934", Offset = "0x836934", VA = "0x836934")]
		public static AudioSource PlaySoundEffect(string soundEffectName, float volume)
		{
			return null;
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x836A04", Offset = "0x836A04", VA = "0x836A04")]
		public static AudioSource PlaySoundEffect(SoundHolder soundHolder, string soundEffectName, float volume)
		{
			return null;
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x82E01C", Offset = "0x82E01C", VA = "0x82E01C")]
		public static AudioSource PlaySoundEffect(string soundEffectName, float volume, Vector3 pos, int priority = 128, bool applyReverb = true)
		{
			return null;
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x836E8C", Offset = "0x836E8C", VA = "0x836E8C")]
		public static void PlaySoundEffectDelayed(string soundEffectName, float volume, Vector3 pos, float delay)
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x836F90", Offset = "0x836F90", VA = "0x836F90")]
		public static void PlaySoundEffectDelayed(SoundHolder soundHolder, string soundEffectName, float volume, Vector3 pos, float delay)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x836BD0", Offset = "0x836BD0", VA = "0x836BD0")]
		public static AudioSource PlaySoundEffect(SoundHolder soundHolder, string soundEffectName, float volume, Vector3 pos, int priority = 128, bool applyReverb = true)
		{
			return null;
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x837178", Offset = "0x837178", VA = "0x837178")]
		public static AudioSource PlaySoundEffect(string soundEffectName, float volume, Vector3 pos, float pitch)
		{
			return null;
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x837280", Offset = "0x837280", VA = "0x837280")]
		public static AudioSource PlaySoundEffect(SoundHolder soundHolder, string soundEffectName, float volume, Vector3 pos, float pitch)
		{
			return null;
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x837490", Offset = "0x837490", VA = "0x837490")]
		public static AudioSource PlaySoundEffect(AudioClip clip, float volume, Vector3 pos, float pitch = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x837634", Offset = "0x837634", VA = "0x837634")]
		public static bool HasSound(SoundHolder holder, string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x836910", Offset = "0x836910", VA = "0x836910")]
		public static SoundInfo GetSoundInfo(SoundHolder soundHolder, string name)
		{
			return null;
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x837714", Offset = "0x837714", VA = "0x837714")]
		public static AudioClip GetAudioClip(string name)
		{
			return null;
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x8377B8", Offset = "0x8377B8", VA = "0x8377B8")]
		public static AudioClip GetAudioClip(SoundHolder soundHolder, string name)
		{
			return null;
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x837810", Offset = "0x837810", VA = "0x837810")]
		public static float GetDbValueAtSample(AudioClip clip, int timeSample, SoundHolder soundHolder, ref AudioDataCache cached)
		{
			return default(float);
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x837AE8", Offset = "0x837AE8", VA = "0x837AE8")]
		private static void AddSourceToGroup(AudioSource source)
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x836614", Offset = "0x836614", VA = "0x836614")]
		private static AudioSource CreateAudioSource()
		{
			return null;
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x836920", Offset = "0x836920", VA = "0x836920")]
		private static float GetPitch(float variance)
		{
			return default(float);
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x837B78", Offset = "0x837B78", VA = "0x837B78")]
		public SoundController()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class SoundHolder : MonoBehaviour
	{
		[Token(Token = "0x4001494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SoundInfo> sounds;

		[Token(Token = "0x4001495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<AudioData> data;

		[Token(Token = "0x4001496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, SoundInfo> dictionary;

		[Token(Token = "0x4001497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, AudioData> dataDictionary;

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0x837978", Offset = "0x837978", VA = "0x837978")]
		public AudioData GetAudioData(AudioClip clip)
		{
			return default(AudioData);
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0x837644", Offset = "0x837644", VA = "0x837644")]
		public bool HasSound(string soundInfoName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0x83769C", Offset = "0x83769C", VA = "0x83769C")]
		public SoundInfo GetSoundInfo(string soundInfoName)
		{
			return null;
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0x837C00", Offset = "0x837C00", VA = "0x837C00")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0x837C04", Offset = "0x837C04", VA = "0x837C04")]
		private void CreateAudioDictionary()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0x838094", Offset = "0x838094", VA = "0x838094")]
		public SoundHolder()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public interface ISoundHolder
	{
	}
}
