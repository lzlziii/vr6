using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using Assets.Scripts.Common;
using DG.Tweening;
using DG.Tweening.Core;
using Il2CppDummyDll;
using Pico.Platform;
using Pico.Platform.Models;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Rendering;
using UnityEngine.UI;
using UnityEngine.XR;
using Valve.Newtonsoft.Json;
using Valve.VR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class SimpleGPUInstancingExample : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Prefab;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material InstancedMaterial;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x6F8A64", Offset = "0x6F8A64", VA = "0x6F8A64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x6F8CB8", Offset = "0x6F8CB8", VA = "0x6F8CB8")]
	public SimpleGPUInstancingExample()
	{
	}
}
[Token(Token = "0x2000003")]
public class SimpleMoveExample : MonoBehaviour
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_previous;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_target;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 m_originalPosition;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 BoundingVolume;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float Speed;

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x6F8CC0", Offset = "0x6F8CC0", VA = "0x6F8CC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x6F8D3C", Offset = "0x6F8D3C", VA = "0x6F8D3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x6F8FF8", Offset = "0x6F8FF8", VA = "0x6F8FF8")]
	public SimpleMoveExample()
	{
	}
}
[Token(Token = "0x2000004")]
public class Smear : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<Vector3> m_recentPositions;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int FramesBufferSize;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer Renderer;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material m_instancedMaterial;

	[Token(Token = "0x17000001")]
	private Material InstancedMaterial
	{
		[Token(Token = "0x6000006")]
		[Address(RVA = "0x6F905C", Offset = "0x6F905C", VA = "0x6F905C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000007")]
		[Address(RVA = "0x6F9064", Offset = "0x6F9064", VA = "0x6F9064")]
		set
		{
		}
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x6F906C", Offset = "0x6F906C", VA = "0x6F906C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x6F90A0", Offset = "0x6F90A0", VA = "0x6F90A0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x6F9224", Offset = "0x6F9224", VA = "0x6F9224")]
	public Smear()
	{
	}
}
[Token(Token = "0x2000005")]
[ExecuteInEditMode]
public class PostProcessExample : MonoBehaviour
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material PostProcessMat;

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x6F5A2C", Offset = "0x6F5A2C", VA = "0x6F5A2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x6F5ABC", Offset = "0x6F5ABC", VA = "0x6F5ABC")]
	private void OnRenderImage(RenderTexture src, RenderTexture dest)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x6F5B40", Offset = "0x6F5B40", VA = "0x6F5B40")]
	public PostProcessExample()
	{
	}
}
[Token(Token = "0x2000006")]
[ExecuteInEditMode]
public class SpriteMaskController : MonoBehaviour
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SpriteRenderer m_spriteRenderer;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4 m_uvs;

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x6FB89C", Offset = "0x6FB89C", VA = "0x6FB89C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x6FB940", Offset = "0x6FB940", VA = "0x6FB940")]
	public SpriteMaskController()
	{
	}
}
[Token(Token = "0x2000007")]
public class AnimationControl : MonoBehaviour
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string currentAnimation;

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x10135DC", Offset = "0x10135DC", VA = "0x10135DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x10135E0", Offset = "0x10135E0", VA = "0x10135E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x10135E4", Offset = "0x10135E4", VA = "0x10135E4")]
	public void SetAnimation(string animationName)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x10136A4", Offset = "0x10136A4", VA = "0x10136A4")]
	public void SetAnimationIdle()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x1013734", Offset = "0x1013734", VA = "0x1013734")]
	public void SetDeathAnimation(int numOfClips)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x1013824", Offset = "0x1013824", VA = "0x1013824")]
	public AnimationControl()
	{
	}
}
[Token(Token = "0x2000008")]
public class DeathButtonControl : MonoBehaviour
{
	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int countOfAnimations;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button button;

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x1019DF8", Offset = "0x1019DF8", VA = "0x1019DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x101A028", Offset = "0x101A028", VA = "0x101A028")]
	private void Update()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x101A02C", Offset = "0x101A02C", VA = "0x101A02C")]
	public DeathButtonControl()
	{
	}
}
[Token(Token = "0x2000009")]
public class KillSwitch : MonoBehaviour
{
	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator anim;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x7ED984", Offset = "0x7ED984", VA = "0x7ED984")]
	private void Start()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x7ED9DC", Offset = "0x7ED9DC", VA = "0x7ED9DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x7EDA58", Offset = "0x7EDA58", VA = "0x7EDA58")]
	public KillSwitch()
	{
	}
}
[Token(Token = "0x200000A")]
public class PanelControll : MonoBehaviour
{
	[Token(Token = "0x600001C")]
	[Address(RVA = "0x801394", Offset = "0x801394", VA = "0x801394")]
	private void Start()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x801398", Offset = "0x801398", VA = "0x801398")]
	private void Update()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x80139C", Offset = "0x80139C", VA = "0x80139C")]
	public void PanelToggle()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x8013F8", Offset = "0x8013F8", VA = "0x8013F8")]
	public PanelControll()
	{
	}
}
[Token(Token = "0x200000B")]
public class PeriodicShake : MonoBehaviour
{
	[Token(Token = "0x200024A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E968", Offset = "0x58E968")]
	private sealed class <Shake>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PeriodicShake <>4__this;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsed>5__2;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <randomStartX>5__3;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <randomStartY>5__4;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 <originalCamPos>5__5;

		[Token(Token = "0x170000AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0x802AF4", Offset = "0x802AF4", VA = "0x802AF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0x802B5C", Offset = "0x802B5C", VA = "0x802B5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x802860", Offset = "0x802860", VA = "0x802860")]
		[DebuggerHidden]
		public <Shake>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x8028AC", Offset = "0x8028AC", VA = "0x8028AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x8028B0", Offset = "0x8028B0", VA = "0x8028B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x802AFC", Offset = "0x802AFC", VA = "0x802AFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speed;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float magnitude;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool test;

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x80277C", Offset = "0x80277C", VA = "0x80277C")]
	public void PlayShake()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x8027DC", Offset = "0x8027DC", VA = "0x8027DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x8027F0", Offset = "0x8027F0", VA = "0x8027F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x59377C", Offset = "0x59377C")]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x80288C", Offset = "0x80288C", VA = "0x80288C")]
	public PeriodicShake()
	{
	}
}
[Token(Token = "0x200000C")]
public class LivingParticleArrayController : MonoBehaviour
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] affectors;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4[] positions;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystemRenderer psr;

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x7F82A8", Offset = "0x7F82A8", VA = "0x7F82A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x7F8348", Offset = "0x7F8348", VA = "0x7F8348")]
	private void Update()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x7F84E8", Offset = "0x7F84E8", VA = "0x7F84E8")]
	public LivingParticleArrayController()
	{
	}
}
[Token(Token = "0x200000D")]
public class ParticleGridGenerator : MonoBehaviour
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float particleSize;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color particleColor;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool randomColorAlpha;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float xDistance;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float yDistance;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float zDistance;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int xSize;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int ySize;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int zSize;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float OffsetEven;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool updateEveryFrame;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float even;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] positions;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ParticleSystem ps;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Vector4> customData;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Vector4> customData2;

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x8020A8", Offset = "0x8020A8", VA = "0x8020A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x8021F8", Offset = "0x8021F8", VA = "0x8021F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x802104", Offset = "0x802104", VA = "0x802104")]
	public void UpdateGrid()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x802254", Offset = "0x802254", VA = "0x802254")]
	private void GenerateGrid()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x8023D8", Offset = "0x8023D8", VA = "0x8023D8")]
	private void GenerateParticles()
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x80255C", Offset = "0x80255C", VA = "0x80255C")]
	private void CreateOffsetVector()
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x802698", Offset = "0x802698", VA = "0x802698")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x8026A8", Offset = "0x8026A8", VA = "0x8026A8")]
	public ParticleGridGenerator()
	{
	}
}
[Token(Token = "0x200000E")]
public class LivingParticleController : MonoBehaviour
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform affector;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystemRenderer psr;

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x7F84F0", Offset = "0x7F84F0", VA = "0x7F84F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x7F8548", Offset = "0x7F8548", VA = "0x7F8548")]
	private void Update()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x7F861C", Offset = "0x7F861C", VA = "0x7F861C")]
	public LivingParticleController()
	{
	}
}
[Token(Token = "0x200000F")]
public class LPWWaterChunk : MonoBehaviour
{
	[Token(Token = "0x6000032")]
	[Address(RVA = "0x7F5EC0", Offset = "0x7F5EC0", VA = "0x7F5EC0")]
	public LPWWaterChunk()
	{
	}
}
[Token(Token = "0x2000010")]
public class AudiodrmManager : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AudiodrmManager _this;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _InvokeTime;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<AudioSource> _SourceList;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int _Tag;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _SourceTime;

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x10142A8", Offset = "0x10142A8", VA = "0x10142A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x1014398", Offset = "0x1014398", VA = "0x1014398")]
	public static AudiodrmManager GetSingleton()
	{
		return null;
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x10143E8", Offset = "0x10143E8", VA = "0x10143E8")]
	public void PlaySource()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x10144A4", Offset = "0x10144A4", VA = "0x10144A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x10144A8", Offset = "0x10144A8", VA = "0x10144A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x10144F4", Offset = "0x10144F4", VA = "0x10144F4")]
	public AudiodrmManager()
	{
	}
}
[Token(Token = "0x2000011")]
public class EndKuai : MonoBehaviour
{
	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TestJishi _jishi;

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x101AE20", Offset = "0x101AE20", VA = "0x101AE20")]
	private void Start()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x101AE24", Offset = "0x101AE24", VA = "0x101AE24")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x101AE40", Offset = "0x101AE40", VA = "0x101AE40")]
	private void Update()
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x101AE44", Offset = "0x101AE44", VA = "0x101AE44")]
	public EndKuai()
	{
	}
}
[Serializable]
[Token(Token = "0x2000012")]
public class ArchiveData
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public PlayerData PlayerDatas;

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x101387C", Offset = "0x101387C", VA = "0x101387C")]
	public void SetLock()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x101394C", Offset = "0x101394C", VA = "0x101394C")]
	public ArchiveData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000013")]
public enum LockState
{
	[Token(Token = "0x4000035")]
	Lock,
	[Token(Token = "0x4000036")]
	UnLock
}
[Serializable]
[Token(Token = "0x2000014")]
public class ChapterClass
{
	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int _Chapter;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int _Level;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public double _Time;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int _Star;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LockState _LockState;

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x10178D0", Offset = "0x10178D0", VA = "0x10178D0")]
	public ChapterClass(int chapter, int level, float time)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x1013930", Offset = "0x1013930", VA = "0x1013930")]
	public void SetLock()
	{
	}
}
[Serializable]
[Token(Token = "0x2000015")]
public class PlayerData
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string _Id;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ChapterClass> _ChapterClasseList;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Language language;

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x6F49A4", Offset = "0x6F49A4", VA = "0x6F49A4")]
	public PlayerData()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x6F40B0", Offset = "0x6F40B0", VA = "0x6F40B0")]
	public bool SetLevelTime(double time, int chapter = 1, int level = 1)
	{
		return default(bool);
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x6F4AE4", Offset = "0x6F4AE4", VA = "0x6F4AE4")]
	private void OnUploadScoreLeaderboardInfoEvent(double time)
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x6F3F58", Offset = "0x6F3F58", VA = "0x6F3F58")]
	public bool SetLevelUnLock()
	{
		return default(bool);
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x6F4B6C", Offset = "0x6F4B6C", VA = "0x6F4B6C")]
	public double GetUnLockTime(int chapter, int level)
	{
		return default(double);
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x6F4CBC", Offset = "0x6F4CBC", VA = "0x6F4CBC")]
	public int GetUnLockStar(int chapter, int level)
	{
		return default(int);
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x6F4E0C", Offset = "0x6F4E0C", VA = "0x6F4E0C")]
	public bool JudgeLock(int chapter, int level)
	{
		return default(bool);
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x6F50BC", Offset = "0x6F50BC", VA = "0x6F50BC")]
	public bool JudgeChapterLock(int chapter)
	{
		return default(bool);
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x6F536C", Offset = "0x6F536C", VA = "0x6F536C")]
	public void SetLanguage(Language langu)
	{
	}
}
[Token(Token = "0x2000016")]
public enum Language
{
	[Token(Token = "0x4000040")]
	Chinese,
	[Token(Token = "0x4000041")]
	English
}
[Token(Token = "0x2000017")]
public delegate void SettinLanguage();
[Token(Token = "0x2000018")]
public class LevelManager
{
	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LevelManager instances;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Language language;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int CurrentChapter;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int CurrentLevel;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isDemo;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int index;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<string> demoSceneName;

	[Token(Token = "0x17000002")]
	public static LevelManager Instances
	{
		[Token(Token = "0x600004E")]
		[Address(RVA = "0x7F6114", Offset = "0x7F6114", VA = "0x7F6114")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000003")]
	public bool IsDemo
	{
		[Token(Token = "0x6000051")]
		[Address(RVA = "0x7F7DD0", Offset = "0x7F7DD0", VA = "0x7F7DD0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000052")]
		[Address(RVA = "0x7F7DD8", Offset = "0x7F7DD8", VA = "0x7F7DD8")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public string DemoSceneName
	{
		[Token(Token = "0x6000053")]
		[Address(RVA = "0x7F7DE4", Offset = "0x7F7DE4", VA = "0x7F7DE4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000001")]
	public event SettinLanguage SettinLanguage
	{
		[Token(Token = "0x600004F")]
		[Address(RVA = "0x7F7C88", Offset = "0x7F7C88", VA = "0x7F7C88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5937E0", Offset = "0x5937E0")]
		add
		{
		}
		[Token(Token = "0x6000050")]
		[Address(RVA = "0x7F7D2C", Offset = "0x7F7D2C", VA = "0x7F7D2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5937F0", Offset = "0x5937F0")]
		remove
		{
		}
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x7F7E90", Offset = "0x7F7E90", VA = "0x7F7E90")]
	public string GetNextDemoSceneName()
	{
		return null;
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x7F7F24", Offset = "0x7F7F24", VA = "0x7F7F24")]
	public void SetSceneIndex(string sceneName)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x7F7FB4", Offset = "0x7F7FB4", VA = "0x7F7FB4")]
	public void SetIsDemo(bool demo, List<string> sceneName)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x7F7FC8", Offset = "0x7F7FC8", VA = "0x7F7FC8")]
	public void SetCurrentLevel(int level)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x7F7FD0", Offset = "0x7F7FD0", VA = "0x7F7FD0")]
	public void SetCurrentChapter(int chapter)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x7F7FD8", Offset = "0x7F7FD8", VA = "0x7F7FD8")]
	public void ResetLevel()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x7F6190", Offset = "0x7F6190", VA = "0x7F6190")]
	public void SetLanguage(Language langu)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x7F7FE0", Offset = "0x7F7FE0", VA = "0x7F7FE0")]
	public LevelManager()
	{
	}
}
[Token(Token = "0x2000019")]
public class PlayerDataManager
{
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PlayerDataManager instances;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool _IsNewGame;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ArchiveData archiveData;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string path;

	[Token(Token = "0x17000005")]
	public static PlayerDataManager Instances
	{
		[Token(Token = "0x600005C")]
		[Address(RVA = "0x6F3230", Offset = "0x6F3230", VA = "0x6F3230")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000006")]
	public ArchiveData ArchiveData
	{
		[Token(Token = "0x600005D")]
		[Address(RVA = "0x6F5374", Offset = "0x6F5374", VA = "0x6F5374")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x6F32AC", Offset = "0x6F32AC", VA = "0x6F32AC")]
	public void Init()
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x6F537C", Offset = "0x6F537C", VA = "0x6F537C")]
	private void SaveGameUserData(ArchiveData data)
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x6F42F8", Offset = "0x6F42F8", VA = "0x6F42F8")]
	public void SaveGameData()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x6F54A4", Offset = "0x6F54A4", VA = "0x6F54A4")]
	public PlayerDataManager()
	{
	}
}
[Token(Token = "0x200001A")]
public class StaticFun
{
	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string keyValue;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x6FD7A0", Offset = "0x6FD7A0", VA = "0x6FD7A0")]
	public static void SaveToDisk(object data, string path)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x6FD964", Offset = "0x6FD964", VA = "0x6FD964")]
	public static void SaveToDisk(string data, string path)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x6FD928", Offset = "0x6FD928", VA = "0x6FD928")]
	public static void DeleteToDisk(string path)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x6F5530", Offset = "0x6F5530", VA = "0x6F5530")]
	public static string GetAppFilePath()
	{
		return null;
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x6FD8C0", Offset = "0x6FD8C0", VA = "0x6FD8C0")]
	public static string FixedWindowsPath(string path)
	{
		return null;
	}

	[Token(Token = "0x6000067")]
	public static T GetDataFromDisk<T>(string path) where T : new()
	{
		return (T)null;
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x6FBE3C", Offset = "0x6FBE3C", VA = "0x6FBE3C")]
	public static string GetStringFromDisk(string path)
	{
		return null;
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x6FDA6C", Offset = "0x6FDA6C", VA = "0x6FDA6C")]
	public static string GetLevelsConfigPath(string fileWithNoExcension, string fileName, bool Excension = false)
	{
		return null;
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x6FDB7C", Offset = "0x6FDB7C", VA = "0x6FDB7C")]
	public static string GetPath(string fileWithNoExcension, string fileName, bool Excension = false)
	{
		return null;
	}

	[Token(Token = "0x600006B")]
	public static T GetConfigFromDisk<T>(string path) where T : new()
	{
		return (T)null;
	}

	[Token(Token = "0x600006C")]
	public static T GetDataFromDiskByPath<T>(string path) where T : new()
	{
		return (T)null;
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x6FDC00", Offset = "0x6FDC00", VA = "0x6FDC00")]
	public static string bianma(string s)
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x6FDD4C", Offset = "0x6FDD4C", VA = "0x6FDD4C")]
	public static string jiema(string s)
	{
		return null;
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x6FDEF4", Offset = "0x6FDEF4", VA = "0x6FDEF4")]
	public static string ConductEncryption(string input, string key)
	{
		return null;
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x6FBE64", Offset = "0x6FBE64", VA = "0x6FBE64")]
	public static string ConductDecrypt(string dense, string key = "")
	{
		return null;
	}

	[Token(Token = "0x6000071")]
	public static string DataToJson<T>(T data)
	{
		return null;
	}

	[Token(Token = "0x6000072")]
	public static T JsonToData<T>(string jsondata)
	{
		return (T)null;
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x6FE0B8", Offset = "0x6FE0B8", VA = "0x6FE0B8")]
	public StaticFun()
	{
	}
}
[Token(Token = "0x200001B")]
public class FollowTarget : MonoBehaviour
{
	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Target;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 DistanceVector3;

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x101B3A0", Offset = "0x101B3A0", VA = "0x101B3A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x101B3A4", Offset = "0x101B3A4", VA = "0x101B3A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x101B4D4", Offset = "0x101B4D4", VA = "0x101B4D4")]
	public FollowTarget()
	{
	}
}
[Token(Token = "0x200001C")]
public class HandController : MonoBehaviour
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator HandAnimator;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Isleft;

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x7ECE40", Offset = "0x7ECE40", VA = "0x7ECE40")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x7ECF78", Offset = "0x7ECF78", VA = "0x7ECF78")]
	private void Hand_Controller(string aniname, bool state)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x7ED034", Offset = "0x7ED034", VA = "0x7ED034")]
	private void Update()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x7ED2AC", Offset = "0x7ED2AC", VA = "0x7ED2AC")]
	public HandController()
	{
	}
}
[Token(Token = "0x200001D")]
public class MoveInteractable : MonoBehaviour
{
	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected Material defaultMaterial;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590664", Offset = "0x590664")]
	public GameObject customTracer;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59069C", Offset = "0x59069C")]
	public GameObject customCursor;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5906D4", Offset = "0x5906D4")]
	protected GameObject actualContainer;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59070C", Offset = "0x59070C")]
	protected GameObject actualTracer;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590744", Offset = "0x590744")]
	protected GameObject actualCursor;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59077C", Offset = "0x59077C")]
	public float scaleFactor;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5907B4", Offset = "0x5907B4")]
	public float cursorScaleMultiplier;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5907EC", Offset = "0x5907EC")]
	protected Vector3 cursorOriginalScale;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590824", Offset = "0x590824")]
	public float maximumLength;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59085C", Offset = "0x59085C")]
	public LayerMask layersToIngnore;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590894", Offset = "0x590894")]
	public bool cursorMatchTargetRotation;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5908CC", Offset = "0x5908CC")]
	public Color invalidCollisionColor;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590904", Offset = "0x590904")]
	public Color validCollisionColor;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public RaycastHit destinationHit;

	[Token(Token = "0x4000062")]
	protected const float BEAM_ADJUST_OFFSET = 0.0001f;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected Color previousColor;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected Color currentColor;

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x7FD140", Offset = "0x7FD140", VA = "0x7FD140")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x7FD374", Offset = "0x7FD374", VA = "0x7FD374")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x7FD378", Offset = "0x7FD378", VA = "0x7FD378")]
	private void DestroyPointerObject()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x7FD1DC", Offset = "0x7FD1DC", VA = "0x7FD1DC")]
	private void CreatePointerObjects()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x7FD638", Offset = "0x7FD638", VA = "0x7FD638")]
	private void CreateCursor()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x7FD42C", Offset = "0x7FD42C", VA = "0x7FD42C")]
	private void CreateTracer()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x7FD8C8", Offset = "0x7FD8C8", VA = "0x7FD8C8")]
	private void SetupMaterialRenderer(GameObject givenObject)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x7FD9A4", Offset = "0x7FD9A4", VA = "0x7FD9A4")]
	public void UpdateRenderer()
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x7FDB40", Offset = "0x7FDB40", VA = "0x7FDB40")]
	private void SetPointerAppearance(float tracerLenght)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x7FD9C8", Offset = "0x7FD9C8", VA = "0x7FD9C8")]
	private float CastRayForward()
	{
		return default(float);
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x7FDE54", Offset = "0x7FDE54", VA = "0x7FDE54")]
	private void CherckRayHit(bool rayHit, RaycastHit pointerCollidedWith)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x7FDCD4", Offset = "0x7FDCD4", VA = "0x7FDCD4")]
	private void CherckRayMiss(bool rayHit, RaycastHit pointerCollidedWith)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x7FDEC4", Offset = "0x7FDEC4", VA = "0x7FDEC4")]
	private void PointetEnter(RaycastHit givenHit)
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x7FE0DC", Offset = "0x7FE0DC", VA = "0x7FE0DC")]
	private void PointerExit(RaycastHit givenHit)
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x7FE018", Offset = "0x7FE018", VA = "0x7FE018")]
	private void ChangeColor(Color givenColor)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x7FE230", Offset = "0x7FE230", VA = "0x7FE230")]
	private void ChangeMaterial(Color givenColor)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x7FE288", Offset = "0x7FE288", VA = "0x7FE288")]
	private void ChangeMaterialColor(GameObject givenObject, Color givenColor)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x7FE36C", Offset = "0x7FE36C", VA = "0x7FE36C")]
	private void Start()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x7FE370", Offset = "0x7FE370", VA = "0x7FE370")]
	private void Update()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x7FE394", Offset = "0x7FE394", VA = "0x7FE394")]
	public MoveInteractable()
	{
	}
}
[Token(Token = "0x200001E")]
public enum GameState
{
	[Token(Token = "0x4000066")]
	START,
	[Token(Token = "0x4000067")]
	ROCK_CLIMBING,
	[Token(Token = "0x4000068")]
	DEATH,
	[Token(Token = "0x4000069")]
	IMPACT,
	[Token(Token = "0x400006A")]
	ENDGAME
}
[Token(Token = "0x200001F")]
public class GirpManager : MonoBehaviour
{
	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody Body;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Pull _Left;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Pull _Right;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 _BodyStatePos;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public GameState _State;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GirpManager _this;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CameraEffect _CameraEffect;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<RouteOrgan> _RouteOrganList;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 _BodyEndPos;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public PlayerPosManager _PlayerPosManager;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool _Death;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Pull _Grasp;

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x101B62C", Offset = "0x101B62C", VA = "0x101B62C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x101B6A4", Offset = "0x101B6A4", VA = "0x101B6A4")]
	public static GirpManager GetSingleton()
	{
		return null;
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x101B6F4", Offset = "0x101B6F4", VA = "0x101B6F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x101B6F8", Offset = "0x101B6F8", VA = "0x101B6F8")]
	private void SetPlayerPos()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x101B78C", Offset = "0x101B78C", VA = "0x101B78C")]
	public void SetState(GameState state)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x101BC34", Offset = "0x101BC34", VA = "0x101BC34")]
	private void InvokeSetBodyEndPos()
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x101BC6C", Offset = "0x101BC6C", VA = "0x101BC6C")]
	private void InvokeTimeScale()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x101BC88", Offset = "0x101BC88", VA = "0x101BC88")]
	private void ImpactCallback()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x101BCA0", Offset = "0x101BCA0", VA = "0x101BCA0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x101BD18", Offset = "0x101BD18", VA = "0x101BD18")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x101BD1C", Offset = "0x101BD1C", VA = "0x101BD1C")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x101BD20", Offset = "0x101BD20", VA = "0x101BD20")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x101BE64", Offset = "0x101BE64", VA = "0x101BE64")]
	private void RockClimbing()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x101C27C", Offset = "0x101C27C", VA = "0x101C27C")]
	private void OneRockClimbing()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x101BB9C", Offset = "0x101BB9C", VA = "0x101BB9C")]
	private void RouteOrganInit()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x101C4E0", Offset = "0x101C4E0", VA = "0x101C4E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x101C4E4", Offset = "0x101C4E4", VA = "0x101C4E4")]
	public GirpManager()
	{
	}
}
[Token(Token = "0x2000020")]
public class Decrypt : MonoBehaviour
{
	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField ValueDense;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string keyValue;

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x101A034", Offset = "0x101A034", VA = "0x101A034")]
	public void OnBtnDecrypt()
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x101A0E8", Offset = "0x101A0E8", VA = "0x101A0E8")]
	private string ConductDecrypt(string dense, string key)
	{
		return null;
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x101A2A8", Offset = "0x101A2A8", VA = "0x101A2A8")]
	public Decrypt()
	{
	}
}
[Token(Token = "0x2000021")]
public class Encryption : MonoBehaviour
{
	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputField InputCtt;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField InputRes;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string keyValue;

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x101A598", Offset = "0x101A598", VA = "0x101A598")]
	public void OnBtnEncryption()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x101A64C", Offset = "0x101A64C", VA = "0x101A64C")]
	private string ConductEncryption(string input, string key)
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x101A810", Offset = "0x101A810", VA = "0x101A810")]
	public Encryption()
	{
	}
}
[Token(Token = "0x2000022")]
public class LeaderboardController : MonoBehaviour
{
	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject LeaderboardPanel;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject LeaderboardImage;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject BusySpinnerImage;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RankItme playerRank;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<RankItme> rankItmeList;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int Chapter;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int Level;

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x7F6234", Offset = "0x7F6234", VA = "0x7F6234")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x7F6238", Offset = "0x7F6238", VA = "0x7F6238")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x7F62D4", Offset = "0x7F62D4", VA = "0x7F62D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x7F6370", Offset = "0x7F6370", VA = "0x7F6370")]
	private void RefshGlobalQrRanking()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x7F65BC", Offset = "0x7F65BC", VA = "0x7F65BC")]
	private void UpdateRankPrefabList(List<Ranking> rankings)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x7F67D0", Offset = "0x7F67D0", VA = "0x7F67D0")]
	public void CreateLeaderboard(int chapter, int level)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x7F6884", Offset = "0x7F6884", VA = "0x7F6884")]
	public void SetLeaderboardPanelActive(bool active)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x7F6570", Offset = "0x7F6570", VA = "0x7F6570")]
	private void SetBusySpinnerActive(bool active)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x7F698C", Offset = "0x7F698C", VA = "0x7F698C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x7F6990", Offset = "0x7F6990", VA = "0x7F6990")]
	public LeaderboardController()
	{
	}
}
[Token(Token = "0x2000023")]
public class RankItme : MonoBehaviour
{
	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text UserRankingText;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text UserNameText;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text UserScoreText;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject playerCube;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Cube;

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x6F7340", Offset = "0x6F7340", VA = "0x6F7340")]
	public void InitRankItme(Ranking ranking, bool isplayer)
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x6F753C", Offset = "0x6F753C", VA = "0x6F753C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x6F7540", Offset = "0x6F7540", VA = "0x6F7540")]
	private void Update()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x6F7544", Offset = "0x6F7544", VA = "0x6F7544")]
	public RankItme()
	{
	}
}
[Token(Token = "0x2000024")]
public class AudioManager : MonoBehaviour
{
	[Token(Token = "0x200024B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E978", Offset = "0x58E978")]
	private sealed class <SetDiedVolume>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioManager <>4__this;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float volume;

		[Token(Token = "0x170000AF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0x1014238", Offset = "0x1014238", VA = "0x1014238", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0x10142A0", Offset = "0x10142A0", VA = "0x10142A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x1013A28", Offset = "0x1013A28", VA = "0x1013A28")]
		[DebuggerHidden]
		public <SetDiedVolume>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x10140F8", Offset = "0x10140F8", VA = "0x10140F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x10140FC", Offset = "0x10140FC", VA = "0x10140FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x1014240", Offset = "0x1014240", VA = "0x1014240", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200024C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E988", Offset = "0x58E988")]
	private sealed class <RestoreVolume>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioManager <>4__this;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<float> floatVolumes;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioMixerGroup[] <audioMixers>5__2;

		[Token(Token = "0x170000B1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0x1014088", Offset = "0x1014088", VA = "0x1014088", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B34")]
			[Address(RVA = "0x10140F0", Offset = "0x10140F0", VA = "0x10140F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x1013DDC", Offset = "0x1013DDC", VA = "0x1013DDC")]
		[DebuggerHidden]
		public <RestoreVolume>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x1013E70", Offset = "0x1013E70", VA = "0x1013E70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1013E74", Offset = "0x1013E74", VA = "0x1013E74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x1014090", Offset = "0x1014090", VA = "0x1014090", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000088")]
	public const string MusicVolume = "MusicVolume";

	[Token(Token = "0x4000089")]
	public const string SoundEffectVolume = "SoundEffectVolume";

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string DiedVolume;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DiedClipTime;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float DiedVolumeFloat;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MinVolumeFloat;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float AudioTime;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsAudio;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AudioManager Instances;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioMixer audioMixer;

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x1013954", Offset = "0x1013954", VA = "0x1013954")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x10139A8", Offset = "0x10139A8", VA = "0x10139A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593800", Offset = "0x593800")]
	private IEnumerator SetDiedVolume(float volume)
	{
		return null;
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x1013A54", Offset = "0x1013A54", VA = "0x1013A54")]
	private void Start()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x1013A58", Offset = "0x1013A58", VA = "0x1013A58")]
	public void PlayDiedAudioClip()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x1013B08", Offset = "0x1013B08", VA = "0x1013B08")]
	private List<float> ReadVolume()
	{
		return null;
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x1013C8C", Offset = "0x1013C8C", VA = "0x1013C8C")]
	private void SetVolumeMin()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x1013D60", Offset = "0x1013D60", VA = "0x1013D60")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593864", Offset = "0x593864")]
	private IEnumerator RestoreVolume(List<float> floatVolumes)
	{
		return null;
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x1013E08", Offset = "0x1013E08", VA = "0x1013E08")]
	private void Update()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x1013E0C", Offset = "0x1013E0C", VA = "0x1013E0C")]
	public AudioManager()
	{
	}
}
[Token(Token = "0x2000025")]
public class CallTest : Singleton<CallTest>
{
	[Token(Token = "0x200024D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E998", Offset = "0x58E998")]
	private sealed class <UploadGameData>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CallTest <>4__this;

		[Token(Token = "0x170000B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B38")]
			[Address(RVA = "0x1016068", Offset = "0x1016068", VA = "0x1016068", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0x10160D0", Offset = "0x10160D0", VA = "0x10160D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x10157D4", Offset = "0x10157D4", VA = "0x10157D4")]
		[DebuggerHidden]
		public <UploadGameData>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1015E18", Offset = "0x1015E18", VA = "0x1015E18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x1015E1C", Offset = "0x1015E1C", VA = "0x1015E1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x1016070", Offset = "0x1016070", VA = "0x1016070", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000092")]
	private const string DLL = "ZamerOpenAPI";

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly string gameName;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly uint gameId;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly string developID;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string companyName;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string toKen;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string checkCode;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly string appKey;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly string secret;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string path;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string url;

	[PreserveSig]
	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x1015310", Offset = "0x1015310", VA = "0x1015310")]
	private static extern bool TransferCommonParms(string appKey, string secret);

	[PreserveSig]
	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x10153B8", Offset = "0x10153B8", VA = "0x10153B8")]
	private static extern IntPtr UploadGameProgress(uint gameId, string gameName, uint barrier, uint score, string gameStoreDt, string file);

	[PreserveSig]
	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x1015490", Offset = "0x1015490", VA = "0x1015490")]
	private static extern IntPtr QueryGameProgress(uint gameId);

	[PreserveSig]
	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x1015510", Offset = "0x1015510", VA = "0x1015510")]
	private static extern bool DownloadGameProgress(string url, string filename);

	[PreserveSig]
	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x10155B8", Offset = "0x10155B8", VA = "0x10155B8")]
	private static extern IntPtr SaveGameProperty(uint gameId, uint itemSpecId, string itemVal, string actionType);

	[PreserveSig]
	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x1015670", Offset = "0x1015670", VA = "0x1015670")]
	private static extern IntPtr QueryGameProperty(uint gameId);

	[PreserveSig]
	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x10156F0", Offset = "0x10156F0", VA = "0x10156F0")]
	private static extern IntPtr GetOpenId();

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x1015764", Offset = "0x1015764", VA = "0x1015764")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5938C8", Offset = "0x5938C8")]
	public IEnumerator UploadGameData()
	{
		return null;
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x1015800", Offset = "0x1015800", VA = "0x1015800")]
	public void UploadData()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x10158F8", Offset = "0x10158F8", VA = "0x10158F8")]
	private string GetLastUrl(string str)
	{
		return null;
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x1015A8C", Offset = "0x1015A8C", VA = "0x1015A8C")]
	public void GetUserData()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x1015C68", Offset = "0x1015C68", VA = "0x1015C68")]
	private string GetName(int star)
	{
		return null;
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x1015CD0", Offset = "0x1015CD0", VA = "0x1015CD0")]
	public CallTest()
	{
	}
}
[Token(Token = "0x2000026")]
public class LeaderboardManager : MonoBehaviour
{
	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LeaderboardManager Instance;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Ranking> rankingList;

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x7F6A00", Offset = "0x7F6A00", VA = "0x7F6A00")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x7F6A90", Offset = "0x7F6A90", VA = "0x7F6A90")]
	public void UpdateRankingInfo(List<Ranking> rankings)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x7F6B30", Offset = "0x7F6B30", VA = "0x7F6B30")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x7F6B34", Offset = "0x7F6B34", VA = "0x7F6B34")]
	private void Update()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x7F6B38", Offset = "0x7F6B38", VA = "0x7F6B38")]
	public LeaderboardManager()
	{
	}
}
[Token(Token = "0x2000027")]
public class LoadSceneManager : MonoBehaviour
{
	[Token(Token = "0x200024E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E9A8", Offset = "0x58E9A8")]
	private sealed class <LoadScenes>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string sceneName;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LoadSceneManager <>4__this;

		[Token(Token = "0x170000B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0x7F899C", Offset = "0x7F899C", VA = "0x7F899C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0x7F8A04", Offset = "0x7F8A04", VA = "0x7F8A04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x7F8714", Offset = "0x7F8714", VA = "0x7F8714")]
		[DebuggerHidden]
		public <LoadScenes>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x7F881C", Offset = "0x7F881C", VA = "0x7F881C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x7F8820", Offset = "0x7F8820", VA = "0x7F8820", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x7F89A4", Offset = "0x7F89A4", VA = "0x7F89A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LoadSceneManager Instance;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool loadScene;

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x7F8624", Offset = "0x7F8624", VA = "0x7F8624")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x7F8690", Offset = "0x7F8690", VA = "0x7F8690")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x7F8694", Offset = "0x7F8694", VA = "0x7F8694")]
	private void Update()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x7F6E4C", Offset = "0x7F6E4C", VA = "0x7F6E4C")]
	public void LoadScene(string sceneName)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x7F8698", Offset = "0x7F8698", VA = "0x7F8698")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x59392C", Offset = "0x59392C")]
	private IEnumerator LoadScenes(string sceneName)
	{
		return null;
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x7F8740", Offset = "0x7F8740", VA = "0x7F8740")]
	private void SetCanLoadScene()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x7F8810", Offset = "0x7F8810", VA = "0x7F8810")]
	public LoadSceneManager()
	{
	}
}
[Token(Token = "0x2000028")]
public class PlayerPosManager : MonoBehaviour
{
	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Target;

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x6F57E0", Offset = "0x6F57E0", VA = "0x6F57E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x6F57E4", Offset = "0x6F57E4", VA = "0x6F57E4")]
	public void SetTargetPos()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x6F58F0", Offset = "0x6F58F0", VA = "0x6F58F0")]
	public PlayerPosManager()
	{
	}
}
[Token(Token = "0x2000029")]
public class SoundEffectManager : MonoBehaviour
{
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SoundEffectManager Instances;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource _AudioSource;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip _Menu_Click24;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource DeadAudioSource;

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x6F9294", Offset = "0x6F9294", VA = "0x6F9294")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x6F9338", Offset = "0x6F9338", VA = "0x6F9338")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x6F93A0", Offset = "0x6F93A0", VA = "0x6F93A0")]
	public void StopOnceAudioSource(bool play = true)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x6F93BC", Offset = "0x6F93BC", VA = "0x6F93BC")]
	public void PlayOnceAudioSound(Vector3 pos, AudioClip clip)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x6F6B9C", Offset = "0x6F6B9C", VA = "0x6F6B9C")]
	public void PlayTriggerAudioSound()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x6F9444", Offset = "0x6F9444", VA = "0x6F9444")]
	public void PlayDeadAudioSound()
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x6F9460", Offset = "0x6F9460", VA = "0x6F9460")]
	public SoundEffectManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200002A")]
public class ScoreClass
{
	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int musicScoreId;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string exact;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string combo;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int score;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float point;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string calorie;

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x6F82DC", Offset = "0x6F82DC", VA = "0x6F82DC")]
	public ScoreClass()
	{
	}
}
[Serializable]
[Token(Token = "0x200002B")]
public class LoginResult
{
	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string resType;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string cfg;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string sid;

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x7F8A0C", Offset = "0x7F8A0C", VA = "0x7F8A0C")]
	public LoginResult()
	{
	}
}
[Serializable]
[Token(Token = "0x200002C")]
public class AddUserResult
{
	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string resType;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sid;

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x1005544", Offset = "0x1005544", VA = "0x1005544")]
	public AddUserResult()
	{
	}
}
[Serializable]
[Token(Token = "0x200002D")]
public class UpdateUserResult
{
	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string resType;

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x6FFB98", Offset = "0x6FFB98", VA = "0x6FFB98")]
	public UpdateUserResult()
	{
	}
}
[Serializable]
[Token(Token = "0x200002E")]
public class AddScoreResult
{
	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string resType;

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x100553C", Offset = "0x100553C", VA = "0x100553C")]
	public AddScoreResult()
	{
	}
}
[Serializable]
[Token(Token = "0x200002F")]
public class QrRankingResult
{
	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string resType;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Ranking> rankings;

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x6F7140", Offset = "0x6F7140", VA = "0x6F7140")]
	public QrRankingResult()
	{
	}
}
[Serializable]
[Token(Token = "0x2000030")]
public class Ranking
{
	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int userId;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string uid;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string nick;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string icon;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int score;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int rank;

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x6F754C", Offset = "0x6F754C", VA = "0x6F754C")]
	public Ranking()
	{
	}
}
[Token(Token = "0x2000031")]
public class NetMsgType
{
	[Token(Token = "0x40000BB")]
	public const string NetMsg_Url = "http://47.94.45.55:8080/climb/base/";

	[Token(Token = "0x40000BC")]
	public const string NetMsg_qrRanking = "qrRanking?userId=";

	[Token(Token = "0x40000BD")]
	public const string NetMsg_addScore = "addScore?userId=";

	[Token(Token = "0x40000BE")]
	public const string NetMsg_qrLetters = "qrLetters?userId=";

	[Token(Token = "0x40000BF")]
	public const string NetMsg_addLetter = "addLetter?userId=";

	[Token(Token = "0x40000C0")]
	public const string NetMsg_qrExteriors = "qrExteriors?userId=";

	[Token(Token = "0x40000C1")]
	public const string NetMsg_qrChapters = "qrChapters?userId=";

	[Token(Token = "0x40000C2")]
	public const string NetMsg_qrPackages = "qrPackages?userId=";

	[Token(Token = "0x40000C3")]
	public const string NetMsg_addUser = "addUser?userId=";

	[Token(Token = "0x40000C4")]
	public const string NetMsg_updateUser = "updateUser?userId=";

	[Token(Token = "0x40000C5")]
	public const string NetMsg_qrUser = "qrUser";

	[Token(Token = "0x40000C6")]
	public const string NetMsg_login = "login?userId=";

	[Token(Token = "0x40000C7")]
	public const string NetMsg_qrRankingCalorie = "qrRankingCalorie?userId=";

	[Token(Token = "0x40000C8")]
	public const string NetMsg_qrAlbums = "qrAlbums";

	[Token(Token = "0x40000C9")]
	public const string NetMsg_qrMusics = "qrMusics";

	[Token(Token = "0x40000CA")]
	public const string NetMsg_HotSongRanking = "qrRankingHot";

	[Token(Token = "0x40000CB")]
	public const string NetMsg_qrRankingScore = "qrRankingHotScore";

	[Token(Token = "0x40000CC")]
	public const string NetMsg_qrActivity = "qrActivitys";

	[Token(Token = "0x40000CD")]
	public const string NetMsg_qrTiantiRankingActivity = "qrRankingActivity";

	[Token(Token = "0x40000CE")]
	public const string NetMsg_qrTtInfo = "qrTtInfo";

	[Token(Token = "0x40000CF")]
	public const string NetMsg_qrOpponents = "qrOpponents";

	[Token(Token = "0x40000D0")]
	public const string NetMsg_AddMatch = "addMatch";

	[Token(Token = "0x40000D1")]
	public const string NetMsg_TtTop = "qrTtTop";

	[Token(Token = "0x40000D2")]
	public const string NetMsg_addHot = "addHot";

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x80082C", Offset = "0x80082C", VA = "0x80082C")]
	public NetMsgType()
	{
	}
}
[Token(Token = "0x2000032")]
public class CommonClass
{
	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x1017948", Offset = "0x1017948", VA = "0x1017948")]
	public CommonClass()
	{
	}
}
[Token(Token = "0x2000033")]
public class NetManager : MonoSingleton<NetManager>
{
	[Token(Token = "0x200024F")]
	public delegate void ResultCall(string jsonStr);

	[Token(Token = "0x2000250")]
	public delegate void DownLoadResultCall(int musicid, string jsonStr);

	[Token(Token = "0x2000251")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E9B8", Offset = "0x58E9B8")]
	private sealed class <SendPost>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string _url;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ResultCall CallBack;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WWW <www>5__2;

		[Token(Token = "0x170000B7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0x800284", Offset = "0x800284", VA = "0x800284", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0x8002EC", Offset = "0x8002EC", VA = "0x8002EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x7FE8A0", Offset = "0x7FE8A0", VA = "0x7FE8A0")]
		[DebuggerHidden]
		public <SendPost>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x800124", Offset = "0x800124", VA = "0x800124", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x800128", Offset = "0x800128", VA = "0x800128", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x80028C", Offset = "0x80028C", VA = "0x80028C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000252")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E9C8", Offset = "0x58E9C8")]
	private sealed class <GetMsg>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string _url;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ResultCall CallBack;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WWW <getData>5__2;

		[Token(Token = "0x170000B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0x8000B4", Offset = "0x8000B4", VA = "0x8000B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0x80011C", Offset = "0x80011C", VA = "0x80011C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x7FE948", Offset = "0x7FE948", VA = "0x7FE948")]
		[DebuggerHidden]
		public <GetMsg>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x7FFBD8", Offset = "0x7FFBD8", VA = "0x7FFBD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x7FFBDC", Offset = "0x7FFBDC", VA = "0x7FFBDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x8000BC", Offset = "0x8000BC", VA = "0x8000BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000253")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E9D8", Offset = "0x58E9D8")]
	private sealed class <SendPost>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string _url;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WWWForm wwwForm;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ResultCall CallBack;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WWW <www>5__2;

		[Token(Token = "0x170000BB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x80045C", Offset = "0x80045C", VA = "0x80045C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0x8004C4", Offset = "0x8004C4", VA = "0x8004C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x7FE9F8", Offset = "0x7FE9F8", VA = "0x7FE9F8")]
		[DebuggerHidden]
		public <SendPost>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x8002F4", Offset = "0x8002F4", VA = "0x8002F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x8002F8", Offset = "0x8002F8", VA = "0x8002F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x800464", Offset = "0x800464", VA = "0x800464", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x7FE824", Offset = "0x7FE824", VA = "0x7FE824")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593990", Offset = "0x593990")]
	private IEnumerator SendPost(string _url, ResultCall CallBack)
	{
		return null;
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x7FE8CC", Offset = "0x7FE8CC", VA = "0x7FE8CC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5939F4", Offset = "0x5939F4")]
	private IEnumerator GetMsg(string _url, ResultCall CallBack)
	{
		return null;
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x7FE974", Offset = "0x7FE974", VA = "0x7FE974")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593A58", Offset = "0x593A58")]
	private IEnumerator SendPost(string _url, WWWForm wwwForm, ResultCall CallBack)
	{
		return null;
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x7FEA24", Offset = "0x7FEA24", VA = "0x7FEA24")]
	public void Login()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x7FEB6C", Offset = "0x7FEB6C", VA = "0x7FEB6C")]
	private void LoginCallBack(string jsonStr)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x7FF074", Offset = "0x7FF074", VA = "0x7FF074")]
	private void againLogin()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x7FEF50", Offset = "0x7FEF50", VA = "0x7FEF50")]
	public void AddUser()
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x7FF0CC", Offset = "0x7FF0CC", VA = "0x7FF0CC")]
	private void AddUserCallBack(string jsonStr)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x7FEDCC", Offset = "0x7FEDCC", VA = "0x7FEDCC")]
	public void UpdateUser()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x7FF2D0", Offset = "0x7FF2D0", VA = "0x7FF2D0")]
	private void UpdateUserCallBack(string jsonStr)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x7FF4D8", Offset = "0x7FF4D8", VA = "0x7FF4D8")]
	public void AddScore(double time0)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x7FF670", Offset = "0x7FF670", VA = "0x7FF670")]
	private string GetLevelId(int chapter, int level)
	{
		return null;
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x7FF704", Offset = "0x7FF704", VA = "0x7FF704")]
	private void AddScoreCallBack(string jsonStr)
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x7F68A4", Offset = "0x7F68A4", VA = "0x7F68A4")]
	public void GetQrRanking(int chapter, int level)
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x7FF8E0", Offset = "0x7FF8E0", VA = "0x7FF8E0")]
	private void GetQrRankingCallBack(string jsonStr)
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x7FFAE8", Offset = "0x7FFAE8", VA = "0x7FFAE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x7FFB64", Offset = "0x7FFB64", VA = "0x7FFB64")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x7FFB68", Offset = "0x7FFB68", VA = "0x7FFB68")]
	public NetManager()
	{
	}
}
[Token(Token = "0x2000034")]
public class PlayerBodyCollision : MonoBehaviour
{
	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _Power;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float _YPower;

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x6F46D8", Offset = "0x6F46D8", VA = "0x6F46D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x6F46DC", Offset = "0x6F46DC", VA = "0x6F46DC")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x6F4984", Offset = "0x6F4984", VA = "0x6F4984")]
	private void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x6F4988", Offset = "0x6F4988", VA = "0x6F4988")]
	private void OnTriggerStay(Collider collider)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x6F498C", Offset = "0x6F498C", VA = "0x6F498C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x6F4990", Offset = "0x6F4990", VA = "0x6F4990")]
	public PlayerBodyCollision()
	{
	}
}
[Token(Token = "0x2000035")]
public class PlayerWallCollision : MonoBehaviour
{
	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isFade;

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x6F58F8", Offset = "0x6F58F8", VA = "0x6F58F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0x6F58FC", Offset = "0x6F58FC", VA = "0x6F58FC")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x6F598C", Offset = "0x6F598C", VA = "0x6F598C")]
	private void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x6F5A1C", Offset = "0x6F5A1C", VA = "0x6F5A1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x6F5A20", Offset = "0x6F5A20", VA = "0x6F5A20")]
	private void OnTriggerStay(Collider collider)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x6F5A24", Offset = "0x6F5A24", VA = "0x6F5A24")]
	public PlayerWallCollision()
	{
	}
}
[Serializable]
[Token(Token = "0x2000036")]
public enum PullLR
{
	[Token(Token = "0x40000D7")]
	L,
	[Token(Token = "0x40000D8")]
	R
}
[Token(Token = "0x2000037")]
public enum PullGripType
{
	[Token(Token = "0x40000DA")]
	DOWN,
	[Token(Token = "0x40000DB")]
	UP
}
[Token(Token = "0x2000038")]
public class Pull : MonoBehaviour
{
	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 prevPos;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool canGrip;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PullLR _PullLR;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator _Animator;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private panyandian _panyandian;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<GameObject> _AudioList;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PullGripType _GripType;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RockClimbingPoint _RockClimbing;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int _ReferenceCounting;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public MyButton button;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _PressTime;

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x6F5DC0", Offset = "0x6F5DC0", VA = "0x6F5DC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x6F5E18", Offset = "0x6F5E18", VA = "0x6F5E18")]
	private void Start()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x6F5E1C", Offset = "0x6F5E1C", VA = "0x6F5E1C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x6F6420", Offset = "0x6F6420", VA = "0x6F6420")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x6F6764", Offset = "0x6F6764", VA = "0x6F6764")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x6F6908", Offset = "0x6F6908", VA = "0x6F6908")]
	private void Update()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x6F6C74", Offset = "0x6F6C74", VA = "0x6F6C74")]
	public Pull()
	{
	}
}
[Token(Token = "0x2000039")]
public class PullHand : MonoBehaviour
{
	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform _Node;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool _State;

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x6F6CE4", Offset = "0x6F6CE4", VA = "0x6F6CE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x6F6CE8", Offset = "0x6F6CE8", VA = "0x6F6CE8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x6F6DB4", Offset = "0x6F6DB4", VA = "0x6F6DB4")]
	public PullHand()
	{
	}
}
[Token(Token = "0x200003A")]
public enum RockClimbingState
{
	[Token(Token = "0x40000EA")]
	STANDBY,
	[Token(Token = "0x40000EB")]
	TOUCH,
	[Token(Token = "0x40000EC")]
	GRASP
}
[Token(Token = "0x200003B")]
public class RockClimbingPoint : MonoBehaviour
{
	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RockClimbingState _State;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject _NodeObj;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject _OnObj;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject _OffObj;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform _Point;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource _AudioSource;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 _BoxMax;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 _BoxMix;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public BoxCollider _BoxCollider;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public RockClimbingState _RState;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public RockClimbingState _LState;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x6F79C0", Offset = "0x6F79C0", VA = "0x6F79C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x6F7A18", Offset = "0x6F7A18", VA = "0x6F7A18")]
	private void Start()
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x6F6348", Offset = "0x6F6348", VA = "0x6F6348")]
	public void SetState(RockClimbingState sta, PullLR LR)
	{
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x6F7C38", Offset = "0x6F7C38", VA = "0x6F7C38")]
	public void SetState(RockClimbingState sta)
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x6F7CEC", Offset = "0x6F7CEC", VA = "0x6F7CEC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x6F7CF0", Offset = "0x6F7CF0", VA = "0x6F7CF0")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x6F7CF4", Offset = "0x6F7CF4", VA = "0x6F7CF4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x6F7A80", Offset = "0x6F7A80", VA = "0x6F7A80")]
	public void ShowNode()
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x6F7AB4", Offset = "0x6F7AB4", VA = "0x6F7AB4")]
	public void ShowOn()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x6F7AE8", Offset = "0x6F7AE8", VA = "0x6F7AE8")]
	public void ShowOff()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x6F7CF8", Offset = "0x6F7CF8", VA = "0x6F7CF8")]
	public void Hide()
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x6F7D50", Offset = "0x6F7D50", VA = "0x6F7D50")]
	private void Update()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x6F7D54", Offset = "0x6F7D54", VA = "0x6F7D54")]
	public RockClimbingPoint()
	{
	}
}
[Token(Token = "0x200003C")]
public enum RouteOrganType
{
	[Token(Token = "0x40000F9")]
	SINGLE,
	[Token(Token = "0x40000FA")]
	MANY
}
[Token(Token = "0x200003D")]
public enum RouteOrganState
{
	[Token(Token = "0x40000FC")]
	START,
	[Token(Token = "0x40000FD")]
	RUN,
	[Token(Token = "0x40000FE")]
	END
}
[Token(Token = "0x200003E")]
public class RouteOrgan : MonoBehaviour
{
	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RouteOrganType _Type;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject _ShowObj;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<RouteOrganSpot> _RouteOrganSpotList;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RouteOrganState _State;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int _Tag;

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x6F7D5C", Offset = "0x6F7D5C", VA = "0x6F7D5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x6F7DF4", Offset = "0x6F7DF4", VA = "0x6F7DF4")]
	public void Init()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x6F7EA0", Offset = "0x6F7EA0", VA = "0x6F7EA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x6F7FD0", Offset = "0x6F7FD0", VA = "0x6F7FD0")]
	public void OnShowObj()
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x6F7FFC", Offset = "0x6F7FFC", VA = "0x6F7FFC")]
	public RouteOrgan()
	{
	}
}
[Token(Token = "0x200003F")]
public class RouteOrganSpot : MonoBehaviour
{
	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RouteOrgan _RouteOrgan;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool _State;

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x6F806C", Offset = "0x6F806C", VA = "0x6F806C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x6F8110", Offset = "0x6F8110", VA = "0x6F8110")]
	private void Start()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x6F8114", Offset = "0x6F8114", VA = "0x6F8114")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x6F8148", Offset = "0x6F8148", VA = "0x6F8148")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x6F8150", Offset = "0x6F8150", VA = "0x6F8150")]
	private void Update()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x6F8154", Offset = "0x6F8154", VA = "0x6F8154")]
	public RouteOrganSpot()
	{
	}
}
[Token(Token = "0x2000040")]
public class BackInteractable : InteractableBase
{
	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MyButton leftButton;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MyButton rightButton;

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x1014874", Offset = "0x1014874", VA = "0x1014874")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x1014964", Offset = "0x1014964", VA = "0x1014964")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x1014A88", Offset = "0x1014A88", VA = "0x1014A88")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x1014B78", Offset = "0x1014B78", VA = "0x1014B78")]
	public BackInteractable()
	{
	}
}
[Token(Token = "0x2000041")]
public class ChapterInteractable : InteractableBase
{
	[Token(Token = "0x600012F")]
	[Address(RVA = "0x1017928", Offset = "0x1017928", VA = "0x1017928", Slot = "4")]
	protected override void InvorkButton()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x1017930", Offset = "0x1017930", VA = "0x1017930", Slot = "5")]
	public override void PlayAnimater()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x1017938", Offset = "0x1017938", VA = "0x1017938", Slot = "6")]
	public override void StopAnimater()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x1017940", Offset = "0x1017940", VA = "0x1017940")]
	public ChapterInteractable()
	{
	}
}
[Token(Token = "0x2000042")]
public class InteractableBase : MonoBehaviour
{
	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator Animator;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button ActableButton;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isSelect;

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x7ED5F4", Offset = "0x7ED5F4", VA = "0x7ED5F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x7ED698", Offset = "0x7ED698", VA = "0x7ED698")]
	public void SetInvorkButton(bool active = true)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x7ED6AC", Offset = "0x7ED6AC", VA = "0x7ED6AC", Slot = "4")]
	protected virtual void InvorkButton()
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x7ED79C", Offset = "0x7ED79C", VA = "0x7ED79C", Slot = "5")]
	public virtual void PlayAnimater()
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x7ED844", Offset = "0x7ED844", VA = "0x7ED844", Slot = "6")]
	public virtual void StopAnimater()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x7ED8E8", Offset = "0x7ED8E8", VA = "0x7ED8E8")]
	public InteractableBase()
	{
	}
}
[Token(Token = "0x2000043")]
public class LevelInteractable : InteractableBase
{
	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LevelButton LevelButton;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LevelPanel LevelPanel;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject TimeGo;

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x7F79A8", Offset = "0x7F79A8", VA = "0x7F79A8", Slot = "4")]
	protected override void InvorkButton()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x7F79AC", Offset = "0x7F79AC", VA = "0x7F79AC", Slot = "5")]
	public override void PlayAnimater()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x7F7A4C", Offset = "0x7F7A4C", VA = "0x7F7A4C", Slot = "6")]
	public override void StopAnimater()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x7F7C80", Offset = "0x7F7C80", VA = "0x7F7C80")]
	public LevelInteractable()
	{
	}
}
[Token(Token = "0x2000044")]
public class PlayerInteractable : MonoBehaviour
{
	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoveInteractable PointerRenderer;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputDevice RightDevice;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MyButton myButton;

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x6F55E0", Offset = "0x6F55E0", VA = "0x6F55E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x6F560C", Offset = "0x6F560C", VA = "0x6F560C")]
	private void Update()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x6F57D8", Offset = "0x6F57D8", VA = "0x6F57D8")]
	public PlayerInteractable()
	{
	}
}
[Token(Token = "0x2000045")]
public class LookInputModule : BaseInputModule
{
	[Token(Token = "0x2000254")]
	public enum Mode
	{
		[Token(Token = "0x4001165")]
		Pointer,
		[Token(Token = "0x4001166")]
		Submit
	}

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 _CurrentPoint;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject _CurrentGameObject;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LookInputModule _singleton;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string submitButtonName;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string controlAxisName;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool useSmoothAxis;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float smoothAxisMultiplier;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float steppedAxisStepsPerSecond;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool _guiRaycastHit;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	private bool _controlAxisUsed;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	private bool _buttonUsed;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Mode mode;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool useLookDrag;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	public bool useLookDragSlider;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
	public bool useLookDragScrollbar;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x87")]
	public bool useCursor;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float normalCursorScale;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool scaleCursorWithDistance;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public RectTransform cursor;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool useSelectColor;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	public bool useSelectColorOnButton;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	public bool useSelectColorOnToggle;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public Color selectColor;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool ignoreInputsWhenLookAway;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	public bool deselectWhenLookAway;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private PointerEventData lookData;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Color currentSelectedNormalColor;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool currentSelectedNormalColorValid;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Color currentSelectedHighlightedColor;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject currentLook;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject currentPressed;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameObject currentDragging;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float nextAxisActionTime;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private bool isClickingDown;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject commonRoot;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Button curButton;

	[Token(Token = "0x17000007")]
	public static LookInputModule singleton
	{
		[Token(Token = "0x6000140")]
		[Address(RVA = "0x7F8A14", Offset = "0x7F8A14", VA = "0x7F8A14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000008")]
	public bool guiRaycastHit
	{
		[Token(Token = "0x6000141")]
		[Address(RVA = "0x7F8A64", Offset = "0x7F8A64", VA = "0x7F8A64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000009")]
	public bool controlAxisUsed
	{
		[Token(Token = "0x6000142")]
		[Address(RVA = "0x7F8A6C", Offset = "0x7F8A6C", VA = "0x7F8A6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000A")]
	public bool buttonUsed
	{
		[Token(Token = "0x6000143")]
		[Address(RVA = "0x7F8A74", Offset = "0x7F8A74", VA = "0x7F8A74")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x7F8A7C", Offset = "0x7F8A7C", VA = "0x7F8A7C")]
	private PointerEventData GetLookPointerEventData()
	{
		return null;
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x7F8C5C", Offset = "0x7F8C5C", VA = "0x7F8C5C")]
	private void UpdateCursor(PointerEventData lookData)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x7F8FB4", Offset = "0x7F8FB4", VA = "0x7F8FB4")]
	private void SetSelectedColor(GameObject go)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x7F91B0", Offset = "0x7F91B0", VA = "0x7F91B0")]
	private void RestoreColor(GameObject go)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x7F92C4", Offset = "0x7F92C4", VA = "0x7F92C4")]
	public void ClearSelection()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x7F9374", Offset = "0x7F9374", VA = "0x7F9374")]
	private void Select(GameObject go)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x7F9464", Offset = "0x7F9464", VA = "0x7F9464")]
	private bool SendUpdateEventToSelectedObject()
	{
		return default(bool);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x7F95B8", Offset = "0x7F95B8", VA = "0x7F95B8", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x7FA51C", Offset = "0x7FA51C", VA = "0x7FA51C")]
	public LookInputModule()
	{
	}
}
[Token(Token = "0x2000046")]
public class OculusHandController : MonoBehaviour
{
	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SDK_BaseController.ControllerHandType HandType;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public SDK_BaseController.ButtonTypes ButtonType;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float frequency;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float amplitude;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float VibrationTime;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float vTime;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool vBool;

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x80102C", Offset = "0x80102C", VA = "0x80102C")]
	private void Start()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x801030", Offset = "0x801030", VA = "0x801030")]
	private void Update()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x80111C", Offset = "0x80111C", VA = "0x80111C")]
	public OculusHandController()
	{
	}
}
[Token(Token = "0x2000047")]
public class PicoCallBack : MonoBehaviour
{
	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string IS_SUCCESS;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string MSG;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string CODE;

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x802B64", Offset = "0x802B64", VA = "0x802B64")]
	public void LoginCallback(string LoginInfo)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x802D34", Offset = "0x802D34", VA = "0x802D34")]
	public void QueryOrPayCallback(string queryOrPayInfo)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x802F50", Offset = "0x802F50", VA = "0x802F50")]
	public void UserInfoCallback(string userInfo)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x802E94", Offset = "0x802E94", VA = "0x802E94")]
	public void SetMassage(string massage)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x803288", Offset = "0x803288", VA = "0x803288")]
	public GameObject GetCurrentGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x8032D4", Offset = "0x8032D4", VA = "0x8032D4")]
	public void ActivityForResultCallback(string activity)
	{
	}

	[Token(Token = "0x6000156")]
	public string DataToJson<T>(T data)
	{
		return null;
	}

	[Token(Token = "0x6000157")]
	public T JsonToData<T>(string jsondata)
	{
		return (T)null;
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x80332C", Offset = "0x80332C", VA = "0x80332C")]
	public PicoCallBack()
	{
	}
}
[Serializable]
[Token(Token = "0x2000048")]
public class UserInfoData
{
	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string gender;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string openid;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string avatar;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string phone;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string uniqid;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string username;

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x6FFBA0", Offset = "0x6FFBA0", VA = "0x6FFBA0")]
	public UserInfoData()
	{
	}
}
[Token(Token = "0x2000049")]
public class PicoManager : MonoBehaviour
{
	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PicoManager Install;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isPc;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool useAsyncInit;

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x6F2CA8", Offset = "0x6F2CA8", VA = "0x6F2CA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x6F2D6C", Offset = "0x6F2D6C", VA = "0x6F2D6C")]
	private void Start()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x6F2DD8", Offset = "0x6F2DD8", VA = "0x6F2DD8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x6F30DC", Offset = "0x6F30DC", VA = "0x6F30DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x6F31AC", Offset = "0x6F31AC", VA = "0x6F31AC")]
	public void PlayerDataInit()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x6F34EC", Offset = "0x6F34EC", VA = "0x6F34EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x6F2EEC", Offset = "0x6F2EEC", VA = "0x6F2EEC")]
	public void PicoLogin()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x6F34F0", Offset = "0x6F34F0", VA = "0x6F34F0")]
	public void GetUserInfoAPI()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x6F3568", Offset = "0x6F3568", VA = "0x6F3568")]
	private void GetLoggedInUser()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x6F3610", Offset = "0x6F3610", VA = "0x6F3610")]
	private string User2String(User user)
	{
		return null;
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x6F3774", Offset = "0x6F3774", VA = "0x6F3774")]
	public PicoManager()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x6F3784", Offset = "0x6F3784", VA = "0x6F3784")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593ABC", Offset = "0x593ABC")]
	private void <PicoLogin>b__9_0(Message<PlatformInitializeResult> m)
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x6F38F4", Offset = "0x6F38F4", VA = "0x6F38F4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593ACC", Offset = "0x593ACC")]
	private void <GetLoggedInUser>b__11_0(Message<User> msg)
	{
	}
}
[Token(Token = "0x200004A")]
public class SDKManager : Singleton<SDKManager>
{
	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SDK_Type SDKType;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SDK_BaseController sdkBase;

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x6F815C", Offset = "0x6F815C", VA = "0x6F815C")]
	public void SetSDKType(SDK_Type sdkType)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x6F8164", Offset = "0x6F8164", VA = "0x6F8164")]
	public SDK_BaseController GetSDKController()
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x6F8264", Offset = "0x6F8264", VA = "0x6F8264")]
	public SDKManager()
	{
	}
}
[Token(Token = "0x200004B")]
public enum SDK_Type
{
	[Token(Token = "0x400014B")]
	Undefined,
	[Token(Token = "0x400014C")]
	Oculus,
	[Token(Token = "0x400014D")]
	QiYu,
	[Token(Token = "0x400014E")]
	PicoXR,
	[Token(Token = "0x400014F")]
	PicoNeo2
}
[Token(Token = "0x200004C")]
public abstract class SDK_BaseController : ScriptableObject
{
	[Token(Token = "0x2000255")]
	public enum ButtonTypes
	{
		[Token(Token = "0x4001168")]
		ButtonOne,
		[Token(Token = "0x4001169")]
		ButtonTwo,
		[Token(Token = "0x400116A")]
		Grip,
		[Token(Token = "0x400116B")]
		GripHairline,
		[Token(Token = "0x400116C")]
		StartMenu,
		[Token(Token = "0x400116D")]
		Trigger,
		[Token(Token = "0x400116E")]
		TriggerHairline,
		[Token(Token = "0x400116F")]
		Touchpad
	}

	[Token(Token = "0x2000256")]
	public enum ButtonPressTypes
	{
		[Token(Token = "0x4001171")]
		Press,
		[Token(Token = "0x4001172")]
		PressDown,
		[Token(Token = "0x4001173")]
		PressUp,
		[Token(Token = "0x4001174")]
		Touch,
		[Token(Token = "0x4001175")]
		TouchDown,
		[Token(Token = "0x4001176")]
		TouchUp
	}

	[Token(Token = "0x2000257")]
	public enum ControllerElements
	{
		[Token(Token = "0x4001178")]
		AttachPoint,
		[Token(Token = "0x4001179")]
		Trigger,
		[Token(Token = "0x400117A")]
		GripLeft,
		[Token(Token = "0x400117B")]
		GripRight,
		[Token(Token = "0x400117C")]
		Touchpad,
		[Token(Token = "0x400117D")]
		ButtonOne,
		[Token(Token = "0x400117E")]
		ButtonTwo,
		[Token(Token = "0x400117F")]
		SystemMenu,
		[Token(Token = "0x4001180")]
		Body,
		[Token(Token = "0x4001181")]
		StartMenu
	}

	[Token(Token = "0x2000258")]
	public enum ControllerHandType
	{
		[Token(Token = "0x4001183")]
		None,
		[Token(Token = "0x4001184")]
		Left,
		[Token(Token = "0x4001185")]
		Right
	}

	[Token(Token = "0x2000259")]
	public enum ControllerType
	{
		[Token(Token = "0x4001187")]
		Undefined,
		[Token(Token = "0x4001188")]
		Oculus_OculusTouch,
		[Token(Token = "0x4001189")]
		Daydream_Controller,
		[Token(Token = "0x400118A")]
		CardBoard_Head
	}

	[Token(Token = "0x600016B")]
	public abstract bool GetControllerButtonState(ControllerHandType hadeType, ButtonTypes buttonType, ButtonPressTypes pressType);

	[Token(Token = "0x600016C")]
	public abstract bool GetAnyControllerButtonState(ButtonTypes buttonType, ButtonPressTypes pressType);

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x6F82D4", Offset = "0x6F82D4", VA = "0x6F82D4")]
	protected SDK_BaseController()
	{
	}
}
[Token(Token = "0x200004D")]
public class SelectQiYuPico : MonoBehaviour
{
	[Token(Token = "0x600016E")]
	[Address(RVA = "0x6F86EC", Offset = "0x6F86EC", VA = "0x6F86EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x6F87C8", Offset = "0x6F87C8", VA = "0x6F87C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x6F87CC", Offset = "0x6F87CC", VA = "0x6F87CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x6F87D0", Offset = "0x6F87D0", VA = "0x6F87D0")]
	public SelectQiYuPico()
	{
	}
}
[Serializable]
[Token(Token = "0x200004E")]
public class StarTime
{
	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float _level1;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float _level2;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _level3;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float _level4;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float _level5;

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x6FC274", Offset = "0x6FC274", VA = "0x6FC274")]
	public StarTime(List<float> levelTime)
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x6FBABC", Offset = "0x6FBABC", VA = "0x6FBABC")]
	public int GetStarNumber(double time)
	{
		return default(int);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x6FBB70", Offset = "0x6FBB70", VA = "0x6FBB70")]
	public int GetParameter()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x200004F")]
public class StarData
{
	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int _Chapter;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int _Level;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StarTime _StarTime;

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x6FB948", Offset = "0x6FB948", VA = "0x6FB948")]
	public StarData(int chapter, int level, StarTime starTime)
	{
	}
}
[Serializable]
[Token(Token = "0x2000050")]
public class StarDataInfo
{
	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<StarData> StarDataList;

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x6FB988", Offset = "0x6FB988", VA = "0x6FB988")]
	private StarData GetStarData()
	{
		return null;
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x6F4AA4", Offset = "0x6F4AA4", VA = "0x6F4AA4")]
	public int GetStarNum(double time)
	{
		return default(int);
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x6FBB44", Offset = "0x6FBB44", VA = "0x6FBB44")]
	public int GetParameter()
	{
		return default(int);
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x6FBC60", Offset = "0x6FBC60", VA = "0x6FBC60")]
	public StarDataInfo()
	{
	}
}
[Token(Token = "0x2000051")]
public class StarManager : Singleton<StarManager>
{
	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public StarDataInfo _StarDataInfo;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string path;

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x6FBCD0", Offset = "0x6FBCD0", VA = "0x6FBCD0", Slot = "4")]
	public override void Init()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x6FBCD4", Offset = "0x6FBCD4", VA = "0x6FBCD4")]
	private void LoadStarInfo()
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x6FC04C", Offset = "0x6FC04C", VA = "0x6FC04C")]
	private StarData InitStarData(string str)
	{
		return null;
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x6FC3B0", Offset = "0x6FC3B0", VA = "0x6FC3B0")]
	public StarManager()
	{
	}
}
[Token(Token = "0x2000052")]
public class StarPanel : MonoBehaviour
{
	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> StarImageList;

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x6FC464", Offset = "0x6FC464", VA = "0x6FC464")]
	public void UpdateStar(int starNumber)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x6FC51C", Offset = "0x6FC51C", VA = "0x6FC51C")]
	public StarPanel()
	{
	}
}
[Token(Token = "0x2000053")]
public class CameraEffect : MonoBehaviour
{
	[Token(Token = "0x200025A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E9E8", Offset = "0x58E9E8")]
	private sealed class <SetStartAnimator>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraEffect <>4__this;

		[Token(Token = "0x170000BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0x10174B4", Offset = "0x10174B4", VA = "0x10174B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0x101751C", Offset = "0x101751C", VA = "0x101751C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x1016CF0", Offset = "0x1016CF0", VA = "0x1016CF0")]
		[DebuggerHidden]
		public <SetStartAnimator>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x1017234", Offset = "0x1017234", VA = "0x1017234", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1017238", Offset = "0x1017238", VA = "0x1017238", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x10174BC", Offset = "0x10174BC", VA = "0x10174BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58E9F8", Offset = "0x58E9F8")]
	private sealed class <FadeAnima>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraEffect <>4__this;

		[Token(Token = "0x170000BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0x10171C4", Offset = "0x10171C4", VA = "0x10171C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0x101722C", Offset = "0x101722C", VA = "0x101722C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x1016F98", Offset = "0x1016F98", VA = "0x1016F98")]
		[DebuggerHidden]
		public <FadeAnima>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x1017068", Offset = "0x1017068", VA = "0x1017068", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x101706C", Offset = "0x101706C", VA = "0x101706C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x10171CC", Offset = "0x10171CC", VA = "0x10171CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CameraEffect instance;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Tweener tweener;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Tweener tweenerHp;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject _WallPrompts;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsAnimator;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image FadeInOut;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image FadeInAnimator;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Animator FadeAnimator;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool IsChangingScene;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float FadeInLoadTime;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float FadeOutLoadTime;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float TimeOfFade;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Image InstanceHurtImage;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float ShowInstanceHurtTime;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float HiedInstanceHurtTime;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Image[] HpChangeImage;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int TempHpState;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Color transColor;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Image previousImage;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Image currentImage;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Animator DeadAnimator;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float CloseDeadAnimtorTime;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject StartGameTeach;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public float TeachShowDelayTime;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public float TeachTime;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool deadAudioPlay;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
	private bool DeadAnimatorActive;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
	private bool isFadeOutIn;

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x10160D8", Offset = "0x10160D8", VA = "0x10160D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x1016188", Offset = "0x1016188", VA = "0x1016188")]
	private void Start()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x1016224", Offset = "0x1016224", VA = "0x1016224")]
	private void Update()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x101618C", Offset = "0x101618C", VA = "0x101618C")]
	private void InitHurt()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x1016248", Offset = "0x1016248", VA = "0x1016248")]
	private void ChangeHpImage(int state)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x10163C4", Offset = "0x10163C4", VA = "0x10163C4")]
	private void CloseImage()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x10164FC", Offset = "0x10164FC", VA = "0x10164FC")]
	public void InstanceHurtEffect()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x10166A4", Offset = "0x10166A4", VA = "0x10166A4")]
	public void HpChangeEffect(float currentHp, float totalHp)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x1016750", Offset = "0x1016750", VA = "0x1016750")]
	private int CalcuteHpPercent(float currentHp, float totalHp)
	{
		return default(int);
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x1016668", Offset = "0x1016668", VA = "0x1016668")]
	private void ShowHurt(bool value = false)
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x101663C", Offset = "0x101663C", VA = "0x101663C")]
	private bool IsShowHurt()
	{
		return default(bool);
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x10167A8", Offset = "0x10167A8", VA = "0x10167A8")]
	public void PlayDeadAnimator()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x101688C", Offset = "0x101688C", VA = "0x101688C")]
	private void CloseDeadAnimtor()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0x10168D0", Offset = "0x10168D0", VA = "0x10168D0")]
	public void PlayFuHuoAnimator()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0x10169D8", Offset = "0x10169D8", VA = "0x10169D8")]
	public bool GetDeadAnimatorActive()
	{
		return default(bool);
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x10169E0", Offset = "0x10169E0", VA = "0x10169E0")]
	public void FadeIn()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x1016AB4", Offset = "0x1016AB4", VA = "0x1016AB4")]
	public void FadeOut()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x1016B08", Offset = "0x1016B08", VA = "0x1016B08")]
	public void FadeInLoad()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x1016B44", Offset = "0x1016B44", VA = "0x1016B44")]
	public void FadeOutLoad()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x1016B84", Offset = "0x1016B84", VA = "0x1016B84")]
	private void FindStartGoTeach()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x1016C80", Offset = "0x1016C80", VA = "0x1016C80")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593ADC", Offset = "0x593ADC")]
	private IEnumerator SetStartAnimator()
	{
		return null;
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x1016D1C", Offset = "0x1016D1C", VA = "0x1016D1C")]
	public void FadeOutIn(bool shortTime = false)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x1016A34", Offset = "0x1016A34", VA = "0x1016A34")]
	private void ShowFade(bool value = false)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x1016F28", Offset = "0x1016F28", VA = "0x1016F28")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593B40", Offset = "0x593B40")]
	private IEnumerator FadeAnima()
	{
		return null;
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x1016FC4", Offset = "0x1016FC4", VA = "0x1016FC4")]
	public CameraEffect()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x1017058", Offset = "0x1017058", VA = "0x1017058")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593BA4", Offset = "0x593BA4")]
	private void <InstanceHurtEffect>b__31_0()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x1017060", Offset = "0x1017060", VA = "0x1017060")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593BB4", Offset = "0x593BB4")]
	private void <FadeOutIn>b__49_0()
	{
	}
}
[Token(Token = "0x2000054")]
public class FadeInOutFollowCamera : MonoBehaviour
{
	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform HwCamera;

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x101B114", Offset = "0x101B114", VA = "0x101B114")]
	private void Start()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x101B118", Offset = "0x101B118", VA = "0x101B118")]
	private void Update()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x101B264", Offset = "0x101B264", VA = "0x101B264")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x101B1A0", Offset = "0x101B1A0", VA = "0x101B1A0")]
	private void FindHwCamera()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x101B398", Offset = "0x101B398", VA = "0x101B398")]
	public FadeInOutFollowCamera()
	{
	}
}
[Token(Token = "0x2000055")]
public class MoveText : MonoBehaviour
{
	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ScrollRect rect;

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x7FE450", Offset = "0x7FE450", VA = "0x7FE450")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x7FE4A8", Offset = "0x7FE4A8", VA = "0x7FE4A8")]
	private void ScrollValue()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x7FE538", Offset = "0x7FE538", VA = "0x7FE538")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x7FE53C", Offset = "0x7FE53C", VA = "0x7FE53C")]
	public MoveText()
	{
	}
}
[Token(Token = "0x2000056")]
public class BackMainMenu : MonoBehaviour
{
	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PromptPanel;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ShowPromptPanelButton;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int DemoChapterNum;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int DemoLevelNum;

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x1014B80", Offset = "0x1014B80", VA = "0x1014B80")]
	public void ShowPromptPanel()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x1015188", Offset = "0x1015188", VA = "0x1015188")]
	public void ClosePromptPanel()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x1014C8C", Offset = "0x1014C8C", VA = "0x1014C8C")]
	public void LoadScene(string sceneName)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x10151CC", Offset = "0x10151CC", VA = "0x10151CC")]
	public void Update()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x1015238", Offset = "0x1015238", VA = "0x1015238")]
	public BackMainMenu()
	{
	}
}
[Token(Token = "0x2000057")]
public class ButtonItem : MonoBehaviour
{
	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Text;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Slider Slider;

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x1015248", Offset = "0x1015248", VA = "0x1015248")]
	private void Start()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x1015304", Offset = "0x1015304", VA = "0x1015304")]
	private void Update()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x1015308", Offset = "0x1015308", VA = "0x1015308")]
	public ButtonItem()
	{
	}
}
[Token(Token = "0x2000058")]
public class DemoShowStar : MonoBehaviour
{
	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BackMainMenu BackMainMenu;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TimePanel UnlockTimeText;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StarPanel StarPanel;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Title;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject LockGo;

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x101A300", Offset = "0x101A300", VA = "0x101A300")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x101A4F8", Offset = "0x101A4F8", VA = "0x101A4F8")]
	private void SetLockActive(bool active)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x101A590", Offset = "0x101A590", VA = "0x101A590")]
	public DemoShowStar()
	{
	}
}
[Token(Token = "0x2000059")]
public class EndGameController : MonoBehaviour
{
	[Token(Token = "0x200025C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA08", Offset = "0x58EA08")]
	private sealed class <ShowEndCanvas>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndGameController <>4__this;

		[Token(Token = "0x170000C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B6A")]
			[Address(RVA = "0x101ADB0", Offset = "0x101ADB0", VA = "0x101ADB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0x101AE18", Offset = "0x101AE18", VA = "0x101AE18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x101A8E0", Offset = "0x101A8E0", VA = "0x101A8E0")]
		[DebuggerHidden]
		public <ShowEndCanvas>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x101AC9C", Offset = "0x101AC9C", VA = "0x101AC9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x101ACA0", Offset = "0x101ACA0", VA = "0x101ACA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x101ADB8", Offset = "0x101ADB8", VA = "0x101ADB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator EndAnimator;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DelayTime;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string sceneName;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool CanLoadScene;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MyButton leftButton;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MyButton rightButton;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PromptPanelController PromptPanelController;

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x101A868", Offset = "0x101A868", VA = "0x101A868")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x101A86C", Offset = "0x101A86C", VA = "0x101A86C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x101A870", Offset = "0x101A870", VA = "0x101A870")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593BC4", Offset = "0x593BC4")]
	private IEnumerator ShowEndCanvas()
	{
		return null;
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x101A90C", Offset = "0x101A90C", VA = "0x101A90C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x101A958", Offset = "0x101A958", VA = "0x101A958")]
	public void LoadEndScene()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x101A95C", Offset = "0x101A95C", VA = "0x101A95C")]
	private void InvokeLoadEndScene()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x101A9D8", Offset = "0x101A9D8", VA = "0x101A9D8")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x101AC38", Offset = "0x101AC38", VA = "0x101AC38")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x101AC3C", Offset = "0x101AC3C", VA = "0x101AC3C")]
	public EndGameController()
	{
	}
}
[Token(Token = "0x200005A")]
public class EndMenuCol : MonoBehaviour
{
	[Token(Token = "0x200025D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA18", Offset = "0x58EA18")]
	private sealed class <Start>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndMenuCol <>4__this;

		[Token(Token = "0x170000C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B70")]
			[Address(RVA = "0x101AFC0", Offset = "0x101AFC0", VA = "0x101AFC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0x101B028", Offset = "0x101B028", VA = "0x101B028", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x101AEBC", Offset = "0x101AEBC", VA = "0x101AEBC")]
		[DebuggerHidden]
		public <Start>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x101AEFC", Offset = "0x101AEFC", VA = "0x101AEFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x101AF00", Offset = "0x101AF00", VA = "0x101AF00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x101AFC8", Offset = "0x101AFC8", VA = "0x101AFC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ShowEndMenuTime;

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x101AE4C", Offset = "0x101AE4C", VA = "0x101AE4C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593C28", Offset = "0x593C28")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x101AEE8", Offset = "0x101AEE8", VA = "0x101AEE8")]
	private void Update()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x101AEEC", Offset = "0x101AEEC", VA = "0x101AEEC")]
	public EndMenuCol()
	{
	}
}
[Token(Token = "0x200005B")]
public class EndSceneButton : MonoBehaviour
{
	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EndGameController EndGameController;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Button button;

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x101B030", Offset = "0x101B030", VA = "0x101B030")]
	private void Start()
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x101B0D8", Offset = "0x101B0D8", VA = "0x101B0D8")]
	private void OnButtonClick()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x101B0F0", Offset = "0x101B0F0", VA = "0x101B0F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x101B0F4", Offset = "0x101B0F4", VA = "0x101B0F4")]
	public EndSceneButton()
	{
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x101B0FC", Offset = "0x101B0FC", VA = "0x101B0FC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593C8C", Offset = "0x593C8C")]
	private void <Start>b__2_0()
	{
	}
}
[Token(Token = "0x200005C")]
public class InterractiveShowTime : MonoBehaviour
{
	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x7ED974", Offset = "0x7ED974", VA = "0x7ED974")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x7ED978", Offset = "0x7ED978", VA = "0x7ED978")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0x7ED97C", Offset = "0x7ED97C", VA = "0x7ED97C")]
	public InterractiveShowTime()
	{
	}
}
[Token(Token = "0x200005D")]
public class NextSceneInfo : MonoBehaviour
{
	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int ChapterNum;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int LevelNum;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string ChapterName;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string LevelName;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string NextSceneName;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string CurrentSceneName;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Button ReplayButton;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Button button;

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0x800834", Offset = "0x800834", VA = "0x800834")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0x800CBC", Offset = "0x800CBC", VA = "0x800CBC")]
	private void OnButtonClick()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x800E7C", Offset = "0x800E7C", VA = "0x800E7C")]
	private void OnReplayButtonButtonClick()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x800B50", Offset = "0x800B50", VA = "0x800B50")]
	private string GetCurrentSceneName(int chapter, int level)
	{
		return null;
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x800B88", Offset = "0x800B88", VA = "0x800B88")]
	private void SetChapterName(int chapterNum)
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x800C14", Offset = "0x800C14", VA = "0x800C14")]
	private void SetLevelName(int levelNum)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x80101C", Offset = "0x80101C", VA = "0x80101C")]
	public NextSceneInfo()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x801024", Offset = "0x801024", VA = "0x801024")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593C9C", Offset = "0x593C9C")]
	private void <Start>b__8_0()
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x801028", Offset = "0x801028", VA = "0x801028")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593CAC", Offset = "0x593CAC")]
	private void <Start>b__8_1()
	{
	}
}
[Token(Token = "0x200005E")]
public class PanelController : MonoBehaviour
{
	[Token(Token = "0x200025E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA28", Offset = "0x58EA28")]
	private sealed class <ShowTime>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PanelController <>4__this;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double <endtime>5__2;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private double <enttime1>5__3;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <count>5__4;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <i>5__5;

		[Token(Token = "0x170000C5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0x802038", Offset = "0x802038", VA = "0x802038", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B78")]
			[Address(RVA = "0x8020A0", Offset = "0x8020A0", VA = "0x8020A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x801938", Offset = "0x801938", VA = "0x801938")]
		[DebuggerHidden]
		public <ShowTime>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x801CDC", Offset = "0x801CDC", VA = "0x801CDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x801CE0", Offset = "0x801CE0", VA = "0x801CE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x802040", Offset = "0x802040", VA = "0x802040", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TeachingPrompt TeachingPrompt;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject StartPanel;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject EndPanel;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text TimeText;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TimePanel TimePanel;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StarPanel StarPanel;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int ShowTimeCount;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float TimeInterval;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public StartTime StartTime;

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x801400", Offset = "0x801400", VA = "0x801400")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x801568", Offset = "0x801568", VA = "0x801568")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x8016D0", Offset = "0x8016D0", VA = "0x8016D0")]
	private void OnCompleteTeachingEvent()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x8017D0", Offset = "0x8017D0", VA = "0x8017D0")]
	private void OnEndStartCanvas()
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x8018C8", Offset = "0x8018C8", VA = "0x8018C8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593CBC", Offset = "0x593CBC")]
	private IEnumerator ShowTime()
	{
		return null;
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x801964", Offset = "0x801964", VA = "0x801964")]
	private string GetGameTime(double time)
	{
		return null;
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x801710", Offset = "0x801710", VA = "0x801710")]
	private void OnShowStartCanvas()
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x801B68", Offset = "0x801B68", VA = "0x801B68")]
	public void HideStartPanel()
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x801C20", Offset = "0x801C20", VA = "0x801C20")]
	public void HideEndPanel()
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x801AE0", Offset = "0x801AE0", VA = "0x801AE0")]
	private void SetStartTime()
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x801CC4", Offset = "0x801CC4", VA = "0x801CC4")]
	public PanelController()
	{
	}
}
[Token(Token = "0x200005F")]
public delegate void ShowStartCanvas();
[Token(Token = "0x2000060")]
public class PlayTimeData
{
	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PlayTimeData instances;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private double previousTime;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private double gameTime;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool _StartGame;

	[Token(Token = "0x1700000B")]
	public static PlayTimeData Instances
	{
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x6F3B04", Offset = "0x6F3B04", VA = "0x6F3B04")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000C")]
	public double _PreviousTime
	{
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x6F3B80", Offset = "0x6F3B80", VA = "0x6F3B80")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x1700000D")]
	public double _GameTime
	{
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x6F3B88", Offset = "0x6F3B88", VA = "0x6F3B88")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x14000002")]
	public event ShowStartCanvas ShowStartCanvasEvent
	{
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x6F3B90", Offset = "0x6F3B90", VA = "0x6F3B90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593D20", Offset = "0x593D20")]
		add
		{
		}
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x6F3C34", Offset = "0x6F3C34", VA = "0x6F3C34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593D30", Offset = "0x593D30")]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event ShowStartCanvas ShowEndCanvasEvent
	{
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x6F3CD8", Offset = "0x6F3CD8", VA = "0x6F3CD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593D40", Offset = "0x593D40")]
		add
		{
		}
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x6F3D7C", Offset = "0x6F3D7C", VA = "0x6F3D7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593D50", Offset = "0x593D50")]
		remove
		{
		}
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x6F3E20", Offset = "0x6F3E20", VA = "0x6F3E20")]
	public void ResetGame()
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x6F3E30", Offset = "0x6F3E30", VA = "0x6F3E30")]
	public void ResetGameTime()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x6F3E3C", Offset = "0x6F3E3C", VA = "0x6F3E3C")]
	public void StartTiming()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x6F3E80", Offset = "0x6F3E80", VA = "0x6F3E80")]
	public void EndGame()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x6F4300", Offset = "0x6F4300", VA = "0x6F4300")]
	public void ResetTime()
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x6F4314", Offset = "0x6F4314", VA = "0x6F4314")]
	public void OnShowStartCanvasEvent()
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x6F4530", Offset = "0x6F4530", VA = "0x6F4530")]
	public void OnShowEndCanvasEvent()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x6F454C", Offset = "0x6F454C", VA = "0x6F454C")]
	public string GetGameTime()
	{
		return null;
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x6F4554", Offset = "0x6F4554", VA = "0x6F4554")]
	public string GetGameTime(double time)
	{
		return null;
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x6F46D0", Offset = "0x6F46D0", VA = "0x6F46D0")]
	public PlayTimeData()
	{
	}
}
[Token(Token = "0x2000061")]
public class PromptPanelController : MonoBehaviour
{
	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ButtonItem CurButton;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TeachingPrompt TeachingPrompt;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool endPrompt;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool prompt;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool startGame;

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0x6F5B48", Offset = "0x6F5B48", VA = "0x6F5B48")]
	private void Start()
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0x6F5BB0", Offset = "0x6F5BB0", VA = "0x6F5BB0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0x6F5C78", Offset = "0x6F5C78", VA = "0x6F5C78")]
	public void StartGame_On()
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0x6F5DB8", Offset = "0x6F5DB8", VA = "0x6F5DB8")]
	public PromptPanelController()
	{
	}
}
[Token(Token = "0x2000062")]
public class StartGameLogo : MonoBehaviour
{
	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string FirstSceneName;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Qiyu_TeachSceneName;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string Pico_TeachSceneName;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsDemo;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<string> DemoSceneName;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StarDataInfo StarData;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ArchiveData archiveData;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isPc;

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x6FC58C", Offset = "0x6FC58C", VA = "0x6FC58C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x6FC624", Offset = "0x6FC624", VA = "0x6FC624")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x6FC72C", Offset = "0x6FC72C", VA = "0x6FC72C")]
	public void PlayerDataInit()
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x6FC794", Offset = "0x6FC794", VA = "0x6FC794")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x6FC830", Offset = "0x6FC830", VA = "0x6FC830")]
	public void LoadFirstScene()
	{
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x6FCB00", Offset = "0x6FCB00", VA = "0x6FCB00")]
	public StartGameLogo()
	{
	}
}
[Token(Token = "0x2000063")]
public class StartGoTeach : MonoBehaviour
{
	[Token(Token = "0x200025F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA38", Offset = "0x58EA38")]
	private sealed class <SetThisPos>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StartGoTeach <>4__this;

		[Token(Token = "0x170000C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0x6FCF70", Offset = "0x6FCF70", VA = "0x6FCF70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0x6FCFD8", Offset = "0x6FCFD8", VA = "0x6FCFD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x6FCC6C", Offset = "0x6FCC6C", VA = "0x6FCC6C")]
		[DebuggerHidden]
		public <SetThisPos>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x6FCDC8", Offset = "0x6FCDC8", VA = "0x6FCDC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x6FCDCC", Offset = "0x6FCDCC", VA = "0x6FCDCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x6FCF78", Offset = "0x6FCF78", VA = "0x6FCF78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool StartGoGame;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float PosY;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StartTime StartTime;

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x6FCB70", Offset = "0x6FCB70", VA = "0x6FCB70")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x6FCBF8", Offset = "0x6FCBF8", VA = "0x6FCBF8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593D60", Offset = "0x593D60")]
	private IEnumerator SetThisPos()
	{
		return null;
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x6FCC98", Offset = "0x6FCC98", VA = "0x6FCC98")]
	private void Update()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x6FCC68", Offset = "0x6FCC68", VA = "0x6FCC68")]
	public void SetStartGoGame()
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x6FCC9C", Offset = "0x6FCC9C", VA = "0x6FCC9C")]
	public void StartGameOn()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x6FCDC0", Offset = "0x6FCDC0", VA = "0x6FCDC0")]
	public StartGoTeach()
	{
	}
}
[Token(Token = "0x2000064")]
public class StartLogo : MonoBehaviour
{
	[Token(Token = "0x2000260")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA48", Offset = "0x58EA48")]
	private sealed class <Start>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public StartLogo <>4__this;

		[Token(Token = "0x170000C9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B82")]
			[Address(RVA = "0x6FD584", Offset = "0x6FD584", VA = "0x6FD584", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0x6FD5EC", Offset = "0x6FD5EC", VA = "0x6FD5EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x6FD050", Offset = "0x6FD050", VA = "0x6FD050")]
		[DebuggerHidden]
		public <Start>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x6FD420", Offset = "0x6FD420", VA = "0x6FD420", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x6FD424", Offset = "0x6FD424", VA = "0x6FD424", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x6FD58C", Offset = "0x6FD58C", VA = "0x6FD58C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000261")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA58", Offset = "0x58EA58")]
	private sealed class <SetChapterPanelActive>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public StartLogo <>4__this;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool active;

		[Token(Token = "0x170000CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x6FD3B0", Offset = "0x6FD3B0", VA = "0x6FD3B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x6FD418", Offset = "0x6FD418", VA = "0x6FD418", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x6FD278", Offset = "0x6FD278", VA = "0x6FD278")]
		[DebuggerHidden]
		public <SetChapterPanelActive>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x6FD2C4", Offset = "0x6FD2C4", VA = "0x6FD2C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x6FD2C8", Offset = "0x6FD2C8", VA = "0x6FD2C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x6FD3B8", Offset = "0x6FD3B8", VA = "0x6FD3B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SDK_BaseController.ButtonTypes ButtonType;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator LogoAnimator;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject Startgame;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject ChapterPanel;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float ShowStartTime;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool StartOut;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float CanInteractiveTime;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float interactiveTme;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool inteactive;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MyButton mybutton;

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x6FCFE0", Offset = "0x6FCFE0", VA = "0x6FCFE0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593DC4", Offset = "0x593DC4")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x6FD07C", Offset = "0x6FD07C", VA = "0x6FD07C")]
	private void Update()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x6FD1C4", Offset = "0x6FD1C4", VA = "0x6FD1C4")]
	private void SetStartgameActive(bool active)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x6FD1E4", Offset = "0x6FD1E4", VA = "0x6FD1E4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x593E28", Offset = "0x593E28")]
	private IEnumerator SetChapterPanelActive(bool active, float time)
	{
		return null;
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x6FD194", Offset = "0x6FD194", VA = "0x6FD194")]
	private void SetChapterPanel(float time)
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x6FD2A4", Offset = "0x6FD2A4", VA = "0x6FD2A4")]
	public StartLogo()
	{
	}
}
[Token(Token = "0x2000065")]
public class StartTime : MonoBehaviour
{
	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PromptPanelController promptPanelController;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StartGoTeach StartGameTeach;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isEnter;

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x6FD5F4", Offset = "0x6FD5F4", VA = "0x6FD5F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x6FD69C", Offset = "0x6FD69C", VA = "0x6FD69C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x6FCD2C", Offset = "0x6FCD2C", VA = "0x6FCD2C")]
	public void SetStartGame()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x6FD798", Offset = "0x6FD798", VA = "0x6FD798")]
	public StartTime()
	{
	}
}
[Token(Token = "0x2000066")]
public delegate void CompleteTeaching();
[Token(Token = "0x2000067")]
public class TeachingPrompt : MonoBehaviour
{
	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool completeTeaching;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public SDK_BaseController.ButtonTypes ButtonType;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputDevice LeftDevice;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InputDevice RightDevice;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform GoTransform;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<Transform> PanelList;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int offect;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int LeftIndex;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float MoveTime;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool Auto;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float AutoTime;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float offTime;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject StartGo;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool StartGame;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float JumpTime;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float addJumpTime;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public bool IsJump;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public MyButton LeftButton;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public MyButton RightButton;

	[Token(Token = "0x14000004")]
	public event CompleteTeaching CompleteTeachingEvent
	{
		[Token(Token = "0x600020A")]
		[Address(RVA = "0x6FE7B0", Offset = "0x6FE7B0", VA = "0x6FE7B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593E8C", Offset = "0x593E8C")]
		add
		{
		}
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x6FE854", Offset = "0x6FE854", VA = "0x6FE854")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593E9C", Offset = "0x593E9C")]
		remove
		{
		}
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x6FE8F8", Offset = "0x6FE8F8", VA = "0x6FE8F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x6FE934", Offset = "0x6FE934", VA = "0x6FE934")]
	private void Update()
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x6FEBDC", Offset = "0x6FEBDC", VA = "0x6FEBDC")]
	private void MovePanel(bool isLeft)
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x6FEDCC", Offset = "0x6FEDCC", VA = "0x6FEDCC")]
	public TeachingPrompt()
	{
	}
}
[Token(Token = "0x2000068")]
public class TimeController : MonoBehaviour
{
	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text HandTimeText;

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x6FF120", Offset = "0x6FF120", VA = "0x6FF120")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x6FF144", Offset = "0x6FF144", VA = "0x6FF144")]
	private void Update()
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x6FF148", Offset = "0x6FF148", VA = "0x6FF148")]
	public void UpdateHandTime()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x6FF1FC", Offset = "0x6FF1FC", VA = "0x6FF1FC")]
	public TimeController()
	{
	}
}
[Token(Token = "0x2000069")]
public class TimePanel : MonoBehaviour
{
	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MinTen;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject MinBit;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject SecTen;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject SecBit;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject PointTen;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject PointBit;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<MeshFilter> NumMeshFilterList;

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x6FF204", Offset = "0x6FF204", VA = "0x6FF204")]
	public void UpdateTime(double gameTime)
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x6FF3B8", Offset = "0x6FF3B8", VA = "0x6FF3B8")]
	private void SetTimeMesh(int minT, int minB, int secT, int secB)
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x6FF598", Offset = "0x6FF598", VA = "0x6FF598")]
	private void SetPointNumMesh(int pointT, int pointB)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x6FF72C", Offset = "0x6FF72C", VA = "0x6FF72C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x6FF730", Offset = "0x6FF730", VA = "0x6FF730")]
	public TimePanel()
	{
	}
}
[Token(Token = "0x200006A")]
public class SelectLanguage : MonoBehaviour
{
	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ChineseUi;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject EnglishUi;

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x6F82E4", Offset = "0x6F82E4", VA = "0x6F82E4")]
	private void Start()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x6F82E8", Offset = "0x6F82E8", VA = "0x6F82E8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x6F8428", Offset = "0x6F8428", VA = "0x6F8428")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x6F84B4", Offset = "0x6F84B4", VA = "0x6F84B4")]
	private void OnSettinLanguage()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x6F838C", Offset = "0x6F838C", VA = "0x6F838C")]
	private void SetLanguage()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x6F84B8", Offset = "0x6F84B8", VA = "0x6F84B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x6F84BC", Offset = "0x6F84BC", VA = "0x6F84BC")]
	public SelectLanguage()
	{
	}
}
[Token(Token = "0x200006B")]
public class SelectMenuInteractive : MonoBehaviour
{
	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x59096C", Offset = "0x59096C")]
	public SteamVR_Action_Boolean ActionButton;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SteamVR_Behaviour_Pose RightHand;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public MoveInteractable PointerRenderer;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InputDevice RightHands;

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x6F84C4", Offset = "0x6F84C4", VA = "0x6F84C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x6F84F0", Offset = "0x6F84F0", VA = "0x6F84F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x6F86E4", Offset = "0x6F86E4", VA = "0x6F86E4")]
	public SelectMenuInteractive()
	{
	}
}
[Token(Token = "0x200006C")]
public class ChapterButton : MonoBehaviour
{
	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<string> LevelNameList;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int ChapterNum;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Button button;

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x1017524", Offset = "0x1017524", VA = "0x1017524")]
	private void Start()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x1017618", Offset = "0x1017618", VA = "0x1017618")]
	private void OnButtonClick()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x101785C", Offset = "0x101785C", VA = "0x101785C")]
	public ChapterButton()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x10178CC", Offset = "0x10178CC", VA = "0x10178CC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593EAC", Offset = "0x593EAC")]
	private void <Start>b__3_0()
	{
	}
}
[Token(Token = "0x200006D")]
public class InteractiveTirggerManager
{
	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InteractiveTirggerManager instances;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool currentIsLeftHand;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool currentIsRightHand;

	[Token(Token = "0x1700000E")]
	public static InteractiveTirggerManager Instances
	{
		[Token(Token = "0x6000227")]
		[Address(RVA = "0x7ED8F0", Offset = "0x7ED8F0", VA = "0x7ED8F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x7ED96C", Offset = "0x7ED96C", VA = "0x7ED96C")]
	public InteractiveTirggerManager()
	{
	}
}
[Token(Token = "0x200006E")]
public class LanguageButton : MonoBehaviour
{
	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button Button;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Language language;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject LevelPanel;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject ChapterPanel;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject LanguageGo;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject StartGameGo;

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x7F5EC8", Offset = "0x7F5EC8", VA = "0x7F5EC8")]
	private void Start()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x7F5ECC", Offset = "0x7F5ECC", VA = "0x7F5ECC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x7F5F60", Offset = "0x7F5F60", VA = "0x7F5F60")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x7F5FF4", Offset = "0x7F5FF4", VA = "0x7F5FF4")]
	private void OnSettingButton()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x7F6220", Offset = "0x7F6220", VA = "0x7F6220")]
	private void Update()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x7F6224", Offset = "0x7F6224", VA = "0x7F6224")]
	public LanguageButton()
	{
	}
}
[Token(Token = "0x200006F")]
public class LevelButton : MonoBehaviour
{
	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string SceneName;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Button button;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator animator;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int LevelNum;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int chapterNum;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TimePanel UnlockTimeText;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public StarPanel StarPanel;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject CompleteGameObject;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject LockGo;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<GameObject> LevelMark;

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x7F6BA8", Offset = "0x7F6BA8", VA = "0x7F6BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x7F6C6C", Offset = "0x7F6C6C", VA = "0x7F6C6C")]
	private void OnButtonClick()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x7F6EF0", Offset = "0x7F6EF0", VA = "0x7F6EF0")]
	public void UpdateSceneName(string sceneName, int chapterNumber)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x7F6F24", Offset = "0x7F6F24", VA = "0x7F6F24")]
	private void ShowLevelMark(int chapterNum)
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x7F6FD8", Offset = "0x7F6FD8", VA = "0x7F6FD8")]
	private void UpdateUnlockTimeText()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x7F714C", Offset = "0x7F714C", VA = "0x7F714C")]
	private void SetLockActive(bool active)
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x7F7238", Offset = "0x7F7238", VA = "0x7F7238")]
	public LevelButton()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x7F72C0", Offset = "0x7F72C0", VA = "0x7F72C0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593EBC", Offset = "0x593EBC")]
	private void <Start>b__10_0()
	{
	}
}
[Token(Token = "0x2000070")]
public class LevelController : MonoBehaviour
{
	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LevelController Instance;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LevelPanel LevelPanel;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject ChapterPanel;

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x7F72C4", Offset = "0x7F72C4", VA = "0x7F72C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x7F7318", Offset = "0x7F7318", VA = "0x7F7318")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x7F7444", Offset = "0x7F7444", VA = "0x7F7444")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x7F7570", Offset = "0x7F7570", VA = "0x7F7570")]
	private void Start()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x7F7574", Offset = "0x7F7574", VA = "0x7F7574")]
	private void Update()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x7F7578", Offset = "0x7F7578", VA = "0x7F7578")]
	public void OnBlackCall(float time)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x7F76BC", Offset = "0x7F76BC", VA = "0x7F76BC")]
	private void ShowChapterPanel()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x7F770C", Offset = "0x7F770C", VA = "0x7F770C")]
	public void ClickChapterButton(List<string> nameList, float time, int chapterNum)
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x7F7950", Offset = "0x7F7950", VA = "0x7F7950")]
	private void ShowLevelPanel()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x7F79A0", Offset = "0x7F79A0", VA = "0x7F79A0")]
	public LevelController()
	{
	}
}
[Token(Token = "0x2000071")]
public delegate void BackDelegate(float afterTime);
[Token(Token = "0x2000072")]
public class LevelPanel : MonoBehaviour
{
	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<LevelButton> LevelButtonList;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button BlackButton;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator animator;

	[Token(Token = "0x14000005")]
	public event BackDelegate BackEvent
	{
		[Token(Token = "0x6000245")]
		[Address(RVA = "0x7F73A0", Offset = "0x7F73A0", VA = "0x7F73A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593ECC", Offset = "0x593ECC")]
		add
		{
		}
		[Token(Token = "0x6000246")]
		[Address(RVA = "0x7F74CC", Offset = "0x7F74CC", VA = "0x7F74CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593EDC", Offset = "0x593EDC")]
		remove
		{
		}
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x7F8050", Offset = "0x7F8050", VA = "0x7F8050")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x7F80E4", Offset = "0x7F80E4", VA = "0x7F80E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x7F8178", Offset = "0x7F8178", VA = "0x7F8178")]
	private void OnBlackButton()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x7F782C", Offset = "0x7F782C", VA = "0x7F782C")]
	public void UpdateSceneInfo(List<string> sceneNameList, int chapterNum)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x7F7B74", Offset = "0x7F7B74", VA = "0x7F7B74")]
	public void HideLevelButton(int level, bool hide)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x7F8238", Offset = "0x7F8238", VA = "0x7F8238")]
	public LevelPanel()
	{
	}
}
[Token(Token = "0x2000073")]
public class QuitGame : MonoBehaviour
{
	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button QuitButton;

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x6F71B0", Offset = "0x6F71B0", VA = "0x6F71B0")]
	private void Start()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x6F7208", Offset = "0x6F7208", VA = "0x6F7208")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x6F729C", Offset = "0x6F729C", VA = "0x6F729C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x6F7330", Offset = "0x6F7330", VA = "0x6F7330")]
	private void OnQuitButton()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x6F7338", Offset = "0x6F7338", VA = "0x6F7338")]
	public QuitGame()
	{
	}
}
[Token(Token = "0x2000074")]
public class TabToggle : MonoBehaviour
{
	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject panel;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Button button;

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x6FE7A0", Offset = "0x6FE7A0", VA = "0x6FE7A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x6FE7A4", Offset = "0x6FE7A4", VA = "0x6FE7A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x6FE7A8", Offset = "0x6FE7A8", VA = "0x6FE7A8")]
	public TabToggle()
	{
	}
}
[Token(Token = "0x2000075")]
public class ToogleGroupController : MonoBehaviour
{
	[Token(Token = "0x2000262")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA68", Offset = "0x58EA68")]
	private sealed class <>c__DisplayClass2_0
	{
		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ToogleGroupController <>4__this;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TabToggle tabToggle;

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x6FFB00", Offset = "0x6FFB00", VA = "0x6FFB00")]
		public <>c__DisplayClass2_0()
		{
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x6FFB78", Offset = "0x6FFB78", VA = "0x6FFB78")]
		internal void <AddButtonListener>b__0()
		{
		}
	}

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<TabToggle> TabToggleList;

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x6FF7A0", Offset = "0x6FF7A0", VA = "0x6FF7A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x6FF8B0", Offset = "0x6FF8B0", VA = "0x6FF8B0")]
	private void AddButtonListener(TabToggle tabToggle)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x6FF970", Offset = "0x6FF970", VA = "0x6FF970")]
	private void SelectTab(TabToggle tabToggle)
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x6FFB08", Offset = "0x6FFB08", VA = "0x6FFB08")]
	public ToogleGroupController()
	{
	}
}
[Token(Token = "0x2000076")]
public delegate void InitQYSDK();
[Token(Token = "0x2000077")]
public delegate void GetIQIYIAccountInfo();
[Token(Token = "0x2000078")]
public delegate void Refsh_GlobalQrRanking();
[Token(Token = "0x2000079")]
public class AlleventManager : MonoBehaviour
{
	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AlleventManager instense;

	[Token(Token = "0x14000006")]
	public event InitQYSDK initQYSDK
	{
		[Token(Token = "0x6000265")]
		[Address(RVA = "0x1012D60", Offset = "0x1012D60", VA = "0x1012D60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593EEC", Offset = "0x593EEC")]
		add
		{
		}
		[Token(Token = "0x6000266")]
		[Address(RVA = "0x1012E04", Offset = "0x1012E04", VA = "0x1012E04")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593EFC", Offset = "0x593EFC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event GetIQIYIAccountInfo getIQIYIAccountInfo
	{
		[Token(Token = "0x6000267")]
		[Address(RVA = "0x1012EA8", Offset = "0x1012EA8", VA = "0x1012EA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F0C", Offset = "0x593F0C")]
		add
		{
		}
		[Token(Token = "0x6000268")]
		[Address(RVA = "0x1012F4C", Offset = "0x1012F4C", VA = "0x1012F4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F1C", Offset = "0x593F1C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Refsh_GlobalQrRanking refsh_GlobalQrRanking
	{
		[Token(Token = "0x6000269")]
		[Address(RVA = "0x1012FF0", Offset = "0x1012FF0", VA = "0x1012FF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F2C", Offset = "0x593F2C")]
		add
		{
		}
		[Token(Token = "0x600026A")]
		[Address(RVA = "0x1013094", Offset = "0x1013094", VA = "0x1013094")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F3C", Offset = "0x593F3C")]
		remove
		{
		}
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x1013138", Offset = "0x1013138", VA = "0x1013138")]
	public void Awake()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x10131C8", Offset = "0x10131C8", VA = "0x10131C8")]
	public void InitQYSDKCallBack()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x10131DC", Offset = "0x10131DC", VA = "0x10131DC")]
	public void GetIQIYIAccountInfoCallBack()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x10133F8", Offset = "0x10133F8", VA = "0x10133F8")]
	public void RefshGlobalQrRanking()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x101340C", Offset = "0x101340C", VA = "0x101340C")]
	public AlleventManager()
	{
	}
}
[Token(Token = "0x200007A")]
public class GameDataManager : MonoBehaviour
{
	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameDataManager instance;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string userId;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string nick;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string icon;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SDK_Type sdk;

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x101B54C", Offset = "0x101B54C", VA = "0x101B54C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x101B5DC", Offset = "0x101B5DC", VA = "0x101B5DC")]
	public GameDataManager()
	{
	}
}
[Token(Token = "0x200007B")]
public class MyButton : MonoBehaviour
{
	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isDown;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isUp;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool onDown;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool onPress;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool onUp;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputDevice device;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public XRNode handtype;

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x7FE544", Offset = "0x7FE544", VA = "0x7FE544")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x7FE570", Offset = "0x7FE570", VA = "0x7FE570")]
	public bool OnDown()
	{
		return default(bool);
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x7FE6B4", Offset = "0x7FE6B4", VA = "0x7FE6B4")]
	public bool OnUp()
	{
		return default(bool);
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x7FE7F8", Offset = "0x7FE7F8", VA = "0x7FE7F8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x7FE81C", Offset = "0x7FE81C", VA = "0x7FE81C")]
	public MyButton()
	{
	}
}
[Token(Token = "0x200007C")]
public class QVRHand : MonoBehaviour
{
	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MyButton button;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator HandAnimator;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool Isleft;

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x6F6DBC", Offset = "0x6F6DBC", VA = "0x6F6DBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x6F6EF4", Offset = "0x6F6EF4", VA = "0x6F6EF4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x6F6FF0", Offset = "0x6F6FF0", VA = "0x6F6FF0")]
	public QVRHand()
	{
	}
}
[Token(Token = "0x200007D")]
public class QVRHandController : MonoBehaviour
{
	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public XRNode HandTyper;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputDevice handContorller;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float frequency;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float amplitude;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float VibrationTime;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float vTime;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool vBool;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MyButton button;

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x6F6FF8", Offset = "0x6F6FF8", VA = "0x6F6FF8")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x6F7064", Offset = "0x6F7064", VA = "0x6F7064")]
	private void Update()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x6F7120", Offset = "0x6F7120", VA = "0x6F7120")]
	public QVRHandController()
	{
	}
}
[Token(Token = "0x200007E")]
public class ResurrectionManager : MonoBehaviour
{
	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ResurrectionManager _this;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ResurrectionNode> _ResurrectionNodes;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool _ResurrectionState;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform _StartTimePoint;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform _BodyPoint;

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x6F77A8", Offset = "0x6F77A8", VA = "0x6F77A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x6F7800", Offset = "0x6F7800", VA = "0x6F7800")]
	public static ResurrectionManager GetSingleton()
	{
		return null;
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x6F7850", Offset = "0x6F7850", VA = "0x6F7850")]
	private void Start()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x6F608C", Offset = "0x6F608C", VA = "0x6F608C")]
	public void OpenResurrectionPoint(GameObject go)
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0x6F7854", Offset = "0x6F7854", VA = "0x6F7854")]
	private void HideGround()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0x6F793C", Offset = "0x6F793C", VA = "0x6F793C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x6F7940", Offset = "0x6F7940", VA = "0x6F7940")]
	public ResurrectionManager()
	{
	}
}
[Token(Token = "0x200007F")]
public class ResurrectionNode : MonoBehaviour
{
	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject _TouchNode;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject _GroundNode;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform _BodyPoint;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform _StartTimePoint;

	[Token(Token = "0x6000284")]
	[Address(RVA = "0x6F79B0", Offset = "0x6F79B0", VA = "0x6F79B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x6F78F8", Offset = "0x6F78F8", VA = "0x6F78F8")]
	public void SetGroundNodeShow()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x6F79B4", Offset = "0x6F79B4", VA = "0x6F79B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x6F79B8", Offset = "0x6F79B8", VA = "0x6F79B8")]
	public ResurrectionNode()
	{
	}
}
[Token(Token = "0x2000080")]
public class ceshi : MonoBehaviour
{
	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text[] text1;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public StartGoTeach a;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public StartTime b;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ceshi instanse;

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xFAE8E4", Offset = "0xFAE8E4", VA = "0xFAE8E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xFAE938", Offset = "0xFAE938", VA = "0xFAE938")]
	private void Update()
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xFAEA68", Offset = "0xFAEA68", VA = "0xFAEA68")]
	public ceshi()
	{
	}
}
[Token(Token = "0x2000081")]
public class ceshi1 : MonoBehaviour
{
	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ceshi1 instanse;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text[] text;

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xFAEA70", Offset = "0xFAEA70", VA = "0xFAEA70")]
	public void Awake()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xFAEAC4", Offset = "0xFAEAC4", VA = "0xFAEAC4")]
	public ceshi1()
	{
	}
}
[Token(Token = "0x2000082")]
public class xreye : MonoBehaviour
{
	[Token(Token = "0x600028D")]
	[Address(RVA = "0xFAEFF0", Offset = "0xFAEFF0", VA = "0xFAEFF0")]
	private void Start()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xFAEFF4", Offset = "0xFAEFF4", VA = "0xFAEFF4")]
	private void Update()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xFAEFF8", Offset = "0xFAEFF8", VA = "0xFAEFF8")]
	public xreye()
	{
	}
}
[Token(Token = "0x2000083")]
public class AmbientSound : MonoBehaviour
{
	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource s;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeintime;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float t;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool fadeblack;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float vol;

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x1013414", Offset = "0x1013414", VA = "0x1013414")]
	private void Start()
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x1013554", Offset = "0x1013554", VA = "0x1013554")]
	private void Update()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x10135D4", Offset = "0x10135D4", VA = "0x10135D4")]
	public AmbientSound()
	{
	}
}
[Token(Token = "0x2000084")]
public class TestDian : MonoBehaviour
{
	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject _node;

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x6FEE6C", Offset = "0x6FEE6C", VA = "0x6FEE6C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x6FEFC4", Offset = "0x6FEFC4", VA = "0x6FEFC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x6FEFC8", Offset = "0x6FEFC8", VA = "0x6FEFC8")]
	public TestDian()
	{
	}
}
[Token(Token = "0x2000085")]
public class TestJishi : MonoBehaviour
{
	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Text> _text;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool start;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float ffff;

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x6FEFD0", Offset = "0x6FEFD0", VA = "0x6FEFD0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x6FEFD4", Offset = "0x6FEFD4", VA = "0x6FEFD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x6FF0B0", Offset = "0x6FF0B0", VA = "0x6FF0B0")]
	public TestJishi()
	{
	}
}
[Token(Token = "0x2000086")]
public class Hover : MonoBehaviour
{
	[Token(Token = "0x6000299")]
	[Address(RVA = "0x7ED2B4", Offset = "0x7ED2B4", VA = "0x7ED2B4")]
	private void Start()
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x7ED2B8", Offset = "0x7ED2B8", VA = "0x7ED2B8")]
	private void Update()
	{
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x7ED398", Offset = "0x7ED398", VA = "0x7ED398")]
	public Hover()
	{
	}
}
[Token(Token = "0x2000087")]
public class MathUtils
{
	[Token(Token = "0x600029C")]
	[Address(RVA = "0x7FAB90", Offset = "0x7FAB90", VA = "0x7FAB90")]
	public static float GetQuatLength(Quaternion q)
	{
		return default(float);
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x7FAC4C", Offset = "0x7FAC4C", VA = "0x7FAC4C")]
	public static Quaternion GetQuatConjugate(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x7FAC88", Offset = "0x7FAC88", VA = "0x7FAC88")]
	public static Quaternion GetQuatLog(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x7FAD74", Offset = "0x7FAD74", VA = "0x7FAD74")]
	public static Quaternion GetQuatExp(Quaternion q)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x7FAE68", Offset = "0x7FAE68", VA = "0x7FAE68")]
	public static Quaternion GetQuatSquad(float t, Quaternion q0, Quaternion q1, Quaternion a0, Quaternion a1)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x7FB178", Offset = "0x7FB178", VA = "0x7FB178")]
	public static Quaternion GetSquadIntermediate(Quaternion q0, Quaternion q1, Quaternion q2)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x7FB32C", Offset = "0x7FB32C", VA = "0x7FB32C")]
	public static float Ease(float t, float k1, float k2)
	{
		return default(float);
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x7FAF5C", Offset = "0x7FAF5C", VA = "0x7FAF5C")]
	public static Quaternion Slerp(Quaternion p, Quaternion q, float t)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x7FB484", Offset = "0x7FB484", VA = "0x7FB484")]
	public MathUtils()
	{
	}
}
[Token(Token = "0x2000088")]
public enum eOrientationMode
{
	[Token(Token = "0x400023A")]
	NODE,
	[Token(Token = "0x400023B")]
	TANGENT
}
[Token(Token = "0x2000089")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x58DB88", Offset = "0x58DB88")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x58DB88", Offset = "0x58DB88")]
public class SplineController : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000263")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA78", Offset = "0x58EA78")]
	private sealed class <>c
	{
		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Converter<Component, Transform> <>9__12_0;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Comparison<Transform> <>9__12_1;

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x6FA9DC", Offset = "0x6FA9DC", VA = "0x6FA9DC")]
		public <>c()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x6FA9E4", Offset = "0x6FA9E4", VA = "0x6FA9E4")]
		internal Transform <GetTransforms>b__12_0(Component c)
		{
			return null;
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x6FAA68", Offset = "0x6FAA68", VA = "0x6FAA68")]
		internal int <GetTransforms>b__12_1(Transform a, Transform b)
		{
			return default(int);
		}
	}

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject SplineRoot;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Duration;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public eOrientationMode OrientationMode;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public eWrapMode WrapMode;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool AutoStart;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool AutoClose;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public bool HideOnExecute;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SplineInterpolator mSplineInterp;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform[] mTransforms;

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x6F9468", Offset = "0x6F9468", VA = "0x6F9468")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x6FA040", Offset = "0x6FA040", VA = "0x6FA040")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x6F9984", Offset = "0x6F9984", VA = "0x6F9984")]
	private void SetupSplineInterpolator(SplineInterpolator interp, Transform[] trans)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x6F96DC", Offset = "0x6F96DC", VA = "0x6F96DC")]
	private Transform[] GetTransforms()
	{
		return null;
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x6FA140", Offset = "0x6FA140", VA = "0x6FA140")]
	private void DisableTransforms()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x6FA1D8", Offset = "0x6FA1D8", VA = "0x6FA1D8")]
	private void FollowSpline()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x6FA958", Offset = "0x6FA958", VA = "0x6FA958")]
	public SplineController()
	{
	}
}
[Token(Token = "0x200008A")]
public enum eEndPointsMode
{
	[Token(Token = "0x4000246")]
	AUTO,
	[Token(Token = "0x4000247")]
	AUTOCLOSED,
	[Token(Token = "0x4000248")]
	EXPLICIT
}
[Token(Token = "0x200008B")]
public enum eWrapMode
{
	[Token(Token = "0x400024A")]
	ONCE,
	[Token(Token = "0x400024B")]
	LOOP
}
[Token(Token = "0x200008C")]
public delegate void OnEndCallback();
[Token(Token = "0x200008D")]
public class SplineInterpolator : MonoBehaviour
{
	[Token(Token = "0x2000264")]
	internal class SplineNode
	{
		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Vector3 Point;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal Quaternion Rot;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal float Time;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Vector2 EaseIO;

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x6FAD20", Offset = "0x6FAD20", VA = "0x6FAD20")]
		internal SplineNode(Vector3 p, Quaternion q, float t, Vector2 io)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x6FAE44", Offset = "0x6FAE44", VA = "0x6FAE44")]
		internal SplineNode(SplineNode o)
		{
		}
	}

	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private eEndPointsMode mEndPointsMode;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<SplineNode> mNodes;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string mState;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mRotations;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OnEndCallback mOnEndCallback;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float mCurrentTime;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int mCurrentIdx;

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x6FAABC", Offset = "0x6FAABC", VA = "0x6FAABC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x6F9D14", Offset = "0x6F9D14", VA = "0x6F9D14")]
	public void StartInterpolation(OnEndCallback endCallback, bool bRotations, eWrapMode mode)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x6FA230", Offset = "0x6FA230", VA = "0x6FA230")]
	public void Reset()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x6FA2AC", Offset = "0x6FA2AC", VA = "0x6FA2AC")]
	public void AddPoint(Vector3 pos, Quaternion quat, float timeInSeconds, Vector2 easeInOut)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x6FAAC0", Offset = "0x6FAAC0", VA = "0x6FAAC0")]
	private void SetInput()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x6FADA4", Offset = "0x6FADA4", VA = "0x6FADA4")]
	private void SetExplicitMode()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x6FA3E4", Offset = "0x6FA3E4", VA = "0x6FA3E4")]
	public void SetAutoCloseMode(float joiningPointTime)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x6FAE9C", Offset = "0x6FAE9C", VA = "0x6FAE9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x6FB5CC", Offset = "0x6FB5CC", VA = "0x6FB5CC")]
	private Quaternion GetSquad(int idxFirstPoint, float t)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x6FB288", Offset = "0x6FB288", VA = "0x6FB288")]
	public Vector3 GetHermiteInternal(int idxFirstPoint, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x6F9DF8", Offset = "0x6F9DF8", VA = "0x6F9DF8")]
	public Vector3 GetHermiteAtTime(float timeParam)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x6FB814", Offset = "0x6FB814", VA = "0x6FB814")]
	public SplineInterpolator()
	{
	}
}
[Token(Token = "0x200008E")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x58DC10", Offset = "0x58DC10")]
public class VolumetricLight : MonoBehaviour
{
	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Light _light;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material _material;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CommandBuffer _commandBuffer;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CommandBuffer _cascadeShadowCommandBuffer;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float intensityMultiplier;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5909F8", Offset = "0x5909F8")]
	public int SampleCount;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590A14", Offset = "0x590A14")]
	public float ScatteringCoef;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590A2C", Offset = "0x590A2C")]
	public float ExtinctionCoef;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590A48", Offset = "0x590A48")]
	public float SkyboxExtinctionCoef;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590A60", Offset = "0x590A60")]
	public float MieG;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool HeightFog;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590A7C", Offset = "0x590A7C")]
	public float HeightScale;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float GroundLevel;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool Noise;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float NoiseScale;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float NoiseIntensity;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float NoiseIntensityOffset;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public Vector2 NoiseVelocity;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590A94", Offset = "0x590A94")]
	public float MaxRayLength;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector4[] _frustumCorners;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _reversedZ;

	[Token(Token = "0x1700000F")]
	public Light Light
	{
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0xFA8920", Offset = "0xFA8920", VA = "0xFA8920")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	public Material VolumetricMaterial
	{
		[Token(Token = "0x60002BF")]
		[Address(RVA = "0xFA8928", Offset = "0xFA8928", VA = "0xFA8928")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000009")]
	public event Action<VolumetricLightRenderer, VolumetricLight, CommandBuffer, Matrix4x4> CustomRenderEvent
	{
		[Token(Token = "0x60002BC")]
		[Address(RVA = "0xFA87D8", Offset = "0xFA87D8", VA = "0xFA87D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F4C", Offset = "0x593F4C")]
		add
		{
		}
		[Token(Token = "0x60002BD")]
		[Address(RVA = "0xFA887C", Offset = "0xFA887C", VA = "0xFA887C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F5C", Offset = "0x593F5C")]
		remove
		{
		}
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xFA8930", Offset = "0xFA8930", VA = "0xFA8930")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xFA8BD0", Offset = "0xFA8BD0", VA = "0xFA8BD0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xFA8CFC", Offset = "0xFA8CFC", VA = "0xFA8CFC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xFA8E28", Offset = "0xFA8E28", VA = "0xFA8E28")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xFA8E94", Offset = "0xFA8E94", VA = "0xFA8E94")]
	private void VolumetricLightRenderer_PreRenderEvent(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xFA9388", Offset = "0xFA9388", VA = "0xFA9388")]
	private void SetupPointLight(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xFA9CE0", Offset = "0xFA9CE0", VA = "0xFA9CE0")]
	private void SetupSpotLight(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xFAAE24", Offset = "0xFAAE24", VA = "0xFAAE24")]
	private void SetupDirectionalLight(VolumetricLightRenderer renderer, Matrix4x4 viewProj)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xFAB53C", Offset = "0xFAB53C", VA = "0xFAB53C")]
	private bool IsCameraInPointLightBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xFAB6A8", Offset = "0xFAB6A8", VA = "0xFAB6A8")]
	private bool IsCameraInSpotLightBounds()
	{
		return default(bool);
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xFAB974", Offset = "0xFAB974", VA = "0xFAB974")]
	public VolumetricLight()
	{
	}
}
[Token(Token = "0x200008F")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x58DC74", Offset = "0x58DC74")]
public class VolumetricLightRenderer : MonoBehaviour
{
	[Token(Token = "0x2000265")]
	public enum VolumtericResolution
	{
		[Token(Token = "0x40011B3")]
		Full,
		[Token(Token = "0x40011B4")]
		Half,
		[Token(Token = "0x40011B5")]
		Quarter
	}

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Mesh _pointLightMesh;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Mesh _spotLightMesh;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Material _lightMaterial;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera _camera;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer _preLightPass;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Matrix4x4 _viewProj;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material _blitAddMaterial;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material _bilateralBlurMaterial;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private RenderTexture _volumeLightTexture;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RenderTexture _halfVolumeLightTexture;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private RenderTexture _quarterVolumeLightTexture;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Texture _defaultSpotCookie;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private RenderTexture _halfDepthBuffer;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private RenderTexture _quarterDepthBuffer;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private VolumtericResolution _currentResolution;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Texture2D _ditheringTexture;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Texture3D _noiseTexture;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public VolumtericResolution Resolution;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Texture DefaultSpotCookie;

	[Token(Token = "0x17000011")]
	public CommandBuffer GlobalCommandBuffer
	{
		[Token(Token = "0x60002CD")]
		[Address(RVA = "0xFABA44", Offset = "0xFABA44", VA = "0xFABA44")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1400000A")]
	public static event Action<VolumetricLightRenderer, Matrix4x4> PreRenderEvent
	{
		[Token(Token = "0x60002CB")]
		[Address(RVA = "0xFA8C48", Offset = "0xFA8C48", VA = "0xFA8C48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F6C", Offset = "0x593F6C")]
		add
		{
		}
		[Token(Token = "0x60002CC")]
		[Address(RVA = "0xFA8D74", Offset = "0xFA8D74", VA = "0xFA8D74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F7C", Offset = "0x593F7C")]
		remove
		{
		}
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xFABA4C", Offset = "0xFABA4C", VA = "0xFABA4C")]
	public static Material GetLightMaterial()
	{
		return null;
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xFABA9C", Offset = "0xFABA9C", VA = "0xFABA9C")]
	public static Mesh GetPointLightMesh()
	{
		return null;
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xFABAEC", Offset = "0xFABAEC", VA = "0xFABAEC")]
	public static Mesh GetSpotLightMesh()
	{
		return null;
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xFAB678", Offset = "0xFAB678", VA = "0xFAB678")]
	public RenderTexture GetVolumeLightBuffer()
	{
		return null;
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xFA9358", Offset = "0xFA9358", VA = "0xFA9358")]
	public RenderTexture GetVolumeLightDepthBuffer()
	{
		return null;
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xFABB3C", Offset = "0xFABB3C", VA = "0xFABB3C")]
	public static Texture GetDefaultSpotCookie()
	{
		return null;
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xFABB8C", Offset = "0xFABB8C", VA = "0xFABB8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xFADE4C", Offset = "0xFADE4C", VA = "0xFADE4C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xFADEA4", Offset = "0xFADEA4", VA = "0xFADEA4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xFABFA8", Offset = "0xFABFA8", VA = "0xFABFA8")]
	private void ChangeResolution()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xFADEFC", Offset = "0xFADEFC", VA = "0xFADEFC")]
	public void OnPreRender()
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xFAE510", Offset = "0xFAE510", VA = "0xFAE510")]
	[ImageEffectOpaque]
	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xFAE420", Offset = "0xFAE420", VA = "0xFAE420")]
	private void UpdateMaterialParameters()
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xFAE81C", Offset = "0xFAE81C", VA = "0xFAE81C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xFACB84", Offset = "0xFACB84", VA = "0xFACB84")]
	private void LoadNoise3dTexture()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xFAD030", Offset = "0xFAD030", VA = "0xFAD030")]
	private void GenerateDitherTexture()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xFAC43C", Offset = "0xFAC43C", VA = "0xFAC43C")]
	private Mesh CreateSpotLightMesh()
	{
		return null;
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xFAE8D0", Offset = "0xFAE8D0", VA = "0xFAE8D0")]
	public VolumetricLightRenderer()
	{
	}
}
[Token(Token = "0x2000090")]
public class fengshan : MonoBehaviour
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float ffffff;

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xFAEACC", Offset = "0xFAEACC", VA = "0xFAEACC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xFAEAD0", Offset = "0xFAEAD0", VA = "0xFAEAD0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xFAEBDC", Offset = "0xFAEBDC", VA = "0xFAEBDC")]
	public fengshan()
	{
	}
}
[Token(Token = "0x2000091")]
public class kaishi : MonoBehaviour
{
	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TestJishi _jishi;

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xFAEBEC", Offset = "0xFAEBEC", VA = "0xFAEBEC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xFAEBF0", Offset = "0xFAEBF0", VA = "0xFAEBF0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xFAEC20", Offset = "0xFAEC20", VA = "0xFAEC20")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xFAEC24", Offset = "0xFAEC24", VA = "0xFAEC24")]
	public kaishi()
	{
	}
}
[Token(Token = "0x2000092")]
public class panyandian : MonoBehaviour
{
	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject _hold;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject _touch;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool _state;

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xFAEC2C", Offset = "0xFAEC2C", VA = "0xFAEC2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xFAEF08", Offset = "0xFAEF08", VA = "0xFAEF08")]
	public void Hide()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xFAEF4C", Offset = "0xFAEF4C", VA = "0xFAEF4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xFAEF50", Offset = "0xFAEF50", VA = "0xFAEF50")]
	public panyandian()
	{
	}
}
[Token(Token = "0x2000093")]
public class ro : MonoBehaviour
{
	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xFAEF58", Offset = "0xFAEF58", VA = "0xFAEF58")]
	private void Start()
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xFAEF5C", Offset = "0xFAEF5C", VA = "0xFAEF5C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xFAEFE8", Offset = "0xFAEFE8", VA = "0xFAEFE8")]
	public ro()
	{
	}
}
namespace AdvancedDissolve_Example
{
	[Token(Token = "0x2000094")]
	public class AxisRotate : MonoBehaviour
	{
		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x1005740", Offset = "0x1005740", VA = "0x1005740")]
		private void Start()
		{
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x1005744", Offset = "0x1005744", VA = "0x1005744")]
		private void Update()
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x1005810", Offset = "0x1005810", VA = "0x1005810")]
		private void RotateUpDown(bool rUP)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x1005958", Offset = "0x1005958", VA = "0x1005958")]
		private void RotateLeftRight(bool rLeft)
		{
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x1005AA0", Offset = "0x1005AA0", VA = "0x1005AA0")]
		private void RotateForwardBackward(bool rForward)
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x1005BE8", Offset = "0x1005BE8", VA = "0x1005BE8")]
		public AxisRotate()
		{
		}
	}
	[Token(Token = "0x2000095")]
	public class CameraOrbitalMove : MonoBehaviour
	{
		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4000285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float xSpeed;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ySpeed;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yMinLimit;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float yMaxLimit;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distanceMin;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distanceMax;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float x;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float y;

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1006234", Offset = "0x1006234", VA = "0x1006234")]
		private void Start()
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x100626C", Offset = "0x100626C", VA = "0x100626C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x1006548", Offset = "0x1006548", VA = "0x1006548")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x10065F8", Offset = "0x10065F8", VA = "0x10065F8")]
		public CameraOrbitalMove()
		{
		}
	}
	[Token(Token = "0x2000096")]
	[ExecuteInEditMode]
	public class CollectDissolveMaterials : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000266")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA88", Offset = "0x58EA88")]
		private sealed class <>c
		{
			[Token(Token = "0x40011B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40011B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<Material> <>9__8_0;

			[Token(Token = "0x40011B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Predicate<Material> <>9__8_1;

			[Token(Token = "0x6000B94")]
			[Address(RVA = "0x1006C28", Offset = "0x1006C28", VA = "0x1006C28")]
			public <>c()
			{
			}

			[Token(Token = "0x6000B95")]
			[Address(RVA = "0x1006C30", Offset = "0x1006C30", VA = "0x1006C30")]
			internal bool <Start>b__8_0(Material item)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B96")]
			[Address(RVA = "0x1006C9C", Offset = "0x1006C9C", VA = "0x1006C9C")]
			internal bool <Start>b__8_1(Material item)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Controller_Cutout controller_Cutout;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Controller_Edge controller_Edge;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Controller_Mask_Box controller_Mask_Box;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Controller_Mask_Cone controller_Mask_cone;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Controller_Mask_Cylinder controller_Mask_Cylinder;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Controller_Mask_Cylinder_Alt Controller_Mask_Cylinder_Alt;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Controller_Mask_Plane controller_Mask_Plane;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Controller_Mask_Sphere controller_Mask_Sphere;

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x1006620", Offset = "0x1006620", VA = "0x1006620")]
		private void Start()
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x1006BBC", Offset = "0x1006BBC", VA = "0x1006BBC")]
		public CollectDissolveMaterials()
		{
		}
	}
	[Token(Token = "0x2000097")]
	public class CylinderDroneController : MonoBehaviour
	{
		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Controller_Mask_Cylinder_Alt maskController;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem plasma;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem.EmissionModule paslamEmissionModule;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x100DB24", Offset = "0x100DB24", VA = "0x100DB24")]
		private void Start()
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x100DBA4", Offset = "0x100DBA4", VA = "0x100DBA4")]
		private void Update()
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x100DD60", Offset = "0x100DD60", VA = "0x100DD60")]
		public CylinderDroneController()
		{
		}
	}
	[Token(Token = "0x2000098")]
	public class LookAtMouse : MonoBehaviour
	{
		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Vector3 mouseWorldPosition;

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x100DEA4", Offset = "0x100DEA4", VA = "0x100DEA4")]
		private void Start()
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x100DF28", Offset = "0x100DF28", VA = "0x100DF28")]
		private void Update()
		{
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x100E034", Offset = "0x100E034", VA = "0x100E034")]
		public LookAtMouse()
		{
		}
	}
	[Token(Token = "0x2000099")]
	public class MinionBox : MonoBehaviour
	{
		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float delta;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 scale;

		[Token(Token = "0x400029C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float moveSpeed;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 randomRotate;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float rotateSpeed;

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x100E03C", Offset = "0x100E03C", VA = "0x100E03C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x100E250", Offset = "0x100E250", VA = "0x100E250")]
		private void Update()
		{
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x100E040", Offset = "0x100E040", VA = "0x100E040")]
		private void Init()
		{
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x100E43C", Offset = "0x100E43C", VA = "0x100E43C")]
		public MinionBox()
		{
		}
	}
	[Token(Token = "0x200009A")]
	public class MinionCone : MonoBehaviour
	{
		[Token(Token = "0x6000304")]
		[Address(RVA = "0x100E444", Offset = "0x100E444", VA = "0x100E444")]
		private void Start()
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x100E448", Offset = "0x100E448", VA = "0x100E448")]
		private void Update()
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x100E44C", Offset = "0x100E44C", VA = "0x100E44C")]
		public MinionCone()
		{
		}
	}
	[Token(Token = "0x200009B")]
	public class MinionController_Box : MonoBehaviour
	{
		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject minion1;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject minion2;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject minion3;

		[Token(Token = "0x40002A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool minionsAreActive;

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x100E454", Offset = "0x100E454", VA = "0x100E454")]
		private void Start()
		{
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x100E540", Offset = "0x100E540", VA = "0x100E540")]
		private void Update()
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x100E594", Offset = "0x100E594", VA = "0x100E594")]
		private void Show()
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x100E458", Offset = "0x100E458", VA = "0x100E458")]
		private void Hide()
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x100E680", Offset = "0x100E680", VA = "0x100E680")]
		public MinionController_Box()
		{
		}
	}
	[Token(Token = "0x200009C")]
	public class MinionController_Cone : MonoBehaviour
	{
		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject minion1;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject minion2;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject minion3;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool minionsAreActive;

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x100E688", Offset = "0x100E688", VA = "0x100E688")]
		private void Start()
		{
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x100E774", Offset = "0x100E774", VA = "0x100E774")]
		private void Update()
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x100E7C8", Offset = "0x100E7C8", VA = "0x100E7C8")]
		private void Show()
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x100E68C", Offset = "0x100E68C", VA = "0x100E68C")]
		private void Hide()
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x100E8B4", Offset = "0x100E8B4", VA = "0x100E8B4")]
		public MinionController_Cone()
		{
		}
	}
	[Token(Token = "0x200009D")]
	public class MinionController_Cylinder : MonoBehaviour
	{
		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject minion1;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject minion2;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject minion3;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool minionsAreActive;

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x100E8BC", Offset = "0x100E8BC", VA = "0x100E8BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x100E9A8", Offset = "0x100E9A8", VA = "0x100E9A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x100E9FC", Offset = "0x100E9FC", VA = "0x100E9FC")]
		private void Show()
		{
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0x100E8C0", Offset = "0x100E8C0", VA = "0x100E8C0")]
		private void Hide()
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x100EAE8", Offset = "0x100EAE8", VA = "0x100EAE8")]
		public MinionController_Cylinder()
		{
		}
	}
	[Token(Token = "0x200009E")]
	public class MinionController_Sphere : MonoBehaviour
	{
		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject minion1;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject minion2;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject minion3;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool minionsAreActive;

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x100EAF0", Offset = "0x100EAF0", VA = "0x100EAF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x100EBDC", Offset = "0x100EBDC", VA = "0x100EBDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x100EC30", Offset = "0x100EC30", VA = "0x100EC30")]
		private void Show()
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x100EAF4", Offset = "0x100EAF4", VA = "0x100EAF4")]
		private void Hide()
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x100ED1C", Offset = "0x100ED1C", VA = "0x100ED1C")]
		public MinionController_Sphere()
		{
		}
	}
	[Token(Token = "0x200009F")]
	public class MinionCylinder : MonoBehaviour
	{
		[Token(Token = "0x40002AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int ID;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject drone;

		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float fDistance;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float rotateSpeed;

		[Token(Token = "0x40002B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float deltaDesigion;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float deltaDesigionRandomTime;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float deltaShooting;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int rotateUpDownLeftRight;

		[Token(Token = "0x40002B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float deltaRotate;

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x100ED24", Offset = "0x100ED24", VA = "0x100ED24")]
		private void Start()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x100EE78", Offset = "0x100EE78", VA = "0x100EE78")]
		private void Update()
		{
		}

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x100F59C", Offset = "0x100F59C", VA = "0x100F59C")]
		private void UpdateShaderData()
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x100F430", Offset = "0x100F430", VA = "0x100F430")]
		protected void OrbitTower(bool bLeft)
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x100F1AC", Offset = "0x100F1AC", VA = "0x100F1AC")]
		protected void RotateUpDown(bool bUp)
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x100F574", Offset = "0x100F574", VA = "0x100F574")]
		public Vector3 GetTargetPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x100F830", Offset = "0x100F830", VA = "0x100F830")]
		public MinionCylinder()
		{
		}
	}
	[Token(Token = "0x20000A0")]
	public class MouseMove : MonoBehaviour
	{
		[Token(Token = "0x6000322")]
		[Address(RVA = "0x100F840", Offset = "0x100F840", VA = "0x100F840")]
		private void Update()
		{
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x100F95C", Offset = "0x100F95C", VA = "0x100F95C")]
		public MouseMove()
		{
		}
	}
	[Token(Token = "0x20000A1")]
	public class ObjectOrbitalMove : MonoBehaviour
	{
		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float fDistance;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotateSpeed;

		[Token(Token = "0x40002BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxDistance;

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x100F964", Offset = "0x100F964", VA = "0x100F964")]
		private void Start()
		{
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x100FA44", Offset = "0x100FA44", VA = "0x100FA44")]
		private void Update()
		{
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x100FAF0", Offset = "0x100FAF0", VA = "0x100FAF0")]
		private void RotateLeftRight(bool bLeft)
		{
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x100FC34", Offset = "0x100FC34", VA = "0x100FC34")]
		private void RotateUpDown(bool bUp)
		{
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x100FE80", Offset = "0x100FE80", VA = "0x100FE80")]
		private void MoveForwardBackward()
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x10100C8", Offset = "0x10100C8", VA = "0x10100C8")]
		public ObjectOrbitalMove()
		{
		}
	}
	[Token(Token = "0x20000A2")]
	public class OnScreenMove : MonoBehaviour
	{
		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590ADC", Offset = "0x590ADC")]
		public Transform target;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float distanceFromCamera;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minDistance;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxDistance;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialPosition;

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x101093C", Offset = "0x101093C", VA = "0x101093C")]
		private void Start()
		{
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x1010978", Offset = "0x1010978", VA = "0x1010978")]
		private void Update()
		{
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x1010CD4", Offset = "0x1010CD4", VA = "0x1010CD4")]
		public OnScreenMove()
		{
		}
	}
	[Token(Token = "0x20000A3")]
	[ExecuteInEditMode]
	public class UIColorChange : MonoBehaviour
	{
		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float hue;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590AF0", Offset = "0x590AF0")]
		public Material[] diffuseMaterial;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material[] emissionMaterial;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Light[] lights;

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x1010F80", Offset = "0x1010F80", VA = "0x1010F80")]
		private void Start()
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x1011404", Offset = "0x1011404", VA = "0x1011404")]
		private void Update()
		{
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x1010F84", Offset = "0x1010F84", VA = "0x1010F84")]
		public void UpdateColors()
		{
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x1011450", Offset = "0x1011450", VA = "0x1011450")]
		public Color GetColor(Color _color)
		{
			return default(Color);
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x10114B0", Offset = "0x10114B0", VA = "0x10114B0")]
		public UIColorChange()
		{
		}
	}
	[Token(Token = "0x20000A4")]
	public class UIInput : MonoBehaviour
	{
		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text fpsText;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool displayFPS;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject menu;

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x1012154", Offset = "0x1012154", VA = "0x1012154")]
		private void Start()
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x1012158", Offset = "0x1012158", VA = "0x1012158")]
		private void Update()
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x1012490", Offset = "0x1012490", VA = "0x1012490")]
		private void UpdateFPS()
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x10125B4", Offset = "0x10125B4", VA = "0x10125B4")]
		public UIInput()
		{
		}
	}
	[Token(Token = "0x20000A5")]
	public class UIRadiusChange : MonoBehaviour
	{
		[Token(Token = "0x2000267")]
		public delegate void UpdateMyRadius();

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static UIRadiusChange get;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UpdateMyRadius DelegateMethod;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float radius;

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x10125BC", Offset = "0x10125BC", VA = "0x10125BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x1012628", Offset = "0x1012628", VA = "0x1012628")]
		private void Update()
		{
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x10129B4", Offset = "0x10129B4", VA = "0x10129B4")]
		public UIRadiusChange()
		{
		}
	}
	[Token(Token = "0x20000A6")]
	[ExecuteInEditMode]
	public class Controller_Cutout : MonoBehaviour
	{
		[Token(Token = "0x2000268")]
		public enum CUTOUT_SOURCE
		{
			[Token(Token = "0x40011BA")]
			MainMapAlpha,
			[Token(Token = "0x40011BB")]
			CustomMap,
			[Token(Token = "0x40011BC")]
			TwoCustomMaps,
			[Token(Token = "0x40011BD")]
			ThreeCustomMaps
		}

		[Token(Token = "0x2000269")]
		public enum MAPPING
		{
			[Token(Token = "0x40011BF")]
			Normal,
			[Token(Token = "0x40011C0")]
			Triplanar,
			[Token(Token = "0x40011C1")]
			ScreenSpace
		}

		[Token(Token = "0x200026A")]
		public enum TRIPLANAR_SPACE
		{
			[Token(Token = "0x40011C3")]
			World,
			[Token(Token = "0x40011C4")]
			Local
		}

		[Token(Token = "0x200026B")]
		public enum UVSET
		{
			[Token(Token = "0x40011C6")]
			UV0,
			[Token(Token = "0x40011C7")]
			UV1
		}

		[Token(Token = "0x200026C")]
		public enum TEXTURE_BLEND
		{
			[Token(Token = "0x40011C9")]
			Multiple,
			[Token(Token = "0x40011CA")]
			Add
		}

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Cutout get;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x40002D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590B04", Offset = "0x590B04")]
		public float noise;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590B18", Offset = "0x590B18")]
		public Texture texture1;

		[Token(Token = "0x40002D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 texture1Tiling;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 texture1Offset;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 texture1Scroll;

		[Token(Token = "0x40002D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590B2C", Offset = "0x590B2C")]
		public Texture texture2;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector2 texture2Tiling;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector2 texture2Offset;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 texture2Scroll;

		[Token(Token = "0x40002DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590B40", Offset = "0x590B40")]
		public Texture texture3;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Vector2 texture3Tiling;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector2 texture3Offset;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Vector3 texture3Scroll;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590B54", Offset = "0x590B54")]
		public UVSET uvSet;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public TEXTURE_BLEND textureBlend;

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x1006D1C", Offset = "0x1006D1C", VA = "0x1006D1C")]
		private void Start()
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x1006D70", Offset = "0x1006D70", VA = "0x1006D70")]
		private void Update()
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x1006D74", Offset = "0x1006D74", VA = "0x1006D74")]
		private void UpdateShaderData()
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x10073F8", Offset = "0x10073F8", VA = "0x10073F8")]
		public void UpdateCutoutSourceKeyword(CUTOUT_SOURCE cutoutSource)
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x10076F8", Offset = "0x10076F8", VA = "0x10076F8")]
		public void UpdateMappingKeyword(MAPPING mapping)
		{
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x1007940", Offset = "0x1007940", VA = "0x1007940")]
		public Controller_Cutout()
		{
		}
	}
	[Token(Token = "0x20000A7")]
	[ExecuteInEditMode]
	public class Controller_Edge : MonoBehaviour
	{
		[Token(Token = "0x200026D")]
		public enum TEXTURE_TYPE
		{
			[Token(Token = "0x40011CC")]
			None,
			[Token(Token = "0x40011CD")]
			Gradient,
			[Token(Token = "0x40011CE")]
			MainMap,
			[Token(Token = "0x40011CF")]
			Custom
		}

		[Token(Token = "0x200026E")]
		public enum SHAPE
		{
			[Token(Token = "0x40011D1")]
			Solid,
			[Token(Token = "0x40011D2")]
			Smooth,
			[Token(Token = "0x40011D3")]
			Smooth_Squared
		}

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Edge get;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590B68", Offset = "0x590B68")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590B68", Offset = "0x590B68")]
		public float width;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color color;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float intensity;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SHAPE shape;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590BAC", Offset = "0x590BAC")]
		public Texture texture;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool reverse;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590BC0", Offset = "0x590BC0")]
		public float blur;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x590BD8", Offset = "0x590BD8")]
		public float alphaOffset;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float phaseOffset;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool isDynamic;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590BF0", Offset = "0x590BF0")]
		public float GIMultyplier;

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x10079CC", Offset = "0x10079CC", VA = "0x10079CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x1007A20", Offset = "0x1007A20", VA = "0x1007A20")]
		private void Update()
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x1007A24", Offset = "0x1007A24", VA = "0x1007A24")]
		private void UpdateShaderData()
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x1007EE0", Offset = "0x1007EE0", VA = "0x1007EE0")]
		public void UpdateTextureTypeKeyword(TEXTURE_TYPE textureType)
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x10081E0", Offset = "0x10081E0", VA = "0x10081E0")]
		public Controller_Edge()
		{
		}
	}
	[Token(Token = "0x20000A8")]
	[ExecuteInEditMode]
	public class Controller_Mask_Box : MonoBehaviour
	{
		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Mask_Box get;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject box1;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject box2;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject box3;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject box4;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C04", Offset = "0x590C04")]
		public bool invert;

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x100821C", Offset = "0x100821C", VA = "0x100821C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x1008728", Offset = "0x1008728", VA = "0x1008728")]
		private void Update()
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x100877C", Offset = "0x100877C", VA = "0x100877C")]
		private void UpdateShaderData(int maskID, GameObject box)
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x1008280", Offset = "0x1008280", VA = "0x1008280")]
		public void UpdateMaskKeyword()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x10084D4", Offset = "0x10084D4", VA = "0x10084D4")]
		public void UpdateMaskCountKeyword(int count)
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x1009214", Offset = "0x1009214", VA = "0x1009214")]
		public Controller_Mask_Box()
		{
		}
	}
	[Token(Token = "0x20000A9")]
	[ExecuteInEditMode]
	public class Controller_Mask_Cone : MonoBehaviour
	{
		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Mask_Cone get;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Light spotLight1;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light spotLight2;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light spotLight3;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Light spotLight4;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C18", Offset = "0x590C18")]
		public bool invert;

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x100921C", Offset = "0x100921C", VA = "0x100921C")]
		private void Start()
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x1009728", Offset = "0x1009728", VA = "0x1009728")]
		private void Update()
		{
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0x100977C", Offset = "0x100977C", VA = "0x100977C")]
		private void UpdateShaderData(int maskID, Light spotLight)
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x1009280", Offset = "0x1009280", VA = "0x1009280")]
		public void UpdateMaskKeyword()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x10094D4", Offset = "0x10094D4", VA = "0x10094D4")]
		public void UpdateMaskCountKeyword(int count)
		{
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x100A104", Offset = "0x100A104", VA = "0x100A104")]
		public Controller_Mask_Cone()
		{
		}
	}
	[Token(Token = "0x20000AA")]
	[ExecuteInEditMode]
	public class Controller_Mask_Cylinder : MonoBehaviour
	{
		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Mask_Cylinder get;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject cylinder1;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject cylinder2;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject cylinder3;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject cylinder4;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C2C", Offset = "0x590C2C")]
		public bool invert;

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x100A10C", Offset = "0x100A10C", VA = "0x100A10C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x100A618", Offset = "0x100A618", VA = "0x100A618")]
		private void Update()
		{
		}

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x100A66C", Offset = "0x100A66C", VA = "0x100A66C")]
		private void UpdateShaderData(int maskID, GameObject cylinder)
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x100A170", Offset = "0x100A170", VA = "0x100A170")]
		public void UpdateMaskKeyword()
		{
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x100A3C4", Offset = "0x100A3C4", VA = "0x100A3C4")]
		public void UpdateMaskCountKeyword(int count)
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x100B06C", Offset = "0x100B06C", VA = "0x100B06C")]
		public Controller_Mask_Cylinder()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	[ExecuteInEditMode]
	public class Controller_Mask_Cylinder_Alt : MonoBehaviour
	{
		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Mask_Cylinder_Alt get;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C40", Offset = "0x590C40")]
		public CylinderParameters cylinder1;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CylinderParameters cylinder2;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CylinderParameters cylinder3;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CylinderParameters cylinder4;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C54", Offset = "0x590C54")]
		public bool invert;

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x100B074", Offset = "0x100B074", VA = "0x100B074")]
		private void Start()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x100B580", Offset = "0x100B580", VA = "0x100B580")]
		private void Update()
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x100B5D4", Offset = "0x100B5D4", VA = "0x100B5D4")]
		private void UpdateShaderData(int maskID, CylinderParameters cylinder)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x100B0D8", Offset = "0x100B0D8", VA = "0x100B0D8")]
		public void UpdateMaskKeyword()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x100B32C", Offset = "0x100B32C", VA = "0x100B32C")]
		public void UpdateMaskCountKeyword(int count)
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x100BE8C", Offset = "0x100BE8C", VA = "0x100BE8C")]
		public Controller_Mask_Cylinder_Alt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AC")]
	public class CylinderParameters
	{
		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 normal;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float radius;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float height;

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x100DD68", Offset = "0x100DD68", VA = "0x100DD68")]
		public CylinderParameters()
		{
		}
	}
	[Token(Token = "0x20000AD")]
	[ExecuteInEditMode]
	public class Controller_Mask_Plane : MonoBehaviour
	{
		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Mask_Plane get;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject plane1;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject plane2;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject plane3;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject plane4;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C68", Offset = "0x590C68")]
		public bool invert;

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x100BE94", Offset = "0x100BE94", VA = "0x100BE94")]
		private void Start()
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x100C3A0", Offset = "0x100C3A0", VA = "0x100C3A0")]
		private void Update()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x100BEF8", Offset = "0x100BEF8", VA = "0x100BEF8")]
		public void UpdateMaskKeyword()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x100C14C", Offset = "0x100C14C", VA = "0x100C14C")]
		public void UpdateMaskCountKeyword(int count)
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x100C3F4", Offset = "0x100C3F4", VA = "0x100C3F4")]
		private void UpdateShaderData(int maskID, GameObject plane)
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x100CA9C", Offset = "0x100CA9C", VA = "0x100CA9C")]
		public Controller_Mask_Plane()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	[ExecuteInEditMode]
	public class Controller_Mask_Sphere : MonoBehaviour
	{
		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Mask_Sphere get;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C7C", Offset = "0x590C7C")]
		public GameObject sphere1;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject sphere2;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject sphere3;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject sphere4;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590C90", Offset = "0x590C90")]
		public bool invert;

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x100CAA4", Offset = "0x100CAA4", VA = "0x100CAA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x100CFB0", Offset = "0x100CFB0", VA = "0x100CFB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x100D004", Offset = "0x100D004", VA = "0x100D004")]
		private void UpdateShaderData(int maskID, GameObject sphere)
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x100CB08", Offset = "0x100CB08", VA = "0x100CB08")]
		public void UpdateMaskKeyword()
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x100CD5C", Offset = "0x100CD5C", VA = "0x100CD5C")]
		public void UpdateMaskCountKeyword(int count)
		{
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x100D600", Offset = "0x100D600", VA = "0x100D600")]
		public Controller_Mask_Sphere()
		{
		}
	}
	[Token(Token = "0x20000AF")]
	[ExecuteInEditMode]
	public class Controller_Mask_XYZ_Axis : MonoBehaviour
	{
		[Token(Token = "0x200026F")]
		public enum AXIS
		{
			[Token(Token = "0x40011D5")]
			X,
			[Token(Token = "0x40011D6")]
			Y,
			[Token(Token = "0x40011D7")]
			Z
		}

		[Token(Token = "0x2000270")]
		public enum SPACE
		{
			[Token(Token = "0x40011D9")]
			World,
			[Token(Token = "0x40011DA")]
			Local
		}

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Controller_Mask_XYZ_Axis get;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGlobal;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material[] materials;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x590CA4", Offset = "0x590CA4")]
		public AXIS axis;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public SPACE space;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float offset;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool invert;

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x100D608", Offset = "0x100D608", VA = "0x100D608")]
		private void Start()
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x100D8B4", Offset = "0x100D8B4", VA = "0x100D8B4")]
		private void Update()
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x100D660", Offset = "0x100D660", VA = "0x100D660")]
		public void EnableMaskKeyword()
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x100D8B8", Offset = "0x100D8B8", VA = "0x100D8B8")]
		private void UpdateShaderData()
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x100DB1C", Offset = "0x100DB1C", VA = "0x100DB1C")]
		public Controller_Mask_XYZ_Axis()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	public class AnimateCutout : MonoBehaviour
	{
		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool updateGI;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer mRenderer;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float offset;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float speed;

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x100554C", Offset = "0x100554C", VA = "0x100554C")]
		private void Start()
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x10055E0", Offset = "0x10055E0", VA = "0x10055E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x1005738", Offset = "0x1005738", VA = "0x1005738")]
		public AnimateCutout()
		{
		}
	}
	[Token(Token = "0x20000B1")]
	public class BunnyMove : MonoBehaviour
	{
		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NavMeshAgent agent;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator animator;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float speedChangeDelta;

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x1005BF8", Offset = "0x1005BF8", VA = "0x1005BF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x1005E14", Offset = "0x1005E14", VA = "0x1005E14")]
		private void Update()
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x1005FFC", Offset = "0x1005FFC", VA = "0x1005FFC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x100603C", Offset = "0x100603C", VA = "0x100603C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x1005D34", Offset = "0x1005D34", VA = "0x1005D34")]
		private void ChangeSpeed()
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x100622C", Offset = "0x100622C", VA = "0x100622C")]
		public BunnyMove()
		{
		}
	}
	[Token(Token = "0x20000B2")]
	[ExecuteInEditMode]
	public class LookAt : MonoBehaviour
	{
		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x100DDFC", Offset = "0x100DDFC", VA = "0x100DDFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x100DE9C", Offset = "0x100DE9C", VA = "0x100DE9C")]
		public LookAt()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public class ObjectRandomMove : MonoBehaviour
	{
		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector3 targetPosition;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float time;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float speed;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 randomRotate;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float rotateSpeed;

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x10100DC", Offset = "0x10100DC", VA = "0x10100DC")]
		private void Start()
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x10101B4", Offset = "0x10101B4", VA = "0x10101B4")]
		private void Update()
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x10100E0", Offset = "0x10100E0", VA = "0x10100E0")]
		private void Init()
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0x1010344", Offset = "0x1010344", VA = "0x1010344")]
		public ObjectRandomMove()
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class ObjectSceneMove : MonoBehaviour
	{
		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool rotate;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool scale;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask layerMask;

		[Token(Token = "0x600037D")]
		[Address(RVA = "0x101034C", Offset = "0x101034C", VA = "0x101034C")]
		private void Update()
		{
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0x10105D4", Offset = "0x10105D4", VA = "0x10105D4")]
		protected void RotateUp(bool positive)
		{
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0x10106F4", Offset = "0x10106F4", VA = "0x10106F4")]
		protected void RotateRight(bool positive)
		{
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0x1010814", Offset = "0x1010814", VA = "0x1010814")]
		protected void RotateForward(bool positive)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x1010934", Offset = "0x1010934", VA = "0x1010934")]
		public ObjectSceneMove()
		{
		}
	}
	[Token(Token = "0x20000B5")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58DD98", Offset = "0x58DD98")]
	public class SpotLight_LineRenderer : MonoBehaviour
	{
		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light spotLight;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x1010CE8", Offset = "0x1010CE8", VA = "0x1010CE8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0x1010D8C", Offset = "0x1010D8C", VA = "0x1010D8C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x1010F78", Offset = "0x1010F78", VA = "0x1010F78")]
		public SpotLight_LineRenderer()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class UIEventReciever_Cutout_And_Edge : MonoBehaviour
	{
		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Controller_Cutout cutoutController;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Controller_Edge edgeController;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D edgeTexture;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform uiColor;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float colorHue;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float colorIntensity;

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x1011518", Offset = "0x1011518", VA = "0x1011518")]
		private void Start()
		{
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x10115F8", Offset = "0x10115F8", VA = "0x10115F8")]
		public void UI_Texture(int value)
		{
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x1011694", Offset = "0x1011694", VA = "0x1011694")]
		public void UI_Color(float value)
		{
		}

		[Token(Token = "0x6000388")]
		[Address(RVA = "0x10116D8", Offset = "0x10116D8", VA = "0x10116D8")]
		public void UI_Intensity(float value)
		{
		}

		[Token(Token = "0x6000389")]
		[Address(RVA = "0x10116F4", Offset = "0x10116F4", VA = "0x10116F4")]
		public void UI_Width(float value)
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0x1011710", Offset = "0x1011710", VA = "0x1011710")]
		public void UI_Solid(bool value)
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x1011734", Offset = "0x1011734", VA = "0x1011734")]
		public void UI_Noise(float value)
		{
		}

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x1011750", Offset = "0x1011750", VA = "0x1011750")]
		public void UI_Speed(float value)
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x1011770", Offset = "0x1011770", VA = "0x1011770")]
		public UIEventReciever_Cutout_And_Edge()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public class UIEventReciever_ExampleScene_Mask_Box : MonoBehaviour
	{
		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Controller_Mask_Box maskController;

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1011778", Offset = "0x1011778", VA = "0x1011778")]
		private void Start()
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x101183C", Offset = "0x101183C", VA = "0x101183C")]
		public void UI_Count(int value)
		{
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x10118CC", Offset = "0x10118CC", VA = "0x10118CC")]
		public void UI_Invert(bool value)
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x10118EC", Offset = "0x10118EC", VA = "0x10118EC")]
		public UIEventReciever_ExampleScene_Mask_Box()
		{
		}
	}
	[Token(Token = "0x20000B8")]
	public class UIEventReciever_ExampleScene_Mask_Cone : MonoBehaviour
	{
		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Controller_Mask_Cone maskController;

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x10118F4", Offset = "0x10118F4", VA = "0x10118F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x1011AB4", Offset = "0x1011AB4", VA = "0x1011AB4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x10119E0", Offset = "0x10119E0", VA = "0x10119E0")]
		public void UI_Count(int value)
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x1011A94", Offset = "0x1011A94", VA = "0x1011A94")]
		public void UI_Invert(bool value)
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x1011BA0", Offset = "0x1011BA0", VA = "0x1011BA0")]
		public UIEventReciever_ExampleScene_Mask_Cone()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	public class UIEventReciever_ExampleScene_Mask_Cylinder : MonoBehaviour
	{
		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Controller_Mask_Cylinder maskController;

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x1011BA8", Offset = "0x1011BA8", VA = "0x1011BA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x1011C6C", Offset = "0x1011C6C", VA = "0x1011C6C")]
		public void UI_Count(int value)
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x1011CFC", Offset = "0x1011CFC", VA = "0x1011CFC")]
		public void UI_Invert(bool value)
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x1011D1C", Offset = "0x1011D1C", VA = "0x1011D1C")]
		public UIEventReciever_ExampleScene_Mask_Cylinder()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public class UIEventReciever_ExampleScene_Mask_Plane : MonoBehaviour
	{
		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Controller_Mask_Plane maskController;

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x1011D24", Offset = "0x1011D24", VA = "0x1011D24")]
		private void Start()
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x1011D98", Offset = "0x1011D98", VA = "0x1011D98")]
		public void UI_Count(int value)
		{
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x1011DB0", Offset = "0x1011DB0", VA = "0x1011DB0")]
		public void UI_Invert(bool value)
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x1011DD0", Offset = "0x1011DD0", VA = "0x1011DD0")]
		public UIEventReciever_ExampleScene_Mask_Plane()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	public class UIEventReciever_ExampleScene_Mask_Spere : MonoBehaviour
	{
		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Controller_Mask_Sphere maskController;

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x1011DD8", Offset = "0x1011DD8", VA = "0x1011DD8")]
		private void Start()
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x1011E9C", Offset = "0x1011E9C", VA = "0x1011E9C")]
		public void UI_Count(int value)
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x1011F2C", Offset = "0x1011F2C", VA = "0x1011F2C")]
		public void UI_Invert(bool value)
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x1011F4C", Offset = "0x1011F4C", VA = "0x1011F4C")]
		public UIEventReciever_ExampleScene_Mask_Spere()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	public class UIEventReciever_ExampleScene_Mask_XYZ_Axis : MonoBehaviour
	{
		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Controller_Mask_XYZ_Axis maskController;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int axis;

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x1011F54", Offset = "0x1011F54", VA = "0x1011F54")]
		private void Start()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x1011FD8", Offset = "0x1011FD8", VA = "0x1011FD8")]
		public void UI_Axis(int value)
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x1011FF8", Offset = "0x1011FF8", VA = "0x1011FF8")]
		public void UI_Offset(float value)
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x1012024", Offset = "0x1012024", VA = "0x1012024")]
		public void UI_Invert(bool value)
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x1012044", Offset = "0x1012044", VA = "0x1012044")]
		private float RemapSliderValue(float value)
		{
			return default(float);
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x101214C", Offset = "0x101214C", VA = "0x101214C")]
		public UIEventReciever_ExampleScene_Mask_XYZ_Axis()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	[ExecuteInEditMode]
	public class UpdateWorldPos : MonoBehaviour
	{
		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material material;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer mRenderer;

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x1012C18", Offset = "0x1012C18", VA = "0x1012C18")]
		private void Start()
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x1012C84", Offset = "0x1012C84", VA = "0x1012C84")]
		private void Update()
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x1012D58", Offset = "0x1012D58", VA = "0x1012D58")]
		public UpdateWorldPos()
		{
		}
	}
}
namespace Valve.VR
{
	[Token(Token = "0x20000BE")]
	public abstract class SteamVR_Action : ScriptableObject
	{
		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float changeTolerance;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string fullPath;

		[NonSerialized]
		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ulong handle;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_ActionSet actionSet;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SteamVR_ActionDirections direction;

		[NonSerialized]
		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Dictionary<SteamVR_Input_Sources, float> lastChanged;

		[NonSerialized]
		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string cachedShortName;

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x726D34", Offset = "0x726D34", VA = "0x726D34")]
		public float GetTimeLastChanged(SteamVR_Input_Sources inputSource)
		{
			return default(float);
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x726D9C", Offset = "0x726D9C", VA = "0x726D9C", Slot = "4")]
		public virtual void PreInitialize()
		{
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x726EA4", Offset = "0x726EA4", VA = "0x726EA4", Slot = "5")]
		public virtual void Initialize()
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x726FEC", Offset = "0x726FEC", VA = "0x726FEC", Slot = "6")]
		protected virtual void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x727058", Offset = "0x727058", VA = "0x727058")]
		public string GetShortName()
		{
			return null;
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x72708C", Offset = "0x72708C", VA = "0x72708C")]
		protected SteamVR_Action()
		{
		}
	}
	[Token(Token = "0x20000BF")]
	public enum SteamVR_ActionDirections
	{
		[Token(Token = "0x4000356")]
		In,
		[Token(Token = "0x4000357")]
		Out
	}
	[Token(Token = "0x20000C0")]
	public class SteamVR_ActionSet : ScriptableObject
	{
		[NonSerialized]
		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static VRActiveActionSet_t[] activeActionSets;

		[NonSerialized]
		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static List<VRActiveActionSet_t> activeActionSetsList;

		[NonSerialized]
		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected VRActiveActionSet_t actionSet;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SteamVR_Action[] allActions;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SteamVR_Action_In[] nonVisualInActions;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SteamVR_Action_In[] visualActions;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SteamVR_Action_Pose[] poseActions;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SteamVR_Action_Skeleton[] skeletonActions;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SteamVR_Action_Out[] outActionArray;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string fullPath;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string usage;

		[NonSerialized]
		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ulong handle;

		[NonSerialized]
		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected bool setIsActive;

		[NonSerialized]
		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float lastChanged;

		[NonSerialized]
		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static uint activeActionSetSize;

		[NonSerialized]
		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected static int lastFrameUpdated;

		[NonSerialized]
		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string cachedShortName;

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x727138", Offset = "0x727138", VA = "0x727138")]
		public void Initialize()
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x727320", Offset = "0x727320", VA = "0x727320")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x727328", Offset = "0x727328", VA = "0x727328")]
		public float GetTimeLastChanged()
		{
			return default(float);
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x727330", Offset = "0x727330", VA = "0x727330")]
		public void ActivatePrimary(bool disableAllOtherActionSets = false)
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x7275F0", Offset = "0x7275F0", VA = "0x7275F0")]
		public void ActivateSecondary(bool disableAllOtherActionSets = false)
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x727750", Offset = "0x727750", VA = "0x727750")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x727490", Offset = "0x727490", VA = "0x727490")]
		public static void DisableAllActionSets()
		{
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x727564", Offset = "0x727564", VA = "0x727564")]
		protected static void UpdateActionSetArray()
		{
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x72783C", Offset = "0x72783C", VA = "0x72783C")]
		public static void UpdateActionSetsState(bool force = false)
		{
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x727A40", Offset = "0x727A40", VA = "0x727A40")]
		public string GetShortName()
		{
			return null;
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x727A74", Offset = "0x727A74", VA = "0x727A74")]
		public SteamVR_ActionSet()
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class SteamVR_Action_Boolean : SteamVR_Action_In
	{
		[NonSerialized]
		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_Boolean>> onStateDown;

		[NonSerialized]
		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_Boolean>> onStateUp;

		[NonSerialized]
		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Dictionary<SteamVR_Input_Sources, InputDigitalActionData_t> actionData;

		[NonSerialized]
		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Dictionary<SteamVR_Input_Sources, InputDigitalActionData_t> lastActionData;

		[NonSerialized]
		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected InputDigitalActionData_t tempActionData;

		[NonSerialized]
		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected uint actionData_size;

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x727AF8", Offset = "0x727AF8", VA = "0x727AF8", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x727CAC", Offset = "0x727CAC", VA = "0x727CAC", Slot = "6")]
		protected override void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x727F6C", Offset = "0x727F6C", VA = "0x727F6C", Slot = "7")]
		public override void UpdateValue(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x7285B4", Offset = "0x7285B4", VA = "0x7285B4")]
		public bool GetStateDown(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x728660", Offset = "0x728660", VA = "0x728660")]
		public bool GetStateUp(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x72870C", Offset = "0x72870C", VA = "0x72870C")]
		public bool GetState(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x728788", Offset = "0x728788", VA = "0x728788")]
		public bool GetLastStateDown(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x728834", Offset = "0x728834", VA = "0x728834")]
		public bool GetLastStateUp(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x7288E0", Offset = "0x7288E0", VA = "0x7288E0")]
		public bool GetLastState(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x72895C", Offset = "0x72895C", VA = "0x72895C")]
		public SteamVR_Action_Boolean()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public abstract class SteamVR_Action_In : SteamVR_Action
	{
		[NonSerialized]
		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Dictionary<SteamVR_Input_Sources, float> updateTime;

		[NonSerialized]
		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Dictionary<SteamVR_Input_Sources, ulong> activeOrigin;

		[NonSerialized]
		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Dictionary<SteamVR_Input_Sources, bool> active;

		[NonSerialized]
		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Dictionary<SteamVR_Input_Sources, bool> changed;

		[NonSerialized]
		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_In, bool>> onActiveChange;

		[NonSerialized]
		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_In>> onChange;

		[NonSerialized]
		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_In>> onUpdate;

		[NonSerialized]
		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected Dictionary<SteamVR_Input_Sources, InputOriginInfo_t> lastInputOriginInfo;

		[NonSerialized]
		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Dictionary<SteamVR_Input_Sources, float> lastOriginGetFrame;

		[NonSerialized]
		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Dictionary<SteamVR_Input_Sources, bool> lastActive;

		[NonSerialized]
		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static uint inputOriginInfo_size;

		[Token(Token = "0x60003C8")]
		public abstract void UpdateValue(SteamVR_Input_Sources inputSource);

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x727BA0", Offset = "0x727BA0", VA = "0x727BA0", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x727DB0", Offset = "0x727DB0", VA = "0x727DB0", Slot = "6")]
		protected override void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x728DB4", Offset = "0x728DB4", VA = "0x728DB4", Slot = "8")]
		public virtual string GetDeviceComponentName(SteamVR_Input_Sources inputSource)
		{
			return null;
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x72934C", Offset = "0x72934C", VA = "0x72934C", Slot = "9")]
		public virtual ulong GetDevicePath(SteamVR_Input_Sources inputSource)
		{
			return default(ulong);
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x7293F4", Offset = "0x7293F4", VA = "0x7293F4", Slot = "10")]
		public virtual uint GetDeviceIndex(SteamVR_Input_Sources inputSource)
		{
			return default(uint);
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x72949C", Offset = "0x72949C", VA = "0x72949C", Slot = "11")]
		public virtual bool GetChanged(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x729504", Offset = "0x729504", VA = "0x729504", Slot = "12")]
		public virtual bool GetActive(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x728E84", Offset = "0x728E84", VA = "0x728E84")]
		protected void UpdateOriginTrackedDeviceInfo(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x72956C", Offset = "0x72956C", VA = "0x72956C")]
		public void AddOnActiveChangeListener(Action<SteamVR_Action_In, bool> action, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x729628", Offset = "0x729628", VA = "0x729628")]
		public void RemoveOnActiveChangeListener(Action<SteamVR_Action_In, bool> action, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x7296E4", Offset = "0x7296E4", VA = "0x7296E4")]
		public void AddOnChangeListener(Action<SteamVR_Action_In> action, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x7297A0", Offset = "0x7297A0", VA = "0x7297A0")]
		public void RemoveOnChangeListener(Action<SteamVR_Action_In> action, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x72985C", Offset = "0x72985C", VA = "0x72985C")]
		public void AddOnUpdateListener(Action<SteamVR_Action_In> action, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x729918", Offset = "0x729918", VA = "0x729918")]
		public void RemoveOnUpdateListener(Action<SteamVR_Action_In> action, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x728AD4", Offset = "0x728AD4", VA = "0x728AD4")]
		protected SteamVR_Action_In()
		{
		}
	}
	[Token(Token = "0x20000C3")]
	public abstract class SteamVR_Action_List : ScriptableObject
	{
		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_ActionSet actionSet;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_ActionDirections listDirection;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_Action[] actions;

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x7299D8", Offset = "0x7299D8", VA = "0x7299D8")]
		protected SteamVR_Action_List()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public abstract class SteamVR_Action_Out : SteamVR_Action
	{
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x7299E0", Offset = "0x7299E0", VA = "0x7299E0")]
		protected SteamVR_Action_Out()
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class SteamVR_Action_Pose : SteamVR_Action_In
	{
		[NonSerialized]
		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static ETrackingUniverseOrigin universeOrigin;

		[NonSerialized]
		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float predictedSecondsFromNow;

		[NonSerialized]
		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_Pose>> onTrackingChanged;

		[NonSerialized]
		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_Pose>> onValidPoseChanged;

		[NonSerialized]
		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Dictionary<SteamVR_Input_Sources, Action<SteamVR_Action_Pose>> onDeviceConnectedChanged;

		[NonSerialized]
		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Dictionary<SteamVR_Input_Sources, InputPoseActionData_t> poseActionData;

		[NonSerialized]
		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected Dictionary<SteamVR_Input_Sources, InputPoseActionData_t> lastPoseActionData;

		[NonSerialized]
		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected Dictionary<SteamVR_Input_Sources, InputPoseActionData_t> lastRecordedPoseActionData;

		[NonSerialized]
		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Dictionary<SteamVR_Input_Sources, bool> lastRecordedActive;

		[NonSerialized]
		[Token(Token = "0x4000386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected InputPoseActionData_t tempPoseActionData;

		[NonSerialized]
		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		protected uint poseActionData_size;

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x7299E4", Offset = "0x7299E4", VA = "0x7299E4", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x729A90", Offset = "0x729A90", VA = "0x729A90", Slot = "6")]
		protected override void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x729C34", Offset = "0x729C34", VA = "0x729C34", Slot = "7")]
		public override void UpdateValue(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x729C48", Offset = "0x729C48", VA = "0x729C48")]
		protected void ResetLastStates(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x729D38", Offset = "0x729D38", VA = "0x729D38", Slot = "13")]
		public virtual void UpdateValue(SteamVR_Input_Sources inputSource, bool skipStateAndEventUpdates)
		{
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x72A9D8", Offset = "0x72A9D8", VA = "0x72A9D8")]
		public bool GetVelocitiesAtTimeOffset(SteamVR_Input_Sources inputSource, float secondsFromNow, out Vector3 velocity, out Vector3 angularVelocity)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x72ADAC", Offset = "0x72ADAC", VA = "0x72ADAC")]
		public bool GetPoseAtTimeOffset(SteamVR_Input_Sources inputSource, float secondsFromNow, out Vector3 position, out Quaternion rotation, out Vector3 velocity, out Vector3 angularVelocity)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x72B218", Offset = "0x72B218", VA = "0x72B218")]
		public void UpdateTransform(SteamVR_Input_Sources inputSource, Transform transformToUpdate)
		{
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x72A698", Offset = "0x72A698", VA = "0x72A698")]
		protected void CheckAndSendEvents(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x72B270", Offset = "0x72B270", VA = "0x72B270")]
		public static void SetTrackingUniverseOrigin(ETrackingUniverseOrigin newUniverseOrigin)
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x72A3A8", Offset = "0x72A3A8", VA = "0x72A3A8")]
		public Vector3 GetLocalPosition(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x72A570", Offset = "0x72A570", VA = "0x72A570")]
		public Quaternion GetLocalRotation(SteamVR_Input_Sources inputSource)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x72B2DC", Offset = "0x72B2DC", VA = "0x72B2DC")]
		public Vector3 GetVelocity(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x72B3C0", Offset = "0x72B3C0", VA = "0x72B3C0")]
		public Vector3 GetAngularVelocity(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x72B4A0", Offset = "0x72B4A0", VA = "0x72B4A0")]
		public bool GetDeviceIsConnected(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x72B524", Offset = "0x72B524", VA = "0x72B524")]
		public bool GetPoseIsValid(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x72B5A8", Offset = "0x72B5A8", VA = "0x72B5A8")]
		public ETrackingResult GetTrackingResult(SteamVR_Input_Sources inputSource)
		{
			return default(ETrackingResult);
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x72A48C", Offset = "0x72A48C", VA = "0x72A48C")]
		public Vector3 GetLastLocalPosition(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x72A604", Offset = "0x72A604", VA = "0x72A604")]
		public Quaternion GetLastLocalRotation(SteamVR_Input_Sources inputSource)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x72B624", Offset = "0x72B624", VA = "0x72B624")]
		public Vector3 GetLastVelocity(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x72B708", Offset = "0x72B708", VA = "0x72B708")]
		public Vector3 GetLastAngularVelocity(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x72B7E8", Offset = "0x72B7E8", VA = "0x72B7E8")]
		public bool GetLastDeviceIsConnected(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x72B86C", Offset = "0x72B86C", VA = "0x72B86C")]
		public bool GetLastPoseIsValid(SteamVR_Input_Sources inputSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x72B8F0", Offset = "0x72B8F0", VA = "0x72B8F0")]
		public ETrackingResult GetLastTrackingResult(SteamVR_Input_Sources inputSource)
		{
			return default(ETrackingResult);
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x72B96C", Offset = "0x72B96C", VA = "0x72B96C")]
		public void AddOnDeviceConnectedChanged(SteamVR_Input_Sources inputSource, Action<SteamVR_Action_Pose> action)
		{
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x72BA28", Offset = "0x72BA28", VA = "0x72BA28")]
		public void RemoveOnDeviceConnectedChanged(SteamVR_Input_Sources inputSource, Action<SteamVR_Action_Pose> action)
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x72BAE4", Offset = "0x72BAE4", VA = "0x72BAE4")]
		public void AddOnTrackingChanged(SteamVR_Input_Sources inputSource, Action<SteamVR_Action_Pose> action)
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x72BBA0", Offset = "0x72BBA0", VA = "0x72BBA0")]
		public void RemoveOnTrackingChanged(SteamVR_Input_Sources inputSource, Action<SteamVR_Action_Pose> action)
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x72BC5C", Offset = "0x72BC5C", VA = "0x72BC5C")]
		public void AddOnValidPoseChanged(SteamVR_Input_Sources inputSource, Action<SteamVR_Action_Pose> action)
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x72BD18", Offset = "0x72BD18", VA = "0x72BD18")]
		public void RemoveOnValidPoseChanged(SteamVR_Input_Sources inputSource, Action<SteamVR_Action_Pose> action)
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x72BDD4", Offset = "0x72BDD4", VA = "0x72BDD4")]
		public SteamVR_Action_Pose()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	public class SteamVR_Action_Single : SteamVR_Action_In
	{
		[NonSerialized]
		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Dictionary<SteamVR_Input_Sources, InputAnalogActionData_t> actionData;

		[NonSerialized]
		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Dictionary<SteamVR_Input_Sources, InputAnalogActionData_t> lastActionData;

		[NonSerialized]
		[Token(Token = "0x400038A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected InputAnalogActionData_t tempActionData;

		[NonSerialized]
		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected uint actionData_size;

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x72C04C", Offset = "0x72C04C", VA = "0x72C04C", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x72C0F4", Offset = "0x72C0F4", VA = "0x72C0F4", Slot = "6")]
		protected override void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x72C1C8", Offset = "0x72C1C8", VA = "0x72C1C8", Slot = "7")]
		public override void UpdateValue(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x72C814", Offset = "0x72C814", VA = "0x72C814")]
		public float GetAxis(SteamVR_Input_Sources inputSource)
		{
			return default(float);
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x72C798", Offset = "0x72C798", VA = "0x72C798")]
		public float GetAxisDelta(SteamVR_Input_Sources inputSource)
		{
			return default(float);
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x72C890", Offset = "0x72C890", VA = "0x72C890")]
		public float GetLastAxis(SteamVR_Input_Sources inputSource)
		{
			return default(float);
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x72C90C", Offset = "0x72C90C", VA = "0x72C90C")]
		public float GetLastAxisDelta(SteamVR_Input_Sources inputSource)
		{
			return default(float);
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x72C988", Offset = "0x72C988", VA = "0x72C988")]
		public SteamVR_Action_Single()
		{
		}
	}
	[Token(Token = "0x20000C7")]
	public class SteamVR_Action_Skeleton : SteamVR_Action_Pose
	{
		[Token(Token = "0x400038C")]
		public const int numBones = 31;

		[NonSerialized]
		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		protected List<Vector3[]> bonePositions;

		[NonSerialized]
		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected List<Quaternion[]> boneRotations;

		[NonSerialized]
		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected List<Vector3[]> lastBonePositions;

		[NonSerialized]
		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected List<Quaternion[]> lastBoneRotations;

		[NonSerialized]
		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected Dictionary<SteamVR_Input_Sources, EVRSkeletalMotionRange> rangeOfMotion;

		[NonSerialized]
		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected VRBoneTransform_t[] tempBoneTransforms;

		[NonSerialized]
		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected InputSkeletalActionData_t tempSkeletonActionData;

		[NonSerialized]
		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected uint skeletonActionData_size;

		[NonSerialized]
		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Dictionary<SteamVR_Input_Sources, EVRSkeletalTransformSpace> skeletalTransformSpace;

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x72CA88", Offset = "0x72CA88", VA = "0x72CA88", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x72CB34", Offset = "0x72CB34", VA = "0x72CB34", Slot = "6")]
		protected override void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x72CC8C", Offset = "0x72CC8C", VA = "0x72CC8C", Slot = "7")]
		public override void UpdateValue(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x72CCA0", Offset = "0x72CCA0", VA = "0x72CCA0", Slot = "13")]
		public override void UpdateValue(SteamVR_Input_Sources inputSource, bool skipStateAndEventUpdates)
		{
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x72DBB8", Offset = "0x72DBB8", VA = "0x72DBB8")]
		public Vector3[] GetBonePositions(SteamVR_Input_Sources inputSource)
		{
			return null;
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x72DC30", Offset = "0x72DC30", VA = "0x72DC30")]
		public Quaternion[] GetBoneRotations(SteamVR_Input_Sources inputSource)
		{
			return null;
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x72DCA8", Offset = "0x72DCA8", VA = "0x72DCA8")]
		public Vector3[] GetLastBonePositions(SteamVR_Input_Sources inputSource)
		{
			return null;
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x72DD20", Offset = "0x72DD20", VA = "0x72DD20")]
		public Quaternion[] GetLastBoneRotations(SteamVR_Input_Sources inputSource)
		{
			return null;
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0x72DD98", Offset = "0x72DD98", VA = "0x72DD98")]
		public void SetRangeOfMotion(SteamVR_Input_Sources inputSource, EVRSkeletalMotionRange range)
		{
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x72DE08", Offset = "0x72DE08", VA = "0x72DE08")]
		public void SetSkeletalTransformSpace(SteamVR_Input_Sources inputSource, EVRSkeletalTransformSpace space)
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x72DE78", Offset = "0x72DE78", VA = "0x72DE78")]
		public SteamVR_Action_Skeleton()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	public enum SkeletalMotionRangeChange
	{
		[Token(Token = "0x4000397")]
		None = -1,
		[Token(Token = "0x4000398")]
		WithController,
		[Token(Token = "0x4000399")]
		WithoutController
	}
	[Token(Token = "0x20000C9")]
	public class SteamVR_Action_Vector2 : SteamVR_Action_In
	{
		[NonSerialized]
		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Dictionary<SteamVR_Input_Sources, InputAnalogActionData_t> actionData;

		[NonSerialized]
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Dictionary<SteamVR_Input_Sources, InputAnalogActionData_t> lastActionData;

		[NonSerialized]
		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected InputAnalogActionData_t tempActionData;

		[NonSerialized]
		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected uint actionData_size;

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x72E020", Offset = "0x72E020", VA = "0x72E020", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x72E0C8", Offset = "0x72E0C8", VA = "0x72E0C8", Slot = "6")]
		protected override void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x72E19C", Offset = "0x72E19C", VA = "0x72E19C", Slot = "7")]
		public override void UpdateValue(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x72E808", Offset = "0x72E808", VA = "0x72E808")]
		public Vector2 GetAxis(SteamVR_Input_Sources inputSource)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x72E750", Offset = "0x72E750", VA = "0x72E750")]
		public Vector2 GetAxisDelta(SteamVR_Input_Sources inputSource)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0x72E8C0", Offset = "0x72E8C0", VA = "0x72E8C0")]
		public Vector2 GetLastAxis(SteamVR_Input_Sources inputSource)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0x72E978", Offset = "0x72E978", VA = "0x72E978")]
		public Vector2 GetLastAxisDelta(SteamVR_Input_Sources inputSource)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0x72EA30", Offset = "0x72EA30", VA = "0x72EA30")]
		public SteamVR_Action_Vector2()
		{
		}
	}
	[Token(Token = "0x20000CA")]
	public class SteamVR_Action_Vector3 : SteamVR_Action_In
	{
		[NonSerialized]
		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Dictionary<SteamVR_Input_Sources, InputAnalogActionData_t> actionData;

		[NonSerialized]
		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected Dictionary<SteamVR_Input_Sources, InputAnalogActionData_t> lastActionData;

		[NonSerialized]
		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected InputAnalogActionData_t tempActionData;

		[NonSerialized]
		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected uint actionData_size;

		[Token(Token = "0x6000416")]
		[Address(RVA = "0x72EB30", Offset = "0x72EB30", VA = "0x72EB30", Slot = "5")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0x72EBD8", Offset = "0x72EBD8", VA = "0x72EBD8", Slot = "6")]
		protected override void InitializeDictionaries(SteamVR_Input_Sources source)
		{
		}

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x72ECAC", Offset = "0x72ECAC", VA = "0x72ECAC", Slot = "7")]
		public override void UpdateValue(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x72F348", Offset = "0x72F348", VA = "0x72F348")]
		public Vector3 GetAxis(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x72F268", Offset = "0x72F268", VA = "0x72F268")]
		public Vector3 GetAxisDelta(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x72F428", Offset = "0x72F428", VA = "0x72F428")]
		public Vector3 GetLastAxis(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x72F508", Offset = "0x72F508", VA = "0x72F508")]
		public Vector3 GetLastAxisDelta(SteamVR_Input_Sources inputSource)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x72F5E8", Offset = "0x72F5E8", VA = "0x72F5E8")]
		public SteamVR_Action_Vector3()
		{
		}
	}
	[Token(Token = "0x20000CB")]
	public class SteamVR_Action_Vibration : SteamVR_Action_Out
	{
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x72F6E8", Offset = "0x72F6E8", VA = "0x72F6E8")]
		public void Execute(float secondsFromNow, float durationSeconds, float frequency, float amplitude, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x72F9F0", Offset = "0x72F9F0", VA = "0x72F9F0")]
		public SteamVR_Action_Vibration()
		{
		}
	}
	[Token(Token = "0x20000CC")]
	public class SteamVR_ActivateActionSetOnLoad : MonoBehaviour
	{
		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SteamVR_DefaultActionSet", RVA = "0x590CB8", Offset = "0x590CB8")]
		public SteamVR_ActionSet actionSet;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAllOtherActionSets;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool activateOnStart;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool deactivateOnDestroy;

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x72F9F4", Offset = "0x72F9F4", VA = "0x72F9F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x72FA90", Offset = "0x72FA90", VA = "0x72FA90")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x72FB28", Offset = "0x72FB28", VA = "0x72FB28")]
		public SteamVR_ActivateActionSetOnLoad()
		{
		}
	}
	[Token(Token = "0x20000CD")]
	public class SteamVR_Behaviour_Boolean : MonoBehaviour
	{
		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_Action_Boolean booleanAction;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590CF4", Offset = "0x590CF4")]
		public SteamVR_Input_Sources inputSource;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_Behaviour_BooleanEvent onChange;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_Behaviour_BooleanEvent onUpdate;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SteamVR_Behaviour_BooleanEvent onPress;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SteamVR_Behaviour_BooleanEvent onPressDown;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SteamVR_Behaviour_BooleanEvent onPressUp;

		[Token(Token = "0x17000012")]
		public bool isActive
		{
			[Token(Token = "0x6000423")]
			[Address(RVA = "0x7304FC", Offset = "0x7304FC", VA = "0x7304FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000013")]
		public SteamVR_ActionSet actionSet
		{
			[Token(Token = "0x6000424")]
			[Address(RVA = "0x730524", Offset = "0x730524", VA = "0x730524")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x7305B4", Offset = "0x7305B4", VA = "0x7305B4", Slot = "4")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x730648", Offset = "0x730648", VA = "0x730648", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x7306DC", Offset = "0x7306DC", VA = "0x7306DC", Slot = "6")]
		protected virtual void ActionUpdated(SteamVR_Action_In action)
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x73087C", Offset = "0x73087C", VA = "0x73087C")]
		public SteamVR_Behaviour_Boolean()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CE")]
	public class SteamVR_Behaviour_BooleanEvent : UnityEvent<SteamVR_Action_Boolean>
	{
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x730884", Offset = "0x730884", VA = "0x730884")]
		public SteamVR_Behaviour_BooleanEvent()
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class SteamVR_Behaviour_Pose : MonoBehaviour
	{
		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x590D2C", Offset = "0x590D2C")]
		public SteamVR_Action_Pose poseAction;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590D68", Offset = "0x590D68")]
		public SteamVR_Input_Sources inputSource;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590DA0", Offset = "0x590DA0")]
		public Transform origin;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_Behaviour_PoseEvent onTransformUpdated;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SteamVR_Behaviour_PoseEvent onTransformChanged;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SteamVR_Behaviour_PoseEvent onConnectedChanged;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SteamVR_Behaviour_PoseEvent onTrackingChanged;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected int deviceIndex;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected SteamVR_HistoryBuffer historyBuffer;

		[Token(Token = "0x17000014")]
		public bool isValid
		{
			[Token(Token = "0x600042A")]
			[Address(RVA = "0x7308D4", Offset = "0x7308D4", VA = "0x7308D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000015")]
		public bool isActive
		{
			[Token(Token = "0x600042B")]
			[Address(RVA = "0x7308F4", Offset = "0x7308F4", VA = "0x7308F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x73091C", Offset = "0x73091C", VA = "0x73091C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x7309C4", Offset = "0x7309C4", VA = "0x7309C4", Slot = "5")]
		protected virtual void OnDeviceConnectedChanged(SteamVR_Action_Pose changedAction)
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x730A38", Offset = "0x730A38", VA = "0x730A38", Slot = "6")]
		protected virtual void OnTrackingChanged(SteamVR_Action_Pose changedAction)
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x730A9C", Offset = "0x730A9C", VA = "0x730A9C", Slot = "7")]
		protected virtual void CheckDeviceIndex()
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x730BE0", Offset = "0x730BE0", VA = "0x730BE0")]
		public int GetDeviceIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x730C1C", Offset = "0x730C1C", VA = "0x730C1C", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x730D80", Offset = "0x730D80", VA = "0x730D80", Slot = "9")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x730ED4", Offset = "0x730ED4", VA = "0x730ED4")]
		public Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x730EF4", Offset = "0x730EF4", VA = "0x730EF4")]
		public Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x730F14", Offset = "0x730F14", VA = "0x730F14")]
		public bool GetVelocitiesAtTimeOffset(float secondsFromNow, out Vector3 velocity, out Vector3 angularVelocity)
		{
			return default(bool);
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x730F3C", Offset = "0x730F3C", VA = "0x730F3C")]
		protected void UpdateHistoryBuffer()
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x731024", Offset = "0x731024", VA = "0x731024")]
		public void GetEstimatedPeakVelocities(out Vector3 velocity, out Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x73108C", Offset = "0x73108C", VA = "0x73108C")]
		private void SteamVR_Input_OnPosesUpdated(bool obj)
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x7310B8", Offset = "0x7310B8", VA = "0x7310B8", Slot = "10")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x73136C", Offset = "0x73136C", VA = "0x73136C")]
		public SteamVR_Behaviour_Pose()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D0")]
	public class SteamVR_Behaviour_PoseEvent : UnityEvent<SteamVR_Action_Pose>
	{
		[Token(Token = "0x600043B")]
		[Address(RVA = "0x7313E0", Offset = "0x7313E0", VA = "0x7313E0")]
		public SteamVR_Behaviour_PoseEvent()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class SteamVR_Behaviour_Single : MonoBehaviour
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_Action_Single singleAction;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590DD8", Offset = "0x590DD8")]
		public SteamVR_Input_Sources inputSource;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590E10", Offset = "0x590E10")]
		public SteamVR_Behaviour_SingleEvent onChange;

		[Token(Token = "0x17000016")]
		public bool isActive
		{
			[Token(Token = "0x600043C")]
			[Address(RVA = "0x731430", Offset = "0x731430", VA = "0x731430")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x731458", Offset = "0x731458", VA = "0x731458")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x7314EC", Offset = "0x7314EC", VA = "0x7314EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x731580", Offset = "0x731580", VA = "0x731580")]
		private void ActionChanged(SteamVR_Action_In action)
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x731634", Offset = "0x731634", VA = "0x731634")]
		public SteamVR_Behaviour_Single()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D2")]
	public class SteamVR_Behaviour_SingleEvent : UnityEvent<SteamVR_Action_Single>
	{
		[Token(Token = "0x6000441")]
		[Address(RVA = "0x73163C", Offset = "0x73163C", VA = "0x73163C")]
		public SteamVR_Behaviour_SingleEvent()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class SteamVR_Behaviour_Skeleton : MonoBehaviour
	{
		[Token(Token = "0x2000271")]
		public enum MirrorType
		{
			[Token(Token = "0x40011DC")]
			None,
			[Token(Token = "0x40011DD")]
			LeftToRight,
			[Token(Token = "0x40011DE")]
			RightToLeft
		}

		[Token(Token = "0x2000272")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EA98", Offset = "0x58EA98")]
		private sealed class <DoBlendRoutine>d__113 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float overTime;

			[Token(Token = "0x40011E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SteamVR_Behaviour_Skeleton <>4__this;

			[Token(Token = "0x40011E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float blendToAmount;

			[Token(Token = "0x40011E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__2;

			[Token(Token = "0x40011E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__3;

			[Token(Token = "0x40011E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <startAmount>5__4;

			[Token(Token = "0x170000CD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B9E")]
				[Address(RVA = "0x733844", Offset = "0x733844", VA = "0x733844", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BA0")]
				[Address(RVA = "0x7338AC", Offset = "0x7338AC", VA = "0x7338AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B9B")]
			[Address(RVA = "0x732B28", Offset = "0x732B28", VA = "0x732B28")]
			[DebuggerHidden]
			public <DoBlendRoutine>d__113(int <>1__state)
			{
			}

			[Token(Token = "0x6000B9C")]
			[Address(RVA = "0x7336F4", Offset = "0x7336F4", VA = "0x7336F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B9D")]
			[Address(RVA = "0x7336F8", Offset = "0x7336F8", VA = "0x7336F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0x73384C", Offset = "0x73384C", VA = "0x73384C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000273")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EAA8", Offset = "0x58EAA8")]
		private sealed class <DoRangeOfMotionBlend>d__117 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float overTime;

			[Token(Token = "0x40011EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SteamVR_Behaviour_Skeleton <>4__this;

			[Token(Token = "0x40011EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public EVRSkeletalMotionRange oldRangeOfMotion;

			[Token(Token = "0x40011EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public EVRSkeletalMotionRange newRangeOfMotion;

			[Token(Token = "0x40011ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__2;

			[Token(Token = "0x40011EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__3;

			[Token(Token = "0x170000CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BA4")]
				[Address(RVA = "0x733E74", Offset = "0x733E74", VA = "0x733E74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BA6")]
				[Address(RVA = "0x733EDC", Offset = "0x733EDC", VA = "0x733EDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0x732BE8", Offset = "0x732BE8", VA = "0x732BE8")]
			[DebuggerHidden]
			public <DoRangeOfMotionBlend>d__117(int <>1__state)
			{
			}

			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0x7338B4", Offset = "0x7338B4", VA = "0x7338B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0x7338B8", Offset = "0x7338B8", VA = "0x7338B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0x733E7C", Offset = "0x733E7C", VA = "0x733E7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x590E48", Offset = "0x590E48")]
		public SteamVR_Action_Skeleton skeletonAction;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590EB4", Offset = "0x590EB4")]
		public SteamVR_Input_Sources inputSource;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590EEC", Offset = "0x590EEC")]
		public EVRSkeletalMotionRange rangeOfMotion;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590F24", Offset = "0x590F24")]
		public Transform skeletonRoot;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590F5C", Offset = "0x590F5C")]
		public Transform origin;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590F94", Offset = "0x590F94")]
		public bool updatePose;

		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x590FCC", Offset = "0x590FCC")]
		public bool onlySetRotations;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x591004", Offset = "0x591004")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591004", Offset = "0x591004")]
		public float skeletonBlend;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591058", Offset = "0x591058")]
		public MirrorType mirroring;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591090", Offset = "0x591090")]
		private Transform[] <proximals>k__BackingField;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5910A0", Offset = "0x5910A0")]
		private Transform[] <middles>k__BackingField;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5910B0", Offset = "0x5910B0")]
		private Transform[] <distals>k__BackingField;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5910C0", Offset = "0x5910C0")]
		private Transform[] <tips>k__BackingField;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5910D0", Offset = "0x5910D0")]
		private Transform[] <auxs>k__BackingField;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Coroutine blendRoutine;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Coroutine rangeOfMotionBlendRoutine;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Transform[] bones;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected EVRSkeletalMotionRange? temporaryRangeOfMotion;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Quaternion rightFlipAngle;

		[Token(Token = "0x17000017")]
		public bool isActive
		{
			[Token(Token = "0x6000442")]
			[Address(RVA = "0x73168C", Offset = "0x73168C", VA = "0x73168C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000018")]
		public Transform root
		{
			[Token(Token = "0x6000443")]
			[Address(RVA = "0x7316B4", Offset = "0x7316B4", VA = "0x7316B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		public Transform wrist
		{
			[Token(Token = "0x6000444")]
			[Address(RVA = "0x7316E8", Offset = "0x7316E8", VA = "0x7316E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001A")]
		public Transform indexMetacarpal
		{
			[Token(Token = "0x6000445")]
			[Address(RVA = "0x731720", Offset = "0x731720", VA = "0x731720")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001B")]
		public Transform indexProximal
		{
			[Token(Token = "0x6000446")]
			[Address(RVA = "0x731758", Offset = "0x731758", VA = "0x731758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		public Transform indexMiddle
		{
			[Token(Token = "0x6000447")]
			[Address(RVA = "0x731790", Offset = "0x731790", VA = "0x731790")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001D")]
		public Transform indexDistal
		{
			[Token(Token = "0x6000448")]
			[Address(RVA = "0x7317C8", Offset = "0x7317C8", VA = "0x7317C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001E")]
		public Transform indexTip
		{
			[Token(Token = "0x6000449")]
			[Address(RVA = "0x731800", Offset = "0x731800", VA = "0x731800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		public Transform middleMetacarpal
		{
			[Token(Token = "0x600044A")]
			[Address(RVA = "0x731838", Offset = "0x731838", VA = "0x731838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000020")]
		public Transform middleProximal
		{
			[Token(Token = "0x600044B")]
			[Address(RVA = "0x731870", Offset = "0x731870", VA = "0x731870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		public Transform middleMiddle
		{
			[Token(Token = "0x600044C")]
			[Address(RVA = "0x7318A8", Offset = "0x7318A8", VA = "0x7318A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000022")]
		public Transform middleDistal
		{
			[Token(Token = "0x600044D")]
			[Address(RVA = "0x7318E0", Offset = "0x7318E0", VA = "0x7318E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		public Transform middleTip
		{
			[Token(Token = "0x600044E")]
			[Address(RVA = "0x731918", Offset = "0x731918", VA = "0x731918")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		public Transform pinkyMetacarpal
		{
			[Token(Token = "0x600044F")]
			[Address(RVA = "0x731950", Offset = "0x731950", VA = "0x731950")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		public Transform pinkyProximal
		{
			[Token(Token = "0x6000450")]
			[Address(RVA = "0x731988", Offset = "0x731988", VA = "0x731988")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000026")]
		public Transform pinkyMiddle
		{
			[Token(Token = "0x6000451")]
			[Address(RVA = "0x7319C0", Offset = "0x7319C0", VA = "0x7319C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		public Transform pinkyDistal
		{
			[Token(Token = "0x6000452")]
			[Address(RVA = "0x7319F8", Offset = "0x7319F8", VA = "0x7319F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000028")]
		public Transform pinkyTip
		{
			[Token(Token = "0x6000453")]
			[Address(RVA = "0x731A30", Offset = "0x731A30", VA = "0x731A30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		public Transform ringMetacarpal
		{
			[Token(Token = "0x6000454")]
			[Address(RVA = "0x731A68", Offset = "0x731A68", VA = "0x731A68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002A")]
		public Transform ringProximal
		{
			[Token(Token = "0x6000455")]
			[Address(RVA = "0x731AA0", Offset = "0x731AA0", VA = "0x731AA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		public Transform ringMiddle
		{
			[Token(Token = "0x6000456")]
			[Address(RVA = "0x731AD8", Offset = "0x731AD8", VA = "0x731AD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002C")]
		public Transform ringDistal
		{
			[Token(Token = "0x6000457")]
			[Address(RVA = "0x731B10", Offset = "0x731B10", VA = "0x731B10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		public Transform ringTip
		{
			[Token(Token = "0x6000458")]
			[Address(RVA = "0x731B48", Offset = "0x731B48", VA = "0x731B48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		public Transform thumbMetacarpal
		{
			[Token(Token = "0x6000459")]
			[Address(RVA = "0x731B80", Offset = "0x731B80", VA = "0x731B80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		public Transform thumbProximal
		{
			[Token(Token = "0x600045A")]
			[Address(RVA = "0x731BB8", Offset = "0x731BB8", VA = "0x731BB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		public Transform thumbMiddle
		{
			[Token(Token = "0x600045B")]
			[Address(RVA = "0x731BF0", Offset = "0x731BF0", VA = "0x731BF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000031")]
		public Transform thumbDistal
		{
			[Token(Token = "0x600045C")]
			[Address(RVA = "0x731C28", Offset = "0x731C28", VA = "0x731C28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		public Transform thumbTip
		{
			[Token(Token = "0x600045D")]
			[Address(RVA = "0x731C60", Offset = "0x731C60", VA = "0x731C60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		public Transform thumbAux
		{
			[Token(Token = "0x600045E")]
			[Address(RVA = "0x731C98", Offset = "0x731C98", VA = "0x731C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000034")]
		public Transform indexAux
		{
			[Token(Token = "0x600045F")]
			[Address(RVA = "0x731CD0", Offset = "0x731CD0", VA = "0x731CD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		public Transform middleAux
		{
			[Token(Token = "0x6000460")]
			[Address(RVA = "0x731D08", Offset = "0x731D08", VA = "0x731D08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		public Transform ringAux
		{
			[Token(Token = "0x6000461")]
			[Address(RVA = "0x731D40", Offset = "0x731D40", VA = "0x731D40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		public Transform pinkyAux
		{
			[Token(Token = "0x6000462")]
			[Address(RVA = "0x731D78", Offset = "0x731D78", VA = "0x731D78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		public Transform[] proximals
		{
			[Token(Token = "0x6000463")]
			[Address(RVA = "0x731DB0", Offset = "0x731DB0", VA = "0x731DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593F9C", Offset = "0x593F9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000464")]
			[Address(RVA = "0x731DB8", Offset = "0x731DB8", VA = "0x731DB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593FAC", Offset = "0x593FAC")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000039")]
		public Transform[] middles
		{
			[Token(Token = "0x6000465")]
			[Address(RVA = "0x731DC0", Offset = "0x731DC0", VA = "0x731DC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593FBC", Offset = "0x593FBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000466")]
			[Address(RVA = "0x731DC8", Offset = "0x731DC8", VA = "0x731DC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593FCC", Offset = "0x593FCC")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700003A")]
		public Transform[] distals
		{
			[Token(Token = "0x6000467")]
			[Address(RVA = "0x731DD0", Offset = "0x731DD0", VA = "0x731DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593FDC", Offset = "0x593FDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000468")]
			[Address(RVA = "0x731DD8", Offset = "0x731DD8", VA = "0x731DD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593FEC", Offset = "0x593FEC")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public Transform[] tips
		{
			[Token(Token = "0x6000469")]
			[Address(RVA = "0x731DE0", Offset = "0x731DE0", VA = "0x731DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593FFC", Offset = "0x593FFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600046A")]
			[Address(RVA = "0x731DE8", Offset = "0x731DE8", VA = "0x731DE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59400C", Offset = "0x59400C")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700003C")]
		public Transform[] auxs
		{
			[Token(Token = "0x600046B")]
			[Address(RVA = "0x731DF0", Offset = "0x731DF0", VA = "0x731DF0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59401C", Offset = "0x59401C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600046C")]
			[Address(RVA = "0x731DF8", Offset = "0x731DF8", VA = "0x731DF8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59402C", Offset = "0x59402C")]
			protected set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public bool isBlending
		{
			[Token(Token = "0x600046D")]
			[Address(RVA = "0x731E00", Offset = "0x731E00", VA = "0x731E00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x731E10", Offset = "0x731E10", VA = "0x731E10", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x732404", Offset = "0x732404", VA = "0x732404", Slot = "5")]
		protected virtual void AssignBonesArray()
		{
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x732464", Offset = "0x732464", VA = "0x732464", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x732504", Offset = "0x732504", VA = "0x732504", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x7325A4", Offset = "0x7325A4", VA = "0x7325A4", Slot = "8")]
		protected virtual void SteamVR_Input_OnSkeletonsUpdated(bool obj)
		{
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x7325B0", Offset = "0x7325B0", VA = "0x7325B0", Slot = "9")]
		protected virtual void UpdateSkeleton()
		{
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x7326D4", Offset = "0x7326D4", VA = "0x7326D4")]
		public void SetTemporaryRangeOfMotion(EVRSkeletalMotionRange newRangeOfMotion, float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x732874", Offset = "0x732874", VA = "0x732874")]
		public void ResetTemporaryRangeOfMotion(float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x732954", Offset = "0x732954", VA = "0x732954")]
		public void SetRangeOfMotion(EVRSkeletalMotionRange newRangeOfMotion, float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x732A04", Offset = "0x732A04", VA = "0x732A04")]
		public void BlendToSkeleton(float overTime = 0.1f)
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x732A94", Offset = "0x732A94", VA = "0x732A94")]
		public void BlendToAnimation(float overTime = 0.1f)
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x732A10", Offset = "0x732A10", VA = "0x732A10")]
		public void BlendTo(float blendToAmount, float overTime)
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x732AA0", Offset = "0x732AA0", VA = "0x732AA0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x59403C", Offset = "0x59403C")]
		protected IEnumerator DoBlendRoutine(float blendToAmount, float overTime)
		{
			return null;
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x732968", Offset = "0x732968", VA = "0x732968")]
		protected void RangeOfMotionBlend(EVRSkeletalMotionRange newRangeOfMotion, float blendOverSeconds)
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x73276C", Offset = "0x73276C", VA = "0x73276C")]
		protected void TemporaryRangeOfMotionBlend(EVRSkeletalMotionRange newRangeOfMotion, float blendOverSeconds)
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x732878", Offset = "0x732878", VA = "0x732878")]
		protected void ResetTemporaryRangeOfMotionBlend(float blendOverSeconds)
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x732B54", Offset = "0x732B54", VA = "0x732B54")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5940A0", Offset = "0x5940A0")]
		protected IEnumerator DoRangeOfMotionBlend(EVRSkeletalMotionRange oldRangeOfMotion, EVRSkeletalMotionRange newRangeOfMotion, float overTime)
		{
			return null;
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x732C14", Offset = "0x732C14", VA = "0x732C14", Slot = "10")]
		protected virtual void UpdateSkeletonTransforms()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x7332CC", Offset = "0x7332CC", VA = "0x7332CC", Slot = "11")]
		protected virtual void SetBonePosition(int boneIndex, Vector3 localPosition)
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x733320", Offset = "0x733320", VA = "0x733320", Slot = "12")]
		protected virtual void SetBoneRotation(int boneIndex, Quaternion localRotation)
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x733364", Offset = "0x733364", VA = "0x733364", Slot = "13")]
		public virtual Transform GetBone(int joint)
		{
			return null;
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x7333A0", Offset = "0x7333A0", VA = "0x7333A0")]
		public Vector3 GetBonePosition(int joint, bool local = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x7333F0", Offset = "0x7333F0", VA = "0x7333F0")]
		public Quaternion GetBoneRotation(int joint, bool local = false)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x732F88", Offset = "0x732F88", VA = "0x732F88")]
		protected Vector3[] GetBonePositions(SteamVR_Input_Sources inputSource)
		{
			return null;
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x733134", Offset = "0x733134", VA = "0x733134")]
		protected Quaternion[] GetBoneRotations(SteamVR_Input_Sources inputSource)
		{
			return null;
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x733480", Offset = "0x733480", VA = "0x733480", Slot = "14")]
		protected virtual void UpdatePose()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x733440", Offset = "0x733440", VA = "0x733440")]
		protected bool IsMetacarpal(int boneIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x733610", Offset = "0x733610", VA = "0x733610")]
		public SteamVR_Behaviour_Skeleton()
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class SteamVR_Skeleton_JointIndexes
	{
		[Token(Token = "0x40003CC")]
		public const int root = 0;

		[Token(Token = "0x40003CD")]
		public const int wrist = 1;

		[Token(Token = "0x40003CE")]
		public const int thumbMetacarpal = 2;

		[Token(Token = "0x40003CF")]
		public const int thumbProximal = 2;

		[Token(Token = "0x40003D0")]
		public const int thumbMiddle = 3;

		[Token(Token = "0x40003D1")]
		public const int thumbDistal = 4;

		[Token(Token = "0x40003D2")]
		public const int thumbTip = 5;

		[Token(Token = "0x40003D3")]
		public const int indexMetacarpal = 6;

		[Token(Token = "0x40003D4")]
		public const int indexProximal = 7;

		[Token(Token = "0x40003D5")]
		public const int indexMiddle = 8;

		[Token(Token = "0x40003D6")]
		public const int indexDistal = 9;

		[Token(Token = "0x40003D7")]
		public const int indexTip = 10;

		[Token(Token = "0x40003D8")]
		public const int middleMetacarpal = 11;

		[Token(Token = "0x40003D9")]
		public const int middleProximal = 12;

		[Token(Token = "0x40003DA")]
		public const int middleMiddle = 13;

		[Token(Token = "0x40003DB")]
		public const int middleDistal = 14;

		[Token(Token = "0x40003DC")]
		public const int middleTip = 15;

		[Token(Token = "0x40003DD")]
		public const int ringMetacarpal = 16;

		[Token(Token = "0x40003DE")]
		public const int ringProximal = 17;

		[Token(Token = "0x40003DF")]
		public const int ringMiddle = 18;

		[Token(Token = "0x40003E0")]
		public const int ringDistal = 19;

		[Token(Token = "0x40003E1")]
		public const int ringTip = 20;

		[Token(Token = "0x40003E2")]
		public const int pinkyMetacarpal = 21;

		[Token(Token = "0x40003E3")]
		public const int pinkyProximal = 22;

		[Token(Token = "0x40003E4")]
		public const int pinkyMiddle = 23;

		[Token(Token = "0x40003E5")]
		public const int pinkyDistal = 24;

		[Token(Token = "0x40003E6")]
		public const int pinkyTip = 25;

		[Token(Token = "0x40003E7")]
		public const int thumbAux = 26;

		[Token(Token = "0x40003E8")]
		public const int indexAux = 27;

		[Token(Token = "0x40003E9")]
		public const int middleAux = 28;

		[Token(Token = "0x40003EA")]
		public const int ringAux = 29;

		[Token(Token = "0x40003EB")]
		public const int pinkyAux = 30;

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x752238", Offset = "0x752238", VA = "0x752238")]
		public SteamVR_Skeleton_JointIndexes()
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public enum SteamVR_Skeleton_JointIndexEnum
	{
		[Token(Token = "0x40003ED")]
		root = 0,
		[Token(Token = "0x40003EE")]
		wrist = 1,
		[Token(Token = "0x40003EF")]
		thumbMetacarpal = 2,
		[Token(Token = "0x40003F0")]
		thumbProximal = 2,
		[Token(Token = "0x40003F1")]
		thumbMiddle = 3,
		[Token(Token = "0x40003F2")]
		thumbDistal = 4,
		[Token(Token = "0x40003F3")]
		thumbTip = 5,
		[Token(Token = "0x40003F4")]
		indexMetacarpal = 6,
		[Token(Token = "0x40003F5")]
		indexProximal = 7,
		[Token(Token = "0x40003F6")]
		indexMiddle = 8,
		[Token(Token = "0x40003F7")]
		indexDistal = 9,
		[Token(Token = "0x40003F8")]
		indexTip = 10,
		[Token(Token = "0x40003F9")]
		middleMetacarpal = 11,
		[Token(Token = "0x40003FA")]
		middleProximal = 12,
		[Token(Token = "0x40003FB")]
		middleMiddle = 13,
		[Token(Token = "0x40003FC")]
		middleDistal = 14,
		[Token(Token = "0x40003FD")]
		middleTip = 15,
		[Token(Token = "0x40003FE")]
		ringMetacarpal = 16,
		[Token(Token = "0x40003FF")]
		ringProximal = 17,
		[Token(Token = "0x4000400")]
		ringMiddle = 18,
		[Token(Token = "0x4000401")]
		ringDistal = 19,
		[Token(Token = "0x4000402")]
		ringTip = 20,
		[Token(Token = "0x4000403")]
		pinkyMetacarpal = 21,
		[Token(Token = "0x4000404")]
		pinkyProximal = 22,
		[Token(Token = "0x4000405")]
		pinkyMiddle = 23,
		[Token(Token = "0x4000406")]
		pinkyDistal = 24,
		[Token(Token = "0x4000407")]
		pinkyTip = 25,
		[Token(Token = "0x4000408")]
		thumbAux = 26,
		[Token(Token = "0x4000409")]
		indexAux = 27,
		[Token(Token = "0x400040A")]
		middleAux = 28,
		[Token(Token = "0x400040B")]
		ringAux = 29,
		[Token(Token = "0x400040C")]
		pinkyAux = 30
	}
	[Token(Token = "0x20000D6")]
	public class SteamVR_Behaviour_SkeletonCustom : SteamVR_Behaviour_Skeleton
	{
		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		protected Transform _wrist;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		protected Transform _thumbMetacarpal;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		protected Transform _thumbProximal;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		protected Transform _thumbMiddle;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		protected Transform _thumbDistal;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		protected Transform _thumbTip;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		protected Transform _thumbAux;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		protected Transform _indexMetacarpal;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		protected Transform _indexProximal;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		protected Transform _indexMiddle;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		protected Transform _indexDistal;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		protected Transform _indexTip;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		protected Transform _indexAux;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		protected Transform _middleMetacarpal;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		protected Transform _middleProximal;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		protected Transform _middleMiddle;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		protected Transform _middleDistal;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		protected Transform _middleTip;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		protected Transform _middleAux;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		protected Transform _ringMetacarpal;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		protected Transform _ringProximal;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		protected Transform _ringMiddle;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		protected Transform _ringDistal;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		protected Transform _ringTip;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		protected Transform _ringAux;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		protected Transform _pinkyMetacarpal;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		protected Transform _pinkyProximal;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		protected Transform _pinkyMiddle;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		protected Transform _pinkyDistal;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		protected Transform _pinkyTip;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		protected Transform _pinkyAux;

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x733EE4", Offset = "0x733EE4", VA = "0x733EE4", Slot = "5")]
		protected override void AssignBonesArray()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x73446C", Offset = "0x73446C", VA = "0x73446C")]
		public SteamVR_Behaviour_SkeletonCustom()
		{
		}
	}
	[Token(Token = "0x20000D7")]
	public class SteamVR_Behaviour_Vector2 : MonoBehaviour
	{
		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_Action_Vector2 vector2Action;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5912D0", Offset = "0x5912D0")]
		public SteamVR_Input_Sources inputSource;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591308", Offset = "0x591308")]
		public SteamVR_Behaviour_Vector2Event onChange;

		[Token(Token = "0x1700003E")]
		public bool isActive
		{
			[Token(Token = "0x600048D")]
			[Address(RVA = "0x734470", Offset = "0x734470", VA = "0x734470")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x734498", Offset = "0x734498", VA = "0x734498")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x73452C", Offset = "0x73452C", VA = "0x73452C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x7345C0", Offset = "0x7345C0", VA = "0x7345C0")]
		private void ActionChanged(SteamVR_Action_In action)
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x734674", Offset = "0x734674", VA = "0x734674")]
		public SteamVR_Behaviour_Vector2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000D8")]
	public class SteamVR_Behaviour_Vector2Event : UnityEvent<SteamVR_Action_Vector2>
	{
		[Token(Token = "0x6000492")]
		[Address(RVA = "0x73467C", Offset = "0x73467C", VA = "0x73467C")]
		public SteamVR_Behaviour_Vector2Event()
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class SteamVR_Behaviour_Vector3 : MonoBehaviour
	{
		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_Action_Vector3 vector3Action;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591340", Offset = "0x591340")]
		public SteamVR_Input_Sources inputSource;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591378", Offset = "0x591378")]
		public SteamVR_Behaviour_Vector3Event onChange;

		[Token(Token = "0x1700003F")]
		public bool isActive
		{
			[Token(Token = "0x6000493")]
			[Address(RVA = "0x7346CC", Offset = "0x7346CC", VA = "0x7346CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x7346F4", Offset = "0x7346F4", VA = "0x7346F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x734788", Offset = "0x734788", VA = "0x734788")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x73481C", Offset = "0x73481C", VA = "0x73481C")]
		private void ActionChanged(SteamVR_Action_In action)
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x7348D0", Offset = "0x7348D0", VA = "0x7348D0")]
		public SteamVR_Behaviour_Vector3()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DA")]
	public class SteamVR_Behaviour_Vector3Event : UnityEvent<SteamVR_Action_Vector3>
	{
		[Token(Token = "0x6000498")]
		[Address(RVA = "0x7348D8", Offset = "0x7348D8", VA = "0x7348D8")]
		public SteamVR_Behaviour_Vector3Event()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x58DE38", Offset = "0x58DE38")]
	public class SteamVR_DefaultAction : Attribute
	{
		[Token(Token = "0x2000274")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EAB8", Offset = "0x58EAB8")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x40011EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string regex;

			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0x7374D8", Offset = "0x7374D8", VA = "0x7374D8")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x6000BA8")]
			[Address(RVA = "0x7376F4", Offset = "0x7376F4", VA = "0x7376F4")]
			internal bool <GetAction>b__0(SteamVR_Action matchAction)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string actionName;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string actionSetName;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string inputSourceFieldName;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_ActionDirections? direction;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool overrideExistingOnGeneration;

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x73610C", Offset = "0x73610C", VA = "0x73610C")]
		public SteamVR_DefaultAction(string defaultActionName, bool overrideExistingActionDuringGeneration = false)
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x73614C", Offset = "0x73614C", VA = "0x73614C")]
		public SteamVR_DefaultAction(string defaultActionName, SteamVR_ActionDirections defaultActionDirection, bool overrideExistingActionDuringGeneration = false)
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x7361E4", Offset = "0x7361E4", VA = "0x7361E4")]
		public SteamVR_DefaultAction(string defaultActionName, string defaultActionSetName, bool overrideExistingActionDuringGeneration = false)
		{
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x736228", Offset = "0x736228", VA = "0x736228")]
		public SteamVR_DefaultAction(string defaultActionName, string defaultActionSetName, SteamVR_ActionDirections defaultActionDirection, bool overrideExistingActionDuringGeneration = false)
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x7362CC", Offset = "0x7362CC", VA = "0x7362CC")]
		public SteamVR_DefaultAction(string defaultActionName, string defaultActionSetName, string inputSourceFieldName, bool overrideExistingActionDuringGeneration = false)
		{
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x736320", Offset = "0x736320", VA = "0x736320")]
		public SteamVR_DefaultAction(string defaultActionName, string defaultActionSetName, string inputSourceFieldName, SteamVR_ActionDirections defaultActionDirection, bool overrideExistingActionDuringGeneration = false)
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x7363CC", Offset = "0x7363CC", VA = "0x7363CC")]
		public bool ShouldAssign(FieldInfo field, object onObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x736A4C", Offset = "0x736A4C", VA = "0x736A4C")]
		public void AssignDefault(FieldInfo field, object onObject)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x736B60", Offset = "0x736B60", VA = "0x736B60")]
		public void AssignDefault(PropertyInfo property, object onObject)
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x736C80", Offset = "0x736C80", VA = "0x736C80")]
		public bool ShouldAssign(PropertyInfo property, object onObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x736888", Offset = "0x736888", VA = "0x736888")]
		private SteamVR_Action GetAction(MonoBehaviour monobehaviour)
		{
			return null;
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x7374E0", Offset = "0x7374E0", VA = "0x7374E0")]
		private string GetInputSource(MonoBehaviour monoBehaviour, string inputSourceFieldName)
		{
			return null;
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x737600", Offset = "0x737600", VA = "0x737600")]
		private string GetRegex(string inputSource)
		{
			return null;
		}
	}
	[Token(Token = "0x20000DC")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0x58DE70", Offset = "0x58DE70")]
	public class SteamVR_DefaultActionSet : Attribute
	{
		[Token(Token = "0x2000275")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EAC8", Offset = "0x58EAC8")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x40011F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string regex;

			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0x737BC0", Offset = "0x737BC0", VA = "0x737BC0")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0x737D4C", Offset = "0x737D4C", VA = "0x737D4C")]
			internal bool <GetActionSet>b__0(SteamVR_ActionSet matchAction)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string actionSetName;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool overrideExistingOnGeneration;

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x737780", Offset = "0x737780", VA = "0x737780")]
		public SteamVR_DefaultActionSet(string defaultActionSetName, bool overrideExistingActionDuringGeneration = false)
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x7377C0", Offset = "0x7377C0", VA = "0x7377C0")]
		public void AssignDefault(FieldInfo field, object onObject)
		{
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0x737A90", Offset = "0x737A90", VA = "0x737A90")]
		public void AssignDefault(PropertyInfo property, object onObject)
		{
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x7378E0", Offset = "0x7378E0", VA = "0x7378E0")]
		private SteamVR_ActionSet GetActionSet(MonoBehaviour monobehaviour)
		{
			return null;
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x737C2C", Offset = "0x737C2C", VA = "0x737C2C")]
		private string GetInputSource(MonoBehaviour monoBehaviour, string inputSourceFieldName)
		{
			return null;
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x737BC8", Offset = "0x737BC8", VA = "0x737BC8")]
		private string GetRegex()
		{
			return null;
		}
	}
	[Token(Token = "0x20000DD")]
	public class SteamVR_Input
	{
		[Token(Token = "0x4000439")]
		public const string defaultInputGameObjectName = "[SteamVR Input]";

		[Token(Token = "0x400043A")]
		private const string localizationKeyName = "localization";

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string actionsFilePath;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool fileInitialized;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public static bool initialized;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public static bool preInitialized;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static SteamVR_Input_ActionFile actionFile;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string actionFileHash;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Action InitializeActionSets;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Action InitializeActions;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static Action InitializeInstanceActionSets;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Action InitializeInstanceActions;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected static Type inputType;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected static bool initializing;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static SteamVR_ActionSet[] actionSets;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static SteamVR_Action[] actions;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static SteamVR_Action_In[] actionsIn;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static SteamVR_Action_Out[] actionsOut;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static SteamVR_Action_Boolean[] actionsBoolean;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static SteamVR_Action_Single[] actionsSingle;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static SteamVR_Action_Vector2[] actionsVector2;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static SteamVR_Action_Vector3[] actionsVector3;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static SteamVR_Action_Pose[] actionsPose;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static SteamVR_Action_Skeleton[] actionsSkeleton;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static SteamVR_Action_Vibration[] actionsVibration;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static SteamVR_Action_In[] actionsNonPoseNonSkeletonIn;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected static Dictionary<string, SteamVR_ActionSet> actionSetsByPath;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected static Dictionary<string, SteamVR_Action> actionsByPath;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected static Dictionary<string, SteamVR_ActionSet> actionSetsByPathCache;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected static Dictionary<string, SteamVR_Action> actionsByPathCache;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static SteamVR_Input_ActionSet_default _default;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static SteamVR_Input_ActionSet_platformer platformer;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static SteamVR_Input_ActionSet_buggy buggy;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static SteamVR_Action_Boolean __actions_default_in_InteractUI;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static SteamVR_Action_Boolean __actions_default_in_Teleport;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static SteamVR_Action_Boolean __actions_default_in_GrabPinch;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static SteamVR_Action_Boolean __actions_default_in_GrabGrip;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static SteamVR_Action_Pose __actions_default_in_Pose;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static SteamVR_Action_Skeleton __actions_default_in_SkeletonLeftHand;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static SteamVR_Action_Skeleton __actions_default_in_SkeletonRightHand;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static SteamVR_Action_Single __actions_default_in_Squeeze;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static SteamVR_Action_Vibration __actions_default_out_Haptic;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static SteamVR_Action_Vector2 __actions_platformer_in_Move;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static SteamVR_Action_Boolean __actions_platformer_in_Jump;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static SteamVR_Action_Vector2 __actions_buggy_in_Steering;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static SteamVR_Action_Single __actions_buggy_in_Throttle;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static SteamVR_Action_Boolean __actions_buggy_in_Brake;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static SteamVR_Action_Boolean __actions_buggy_in_Reset;

		[Token(Token = "0x1400000B")]
		public static event Action OnNonVisualActionsUpdated
		{
			[Token(Token = "0x60004AC")]
			[Address(RVA = "0x73E744", Offset = "0x73E744", VA = "0x73E744")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594104", Offset = "0x594104")]
			add
			{
			}
			[Token(Token = "0x60004AD")]
			[Address(RVA = "0x73E834", Offset = "0x73E834", VA = "0x73E834")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594114", Offset = "0x594114")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public static event Action<bool> OnPosesUpdated
		{
			[Token(Token = "0x60004AE")]
			[Address(RVA = "0x73E924", Offset = "0x73E924", VA = "0x73E924")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594124", Offset = "0x594124")]
			add
			{
			}
			[Token(Token = "0x60004AF")]
			[Address(RVA = "0x73EA14", Offset = "0x73EA14", VA = "0x73EA14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594134", Offset = "0x594134")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public static event Action<bool> OnSkeletonsUpdated
		{
			[Token(Token = "0x60004B0")]
			[Address(RVA = "0x73EB04", Offset = "0x73EB04", VA = "0x73EB04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594144", Offset = "0x594144")]
			add
			{
			}
			[Token(Token = "0x60004B1")]
			[Address(RVA = "0x73EBF4", Offset = "0x73EBF4", VA = "0x73EBF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594154", Offset = "0x594154")]
			remove
			{
			}
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0x73ECE4", Offset = "0x73ECE4", VA = "0x73ECE4")]
		public static void IdentifyActionsFile()
		{
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x73EF94", Offset = "0x73EF94", VA = "0x73EF94")]
		public static void PreInitialize()
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x73F1AC", Offset = "0x73F1AC", VA = "0x73F1AC")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x73F924", Offset = "0x73F924", VA = "0x73F924")]
		protected static void InitializeDictionaries()
		{
		}

		[Token(Token = "0x60004B6")]
		public static T GetActionFromPath<T>(string path, bool caseSensitive = false) where T : SteamVR_Action
		{
			return null;
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x73FB70", Offset = "0x73FB70", VA = "0x73FB70")]
		public static SteamVR_Action GetActionFromPath(string path)
		{
			return null;
		}

		[Token(Token = "0x60004B8")]
		public static T GetActionSetFromPath<T>(string path, bool caseSensitive = false) where T : SteamVR_ActionSet
		{
			return null;
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x73FBE4", Offset = "0x73FBE4", VA = "0x73FBE4")]
		public static SteamVR_ActionSet GetActionSetFromPath(string path)
		{
			return null;
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x73FC58", Offset = "0x73FC58", VA = "0x73FC58")]
		public static void Update()
		{
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x7400C4", Offset = "0x7400C4", VA = "0x7400C4")]
		public static void LateUpdate()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x74044C", Offset = "0x74044C", VA = "0x74044C")]
		public static void FixedUpdate()
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x7405E8", Offset = "0x7405E8", VA = "0x7405E8")]
		public static void OnPreCull()
		{
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x73FFF4", Offset = "0x73FFF4", VA = "0x73FFF4")]
		public static void UpdateVisualActions(bool skipStateAndEventUpdates = false)
		{
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x740784", Offset = "0x740784", VA = "0x740784")]
		public static void UpdatePoseActions(bool skipStateAndEventUpdates = false)
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x740950", Offset = "0x740950", VA = "0x740950")]
		protected static void UpdatePoseActions(SteamVR_Input_Sources inputSource, bool skipStateAndEventUpdates = false)
		{
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x740284", Offset = "0x740284", VA = "0x740284")]
		public static void UpdateSkeletonActions(bool skipStateAndEventUpdates = false)
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x740AC4", Offset = "0x740AC4", VA = "0x740AC4")]
		protected static void UpdateSkeletonActions(SteamVR_Input_Sources inputSource, bool skipStateAndEventUpdates = false)
		{
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x73FE04", Offset = "0x73FE04", VA = "0x73FE04")]
		public static void UpdateNonVisualActions()
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x740C38", Offset = "0x740C38", VA = "0x740C38")]
		public static void UpdateNonVisualActions(SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x740DD8", Offset = "0x740DD8", VA = "0x740DD8")]
		public static SteamVR_ActionSet[] GetActionSets()
		{
			return null;
		}

		[Token(Token = "0x60004C6")]
		public static T[] GetActions<T>() where T : SteamVR_Action
		{
			return null;
		}

		[Token(Token = "0x60004C7")]
		protected static Delegate GetMethod<T>(string methodName)
		{
			return null;
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x740E54", Offset = "0x740E54", VA = "0x740E54")]
		public static bool HasFileInMemoryBeenModified()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x7411B0", Offset = "0x7411B0", VA = "0x7411B0")]
		public static bool InitializeFile(bool force = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x741770", Offset = "0x741770", VA = "0x741770")]
		public static void Dynamic_InitializeActionSets()
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x741814", Offset = "0x741814", VA = "0x741814")]
		public static void Dynamic_InitializeInstanceActionSets()
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x741B1C", Offset = "0x741B1C", VA = "0x741B1C")]
		public static void Dynamic_InitializeActions()
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x741D1C", Offset = "0x741D1C", VA = "0x741D1C")]
		public static void Dynamic_InitializeInstanceActions()
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x742FEC", Offset = "0x742FEC", VA = "0x742FEC")]
		public SteamVR_Input()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000DE")]
	public class SteamVR_Input_ActionFile
	{
		[Token(Token = "0x2000276")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x58EAD8", Offset = "0x58EAD8")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x40011F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SteamVR_Input_ActionFile_ActionSet actionset;

			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0x743150", Offset = "0x743150", VA = "0x743150")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0x743C78", Offset = "0x743C78", VA = "0x743C78")]
			internal bool <InitializeHelperLists>b__0(SteamVR_Input_ActionFile_Action action)
			{
				return default(bool);
			}

			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0x743DB0", Offset = "0x743DB0", VA = "0x743DB0")]
			internal bool <InitializeHelperLists>b__1(SteamVR_Input_ActionFile_Action action)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<SteamVR_Input_ActionFile_Action> actions;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SteamVR_Input_ActionFile_ActionSet> action_sets;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SteamVR_Input_ActionFile_DefaultBinding> default_bindings;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Dictionary<string, string>> localization;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[JsonIgnore]
		public List<SteamVR_Input_ActionFile_LocalizationItem> localizationHelperList;

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x74144C", Offset = "0x74144C", VA = "0x74144C")]
		public void InitializeHelperLists()
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x743340", Offset = "0x743340", VA = "0x743340")]
		public void SaveHelperLists()
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x74373C", Offset = "0x74373C", VA = "0x74373C")]
		public static string GetShortName(string name)
		{
			return null;
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x7437CC", Offset = "0x7437CC", VA = "0x7437CC")]
		public static string GetCodeFriendlyName(string name)
		{
			return null;
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x743964", Offset = "0x743964", VA = "0x743964")]
		public string[] GetFilesToCopy(bool throwErrors = false)
		{
			return null;
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x743C08", Offset = "0x743C08", VA = "0x743C08")]
		public SteamVR_Input_ActionFile()
		{
		}
	}
	[Token(Token = "0x20000DF")]
	public enum SteamVR_Input_ActionFile_DefailtBinding_ControllerTypes
	{
		[Token(Token = "0x4000472")]
		vive,
		[Token(Token = "0x4000473")]
		vive_pro,
		[Token(Token = "0x4000474")]
		vive_controller,
		[Token(Token = "0x4000475")]
		generic,
		[Token(Token = "0x4000476")]
		holographic_controller,
		[Token(Token = "0x4000477")]
		oculus_touch,
		[Token(Token = "0x4000478")]
		gamepad,
		[Token(Token = "0x4000479")]
		knuckles
	}
	[Serializable]
	[Token(Token = "0x20000E0")]
	public class SteamVR_Input_ActionFile_DefaultBinding
	{
		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string controller_type;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string binding_url;

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x7449FC", Offset = "0x7449FC", VA = "0x7449FC")]
		public SteamVR_Input_ActionFile_DefaultBinding()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000E1")]
	public class SteamVR_Input_ActionFile_ActionSet
	{
		[Token(Token = "0x400047C")]
		[JsonIgnore]
		private const string actionSetInstancePrefix = "instance_";

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string usage;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[JsonIgnore]
		public List<SteamVR_Input_ActionFile_Action> actionsInList;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[JsonIgnore]
		public List<SteamVR_Input_ActionFile_Action> actionsOutList;

		[Token(Token = "0x17000040")]
		[JsonIgnore]
		public string codeFriendlyName
		{
			[Token(Token = "0x60004D7")]
			[Address(RVA = "0x74417C", Offset = "0x74417C", VA = "0x74417C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		[JsonIgnore]
		public string shortName
		{
			[Token(Token = "0x60004D8")]
			[Address(RVA = "0x744184", Offset = "0x744184", VA = "0x744184")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x74418C", Offset = "0x74418C", VA = "0x74418C")]
		public void SetNewShortName(string newShortName)
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x7441F4", Offset = "0x7441F4", VA = "0x7441F4")]
		public string CreateNewName()
		{
			return null;
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x74423C", Offset = "0x74423C", VA = "0x74423C")]
		public SteamVR_Input_ActionFile_ActionSet()
		{
		}
	}
	[Token(Token = "0x20000E2")]
	public enum SteamVR_Input_ActionFile_Action_Requirements
	{
		[Token(Token = "0x4000482")]
		optional,
		[Token(Token = "0x4000483")]
		suggested,
		[Token(Token = "0x4000484")]
		mandatory
	}
	[Serializable]
	[Token(Token = "0x20000E3")]
	public class SteamVR_Input_ActionFile_Action
	{
		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[JsonIgnore]
		private static string[] _requirementValues;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string type;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scope;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string skeleton;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string requirement;

		[Token(Token = "0x17000042")]
		[JsonIgnore]
		public static string[] requirementValues
		{
			[Token(Token = "0x60004DC")]
			[Address(RVA = "0x743E78", Offset = "0x743E78", VA = "0x743E78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		[JsonIgnore]
		public SteamVR_Input_ActionFile_Action_Requirements requirementEnum
		{
			[Token(Token = "0x60004DD")]
			[Address(RVA = "0x743F50", Offset = "0x743F50", VA = "0x743F50")]
			get
			{
				return default(SteamVR_Input_ActionFile_Action_Requirements);
			}
			[Token(Token = "0x60004DE")]
			[Address(RVA = "0x743FD8", Offset = "0x743FD8", VA = "0x743FD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000044")]
		[JsonIgnore]
		public string codeFriendlyName
		{
			[Token(Token = "0x60004DF")]
			[Address(RVA = "0x744060", Offset = "0x744060", VA = "0x744060")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000045")]
		[JsonIgnore]
		public string shortName
		{
			[Token(Token = "0x60004E0")]
			[Address(RVA = "0x744068", Offset = "0x744068", VA = "0x744068")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		[JsonIgnore]
		public string path
		{
			[Token(Token = "0x60004E1")]
			[Address(RVA = "0x743D40", Offset = "0x743D40", VA = "0x743D40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		[JsonIgnore]
		public SteamVR_ActionDirections direction
		{
			[Token(Token = "0x60004E3")]
			[Address(RVA = "0x7440D4", Offset = "0x7440D4", VA = "0x7440D4")]
			get
			{
				return default(SteamVR_ActionDirections);
			}
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x744070", Offset = "0x744070", VA = "0x744070")]
		public string CreateNewName(string actionSet, string direction)
		{
			return null;
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x74416C", Offset = "0x74416C", VA = "0x74416C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x744174", Offset = "0x744174", VA = "0x744174")]
		public SteamVR_Input_ActionFile_Action()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class SteamVR_Input_ActionFile_LocalizationItem
	{
		[Token(Token = "0x400048B")]
		public const string languageTagKeyName = "language_tag";

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string language;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<string, string> items;

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x744A04", Offset = "0x744A04", VA = "0x744A04")]
		public SteamVR_Input_ActionFile_LocalizationItem(string newLanguage)
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x743158", Offset = "0x743158", VA = "0x743158")]
		public SteamVR_Input_ActionFile_LocalizationItem(Dictionary<string, string> dictionary)
		{
		}
	}
	[Token(Token = "0x20000E5")]
	public class SteamVR_Input_ManifestFile
	{
		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string source;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SteamVR_Input_ManifestFile_Application> applications;

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x744BE8", Offset = "0x744BE8", VA = "0x744BE8")]
		public SteamVR_Input_ManifestFile()
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public class SteamVR_Input_ManifestFile_Application
	{
		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string app_key;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string launch_type;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string url;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string binary_path_windows;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string binary_path_linux;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string binary_path_osx;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string action_manifest_path;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string image_path;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Dictionary<string, SteamVR_Input_ManifestFile_ApplicationString> strings;

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x744BF0", Offset = "0x744BF0", VA = "0x744BF0")]
		public SteamVR_Input_ManifestFile_Application()
		{
		}
	}
	[Token(Token = "0x20000E7")]
	public class SteamVR_Input_ManifestFile_ApplicationString
	{
		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x744C60", Offset = "0x744C60", VA = "0x744C60")]
		public SteamVR_Input_ManifestFile_ApplicationString()
		{
		}
	}
	[Token(Token = "0x20000E8")]
	public class SteamVR_Input_ManifestFile_Application_Binding
	{
		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string controller_type;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string binding_url;

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x744C68", Offset = "0x744C68", VA = "0x744C68")]
		public SteamVR_Input_ManifestFile_Application_Binding()
		{
		}
	}
	[Token(Token = "0x20000E9")]
	public class SteamVR_Input_ManifestFile_Application_Binding_ControllerTypes
	{
		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string oculus_touch;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string vive_controller;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string knuckles;

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x744C70", Offset = "0x744C70", VA = "0x744C70")]
		public SteamVR_Input_ManifestFile_Application_Binding_ControllerTypes()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public static class SteamVR_Input_ActionFile_ActionTypes
	{
		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string boolean;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string vector1;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string vector2;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string vector3;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string vibration;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string pose;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string skeleton;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string skeletonLeftPath;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string skeletonRightPath;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] listAll;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] listIn;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] listOut;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] listSkeletons;
	}
	[Token(Token = "0x20000EB")]
	public static class SteamVR_Input_ActionFile_ActionSet_Usages
	{
		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string leftright;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string single;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string hidden;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string leftrightDescription;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string singleDescription;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string hiddenDescription;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] listValues;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] listDescriptions;
	}
	[Token(Token = "0x20000EC")]
	public enum SteamVR_Input_ActionScopes
	{
		[Token(Token = "0x40004B5")]
		ActionSet,
		[Token(Token = "0x40004B6")]
		Application,
		[Token(Token = "0x40004B7")]
		Global
	}
	[Token(Token = "0x20000ED")]
	public enum SteamVR_Input_ActionSetUsages
	{
		[Token(Token = "0x40004B9")]
		LeftRight,
		[Token(Token = "0x40004BA")]
		Single,
		[Token(Token = "0x40004BB")]
		Hidden
	}
	[Token(Token = "0x20000EE")]
	public class SteamVR_Input_Generator_Names
	{
		[Token(Token = "0x40004BC")]
		public const string initializeActionSetsMethodName = "Dynamic_InitializeActionSets";

		[Token(Token = "0x40004BD")]
		public const string initializeActionsMethodName = "Dynamic_InitializeActions";

		[Token(Token = "0x40004BE")]
		public const string updateActionsMethodName = "Dynamic_UpdateActions";

		[Token(Token = "0x40004BF")]
		public const string updateNonPoseNonSkeletonActionsMethodName = "Dynamic_UpdateNonPoseNonSkeletonActions";

		[Token(Token = "0x40004C0")]
		public const string updatePoseActionsMethodName = "Dynamic_UpdatePoseActions";

		[Token(Token = "0x40004C1")]
		public const string updateSkeletonActionsMethodName = "Dynamic_UpdateSkeletalActions";

		[Token(Token = "0x40004C2")]
		public const string initializeInstanceActionsMethodName = "Dynamic_InitializeInstanceActions";

		[Token(Token = "0x40004C3")]
		public const string initializeInstanceActionSetsMethodName = "Dynamic_InitializeInstanceActionSets";

		[Token(Token = "0x40004C4")]
		public const string actionsFieldName = "actions";

		[Token(Token = "0x40004C5")]
		public const string actionsInFieldName = "actionsIn";

		[Token(Token = "0x40004C6")]
		public const string actionsOutFieldName = "actionsOut";

		[Token(Token = "0x40004C7")]
		public const string actionsVibrationFieldName = "actionsVibration";

		[Token(Token = "0x40004C8")]
		public const string actionsPoseFieldName = "actionsPose";

		[Token(Token = "0x40004C9")]
		public const string actionsBooleanFieldName = "actionsBoolean";

		[Token(Token = "0x40004CA")]
		public const string actionsSingleFieldName = "actionsSingle";

		[Token(Token = "0x40004CB")]
		public const string actionsVector2FieldName = "actionsVector2";

		[Token(Token = "0x40004CC")]
		public const string actionsVector3FieldName = "actionsVector3";

		[Token(Token = "0x40004CD")]
		public const string actionsSkeletonFieldName = "actionsSkeleton";

		[Token(Token = "0x40004CE")]
		public const string actionsNonPoseNonSkeletonIn = "actionsNonPoseNonSkeletonIn";

		[Token(Token = "0x40004CF")]
		public const string actionSetsFieldName = "actionSets";

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x744BE0", Offset = "0x744BE0", VA = "0x744BE0")]
		public SteamVR_Input_Generator_Names()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	public class SteamVR_Input_References : ScriptableObject
	{
		[NonSerialized]
		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SteamVR_Input_References _instance;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] actionSetNames;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_ActionSet[] actionSetObjects;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] actionNames;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_Action[] actionObjects;

		[Token(Token = "0x17000048")]
		public static SteamVR_Input_References instance
		{
			[Token(Token = "0x60004F1")]
			[Address(RVA = "0x744D00", Offset = "0x744D00", VA = "0x744D00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x742F30", Offset = "0x742F30", VA = "0x742F30")]
		public static SteamVR_Action GetAction(string name)
		{
			return null;
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x741A60", Offset = "0x741A60", VA = "0x741A60")]
		public static SteamVR_ActionSet GetActionSet(string set)
		{
			return null;
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x744DB8", Offset = "0x744DB8", VA = "0x744DB8")]
		public SteamVR_Input_References()
		{
		}
	}
	[Token(Token = "0x20000F0")]
	public static class SteamVR_Input_Source
	{
		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<SteamVR_Input_Sources, ulong> inputSourceHandlesBySource;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<ulong, SteamVR_Input_Sources> inputSourceSourcesByHandle;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Type enumType;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Type descriptionType;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static SteamVR_Input_Sources[] updateSources;

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x744DC0", Offset = "0x744DC0", VA = "0x744DC0")]
		public static ulong GetHandle(SteamVR_Input_Sources inputSource)
		{
			return default(ulong);
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x744E94", Offset = "0x744E94", VA = "0x744E94")]
		public static SteamVR_Input_Sources[] GetUpdateSources()
		{
			return null;
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x744EFC", Offset = "0x744EFC", VA = "0x744EFC")]
		private static string GetPath(string inputSourceEnumName)
		{
			return null;
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x73F568", Offset = "0x73F568", VA = "0x73F568")]
		public static void Initialize()
		{
		}
	}
	[Token(Token = "0x20000F1")]
	public enum SteamVR_Input_Sources
	{
		[Token(Token = "0x40004DB")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x591430", Offset = "0x591430")]
		Any,
		[Token(Token = "0x40004DC")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x591468", Offset = "0x591468")]
		LeftHand,
		[Token(Token = "0x40004DD")]
		[AttributeAttribute(Name = "DescriptionAttribute", RVA = "0x5914A0", Offset = "0x5914A0")]
		RightHand
	}
	[Token(Token = "0x20000F2")]
	public enum SteamVR_UpdateModes
	{
		[Token(Token = "0x40004DF")]
		Nothing = 1,
		[Token(Token = "0x40004E0")]
		OnUpdate = 2,
		[Token(Token = "0x40004E1")]
		OnFixedUpdate = 4,
		[Token(Token = "0x40004E2")]
		OnPreCull = 8,
		[Token(Token = "0x40004E3")]
		OnLateUpdate = 0x10
	}
	[Token(Token = "0x20000F3")]
	public struct IVRSystem
	{
		[Token(Token = "0x2000277")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EAE8", Offset = "0x58EAE8")]
		internal delegate void _GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x2000278")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EAFC", Offset = "0x58EAFC")]
		internal delegate HmdMatrix44_t _GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ);

		[Token(Token = "0x2000279")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB10", Offset = "0x58EB10")]
		internal delegate void _GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom);

		[Token(Token = "0x200027A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB24", Offset = "0x58EB24")]
		internal delegate bool _ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates);

		[Token(Token = "0x200027B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB38", Offset = "0x58EB38")]
		internal delegate HmdMatrix34_t _GetEyeToHeadTransform(EVREye eEye);

		[Token(Token = "0x200027C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB4C", Offset = "0x58EB4C")]
		internal delegate bool _GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter);

		[Token(Token = "0x200027D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB60", Offset = "0x58EB60")]
		internal delegate int _GetD3D9AdapterIndex();

		[Token(Token = "0x200027E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB74", Offset = "0x58EB74")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex);

		[Token(Token = "0x200027F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB88", Offset = "0x58EB88")]
		internal delegate void _GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance);

		[Token(Token = "0x2000280")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EB9C", Offset = "0x58EB9C")]
		internal delegate bool _IsDisplayOnDesktop();

		[Token(Token = "0x2000281")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EBB0", Offset = "0x58EBB0")]
		internal delegate bool _SetDisplayVisibility(bool bIsVisibleOnDesktop);

		[Token(Token = "0x2000282")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EBC4", Offset = "0x58EBC4")]
		internal delegate void _GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, [In][Out] TrackedDevicePose_t[] pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount);

		[Token(Token = "0x2000283")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EBD8", Offset = "0x58EBD8")]
		internal delegate void _ResetSeatedZeroPose();

		[Token(Token = "0x2000284")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EBEC", Offset = "0x58EBEC")]
		internal delegate HmdMatrix34_t _GetSeatedZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x2000285")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC00", Offset = "0x58EC00")]
		internal delegate HmdMatrix34_t _GetRawZeroPoseToStandingAbsoluteTrackingPose();

		[Token(Token = "0x2000286")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC14", Offset = "0x58EC14")]
		internal delegate uint _GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, [In][Out] uint[] punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex);

		[Token(Token = "0x2000287")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC28", Offset = "0x58EC28")]
		internal delegate EDeviceActivityLevel _GetTrackedDeviceActivityLevel(uint unDeviceId);

		[Token(Token = "0x2000288")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC3C", Offset = "0x58EC3C")]
		internal delegate void _ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform);

		[Token(Token = "0x2000289")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC50", Offset = "0x58EC50")]
		internal delegate uint _GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType);

		[Token(Token = "0x200028A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC64", Offset = "0x58EC64")]
		internal delegate ETrackedControllerRole _GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex);

		[Token(Token = "0x200028B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC78", Offset = "0x58EC78")]
		internal delegate ETrackedDeviceClass _GetTrackedDeviceClass(uint unDeviceIndex);

		[Token(Token = "0x200028C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EC8C", Offset = "0x58EC8C")]
		internal delegate bool _IsTrackedDeviceConnected(uint unDeviceIndex);

		[Token(Token = "0x200028D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ECA0", Offset = "0x58ECA0")]
		internal delegate bool _GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200028E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ECB4", Offset = "0x58ECB4")]
		internal delegate float _GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x200028F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ECC8", Offset = "0x58ECC8")]
		internal delegate int _GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x2000290")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ECDC", Offset = "0x58ECDC")]
		internal delegate ulong _GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x2000291")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ECF0", Offset = "0x58ECF0")]
		internal delegate HmdMatrix34_t _GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError);

		[Token(Token = "0x2000292")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED04", Offset = "0x58ED04")]
		internal delegate uint _GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x2000293")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED18", Offset = "0x58ED18")]
		internal delegate uint _GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError);

		[Token(Token = "0x2000294")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED2C", Offset = "0x58ED2C")]
		internal delegate IntPtr _GetPropErrorNameFromEnum(ETrackedPropertyError error);

		[Token(Token = "0x2000295")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED40", Offset = "0x58ED40")]
		internal delegate bool _PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x2000296")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED54", Offset = "0x58ED54")]
		internal delegate bool _PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x2000297")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED68", Offset = "0x58ED68")]
		internal delegate IntPtr _GetEventTypeNameFromEnum(EVREventType eType);

		[Token(Token = "0x2000298")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED7C", Offset = "0x58ED7C")]
		internal delegate HiddenAreaMesh_t _GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type);

		[Token(Token = "0x2000299")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58ED90", Offset = "0x58ED90")]
		internal delegate bool _GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize);

		[Token(Token = "0x200029A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EDA4", Offset = "0x58EDA4")]
		internal delegate bool _GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[Token(Token = "0x200029B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EDB8", Offset = "0x58EDB8")]
		internal delegate void _TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ushort usDurationMicroSec);

		[Token(Token = "0x200029C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EDCC", Offset = "0x58EDCC")]
		internal delegate IntPtr _GetButtonIdNameFromEnum(EVRButtonId eButtonId);

		[Token(Token = "0x200029D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EDE0", Offset = "0x58EDE0")]
		internal delegate IntPtr _GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType);

		[Token(Token = "0x200029E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EDF4", Offset = "0x58EDF4")]
		internal delegate bool _IsInputAvailable();

		[Token(Token = "0x200029F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE08", Offset = "0x58EE08")]
		internal delegate bool _IsSteamVRDrawingControllers();

		[Token(Token = "0x20002A0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE1C", Offset = "0x58EE1C")]
		internal delegate bool _ShouldApplicationPause();

		[Token(Token = "0x20002A1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE30", Offset = "0x58EE30")]
		internal delegate bool _ShouldApplicationReduceRenderingWork();

		[Token(Token = "0x20002A2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE44", Offset = "0x58EE44")]
		internal delegate uint _DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize);

		[Token(Token = "0x20002A3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE58", Offset = "0x58EE58")]
		internal delegate EVRFirmwareError _PerformFirmwareUpdate(uint unDeviceIndex);

		[Token(Token = "0x20002A4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE6C", Offset = "0x58EE6C")]
		internal delegate void _AcknowledgeQuit_Exiting();

		[Token(Token = "0x20002A5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE80", Offset = "0x58EE80")]
		internal delegate void _AcknowledgeQuit_UserPrompt();

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetRecommendedRenderTargetSize GetRecommendedRenderTargetSize;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetProjectionMatrix GetProjectionMatrix;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetProjectionRaw GetProjectionRaw;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ComputeDistortion ComputeDistortion;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetEyeToHeadTransform GetEyeToHeadTransform;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetTimeSinceLastVsync GetTimeSinceLastVsync;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetD3D9AdapterIndex GetD3D9AdapterIndex;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOutputDevice GetOutputDevice;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _IsDisplayOnDesktop IsDisplayOnDesktop;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetDisplayVisibility SetDisplayVisibility;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetDeviceToAbsoluteTrackingPose GetDeviceToAbsoluteTrackingPose;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ResetSeatedZeroPose ResetSeatedZeroPose;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetSeatedZeroPoseToStandingAbsoluteTrackingPose GetSeatedZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetRawZeroPoseToStandingAbsoluteTrackingPose GetRawZeroPoseToStandingAbsoluteTrackingPose;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetSortedTrackedDeviceIndicesOfClass GetSortedTrackedDeviceIndicesOfClass;

		[Token(Token = "0x40004F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetTrackedDeviceActivityLevel GetTrackedDeviceActivityLevel;

		[Token(Token = "0x40004F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ApplyTransform ApplyTransform;

		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetTrackedDeviceIndexForControllerRole GetTrackedDeviceIndexForControllerRole;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetControllerRoleForTrackedDeviceIndex GetControllerRoleForTrackedDeviceIndex;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetTrackedDeviceClass GetTrackedDeviceClass;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsTrackedDeviceConnected IsTrackedDeviceConnected;

		[Token(Token = "0x40004FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetBoolTrackedDeviceProperty GetBoolTrackedDeviceProperty;

		[Token(Token = "0x40004FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetFloatTrackedDeviceProperty GetFloatTrackedDeviceProperty;

		[Token(Token = "0x40004FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetInt32TrackedDeviceProperty GetInt32TrackedDeviceProperty;

		[Token(Token = "0x40004FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetUint64TrackedDeviceProperty GetUint64TrackedDeviceProperty;

		[Token(Token = "0x40004FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _GetMatrix34TrackedDeviceProperty GetMatrix34TrackedDeviceProperty;

		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetArrayTrackedDeviceProperty GetArrayTrackedDeviceProperty;

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _GetStringTrackedDeviceProperty GetStringTrackedDeviceProperty;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetPropErrorNameFromEnum GetPropErrorNameFromEnum;

		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _PollNextEvent PollNextEvent;

		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _PollNextEventWithPose PollNextEventWithPose;

		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetEventTypeNameFromEnum GetEventTypeNameFromEnum;

		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetHiddenAreaMesh GetHiddenAreaMesh;

		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetControllerState GetControllerState;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetControllerStateWithPose GetControllerStateWithPose;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _TriggerHapticPulse TriggerHapticPulse;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _GetButtonIdNameFromEnum GetButtonIdNameFromEnum;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetControllerAxisTypeNameFromEnum GetControllerAxisTypeNameFromEnum;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _IsInputAvailable IsInputAvailable;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _IsSteamVRDrawingControllers IsSteamVRDrawingControllers;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShouldApplicationPause ShouldApplicationPause;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _ShouldApplicationReduceRenderingWork ShouldApplicationReduceRenderingWork;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _DriverDebugRequest DriverDebugRequest;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _PerformFirmwareUpdate PerformFirmwareUpdate;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _AcknowledgeQuit_Exiting AcknowledgeQuit_Exiting;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _AcknowledgeQuit_UserPrompt AcknowledgeQuit_UserPrompt;
	}
	[Token(Token = "0x20000F4")]
	public struct IVRExtendedDisplay
	{
		[Token(Token = "0x20002A6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EE94", Offset = "0x58EE94")]
		internal delegate void _GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20002A7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EEA8", Offset = "0x58EEA8")]
		internal delegate void _GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20002A8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EEBC", Offset = "0x58EEBC")]
		internal delegate void _GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex);

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetWindowBounds GetWindowBounds;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetEyeOutputViewport GetEyeOutputViewport;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetDXGIOutputInfo GetDXGIOutputInfo;
	}
	[Token(Token = "0x20000F5")]
	public struct IVRTrackedCamera
	{
		[Token(Token = "0x20002A9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EED0", Offset = "0x58EED0")]
		internal delegate IntPtr _GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError);

		[Token(Token = "0x20002AA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EEE4", Offset = "0x58EEE4")]
		internal delegate EVRTrackedCameraError _HasCamera(uint nDeviceIndex, ref bool pHasCamera);

		[Token(Token = "0x20002AB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EEF8", Offset = "0x58EEF8")]
		internal delegate EVRTrackedCameraError _GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize);

		[Token(Token = "0x20002AC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF0C", Offset = "0x58EF0C")]
		internal delegate EVRTrackedCameraError _GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter);

		[Token(Token = "0x20002AD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF20", Offset = "0x58EF20")]
		internal delegate EVRTrackedCameraError _GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection);

		[Token(Token = "0x20002AE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF34", Offset = "0x58EF34")]
		internal delegate EVRTrackedCameraError _AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle);

		[Token(Token = "0x20002AF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF48", Offset = "0x58EF48")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamingService(ulong hTrackedCamera);

		[Token(Token = "0x20002B0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF5C", Offset = "0x58EF5C")]
		internal delegate EVRTrackedCameraError _GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20002B1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF70", Offset = "0x58EF70")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight);

		[Token(Token = "0x20002B2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF84", Offset = "0x58EF84")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20002B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EF98", Offset = "0x58EF98")]
		internal delegate EVRTrackedCameraError _GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize);

		[Token(Token = "0x20002B4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EFAC", Offset = "0x58EFAC")]
		internal delegate EVRTrackedCameraError _ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId);

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HasCamera HasCamera;

		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetCameraFrameSize GetCameraFrameSize;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetCameraIntrinsics GetCameraIntrinsics;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetCameraProjection GetCameraProjection;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _AcquireVideoStreamingService AcquireVideoStreamingService;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ReleaseVideoStreamingService ReleaseVideoStreamingService;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetVideoStreamTextureSize GetVideoStreamTextureSize;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetVideoStreamTextureGL GetVideoStreamTextureGL;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL;
	}
	[Token(Token = "0x20000F6")]
	public struct IVRApplications
	{
		[Token(Token = "0x20002B5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EFC0", Offset = "0x58EFC0")]
		internal delegate EVRApplicationError _AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary);

		[Token(Token = "0x20002B6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EFD4", Offset = "0x58EFD4")]
		internal delegate EVRApplicationError _RemoveApplicationManifest(string pchApplicationManifestFullPath);

		[Token(Token = "0x20002B7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EFE8", Offset = "0x58EFE8")]
		internal delegate bool _IsApplicationInstalled(string pchAppKey);

		[Token(Token = "0x20002B8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58EFFC", Offset = "0x58EFFC")]
		internal delegate uint _GetApplicationCount();

		[Token(Token = "0x20002B9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F010", Offset = "0x58F010")]
		internal delegate EVRApplicationError _GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20002BA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F024", Offset = "0x58F024")]
		internal delegate EVRApplicationError _GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20002BB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F038", Offset = "0x58F038")]
		internal delegate EVRApplicationError _LaunchApplication(string pchAppKey);

		[Token(Token = "0x20002BC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F04C", Offset = "0x58F04C")]
		internal delegate EVRApplicationError _LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, [In][Out] AppOverrideKeys_t[] pKeys, uint unKeys);

		[Token(Token = "0x20002BD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F060", Offset = "0x58F060")]
		internal delegate EVRApplicationError _LaunchApplicationFromMimeType(string pchMimeType, string pchArgs);

		[Token(Token = "0x20002BE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F074", Offset = "0x58F074")]
		internal delegate EVRApplicationError _LaunchDashboardOverlay(string pchAppKey);

		[Token(Token = "0x20002BF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F088", Offset = "0x58F088")]
		internal delegate bool _CancelApplicationLaunch(string pchAppKey);

		[Token(Token = "0x20002C0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F09C", Offset = "0x58F09C")]
		internal delegate EVRApplicationError _IdentifyApplication(uint unProcessId, string pchAppKey);

		[Token(Token = "0x20002C1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F0B0", Offset = "0x58F0B0")]
		internal delegate uint _GetApplicationProcessId(string pchAppKey);

		[Token(Token = "0x20002C2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F0C4", Offset = "0x58F0C4")]
		internal delegate IntPtr _GetApplicationsErrorNameFromEnum(EVRApplicationError error);

		[Token(Token = "0x20002C3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F0D8", Offset = "0x58F0D8")]
		internal delegate uint _GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError);

		[Token(Token = "0x20002C4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F0EC", Offset = "0x58F0EC")]
		internal delegate bool _GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20002C5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F100", Offset = "0x58F100")]
		internal delegate ulong _GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError);

		[Token(Token = "0x20002C6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F114", Offset = "0x58F114")]
		internal delegate EVRApplicationError _SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch);

		[Token(Token = "0x20002C7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F128", Offset = "0x58F128")]
		internal delegate bool _GetApplicationAutoLaunch(string pchAppKey);

		[Token(Token = "0x20002C8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F13C", Offset = "0x58F13C")]
		internal delegate EVRApplicationError _SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType);

		[Token(Token = "0x20002C9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F150", Offset = "0x58F150")]
		internal delegate bool _GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20002CA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F164", Offset = "0x58F164")]
		internal delegate bool _GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer);

		[Token(Token = "0x20002CB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F178", Offset = "0x58F178")]
		internal delegate uint _GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer);

		[Token(Token = "0x20002CC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F18C", Offset = "0x58F18C")]
		internal delegate uint _GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs);

		[Token(Token = "0x20002CD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F1A0", Offset = "0x58F1A0")]
		internal delegate EVRApplicationError _GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen);

		[Token(Token = "0x20002CE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F1B4", Offset = "0x58F1B4")]
		internal delegate EVRApplicationTransitionState _GetTransitionState();

		[Token(Token = "0x20002CF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F1C8", Offset = "0x58F1C8")]
		internal delegate EVRApplicationError _PerformApplicationPrelaunchCheck(string pchAppKey);

		[Token(Token = "0x20002D0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F1DC", Offset = "0x58F1DC")]
		internal delegate IntPtr _GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state);

		[Token(Token = "0x20002D1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F1F0", Offset = "0x58F1F0")]
		internal delegate bool _IsQuitUserPromptRequested();

		[Token(Token = "0x20002D2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F204", Offset = "0x58F204")]
		internal delegate EVRApplicationError _LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory);

		[Token(Token = "0x20002D3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F218", Offset = "0x58F218")]
		internal delegate uint _GetCurrentSceneProcessId();

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _AddApplicationManifest AddApplicationManifest;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveApplicationManifest RemoveApplicationManifest;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _IsApplicationInstalled IsApplicationInstalled;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetApplicationCount GetApplicationCount;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetApplicationKeyByIndex GetApplicationKeyByIndex;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetApplicationKeyByProcessId GetApplicationKeyByProcessId;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _LaunchApplication LaunchApplication;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _LaunchTemplateApplication LaunchTemplateApplication;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _LaunchApplicationFromMimeType LaunchApplicationFromMimeType;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _LaunchDashboardOverlay LaunchDashboardOverlay;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _CancelApplicationLaunch CancelApplicationLaunch;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _IdentifyApplication IdentifyApplication;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetApplicationProcessId GetApplicationProcessId;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetApplicationPropertyString GetApplicationPropertyString;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetApplicationPropertyBool GetApplicationPropertyBool;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetApplicationPropertyUint64 GetApplicationPropertyUint64;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _SetApplicationAutoLaunch SetApplicationAutoLaunch;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetApplicationAutoLaunch GetApplicationAutoLaunch;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetApplicationLaunchArguments GetApplicationLaunchArguments;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _GetStartingApplication GetStartingApplication;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetTransitionState GetTransitionState;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _IsQuitUserPromptRequested IsQuitUserPromptRequested;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _LaunchInternalProcess LaunchInternalProcess;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetCurrentSceneProcessId GetCurrentSceneProcessId;
	}
	[Token(Token = "0x20000F7")]
	public struct IVRChaperone
	{
		[Token(Token = "0x20002D4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F22C", Offset = "0x58F22C")]
		internal delegate ChaperoneCalibrationState _GetCalibrationState();

		[Token(Token = "0x20002D5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F240", Offset = "0x58F240")]
		internal delegate bool _GetPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x20002D6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F254", Offset = "0x58F254")]
		internal delegate bool _GetPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x20002D7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F268", Offset = "0x58F268")]
		internal delegate void _ReloadInfo();

		[Token(Token = "0x20002D8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F27C", Offset = "0x58F27C")]
		internal delegate void _SetSceneColor(HmdColor_t color);

		[Token(Token = "0x20002D9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F290", Offset = "0x58F290")]
		internal delegate void _GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor);

		[Token(Token = "0x20002DA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F2A4", Offset = "0x58F2A4")]
		internal delegate bool _AreBoundsVisible();

		[Token(Token = "0x20002DB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F2B8", Offset = "0x58F2B8")]
		internal delegate void _ForceBoundsVisible(bool bForce);

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetCalibrationState GetCalibrationState;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetPlayAreaSize GetPlayAreaSize;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetPlayAreaRect GetPlayAreaRect;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _ReloadInfo ReloadInfo;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetSceneColor SetSceneColor;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetBoundsColor GetBoundsColor;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _AreBoundsVisible AreBoundsVisible;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _ForceBoundsVisible ForceBoundsVisible;
	}
	[Token(Token = "0x20000F8")]
	public struct IVRChaperoneSetup
	{
		[Token(Token = "0x20002DC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F2CC", Offset = "0x58F2CC")]
		internal delegate bool _CommitWorkingCopy(EChaperoneConfigFile configFile);

		[Token(Token = "0x20002DD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F2E0", Offset = "0x58F2E0")]
		internal delegate void _RevertWorkingCopy();

		[Token(Token = "0x20002DE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F2F4", Offset = "0x58F2F4")]
		internal delegate bool _GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ);

		[Token(Token = "0x20002DF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F308", Offset = "0x58F308")]
		internal delegate bool _GetWorkingPlayAreaRect(ref HmdQuad_t rect);

		[Token(Token = "0x20002E0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F31C", Offset = "0x58F31C")]
		internal delegate bool _GetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x20002E1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F330", Offset = "0x58F330")]
		internal delegate bool _GetLiveCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x20002E2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F344", Offset = "0x58F344")]
		internal delegate bool _GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x20002E3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F358", Offset = "0x58F358")]
		internal delegate bool _GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x20002E4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F36C", Offset = "0x58F36C")]
		internal delegate void _SetWorkingPlayAreaSize(float sizeX, float sizeZ);

		[Token(Token = "0x20002E5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F380", Offset = "0x58F380")]
		internal delegate void _SetWorkingCollisionBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x20002E6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F394", Offset = "0x58F394")]
		internal delegate void _SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x20002E7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F3A8", Offset = "0x58F3A8")]
		internal delegate void _SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose);

		[Token(Token = "0x20002E8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F3BC", Offset = "0x58F3BC")]
		internal delegate void _ReloadFromDisk(EChaperoneConfigFile configFile);

		[Token(Token = "0x20002E9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F3D0", Offset = "0x58F3D0")]
		internal delegate bool _GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose);

		[Token(Token = "0x20002EA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F3E4", Offset = "0x58F3E4")]
		internal delegate void _SetWorkingCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, uint unTagCount);

		[Token(Token = "0x20002EB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F3F8", Offset = "0x58F3F8")]
		internal delegate bool _GetLiveCollisionBoundsTagsInfo([In][Out] byte[] pTagsBuffer, ref uint punTagCount);

		[Token(Token = "0x20002EC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F40C", Offset = "0x58F40C")]
		internal delegate bool _SetWorkingPhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, uint unQuadsCount);

		[Token(Token = "0x20002ED")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F420", Offset = "0x58F420")]
		internal delegate bool _GetLivePhysicalBoundsInfo([In][Out] HmdQuad_t[] pQuadsBuffer, ref uint punQuadsCount);

		[Token(Token = "0x20002EE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F434", Offset = "0x58F434")]
		internal delegate bool _ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength);

		[Token(Token = "0x20002EF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F448", Offset = "0x58F448")]
		internal delegate bool _ImportFromBufferToWorking(string pBuffer, uint nImportFlags);

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CommitWorkingCopy CommitWorkingCopy;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RevertWorkingCopy RevertWorkingCopy;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetWorkingPlayAreaSize GetWorkingPlayAreaSize;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetWorkingPlayAreaRect GetWorkingPlayAreaRect;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetWorkingCollisionBoundsInfo GetWorkingCollisionBoundsInfo;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetLiveCollisionBoundsInfo GetLiveCollisionBoundsInfo;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetWorkingSeatedZeroPoseToRawTrackingPose GetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetWorkingStandingZeroPoseToRawTrackingPose GetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _SetWorkingPlayAreaSize SetWorkingPlayAreaSize;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _SetWorkingCollisionBoundsInfo SetWorkingCollisionBoundsInfo;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetWorkingSeatedZeroPoseToRawTrackingPose SetWorkingSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _SetWorkingStandingZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _ReloadFromDisk ReloadFromDisk;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetLiveSeatedZeroPoseToRawTrackingPose GetLiveSeatedZeroPoseToRawTrackingPose;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetWorkingCollisionBoundsTagsInfo SetWorkingCollisionBoundsTagsInfo;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetLiveCollisionBoundsTagsInfo GetLiveCollisionBoundsTagsInfo;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetWorkingPhysicalBoundsInfo SetWorkingPhysicalBoundsInfo;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetLivePhysicalBoundsInfo GetLivePhysicalBoundsInfo;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _ExportLiveToBuffer ExportLiveToBuffer;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _ImportFromBufferToWorking ImportFromBufferToWorking;
	}
	[Token(Token = "0x20000F9")]
	public struct IVRCompositor
	{
		[Token(Token = "0x20002F0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F45C", Offset = "0x58F45C")]
		internal delegate void _SetTrackingSpace(ETrackingUniverseOrigin eOrigin);

		[Token(Token = "0x20002F1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F470", Offset = "0x58F470")]
		internal delegate ETrackingUniverseOrigin _GetTrackingSpace();

		[Token(Token = "0x20002F2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F484", Offset = "0x58F484")]
		internal delegate EVRCompositorError _WaitGetPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x20002F3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F498", Offset = "0x58F498")]
		internal delegate EVRCompositorError _GetLastPoses([In][Out] TrackedDevicePose_t[] pRenderPoseArray, uint unRenderPoseArrayCount, [In][Out] TrackedDevicePose_t[] pGamePoseArray, uint unGamePoseArrayCount);

		[Token(Token = "0x20002F4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F4AC", Offset = "0x58F4AC")]
		internal delegate EVRCompositorError _GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose);

		[Token(Token = "0x20002F5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F4C0", Offset = "0x58F4C0")]
		internal delegate EVRCompositorError _Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags);

		[Token(Token = "0x20002F6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F4D4", Offset = "0x58F4D4")]
		internal delegate void _ClearLastSubmittedFrame();

		[Token(Token = "0x20002F7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F4E8", Offset = "0x58F4E8")]
		internal delegate void _PostPresentHandoff();

		[Token(Token = "0x20002F8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F4FC", Offset = "0x58F4FC")]
		internal delegate bool _GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo);

		[Token(Token = "0x20002F9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F510", Offset = "0x58F510")]
		internal delegate uint _GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames);

		[Token(Token = "0x20002FA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F524", Offset = "0x58F524")]
		internal delegate float _GetFrameTimeRemaining();

		[Token(Token = "0x20002FB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F538", Offset = "0x58F538")]
		internal delegate void _GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes);

		[Token(Token = "0x20002FC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F54C", Offset = "0x58F54C")]
		internal delegate void _FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground);

		[Token(Token = "0x20002FD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F560", Offset = "0x58F560")]
		internal delegate HmdColor_t _GetCurrentFadeColor(bool bBackground);

		[Token(Token = "0x20002FE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F574", Offset = "0x58F574")]
		internal delegate void _FadeGrid(float fSeconds, bool bFadeIn);

		[Token(Token = "0x20002FF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F588", Offset = "0x58F588")]
		internal delegate float _GetCurrentGridAlpha();

		[Token(Token = "0x2000300")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F59C", Offset = "0x58F59C")]
		internal delegate EVRCompositorError _SetSkyboxOverride([In][Out] Texture_t[] pTextures, uint unTextureCount);

		[Token(Token = "0x2000301")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F5B0", Offset = "0x58F5B0")]
		internal delegate void _ClearSkyboxOverride();

		[Token(Token = "0x2000302")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F5C4", Offset = "0x58F5C4")]
		internal delegate void _CompositorBringToFront();

		[Token(Token = "0x2000303")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F5D8", Offset = "0x58F5D8")]
		internal delegate void _CompositorGoToBack();

		[Token(Token = "0x2000304")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F5EC", Offset = "0x58F5EC")]
		internal delegate void _CompositorQuit();

		[Token(Token = "0x2000305")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F600", Offset = "0x58F600")]
		internal delegate bool _IsFullscreen();

		[Token(Token = "0x2000306")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F614", Offset = "0x58F614")]
		internal delegate uint _GetCurrentSceneFocusProcess();

		[Token(Token = "0x2000307")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F628", Offset = "0x58F628")]
		internal delegate uint _GetLastFrameRenderer();

		[Token(Token = "0x2000308")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F63C", Offset = "0x58F63C")]
		internal delegate bool _CanRenderScene();

		[Token(Token = "0x2000309")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F650", Offset = "0x58F650")]
		internal delegate void _ShowMirrorWindow();

		[Token(Token = "0x200030A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F664", Offset = "0x58F664")]
		internal delegate void _HideMirrorWindow();

		[Token(Token = "0x200030B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F678", Offset = "0x58F678")]
		internal delegate bool _IsMirrorWindowVisible();

		[Token(Token = "0x200030C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F68C", Offset = "0x58F68C")]
		internal delegate void _CompositorDumpImages();

		[Token(Token = "0x200030D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F6A0", Offset = "0x58F6A0")]
		internal delegate bool _ShouldAppRenderWithLowResources();

		[Token(Token = "0x200030E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F6B4", Offset = "0x58F6B4")]
		internal delegate void _ForceInterleavedReprojectionOn(bool bOverride);

		[Token(Token = "0x200030F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F6C8", Offset = "0x58F6C8")]
		internal delegate void _ForceReconnectProcess();

		[Token(Token = "0x2000310")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F6DC", Offset = "0x58F6DC")]
		internal delegate void _SuspendRendering(bool bSuspend);

		[Token(Token = "0x2000311")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F6F0", Offset = "0x58F6F0")]
		internal delegate EVRCompositorError _GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView);

		[Token(Token = "0x2000312")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F704", Offset = "0x58F704")]
		internal delegate void _ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView);

		[Token(Token = "0x2000313")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F718", Offset = "0x58F718")]
		internal delegate EVRCompositorError _GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle);

		[Token(Token = "0x2000314")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F72C", Offset = "0x58F72C")]
		internal delegate bool _ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000315")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F740", Offset = "0x58F740")]
		internal delegate void _LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000316")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F754", Offset = "0x58F754")]
		internal delegate void _UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle);

		[Token(Token = "0x2000317")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F768", Offset = "0x58F768")]
		internal delegate uint _GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x2000318")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F77C", Offset = "0x58F77C")]
		internal delegate uint _GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x2000319")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F790", Offset = "0x58F790")]
		internal delegate void _SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode);

		[Token(Token = "0x200031A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F7A4", Offset = "0x58F7A4")]
		internal delegate EVRCompositorError _SubmitExplicitTimingData();

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetTrackingSpace SetTrackingSpace;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetTrackingSpace GetTrackingSpace;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _WaitGetPoses WaitGetPoses;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetLastPoses GetLastPoses;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetLastPoseForTrackedDeviceIndex GetLastPoseForTrackedDeviceIndex;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _Submit Submit;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _ClearLastSubmittedFrame ClearLastSubmittedFrame;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _PostPresentHandoff PostPresentHandoff;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFrameTiming GetFrameTiming;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetFrameTimings GetFrameTimings;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetFrameTimeRemaining GetFrameTimeRemaining;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetCumulativeStats GetCumulativeStats;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _FadeToColor FadeToColor;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetCurrentFadeColor GetCurrentFadeColor;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _FadeGrid FadeGrid;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetCurrentGridAlpha GetCurrentGridAlpha;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetSkyboxOverride SetSkyboxOverride;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ClearSkyboxOverride ClearSkyboxOverride;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _CompositorBringToFront CompositorBringToFront;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _CompositorGoToBack CompositorGoToBack;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _CompositorQuit CompositorQuit;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _IsFullscreen IsFullscreen;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _GetCurrentSceneFocusProcess GetCurrentSceneFocusProcess;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetLastFrameRenderer GetLastFrameRenderer;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _CanRenderScene CanRenderScene;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _ShowMirrorWindow ShowMirrorWindow;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _HideMirrorWindow HideMirrorWindow;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _IsMirrorWindowVisible IsMirrorWindowVisible;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _CompositorDumpImages CompositorDumpImages;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _ShouldAppRenderWithLowResources ShouldAppRenderWithLowResources;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _ForceInterleavedReprojectionOn ForceInterleavedReprojectionOn;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _ForceReconnectProcess ForceReconnectProcess;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _SuspendRendering SuspendRendering;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _GetMirrorTextureD3D11 GetMirrorTextureD3D11;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _ReleaseMirrorTextureD3D11 ReleaseMirrorTextureD3D11;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _GetMirrorTextureGL GetMirrorTextureGL;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _ReleaseSharedGLTexture ReleaseSharedGLTexture;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _LockGLSharedTextureForAccess LockGLSharedTextureForAccess;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _UnlockGLSharedTextureForAccess UnlockGLSharedTextureForAccess;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetVulkanInstanceExtensionsRequired GetVulkanInstanceExtensionsRequired;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _GetVulkanDeviceExtensionsRequired GetVulkanDeviceExtensionsRequired;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _SetExplicitTimingMode SetExplicitTimingMode;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _SubmitExplicitTimingData SubmitExplicitTimingData;
	}
	[Token(Token = "0x20000FA")]
	public struct IVROverlay
	{
		[Token(Token = "0x200031B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F7B8", Offset = "0x58F7B8")]
		internal delegate EVROverlayError _FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle);

		[Token(Token = "0x200031C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F7CC", Offset = "0x58F7CC")]
		internal delegate EVROverlayError _CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle);

		[Token(Token = "0x200031D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F7E0", Offset = "0x58F7E0")]
		internal delegate EVROverlayError _DestroyOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x200031E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F7F4", Offset = "0x58F7F4")]
		internal delegate EVROverlayError _SetHighQualityOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x200031F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F808", Offset = "0x58F808")]
		internal delegate ulong _GetHighQualityOverlay();

		[Token(Token = "0x2000320")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F81C", Offset = "0x58F81C")]
		internal delegate uint _GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000321")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F830", Offset = "0x58F830")]
		internal delegate uint _GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError);

		[Token(Token = "0x2000322")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F844", Offset = "0x58F844")]
		internal delegate EVROverlayError _SetOverlayName(ulong ulOverlayHandle, string pchName);

		[Token(Token = "0x2000323")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F858", Offset = "0x58F858")]
		internal delegate EVROverlayError _GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight);

		[Token(Token = "0x2000324")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F86C", Offset = "0x58F86C")]
		internal delegate IntPtr _GetOverlayErrorNameFromEnum(EVROverlayError error);

		[Token(Token = "0x2000325")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F880", Offset = "0x58F880")]
		internal delegate EVROverlayError _SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID);

		[Token(Token = "0x2000326")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F894", Offset = "0x58F894")]
		internal delegate uint _GetOverlayRenderingPid(ulong ulOverlayHandle);

		[Token(Token = "0x2000327")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F8A8", Offset = "0x58F8A8")]
		internal delegate EVROverlayError _SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled);

		[Token(Token = "0x2000328")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F8BC", Offset = "0x58F8BC")]
		internal delegate EVROverlayError _GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled);

		[Token(Token = "0x2000329")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F8D0", Offset = "0x58F8D0")]
		internal delegate EVROverlayError _SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue);

		[Token(Token = "0x200032A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F8E4", Offset = "0x58F8E4")]
		internal delegate EVROverlayError _GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue);

		[Token(Token = "0x200032B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F8F8", Offset = "0x58F8F8")]
		internal delegate EVROverlayError _SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha);

		[Token(Token = "0x200032C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F90C", Offset = "0x58F90C")]
		internal delegate EVROverlayError _GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha);

		[Token(Token = "0x200032D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F920", Offset = "0x58F920")]
		internal delegate EVROverlayError _SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect);

		[Token(Token = "0x200032E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F934", Offset = "0x58F934")]
		internal delegate EVROverlayError _GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect);

		[Token(Token = "0x200032F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F948", Offset = "0x58F948")]
		internal delegate EVROverlayError _SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder);

		[Token(Token = "0x2000330")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F95C", Offset = "0x58F95C")]
		internal delegate EVROverlayError _GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder);

		[Token(Token = "0x2000331")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F970", Offset = "0x58F970")]
		internal delegate EVROverlayError _SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters);

		[Token(Token = "0x2000332")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F984", Offset = "0x58F984")]
		internal delegate EVROverlayError _GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters);

		[Token(Token = "0x2000333")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F998", Offset = "0x58F998")]
		internal delegate EVROverlayError _SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters);

		[Token(Token = "0x2000334")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F9AC", Offset = "0x58F9AC")]
		internal delegate EVROverlayError _GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters);

		[Token(Token = "0x2000335")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F9C0", Offset = "0x58F9C0")]
		internal delegate EVROverlayError _SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace);

		[Token(Token = "0x2000336")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F9D4", Offset = "0x58F9D4")]
		internal delegate EVROverlayError _GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace);

		[Token(Token = "0x2000337")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F9E8", Offset = "0x58F9E8")]
		internal delegate EVROverlayError _SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x2000338")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58F9FC", Offset = "0x58F9FC")]
		internal delegate EVROverlayError _GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds);

		[Token(Token = "0x2000339")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA10", Offset = "0x58FA10")]
		internal delegate uint _GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError);

		[Token(Token = "0x200033A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA24", Offset = "0x58FA24")]
		internal delegate EVROverlayError _SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor);

		[Token(Token = "0x200033B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA38", Offset = "0x58FA38")]
		internal delegate EVROverlayError _GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType);

		[Token(Token = "0x200033C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA4C", Offset = "0x58FA4C")]
		internal delegate EVROverlayError _SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x200033D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA60", Offset = "0x58FA60")]
		internal delegate EVROverlayError _GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform);

		[Token(Token = "0x200033E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA74", Offset = "0x58FA74")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x200033F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA88", Offset = "0x58FA88")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform);

		[Token(Token = "0x2000340")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FA9C", Offset = "0x58FA9C")]
		internal delegate EVROverlayError _SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName);

		[Token(Token = "0x2000341")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FAB0", Offset = "0x58FAB0")]
		internal delegate EVROverlayError _GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize);

		[Token(Token = "0x2000342")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FAC4", Offset = "0x58FAC4")]
		internal delegate EVROverlayError _GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x2000343")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FAD8", Offset = "0x58FAD8")]
		internal delegate EVROverlayError _SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform);

		[Token(Token = "0x2000344")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FAEC", Offset = "0x58FAEC")]
		internal delegate EVROverlayError _ShowOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000345")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB00", Offset = "0x58FB00")]
		internal delegate EVROverlayError _HideOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x2000346")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB14", Offset = "0x58FB14")]
		internal delegate bool _IsOverlayVisible(ulong ulOverlayHandle);

		[Token(Token = "0x2000347")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB28", Offset = "0x58FB28")]
		internal delegate EVROverlayError _GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform);

		[Token(Token = "0x2000348")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB3C", Offset = "0x58FB3C")]
		internal delegate bool _PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent);

		[Token(Token = "0x2000349")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB50", Offset = "0x58FB50")]
		internal delegate EVROverlayError _GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod);

		[Token(Token = "0x200034A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB64", Offset = "0x58FB64")]
		internal delegate EVROverlayError _SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod);

		[Token(Token = "0x200034B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB78", Offset = "0x58FB78")]
		internal delegate EVROverlayError _GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x200034C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FB8C", Offset = "0x58FB8C")]
		internal delegate EVROverlayError _SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale);

		[Token(Token = "0x200034D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FBA0", Offset = "0x58FBA0")]
		internal delegate bool _ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults);

		[Token(Token = "0x200034E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FBB4", Offset = "0x58FBB4")]
		internal delegate bool _IsHoverTargetOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x200034F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FBC8", Offset = "0x58FBC8")]
		internal delegate ulong _GetGamepadFocusOverlay();

		[Token(Token = "0x2000350")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FBDC", Offset = "0x58FBDC")]
		internal delegate EVROverlayError _SetGamepadFocusOverlay(ulong ulNewFocusOverlay);

		[Token(Token = "0x2000351")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FBF0", Offset = "0x58FBF0")]
		internal delegate EVROverlayError _SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo);

		[Token(Token = "0x2000352")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC04", Offset = "0x58FC04")]
		internal delegate EVROverlayError _MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom);

		[Token(Token = "0x2000353")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC18", Offset = "0x58FC18")]
		internal delegate EVROverlayError _SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius);

		[Token(Token = "0x2000354")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC2C", Offset = "0x58FC2C")]
		internal delegate EVROverlayError _GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius);

		[Token(Token = "0x2000355")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC40", Offset = "0x58FC40")]
		internal delegate EVROverlayError _SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture);

		[Token(Token = "0x2000356")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC54", Offset = "0x58FC54")]
		internal delegate EVROverlayError _ClearOverlayTexture(ulong ulOverlayHandle);

		[Token(Token = "0x2000357")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC68", Offset = "0x58FC68")]
		internal delegate EVROverlayError _SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth);

		[Token(Token = "0x2000358")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC7C", Offset = "0x58FC7C")]
		internal delegate EVROverlayError _SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath);

		[Token(Token = "0x2000359")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FC90", Offset = "0x58FC90")]
		internal delegate EVROverlayError _GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds);

		[Token(Token = "0x200035A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FCA4", Offset = "0x58FCA4")]
		internal delegate EVROverlayError _ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle);

		[Token(Token = "0x200035B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FCB8", Offset = "0x58FCB8")]
		internal delegate EVROverlayError _GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight);

		[Token(Token = "0x200035C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FCCC", Offset = "0x58FCCC")]
		internal delegate EVROverlayError _CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle);

		[Token(Token = "0x200035D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FCE0", Offset = "0x58FCE0")]
		internal delegate bool _IsDashboardVisible();

		[Token(Token = "0x200035E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FCF4", Offset = "0x58FCF4")]
		internal delegate bool _IsActiveDashboardOverlay(ulong ulOverlayHandle);

		[Token(Token = "0x200035F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD08", Offset = "0x58FD08")]
		internal delegate EVROverlayError _SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId);

		[Token(Token = "0x2000360")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD1C", Offset = "0x58FD1C")]
		internal delegate EVROverlayError _GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId);

		[Token(Token = "0x2000361")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD30", Offset = "0x58FD30")]
		internal delegate void _ShowDashboard(string pchOverlayToShow);

		[Token(Token = "0x2000362")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD44", Offset = "0x58FD44")]
		internal delegate uint _GetPrimaryDashboardDevice();

		[Token(Token = "0x2000363")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD58", Offset = "0x58FD58")]
		internal delegate EVROverlayError _ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x2000364")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD6C", Offset = "0x58FD6C")]
		internal delegate EVROverlayError _ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue);

		[Token(Token = "0x2000365")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD80", Offset = "0x58FD80")]
		internal delegate uint _GetKeyboardText(StringBuilder pchText, uint cchText);

		[Token(Token = "0x2000366")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FD94", Offset = "0x58FD94")]
		internal delegate void _HideKeyboard();

		[Token(Token = "0x2000367")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FDA8", Offset = "0x58FDA8")]
		internal delegate void _SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform);

		[Token(Token = "0x2000368")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FDBC", Offset = "0x58FDBC")]
		internal delegate void _SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect);

		[Token(Token = "0x2000369")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FDD0", Offset = "0x58FDD0")]
		internal delegate EVROverlayError _SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize);

		[Token(Token = "0x200036A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FDE4", Offset = "0x58FDE4")]
		internal delegate EVROverlayError _GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags);

		[Token(Token = "0x200036B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FDF8", Offset = "0x58FDF8")]
		internal delegate VRMessageOverlayResponse _ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text);

		[Token(Token = "0x200036C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE0C", Offset = "0x58FE0C")]
		internal delegate void _CloseMessageOverlay();

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _FindOverlay FindOverlay;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _CreateOverlay CreateOverlay;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _DestroyOverlay DestroyOverlay;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetHighQualityOverlay SetHighQualityOverlay;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _GetHighQualityOverlay GetHighQualityOverlay;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetOverlayKey GetOverlayKey;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetOverlayName GetOverlayName;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _SetOverlayName SetOverlayName;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetOverlayImageData GetOverlayImageData;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetOverlayErrorNameFromEnum GetOverlayErrorNameFromEnum;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _SetOverlayRenderingPid SetOverlayRenderingPid;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetOverlayRenderingPid GetOverlayRenderingPid;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _SetOverlayFlag SetOverlayFlag;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetOverlayFlag GetOverlayFlag;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _SetOverlayColor SetOverlayColor;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetOverlayColor GetOverlayColor;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _SetOverlayAlpha SetOverlayAlpha;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetOverlayAlpha GetOverlayAlpha;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _SetOverlayTexelAspect SetOverlayTexelAspect;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		internal _GetOverlayTexelAspect GetOverlayTexelAspect;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		internal _SetOverlaySortOrder SetOverlaySortOrder;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		internal _GetOverlaySortOrder GetOverlaySortOrder;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		internal _SetOverlayWidthInMeters SetOverlayWidthInMeters;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		internal _GetOverlayWidthInMeters GetOverlayWidthInMeters;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal _SetOverlayAutoCurveDistanceRangeInMeters SetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal _GetOverlayAutoCurveDistanceRangeInMeters GetOverlayAutoCurveDistanceRangeInMeters;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal _SetOverlayTextureColorSpace SetOverlayTextureColorSpace;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal _GetOverlayTextureColorSpace GetOverlayTextureColorSpace;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		internal _SetOverlayTextureBounds SetOverlayTextureBounds;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal _GetOverlayTextureBounds GetOverlayTextureBounds;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		internal _GetOverlayRenderModel GetOverlayRenderModel;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		internal _SetOverlayRenderModel SetOverlayRenderModel;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		internal _GetOverlayTransformType GetOverlayTransformType;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		internal _SetOverlayTransformAbsolute SetOverlayTransformAbsolute;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		internal _GetOverlayTransformAbsolute GetOverlayTransformAbsolute;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		internal _SetOverlayTransformTrackedDeviceRelative SetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		internal _GetOverlayTransformTrackedDeviceRelative GetOverlayTransformTrackedDeviceRelative;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		internal _SetOverlayTransformTrackedDeviceComponent SetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		internal _GetOverlayTransformTrackedDeviceComponent GetOverlayTransformTrackedDeviceComponent;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		internal _GetOverlayTransformOverlayRelative GetOverlayTransformOverlayRelative;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		internal _SetOverlayTransformOverlayRelative SetOverlayTransformOverlayRelative;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		internal _ShowOverlay ShowOverlay;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		internal _HideOverlay HideOverlay;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		internal _IsOverlayVisible IsOverlayVisible;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		internal _GetTransformForOverlayCoordinates GetTransformForOverlayCoordinates;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		internal _PollNextOverlayEvent PollNextOverlayEvent;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		internal _GetOverlayInputMethod GetOverlayInputMethod;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		internal _SetOverlayInputMethod SetOverlayInputMethod;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		internal _GetOverlayMouseScale GetOverlayMouseScale;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		internal _SetOverlayMouseScale SetOverlayMouseScale;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		internal _ComputeOverlayIntersection ComputeOverlayIntersection;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		internal _IsHoverTargetOverlay IsHoverTargetOverlay;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		internal _GetGamepadFocusOverlay GetGamepadFocusOverlay;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		internal _SetGamepadFocusOverlay SetGamepadFocusOverlay;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		internal _SetOverlayNeighbor SetOverlayNeighbor;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		internal _MoveGamepadFocusToNeighbor MoveGamepadFocusToNeighbor;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		internal _SetOverlayDualAnalogTransform SetOverlayDualAnalogTransform;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		internal _GetOverlayDualAnalogTransform GetOverlayDualAnalogTransform;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		internal _SetOverlayTexture SetOverlayTexture;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		internal _ClearOverlayTexture ClearOverlayTexture;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		internal _SetOverlayRaw SetOverlayRaw;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		internal _SetOverlayFromFile SetOverlayFromFile;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		internal _GetOverlayTexture GetOverlayTexture;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		internal _ReleaseNativeOverlayHandle ReleaseNativeOverlayHandle;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		internal _GetOverlayTextureSize GetOverlayTextureSize;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		internal _CreateDashboardOverlay CreateDashboardOverlay;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		internal _IsDashboardVisible IsDashboardVisible;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		internal _IsActiveDashboardOverlay IsActiveDashboardOverlay;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		internal _SetDashboardOverlaySceneProcess SetDashboardOverlaySceneProcess;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		internal _GetDashboardOverlaySceneProcess GetDashboardOverlaySceneProcess;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		internal _ShowDashboard ShowDashboard;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		internal _GetPrimaryDashboardDevice GetPrimaryDashboardDevice;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		internal _ShowKeyboard ShowKeyboard;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		internal _ShowKeyboardForOverlay ShowKeyboardForOverlay;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		internal _GetKeyboardText GetKeyboardText;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		internal _HideKeyboard HideKeyboard;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		internal _SetKeyboardTransformAbsolute SetKeyboardTransformAbsolute;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		internal _SetKeyboardPositionForOverlay SetKeyboardPositionForOverlay;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		internal _SetOverlayIntersectionMask SetOverlayIntersectionMask;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		internal _GetOverlayFlags GetOverlayFlags;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		internal _ShowMessageOverlay ShowMessageOverlay;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		internal _CloseMessageOverlay CloseMessageOverlay;
	}
	[Token(Token = "0x20000FB")]
	public struct IVRRenderModels
	{
		[Token(Token = "0x200036D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE20", Offset = "0x58FE20")]
		internal delegate EVRRenderModelError _LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel);

		[Token(Token = "0x200036E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE34", Offset = "0x58FE34")]
		internal delegate void _FreeRenderModel(IntPtr pRenderModel);

		[Token(Token = "0x200036F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE48", Offset = "0x58FE48")]
		internal delegate EVRRenderModelError _LoadTexture_Async(int textureId, ref IntPtr ppTexture);

		[Token(Token = "0x2000370")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE5C", Offset = "0x58FE5C")]
		internal delegate void _FreeTexture(IntPtr pTexture);

		[Token(Token = "0x2000371")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE70", Offset = "0x58FE70")]
		internal delegate EVRRenderModelError _LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D);

		[Token(Token = "0x2000372")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE84", Offset = "0x58FE84")]
		internal delegate EVRRenderModelError _LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture);

		[Token(Token = "0x2000373")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FE98", Offset = "0x58FE98")]
		internal delegate void _FreeTextureD3D11(IntPtr pD3D11Texture2D);

		[Token(Token = "0x2000374")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FEAC", Offset = "0x58FEAC")]
		internal delegate uint _GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen);

		[Token(Token = "0x2000375")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FEC0", Offset = "0x58FEC0")]
		internal delegate uint _GetRenderModelCount();

		[Token(Token = "0x2000376")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FED4", Offset = "0x58FED4")]
		internal delegate uint _GetComponentCount(string pchRenderModelName);

		[Token(Token = "0x2000377")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FEE8", Offset = "0x58FEE8")]
		internal delegate uint _GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen);

		[Token(Token = "0x2000378")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FEFC", Offset = "0x58FEFC")]
		internal delegate ulong _GetComponentButtonMask(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x2000379")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF10", Offset = "0x58FF10")]
		internal delegate uint _GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen);

		[Token(Token = "0x200037A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF24", Offset = "0x58FF24")]
		internal delegate bool _GetComponentStateForDevicePath(string pchRenderModelName, string pchComponentName, ulong devicePath, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[Token(Token = "0x200037B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF38", Offset = "0x58FF38")]
		internal delegate bool _GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[Token(Token = "0x200037C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF4C", Offset = "0x58FF4C")]
		internal delegate bool _RenderModelHasComponent(string pchRenderModelName, string pchComponentName);

		[Token(Token = "0x200037D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF60", Offset = "0x58FF60")]
		internal delegate uint _GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError);

		[Token(Token = "0x200037E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF74", Offset = "0x58FF74")]
		internal delegate uint _GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError);

		[Token(Token = "0x200037F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF88", Offset = "0x58FF88")]
		internal delegate IntPtr _GetRenderModelErrorNameFromEnum(EVRRenderModelError error);

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadRenderModel_Async LoadRenderModel_Async;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _FreeRenderModel FreeRenderModel;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _LoadTexture_Async LoadTexture_Async;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _FreeTexture FreeTexture;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _LoadTextureD3D11_Async LoadTextureD3D11_Async;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _LoadIntoTextureD3D11_Async LoadIntoTextureD3D11_Async;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _FreeTextureD3D11 FreeTextureD3D11;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetRenderModelName GetRenderModelName;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetRenderModelCount GetRenderModelCount;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetComponentCount GetComponentCount;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetComponentName GetComponentName;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _GetComponentButtonMask GetComponentButtonMask;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _GetComponentRenderModelName GetComponentRenderModelName;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetComponentStateForDevicePath GetComponentStateForDevicePath;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetComponentState GetComponentState;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _RenderModelHasComponent RenderModelHasComponent;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _GetRenderModelThumbnailURL GetRenderModelThumbnailURL;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _GetRenderModelOriginalPath GetRenderModelOriginalPath;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		internal _GetRenderModelErrorNameFromEnum GetRenderModelErrorNameFromEnum;
	}
	[Token(Token = "0x20000FC")]
	public struct IVRNotifications
	{
		[Token(Token = "0x2000380")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FF9C", Offset = "0x58FF9C")]
		internal delegate EVRNotificationError _CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId);

		[Token(Token = "0x2000381")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FFB0", Offset = "0x58FFB0")]
		internal delegate EVRNotificationError _RemoveNotification(uint notificationId);

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateNotification CreateNotification;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _RemoveNotification RemoveNotification;
	}
	[Token(Token = "0x20000FD")]
	public struct IVRSettings
	{
		[Token(Token = "0x2000382")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FFC4", Offset = "0x58FFC4")]
		internal delegate IntPtr _GetSettingsErrorNameFromEnum(EVRSettingsError eError);

		[Token(Token = "0x2000383")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FFD8", Offset = "0x58FFD8")]
		internal delegate bool _Sync(bool bForce, ref EVRSettingsError peError);

		[Token(Token = "0x2000384")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x58FFEC", Offset = "0x58FFEC")]
		internal delegate void _SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError);

		[Token(Token = "0x2000385")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590000", Offset = "0x590000")]
		internal delegate void _SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError);

		[Token(Token = "0x2000386")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590014", Offset = "0x590014")]
		internal delegate void _SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError);

		[Token(Token = "0x2000387")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590028", Offset = "0x590028")]
		internal delegate void _SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError);

		[Token(Token = "0x2000388")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59003C", Offset = "0x59003C")]
		internal delegate bool _GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x2000389")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590050", Offset = "0x590050")]
		internal delegate int _GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x200038A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590064", Offset = "0x590064")]
		internal delegate float _GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x200038B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590078", Offset = "0x590078")]
		internal delegate void _GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError);

		[Token(Token = "0x200038C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59008C", Offset = "0x59008C")]
		internal delegate void _RemoveSection(string pchSection, ref EVRSettingsError peError);

		[Token(Token = "0x200038D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5900A0", Offset = "0x5900A0")]
		internal delegate void _RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError);

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetSettingsErrorNameFromEnum GetSettingsErrorNameFromEnum;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _Sync Sync;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _SetBool SetBool;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _SetInt32 SetInt32;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _SetFloat SetFloat;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _SetString SetString;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetBool GetBool;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetInt32 GetInt32;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetFloat GetFloat;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetString GetString;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _RemoveSection RemoveSection;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _RemoveKeyInSection RemoveKeyInSection;
	}
	[Token(Token = "0x20000FE")]
	public struct IVRScreenshots
	{
		[Token(Token = "0x200038E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5900B4", Offset = "0x5900B4")]
		internal delegate EVRScreenshotError _RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x200038F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5900C8", Offset = "0x5900C8")]
		internal delegate EVRScreenshotError _HookScreenshot([In][Out] EVRScreenshotType[] pSupportedTypes, int numTypes);

		[Token(Token = "0x2000390")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5900DC", Offset = "0x5900DC")]
		internal delegate EVRScreenshotType _GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError);

		[Token(Token = "0x2000391")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5900F0", Offset = "0x5900F0")]
		internal delegate uint _GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError);

		[Token(Token = "0x2000392")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590104", Offset = "0x590104")]
		internal delegate EVRScreenshotError _UpdateScreenshotProgress(uint screenshotHandle, float flProgress);

		[Token(Token = "0x2000393")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590118", Offset = "0x590118")]
		internal delegate EVRScreenshotError _TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename);

		[Token(Token = "0x2000394")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59012C", Offset = "0x59012C")]
		internal delegate EVRScreenshotError _SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename);

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _RequestScreenshot RequestScreenshot;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _HookScreenshot HookScreenshot;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetScreenshotPropertyType GetScreenshotPropertyType;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetScreenshotPropertyFilename GetScreenshotPropertyFilename;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _UpdateScreenshotProgress UpdateScreenshotProgress;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _TakeStereoScreenshot TakeStereoScreenshot;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _SubmitScreenshot SubmitScreenshot;
	}
	[Token(Token = "0x20000FF")]
	public struct IVRResources
	{
		[Token(Token = "0x2000395")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590140", Offset = "0x590140")]
		internal delegate uint _LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen);

		[Token(Token = "0x2000396")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590154", Offset = "0x590154")]
		internal delegate uint _GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen);

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _LoadSharedResource LoadSharedResource;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetResourceFullPath GetResourceFullPath;
	}
	[Token(Token = "0x2000100")]
	public struct IVRDriverManager
	{
		[Token(Token = "0x2000397")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590168", Offset = "0x590168")]
		internal delegate uint _GetDriverCount();

		[Token(Token = "0x2000398")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59017C", Offset = "0x59017C")]
		internal delegate uint _GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize);

		[Token(Token = "0x2000399")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590190", Offset = "0x590190")]
		internal delegate ulong _GetDriverHandle(string pchDriverName);

		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _GetDriverCount GetDriverCount;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetDriverName GetDriverName;

		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetDriverHandle GetDriverHandle;
	}
	[Token(Token = "0x2000101")]
	public struct IVRInput
	{
		[Token(Token = "0x200039A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5901A4", Offset = "0x5901A4")]
		internal delegate EVRInputError _SetActionManifestPath(string pchActionManifestPath);

		[Token(Token = "0x200039B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5901B8", Offset = "0x5901B8")]
		internal delegate EVRInputError _GetActionSetHandle(string pchActionSetName, ref ulong pHandle);

		[Token(Token = "0x200039C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5901CC", Offset = "0x5901CC")]
		internal delegate EVRInputError _GetActionHandle(string pchActionName, ref ulong pHandle);

		[Token(Token = "0x200039D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5901E0", Offset = "0x5901E0")]
		internal delegate EVRInputError _GetInputSourceHandle(string pchInputSourcePath, ref ulong pHandle);

		[Token(Token = "0x200039E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5901F4", Offset = "0x5901F4")]
		internal delegate EVRInputError _UpdateActionState([In][Out] VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount);

		[Token(Token = "0x200039F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590208", Offset = "0x590208")]
		internal delegate EVRInputError _GetDigitalActionData(ulong action, ref InputDigitalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20003A0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59021C", Offset = "0x59021C")]
		internal delegate EVRInputError _GetAnalogActionData(ulong action, ref InputAnalogActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20003A1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590230", Offset = "0x590230")]
		internal delegate EVRInputError _GetPoseActionData(ulong action, ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ref InputPoseActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20003A2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590244", Offset = "0x590244")]
		internal delegate EVRInputError _GetSkeletalActionData(ulong action, ref InputSkeletalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20003A3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590258", Offset = "0x590258")]
		internal delegate EVRInputError _GetSkeletalBoneData(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, [In][Out] VRBoneTransform_t[] pTransformArray, uint unTransformArrayCount, ulong ulRestrictToDevice);

		[Token(Token = "0x20003A4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59026C", Offset = "0x59026C")]
		internal delegate EVRInputError _GetSkeletalBoneDataCompressed(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, IntPtr pvCompressedData, uint unCompressedSize, ref uint punRequiredCompressedSize, ulong ulRestrictToDevice);

		[Token(Token = "0x20003A5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590280", Offset = "0x590280")]
		internal delegate EVRInputError _DecompressSkeletalBoneData(IntPtr pvCompressedBuffer, uint unCompressedBufferSize, ref EVRSkeletalTransformSpace peTransformSpace, [In][Out] VRBoneTransform_t[] pTransformArray, uint unTransformArrayCount);

		[Token(Token = "0x20003A6")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590294", Offset = "0x590294")]
		internal delegate EVRInputError _TriggerHapticVibrationAction(ulong action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, ulong ulRestrictToDevice);

		[Token(Token = "0x20003A7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5902A8", Offset = "0x5902A8")]
		internal delegate EVRInputError _GetActionOrigins(ulong actionSetHandle, ulong digitalActionHandle, [In][Out] ulong[] originsOut, uint originOutCount);

		[Token(Token = "0x20003A8")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5902BC", Offset = "0x5902BC")]
		internal delegate EVRInputError _GetOriginLocalizedName(ulong origin, StringBuilder pchNameArray, uint unNameArraySize);

		[Token(Token = "0x20003A9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5902D0", Offset = "0x5902D0")]
		internal delegate EVRInputError _GetOriginTrackedDeviceInfo(ulong origin, ref InputOriginInfo_t pOriginInfo, uint unOriginInfoSize);

		[Token(Token = "0x20003AA")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5902E4", Offset = "0x5902E4")]
		internal delegate EVRInputError _ShowActionOrigins(ulong actionSetHandle, ulong ulActionHandle);

		[Token(Token = "0x20003AB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5902F8", Offset = "0x5902F8")]
		internal delegate EVRInputError _ShowBindingsForActionSet([In][Out] VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, ulong originToHighlight);

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _SetActionManifestPath SetActionManifestPath;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _GetActionSetHandle GetActionSetHandle;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetActionHandle GetActionHandle;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetInputSourceHandle GetInputSourceHandle;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _UpdateActionState UpdateActionState;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal _GetDigitalActionData GetDigitalActionData;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal _GetAnalogActionData GetAnalogActionData;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal _GetPoseActionData GetPoseActionData;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal _GetSkeletalActionData GetSkeletalActionData;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal _GetSkeletalBoneData GetSkeletalBoneData;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal _GetSkeletalBoneDataCompressed GetSkeletalBoneDataCompressed;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal _DecompressSkeletalBoneData DecompressSkeletalBoneData;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal _TriggerHapticVibrationAction TriggerHapticVibrationAction;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		internal _GetActionOrigins GetActionOrigins;

		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal _GetOriginLocalizedName GetOriginLocalizedName;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal _GetOriginTrackedDeviceInfo GetOriginTrackedDeviceInfo;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		internal _ShowActionOrigins ShowActionOrigins;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		internal _ShowBindingsForActionSet ShowBindingsForActionSet;
	}
	[Token(Token = "0x2000102")]
	public struct IVRIOBuffer
	{
		[Token(Token = "0x20003AC")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59030C", Offset = "0x59030C")]
		internal delegate EIOBufferError _Open(string pchPath, EIOBufferMode mode, uint unElementSize, uint unElements, ref ulong pulBuffer);

		[Token(Token = "0x20003AD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590320", Offset = "0x590320")]
		internal delegate EIOBufferError _Close(ulong ulBuffer);

		[Token(Token = "0x20003AE")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590334", Offset = "0x590334")]
		internal delegate EIOBufferError _Read(ulong ulBuffer, IntPtr pDst, uint unBytes, ref uint punRead);

		[Token(Token = "0x20003AF")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590348", Offset = "0x590348")]
		internal delegate EIOBufferError _Write(ulong ulBuffer, IntPtr pSrc, uint unBytes);

		[Token(Token = "0x20003B0")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x59035C", Offset = "0x59035C")]
		internal delegate ulong _PropertyContainer(ulong ulBuffer);

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _Open Open;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _Close Close;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _Read Read;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _Write Write;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal _PropertyContainer PropertyContainer;
	}
	[Token(Token = "0x2000103")]
	public struct IVRSpatialAnchors
	{
		[Token(Token = "0x20003B1")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590370", Offset = "0x590370")]
		internal delegate EVRSpatialAnchorError _CreateSpatialAnchorFromDescriptor(string pchDescriptor, ref uint pHandleOut);

		[Token(Token = "0x20003B2")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590384", Offset = "0x590384")]
		internal delegate EVRSpatialAnchorError _CreateSpatialAnchorFromPose(uint unDeviceIndex, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPose, ref uint pHandleOut);

		[Token(Token = "0x20003B3")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590398", Offset = "0x590398")]
		internal delegate EVRSpatialAnchorError _GetSpatialAnchorPose(uint unHandle, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPoseOut);

		[Token(Token = "0x20003B4")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5903AC", Offset = "0x5903AC")]
		internal delegate EVRSpatialAnchorError _GetSpatialAnchorDescriptor(uint unHandle, StringBuilder pchDescriptorOut, ref uint punDescriptorBufferLenInOut);

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal _CreateSpatialAnchorFromDescriptor CreateSpatialAnchorFromDescriptor;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal _CreateSpatialAnchorFromPose CreateSpatialAnchorFromPose;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal _GetSpatialAnchorPose GetSpatialAnchorPose;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal _GetSpatialAnchorDescriptor GetSpatialAnchorDescriptor;
	}
	[Token(Token = "0x2000104")]
	public class CVRSystem
	{
		[Token(Token = "0x20003B5")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5903C0", Offset = "0x5903C0")]
		internal delegate bool _PollNextEventPacked(ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x20003B6")]
		private struct PollNextEventUnion
		{
			[Token(Token = "0x40011F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._PollNextEvent pPollNextEvent;

			[Token(Token = "0x40011F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextEventPacked pPollNextEventPacked;
		}

		[Token(Token = "0x20003B7")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5903D4", Offset = "0x5903D4")]
		internal delegate bool _GetControllerStatePacked(uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize);

		[StructLayout(2)]
		[Token(Token = "0x20003B8")]
		private struct GetControllerStateUnion
		{
			[Token(Token = "0x40011F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerState pGetControllerState;

			[Token(Token = "0x40011F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStatePacked pGetControllerStatePacked;
		}

		[Token(Token = "0x20003B9")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5903E8", Offset = "0x5903E8")]
		internal delegate bool _GetControllerStateWithPosePacked(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t_Packed pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose);

		[StructLayout(2)]
		[Token(Token = "0x20003BA")]
		private struct GetControllerStateWithPoseUnion
		{
			[Token(Token = "0x40011F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRSystem._GetControllerStateWithPose pGetControllerStateWithPose;

			[Token(Token = "0x40011F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetControllerStateWithPosePacked pGetControllerStateWithPosePacked;
		}

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSystem FnTable;

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x703C0C", Offset = "0x703C0C", VA = "0x703C0C")]
		internal CVRSystem(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x703D14", Offset = "0x703D14", VA = "0x703D14")]
		public void GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x703D38", Offset = "0x703D38", VA = "0x703D38")]
		public HmdMatrix44_t GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ)
		{
			return default(HmdMatrix44_t);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x703D54", Offset = "0x703D54", VA = "0x703D54")]
		public void GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom)
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x703D80", Offset = "0x703D80", VA = "0x703D80")]
		public bool ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x703D9C", Offset = "0x703D9C", VA = "0x703D9C")]
		public HmdMatrix34_t GetEyeToHeadTransform(EVREye eEye)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x703DB8", Offset = "0x703DB8", VA = "0x703DB8")]
		public bool GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x703DDC", Offset = "0x703DDC", VA = "0x703DDC")]
		public int GetD3D9AdapterIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x703DF8", Offset = "0x703DF8", VA = "0x703DF8")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex)
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x703E18", Offset = "0x703E18", VA = "0x703E18")]
		public void GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x703E38", Offset = "0x703E38", VA = "0x703E38")]
		public bool IsDisplayOnDesktop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x703E54", Offset = "0x703E54", VA = "0x703E54")]
		public bool SetDisplayVisibility(bool bIsVisibleOnDesktop)
		{
			return default(bool);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x703E74", Offset = "0x703E74", VA = "0x703E74")]
		public void GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t[] pTrackedDevicePoseArray)
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x703E9C", Offset = "0x703E9C", VA = "0x703E9C")]
		public void ResetSeatedZeroPose()
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x703EB8", Offset = "0x703EB8", VA = "0x703EB8")]
		public HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x703ED4", Offset = "0x703ED4", VA = "0x703ED4")]
		public HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose()
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x703EF0", Offset = "0x703EF0", VA = "0x703EF0")]
		public uint GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, uint[] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex)
		{
			return default(uint);
		}

		[Token(Token = "0x600050B")]
		[Address(RVA = "0x703F1C", Offset = "0x703F1C", VA = "0x703F1C")]
		public EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId)
		{
			return default(EDeviceActivityLevel);
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x703F38", Offset = "0x703F38", VA = "0x703F38")]
		public void ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x703F54", Offset = "0x703F54", VA = "0x703F54")]
		public uint GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType)
		{
			return default(uint);
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x703F70", Offset = "0x703F70", VA = "0x703F70")]
		public ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex)
		{
			return default(ETrackedControllerRole);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x703F8C", Offset = "0x703F8C", VA = "0x703F8C")]
		public ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex)
		{
			return default(ETrackedDeviceClass);
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x703FA8", Offset = "0x703FA8", VA = "0x703FA8")]
		public bool IsTrackedDeviceConnected(uint unDeviceIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x703FC4", Offset = "0x703FC4", VA = "0x703FC4")]
		public bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x703FE0", Offset = "0x703FE0", VA = "0x703FE0")]
		public float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(float);
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x703FFC", Offset = "0x703FFC", VA = "0x703FFC")]
		public int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(int);
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x704018", Offset = "0x704018", VA = "0x704018")]
		public ulong GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x704034", Offset = "0x704034", VA = "0x704034")]
		public HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError)
		{
			return default(HmdMatrix34_t);
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x704050", Offset = "0x704050", VA = "0x704050")]
		public uint GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x70406C", Offset = "0x70406C", VA = "0x70406C")]
		public uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x704088", Offset = "0x704088", VA = "0x704088")]
		public string GetPropErrorNameFromEnum(ETrackedPropertyError error)
		{
			return null;
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x70411C", Offset = "0x70411C", VA = "0x70411C")]
		public bool PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0x704288", Offset = "0x704288", VA = "0x704288")]
		public bool PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x7042A4", Offset = "0x7042A4", VA = "0x7042A4")]
		public string GetEventTypeNameFromEnum(EVREventType eType)
		{
			return null;
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x704338", Offset = "0x704338", VA = "0x704338")]
		public HiddenAreaMesh_t GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type)
		{
			return default(HiddenAreaMesh_t);
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x704354", Offset = "0x704354", VA = "0x704354")]
		public bool GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x704788", Offset = "0x704788", VA = "0x704788")]
		public bool GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose)
		{
			return default(bool);
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x704C34", Offset = "0x704C34", VA = "0x704C34")]
		public void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0x704C50", Offset = "0x704C50", VA = "0x704C50")]
		public string GetButtonIdNameFromEnum(EVRButtonId eButtonId)
		{
			return null;
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0x704CE4", Offset = "0x704CE4", VA = "0x704CE4")]
		public string GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType)
		{
			return null;
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0x704D78", Offset = "0x704D78", VA = "0x704D78")]
		public bool IsInputAvailable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x704D94", Offset = "0x704D94", VA = "0x704D94")]
		public bool IsSteamVRDrawingControllers()
		{
			return default(bool);
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x704DB0", Offset = "0x704DB0", VA = "0x704DB0")]
		public bool ShouldApplicationPause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x704DCC", Offset = "0x704DCC", VA = "0x704DCC")]
		public bool ShouldApplicationReduceRenderingWork()
		{
			return default(bool);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x704DE8", Offset = "0x704DE8", VA = "0x704DE8")]
		public uint DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x704E04", Offset = "0x704E04", VA = "0x704E04")]
		public EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex)
		{
			return default(EVRFirmwareError);
		}

		[Token(Token = "0x6000528")]
		[Address(RVA = "0x704E20", Offset = "0x704E20", VA = "0x704E20")]
		public void AcknowledgeQuit_Exiting()
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0x704E3C", Offset = "0x704E3C", VA = "0x704E3C")]
		public void AcknowledgeQuit_UserPrompt()
		{
		}
	}
	[Token(Token = "0x2000105")]
	public class CVRExtendedDisplay
	{
		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRExtendedDisplay FnTable;

		[Token(Token = "0x600052A")]
		[Address(RVA = "0x70127C", Offset = "0x70127C", VA = "0x70127C")]
		internal CVRExtendedDisplay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0x701384", Offset = "0x701384", VA = "0x701384")]
		public void GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x7013B0", Offset = "0x7013B0", VA = "0x7013B0")]
		public void GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight)
		{
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x7013DC", Offset = "0x7013DC", VA = "0x7013DC")]
		public void GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex)
		{
		}
	}
	[Token(Token = "0x2000106")]
	public class CVRTrackedCamera
	{
		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRTrackedCamera FnTable;

		[Token(Token = "0x600052E")]
		[Address(RVA = "0xC3EF00", Offset = "0xC3EF00", VA = "0xC3EF00")]
		internal CVRTrackedCamera(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0xC3F008", Offset = "0xC3F008", VA = "0xC3F008")]
		public string GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError)
		{
			return null;
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xC3F09C", Offset = "0xC3F09C", VA = "0xC3F09C")]
		public EVRTrackedCameraError HasCamera(uint nDeviceIndex, ref bool pHasCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xC3F0BC", Offset = "0xC3F0BC", VA = "0xC3F0BC")]
		public EVRTrackedCameraError GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xC3F0E4", Offset = "0xC3F0E4", VA = "0xC3F0E4")]
		public EVRTrackedCameraError GetCameraIntrinsics(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xC3F100", Offset = "0xC3F100", VA = "0xC3F100")]
		public EVRTrackedCameraError GetCameraProjection(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xC3F11C", Offset = "0xC3F11C", VA = "0xC3F11C")]
		public EVRTrackedCameraError AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xC3F13C", Offset = "0xC3F13C", VA = "0xC3F13C")]
		public EVRTrackedCameraError ReleaseVideoStreamingService(ulong hTrackedCamera)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xC3F158", Offset = "0xC3F158", VA = "0xC3F158")]
		public EVRTrackedCameraError GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xC3F174", Offset = "0xC3F174", VA = "0xC3F174")]
		public EVRTrackedCameraError GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xC3F198", Offset = "0xC3F198", VA = "0xC3F198")]
		public EVRTrackedCameraError GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xC3F1B4", Offset = "0xC3F1B4", VA = "0xC3F1B4")]
		public EVRTrackedCameraError GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize)
		{
			return default(EVRTrackedCameraError);
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xC3F1D4", Offset = "0xC3F1D4", VA = "0xC3F1D4")]
		public EVRTrackedCameraError ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId)
		{
			return default(EVRTrackedCameraError);
		}
	}
	[Token(Token = "0x2000107")]
	public class CVRApplications
	{
		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRApplications FnTable;

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x6FFE34", Offset = "0x6FFE34", VA = "0x6FFE34")]
		internal CVRApplications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600053C")]
		[Address(RVA = "0x6FFF3C", Offset = "0x6FFF3C", VA = "0x6FFF3C")]
		public EVRApplicationError AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0x6FFF5C", Offset = "0x6FFF5C", VA = "0x6FFF5C")]
		public EVRApplicationError RemoveApplicationManifest(string pchApplicationManifestFullPath)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x6FFF78", Offset = "0x6FFF78", VA = "0x6FFF78")]
		public bool IsApplicationInstalled(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x6FFF94", Offset = "0x6FFF94", VA = "0x6FFF94")]
		public uint GetApplicationCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x6FFFB0", Offset = "0x6FFFB0", VA = "0x6FFFB0")]
		public EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x6FFFCC", Offset = "0x6FFFCC", VA = "0x6FFFCC")]
		public EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x6FFFE8", Offset = "0x6FFFE8", VA = "0x6FFFE8")]
		public EVRApplicationError LaunchApplication(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x700004", Offset = "0x700004", VA = "0x700004")]
		public EVRApplicationError LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, AppOverrideKeys_t[] pKeys)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0x70002C", Offset = "0x70002C", VA = "0x70002C")]
		public EVRApplicationError LaunchApplicationFromMimeType(string pchMimeType, string pchArgs)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x700048", Offset = "0x700048", VA = "0x700048")]
		public EVRApplicationError LaunchDashboardOverlay(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x700064", Offset = "0x700064", VA = "0x700064")]
		public bool CancelApplicationLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x700080", Offset = "0x700080", VA = "0x700080")]
		public EVRApplicationError IdentifyApplication(uint unProcessId, string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x70009C", Offset = "0x70009C", VA = "0x70009C")]
		public uint GetApplicationProcessId(string pchAppKey)
		{
			return default(uint);
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x7000B8", Offset = "0x7000B8", VA = "0x7000B8")]
		public string GetApplicationsErrorNameFromEnum(EVRApplicationError error)
		{
			return null;
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x70014C", Offset = "0x70014C", VA = "0x70014C")]
		public uint GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x700168", Offset = "0x700168", VA = "0x700168")]
		public bool GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x700184", Offset = "0x700184", VA = "0x700184")]
		public ulong GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError)
		{
			return default(ulong);
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x7001A0", Offset = "0x7001A0", VA = "0x7001A0")]
		public EVRApplicationError SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x7001C0", Offset = "0x7001C0", VA = "0x7001C0")]
		public bool GetApplicationAutoLaunch(string pchAppKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x7001DC", Offset = "0x7001DC", VA = "0x7001DC")]
		public EVRApplicationError SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x7001F8", Offset = "0x7001F8", VA = "0x7001F8")]
		public bool GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x700214", Offset = "0x700214", VA = "0x700214")]
		public bool GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x700230", Offset = "0x700230", VA = "0x700230")]
		public uint GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer)
		{
			return default(uint);
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x70024C", Offset = "0x70024C", VA = "0x70024C")]
		public uint GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs)
		{
			return default(uint);
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x700268", Offset = "0x700268", VA = "0x700268")]
		public EVRApplicationError GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x700284", Offset = "0x700284", VA = "0x700284")]
		public EVRApplicationTransitionState GetTransitionState()
		{
			return default(EVRApplicationTransitionState);
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x7002A0", Offset = "0x7002A0", VA = "0x7002A0")]
		public EVRApplicationError PerformApplicationPrelaunchCheck(string pchAppKey)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x7002BC", Offset = "0x7002BC", VA = "0x7002BC")]
		public string GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state)
		{
			return null;
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x700350", Offset = "0x700350", VA = "0x700350")]
		public bool IsQuitUserPromptRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x70036C", Offset = "0x70036C", VA = "0x70036C")]
		public EVRApplicationError LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory)
		{
			return default(EVRApplicationError);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x700388", Offset = "0x700388", VA = "0x700388")]
		public uint GetCurrentSceneProcessId()
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000108")]
	public class CVRChaperone
	{
		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperone FnTable;

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x7003A4", Offset = "0x7003A4", VA = "0x7003A4")]
		internal CVRChaperone(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x7004AC", Offset = "0x7004AC", VA = "0x7004AC")]
		public ChaperoneCalibrationState GetCalibrationState()
		{
			return default(ChaperoneCalibrationState);
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x7004C8", Offset = "0x7004C8", VA = "0x7004C8")]
		public bool GetPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x7004EC", Offset = "0x7004EC", VA = "0x7004EC")]
		public bool GetPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x700508", Offset = "0x700508", VA = "0x700508")]
		public void ReloadInfo()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x700524", Offset = "0x700524", VA = "0x700524")]
		public void SetSceneColor(HmdColor_t color)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x700540", Offset = "0x700540", VA = "0x700540")]
		public void GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x70055C", Offset = "0x70055C", VA = "0x70055C")]
		public bool AreBoundsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x700578", Offset = "0x700578", VA = "0x700578")]
		public void ForceBoundsVisible(bool bForce)
		{
		}
	}
	[Token(Token = "0x2000109")]
	public class CVRChaperoneSetup
	{
		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRChaperoneSetup FnTable;

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x700598", Offset = "0x700598", VA = "0x700598")]
		internal CVRChaperoneSetup(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x7006A0", Offset = "0x7006A0", VA = "0x7006A0")]
		public bool CommitWorkingCopy(EChaperoneConfigFile configFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x7006BC", Offset = "0x7006BC", VA = "0x7006BC")]
		public void RevertWorkingCopy()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x7006D8", Offset = "0x7006D8", VA = "0x7006D8")]
		public bool GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ)
		{
			return default(bool);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x7006FC", Offset = "0x7006FC", VA = "0x7006FC")]
		public bool GetWorkingPlayAreaRect(ref HmdQuad_t rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x700718", Offset = "0x700718", VA = "0x700718")]
		public bool GetWorkingCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x7007B8", Offset = "0x7007B8", VA = "0x7007B8")]
		public bool GetLiveCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x700858", Offset = "0x700858", VA = "0x700858")]
		public bool GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x700874", Offset = "0x700874", VA = "0x700874")]
		public bool GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x700890", Offset = "0x700890", VA = "0x700890")]
		public void SetWorkingPlayAreaSize(float sizeX, float sizeZ)
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x7008AC", Offset = "0x7008AC", VA = "0x7008AC")]
		public void SetWorkingCollisionBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x7008D4", Offset = "0x7008D4", VA = "0x7008D4")]
		public void SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x7008F0", Offset = "0x7008F0", VA = "0x7008F0")]
		public void SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose)
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x70090C", Offset = "0x70090C", VA = "0x70090C")]
		public void ReloadFromDisk(EChaperoneConfigFile configFile)
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x700928", Offset = "0x700928", VA = "0x700928")]
		public bool GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose)
		{
			return default(bool);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x700944", Offset = "0x700944", VA = "0x700944")]
		public void SetWorkingCollisionBoundsTagsInfo(byte[] pTagsBuffer)
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x70096C", Offset = "0x70096C", VA = "0x70096C")]
		public bool GetLiveCollisionBoundsTagsInfo(out byte[] pTagsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x700A0C", Offset = "0x700A0C", VA = "0x700A0C")]
		public bool SetWorkingPhysicalBoundsInfo(HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x700A34", Offset = "0x700A34", VA = "0x700A34")]
		public bool GetLivePhysicalBoundsInfo(out HmdQuad_t[] pQuadsBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x700AD4", Offset = "0x700AD4", VA = "0x700AD4")]
		public bool ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x700AF4", Offset = "0x700AF4", VA = "0x700AF4")]
		public bool ImportFromBufferToWorking(string pBuffer, uint nImportFlags)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200010A")]
	public class CVRCompositor
	{
		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRCompositor FnTable;

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x700B10", Offset = "0x700B10", VA = "0x700B10")]
		internal CVRCompositor(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x700C18", Offset = "0x700C18", VA = "0x700C18")]
		public void SetTrackingSpace(ETrackingUniverseOrigin eOrigin)
		{
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x700C34", Offset = "0x700C34", VA = "0x700C34")]
		public ETrackingUniverseOrigin GetTrackingSpace()
		{
			return default(ETrackingUniverseOrigin);
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x700C50", Offset = "0x700C50", VA = "0x700C50")]
		public EVRCompositorError WaitGetPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x700C84", Offset = "0x700C84", VA = "0x700C84")]
		public EVRCompositorError GetLastPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x700CB8", Offset = "0x700CB8", VA = "0x700CB8")]
		public EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x700CD4", Offset = "0x700CD4", VA = "0x700CD4")]
		public EVRCompositorError Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x700CF0", Offset = "0x700CF0", VA = "0x700CF0")]
		public void ClearLastSubmittedFrame()
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x700D0C", Offset = "0x700D0C", VA = "0x700D0C")]
		public void PostPresentHandoff()
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x700D28", Offset = "0x700D28", VA = "0x700D28")]
		public bool GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x700D44", Offset = "0x700D44", VA = "0x700D44")]
		public uint GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames)
		{
			return default(uint);
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x700D60", Offset = "0x700D60", VA = "0x700D60")]
		public float GetFrameTimeRemaining()
		{
			return default(float);
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x700D7C", Offset = "0x700D7C", VA = "0x700D7C")]
		public void GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes)
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x700D98", Offset = "0x700D98", VA = "0x700D98")]
		public void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground)
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x700DB8", Offset = "0x700DB8", VA = "0x700DB8")]
		public HmdColor_t GetCurrentFadeColor(bool bBackground)
		{
			return default(HmdColor_t);
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x700DD8", Offset = "0x700DD8", VA = "0x700DD8")]
		public void FadeGrid(float fSeconds, bool bFadeIn)
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x700DF8", Offset = "0x700DF8", VA = "0x700DF8")]
		public float GetCurrentGridAlpha()
		{
			return default(float);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x700E14", Offset = "0x700E14", VA = "0x700E14")]
		public EVRCompositorError SetSkyboxOverride(Texture_t[] pTextures)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x700E3C", Offset = "0x700E3C", VA = "0x700E3C")]
		public void ClearSkyboxOverride()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x700E58", Offset = "0x700E58", VA = "0x700E58")]
		public void CompositorBringToFront()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x700E74", Offset = "0x700E74", VA = "0x700E74")]
		public void CompositorGoToBack()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0x700E90", Offset = "0x700E90", VA = "0x700E90")]
		public void CompositorQuit()
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x700EAC", Offset = "0x700EAC", VA = "0x700EAC")]
		public bool IsFullscreen()
		{
			return default(bool);
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0x700EC8", Offset = "0x700EC8", VA = "0x700EC8")]
		public uint GetCurrentSceneFocusProcess()
		{
			return default(uint);
		}

		[Token(Token = "0x6000591")]
		[Address(RVA = "0x700EE4", Offset = "0x700EE4", VA = "0x700EE4")]
		public uint GetLastFrameRenderer()
		{
			return default(uint);
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0x700F00", Offset = "0x700F00", VA = "0x700F00")]
		public bool CanRenderScene()
		{
			return default(bool);
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0x700F1C", Offset = "0x700F1C", VA = "0x700F1C")]
		public void ShowMirrorWindow()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0x700F38", Offset = "0x700F38", VA = "0x700F38")]
		public void HideMirrorWindow()
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0x700F54", Offset = "0x700F54", VA = "0x700F54")]
		public bool IsMirrorWindowVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x700F70", Offset = "0x700F70", VA = "0x700F70")]
		public void CompositorDumpImages()
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x700F8C", Offset = "0x700F8C", VA = "0x700F8C")]
		public bool ShouldAppRenderWithLowResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x700FA8", Offset = "0x700FA8", VA = "0x700FA8")]
		public void ForceInterleavedReprojectionOn(bool bOverride)
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0x700FC8", Offset = "0x700FC8", VA = "0x700FC8")]
		public void ForceReconnectProcess()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x700FE4", Offset = "0x700FE4", VA = "0x700FE4")]
		public void SuspendRendering(bool bSuspend)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x701004", Offset = "0x701004", VA = "0x701004")]
		public EVRCompositorError GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x701020", Offset = "0x701020", VA = "0x701020")]
		public void ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView)
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x70103C", Offset = "0x70103C", VA = "0x70103C")]
		public EVRCompositorError GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle)
		{
			return default(EVRCompositorError);
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x70105C", Offset = "0x70105C", VA = "0x70105C")]
		public bool ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x701078", Offset = "0x701078", VA = "0x701078")]
		public void LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x701094", Offset = "0x701094", VA = "0x701094")]
		public void UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle)
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x7010B0", Offset = "0x7010B0", VA = "0x7010B0")]
		public uint GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x7010CC", Offset = "0x7010CC", VA = "0x7010CC")]
		public uint GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x7010E8", Offset = "0x7010E8", VA = "0x7010E8")]
		public void SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode)
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x701104", Offset = "0x701104", VA = "0x701104")]
		public EVRCompositorError SubmitExplicitTimingData()
		{
			return default(EVRCompositorError);
		}
	}
	[Token(Token = "0x200010B")]
	public class CVROverlay
	{
		[Token(Token = "0x20003BB")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x5903FC", Offset = "0x5903FC")]
		internal delegate bool _PollNextOverlayEventPacked(ulong ulOverlayHandle, ref VREvent_t_Packed pEvent, uint uncbVREvent);

		[StructLayout(2)]
		[Token(Token = "0x20003BC")]
		private struct PollNextOverlayEventUnion
		{
			[Token(Token = "0x40011F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVROverlay._PollNextOverlayEvent pPollNextOverlayEvent;

			[Token(Token = "0x40011F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _PollNextOverlayEventPacked pPollNextOverlayEventPacked;
		}

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVROverlay FnTable;

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x701A34", Offset = "0x701A34", VA = "0x701A34")]
		internal CVROverlay(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x701B3C", Offset = "0x701B3C", VA = "0x701B3C")]
		public EVROverlayError FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x701B5C", Offset = "0x701B5C", VA = "0x701B5C")]
		public EVROverlayError CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x701B7C", Offset = "0x701B7C", VA = "0x701B7C")]
		public EVROverlayError DestroyOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x701B98", Offset = "0x701B98", VA = "0x701B98")]
		public EVROverlayError SetHighQualityOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x701BB4", Offset = "0x701BB4", VA = "0x701BB4")]
		public ulong GetHighQualityOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x701BD0", Offset = "0x701BD0", VA = "0x701BD0")]
		public uint GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x701BEC", Offset = "0x701BEC", VA = "0x701BEC")]
		public uint GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x701C08", Offset = "0x701C08", VA = "0x701C08")]
		public EVROverlayError SetOverlayName(ulong ulOverlayHandle, string pchName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x701C24", Offset = "0x701C24", VA = "0x701C24")]
		public EVROverlayError GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x701C48", Offset = "0x701C48", VA = "0x701C48")]
		public string GetOverlayErrorNameFromEnum(EVROverlayError error)
		{
			return null;
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x701CDC", Offset = "0x701CDC", VA = "0x701CDC")]
		public EVROverlayError SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x701CF8", Offset = "0x701CF8", VA = "0x701CF8")]
		public uint GetOverlayRenderingPid(ulong ulOverlayHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x701D14", Offset = "0x701D14", VA = "0x701D14")]
		public EVROverlayError SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x701D34", Offset = "0x701D34", VA = "0x701D34")]
		public EVROverlayError GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x701D54", Offset = "0x701D54", VA = "0x701D54")]
		public EVROverlayError SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x701D70", Offset = "0x701D70", VA = "0x701D70")]
		public EVROverlayError GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x701D98", Offset = "0x701D98", VA = "0x701D98")]
		public EVROverlayError SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x701DB4", Offset = "0x701DB4", VA = "0x701DB4")]
		public EVROverlayError GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x701DD4", Offset = "0x701DD4", VA = "0x701DD4")]
		public EVROverlayError SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x701DF0", Offset = "0x701DF0", VA = "0x701DF0")]
		public EVROverlayError GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x701E10", Offset = "0x701E10", VA = "0x701E10")]
		public EVROverlayError SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x701E2C", Offset = "0x701E2C", VA = "0x701E2C")]
		public EVROverlayError GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x701E4C", Offset = "0x701E4C", VA = "0x701E4C")]
		public EVROverlayError SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x701E68", Offset = "0x701E68", VA = "0x701E68")]
		public EVROverlayError GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x701E88", Offset = "0x701E88", VA = "0x701E88")]
		public EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x701EA4", Offset = "0x701EA4", VA = "0x701EA4")]
		public EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x701EC8", Offset = "0x701EC8", VA = "0x701EC8")]
		public EVROverlayError SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x701EE4", Offset = "0x701EE4", VA = "0x701EE4")]
		public EVROverlayError GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x701F00", Offset = "0x701F00", VA = "0x701F00")]
		public EVROverlayError SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x701F1C", Offset = "0x701F1C", VA = "0x701F1C")]
		public EVROverlayError GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x701F38", Offset = "0x701F38", VA = "0x701F38")]
		public uint GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x701F54", Offset = "0x701F54", VA = "0x701F54")]
		public EVROverlayError SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x701F70", Offset = "0x701F70", VA = "0x701F70")]
		public EVROverlayError GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x701F8C", Offset = "0x701F8C", VA = "0x701F8C")]
		public EVROverlayError SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x701FA8", Offset = "0x701FA8", VA = "0x701FA8")]
		public EVROverlayError GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x701FC4", Offset = "0x701FC4", VA = "0x701FC4")]
		public EVROverlayError SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x701FE0", Offset = "0x701FE0", VA = "0x701FE0")]
		public EVROverlayError GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x702000", Offset = "0x702000", VA = "0x702000")]
		public EVROverlayError SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x70201C", Offset = "0x70201C", VA = "0x70201C")]
		public EVROverlayError GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x70203C", Offset = "0x70203C", VA = "0x70203C")]
		public EVROverlayError GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x70205C", Offset = "0x70205C", VA = "0x70205C")]
		public EVROverlayError SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x702078", Offset = "0x702078", VA = "0x702078")]
		public EVROverlayError ShowOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x702094", Offset = "0x702094", VA = "0x702094")]
		public EVROverlayError HideOverlay(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x7020B0", Offset = "0x7020B0", VA = "0x7020B0")]
		public bool IsOverlayVisible(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x7020CC", Offset = "0x7020CC", VA = "0x7020CC")]
		public EVROverlayError GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x7020E8", Offset = "0x7020E8", VA = "0x7020E8")]
		public bool PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x702504", Offset = "0x702504", VA = "0x702504")]
		public EVROverlayError GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x702520", Offset = "0x702520", VA = "0x702520")]
		public EVROverlayError SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x70253C", Offset = "0x70253C", VA = "0x70253C")]
		public EVROverlayError GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x702558", Offset = "0x702558", VA = "0x702558")]
		public EVROverlayError SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x702574", Offset = "0x702574", VA = "0x702574")]
		public bool ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x702590", Offset = "0x702590", VA = "0x702590")]
		public bool IsHoverTargetOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x7025AC", Offset = "0x7025AC", VA = "0x7025AC")]
		public ulong GetGamepadFocusOverlay()
		{
			return default(ulong);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x7025C8", Offset = "0x7025C8", VA = "0x7025C8")]
		public EVROverlayError SetGamepadFocusOverlay(ulong ulNewFocusOverlay)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x7025E4", Offset = "0x7025E4", VA = "0x7025E4")]
		public EVROverlayError SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x702600", Offset = "0x702600", VA = "0x702600")]
		public EVROverlayError MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x70261C", Offset = "0x70261C", VA = "0x70261C")]
		public EVROverlayError SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, IntPtr vCenter, float fRadius)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x702638", Offset = "0x702638", VA = "0x702638")]
		public EVROverlayError GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x702658", Offset = "0x702658", VA = "0x702658")]
		public EVROverlayError SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x702674", Offset = "0x702674", VA = "0x702674")]
		public EVROverlayError ClearOverlayTexture(ulong ulOverlayHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x702690", Offset = "0x702690", VA = "0x702690")]
		public EVROverlayError SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x7026AC", Offset = "0x7026AC", VA = "0x7026AC")]
		public EVROverlayError SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x7026C8", Offset = "0x7026C8", VA = "0x7026C8")]
		public EVROverlayError GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x7026FC", Offset = "0x7026FC", VA = "0x7026FC")]
		public EVROverlayError ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x702718", Offset = "0x702718", VA = "0x702718")]
		public EVROverlayError GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x70273C", Offset = "0x70273C", VA = "0x70273C")]
		public EVROverlayError CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x702760", Offset = "0x702760", VA = "0x702760")]
		public bool IsDashboardVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x70277C", Offset = "0x70277C", VA = "0x70277C")]
		public bool IsActiveDashboardOverlay(ulong ulOverlayHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x702798", Offset = "0x702798", VA = "0x702798")]
		public EVROverlayError SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x7027B4", Offset = "0x7027B4", VA = "0x7027B4")]
		public EVROverlayError GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x7027D4", Offset = "0x7027D4", VA = "0x7027D4")]
		public void ShowDashboard(string pchOverlayToShow)
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x7027F0", Offset = "0x7027F0", VA = "0x7027F0")]
		public uint GetPrimaryDashboardDevice()
		{
			return default(uint);
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x70280C", Offset = "0x70280C", VA = "0x70280C")]
		public EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x702830", Offset = "0x702830", VA = "0x702830")]
		public EVROverlayError ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x702858", Offset = "0x702858", VA = "0x702858")]
		public uint GetKeyboardText(StringBuilder pchText, uint cchText)
		{
			return default(uint);
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x702874", Offset = "0x702874", VA = "0x702874")]
		public void HideKeyboard()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x702890", Offset = "0x702890", VA = "0x702890")]
		public void SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform)
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x7028AC", Offset = "0x7028AC", VA = "0x7028AC")]
		public void SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect)
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x7028C8", Offset = "0x7028C8", VA = "0x7028C8")]
		public EVROverlayError SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x7028E4", Offset = "0x7028E4", VA = "0x7028E4")]
		public EVROverlayError GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags)
		{
			return default(EVROverlayError);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x702904", Offset = "0x702904", VA = "0x702904")]
		public VRMessageOverlayResponse ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text)
		{
			return default(VRMessageOverlayResponse);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x702920", Offset = "0x702920", VA = "0x702920")]
		public void CloseMessageOverlay()
		{
		}
	}
	[Token(Token = "0x200010C")]
	public class CVRRenderModels
	{
		[Token(Token = "0x20003BD")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0x590410", Offset = "0x590410")]
		internal delegate bool _GetComponentStatePacked(string pchRenderModelName, string pchComponentName, ref VRControllerState_t_Packed pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState);

		[StructLayout(2)]
		[Token(Token = "0x20003BE")]
		private struct GetComponentStateUnion
		{
			[Token(Token = "0x40011FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IVRRenderModels._GetComponentState pGetComponentState;

			[Token(Token = "0x40011FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public _GetComponentStatePacked pGetComponentStatePacked;
		}

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRRenderModels FnTable;

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x702A58", Offset = "0x702A58", VA = "0x702A58")]
		internal CVRRenderModels(IntPtr pInterface)
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x702B60", Offset = "0x702B60", VA = "0x702B60")]
		public EVRRenderModelError LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x702B7C", Offset = "0x702B7C", VA = "0x702B7C")]
		public void FreeRenderModel(IntPtr pRenderModel)
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x702B98", Offset = "0x702B98", VA = "0x702B98")]
		public EVRRenderModelError LoadTexture_Async(int textureId, ref IntPtr ppTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x702BB4", Offset = "0x702BB4", VA = "0x702BB4")]
		public void FreeTexture(IntPtr pTexture)
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x702BD0", Offset = "0x702BD0", VA = "0x702BD0")]
		public EVRRenderModelError LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x702BEC", Offset = "0x702BEC", VA = "0x702BEC")]
		public EVRRenderModelError LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture)
		{
			return default(EVRRenderModelError);
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x702C08", Offset = "0x702C08", VA = "0x702C08")]
		public void FreeTextureD3D11(IntPtr pD3D11Texture2D)
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x702C24", Offset = "0x702C24", VA = "0x702C24")]
		public uint GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x702C40", Offset = "0x702C40", VA = "0x702C40")]
		public uint GetRenderModelCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x702C5C", Offset = "0x702C5C", VA = "0x702C5C")]
		public uint GetComponentCount(string pchRenderModelName)
		{
			return default(uint);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x702C78", Offset = "0x702C78", VA = "0x702C78")]
		public uint GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x702C94", Offset = "0x702C94", VA = "0x702C94")]
		public ulong GetComponentButtonMask(string pchRenderModelName, string pchComponentName)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x702CB0", Offset = "0x702CB0", VA = "0x702CB0")]
		public uint GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x702CCC", Offset = "0x702CCC", VA = "0x702CCC")]
		public bool GetComponentStateForDevicePath(string pchRenderModelName, string pchComponentName, ulong devicePath, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x702CE8", Offset = "0x702CE8", VA = "0x702CE8")]
		public bool GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x703274", Offset = "0x703274", VA = "0x703274")]
		public bool RenderModelHasComponent(string pchRenderModelName, string pchComponentName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x703290", Offset = "0x703290", VA = "0x703290")]
		public uint GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x7032AC", Offset = "0x7032AC", VA = "0x7032AC")]
		public uint GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError)
		{
			return default(uint);
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x7032C8", Offset = "0x7032C8", VA = "0x7032C8")]
		public string GetRenderModelErrorNameFromEnum(EVRRenderModelError error)
		{
			return null;
		}
	}
	[Token(Token = "0x200010D")]
	public class CVRNotifications
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRNotifications FnTable;

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x7018F4", Offset = "0x7018F4", VA = "0x7018F4")]
		internal CVRNotifications(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x7019F4", Offset = "0x7019F4", VA = "0x7019F4")]
		public EVRNotificationError CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId)
		{
			return default(EVRNotificationError);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x701A18", Offset = "0x701A18", VA = "0x701A18")]
		public EVRNotificationError RemoveNotification(uint notificationId)
		{
			return default(EVRNotificationError);
		}
	}
	[Token(Token = "0x200010E")]
	public class CVRSettings
	{
		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSettings FnTable;

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x7037B8", Offset = "0x7037B8", VA = "0x7037B8")]
		internal CVRSettings(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x7038C0", Offset = "0x7038C0", VA = "0x7038C0")]
		public string GetSettingsErrorNameFromEnum(EVRSettingsError eError)
		{
			return null;
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x703954", Offset = "0x703954", VA = "0x703954")]
		public bool Sync(bool bForce, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x703974", Offset = "0x703974", VA = "0x703974")]
		public void SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x703994", Offset = "0x703994", VA = "0x703994")]
		public void SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x7039B0", Offset = "0x7039B0", VA = "0x7039B0")]
		public void SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x7039CC", Offset = "0x7039CC", VA = "0x7039CC")]
		public void SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x7039E8", Offset = "0x7039E8", VA = "0x7039E8")]
		public bool GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(bool);
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x703A04", Offset = "0x703A04", VA = "0x703A04")]
		public int GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(int);
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x703A20", Offset = "0x703A20", VA = "0x703A20")]
		public float GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
			return default(float);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0x703A3C", Offset = "0x703A3C", VA = "0x703A3C")]
		public void GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0x703A58", Offset = "0x703A58", VA = "0x703A58")]
		public void RemoveSection(string pchSection, ref EVRSettingsError peError)
		{
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0x703A74", Offset = "0x703A74", VA = "0x703A74")]
		public void RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError)
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class CVRScreenshots
	{
		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRScreenshots FnTable;

		[Token(Token = "0x600061C")]
		[Address(RVA = "0x7035D0", Offset = "0x7035D0", VA = "0x7035D0")]
		internal CVRScreenshots(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x7036E0", Offset = "0x7036E0", VA = "0x7036E0")]
		public EVRScreenshotError RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x703700", Offset = "0x703700", VA = "0x703700")]
		public EVRScreenshotError HookScreenshot(EVRScreenshotType[] pSupportedTypes)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x703728", Offset = "0x703728", VA = "0x703728")]
		public EVRScreenshotType GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError)
		{
			return default(EVRScreenshotType);
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x703744", Offset = "0x703744", VA = "0x703744")]
		public uint GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError)
		{
			return default(uint);
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x703760", Offset = "0x703760", VA = "0x703760")]
		public EVRScreenshotError UpdateScreenshotProgress(uint screenshotHandle, float flProgress)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x70377C", Offset = "0x70377C", VA = "0x70377C")]
		public EVRScreenshotError TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename)
		{
			return default(EVRScreenshotError);
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x70379C", Offset = "0x70379C", VA = "0x70379C")]
		public EVRScreenshotError SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename)
		{
			return default(EVRScreenshotError);
		}
	}
	[Token(Token = "0x2000110")]
	public class CVRResources
	{
		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRResources FnTable;

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x703498", Offset = "0x703498", VA = "0x703498")]
		internal CVRResources(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x703598", Offset = "0x703598", VA = "0x703598")]
		public uint LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen)
		{
			return default(uint);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x7035B4", Offset = "0x7035B4", VA = "0x7035B4")]
		public uint GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen)
		{
			return default(uint);
		}
	}
	[Token(Token = "0x2000111")]
	public class CVRDriverManager
	{
		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRDriverManager FnTable;

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x701120", Offset = "0x701120", VA = "0x701120")]
		internal CVRDriverManager(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x701228", Offset = "0x701228", VA = "0x701228")]
		public uint GetDriverCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x701244", Offset = "0x701244", VA = "0x701244")]
		public uint GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x701260", Offset = "0x701260", VA = "0x701260")]
		public ulong GetDriverHandle(string pchDriverName)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x2000112")]
	public class CVRInput
	{
		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRInput FnTable;

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x70159C", Offset = "0x70159C", VA = "0x70159C")]
		internal CVRInput(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x7016A4", Offset = "0x7016A4", VA = "0x7016A4")]
		public EVRInputError SetActionManifestPath(string pchActionManifestPath)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x7016C0", Offset = "0x7016C0", VA = "0x7016C0")]
		public EVRInputError GetActionSetHandle(string pchActionSetName, ref ulong pHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x7016E0", Offset = "0x7016E0", VA = "0x7016E0")]
		public EVRInputError GetActionHandle(string pchActionName, ref ulong pHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x701700", Offset = "0x701700", VA = "0x701700")]
		public EVRInputError GetInputSourceHandle(string pchInputSourcePath, ref ulong pHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x701720", Offset = "0x701720", VA = "0x701720")]
		public EVRInputError UpdateActionState(VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x701748", Offset = "0x701748", VA = "0x701748")]
		public EVRInputError GetDigitalActionData(ulong action, ref InputDigitalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x701764", Offset = "0x701764", VA = "0x701764")]
		public EVRInputError GetAnalogActionData(ulong action, ref InputAnalogActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x701780", Offset = "0x701780", VA = "0x701780")]
		public EVRInputError GetPoseActionData(ulong action, ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ref InputPoseActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x70179C", Offset = "0x70179C", VA = "0x70179C")]
		public EVRInputError GetSkeletalActionData(ulong action, ref InputSkeletalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x7017B8", Offset = "0x7017B8", VA = "0x7017B8")]
		public EVRInputError GetSkeletalBoneData(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, VRBoneTransform_t[] pTransformArray, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x7017E4", Offset = "0x7017E4", VA = "0x7017E4")]
		public EVRInputError GetSkeletalBoneDataCompressed(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, IntPtr pvCompressedData, uint unCompressedSize, ref uint punRequiredCompressedSize, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x701808", Offset = "0x701808", VA = "0x701808")]
		public EVRInputError DecompressSkeletalBoneData(IntPtr pvCompressedBuffer, uint unCompressedBufferSize, ref EVRSkeletalTransformSpace peTransformSpace, VRBoneTransform_t[] pTransformArray)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x701830", Offset = "0x701830", VA = "0x701830")]
		public EVRInputError TriggerHapticVibrationAction(ulong action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, ulong ulRestrictToDevice)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x70184C", Offset = "0x70184C", VA = "0x70184C")]
		public EVRInputError GetActionOrigins(ulong actionSetHandle, ulong digitalActionHandle, ulong[] originsOut)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x701874", Offset = "0x701874", VA = "0x701874")]
		public EVRInputError GetOriginLocalizedName(ulong origin, StringBuilder pchNameArray, uint unNameArraySize)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x701890", Offset = "0x701890", VA = "0x701890")]
		public EVRInputError GetOriginTrackedDeviceInfo(ulong origin, ref InputOriginInfo_t pOriginInfo, uint unOriginInfoSize)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x7018AC", Offset = "0x7018AC", VA = "0x7018AC")]
		public EVRInputError ShowActionOrigins(ulong actionSetHandle, ulong ulActionHandle)
		{
			return default(EVRInputError);
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x7018C8", Offset = "0x7018C8", VA = "0x7018C8")]
		public EVRInputError ShowBindingsForActionSet(VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t, ulong originToHighlight)
		{
			return default(EVRInputError);
		}
	}
	[Token(Token = "0x2000113")]
	public class CVRIOBuffer
	{
		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRIOBuffer FnTable;

		[Token(Token = "0x600063E")]
		[Address(RVA = "0x701400", Offset = "0x701400", VA = "0x701400")]
		internal CVRIOBuffer(IntPtr pInterface)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x701508", Offset = "0x701508", VA = "0x701508")]
		public EIOBufferError Open(string pchPath, EIOBufferMode mode, uint unElementSize, uint unElements, ref ulong pulBuffer)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0x701528", Offset = "0x701528", VA = "0x701528")]
		public EIOBufferError Close(ulong ulBuffer)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0x701544", Offset = "0x701544", VA = "0x701544")]
		public EIOBufferError Read(ulong ulBuffer, IntPtr pDst, uint unBytes, ref uint punRead)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0x701564", Offset = "0x701564", VA = "0x701564")]
		public EIOBufferError Write(ulong ulBuffer, IntPtr pSrc, uint unBytes)
		{
			return default(EIOBufferError);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0x701580", Offset = "0x701580", VA = "0x701580")]
		public ulong PropertyContainer(ulong ulBuffer)
		{
			return default(ulong);
		}
	}
	[Token(Token = "0x2000114")]
	public class CVRSpatialAnchors
	{
		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IVRSpatialAnchors FnTable;

		[Token(Token = "0x6000644")]
		[Address(RVA = "0x703A90", Offset = "0x703A90", VA = "0x703A90")]
		internal CVRSpatialAnchors(IntPtr pInterface)
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0x703B90", Offset = "0x703B90", VA = "0x703B90")]
		public EVRSpatialAnchorError CreateSpatialAnchorFromDescriptor(string pchDescriptor, ref uint pHandleOut)
		{
			return default(EVRSpatialAnchorError);
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0x703BB0", Offset = "0x703BB0", VA = "0x703BB0")]
		public EVRSpatialAnchorError CreateSpatialAnchorFromPose(uint unDeviceIndex, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPose, ref uint pHandleOut)
		{
			return default(EVRSpatialAnchorError);
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0x703BD0", Offset = "0x703BD0", VA = "0x703BD0")]
		public EVRSpatialAnchorError GetSpatialAnchorPose(uint unHandle, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPoseOut)
		{
			return default(EVRSpatialAnchorError);
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0x703BEC", Offset = "0x703BEC", VA = "0x703BEC")]
		public EVRSpatialAnchorError GetSpatialAnchorDescriptor(uint unHandle, StringBuilder pchDescriptorOut, ref uint punDescriptorBufferLenInOut)
		{
			return default(EVRSpatialAnchorError);
		}
	}
	[Token(Token = "0x2000115")]
	public class OpenVRInterop
	{
		[PreserveSig]
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x721F3C", Offset = "0x721F3C", VA = "0x721F3C")]
		internal static extern uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType);

		[PreserveSig]
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x721FD0", Offset = "0x721FD0", VA = "0x721FD0")]
		internal static extern uint InitInternal2(ref EVRInitError peError, EVRApplicationType eApplicationType, [In] string pStartupInfo);

		[PreserveSig]
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x722088", Offset = "0x722088", VA = "0x722088")]
		internal static extern void ShutdownInternal();

		[PreserveSig]
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x7220FC", Offset = "0x7220FC", VA = "0x7220FC")]
		internal static extern bool IsHmdPresent();

		[PreserveSig]
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x72217C", Offset = "0x72217C", VA = "0x72217C")]
		internal static extern bool IsRuntimeInstalled();

		[PreserveSig]
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x722270", Offset = "0x722270", VA = "0x722270")]
		internal static extern IntPtr GetStringForHmdError(EVRInitError error);

		[PreserveSig]
		[Token(Token = "0x600064F")]
		[Address(RVA = "0x7222F4", Offset = "0x7222F4", VA = "0x7222F4")]
		internal static extern IntPtr GetGenericInterface([In] string pchInterfaceVersion, ref EVRInitError peError);

		[PreserveSig]
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x7223A0", Offset = "0x7223A0", VA = "0x7223A0")]
		internal static extern bool IsInterfaceVersionValid([In] string pchInterfaceVersion);

		[PreserveSig]
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x722440", Offset = "0x722440", VA = "0x722440")]
		internal static extern uint GetInitToken();

		[Token(Token = "0x6000652")]
		[Address(RVA = "0x7239C0", Offset = "0x7239C0", VA = "0x7239C0")]
		public OpenVRInterop()
		{
		}
	}
	[Token(Token = "0x2000116")]
	public enum EVREye
	{
		[Token(Token = "0x4000634")]
		Eye_Left,
		[Token(Token = "0x4000635")]
		Eye_Right
	}
	[Token(Token = "0x2000117")]
	public enum ETextureType
	{
		[Token(Token = "0x4000637")]
		Invalid = -1,
		[Token(Token = "0x4000638")]
		DirectX,
		[Token(Token = "0x4000639")]
		OpenGL,
		[Token(Token = "0x400063A")]
		Vulkan,
		[Token(Token = "0x400063B")]
		IOSurface,
		[Token(Token = "0x400063C")]
		DirectX12,
		[Token(Token = "0x400063D")]
		DXGISharedHandle,
		[Token(Token = "0x400063E")]
		Metal
	}
	[Token(Token = "0x2000118")]
	public enum EColorSpace
	{
		[Token(Token = "0x4000640")]
		Auto,
		[Token(Token = "0x4000641")]
		Gamma,
		[Token(Token = "0x4000642")]
		Linear
	}
	[Token(Token = "0x2000119")]
	public enum ETrackingResult
	{
		[Token(Token = "0x4000644")]
		Uninitialized = 1,
		[Token(Token = "0x4000645")]
		Calibrating_InProgress = 100,
		[Token(Token = "0x4000646")]
		Calibrating_OutOfRange = 101,
		[Token(Token = "0x4000647")]
		Running_OK = 200,
		[Token(Token = "0x4000648")]
		Running_OutOfRange = 201
	}
	[Token(Token = "0x200011A")]
	public enum ETrackedDeviceClass
	{
		[Token(Token = "0x400064A")]
		Invalid,
		[Token(Token = "0x400064B")]
		HMD,
		[Token(Token = "0x400064C")]
		Controller,
		[Token(Token = "0x400064D")]
		GenericTracker,
		[Token(Token = "0x400064E")]
		TrackingReference,
		[Token(Token = "0x400064F")]
		DisplayRedirect,
		[Token(Token = "0x4000650")]
		Max
	}
	[Token(Token = "0x200011B")]
	public enum ETrackedControllerRole
	{
		[Token(Token = "0x4000652")]
		Invalid,
		[Token(Token = "0x4000653")]
		LeftHand,
		[Token(Token = "0x4000654")]
		RightHand,
		[Token(Token = "0x4000655")]
		OptOut,
		[Token(Token = "0x4000656")]
		Max
	}
	[Token(Token = "0x200011C")]
	public enum ETrackingUniverseOrigin
	{
		[Token(Token = "0x4000658")]
		TrackingUniverseSeated,
		[Token(Token = "0x4000659")]
		TrackingUniverseStanding,
		[Token(Token = "0x400065A")]
		TrackingUniverseRawAndUncalibrated
	}
	[Token(Token = "0x200011D")]
	public enum ETrackedDeviceProperty
	{
		[Token(Token = "0x400065C")]
		Prop_Invalid = 0,
		[Token(Token = "0x400065D")]
		Prop_TrackingSystemName_String = 1000,
		[Token(Token = "0x400065E")]
		Prop_ModelNumber_String = 1001,
		[Token(Token = "0x400065F")]
		Prop_SerialNumber_String = 1002,
		[Token(Token = "0x4000660")]
		Prop_RenderModelName_String = 1003,
		[Token(Token = "0x4000661")]
		Prop_WillDriftInYaw_Bool = 1004,
		[Token(Token = "0x4000662")]
		Prop_ManufacturerName_String = 1005,
		[Token(Token = "0x4000663")]
		Prop_TrackingFirmwareVersion_String = 1006,
		[Token(Token = "0x4000664")]
		Prop_HardwareRevision_String = 1007,
		[Token(Token = "0x4000665")]
		Prop_AllWirelessDongleDescriptions_String = 1008,
		[Token(Token = "0x4000666")]
		Prop_ConnectedWirelessDongle_String = 1009,
		[Token(Token = "0x4000667")]
		Prop_DeviceIsWireless_Bool = 1010,
		[Token(Token = "0x4000668")]
		Prop_DeviceIsCharging_Bool = 1011,
		[Token(Token = "0x4000669")]
		Prop_DeviceBatteryPercentage_Float = 1012,
		[Token(Token = "0x400066A")]
		Prop_StatusDisplayTransform_Matrix34 = 1013,
		[Token(Token = "0x400066B")]
		Prop_Firmware_UpdateAvailable_Bool = 1014,
		[Token(Token = "0x400066C")]
		Prop_Firmware_ManualUpdate_Bool = 1015,
		[Token(Token = "0x400066D")]
		Prop_Firmware_ManualUpdateURL_String = 1016,
		[Token(Token = "0x400066E")]
		Prop_HardwareRevision_Uint64 = 1017,
		[Token(Token = "0x400066F")]
		Prop_FirmwareVersion_Uint64 = 1018,
		[Token(Token = "0x4000670")]
		Prop_FPGAVersion_Uint64 = 1019,
		[Token(Token = "0x4000671")]
		Prop_VRCVersion_Uint64 = 1020,
		[Token(Token = "0x4000672")]
		Prop_RadioVersion_Uint64 = 1021,
		[Token(Token = "0x4000673")]
		Prop_DongleVersion_Uint64 = 1022,
		[Token(Token = "0x4000674")]
		Prop_BlockServerShutdown_Bool = 1023,
		[Token(Token = "0x4000675")]
		Prop_CanUnifyCoordinateSystemWithHmd_Bool = 1024,
		[Token(Token = "0x4000676")]
		Prop_ContainsProximitySensor_Bool = 1025,
		[Token(Token = "0x4000677")]
		Prop_DeviceProvidesBatteryStatus_Bool = 1026,
		[Token(Token = "0x4000678")]
		Prop_DeviceCanPowerOff_Bool = 1027,
		[Token(Token = "0x4000679")]
		Prop_Firmware_ProgrammingTarget_String = 1028,
		[Token(Token = "0x400067A")]
		Prop_DeviceClass_Int32 = 1029,
		[Token(Token = "0x400067B")]
		Prop_HasCamera_Bool = 1030,
		[Token(Token = "0x400067C")]
		Prop_DriverVersion_String = 1031,
		[Token(Token = "0x400067D")]
		Prop_Firmware_ForceUpdateRequired_Bool = 1032,
		[Token(Token = "0x400067E")]
		Prop_ViveSystemButtonFixRequired_Bool = 1033,
		[Token(Token = "0x400067F")]
		Prop_ParentDriver_Uint64 = 1034,
		[Token(Token = "0x4000680")]
		Prop_ResourceRoot_String = 1035,
		[Token(Token = "0x4000681")]
		Prop_RegisteredDeviceType_String = 1036,
		[Token(Token = "0x4000682")]
		Prop_InputProfilePath_String = 1037,
		[Token(Token = "0x4000683")]
		Prop_NeverTracked_Bool = 1038,
		[Token(Token = "0x4000684")]
		Prop_NumCameras_Int32 = 1039,
		[Token(Token = "0x4000685")]
		Prop_CameraFrameLayout_Int32 = 1040,
		[Token(Token = "0x4000686")]
		Prop_ReportsTimeSinceVSync_Bool = 2000,
		[Token(Token = "0x4000687")]
		Prop_SecondsFromVsyncToPhotons_Float = 2001,
		[Token(Token = "0x4000688")]
		Prop_DisplayFrequency_Float = 2002,
		[Token(Token = "0x4000689")]
		Prop_UserIpdMeters_Float = 2003,
		[Token(Token = "0x400068A")]
		Prop_CurrentUniverseId_Uint64 = 2004,
		[Token(Token = "0x400068B")]
		Prop_PreviousUniverseId_Uint64 = 2005,
		[Token(Token = "0x400068C")]
		Prop_DisplayFirmwareVersion_Uint64 = 2006,
		[Token(Token = "0x400068D")]
		Prop_IsOnDesktop_Bool = 2007,
		[Token(Token = "0x400068E")]
		Prop_DisplayMCType_Int32 = 2008,
		[Token(Token = "0x400068F")]
		Prop_DisplayMCOffset_Float = 2009,
		[Token(Token = "0x4000690")]
		Prop_DisplayMCScale_Float = 2010,
		[Token(Token = "0x4000691")]
		Prop_EdidVendorID_Int32 = 2011,
		[Token(Token = "0x4000692")]
		Prop_DisplayMCImageLeft_String = 2012,
		[Token(Token = "0x4000693")]
		Prop_DisplayMCImageRight_String = 2013,
		[Token(Token = "0x4000694")]
		Prop_DisplayGCBlackClamp_Float = 2014,
		[Token(Token = "0x4000695")]
		Prop_EdidProductID_Int32 = 2015,
		[Token(Token = "0x4000696")]
		Prop_CameraToHeadTransform_Matrix34 = 2016,
		[Token(Token = "0x4000697")]
		Prop_DisplayGCType_Int32 = 2017,
		[Token(Token = "0x4000698")]
		Prop_DisplayGCOffset_Float = 2018,
		[Token(Token = "0x4000699")]
		Prop_DisplayGCScale_Float = 2019,
		[Token(Token = "0x400069A")]
		Prop_DisplayGCPrescale_Float = 2020,
		[Token(Token = "0x400069B")]
		Prop_DisplayGCImage_String = 2021,
		[Token(Token = "0x400069C")]
		Prop_LensCenterLeftU_Float = 2022,
		[Token(Token = "0x400069D")]
		Prop_LensCenterLeftV_Float = 2023,
		[Token(Token = "0x400069E")]
		Prop_LensCenterRightU_Float = 2024,
		[Token(Token = "0x400069F")]
		Prop_LensCenterRightV_Float = 2025,
		[Token(Token = "0x40006A0")]
		Prop_UserHeadToEyeDepthMeters_Float = 2026,
		[Token(Token = "0x40006A1")]
		Prop_CameraFirmwareVersion_Uint64 = 2027,
		[Token(Token = "0x40006A2")]
		Prop_CameraFirmwareDescription_String = 2028,
		[Token(Token = "0x40006A3")]
		Prop_DisplayFPGAVersion_Uint64 = 2029,
		[Token(Token = "0x40006A4")]
		Prop_DisplayBootloaderVersion_Uint64 = 2030,
		[Token(Token = "0x40006A5")]
		Prop_DisplayHardwareVersion_Uint64 = 2031,
		[Token(Token = "0x40006A6")]
		Prop_AudioFirmwareVersion_Uint64 = 2032,
		[Token(Token = "0x40006A7")]
		Prop_CameraCompatibilityMode_Int32 = 2033,
		[Token(Token = "0x40006A8")]
		Prop_ScreenshotHorizontalFieldOfViewDegrees_Float = 2034,
		[Token(Token = "0x40006A9")]
		Prop_ScreenshotVerticalFieldOfViewDegrees_Float = 2035,
		[Token(Token = "0x40006AA")]
		Prop_DisplaySuppressed_Bool = 2036,
		[Token(Token = "0x40006AB")]
		Prop_DisplayAllowNightMode_Bool = 2037,
		[Token(Token = "0x40006AC")]
		Prop_DisplayMCImageWidth_Int32 = 2038,
		[Token(Token = "0x40006AD")]
		Prop_DisplayMCImageHeight_Int32 = 2039,
		[Token(Token = "0x40006AE")]
		Prop_DisplayMCImageNumChannels_Int32 = 2040,
		[Token(Token = "0x40006AF")]
		Prop_DisplayMCImageData_Binary = 2041,
		[Token(Token = "0x40006B0")]
		Prop_SecondsFromPhotonsToVblank_Float = 2042,
		[Token(Token = "0x40006B1")]
		Prop_DriverDirectModeSendsVsyncEvents_Bool = 2043,
		[Token(Token = "0x40006B2")]
		Prop_DisplayDebugMode_Bool = 2044,
		[Token(Token = "0x40006B3")]
		Prop_GraphicsAdapterLuid_Uint64 = 2045,
		[Token(Token = "0x40006B4")]
		Prop_DriverProvidedChaperonePath_String = 2048,
		[Token(Token = "0x40006B5")]
		Prop_ExpectedTrackingReferenceCount_Int32 = 2049,
		[Token(Token = "0x40006B6")]
		Prop_ExpectedControllerCount_Int32 = 2050,
		[Token(Token = "0x40006B7")]
		Prop_NamedIconPathControllerLeftDeviceOff_String = 2051,
		[Token(Token = "0x40006B8")]
		Prop_NamedIconPathControllerRightDeviceOff_String = 2052,
		[Token(Token = "0x40006B9")]
		Prop_NamedIconPathTrackingReferenceDeviceOff_String = 2053,
		[Token(Token = "0x40006BA")]
		Prop_DoNotApplyPrediction_Bool = 2054,
		[Token(Token = "0x40006BB")]
		Prop_CameraToHeadTransforms_Matrix34_Array = 2055,
		[Token(Token = "0x40006BC")]
		Prop_DistortionMeshResolution_Int32 = 2056,
		[Token(Token = "0x40006BD")]
		Prop_DriverIsDrawingControllers_Bool = 2057,
		[Token(Token = "0x40006BE")]
		Prop_DriverRequestsApplicationPause_Bool = 2058,
		[Token(Token = "0x40006BF")]
		Prop_DriverRequestsReducedRendering_Bool = 2059,
		[Token(Token = "0x40006C0")]
		Prop_MinimumIpdStepMeters_Float = 2060,
		[Token(Token = "0x40006C1")]
		Prop_AudioBridgeFirmwareVersion_Uint64 = 2061,
		[Token(Token = "0x40006C2")]
		Prop_ImageBridgeFirmwareVersion_Uint64 = 2062,
		[Token(Token = "0x40006C3")]
		Prop_ImuToHeadTransform_Matrix34 = 2063,
		[Token(Token = "0x40006C4")]
		Prop_ImuFactoryGyroBias_Vector3 = 2064,
		[Token(Token = "0x40006C5")]
		Prop_ImuFactoryGyroScale_Vector3 = 2065,
		[Token(Token = "0x40006C6")]
		Prop_ImuFactoryAccelerometerBias_Vector3 = 2066,
		[Token(Token = "0x40006C7")]
		Prop_ImuFactoryAccelerometerScale_Vector3 = 2067,
		[Token(Token = "0x40006C8")]
		Prop_ConfigurationIncludesLighthouse20Features_Bool = 2069,
		[Token(Token = "0x40006C9")]
		Prop_DriverRequestedMuraCorrectionMode_Int32 = 2200,
		[Token(Token = "0x40006CA")]
		Prop_DriverRequestedMuraFeather_InnerLeft_Int32 = 2201,
		[Token(Token = "0x40006CB")]
		Prop_DriverRequestedMuraFeather_InnerRight_Int32 = 2202,
		[Token(Token = "0x40006CC")]
		Prop_DriverRequestedMuraFeather_InnerTop_Int32 = 2203,
		[Token(Token = "0x40006CD")]
		Prop_DriverRequestedMuraFeather_InnerBottom_Int32 = 2204,
		[Token(Token = "0x40006CE")]
		Prop_DriverRequestedMuraFeather_OuterLeft_Int32 = 2205,
		[Token(Token = "0x40006CF")]
		Prop_DriverRequestedMuraFeather_OuterRight_Int32 = 2206,
		[Token(Token = "0x40006D0")]
		Prop_DriverRequestedMuraFeather_OuterTop_Int32 = 2207,
		[Token(Token = "0x40006D1")]
		Prop_DriverRequestedMuraFeather_OuterBottom_Int32 = 2208,
		[Token(Token = "0x40006D2")]
		Prop_AttachedDeviceId_String = 3000,
		[Token(Token = "0x40006D3")]
		Prop_SupportedButtons_Uint64 = 3001,
		[Token(Token = "0x40006D4")]
		Prop_Axis0Type_Int32 = 3002,
		[Token(Token = "0x40006D5")]
		Prop_Axis1Type_Int32 = 3003,
		[Token(Token = "0x40006D6")]
		Prop_Axis2Type_Int32 = 3004,
		[Token(Token = "0x40006D7")]
		Prop_Axis3Type_Int32 = 3005,
		[Token(Token = "0x40006D8")]
		Prop_Axis4Type_Int32 = 3006,
		[Token(Token = "0x40006D9")]
		Prop_ControllerRoleHint_Int32 = 3007,
		[Token(Token = "0x40006DA")]
		Prop_FieldOfViewLeftDegrees_Float = 4000,
		[Token(Token = "0x40006DB")]
		Prop_FieldOfViewRightDegrees_Float = 4001,
		[Token(Token = "0x40006DC")]
		Prop_FieldOfViewTopDegrees_Float = 4002,
		[Token(Token = "0x40006DD")]
		Prop_FieldOfViewBottomDegrees_Float = 4003,
		[Token(Token = "0x40006DE")]
		Prop_TrackingRangeMinimumMeters_Float = 4004,
		[Token(Token = "0x40006DF")]
		Prop_TrackingRangeMaximumMeters_Float = 4005,
		[Token(Token = "0x40006E0")]
		Prop_ModeLabel_String = 4006,
		[Token(Token = "0x40006E1")]
		Prop_IconPathName_String = 5000,
		[Token(Token = "0x40006E2")]
		Prop_NamedIconPathDeviceOff_String = 5001,
		[Token(Token = "0x40006E3")]
		Prop_NamedIconPathDeviceSearching_String = 5002,
		[Token(Token = "0x40006E4")]
		Prop_NamedIconPathDeviceSearchingAlert_String = 5003,
		[Token(Token = "0x40006E5")]
		Prop_NamedIconPathDeviceReady_String = 5004,
		[Token(Token = "0x40006E6")]
		Prop_NamedIconPathDeviceReadyAlert_String = 5005,
		[Token(Token = "0x40006E7")]
		Prop_NamedIconPathDeviceNotReady_String = 5006,
		[Token(Token = "0x40006E8")]
		Prop_NamedIconPathDeviceStandby_String = 5007,
		[Token(Token = "0x40006E9")]
		Prop_NamedIconPathDeviceAlertLow_String = 5008,
		[Token(Token = "0x40006EA")]
		Prop_DisplayHiddenArea_Binary_Start = 5100,
		[Token(Token = "0x40006EB")]
		Prop_DisplayHiddenArea_Binary_End = 5150,
		[Token(Token = "0x40006EC")]
		Prop_ParentContainer = 5151,
		[Token(Token = "0x40006ED")]
		Prop_UserConfigPath_String = 6000,
		[Token(Token = "0x40006EE")]
		Prop_InstallPath_String = 6001,
		[Token(Token = "0x40006EF")]
		Prop_HasDisplayComponent_Bool = 6002,
		[Token(Token = "0x40006F0")]
		Prop_HasControllerComponent_Bool = 6003,
		[Token(Token = "0x40006F1")]
		Prop_HasCameraComponent_Bool = 6004,
		[Token(Token = "0x40006F2")]
		Prop_HasDriverDirectModeComponent_Bool = 6005,
		[Token(Token = "0x40006F3")]
		Prop_HasVirtualDisplayComponent_Bool = 6006,
		[Token(Token = "0x40006F4")]
		Prop_HasSpatialAnchorsSupport_Bool = 6007,
		[Token(Token = "0x40006F5")]
		Prop_ControllerType_String = 7000,
		[Token(Token = "0x40006F6")]
		Prop_LegacyInputProfile_String = 7001,
		[Token(Token = "0x40006F7")]
		Prop_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x40006F8")]
		Prop_VendorSpecific_Reserved_End = 10999,
		[Token(Token = "0x40006F9")]
		Prop_TrackedDeviceProperty_Max = 1000000
	}
	[Token(Token = "0x200011E")]
	public enum ETrackedPropertyError
	{
		[Token(Token = "0x40006FB")]
		TrackedProp_Success,
		[Token(Token = "0x40006FC")]
		TrackedProp_WrongDataType,
		[Token(Token = "0x40006FD")]
		TrackedProp_WrongDeviceClass,
		[Token(Token = "0x40006FE")]
		TrackedProp_BufferTooSmall,
		[Token(Token = "0x40006FF")]
		TrackedProp_UnknownProperty,
		[Token(Token = "0x4000700")]
		TrackedProp_InvalidDevice,
		[Token(Token = "0x4000701")]
		TrackedProp_CouldNotContactServer,
		[Token(Token = "0x4000702")]
		TrackedProp_ValueNotProvidedByDevice,
		[Token(Token = "0x4000703")]
		TrackedProp_StringExceedsMaximumLength,
		[Token(Token = "0x4000704")]
		TrackedProp_NotYetAvailable,
		[Token(Token = "0x4000705")]
		TrackedProp_PermissionDenied,
		[Token(Token = "0x4000706")]
		TrackedProp_InvalidOperation,
		[Token(Token = "0x4000707")]
		TrackedProp_CannotWriteToWildcards
	}
	[Token(Token = "0x200011F")]
	public enum EVRSubmitFlags
	{
		[Token(Token = "0x4000709")]
		Submit_Default = 0,
		[Token(Token = "0x400070A")]
		Submit_LensDistortionAlreadyApplied = 1,
		[Token(Token = "0x400070B")]
		Submit_GlRenderBuffer = 2,
		[Token(Token = "0x400070C")]
		Submit_Reserved = 4,
		[Token(Token = "0x400070D")]
		Submit_TextureWithPose = 8,
		[Token(Token = "0x400070E")]
		Submit_TextureWithDepth = 0x10
	}
	[Token(Token = "0x2000120")]
	public enum EVRState
	{
		[Token(Token = "0x4000710")]
		Undefined = -1,
		[Token(Token = "0x4000711")]
		Off,
		[Token(Token = "0x4000712")]
		Searching,
		[Token(Token = "0x4000713")]
		Searching_Alert,
		[Token(Token = "0x4000714")]
		Ready,
		[Token(Token = "0x4000715")]
		Ready_Alert,
		[Token(Token = "0x4000716")]
		NotReady,
		[Token(Token = "0x4000717")]
		Standby,
		[Token(Token = "0x4000718")]
		Ready_Alert_Low
	}
	[Token(Token = "0x2000121")]
	public enum EVREventType
	{
		[Token(Token = "0x400071A")]
		VREvent_None = 0,
		[Token(Token = "0x400071B")]
		VREvent_TrackedDeviceActivated = 100,
		[Token(Token = "0x400071C")]
		VREvent_TrackedDeviceDeactivated = 101,
		[Token(Token = "0x400071D")]
		VREvent_TrackedDeviceUpdated = 102,
		[Token(Token = "0x400071E")]
		VREvent_TrackedDeviceUserInteractionStarted = 103,
		[Token(Token = "0x400071F")]
		VREvent_TrackedDeviceUserInteractionEnded = 104,
		[Token(Token = "0x4000720")]
		VREvent_IpdChanged = 105,
		[Token(Token = "0x4000721")]
		VREvent_EnterStandbyMode = 106,
		[Token(Token = "0x4000722")]
		VREvent_LeaveStandbyMode = 107,
		[Token(Token = "0x4000723")]
		VREvent_TrackedDeviceRoleChanged = 108,
		[Token(Token = "0x4000724")]
		VREvent_WatchdogWakeUpRequested = 109,
		[Token(Token = "0x4000725")]
		VREvent_LensDistortionChanged = 110,
		[Token(Token = "0x4000726")]
		VREvent_PropertyChanged = 111,
		[Token(Token = "0x4000727")]
		VREvent_WirelessDisconnect = 112,
		[Token(Token = "0x4000728")]
		VREvent_WirelessReconnect = 113,
		[Token(Token = "0x4000729")]
		VREvent_ButtonPress = 200,
		[Token(Token = "0x400072A")]
		VREvent_ButtonUnpress = 201,
		[Token(Token = "0x400072B")]
		VREvent_ButtonTouch = 202,
		[Token(Token = "0x400072C")]
		VREvent_ButtonUntouch = 203,
		[Token(Token = "0x400072D")]
		VREvent_DualAnalog_Press = 250,
		[Token(Token = "0x400072E")]
		VREvent_DualAnalog_Unpress = 251,
		[Token(Token = "0x400072F")]
		VREvent_DualAnalog_Touch = 252,
		[Token(Token = "0x4000730")]
		VREvent_DualAnalog_Untouch = 253,
		[Token(Token = "0x4000731")]
		VREvent_DualAnalog_Move = 254,
		[Token(Token = "0x4000732")]
		VREvent_DualAnalog_ModeSwitch1 = 255,
		[Token(Token = "0x4000733")]
		VREvent_DualAnalog_ModeSwitch2 = 256,
		[Token(Token = "0x4000734")]
		VREvent_DualAnalog_Cancel = 257,
		[Token(Token = "0x4000735")]
		VREvent_MouseMove = 300,
		[Token(Token = "0x4000736")]
		VREvent_MouseButtonDown = 301,
		[Token(Token = "0x4000737")]
		VREvent_MouseButtonUp = 302,
		[Token(Token = "0x4000738")]
		VREvent_FocusEnter = 303,
		[Token(Token = "0x4000739")]
		VREvent_FocusLeave = 304,
		[Token(Token = "0x400073A")]
		VREvent_Scroll = 305,
		[Token(Token = "0x400073B")]
		VREvent_TouchPadMove = 306,
		[Token(Token = "0x400073C")]
		VREvent_OverlayFocusChanged = 307,
		[Token(Token = "0x400073D")]
		VREvent_InputFocusCaptured = 400,
		[Token(Token = "0x400073E")]
		VREvent_InputFocusReleased = 401,
		[Token(Token = "0x400073F")]
		VREvent_SceneFocusLost = 402,
		[Token(Token = "0x4000740")]
		VREvent_SceneFocusGained = 403,
		[Token(Token = "0x4000741")]
		VREvent_SceneApplicationChanged = 404,
		[Token(Token = "0x4000742")]
		VREvent_SceneFocusChanged = 405,
		[Token(Token = "0x4000743")]
		VREvent_InputFocusChanged = 406,
		[Token(Token = "0x4000744")]
		VREvent_SceneApplicationSecondaryRenderingStarted = 407,
		[Token(Token = "0x4000745")]
		VREvent_SceneApplicationUsingWrongGraphicsAdapter = 408,
		[Token(Token = "0x4000746")]
		VREvent_ActionBindingReloaded = 409,
		[Token(Token = "0x4000747")]
		VREvent_HideRenderModels = 410,
		[Token(Token = "0x4000748")]
		VREvent_ShowRenderModels = 411,
		[Token(Token = "0x4000749")]
		VREvent_ConsoleOpened = 420,
		[Token(Token = "0x400074A")]
		VREvent_ConsoleClosed = 421,
		[Token(Token = "0x400074B")]
		VREvent_OverlayShown = 500,
		[Token(Token = "0x400074C")]
		VREvent_OverlayHidden = 501,
		[Token(Token = "0x400074D")]
		VREvent_DashboardActivated = 502,
		[Token(Token = "0x400074E")]
		VREvent_DashboardDeactivated = 503,
		[Token(Token = "0x400074F")]
		VREvent_DashboardThumbSelected = 504,
		[Token(Token = "0x4000750")]
		VREvent_DashboardRequested = 505,
		[Token(Token = "0x4000751")]
		VREvent_ResetDashboard = 506,
		[Token(Token = "0x4000752")]
		VREvent_RenderToast = 507,
		[Token(Token = "0x4000753")]
		VREvent_ImageLoaded = 508,
		[Token(Token = "0x4000754")]
		VREvent_ShowKeyboard = 509,
		[Token(Token = "0x4000755")]
		VREvent_HideKeyboard = 510,
		[Token(Token = "0x4000756")]
		VREvent_OverlayGamepadFocusGained = 511,
		[Token(Token = "0x4000757")]
		VREvent_OverlayGamepadFocusLost = 512,
		[Token(Token = "0x4000758")]
		VREvent_OverlaySharedTextureChanged = 513,
		[Token(Token = "0x4000759")]
		VREvent_ScreenshotTriggered = 516,
		[Token(Token = "0x400075A")]
		VREvent_ImageFailed = 517,
		[Token(Token = "0x400075B")]
		VREvent_DashboardOverlayCreated = 518,
		[Token(Token = "0x400075C")]
		VREvent_SwitchGamepadFocus = 519,
		[Token(Token = "0x400075D")]
		VREvent_RequestScreenshot = 520,
		[Token(Token = "0x400075E")]
		VREvent_ScreenshotTaken = 521,
		[Token(Token = "0x400075F")]
		VREvent_ScreenshotFailed = 522,
		[Token(Token = "0x4000760")]
		VREvent_SubmitScreenshotToDashboard = 523,
		[Token(Token = "0x4000761")]
		VREvent_ScreenshotProgressToDashboard = 524,
		[Token(Token = "0x4000762")]
		VREvent_PrimaryDashboardDeviceChanged = 525,
		[Token(Token = "0x4000763")]
		VREvent_RoomViewShown = 526,
		[Token(Token = "0x4000764")]
		VREvent_RoomViewHidden = 527,
		[Token(Token = "0x4000765")]
		VREvent_Notification_Shown = 600,
		[Token(Token = "0x4000766")]
		VREvent_Notification_Hidden = 601,
		[Token(Token = "0x4000767")]
		VREvent_Notification_BeginInteraction = 602,
		[Token(Token = "0x4000768")]
		VREvent_Notification_Destroyed = 603,
		[Token(Token = "0x4000769")]
		VREvent_Quit = 700,
		[Token(Token = "0x400076A")]
		VREvent_ProcessQuit = 701,
		[Token(Token = "0x400076B")]
		VREvent_QuitAborted_UserPrompt = 702,
		[Token(Token = "0x400076C")]
		VREvent_QuitAcknowledged = 703,
		[Token(Token = "0x400076D")]
		VREvent_DriverRequestedQuit = 704,
		[Token(Token = "0x400076E")]
		VREvent_ChaperoneDataHasChanged = 800,
		[Token(Token = "0x400076F")]
		VREvent_ChaperoneUniverseHasChanged = 801,
		[Token(Token = "0x4000770")]
		VREvent_ChaperoneTempDataHasChanged = 802,
		[Token(Token = "0x4000771")]
		VREvent_ChaperoneSettingsHaveChanged = 803,
		[Token(Token = "0x4000772")]
		VREvent_SeatedZeroPoseReset = 804,
		[Token(Token = "0x4000773")]
		VREvent_AudioSettingsHaveChanged = 820,
		[Token(Token = "0x4000774")]
		VREvent_BackgroundSettingHasChanged = 850,
		[Token(Token = "0x4000775")]
		VREvent_CameraSettingsHaveChanged = 851,
		[Token(Token = "0x4000776")]
		VREvent_ReprojectionSettingHasChanged = 852,
		[Token(Token = "0x4000777")]
		VREvent_ModelSkinSettingsHaveChanged = 853,
		[Token(Token = "0x4000778")]
		VREvent_EnvironmentSettingsHaveChanged = 854,
		[Token(Token = "0x4000779")]
		VREvent_PowerSettingsHaveChanged = 855,
		[Token(Token = "0x400077A")]
		VREvent_EnableHomeAppSettingsHaveChanged = 856,
		[Token(Token = "0x400077B")]
		VREvent_SteamVRSectionSettingChanged = 857,
		[Token(Token = "0x400077C")]
		VREvent_LighthouseSectionSettingChanged = 858,
		[Token(Token = "0x400077D")]
		VREvent_NullSectionSettingChanged = 859,
		[Token(Token = "0x400077E")]
		VREvent_UserInterfaceSectionSettingChanged = 860,
		[Token(Token = "0x400077F")]
		VREvent_NotificationsSectionSettingChanged = 861,
		[Token(Token = "0x4000780")]
		VREvent_KeyboardSectionSettingChanged = 862,
		[Token(Token = "0x4000781")]
		VREvent_PerfSectionSettingChanged = 863,
		[Token(Token = "0x4000782")]
		VREvent_DashboardSectionSettingChanged = 864,
		[Token(Token = "0x4000783")]
		VREvent_WebInterfaceSectionSettingChanged = 865,
		[Token(Token = "0x4000784")]
		VREvent_TrackersSectionSettingChanged = 866,
		[Token(Token = "0x4000785")]
		VREvent_StatusUpdate = 900,
		[Token(Token = "0x4000786")]
		VREvent_WebInterface_InstallDriverCompleted = 950,
		[Token(Token = "0x4000787")]
		VREvent_MCImageUpdated = 1000,
		[Token(Token = "0x4000788")]
		VREvent_FirmwareUpdateStarted = 1100,
		[Token(Token = "0x4000789")]
		VREvent_FirmwareUpdateFinished = 1101,
		[Token(Token = "0x400078A")]
		VREvent_KeyboardClosed = 1200,
		[Token(Token = "0x400078B")]
		VREvent_KeyboardCharInput = 1201,
		[Token(Token = "0x400078C")]
		VREvent_KeyboardDone = 1202,
		[Token(Token = "0x400078D")]
		VREvent_ApplicationTransitionStarted = 1300,
		[Token(Token = "0x400078E")]
		VREvent_ApplicationTransitionAborted = 1301,
		[Token(Token = "0x400078F")]
		VREvent_ApplicationTransitionNewAppStarted = 1302,
		[Token(Token = "0x4000790")]
		VREvent_ApplicationListUpdated = 1303,
		[Token(Token = "0x4000791")]
		VREvent_ApplicationMimeTypeLoad = 1304,
		[Token(Token = "0x4000792")]
		VREvent_ApplicationTransitionNewAppLaunchComplete = 1305,
		[Token(Token = "0x4000793")]
		VREvent_ProcessConnected = 1306,
		[Token(Token = "0x4000794")]
		VREvent_ProcessDisconnected = 1307,
		[Token(Token = "0x4000795")]
		VREvent_Compositor_MirrorWindowShown = 1400,
		[Token(Token = "0x4000796")]
		VREvent_Compositor_MirrorWindowHidden = 1401,
		[Token(Token = "0x4000797")]
		VREvent_Compositor_ChaperoneBoundsShown = 1410,
		[Token(Token = "0x4000798")]
		VREvent_Compositor_ChaperoneBoundsHidden = 1411,
		[Token(Token = "0x4000799")]
		VREvent_TrackedCamera_StartVideoStream = 1500,
		[Token(Token = "0x400079A")]
		VREvent_TrackedCamera_StopVideoStream = 1501,
		[Token(Token = "0x400079B")]
		VREvent_TrackedCamera_PauseVideoStream = 1502,
		[Token(Token = "0x400079C")]
		VREvent_TrackedCamera_ResumeVideoStream = 1503,
		[Token(Token = "0x400079D")]
		VREvent_TrackedCamera_EditingSurface = 1550,
		[Token(Token = "0x400079E")]
		VREvent_PerformanceTest_EnableCapture = 1600,
		[Token(Token = "0x400079F")]
		VREvent_PerformanceTest_DisableCapture = 1601,
		[Token(Token = "0x40007A0")]
		VREvent_PerformanceTest_FidelityLevel = 1602,
		[Token(Token = "0x40007A1")]
		VREvent_MessageOverlay_Closed = 1650,
		[Token(Token = "0x40007A2")]
		VREvent_MessageOverlayCloseRequested = 1651,
		[Token(Token = "0x40007A3")]
		VREvent_Input_HapticVibration = 1700,
		[Token(Token = "0x40007A4")]
		VREvent_Input_BindingLoadFailed = 1701,
		[Token(Token = "0x40007A5")]
		VREvent_Input_BindingLoadSuccessful = 1702,
		[Token(Token = "0x40007A6")]
		VREvent_Input_ActionManifestReloaded = 1703,
		[Token(Token = "0x40007A7")]
		VREvent_Input_ActionManifestLoadFailed = 1704,
		[Token(Token = "0x40007A8")]
		VREvent_SpatialAnchors_PoseUpdated = 1800,
		[Token(Token = "0x40007A9")]
		VREvent_SpatialAnchors_DescriptorUpdated = 1801,
		[Token(Token = "0x40007AA")]
		VREvent_SpatialAnchors_RequestPoseUpdate = 1802,
		[Token(Token = "0x40007AB")]
		VREvent_SpatialAnchors_RequestDescriptorUpdate = 1803,
		[Token(Token = "0x40007AC")]
		VREvent_VendorSpecific_Reserved_Start = 10000,
		[Token(Token = "0x40007AD")]
		VREvent_VendorSpecific_Reserved_End = 19999
	}
	[Token(Token = "0x2000122")]
	public enum EDeviceActivityLevel
	{
		[Token(Token = "0x40007AF")]
		k_EDeviceActivityLevel_Unknown = -1,
		[Token(Token = "0x40007B0")]
		k_EDeviceActivityLevel_Idle,
		[Token(Token = "0x40007B1")]
		k_EDeviceActivityLevel_UserInteraction,
		[Token(Token = "0x40007B2")]
		k_EDeviceActivityLevel_UserInteraction_Timeout,
		[Token(Token = "0x40007B3")]
		k_EDeviceActivityLevel_Standby
	}
	[Token(Token = "0x2000123")]
	public enum EVRButtonId
	{
		[Token(Token = "0x40007B5")]
		k_EButton_System = 0,
		[Token(Token = "0x40007B6")]
		k_EButton_ApplicationMenu = 1,
		[Token(Token = "0x40007B7")]
		k_EButton_Grip = 2,
		[Token(Token = "0x40007B8")]
		k_EButton_DPad_Left = 3,
		[Token(Token = "0x40007B9")]
		k_EButton_DPad_Up = 4,
		[Token(Token = "0x40007BA")]
		k_EButton_DPad_Right = 5,
		[Token(Token = "0x40007BB")]
		k_EButton_DPad_Down = 6,
		[Token(Token = "0x40007BC")]
		k_EButton_A = 7,
		[Token(Token = "0x40007BD")]
		k_EButton_ProximitySensor = 31,
		[Token(Token = "0x40007BE")]
		k_EButton_Axis0 = 32,
		[Token(Token = "0x40007BF")]
		k_EButton_Axis1 = 33,
		[Token(Token = "0x40007C0")]
		k_EButton_Axis2 = 34,
		[Token(Token = "0x40007C1")]
		k_EButton_Axis3 = 35,
		[Token(Token = "0x40007C2")]
		k_EButton_Axis4 = 36,
		[Token(Token = "0x40007C3")]
		k_EButton_SteamVR_Touchpad = 32,
		[Token(Token = "0x40007C4")]
		k_EButton_SteamVR_Trigger = 33,
		[Token(Token = "0x40007C5")]
		k_EButton_Dashboard_Back = 2,
		[Token(Token = "0x40007C6")]
		k_EButton_Knuckles_A = 2,
		[Token(Token = "0x40007C7")]
		k_EButton_Knuckles_B = 1,
		[Token(Token = "0x40007C8")]
		k_EButton_Knuckles_JoyStick = 35,
		[Token(Token = "0x40007C9")]
		k_EButton_Max = 64
	}
	[Token(Token = "0x2000124")]
	public enum EVRMouseButton
	{
		[Token(Token = "0x40007CB")]
		Left = 1,
		[Token(Token = "0x40007CC")]
		Right = 2,
		[Token(Token = "0x40007CD")]
		Middle = 4
	}
	[Token(Token = "0x2000125")]
	public enum EDualAnalogWhich
	{
		[Token(Token = "0x40007CF")]
		k_EDualAnalog_Left,
		[Token(Token = "0x40007D0")]
		k_EDualAnalog_Right
	}
	[Token(Token = "0x2000126")]
	public enum EVRInputError
	{
		[Token(Token = "0x40007D2")]
		None,
		[Token(Token = "0x40007D3")]
		NameNotFound,
		[Token(Token = "0x40007D4")]
		WrongType,
		[Token(Token = "0x40007D5")]
		InvalidHandle,
		[Token(Token = "0x40007D6")]
		InvalidParam,
		[Token(Token = "0x40007D7")]
		NoSteam,
		[Token(Token = "0x40007D8")]
		MaxCapacityReached,
		[Token(Token = "0x40007D9")]
		IPCError,
		[Token(Token = "0x40007DA")]
		NoActiveActionSet,
		[Token(Token = "0x40007DB")]
		InvalidDevice,
		[Token(Token = "0x40007DC")]
		InvalidSkeleton,
		[Token(Token = "0x40007DD")]
		InvalidBoneCount,
		[Token(Token = "0x40007DE")]
		InvalidCompressedData,
		[Token(Token = "0x40007DF")]
		NoData,
		[Token(Token = "0x40007E0")]
		BufferTooSmall,
		[Token(Token = "0x40007E1")]
		MismatchedActionManifest,
		[Token(Token = "0x40007E2")]
		MissingSkeletonData
	}
	[Token(Token = "0x2000127")]
	public enum EVRSpatialAnchorError
	{
		[Token(Token = "0x40007E4")]
		Success,
		[Token(Token = "0x40007E5")]
		Internal,
		[Token(Token = "0x40007E6")]
		UnknownHandle,
		[Token(Token = "0x40007E7")]
		ArrayTooSmall,
		[Token(Token = "0x40007E8")]
		InvalidDescriptorChar,
		[Token(Token = "0x40007E9")]
		NotYetAvailable,
		[Token(Token = "0x40007EA")]
		NotAvailableInThisUniverse,
		[Token(Token = "0x40007EB")]
		PermanentlyUnavailable,
		[Token(Token = "0x40007EC")]
		WrongDriver,
		[Token(Token = "0x40007ED")]
		DescriptorTooLong,
		[Token(Token = "0x40007EE")]
		Unknown,
		[Token(Token = "0x40007EF")]
		NoRoomCalibration,
		[Token(Token = "0x40007F0")]
		InvalidArgument,
		[Token(Token = "0x40007F1")]
		UnknownDriver
	}
	[Token(Token = "0x2000128")]
	public enum EHiddenAreaMeshType
	{
		[Token(Token = "0x40007F3")]
		k_eHiddenAreaMesh_Standard,
		[Token(Token = "0x40007F4")]
		k_eHiddenAreaMesh_Inverse,
		[Token(Token = "0x40007F5")]
		k_eHiddenAreaMesh_LineLoop,
		[Token(Token = "0x40007F6")]
		k_eHiddenAreaMesh_Max
	}
	[Token(Token = "0x2000129")]
	public enum EVRControllerAxisType
	{
		[Token(Token = "0x40007F8")]
		k_eControllerAxis_None,
		[Token(Token = "0x40007F9")]
		k_eControllerAxis_TrackPad,
		[Token(Token = "0x40007FA")]
		k_eControllerAxis_Joystick,
		[Token(Token = "0x40007FB")]
		k_eControllerAxis_Trigger
	}
	[Token(Token = "0x200012A")]
	public enum EVRControllerEventOutputType
	{
		[Token(Token = "0x40007FD")]
		ControllerEventOutput_OSEvents,
		[Token(Token = "0x40007FE")]
		ControllerEventOutput_VREvents
	}
	[Token(Token = "0x200012B")]
	public enum ECollisionBoundsStyle
	{
		[Token(Token = "0x4000800")]
		COLLISION_BOUNDS_STYLE_BEGINNER,
		[Token(Token = "0x4000801")]
		COLLISION_BOUNDS_STYLE_INTERMEDIATE,
		[Token(Token = "0x4000802")]
		COLLISION_BOUNDS_STYLE_SQUARES,
		[Token(Token = "0x4000803")]
		COLLISION_BOUNDS_STYLE_ADVANCED,
		[Token(Token = "0x4000804")]
		COLLISION_BOUNDS_STYLE_NONE,
		[Token(Token = "0x4000805")]
		COLLISION_BOUNDS_STYLE_COUNT
	}
	[Token(Token = "0x200012C")]
	public enum EVROverlayError
	{
		[Token(Token = "0x4000807")]
		None = 0,
		[Token(Token = "0x4000808")]
		UnknownOverlay = 10,
		[Token(Token = "0x4000809")]
		InvalidHandle = 11,
		[Token(Token = "0x400080A")]
		PermissionDenied = 12,
		[Token(Token = "0x400080B")]
		OverlayLimitExceeded = 13,
		[Token(Token = "0x400080C")]
		WrongVisibilityType = 14,
		[Token(Token = "0x400080D")]
		KeyTooLong = 15,
		[Token(Token = "0x400080E")]
		NameTooLong = 16,
		[Token(Token = "0x400080F")]
		KeyInUse = 17,
		[Token(Token = "0x4000810")]
		WrongTransformType = 18,
		[Token(Token = "0x4000811")]
		InvalidTrackedDevice = 19,
		[Token(Token = "0x4000812")]
		InvalidParameter = 20,
		[Token(Token = "0x4000813")]
		ThumbnailCantBeDestroyed = 21,
		[Token(Token = "0x4000814")]
		ArrayTooSmall = 22,
		[Token(Token = "0x4000815")]
		RequestFailed = 23,
		[Token(Token = "0x4000816")]
		InvalidTexture = 24,
		[Token(Token = "0x4000817")]
		UnableToLoadFile = 25,
		[Token(Token = "0x4000818")]
		KeyboardAlreadyInUse = 26,
		[Token(Token = "0x4000819")]
		NoNeighbor = 27,
		[Token(Token = "0x400081A")]
		TooManyMaskPrimitives = 29,
		[Token(Token = "0x400081B")]
		BadMaskPrimitive = 30,
		[Token(Token = "0x400081C")]
		TextureAlreadyLocked = 31,
		[Token(Token = "0x400081D")]
		TextureLockCapacityReached = 32,
		[Token(Token = "0x400081E")]
		TextureNotLocked = 33
	}
	[Token(Token = "0x200012D")]
	public enum EVRApplicationType
	{
		[Token(Token = "0x4000820")]
		VRApplication_Other,
		[Token(Token = "0x4000821")]
		VRApplication_Scene,
		[Token(Token = "0x4000822")]
		VRApplication_Overlay,
		[Token(Token = "0x4000823")]
		VRApplication_Background,
		[Token(Token = "0x4000824")]
		VRApplication_Utility,
		[Token(Token = "0x4000825")]
		VRApplication_VRMonitor,
		[Token(Token = "0x4000826")]
		VRApplication_SteamWatchdog,
		[Token(Token = "0x4000827")]
		VRApplication_Bootstrapper,
		[Token(Token = "0x4000828")]
		VRApplication_Max
	}
	[Token(Token = "0x200012E")]
	public enum EVRFirmwareError
	{
		[Token(Token = "0x400082A")]
		None,
		[Token(Token = "0x400082B")]
		Success,
		[Token(Token = "0x400082C")]
		Fail
	}
	[Token(Token = "0x200012F")]
	public enum EVRNotificationError
	{
		[Token(Token = "0x400082E")]
		OK = 0,
		[Token(Token = "0x400082F")]
		InvalidNotificationId = 100,
		[Token(Token = "0x4000830")]
		NotificationQueueFull = 101,
		[Token(Token = "0x4000831")]
		InvalidOverlayHandle = 102,
		[Token(Token = "0x4000832")]
		SystemWithUserValueAlreadyExists = 103
	}
	[Token(Token = "0x2000130")]
	public enum EVRSkeletalMotionRange
	{
		[Token(Token = "0x4000834")]
		WithController,
		[Token(Token = "0x4000835")]
		WithoutController
	}
	[Token(Token = "0x2000131")]
	public enum EVRInitError
	{
		[Token(Token = "0x4000837")]
		None = 0,
		[Token(Token = "0x4000838")]
		Unknown = 1,
		[Token(Token = "0x4000839")]
		Init_InstallationNotFound = 100,
		[Token(Token = "0x400083A")]
		Init_InstallationCorrupt = 101,
		[Token(Token = "0x400083B")]
		Init_VRClientDLLNotFound = 102,
		[Token(Token = "0x400083C")]
		Init_FileNotFound = 103,
		[Token(Token = "0x400083D")]
		Init_FactoryNotFound = 104,
		[Token(Token = "0x400083E")]
		Init_InterfaceNotFound = 105,
		[Token(Token = "0x400083F")]
		Init_InvalidInterface = 106,
		[Token(Token = "0x4000840")]
		Init_UserConfigDirectoryInvalid = 107,
		[Token(Token = "0x4000841")]
		Init_HmdNotFound = 108,
		[Token(Token = "0x4000842")]
		Init_NotInitialized = 109,
		[Token(Token = "0x4000843")]
		Init_PathRegistryNotFound = 110,
		[Token(Token = "0x4000844")]
		Init_NoConfigPath = 111,
		[Token(Token = "0x4000845")]
		Init_NoLogPath = 112,
		[Token(Token = "0x4000846")]
		Init_PathRegistryNotWritable = 113,
		[Token(Token = "0x4000847")]
		Init_AppInfoInitFailed = 114,
		[Token(Token = "0x4000848")]
		Init_Retry = 115,
		[Token(Token = "0x4000849")]
		Init_InitCanceledByUser = 116,
		[Token(Token = "0x400084A")]
		Init_AnotherAppLaunching = 117,
		[Token(Token = "0x400084B")]
		Init_SettingsInitFailed = 118,
		[Token(Token = "0x400084C")]
		Init_ShuttingDown = 119,
		[Token(Token = "0x400084D")]
		Init_TooManyObjects = 120,
		[Token(Token = "0x400084E")]
		Init_NoServerForBackgroundApp = 121,
		[Token(Token = "0x400084F")]
		Init_NotSupportedWithCompositor = 122,
		[Token(Token = "0x4000850")]
		Init_NotAvailableToUtilityApps = 123,
		[Token(Token = "0x4000851")]
		Init_Internal = 124,
		[Token(Token = "0x4000852")]
		Init_HmdDriverIdIsNone = 125,
		[Token(Token = "0x4000853")]
		Init_HmdNotFoundPresenceFailed = 126,
		[Token(Token = "0x4000854")]
		Init_VRMonitorNotFound = 127,
		[Token(Token = "0x4000855")]
		Init_VRMonitorStartupFailed = 128,
		[Token(Token = "0x4000856")]
		Init_LowPowerWatchdogNotSupported = 129,
		[Token(Token = "0x4000857")]
		Init_InvalidApplicationType = 130,
		[Token(Token = "0x4000858")]
		Init_NotAvailableToWatchdogApps = 131,
		[Token(Token = "0x4000859")]
		Init_WatchdogDisabledInSettings = 132,
		[Token(Token = "0x400085A")]
		Init_VRDashboardNotFound = 133,
		[Token(Token = "0x400085B")]
		Init_VRDashboardStartupFailed = 134,
		[Token(Token = "0x400085C")]
		Init_VRHomeNotFound = 135,
		[Token(Token = "0x400085D")]
		Init_VRHomeStartupFailed = 136,
		[Token(Token = "0x400085E")]
		Init_RebootingBusy = 137,
		[Token(Token = "0x400085F")]
		Init_FirmwareUpdateBusy = 138,
		[Token(Token = "0x4000860")]
		Init_FirmwareRecoveryBusy = 139,
		[Token(Token = "0x4000861")]
		Init_USBServiceBusy = 140,
		[Token(Token = "0x4000862")]
		Init_VRWebHelperStartupFailed = 141,
		[Token(Token = "0x4000863")]
		Init_TrackerManagerInitFailed = 142,
		[Token(Token = "0x4000864")]
		Driver_Failed = 200,
		[Token(Token = "0x4000865")]
		Driver_Unknown = 201,
		[Token(Token = "0x4000866")]
		Driver_HmdUnknown = 202,
		[Token(Token = "0x4000867")]
		Driver_NotLoaded = 203,
		[Token(Token = "0x4000868")]
		Driver_RuntimeOutOfDate = 204,
		[Token(Token = "0x4000869")]
		Driver_HmdInUse = 205,
		[Token(Token = "0x400086A")]
		Driver_NotCalibrated = 206,
		[Token(Token = "0x400086B")]
		Driver_CalibrationInvalid = 207,
		[Token(Token = "0x400086C")]
		Driver_HmdDisplayNotFound = 208,
		[Token(Token = "0x400086D")]
		Driver_TrackedDeviceInterfaceUnknown = 209,
		[Token(Token = "0x400086E")]
		Driver_HmdDriverIdOutOfBounds = 211,
		[Token(Token = "0x400086F")]
		Driver_HmdDisplayMirrored = 212,
		[Token(Token = "0x4000870")]
		IPC_ServerInitFailed = 300,
		[Token(Token = "0x4000871")]
		IPC_ConnectFailed = 301,
		[Token(Token = "0x4000872")]
		IPC_SharedStateInitFailed = 302,
		[Token(Token = "0x4000873")]
		IPC_CompositorInitFailed = 303,
		[Token(Token = "0x4000874")]
		IPC_MutexInitFailed = 304,
		[Token(Token = "0x4000875")]
		IPC_Failed = 305,
		[Token(Token = "0x4000876")]
		IPC_CompositorConnectFailed = 306,
		[Token(Token = "0x4000877")]
		IPC_CompositorInvalidConnectResponse = 307,
		[Token(Token = "0x4000878")]
		IPC_ConnectFailedAfterMultipleAttempts = 308,
		[Token(Token = "0x4000879")]
		Compositor_Failed = 400,
		[Token(Token = "0x400087A")]
		Compositor_D3D11HardwareRequired = 401,
		[Token(Token = "0x400087B")]
		Compositor_FirmwareRequiresUpdate = 402,
		[Token(Token = "0x400087C")]
		Compositor_OverlayInitFailed = 403,
		[Token(Token = "0x400087D")]
		Compositor_ScreenshotsInitFailed = 404,
		[Token(Token = "0x400087E")]
		Compositor_UnableToCreateDevice = 405,
		[Token(Token = "0x400087F")]
		VendorSpecific_UnableToConnectToOculusRuntime = 1000,
		[Token(Token = "0x4000880")]
		VendorSpecific_WindowsNotInDevMode = 1001,
		[Token(Token = "0x4000881")]
		VendorSpecific_HmdFound_CantOpenDevice = 1101,
		[Token(Token = "0x4000882")]
		VendorSpecific_HmdFound_UnableToRequestConfigStart = 1102,
		[Token(Token = "0x4000883")]
		VendorSpecific_HmdFound_NoStoredConfig = 1103,
		[Token(Token = "0x4000884")]
		VendorSpecific_HmdFound_ConfigTooBig = 1104,
		[Token(Token = "0x4000885")]
		VendorSpecific_HmdFound_ConfigTooSmall = 1105,
		[Token(Token = "0x4000886")]
		VendorSpecific_HmdFound_UnableToInitZLib = 1106,
		[Token(Token = "0x4000887")]
		VendorSpecific_HmdFound_CantReadFirmwareVersion = 1107,
		[Token(Token = "0x4000888")]
		VendorSpecific_HmdFound_UnableToSendUserDataStart = 1108,
		[Token(Token = "0x4000889")]
		VendorSpecific_HmdFound_UnableToGetUserDataStart = 1109,
		[Token(Token = "0x400088A")]
		VendorSpecific_HmdFound_UnableToGetUserDataNext = 1110,
		[Token(Token = "0x400088B")]
		VendorSpecific_HmdFound_UserDataAddressRange = 1111,
		[Token(Token = "0x400088C")]
		VendorSpecific_HmdFound_UserDataError = 1112,
		[Token(Token = "0x400088D")]
		VendorSpecific_HmdFound_ConfigFailedSanityCheck = 1113,
		[Token(Token = "0x400088E")]
		Steam_SteamInstallationNotFound = 2000
	}
	[Token(Token = "0x2000132")]
	public enum EVRScreenshotType
	{
		[Token(Token = "0x4000890")]
		None,
		[Token(Token = "0x4000891")]
		Mono,
		[Token(Token = "0x4000892")]
		Stereo,
		[Token(Token = "0x4000893")]
		Cubemap,
		[Token(Token = "0x4000894")]
		MonoPanorama,
		[Token(Token = "0x4000895")]
		StereoPanorama
	}
	[Token(Token = "0x2000133")]
	public enum EVRScreenshotPropertyFilenames
	{
		[Token(Token = "0x4000897")]
		Preview,
		[Token(Token = "0x4000898")]
		VR
	}
	[Token(Token = "0x2000134")]
	public enum EVRTrackedCameraError
	{
		[Token(Token = "0x400089A")]
		None = 0,
		[Token(Token = "0x400089B")]
		OperationFailed = 100,
		[Token(Token = "0x400089C")]
		InvalidHandle = 101,
		[Token(Token = "0x400089D")]
		InvalidFrameHeaderVersion = 102,
		[Token(Token = "0x400089E")]
		OutOfHandles = 103,
		[Token(Token = "0x400089F")]
		IPCFailure = 104,
		[Token(Token = "0x40008A0")]
		NotSupportedForThisDevice = 105,
		[Token(Token = "0x40008A1")]
		SharedMemoryFailure = 106,
		[Token(Token = "0x40008A2")]
		FrameBufferingFailure = 107,
		[Token(Token = "0x40008A3")]
		StreamSetupFailure = 108,
		[Token(Token = "0x40008A4")]
		InvalidGLTextureId = 109,
		[Token(Token = "0x40008A5")]
		InvalidSharedTextureHandle = 110,
		[Token(Token = "0x40008A6")]
		FailedToGetGLTextureId = 111,
		[Token(Token = "0x40008A7")]
		SharedTextureFailure = 112,
		[Token(Token = "0x40008A8")]
		NoFrameAvailable = 113,
		[Token(Token = "0x40008A9")]
		InvalidArgument = 114,
		[Token(Token = "0x40008AA")]
		InvalidFrameBufferSize = 115
	}
	[Token(Token = "0x2000135")]
	public enum EVRTrackedCameraFrameLayout
	{
		[Token(Token = "0x40008AC")]
		Mono = 1,
		[Token(Token = "0x40008AD")]
		Stereo = 2,
		[Token(Token = "0x40008AE")]
		VerticalLayout = 0x10,
		[Token(Token = "0x40008AF")]
		HorizontalLayout = 0x20
	}
	[Token(Token = "0x2000136")]
	public enum EVRTrackedCameraFrameType
	{
		[Token(Token = "0x40008B1")]
		Distorted,
		[Token(Token = "0x40008B2")]
		Undistorted,
		[Token(Token = "0x40008B3")]
		MaximumUndistorted,
		[Token(Token = "0x40008B4")]
		MAX_CAMERA_FRAME_TYPES
	}
	[Token(Token = "0x2000137")]
	public enum EVSync
	{
		[Token(Token = "0x40008B6")]
		None,
		[Token(Token = "0x40008B7")]
		WaitRender,
		[Token(Token = "0x40008B8")]
		NoWaitRender
	}
	[Token(Token = "0x2000138")]
	public enum EVRMuraCorrectionMode
	{
		[Token(Token = "0x40008BA")]
		Default,
		[Token(Token = "0x40008BB")]
		NoCorrection
	}
	[Token(Token = "0x2000139")]
	public enum Imu_OffScaleFlags
	{
		[Token(Token = "0x40008BD")]
		OffScale_AccelX = 1,
		[Token(Token = "0x40008BE")]
		OffScale_AccelY = 2,
		[Token(Token = "0x40008BF")]
		OffScale_AccelZ = 4,
		[Token(Token = "0x40008C0")]
		OffScale_GyroX = 8,
		[Token(Token = "0x40008C1")]
		OffScale_GyroY = 0x10,
		[Token(Token = "0x40008C2")]
		OffScale_GyroZ = 0x20
	}
	[Token(Token = "0x200013A")]
	public enum EVRApplicationError
	{
		[Token(Token = "0x40008C4")]
		None = 0,
		[Token(Token = "0x40008C5")]
		AppKeyAlreadyExists = 100,
		[Token(Token = "0x40008C6")]
		NoManifest = 101,
		[Token(Token = "0x40008C7")]
		NoApplication = 102,
		[Token(Token = "0x40008C8")]
		InvalidIndex = 103,
		[Token(Token = "0x40008C9")]
		UnknownApplication = 104,
		[Token(Token = "0x40008CA")]
		IPCFailed = 105,
		[Token(Token = "0x40008CB")]
		ApplicationAlreadyRunning = 106,
		[Token(Token = "0x40008CC")]
		InvalidManifest = 107,
		[Token(Token = "0x40008CD")]
		InvalidApplication = 108,
		[Token(Token = "0x40008CE")]
		LaunchFailed = 109,
		[Token(Token = "0x40008CF")]
		ApplicationAlreadyStarting = 110,
		[Token(Token = "0x40008D0")]
		LaunchInProgress = 111,
		[Token(Token = "0x40008D1")]
		OldApplicationQuitting = 112,
		[Token(Token = "0x40008D2")]
		TransitionAborted = 113,
		[Token(Token = "0x40008D3")]
		IsTemplate = 114,
		[Token(Token = "0x40008D4")]
		SteamVRIsExiting = 115,
		[Token(Token = "0x40008D5")]
		BufferTooSmall = 200,
		[Token(Token = "0x40008D6")]
		PropertyNotSet = 201,
		[Token(Token = "0x40008D7")]
		UnknownProperty = 202,
		[Token(Token = "0x40008D8")]
		InvalidParameter = 203
	}
	[Token(Token = "0x200013B")]
	public enum EVRApplicationProperty
	{
		[Token(Token = "0x40008DA")]
		Name_String = 0,
		[Token(Token = "0x40008DB")]
		LaunchType_String = 11,
		[Token(Token = "0x40008DC")]
		WorkingDirectory_String = 12,
		[Token(Token = "0x40008DD")]
		BinaryPath_String = 13,
		[Token(Token = "0x40008DE")]
		Arguments_String = 14,
		[Token(Token = "0x40008DF")]
		URL_String = 15,
		[Token(Token = "0x40008E0")]
		Description_String = 50,
		[Token(Token = "0x40008E1")]
		NewsURL_String = 51,
		[Token(Token = "0x40008E2")]
		ImagePath_String = 52,
		[Token(Token = "0x40008E3")]
		Source_String = 53,
		[Token(Token = "0x40008E4")]
		ActionManifestURL_String = 54,
		[Token(Token = "0x40008E5")]
		IsDashboardOverlay_Bool = 60,
		[Token(Token = "0x40008E6")]
		IsTemplate_Bool = 61,
		[Token(Token = "0x40008E7")]
		IsInstanced_Bool = 62,
		[Token(Token = "0x40008E8")]
		IsInternal_Bool = 63,
		[Token(Token = "0x40008E9")]
		WantsCompositorPauseInStandby_Bool = 64,
		[Token(Token = "0x40008EA")]
		LastLaunchTime_Uint64 = 70
	}
	[Token(Token = "0x200013C")]
	public enum EVRApplicationTransitionState
	{
		[Token(Token = "0x40008EC")]
		VRApplicationTransition_None = 0,
		[Token(Token = "0x40008ED")]
		VRApplicationTransition_OldAppQuitSent = 10,
		[Token(Token = "0x40008EE")]
		VRApplicationTransition_WaitingForExternalLaunch = 11,
		[Token(Token = "0x40008EF")]
		VRApplicationTransition_NewAppLaunched = 20
	}
	[Token(Token = "0x200013D")]
	public enum ChaperoneCalibrationState
	{
		[Token(Token = "0x40008F1")]
		OK = 1,
		[Token(Token = "0x40008F2")]
		Warning = 100,
		[Token(Token = "0x40008F3")]
		Warning_BaseStationMayHaveMoved = 101,
		[Token(Token = "0x40008F4")]
		Warning_BaseStationRemoved = 102,
		[Token(Token = "0x40008F5")]
		Warning_SeatedBoundsInvalid = 103,
		[Token(Token = "0x40008F6")]
		Error = 200,
		[Token(Token = "0x40008F7")]
		Error_BaseStationUninitialized = 201,
		[Token(Token = "0x40008F8")]
		Error_BaseStationConflict = 202,
		[Token(Token = "0x40008F9")]
		Error_PlayAreaInvalid = 203,
		[Token(Token = "0x40008FA")]
		Error_CollisionBoundsInvalid = 204
	}
	[Token(Token = "0x200013E")]
	public enum EChaperoneConfigFile
	{
		[Token(Token = "0x40008FC")]
		Live = 1,
		[Token(Token = "0x40008FD")]
		Temp
	}
	[Token(Token = "0x200013F")]
	public enum EChaperoneImportFlags
	{
		[Token(Token = "0x40008FF")]
		EChaperoneImport_BoundsOnly = 1
	}
	[Token(Token = "0x2000140")]
	public enum EVRCompositorError
	{
		[Token(Token = "0x4000901")]
		None = 0,
		[Token(Token = "0x4000902")]
		RequestFailed = 1,
		[Token(Token = "0x4000903")]
		IncompatibleVersion = 100,
		[Token(Token = "0x4000904")]
		DoNotHaveFocus = 101,
		[Token(Token = "0x4000905")]
		InvalidTexture = 102,
		[Token(Token = "0x4000906")]
		IsNotSceneApplication = 103,
		[Token(Token = "0x4000907")]
		TextureIsOnWrongDevice = 104,
		[Token(Token = "0x4000908")]
		TextureUsesUnsupportedFormat = 105,
		[Token(Token = "0x4000909")]
		SharedTexturesNotSupported = 106,
		[Token(Token = "0x400090A")]
		IndexOutOfRange = 107,
		[Token(Token = "0x400090B")]
		AlreadySubmitted = 108,
		[Token(Token = "0x400090C")]
		InvalidBounds = 109
	}
	[Token(Token = "0x2000141")]
	public enum EVRCompositorTimingMode
	{
		[Token(Token = "0x400090E")]
		Implicit,
		[Token(Token = "0x400090F")]
		Explicit_RuntimePerformsPostPresentHandoff,
		[Token(Token = "0x4000910")]
		Explicit_ApplicationPerformsPostPresentHandoff
	}
	[Token(Token = "0x2000142")]
	public enum VROverlayInputMethod
	{
		[Token(Token = "0x4000912")]
		None,
		[Token(Token = "0x4000913")]
		Mouse,
		[Token(Token = "0x4000914")]
		DualAnalog
	}
	[Token(Token = "0x2000143")]
	public enum VROverlayTransformType
	{
		[Token(Token = "0x4000916")]
		VROverlayTransform_Absolute,
		[Token(Token = "0x4000917")]
		VROverlayTransform_TrackedDeviceRelative,
		[Token(Token = "0x4000918")]
		VROverlayTransform_SystemOverlay,
		[Token(Token = "0x4000919")]
		VROverlayTransform_TrackedComponent
	}
	[Token(Token = "0x2000144")]
	public enum VROverlayFlags
	{
		[Token(Token = "0x400091B")]
		None,
		[Token(Token = "0x400091C")]
		Curved,
		[Token(Token = "0x400091D")]
		RGSS4X,
		[Token(Token = "0x400091E")]
		NoDashboardTab,
		[Token(Token = "0x400091F")]
		AcceptsGamepadEvents,
		[Token(Token = "0x4000920")]
		ShowGamepadFocus,
		[Token(Token = "0x4000921")]
		SendVRScrollEvents,
		[Token(Token = "0x4000922")]
		SendVRTouchpadEvents,
		[Token(Token = "0x4000923")]
		ShowTouchPadScrollWheel,
		[Token(Token = "0x4000924")]
		TransferOwnershipToInternalProcess,
		[Token(Token = "0x4000925")]
		SideBySide_Parallel,
		[Token(Token = "0x4000926")]
		SideBySide_Crossed,
		[Token(Token = "0x4000927")]
		Panorama,
		[Token(Token = "0x4000928")]
		StereoPanorama,
		[Token(Token = "0x4000929")]
		SortWithNonSceneOverlays,
		[Token(Token = "0x400092A")]
		VisibleInDashboard
	}
	[Token(Token = "0x2000145")]
	public enum VRMessageOverlayResponse
	{
		[Token(Token = "0x400092C")]
		ButtonPress_0,
		[Token(Token = "0x400092D")]
		ButtonPress_1,
		[Token(Token = "0x400092E")]
		ButtonPress_2,
		[Token(Token = "0x400092F")]
		ButtonPress_3,
		[Token(Token = "0x4000930")]
		CouldntFindSystemOverlay,
		[Token(Token = "0x4000931")]
		CouldntFindOrCreateClientOverlay,
		[Token(Token = "0x4000932")]
		ApplicationQuit
	}
	[Token(Token = "0x2000146")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4000934")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4000935")]
		k_EGamepadTextInputModePassword,
		[Token(Token = "0x4000936")]
		k_EGamepadTextInputModeSubmit
	}
	[Token(Token = "0x2000147")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x4000938")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x4000939")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x2000148")]
	public enum EOverlayDirection
	{
		[Token(Token = "0x400093B")]
		Up,
		[Token(Token = "0x400093C")]
		Down,
		[Token(Token = "0x400093D")]
		Left,
		[Token(Token = "0x400093E")]
		Right,
		[Token(Token = "0x400093F")]
		Count
	}
	[Token(Token = "0x2000149")]
	public enum EVROverlayIntersectionMaskPrimitiveType
	{
		[Token(Token = "0x4000941")]
		OverlayIntersectionPrimitiveType_Rectangle,
		[Token(Token = "0x4000942")]
		OverlayIntersectionPrimitiveType_Circle
	}
	[Token(Token = "0x200014A")]
	public enum EVRRenderModelError
	{
		[Token(Token = "0x4000944")]
		None = 0,
		[Token(Token = "0x4000945")]
		Loading = 100,
		[Token(Token = "0x4000946")]
		NotSupported = 200,
		[Token(Token = "0x4000947")]
		InvalidArg = 300,
		[Token(Token = "0x4000948")]
		InvalidModel = 301,
		[Token(Token = "0x4000949")]
		NoShapes = 302,
		[Token(Token = "0x400094A")]
		MultipleShapes = 303,
		[Token(Token = "0x400094B")]
		TooManyVertices = 304,
		[Token(Token = "0x400094C")]
		MultipleTextures = 305,
		[Token(Token = "0x400094D")]
		BufferTooSmall = 306,
		[Token(Token = "0x400094E")]
		NotEnoughNormals = 307,
		[Token(Token = "0x400094F")]
		NotEnoughTexCoords = 308,
		[Token(Token = "0x4000950")]
		InvalidTexture = 400
	}
	[Token(Token = "0x200014B")]
	public enum EVRComponentProperty
	{
		[Token(Token = "0x4000952")]
		IsStatic = 1,
		[Token(Token = "0x4000953")]
		IsVisible = 2,
		[Token(Token = "0x4000954")]
		IsTouched = 4,
		[Token(Token = "0x4000955")]
		IsPressed = 8,
		[Token(Token = "0x4000956")]
		IsScrolled = 0x10
	}
	[Token(Token = "0x200014C")]
	public enum EVRNotificationType
	{
		[Token(Token = "0x4000958")]
		Transient,
		[Token(Token = "0x4000959")]
		Persistent,
		[Token(Token = "0x400095A")]
		Transient_SystemWithUserValue
	}
	[Token(Token = "0x200014D")]
	public enum EVRNotificationStyle
	{
		[Token(Token = "0x400095C")]
		None = 0,
		[Token(Token = "0x400095D")]
		Application = 100,
		[Token(Token = "0x400095E")]
		Contact_Disabled = 200,
		[Token(Token = "0x400095F")]
		Contact_Enabled = 201,
		[Token(Token = "0x4000960")]
		Contact_Active = 202
	}
	[Token(Token = "0x200014E")]
	public enum EVRSettingsError
	{
		[Token(Token = "0x4000962")]
		None,
		[Token(Token = "0x4000963")]
		IPCFailed,
		[Token(Token = "0x4000964")]
		WriteFailed,
		[Token(Token = "0x4000965")]
		ReadFailed,
		[Token(Token = "0x4000966")]
		JsonParseFailed,
		[Token(Token = "0x4000967")]
		UnsetSettingHasNoDefault
	}
	[Token(Token = "0x200014F")]
	public enum EVRScreenshotError
	{
		[Token(Token = "0x4000969")]
		None = 0,
		[Token(Token = "0x400096A")]
		RequestFailed = 1,
		[Token(Token = "0x400096B")]
		IncompatibleVersion = 100,
		[Token(Token = "0x400096C")]
		NotFound = 101,
		[Token(Token = "0x400096D")]
		BufferTooSmall = 102,
		[Token(Token = "0x400096E")]
		ScreenshotAlreadyInProgress = 108
	}
	[Token(Token = "0x2000150")]
	public enum EVRSkeletalTransformSpace
	{
		[Token(Token = "0x4000970")]
		Model,
		[Token(Token = "0x4000971")]
		Parent,
		[Token(Token = "0x4000972")]
		Additive
	}
	[Token(Token = "0x2000151")]
	public enum EVRInputFilterCancelType
	{
		[Token(Token = "0x4000974")]
		VRInputFilterCancel_Timers,
		[Token(Token = "0x4000975")]
		VRInputFilterCancel_Momentum
	}
	[Token(Token = "0x2000152")]
	public enum EIOBufferError
	{
		[Token(Token = "0x4000977")]
		IOBuffer_Success = 0,
		[Token(Token = "0x4000978")]
		IOBuffer_OperationFailed = 100,
		[Token(Token = "0x4000979")]
		IOBuffer_InvalidHandle = 101,
		[Token(Token = "0x400097A")]
		IOBuffer_InvalidArgument = 102,
		[Token(Token = "0x400097B")]
		IOBuffer_PathExists = 103,
		[Token(Token = "0x400097C")]
		IOBuffer_PathDoesNotExist = 104,
		[Token(Token = "0x400097D")]
		IOBuffer_Permission = 105
	}
	[Token(Token = "0x2000153")]
	public enum EIOBufferMode
	{
		[Token(Token = "0x400097F")]
		Read = 1,
		[Token(Token = "0x4000980")]
		Write = 2,
		[Token(Token = "0x4000981")]
		Create = 0x200
	}
	[StructLayout(2)]
	[Token(Token = "0x2000154")]
	public struct VREvent_Data_t
	{
		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Reserved_t reserved;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Controller_t controller;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Mouse_t mouse;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Scroll_t scroll;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Process_t process;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Notification_t notification;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Overlay_t overlay;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Status_t status;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Ipd_t ipd;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Chaperone_t chaperone;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_PerformanceTest_t performanceTest;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_TouchPadMove_t touchPadMove;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Screenshot_t screenshot;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ScreenshotProgress_t screenshotProgress;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_ApplicationLaunch_t applicationLaunch;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_EditingCameraSurface_t cameraSurface;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_MessageOverlay_t messageOverlay;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Property_t property;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_DualAnalog_t dualAnalog;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_HapticVibration_t hapticVibration;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_WebConsole_t webConsole;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_InputBindingLoad_t inputBinding;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_SpatialAnchor_t spatialAnchor;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VREvent_Keyboard_t keyboard;
	}
	[StructLayout(2)]
	[Token(Token = "0x2000155")]
	public struct VROverlayIntersectionMaskPrimitive_Data_t
	{
		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskRectangle_t m_Rectangle;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntersectionMaskCircle_t m_Circle;
	}
	[Token(Token = "0x2000156")]
	public struct HmdMatrix34_t
	{
		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;
	}
	[Token(Token = "0x2000157")]
	public struct HmdMatrix33_t
	{
		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;
	}
	[Token(Token = "0x2000158")]
	public struct HmdMatrix44_t
	{
		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m0;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m1;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m2;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m3;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m4;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m5;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m6;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m7;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m8;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m9;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m10;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m11;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m12;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m13;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m14;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m15;
	}
	[Token(Token = "0x2000159")]
	public struct HmdVector3_t
	{
		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;
	}
	[Token(Token = "0x200015A")]
	public struct HmdVector4_t
	{
		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float v2;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float v3;
	}
	[Token(Token = "0x200015B")]
	public struct HmdVector3d_t
	{
		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double v0;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double v1;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double v2;
	}
	[Token(Token = "0x200015C")]
	public struct HmdVector2_t
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float v0;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float v1;
	}
	[Token(Token = "0x200015D")]
	public struct HmdQuaternion_t
	{
		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double w;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public double x;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double y;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double z;
	}
	[Token(Token = "0x200015E")]
	public struct HmdQuaternionf_t
	{
		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float w;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float x;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float y;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float z;
	}
	[Token(Token = "0x200015F")]
	public struct HmdColor_t
	{
		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float r;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float g;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float b;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float a;
	}
	[Token(Token = "0x2000160")]
	public struct HmdQuad_t
	{
		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vCorners0;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vCorners1;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector3_t vCorners2;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HmdVector3_t vCorners3;
	}
	[Token(Token = "0x2000161")]
	public struct HmdRect2_t
	{
		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector2_t vTopLeft;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector2_t vBottomRight;
	}
	[Token(Token = "0x2000162")]
	public struct DistortionCoordinates_t
	{
		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float rfRed0;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float rfRed1;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float rfGreen0;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float rfGreen1;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float rfBlue0;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float rfBlue1;
	}
	[Token(Token = "0x2000163")]
	public struct Texture_t
	{
		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETextureType eType;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EColorSpace eColorSpace;
	}
	[Token(Token = "0x2000164")]
	public struct TrackedDevicePose_t
	{
		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdVector3_t vVelocity;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public HmdVector3_t vAngularVelocity;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ETrackingResult eTrackingResult;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bPoseIsValid;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool bDeviceIsConnected;
	}
	[Token(Token = "0x2000165")]
	public struct VRTextureBounds_t
	{
		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float uMin;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float vMin;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float uMax;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float vMax;
	}
	[Token(Token = "0x2000166")]
	public struct VRTextureWithPose_t
	{
		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mDeviceToAbsoluteTracking;
	}
	[Token(Token = "0x2000167")]
	public struct VRTextureDepthInfo_t
	{
		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr handle;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdMatrix44_t mProjection;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public HmdVector2_t vRange;
	}
	[Token(Token = "0x2000168")]
	public struct VRTextureWithDepth_t
	{
		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	[Token(Token = "0x2000169")]
	public struct VRTextureWithPoseAndDepth_t
	{
		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public VRTextureDepthInfo_t depth;
	}
	[Token(Token = "0x200016A")]
	public struct VRVulkanTextureData_t
	{
		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nImage;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pDevice;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pPhysicalDevice;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pInstance;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pQueue;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nQueueFamilyIndex;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nWidth;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nHeight;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nFormat;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nSampleCount;
	}
	[Token(Token = "0x200016B")]
	public struct D3D12TextureData_t
	{
		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pResource;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pCommandQueue;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNodeMask;
	}
	[Token(Token = "0x200016C")]
	public struct VREvent_Controller_t
	{
		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint button;
	}
	[Token(Token = "0x200016D")]
	public struct VREvent_Mouse_t
	{
		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint button;
	}
	[Token(Token = "0x200016E")]
	public struct VREvent_Scroll_t
	{
		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float xdelta;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float ydelta;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint repeatCount;
	}
	[Token(Token = "0x200016F")]
	public struct VREvent_TouchPadMove_t
	{
		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bFingerDown;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float flSecondsFingerDown;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fValueXFirst;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float fValueYFirst;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fValueXRaw;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fValueYRaw;
	}
	[Token(Token = "0x2000170")]
	public struct VREvent_Notification_t
	{
		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulUserValue;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint notificationId;
	}
	[Token(Token = "0x2000171")]
	public struct VREvent_Process_t
	{
		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint oldPid;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool bForced;
	}
	[Token(Token = "0x2000172")]
	public struct VREvent_Overlay_t
	{
		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong devicePath;
	}
	[Token(Token = "0x2000173")]
	public struct VREvent_Status_t
	{
		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint statusState;
	}
	[Token(Token = "0x2000174")]
	public struct VREvent_Keyboard_t
	{
		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte cNewInput0;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte cNewInput1;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte cNewInput2;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte cNewInput3;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte cNewInput4;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public byte cNewInput5;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public byte cNewInput6;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public byte cNewInput7;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong uUserValue;

		[Token(Token = "0x17000049")]
		public string cNewInput
		{
			[Token(Token = "0x6000653")]
			[Address(RVA = "0xFA867C", Offset = "0xFA867C", VA = "0xFA867C")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x2000175")]
	public struct VREvent_Ipd_t
	{
		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float ipdMeters;
	}
	[Token(Token = "0x2000176")]
	public struct VREvent_Chaperone_t
	{
		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nPreviousUniverse;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_nCurrentUniverse;
	}
	[Token(Token = "0x2000177")]
	public struct VREvent_Reserved_t
	{
		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong reserved0;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong reserved1;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong reserved2;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong reserved3;
	}
	[Token(Token = "0x2000178")]
	public struct VREvent_PerformanceTest_t
	{
		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nFidelityLevel;
	}
	[Token(Token = "0x2000179")]
	public struct VREvent_SeatedZeroPoseReset_t
	{
		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bResetBySystemMenu;
	}
	[Token(Token = "0x200017A")]
	public struct VREvent_Screenshot_t
	{
		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint handle;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint type;
	}
	[Token(Token = "0x200017B")]
	public struct VREvent_ScreenshotProgress_t
	{
		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float progress;
	}
	[Token(Token = "0x200017C")]
	public struct VREvent_ApplicationLaunch_t
	{
		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint pid;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unArgsHandle;
	}
	[Token(Token = "0x200017D")]
	public struct VREvent_EditingCameraSurface_t
	{
		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong overlayHandle;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nVisualMode;
	}
	[Token(Token = "0x200017E")]
	public struct VREvent_MessageOverlay_t
	{
		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unVRMessageOverlayResponse;
	}
	[Token(Token = "0x200017F")]
	public struct VREvent_Property_t
	{
		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong container;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ETrackedDeviceProperty prop;
	}
	[Token(Token = "0x2000180")]
	public struct VREvent_DualAnalog_t
	{
		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float transformedX;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float transformedY;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EDualAnalogWhich which;
	}
	[Token(Token = "0x2000181")]
	public struct VREvent_HapticVibration_t
	{
		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong containerHandle;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong componentHandle;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float fDurationSeconds;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fFrequency;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float fAmplitude;
	}
	[Token(Token = "0x2000182")]
	public struct VREvent_WebConsole_t
	{
		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong webConsoleHandle;
	}
	[Token(Token = "0x2000183")]
	public struct VREvent_InputBindingLoad_t
	{
		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulAppContainer;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong pathMessage;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong pathUrl;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong pathControllerType;
	}
	[Token(Token = "0x2000184")]
	public struct VREvent_InputActionManifestLoad_t
	{
		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong pathAppKey;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong pathMessage;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong pathMessageParam;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong pathManifestPath;
	}
	[Token(Token = "0x2000185")]
	public struct VREvent_SpatialAnchor_t
	{
		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unHandle;
	}
	[Token(Token = "0x2000186")]
	public struct VREvent_t
	{
		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public VREvent_Data_t data;
	}
	[Token(Token = "0x2000187")]
	public struct VREvent_t_Packed
	{
		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint eventType;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float eventAgeSeconds;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VREvent_Data_t data;

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xFA8770", Offset = "0xFA8770", VA = "0xFA8770")]
		public VREvent_t_Packed(VREvent_t unpacked)
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xFA87B0", Offset = "0xFA87B0", VA = "0xFA87B0")]
		public void Unpack(ref VREvent_t unpacked)
		{
		}
	}
	[Token(Token = "0x2000188")]
	public struct HiddenAreaMesh_t
	{
		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pVertexData;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unTriangleCount;
	}
	[Token(Token = "0x2000189")]
	public struct VRControllerAxis_t
	{
		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}
	[Token(Token = "0x200018A")]
	public struct VRControllerState_t
	{
		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public VRControllerAxis_t rAxis4;
	}
	[Token(Token = "0x200018B")]
	public struct VRControllerState_t_Packed
	{
		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtonPressed;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ulong ulButtonTouched;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public VRControllerAxis_t rAxis0;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public VRControllerAxis_t rAxis1;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public VRControllerAxis_t rAxis2;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public VRControllerAxis_t rAxis3;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public VRControllerAxis_t rAxis4;

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xFA85F4", Offset = "0xFA85F4", VA = "0xFA85F4")]
		public VRControllerState_t_Packed(VRControllerState_t unpacked)
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xFA8638", Offset = "0xFA8638", VA = "0xFA8638")]
		public void Unpack(ref VRControllerState_t unpacked)
		{
		}
	}
	[Token(Token = "0x200018C")]
	public struct Compositor_OverlaySettings
	{
		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint size;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool curved;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool antialias;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float scale;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float distance;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float alpha;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float uOffset;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float vOffset;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float uScale;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float vScale;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float gridDivs;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float gridWidth;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float gridScale;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix44_t transform;
	}
	[Token(Token = "0x200018D")]
	public struct VRBoneTransform_t
	{
		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector4_t position;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HmdQuaternionf_t orientation;
	}
	[Token(Token = "0x200018E")]
	public struct CameraVideoStreamFrameHeader_t
	{
		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVRTrackedCameraFrameType eFrameType;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint nWidth;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint nHeight;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint nBytesPerPixel;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint nFrameSequence;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TrackedDevicePose_t standingTrackedDevicePose;
	}
	[Token(Token = "0x200018F")]
	public struct DriverDirectMode_FrameTiming
	{
		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nReprojectionFlags;
	}
	[Token(Token = "0x2000190")]
	public struct ImuSample_t
	{
		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double fSampleTime;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public HmdVector3d_t vAccel;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HmdVector3d_t vGyro;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint unOffScaleFlags;
	}
	[Token(Token = "0x2000191")]
	public struct AppOverrideKeys_t
	{
		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr pchKey;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pchValue;
	}
	[Token(Token = "0x2000192")]
	public struct Compositor_FrameTiming
	{
		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nSize;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nFrameIndex;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumMisPresented;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nReprojectionFlags;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public double m_flSystemTimeInSeconds;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_flPreSubmitGpuMs;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_flPostSubmitGpuMs;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_flTotalRenderGpuMs;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_flCompositorRenderGpuMs;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_flCompositorRenderCpuMs;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_flCompositorIdleCpuMs;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m_flClientFrameIntervalMs;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m_flPresentCallCpuMs;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float m_flWaitForPresentCpuMs;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float m_flSubmitFrameMs;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float m_flWaitGetPosesCalledMs;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float m_flNewPosesReadyMs;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float m_flNewFrameReadyMs;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float m_flCompositorUpdateStartMs;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float m_flCompositorUpdateEndMs;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float m_flCompositorRenderStartMs;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TrackedDevicePose_t m_HmdPose;
	}
	[Token(Token = "0x2000193")]
	public struct Compositor_CumulativeStats
	{
		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nPid;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nNumFramePresents;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nNumDroppedFrames;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nNumReprojectedFrames;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nNumFramePresentsOnStartup;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nNumDroppedFramesOnStartup;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nNumReprojectedFramesOnStartup;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nNumLoading;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_nNumFramePresentsLoading;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nNumDroppedFramesLoading;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_nNumReprojectedFramesLoading;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_nNumTimedOut;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_nNumFramePresentsTimedOut;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_nNumDroppedFramesTimedOut;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nNumReprojectedFramesTimedOut;
	}
	[Token(Token = "0x2000194")]
	public struct VROverlayIntersectionParams_t
	{
		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vSource;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vDirection;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ETrackingUniverseOrigin eOrigin;
	}
	[Token(Token = "0x2000195")]
	public struct VROverlayIntersectionResults_t
	{
		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPoint;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HmdVector2_t vUVs;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fDistance;
	}
	[Token(Token = "0x2000196")]
	public struct IntersectionMaskRectangle_t
	{
		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flTopLeftX;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flTopLeftY;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flWidth;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m_flHeight;
	}
	[Token(Token = "0x2000197")]
	public struct IntersectionMaskCircle_t
	{
		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flCenterX;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m_flCenterY;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m_flRadius;
	}
	[Token(Token = "0x2000198")]
	public struct VROverlayIntersectionMaskPrimitive_t
	{
		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EVROverlayIntersectionMaskPrimitiveType m_nPrimitiveType;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public VROverlayIntersectionMaskPrimitive_Data_t m_Primitive;
	}
	[Token(Token = "0x2000199")]
	public struct RenderModel_ComponentState_t
	{
		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mTrackingToComponentRenderModel;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HmdMatrix34_t mTrackingToComponentLocal;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint uProperties;
	}
	[Token(Token = "0x200019A")]
	public struct RenderModel_Vertex_t
	{
		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdVector3_t vPosition;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public HmdVector3_t vNormal;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rfTextureCoord0;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rfTextureCoord1;
	}
	[Token(Token = "0x200019B")]
	public struct RenderModel_TextureMap_t
	{
		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort unWidth;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort unHeight;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr rubTextureMapData;
	}
	[Token(Token = "0x200019C")]
	public struct RenderModel_TextureMap_t_Packed
	{
		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ushort unWidth;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public ushort unHeight;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public IntPtr rubTextureMapData;

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x7239C8", Offset = "0x7239C8", VA = "0x7239C8")]
		public RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t unpacked)
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x7239DC", Offset = "0x7239DC", VA = "0x7239DC")]
		public void Unpack(ref RenderModel_TextureMap_t unpacked)
		{
		}
	}
	[Token(Token = "0x200019D")]
	public struct RenderModel_t
	{
		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr rIndexData;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unTriangleCount;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int diffuseTextureId;
	}
	[Token(Token = "0x200019E")]
	public struct RenderModel_t_Packed
	{
		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr rVertexData;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unVertexCount;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public IntPtr rIndexData;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTriangleCount;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int diffuseTextureId;

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x7239F8", Offset = "0x7239F8", VA = "0x7239F8")]
		public RenderModel_t_Packed(RenderModel_t unpacked)
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x723A24", Offset = "0x723A24", VA = "0x723A24")]
		public void Unpack(ref RenderModel_t unpacked)
		{
		}
	}
	[Token(Token = "0x200019F")]
	public struct RenderModel_ControllerMode_State_t
	{
		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bScrollWheelVisible;
	}
	[Token(Token = "0x20001A0")]
	public struct NotificationBitmap_t
	{
		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pImageData;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nWidth;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nHeight;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nBytesPerPixel;
	}
	[Token(Token = "0x20001A1")]
	public struct CVRSettingHelper
	{
		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pSettings;
	}
	[Token(Token = "0x20001A2")]
	public struct InputAnalogActionData_t
	{
		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float z;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float deltaX;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float deltaY;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float deltaZ;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fUpdateTime;
	}
	[Token(Token = "0x20001A3")]
	public struct InputDigitalActionData_t
	{
		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bState;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool bChanged;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float fUpdateTime;
	}
	[Token(Token = "0x20001A4")]
	public struct InputPoseActionData_t
	{
		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TrackedDevicePose_t pose;
	}
	[Token(Token = "0x20001A5")]
	public struct InputSkeletalActionData_t
	{
		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bActive;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong activeOrigin;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint boneCount;
	}
	[Token(Token = "0x20001A6")]
	public struct InputOriginInfo_t
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong devicePath;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint trackedDeviceIndex;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte rchRenderModelComponentName0;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public byte rchRenderModelComponentName1;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public byte rchRenderModelComponentName2;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
		public byte rchRenderModelComponentName3;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte rchRenderModelComponentName4;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public byte rchRenderModelComponentName5;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public byte rchRenderModelComponentName6;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public byte rchRenderModelComponentName7;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte rchRenderModelComponentName8;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public byte rchRenderModelComponentName9;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public byte rchRenderModelComponentName10;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public byte rchRenderModelComponentName11;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte rchRenderModelComponentName12;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public byte rchRenderModelComponentName13;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public byte rchRenderModelComponentName14;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public byte rchRenderModelComponentName15;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public byte rchRenderModelComponentName16;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public byte rchRenderModelComponentName17;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public byte rchRenderModelComponentName18;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public byte rchRenderModelComponentName19;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte rchRenderModelComponentName20;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public byte rchRenderModelComponentName21;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public byte rchRenderModelComponentName22;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public byte rchRenderModelComponentName23;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public byte rchRenderModelComponentName24;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public byte rchRenderModelComponentName25;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public byte rchRenderModelComponentName26;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public byte rchRenderModelComponentName27;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public byte rchRenderModelComponentName28;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public byte rchRenderModelComponentName29;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public byte rchRenderModelComponentName30;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public byte rchRenderModelComponentName31;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public byte rchRenderModelComponentName32;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public byte rchRenderModelComponentName33;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public byte rchRenderModelComponentName34;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
		public byte rchRenderModelComponentName35;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public byte rchRenderModelComponentName36;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public byte rchRenderModelComponentName37;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public byte rchRenderModelComponentName38;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public byte rchRenderModelComponentName39;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public byte rchRenderModelComponentName40;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public byte rchRenderModelComponentName41;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public byte rchRenderModelComponentName42;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public byte rchRenderModelComponentName43;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public byte rchRenderModelComponentName44;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public byte rchRenderModelComponentName45;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public byte rchRenderModelComponentName46;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		public byte rchRenderModelComponentName47;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public byte rchRenderModelComponentName48;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		public byte rchRenderModelComponentName49;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		public byte rchRenderModelComponentName50;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
		public byte rchRenderModelComponentName51;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public byte rchRenderModelComponentName52;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public byte rchRenderModelComponentName53;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public byte rchRenderModelComponentName54;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		public byte rchRenderModelComponentName55;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public byte rchRenderModelComponentName56;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public byte rchRenderModelComponentName57;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public byte rchRenderModelComponentName58;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public byte rchRenderModelComponentName59;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public byte rchRenderModelComponentName60;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public byte rchRenderModelComponentName61;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public byte rchRenderModelComponentName62;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public byte rchRenderModelComponentName63;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public byte rchRenderModelComponentName64;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public byte rchRenderModelComponentName65;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public byte rchRenderModelComponentName66;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public byte rchRenderModelComponentName67;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public byte rchRenderModelComponentName68;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public byte rchRenderModelComponentName69;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public byte rchRenderModelComponentName70;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public byte rchRenderModelComponentName71;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public byte rchRenderModelComponentName72;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public byte rchRenderModelComponentName73;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public byte rchRenderModelComponentName74;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public byte rchRenderModelComponentName75;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public byte rchRenderModelComponentName76;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public byte rchRenderModelComponentName77;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public byte rchRenderModelComponentName78;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		public byte rchRenderModelComponentName79;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public byte rchRenderModelComponentName80;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public byte rchRenderModelComponentName81;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public byte rchRenderModelComponentName82;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		public byte rchRenderModelComponentName83;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public byte rchRenderModelComponentName84;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public byte rchRenderModelComponentName85;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public byte rchRenderModelComponentName86;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public byte rchRenderModelComponentName87;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public byte rchRenderModelComponentName88;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public byte rchRenderModelComponentName89;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public byte rchRenderModelComponentName90;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public byte rchRenderModelComponentName91;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public byte rchRenderModelComponentName92;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public byte rchRenderModelComponentName93;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public byte rchRenderModelComponentName94;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		public byte rchRenderModelComponentName95;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public byte rchRenderModelComponentName96;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public byte rchRenderModelComponentName97;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public byte rchRenderModelComponentName98;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public byte rchRenderModelComponentName99;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public byte rchRenderModelComponentName100;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public byte rchRenderModelComponentName101;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public byte rchRenderModelComponentName102;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		public byte rchRenderModelComponentName103;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public byte rchRenderModelComponentName104;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public byte rchRenderModelComponentName105;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
		public byte rchRenderModelComponentName106;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
		public byte rchRenderModelComponentName107;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public byte rchRenderModelComponentName108;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public byte rchRenderModelComponentName109;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public byte rchRenderModelComponentName110;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		public byte rchRenderModelComponentName111;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public byte rchRenderModelComponentName112;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public byte rchRenderModelComponentName113;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		public byte rchRenderModelComponentName114;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F")]
		public byte rchRenderModelComponentName115;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public byte rchRenderModelComponentName116;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public byte rchRenderModelComponentName117;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		public byte rchRenderModelComponentName118;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		public byte rchRenderModelComponentName119;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public byte rchRenderModelComponentName120;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		public byte rchRenderModelComponentName121;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x86")]
		public byte rchRenderModelComponentName122;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x87")]
		public byte rchRenderModelComponentName123;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public byte rchRenderModelComponentName124;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public byte rchRenderModelComponentName125;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		public byte rchRenderModelComponentName126;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8B")]
		public byte rchRenderModelComponentName127;

		[Token(Token = "0x1700004A")]
		public string rchRenderModelComponentName
		{
			[Token(Token = "0x600065C")]
			[Address(RVA = "0xB30324", Offset = "0xB30324", VA = "0xB30324")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x20001A7")]
	public struct VRActiveActionSet_t
	{
		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong ulActionSet;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong ulRestrictedToDevice;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong ulSecondaryActionSet;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unPadding;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int nPriority;
	}
	[Token(Token = "0x20001A8")]
	public struct SpatialAnchorPose_t
	{
		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HmdMatrix34_t mAnchorToAbsoluteTracking;
	}
	[Token(Token = "0x20001A9")]
	public struct COpenVRContext
	{
		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_pVRSystem;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pVRChaperone;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_pVRChaperoneSetup;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr m_pVRCompositor;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntPtr m_pVROverlay;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IntPtr m_pVRResources;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntPtr m_pVRRenderModels;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IntPtr m_pVRExtendedDisplay;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IntPtr m_pVRSettings;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntPtr m_pVRApplications;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public IntPtr m_pVRTrackedCamera;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntPtr m_pVRScreenshots;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntPtr m_pVRDriverManager;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IntPtr m_pVRInput;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IntPtr m_pVRIOBuffer;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IntPtr m_pVRSpatialAnchors;
	}
	[Token(Token = "0x20001AA")]
	public class OpenVR
	{
		[Token(Token = "0x20003BF")]
		private class COpenVRContext
		{
			[Token(Token = "0x40011FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private CVRSystem m_pVRSystem;

			[Token(Token = "0x40011FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CVRChaperone m_pVRChaperone;

			[Token(Token = "0x40011FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private CVRChaperoneSetup m_pVRChaperoneSetup;

			[Token(Token = "0x40011FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRCompositor m_pVRCompositor;

			[Token(Token = "0x4001200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private CVROverlay m_pVROverlay;

			[Token(Token = "0x4001201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRRenderModels m_pVRRenderModels;

			[Token(Token = "0x4001202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CVRExtendedDisplay m_pVRExtendedDisplay;

			[Token(Token = "0x4001203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private CVRSettings m_pVRSettings;

			[Token(Token = "0x4001204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private CVRApplications m_pVRApplications;

			[Token(Token = "0x4001205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private CVRScreenshots m_pVRScreenshots;

			[Token(Token = "0x4001206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private CVRTrackedCamera m_pVRTrackedCamera;

			[Token(Token = "0x4001207")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private CVRInput m_pVRInput;

			[Token(Token = "0x4001208")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private CVRSpatialAnchors m_pVRSpatialAnchors;

			[Token(Token = "0x60010BA")]
			[Address(RVA = "0x722664", Offset = "0x722664", VA = "0x722664")]
			public COpenVRContext()
			{
			}

			[Token(Token = "0x60010BB")]
			[Address(RVA = "0x723804", Offset = "0x723804", VA = "0x723804")]
			public void Clear()
			{
			}

			[Token(Token = "0x60010BC")]
			[Address(RVA = "0x72388C", Offset = "0x72388C", VA = "0x72388C")]
			private void CheckClear()
			{
			}

			[Token(Token = "0x60010BD")]
			[Address(RVA = "0x7226FC", Offset = "0x7226FC", VA = "0x7226FC")]
			public CVRSystem VRSystem()
			{
				return null;
			}

			[Token(Token = "0x60010BE")]
			[Address(RVA = "0x722824", Offset = "0x722824", VA = "0x722824")]
			public CVRChaperone VRChaperone()
			{
				return null;
			}

			[Token(Token = "0x60010BF")]
			[Address(RVA = "0x72294C", Offset = "0x72294C", VA = "0x72294C")]
			public CVRChaperoneSetup VRChaperoneSetup()
			{
				return null;
			}

			[Token(Token = "0x60010C0")]
			[Address(RVA = "0x722A74", Offset = "0x722A74", VA = "0x722A74")]
			public CVRCompositor VRCompositor()
			{
				return null;
			}

			[Token(Token = "0x60010C1")]
			[Address(RVA = "0x722B9C", Offset = "0x722B9C", VA = "0x722B9C")]
			public CVROverlay VROverlay()
			{
				return null;
			}

			[Token(Token = "0x60010C2")]
			[Address(RVA = "0x722CC4", Offset = "0x722CC4", VA = "0x722CC4")]
			public CVRRenderModels VRRenderModels()
			{
				return null;
			}

			[Token(Token = "0x60010C3")]
			[Address(RVA = "0x722DEC", Offset = "0x722DEC", VA = "0x722DEC")]
			public CVRExtendedDisplay VRExtendedDisplay()
			{
				return null;
			}

			[Token(Token = "0x60010C4")]
			[Address(RVA = "0x722F14", Offset = "0x722F14", VA = "0x722F14")]
			public CVRSettings VRSettings()
			{
				return null;
			}

			[Token(Token = "0x60010C5")]
			[Address(RVA = "0x72303C", Offset = "0x72303C", VA = "0x72303C")]
			public CVRApplications VRApplications()
			{
				return null;
			}

			[Token(Token = "0x60010C6")]
			[Address(RVA = "0x723164", Offset = "0x723164", VA = "0x723164")]
			public CVRScreenshots VRScreenshots()
			{
				return null;
			}

			[Token(Token = "0x60010C7")]
			[Address(RVA = "0x72328C", Offset = "0x72328C", VA = "0x72328C")]
			public CVRTrackedCamera VRTrackedCamera()
			{
				return null;
			}

			[Token(Token = "0x60010C8")]
			[Address(RVA = "0x7233B4", Offset = "0x7233B4", VA = "0x7233B4")]
			public CVRInput VRInput()
			{
				return null;
			}

			[Token(Token = "0x60010C9")]
			[Address(RVA = "0x7234DC", Offset = "0x7234DC", VA = "0x7234DC")]
			public CVRSpatialAnchors VRSpatialAnchors()
			{
				return null;
			}
		}

		[Token(Token = "0x4000B88")]
		public const uint k_nDriverNone = uint.MaxValue;

		[Token(Token = "0x4000B89")]
		public const uint k_unMaxDriverDebugResponseSize = 32768u;

		[Token(Token = "0x4000B8A")]
		public const uint k_unTrackedDeviceIndex_Hmd = 0u;

		[Token(Token = "0x4000B8B")]
		public const uint k_unMaxTrackedDeviceCount = 64u;

		[Token(Token = "0x4000B8C")]
		public const uint k_unTrackedDeviceIndexOther = 4294967294u;

		[Token(Token = "0x4000B8D")]
		public const uint k_unTrackedDeviceIndexInvalid = uint.MaxValue;

		[Token(Token = "0x4000B8E")]
		public const ulong k_ulInvalidPropertyContainer = 0uL;

		[Token(Token = "0x4000B8F")]
		public const uint k_unInvalidPropertyTag = 0u;

		[Token(Token = "0x4000B90")]
		public const ulong k_ulInvalidDriverHandle = 0uL;

		[Token(Token = "0x4000B91")]
		public const uint k_unFloatPropertyTag = 1u;

		[Token(Token = "0x4000B92")]
		public const uint k_unInt32PropertyTag = 2u;

		[Token(Token = "0x4000B93")]
		public const uint k_unUint64PropertyTag = 3u;

		[Token(Token = "0x4000B94")]
		public const uint k_unBoolPropertyTag = 4u;

		[Token(Token = "0x4000B95")]
		public const uint k_unStringPropertyTag = 5u;

		[Token(Token = "0x4000B96")]
		public const uint k_unHmdMatrix34PropertyTag = 20u;

		[Token(Token = "0x4000B97")]
		public const uint k_unHmdMatrix44PropertyTag = 21u;

		[Token(Token = "0x4000B98")]
		public const uint k_unHmdVector3PropertyTag = 22u;

		[Token(Token = "0x4000B99")]
		public const uint k_unHmdVector4PropertyTag = 23u;

		[Token(Token = "0x4000B9A")]
		public const uint k_unHiddenAreaPropertyTag = 30u;

		[Token(Token = "0x4000B9B")]
		public const uint k_unPathHandleInfoTag = 31u;

		[Token(Token = "0x4000B9C")]
		public const uint k_unActionPropertyTag = 32u;

		[Token(Token = "0x4000B9D")]
		public const uint k_unInputValuePropertyTag = 33u;

		[Token(Token = "0x4000B9E")]
		public const uint k_unWildcardPropertyTag = 34u;

		[Token(Token = "0x4000B9F")]
		public const uint k_unHapticVibrationPropertyTag = 35u;

		[Token(Token = "0x4000BA0")]
		public const uint k_unSkeletonPropertyTag = 36u;

		[Token(Token = "0x4000BA1")]
		public const uint k_unSpatialAnchorPosePropertyTag = 40u;

		[Token(Token = "0x4000BA2")]
		public const uint k_unOpenVRInternalReserved_Start = 1000u;

		[Token(Token = "0x4000BA3")]
		public const uint k_unOpenVRInternalReserved_End = 10000u;

		[Token(Token = "0x4000BA4")]
		public const uint k_unMaxPropertyStringSize = 32768u;

		[Token(Token = "0x4000BA5")]
		public const ulong k_ulInvalidActionHandle = 0uL;

		[Token(Token = "0x4000BA6")]
		public const ulong k_ulInvalidActionSetHandle = 0uL;

		[Token(Token = "0x4000BA7")]
		public const ulong k_ulInvalidInputValueHandle = 0uL;

		[Token(Token = "0x4000BA8")]
		public const uint k_unControllerStateAxisCount = 5u;

		[Token(Token = "0x4000BA9")]
		public const ulong k_ulOverlayHandleInvalid = 0uL;

		[Token(Token = "0x4000BAA")]
		public const uint k_unScreenshotHandleInvalid = 0u;

		[Token(Token = "0x4000BAB")]
		public const string IVRSystem_Version = "IVRSystem_019";

		[Token(Token = "0x4000BAC")]
		public const string IVRExtendedDisplay_Version = "IVRExtendedDisplay_001";

		[Token(Token = "0x4000BAD")]
		public const string IVRTrackedCamera_Version = "IVRTrackedCamera_003";

		[Token(Token = "0x4000BAE")]
		public const uint k_unMaxApplicationKeyLength = 128u;

		[Token(Token = "0x4000BAF")]
		public const string k_pch_MimeType_HomeApp = "vr/home";

		[Token(Token = "0x4000BB0")]
		public const string k_pch_MimeType_GameTheater = "vr/game_theater";

		[Token(Token = "0x4000BB1")]
		public const string IVRApplications_Version = "IVRApplications_006";

		[Token(Token = "0x4000BB2")]
		public const string IVRChaperone_Version = "IVRChaperone_003";

		[Token(Token = "0x4000BB3")]
		public const string IVRChaperoneSetup_Version = "IVRChaperoneSetup_005";

		[Token(Token = "0x4000BB4")]
		public const string IVRCompositor_Version = "IVRCompositor_022";

		[Token(Token = "0x4000BB5")]
		public const uint k_unVROverlayMaxKeyLength = 128u;

		[Token(Token = "0x4000BB6")]
		public const uint k_unVROverlayMaxNameLength = 128u;

		[Token(Token = "0x4000BB7")]
		public const uint k_unMaxOverlayCount = 64u;

		[Token(Token = "0x4000BB8")]
		public const uint k_unMaxOverlayIntersectionMaskPrimitivesCount = 32u;

		[Token(Token = "0x4000BB9")]
		public const string IVROverlay_Version = "IVROverlay_018";

		[Token(Token = "0x4000BBA")]
		public const string k_pch_Controller_Component_GDC2015 = "gdc2015";

		[Token(Token = "0x4000BBB")]
		public const string k_pch_Controller_Component_Base = "base";

		[Token(Token = "0x4000BBC")]
		public const string k_pch_Controller_Component_Tip = "tip";

		[Token(Token = "0x4000BBD")]
		public const string k_pch_Controller_Component_HandGrip = "handgrip";

		[Token(Token = "0x4000BBE")]
		public const string k_pch_Controller_Component_Status = "status";

		[Token(Token = "0x4000BBF")]
		public const string IVRRenderModels_Version = "IVRRenderModels_006";

		[Token(Token = "0x4000BC0")]
		public const uint k_unNotificationTextMaxSize = 256u;

		[Token(Token = "0x4000BC1")]
		public const string IVRNotifications_Version = "IVRNotifications_002";

		[Token(Token = "0x4000BC2")]
		public const uint k_unMaxSettingsKeyLength = 128u;

		[Token(Token = "0x4000BC3")]
		public const string IVRSettings_Version = "IVRSettings_002";

		[Token(Token = "0x4000BC4")]
		public const string k_pch_SteamVR_Section = "steamvr";

		[Token(Token = "0x4000BC5")]
		public const string k_pch_SteamVR_RequireHmd_String = "requireHmd";

		[Token(Token = "0x4000BC6")]
		public const string k_pch_SteamVR_ForcedDriverKey_String = "forcedDriver";

		[Token(Token = "0x4000BC7")]
		public const string k_pch_SteamVR_ForcedHmdKey_String = "forcedHmd";

		[Token(Token = "0x4000BC8")]
		public const string k_pch_SteamVR_DisplayDebug_Bool = "displayDebug";

		[Token(Token = "0x4000BC9")]
		public const string k_pch_SteamVR_DebugProcessPipe_String = "debugProcessPipe";

		[Token(Token = "0x4000BCA")]
		public const string k_pch_SteamVR_DisplayDebugX_Int32 = "displayDebugX";

		[Token(Token = "0x4000BCB")]
		public const string k_pch_SteamVR_DisplayDebugY_Int32 = "displayDebugY";

		[Token(Token = "0x4000BCC")]
		public const string k_pch_SteamVR_SendSystemButtonToAllApps_Bool = "sendSystemButtonToAllApps";

		[Token(Token = "0x4000BCD")]
		public const string k_pch_SteamVR_LogLevel_Int32 = "loglevel";

		[Token(Token = "0x4000BCE")]
		public const string k_pch_SteamVR_IPD_Float = "ipd";

		[Token(Token = "0x4000BCF")]
		public const string k_pch_SteamVR_Background_String = "background";

		[Token(Token = "0x4000BD0")]
		public const string k_pch_SteamVR_BackgroundUseDomeProjection_Bool = "backgroundUseDomeProjection";

		[Token(Token = "0x4000BD1")]
		public const string k_pch_SteamVR_BackgroundCameraHeight_Float = "backgroundCameraHeight";

		[Token(Token = "0x4000BD2")]
		public const string k_pch_SteamVR_BackgroundDomeRadius_Float = "backgroundDomeRadius";

		[Token(Token = "0x4000BD3")]
		public const string k_pch_SteamVR_GridColor_String = "gridColor";

		[Token(Token = "0x4000BD4")]
		public const string k_pch_SteamVR_PlayAreaColor_String = "playAreaColor";

		[Token(Token = "0x4000BD5")]
		public const string k_pch_SteamVR_ShowStage_Bool = "showStage";

		[Token(Token = "0x4000BD6")]
		public const string k_pch_SteamVR_ActivateMultipleDrivers_Bool = "activateMultipleDrivers";

		[Token(Token = "0x4000BD7")]
		public const string k_pch_SteamVR_DirectMode_Bool = "directMode";

		[Token(Token = "0x4000BD8")]
		public const string k_pch_SteamVR_DirectModeEdidVid_Int32 = "directModeEdidVid";

		[Token(Token = "0x4000BD9")]
		public const string k_pch_SteamVR_DirectModeEdidPid_Int32 = "directModeEdidPid";

		[Token(Token = "0x4000BDA")]
		public const string k_pch_SteamVR_UsingSpeakers_Bool = "usingSpeakers";

		[Token(Token = "0x4000BDB")]
		public const string k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = "speakersForwardYawOffsetDegrees";

		[Token(Token = "0x4000BDC")]
		public const string k_pch_SteamVR_BaseStationPowerManagement_Bool = "basestationPowerManagement";

		[Token(Token = "0x4000BDD")]
		public const string k_pch_SteamVR_NeverKillProcesses_Bool = "neverKillProcesses";

		[Token(Token = "0x4000BDE")]
		public const string k_pch_SteamVR_SupersampleScale_Float = "supersampleScale";

		[Token(Token = "0x4000BDF")]
		public const string k_pch_SteamVR_AllowAsyncReprojection_Bool = "allowAsyncReprojection";

		[Token(Token = "0x4000BE0")]
		public const string k_pch_SteamVR_AllowReprojection_Bool = "allowInterleavedReprojection";

		[Token(Token = "0x4000BE1")]
		public const string k_pch_SteamVR_ForceReprojection_Bool = "forceReprojection";

		[Token(Token = "0x4000BE2")]
		public const string k_pch_SteamVR_ForceFadeOnBadTracking_Bool = "forceFadeOnBadTracking";

		[Token(Token = "0x4000BE3")]
		public const string k_pch_SteamVR_DefaultMirrorView_Int32 = "defaultMirrorView";

		[Token(Token = "0x4000BE4")]
		public const string k_pch_SteamVR_ShowMirrorView_Bool = "showMirrorView";

		[Token(Token = "0x4000BE5")]
		public const string k_pch_SteamVR_MirrorViewGeometry_String = "mirrorViewGeometry";

		[Token(Token = "0x4000BE6")]
		public const string k_pch_SteamVR_StartMonitorFromAppLaunch = "startMonitorFromAppLaunch";

		[Token(Token = "0x4000BE7")]
		public const string k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = "startCompositorFromAppLaunch";

		[Token(Token = "0x4000BE8")]
		public const string k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = "startDashboardFromAppLaunch";

		[Token(Token = "0x4000BE9")]
		public const string k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = "startOverlayAppsFromDashboard";

		[Token(Token = "0x4000BEA")]
		public const string k_pch_SteamVR_EnableHomeApp = "enableHomeApp";

		[Token(Token = "0x4000BEB")]
		public const string k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = "CycleBackgroundImageTimeSec";

		[Token(Token = "0x4000BEC")]
		public const string k_pch_SteamVR_RetailDemo_Bool = "retailDemo";

		[Token(Token = "0x4000BED")]
		public const string k_pch_SteamVR_IpdOffset_Float = "ipdOffset";

		[Token(Token = "0x4000BEE")]
		public const string k_pch_SteamVR_AllowSupersampleFiltering_Bool = "allowSupersampleFiltering";

		[Token(Token = "0x4000BEF")]
		public const string k_pch_SteamVR_SupersampleManualOverride_Bool = "supersampleManualOverride";

		[Token(Token = "0x4000BF0")]
		public const string k_pch_SteamVR_EnableLinuxVulkanAsync_Bool = "enableLinuxVulkanAsync";

		[Token(Token = "0x4000BF1")]
		public const string k_pch_SteamVR_AllowDisplayLockedMode_Bool = "allowDisplayLockedMode";

		[Token(Token = "0x4000BF2")]
		public const string k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool = "haveStartedTutorialForNativeChaperoneDriver";

		[Token(Token = "0x4000BF3")]
		public const string k_pch_SteamVR_ForceWindows32bitVRMonitor = "forceWindows32BitVRMonitor";

		[Token(Token = "0x4000BF4")]
		public const string k_pch_SteamVR_DebugInput = "debugInput";

		[Token(Token = "0x4000BF5")]
		public const string k_pch_SteamVR_LegacyInputRebinding = "legacyInputRebinding";

		[Token(Token = "0x4000BF6")]
		public const string k_pch_SteamVR_DebugInputBinding = "debugInputBinding";

		[Token(Token = "0x4000BF7")]
		public const string k_pch_SteamVR_InputBindingUIBlock = "inputBindingUI";

		[Token(Token = "0x4000BF8")]
		public const string k_pch_SteamVR_RenderCameraMode = "renderCameraMode";

		[Token(Token = "0x4000BF9")]
		public const string k_pch_Lighthouse_Section = "driver_lighthouse";

		[Token(Token = "0x4000BFA")]
		public const string k_pch_Lighthouse_DisableIMU_Bool = "disableimu";

		[Token(Token = "0x4000BFB")]
		public const string k_pch_Lighthouse_DisableIMUExceptHMD_Bool = "disableimuexcepthmd";

		[Token(Token = "0x4000BFC")]
		public const string k_pch_Lighthouse_UseDisambiguation_String = "usedisambiguation";

		[Token(Token = "0x4000BFD")]
		public const string k_pch_Lighthouse_DisambiguationDebug_Int32 = "disambiguationdebug";

		[Token(Token = "0x4000BFE")]
		public const string k_pch_Lighthouse_PrimaryBasestation_Int32 = "primarybasestation";

		[Token(Token = "0x4000BFF")]
		public const string k_pch_Lighthouse_DBHistory_Bool = "dbhistory";

		[Token(Token = "0x4000C00")]
		public const string k_pch_Lighthouse_EnableBluetooth_Bool = "enableBluetooth";

		[Token(Token = "0x4000C01")]
		public const string k_pch_Lighthouse_PowerManagedBaseStations_String = "PowerManagedBaseStations";

		[Token(Token = "0x4000C02")]
		public const string k_pch_Null_Section = "driver_null";

		[Token(Token = "0x4000C03")]
		public const string k_pch_Null_SerialNumber_String = "serialNumber";

		[Token(Token = "0x4000C04")]
		public const string k_pch_Null_ModelNumber_String = "modelNumber";

		[Token(Token = "0x4000C05")]
		public const string k_pch_Null_WindowX_Int32 = "windowX";

		[Token(Token = "0x4000C06")]
		public const string k_pch_Null_WindowY_Int32 = "windowY";

		[Token(Token = "0x4000C07")]
		public const string k_pch_Null_WindowWidth_Int32 = "windowWidth";

		[Token(Token = "0x4000C08")]
		public const string k_pch_Null_WindowHeight_Int32 = "windowHeight";

		[Token(Token = "0x4000C09")]
		public const string k_pch_Null_RenderWidth_Int32 = "renderWidth";

		[Token(Token = "0x4000C0A")]
		public const string k_pch_Null_RenderHeight_Int32 = "renderHeight";

		[Token(Token = "0x4000C0B")]
		public const string k_pch_Null_SecondsFromVsyncToPhotons_Float = "secondsFromVsyncToPhotons";

		[Token(Token = "0x4000C0C")]
		public const string k_pch_Null_DisplayFrequency_Float = "displayFrequency";

		[Token(Token = "0x4000C0D")]
		public const string k_pch_UserInterface_Section = "userinterface";

		[Token(Token = "0x4000C0E")]
		public const string k_pch_UserInterface_StatusAlwaysOnTop_Bool = "StatusAlwaysOnTop";

		[Token(Token = "0x4000C0F")]
		public const string k_pch_UserInterface_MinimizeToTray_Bool = "MinimizeToTray";

		[Token(Token = "0x4000C10")]
		public const string k_pch_UserInterface_Screenshots_Bool = "screenshots";

		[Token(Token = "0x4000C11")]
		public const string k_pch_UserInterface_ScreenshotType_Int = "screenshotType";

		[Token(Token = "0x4000C12")]
		public const string k_pch_Notifications_Section = "notifications";

		[Token(Token = "0x4000C13")]
		public const string k_pch_Notifications_DoNotDisturb_Bool = "DoNotDisturb";

		[Token(Token = "0x4000C14")]
		public const string k_pch_Keyboard_Section = "keyboard";

		[Token(Token = "0x4000C15")]
		public const string k_pch_Keyboard_TutorialCompletions = "TutorialCompletions";

		[Token(Token = "0x4000C16")]
		public const string k_pch_Keyboard_ScaleX = "ScaleX";

		[Token(Token = "0x4000C17")]
		public const string k_pch_Keyboard_ScaleY = "ScaleY";

		[Token(Token = "0x4000C18")]
		public const string k_pch_Keyboard_OffsetLeftX = "OffsetLeftX";

		[Token(Token = "0x4000C19")]
		public const string k_pch_Keyboard_OffsetRightX = "OffsetRightX";

		[Token(Token = "0x4000C1A")]
		public const string k_pch_Keyboard_OffsetY = "OffsetY";

		[Token(Token = "0x4000C1B")]
		public const string k_pch_Keyboard_Smoothing = "Smoothing";

		[Token(Token = "0x4000C1C")]
		public const string k_pch_Perf_Section = "perfcheck";

		[Token(Token = "0x4000C1D")]
		public const string k_pch_Perf_HeuristicActive_Bool = "heuristicActive";

		[Token(Token = "0x4000C1E")]
		public const string k_pch_Perf_NotifyInHMD_Bool = "warnInHMD";

		[Token(Token = "0x4000C1F")]
		public const string k_pch_Perf_NotifyOnlyOnce_Bool = "warnOnlyOnce";

		[Token(Token = "0x4000C20")]
		public const string k_pch_Perf_AllowTimingStore_Bool = "allowTimingStore";

		[Token(Token = "0x4000C21")]
		public const string k_pch_Perf_SaveTimingsOnExit_Bool = "saveTimingsOnExit";

		[Token(Token = "0x4000C22")]
		public const string k_pch_Perf_TestData_Float = "perfTestData";

		[Token(Token = "0x4000C23")]
		public const string k_pch_Perf_LinuxGPUProfiling_Bool = "linuxGPUProfiling";

		[Token(Token = "0x4000C24")]
		public const string k_pch_CollisionBounds_Section = "collisionBounds";

		[Token(Token = "0x4000C25")]
		public const string k_pch_CollisionBounds_Style_Int32 = "CollisionBoundsStyle";

		[Token(Token = "0x4000C26")]
		public const string k_pch_CollisionBounds_GroundPerimeterOn_Bool = "CollisionBoundsGroundPerimeterOn";

		[Token(Token = "0x4000C27")]
		public const string k_pch_CollisionBounds_CenterMarkerOn_Bool = "CollisionBoundsCenterMarkerOn";

		[Token(Token = "0x4000C28")]
		public const string k_pch_CollisionBounds_PlaySpaceOn_Bool = "CollisionBoundsPlaySpaceOn";

		[Token(Token = "0x4000C29")]
		public const string k_pch_CollisionBounds_FadeDistance_Float = "CollisionBoundsFadeDistance";

		[Token(Token = "0x4000C2A")]
		public const string k_pch_CollisionBounds_ColorGammaR_Int32 = "CollisionBoundsColorGammaR";

		[Token(Token = "0x4000C2B")]
		public const string k_pch_CollisionBounds_ColorGammaG_Int32 = "CollisionBoundsColorGammaG";

		[Token(Token = "0x4000C2C")]
		public const string k_pch_CollisionBounds_ColorGammaB_Int32 = "CollisionBoundsColorGammaB";

		[Token(Token = "0x4000C2D")]
		public const string k_pch_CollisionBounds_ColorGammaA_Int32 = "CollisionBoundsColorGammaA";

		[Token(Token = "0x4000C2E")]
		public const string k_pch_Camera_Section = "camera";

		[Token(Token = "0x4000C2F")]
		public const string k_pch_Camera_EnableCamera_Bool = "enableCamera";

		[Token(Token = "0x4000C30")]
		public const string k_pch_Camera_EnableCameraInDashboard_Bool = "enableCameraInDashboard";

		[Token(Token = "0x4000C31")]
		public const string k_pch_Camera_EnableCameraForCollisionBounds_Bool = "enableCameraForCollisionBounds";

		[Token(Token = "0x4000C32")]
		public const string k_pch_Camera_EnableCameraForRoomView_Bool = "enableCameraForRoomView";

		[Token(Token = "0x4000C33")]
		public const string k_pch_Camera_BoundsColorGammaR_Int32 = "cameraBoundsColorGammaR";

		[Token(Token = "0x4000C34")]
		public const string k_pch_Camera_BoundsColorGammaG_Int32 = "cameraBoundsColorGammaG";

		[Token(Token = "0x4000C35")]
		public const string k_pch_Camera_BoundsColorGammaB_Int32 = "cameraBoundsColorGammaB";

		[Token(Token = "0x4000C36")]
		public const string k_pch_Camera_BoundsColorGammaA_Int32 = "cameraBoundsColorGammaA";

		[Token(Token = "0x4000C37")]
		public const string k_pch_Camera_BoundsStrength_Int32 = "cameraBoundsStrength";

		[Token(Token = "0x4000C38")]
		public const string k_pch_Camera_RoomViewMode_Int32 = "cameraRoomViewMode";

		[Token(Token = "0x4000C39")]
		public const string k_pch_audio_Section = "audio";

		[Token(Token = "0x4000C3A")]
		public const string k_pch_audio_OnPlaybackDevice_String = "onPlaybackDevice";

		[Token(Token = "0x4000C3B")]
		public const string k_pch_audio_OnRecordDevice_String = "onRecordDevice";

		[Token(Token = "0x4000C3C")]
		public const string k_pch_audio_OnPlaybackMirrorDevice_String = "onPlaybackMirrorDevice";

		[Token(Token = "0x4000C3D")]
		public const string k_pch_audio_OffPlaybackDevice_String = "offPlaybackDevice";

		[Token(Token = "0x4000C3E")]
		public const string k_pch_audio_OffRecordDevice_String = "offRecordDevice";

		[Token(Token = "0x4000C3F")]
		public const string k_pch_audio_VIVEHDMIGain = "viveHDMIGain";

		[Token(Token = "0x4000C40")]
		public const string k_pch_Power_Section = "power";

		[Token(Token = "0x4000C41")]
		public const string k_pch_Power_PowerOffOnExit_Bool = "powerOffOnExit";

		[Token(Token = "0x4000C42")]
		public const string k_pch_Power_TurnOffScreensTimeout_Float = "turnOffScreensTimeout";

		[Token(Token = "0x4000C43")]
		public const string k_pch_Power_TurnOffControllersTimeout_Float = "turnOffControllersTimeout";

		[Token(Token = "0x4000C44")]
		public const string k_pch_Power_ReturnToWatchdogTimeout_Float = "returnToWatchdogTimeout";

		[Token(Token = "0x4000C45")]
		public const string k_pch_Power_AutoLaunchSteamVROnButtonPress = "autoLaunchSteamVROnButtonPress";

		[Token(Token = "0x4000C46")]
		public const string k_pch_Power_PauseCompositorOnStandby_Bool = "pauseCompositorOnStandby";

		[Token(Token = "0x4000C47")]
		public const string k_pch_Dashboard_Section = "dashboard";

		[Token(Token = "0x4000C48")]
		public const string k_pch_Dashboard_EnableDashboard_Bool = "enableDashboard";

		[Token(Token = "0x4000C49")]
		public const string k_pch_Dashboard_ArcadeMode_Bool = "arcadeMode";

		[Token(Token = "0x4000C4A")]
		public const string k_pch_Dashboard_EnableWebUI = "webUI";

		[Token(Token = "0x4000C4B")]
		public const string k_pch_Dashboard_EnableWebUIDevTools = "webUIDevTools";

		[Token(Token = "0x4000C4C")]
		public const string k_pch_Dashboard_EnableWebUIDashboardReplacement = "webUIDashboard";

		[Token(Token = "0x4000C4D")]
		public const string k_pch_modelskin_Section = "modelskins";

		[Token(Token = "0x4000C4E")]
		public const string k_pch_Driver_Enable_Bool = "enable";

		[Token(Token = "0x4000C4F")]
		public const string k_pch_WebInterface_Section = "WebInterface";

		[Token(Token = "0x4000C50")]
		public const string k_pch_WebInterface_WebEnable_Bool = "WebEnable";

		[Token(Token = "0x4000C51")]
		public const string k_pch_WebInterface_WebPort_String = "WebPort";

		[Token(Token = "0x4000C52")]
		public const string k_pch_TrackingOverride_Section = "TrackingOverrides";

		[Token(Token = "0x4000C53")]
		public const string k_pch_App_BindingAutosaveURLSuffix_String = "AutosaveURL";

		[Token(Token = "0x4000C54")]
		public const string k_pch_App_BindingCurrentURLSuffix_String = "CurrentURL";

		[Token(Token = "0x4000C55")]
		public const string k_pch_App_NeedToUpdateAutosaveSuffix_Bool = "NeedToUpdateAutosave";

		[Token(Token = "0x4000C56")]
		public const string k_pch_App_ActionManifestURL_String = "ActionManifestURL";

		[Token(Token = "0x4000C57")]
		public const string k_pch_Trackers_Section = "trackers";

		[Token(Token = "0x4000C58")]
		public const string IVRScreenshots_Version = "IVRScreenshots_001";

		[Token(Token = "0x4000C59")]
		public const string IVRResources_Version = "IVRResources_001";

		[Token(Token = "0x4000C5A")]
		public const string IVRDriverManager_Version = "IVRDriverManager_001";

		[Token(Token = "0x4000C5B")]
		public const uint k_unMaxActionNameLength = 64u;

		[Token(Token = "0x4000C5C")]
		public const uint k_unMaxActionSetNameLength = 64u;

		[Token(Token = "0x4000C5D")]
		public const uint k_unMaxActionOriginCount = 16u;

		[Token(Token = "0x4000C5E")]
		public const string IVRInput_Version = "IVRInput_004";

		[Token(Token = "0x4000C5F")]
		public const ulong k_ulInvalidIOBufferHandle = 0uL;

		[Token(Token = "0x4000C60")]
		public const string IVRIOBuffer_Version = "IVRIOBuffer_001";

		[Token(Token = "0x4000C61")]
		public const uint k_ulInvalidSpatialAnchorHandle = 0u;

		[Token(Token = "0x4000C62")]
		public const string IVRSpatialAnchors_Version = "IVRSpatialAnchors_001";

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5914D8", Offset = "0x5914D8")]
		private static uint <VRToken>k__BackingField;

		[Token(Token = "0x4000C64")]
		private const string FnTable_Prefix = "FnTable:";

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static COpenVRContext _OpenVRInternal_ModuleContext;

		[Token(Token = "0x1700004B")]
		private static uint VRToken
		{
			[Token(Token = "0x6000666")]
			[Address(RVA = "0x7224B4", Offset = "0x7224B4", VA = "0x7224B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594164", Offset = "0x594164")]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x6000667")]
			[Address(RVA = "0x72251C", Offset = "0x72251C", VA = "0x72251C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594174", Offset = "0x594174")]
			set
			{
			}
		}

		[Token(Token = "0x1700004C")]
		private static COpenVRContext OpenVRInternal_ModuleContext
		{
			[Token(Token = "0x6000668")]
			[Address(RVA = "0x722588", Offset = "0x722588", VA = "0x722588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004D")]
		public static CVRSystem System
		{
			[Token(Token = "0x6000669")]
			[Address(RVA = "0x722694", Offset = "0x722694", VA = "0x722694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		public static CVRChaperone Chaperone
		{
			[Token(Token = "0x600066A")]
			[Address(RVA = "0x7227BC", Offset = "0x7227BC", VA = "0x7227BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		public static CVRChaperoneSetup ChaperoneSetup
		{
			[Token(Token = "0x600066B")]
			[Address(RVA = "0x7228E4", Offset = "0x7228E4", VA = "0x7228E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		public static CVRCompositor Compositor
		{
			[Token(Token = "0x600066C")]
			[Address(RVA = "0x722A0C", Offset = "0x722A0C", VA = "0x722A0C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000051")]
		public static CVROverlay Overlay
		{
			[Token(Token = "0x600066D")]
			[Address(RVA = "0x722B34", Offset = "0x722B34", VA = "0x722B34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		public static CVRRenderModels RenderModels
		{
			[Token(Token = "0x600066E")]
			[Address(RVA = "0x722C5C", Offset = "0x722C5C", VA = "0x722C5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		public static CVRExtendedDisplay ExtendedDisplay
		{
			[Token(Token = "0x600066F")]
			[Address(RVA = "0x722D84", Offset = "0x722D84", VA = "0x722D84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		public static CVRSettings Settings
		{
			[Token(Token = "0x6000670")]
			[Address(RVA = "0x722EAC", Offset = "0x722EAC", VA = "0x722EAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		public static CVRApplications Applications
		{
			[Token(Token = "0x6000671")]
			[Address(RVA = "0x722FD4", Offset = "0x722FD4", VA = "0x722FD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		public static CVRScreenshots Screenshots
		{
			[Token(Token = "0x6000672")]
			[Address(RVA = "0x7230FC", Offset = "0x7230FC", VA = "0x7230FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		public static CVRTrackedCamera TrackedCamera
		{
			[Token(Token = "0x6000673")]
			[Address(RVA = "0x723224", Offset = "0x723224", VA = "0x723224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		public static CVRInput Input
		{
			[Token(Token = "0x6000674")]
			[Address(RVA = "0x72334C", Offset = "0x72334C", VA = "0x72334C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		public static CVRSpatialAnchors SpatialAnchors
		{
			[Token(Token = "0x6000675")]
			[Address(RVA = "0x723474", Offset = "0x723474", VA = "0x723474")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x721F38", Offset = "0x721F38", VA = "0x721F38")]
		public static uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType)
		{
			return default(uint);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0x721FCC", Offset = "0x721FCC", VA = "0x721FCC")]
		public static uint InitInternal2(ref EVRInitError peError, EVRApplicationType eApplicationType, string pchStartupInfo)
		{
			return default(uint);
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0x722084", Offset = "0x722084", VA = "0x722084")]
		public static void ShutdownInternal()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0x7220F8", Offset = "0x7220F8", VA = "0x7220F8")]
		public static bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0x722178", Offset = "0x722178", VA = "0x722178")]
		public static bool IsRuntimeInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0x7221F8", Offset = "0x7221F8", VA = "0x7221F8")]
		public static string GetStringForHmdError(EVRInitError error)
		{
			return null;
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0x7222F0", Offset = "0x7222F0", VA = "0x7222F0")]
		public static IntPtr GetGenericInterface(string pchInterfaceVersion, ref EVRInitError peError)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0x72239C", Offset = "0x72239C", VA = "0x72239C")]
		public static bool IsInterfaceVersionValid(string pchInterfaceVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0x72243C", Offset = "0x72243C", VA = "0x72243C")]
		public static uint GetInitToken()
		{
			return default(uint);
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0x72359C", Offset = "0x72359C", VA = "0x72359C")]
		public static CVRSystem Init(ref EVRInitError peError, EVRApplicationType eApplicationType = EVRApplicationType.VRApplication_Scene, string pchStartupInfo = "")
		{
			return null;
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0x723824", Offset = "0x723824", VA = "0x723824")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0x723880", Offset = "0x723880", VA = "0x723880")]
		public OpenVR()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class SteamVR : IDisposable
	{
		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _enabled;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static SteamVR _instance;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5914E8", Offset = "0x5914E8")]
		private static SteamVR_Settings <settings>k__BackingField;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5914F8", Offset = "0x5914F8")]
		private CVRSystem <hmd>k__BackingField;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591508", Offset = "0x591508")]
		private CVRCompositor <compositor>k__BackingField;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591518", Offset = "0x591518")]
		private CVROverlay <overlay>k__BackingField;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591528", Offset = "0x591528")]
		private static bool <initializing>k__BackingField;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591538", Offset = "0x591538")]
		private static bool <calibrating>k__BackingField;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591548", Offset = "0x591548")]
		private static bool <outOfRange>k__BackingField;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool[] connected;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591558", Offset = "0x591558")]
		private float <sceneWidth>k__BackingField;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591568", Offset = "0x591568")]
		private float <sceneHeight>k__BackingField;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591578", Offset = "0x591578")]
		private float <aspect>k__BackingField;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591588", Offset = "0x591588")]
		private float <fieldOfView>k__BackingField;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591598", Offset = "0x591598")]
		private Vector2 <tanHalfFov>k__BackingField;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5915A8", Offset = "0x5915A8")]
		private VRTextureBounds_t[] <textureBounds>k__BackingField;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5915B8", Offset = "0x5915B8")]
		private SteamVR_Utils.RigidTransform[] <eyes>k__BackingField;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ETextureType textureType;

		[Token(Token = "0x4000C78")]
		public const string defaultUnityAppKeyTemplate = "application.generated.unity.{0}.exe";

		[Token(Token = "0x4000C79")]
		public const string defaultAppKeyTemplate = "application.generated.{0}";

		[Token(Token = "0x1700005A")]
		public static bool active
		{
			[Token(Token = "0x600067A")]
			[Address(RVA = "0x723A50", Offset = "0x723A50", VA = "0x723A50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005B")]
		public static bool enabled
		{
			[Token(Token = "0x600067B")]
			[Address(RVA = "0x723AC0", Offset = "0x723AC0", VA = "0x723AC0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600067C")]
			[Address(RVA = "0x723B5C", Offset = "0x723B5C", VA = "0x723B5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public static SteamVR instance
		{
			[Token(Token = "0x600067D")]
			[Address(RVA = "0x723E18", Offset = "0x723E18", VA = "0x723E18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		public static bool usingNativeSupport
		{
			[Token(Token = "0x600067F")]
			[Address(RVA = "0x724A5C", Offset = "0x724A5C", VA = "0x724A5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005E")]
		public static SteamVR_Settings settings
		{
			[Token(Token = "0x6000680")]
			[Address(RVA = "0x724AC8", Offset = "0x724AC8", VA = "0x724AC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594184", Offset = "0x594184")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000681")]
			[Address(RVA = "0x724B30", Offset = "0x724B30", VA = "0x724B30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594194", Offset = "0x594194")]
			private set
			{
			}
		}

		[Token(Token = "0x1700005F")]
		public CVRSystem hmd
		{
			[Token(Token = "0x6000684")]
			[Address(RVA = "0x7257D4", Offset = "0x7257D4", VA = "0x7257D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5941A4", Offset = "0x5941A4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000685")]
			[Address(RVA = "0x7257DC", Offset = "0x7257DC", VA = "0x7257DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5941B4", Offset = "0x5941B4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000060")]
		public CVRCompositor compositor
		{
			[Token(Token = "0x6000686")]
			[Address(RVA = "0x7257E4", Offset = "0x7257E4", VA = "0x7257E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5941C4", Offset = "0x5941C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000687")]
			[Address(RVA = "0x7257EC", Offset = "0x7257EC", VA = "0x7257EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5941D4", Offset = "0x5941D4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000061")]
		public CVROverlay overlay
		{
			[Token(Token = "0x6000688")]
			[Address(RVA = "0x7257F4", Offset = "0x7257F4", VA = "0x7257F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5941E4", Offset = "0x5941E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000689")]
			[Address(RVA = "0x7257FC", Offset = "0x7257FC", VA = "0x7257FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5941F4", Offset = "0x5941F4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000062")]
		public static bool initializing
		{
			[Token(Token = "0x600068A")]
			[Address(RVA = "0x725804", Offset = "0x725804", VA = "0x725804")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594204", Offset = "0x594204")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600068B")]
			[Address(RVA = "0x72586C", Offset = "0x72586C", VA = "0x72586C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594214", Offset = "0x594214")]
			private set
			{
			}
		}

		[Token(Token = "0x17000063")]
		public static bool calibrating
		{
			[Token(Token = "0x600068C")]
			[Address(RVA = "0x7258DC", Offset = "0x7258DC", VA = "0x7258DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594224", Offset = "0x594224")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600068D")]
			[Address(RVA = "0x725944", Offset = "0x725944", VA = "0x725944")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594234", Offset = "0x594234")]
			private set
			{
			}
		}

		[Token(Token = "0x17000064")]
		public static bool outOfRange
		{
			[Token(Token = "0x600068E")]
			[Address(RVA = "0x7259B4", Offset = "0x7259B4", VA = "0x7259B4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594244", Offset = "0x594244")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600068F")]
			[Address(RVA = "0x725A1C", Offset = "0x725A1C", VA = "0x725A1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594254", Offset = "0x594254")]
			private set
			{
			}
		}

		[Token(Token = "0x17000065")]
		public float sceneWidth
		{
			[Token(Token = "0x6000690")]
			[Address(RVA = "0x725A8C", Offset = "0x725A8C", VA = "0x725A8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594264", Offset = "0x594264")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000691")]
			[Address(RVA = "0x725A94", Offset = "0x725A94", VA = "0x725A94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594274", Offset = "0x594274")]
			private set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public float sceneHeight
		{
			[Token(Token = "0x6000692")]
			[Address(RVA = "0x725A9C", Offset = "0x725A9C", VA = "0x725A9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594284", Offset = "0x594284")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000693")]
			[Address(RVA = "0x725AA4", Offset = "0x725AA4", VA = "0x725AA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594294", Offset = "0x594294")]
			private set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public float aspect
		{
			[Token(Token = "0x6000694")]
			[Address(RVA = "0x725AAC", Offset = "0x725AAC", VA = "0x725AAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5942A4", Offset = "0x5942A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000695")]
			[Address(RVA = "0x725AB4", Offset = "0x725AB4", VA = "0x725AB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5942B4", Offset = "0x5942B4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public float fieldOfView
		{
			[Token(Token = "0x6000696")]
			[Address(RVA = "0x725ABC", Offset = "0x725ABC", VA = "0x725ABC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5942C4", Offset = "0x5942C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000697")]
			[Address(RVA = "0x725AC4", Offset = "0x725AC4", VA = "0x725AC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5942D4", Offset = "0x5942D4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public Vector2 tanHalfFov
		{
			[Token(Token = "0x6000698")]
			[Address(RVA = "0x725ACC", Offset = "0x725ACC", VA = "0x725ACC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5942E4", Offset = "0x5942E4")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000699")]
			[Address(RVA = "0x725AD4", Offset = "0x725AD4", VA = "0x725AD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5942F4", Offset = "0x5942F4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public VRTextureBounds_t[] textureBounds
		{
			[Token(Token = "0x600069A")]
			[Address(RVA = "0x725ADC", Offset = "0x725ADC", VA = "0x725ADC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594304", Offset = "0x594304")]
			get
			{
				return null;
			}
			[Token(Token = "0x600069B")]
			[Address(RVA = "0x725AE4", Offset = "0x725AE4", VA = "0x725AE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594314", Offset = "0x594314")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public SteamVR_Utils.RigidTransform[] eyes
		{
			[Token(Token = "0x600069C")]
			[Address(RVA = "0x725AEC", Offset = "0x725AEC", VA = "0x725AEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594324", Offset = "0x594324")]
			get
			{
				return null;
			}
			[Token(Token = "0x600069D")]
			[Address(RVA = "0x725AF4", Offset = "0x725AF4", VA = "0x725AF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594334", Offset = "0x594334")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public string hmd_TrackingSystemName
		{
			[Token(Token = "0x600069E")]
			[Address(RVA = "0x725AFC", Offset = "0x725AFC", VA = "0x725AFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006D")]
		public string hmd_ModelNumber
		{
			[Token(Token = "0x600069F")]
			[Address(RVA = "0x725C50", Offset = "0x725C50", VA = "0x725C50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		public string hmd_SerialNumber
		{
			[Token(Token = "0x60006A0")]
			[Address(RVA = "0x725C5C", Offset = "0x725C5C", VA = "0x725C5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		public float hmd_SecondsFromVsyncToPhotons
		{
			[Token(Token = "0x60006A1")]
			[Address(RVA = "0x725C68", Offset = "0x725C68", VA = "0x725C68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000070")]
		public float hmd_DisplayFrequency
		{
			[Token(Token = "0x60006A2")]
			[Address(RVA = "0x725CB4", Offset = "0x725CB4", VA = "0x725CB4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0x723C10", Offset = "0x723C10", VA = "0x723C10")]
		public static void Initialize(bool forceUnityVRMode = false)
		{
		}

		[Token(Token = "0x6000682")]
		[Address(RVA = "0x723F30", Offset = "0x723F30", VA = "0x723F30")]
		private static SteamVR CreateInstance()
		{
			return null;
		}

		[Token(Token = "0x6000683")]
		[Address(RVA = "0x724B9C", Offset = "0x724B9C", VA = "0x724B9C")]
		private static void ReportError(EVRInitError error)
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x725CC0", Offset = "0x725CC0", VA = "0x725CC0")]
		public string GetTrackedDeviceString(uint deviceId)
		{
			return null;
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x725B08", Offset = "0x725B08", VA = "0x725B08")]
		public string GetStringProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
		{
			return null;
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x725C74", Offset = "0x725C74", VA = "0x725C74")]
		public float GetFloatProperty(ETrackedDeviceProperty prop, uint deviceId = 0u)
		{
			return default(float);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x725DA8", Offset = "0x725DA8", VA = "0x725DA8")]
		public static string GenerateAppKey()
		{
			return null;
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x725E80", Offset = "0x725E80", VA = "0x725E80")]
		private static string GetManifestFile()
		{
			return null;
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x724CEC", Offset = "0x724CEC", VA = "0x724CEC")]
		private static void IdentifyApplication()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x726230", Offset = "0x726230", VA = "0x726230")]
		private void OnInitializing(bool initializing)
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x7262E4", Offset = "0x7262E4", VA = "0x7262E4")]
		private void OnCalibrating(bool calibrating)
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x726398", Offset = "0x726398", VA = "0x726398")]
		private void OnOutOfRange(bool outOfRange)
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x72644C", Offset = "0x72644C", VA = "0x72644C")]
		private void OnDeviceConnected(int i, bool connected)
		{
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x7264F0", Offset = "0x7264F0", VA = "0x7264F0")]
		private void OnNewPoses(TrackedDevicePose_t[] poses)
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x724FD0", Offset = "0x724FD0", VA = "0x724FD0")]
		private SteamVR()
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x72699C", Offset = "0x72699C", VA = "0x72699C", Slot = "1")]
		~SteamVR()
		{
		}

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x726C4C", Offset = "0x726C4C", VA = "0x726C4C", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x726A08", Offset = "0x726A08", VA = "0x726A08")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x723D74", Offset = "0x723D74", VA = "0x723D74")]
		public static void SafeDispose()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class SteamVR_Behaviour : MonoBehaviour
	{
		[Token(Token = "0x20003C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590424", Offset = "0x590424")]
		private sealed class <DoInitializeSteamVR>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001209")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400120A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400120B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_Behaviour <>4__this;

			[Token(Token = "0x170000D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010CD")]
				[Address(RVA = "0x73048C", Offset = "0x73048C", VA = "0x73048C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010CF")]
				[Address(RVA = "0x7304F4", Offset = "0x7304F4", VA = "0x7304F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010CA")]
			[Address(RVA = "0x72FCA8", Offset = "0x72FCA8", VA = "0x72FCA8")]
			[DebuggerHidden]
			public <DoInitializeSteamVR>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60010CB")]
			[Address(RVA = "0x730314", Offset = "0x730314", VA = "0x730314", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010CC")]
			[Address(RVA = "0x730318", Offset = "0x730318", VA = "0x730318", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010CE")]
			[Address(RVA = "0x730494", Offset = "0x730494", VA = "0x730494", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C7A")]
		private const string openVRDeviceName = "OpenVR";

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SteamVR_Behaviour _instance;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool initializeSteamVROnAwake;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool forcingInitialization;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public SteamVR_Render steamvr_render;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool initializing;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine initializeCoroutine;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool loadedOpenVRDeviceSuccess;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected static int lastFrameCount;

		[Token(Token = "0x17000071")]
		public static SteamVR_Behaviour instance
		{
			[Token(Token = "0x60006B4")]
			[Address(RVA = "0x7244D4", Offset = "0x7244D4", VA = "0x7244D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x7246A8", Offset = "0x7246A8", VA = "0x7246A8")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x72FB38", Offset = "0x72FB38", VA = "0x72FB38")]
		protected void Awake()
		{
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x7245B4", Offset = "0x7245B4", VA = "0x7245B4")]
		public void InitializeSteamVR(bool forceUnityVRToOpenVR = false)
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x72FC38", Offset = "0x72FC38", VA = "0x72FC38")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594344", Offset = "0x594344")]
		private IEnumerator DoInitializeSteamVR(bool forceUnityVRToOpenVR = false)
		{
			return null;
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x72FCD4", Offset = "0x72FCD4", VA = "0x72FCD4")]
		private void XRDevice_deviceLoaded(string deviceName)
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x72FBBC", Offset = "0x72FBBC", VA = "0x72FBBC")]
		private void EnableOpenVR()
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x72FD90", Offset = "0x72FD90", VA = "0x72FD90")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x72FF98", Offset = "0x72FF98", VA = "0x72FF98")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x730098", Offset = "0x730098", VA = "0x730098")]
		protected void OnBeforeRender()
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x73009C", Offset = "0x73009C", VA = "0x73009C")]
		protected void PreCull()
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x730180", Offset = "0x730180", VA = "0x730180")]
		protected void FixedUpdate()
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x7301E0", Offset = "0x7301E0", VA = "0x7301E0")]
		protected void LateUpdate()
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x730240", Offset = "0x730240", VA = "0x730240")]
		protected void Update()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x7302A0", Offset = "0x7302A0", VA = "0x7302A0")]
		protected void OnQuit(VREvent_t vrEvent)
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x7302A8", Offset = "0x7302A8", VA = "0x7302A8")]
		public SteamVR_Behaviour()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58DEA8", Offset = "0x58DEA8")]
	public class SteamVR_Camera : MonoBehaviour
	{
		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _head;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5915F8", Offset = "0x5915F8")]
		private Camera <camera>k__BackingField;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _ears;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool wireframe;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Hashtable values;

		[Token(Token = "0x4000C88")]
		private const string eyeSuffix = " (eye)";

		[Token(Token = "0x4000C89")]
		private const string earsSuffix = " (ears)";

		[Token(Token = "0x4000C8A")]
		private const string headSuffix = " (head)";

		[Token(Token = "0x4000C8B")]
		private const string originSuffix = " (origin)";

		[Token(Token = "0x17000072")]
		public Transform head
		{
			[Token(Token = "0x60006C5")]
			[Address(RVA = "0x734928", Offset = "0x734928", VA = "0x734928")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		public Transform offset
		{
			[Token(Token = "0x60006C6")]
			[Address(RVA = "0x734930", Offset = "0x734930", VA = "0x734930")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		public Transform origin
		{
			[Token(Token = "0x60006C7")]
			[Address(RVA = "0x734938", Offset = "0x734938", VA = "0x734938")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		public Camera camera
		{
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0x734954", Offset = "0x734954", VA = "0x734954")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5943A8", Offset = "0x5943A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60006C9")]
			[Address(RVA = "0x73495C", Offset = "0x73495C", VA = "0x73495C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5943B8", Offset = "0x5943B8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public Transform ears
		{
			[Token(Token = "0x60006CA")]
			[Address(RVA = "0x734964", Offset = "0x734964", VA = "0x734964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		public static float sceneResolutionScale
		{
			[Token(Token = "0x60006CC")]
			[Address(RVA = "0x7349F4", Offset = "0x7349F4", VA = "0x7349F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006CD")]
			[Address(RVA = "0x7349FC", Offset = "0x7349FC", VA = "0x7349FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000078")]
		public string baseName
		{
			[Token(Token = "0x60006D2")]
			[Address(RVA = "0x735AEC", Offset = "0x735AEC", VA = "0x735AEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x73496C", Offset = "0x73496C", VA = "0x73496C")]
		public Ray GetRay()
		{
			return default(Ray);
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x734A04", Offset = "0x734A04", VA = "0x734A04")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x734A0C", Offset = "0x734A0C", VA = "0x734A0C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x735494", Offset = "0x735494", VA = "0x735494")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x7354F0", Offset = "0x7354F0", VA = "0x7354F0")]
		public void ForceLast()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x734D68", Offset = "0x734D68", VA = "0x734D68")]
		public void Expand()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x735BBC", Offset = "0x735BBC", VA = "0x735BBC")]
		public void Collapse()
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x735FBC", Offset = "0x735FBC", VA = "0x735FBC")]
		public SteamVR_Camera()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	[ExecuteInEditMode]
	public class SteamVR_CameraFlip : MonoBehaviour
	{
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x735FC4", Offset = "0x735FC4", VA = "0x735FC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x736060", Offset = "0x736060", VA = "0x736060")]
		public SteamVR_CameraFlip()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	[ExecuteInEditMode]
	public class SteamVR_CameraMask : MonoBehaviour
	{
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x736068", Offset = "0x736068", VA = "0x736068")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x736104", Offset = "0x736104", VA = "0x736104")]
		public SteamVR_CameraMask()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58DF2C", Offset = "0x58DF2C")]
	public class SteamVR_Ears : MonoBehaviour
	{
		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_Camera vrcam;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool usingSpeakers;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Quaternion offset;

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x737DD8", Offset = "0x737DD8", VA = "0x737DD8")]
		private void OnNewPosesApplied()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x737F4C", Offset = "0x737F4C", VA = "0x737F4C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x7380EC", Offset = "0x7380EC", VA = "0x7380EC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x7381C0", Offset = "0x7381C0", VA = "0x7381C0")]
		public SteamVR_Ears()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	internal struct SteamVREnumEqualityComparer<TEnum> : IEqualityComparer<TEnum> where TEnum : struct
	{
		[Token(Token = "0x20003C1")]
		private static class BoxAvoidance
		{
			[Token(Token = "0x400120C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Func<TEnum, int> _wrapper;

			[Token(Token = "0x60010D0")]
			public static int ToInt(TEnum enu)
			{
				return default(int);
			}

			[Token(Token = "0x60010D1")]
			static BoxAvoidance()
			{
			}
		}

		[Token(Token = "0x60006DE")]
		public bool Equals(TEnum firstEnum, TEnum secondEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x60006DF")]
		public int GetHashCode(TEnum firstEnum)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B2")]
	public struct SteamVR_Input_Sources_Comparer : IEqualityComparer<SteamVR_Input_Sources>
	{
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x7451B8", Offset = "0x7451B8", VA = "0x7451B8", Slot = "4")]
		public bool Equals(SteamVR_Input_Sources x, SteamVR_Input_Sources y)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x7451C4", Offset = "0x7451C4", VA = "0x7451C4", Slot = "5")]
		public int GetHashCode(SteamVR_Input_Sources obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001B3")]
	public static class SteamVR_Events
	{
		[Token(Token = "0x20003C2")]
		public abstract class Action
		{
			[Token(Token = "0x170000D3")]
			public bool enabled
			{
				[Token(Token = "0x60010D3")]
				[Address(RVA = "0x738F0C", Offset = "0x738F0C", VA = "0x738F0C")]
				set
				{
				}
			}

			[Token(Token = "0x60010D2")]
			public abstract void Enable(bool enabled);

			[Token(Token = "0x60010D4")]
			[Address(RVA = "0x738F1C", Offset = "0x738F1C", VA = "0x738F1C")]
			protected Action()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C3")]
		public class ActionNoArgs : Action
		{
			[Token(Token = "0x400120D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Event _event;

			[Token(Token = "0x400120E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private UnityAction action;

			[Token(Token = "0x60010D5")]
			[Address(RVA = "0x73844C", Offset = "0x73844C", VA = "0x73844C")]
			public ActionNoArgs(Event _event, UnityAction action)
			{
			}

			[Token(Token = "0x60010D6")]
			[Address(RVA = "0x738F24", Offset = "0x738F24", VA = "0x738F24", Slot = "4")]
			public override void Enable(bool enabled)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C4")]
		public class Action<T> : Action
		{
			[Token(Token = "0x400120F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Event<T> _event;

			[Token(Token = "0x4001210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UnityAction<T> action;

			[Token(Token = "0x60010D7")]
			public Action(Event<T> _event, UnityAction<T> action)
			{
			}

			[Token(Token = "0x60010D8")]
			public override void Enable(bool enabled)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C5")]
		public class Action<T0, T1> : Action
		{
			[Token(Token = "0x4001211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Event<T0, T1> _event;

			[Token(Token = "0x4001212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UnityAction<T0, T1> action;

			[Token(Token = "0x60010D9")]
			public Action(Event<T0, T1> _event, UnityAction<T0, T1> action)
			{
			}

			[Token(Token = "0x60010DA")]
			public override void Enable(bool enabled)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C6")]
		public class Action<T0, T1, T2> : Action
		{
			[Token(Token = "0x4001213")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Event<T0, T1, T2> _event;

			[Token(Token = "0x4001214")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private UnityAction<T0, T1, T2> action;

			[Token(Token = "0x60010DB")]
			public Action(Event<T0, T1, T2> _event, UnityAction<T0, T1, T2> action)
			{
			}

			[Token(Token = "0x60010DC")]
			public override void Enable(bool enabled)
			{
			}
		}

		[Token(Token = "0x20003C7")]
		public class Event : UnityEvent
		{
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0x7380E4", Offset = "0x7380E4", VA = "0x7380E4")]
			public void Listen(UnityAction action)
			{
			}

			[Token(Token = "0x60010DE")]
			[Address(RVA = "0x7381B8", Offset = "0x7381B8", VA = "0x7381B8")]
			public void Remove(UnityAction action)
			{
			}

			[Token(Token = "0x60010DF")]
			[Address(RVA = "0x738F54", Offset = "0x738F54", VA = "0x738F54")]
			public void Send()
			{
			}

			[Token(Token = "0x60010E0")]
			[Address(RVA = "0x738F04", Offset = "0x738F04", VA = "0x738F04")]
			public Event()
			{
			}
		}

		[Token(Token = "0x20003C8")]
		public class Event<T> : UnityEvent<T>
		{
			[Token(Token = "0x60010E1")]
			public void Listen(UnityAction<T> action)
			{
			}

			[Token(Token = "0x60010E2")]
			public void Remove(UnityAction<T> action)
			{
			}

			[Token(Token = "0x60010E3")]
			public void Send(T arg0)
			{
			}

			[Token(Token = "0x60010E4")]
			public Event()
			{
			}
		}

		[Token(Token = "0x20003C9")]
		public class Event<T0, T1> : UnityEvent<T0, T1>
		{
			[Token(Token = "0x60010E5")]
			public void Listen(UnityAction<T0, T1> action)
			{
			}

			[Token(Token = "0x60010E6")]
			public void Remove(UnityAction<T0, T1> action)
			{
			}

			[Token(Token = "0x60010E7")]
			public void Send(T0 arg0, T1 arg1)
			{
			}

			[Token(Token = "0x60010E8")]
			public Event()
			{
			}
		}

		[Token(Token = "0x20003CA")]
		public class Event<T0, T1, T2> : UnityEvent<T0, T1, T2>
		{
			[Token(Token = "0x60010E9")]
			public void Listen(UnityAction<T0, T1, T2> action)
			{
			}

			[Token(Token = "0x60010EA")]
			public void Remove(UnityAction<T0, T1, T2> action)
			{
			}

			[Token(Token = "0x60010EB")]
			public void Send(T0 arg0, T1 arg1, T2 arg2)
			{
			}

			[Token(Token = "0x60010EC")]
			public Event()
			{
			}
		}

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Event<bool> Calibrating;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Event<int, bool> DeviceConnected;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Event<Color, float, bool> Fade;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Event FadeReady;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static Event<bool> HideRenderModels;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Event<bool> Initializing;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static Event<bool> InputFocus;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static Event<bool> Loading;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static Event<float> LoadingFadeIn;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Event<float> LoadingFadeOut;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static Event<TrackedDevicePose_t[]> NewPoses;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static Event NewPosesApplied;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static Event<bool> Initialized;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static Event<bool> OutOfRange;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static Event<SteamVR_RenderModel, bool> RenderModelLoaded;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static Dictionary<EVREventType, Event<VREvent_t>> systemEvents;

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x7381C8", Offset = "0x7381C8", VA = "0x7381C8")]
		public static Action CalibratingAction(UnityAction<bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x73826C", Offset = "0x73826C", VA = "0x73826C")]
		public static Action DeviceConnectedAction(UnityAction<int, bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x738310", Offset = "0x738310", VA = "0x738310")]
		public static Action FadeAction(UnityAction<Color, float, bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x7383B4", Offset = "0x7383B4", VA = "0x7383B4")]
		public static Action FadeReadyAction(UnityAction action)
		{
			return null;
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x738484", Offset = "0x738484", VA = "0x738484")]
		public static Action HideRenderModelsAction(UnityAction<bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x738528", Offset = "0x738528", VA = "0x738528")]
		public static Action InitializingAction(UnityAction<bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x7385CC", Offset = "0x7385CC", VA = "0x7385CC")]
		public static Action InputFocusAction(UnityAction<bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x738670", Offset = "0x738670", VA = "0x738670")]
		public static Action LoadingAction(UnityAction<bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x738714", Offset = "0x738714", VA = "0x738714")]
		public static Action LoadingFadeInAction(UnityAction<float> action)
		{
			return null;
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x7387B8", Offset = "0x7387B8", VA = "0x7387B8")]
		public static Action LoadingFadeOutAction(UnityAction<float> action)
		{
			return null;
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x73885C", Offset = "0x73885C", VA = "0x73885C")]
		public static Action NewPosesAction(UnityAction<TrackedDevicePose_t[]> action)
		{
			return null;
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x738900", Offset = "0x738900", VA = "0x738900")]
		public static Action NewPosesAppliedAction(UnityAction action)
		{
			return null;
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x738998", Offset = "0x738998", VA = "0x738998")]
		public static Action InitializedAction(UnityAction<bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x738A3C", Offset = "0x738A3C", VA = "0x738A3C")]
		public static Action OutOfRangeAction(UnityAction<bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x738AE0", Offset = "0x738AE0", VA = "0x738AE0")]
		public static Action RenderModelLoadedAction(UnityAction<SteamVR_RenderModel, bool> action)
		{
			return null;
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x72FE90", Offset = "0x72FE90", VA = "0x72FE90")]
		public static Event<VREvent_t> System(EVREventType eventType)
		{
			return null;
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x738B84", Offset = "0x738B84", VA = "0x738B84")]
		public static Action SystemAction(EVREventType eventType, UnityAction<VREvent_t> action)
		{
			return null;
		}
	}
	[Token(Token = "0x20001B4")]
	public class SteamVR_ExternalCamera : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003CB")]
		public struct Config
		{
			[Token(Token = "0x4001215")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x4001216")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x4001217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float z;

			[Token(Token = "0x4001218")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float rx;

			[Token(Token = "0x4001219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float ry;

			[Token(Token = "0x400121A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float rz;

			[Token(Token = "0x400121B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float fov;

			[Token(Token = "0x400121C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float near;

			[Token(Token = "0x400121D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float far;

			[Token(Token = "0x400121E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float sceneResolutionScale;

			[Token(Token = "0x400121F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float frameSkip;

			[Token(Token = "0x4001220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float nearOffset;

			[Token(Token = "0x4001221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float farOffset;

			[Token(Token = "0x4001222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float hmdOffset;

			[Token(Token = "0x4001223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float r;

			[Token(Token = "0x4001224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float g;

			[Token(Token = "0x4001225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float b;

			[Token(Token = "0x4001226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float a;

			[Token(Token = "0x4001227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool disableStandardAssets;
		}

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Config config;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string configPath;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private FileSystemWatcher watcher;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Camera cam;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform target;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject clipQuad;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material clipMaterial;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material colorMat;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material alphaMat;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera[] cameras;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rect[] cameraRects;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float sceneResolutionScale;

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x738F5C", Offset = "0x738F5C", VA = "0x738F5C")]
		public void ReadConfig()
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x739864", Offset = "0x739864", VA = "0x739864")]
		private void OnChanged(object source, FileSystemEventArgs e)
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x739868", Offset = "0x739868", VA = "0x739868")]
		public void AttachToCamera(SteamVR_Camera vrcam)
		{
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x739E18", Offset = "0x739E18", VA = "0x739E18")]
		public float GetTargetDistance()
		{
			return default(float);
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x73A0C4", Offset = "0x73A0C4", VA = "0x73A0C4")]
		public void RenderNear()
		{
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x73A81C", Offset = "0x73A81C", VA = "0x73A81C")]
		public void RenderFar()
		{
		}

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x73A93C", Offset = "0x73A93C", VA = "0x73A93C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x73A940", Offset = "0x73A940", VA = "0x73A940")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x73AB90", Offset = "0x73AB90", VA = "0x73AB90")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x73ACCC", Offset = "0x73ACCC", VA = "0x73ACCC")]
		public SteamVR_ExternalCamera()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class SteamVR_Fade : MonoBehaviour
	{
		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Color currentColor;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color targetColor;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color deltaColor;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool fadeOverlay;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material fadeMaterial;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int fadeMaterialColorID;

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x73BCD4", Offset = "0x73BCD4", VA = "0x73BCD4")]
		public static void Start(Color newColor, float duration, bool fadeOverlay = false)
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x73BD98", Offset = "0x73BD98", VA = "0x73BD98")]
		public static void View(Color newColor, float duration)
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x73BE60", Offset = "0x73BE60", VA = "0x73BE60")]
		public void OnStartFade(Color newColor, float duration, bool fadeOverlay)
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x73BEC8", Offset = "0x73BEC8", VA = "0x73BEC8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x73C088", Offset = "0x73C088", VA = "0x73C088")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x73C14C", Offset = "0x73C14C", VA = "0x73C14C")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x73C474", Offset = "0x73C474", VA = "0x73C474")]
		public SteamVR_Fade()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58DF90", Offset = "0x58DF90")]
	public class SteamVR_Frustum : MonoBehaviour
	{
		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_TrackedObject.EIndex index;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fovLeft;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fovRight;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fovTop;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fovBottom;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float nearZ;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float farZ;

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x73C57C", Offset = "0x73C57C", VA = "0x73C57C")]
		public void UpdateModel()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x73CD64", Offset = "0x73CD64", VA = "0x73CD64")]
		private void OnDeviceConnected(int i, bool connected)
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x73CF20", Offset = "0x73CF20", VA = "0x73CF20")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x73D008", Offset = "0x73D008", VA = "0x73D008")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x73D0F0", Offset = "0x73D0F0", VA = "0x73D0F0")]
		public SteamVR_Frustum()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public class SteamVR_IK : MonoBehaviour
	{
		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform start;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform joint;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform end;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poleVector;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform upVector;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float blendPct;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public Transform startXform;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Transform jointXform;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Transform endXform;

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x73D874", Offset = "0x73D874", VA = "0x73D874")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x73E21C", Offset = "0x73E21C", VA = "0x73E21C")]
		public static bool Solve(Vector3 start, Vector3 end, Vector3 poleVector, float jointDist, float targetDist, ref Vector3 result, out Vector3 forward, out Vector3 up)
		{
			return default(bool);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x73E734", Offset = "0x73E734", VA = "0x73E734")]
		public SteamVR_IK()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public class SteamVR_LoadLevel : MonoBehaviour
	{
		[Token(Token = "0x20003CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590434", Offset = "0x590434")]
		private sealed class <LoadLevel>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001228")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001229")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400122A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_LoadLevel <>4__this;

			[Token(Token = "0x400122B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVROverlay <overlay>5__2;

			[Token(Token = "0x400122C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <fadedForeground>5__3;

			[Token(Token = "0x400122D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRCompositor <compositor>5__4;

			[Token(Token = "0x170000D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010F0")]
				[Address(RVA = "0x747410", Offset = "0x747410", VA = "0x747410", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010F2")]
				[Address(RVA = "0x747478", Offset = "0x747478", VA = "0x747478", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010ED")]
			[Address(RVA = "0x746068", Offset = "0x746068", VA = "0x746068")]
			[DebuggerHidden]
			public <LoadLevel>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x60010EE")]
			[Address(RVA = "0x7461E4", Offset = "0x7461E4", VA = "0x7461E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010EF")]
			[Address(RVA = "0x7461E8", Offset = "0x7461E8", VA = "0x7461E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x747418", Offset = "0x747418", VA = "0x747418", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SteamVR_LoadLevel _active;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string levelName;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string internalProcessPath;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string internalProcessArgs;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool loadAdditive;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool loadAsync;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture loadingScreen;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture progressBarEmpty;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture progressBarFull;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float loadingScreenWidthInMeters;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float progressBarWidthInMeters;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float loadingScreenDistance;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform loadingScreenTransform;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform progressBarTransform;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture front;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Texture back;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture left;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Texture right;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture top;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture bottom;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color backgroundColor;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showGrid;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float fadeOutTime;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float fadeInTime;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float postLoadSettleTime;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float loadingScreenFadeInTime;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float loadingScreenFadeOutTime;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float fadeRate;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float alpha;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private AsyncOperation async;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture renderTexture;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ulong loadingScreenOverlayHandle;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ulong progressBarOverlayHandle;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool autoTriggerOnEnable;

		[Token(Token = "0x17000079")]
		public static bool loading
		{
			[Token(Token = "0x600070E")]
			[Address(RVA = "0x7451CC", Offset = "0x7451CC", VA = "0x7451CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700007A")]
		public static float progress
		{
			[Token(Token = "0x600070F")]
			[Address(RVA = "0x745264", Offset = "0x745264", VA = "0x745264")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700007B")]
		public static Texture progressTexture
		{
			[Token(Token = "0x6000710")]
			[Address(RVA = "0x745378", Offset = "0x745378", VA = "0x745378")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x745450", Offset = "0x745450", VA = "0x745450")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x745460", Offset = "0x745460", VA = "0x745460")]
		public void Trigger()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x745568", Offset = "0x745568", VA = "0x745568")]
		public static void Begin(string levelName, bool showGrid = false, float fadeOutTime = 0.5f, float r = 0f, float g = 0f, float b = 0f, float a = 1f)
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x745674", Offset = "0x745674", VA = "0x745674")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x745F00", Offset = "0x745F00", VA = "0x745F00")]
		private void Update()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x7454F8", Offset = "0x7454F8", VA = "0x7454F8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5943C8", Offset = "0x5943C8")]
		private IEnumerator LoadLevel()
		{
			return null;
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x745ABC", Offset = "0x745ABC", VA = "0x745ABC")]
		private ulong GetOverlayHandle(string overlayName, Transform transform, float widthInMeters = 1f)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x74617C", Offset = "0x74617C", VA = "0x74617C")]
		public SteamVR_LoadLevel()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public class SteamVR_Menu : MonoBehaviour
	{
		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture cursor;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture background;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture logo;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float logoHeight;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float menuOffset;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector2 scaleLimits;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float scaleRate;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SteamVR_Overlay overlay;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera overlayCam;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector4 uvOffset;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float distance;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591648", Offset = "0x591648")]
		private float <scale>k__BackingField;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private string scaleLimitX;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string scaleLimitY;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string scaleRateText;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private CursorLockMode savedCursorLockState;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool savedCursorVisible;

		[Token(Token = "0x1700007C")]
		public RenderTexture texture
		{
			[Token(Token = "0x600071A")]
			[Address(RVA = "0x747480", Offset = "0x747480", VA = "0x747480")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		public float scale
		{
			[Token(Token = "0x600071B")]
			[Address(RVA = "0x74754C", Offset = "0x74754C", VA = "0x74754C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59442C", Offset = "0x59442C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600071C")]
			[Address(RVA = "0x747554", Offset = "0x747554", VA = "0x747554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59443C", Offset = "0x59443C")]
			private set
			{
			}
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x74755C", Offset = "0x74755C", VA = "0x74755C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x7476C4", Offset = "0x7476C4", VA = "0x7476C4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x74939C", Offset = "0x74939C", VA = "0x74939C")]
		public void ShowMenu()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x749298", Offset = "0x749298", VA = "0x749298")]
		public void HideMenu()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0x749750", Offset = "0x749750", VA = "0x749750")]
		private void Update()
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0x7491B0", Offset = "0x7491B0", VA = "0x7491B0")]
		private void SetScale(float scale)
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0x7496E8", Offset = "0x7496E8", VA = "0x7496E8")]
		private void SaveCursorState()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0x749720", Offset = "0x749720", VA = "0x749720")]
		private void RestoreCursorState()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x749920", Offset = "0x749920", VA = "0x749920")]
		public SteamVR_Menu()
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public class SteamVR_Overlay : MonoBehaviour
	{
		[Token(Token = "0x20003CD")]
		public struct IntersectionResults
		{
			[Token(Token = "0x400122E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 point;

			[Token(Token = "0x400122F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 normal;

			[Token(Token = "0x4001230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector2 UVs;

			[Token(Token = "0x4001231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float distance;
		}

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture texture;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool curved;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool antialias;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool highquality;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591658", Offset = "0x591658")]
		public float scale;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591690", Offset = "0x591690")]
		public float distance;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5916C8", Offset = "0x5916C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5916C8", Offset = "0x5916C8")]
		public float alpha;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector4 uvOffset;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 mouseScale;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2 curvedRange;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VROverlayInputMethod inputMethod;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59171C", Offset = "0x59171C")]
		private static SteamVR_Overlay <instance>k__BackingField;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ulong handle;

		[Token(Token = "0x1700007E")]
		public static SteamVR_Overlay instance
		{
			[Token(Token = "0x6000726")]
			[Address(RVA = "0x749974", Offset = "0x749974", VA = "0x749974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59444C", Offset = "0x59444C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000727")]
			[Address(RVA = "0x7499C4", Offset = "0x7499C4", VA = "0x7499C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59445C", Offset = "0x59445C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007F")]
		public static string key
		{
			[Token(Token = "0x6000728")]
			[Address(RVA = "0x746094", Offset = "0x746094", VA = "0x746094")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x749A18", Offset = "0x749A18", VA = "0x749A18")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x749B68", Offset = "0x749B68", VA = "0x749B68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x749C24", Offset = "0x749C24", VA = "0x749C24")]
		public void UpdateOverlay()
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x74A0A8", Offset = "0x74A0A8", VA = "0x74A0A8")]
		public bool PollNextEvent(ref VREvent_t pEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x74A1B4", Offset = "0x74A1B4", VA = "0x74A1B4")]
		public bool ComputeIntersection(Vector3 source, Vector3 direction, ref IntersectionResults results)
		{
			return default(bool);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x74A3DC", Offset = "0x74A3DC", VA = "0x74A3DC")]
		public SteamVR_Overlay()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E020", Offset = "0x58E020")]
	public class SteamVR_PlayArea : MonoBehaviour
	{
		[Token(Token = "0x20003CE")]
		public enum Size
		{
			[Token(Token = "0x4001233")]
			Calibrated,
			[Token(Token = "0x4001234")]
			_400x300,
			[Token(Token = "0x4001235")]
			_300x225,
			[Token(Token = "0x4001236")]
			_200x150
		}

		[Token(Token = "0x20003CF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590444", Offset = "0x590444")]
		private sealed class <UpdateBounds>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001237")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001238")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001239")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_PlayArea <>4__this;

			[Token(Token = "0x400123A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRChaperone <chaperone>5__2;

			[Token(Token = "0x170000D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010F6")]
				[Address(RVA = "0x74B5C0", Offset = "0x74B5C0", VA = "0x74B5C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010F8")]
				[Address(RVA = "0x74B628", Offset = "0x74B628", VA = "0x74B628", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010F3")]
			[Address(RVA = "0x74B44C", Offset = "0x74B44C", VA = "0x74B44C")]
			[DebuggerHidden]
			public <UpdateBounds>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x74B4C0", Offset = "0x74B4C0", VA = "0x74B4C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010F5")]
			[Address(RVA = "0x74B4C4", Offset = "0x74B4C4", VA = "0x74B4C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010F7")]
			[Address(RVA = "0x74B5C8", Offset = "0x74B5C8", VA = "0x74B5C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float borderThickness;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float wireframeHeight;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool drawWireframeWhenSelectedOnly;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool drawInGame;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Size size;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color color;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Vector3[] vertices;

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x74A4A4", Offset = "0x74A4A4", VA = "0x74A4A4")]
		public static bool GetBounds(Size size, ref HmdQuad_t pRect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x74A83C", Offset = "0x74A83C", VA = "0x74A83C")]
		public void BuildMesh()
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x74B084", Offset = "0x74B084", VA = "0x74B084")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x74B318", Offset = "0x74B318", VA = "0x74B318")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x74B094", Offset = "0x74B094", VA = "0x74B094")]
		public void DrawWireframe()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x74B328", Offset = "0x74B328", VA = "0x74B328")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x74B3DC", Offset = "0x74B3DC", VA = "0x74B3DC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x59446C", Offset = "0x59446C")]
		private IEnumerator UpdateBounds()
		{
			return null;
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x74B478", Offset = "0x74B478", VA = "0x74B478")]
		public SteamVR_PlayArea()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public class SteamVR_Render : MonoBehaviour
	{
		[Token(Token = "0x20003D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590454", Offset = "0x590454")]
		private sealed class <RenderLoop>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400123B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400123C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400123D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_Render <>4__this;

			[Token(Token = "0x170000D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010FC")]
				[Address(RVA = "0x74E36C", Offset = "0x74E36C", VA = "0x74E36C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010FE")]
				[Address(RVA = "0x74E3D4", Offset = "0x74E3D4", VA = "0x74E3D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010F9")]
			[Address(RVA = "0x74BDA8", Offset = "0x74BDA8", VA = "0x74BDA8")]
			[DebuggerHidden]
			public <RenderLoop>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60010FA")]
			[Address(RVA = "0x74E14C", Offset = "0x74E14C", VA = "0x74E14C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010FB")]
			[Address(RVA = "0x74E150", Offset = "0x74E150", VA = "0x74E150", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010FD")]
			[Address(RVA = "0x74E374", Offset = "0x74E374", VA = "0x74E374", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_ExternalCamera externalCamera;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string externalCameraConfigPath;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59173C", Offset = "0x59173C")]
		private static EVREye <eye>k__BackingField;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool isQuitting;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SteamVR_Camera[] cameras;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TrackedDevicePose_t[] poses;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TrackedDevicePose_t[] gamePoses;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		private static bool _pauseRendering;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private WaitForEndOfFrame waitForEndOfFrame;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float sceneResolutionScale;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float timeScale;

		[Token(Token = "0x17000080")]
		public static EVREye eye
		{
			[Token(Token = "0x6000737")]
			[Address(RVA = "0x74B630", Offset = "0x74B630", VA = "0x74B630")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5944D0", Offset = "0x5944D0")]
			get
			{
				return default(EVREye);
			}
			[Token(Token = "0x6000738")]
			[Address(RVA = "0x74B680", Offset = "0x74B680", VA = "0x74B680")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5944E0", Offset = "0x5944E0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public static SteamVR_Render instance
		{
			[Token(Token = "0x6000739")]
			[Address(RVA = "0x74B6D4", Offset = "0x74B6D4", VA = "0x74B6D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		public static bool pauseRendering
		{
			[Token(Token = "0x6000741")]
			[Address(RVA = "0x74BCE8", Offset = "0x74BCE8", VA = "0x74BCE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000742")]
			[Address(RVA = "0x747300", Offset = "0x747300", VA = "0x747300")]
			set
			{
			}
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x74B744", Offset = "0x74B744", VA = "0x74B744")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0x74B7BC", Offset = "0x74B7BC", VA = "0x74B7BC")]
		public static void Add(SteamVR_Camera vrcam)
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x74BA34", Offset = "0x74BA34", VA = "0x74BA34")]
		public static void Remove(SteamVR_Camera vrcam)
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0x74610C", Offset = "0x74610C", VA = "0x74610C")]
		public static SteamVR_Camera Top()
		{
			return null;
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x74B830", Offset = "0x74B830", VA = "0x74B830")]
		private void AddInternal(SteamVR_Camera vrcam)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x74BAE8", Offset = "0x74BAE8", VA = "0x74BAE8")]
		private void RemoveInternal(SteamVR_Camera vrcam)
		{
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x74BC9C", Offset = "0x74BC9C", VA = "0x74BC9C")]
		private SteamVR_Camera TopInternal()
		{
			return null;
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x74BD38", Offset = "0x74BD38", VA = "0x74BD38")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5944F0", Offset = "0x5944F0")]
		private IEnumerator RenderLoop()
		{
			return null;
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x74BDD4", Offset = "0x74BDD4", VA = "0x74BDD4")]
		private void RenderExternalCamera()
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x74BF34", Offset = "0x74BF34", VA = "0x74BF34")]
		private void OnInputFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x74C0D8", Offset = "0x74C0D8", VA = "0x74C0D8")]
		private string GetScreenshotFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames screenshotPropertyFilename)
		{
			return null;
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x74C224", Offset = "0x74C224", VA = "0x74C224")]
		private void OnRequestScreenshot(VREvent_t vrEvent)
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x74D564", Offset = "0x74D564", VA = "0x74D564")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x74D74C", Offset = "0x74D74C", VA = "0x74D74C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x74D8B8", Offset = "0x74D8B8", VA = "0x74D8B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x74DA20", Offset = "0x74DA20", VA = "0x74DA20")]
		public void UpdatePoses()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x74DB00", Offset = "0x74DB00", VA = "0x74DB00")]
		private void OnBeforeRender()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x74DBF8", Offset = "0x74DBF8", VA = "0x74DBF8")]
		private void Update()
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x74E08C", Offset = "0x74E08C", VA = "0x74E08C")]
		public SteamVR_Render()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	[ExecuteInEditMode]
	public class SteamVR_RenderModel : MonoBehaviour
	{
		[Token(Token = "0x20003D1")]
		public class RenderModel
		{
			[Token(Token = "0x400123E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5936F4", Offset = "0x5936F4")]
			private Mesh <mesh>k__BackingField;

			[Token(Token = "0x400123F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593704", Offset = "0x593704")]
			private Material <material>k__BackingField;

			[Token(Token = "0x170000DA")]
			public Mesh mesh
			{
				[Token(Token = "0x6001100")]
				[Address(RVA = "0x751F38", Offset = "0x751F38", VA = "0x751F38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5969C0", Offset = "0x5969C0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001101")]
				[Address(RVA = "0x751F40", Offset = "0x751F40", VA = "0x751F40")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5969D0", Offset = "0x5969D0")]
				private set
				{
				}
			}

			[Token(Token = "0x170000DB")]
			public Material material
			{
				[Token(Token = "0x6001102")]
				[Address(RVA = "0x751F48", Offset = "0x751F48", VA = "0x751F48")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5969E0", Offset = "0x5969E0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001103")]
				[Address(RVA = "0x751F50", Offset = "0x751F50", VA = "0x751F50")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5969F0", Offset = "0x5969F0")]
				private set
				{
				}
			}

			[Token(Token = "0x60010FF")]
			[Address(RVA = "0x750AF8", Offset = "0x750AF8", VA = "0x750AF8")]
			public RenderModel(Mesh mesh, Material material)
			{
			}
		}

		[Token(Token = "0x20003D2")]
		public sealed class RenderModelInterfaceHolder : IDisposable
		{
			[Token(Token = "0x4001240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool needsShutdown;

			[Token(Token = "0x4001241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			private bool failedLoadInterface;

			[Token(Token = "0x4001242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private CVRRenderModels _instance;

			[Token(Token = "0x170000DC")]
			public CVRRenderModels instance
			{
				[Token(Token = "0x6001104")]
				[Address(RVA = "0x74F4E0", Offset = "0x74F4E0", VA = "0x74F4E0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001105")]
			[Address(RVA = "0x751F58", Offset = "0x751F58", VA = "0x751F58", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6001106")]
			[Address(RVA = "0x74EDD0", Offset = "0x74EDD0", VA = "0x74EDD0")]
			public RenderModelInterfaceHolder()
			{
			}
		}

		[Token(Token = "0x20003D3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590464", Offset = "0x590464")]
		private sealed class <SetModelAsync>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001245")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_RenderModel <>4__this;

			[Token(Token = "0x4001246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string newRenderModelName;

			[Token(Token = "0x4001247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private RenderModelInterfaceHolder <holder>5__2;

			[Token(Token = "0x4001248")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private CVRRenderModels <renderModels>5__3;

			[Token(Token = "0x4001249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private string[] <renderModelNames>5__4;

			[Token(Token = "0x170000DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600110B")]
				[Address(RVA = "0x751EC8", Offset = "0x751EC8", VA = "0x751EC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600110D")]
				[Address(RVA = "0x751F30", Offset = "0x751F30", VA = "0x751F30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001107")]
			[Address(RVA = "0x74E764", Offset = "0x74E764", VA = "0x74E764")]
			[DebuggerHidden]
			public <SetModelAsync>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6001108")]
			[Address(RVA = "0x751530", Offset = "0x751530", VA = "0x751530", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001109")]
			[Address(RVA = "0x75160C", Offset = "0x75160C", VA = "0x75160C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600110A")]
			[Address(RVA = "0x75154C", Offset = "0x75154C", VA = "0x75154C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600110C")]
			[Address(RVA = "0x751ED0", Offset = "0x751ED0", VA = "0x751ED0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590474", Offset = "0x590474")]
		private sealed class <FreeRenderModel>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400124A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400124B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400124C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IntPtr pRenderModel;

			[Token(Token = "0x170000DF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001111")]
				[Address(RVA = "0x7514C0", Offset = "0x7514C0", VA = "0x7514C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001113")]
				[Address(RVA = "0x751528", Offset = "0x751528", VA = "0x751528", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600110E")]
			[Address(RVA = "0x750B30", Offset = "0x750B30", VA = "0x750B30")]
			[DebuggerHidden]
			public <FreeRenderModel>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x600110F")]
			[Address(RVA = "0x751344", Offset = "0x751344", VA = "0x751344", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001110")]
			[Address(RVA = "0x751348", Offset = "0x751348", VA = "0x751348", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001112")]
			[Address(RVA = "0x7514C8", Offset = "0x7514C8", VA = "0x7514C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_TrackedObject.EIndex index;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected SteamVR_Input_Sources inputSource;

		[Token(Token = "0x4000D16")]
		public const string modelOverrideWarning = "Model override is really only meant to be used in the scene view for lining things up; using it at runtime is discouraged.  Use tracked device index instead to ensure the correct model is displayed for all users.";

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59174C", Offset = "0x59174C")]
		public string modelOverride;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591784", Offset = "0x591784")]
		public Shader shader;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5917BC", Offset = "0x5917BC")]
		public bool verbose;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5917F4", Offset = "0x5917F4")]
		public bool createComponents;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59182C", Offset = "0x59182C")]
		public bool updateDynamically;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public RenderModel_ControllerMode_State_t controllerModeState;

		[Token(Token = "0x4000D1D")]
		public const string k_localTransformName = "attach";

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591864", Offset = "0x591864")]
		private string <renderModelName>k__BackingField;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591874", Offset = "0x591874")]
		private bool <initializedAttachPoints>k__BackingField;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<string, Transform> componentAttachPoints;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<MeshRenderer> meshRenderers;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Hashtable models;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Hashtable materials;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SteamVR_Events.Action deviceConnectedAction;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SteamVR_Events.Action hideRenderModelsAction;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SteamVR_Events.Action modelSkinSettingsHaveChangedAction;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<int, string> nameCache;

		[Token(Token = "0x17000083")]
		public string renderModelName
		{
			[Token(Token = "0x600074F")]
			[Address(RVA = "0x74E3DC", Offset = "0x74E3DC", VA = "0x74E3DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594554", Offset = "0x594554")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000750")]
			[Address(RVA = "0x74E3E4", Offset = "0x74E3E4", VA = "0x74E3E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594564", Offset = "0x594564")]
			private set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public bool initializedAttachPoints
		{
			[Token(Token = "0x6000751")]
			[Address(RVA = "0x74E3EC", Offset = "0x74E3EC", VA = "0x74E3EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594574", Offset = "0x594574")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000752")]
			[Address(RVA = "0x74E3F4", Offset = "0x74E3F4", VA = "0x74E3F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594584", Offset = "0x594584")]
			set
			{
			}
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x74E400", Offset = "0x74E400", VA = "0x74E400")]
		private void OnModelSkinSettingsHaveChanged(VREvent_t vrEvent)
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x74E620", Offset = "0x74E620", VA = "0x74E620")]
		public void SetMeshRendererState(bool state)
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x74E6C4", Offset = "0x74E6C4", VA = "0x74E6C4")]
		private void OnHideRenderModels(bool hidden)
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x74E6D0", Offset = "0x74E6D0", VA = "0x74E6D0")]
		private void OnDeviceConnected(int i, bool connected)
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x74E470", Offset = "0x74E470", VA = "0x74E470")]
		public void UpdateModel()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x74E6E8", Offset = "0x74E6E8", VA = "0x74E6E8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594594", Offset = "0x594594")]
		private IEnumerator SetModelAsync(string newRenderModelName)
		{
			return null;
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x74E790", Offset = "0x74E790", VA = "0x74E790")]
		private bool SetModel(string renderModelName)
		{
			return default(bool);
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x74FB60", Offset = "0x74FB60", VA = "0x74FB60")]
		private RenderModel LoadRenderModel(CVRRenderModels renderModels, string renderModelName, string baseName)
		{
			return null;
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x750A88", Offset = "0x750A88", VA = "0x750A88")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5945F8", Offset = "0x5945F8")]
		private IEnumerator FreeRenderModel(IntPtr pRenderModel)
		{
			return null;
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x750B5C", Offset = "0x750B5C", VA = "0x750B5C")]
		public Transform FindTransformByName(string componentName, [Optional] Transform inTransform)
		{
			return null;
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x750C60", Offset = "0x750C60", VA = "0x750C60")]
		public Transform GetComponentTransform(string componentName)
		{
			return null;
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x74EC94", Offset = "0x74EC94", VA = "0x74EC94")]
		private void StripMesh(GameObject go)
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x74EDD8", Offset = "0x74EDD8", VA = "0x74EDD8")]
		private bool LoadComponents(RenderModelInterfaceHolder holder, string renderModelName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x750D10", Offset = "0x750D10", VA = "0x750D10")]
		private SteamVR_RenderModel()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x750EAC", Offset = "0x750EAC", VA = "0x750EAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x750FC8", Offset = "0x750FC8", VA = "0x750FC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x751020", Offset = "0x751020", VA = "0x751020")]
		private void Update()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x74F64C", Offset = "0x74F64C", VA = "0x74F64C")]
		public void UpdateComponents(CVRRenderModels renderModels)
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x751224", Offset = "0x751224", VA = "0x751224")]
		public void SetDeviceIndex(int newIndex)
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x7512A8", Offset = "0x7512A8", VA = "0x7512A8")]
		public void SetInputSource(SteamVR_Input_Sources newInputSource)
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0x750678", Offset = "0x750678", VA = "0x750678")]
		private static void Sleep()
		{
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0x750684", Offset = "0x750684", VA = "0x750684")]
		private RenderModel_t MarshalRenderModel(IntPtr pRenderModel)
		{
			return default(RenderModel_t);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0x75088C", Offset = "0x75088C", VA = "0x75088C")]
		private RenderModel_TextureMap_t MarshalRenderModel_TextureMap(IntPtr pRenderModel)
		{
			return default(RenderModel_TextureMap_t);
		}
	}
	[Token(Token = "0x20001BE")]
	public class SteamVR_RingBuffer<T>
	{
		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T[] buffer;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int currentIndex;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected T lastElement;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool cleared;

		[Token(Token = "0x600076B")]
		public SteamVR_RingBuffer(int size)
		{
		}

		[Token(Token = "0x600076C")]
		public void Add(T newElement)
		{
		}

		[Token(Token = "0x600076D")]
		public virtual void StepForward()
		{
		}

		[Token(Token = "0x600076E")]
		public virtual T GetAtIndex(int atIndex)
		{
			return (T)null;
		}

		[Token(Token = "0x600076F")]
		public virtual T GetLast()
		{
			return (T)null;
		}

		[Token(Token = "0x6000770")]
		public virtual int GetLastIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000771")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class SteamVR_HistoryBuffer : SteamVR_RingBuffer<SteamVR_HistoryStep>
	{
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x73D110", Offset = "0x73D110", VA = "0x73D110")]
		public SteamVR_HistoryBuffer(int size)
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x73D170", Offset = "0x73D170", VA = "0x73D170")]
		public void Update(Vector3 position, Quaternion rotation, Vector3 velocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x73D3D8", Offset = "0x73D3D8", VA = "0x73D3D8")]
		public float GetVelocityMagnitudeTrend(int toIndex = -1, int fromIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x73D4C4", Offset = "0x73D4C4", VA = "0x73D4C4")]
		public bool IsValid(SteamVR_HistoryStep step)
		{
			return default(bool);
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x73D4E0", Offset = "0x73D4E0", VA = "0x73D4E0")]
		public int GetTopVelocity(int forFrames, int addFrames = 0)
		{
			return default(int);
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x73D5C4", Offset = "0x73D5C4", VA = "0x73D5C4")]
		public void GetAverageVelocities(out Vector3 velocity, out Vector3 angularVelocity, int forFrames, int startFrame = -1)
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class SteamVR_HistoryStep
	{
		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 velocity;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 angularVelocity;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public long timeInTicks;

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x73D3C8", Offset = "0x73D3C8", VA = "0x73D3C8")]
		public SteamVR_HistoryStep()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class SteamVR_Settings : ScriptableObject
	{
		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SteamVR_Settings _instance;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool pauseGameWhenDashboardVisible;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool lockPhysicsUpdateRateToRenderFrequency;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ETrackingUniverseOrigin trackingSpace;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591884", Offset = "0x591884")]
		public string actionsFilePath;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5918BC", Offset = "0x5918BC")]
		public string steamVRInputPath;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_UpdateModes inputUpdateMode;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SteamVR_UpdateModes poseUpdateMode;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool activateFirstActionSetOnStart;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5918F4", Offset = "0x5918F4")]
		public string editorAppKey;

		[Token(Token = "0x17000085")]
		public static SteamVR_Settings instance
		{
			[Token(Token = "0x6000779")]
			[Address(RVA = "0x73EF40", Offset = "0x73EF40", VA = "0x73EF40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x751FD0", Offset = "0x751FD0", VA = "0x751FD0")]
		private static void LoadInstance()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x73FDF4", Offset = "0x73FDF4", VA = "0x73FDF4")]
		public bool IsInputUpdateMode(SteamVR_UpdateModes tocheck)
		{
			return default(bool);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x73FFE4", Offset = "0x73FFE4", VA = "0x73FFE4")]
		public bool IsPoseUpdateMode(SteamVR_UpdateModes tocheck)
		{
			return default(bool);
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x7521AC", Offset = "0x7521AC", VA = "0x7521AC")]
		public static void VerifyScriptableObject()
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x7521B0", Offset = "0x7521B0", VA = "0x7521B0")]
		public SteamVR_Settings()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	public class SteamVR_Skybox : MonoBehaviour
	{
		[Token(Token = "0x20003D5")]
		public enum CellSize
		{
			[Token(Token = "0x400124E")]
			x1024,
			[Token(Token = "0x400124F")]
			x64,
			[Token(Token = "0x4001250")]
			x32,
			[Token(Token = "0x4001251")]
			x16,
			[Token(Token = "0x4001252")]
			x8
		}

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture front;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture back;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture left;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture right;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture top;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture bottom;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CellSize StereoCellSize;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float StereoIpdMm;

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x752240", Offset = "0x752240", VA = "0x752240")]
		public void SetTextureByIndex(int i, Texture t)
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x752294", Offset = "0x752294", VA = "0x752294")]
		public Texture GetTextureByIndex(int i)
		{
			return null;
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x746F68", Offset = "0x746F68", VA = "0x746F68")]
		public static void SetOverride([Optional] Texture front, [Optional] Texture back, [Optional] Texture left, [Optional] Texture right, [Optional] Texture top, [Optional] Texture bottom)
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x747398", Offset = "0x747398", VA = "0x747398")]
		public static void ClearOverride()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x7522F0", Offset = "0x7522F0", VA = "0x7522F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x752304", Offset = "0x752304", VA = "0x752304")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x752308", Offset = "0x752308", VA = "0x752308")]
		public SteamVR_Skybox()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	[ExecuteInEditMode]
	public class SteamVR_SphericalProjection : MonoBehaviour
	{
		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material material;

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x75231C", Offset = "0x75231C", VA = "0x75231C")]
		public void Set(Vector3 N, float phi0, float phi1, float theta0, float theta1, Vector3 uAxis, Vector3 uOrigin, float uScale, Vector3 vAxis, Vector3 vOrigin, float vScale)
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x7526BC", Offset = "0x7526BC", VA = "0x7526BC")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x75274C", Offset = "0x75274C", VA = "0x75274C")]
		public SteamVR_SphericalProjection()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public class SteamVR_TrackedCamera
	{
		[Token(Token = "0x20003D6")]
		public class VideoStreamTexture
		{
			[Token(Token = "0x4001253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593714", Offset = "0x593714")]
			private bool <undistorted>k__BackingField;

			[Token(Token = "0x4001254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593724", Offset = "0x593724")]
			private VRTextureBounds_t <frameBounds>k__BackingField;

			[Token(Token = "0x4001255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Texture2D _texture;

			[Token(Token = "0x4001256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int prevFrameCount;

			[Token(Token = "0x4001257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private uint glTextureId;

			[Token(Token = "0x4001258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private VideoStream videostream;

			[Token(Token = "0x4001259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private CameraVideoStreamFrameHeader_t header;

			[Token(Token = "0x170000E1")]
			public bool undistorted
			{
				[Token(Token = "0x6001115")]
				[Address(RVA = "0x752D9C", Offset = "0x752D9C", VA = "0x752D9C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x596AA0", Offset = "0x596AA0")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001116")]
				[Address(RVA = "0x752DA4", Offset = "0x752DA4", VA = "0x752DA4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x596AB0", Offset = "0x596AB0")]
				private set
				{
				}
			}

			[Token(Token = "0x170000E2")]
			public uint deviceIndex
			{
				[Token(Token = "0x6001117")]
				[Address(RVA = "0x752DB0", Offset = "0x752DB0", VA = "0x752DB0")]
				get
				{
					return default(uint);
				}
			}

			[Token(Token = "0x170000E3")]
			public bool hasCamera
			{
				[Token(Token = "0x6001118")]
				[Address(RVA = "0x752DCC", Offset = "0x752DCC", VA = "0x752DCC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000E4")]
			public bool hasTracking
			{
				[Token(Token = "0x6001119")]
				[Address(RVA = "0x752DE8", Offset = "0x752DE8", VA = "0x752DE8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000E5")]
			public uint frameId
			{
				[Token(Token = "0x600111A")]
				[Address(RVA = "0x753168", Offset = "0x753168", VA = "0x753168")]
				get
				{
					return default(uint);
				}
			}

			[Token(Token = "0x170000E6")]
			public VRTextureBounds_t frameBounds
			{
				[Token(Token = "0x600111B")]
				[Address(RVA = "0x75318C", Offset = "0x75318C", VA = "0x75318C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x596AC0", Offset = "0x596AC0")]
				get
				{
					return default(VRTextureBounds_t);
				}
				[Token(Token = "0x600111C")]
				[Address(RVA = "0x753198", Offset = "0x753198", VA = "0x753198")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x596AD0", Offset = "0x596AD0")]
				private set
				{
				}
			}

			[Token(Token = "0x170000E7")]
			public EVRTrackedCameraFrameType frameType
			{
				[Token(Token = "0x600111D")]
				[Address(RVA = "0x7531A4", Offset = "0x7531A4", VA = "0x7531A4")]
				get
				{
					return default(EVRTrackedCameraFrameType);
				}
			}

			[Token(Token = "0x170000E8")]
			public Texture2D texture
			{
				[Token(Token = "0x600111E")]
				[Address(RVA = "0x7531AC", Offset = "0x7531AC", VA = "0x7531AC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E9")]
			public SteamVR_Utils.RigidTransform transform
			{
				[Token(Token = "0x600111F")]
				[Address(RVA = "0x7531D0", Offset = "0x7531D0", VA = "0x7531D0")]
				get
				{
					return default(SteamVR_Utils.RigidTransform);
				}
			}

			[Token(Token = "0x170000EA")]
			public Vector3 velocity
			{
				[Token(Token = "0x6001120")]
				[Address(RVA = "0x75322C", Offset = "0x75322C", VA = "0x75322C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000EB")]
			public Vector3 angularVelocity
			{
				[Token(Token = "0x6001121")]
				[Address(RVA = "0x75327C", Offset = "0x75327C", VA = "0x75327C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001114")]
			[Address(RVA = "0x7528A4", Offset = "0x7528A4", VA = "0x7528A4")]
			public VideoStreamTexture(uint deviceIndex, bool undistorted)
			{
			}

			[Token(Token = "0x6001122")]
			[Address(RVA = "0x7532D0", Offset = "0x7532D0", VA = "0x7532D0")]
			public TrackedDevicePose_t GetPose()
			{
				return default(TrackedDevicePose_t);
			}

			[Token(Token = "0x6001123")]
			[Address(RVA = "0x753300", Offset = "0x753300", VA = "0x753300")]
			public ulong Acquire()
			{
				return default(ulong);
			}

			[Token(Token = "0x6001124")]
			[Address(RVA = "0x753318", Offset = "0x753318", VA = "0x753318")]
			public ulong Release()
			{
				return default(ulong);
			}

			[Token(Token = "0x6001125")]
			[Address(RVA = "0x752E0C", Offset = "0x752E0C", VA = "0x752E0C")]
			private void Update()
			{
			}
		}

		[Token(Token = "0x20003D7")]
		private class VideoStream
		{
			[Token(Token = "0x400125A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593734", Offset = "0x593734")]
			private uint <deviceIndex>k__BackingField;

			[Token(Token = "0x400125B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private ulong _handle;

			[Token(Token = "0x400125C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private bool _hasCamera;

			[Token(Token = "0x400125D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private ulong refCount;

			[Token(Token = "0x170000EC")]
			public uint deviceIndex
			{
				[Token(Token = "0x6001127")]
				[Address(RVA = "0x752C38", Offset = "0x752C38", VA = "0x752C38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x596AE0", Offset = "0x596AE0")]
				get
				{
					return default(uint);
				}
				[Token(Token = "0x6001128")]
				[Address(RVA = "0x752C40", Offset = "0x752C40", VA = "0x752C40")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x596AF0", Offset = "0x596AF0")]
				private set
				{
				}
			}

			[Token(Token = "0x170000ED")]
			public ulong handle
			{
				[Token(Token = "0x6001129")]
				[Address(RVA = "0x752C48", Offset = "0x752C48", VA = "0x752C48")]
				get
				{
					return default(ulong);
				}
			}

			[Token(Token = "0x170000EE")]
			public bool hasCamera
			{
				[Token(Token = "0x600112A")]
				[Address(RVA = "0x752C50", Offset = "0x752C50", VA = "0x752C50")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001126")]
			[Address(RVA = "0x752B8C", Offset = "0x752B8C", VA = "0x752B8C")]
			public VideoStream(uint deviceIndex)
			{
			}

			[Token(Token = "0x600112B")]
			[Address(RVA = "0x752C58", Offset = "0x752C58", VA = "0x752C58")]
			public ulong Acquire()
			{
				return default(ulong);
			}

			[Token(Token = "0x600112C")]
			[Address(RVA = "0x752CF8", Offset = "0x752CF8", VA = "0x752CF8")]
			public ulong Release()
			{
				return default(ulong);
			}
		}

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VideoStreamTexture[] distorted;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VideoStreamTexture[] undistorted;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VideoStream[] videostreams;

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x752754", Offset = "0x752754", VA = "0x752754")]
		public static VideoStreamTexture Distorted(int deviceIndex = 0)
		{
			return null;
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x7528F4", Offset = "0x7528F4", VA = "0x7528F4")]
		public static VideoStreamTexture Undistorted(int deviceIndex = 0)
		{
			return null;
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x752A44", Offset = "0x752A44", VA = "0x752A44")]
		public static VideoStreamTexture Source(bool undistorted, int deviceIndex = 0)
		{
			return null;
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x752A58", Offset = "0x752A58", VA = "0x752A58")]
		private static VideoStream Stream(uint deviceIndex)
		{
			return null;
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x752C30", Offset = "0x752C30", VA = "0x752C30")]
		public SteamVR_TrackedCamera()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	public class SteamVR_TrackedObject : MonoBehaviour
	{
		[Token(Token = "0x20003D8")]
		public enum EIndex
		{
			[Token(Token = "0x400125F")]
			None = -1,
			[Token(Token = "0x4001260")]
			Hmd,
			[Token(Token = "0x4001261")]
			Device1,
			[Token(Token = "0x4001262")]
			Device2,
			[Token(Token = "0x4001263")]
			Device3,
			[Token(Token = "0x4001264")]
			Device4,
			[Token(Token = "0x4001265")]
			Device5,
			[Token(Token = "0x4001266")]
			Device6,
			[Token(Token = "0x4001267")]
			Device7,
			[Token(Token = "0x4001268")]
			Device8,
			[Token(Token = "0x4001269")]
			Device9,
			[Token(Token = "0x400126A")]
			Device10,
			[Token(Token = "0x400126B")]
			Device11,
			[Token(Token = "0x400126C")]
			Device12,
			[Token(Token = "0x400126D")]
			Device13,
			[Token(Token = "0x400126E")]
			Device14,
			[Token(Token = "0x400126F")]
			Device15
		}

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EIndex index;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59192C", Offset = "0x59192C")]
		public Transform origin;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591964", Offset = "0x591964")]
		private bool <isValid>k__BackingField;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SteamVR_Events.Action newPosesAction;

		[Token(Token = "0x17000086")]
		public bool isValid
		{
			[Token(Token = "0x600078E")]
			[Address(RVA = "0x7533BC", Offset = "0x7533BC", VA = "0x7533BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59465C", Offset = "0x59465C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600078F")]
			[Address(RVA = "0x7533C4", Offset = "0x7533C4", VA = "0x7533C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59466C", Offset = "0x59466C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x7533D0", Offset = "0x7533D0", VA = "0x7533D0")]
		private void OnNewPoses(TrackedDevicePose_t[] poses)
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x753630", Offset = "0x753630", VA = "0x753630")]
		private SteamVR_TrackedObject()
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x7536E0", Offset = "0x7536E0", VA = "0x7536E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x7536E4", Offset = "0x7536E4", VA = "0x7536E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x753790", Offset = "0x753790", VA = "0x753790")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x7537C8", Offset = "0x7537C8", VA = "0x7537C8")]
		public void SetDeviceIndex(int index)
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public static class SteamVR_Utils
	{
		[Serializable]
		[Token(Token = "0x20003D9")]
		public struct RigidTransform
		{
			[Token(Token = "0x4001270")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 pos;

			[Token(Token = "0x4001271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rot;

			[Token(Token = "0x170000EF")]
			public static RigidTransform identity
			{
				[Token(Token = "0x600112D")]
				[Address(RVA = "0xFA6864", Offset = "0xFA6864", VA = "0xFA6864")]
				get
				{
					return default(RigidTransform);
				}
			}

			[Token(Token = "0x600112E")]
			[Address(RVA = "0xFA6934", Offset = "0xFA6934", VA = "0xFA6934")]
			public static RigidTransform FromLocal(Transform t)
			{
				return default(RigidTransform);
			}

			[Token(Token = "0x600112F")]
			[Address(RVA = "0xFA6920", Offset = "0xFA6920", VA = "0xFA6920")]
			public RigidTransform(Vector3 pos, Quaternion rot)
			{
			}

			[Token(Token = "0x6001130")]
			[Address(RVA = "0xFA699C", Offset = "0xFA699C", VA = "0xFA699C")]
			public RigidTransform(Transform t)
			{
			}

			[Token(Token = "0x6001131")]
			[Address(RVA = "0xFA69EC", Offset = "0xFA69EC", VA = "0xFA69EC")]
			public RigidTransform(Transform from, Transform to)
			{
			}

			[Token(Token = "0x6001132")]
			[Address(RVA = "0xFA6BAC", Offset = "0xFA6BAC", VA = "0xFA6BAC")]
			public RigidTransform(HmdMatrix34_t pose)
			{
			}

			[Token(Token = "0x6001133")]
			[Address(RVA = "0xFA6DC4", Offset = "0xFA6DC4", VA = "0xFA6DC4")]
			public RigidTransform(HmdMatrix44_t pose)
			{
			}

			[Token(Token = "0x6001134")]
			[Address(RVA = "0xFA7040", Offset = "0xFA7040", VA = "0xFA7040")]
			public HmdMatrix44_t ToHmdMatrix44()
			{
				return default(HmdMatrix44_t);
			}

			[Token(Token = "0x6001135")]
			[Address(RVA = "0xFA7334", Offset = "0xFA7334", VA = "0xFA7334")]
			public HmdMatrix34_t ToHmdMatrix34()
			{
				return default(HmdMatrix34_t);
			}

			[Token(Token = "0x6001136")]
			[Address(RVA = "0xFA75A8", Offset = "0xFA75A8", VA = "0xFA75A8", Slot = "0")]
			public override bool Equals(object o)
			{
				return default(bool);
			}

			[Token(Token = "0x6001137")]
			[Address(RVA = "0xFA770C", Offset = "0xFA770C", VA = "0xFA770C", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6001138")]
			[Address(RVA = "0xFA7744", Offset = "0xFA7744", VA = "0xFA7744")]
			public static bool operator ==(RigidTransform a, RigidTransform b)
			{
				return default(bool);
			}

			[Token(Token = "0x6001139")]
			[Address(RVA = "0xFA787C", Offset = "0xFA787C", VA = "0xFA787C")]
			public static bool operator !=(RigidTransform a, RigidTransform b)
			{
				return default(bool);
			}

			[Token(Token = "0x600113A")]
			[Address(RVA = "0xFA79B4", Offset = "0xFA79B4", VA = "0xFA79B4")]
			public static RigidTransform operator *(RigidTransform a, RigidTransform b)
			{
				return default(RigidTransform);
			}

			[Token(Token = "0x600113B")]
			[Address(RVA = "0xFA7B18", Offset = "0xFA7B18", VA = "0xFA7B18")]
			public void Inverse()
			{
			}

			[Token(Token = "0x600113C")]
			[Address(RVA = "0xFA7C08", Offset = "0xFA7C08", VA = "0xFA7C08")]
			public RigidTransform GetInverse()
			{
				return default(RigidTransform);
			}

			[Token(Token = "0x600113D")]
			[Address(RVA = "0xFA7C5C", Offset = "0xFA7C5C", VA = "0xFA7C5C")]
			public void Multiply(RigidTransform a, RigidTransform b)
			{
			}

			[Token(Token = "0x600113E")]
			[Address(RVA = "0xFA7DA0", Offset = "0xFA7DA0", VA = "0xFA7DA0")]
			public Vector3 InverseTransformPoint(Vector3 point)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600113F")]
			[Address(RVA = "0xFA7EC4", Offset = "0xFA7EC4", VA = "0xFA7EC4")]
			public Vector3 TransformPoint(Vector3 point)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001140")]
			[Address(RVA = "0xFA7FD8", Offset = "0xFA7FD8", VA = "0xFA7FD8")]
			public static Vector3 operator *(RigidTransform t, Vector3 v)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001141")]
			[Address(RVA = "0xFA7FDC", Offset = "0xFA7FDC", VA = "0xFA7FDC")]
			public static RigidTransform Interpolate(RigidTransform a, RigidTransform b, float t)
			{
				return default(RigidTransform);
			}

			[Token(Token = "0x6001142")]
			[Address(RVA = "0xFA8138", Offset = "0xFA8138", VA = "0xFA8138")]
			public void Interpolate(RigidTransform to, float t)
			{
			}
		}

		[Token(Token = "0x20003DA")]
		public delegate object SystemFn(CVRSystem system, params object[] args);

		[Token(Token = "0x4000D4B")]
		private const string secretKey = "foobar";

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x7538B0", Offset = "0x7538B0", VA = "0x7538B0")]
		public static Quaternion Slerp(Quaternion A, Quaternion B, float t)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x753A78", Offset = "0x753A78", VA = "0x753A78")]
		public static Vector3 Lerp(Vector3 A, Vector3 B, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x753AD0", Offset = "0x753AD0", VA = "0x753AD0")]
		public static float Lerp(float A, float B, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x753AE0", Offset = "0x753AE0", VA = "0x753AE0")]
		public static double Lerp(double A, double B, double t)
		{
			return default(double);
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x753AF0", Offset = "0x753AF0", VA = "0x753AF0")]
		public static float InverseLerp(Vector3 A, Vector3 B, Vector3 result)
		{
			return default(float);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x753BF4", Offset = "0x753BF4", VA = "0x753BF4")]
		public static float InverseLerp(float A, float B, float result)
		{
			return default(float);
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x753C04", Offset = "0x753C04", VA = "0x753C04")]
		public static double InverseLerp(double A, double B, double result)
		{
			return default(double);
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x753C14", Offset = "0x753C14", VA = "0x753C14")]
		public static float Saturate(float A)
		{
			return default(float);
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x753C30", Offset = "0x753C30", VA = "0x753C30")]
		public static Vector2 Saturate(Vector2 A)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0x753C7C", Offset = "0x753C7C", VA = "0x753C7C")]
		public static float Abs(float A)
		{
			return default(float);
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x753C8C", Offset = "0x753C8C", VA = "0x753C8C")]
		public static Vector2 Abs(Vector2 A)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x753CD0", Offset = "0x753CD0", VA = "0x753CD0")]
		private static float _copysign(float sizeval, float signval)
		{
			return default(float);
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x753D8C", Offset = "0x753D8C", VA = "0x753D8C")]
		public static Quaternion GetRotation(this Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x753F58", Offset = "0x753F58", VA = "0x753F58")]
		public static Vector3 GetPosition(this Matrix4x4 matrix)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x753F94", Offset = "0x753F94", VA = "0x753F94")]
		public static Vector3 GetScale(this Matrix4x4 m)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x7510E8", Offset = "0x7510E8", VA = "0x7510E8")]
		public static Quaternion GetRotation(HmdMatrix34_t matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x7510A4", Offset = "0x7510A4", VA = "0x7510A4")]
		public static Vector3 GetPosition(HmdMatrix34_t matrix)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x7540CC", Offset = "0x7540CC", VA = "0x7540CC")]
		public static object CallSystemFn(SystemFn fn, params object[] args)
		{
			return null;
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x74C400", Offset = "0x74C400", VA = "0x74C400")]
		public static void TakeStereoScreenshot(uint screenshotHandle, GameObject target, int cellSize, float ipd, ref string previewFilename, ref string VRFilename)
		{
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x74104C", Offset = "0x74104C", VA = "0x74104C")]
		public static string GetBadMD5Hash(string usedString)
		{
			return null;
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x754240", Offset = "0x754240", VA = "0x754240")]
		public static string ConvertToForwardSlashes(string fromString)
		{
			return null;
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x7542C4", Offset = "0x7542C4", VA = "0x7542C4")]
		public static float GetLossyScale(Transform forTransform)
		{
			return default(float);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x754390", Offset = "0x754390", VA = "0x754390")]
		public static bool IsValid(Vector3 vector)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x7543E8", Offset = "0x7543E8", VA = "0x7543E8")]
		public static bool IsValid(Quaternion rotation)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C7")]
	public class SteamVR_Input_ActionSet_buggy : SteamVR_ActionSet
	{
		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public SteamVR_Input_ActionSet_buggy_In inActions;

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x744A88", Offset = "0x744A88", VA = "0x744A88")]
		public SteamVR_Input_ActionSet_buggy()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public class SteamVR_Input_ActionSet_buggy_In : SteamVR_Action_List
	{
		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_Action_Vector2 Steering;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SteamVR_Action_Single Throttle;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SteamVR_Action_Boolean Brake;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SteamVR_Action_Boolean Reset;

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x744AF0", Offset = "0x744AF0", VA = "0x744AF0")]
		public SteamVR_Input_ActionSet_buggy_In()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	public class SteamVR_Input_ActionSet_default : SteamVR_ActionSet
	{
		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public SteamVR_Input_ActionSet_default_In inActions;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SteamVR_Input_ActionSet_default_Out outActions;

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x744AF8", Offset = "0x744AF8", VA = "0x744AF8")]
		public SteamVR_Input_ActionSet_default()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	public class SteamVR_Input_ActionSet_default_In : SteamVR_Action_List
	{
		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_Action_Boolean InteractUI;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SteamVR_Action_Boolean Teleport;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SteamVR_Action_Boolean GrabPinch;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SteamVR_Action_Boolean GrabGrip;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SteamVR_Action_Pose Pose;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SteamVR_Action_Skeleton SkeletonLeftHand;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SteamVR_Action_Skeleton SkeletonRightHand;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SteamVR_Action_Single Squeeze;

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x744B60", Offset = "0x744B60", VA = "0x744B60")]
		public SteamVR_Input_ActionSet_default_In()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public class SteamVR_Input_ActionSet_default_Out : SteamVR_Action_List
	{
		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_Action_Vibration Haptic;

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x744B68", Offset = "0x744B68", VA = "0x744B68")]
		public SteamVR_Input_ActionSet_default_Out()
		{
		}
	}
	[Token(Token = "0x20001CC")]
	public class SteamVR_Input_ActionSet_platformer : SteamVR_ActionSet
	{
		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public SteamVR_Input_ActionSet_platformer_In inActions;

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x744B70", Offset = "0x744B70", VA = "0x744B70")]
		public SteamVR_Input_ActionSet_platformer()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	public class SteamVR_Input_ActionSet_platformer_In : SteamVR_Action_List
	{
		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SteamVR_Action_Vector2 Move;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SteamVR_Action_Boolean Jump;

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x744BD8", Offset = "0x744BD8", VA = "0x744BD8")]
		public SteamVR_Input_ActionSet_platformer_In()
		{
		}
	}
}
namespace Valve.VR.Extras
{
	[Token(Token = "0x20001CE")]
	public class SteamVR_GazeTracker : MonoBehaviour
	{
		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isInGaze;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float gazeInCutoff;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float gazeOutCutoff;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Transform hmdTrackedObject;

		[Token(Token = "0x1400000E")]
		public event GazeEventHandler GazeOn
		{
			[Token(Token = "0x60007B5")]
			[Address(RVA = "0xC3F6A8", Offset = "0xC3F6A8", VA = "0xC3F6A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5946AC", Offset = "0x5946AC")]
			add
			{
			}
			[Token(Token = "0x60007B6")]
			[Address(RVA = "0xC3F74C", Offset = "0xC3F74C", VA = "0xC3F74C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5946BC", Offset = "0x5946BC")]
			remove
			{
			}
		}

		[Token(Token = "0x1400000F")]
		public event GazeEventHandler GazeOff
		{
			[Token(Token = "0x60007B7")]
			[Address(RVA = "0xC3F7F0", Offset = "0xC3F7F0", VA = "0xC3F7F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5946CC", Offset = "0x5946CC")]
			add
			{
			}
			[Token(Token = "0x60007B8")]
			[Address(RVA = "0xC3F894", Offset = "0xC3F894", VA = "0xC3F894")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5946DC", Offset = "0x5946DC")]
			remove
			{
			}
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xC3F938", Offset = "0xC3F938", VA = "0xC3F938", Slot = "4")]
		public virtual void OnGazeOn(GazeEventArgs gazeEventArgs)
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xC3F94C", Offset = "0xC3F94C", VA = "0xC3F94C", Slot = "5")]
		public virtual void OnGazeOff(GazeEventArgs gazeEventArgs)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xC3F960", Offset = "0xC3F960", VA = "0xC3F960", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xC3FCC8", Offset = "0xC3FCC8", VA = "0xC3FCC8")]
		public SteamVR_GazeTracker()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public struct GazeEventArgs
	{
		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float distance;
	}
	[Token(Token = "0x20001D0")]
	public delegate void GazeEventHandler(object sender, GazeEventArgs gazeEventArgs);
	[Token(Token = "0x20001D1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E0E0", Offset = "0x58E0E0")]
	public class SteamVR_TestThrow : MonoBehaviour
	{
		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prefab;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody attachPoint;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x591994", Offset = "0x591994")]
		public SteamVR_Action_Boolean spawn;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SteamVR_Behaviour_Pose trackedObj;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FixedJoint joint;

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xC3FCDC", Offset = "0xC3FCDC", VA = "0xC3FCDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xC3FD34", Offset = "0xC3FD34", VA = "0xC3FD34")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0xC4006C", Offset = "0xC4006C", VA = "0xC4006C")]
		public SteamVR_TestThrow()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public class SteamVR_TestTrackedCamera : MonoBehaviour
	{
		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material material;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform target;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool undistorted;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool cropped;

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0xC40074", Offset = "0xC40074", VA = "0xC40074")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xC400DC", Offset = "0xC400DC", VA = "0xC400DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xC40128", Offset = "0xC40128", VA = "0xC40128")]
		private void Update()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xC403E8", Offset = "0xC403E8", VA = "0xC403E8")]
		public SteamVR_TestTrackedCamera()
		{
		}
	}
}
namespace Valve.VR.InteractionSystem
{
	[Token(Token = "0x20001D3")]
	public class InteractiveTirgger : MonoBehaviour
	{
		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LevelButton LevelButton;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeaderboardController LeaderboardController;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LevelPanel LevelPanel;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject TimeGo;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject LockGo;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool IsShowLeaderboard;

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x7BE648", Offset = "0x7BE648", VA = "0x7BE648")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x7BE894", Offset = "0x7BE894", VA = "0x7BE894")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x7BE898", Offset = "0x7BE898", VA = "0x7BE898")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x7BEB00", Offset = "0x7BEB00", VA = "0x7BEB00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x7BEBE0", Offset = "0x7BEBE0", VA = "0x7BEBE0")]
		public void OnTirggerClick()
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x7BECA8", Offset = "0x7BECA8", VA = "0x7BECA8")]
		public void PlayAnimater()
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x7BEEBC", Offset = "0x7BEEBC", VA = "0x7BEEBC")]
		public void StopAnimater()
		{
		}

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x7BF0C4", Offset = "0x7BF0C4", VA = "0x7BF0C4")]
		public InteractiveTirgger()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E144", Offset = "0x58E144")]
	public class BodyCollider : MonoBehaviour
	{
		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform head;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CapsuleCollider capsuleCollider;

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xB34F08", Offset = "0xB34F08", VA = "0xB34F08")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xB34F60", Offset = "0xB34F60", VA = "0xB34F60")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xB350FC", Offset = "0xB350FC", VA = "0xB350FC")]
		public BodyCollider()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E1A8", Offset = "0x58E1A8")]
	public class CircularDrive : MonoBehaviour
	{
		[Token(Token = "0x20003DB")]
		public enum Axis_t
		{
			[Token(Token = "0x4001273")]
			XAxis,
			[Token(Token = "0x4001274")]
			YAxis,
			[Token(Token = "0x4001275")]
			ZAxis
		}

		[Token(Token = "0x20003DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590484", Offset = "0x590484")]
		private sealed class <HapticPulses>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001277")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001278")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4001279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float flMagnitude;

			[Token(Token = "0x400127A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int nCount;

			[Token(Token = "0x400127B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <nRangeMax>5__2;

			[Token(Token = "0x400127C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private ushort <i>5__3;

			[Token(Token = "0x170000F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600114A")]
				[Address(RVA = "0x7AE42C", Offset = "0x7AE42C", VA = "0x7AE42C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600114C")]
				[Address(RVA = "0x7AE494", Offset = "0x7AE494", VA = "0x7AE494", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001147")]
			[Address(RVA = "0x7ACC10", Offset = "0x7ACC10", VA = "0x7ACC10")]
			[DebuggerHidden]
			public <HapticPulses>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x6001148")]
			[Address(RVA = "0x7AE244", Offset = "0x7AE244", VA = "0x7AE244", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001149")]
			[Address(RVA = "0x7AE248", Offset = "0x7AE248", VA = "0x7AE248", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600114B")]
			[Address(RVA = "0x7AE434", Offset = "0x7AE434", VA = "0x7AE434", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5919D0", Offset = "0x5919D0")]
		public Axis_t axisOfRotation;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591A08", Offset = "0x591A08")]
		public Collider childCollider;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591A40", Offset = "0x591A40")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591A78", Offset = "0x591A78")]
		public bool hoverLock;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x591AB0", Offset = "0x591AB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591AB0", Offset = "0x591AB0")]
		public bool limited;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 frozenDistanceMinMaxThreshold;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onFrozenDistanceThreshold;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x591B10", Offset = "0x591B10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591B10", Offset = "0x591B10")]
		public float minAngle;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591B70", Offset = "0x591B70")]
		public bool freezeOnMin;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591BA8", Offset = "0x591BA8")]
		public UnityEvent onMinAngle;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x591BE0", Offset = "0x591BE0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591BE0", Offset = "0x591BE0")]
		public float maxAngle;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591C40", Offset = "0x591C40")]
		public bool freezeOnMax;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591C78", Offset = "0x591C78")]
		public UnityEvent onMaxAngle;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591CB0", Offset = "0x591CB0")]
		public bool forceStart;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591CE8", Offset = "0x591CE8")]
		public float startAngle;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591D20", Offset = "0x591D20")]
		public bool rotateGameObject;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591D58", Offset = "0x591D58")]
		public bool debugPath;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591D90", Offset = "0x591D90")]
		public int dbgPathLimit;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591DC8", Offset = "0x591DC8")]
		public TextMesh debugText;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591E00", Offset = "0x591E00")]
		public float outAngle;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion start;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 worldPlaneNormal;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 localPlaneNormal;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 lastHandProjected;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Color red;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Color green;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private GameObject[] dbgHandObjects;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private GameObject[] dbgProjObjects;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private GameObject dbgObjectsParent;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int dbgObjectCount;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int dbgObjectIndex;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool driving;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float minMaxAngularThreshold;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool frozen;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float frozenAngle;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 frozenHandWorldPos;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector2 frozenSqDistanceMinMaxThreshold;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Hand handHoverLocked;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Interactable interactable;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private GrabTypes grabbedWithType;

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x7AC474", Offset = "0x7AC474", VA = "0x7AC474")]
		private void Freeze(Hand hand)
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x7AC4D4", Offset = "0x7AC4D4", VA = "0x7AC4D4")]
		private void UnFreeze()
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x7AC4F4", Offset = "0x7AC4F4", VA = "0x7AC4F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x7AC54C", Offset = "0x7AC54C", VA = "0x7AC54C")]
		private void Start()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x7AC984", Offset = "0x7AC984", VA = "0x7AC984")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x7ACB80", Offset = "0x7ACB80", VA = "0x7ACB80")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5946EC", Offset = "0x5946EC")]
		private IEnumerator HapticPulses(Hand hand, float flMagnitude, int nCount)
		{
			return null;
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x7ACC3C", Offset = "0x7ACC3C", VA = "0x7ACC3C")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x7ACD04", Offset = "0x7ACD04", VA = "0x7ACD04")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x7ACDC0", Offset = "0x7ACDC0", VA = "0x7ACDC0")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x7AD024", Offset = "0x7AD024", VA = "0x7AD024")]
		private Vector3 ComputeToTransformProjected(Transform xForm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x7AD710", Offset = "0x7AD710", VA = "0x7AD710")]
		private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x7ADDE4", Offset = "0x7ADDE4", VA = "0x7ADDE4")]
		private void UpdateLinearMapping()
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x7ADFA0", Offset = "0x7ADFA0", VA = "0x7ADFA0")]
		private void UpdateGameObject()
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x7ADEA4", Offset = "0x7ADEA4", VA = "0x7ADEA4")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x7AC958", Offset = "0x7AC958", VA = "0x7AC958")]
		private void UpdateAll()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x7AD344", Offset = "0x7AD344", VA = "0x7AD344")]
		private void ComputeAngle(Hand hand)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x7AE0BC", Offset = "0x7AE0BC", VA = "0x7AE0BC")]
		public CircularDrive()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E20C", Offset = "0x58E20C")]
	public class ComplexThrowable : MonoBehaviour
	{
		[Token(Token = "0x20003DD")]
		public enum AttachMode
		{
			[Token(Token = "0x400127E")]
			FixedJoint,
			[Token(Token = "0x400127F")]
			Force
		}

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float attachForce;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float attachForceDamper;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AttachMode attachMode;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[EnumFlags]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Hand> holdingHands;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Rigidbody> holdingBodies;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Vector3> holdingPoints;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Rigidbody> rigidBodies;

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x7AE49C", Offset = "0x7AE49C", VA = "0x7AE49C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x7AE4F0", Offset = "0x7AE4F0", VA = "0x7AE4F0")]
		private void Update()
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x7AE8A4", Offset = "0x7AE8A4", VA = "0x7AE8A4")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x7AE964", Offset = "0x7AE964", VA = "0x7AE964")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x7AEA08", Offset = "0x7AEA08", VA = "0x7AEA08")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x7AEA58", Offset = "0x7AEA58", VA = "0x7AEA58")]
		private void PhysicsAttach(Hand hand, GrabTypes startingGrabType)
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x7AE6E0", Offset = "0x7AE6E0", VA = "0x7AE6E0")]
		private bool PhysicsDetach(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x7B0654", Offset = "0x7B0654", VA = "0x7B0654")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x7B091C", Offset = "0x7B091C", VA = "0x7B091C")]
		public ComplexThrowable()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	public class ControllerHoverHighlight : MonoBehaviour
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material highLightMaterial;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fireHapticsOnHightlight;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Hand hand;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected RenderModel renderModel;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x7B4A64", Offset = "0x7B4A64", VA = "0x7B4A64")]
		protected void Awake()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x7B4ABC", Offset = "0x7B4ABC", VA = "0x7B4ABC")]
		protected void OnHandInitialized(int deviceIndex)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x7B4D8C", Offset = "0x7B4D8C", VA = "0x7B4D8C")]
		private void RenderModel_onControllerLoaded()
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x7B4DA8", Offset = "0x7B4DA8", VA = "0x7B4DA8")]
		protected void OnParentHandHoverBegin(Interactable other)
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x7B4F40", Offset = "0x7B4F40", VA = "0x7B4F40")]
		private void OnParentHandHoverEnd(Interactable other)
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x7B4FF0", Offset = "0x7B4FF0", VA = "0x7B4FF0")]
		private void OnParentHandInputFocusAcquired()
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x7B5110", Offset = "0x7B5110", VA = "0x7B5110")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x7B4E90", Offset = "0x7B4E90", VA = "0x7B4E90")]
		public void ShowHighlight()
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x7B4F44", Offset = "0x7B4F44", VA = "0x7B4F44")]
		public void HideHighlight()
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x7B5114", Offset = "0x7B5114", VA = "0x7B5114")]
		public ControllerHoverHighlight()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	public static class CustomEvents
	{
		[Serializable]
		[Token(Token = "0x20003DE")]
		public class UnityEventSingleFloat : UnityEvent<float>
		{
			[Token(Token = "0x600114D")]
			[Address(RVA = "0x7B5174", Offset = "0x7B5174", VA = "0x7B5174")]
			public UnityEventSingleFloat()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003DF")]
		public class UnityEventHand : UnityEvent<Hand>
		{
			[Token(Token = "0x600114E")]
			[Address(RVA = "0x7B5124", Offset = "0x7B5124", VA = "0x7B5124")]
			public UnityEventHand()
			{
			}
		}
	}
	[Token(Token = "0x20001D9")]
	public class DebugUI : MonoBehaviour
	{
		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Player player;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static DebugUI _instance;

		[Token(Token = "0x17000087")]
		public static DebugUI instance
		{
			[Token(Token = "0x60007F7")]
			[Address(RVA = "0x7B51C4", Offset = "0x7B51C4", VA = "0x7B51C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x7B5290", Offset = "0x7B5290", VA = "0x7B5290")]
		private void Start()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x7B52B8", Offset = "0x7B52B8", VA = "0x7B52B8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x7B5340", Offset = "0x7B5340", VA = "0x7B5340")]
		public DebugUI()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E270", Offset = "0x58E270")]
	public class DestroyOnDetachedFromHand : MonoBehaviour
	{
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x7B5348", Offset = "0x7B5348", VA = "0x7B5348")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x7B53C4", Offset = "0x7B53C4", VA = "0x7B53C4")]
		public DestroyOnDetachedFromHand()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E2D4", Offset = "0x58E2D4")]
	public class DestroyOnParticleSystemDeath : MonoBehaviour
	{
		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem particles;

		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x7B53CC", Offset = "0x7B53CC", VA = "0x7B53CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x7B5444", Offset = "0x7B5444", VA = "0x7B5444")]
		private void CheckParticleSystem()
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x7B54E4", Offset = "0x7B54E4", VA = "0x7B54E4")]
		public DestroyOnParticleSystemDeath()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class DestroyOnTriggerEnter : MonoBehaviour
	{
		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string tagFilter;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useTag;

		[Token(Token = "0x6000800")]
		[Address(RVA = "0x7B54EC", Offset = "0x7B54EC", VA = "0x7B54EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0x7B5520", Offset = "0x7B5520", VA = "0x7B5520")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0x7B5618", Offset = "0x7B5618", VA = "0x7B5618")]
		public DestroyOnTriggerEnter()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public class DistanceHaptics : MonoBehaviour
	{
		[Token(Token = "0x20003E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590494", Offset = "0x590494")]
		private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DistanceHaptics <>4__this;

			[Token(Token = "0x170000F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001152")]
				[Address(RVA = "0x7B58F4", Offset = "0x7B58F4", VA = "0x7B58F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001154")]
				[Address(RVA = "0x7B595C", Offset = "0x7B595C", VA = "0x7B595C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600114F")]
			[Address(RVA = "0x7B5690", Offset = "0x7B5690", VA = "0x7B5690")]
			[DebuggerHidden]
			public <Start>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001150")]
			[Address(RVA = "0x7B572C", Offset = "0x7B572C", VA = "0x7B572C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001151")]
			[Address(RVA = "0x7B5730", Offset = "0x7B5730", VA = "0x7B5730", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001153")]
			[Address(RVA = "0x7B58FC", Offset = "0x7B58FC", VA = "0x7B58FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform firstTransform;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform secondTransform;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve distanceIntensityCurve;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve pulseIntervalCurve;

		[Token(Token = "0x6000803")]
		[Address(RVA = "0x7B5620", Offset = "0x7B5620", VA = "0x7B5620")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594750", Offset = "0x594750")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000804")]
		[Address(RVA = "0x7B56BC", Offset = "0x7B56BC", VA = "0x7B56BC")]
		public DistanceHaptics()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public class DontDestroyOnLoad : MonoBehaviour
	{
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x7B5964", Offset = "0x7B5964", VA = "0x7B5964")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0x7B59CC", Offset = "0x7B59CC", VA = "0x7B59CC")]
		public DontDestroyOnLoad()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class EnumFlags : PropertyAttribute
	{
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x7B59D4", Offset = "0x7B59D4", VA = "0x7B59D4")]
		public EnumFlags()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public enum WhichHand
	{
		[Token(Token = "0x4000DB6")]
		Left,
		[Token(Token = "0x4000DB7")]
		Right
	}
	[Token(Token = "0x20001E1")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E338", Offset = "0x58E338")]
	public class Equippable : MonoBehaviour
	{
		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591E48", Offset = "0x591E48")]
		public Transform[] antiFlip;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WhichHand defaultHand;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialScale;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Interactable interactable;

		[Token(Token = "0x17000088")]
		[HideInInspector]
		public SteamVR_Input_Sources attachedHandType
		{
			[Token(Token = "0x6000808")]
			[Address(RVA = "0x7B59DC", Offset = "0x7B59DC", VA = "0x7B59DC")]
			get
			{
				return default(SteamVR_Input_Sources);
			}
		}

		[Token(Token = "0x6000809")]
		[Address(RVA = "0x7B5A78", Offset = "0x7B5A78", VA = "0x7B5A78")]
		private void Start()
		{
		}

		[Token(Token = "0x600080A")]
		[Address(RVA = "0x7B5AF4", Offset = "0x7B5AF4", VA = "0x7B5AF4")]
		private void Update()
		{
		}

		[Token(Token = "0x600080B")]
		[Address(RVA = "0x7B5CF8", Offset = "0x7B5CF8", VA = "0x7B5CF8")]
		public Equippable()
		{
		}
	}
	[Token(Token = "0x20001E2")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E39C", Offset = "0x58E39C")]
	public class FallbackCameraController : MonoBehaviour
	{
		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float shiftSpeed;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showInstructions;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 startEulerAngles;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 startMousePosition;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float realTime;

		[Token(Token = "0x600080C")]
		[Address(RVA = "0x7B5DF4", Offset = "0x7B5DF4", VA = "0x7B5DF4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x7B5E1C", Offset = "0x7B5E1C", VA = "0x7B5E1C")]
		private void Update()
		{
		}

		[Token(Token = "0x600080E")]
		[Address(RVA = "0x7B6184", Offset = "0x7B6184", VA = "0x7B6184")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x7B6238", Offset = "0x7B6238", VA = "0x7B6238")]
		public FallbackCameraController()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public enum GrabTypes
	{
		[Token(Token = "0x4000DC3")]
		None,
		[Token(Token = "0x4000DC4")]
		Trigger,
		[Token(Token = "0x4000DC5")]
		Pinch,
		[Token(Token = "0x4000DC6")]
		Grip,
		[Token(Token = "0x4000DC7")]
		Scripted
	}
	[Token(Token = "0x20001E4")]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x20003E1")]
		[Flags]
		public enum AttachmentFlags
		{
			[Token(Token = "0x4001284")]
			SnapOnAttach = 1,
			[Token(Token = "0x4001285")]
			DetachOthers = 2,
			[Token(Token = "0x4001286")]
			DetachFromOtherHand = 4,
			[Token(Token = "0x4001287")]
			ParentToHand = 8,
			[Token(Token = "0x4001288")]
			VelocityMovement = 0x10,
			[Token(Token = "0x4001289")]
			TurnOnKinematic = 0x20,
			[Token(Token = "0x400128A")]
			TurnOffGravity = 0x40,
			[Token(Token = "0x400128B")]
			AllowSidegrade = 0x80
		}

		[Token(Token = "0x20003E2")]
		public struct AttachedObject
		{
			[Token(Token = "0x400128C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject attachedObject;

			[Token(Token = "0x400128D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Interactable interactable;

			[Token(Token = "0x400128E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody attachedRigidbody;

			[Token(Token = "0x400128F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CollisionDetectionMode collisionDetectionMode;

			[Token(Token = "0x4001290")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool attachedRigidbodyWasKinematic;

			[Token(Token = "0x4001291")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
			public bool attachedRigidbodyUsedGravity;

			[Token(Token = "0x4001292")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject originalParent;

			[Token(Token = "0x4001293")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isParentedToHand;

			[Token(Token = "0x4001294")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public GrabTypes grabbedWithType;

			[Token(Token = "0x4001295")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AttachmentFlags attachmentFlags;

			[Token(Token = "0x4001296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 initialPositionalOffset;

			[Token(Token = "0x4001297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Quaternion initialRotationalOffset;

			[Token(Token = "0x4001298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform attachedOffsetTransform;

			[Token(Token = "0x4001299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform handAttachmentPointTransform;

			[Token(Token = "0x6001155")]
			[Address(RVA = "0x7B78E8", Offset = "0x7B78E8", VA = "0x7B78E8")]
			public bool HasAttachFlag(AttachmentFlags flag)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20003E3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5904B4", Offset = "0x5904B4")]
		private sealed class <>c__DisplayClass74_0
		{
			[Token(Token = "0x400129A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject objectToDetach;

			[Token(Token = "0x6001156")]
			[Address(RVA = "0x7B7900", Offset = "0x7B7900", VA = "0x7B7900")]
			public <>c__DisplayClass74_0()
			{
			}

			[Token(Token = "0x6001157")]
			[Address(RVA = "0x7BAD44", Offset = "0x7BAD44", VA = "0x7BAD44")]
			internal bool <DetachObject>b__0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20003E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5904C4", Offset = "0x5904C4")]
		private sealed class <>c
		{
			[Token(Token = "0x400129B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400129C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Predicate<AttachedObject> <>9__78_0;

			[Token(Token = "0x6001159")]
			[Address(RVA = "0x7BACCC", Offset = "0x7BACCC", VA = "0x7BACCC")]
			public <>c()
			{
			}

			[Token(Token = "0x600115A")]
			[Address(RVA = "0x7BACD4", Offset = "0x7BACD4", VA = "0x7BACD4")]
			internal bool <CleanUpAttachedObjectStack>b__78_0(AttachedObject l)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20003E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5904D4", Offset = "0x5904D4")]
		private sealed class <Start>d__81 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400129D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400129E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400129F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand <>4__this;

			[Token(Token = "0x170000F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600115E")]
				[Address(RVA = "0x7BAEC0", Offset = "0x7BAEC0", VA = "0x7BAEC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001160")]
				[Address(RVA = "0x7BAF28", Offset = "0x7BAF28", VA = "0x7BAF28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600115B")]
			[Address(RVA = "0x7B7EB8", Offset = "0x7B7EB8", VA = "0x7B7EB8")]
			[DebuggerHidden]
			public <Start>d__81(int <>1__state)
			{
			}

			[Token(Token = "0x600115C")]
			[Address(RVA = "0x7BADC4", Offset = "0x7BADC4", VA = "0x7BADC4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600115D")]
			[Address(RVA = "0x7BADC8", Offset = "0x7BADC8", VA = "0x7BADC8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600115F")]
			[Address(RVA = "0x7BAEC8", Offset = "0x7BAEC8", VA = "0x7BAEC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DC8")]
		public const AttachmentFlags defaultAttachmentFlags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand | AttachmentFlags.TurnOnKinematic;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand otherHand;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteamVR_Input_Sources handType;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_Behaviour_Pose trackedObject;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x591E80", Offset = "0x591E80")]
		public SteamVR_Action_Boolean grabPinchAction;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x591EBC", Offset = "0x591EBC")]
		public SteamVR_Action_Boolean grabGripAction;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x591EF8", Offset = "0x591EF8")]
		public SteamVR_Action_Vibration hapticAction;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x591F34", Offset = "0x591F34")]
		public SteamVR_Action_Boolean uiInteractAction;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useHoverSphere;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform hoverSphereTransform;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float hoverSphereRadius;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public LayerMask hoverLayerMask;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float hoverUpdateInterval;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool useControllerHoverComponent;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string controllerHoverComponent;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float controllerHoverRadius;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool useFingerJointHover;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SteamVR_Skeleton_JointIndexEnum fingerJointHover;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float fingerJointHoverRadius;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591F70", Offset = "0x591F70")]
		public Transform objectAttachmentPoint;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Camera noSteamVRFallbackCamera;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float noSteamVRFallbackMaxDistanceNoItem;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float noSteamVRFallbackMaxDistanceWithItem;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float noSteamVRFallbackInteractorDistance;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject renderModelPrefab;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected List<RenderModel> renderModels;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected RenderModel mainRenderModel;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected RenderModel hoverhighlightRenderModel;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool showDebugText;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool spewDebugText;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCA")]
		public bool showDebugInteractables;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<AttachedObject> attachedObjects;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x591FA8", Offset = "0x591FA8")]
		private bool <hoverLocked>k__BackingField;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Interactable _hoveringInteractable;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private TextMesh debugText;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int prevOverlappingColliders;

		[Token(Token = "0x4000DEC")]
		private const int ColliderArraySize = 16;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Collider[] overlappingColliders;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Player playerInstance;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private GameObject applicationLostFocusObject;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private SteamVR_Events.Action inputFocusAction;

		[Token(Token = "0x4000DF1")]
		protected const float MaxVelocityChange = 10f;

		[Token(Token = "0x4000DF2")]
		protected const float VelocityMagic = 6000f;

		[Token(Token = "0x4000DF3")]
		protected const float AngularVelocityMagic = 50f;

		[Token(Token = "0x4000DF4")]
		protected const float MaxAngularVelocityChange = 20f;

		[Token(Token = "0x17000089")]
		public ReadOnlyCollection<AttachedObject> AttachedObjects
		{
			[Token(Token = "0x6000810")]
			[Address(RVA = "0x7B6A34", Offset = "0x7B6A34", VA = "0x7B6A34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		public bool hoverLocked
		{
			[Token(Token = "0x6000811")]
			[Address(RVA = "0x7B6A8C", Offset = "0x7B6A8C", VA = "0x7B6A8C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5947B4", Offset = "0x5947B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000812")]
			[Address(RVA = "0x7B6A94", Offset = "0x7B6A94", VA = "0x7B6A94")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5947C4", Offset = "0x5947C4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public bool isActive
		{
			[Token(Token = "0x6000813")]
			[Address(RVA = "0x7AE948", Offset = "0x7AE948", VA = "0x7AE948")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008C")]
		public bool isPoseValid
		{
			[Token(Token = "0x6000814")]
			[Address(RVA = "0x7B6AA0", Offset = "0x7B6AA0", VA = "0x7B6AA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700008D")]
		public Interactable hoveringInteractable
		{
			[Token(Token = "0x6000815")]
			[Address(RVA = "0x7B6ABC", Offset = "0x7B6ABC", VA = "0x7B6ABC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000816")]
			[Address(RVA = "0x7B6AC4", Offset = "0x7B6AC4", VA = "0x7B6AC4")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public GameObject currentAttachedObject
		{
			[Token(Token = "0x6000817")]
			[Address(RVA = "0x7B6DEC", Offset = "0x7B6DEC", VA = "0x7B6DEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		public AttachedObject? currentAttachedObjectInfo
		{
			[Token(Token = "0x6000818")]
			[Address(RVA = "0x7B6F5C", Offset = "0x7B6F5C", VA = "0x7B6F5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x7B703C", Offset = "0x7B703C", VA = "0x7B703C")]
		public void ShowController(bool permanent = false)
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0x7B7130", Offset = "0x7B7130", VA = "0x7B7130")]
		public void HideController(bool permanent = false)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0x7B7224", Offset = "0x7B7224", VA = "0x7B7224")]
		public void ShowSkeleton(bool permanent = false)
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0x7B7318", Offset = "0x7B7318", VA = "0x7B7318")]
		public void HideSkeleton(bool permanent = false)
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0x7B740C", Offset = "0x7B740C", VA = "0x7B740C")]
		public void Show()
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x7B74C0", Offset = "0x7B74C0", VA = "0x7B74C0")]
		public void Hide()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x7B7414", Offset = "0x7B7414", VA = "0x7B7414")]
		public void SetVisibility(bool visible)
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x7B74C8", Offset = "0x7B74C8", VA = "0x7B74C8")]
		public void SetSkeletonRangeOfMotion(EVRSkeletalMotionRange newRangeOfMotion, float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0x7B7578", Offset = "0x7B7578", VA = "0x7B7578")]
		public void SetTemporarySkeletonRangeOfMotion(SkeletalMotionRangeChange temporaryRangeOfMotionChange, float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x7B7628", Offset = "0x7B7628", VA = "0x7B7628")]
		public void ResetTemporarySkeletonRangeOfMotion(float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0x7B76D0", Offset = "0x7B76D0", VA = "0x7B76D0")]
		public void SetAnimationState(int stateValue)
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x7B7770", Offset = "0x7B7770", VA = "0x7B7770")]
		public void StopAnimation()
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x7AEE90", Offset = "0x7AEE90", VA = "0x7AEE90")]
		public void AttachObject(GameObject objectToAttach, GrabTypes grabbedWithType, AttachmentFlags flags = AttachmentFlags.SnapOnAttach | AttachmentFlags.DetachOthers | AttachmentFlags.DetachFromOtherHand | AttachmentFlags.ParentToHand | AttachmentFlags.TurnOnKinematic, [Optional] Transform attachmentOffset)
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x7B7808", Offset = "0x7B7808", VA = "0x7B7808")]
		public bool ObjectIsAttached(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x7B78F8", Offset = "0x7B78F8", VA = "0x7B78F8")]
		public void ForceHoverUnlock()
		{
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x7AFC5C", Offset = "0x7AFC5C", VA = "0x7AFC5C")]
		public void DetachObject(GameObject objectToDetach, bool restoreOriginalParent = true)
		{
		}

		[Token(Token = "0x6000829")]
		[Address(RVA = "0x7B7908", Offset = "0x7B7908", VA = "0x7B7908")]
		public Vector3 GetTrackedObjectVelocity(float timeOffset = 0f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x7B7A2C", Offset = "0x7B7A2C", VA = "0x7B7A2C")]
		public Vector3 GetTrackedObjectAngularVelocity(float timeOffset = 0f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x7B7B50", Offset = "0x7B7B50", VA = "0x7B7B50")]
		public void GetEstimatedPeakVelocities(out Vector3 velocity, out Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x7B6E64", Offset = "0x7B6E64", VA = "0x7B6E64")]
		private void CleanUpAttachedObjectStack()
		{
		}

		[Token(Token = "0x600082D")]
		[Address(RVA = "0x7B7BDC", Offset = "0x7B7BDC", VA = "0x7B7BDC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x7B7E38", Offset = "0x7B7E38", VA = "0x7B7E38", Slot = "5")]
		protected virtual void OnTransformUpdated(SteamVR_Action_Pose pose)
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0x7B7E48", Offset = "0x7B7E48", VA = "0x7B7E48", Slot = "6")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5947D4", Offset = "0x5947D4")]
		protected virtual IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x7B7EE4", Offset = "0x7B7EE4", VA = "0x7B7EE4", Slot = "7")]
		protected virtual void UpdateHovering()
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x7B825C", Offset = "0x7B825C", VA = "0x7B825C", Slot = "8")]
		protected virtual bool CheckHoveringForTransform(Vector3 hoverPosition, float hoverRadius, ref float closestDistance, ref Interactable closestInteractable, Color debugColor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x7B8808", Offset = "0x7B8808", VA = "0x7B8808", Slot = "9")]
		protected virtual void UpdateNoSteamVRFallback()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0x7B8BA0", Offset = "0x7B8BA0", VA = "0x7B8BA0")]
		private void UpdateDebugText()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x7B911C", Offset = "0x7B911C", VA = "0x7B911C", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0x7B9228", Offset = "0x7B9228", VA = "0x7B9228", Slot = "11")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x7B9264", Offset = "0x7B9264", VA = "0x7B9264", Slot = "12")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x7B9384", Offset = "0x7B9384", VA = "0x7B9384", Slot = "13")]
		protected virtual void HandFollowUpdate()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x7B9A30", Offset = "0x7B9A30", VA = "0x7B9A30", Slot = "14")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000839")]
		[Address(RVA = "0x7B9BD4", Offset = "0x7B9BD4", VA = "0x7B9BD4")]
		protected void UpdateAttachedVelocity(AttachedObject attachedObjectInfo)
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x7BA058", Offset = "0x7BA058", VA = "0x7BA058", Slot = "15")]
		protected virtual void OnInputFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0x7BA134", Offset = "0x7BA134", VA = "0x7BA134", Slot = "16")]
		protected virtual void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0x7B6D20", Offset = "0x7B6D20", VA = "0x7B6D20")]
		private void HandDebugLog(string msg)
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x7AD2BC", Offset = "0x7AD2BC", VA = "0x7AD2BC")]
		public void HoverLock(Interactable interactable)
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x7ACACC", Offset = "0x7ACACC", VA = "0x7ACACC")]
		public void HoverUnlock(Interactable interactable)
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x7AE3E8", Offset = "0x7AE3E8", VA = "0x7AE3E8")]
		public void TriggerHapticPulse(ushort microSecondsDuration)
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x7BA39C", Offset = "0x7BA39C", VA = "0x7BA39C")]
		public void TriggerHapticPulse(float duration, float frequency, float amplitude)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x7ACC54", Offset = "0x7ACC54", VA = "0x7ACC54")]
		public void ShowGrabHint()
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x7ACA1C", Offset = "0x7ACA1C", VA = "0x7ACA1C")]
		public void HideGrabHint()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x7BA3D0", Offset = "0x7BA3D0", VA = "0x7BA3D0")]
		public void ShowGrabHint(string text)
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x7ACF44", Offset = "0x7ACF44", VA = "0x7ACF44")]
		public GrabTypes GetGrabStarting(GrabTypes explicitType = GrabTypes.None)
		{
			return default(GrabTypes);
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x7BA3E4", Offset = "0x7BA3E4", VA = "0x7BA3E4")]
		public GrabTypes GetGrabEnding(GrabTypes explicitType = GrabTypes.None)
		{
			return default(GrabTypes);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x7AE5C8", Offset = "0x7AE5C8", VA = "0x7AE5C8")]
		public bool IsGrabEnding(GameObject attachedObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x7ACFD8", Offset = "0x7ACFD8", VA = "0x7ACFD8")]
		public bool IsGrabbingWithType(GrabTypes type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x7BA478", Offset = "0x7BA478", VA = "0x7BA478")]
		public bool IsGrabbingWithOppositeType(GrabTypes type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x7BA4C4", Offset = "0x7BA4C4", VA = "0x7BA4C4")]
		public GrabTypes GetBestGrabbingType()
		{
			return default(GrabTypes);
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x7BA4D0", Offset = "0x7BA4D0", VA = "0x7BA4D0")]
		public GrabTypes GetBestGrabbingType(GrabTypes preferred, bool forcePreference = false)
		{
			return default(GrabTypes);
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x7BA5AC", Offset = "0x7BA5AC", VA = "0x7BA5AC")]
		private void InitController()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x7BAA8C", Offset = "0x7BAA8C", VA = "0x7BAA8C")]
		public void SetRenderModel(GameObject prefab)
		{
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x7B4D20", Offset = "0x7B4D20", VA = "0x7B4D20")]
		public void SetHoverRenderModel(RenderModel hoverRenderModel)
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x7BAB40", Offset = "0x7BAB40", VA = "0x7BAB40")]
		public int GetDeviceIndex()
		{
			return default(int);
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x7BAB5C", Offset = "0x7BAB5C", VA = "0x7BAB5C")]
		public Hand()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001E5")]
	public class HandEvent : UnityEvent<Hand>
	{
		[Token(Token = "0x6000850")]
		[Address(RVA = "0x7BAF30", Offset = "0x7BAF30", VA = "0x7BAF30")]
		public HandEvent()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E400", Offset = "0x58E400")]
	public class HapticRack : MonoBehaviour
	{
		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591FB8", Offset = "0x591FB8")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x591FF0", Offset = "0x591FF0")]
		public int teethCount;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592028", Offset = "0x592028")]
		public int minimumPulseDuration;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592060", Offset = "0x592060")]
		public int maximumPulseDuration;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592098", Offset = "0x592098")]
		public UnityEvent onPulse;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int previousToothIndex;

		[Token(Token = "0x6000851")]
		[Address(RVA = "0x7BAF80", Offset = "0x7BAF80", VA = "0x7BAF80")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x7BB010", Offset = "0x7BB010", VA = "0x7BB010")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0x7BB018", Offset = "0x7BB018", VA = "0x7BB018")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x7BB020", Offset = "0x7BB020", VA = "0x7BB020")]
		private void Update()
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x7BB0D0", Offset = "0x7BB0D0", VA = "0x7BB0D0")]
		private void Pulse()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x7BB1B8", Offset = "0x7BB1B8", VA = "0x7BB1B8")]
		public HapticRack()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class HideOnHandFocusLost : MonoBehaviour
	{
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x7BB1DC", Offset = "0x7BB1DC", VA = "0x7BB1DC")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x7BB204", Offset = "0x7BB204", VA = "0x7BB204")]
		public HideOnHandFocusLost()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E464", Offset = "0x58E464")]
	public class HoverButton : MonoBehaviour
	{
		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform movingPart;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 localMoveDistance;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5920D0", Offset = "0x5920D0")]
		public float engageAtPercent;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5920E8", Offset = "0x5920E8")]
		public float disengageAtPercent;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public HandEvent onButtonDown;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public HandEvent onButtonUp;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public HandEvent onButtonIsPressed;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool engaged;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool buttonDown;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool buttonUp;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 startPosition;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 endPosition;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 handEnteredPosition;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool hovering;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Hand lastHoveredHand;

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x7BB20C", Offset = "0x7BB20C", VA = "0x7BB20C")]
		private void Start()
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x7BB360", Offset = "0x7BB360", VA = "0x7BB360")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x7BB6AC", Offset = "0x7BB6AC", VA = "0x7BB6AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x7BB5CC", Offset = "0x7BB5CC", VA = "0x7BB5CC")]
		private void InvokeEvents(bool wasEngaged, bool isEngaged)
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0x7BB714", Offset = "0x7BB714", VA = "0x7BB714")]
		public HoverButton()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public class IgnoreHovering : MonoBehaviour
	{
		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592100", Offset = "0x592100")]
		public Hand onlyIgnoreHand;

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x7BB784", Offset = "0x7BB784", VA = "0x7BB784")]
		public IgnoreHovering()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class InputModule : BaseInputModule
	{
		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject submitObject;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputModule _instance;

		[Token(Token = "0x17000090")]
		public static InputModule instance
		{
			[Token(Token = "0x600085F")]
			[Address(RVA = "0x7BB794", Offset = "0x7BB794", VA = "0x7BB794")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x7BB860", Offset = "0x7BB860", VA = "0x7BB860", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x7BB8F0", Offset = "0x7BB8F0", VA = "0x7BB8F0")]
		public void HoverBegin(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x7BB9DC", Offset = "0x7BB9DC", VA = "0x7BB9DC")]
		public void HoverEnd(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x7BBAE0", Offset = "0x7BBAE0", VA = "0x7BBAE0")]
		public void Submit(GameObject gameObject)
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x7BBAE8", Offset = "0x7BBAE8", VA = "0x7BBAE8", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0x7BBC20", Offset = "0x7BBC20", VA = "0x7BBC20")]
		public InputModule()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public class Interactable : MonoBehaviour
	{
		[Token(Token = "0x20003E6")]
		public delegate void OnAttachedToHandDelegate(Hand hand);

		[Token(Token = "0x20003E7")]
		public delegate void OnDetachedFromHandDelegate(Hand hand);

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592138", Offset = "0x592138")]
		public SteamVR_ActionSet activateActionSetOnAttach;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592170", Offset = "0x592170")]
		public bool hideHandOnAttach;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5921A8", Offset = "0x5921A8")]
		public bool hideSkeletonOnAttach;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5921E0", Offset = "0x5921E0")]
		public bool hideControllerOnAttach;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592218", Offset = "0x592218")]
		public int handAnimationOnPickup;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592250", Offset = "0x592250")]
		public SkeletalMotionRangeChange setRangeOfMotionOnPickup;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5922A8", Offset = "0x5922A8")]
		public bool useHandObjectAttachmentPoint;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5922E0", Offset = "0x5922E0")]
		public Transform handFollowTransform;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool handFollowTransformPosition;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool handFollowTransformRotation;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592318", Offset = "0x592318")]
		public bool highlightOnHover;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] highlightRenderers;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshRenderer[] existingRenderers;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject highlightHolder;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SkinnedMeshRenderer[] highlightSkinnedRenderers;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SkinnedMeshRenderer[] existingSkinnedRenderers;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material highlightMat;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592350", Offset = "0x592350")]
		public GameObject[] hideHighlight;

		[NonSerialized]
		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Hand attachedToHand;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x592388", Offset = "0x592388")]
		private bool <isDestroying>k__BackingField;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x592398", Offset = "0x592398")]
		private bool <isHovering>k__BackingField;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5923A8", Offset = "0x5923A8")]
		private bool <wasHovering>k__BackingField;

		[Token(Token = "0x17000091")]
		public bool isDestroying
		{
			[Token(Token = "0x600086A")]
			[Address(RVA = "0x7BBEB8", Offset = "0x7BBEB8", VA = "0x7BBEB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594878", Offset = "0x594878")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086B")]
			[Address(RVA = "0x7BBEC0", Offset = "0x7BBEC0", VA = "0x7BBEC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594888", Offset = "0x594888")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public bool isHovering
		{
			[Token(Token = "0x600086C")]
			[Address(RVA = "0x7BBECC", Offset = "0x7BBECC", VA = "0x7BBECC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594898", Offset = "0x594898")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086D")]
			[Address(RVA = "0x7BBED4", Offset = "0x7BBED4", VA = "0x7BBED4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5948A8", Offset = "0x5948A8")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public bool wasHovering
		{
			[Token(Token = "0x600086E")]
			[Address(RVA = "0x7BBEE0", Offset = "0x7BBEE0", VA = "0x7BBEE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5948B8", Offset = "0x5948B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086F")]
			[Address(RVA = "0x7BBEE8", Offset = "0x7BBEE8", VA = "0x7BBEE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5948C8", Offset = "0x5948C8")]
			protected set
			{
			}
		}

		[Token(Token = "0x14000010")]
		[HideInInspector]
		public event OnAttachedToHandDelegate onAttachedToHand
		{
			[Token(Token = "0x6000866")]
			[Address(RVA = "0x7BBC28", Offset = "0x7BBC28", VA = "0x7BBC28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594838", Offset = "0x594838")]
			add
			{
			}
			[Token(Token = "0x6000867")]
			[Address(RVA = "0x7BBCCC", Offset = "0x7BBCCC", VA = "0x7BBCCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594848", Offset = "0x594848")]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		[HideInInspector]
		public event OnDetachedFromHandDelegate onDetachedFromHand
		{
			[Token(Token = "0x6000868")]
			[Address(RVA = "0x7BBD70", Offset = "0x7BBD70", VA = "0x7BBD70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594858", Offset = "0x594858")]
			add
			{
			}
			[Token(Token = "0x6000869")]
			[Address(RVA = "0x7BBE14", Offset = "0x7BBE14", VA = "0x7BBE14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594868", Offset = "0x594868")]
			remove
			{
			}
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x7BBEF4", Offset = "0x7BBEF4", VA = "0x7BBEF4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x7BC050", Offset = "0x7BC050", VA = "0x7BC050")]
		private bool ShouldIgnoreHighlight(Component component)
		{
			return default(bool);
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x7BC088", Offset = "0x7BC088", VA = "0x7BC088")]
		private bool ShouldIgnore(GameObject check)
		{
			return default(bool);
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x7BC160", Offset = "0x7BC160", VA = "0x7BC160")]
		private void CreateHighlightRenderers()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0x7BC720", Offset = "0x7BC720", VA = "0x7BC720")]
		private void UpdateHighlightRenderers()
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0x7BCC64", Offset = "0x7BCC64", VA = "0x7BCC64")]
		public void HandHoverUpdate()
		{
		}

		[Token(Token = "0x6000876")]
		[Address(RVA = "0x7BCCB0", Offset = "0x7BCCB0", VA = "0x7BCCB0")]
		public void DestroyHighlightHolder()
		{
		}

		[Token(Token = "0x6000877")]
		[Address(RVA = "0x7BCD64", Offset = "0x7BCD64", VA = "0x7BCD64")]
		private void Update()
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x7BCE38", Offset = "0x7BCE38", VA = "0x7BCE38")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x7BD27C", Offset = "0x7BD27C", VA = "0x7BD27C")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x600087A")]
		[Address(RVA = "0x7BD7DC", Offset = "0x7BD7DC", VA = "0x7BD7DC", Slot = "4")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600087B")]
		[Address(RVA = "0x7BD898", Offset = "0x7BD898", VA = "0x7BD898")]
		public Interactable()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public class InteractableDebug : MonoBehaviour
	{
		[NonSerialized]
		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand attachedToHand;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float simulateReleasesForXSecondsAroundRelease;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float simulateReleasesEveryXSeconds;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool setPositionsForSimulations;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Renderer[] selfRenderers;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider[] colliders;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color lastColor;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Throwable throwable;

		[Token(Token = "0x4000E2E")]
		private const bool onlyColorOnChange = true;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Rigidbody rigidbody;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isSimulation;

		[Token(Token = "0x17000094")]
		private bool isThrowable
		{
			[Token(Token = "0x600087C")]
			[Address(RVA = "0x7BD940", Offset = "0x7BD940", VA = "0x7BD940")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x7BD9B0", Offset = "0x7BD9B0", VA = "0x7BD9B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x7BDA50", Offset = "0x7BDA50", VA = "0x7BDA50")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x7BDB28", Offset = "0x7BDB28", VA = "0x7BDB28", Slot = "4")]
		protected virtual void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x7BDC80", Offset = "0x7BDC80", VA = "0x7BDC80")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x7BE500", Offset = "0x7BE500", VA = "0x7BE500")]
		public Collider[] GetColliders()
		{
			return null;
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x7BE43C", Offset = "0x7BE43C", VA = "0x7BE43C")]
		public void IgnoreObject(InteractableDebug otherInteractable)
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x7BE508", Offset = "0x7BE508", VA = "0x7BE508")]
		public void SetIsSimulation()
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x7BE25C", Offset = "0x7BE25C", VA = "0x7BE25C")]
		private InteractableDebug CreateSimulation(Hand fromHand, float timeOffset, Color copyColor)
		{
			return null;
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x7BDA80", Offset = "0x7BDA80", VA = "0x7BDA80")]
		private void CreateMarker(Color markerColor, float destroyAfter = 10f)
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x7BDF64", Offset = "0x7BDF64", VA = "0x7BDF64")]
		private void CreateMarker(Color markerColor, Vector3 forward, float destroyAfter = 10f)
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x7BDC78", Offset = "0x7BDC78", VA = "0x7BDC78")]
		private void ColorSelf(Color newColor)
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x7BE514", Offset = "0x7BE514", VA = "0x7BE514")]
		private void ColorThing(Color newColor, Renderer[] renderers)
		{
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0x7BE5BC", Offset = "0x7BE5BC", VA = "0x7BE5BC")]
		public InteractableDebug()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E4C8", Offset = "0x58E4C8")]
	public class InteractableHoverEvents : MonoBehaviour
	{
		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onHandHoverBegin;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onHandHoverEnd;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onAttachedToHand;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent onDetachedFromHand;

		[Token(Token = "0x600088A")]
		[Address(RVA = "0x7BE5D0", Offset = "0x7BE5D0", VA = "0x7BE5D0")]
		private void OnHandHoverBegin()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0x7BE5EC", Offset = "0x7BE5EC", VA = "0x7BE5EC")]
		private void OnHandHoverEnd()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0x7BE608", Offset = "0x7BE608", VA = "0x7BE608")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x7BE624", Offset = "0x7BE624", VA = "0x7BE624")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x7BE640", Offset = "0x7BE640", VA = "0x7BE640")]
		public InteractableHoverEvents()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	public class ItemPackage : MonoBehaviour
	{
		[Token(Token = "0x20003E8")]
		public enum ItemPackageType
		{
			[Token(Token = "0x40012A1")]
			Unrestricted,
			[Token(Token = "0x40012A2")]
			OneHanded,
			[Token(Token = "0x40012A3")]
			TwoHanded
		}

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public new string name;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ItemPackageType packageType;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject itemPrefab;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject otherHandItemPrefab;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject previewPrefab;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject fadedPreviewPrefab;

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x7BF0CC", Offset = "0x7BF0CC", VA = "0x7BF0CC")]
		public ItemPackage()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public class ItemPackageReference : MonoBehaviour
	{
		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage itemPackage;

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x7BF0D4", Offset = "0x7BF0D4", VA = "0x7BF0D4")]
		public ItemPackageReference()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E52C", Offset = "0x58E52C")]
	public class ItemPackageSpawner : MonoBehaviour
	{
		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ItemPackage _itemPackage;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool useItemPackagePreview;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool useFadedPreview;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject previewObject;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool requireTriggerPressToTake;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool requireTriggerPressToReturn;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool showTriggerHint;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[EnumFlags]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool takeBackItem;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool acceptDifferentItems;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject spawnedItem;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool itemIsSpawned;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent pickupEvent;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent dropEvent;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool justPickedUpItem;

		[Token(Token = "0x17000095")]
		public ItemPackage itemPackage
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0x7BF0DC", Offset = "0x7BF0DC", VA = "0x7BF0DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000892")]
			[Address(RVA = "0x7BF0E4", Offset = "0x7BF0E4", VA = "0x7BF0E4")]
			set
			{
			}
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x7BF0E8", Offset = "0x7BF0E8", VA = "0x7BF0E8")]
		private void CreatePreviewObject()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x7BF640", Offset = "0x7BF640", VA = "0x7BF640")]
		private void Start()
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x7BF644", Offset = "0x7BF644", VA = "0x7BF644")]
		private void VerifyItemPackage()
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x7BF71C", Offset = "0x7BF71C", VA = "0x7BF71C")]
		private void ItemPackageNotValid()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x7BF350", Offset = "0x7BF350", VA = "0x7BF350")]
		private void ClearPreview()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x7BF810", Offset = "0x7BF810", VA = "0x7BF810")]
		private void Update()
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x7BF8BC", Offset = "0x7BF8BC", VA = "0x7BF8BC")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x7BFAC0", Offset = "0x7BFAC0", VA = "0x7BFAC0")]
		private void TakeBackItem(Hand hand)
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x7BF9C4", Offset = "0x7BF9C4", VA = "0x7BF9C4")]
		private ItemPackage GetAttachedItemPackage(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x7BFFB8", Offset = "0x7BFFB8", VA = "0x7BFFB8")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x7C00E8", Offset = "0x7C00E8", VA = "0x7C00E8")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x7BFE10", Offset = "0x7BFE10", VA = "0x7BFE10")]
		private void RemoveMatchingItemsFromHandStack(ItemPackage package, Hand hand)
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x7C0134", Offset = "0x7C0134", VA = "0x7C0134")]
		private void RemoveMatchingItemTypesFromHand(ItemPackage.ItemPackageType packageType, Hand hand)
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x7BFB1C", Offset = "0x7BFB1C", VA = "0x7BFB1C")]
		private void SpawnAndAttachObject(Hand hand, GrabTypes grabType)
		{
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x7C0294", Offset = "0x7C0294", VA = "0x7C0294")]
		public ItemPackageSpawner()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public class LinearAnimation : MonoBehaviour
	{
		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animation animation;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationState animState;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float animLength;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float lastValue;

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x7C02AC", Offset = "0x7C02AC", VA = "0x7C02AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x7C0410", Offset = "0x7C0410", VA = "0x7C0410")]
		private void Update()
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x7C046C", Offset = "0x7C046C", VA = "0x7C046C")]
		public LinearAnimation()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	public class LinearAnimator : MonoBehaviour
	{
		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentLinearMapping;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int framesUnchanged;

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x7C0474", Offset = "0x7C0474", VA = "0x7C0474")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x7C0574", Offset = "0x7C0574", VA = "0x7C0574")]
		private void Update()
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x7C0618", Offset = "0x7C0618", VA = "0x7C0618")]
		public LinearAnimator()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class LinearAudioPitch : MonoBehaviour
	{
		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchCurve;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool applyContinuously;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource audioSource;

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x7C0628", Offset = "0x7C0628", VA = "0x7C0628")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x7C0708", Offset = "0x7C0708", VA = "0x7C0708")]
		private void Update()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x7C0718", Offset = "0x7C0718", VA = "0x7C0718")]
		private void Apply()
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x7C07D4", Offset = "0x7C07D4", VA = "0x7C07D4")]
		public LinearAudioPitch()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class LinearBlendshape : MonoBehaviour
	{
		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer skinnedMesh;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastValue;

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x7C07E4", Offset = "0x7C07E4", VA = "0x7C07E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x7C08C4", Offset = "0x7C08C4", VA = "0x7C08C4")]
		private void Update()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x7C093C", Offset = "0x7C093C", VA = "0x7C093C")]
		public LinearBlendshape()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class LinearDisplacement : MonoBehaviour
	{
		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 displacement;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialPosition;

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x7C0944", Offset = "0x7C0944", VA = "0x7C0944")]
		private void Start()
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x7C09F8", Offset = "0x7C09F8", VA = "0x7C09F8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x7C0B3C", Offset = "0x7C0B3C", VA = "0x7C0B3C")]
		public LinearDisplacement()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E590", Offset = "0x58E590")]
	public class LinearDrive : MonoBehaviour
	{
		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform startPosition;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform endPosition;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LinearMapping linearMapping;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool repositionGameObject;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool maintainMomemntum;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float momemtumDampenRate;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float initialMappingOffset;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int numMappingChangeSamples;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected float[] mappingChangeSamples;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float prevMapping;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected float mappingChangeRate;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected int sampleCount;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Interactable interactable;

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x7C0B44", Offset = "0x7C0B44", VA = "0x7C0B44", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x7C0BB4", Offset = "0x7C0BB4", VA = "0x7C0BB4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x7C0EEC", Offset = "0x7C0EEC", VA = "0x7C0EEC", Slot = "6")]
		protected virtual void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x7C1174", Offset = "0x7C1174", VA = "0x7C1174", Slot = "7")]
		protected virtual void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x7C11F4", Offset = "0x7C11F4", VA = "0x7C11F4", Slot = "8")]
		protected virtual void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x7C11F8", Offset = "0x7C11F8", VA = "0x7C11F8")]
		protected void CalculateMappingChangeRate()
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x7C0CF0", Offset = "0x7C0CF0", VA = "0x7C0CF0")]
		protected void UpdateLinearMapping(Transform updateTransform)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x7C1000", Offset = "0x7C1000", VA = "0x7C1000")]
		protected float CalculateLinearMapping(Transform updateTransform)
		{
			return default(float);
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x7C12E4", Offset = "0x7C12E4", VA = "0x7C12E4", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x7C149C", Offset = "0x7C149C", VA = "0x7C149C")]
		public LinearDrive()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class LinearMapping : MonoBehaviour
	{
		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x7C14C0", Offset = "0x7C14C0", VA = "0x7C14C0")]
		public LinearMapping()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class ModalThrowable : Throwable
	{
		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5923C8", Offset = "0x5923C8")]
		public Transform gripOffset;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592400", Offset = "0x592400")]
		public Transform pinchOffset;

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x7C3744", Offset = "0x7C3744", VA = "0x7C3744", Slot = "7")]
		protected override void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x7C3818", Offset = "0x7C3818", VA = "0x7C3818")]
		public ModalThrowable()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E5F4", Offset = "0x58E5F4")]
	public class PlaySound : MonoBehaviour
	{
		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592438", Offset = "0x592438")]
		public AudioClip[] waveFile;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592470", Offset = "0x592470")]
		public bool stopOnPlay;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5924A8", Offset = "0x5924A8")]
		public bool disableOnEnd;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5924E0", Offset = "0x5924E0")]
		public bool looping;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592518", Offset = "0x592518")]
		public bool stopOnEnd;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592550", Offset = "0x592550")]
		public bool playOnAwakeWithDelay;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592588", Offset = "0x592588")]
		public bool useRandomVolume;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5925C0", Offset = "0x5925C0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5925C0", Offset = "0x5925C0")]
		public float volMin;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592614", Offset = "0x592614")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x592614", Offset = "0x592614")]
		public float volMax;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592668", Offset = "0x592668")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592668", Offset = "0x592668")]
		public bool useRandomPitch;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5926C8", Offset = "0x5926C8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5926C8", Offset = "0x5926C8")]
		public float pitchMin;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59271C", Offset = "0x59271C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x59271C", Offset = "0x59271C")]
		public float pitchMax;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592770", Offset = "0x592770")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592770", Offset = "0x592770")]
		public bool useRetriggerTime;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5927D0", Offset = "0x5927D0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5927D0", Offset = "0x5927D0")]
		public float timeInitial;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592828", Offset = "0x592828")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x592828", Offset = "0x592828")]
		public float timeMin;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592880", Offset = "0x592880")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x592880", Offset = "0x592880")]
		public float timeMax;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5928D8", Offset = "0x5928D8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5928D8", Offset = "0x5928D8")]
		public bool useRandomSilence;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592938", Offset = "0x592938")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x592938", Offset = "0x592938")]
		public float percentToNotPlay;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x59298C", Offset = "0x59298C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59298C", Offset = "0x59298C")]
		public float delayOffsetTime;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private AudioClip clip;

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x7C3888", Offset = "0x7C3888", VA = "0x7C3888")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x7C39B8", Offset = "0x7C39B8", VA = "0x7C39B8")]
		public void Play()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x7C39C8", Offset = "0x7C39C8", VA = "0x7C39C8")]
		public void PlayWithDelay(float delayTime)
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x7C3B04", Offset = "0x7C3B04", VA = "0x7C3B04")]
		public AudioClip PlayOneShotSound()
		{
			return null;
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x7C3A40", Offset = "0x7C3A40", VA = "0x7C3A40")]
		public AudioClip PlayLooping()
		{
			return null;
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x7C3CE4", Offset = "0x7C3CE4", VA = "0x7C3CE4")]
		public void Disable()
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x7C3D0C", Offset = "0x7C3D0C", VA = "0x7C3D0C")]
		public void Stop()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x7C3BCC", Offset = "0x7C3BCC", VA = "0x7C3BCC")]
		private void SetAudioSource()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x7C3D28", Offset = "0x7C3D28", VA = "0x7C3D28")]
		public PlaySound()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class Player : MonoBehaviour
	{
		[Token(Token = "0x20003E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5904E4", Offset = "0x5904E4")]
		private sealed class <Start>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Player <>4__this;

			[Token(Token = "0x170000F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600116C")]
				[Address(RVA = "0x7C50D8", Offset = "0x7C50D8", VA = "0x7C50D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600116E")]
				[Address(RVA = "0x7C5140", Offset = "0x7C5140", VA = "0x7C5140", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001169")]
			[Address(RVA = "0x7C47B4", Offset = "0x7C47B4", VA = "0x7C47B4")]
			[DebuggerHidden]
			public <Start>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600116A")]
			[Address(RVA = "0x7C4FC8", Offset = "0x7C4FC8", VA = "0x7C4FC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600116B")]
			[Address(RVA = "0x7C4FCC", Offset = "0x7C4FCC", VA = "0x7C4FCC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600116D")]
			[Address(RVA = "0x7C50E0", Offset = "0x7C50E0", VA = "0x7C50E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5929EC", Offset = "0x5929EC")]
		public Transform trackingOriginTransform;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592A24", Offset = "0x592A24")]
		public Transform[] hmdTransforms;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592A5C", Offset = "0x592A5C")]
		public Hand[] hands;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592A94", Offset = "0x592A94")]
		public Collider headCollider;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592ACC", Offset = "0x592ACC")]
		public GameObject rigSteamVR;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592B04", Offset = "0x592B04")]
		public GameObject rig2DFallback;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592B3C", Offset = "0x592B3C")]
		public Transform audioListener;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool allowToggleTo2D;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Player _instance;

		[Token(Token = "0x17000096")]
		public static Player instance
		{
			[Token(Token = "0x60008C8")]
			[Address(RVA = "0x7C3D48", Offset = "0x7C3D48", VA = "0x7C3D48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public int handCount
		{
			[Token(Token = "0x60008C9")]
			[Address(RVA = "0x7C3E14", Offset = "0x7C3E14", VA = "0x7C3E14")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000098")]
		public Hand leftHand
		{
			[Token(Token = "0x60008CB")]
			[Address(RVA = "0x7C3F54", Offset = "0x7C3F54", VA = "0x7C3F54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public Hand rightHand
		{
			[Token(Token = "0x60008CC")]
			[Address(RVA = "0x7C4000", Offset = "0x7C4000", VA = "0x7C4000")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public float scale
		{
			[Token(Token = "0x60008CD")]
			[Address(RVA = "0x7C40AC", Offset = "0x7C40AC", VA = "0x7C40AC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700009B")]
		public Transform hmdTransform
		{
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0x7C40D0", Offset = "0x7C40D0", VA = "0x7C40D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public float eyeHeight
		{
			[Token(Token = "0x60008CF")]
			[Address(RVA = "0x7C4174", Offset = "0x7C4174", VA = "0x7C4174")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700009D")]
		public Vector3 feetPositionGuess
		{
			[Token(Token = "0x60008D0")]
			[Address(RVA = "0x7C4304", Offset = "0x7C4304", VA = "0x7C4304")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700009E")]
		public Vector3 bodyDirectionGuess
		{
			[Token(Token = "0x60008D1")]
			[Address(RVA = "0x7C44C0", Offset = "0x7C44C0", VA = "0x7C44C0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x7C3EA4", Offset = "0x7C3EA4", VA = "0x7C3EA4")]
		public Hand GetHand(int i)
		{
			return null;
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x7C4690", Offset = "0x7C4690", VA = "0x7C4690")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x7C4744", Offset = "0x7C4744", VA = "0x7C4744")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5948D8", Offset = "0x5948D8")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x7C47E0", Offset = "0x7C47E0", VA = "0x7C47E0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x7C4CA4", Offset = "0x7C4CA4", VA = "0x7C4CA4")]
		public void Draw2DDebug()
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x7C4E08", Offset = "0x7C4E08", VA = "0x7C4E08")]
		private void ActivateRig(GameObject rig)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x7C4FB4", Offset = "0x7C4FB4", VA = "0x7C4FB4")]
		public void PlayerShotSelf()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x7C4FB8", Offset = "0x7C4FB8", VA = "0x7C4FB8")]
		public Player()
		{
		}
	}
	[Token(Token = "0x20001FB")]
	public class RenderModel : MonoBehaviour
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject handPrefab;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected GameObject handInstance;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Renderer[] handRenderers;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool displayHandByDefault;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected SteamVR_Behaviour_Skeleton handSkeleton;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Animator handAnimator;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected string animatorParameterStateName;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected int handAnimatorStateId;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x592B74", Offset = "0x592B74")]
		public GameObject controllerPrefab;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected GameObject controllerInstance;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Renderer[] controllerRenderers;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected SteamVR_RenderModel controllerRenderModel;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool displayControllerByDefault;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Material delayedSetMaterial;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected SteamVR_Input_Sources inputSource;

		[Token(Token = "0x1700009F")]
		public EVRSkeletalMotionRange GetSkeletonRangeOfMotion
		{
			[Token(Token = "0x60008FA")]
			[Address(RVA = "0x7C6868", Offset = "0x7C6868", VA = "0x7C6868")]
			get
			{
				return default(EVRSkeletalMotionRange);
			}
		}

		[Token(Token = "0x14000012")]
		public event Action onControllerLoaded
		{
			[Token(Token = "0x60008D9")]
			[Address(RVA = "0x7C5148", Offset = "0x7C5148", VA = "0x7C5148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59493C", Offset = "0x59493C")]
			add
			{
			}
			[Token(Token = "0x60008DA")]
			[Address(RVA = "0x7C51EC", Offset = "0x7C51EC", VA = "0x7C51EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x59494C", Offset = "0x59494C")]
			remove
			{
			}
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x7C5290", Offset = "0x7C5290", VA = "0x7C5290")]
		protected void Awake()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x7C5340", Offset = "0x7C5340", VA = "0x7C5340")]
		protected void InitializeHand()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x7C5580", Offset = "0x7C5580", VA = "0x7C5580")]
		protected void InitializeController()
		{
		}

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x7C57F0", Offset = "0x7C57F0", VA = "0x7C57F0", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x7C5958", Offset = "0x7C5958", VA = "0x7C5958", Slot = "5")]
		protected virtual void DestroyHand()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x7C5A0C", Offset = "0x7C5A0C", VA = "0x7C5A0C", Slot = "6")]
		protected virtual void OnSkeletonActiveChange(SteamVR_Action_In action, bool newState)
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x7C5A18", Offset = "0x7C5A18", VA = "0x7C5A18")]
		protected void OnEnable()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x7C5A38", Offset = "0x7C5A38", VA = "0x7C5A38")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x7C5A58", Offset = "0x7C5A58", VA = "0x7C5A58", Slot = "7")]
		public virtual void SetInputSource(SteamVR_Input_Sources newInputSource)
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x7C5AF4", Offset = "0x7C5AF4", VA = "0x7C5AF4", Slot = "8")]
		public virtual void OnHandInitialized(int deviceIndex)
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x7C5BAC", Offset = "0x7C5BAC", VA = "0x7C5BAC")]
		public void MatchHandToTransform(Transform match)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x7C5CBC", Offset = "0x7C5CBC", VA = "0x7C5CBC")]
		public void SetHandPosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x7C5D8C", Offset = "0x7C5D8C", VA = "0x7C5D8C")]
		public void SetHandRotation(Quaternion newRotation)
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x7C5E64", Offset = "0x7C5E64", VA = "0x7C5E64")]
		public Vector3 GetHandPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x7C5F28", Offset = "0x7C5F28", VA = "0x7C5F28")]
		public Quaternion GetHandRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x7C5FEC", Offset = "0x7C5FEC", VA = "0x7C5FEC")]
		private void OnRenderModelLoaded(SteamVR_RenderModel loadedRenderModel, bool success)
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x7C6208", Offset = "0x7C6208", VA = "0x7C6208")]
		public void SetVisibility(bool state, bool overrideDefault = false)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x7C6298", Offset = "0x7C6298", VA = "0x7C6298")]
		public void Show(bool overrideDefault = false)
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x7C62A4", Offset = "0x7C62A4", VA = "0x7C62A4")]
		public void Hide()
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x7C62D8", Offset = "0x7C62D8", VA = "0x7C62D8", Slot = "9")]
		public virtual void SetMaterial(Material material)
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x7C6188", Offset = "0x7C6188", VA = "0x7C6188")]
		public void SetControllerMaterial(Material material)
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x7C6304", Offset = "0x7C6304", VA = "0x7C6304")]
		public void SetHandMaterial(Material material)
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x7C6100", Offset = "0x7C6100", VA = "0x7C6100")]
		public void SetControllerVisibility(bool state, bool permanent = false)
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x7C5768", Offset = "0x7C5768", VA = "0x7C5768")]
		public void SetHandVisibility(bool state, bool permanent = false)
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x7C6380", Offset = "0x7C6380", VA = "0x7C6380")]
		public bool IsHandVisibile()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x7C63FC", Offset = "0x7C63FC", VA = "0x7C63FC")]
		public bool IsControllerVisibile()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x7C6478", Offset = "0x7C6478", VA = "0x7C6478")]
		public Transform GetBone(int boneIndex)
		{
			return null;
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x7C652C", Offset = "0x7C652C", VA = "0x7C652C")]
		public Vector3 GetBonePosition(int boneIndex, bool local = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x7C6600", Offset = "0x7C6600", VA = "0x7C6600")]
		public Vector3 GetControllerPosition([Optional] string componentName)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x7C66D8", Offset = "0x7C66D8", VA = "0x7C66D8")]
		public Quaternion GetBoneRotation(int boneIndex, bool local = false)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x7C67AC", Offset = "0x7C67AC", VA = "0x7C67AC")]
		public void SetSkeletonRangeOfMotion(EVRSkeletalMotionRange newRangeOfMotion, float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x7C6884", Offset = "0x7C6884", VA = "0x7C6884")]
		public void SetTemporarySkeletonRangeOfMotion(SkeletalMotionRangeChange temporaryRangeOfMotionChange, float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x7C6940", Offset = "0x7C6940", VA = "0x7C6940")]
		public void ResetTemporarySkeletonRangeOfMotion(float blendOverSeconds = 0.1f)
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x7C69E8", Offset = "0x7C69E8", VA = "0x7C69E8")]
		public void SetAnimationState(int stateValue)
		{
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x7C6C88", Offset = "0x7C6C88", VA = "0x7C6C88")]
		public void StopAnimation()
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x7C6ACC", Offset = "0x7C6ACC", VA = "0x7C6ACC")]
		private bool CheckAnimatorInit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x7C6D5C", Offset = "0x7C6D5C", VA = "0x7C6D5C")]
		public RenderModel()
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class SeeThru : MonoBehaviour
	{
		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material seeThruMaterial;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject seeThru;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Interactable interactable;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Renderer sourceRenderer;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Renderer destRenderer;

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x7CEB74", Offset = "0x7CEB74", VA = "0x7CEB74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x7CF14C", Offset = "0x7CF14C", VA = "0x7CF14C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x7CF21C", Offset = "0x7CF21C", VA = "0x7CF21C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x7CF2EC", Offset = "0x7CF2EC", VA = "0x7CF2EC")]
		private void AttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x7CF30C", Offset = "0x7CF30C", VA = "0x7CF30C")]
		private void DetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x7CF32C", Offset = "0x7CF32C", VA = "0x7CF32C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x7CF570", Offset = "0x7CF570", VA = "0x7CF570")]
		public SeeThru()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class SleepOnAwake : MonoBehaviour
	{
		[Token(Token = "0x6000908")]
		[Address(RVA = "0x7CF578", Offset = "0x7CF578", VA = "0x7CF578")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x7CF620", Offset = "0x7CF620", VA = "0x7CF620")]
		public SleepOnAwake()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class SoundDeparent : MonoBehaviour
	{
		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool destroyAfterPlayOnce;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x7CF6E8", Offset = "0x7CF6E8", VA = "0x7CF6E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x7CF740", Offset = "0x7CF740", VA = "0x7CF740")]
		private void Start()
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x7CF82C", Offset = "0x7CF82C", VA = "0x7CF82C")]
		public SoundDeparent()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class SoundPlayOneshot : MonoBehaviour
	{
		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip[] waveFiles;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float volMin;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float volMax;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float pitchMin;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float pitchMax;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool playOnAwake;

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x7CF83C", Offset = "0x7CF83C", VA = "0x7CF83C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x7CF8AC", Offset = "0x7CF8AC", VA = "0x7CF8AC")]
		public void Play()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x7CF9E8", Offset = "0x7CF9E8", VA = "0x7CF9E8")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x7CFA7C", Offset = "0x7CFA7C", VA = "0x7CFA7C")]
		public void UnPause()
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x7CFB10", Offset = "0x7CFB10", VA = "0x7CFB10")]
		public SoundPlayOneshot()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class SpawnAndAttachAfterControllerIsTracking : MonoBehaviour
	{
		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemPrefab;

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x7CFB18", Offset = "0x7CFB18", VA = "0x7CFB18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x7CFB70", Offset = "0x7CFB70", VA = "0x7CFB70")]
		private void Update()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x7CFCF4", Offset = "0x7CFCF4", VA = "0x7CFCF4")]
		public SpawnAndAttachAfterControllerIsTracking()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class SpawnAndAttachToHand : MonoBehaviour
	{
		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject prefab;

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x7CFCFC", Offset = "0x7CFCFC", VA = "0x7CFCFC")]
		public void SpawnAndAttach(Hand passedInhand)
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x7CFE0C", Offset = "0x7CFE0C", VA = "0x7CFE0C")]
		public SpawnAndAttachToHand()
		{
		}
	}
	[Token(Token = "0x2000202")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E658", Offset = "0x58E658")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E658", Offset = "0x58E658")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E658", Offset = "0x58E658")]
	public class Throwable : MonoBehaviour
	{
		[Token(Token = "0x20003EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5904F4", Offset = "0x5904F4")]
		private sealed class <LateDetach>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x40012AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Throwable <>4__this;

			[Token(Token = "0x170000F8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001172")]
				[Address(RVA = "0x7D7BA4", Offset = "0x7D7BA4", VA = "0x7D7BA4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001174")]
				[Address(RVA = "0x7D7C0C", Offset = "0x7D7C0C", VA = "0x7D7C0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600116F")]
			[Address(RVA = "0x7D7A18", Offset = "0x7D7A18", VA = "0x7D7A18")]
			[DebuggerHidden]
			public <LateDetach>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001170")]
			[Address(RVA = "0x7D7ADC", Offset = "0x7D7ADC", VA = "0x7D7ADC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001171")]
			[Address(RVA = "0x7D7AE0", Offset = "0x7D7AE0", VA = "0x7D7AE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001173")]
			[Address(RVA = "0x7D7BAC", Offset = "0x7D7BAC", VA = "0x7D7BAC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[EnumFlags]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592B94", Offset = "0x592B94")]
		public Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592BE0", Offset = "0x592BE0")]
		public Transform attachmentOffset;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592C18", Offset = "0x592C18")]
		public float catchingSpeedThreshold;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ReleaseStyle releaseVelocityStyle;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592C50", Offset = "0x592C50")]
		public float releaseVelocityTimeOffset;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float scaleReleaseVelocity;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592C88", Offset = "0x592C88")]
		public bool restoreOriginalParent;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool attachEaseIn;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve snapAttachEaseInCurve;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float snapAttachEaseInTime;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected VelocityEstimator velocityEstimator;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected bool attached;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		protected float attachTime;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Vector3 attachPosition;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Quaternion attachRotation;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Transform attachEaseInTransform;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onPickUp;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onDetachFromHand;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool snapAttachEaseInCompleted;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		protected RigidbodyInterpolation hadInterpolation;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rigidbody rigidbody;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public Interactable interactable;

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x7D6D24", Offset = "0x7D6D24", VA = "0x7D6D24", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x7D6E20", Offset = "0x7D6E20", VA = "0x7D6E20", Slot = "5")]
		protected virtual void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x7D6F08", Offset = "0x7D6F08", VA = "0x7D6F08", Slot = "6")]
		protected virtual void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0x7D6F24", Offset = "0x7D6F24", VA = "0x7D6F24", Slot = "7")]
		protected virtual void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x7D6FAC", Offset = "0x7D6FAC", VA = "0x7D6FAC", Slot = "8")]
		protected virtual void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0x7D70E4", Offset = "0x7D70E4", VA = "0x7D70E4", Slot = "9")]
		protected virtual void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x7D71A8", Offset = "0x7D71A8", VA = "0x7D71A8", Slot = "10")]
		public virtual void GetReleaseVelocities(Hand hand, out Vector3 velocity, out Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x7D770C", Offset = "0x7D770C", VA = "0x7D770C", Slot = "11")]
		protected virtual void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x7D799C", Offset = "0x7D799C", VA = "0x7D799C", Slot = "12")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x59495C", Offset = "0x59495C")]
		protected virtual IEnumerator LateDetach(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x7D7A44", Offset = "0x7D7A44", VA = "0x7D7A44", Slot = "13")]
		protected virtual void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x7D7A84", Offset = "0x7D7A84", VA = "0x7D7A84", Slot = "14")]
		protected virtual void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x7C381C", Offset = "0x7C381C", VA = "0x7C381C")]
		public Throwable()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public enum ReleaseStyle
	{
		[Token(Token = "0x4000EC9")]
		NoChange,
		[Token(Token = "0x4000ECA")]
		GetFromHand,
		[Token(Token = "0x4000ECB")]
		ShortEstimation,
		[Token(Token = "0x4000ECC")]
		AdvancedEstimation
	}
	[Token(Token = "0x2000204")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E70C", Offset = "0x58E70C")]
	public class UIElement : MonoBehaviour
	{
		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CustomEvents.UnityEventHand onHandClick;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Hand currentHand;

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x7D7C14", Offset = "0x7D7C14", VA = "0x7D7C14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x7D7D00", Offset = "0x7D7D00", VA = "0x7D7D00")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x7D7DEC", Offset = "0x7D7DEC", VA = "0x7D7DEC")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x7D7EDC", Offset = "0x7D7EDC", VA = "0x7D7EDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x7D7EE0", Offset = "0x7D7EE0", VA = "0x7D7EE0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x7D7F50", Offset = "0x7D7F50", VA = "0x7D7F50")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x7D808C", Offset = "0x7D808C", VA = "0x7D808C")]
		private void OnButtonClick()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x7D8210", Offset = "0x7D8210", VA = "0x7D8210")]
		public UIElement()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class Unparent : MonoBehaviour
	{
		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform oldParent;

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x7D8218", Offset = "0x7D8218", VA = "0x7D8218")]
		private void Start()
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x7D8314", Offset = "0x7D8314", VA = "0x7D8314")]
		private void Update()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x7D83D8", Offset = "0x7D83D8", VA = "0x7D83D8")]
		public Transform GetOldParent()
		{
			return null;
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x7D83E0", Offset = "0x7D83E0", VA = "0x7D83E0")]
		public Unparent()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public static class Util
	{
		[Token(Token = "0x20003EB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590504", Offset = "0x590504")]
		private sealed class <WrapCoroutine>d__43 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IEnumerator coroutine;

			[Token(Token = "0x40012AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action onCoroutineFinished;

			[Token(Token = "0x170000FA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001178")]
				[Address(RVA = "0x7D9F74", Offset = "0x7D9F74", VA = "0x7D9F74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600117A")]
				[Address(RVA = "0x7D9FDC", Offset = "0x7D9FDC", VA = "0x7D9FDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001175")]
			[Address(RVA = "0x7D96CC", Offset = "0x7D96CC", VA = "0x7D96CC")]
			[DebuggerHidden]
			public <WrapCoroutine>d__43(int <>1__state)
			{
			}

			[Token(Token = "0x6001176")]
			[Address(RVA = "0x7D9E0C", Offset = "0x7D9E0C", VA = "0x7D9E0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001177")]
			[Address(RVA = "0x7D9E10", Offset = "0x7D9E10", VA = "0x7D9E10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001179")]
			[Address(RVA = "0x7D9F7C", Offset = "0x7D9F7C", VA = "0x7D9F7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590514", Offset = "0x590514")]
		private sealed class <>c__47<T>
		{
			[Token(Token = "0x40012AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__47<T> <>9;

			[Token(Token = "0x40012B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<T, T> <>9__47_0;

			[Token(Token = "0x600117C")]
			public <>c__47()
			{
			}

			[Token(Token = "0x600117D")]
			internal T <Median>b__47_0(T x)
			{
				return (T)null;
			}
		}

		[Token(Token = "0x4000ED0")]
		public const float FeetToMeters = 0.3048f;

		[Token(Token = "0x4000ED1")]
		public const float FeetToCentimeters = 30.48f;

		[Token(Token = "0x4000ED2")]
		public const float InchesToMeters = 0.0254f;

		[Token(Token = "0x4000ED3")]
		public const float InchesToCentimeters = 2.54f;

		[Token(Token = "0x4000ED4")]
		public const float MetersToFeet = 3.28084f;

		[Token(Token = "0x4000ED5")]
		public const float MetersToInches = 39.3701f;

		[Token(Token = "0x4000ED6")]
		public const float CentimetersToFeet = 0.0328084f;

		[Token(Token = "0x4000ED7")]
		public const float CentimetersToInches = 0.393701f;

		[Token(Token = "0x4000ED8")]
		public const float KilometersToMiles = 0.621371f;

		[Token(Token = "0x4000ED9")]
		public const float MilesToKilometers = 1.60934f;

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x7D83E8", Offset = "0x7D83E8", VA = "0x7D83E8")]
		public static float RemapNumber(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x7C3600", Offset = "0x7C3600", VA = "0x7C3600")]
		public static float RemapNumberClamped(float num, float low1, float high1, float low2, float high2)
		{
			return default(float);
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x7D8404", Offset = "0x7D8404", VA = "0x7D8404")]
		public static float Approach(float target, float value, float speed)
		{
			return default(float);
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x7D842C", Offset = "0x7D842C", VA = "0x7D842C")]
		public static Vector3 BezierInterpolate3(Vector3 p0, Vector3 c0, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x7D8544", Offset = "0x7D8544", VA = "0x7D8544")]
		public static Vector3 BezierInterpolate4(Vector3 p0, Vector3 c0, Vector3 c1, Vector3 p1, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x7D871C", Offset = "0x7D871C", VA = "0x7D871C")]
		public static Vector3 Vector3FromString(string szString)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x7D8858", Offset = "0x7D8858", VA = "0x7D8858")]
		public static Vector2 Vector2FromString(string szString)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x7D8994", Offset = "0x7D8994", VA = "0x7D8994")]
		public static float Normalize(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x7D89A4", Offset = "0x7D89A4", VA = "0x7D89A4")]
		public static Vector3 Vector2AsVector3(Vector2 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x7D89E0", Offset = "0x7D89E0", VA = "0x7D89E0")]
		public static Vector2 Vector3AsVector2(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x7D8A10", Offset = "0x7D8A10", VA = "0x7D8A10")]
		public static float AngleOf(Vector2 v)
		{
			return default(float);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x7D8AC8", Offset = "0x7D8AC8", VA = "0x7D8AC8")]
		public static float YawOf(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x600093B")]
		public static void Swap<T>(ref T lhs, ref T rhs)
		{
		}

		[Token(Token = "0x600093C")]
		public static void Shuffle<T>(T[] array)
		{
		}

		[Token(Token = "0x600093D")]
		public static void Shuffle<T>(List<T> list)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x7D8B90", Offset = "0x7D8B90", VA = "0x7D8B90")]
		public static int RandomWithLookback(int min, int max, List<int> history, int historyCount)
		{
			return default(int);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x7D8C90", Offset = "0x7D8C90", VA = "0x7D8C90")]
		public static Transform FindChild(Transform parent, string name)
		{
			return null;
		}

		[Token(Token = "0x6000940")]
		public static bool IsNullOrEmpty<T>(T[] array)
		{
			return default(bool);
		}

		[Token(Token = "0x6000941")]
		public static bool IsValidIndex<T>(T[] array, int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6000942")]
		public static bool IsValidIndex<T>(List<T> list, int i)
		{
			return default(bool);
		}

		[Token(Token = "0x6000943")]
		public static int FindOrAdd<T>(List<T> list, T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000944")]
		public static List<T> FindAndRemove<T>(List<T> list, Predicate<T> match)
		{
			return null;
		}

		[Token(Token = "0x6000945")]
		public static T FindOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000946")]
		public static void FastRemove<T>(List<T> list, int index)
		{
		}

		[Token(Token = "0x6000947")]
		public static void ReplaceGameObject<T, U>(T replace, U replaceWith) where T : MonoBehaviour where U : MonoBehaviour
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x7D8F8C", Offset = "0x7D8F8C", VA = "0x7D8F8C")]
		public static void SwitchLayerRecursively(Transform transform, int fromLayer, int toLayer)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x7D57B0", Offset = "0x7D57B0", VA = "0x7D57B0")]
		public static void DrawCross(Vector3 origin, Color crossColor, float size)
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x7D413C", Offset = "0x7D413C", VA = "0x7D413C")]
		public static void ResetTransform(Transform t, bool resetScale = true)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x7D9044", Offset = "0x7D9044", VA = "0x7D9044")]
		public static Vector3 ClosestPointOnLine(Vector3 vA, Vector3 vB, Vector3 vPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x7D9230", Offset = "0x7D9230", VA = "0x7D9230")]
		public static void AfterTimer(GameObject go, float _time, Action callback, bool trigger_if_destroyed_early = false)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x7D92BC", Offset = "0x7D92BC", VA = "0x7D92BC")]
		public static void SendPhysicsMessage(Collider collider, string message, SendMessageOptions sendMessageOptions)
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x7D93D8", Offset = "0x7D93D8", VA = "0x7D93D8")]
		public static void SendPhysicsMessage(Collider collider, string message, object arg, SendMessageOptions sendMessageOptions)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x7D9508", Offset = "0x7D9508", VA = "0x7D9508")]
		public static void IgnoreCollisions(GameObject goA, GameObject goB)
		{
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x7D9650", Offset = "0x7D9650", VA = "0x7D9650")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5949C0", Offset = "0x5949C0")]
		public static IEnumerator WrapCoroutine(IEnumerator coroutine, Action onCoroutineFinished)
		{
			return null;
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x7D96F8", Offset = "0x7D96F8", VA = "0x7D96F8")]
		public static Color ColorWithAlpha(this Color color, float alpha)
		{
			return default(Color);
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x7D9700", Offset = "0x7D9700", VA = "0x7D9700")]
		public static void Quit()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x7D9724", Offset = "0x7D9724", VA = "0x7D9724")]
		public static decimal FloatToDecimal(float value, int decimalPlaces = 2)
		{
			return default(decimal);
		}

		[Token(Token = "0x6000954")]
		public static T Median<T>(this IEnumerable<T> source)
		{
			return (T)null;
		}

		[Token(Token = "0x6000955")]
		public static void ForEach<T>(this IEnumerable<T> source, Action<T> action)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x7D97DC", Offset = "0x7D97DC", VA = "0x7D97DC")]
		public static string FixupNewlines(string text)
		{
			return null;
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x7D988C", Offset = "0x7D988C", VA = "0x7D988C")]
		public static float PathLength(NavMeshPath path)
		{
			return default(float);
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x7D9A08", Offset = "0x7D9A08", VA = "0x7D9A08")]
		public static bool HasCommandLineArgument(string argumentName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x7D9A9C", Offset = "0x7D9A9C", VA = "0x7D9A9C")]
		public static int GetCommandLineArgValue(string argumentName, int nDefaultValue)
		{
			return default(int);
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x7D9B68", Offset = "0x7D9B68", VA = "0x7D9B68")]
		public static float GetCommandLineArgValue(string argumentName, float flDefaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x7D9C7C", Offset = "0x7D9C7C", VA = "0x7D9C7C")]
		public static void SetActive(GameObject gameObject, bool active)
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x7D9D20", Offset = "0x7D9D20", VA = "0x7D9D20")]
		public static string CombinePaths(params string[] paths)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000207")]
	public class AfterTimer_Component : MonoBehaviour
	{
		[Token(Token = "0x20003ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590524", Offset = "0x590524")]
		private sealed class <Wait>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AfterTimer_Component <>4__this;

			[Token(Token = "0x170000FC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001181")]
				[Address(RVA = "0xB30DD4", Offset = "0xB30DD4", VA = "0xB30DD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001183")]
				[Address(RVA = "0xB30E3C", Offset = "0xB30E3C", VA = "0xB30E3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600117E")]
			[Address(RVA = "0xB30C4C", Offset = "0xB30C4C", VA = "0xB30C4C")]
			[DebuggerHidden]
			public <Wait>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x600117F")]
			[Address(RVA = "0xB30CE0", Offset = "0xB30CE0", VA = "0xB30CE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001180")]
			[Address(RVA = "0xB30CE4", Offset = "0xB30CE4", VA = "0xB30CE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001182")]
			[Address(RVA = "0xB30DDC", Offset = "0xB30DDC", VA = "0xB30DDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action callback;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float triggerTime;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool timerActive;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool triggerOnEarlyDestroy;

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xB30B98", Offset = "0xB30B98", VA = "0xB30B98")]
		public void Init(float _time, Action _callback, bool earlydestroy)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xB30BDC", Offset = "0xB30BDC", VA = "0xB30BDC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594A54", Offset = "0x594A54")]
		private IEnumerator Wait()
		{
			return null;
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xB30C78", Offset = "0xB30C78", VA = "0xB30C78")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xB30CD8", Offset = "0xB30CD8", VA = "0xB30CD8")]
		public AfterTimer_Component()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public class VelocityEstimator : MonoBehaviour
	{
		[Token(Token = "0x20003EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590534", Offset = "0x590534")]
		private sealed class <EstimateVelocityCoroutine>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VelocityEstimator <>4__this;

			[Token(Token = "0x40012B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <previousPosition>5__2;

			[Token(Token = "0x40012B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Quaternion <previousRotation>5__3;

			[Token(Token = "0x170000FE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001187")]
				[Address(RVA = "0x721EC8", Offset = "0x721EC8", VA = "0x721EC8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001189")]
				[Address(RVA = "0x721F30", Offset = "0x721F30", VA = "0x721F30", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001184")]
			[Address(RVA = "0x721AAC", Offset = "0x721AAC", VA = "0x721AAC")]
			[DebuggerHidden]
			public <EstimateVelocityCoroutine>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001185")]
			[Address(RVA = "0x721AD8", Offset = "0x721AD8", VA = "0x721AD8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001186")]
			[Address(RVA = "0x721ADC", Offset = "0x721ADC", VA = "0x721ADC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001188")]
			[Address(RVA = "0x721ED0", Offset = "0x721ED0", VA = "0x721ED0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592CD0", Offset = "0x592CD0")]
		public int velocityAverageFrames;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592D08", Offset = "0x592D08")]
		public int angularVelocityAverageFrames;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool estimateOnAwake;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine routine;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int sampleCount;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] velocitySamples;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] angularVelocitySamples;

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x7D7094", Offset = "0x7D7094", VA = "0x7D7094")]
		public void BeginEstimatingVelocity()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x7D734C", Offset = "0x7D734C", VA = "0x7D734C")]
		public void FinishEstimatingVelocity()
		{
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x7D737C", Offset = "0x7D737C", VA = "0x7D737C")]
		public Vector3 GetVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x7D7544", Offset = "0x7D7544", VA = "0x7D7544")]
		public Vector3 GetAngularVelocityEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x7DA054", Offset = "0x7DA054", VA = "0x7DA054")]
		public Vector3 GetAccelerationEstimate()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x7DA238", Offset = "0x7DA238", VA = "0x7DA238")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x7D9FE4", Offset = "0x7D9FE4", VA = "0x7D9FE4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594AB8", Offset = "0x594AB8")]
		private IEnumerator EstimateVelocityCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x7DA2B8", Offset = "0x7DA2B8", VA = "0x7DA2B8")]
		public VelocityEstimator()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class ControllerButtonHints : MonoBehaviour
	{
		[Token(Token = "0x20003EF")]
		private enum OffsetType
		{
			[Token(Token = "0x40012BA")]
			Up,
			[Token(Token = "0x40012BB")]
			Right,
			[Token(Token = "0x40012BC")]
			Forward,
			[Token(Token = "0x40012BD")]
			Back
		}

		[Token(Token = "0x20003F0")]
		private class ActionHintInfo
		{
			[Token(Token = "0x40012BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string componentName;

			[Token(Token = "0x40012BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public List<MeshRenderer> renderers;

			[Token(Token = "0x40012C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform localTransform;

			[Token(Token = "0x40012C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject textHintObject;

			[Token(Token = "0x40012C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform textStartAnchor;

			[Token(Token = "0x40012C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform textEndAnchor;

			[Token(Token = "0x40012C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector3 textEndOffsetDir;

			[Token(Token = "0x40012C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform canvasOffset;

			[Token(Token = "0x40012C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Text text;

			[Token(Token = "0x40012C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public TextMesh textMesh;

			[Token(Token = "0x40012C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Canvas textCanvas;

			[Token(Token = "0x40012C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public LineRenderer line;

			[Token(Token = "0x40012CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float distanceFromCenter;

			[Token(Token = "0x40012CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public bool textHintActive;

			[Token(Token = "0x600118A")]
			[Address(RVA = "0x7B20BC", Offset = "0x7B20BC", VA = "0x7B20BC")]
			public ActionHintInfo()
			{
			}
		}

		[Token(Token = "0x20003F1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590544", Offset = "0x590544")]
		private sealed class <DoInitialize>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SteamVR_RenderModel renderModel;

			[Token(Token = "0x40012CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ControllerButtonHints <>4__this;

			[Token(Token = "0x17000100")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600118E")]
				[Address(RVA = "0x7B4528", Offset = "0x7B4528", VA = "0x7B4528", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000101")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001190")]
				[Address(RVA = "0x7B4590", Offset = "0x7B4590", VA = "0x7B4590", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600118B")]
			[Address(RVA = "0x7B12E4", Offset = "0x7B12E4", VA = "0x7B12E4")]
			[DebuggerHidden]
			public <DoInitialize>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x600118C")]
			[Address(RVA = "0x7B4128", Offset = "0x7B4128", VA = "0x7B4128", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600118D")]
			[Address(RVA = "0x7B412C", Offset = "0x7B412C", VA = "0x7B412C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600118F")]
			[Address(RVA = "0x7B4530", Offset = "0x7B4530", VA = "0x7B4530", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003F2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590554", Offset = "0x590554")]
		private sealed class <TestButtonHints>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			[Token(Token = "0x40012D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <actionIndex>5__2;

			[Token(Token = "0x17000102")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001194")]
				[Address(RVA = "0x7B478C", Offset = "0x7B478C", VA = "0x7B478C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000103")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001196")]
				[Address(RVA = "0x7B47F4", Offset = "0x7B47F4", VA = "0x7B47F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001191")]
			[Address(RVA = "0x7B2EEC", Offset = "0x7B2EEC", VA = "0x7B2EEC")]
			[DebuggerHidden]
			public <TestButtonHints>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6001192")]
			[Address(RVA = "0x7B4598", Offset = "0x7B4598", VA = "0x7B4598", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001193")]
			[Address(RVA = "0x7B459C", Offset = "0x7B459C", VA = "0x7B459C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001195")]
			[Address(RVA = "0x7B4794", Offset = "0x7B4794", VA = "0x7B4794", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003F3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590564", Offset = "0x590564")]
		private sealed class <TestTextHints>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerButtonHints <>4__this;

			[Token(Token = "0x40012D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <actionIndex>5__2;

			[Token(Token = "0x17000104")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600119A")]
				[Address(RVA = "0x7B49F4", Offset = "0x7B49F4", VA = "0x7B49F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000105")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600119C")]
				[Address(RVA = "0x7B4A5C", Offset = "0x7B4A5C", VA = "0x7B4A5C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001197")]
			[Address(RVA = "0x7B2F88", Offset = "0x7B2F88", VA = "0x7B2F88")]
			[DebuggerHidden]
			public <TestTextHints>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6001198")]
			[Address(RVA = "0x7B47FC", Offset = "0x7B47FC", VA = "0x7B47FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001199")]
			[Address(RVA = "0x7B4800", Offset = "0x7B4800", VA = "0x7B4800", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600119B")]
			[Address(RVA = "0x7B49FC", Offset = "0x7B49FC", VA = "0x7B49FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material controllerMaterial;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color flashColor;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject textHintPrefab;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x592D40", Offset = "0x592D40")]
		public SteamVR_Action_Vibration hapticFlash;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592D7C", Offset = "0x592D7C")]
		public bool debugHints;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SteamVR_RenderModel renderModel;

		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Player player;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<MeshRenderer> renderers;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<MeshRenderer> flashingRenderers;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float startTime;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float tickCount;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<SteamVR_Action_In, ActionHintInfo> actionHintInfos;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform textHintParent;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int colorID;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x592DB4", Offset = "0x592DB4")]
		private bool <initialized>k__BackingField;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 centerPosition;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SteamVR_Events.Action renderModelLoadedAction;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected SteamVR_Input_Sources inputSource;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Dictionary<string, Transform> componentTransformMap;

		[Token(Token = "0x170000A0")]
		public bool initialized
		{
			[Token(Token = "0x6000969")]
			[Address(RVA = "0x7B0A08", Offset = "0x7B0A08", VA = "0x7B0A08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594B1C", Offset = "0x594B1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600096A")]
			[Address(RVA = "0x7B0A10", Offset = "0x7B0A10", VA = "0x7B0A10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594B2C", Offset = "0x594B2C")]
			private set
			{
			}
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x7B0A1C", Offset = "0x7B0A1C", VA = "0x7B0A1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x7B0AD8", Offset = "0x7B0AD8", VA = "0x7B0AD8")]
		private void Start()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x7B0B00", Offset = "0x7B0B00", VA = "0x7B0B00")]
		private void HintDebugLog(string msg)
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x7B0BAC", Offset = "0x7B0BAC", VA = "0x7B0BAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x7B0BCC", Offset = "0x7B0BCC", VA = "0x7B0BCC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x7B0C6C", Offset = "0x7B0C6C", VA = "0x7B0C6C")]
		private void OnParentHandInputFocusLost()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x7B0EB0", Offset = "0x7B0EB0", VA = "0x7B0EB0", Slot = "4")]
		public virtual void SetInputSource(SteamVR_Input_Sources newInputSource)
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x7B0F48", Offset = "0x7B0F48", VA = "0x7B0F48")]
		private void OnHandInitialized(int deviceIndex)
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x7B1130", Offset = "0x7B1130", VA = "0x7B1130")]
		private void OnRenderModelLoaded(SteamVR_RenderModel renderModel, bool succeess)
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x7B1268", Offset = "0x7B1268", VA = "0x7B1268")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594B3C", Offset = "0x594B3C")]
		private IEnumerator DoInitialize(SteamVR_RenderModel renderModel)
		{
			return null;
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x7B1310", Offset = "0x7B1310", VA = "0x7B1310")]
		private void CreateAndAddButtonInfo(SteamVR_Action_In action, SteamVR_Input_Sources inputSource)
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x7B20C4", Offset = "0x7B20C4", VA = "0x7B20C4")]
		private void ComputeTextEndTransforms()
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x7B26DC", Offset = "0x7B26DC", VA = "0x7B26DC")]
		private void ShowButtonHint(params SteamVR_Action_In[] actions)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x7B0C90", Offset = "0x7B0C90", VA = "0x7B0C90")]
		private void HideAllButtonHints()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x7B2A7C", Offset = "0x7B2A7C", VA = "0x7B2A7C")]
		private void HideButtonHint(params SteamVR_Action_In[] actions)
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x7B2D14", Offset = "0x7B2D14", VA = "0x7B2D14")]
		private bool IsButtonHintActive(SteamVR_Action_In action)
		{
			return default(bool);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x7B2E7C", Offset = "0x7B2E7C", VA = "0x7B2E7C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594BA0", Offset = "0x594BA0")]
		private IEnumerator TestButtonHints()
		{
			return null;
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x7B2F18", Offset = "0x7B2F18", VA = "0x7B2F18")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594C04", Offset = "0x594C04")]
		private IEnumerator TestTextHints()
		{
			return null;
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x7B2FB4", Offset = "0x7B2FB4", VA = "0x7B2FB4")]
		private void Update()
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x7B32B8", Offset = "0x7B32B8", VA = "0x7B32B8")]
		private void UpdateTextHint(ActionHintInfo hintInfo)
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x7B0C04", Offset = "0x7B0C04", VA = "0x7B0C04")]
		private void Clear()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x7B35B4", Offset = "0x7B35B4", VA = "0x7B35B4")]
		private void ShowText(SteamVR_Action_In action, string text, bool highlightButton = true)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x7B37BC", Offset = "0x7B37BC", VA = "0x7B37BC")]
		private void HideText(SteamVR_Action_In action)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x7B0D8C", Offset = "0x7B0D8C", VA = "0x7B0D8C")]
		private void HideAllText()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x7B38D8", Offset = "0x7B38D8", VA = "0x7B38D8")]
		private string GetActiveHintText(SteamVR_Action_In action)
		{
			return null;
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x7B39A8", Offset = "0x7B39A8", VA = "0x7B39A8")]
		private static ControllerButtonHints GetControllerButtonHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x7B3A80", Offset = "0x7B3A80", VA = "0x7B3A80")]
		public static void ShowButtonHint(Hand hand, params SteamVR_Action_In[] actions)
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x7B3B30", Offset = "0x7B3B30", VA = "0x7B3B30")]
		public static void HideButtonHint(Hand hand, params SteamVR_Action_In[] actions)
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x7B3BE0", Offset = "0x7B3BE0", VA = "0x7B3BE0")]
		public static void HideAllButtonHints(Hand hand)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x7B3C7C", Offset = "0x7B3C7C", VA = "0x7B3C7C")]
		public static bool IsButtonHintActive(Hand hand, SteamVR_Action_In action)
		{
			return default(bool);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x7B3D30", Offset = "0x7B3D30", VA = "0x7B3D30")]
		public static void ShowTextHint(Hand hand, SteamVR_Action_In action, string text, bool highlightButton = true)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x7B3DFC", Offset = "0x7B3DFC", VA = "0x7B3DFC")]
		public static void HideTextHint(Hand hand, SteamVR_Action_In action)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x7B3EAC", Offset = "0x7B3EAC", VA = "0x7B3EAC")]
		public static void HideAllTextHints(Hand hand)
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x7B3F48", Offset = "0x7B3F48", VA = "0x7B3F48")]
		public static string GetActiveHintText(Hand hand, SteamVR_Action_In action)
		{
			return null;
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x7B400C", Offset = "0x7B400C", VA = "0x7B400C")]
		public ControllerButtonHints()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class ArcheryTarget : MonoBehaviour
	{
		[Token(Token = "0x20003F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590574", Offset = "0x590574")]
		private sealed class <FallDown>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArcheryTarget <>4__this;

			[Token(Token = "0x40012DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Quaternion <startingRot>5__2;

			[Token(Token = "0x40012DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__3;

			[Token(Token = "0x40012DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <rotLerp>5__4;

			[Token(Token = "0x17000106")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011A0")]
				[Address(RVA = "0xB31170", Offset = "0xB31170", VA = "0xB31170", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000107")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011A2")]
				[Address(RVA = "0xB311D8", Offset = "0xB311D8", VA = "0xB311D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600119D")]
			[Address(RVA = "0xB30F28", Offset = "0xB30F28", VA = "0xB30F28")]
			[DebuggerHidden]
			public <FallDown>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x600119E")]
			[Address(RVA = "0xB30F6C", Offset = "0xB30F6C", VA = "0xB30F6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600119F")]
			[Address(RVA = "0xB30F70", Offset = "0xB30F70", VA = "0xB30F70", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011A1")]
			[Address(RVA = "0xB31178", Offset = "0xB31178", VA = "0xB31178", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent onTakeDamage;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool onceOnly;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform targetCenter;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform baseTransform;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform fallenDownTransform;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fallTime;

		[Token(Token = "0x4000EFE")]
		private const float targetRadius = 0.25f;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool targetEnabled;

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xB30E54", Offset = "0xB30E54", VA = "0xB30E54")]
		private void ApplyDamage()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xB30EB4", Offset = "0xB30EB4", VA = "0xB30EB4")]
		private void FireExposure()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xB30E58", Offset = "0xB30E58", VA = "0xB30E58")]
		private void OnDamageTaken()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xB30EB8", Offset = "0xB30EB8", VA = "0xB30EB8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594C68", Offset = "0x594C68")]
		private IEnumerator FallDown()
		{
			return null;
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xB30F54", Offset = "0xB30F54", VA = "0xB30F54")]
		public ArcheryTarget()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem glintParticle;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody arrowHeadRB;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody shaftRB;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PhysicMaterial targetPhysMaterial;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 prevPosition;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion prevRotation;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 prevVelocity;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 prevHeadPosition;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SoundPlayOneshot fireReleaseSound;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SoundPlayOneshot airReleaseSound;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public SoundPlayOneshot hitTargetSound;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public PlaySound hitGroundSound;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool inFlight;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool released;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		private bool hasSpreadFire;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int travelledFrames;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject scaleParentObject;

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xB311E0", Offset = "0xB311E0", VA = "0xB311E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xB31258", Offset = "0xB31258", VA = "0xB31258")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xB31344", Offset = "0xB31344", VA = "0xB31344")]
		public void ArrowReleased(float inputVelocity)
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xB31750", Offset = "0xB31750", VA = "0xB31750")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xB31E20", Offset = "0xB31E20", VA = "0xB31E20")]
		private void StickInTarget(Collision collision, bool bSkipRayCast)
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xB324B8", Offset = "0xB324B8", VA = "0xB324B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xB3256C", Offset = "0xB3256C", VA = "0xB3256C")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class ArrowHand : MonoBehaviour
	{
		[Token(Token = "0x20003F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590584", Offset = "0x590584")]
		private sealed class <ArrowReleaseHaptics>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ArrowHand <>4__this;

			[Token(Token = "0x17000108")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011A6")]
				[Address(RVA = "0xB3356C", Offset = "0xB3356C", VA = "0xB3356C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000109")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011A8")]
				[Address(RVA = "0xB335D4", Offset = "0xB335D4", VA = "0xB335D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011A3")]
			[Address(RVA = "0xB332E8", Offset = "0xB332E8", VA = "0xB332E8")]
			[DebuggerHidden]
			public <ArrowReleaseHaptics>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x60011A4")]
			[Address(RVA = "0xB33388", Offset = "0xB33388", VA = "0xB33388", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011A5")]
			[Address(RVA = "0xB3338C", Offset = "0xB3338C", VA = "0xB3338C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011A7")]
			[Address(RVA = "0xB33574", Offset = "0xB33574", VA = "0xB33574", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Longbow bow;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject currentArrow;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject arrowPrefab;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform arrowNockTransform;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float nockDistance;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float lerpCompleteDistance;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rotationLerpThreshold;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float positionLerpThreshold;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool allowArrowSpawn;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool nocked;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private GrabTypes nockedWithType;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool inNockRange;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool arrowLerpComplete;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SoundPlayOneshot arrowSpawnSound;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AllowTeleportWhileAttachedToHand allowTeleport;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int maxArrowCount;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<GameObject> arrowList;

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xB32574", Offset = "0xB32574", VA = "0xB32574")]
		private void Awake()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xB32610", Offset = "0xB32610", VA = "0xB32610")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xB32680", Offset = "0xB32680", VA = "0xB32680")]
		private GameObject InstantiateArrow()
		{
			return null;
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xB32894", Offset = "0xB32894", VA = "0xB32894")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xB331F0", Offset = "0xB331F0", VA = "0xB331F0")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0xB32F60", Offset = "0xB32F60", VA = "0xB32F60")]
		private void FireArrow()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xB332DC", Offset = "0xB332DC", VA = "0xB332DC")]
		private void EnableArrowSpawn()
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xB3326C", Offset = "0xB3326C", VA = "0xB3326C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594CCC", Offset = "0x594CCC")]
		private IEnumerator ArrowReleaseHaptics()
		{
			return null;
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xB33314", Offset = "0xB33314", VA = "0xB33314")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xB3333C", Offset = "0xB3333C", VA = "0xB3333C")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xB32618", Offset = "0xB32618", VA = "0xB32618")]
		private void FindBow()
		{
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xB33364", Offset = "0xB33364", VA = "0xB33364")]
		public ArrowHand()
		{
		}
	}
	[Token(Token = "0x200020D")]
	public class ArrowheadRotation : MonoBehaviour
	{
		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xB335DC", Offset = "0xB335DC", VA = "0xB335DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xB33674", Offset = "0xB33674", VA = "0xB33674")]
		public ArrowheadRotation()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class Balloon : MonoBehaviour
	{
		[Token(Token = "0x20003F6")]
		public enum BalloonColor
		{
			[Token(Token = "0x40012E2")]
			Red,
			[Token(Token = "0x40012E3")]
			OrangeRed,
			[Token(Token = "0x40012E4")]
			Orange,
			[Token(Token = "0x40012E5")]
			YellowOrange,
			[Token(Token = "0x40012E6")]
			Yellow,
			[Token(Token = "0x40012E7")]
			GreenYellow,
			[Token(Token = "0x40012E8")]
			Green,
			[Token(Token = "0x40012E9")]
			BlueGreen,
			[Token(Token = "0x40012EA")]
			Blue,
			[Token(Token = "0x40012EB")]
			VioletBlue,
			[Token(Token = "0x40012EC")]
			Violet,
			[Token(Token = "0x40012ED")]
			RedViolet,
			[Token(Token = "0x40012EE")]
			LightGray,
			[Token(Token = "0x40012EF")]
			DarkGray,
			[Token(Token = "0x40012F0")]
			Random
		}

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Hand hand;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject popPrefab;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxVelocity;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float lifetime;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool burstOnLifetimeEnd;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject lifetimeEndParticlePrefab;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot lifetimeEndSound;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float destructTime;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float releaseTime;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SoundPlayOneshot collisionSound;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastSoundTime;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float soundDelay;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody balloonRigidbody;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool bParticlesSpawned;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float s_flLastDeathSound;

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xB3367C", Offset = "0xB3367C", VA = "0xB3367C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xB33718", Offset = "0xB33718", VA = "0xB33718")]
		private void Update()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xB337D4", Offset = "0xB337D4", VA = "0xB337D4")]
		private void SpawnParticles(GameObject particlePrefab, SoundPlayOneshot sound)
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xB33A24", Offset = "0xB33A24", VA = "0xB33A24")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xB33B20", Offset = "0xB33B20", VA = "0xB33B20")]
		private void ApplyDamage()
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xB33BAC", Offset = "0xB33BAC", VA = "0xB33BAC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xB33EEC", Offset = "0xB33EEC", VA = "0xB33EEC")]
		public void SetColor(BalloonColor color)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xB33F78", Offset = "0xB33F78", VA = "0xB33F78")]
		private Color BalloonColorToRGB(BalloonColor balloonColorVar)
		{
			return default(Color);
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xB341B0", Offset = "0xB341B0", VA = "0xB341B0")]
		public Balloon()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class BalloonColliders : MonoBehaviour
	{
		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] colliders;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3[] colliderLocalPositions;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion[] colliderLocalRotations;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xB341E0", Offset = "0xB341E0", VA = "0xB341E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xB343F4", Offset = "0xB343F4", VA = "0xB343F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0xB3465C", Offset = "0xB3465C", VA = "0xB3465C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xB347A4", Offset = "0xB347A4", VA = "0xB347A4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xB3485C", Offset = "0xB3485C", VA = "0xB3485C")]
		public BalloonColliders()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class BalloonHapticBump : MonoBehaviour
	{
		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject physParent;

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xB34864", Offset = "0xB34864", VA = "0xB34864")]
		private void OnCollisionEnter(Collision other)
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xB34980", Offset = "0xB34980", VA = "0xB34980")]
		public BalloonHapticBump()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class BalloonSpawner : MonoBehaviour
	{
		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float minSpawnTime;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxSpawnTime;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float nextSpawnTime;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject balloonPrefab;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool autoSpawn;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool spawnAtStartup;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool playSounds;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SoundPlayOneshot inflateSound;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SoundPlayOneshot stretchSound;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool sendSpawnMessageToParent;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float scale;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnDirectionTransform;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float spawnForce;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool attachBalloon;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Balloon.BalloonColor color;

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xB34988", Offset = "0xB34988", VA = "0xB34988")]
		private void Start()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xB34E08", Offset = "0xB34E08", VA = "0xB34E08")]
		private void Update()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xB34A44", Offset = "0xB34A44", VA = "0xB34A44")]
		public GameObject SpawnBalloon(Balloon.BalloonColor color = Balloon.BalloonColor.Red)
		{
			return null;
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xB34ED0", Offset = "0xB34ED0", VA = "0xB34ED0")]
		public void SpawnBalloonFromEvent(int color)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xB34ED4", Offset = "0xB34ED4", VA = "0xB34ED4")]
		public BalloonSpawner()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public class ExplosionWobble : MonoBehaviour
	{
		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x7B5D08", Offset = "0x7B5D08", VA = "0x7B5D08")]
		public void ExplosionEvent(Vector3 explosionPos)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x7B5DEC", Offset = "0x7B5DEC", VA = "0x7B5DEC")]
		public ExplosionWobble()
		{
		}
	}
	[Token(Token = "0x2000213")]
	public class FireSource : MonoBehaviour
	{
		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject fireParticlePrefab;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool startActive;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject fireObject;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem customParticles;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool isBurning;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float burnTime;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ignitionDelay;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float ignitionTime;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Hand hand;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioSource ignitionSound;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool canSpreadFromThisSource;

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x7B6254", Offset = "0x7B6254", VA = "0x7B6254")]
		private void Start()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x7B64A0", Offset = "0x7B64A0", VA = "0x7B64A0")]
		private void Update()
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x7B65A8", Offset = "0x7B65A8", VA = "0x7B65A8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x7B6634", Offset = "0x7B6634", VA = "0x7B6634")]
		private void FireExposure()
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x7B6264", Offset = "0x7B6264", VA = "0x7B6264")]
		private void StartBurning()
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x7B6734", Offset = "0x7B6734", VA = "0x7B6734")]
		public FireSource()
		{
		}
	}
	[Token(Token = "0x2000214")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E780", Offset = "0x58E780")]
	public class Longbow : MonoBehaviour
	{
		[Token(Token = "0x20003F7")]
		public enum Handedness
		{
			[Token(Token = "0x40012F2")]
			Left,
			[Token(Token = "0x40012F3")]
			Right
		}

		[Token(Token = "0x20003F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590594", Offset = "0x590594")]
		private sealed class <ResetDrawAnim>d__49 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Longbow <>4__this;

			[Token(Token = "0x40012F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x40012F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <startLerp>5__3;

			[Token(Token = "0x1700010A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011AC")]
				[Address(RVA = "0x7C36D4", Offset = "0x7C36D4", VA = "0x7C36D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011AE")]
				[Address(RVA = "0x7C373C", Offset = "0x7C373C", VA = "0x7C373C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011A9")]
			[Address(RVA = "0x7C34E4", Offset = "0x7C34E4", VA = "0x7C34E4")]
			[DebuggerHidden]
			public <ResetDrawAnim>d__49(int <>1__state)
			{
			}

			[Token(Token = "0x60011AA")]
			[Address(RVA = "0x7C3510", Offset = "0x7C3510", VA = "0x7C3510", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011AB")]
			[Address(RVA = "0x7C3514", Offset = "0x7C3514", VA = "0x7C3514", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011AD")]
			[Address(RVA = "0x7C36DC", Offset = "0x7C36DC", VA = "0x7C36DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Handedness currentHandGuess;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float timeOfPossibleHandSwitch;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float timeBeforeConfirmingHandSwitch;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool possibleHandSwitch;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform pivotTransform;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform handleTransform;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Hand hand;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ArrowHand arrowHand;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform nockTransform;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform nockRestTransform;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool autoSpawnArrowHand;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ItemPackage arrowHandItemPackage;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject arrowHandPrefab;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool nocked;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool pulled;

		[Token(Token = "0x4000F60")]
		private const float minPull = 0.05f;

		[Token(Token = "0x4000F61")]
		private const float maxPull = 0.5f;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float nockDistanceTravelled;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float hapticDistanceThreshold;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float lastTickDistance;

		[Token(Token = "0x4000F65")]
		private const float bowPullPulseStrengthLow = 100f;

		[Token(Token = "0x4000F66")]
		private const float bowPullPulseStrengthHigh = 500f;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 bowLeftVector;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float arrowMinVelocity;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float arrowMaxVelocity;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float arrowVelocity;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float minStrainTickTime;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float maxStrainTickTime;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float nextStrainTick;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool lerpBackToZeroRotation;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float lerpStartTime;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float lerpDuration;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion lerpStartRotation;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float nockLerpStartTime;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion nockLerpStartRotation;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float drawOffset;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public LinearMapping bowDrawLinearMapping;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 lateUpdatePos;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private Quaternion lateUpdateRot;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public SoundBowClick drawSound;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float drawTension;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SoundPlayOneshot arrowSlideSound;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SoundPlayOneshot releaseSound;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public SoundPlayOneshot nockSound;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private SteamVR_Events.Action newPosesAppliedAction;

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x7C14C8", Offset = "0x7C14C8", VA = "0x7C14C8")]
		private void OnAttachedToHand(Hand attachedHand)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x7C14D0", Offset = "0x7C14D0", VA = "0x7C14D0")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x7C1DC8", Offset = "0x7C1DC8", VA = "0x7C1DC8")]
		public void ArrowReleased()
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x7C1EC8", Offset = "0x7C1EC8", VA = "0x7C1EC8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594D30", Offset = "0x594D30")]
		private IEnumerator ResetDrawAnim()
		{
			return null;
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x7C1F38", Offset = "0x7C1F38", VA = "0x7C1F38")]
		public float GetArrowVelocity()
		{
			return default(float);
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x7C1F40", Offset = "0x7C1F40", VA = "0x7C1F40")]
		public void StartRotationLerp()
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x7C1F98", Offset = "0x7C1F98", VA = "0x7C1F98")]
		public void StartNock(ArrowHand currentArrowHand)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x7C1CE0", Offset = "0x7C1CE0", VA = "0x7C1CE0")]
		private void EvaluateHandedness()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x7C2054", Offset = "0x7C2054", VA = "0x7C2054")]
		private void DoHandednessCheck()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x7C20D4", Offset = "0x7C20D4", VA = "0x7C20D4")]
		public void ArrowInPosition()
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x7C2170", Offset = "0x7C2170", VA = "0x7C2170")]
		public void ReleaseNock()
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x7C21F4", Offset = "0x7C21F4", VA = "0x7C21F4")]
		private void ShutDown()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x7C23AC", Offset = "0x7C23AC", VA = "0x7C23AC")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x7C23D4", Offset = "0x7C23D4", VA = "0x7C23D4")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x7C2414", Offset = "0x7C2414", VA = "0x7C2414")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x7C2490", Offset = "0x7C2490", VA = "0x7C2490")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x7C2494", Offset = "0x7C2494", VA = "0x7C2494")]
		public Longbow()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class SoundBowClick : MonoBehaviour
	{
		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip bowClick;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve pitchTensionCurve;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float minPitch;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float maxPitch;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AudioSource thisAudioSource;

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x7CF628", Offset = "0x7CF628", VA = "0x7CF628")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x7CF680", Offset = "0x7CF680", VA = "0x7CF680")]
		public void PlayBowTensionClicks(float normalizedTension)
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x7CF6E0", Offset = "0x7CF6E0", VA = "0x7CF6E0")]
		public SoundBowClick()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public class Grenade : MonoBehaviour
	{
		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject explodePartPrefab;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int explodeCount;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minMagnitudeToExplode;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Interactable interactable;

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x7B6744", Offset = "0x7B6744", VA = "0x7B6744")]
		private void Start()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x7B679C", Offset = "0x7B679C", VA = "0x7B679C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x7B6A20", Offset = "0x7B6A20", VA = "0x7B6A20")]
		public Grenade()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class ButtonExample : MonoBehaviour
	{
		[Token(Token = "0x20003F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5905A4", Offset = "0x5905A4")]
		private sealed class <DoPlant>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40012F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40012FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40012FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ButtonExample <>4__this;

			[Token(Token = "0x40012FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <planting>5__2;

			[Token(Token = "0x40012FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Rigidbody <rigidbody>5__3;

			[Token(Token = "0x40012FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3 <initialScale>5__4;

			[Token(Token = "0x40012FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 <targetScale>5__5;

			[Token(Token = "0x4001300")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <startTime>5__6;

			[Token(Token = "0x4001301")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <overTime>5__7;

			[Token(Token = "0x4001302")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <endTime>5__8;

			[Token(Token = "0x1700010C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011B2")]
				[Address(RVA = "0xB35648", Offset = "0xB35648", VA = "0xB35648", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011B4")]
				[Address(RVA = "0xB356B0", Offset = "0xB356B0", VA = "0xB356B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011AF")]
			[Address(RVA = "0xB35244", Offset = "0xB35244", VA = "0xB35244")]
			[DebuggerHidden]
			public <DoPlant>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60011B0")]
			[Address(RVA = "0xB35278", Offset = "0xB35278", VA = "0xB35278", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011B1")]
			[Address(RVA = "0xB3527C", Offset = "0xB3527C", VA = "0xB3527C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011B3")]
			[Address(RVA = "0xB35650", Offset = "0xB35650", VA = "0xB35650", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HoverButton hoverButton;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject prefab;

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xB35104", Offset = "0xB35104", VA = "0xB35104")]
		private void Start()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xB351A8", Offset = "0xB351A8", VA = "0xB351A8")]
		private void OnButtonDown(Hand hand)
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xB351D4", Offset = "0xB351D4", VA = "0xB351D4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594D94", Offset = "0x594D94")]
		private IEnumerator DoPlant()
		{
			return null;
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xB35270", Offset = "0xB35270", VA = "0xB35270")]
		public ButtonExample()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class SquishyToy : MonoBehaviour
	{
		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Interactable interactable;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer renderer;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool affectMaterial;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x592DC4", Offset = "0x592DC4")]
		public SteamVR_Action_Single gripSqueeze;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x592E00", Offset = "0x592E00")]
		public SteamVR_Action_Single pinchSqueeze;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody rigidbody;

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x7CFE14", Offset = "0x7CFE14", VA = "0x7CFE14")]
		private void Start()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x7CFF3C", Offset = "0x7CFF3C", VA = "0x7CFF3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x7D0274", Offset = "0x7D0274", VA = "0x7D0274")]
		public SquishyToy()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class AllowTeleportWhileAttachedToHand : MonoBehaviour
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool teleportAllowed;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool overrideHoverLock;

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xB30E44", Offset = "0xB30E44", VA = "0xB30E44")]
		public AllowTeleportWhileAttachedToHand()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class ChaperoneInfo : MonoBehaviour
	{
		[Token(Token = "0x20003FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5905B4", Offset = "0x5905B4")]
		private sealed class <Start>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001303")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001304")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001305")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ChaperoneInfo <>4__this;

			[Token(Token = "0x4001306")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private CVRChaperone <chaperone>5__2;

			[Token(Token = "0x1700010E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011B8")]
				[Address(RVA = "0x7AC404", Offset = "0x7AC404", VA = "0x7AC404", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011BA")]
				[Address(RVA = "0x7AC46C", Offset = "0x7AC46C", VA = "0x7AC46C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011B5")]
			[Address(RVA = "0x7AC0CC", Offset = "0x7AC0CC", VA = "0x7AC0CC")]
			[DebuggerHidden]
			public <Start>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60011B6")]
			[Address(RVA = "0x7AC0F8", Offset = "0x7AC0F8", VA = "0x7AC0F8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011B7")]
			[Address(RVA = "0x7AC0FC", Offset = "0x7AC0FC", VA = "0x7AC0FC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x7AC40C", Offset = "0x7AC40C", VA = "0x7AC40C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x592E3C", Offset = "0x592E3C")]
		private bool <initialized>k__BackingField;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x592E4C", Offset = "0x592E4C")]
		private float <playAreaSizeX>k__BackingField;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x592E5C", Offset = "0x592E5C")]
		private float <playAreaSizeZ>k__BackingField;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x592E6C", Offset = "0x592E6C")]
		private bool <roomscale>k__BackingField;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event Initialized;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ChaperoneInfo _instance;

		[Token(Token = "0x170000A1")]
		public bool initialized
		{
			[Token(Token = "0x60009E5")]
			[Address(RVA = "0xB356B8", Offset = "0xB356B8", VA = "0xB356B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594DF8", Offset = "0x594DF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xB356C0", Offset = "0xB356C0", VA = "0xB356C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594E08", Offset = "0x594E08")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public float playAreaSizeX
		{
			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xB356CC", Offset = "0xB356CC", VA = "0xB356CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594E18", Offset = "0x594E18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xB356D4", Offset = "0xB356D4", VA = "0xB356D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594E28", Offset = "0x594E28")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public float playAreaSizeZ
		{
			[Token(Token = "0x60009E9")]
			[Address(RVA = "0xB356DC", Offset = "0xB356DC", VA = "0xB356DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594E38", Offset = "0x594E38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xB356E4", Offset = "0xB356E4", VA = "0xB356E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594E48", Offset = "0x594E48")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		public bool roomscale
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0xB356EC", Offset = "0xB356EC", VA = "0xB356EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594E58", Offset = "0x594E58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009EC")]
			[Address(RVA = "0xB356F4", Offset = "0xB356F4", VA = "0xB356F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594E68", Offset = "0x594E68")]
			private set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public static ChaperoneInfo instance
		{
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0xB3579C", Offset = "0xB3579C", VA = "0xB3579C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xB35700", Offset = "0xB35700", VA = "0xB35700")]
		public static SteamVR_Events.Action InitializedAction(UnityAction action)
		{
			return null;
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xB3595C", Offset = "0xB3595C", VA = "0xB3595C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594E78", Offset = "0x594E78")]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xB359CC", Offset = "0xB359CC", VA = "0xB359CC")]
		public ChaperoneInfo()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class IgnoreTeleportTrace : MonoBehaviour
	{
		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x7BB78C", Offset = "0x7BB78C", VA = "0x7BB78C")]
		public IgnoreTeleportTrace()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class Teleport : MonoBehaviour
	{
		[Token(Token = "0x20003FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5905C4", Offset = "0x5905C4")]
		private sealed class <TeleportHintCoroutine>d__106 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001307")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001308")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001309")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Teleport <>4__this;

			[Token(Token = "0x400130A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <prevBreakTime>5__2;

			[Token(Token = "0x400130B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <prevHapticPulseTime>5__3;

			[Token(Token = "0x400130C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private bool <pulsed>5__4;

			[Token(Token = "0x17000110")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011BE")]
				[Address(RVA = "0x7D4F44", Offset = "0x7D4F44", VA = "0x7D4F44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000111")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011C0")]
				[Address(RVA = "0x7D4FAC", Offset = "0x7D4FAC", VA = "0x7D4FAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011BB")]
			[Address(RVA = "0x7D4928", Offset = "0x7D4928", VA = "0x7D4928")]
			[DebuggerHidden]
			public <TeleportHintCoroutine>d__106(int <>1__state)
			{
			}

			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x7D4CE4", Offset = "0x7D4CE4", VA = "0x7D4CE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x7D4CE8", Offset = "0x7D4CE8", VA = "0x7D4CE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011BF")]
			[Address(RVA = "0x7D4F4C", Offset = "0x7D4F4C", VA = "0x7D4F4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x592E7C", Offset = "0x592E7C")]
		public SteamVR_Action_Boolean teleportAction;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayerMask traceLayerMask;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LayerMask floorFixupTraceLayerMask;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float floorFixupMaximumTraceDistance;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material areaVisibleMaterial;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material areaLockedMaterial;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material areaHighlightedMaterial;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Material pointVisibleMaterial;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material pointLockedMaterial;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Material pointHighlightedMaterial;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform destinationReticleTransform;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform invalidReticleTransform;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject playAreaPreviewCorner;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject playAreaPreviewSide;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Color pointerValidColor;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Color pointerInvalidColor;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color pointerLockedColor;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showPlayAreaMarker;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float teleportFadeTime;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float meshFadeTime;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float arcDistance;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592ECC", Offset = "0x592ECC")]
		public Transform onActivateObjectTransform;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform onDeactivateObjectTransform;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float activateObjectTime;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float deactivateObjectTime;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592F04", Offset = "0x592F04")]
		public AudioSource pointerAudioSource;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AudioSource loopingAudioSource;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AudioSource headAudioSource;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AudioSource reticleAudioSource;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592F3C", Offset = "0x592F3C")]
		public AudioClip teleportSound;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AudioClip pointerStartSound;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AudioClip pointerLoopSound;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public AudioClip pointerStopSound;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AudioClip goodHighlightSound;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AudioClip badHighlightSound;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x592F74", Offset = "0x592F74")]
		public bool debugFloor;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		public bool showOffsetReticle;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public Transform offsetReticleTransform;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public MeshRenderer floorDebugSphere;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public LineRenderer floorDebugLine;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private LineRenderer pointerLineRenderer;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private GameObject teleportPointerObject;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Transform pointerStartTransform;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Hand pointerHand;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Player player;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private TeleportArc teleportArc;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool visible;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private TeleportMarkerBase[] teleportMarkers;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private TeleportMarkerBase pointedAtTeleportMarker;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private TeleportMarkerBase teleportingToMarker;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Vector3 pointedAtPosition;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Vector3 prevPointedAtPosition;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private bool teleporting;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float currentFadeTime;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private float meshAlphaPercent;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private float pointerShowStartTime;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float pointerHideStartTime;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private bool meshFading;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float fullTintAlpha;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float invalidReticleMinScale;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private float invalidReticleMaxScale;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private float invalidReticleMinScaleDistance;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private float invalidReticleMaxScaleDistance;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private Vector3 invalidReticleScale;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Quaternion invalidReticleTargetRotation;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Transform playAreaPreviewTransform;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Transform[] playAreaPreviewCorners;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Transform[] playAreaPreviewSides;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float loopingAudioMaxVolume;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Coroutine hintCoroutine;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private bool originalHoverLockState;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Interactable originalHoveringInteractable;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private AllowTeleportWhileAttachedToHand allowTeleportWhileAttached;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Vector3 startingFeetOffset;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private bool movedFeetFarEnough;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private SteamVR_Events.Action chaperoneInfoInitializedAction;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SteamVR_Events.Event<float> ChangeScene;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static SteamVR_Events.Event<TeleportMarkerBase> Player;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static SteamVR_Events.Event<TeleportMarkerBase> PlayerPre;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Teleport _instance;

		[Token(Token = "0x170000A6")]
		public static Teleport instance
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x7D0470", Offset = "0x7D0470", VA = "0x7D0470")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x7D0284", Offset = "0x7D0284", VA = "0x7D0284")]
		public static SteamVR_Events.Action<float> ChangeSceneAction(UnityAction<float> action)
		{
			return null;
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x7D0328", Offset = "0x7D0328", VA = "0x7D0328")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x7D03CC", Offset = "0x7D03CC", VA = "0x7D03CC")]
		public static SteamVR_Events.Action<TeleportMarkerBase> PlayerPreAction(UnityAction<TeleportMarkerBase> action)
		{
			return null;
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x7D0598", Offset = "0x7D0598", VA = "0x7D0598")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x7D074C", Offset = "0x7D074C", VA = "0x7D074C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x7D0CDC", Offset = "0x7D0CDC", VA = "0x7D0CDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x7D18FC", Offset = "0x7D18FC", VA = "0x7D18FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x7D0B9C", Offset = "0x7D0B9C", VA = "0x7D0B9C")]
		private void CheckForSpawnPoint()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x7D1DC4", Offset = "0x7D1DC4", VA = "0x7D1DC4")]
		public void HideTeleportPointer()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x7D1E4C", Offset = "0x7D1E4C", VA = "0x7D1E4C")]
		private void Update()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x7D29A0", Offset = "0x7D29A0", VA = "0x7D29A0")]
		private void UpdatePointer()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x7D3D10", Offset = "0x7D3D10", VA = "0x7D3D10")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x7D0D14", Offset = "0x7D0D14", VA = "0x7D0D14")]
		private void OnChaperoneInfoInitialized()
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x7D0874", Offset = "0x7D0874", VA = "0x7D0874")]
		private void HidePointer()
		{
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x7D23C0", Offset = "0x7D23C0", VA = "0x7D23C0")]
		private void ShowPointer(Hand newPointerHand, Hand oldPointerHand)
		{
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x7D348C", Offset = "0x7D348C", VA = "0x7D348C")]
		private void UpdateTeleportColors()
		{
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x7D42C4", Offset = "0x7D42C4", VA = "0x7D42C4")]
		private void PlayAudioClip(AudioSource source, AudioClip clip)
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x7D43E0", Offset = "0x7D43E0", VA = "0x7D43E0")]
		private void PlayPointerHaptic(bool validLocation)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x7D2234", Offset = "0x7D2234", VA = "0x7D2234")]
		private void TryTeleportPlayer()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x7D4494", Offset = "0x7D4494", VA = "0x7D4494")]
		private void InitiateTeleportFade()
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x7D1934", Offset = "0x7D1934", VA = "0x7D1934")]
		private void TeleportPlayer()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x7D3810", Offset = "0x7D3810", VA = "0x7D3810")]
		private void HighlightSelected(TeleportMarkerBase hitTeleportMarker)
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x7D487C", Offset = "0x7D487C", VA = "0x7D487C")]
		public void ShowTeleportHint()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x7D46F0", Offset = "0x7D46F0", VA = "0x7D46F0")]
		public void CancelTeleportHint()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x7D48B8", Offset = "0x7D48B8", VA = "0x7D48B8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594EDC", Offset = "0x594EDC")]
		private IEnumerator TeleportHintCoroutine()
		{
			return null;
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x7D4954", Offset = "0x7D4954", VA = "0x7D4954")]
		public bool IsEligibleForTeleport(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x7D4238", Offset = "0x7D4238", VA = "0x7D4238")]
		private bool ShouldOverrideHoverLock()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x7D2160", Offset = "0x7D2160", VA = "0x7D2160")]
		private bool WasTeleportButtonReleased(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x7D28CC", Offset = "0x7D28CC", VA = "0x7D28CC")]
		private bool IsTeleportButtonDown(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x7D22EC", Offset = "0x7D22EC", VA = "0x7D22EC")]
		private bool WasTeleportButtonPressed(Hand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x7D4350", Offset = "0x7D4350", VA = "0x7D4350")]
		private Transform GetPointerStartTransform(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x7D4B10", Offset = "0x7D4B10", VA = "0x7D4B10")]
		public Teleport()
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class TeleportArc : MonoBehaviour
	{
		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int segmentCount;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float thickness;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592FAC", Offset = "0x592FAC")]
		public float arcDuration;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x592FE4", Offset = "0x592FE4")]
		public float segmentBreak;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59301C", Offset = "0x59301C")]
		public float arcSpeed;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int traceLayerMask;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineRenderer[] lineRenderers;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float arcTimeOffset;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float prevThickness;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int prevSegmentCount;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool showArc;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 startPos;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 projectileVelocity;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useGravity;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform arcObjectsTransfrom;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool arcInvalid;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float scale;

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x7D4FB4", Offset = "0x7D4FB4", VA = "0x7D4FB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x7D4FDC", Offset = "0x7D4FDC", VA = "0x7D4FDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x7D504C", Offset = "0x7D504C", VA = "0x7D504C")]
		private void CreateLineRendererObjects()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x7D35A4", Offset = "0x7D35A4", VA = "0x7D35A4")]
		public void SetArcData(Vector3 position, Vector3 velocity, bool gravity, bool pointerAtBadAngle)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x7D4338", Offset = "0x7D4338", VA = "0x7D4338")]
		public void Show()
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x7D4300", Offset = "0x7D4300", VA = "0x7D4300")]
		public void Hide()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x7D35F8", Offset = "0x7D35F8", VA = "0x7D35F8")]
		public bool DrawArc(out RaycastHit hitInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x7D56C4", Offset = "0x7D56C4", VA = "0x7D56C4")]
		private void DrawArcSegment(int index, float startTime, float endTime)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x7D3ABC", Offset = "0x7D3ABC", VA = "0x7D3ABC")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x7D546C", Offset = "0x7D546C", VA = "0x7D546C")]
		private float FindProjectileCollision(out RaycastHit hitInfo)
		{
			return default(float);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x7D3BA0", Offset = "0x7D3BA0", VA = "0x7D3BA0")]
		public Vector3 GetArcPositionAtTime(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x7D53E8", Offset = "0x7D53E8", VA = "0x7D53E8")]
		private void HideLineSegments(int startSegment, int endSegment)
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x7D5AA4", Offset = "0x7D5AA4", VA = "0x7D5AA4")]
		public TeleportArc()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class TeleportArea : TeleportMarkerBase
	{
		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593064", Offset = "0x593064")]
		private Bounds <meshBounds>k__BackingField;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer areaMesh;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int tintColorId;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color visibleTintColor;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color highlightedTintColor;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color lockedTintColor;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool highlighted;

		[Token(Token = "0x170000A7")]
		public Bounds meshBounds
		{
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0x7D5AD4", Offset = "0x7D5AD4", VA = "0x7D5AD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594F40", Offset = "0x594F40")]
			get
			{
				return default(Bounds);
			}
			[Token(Token = "0x6000A23")]
			[Address(RVA = "0x7D5AE8", Offset = "0x7D5AE8", VA = "0x7D5AE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x594F50", Offset = "0x594F50")]
			private set
			{
			}
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x7D5AFC", Offset = "0x7D5AFC", VA = "0x7D5AFC")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x7D5C88", Offset = "0x7D5C88", VA = "0x7D5C88")]
		public void Start()
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x7D5D58", Offset = "0x7D5D58", VA = "0x7D5D58", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x7D5D60", Offset = "0x7D5D60", VA = "0x7D5D60", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x7D5D68", Offset = "0x7D5D68", VA = "0x7D5D68", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x7D5E3C", Offset = "0x7D5E3C", VA = "0x7D5E3C", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x7D5F58", Offset = "0x7D5F58", VA = "0x7D5F58", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x7D6004", Offset = "0x7D6004", VA = "0x7D6004")]
		public void UpdateVisualsInEditor()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x7D5B70", Offset = "0x7D5B70", VA = "0x7D5B70")]
		private bool CalculateBounds()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x7D5EFC", Offset = "0x7D5EFC", VA = "0x7D5EFC")]
		private Color GetTintColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x7D60C8", Offset = "0x7D60C8", VA = "0x7D60C8")]
		public TeleportArea()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public abstract class TeleportMarkerBase : MonoBehaviour
	{
		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool locked;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool markerActive;

		[Token(Token = "0x170000A8")]
		public virtual bool showReticle
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0x7D6134", Offset = "0x7D6134", VA = "0x7D6134", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x7D613C", Offset = "0x7D613C", VA = "0x7D613C")]
		public void SetLocked(bool locked)
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x7D6150", Offset = "0x7D6150", VA = "0x7D6150", Slot = "5")]
		public virtual void TeleportPlayer(Vector3 pointedAtPosition)
		{
		}

		[Token(Token = "0x6000A32")]
		public abstract void UpdateVisuals();

		[Token(Token = "0x6000A33")]
		public abstract void Highlight(bool highlight);

		[Token(Token = "0x6000A34")]
		public abstract void SetAlpha(float tintAlpha, float alphaPercent);

		[Token(Token = "0x6000A35")]
		public abstract bool ShouldActivate(Vector3 playerPosition);

		[Token(Token = "0x6000A36")]
		public abstract bool ShouldMovePlayer();

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x7D6124", Offset = "0x7D6124", VA = "0x7D6124")]
		protected TeleportMarkerBase()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class TeleportPoint : TeleportMarkerBase
	{
		[Token(Token = "0x20003FC")]
		public enum TeleportPointType
		{
			[Token(Token = "0x400130E")]
			MoveToLocation,
			[Token(Token = "0x400130F")]
			SwitchToNewScene
		}

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TeleportPointType teleportType;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string title;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string switchToScene;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color titleVisibleColor;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color titleHighlightedColor;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color titleLockedColor;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool playerSpawnPoint;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool gotReleventComponents;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshRenderer markerMesh;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MeshRenderer switchSceneIcon;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshRenderer moveLocationIcon;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MeshRenderer lockedIcon;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MeshRenderer pointIcon;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform lookAtJointTransform;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Animation animation;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Text titleText;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Player player;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 lookAtPosition;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int tintColorID;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Color tintColor;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Color titleColor;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float fullTitleAlpha;

		[Token(Token = "0x4001018")]
		private const string switchSceneAnimation = "switch_scenes_idle";

		[Token(Token = "0x4001019")]
		private const string moveLocationAnimation = "move_location_idle";

		[Token(Token = "0x400101A")]
		private const string lockedAnimation = "locked_idle";

		[Token(Token = "0x170000A9")]
		public override bool showReticle
		{
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0x7D6154", Offset = "0x7D6154", VA = "0x7D6154", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x7D615C", Offset = "0x7D615C", VA = "0x7D615C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x7D63D0", Offset = "0x7D63D0", VA = "0x7D63D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x7D63F4", Offset = "0x7D63F4", VA = "0x7D63F4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x7D6488", Offset = "0x7D6488", VA = "0x7D6488", Slot = "9")]
		public override bool ShouldActivate(Vector3 playerPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x7D6560", Offset = "0x7D6560", VA = "0x7D6560", Slot = "10")]
		public override bool ShouldMovePlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x7D6568", Offset = "0x7D6568", VA = "0x7D6568", Slot = "7")]
		public override void Highlight(bool highlight)
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x7D6740", Offset = "0x7D6740", VA = "0x7D6740", Slot = "6")]
		public override void UpdateVisuals()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x7D68A0", Offset = "0x7D68A0", VA = "0x7D68A0", Slot = "8")]
		public override void SetAlpha(float tintAlpha, float alphaPercent)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x7D6680", Offset = "0x7D6680", VA = "0x7D6680")]
		public void SetMeshMaterials(Material material, Color textColor)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x7D4794", Offset = "0x7D4794", VA = "0x7D4794")]
		public void TeleportToScene()
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x7D6248", Offset = "0x7D6248", VA = "0x7D6248")]
		public void GetRelevantComponents()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x7D69C0", Offset = "0x7D69C0", VA = "0x7D69C0")]
		public void ReleaseRelevantComponents()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x7D69D4", Offset = "0x7D69D4", VA = "0x7D69D4")]
		public void UpdateVisualsInEditor()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x7D6C84", Offset = "0x7D6C84", VA = "0x7D6C84")]
		public TeleportPoint()
		{
		}
	}
}
namespace Valve.VR.InteractionSystem.Sample
{
	[Token(Token = "0x2000221")]
	public class BuggyBuddy : MonoBehaviour
	{
		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform turret;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float turretRot;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x593074", Offset = "0x593074")]
		public float maxAngle;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5930AC", Offset = "0x5930AC")]
		public float maxTurnTorque;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5930E4", Offset = "0x5930E4")]
		public float maxTorque;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59311C", Offset = "0x59311C")]
		public float brakeTorque;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x593154", Offset = "0x593154")]
		public GameObject[] wheelRenders;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x59318C", Offset = "0x59318C")]
		public float criticalSpeed;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5931C4", Offset = "0x5931C4")]
		public int stepsBelow;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x5931FC", Offset = "0x5931FC")]
		public int stepsAbove;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private WheelCollider[] m_Wheels;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource au_motor;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public float mvol;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource au_skid;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float svol;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public WheelDust skidsample;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float skidSpeed;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 localGravity;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Rigidbody body;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float rapidfireTime;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float shootTimer;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Vector2 steer;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public float throttle;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[HideInInspector]
		public float handBrake;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		public Transform controllerReference;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public float speed;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform centerOfMass;

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x7C6DC8", Offset = "0x7C6DC8", VA = "0x7C6DC8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x7C6EFC", Offset = "0x7C6EFC", VA = "0x7C6EFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x7C73F0", Offset = "0x7C73F0", VA = "0x7C73F0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x7C741C", Offset = "0x7C741C", VA = "0x7C741C")]
		public static float FindAngle(Vector3 fromVector, Vector3 toVector, Vector3 upVector)
		{
			return default(float);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x7C75A0", Offset = "0x7C75A0", VA = "0x7C75A0")]
		public BuggyBuddy()
		{
		}
	}
	[Token(Token = "0x2000222")]
	public class BuggyController : MonoBehaviour
	{
		[Token(Token = "0x20003FD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5905D4", Offset = "0x5905D4")]
		private sealed class <DoReset>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001310")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001311")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001312")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BuggyController <>4__this;

			[Token(Token = "0x4001313")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <endTime>5__2;

			[Token(Token = "0x17000112")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011C4")]
				[Address(RVA = "0x7C8180", Offset = "0x7C8180", VA = "0x7C8180", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000113")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011C6")]
				[Address(RVA = "0x7C81E8", Offset = "0x7C81E8", VA = "0x7C81E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x7C7C60", Offset = "0x7C7C60", VA = "0x7C7C60")]
			[DebuggerHidden]
			public <DoReset>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x7C7ED8", Offset = "0x7C7ED8", VA = "0x7C7ED8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x7C7EDC", Offset = "0x7C7EDC", VA = "0x7C7EDC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011C5")]
			[Address(RVA = "0x7C8188", Offset = "0x7C8188", VA = "0x7C8188", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003FE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5905E4", Offset = "0x5905E4")]
		private sealed class <DoBuzz>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001314")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001315")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001316")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BuggyController <>4__this;

			[Token(Token = "0x17000114")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011CA")]
				[Address(RVA = "0x7C7E68", Offset = "0x7C7E68", VA = "0x7C7E68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000115")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011CC")]
				[Address(RVA = "0x7C7ED0", Offset = "0x7C7ED0", VA = "0x7C7ED0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x7C7C8C", Offset = "0x7C7C8C", VA = "0x7C7C8C")]
			[DebuggerHidden]
			public <DoBuzz>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x60011C8")]
			[Address(RVA = "0x7C7CCC", Offset = "0x7C7CCC", VA = "0x7C7CCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011C9")]
			[Address(RVA = "0x7C7CD0", Offset = "0x7C7CD0", VA = "0x7C7CD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011CB")]
			[Address(RVA = "0x7C7E70", Offset = "0x7C7E70", VA = "0x7C7E70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform modelJoystick;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float joystickRot;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform modelTrigger;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float triggerRot;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BuggyBuddy buggy;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform buttonBrake;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform buttonReset;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Canvas ui_Canvas;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image ui_rpm;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Image ui_speed;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RectTransform ui_steer;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ui_steerangle;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 ui_fillAngles;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform resetToPoint;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "SteamVR_DefaultActionSet", RVA = "0x5932A4", Offset = "0x5932A4")]
		public SteamVR_ActionSet actionSet;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x5932E0", Offset = "0x5932E0")]
		public SteamVR_Action_Vector2 a_steering;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x593330", Offset = "0x593330")]
		public SteamVR_Action_Single a_trigger;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x593380", Offset = "0x593380")]
		public SteamVR_Action_Boolean a_brake;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x5933D0", Offset = "0x5933D0")]
		public SteamVR_Action_Boolean a_reset;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float usteer;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Interactable interactable;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion trigSRot;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion joySRot;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Coroutine resettingRoutine;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 initialScale;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float buzztimer;

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x7C75D0", Offset = "0x7C75D0", VA = "0x7C75D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x7C772C", Offset = "0x7C772C", VA = "0x7C772C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x7C7BF0", Offset = "0x7C7BF0", VA = "0x7C7BF0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594F60", Offset = "0x594F60")]
		private IEnumerator DoReset()
		{
			return null;
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x7C76BC", Offset = "0x7C76BC", VA = "0x7C76BC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x594FC4", Offset = "0x594FC4")]
		private IEnumerator DoBuzz()
		{
			return null;
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x7C7CB8", Offset = "0x7C7CB8", VA = "0x7C7CB8")]
		public BuggyController()
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class LockToPoint : MonoBehaviour
	{
		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform snapTo;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody body;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float snapTime;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float dropTimer;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Interactable interactable;

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x7CC074", Offset = "0x7CC074", VA = "0x7CC074")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x7CC0E4", Offset = "0x7CC0E4", VA = "0x7CC0E4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x7CC55C", Offset = "0x7CC55C", VA = "0x7CC55C")]
		public LockToPoint()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class WheelDust : MonoBehaviour
	{
		[Token(Token = "0x20003FF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5905F4", Offset = "0x5905F4")]
		private sealed class <emitter>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001317")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001318")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001319")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WheelDust <>4__this;

			[Token(Token = "0x17000116")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011D0")]
				[Address(RVA = "0x7CE65C", Offset = "0x7CE65C", VA = "0x7CE65C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000117")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011D2")]
				[Address(RVA = "0x7CE6C4", Offset = "0x7CE6C4", VA = "0x7CE6C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011CD")]
			[Address(RVA = "0x7CE3CC", Offset = "0x7CE3CC", VA = "0x7CE3CC")]
			[DebuggerHidden]
			public <emitter>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60011CE")]
			[Address(RVA = "0x7CE544", Offset = "0x7CE544", VA = "0x7CE544", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011CF")]
			[Address(RVA = "0x7CE548", Offset = "0x7CE548", VA = "0x7CE548", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011D1")]
			[Address(RVA = "0x7CE664", Offset = "0x7CE664", VA = "0x7CE664", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private WheelCollider col;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem p;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float EmissionMul;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float velocityMul;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxEmission;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minSlip;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float amt;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public Vector3 slip;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float emitTimer;

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x7CE128", Offset = "0x7CE128", VA = "0x7CE128")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x7CE204", Offset = "0x7CE204", VA = "0x7CE204")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x7CE194", Offset = "0x7CE194", VA = "0x7CE194")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x596028", Offset = "0x596028")]
		private IEnumerator emitter()
		{
			return null;
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x7CE3F8", Offset = "0x7CE3F8", VA = "0x7CE3F8")]
		private void DoEmit()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x7CE534", Offset = "0x7CE534", VA = "0x7CE534")]
		public WheelDust()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class trackCam : MonoBehaviour
	{
		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool negative;

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x7CE6CC", Offset = "0x7CE6CC", VA = "0x7CE6CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x7CE920", Offset = "0x7CE920", VA = "0x7CE920")]
		public trackCam()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class trackObj : MonoBehaviour
	{
		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool negative;

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x7CE928", Offset = "0x7CE928", VA = "0x7CE928")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x7CEB6C", Offset = "0x7CEB6C", VA = "0x7CEB6C")]
		public trackObj()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class JoeJeff : MonoBehaviour
	{
		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float animationSpeed;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float jumpVelocity;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_MovingTurnSpeed;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_StationaryTurnSpeed;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float airControl;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x593460", Offset = "0x593460")]
		public float frictionTime;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float footHeight;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float footRadius;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RaycastHit footHit;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool isGrounded;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float turnAmount;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float forwardAmount;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float groundedTime;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 input;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool held;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Interactable interactable;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public FireSource fire;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float jumpTimer;

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x7CAE18", Offset = "0x7CAE18", VA = "0x7CAE18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x7CAEB8", Offset = "0x7CAEB8", VA = "0x7CAEB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x7CB1C4", Offset = "0x7CB1C4", VA = "0x7CB1C4")]
		private void FixRotation()
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x7CB33C", Offset = "0x7CB33C", VA = "0x7CB33C")]
		public void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x7CB60C", Offset = "0x7CB60C", VA = "0x7CB60C")]
		public void Move(Vector3 move, bool jump)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x7CB824", Offset = "0x7CB824", VA = "0x7CB824")]
		private void UpdateAnimator(Vector3 move)
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x7CB740", Offset = "0x7CB740", VA = "0x7CB740")]
		private void ApplyExtraTurnRotation()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x7CAF9C", Offset = "0x7CAF9C", VA = "0x7CAF9C")]
		private void CheckGrounded()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x7CBA1C", Offset = "0x7CBA1C", VA = "0x7CBA1C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x7CB810", Offset = "0x7CB810", VA = "0x7CB810")]
		private void HandleGroundedMovement(bool jump)
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x7CBBA0", Offset = "0x7CBBA0", VA = "0x7CBBA0")]
		private void Jump()
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x7CBCBC", Offset = "0x7CBCBC", VA = "0x7CBCBC")]
		public JoeJeff()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class JoeJeffController : MonoBehaviour
	{
		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Joystick;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float joyMove;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "SteamVR_DefaultActionSet", RVA = "0x5934B8", Offset = "0x5934B8")]
		public SteamVR_ActionSet actionSet;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x5934F4", Offset = "0x5934F4")]
		public SteamVR_Action_Vector2 a_move;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x593544", Offset = "0x593544")]
		public SteamVR_Action_Boolean a_jump;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public JoeJeff character;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer jumpHighlight;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 movement;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool jump;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float glow;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private SteamVR_Input_Sources hand;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Interactable interactable;

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x7CBCE8", Offset = "0x7CBCE8", VA = "0x7CBCE8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x7CBD50", Offset = "0x7CBD50", VA = "0x7CBD50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x7CC060", Offset = "0x7CC060", VA = "0x7CC060")]
		public JoeJeffController()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class ProceduralHats : MonoBehaviour
	{
		[Token(Token = "0x2000400")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590604", Offset = "0x590604")]
		private sealed class <HatSwitcher>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400131A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400131B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400131C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ProceduralHats <>4__this;

			[Token(Token = "0x400131D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform <cam>5__2;

			[Token(Token = "0x17000118")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011D6")]
				[Address(RVA = "0x7CD20C", Offset = "0x7CD20C", VA = "0x7CD20C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000119")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011D8")]
				[Address(RVA = "0x7CD274", Offset = "0x7CD274", VA = "0x7CD274", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011D3")]
			[Address(RVA = "0x7CCF7C", Offset = "0x7CCF7C", VA = "0x7CCF7C")]
			[DebuggerHidden]
			public <HatSwitcher>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x60011D4")]
			[Address(RVA = "0x7CCFF0", Offset = "0x7CCFF0", VA = "0x7CCFF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011D5")]
			[Address(RVA = "0x7CCFF4", Offset = "0x7CCFF4", VA = "0x7CCFF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011D7")]
			[Address(RVA = "0x7CD214", Offset = "0x7CD214", VA = "0x7CD214", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] hats;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hatSwitchTime;

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x7CCE58", Offset = "0x7CCE58", VA = "0x7CCE58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x7CCEE0", Offset = "0x7CCEE0", VA = "0x7CCEE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x7CCF0C", Offset = "0x7CCF0C", VA = "0x7CCF0C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x59608C", Offset = "0x59608C")]
		private IEnumerator HatSwitcher()
		{
			return null;
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x7CCFA8", Offset = "0x7CCFA8", VA = "0x7CCFA8")]
		private void ChooseHat()
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x7CCE60", Offset = "0x7CCE60", VA = "0x7CCE60")]
		private void SwitchToHat(int hat)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x7CCFE8", Offset = "0x7CCFE8", VA = "0x7CCFE8")]
		public ProceduralHats()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class ButtonEffect : MonoBehaviour
	{
		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x7C81F0", Offset = "0x7C81F0", VA = "0x7C81F0")]
		public void OnButtonDown(Hand fromHand)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x7C8318", Offset = "0x7C8318", VA = "0x7C8318")]
		public void OnButtonUp(Hand fromHand)
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x7C8234", Offset = "0x7C8234", VA = "0x7C8234")]
		private void ColorSelf(Color newColor)
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x7C8340", Offset = "0x7C8340", VA = "0x7C8340")]
		public ButtonEffect()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class ControllerHintsExample : MonoBehaviour
	{
		[Token(Token = "0x2000401")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590614", Offset = "0x590614")]
		private sealed class <TestButtonHints>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400131E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400131F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001320")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4001321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <actionIndex>5__2;

			[Token(Token = "0x4001322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private SteamVR_Action_In <action>5__3;

			[Token(Token = "0x1700011A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011DC")]
				[Address(RVA = "0x7C88C8", Offset = "0x7C88C8", VA = "0x7C88C8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011DE")]
				[Address(RVA = "0x7C8930", Offset = "0x7C8930", VA = "0x7C8930", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011D9")]
			[Address(RVA = "0x7C8590", Offset = "0x7C8590", VA = "0x7C8590")]
			[DebuggerHidden]
			public <TestButtonHints>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60011DA")]
			[Address(RVA = "0x7C85F0", Offset = "0x7C85F0", VA = "0x7C85F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011DB")]
			[Address(RVA = "0x7C85F4", Offset = "0x7C85F4", VA = "0x7C85F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x7C88D0", Offset = "0x7C88D0", VA = "0x7C88D0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000402")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590624", Offset = "0x590624")]
		private sealed class <TestTextHints>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001324")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001325")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Hand hand;

			[Token(Token = "0x4001326")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <actionIndex>5__2;

			[Token(Token = "0x4001327")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private SteamVR_Action_In <action>5__3;

			[Token(Token = "0x1700011C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011E2")]
				[Address(RVA = "0x7C8B94", Offset = "0x7C8B94", VA = "0x7C8B94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011E4")]
				[Address(RVA = "0x7C8BFC", Offset = "0x7C8BFC", VA = "0x7C8BFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011DF")]
			[Address(RVA = "0x7C85BC", Offset = "0x7C85BC", VA = "0x7C85BC")]
			[DebuggerHidden]
			public <TestTextHints>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x60011E0")]
			[Address(RVA = "0x7C8938", Offset = "0x7C8938", VA = "0x7C8938", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011E1")]
			[Address(RVA = "0x7C893C", Offset = "0x7C893C", VA = "0x7C893C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x7C8B9C", Offset = "0x7C8B9C", VA = "0x7C8B9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine buttonHintCoroutine;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine textHintCoroutine;

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x7C8348", Offset = "0x7C8348", VA = "0x7C8348")]
		public void ShowButtonHints(Hand hand)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x7C840C", Offset = "0x7C840C", VA = "0x7C840C")]
		public void ShowTextHints(Hand hand)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x7C84D0", Offset = "0x7C84D0", VA = "0x7C84D0")]
		public void DisableHints()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x7C839C", Offset = "0x7C839C", VA = "0x7C839C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5960F0", Offset = "0x5960F0")]
		private IEnumerator TestButtonHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x7C8460", Offset = "0x7C8460", VA = "0x7C8460")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x596154", Offset = "0x596154")]
		private IEnumerator TestTextHints(Hand hand)
		{
			return null;
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x7C85E8", Offset = "0x7C85E8", VA = "0x7C85E8")]
		public ControllerHintsExample()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class CustomSkeletonHelper : MonoBehaviour
	{
		[Token(Token = "0x2000403")]
		public enum MirrorType
		{
			[Token(Token = "0x4001329")]
			None,
			[Token(Token = "0x400132A")]
			LeftToRight,
			[Token(Token = "0x400132B")]
			RightToLeft
		}

		[Serializable]
		[Token(Token = "0x2000404")]
		public class Retargetable
		{
			[Token(Token = "0x400132C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform source;

			[Token(Token = "0x400132D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform destination;

			[Token(Token = "0x60011E5")]
			[Address(RVA = "0x7C8E94", Offset = "0x7C8E94", VA = "0x7C8E94")]
			public Retargetable(Transform source, Transform destination)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000405")]
		public class Thumb
		{
			[Token(Token = "0x400132E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Retargetable metacarpal;

			[Token(Token = "0x400132F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Retargetable middle;

			[Token(Token = "0x4001330")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Retargetable distal;

			[Token(Token = "0x4001331")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform aux;

			[Token(Token = "0x60011E6")]
			[Address(RVA = "0x7C8ECC", Offset = "0x7C8ECC", VA = "0x7C8ECC")]
			public Thumb(Retargetable metacarpal, Retargetable middle, Retargetable distal, Transform aux)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000406")]
		public class Finger
		{
			[Token(Token = "0x4001332")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Retargetable metacarpal;

			[Token(Token = "0x4001333")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Retargetable proximal;

			[Token(Token = "0x4001334")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Retargetable middle;

			[Token(Token = "0x4001335")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Retargetable distal;

			[Token(Token = "0x4001336")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform aux;

			[Token(Token = "0x60011E7")]
			[Address(RVA = "0x7C8E40", Offset = "0x7C8E40", VA = "0x7C8E40")]
			public Finger(Retargetable metacarpal, Retargetable proximal, Retargetable middle, Retargetable distal, Transform aux)
			{
			}
		}

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Retargetable wrist;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Finger[] fingers;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Thumb[] thumbs;

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x7C8C04", Offset = "0x7C8C04", VA = "0x7C8C04")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x7C8E38", Offset = "0x7C8E38", VA = "0x7C8E38")]
		public CustomSkeletonHelper()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class FloppyHand : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000407")]
		public class Finger
		{
			[Token(Token = "0x2000414")]
			public enum eulerAxis
			{
				[Token(Token = "0x4001374")]
				X,
				[Token(Token = "0x4001375")]
				Y,
				[Token(Token = "0x4001376")]
				Z
			}

			[Token(Token = "0x4001337")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float mass;

			[Token(Token = "0x4001338")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x593744", Offset = "0x593744")]
			public float pos;

			[Token(Token = "0x4001339")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 forwardAxis;

			[Token(Token = "0x400133A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SkinnedMeshRenderer renderer;

			[Token(Token = "0x400133B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[HideInInspector]
			public SteamVR_Action_Single squeezyAction;

			[Token(Token = "0x400133C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public SteamVR_Input_Sources inputSource;

			[Token(Token = "0x400133D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Transform[] bones;

			[Token(Token = "0x400133E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform referenceBone;

			[Token(Token = "0x400133F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector2 referenceAngles;

			[Token(Token = "0x4001340")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public eulerAxis referenceAxis;

			[Token(Token = "0x4001341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[HideInInspector]
			public float flexAngle;

			[Token(Token = "0x4001342")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3[] rotation;

			[Token(Token = "0x4001343")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3[] velocity;

			[Token(Token = "0x4001344")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private Transform[] boneTips;

			[Token(Token = "0x4001345")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Vector3[] oldTipPosition;

			[Token(Token = "0x4001346")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private Vector3[] oldTipDelta;

			[Token(Token = "0x4001347")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private Vector3[,] inertiaSmoothing;

			[Token(Token = "0x4001348")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private float squeezySmooth;

			[Token(Token = "0x4001349")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private int inertiaSteps;

			[Token(Token = "0x400134A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private float k;

			[Token(Token = "0x400134B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float damping;

			[Token(Token = "0x400134C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Quaternion[] startRot;

			[Token(Token = "0x60011E8")]
			[Address(RVA = "0x7C92D0", Offset = "0x7C92D0", VA = "0x7C92D0")]
			public void ApplyForce(Vector3 worldForce)
			{
			}

			[Token(Token = "0x60011E9")]
			[Address(RVA = "0x7C8FF4", Offset = "0x7C8FF4", VA = "0x7C8FF4")]
			public void Init()
			{
			}

			[Token(Token = "0x60011EA")]
			[Address(RVA = "0x7C9414", Offset = "0x7C9414", VA = "0x7C9414")]
			public void UpdateFinger(float deltaTime)
			{
			}

			[Token(Token = "0x60011EB")]
			[Address(RVA = "0x7C9F6C", Offset = "0x7C9F6C", VA = "0x7C9F6C")]
			public void ApplyTransforms()
			{
			}

			[Token(Token = "0x60011EC")]
			[Address(RVA = "0x7CA1B8", Offset = "0x7CA1B8", VA = "0x7CA1B8")]
			private Vector3 FixVector(Vector3 ang)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60011ED")]
			[Address(RVA = "0x7CA07C", Offset = "0x7CA07C", VA = "0x7CA07C")]
			private float FixAngle(float ang)
			{
				return default(float);
			}

			[Token(Token = "0x60011EE")]
			[Address(RVA = "0x7CA09C", Offset = "0x7CA09C", VA = "0x7CA09C")]
			private Vector3 PowVector(Vector3 vector, float power)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60011EF")]
			[Address(RVA = "0x7CA220", Offset = "0x7CA220", VA = "0x7CA220")]
			public Finger()
			{
			}
		}

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected float fingerFlexAngle;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "SteamVR_DefaultAction", RVA = "0x593594", Offset = "0x593594")]
		public SteamVR_Action_Single squeezyAction;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteamVR_Input_Sources inputSource;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Finger[] fingers;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 constforce;

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x7C8F18", Offset = "0x7C8F18", VA = "0x7C8F18")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x7C920C", Offset = "0x7C920C", VA = "0x7C920C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x7CA06C", Offset = "0x7CA06C", VA = "0x7CA06C")]
		public FloppyHand()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class FlowerPlanted : MonoBehaviour
	{
		[Token(Token = "0x2000408")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590634", Offset = "0x590634")]
		private sealed class <DoPlant>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400134D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400134E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400134F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FlowerPlanted <>4__this;

			[Token(Token = "0x4001350")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <planting>5__2;

			[Token(Token = "0x4001351")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Rigidbody <rigidbody>5__3;

			[Token(Token = "0x4001352")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3 <initialScale>5__4;

			[Token(Token = "0x4001353")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 <targetScale>5__5;

			[Token(Token = "0x4001354")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <startTime>5__6;

			[Token(Token = "0x4001355")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <overTime>5__7;

			[Token(Token = "0x4001356")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <endTime>5__8;

			[Token(Token = "0x1700011E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011F3")]
				[Address(RVA = "0x7CA830", Offset = "0x7CA830", VA = "0x7CA830", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011F5")]
				[Address(RVA = "0x7CA898", Offset = "0x7CA898", VA = "0x7CA898", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011F0")]
			[Address(RVA = "0x7CA304", Offset = "0x7CA304", VA = "0x7CA304")]
			[DebuggerHidden]
			public <DoPlant>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x60011F1")]
			[Address(RVA = "0x7CA338", Offset = "0x7CA338", VA = "0x7CA338", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011F2")]
			[Address(RVA = "0x7CA33C", Offset = "0x7CA33C", VA = "0x7CA33C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x7CA838", Offset = "0x7CA838", VA = "0x7CA838", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x7CA23C", Offset = "0x7CA23C", VA = "0x7CA23C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x7CA268", Offset = "0x7CA268", VA = "0x7CA268")]
		public void Plant()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x7CA294", Offset = "0x7CA294", VA = "0x7CA294")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x5961B8", Offset = "0x5961B8")]
		private IEnumerator DoPlant()
		{
			return null;
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x7CA330", Offset = "0x7CA330", VA = "0x7CA330")]
		public FlowerPlanted()
		{
		}
	}
	[Token(Token = "0x200022F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E7E4", Offset = "0x58E7E4")]
	public class InteractableExample : MonoBehaviour
	{
		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMesh textMesh;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 oldPosition;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion oldRotation;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float attachTime;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Hand.AttachmentFlags attachmentFlags;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Interactable interactable;

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x7CA8A0", Offset = "0x7CA8A0", VA = "0x7CA8A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x7CA92C", Offset = "0x7CA92C", VA = "0x7CA92C")]
		private void OnHandHoverBegin(Hand hand)
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x7CA9BC", Offset = "0x7CA9BC", VA = "0x7CA9BC")]
		private void OnHandHoverEnd(Hand hand)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x7CAA18", Offset = "0x7CAA18", VA = "0x7CAA18")]
		private void HandHoverUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x7CABF8", Offset = "0x7CABF8", VA = "0x7CABF8")]
		private void OnAttachedToHand(Hand hand)
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x7CAC98", Offset = "0x7CAC98", VA = "0x7CAC98")]
		private void OnDetachedFromHand(Hand hand)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x7CAD28", Offset = "0x7CAD28", VA = "0x7CAD28")]
		private void HandAttachedUpdate(Hand hand)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x7CAE00", Offset = "0x7CAE00", VA = "0x7CAE00")]
		private void OnHandFocusAcquired(Hand hand)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x7CAE04", Offset = "0x7CAE04", VA = "0x7CAE04")]
		private void OnHandFocusLost(Hand hand)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x7CAE08", Offset = "0x7CAE08", VA = "0x7CAE08")]
		public InteractableExample()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class Planting : MonoBehaviour
	{
		[Token(Token = "0x2000409")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x590644", Offset = "0x590644")]
		private sealed class <DoPlant>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001359")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Planting <>4__this;

			[Token(Token = "0x400135A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <planting>5__2;

			[Token(Token = "0x400135B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Rigidbody <rigidbody>5__3;

			[Token(Token = "0x400135C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3 <initialScale>5__4;

			[Token(Token = "0x400135D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 <targetScale>5__5;

			[Token(Token = "0x400135E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <startTime>5__6;

			[Token(Token = "0x400135F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <overTime>5__7;

			[Token(Token = "0x4001360")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <endTime>5__8;

			[Token(Token = "0x17000120")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011F9")]
				[Address(RVA = "0x7CCDE8", Offset = "0x7CCDE8", VA = "0x7CCDE8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000121")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011FB")]
				[Address(RVA = "0x7CCE50", Offset = "0x7CCE50", VA = "0x7CCE50", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011F6")]
			[Address(RVA = "0x7CC8B0", Offset = "0x7CC8B0", VA = "0x7CC8B0")]
			[DebuggerHidden]
			public <DoPlant>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60011F7")]
			[Address(RVA = "0x7CC8E4", Offset = "0x7CC8E4", VA = "0x7CC8E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011F8")]
			[Address(RVA = "0x7CC8E8", Offset = "0x7CC8E8", VA = "0x7CC8E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011FA")]
			[Address(RVA = "0x7CCDF0", Offset = "0x7CCDF0", VA = "0x7CCDF0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SteamVR_Action_Boolean plantAction;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Hand hand;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject prefabToPlant;

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x7CC56C", Offset = "0x7CC56C", VA = "0x7CC56C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x7CC6CC", Offset = "0x7CC6CC", VA = "0x7CC6CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x7CC7B4", Offset = "0x7CC7B4", VA = "0x7CC7B4")]
		private void OnPlantActionChange(SteamVR_Action_In actionIn)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x7CC814", Offset = "0x7CC814", VA = "0x7CC814")]
		public void Plant()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x7CC840", Offset = "0x7CC840", VA = "0x7CC840")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x59621C", Offset = "0x59621C")]
		private IEnumerator DoPlant()
		{
			return null;
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x7CC8DC", Offset = "0x7CC8DC", VA = "0x7CC8DC")]
		public Planting()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class RenderModelHolder : MonoBehaviour
	{
		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject leftPrefab;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject rightPrefab;

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x7CD27C", Offset = "0x7CD27C", VA = "0x7CD27C")]
		public RenderModelHolder()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class SkeletonUIOptions : MonoBehaviour
	{
		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x7CD284", Offset = "0x7CD284", VA = "0x7CD284")]
		public void AnimateHandWithController()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x7CD384", Offset = "0x7CD384", VA = "0x7CD384")]
		public void AnimateHandWithoutController()
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x7CD484", Offset = "0x7CD484", VA = "0x7CD484")]
		public void ShowController()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x7CD570", Offset = "0x7CD570", VA = "0x7CD570")]
		public void SetRenderModel(RenderModelHolder prefabs)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x7CD690", Offset = "0x7CD690", VA = "0x7CD690")]
		public void HideController()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x7CD77C", Offset = "0x7CD77C", VA = "0x7CD77C")]
		public SkeletonUIOptions()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class TargetHitEffect : MonoBehaviour
	{
		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider targetCollider;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject spawnObjectOnCollision;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool colorSpawnedObject;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool destroyOnTargetCollision;

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x7CD784", Offset = "0x7CD784", VA = "0x7CD784")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x7CDDC8", Offset = "0x7CDDC8", VA = "0x7CDDC8")]
		public TargetHitEffect()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class TargetMeasurement : MonoBehaviour
	{
		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject visualWrapper;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform measurementTape;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform endPoint;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text measurementTextM;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text measurementTextFT;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxDistanceToDraw;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool drawTape;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastDistance;

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x7CDDD8", Offset = "0x7CDDD8", VA = "0x7CDDD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x7CE118", Offset = "0x7CE118", VA = "0x7CE118")]
		public TargetMeasurement()
		{
		}
	}
}
namespace Assets.Scripts.Common
{
	[Token(Token = "0x2000235")]
	public abstract class Singleton<T> where T : new()
	{
		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object _lockobject;

		[Token(Token = "0x170000AA")]
		public static T Instance
		{
			[Token(Token = "0x6000AA0")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6000AA1")]
		public virtual void Init()
		{
		}

		[Token(Token = "0x6000AA2")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public abstract class MonoSingleton<T> : MonoBehaviour where T : MonoSingleton<T>
	{
		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly object _lockObject;

		[Token(Token = "0x170000AB")]
		public static T Instance
		{
			[Token(Token = "0x6000AA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA5")]
		public virtual void SetDontDestroyOnLoad(Transform parent)
		{
		}

		[Token(Token = "0x6000AA6")]
		protected MonoSingleton()
		{
		}
	}
}
namespace VRStandardAssets.Utils
{
	[Token(Token = "0x2000237")]
	public class VRFPSCounter : MonoBehaviour
	{
		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_DeltaTime;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMesh m_Text;

		[Token(Token = "0x40010AC")]
		private const float updateInterval = 0.5f;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int framesCount;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float framesTime;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color goodColor;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color warnColor;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color badColor;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int targetFPS;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool displayFPS;

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x6FFBA8", Offset = "0x6FFBA8", VA = "0x6FFBA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x6FFC00", Offset = "0x6FFC00", VA = "0x6FFC00")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x6FFDD0", Offset = "0x6FFDD0", VA = "0x6FFDD0")]
		public VRFPSCounter()
		{
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x2000238")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x58E848", Offset = "0x58E848")]
	public class DOTweenAnimation : ABSAnimationComponent
	{
		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float delay;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float duration;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Ease easeType;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve easeCurve;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LoopType loopType;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int loops;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string id;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool isRelative;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		public bool isFrom;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		public bool isIndependentUpdate;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		public bool autoKill;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool isActive;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		public bool isValid;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Component target;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public DOTweenAnimationType animationType;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool autoPlay;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float endValueFloat;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 endValueV3;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color endValueColor;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string endValueString;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Rect endValueRect;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool optionalBool0;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float optionalFloat0;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int optionalInt0;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public RotateMode optionalRotationMode;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public ScrambleMode optionalScrambleMode;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public string optionalString;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int _playCount;

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x1017BA4", Offset = "0x1017BA4", VA = "0x1017BA4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x1018FDC", Offset = "0x1018FDC", VA = "0x1018FDC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x1017BBC", Offset = "0x1017BBC", VA = "0x1017BBC")]
		public void CreateTween()
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x10190C8", Offset = "0x10190C8", VA = "0x10190C8", Slot = "4")]
		public override void DOPlay()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x1019144", Offset = "0x1019144", VA = "0x1019144", Slot = "5")]
		public override void DOPlayBackwards()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x10191C0", Offset = "0x10191C0", VA = "0x10191C0", Slot = "6")]
		public override void DOPlayForward()
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x101923C", Offset = "0x101923C", VA = "0x101923C", Slot = "7")]
		public override void DOPause()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x10192B8", Offset = "0x10192B8", VA = "0x10192B8", Slot = "8")]
		public override void DOTogglePause()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x1019334", Offset = "0x1019334", VA = "0x1019334", Slot = "9")]
		public override void DORewind()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x1019430", Offset = "0x1019430", VA = "0x1019430", Slot = "10")]
		public override void DORestart(bool fromHere = false)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x10196C8", Offset = "0x10196C8", VA = "0x10196C8", Slot = "11")]
		public override void DOComplete()
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1019748", Offset = "0x1019748", VA = "0x1019748", Slot = "12")]
		public override void DOKill()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x10197D0", Offset = "0x10197D0", VA = "0x10197D0")]
		public void DOPlayById(string id)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x101985C", Offset = "0x101985C", VA = "0x101985C")]
		public void DOPlayAllById(string id)
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x10198C4", Offset = "0x10198C4", VA = "0x10198C4")]
		public void DOPlayNext()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x10199F8", Offset = "0x10199F8", VA = "0x10199F8")]
		public void DORewindAndPlayNext()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x1019A88", Offset = "0x1019A88", VA = "0x1019A88")]
		public void DORestartById(string id)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x1019B20", Offset = "0x1019B20", VA = "0x1019B20")]
		public void DORestartAllById(string id)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x1019BA0", Offset = "0x1019BA0", VA = "0x1019BA0")]
		public List<Tween> GetTweens()
		{
			return null;
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x1019524", Offset = "0x1019524", VA = "0x1019524")]
		private void ReEvaluateRelativeTween()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x1019C20", Offset = "0x1019C20", VA = "0x1019C20")]
		public DOTweenAnimation()
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x1019DF0", Offset = "0x1019DF0", VA = "0x1019DF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x596280", Offset = "0x596280")]
		private void <CreateTween>b__30_0()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public static class DOTweenAnimationExtensions
	{
		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x1019018", Offset = "0x1019018", VA = "0x1019018")]
		public static bool IsSameOrSubclassOf(this Type t, Type tBase)
		{
			return default(bool);
		}
	}
}
namespace LPWAsset
{
	[Token(Token = "0x200023A")]
	[ExecuteInEditMode]
	public class LowPolyWaterScript : MonoBehaviour
	{
		[Token(Token = "0x200040A")]
		public enum GridType
		{
			[Token(Token = "0x4001362")]
			Hexagonal,
			[Token(Token = "0x4001363")]
			Square,
			[Token(Token = "0x4001364")]
			HexagonalLOD,
			[Token(Token = "0x4001365")]
			Custom
		}

		[Token(Token = "0x200040B")]
		public enum GridTypeLite
		{
			[Token(Token = "0x4001367")]
			Hexagonal,
			[Token(Token = "0x4001368")]
			Square
		}

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridType gridType;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5935D0", Offset = "0x5935D0")]
		public float LOD;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5935E8", Offset = "0x5935E8")]
		public float LODPower;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Mesh customMesh;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Light sun;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int sizeX;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int sizeZ;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x593600", Offset = "0x593600")]
		public float noise;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool enableReflection;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool enableRefraction;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LPWReflectionParams reflection;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool receiveShadows;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool enableDisplace;

		[Token(Token = "0x40010DE")]
		private const int maxVerts = 65535;

		[Token(Token = "0x40010DF")]
		private const float sin60 = 0.8660254f;

		[Token(Token = "0x40010E0")]
		private const float inv_tan60 = 0.57735026f;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool hideChildObjects_;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[HideInInspector]
		public float waveScale;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public GridTypeLite gridTypeLite;

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x7F2C30", Offset = "0x7F2C30", VA = "0x7F2C30")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x7F2ED4", Offset = "0x7F2ED4", VA = "0x7F2ED4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x7F31A0", Offset = "0x7F31A0", VA = "0x7F31A0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x7F32D8", Offset = "0x7F32D8", VA = "0x7F32D8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x7F31E8", Offset = "0x7F31E8", VA = "0x7F31E8")]
		private void CleanUp()
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x7F32DC", Offset = "0x7F32DC", VA = "0x7F32DC")]
		private void Destroy_(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x7F2D68", Offset = "0x7F2D68", VA = "0x7F2D68")]
		public void Generate()
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x7F48E4", Offset = "0x7F48E4", VA = "0x7F48E4")]
		private float Encode(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x7F3C84", Offset = "0x7F3C84", VA = "0x7F3C84")]
		private void BakeCustomMesh(Mesh originalMesh, float rotation = 0f)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x7F4A6C", Offset = "0x7F4A6C", VA = "0x7F4A6C")]
		private void BakeMesh(List<Vector3> verts, List<int> inds, float rotation = 0f)
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x7F56C8", Offset = "0x7F56C8", VA = "0x7F56C8")]
		private void BakeUVs(List<Vector3> verts, List<MeshFilter> mfs)
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x7F52B4", Offset = "0x7F52B4", VA = "0x7F52B4")]
		private void BakeUVsV4(List<Vector3> verts, List<MeshFilter> mfs)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x7F5A50", Offset = "0x7F5A50", VA = "0x7F5A50")]
		private Vector3 ApplyLOD(Vector3 v, float dist)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x7F5BA0", Offset = "0x7F5BA0", VA = "0x7F5BA0")]
		private Vector3 AddNoise(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x7F5D30", Offset = "0x7F5D30", VA = "0x7F5D30")]
		private void Add(List<Vector3> verts, Vector3 toAdd, float delta)
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x7F37DC", Offset = "0x7F37DC", VA = "0x7F37DC")]
		private void GenerateSquare()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x7F337C", Offset = "0x7F337C", VA = "0x7F337C")]
		private void GenerateHexagonal()
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x7F5E30", Offset = "0x7F5E30", VA = "0x7F5E30")]
		public LowPolyWaterScript()
		{
		}
	}
	[Token(Token = "0x200023B")]
	[ExecuteInEditMode]
	public class LPWDepthEffect : MonoBehaviour
	{
		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Camera, Camera> depthCams;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<Camera, float> camState;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static RenderTexture depthTex;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Shader depthShader;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool receiveShadows;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static bool recursiveGuard;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private static bool hideObjects;

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x7EE400", Offset = "0x7EE400", VA = "0x7EE400")]
		public void Init(bool receiveShadows)
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x7EE40C", Offset = "0x7EE40C", VA = "0x7EE40C")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x7EF030", Offset = "0x7EF030", VA = "0x7EF030")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x7EF244", Offset = "0x7EF244", VA = "0x7EF244")]
		public void Destroy_(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x7EF2E4", Offset = "0x7EF2E4", VA = "0x7EF2E4")]
		public LPWDepthEffect()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public static class Displacement
	{
		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float _Scale_;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float _TexSize_;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float _Stretch;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static float _Length;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static float _Height_;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static float _RHeight_;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector4 _Direction_;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Texture2D _NoiseTex;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static bool wavesHQ;

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x7EDA60", Offset = "0x7EDA60", VA = "0x7EDA60")]
		public static float Get(Vector3 position, Material waterMaterial)
		{
			return default(float);
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x7EDDEC", Offset = "0x7EDDEC", VA = "0x7EDDEC")]
		private static float noise(Vector2 x)
		{
			return default(float);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x7EE1AC", Offset = "0x7EE1AC", VA = "0x7EE1AC")]
		private static float noiseLQ(Vector2 uv)
		{
			return default(float);
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x7EDCF8", Offset = "0x7EDCF8", VA = "0x7EDCF8")]
		private static void gerstner(ref Vector3 p, float phase)
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x7EE2A4", Offset = "0x7EE2A4", VA = "0x7EE2A4")]
		private static float ripple(Vector2 p, float phase)
		{
			return default(float);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x7EE100", Offset = "0x7EE100", VA = "0x7EE100")]
		private static float hash(float n)
		{
			return default(float);
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x7EE394", Offset = "0x7EE394", VA = "0x7EE394")]
		private static float frac(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x7EE074", Offset = "0x7EE074", VA = "0x7EE074")]
		private static Vector2 frac(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x7EE3CC", Offset = "0x7EE3CC", VA = "0x7EE3CC")]
		private static float floor(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x7EDFF0", Offset = "0x7EDFF0", VA = "0x7EDFF0")]
		private static Vector2 floor(Vector2 v)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x200023D")]
	public static class LPWNoise
	{
		[Token(Token = "0x40010F4")]
		private const int factorX = 1619;

		[Token(Token = "0x40010F5")]
		private const int factorY = 31337;

		[Token(Token = "0x40010F6")]
		private const int factorZ = 6971;

		[Token(Token = "0x40010F7")]
		private const int factorSeed = 1013;

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x7EF3AC", Offset = "0x7EF3AC", VA = "0x7EF3AC")]
		public static float GetValue(float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x7EF574", Offset = "0x7EF574", VA = "0x7EF574")]
		public static float Hash(int x, int z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200023E")]
	public class LPWNormalSolver
	{
		[Token(Token = "0x200040C")]
		private struct LPWPointDataEntry
		{
			[Token(Token = "0x4001369")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int triIdx;

			[Token(Token = "0x400136A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int vertIdx;

			[Token(Token = "0x60011FC")]
			[Address(RVA = "0x7F037C", Offset = "0x7F037C", VA = "0x7F037C")]
			public LPWPointDataEntry(int triIdx, int vertIdx)
			{
			}
		}

		[Token(Token = "0x200040D")]
		private struct LPWPoint
		{
			[Token(Token = "0x400136B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int idx;

			[Token(Token = "0x400136C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int count;

			[Token(Token = "0x60011FD")]
			[Address(RVA = "0x7F0384", Offset = "0x7F0384", VA = "0x7F0384")]
			public LPWPoint(int idx, int count)
			{
			}
		}

		[Token(Token = "0x200040E")]
		private struct LPWPair : IEquatable<LPWPair>
		{
			[Token(Token = "0x400136D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int x;

			[Token(Token = "0x400136E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int y;

			[Token(Token = "0x60011FE")]
			[Address(RVA = "0x7F038C", Offset = "0x7F038C", VA = "0x7F038C")]
			public LPWPair(int i, int j)
			{
			}

			[Token(Token = "0x60011FF")]
			[Address(RVA = "0x7F0394", Offset = "0x7F0394", VA = "0x7F0394", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6001200")]
			[Address(RVA = "0x7F03CC", Offset = "0x7F03CC", VA = "0x7F03CC", Slot = "4")]
			public bool Equals(LPWPair p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x200040F")]
		private struct LPWPosition : IEquatable<LPWPosition>
		{
			[Token(Token = "0x400136F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly long _x;

			[Token(Token = "0x4001370")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly long _y;

			[Token(Token = "0x4001371")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly long _z;

			[Token(Token = "0x4001372")]
			private const int Tolerance = 100000;

			[Token(Token = "0x6001201")]
			[Address(RVA = "0x7F0138", Offset = "0x7F0138", VA = "0x7F0138")]
			public LPWPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6001202")]
			[Address(RVA = "0x7F0414", Offset = "0x7F0414", VA = "0x7F0414", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x6001203")]
			[Address(RVA = "0x7F0464", Offset = "0x7F0464", VA = "0x7F0464", Slot = "4")]
			public bool Equals(LPWPosition key)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vector3> triNormals;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<LPWPointDataEntry> pointData;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<LPWPoint> points;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<LPWPosition, int> pointsDict;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, int> toMerge;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, int> idxDict;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Vector3> newVerts;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Vector3> newNormals;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Color32> newColors;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> newTris;

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x7EF5D0", Offset = "0x7EF5D0", VA = "0x7EF5D0")]
		public LPWNormalSolver()
		{
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x7EF6BC", Offset = "0x7EF6BC", VA = "0x7EF6BC")]
		public void Recalculate(List<Vector3> normals, List<Vector3> vertices, List<int> triangles)
		{
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x7F002C", Offset = "0x7F002C", VA = "0x7F002C")]
		private bool EqualApprox(Vector3 a, Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x7EFEE8", Offset = "0x7EFEE8", VA = "0x7EFEE8")]
		private void AddData(Vector3 v, int triIdx, int vertIdx)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x7EFD58", Offset = "0x7EFD58", VA = "0x7EFD58")]
		private void AddPoint(Vector3 v)
		{
		}
	}
	[Token(Token = "0x200023F")]
	[Flags]
	public enum WaterMode
	{
		[Token(Token = "0x4001103")]
		Simple = 0,
		[Token(Token = "0x4001104")]
		Reflective = 1,
		[Token(Token = "0x4001105")]
		Refractive = 2
	}
	[Serializable]
	[Token(Token = "0x2000240")]
	public class LPWReflectionParams
	{
		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool disablePixelLights;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int textureSize;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float clipPlaneOffset;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask reflectLayers;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayerMask refractLayers;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal WaterMode waterMode;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal Dictionary<Camera, Camera> reflCams;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal Dictionary<Camera, Camera> refrCams;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal RenderTexture reflTex;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal RenderTexture refrTex;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal WaterMode hwSupport;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal int oldReflTexSize;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal int oldRefrTexSize;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal Dictionary<Camera, float> camState;

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x7F2B30", Offset = "0x7F2B30", VA = "0x7F2B30")]
		public LPWReflectionParams()
		{
		}
	}
	[Token(Token = "0x2000241")]
	[ExecuteInEditMode]
	public class LPWReflection : MonoBehaviour
	{
		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LPWReflectionParams p;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool recursiveGuard;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private static bool hideObjects;

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x7F04A0", Offset = "0x7F04A0", VA = "0x7F04A0")]
		public void Init(LPWReflectionParams params_, bool enableReflection, bool enableRefraction)
		{
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x7F059C", Offset = "0x7F059C", VA = "0x7F059C")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x7F2614", Offset = "0x7F2614", VA = "0x7F2614")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x7F2A28", Offset = "0x7F2A28", VA = "0x7F2A28")]
		public void Destroy_(UnityEngine.Object o)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x7F1E3C", Offset = "0x7F1E3C", VA = "0x7F1E3C")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x7F1104", Offset = "0x7F1104", VA = "0x7F1104")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x7F1030", Offset = "0x7F1030", VA = "0x7F1030")]
		private WaterMode GetWaterMode()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x7F0F40", Offset = "0x7F0F40", VA = "0x7F0F40")]
		private WaterMode FindHardwareWaterSupport()
		{
			return default(WaterMode);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x7F2404", Offset = "0x7F2404", VA = "0x7F2404")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x7F2160", Offset = "0x7F2160", VA = "0x7F2160")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x7F2AC8", Offset = "0x7F2AC8", VA = "0x7F2AC8")]
		public LPWReflection()
		{
		}
	}
}
namespace LowPolyWaterv2Demo
{
	[Token(Token = "0x2000242")]
	public class DemoFreeFlyCamera : MonoBehaviour
	{
		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool lockCursor;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float cameraSensitivity;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float normalMoveSpeed;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float smoothTime;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float rotationX;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float rotationY;

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x7FA5CC", Offset = "0x7FA5CC", VA = "0x7FA5CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x7FA5FC", Offset = "0x7FA5FC", VA = "0x7FA5FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x7FAB74", Offset = "0x7FAB74", VA = "0x7FAB74")]
		public DemoFreeFlyCamera()
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems
{
	[Token(Token = "0x2000243")]
	public class ParticleSystems : MonoBehaviour
	{
		[Token(Token = "0x2000410")]
		public delegate void onParticleSystemsDeadEventHandler();

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x593638", Offset = "0x593638")]
		private ParticleSystem[] <particleSystems>k__BackingField;

		[Token(Token = "0x170000AC")]
		public ParticleSystem[] particleSystems
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0x7FB48C", Offset = "0x7FB48C", VA = "0x7FB48C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5962A0", Offset = "0x5962A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0x7FB494", Offset = "0x7FB494", VA = "0x7FB494")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5962B0", Offset = "0x5962B0")]
			set
			{
			}
		}

		[Token(Token = "0x14000013")]
		public event onParticleSystemsDeadEventHandler onParticleSystemsDeadEvent
		{
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0x7FB49C", Offset = "0x7FB49C", VA = "0x7FB49C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5962C0", Offset = "0x5962C0")]
			add
			{
			}
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0x7FB540", Offset = "0x7FB540", VA = "0x7FB540")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x5962D0", Offset = "0x5962D0")]
			remove
			{
			}
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x7FB5E4", Offset = "0x7FB5E4", VA = "0x7FB5E4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x7FB63C", Offset = "0x7FB63C", VA = "0x7FB63C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x7FB640", Offset = "0x7FB640", VA = "0x7FB640", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x7FB644", Offset = "0x7FB644", VA = "0x7FB644", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x7FB98C", Offset = "0x7FB98C", VA = "0x7FB98C")]
		public void reset()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x7FB9FC", Offset = "0x7FB9FC", VA = "0x7FB9FC")]
		public void play()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x7FBA6C", Offset = "0x7FBA6C", VA = "0x7FBA6C")]
		public void pause()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x7FBADC", Offset = "0x7FBADC", VA = "0x7FBADC")]
		public void stop()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x7FBB4C", Offset = "0x7FBB4C", VA = "0x7FBB4C")]
		public void clear()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x7FBBBC", Offset = "0x7FBBBC", VA = "0x7FBBBC")]
		public void setLoop(bool loop)
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x7FBC4C", Offset = "0x7FBC4C", VA = "0x7FBC4C")]
		public void setPlaybackSpeed(float speed)
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x7FBCDC", Offset = "0x7FBCDC", VA = "0x7FBCDC")]
		public void simulate(float time, bool reset = false)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x7FB688", Offset = "0x7FB688", VA = "0x7FB688")]
		public bool isAlive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x7FBD6C", Offset = "0x7FBD6C", VA = "0x7FBD6C")]
		public bool isPlaying(bool checkAll = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x7FBDC0", Offset = "0x7FBDC0", VA = "0x7FBDC0")]
		public int getParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x7FBEB4", Offset = "0x7FBEB4", VA = "0x7FBEB4")]
		public ParticleSystems()
		{
		}
	}
}
namespace MirzaBeig.Scripting.Effects
{
	[Token(Token = "0x2000244")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x58E8D0", Offset = "0x58E8D0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x58E8D0", Offset = "0x58E8D0")]
	public class ParticlePlexus : MonoBehaviour
	{
		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxDistance;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxConnections;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxLineRenderers;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x593658", Offset = "0x593658")]
		public float widthFromParticle;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x593670", Offset = "0x593670")]
		public float colourFromParticle;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x593688", Offset = "0x593688")]
		public float alphaFromParticle;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] particlePositions;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color[] particleColours;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] particleSizes;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer lineRendererTemplate;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<LineRenderer> lineRenderers;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _transform;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x5936A0", Offset = "0x5936A0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x5936A0", Offset = "0x5936A0")]
		public float delay;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float timer;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool alwaysUpdate;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool visible;

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x7FBF04", Offset = "0x7FBF04", VA = "0x7FBF04")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x7FBF80", Offset = "0x7FBF80", VA = "0x7FBF80")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x7FC01C", Offset = "0x7FC01C", VA = "0x7FC01C")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x7FC028", Offset = "0x7FC028", VA = "0x7FC028")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x7FC030", Offset = "0x7FC030", VA = "0x7FC030")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x7FD0AC", Offset = "0x7FD0AC", VA = "0x7FD0AC")]
		public ParticlePlexus()
		{
		}
	}
}
namespace TFHC_Shader_Samples
{
	[Token(Token = "0x2000245")]
	public class highlightAnimated : MonoBehaviour
	{
		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material mat;

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x6FE6A8", Offset = "0x6FE6A8", VA = "0x6FE6A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x6FE710", Offset = "0x6FE710", VA = "0x6FE710")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x6FE790", Offset = "0x6FE790", VA = "0x6FE790")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x6FE718", Offset = "0x6FE718", VA = "0x6FE718")]
		private void switchhighlighted(bool highlighted)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x6FE798", Offset = "0x6FE798", VA = "0x6FE798")]
		public highlightAnimated()
		{
		}
	}
}
namespace TFHC_ForceShield_Shader_Sample
{
	[Token(Token = "0x2000246")]
	public class ForceShieldDestroyBall : MonoBehaviour
	{
		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float lifetime;

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x6FE11C", Offset = "0x6FE11C", VA = "0x6FE11C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x6FE1A8", Offset = "0x6FE1A8", VA = "0x6FE1A8")]
		public ForceShieldDestroyBall()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class ForceShieldImpactDetection : MonoBehaviour
	{
		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float hitTime;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material mat;

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x6FE1B8", Offset = "0x6FE1B8", VA = "0x6FE1B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x6FE220", Offset = "0x6FE220", VA = "0x6FE220")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x6FE2C4", Offset = "0x6FE2C4", VA = "0x6FE2C4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x6FE474", Offset = "0x6FE474", VA = "0x6FE474")]
		public ForceShieldImpactDetection()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class ForceShieldShootBall : MonoBehaviour
	{
		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody bullet;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform origshoot;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float distance;

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x6FE47C", Offset = "0x6FE47C", VA = "0x6FE47C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x6FE694", Offset = "0x6FE694", VA = "0x6FE694")]
		public ForceShieldShootBall()
		{
		}
	}
}
