using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using AOT;
using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Options;
using HighlightPlus;
using Il2CppDummyDll;
using RenderHeads.Media.AVProVideo;
using SeanTools;
using UniStorm.Effects;
using UniStorm.Utility;
using Unity.XR.CoreUtils;
using Unity.XR.PXR;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Rendering;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;
using UnityEngine.XR.Interaction.Toolkit.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class Breathe : MonoBehaviour
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0x8F6060", Offset = "0x8F6060", VA = "0x8F6060")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x8F6064", Offset = "0x8F6064", VA = "0x8F6064")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x8F6154", Offset = "0x8F6154", VA = "0x8F6154")]
	public Breathe()
	{
	}
}
[Token(Token = "0x2000003")]
public class LightMover : MonoBehaviour
{
	[Token(Token = "0x2000004")]
	[CompilerGenerated]
	private sealed class <Rando>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LightMover <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600000B")]
			[Address(RVA = "0x8F63CC", Offset = "0x8F63CC", VA = "0x8F63CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600000D")]
			[Address(RVA = "0x8F6414", Offset = "0x8F6414", VA = "0x8F6414", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000008")]
		[Address(RVA = "0x8F62C4", Offset = "0x8F62C4", VA = "0x8F62C4")]
		[DebuggerHidden]
		public <Rando>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000009")]
		[Address(RVA = "0x8F6300", Offset = "0x8F6300", VA = "0x8F6300", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600000A")]
		[Address(RVA = "0x8F6304", Offset = "0x8F6304", VA = "0x8F6304", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600000C")]
		[Address(RVA = "0x8F63D4", Offset = "0x8F63D4", VA = "0x8F63D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float lerper;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float smoothTime;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float velocity;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x8F615C", Offset = "0x8F615C", VA = "0x8F615C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x8F61F0", Offset = "0x8F61F0", VA = "0x8F61F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x8F617C", Offset = "0x8F617C", VA = "0x8F617C")]
	[IteratorStateMachine(typeof(<Rando>d__5))]
	private IEnumerator Rando()
	{
		return null;
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x8F62EC", Offset = "0x8F62EC", VA = "0x8F62EC")]
	public LightMover()
	{
	}
}
[Token(Token = "0x2000005")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera maincam;

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x8F641C", Offset = "0x8F641C", VA = "0x8F641C")]
	private void Start()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x8F6440", Offset = "0x8F6440", VA = "0x8F6440")]
	private void Update()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x8F64AC", Offset = "0x8F64AC", VA = "0x8F64AC")]
	public LookAt()
	{
	}
}
[Token(Token = "0x2000006")]
public class MapChanger : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int oldselected;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material targetmat;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer tarRenderer;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture[] mattexes;

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x8F64B4", Offset = "0x8F64B4", VA = "0x8F64B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x8F6544", Offset = "0x8F6544", VA = "0x8F6544")]
	public void SwitchTexture(int toWhich)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x8F6620", Offset = "0x8F6620", VA = "0x8F6620")]
	public MapChanger()
	{
	}
}
[Token(Token = "0x2000007")]
public class Probe : MonoBehaviour
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x8F668C", Offset = "0x8F668C", VA = "0x8F668C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x8F66E4", Offset = "0x8F66E4", VA = "0x8F66E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x8F6700", Offset = "0x8F6700", VA = "0x8F6700")]
	public Probe()
	{
	}
}
[Token(Token = "0x2000008")]
[ExecuteInEditMode]
[AddComponentMenu("Rendering/Fast Stylized Shadows Manager")]
public class FSSManager : MonoBehaviour
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int shadowStyleTexID;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int shadowStyleParamsID;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Texture used to add style to shadows. Generally speaking, the shadows will take on the look of the texure you place here. Only the red channel is used (this could be changed if you really wanted to) so you can used a texture with texture mode set to only the red channel.")]
	public Texture shadowStyleTex;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Changes the scale of the texture used for the effect.")]
	public float effectScale;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Changes how much the shadow is effected by the style texture.")]
	public float effectIntensity;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Changes how much the shadow bias is increased with distance. This helps prevent artifacting. Generally, you should set this as low as is acceptable for you.")]
	public float shadowBiasCompensation;

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x8F6708", Offset = "0x8F6708", VA = "0x8F6708")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x8F67AC", Offset = "0x8F67AC", VA = "0x8F67AC")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x8F67B0", Offset = "0x8F67B0", VA = "0x8F67B0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x8F67B4", Offset = "0x8F67B4", VA = "0x8F67B4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x8F670C", Offset = "0x8F670C", VA = "0x8F670C")]
	public void UpdateProperties()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x8F684C", Offset = "0x8F684C", VA = "0x8F684C")]
	public void SetTexture(Texture inputStyleTex)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x8F6868", Offset = "0x8F6868", VA = "0x8F6868")]
	public FSSManager()
	{
	}
}
[Token(Token = "0x2000009")]
public class GestureCombinations
{
	[Token(Token = "0x200000A")]
	public enum FrameOfReference
	{
		[Token(Token = "0x4000016")]
		Head,
		[Token(Token = "0x4000017")]
		World
	}

	[Token(Token = "0x200000B")]
	public enum RotationOrder
	{
		[Token(Token = "0x4000019")]
		XYZ,
		[Token(Token = "0x400001A")]
		XZY,
		[Token(Token = "0x400001B")]
		YXZ,
		[Token(Token = "0x400001C")]
		YZX,
		[Token(Token = "0x400001D")]
		ZXY,
		[Token(Token = "0x400001E")]
		ZYX
	}

	[Token(Token = "0x200000C")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate void TrainingCallbackFunction(double performace, IntPtr metadata);

	[Token(Token = "0x200000D")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate void LoadingCallbackFunction(int result, IntPtr metadata);

	[Token(Token = "0x200000E")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate void SavingCallbackFunction(int result, IntPtr metadata);

	[Token(Token = "0x4000013")]
	public const string libfile = "gesturerecognition";

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr m_gc;

	[Token(Token = "0x17000003")]
	public FrameOfReference frameOfReferenceY
	{
		[Token(Token = "0x600001F")]
		[Address(RVA = "0x8F6920", Offset = "0x8F6920", VA = "0x8F6920")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x6000020")]
		[Address(RVA = "0x8F69A4", Offset = "0x8F69A4", VA = "0x8F69A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public FrameOfReference frameOfReferenceX
	{
		[Token(Token = "0x6000021")]
		[Address(RVA = "0x8F6A30", Offset = "0x8F6A30", VA = "0x8F6A30")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x6000022")]
		[Address(RVA = "0x8F6AB4", Offset = "0x8F6AB4", VA = "0x8F6AB4")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public FrameOfReference frameOfReferenceZ
	{
		[Token(Token = "0x6000023")]
		[Address(RVA = "0x8F6B40", Offset = "0x8F6B40", VA = "0x8F6B40")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x6000024")]
		[Address(RVA = "0x8F6BC4", Offset = "0x8F6BC4", VA = "0x8F6BC4")]
		set
		{
		}
	}

	[Token(Token = "0x17000006")]
	public FrameOfReference frameOfReferenceYaw
	{
		[Token(Token = "0x6000025")]
		[Address(RVA = "0x8F6C50", Offset = "0x8F6C50", VA = "0x8F6C50")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x6000026")]
		[Address(RVA = "0x8F6C58", Offset = "0x8F6C58", VA = "0x8F6C58")]
		set
		{
		}
	}

	[Token(Token = "0x17000007")]
	public FrameOfReference frameOfReferenceUpDownPitch
	{
		[Token(Token = "0x6000027")]
		[Address(RVA = "0x8F6C60", Offset = "0x8F6C60", VA = "0x8F6C60")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x6000028")]
		[Address(RVA = "0x8F6C68", Offset = "0x8F6C68", VA = "0x8F6C68")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public FrameOfReference frameOfReferenceRollTilt
	{
		[Token(Token = "0x6000029")]
		[Address(RVA = "0x8F6C70", Offset = "0x8F6C70", VA = "0x8F6C70")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x600002A")]
		[Address(RVA = "0x8F6C78", Offset = "0x8F6C78", VA = "0x8F6C78")]
		set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public bool ignoreHeadRotationLeftRight
	{
		[Token(Token = "0x600002B")]
		[Address(RVA = "0x8F6C80", Offset = "0x8F6C80", VA = "0x8F6C80")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600002C")]
		[Address(RVA = "0x8F6D18", Offset = "0x8F6D18", VA = "0x8F6D18")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public bool ignoreHeadRotationUpDown
	{
		[Token(Token = "0x600002D")]
		[Address(RVA = "0x8F6DA8", Offset = "0x8F6DA8", VA = "0x8F6DA8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600002E")]
		[Address(RVA = "0x8F6E40", Offset = "0x8F6E40", VA = "0x8F6E40")]
		set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public bool ignoreHeadRotationTilt
	{
		[Token(Token = "0x600002F")]
		[Address(RVA = "0x8F6ED0", Offset = "0x8F6ED0", VA = "0x8F6ED0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000030")]
		[Address(RVA = "0x8F6F68", Offset = "0x8F6F68", VA = "0x8F6F68")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public RotationOrder frameOfReferenceRotationOrder
	{
		[Token(Token = "0x6000031")]
		[Address(RVA = "0x8F6FF8", Offset = "0x8F6FF8", VA = "0x8F6FF8")]
		get
		{
			return default(RotationOrder);
		}
		[Token(Token = "0x6000032")]
		[Address(RVA = "0x8F707C", Offset = "0x8F707C", VA = "0x8F707C")]
		set
		{
		}
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x8F7108", Offset = "0x8F7108", VA = "0x8F7108")]
	public GestureCombinations(int number_of_parts)
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x8F71B4", Offset = "0x8F71B4", VA = "0x8F71B4", Slot = "1")]
	~GestureCombinations()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x8F72E0", Offset = "0x8F72E0", VA = "0x8F72E0")]
	public int activateLicense(string license_name, string license_key)
	{
		return default(int);
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x8F73AC", Offset = "0x8F73AC", VA = "0x8F73AC")]
	public int activateLicenseFile(string license_file_path)
	{
		return default(int);
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x8F7454", Offset = "0x8F7454", VA = "0x8F7454")]
	public int numberOfParts()
	{
		return default(int);
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x8F74D8", Offset = "0x8F74D8", VA = "0x8F74D8")]
	public bool getPartEnabled(int part)
	{
		return default(bool);
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x8F7578", Offset = "0x8F7578", VA = "0x8F7578")]
	public int setPartEnabled(int part, bool enabled)
	{
		return default(int);
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x8F7618", Offset = "0x8F7618", VA = "0x8F7618")]
	public int startStroke(int part, double[,] hmd, int record_as_sample = -1)
	{
		return default(int);
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x8F7638", Offset = "0x8F7638", VA = "0x8F7638")]
	public int startStroke(int part, Vector3 hmd_p, Quaternion hmd_q, int record_as_sample = -1)
	{
		return default(int);
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x8F7830", Offset = "0x8F7830", VA = "0x8F7830")]
	public int startStroke(int part, double[] hmd_p, double[] hmd_q, int record_as_sample = -1)
	{
		return default(int);
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x8F7838", Offset = "0x8F7838", VA = "0x8F7838")]
	public int updateHeadPosition(double[,] hmd)
	{
		return default(int);
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x8F7858", Offset = "0x8F7858", VA = "0x8F7858")]
	public int updateHeadPosition(Vector3 hmd_p, Quaternion hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x8F7A20", Offset = "0x8F7A20", VA = "0x8F7A20")]
	public int updateHeadPosition(double[] hmd_p, double[] hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x8F7A28", Offset = "0x8F7A28", VA = "0x8F7A28")]
	public int contdStroke(int part, double[] p)
	{
		return default(int);
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x8F7ACC", Offset = "0x8F7ACC", VA = "0x8F7ACC")]
	public int contdStroke(int part, Vector3 p)
	{
		return default(int);
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x8F7B88", Offset = "0x8F7B88", VA = "0x8F7B88")]
	public int contdStrokeQ(int part, Vector3 p, Quaternion q)
	{
		return default(int);
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x8F7D68", Offset = "0x8F7D68", VA = "0x8F7D68")]
	public int contdStrokeQ(int part, double[] p, double[] q)
	{
		return default(int);
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x8F7D70", Offset = "0x8F7D70", VA = "0x8F7D70")]
	public int contdStrokeE(int part, Vector3 p, Vector3 r)
	{
		return default(int);
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x8F7F34", Offset = "0x8F7F34", VA = "0x8F7F34")]
	public int contdStrokeE(int part, double[] p, double[] r)
	{
		return default(int);
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x8F7F3C", Offset = "0x8F7F3C", VA = "0x8F7F3C")]
	public int contdStrokeM(int part, double[,] m)
	{
		return default(int);
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x8F7F5C", Offset = "0x8F7F5C", VA = "0x8F7F5C")]
	public int endStroke(int part, ref Vector3 pos, ref double scale, ref Vector3 dir0, ref Vector3 dir1, ref Vector3 dir2)
	{
		return default(int);
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x8F8260", Offset = "0x8F8260", VA = "0x8F8260")]
	public int endStroke(int part, ref Vector3 pos, ref double scale, ref Quaternion q)
	{
		return default(int);
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x8F86C0", Offset = "0x8F86C0", VA = "0x8F86C0")]
	public int endStroke(int part, ref double[] pos, ref double[] scale, ref double[] dir0, ref double[] dir1, ref double[] dir2)
	{
		return default(int);
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x8F86DC", Offset = "0x8F86DC", VA = "0x8F86DC")]
	public int endStroke(int part)
	{
		return default(int);
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x8F86F8", Offset = "0x8F86F8", VA = "0x8F86F8")]
	public int getPartProbabilitiesAndSimilarities(int part, ref double[] p, ref double[] s)
	{
		return default(int);
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x8F88B8", Offset = "0x8F88B8", VA = "0x8F88B8")]
	public bool isStrokeStarted(int part)
	{
		return default(bool);
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x8F8958", Offset = "0x8F8958", VA = "0x8F8958")]
	public int cancelStroke(int part)
	{
		return default(int);
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x8F89E4", Offset = "0x8F89E4", VA = "0x8F89E4")]
	public int identifyGestureCombination()
	{
		return default(int);
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x8F8B7C", Offset = "0x8F8B7C", VA = "0x8F8B7C")]
	public int identifyGestureCombination(ref double similarity)
	{
		return default(int);
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x8F8C68", Offset = "0x8F8C68", VA = "0x8F8C68")]
	public int identifyGestureCombination(ref double probability, ref double similarity, ref double[] parts_probabilities, ref double[] parts_similarities)
	{
		return default(int);
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x8F8D90", Offset = "0x8F8D90", VA = "0x8F8D90")]
	public int contdIdentify(Vector3 hmd_p, Quaternion hmd_q, ref double similarity)
	{
		return default(int);
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x8F9014", Offset = "0x8F9014", VA = "0x8F9014")]
	public int contdIdentify(Vector3 hmd_p, Quaternion hmd_q, ref double similarity, ref double[] parts_probabilities, ref double[] parts_similarities)
	{
		return default(int);
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x8F91E0", Offset = "0x8F91E0", VA = "0x8F91E0")]
	public int contdRecord(Vector3 hmd_p, Quaternion hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x8F93A8", Offset = "0x8F93A8", VA = "0x8F93A8")]
	public int getContdIdentificationPeriod(int part)
	{
		return default(int);
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x8F9434", Offset = "0x8F9434", VA = "0x8F9434")]
	public int setContdIdentificationPeriod(int part, int ms)
	{
		return default(int);
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x8F94D0", Offset = "0x8F94D0", VA = "0x8F94D0")]
	public int getContdIdentificationSmoothing(int part)
	{
		return default(int);
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x8F955C", Offset = "0x8F955C", VA = "0x8F955C")]
	public int setContdIdentificationSmoothing(int part, int samples)
	{
		return default(int);
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x8F95F8", Offset = "0x8F95F8", VA = "0x8F95F8")]
	public int numberOfGestureCombinations()
	{
		return default(int);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x8F967C", Offset = "0x8F967C", VA = "0x8F967C")]
	public int deleteGestureCombination(int index)
	{
		return default(int);
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x8F9708", Offset = "0x8F9708", VA = "0x8F9708")]
	public int deleteAllGestureCombinations()
	{
		return default(int);
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x8F978C", Offset = "0x8F978C", VA = "0x8F978C")]
	public int createGestureCombination(string name)
	{
		return default(int);
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x8F9834", Offset = "0x8F9834", VA = "0x8F9834")]
	public int setCombinationPartGesture(int combination_index, int part, int gesture_index)
	{
		return default(int);
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x8F98D8", Offset = "0x8F98D8", VA = "0x8F98D8")]
	public int getCombinationPartGesture(int combination_index, int part)
	{
		return default(int);
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x8F9974", Offset = "0x8F9974", VA = "0x8F9974")]
	public string getGestureCombinationName(int index)
	{
		return null;
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x8F9B98", Offset = "0x8F9B98", VA = "0x8F9B98")]
	public int setGestureCombinationName(int index, string name)
	{
		return default(int);
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x8F9C50", Offset = "0x8F9C50", VA = "0x8F9C50")]
	public string getGestureCombinationMetadataAsString(int index)
	{
		return null;
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x8F9DF4", Offset = "0x8F9DF4", VA = "0x8F9DF4")]
	public int setGestureCombinationMetadataAsString(int index, string str)
	{
		return default(int);
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x8F87EC", Offset = "0x8F87EC", VA = "0x8F87EC")]
	public int numberOfGestures(int part)
	{
		return default(int);
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x8F9FE4", Offset = "0x8F9FE4", VA = "0x8F9FE4")]
	public int deleteGesture(int part, int index)
	{
		return default(int);
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x8FA080", Offset = "0x8FA080", VA = "0x8FA080")]
	public int deleteAllGestures(int part)
	{
		return default(int);
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x8FA10C", Offset = "0x8FA10C", VA = "0x8FA10C")]
	public int createGesture(int part, string name)
	{
		return default(int);
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x8FA22C", Offset = "0x8FA22C", VA = "0x8FA22C")]
	public int copyGesture(int from_part, int from_gesture_index, int to_part, int to_gesture_index, bool mirror_x, bool mirror_y, bool mirror_z)
	{
		return default(int);
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x8FA30C", Offset = "0x8FA30C", VA = "0x8FA30C")]
	public double gestureRecognitionScore(int part)
	{
		return default(double);
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x8FA398", Offset = "0x8FA398", VA = "0x8FA398")]
	public string getGestureName(int part, int index)
	{
		return null;
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x8FA5E8", Offset = "0x8FA5E8", VA = "0x8FA5E8")]
	public string getGestureMetadataAsString(int part, int index)
	{
		return null;
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x8FA7A4", Offset = "0x8FA7A4", VA = "0x8FA7A4")]
	public bool getGestureEnabled(int part, int index)
	{
		return default(bool);
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x8FA854", Offset = "0x8FA854", VA = "0x8FA854")]
	public int getGestureNumberOfSamples(int part, int index)
	{
		return default(int);
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x8FA8F0", Offset = "0x8FA8F0", VA = "0x8FA8F0")]
	public int getGestureSampleLength(int part, int gesture_index, int sample_index, int processed)
	{
		return default(int);
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x8FA9A4", Offset = "0x8FA9A4", VA = "0x8FA9A4")]
	public int getGestureSampleStroke(int part, int gesture_index, int sample_index, int processed, ref Vector3[] p, ref Quaternion[] q, ref Vector3[] hmd_p, ref Quaternion[] hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x8FAF0C", Offset = "0x8FAF0C", VA = "0x8FAF0C")]
	public int getGestureMeanStroke(int part, int gesture_index, ref Vector3[] p, ref Quaternion[] q, ref Vector3 stroke_p, ref Quaternion stroke_q, ref float scale)
	{
		return default(int);
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x8FB4CC", Offset = "0x8FB4CC", VA = "0x8FB4CC")]
	public int deleteGestureSample(int part, int gesture_index, int sample_index)
	{
		return default(int);
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x8FB570", Offset = "0x8FB570", VA = "0x8FB570")]
	public int deleteAllGestureSamples(int part, int gesture_index)
	{
		return default(int);
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x8FB60C", Offset = "0x8FB60C", VA = "0x8FB60C")]
	public int setGestureName(int part, int index, string name)
	{
		return default(int);
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x8FB6CC", Offset = "0x8FB6CC", VA = "0x8FB6CC")]
	public int setGestureMetadataAsString(int part, int index, string str)
	{
		return default(int);
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x8FB858", Offset = "0x8FB858", VA = "0x8FB858")]
	public int setGestureEnabled(int part, int index, bool enabled)
	{
		return default(int);
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x8FB900", Offset = "0x8FB900", VA = "0x8FB900")]
	public int saveToFile(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x8FB9A8", Offset = "0x8FB9A8", VA = "0x8FB9A8")]
	public int loadFromFile(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x8FBA94", Offset = "0x8FBA94", VA = "0x8FBA94")]
	public int loadFromBuffer(byte[] buffer)
	{
		return default(int);
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x8FBB80", Offset = "0x8FBB80", VA = "0x8FBB80")]
	public int importFromFile(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x8FBC6C", Offset = "0x8FBC6C", VA = "0x8FBC6C")]
	public int importFromBuffer(byte[] buffer)
	{
		return default(int);
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x8FBD58", Offset = "0x8FBD58", VA = "0x8FBD58")]
	public int saveGestureToFile(int part, string path)
	{
		return default(int);
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x8FBE10", Offset = "0x8FBE10", VA = "0x8FBE10")]
	public int loadGestureFromFile(int part, string path)
	{
		return default(int);
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x8FBF0C", Offset = "0x8FBF0C", VA = "0x8FBF0C")]
	public int loadGestureFromBuffer(int part, byte[] buffer)
	{
		return default(int);
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x8FC010", Offset = "0x8FC010", VA = "0x8FC010")]
	public int saveToFileAsync(string path)
	{
		return default(int);
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x8FC0B8", Offset = "0x8FC0B8", VA = "0x8FC0B8")]
	public int setSavingUpdateCallbackFunction(SavingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x8FC14C", Offset = "0x8FC14C", VA = "0x8FC14C")]
	public int setSavingUpdateCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x8FC1D8", Offset = "0x8FC1D8", VA = "0x8FC1D8")]
	public int setSavingFinishCallbackFunction(SavingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x8FC26C", Offset = "0x8FC26C", VA = "0x8FC26C")]
	public int setSavingFinishCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x8FC2F8", Offset = "0x8FC2F8", VA = "0x8FC2F8")]
	public bool isSaving()
	{
		return default(bool);
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x8FC390", Offset = "0x8FC390", VA = "0x8FC390")]
	public int cancelSaving()
	{
		return default(int);
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x8FC414", Offset = "0x8FC414", VA = "0x8FC414")]
	public int loadFromFileAsync(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x8FC500", Offset = "0x8FC500", VA = "0x8FC500")]
	public int loadFromBufferAsync(byte[] buffer)
	{
		return default(int);
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x8FC5EC", Offset = "0x8FC5EC", VA = "0x8FC5EC")]
	public int setLoadingUpdateCallbackFunction(LoadingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x8FC680", Offset = "0x8FC680", VA = "0x8FC680")]
	public int setLoadingUpdateCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x8FC70C", Offset = "0x8FC70C", VA = "0x8FC70C")]
	public int setLoadingFinishCallbackFunction(LoadingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x8FC7A0", Offset = "0x8FC7A0", VA = "0x8FC7A0")]
	public int setLoadingFinishCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x8FC82C", Offset = "0x8FC82C", VA = "0x8FC82C")]
	public bool isLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x8FC8C4", Offset = "0x8FC8C4", VA = "0x8FC8C4")]
	public int cancelLoading()
	{
		return default(int);
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x8FC948", Offset = "0x8FC948", VA = "0x8FC948")]
	public int startTraining()
	{
		return default(int);
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x8FC9CC", Offset = "0x8FC9CC", VA = "0x8FC9CC")]
	public bool isTraining()
	{
		return default(bool);
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x8FCA64", Offset = "0x8FCA64", VA = "0x8FCA64")]
	public int stopTraining()
	{
		return default(int);
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x8FCAE8", Offset = "0x8FCAE8", VA = "0x8FCAE8")]
	public double recognitionScore()
	{
		return default(double);
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x8FCB6C", Offset = "0x8FCB6C", VA = "0x8FCB6C")]
	public int getMaxTrainingTime()
	{
		return default(int);
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x8FCBF0", Offset = "0x8FCBF0", VA = "0x8FCBF0")]
	public void setMaxTrainingTime(int t)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x8FCC7C", Offset = "0x8FCC7C", VA = "0x8FCC7C")]
	public int getMaxTrainingThreads()
	{
		return default(int);
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x8FCD00", Offset = "0x8FCD00", VA = "0x8FCD00")]
	public void setMaxTrainingThreads(int n)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x8FCD8C", Offset = "0x8FCD8C", VA = "0x8FCD8C")]
	public void setTrainingUpdateCallback(TrainingCallbackFunction cbf)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x8FCE20", Offset = "0x8FCE20", VA = "0x8FCE20")]
	public void setTrainingUpdateCallbackMetadata(IntPtr metadata)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x8FCEAC", Offset = "0x8FCEAC", VA = "0x8FCEAC")]
	public void setTrainingFinishCallback(TrainingCallbackFunction cbf)
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x8FCF40", Offset = "0x8FCF40", VA = "0x8FCF40")]
	public void setTrainingFinishCallbackMetadata(IntPtr metadata)
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x8FCFCC", Offset = "0x8FCFCC", VA = "0x8FCFCC")]
	public string getMetadataAsString()
	{
		return null;
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x8FD154", Offset = "0x8FD154", VA = "0x8FD154")]
	public int setMetadataAsString(string str)
	{
		return default(int);
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x8FD2A4", Offset = "0x8FD2A4", VA = "0x8FD2A4")]
	public int setUpdateHeadPositionPolicy(int part, GestureRecognition.UpdateHeadPositionPolicy p)
	{
		return default(int);
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x8FD340", Offset = "0x8FD340", VA = "0x8FD340")]
	public GestureRecognition.UpdateHeadPositionPolicy getUpdateHeadPositionPolicy(int part)
	{
		return default(GestureRecognition.UpdateHeadPositionPolicy);
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x8FD3CC", Offset = "0x8FD3CC", VA = "0x8FD3CC")]
	public static string getVersionString()
	{
		return null;
	}

	[PreserveSig]
	[Token(Token = "0x600009C")]
	[Address(RVA = "0x8F7138", Offset = "0x8F7138", VA = "0x8F7138")]
	public static extern IntPtr GestureCombinations_create(int number_of_parts);

	[PreserveSig]
	[Token(Token = "0x600009D")]
	[Address(RVA = "0x8F7264", Offset = "0x8F7264", VA = "0x8F7264")]
	public static extern void GestureCombinations_delete(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x600009E")]
	[Address(RVA = "0x8F72E8", Offset = "0x8F72E8", VA = "0x8F72E8")]
	public static extern int GestureCombinations_activateLicense(IntPtr gco, string license_name, string license_key);

	[PreserveSig]
	[Token(Token = "0x600009F")]
	[Address(RVA = "0x8F73B4", Offset = "0x8F73B4", VA = "0x8F73B4")]
	public static extern int GestureCombinations_activateLicenseFile(IntPtr gco, string license_file_path);

	[PreserveSig]
	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x8F745C", Offset = "0x8F745C", VA = "0x8F745C")]
	public static extern int GestureCombinations_numberOfParts(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x8F74F4", Offset = "0x8F74F4", VA = "0x8F74F4")]
	public static extern int GestureCombinations_getPartEnabled(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x8F7584", Offset = "0x8F7584", VA = "0x8F7584")]
	public static extern int GestureCombinations_setPartEnabled(IntPtr gco, int part, int enabled);

	[PreserveSig]
	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x8F7774", Offset = "0x8F7774", VA = "0x8F7774")]
	public static extern int GestureCombinations_startStroke(IntPtr gco, int part, double[] hmd_p, double[] hmd_q, int record_as_sample);

	[PreserveSig]
	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x8F7620", Offset = "0x8F7620", VA = "0x8F7620")]
	public static extern int GestureCombinations_startStrokeM(IntPtr gco, int part, double[,] hmd, int record_as_sample);

	[PreserveSig]
	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x8F7840", Offset = "0x8F7840", VA = "0x8F7840")]
	public static extern int GestureCombinations_updateHeadPositionM(IntPtr gco, double[,] hmd);

	[PreserveSig]
	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x8F797C", Offset = "0x8F797C", VA = "0x8F797C")]
	public static extern int GestureCombinations_updateHeadPositionQ(IntPtr gco, double[] hmd_p, double[] hmd_q);

	[PreserveSig]
	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x8F7A30", Offset = "0x8F7A30", VA = "0x8F7A30")]
	public static extern int GestureCombinations_contdStroke(IntPtr gco, int part, double[] p);

	[PreserveSig]
	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x8F7CBC", Offset = "0x8F7CBC", VA = "0x8F7CBC")]
	public static extern int GestureCombinations_contdStrokeQ(IntPtr gco, int part, double[] p, double[] q);

	[PreserveSig]
	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x8F7E88", Offset = "0x8F7E88", VA = "0x8F7E88")]
	public static extern int GestureCombinations_contdStrokeE(IntPtr gco, int part, double[] p, double[] r);

	[PreserveSig]
	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x8F7F44", Offset = "0x8F7F44", VA = "0x8F7F44")]
	public static extern int GestureCombinations_contdStrokeM(IntPtr gco, int part, double[,] m);

	[PreserveSig]
	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x8F8174", Offset = "0x8F8174", VA = "0x8F8174")]
	public static extern int GestureCombinations_endStroke(IntPtr gco, int part, double[] pos, double[] scale, double[] dir0, double[] dir1, double[] dir2);

	[PreserveSig]
	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x8F87F4", Offset = "0x8F87F4", VA = "0x8F87F4")]
	public static extern int GestureCombinations_getPartProbabilitiesAndSimilarities(IntPtr gco, int part, double[] p, double[] s, int[] n);

	[PreserveSig]
	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x8F88D4", Offset = "0x8F88D4", VA = "0x8F88D4")]
	public static extern int GestureCombinations_isStrokeStarted(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x8F8960", Offset = "0x8F8960", VA = "0x8F8960")]
	public static extern int GestureCombinations_cancelStroke(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x8F8AB0", Offset = "0x8F8AB0", VA = "0x8F8AB0")]
	public static extern int GestureCombinations_identifyGestureCombination(IntPtr gco, double[] probability, double[] similarity, double[] parts_probabilities, double[] parts_similarities);

	[PreserveSig]
	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x8F8F38", Offset = "0x8F8F38", VA = "0x8F8F38")]
	public static extern int GestureCombinations_contdIdentify(IntPtr gco, double[] hmd_p, double[] hmd_q, double[] similarity, double[] parts_probabilities, double[] parts_similarities);

	[PreserveSig]
	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x8F9304", Offset = "0x8F9304", VA = "0x8F9304")]
	public static extern int GestureCombinations_contdRecord(IntPtr gco, double[] hmd_p, double[] hmd_q);

	[PreserveSig]
	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x8F93B0", Offset = "0x8F93B0", VA = "0x8F93B0")]
	public static extern int GestureCombinations_getContdIdentificationPeriod(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x8F943C", Offset = "0x8F943C", VA = "0x8F943C")]
	public static extern int GestureCombinations_setContdIdentificationPeriod(IntPtr gco, int part, int ms);

	[PreserveSig]
	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x8F94D8", Offset = "0x8F94D8", VA = "0x8F94D8")]
	public static extern int GestureCombinations_getContdIdentificationSmoothing(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x8F9564", Offset = "0x8F9564", VA = "0x8F9564")]
	public static extern int GestureCombinations_setContdIdentificationSmoothing(IntPtr gco, int part, int samples);

	[PreserveSig]
	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x8F9F60", Offset = "0x8F9F60", VA = "0x8F9F60")]
	public static extern int GestureCombinations_numberOfGestures(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x8F9FEC", Offset = "0x8F9FEC", VA = "0x8F9FEC")]
	public static extern int GestureCombinations_deleteGesture(IntPtr gco, int part, int index);

	[PreserveSig]
	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x8FA088", Offset = "0x8FA088", VA = "0x8FA088")]
	public static extern int GestureCombinations_deleteAllGestures(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x8FA174", Offset = "0x8FA174", VA = "0x8FA174")]
	public static extern int GestureCombinations_createGesture(IntPtr gco, int part, string name, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x8FA240", Offset = "0x8FA240", VA = "0x8FA240")]
	public static extern int GestureCombinations_copyGesture(IntPtr gco, int from_part, int from_gesture_index, int to_part, int to_gesture_index, int mirror_x, int mirror_y, int mirror_z);

	[PreserveSig]
	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x8FA314", Offset = "0x8FA314", VA = "0x8FA314")]
	public static extern double GestureCombinations_gestureRecognitionScore(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x8FA480", Offset = "0x8FA480", VA = "0x8FA480")]
	public static extern int GestureCombinations_getGestureNameLength(IntPtr gco, int part, int index);

	[PreserveSig]
	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x8FA514", Offset = "0x8FA514", VA = "0x8FA514")]
	public static extern int GestureCombinations_copyGestureName(IntPtr gco, int part, int index, StringBuilder buf, int buflen);

	[PreserveSig]
	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x8FA710", Offset = "0x8FA710", VA = "0x8FA710")]
	public static extern IntPtr GestureCombinations_getGestureMetadata(IntPtr gco, int part, int index);

	[PreserveSig]
	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x8FA7C0", Offset = "0x8FA7C0", VA = "0x8FA7C0")]
	public static extern int GestureCombinations_getGestureEnabled(IntPtr gco, int part, int index);

	[PreserveSig]
	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x8FA85C", Offset = "0x8FA85C", VA = "0x8FA85C")]
	public static extern int GestureCombinations_getGestureNumberOfSamples(IntPtr gco, int part, int index);

	[PreserveSig]
	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x8FA8F8", Offset = "0x8FA8F8", VA = "0x8FA8F8")]
	public static extern int GestureCombinations_getGestureSampleLength(IntPtr gco, int part, int gesture_index, int sample_index, int processed);

	[PreserveSig]
	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x8FAE08", Offset = "0x8FAE08", VA = "0x8FAE08")]
	public static extern int GestureCombinations_getGestureSampleStroke(IntPtr gco, int part, int gesture_index, int sample_index, int processed, int stroke_buf_size, double[] p, double[] q, double[] hmd_p, double[] hmd_q);

	[PreserveSig]
	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x8FB330", Offset = "0x8FB330", VA = "0x8FB330")]
	public static extern int GestureCombinations_getGestureMeanLength(IntPtr gco, int part, int gesture_index);

	[PreserveSig]
	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x8FB3C4", Offset = "0x8FB3C4", VA = "0x8FB3C4")]
	public static extern int GestureCombinations_getGestureMeanStroke(IntPtr gco, int part, int gesture_index, double[] p, double[] q, int stroke_buf_size, double[] stroke_p, double[] stroke_q, double[] scale);

	[PreserveSig]
	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x8FB4D4", Offset = "0x8FB4D4", VA = "0x8FB4D4")]
	public static extern int GestureCombinations_deleteGestureSample(IntPtr gco, int part, int gesture_index, int sample_index);

	[PreserveSig]
	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x8FB578", Offset = "0x8FB578", VA = "0x8FB578")]
	public static extern int GestureCombinations_deleteAllGestureSamples(IntPtr gco, int part, int gesture_index);

	[PreserveSig]
	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x8FB614", Offset = "0x8FB614", VA = "0x8FB614")]
	public static extern int GestureCombinations_setGestureName(IntPtr gco, int part, int index, string name);

	[PreserveSig]
	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x8FB7BC", Offset = "0x8FB7BC", VA = "0x8FB7BC")]
	public static extern int GestureCombinations_setGestureMetadata(IntPtr gco, int part, int index, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x8FB864", Offset = "0x8FB864", VA = "0x8FB864")]
	public static extern int GestureCombinations_setGestureEnabled(IntPtr gco, int part, int index, int enabled);

	[PreserveSig]
	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x8FB908", Offset = "0x8FB908", VA = "0x8FB908")]
	public static extern int GestureCombinations_saveToFile(IntPtr gco, string path);

	[PreserveSig]
	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x8FB9DC", Offset = "0x8FB9DC", VA = "0x8FB9DC")]
	public static extern int GestureCombinations_loadFromFile(IntPtr gco, string path, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x8FBAD0", Offset = "0x8FBAD0", VA = "0x8FBAD0")]
	public static extern int GestureCombinations_loadFromBuffer(IntPtr gco, byte[] buffer, int buffer_size, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x8FBBB4", Offset = "0x8FBBB4", VA = "0x8FBBB4")]
	public static extern int GestureCombinations_importFromFile(IntPtr gco, string path, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x8FBCA8", Offset = "0x8FBCA8", VA = "0x8FBCA8")]
	public static extern int GestureCombinations_importFromBuffer(IntPtr gco, byte[] buffer, int buffer_size, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x8FBD60", Offset = "0x8FBD60", VA = "0x8FBD60")]
	public static extern int GestureCombinations_saveGestureToFile(IntPtr gco, int part, string path);

	[PreserveSig]
	[Token(Token = "0x60000D0")]
	[Address(RVA = "0x8FBE4C", Offset = "0x8FBE4C", VA = "0x8FBE4C")]
	public static extern int GestureCombinations_loadGestureFromFile(IntPtr gco, int part, string path, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000D1")]
	[Address(RVA = "0x8FBF50", Offset = "0x8FBF50", VA = "0x8FBF50")]
	public static extern int GestureCombinations_loadGestureFromBuffer(IntPtr gco, int part, byte[] buffer, int buffer_size, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x8FC018", Offset = "0x8FC018", VA = "0x8FC018")]
	public static extern int GestureCombinations_saveToFileAsync(IntPtr gro, string path);

	[PreserveSig]
	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x8FC0C0", Offset = "0x8FC0C0", VA = "0x8FC0C0")]
	public static extern int GestureCombinations_setSavingUpdateCallbackFunction(IntPtr gro, SavingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x8FC154", Offset = "0x8FC154", VA = "0x8FC154")]
	public static extern int GestureCombinations_setSavingUpdateCallbackMetadata(IntPtr gro, IntPtr cbf);

	[PreserveSig]
	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x8FC1E0", Offset = "0x8FC1E0", VA = "0x8FC1E0")]
	public static extern int GestureCombinations_setSavingFinishCallbackFunction(IntPtr gro, SavingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x8FC274", Offset = "0x8FC274", VA = "0x8FC274")]
	public static extern int GestureCombinations_setSavingFinishCallbackMetadata(IntPtr gro, IntPtr cbf);

	[PreserveSig]
	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x8FC314", Offset = "0x8FC314", VA = "0x8FC314")]
	public static extern int GestureCombinations_isSaving(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x8FC398", Offset = "0x8FC398", VA = "0x8FC398")]
	public static extern int GestureCombinations_cancelSaving(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x8FC448", Offset = "0x8FC448", VA = "0x8FC448")]
	public static extern int GestureCombinations_loadFromFileAsync(IntPtr gro, string path, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x8FC53C", Offset = "0x8FC53C", VA = "0x8FC53C")]
	public static extern int GestureCombinations_loadFromBufferAsync(IntPtr gro, byte[] buffer, int buffer_size, GestureRecognition.MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x8FC5F4", Offset = "0x8FC5F4", VA = "0x8FC5F4")]
	public static extern int GestureCombinations_setLoadingUpdateCallbackFunction(IntPtr gro, LoadingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x8FC688", Offset = "0x8FC688", VA = "0x8FC688")]
	public static extern int GestureCombinations_setLoadingUpdateCallbackMetadata(IntPtr gro, IntPtr cbf);

	[PreserveSig]
	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x8FC714", Offset = "0x8FC714", VA = "0x8FC714")]
	public static extern int GestureCombinations_setLoadingFinishCallbackFunction(IntPtr gro, LoadingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x8FC7A8", Offset = "0x8FC7A8", VA = "0x8FC7A8")]
	public static extern int GestureCombinations_setLoadingFinishCallbackMetadata(IntPtr gro, IntPtr cbf);

	[PreserveSig]
	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x8FC848", Offset = "0x8FC848", VA = "0x8FC848")]
	public static extern int GestureCombinations_isLoading(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x8FC8CC", Offset = "0x8FC8CC", VA = "0x8FC8CC")]
	public static extern int GestureCombinations_cancelLoading(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x8F9600", Offset = "0x8F9600", VA = "0x8F9600")]
	public static extern int GestureCombinations_numberOfGestureCombinations(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x8F9684", Offset = "0x8F9684", VA = "0x8F9684")]
	public static extern int GestureCombinations_deleteGestureCombination(IntPtr gco, int index);

	[PreserveSig]
	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x8F9710", Offset = "0x8F9710", VA = "0x8F9710")]
	public static extern int GestureCombinations_deleteAllGestureCombinations(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x8F9794", Offset = "0x8F9794", VA = "0x8F9794")]
	public static extern int GestureCombinations_createGestureCombination(IntPtr gco, string name);

	[PreserveSig]
	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x8F983C", Offset = "0x8F983C", VA = "0x8F983C")]
	public static extern int GestureCombinations_setCombinationPartGesture(IntPtr gco, int combination_index, int part, int gesture_index);

	[PreserveSig]
	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x8F98E0", Offset = "0x8F98E0", VA = "0x8F98E0")]
	public static extern int GestureCombinations_getCombinationPartGesture(IntPtr gco, int combination_index, int part);

	[PreserveSig]
	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x8F9A50", Offset = "0x8F9A50", VA = "0x8F9A50")]
	public static extern int GestureCombinations_getGestureCombinationNameLength(IntPtr gco, int index);

	[PreserveSig]
	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x8F9AD4", Offset = "0x8F9AD4", VA = "0x8F9AD4")]
	public static extern int GestureCombinations_copyGestureCombinationName(IntPtr gco, int index, StringBuilder buf, int buflen);

	[PreserveSig]
	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x8F9BA0", Offset = "0x8F9BA0", VA = "0x8F9BA0")]
	public static extern int GestureCombinations_setGestureCombinationName(IntPtr gco, int index, string name);

	[PreserveSig]
	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x8F9D70", Offset = "0x8F9D70", VA = "0x8F9D70")]
	public static extern IntPtr GestureCombinations_getGestureCombinationMetadata(IntPtr gco, int index);

	[PreserveSig]
	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x8F9ECC", Offset = "0x8F9ECC", VA = "0x8F9ECC")]
	public static extern int GestureCombinations_setGestureCombinationMetadata(IntPtr gco, int index, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x8FC950", Offset = "0x8FC950", VA = "0x8FC950")]
	public static extern int GestureCombinations_startTraining(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x8FC9E8", Offset = "0x8FC9E8", VA = "0x8FC9E8")]
	public static extern int GestureCombinations_isTraining(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x8FCA6C", Offset = "0x8FCA6C", VA = "0x8FCA6C")]
	public static extern int GestureCombinations_stopTraining(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x8FCAF0", Offset = "0x8FCAF0", VA = "0x8FCAF0")]
	public static extern double GestureCombinations_recognitionScore(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x8FCB74", Offset = "0x8FCB74", VA = "0x8FCB74")]
	public static extern int GestureCombinations_getMaxTrainingTime(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x8FCBF8", Offset = "0x8FCBF8", VA = "0x8FCBF8")]
	public static extern void GestureCombinations_setMaxTrainingTime(IntPtr gco, int t);

	[PreserveSig]
	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x8FCC84", Offset = "0x8FCC84", VA = "0x8FCC84")]
	public static extern int GestureCombinations_getMaxTrainingThreads(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x8FCD08", Offset = "0x8FCD08", VA = "0x8FCD08")]
	public static extern void GestureCombinations_setMaxTrainingThreads(IntPtr gco, int n);

	[PreserveSig]
	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x8FCD94", Offset = "0x8FCD94", VA = "0x8FCD94")]
	public static extern void GestureCombinations_setTrainingUpdateCallback(IntPtr gco, TrainingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x8FCEB4", Offset = "0x8FCEB4", VA = "0x8FCEB4")]
	public static extern void GestureCombinations_setTrainingFinishCallback(IntPtr gco, TrainingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x8FCE28", Offset = "0x8FCE28", VA = "0x8FCE28")]
	public static extern void GestureCombinations_setTrainingUpdateCallbackMetadata(IntPtr gco, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x8FCF48", Offset = "0x8FCF48", VA = "0x8FCF48")]
	public static extern void GestureCombinations_setTrainingFinishCallbackMetadata(IntPtr gco, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x8F6DC4", Offset = "0x8F6DC4", VA = "0x8F6DC4")]
	public static extern int GestureCombinations_getIgnoreHeadRotationX(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x8F6E4C", Offset = "0x8F6E4C", VA = "0x8F6E4C")]
	public static extern void GestureCombinations_setIgnoreHeadRotationX(IntPtr gco, int on_off);

	[PreserveSig]
	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x8F6C9C", Offset = "0x8F6C9C", VA = "0x8F6C9C")]
	public static extern int GestureCombinations_getIgnoreHeadRotationY(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x8F6D24", Offset = "0x8F6D24", VA = "0x8F6D24")]
	public static extern void GestureCombinations_setIgnoreHeadRotationY(IntPtr gco, int on_off);

	[PreserveSig]
	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x8F6EEC", Offset = "0x8F6EEC", VA = "0x8F6EEC")]
	public static extern int GestureCombinations_getIgnoreHeadRotationZ(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x8F6F74", Offset = "0x8F6F74", VA = "0x8F6F74")]
	public static extern void GestureCombinations_setIgnoreHeadRotationZ(IntPtr gco, int on_off);

	[PreserveSig]
	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x8F6A38", Offset = "0x8F6A38", VA = "0x8F6A38")]
	public static extern int GestureCombinations_getRotationalFrameOfReferenceX(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x8F6ABC", Offset = "0x8F6ABC", VA = "0x8F6ABC")]
	public static extern void GestureCombinations_setRotationalFrameOfReferenceX(IntPtr gco, int i);

	[PreserveSig]
	[Token(Token = "0x6000100")]
	[Address(RVA = "0x8F6928", Offset = "0x8F6928", VA = "0x8F6928")]
	public static extern int GestureCombinations_getRotationalFrameOfReferenceY(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x6000101")]
	[Address(RVA = "0x8F69AC", Offset = "0x8F69AC", VA = "0x8F69AC")]
	public static extern void GestureCombinations_setRotationalFrameOfReferenceY(IntPtr gco, int i);

	[PreserveSig]
	[Token(Token = "0x6000102")]
	[Address(RVA = "0x8F6B48", Offset = "0x8F6B48", VA = "0x8F6B48")]
	public static extern int GestureCombinations_getRotationalFrameOfReferenceZ(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x6000103")]
	[Address(RVA = "0x8F6BCC", Offset = "0x8F6BCC", VA = "0x8F6BCC")]
	public static extern void GestureCombinations_setRotationalFrameOfReferenceZ(IntPtr gco, int i);

	[PreserveSig]
	[Token(Token = "0x6000104")]
	[Address(RVA = "0x8F7000", Offset = "0x8F7000", VA = "0x8F7000")]
	public static extern int GestureCombinations_getRotationalFrameOfReferenceRotationOrder(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x6000105")]
	[Address(RVA = "0x8F7084", Offset = "0x8F7084", VA = "0x8F7084")]
	public static extern void GestureCombinations_setRotationalFrameOfReferenceRotationOrder(IntPtr gco, int rotOrd);

	[PreserveSig]
	[Token(Token = "0x6000106")]
	[Address(RVA = "0x8FD220", Offset = "0x8FD220", VA = "0x8FD220")]
	public static extern int GestureCombinations_setMetadata(IntPtr gco, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x6000107")]
	[Address(RVA = "0x8FD0D8", Offset = "0x8FD0D8", VA = "0x8FD0D8")]
	public static extern IntPtr GestureCombinations_getMetadata(IntPtr gco);

	[PreserveSig]
	[Token(Token = "0x6000108")]
	[Address(RVA = "0x8FD2AC", Offset = "0x8FD2AC", VA = "0x8FD2AC")]
	public static extern int GestureCombinations_setUpdateHeadPositionPolicy(IntPtr gco, int part, int p);

	[PreserveSig]
	[Token(Token = "0x6000109")]
	[Address(RVA = "0x8FD348", Offset = "0x8FD348", VA = "0x8FD348")]
	public static extern int GestureCombinations_getUpdateHeadPositionPolicy(IntPtr gco, int part);

	[PreserveSig]
	[Token(Token = "0x600010A")]
	[Address(RVA = "0x8FD480", Offset = "0x8FD480", VA = "0x8FD480")]
	public static extern int GestureCombinations_getVersionStringLength();

	[PreserveSig]
	[Token(Token = "0x600010B")]
	[Address(RVA = "0x8FD4E8", Offset = "0x8FD4E8", VA = "0x8FD4E8")]
	public static extern int GestureCombinations_copyVersionString(StringBuilder buf, int buflen);
}
[Token(Token = "0x200000F")]
public class GestureManager : MonoBehaviour
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject currentPoint;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightPoint;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject leftPoint;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string license_id;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private string license_key;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private string license_file_path;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool license_activated;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Mivry.UnityXrPlugin unityXrPlugin;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Mivry.MivryCoordinateSystem mivryCoordinateSystem;

	[NonSerialized]
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string[] file_imports;

	[NonSerialized]
	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool file_importing_completed;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string file_load_combinations;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string file_import_combinations;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string file_load_subgestures;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int file_load_subgestures_i;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public string file_load_gestures;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public string file_import_gestures;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public string file_save_combinations;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public string file_save_gestures;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public string create_combination_name;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public string create_gesture_name;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public string[] create_gesture_names;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public int record_gesture_id;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public int record_combination_id;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public int lefthand_combination_part;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public int righthand_combination_part;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public int copy_gesture_from_part;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public int copy_gesture_to_part;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public int copy_gesture_from_id;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public int copy_gesture_to_id;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool copy_gesture_mirror;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
	public bool copy_gesture_rotate;

	[NonSerialized]
	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GestureRecognition gr;

	[NonSerialized]
	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GestureCombinations gc;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Text ConsoleText;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private GameObject active_controller;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private GameObject active_controller_pointer;

	[NonSerialized]
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public bool training_started;

	[NonSerialized]
	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public double last_performance_report;

	[NonSerialized]
	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public int loading_saving_progress;

	[NonSerialized]
	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public bool loading_started;

	[NonSerialized]
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public int loading_result;

	[NonSerialized]
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public bool saving_started;

	[NonSerialized]
	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public int saving_result;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private string saving_path;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private List<string> stroke;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int stroke_index;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private GCHandle me;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private bool trigger_pressed_left;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
	private bool trigger_pressed_right;

	[NonSerialized]
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15A")]
	public bool gesturing_enabled;

	[NonSerialized]
	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15B")]
	public bool gesture_started;

	[NonSerialized]
	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public int file_suggestion;

	[NonSerialized]
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public List<string> file_suggestions;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x1700000D")]
	public int numberOfParts
	{
		[Token(Token = "0x6000118")]
		[Address(RVA = "0x8FDE00", Offset = "0x8FDE00", VA = "0x8FDE00")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000119")]
		[Address(RVA = "0x8FDE28", Offset = "0x8FDE28", VA = "0x8FDE28")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public string licenseId
	{
		[Token(Token = "0x600011A")]
		[Address(RVA = "0x8FF21C", Offset = "0x8FF21C", VA = "0x8FF21C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600011B")]
		[Address(RVA = "0x8FF224", Offset = "0x8FF224", VA = "0x8FF224")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public string licenseKey
	{
		[Token(Token = "0x600011C")]
		[Address(RVA = "0x8FF2B8", Offset = "0x8FF2B8", VA = "0x8FF2B8")]
		get
		{
			return null;
		}
		[Token(Token = "0x600011D")]
		[Address(RVA = "0x8FF2C0", Offset = "0x8FF2C0", VA = "0x8FF2C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public string licenseFilePath
	{
		[Token(Token = "0x600011E")]
		[Address(RVA = "0x8FF370", Offset = "0x8FF370", VA = "0x8FF370")]
		get
		{
			return null;
		}
		[Token(Token = "0x600011F")]
		[Address(RVA = "0x8FF378", Offset = "0x8FF378", VA = "0x8FF378")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public bool licenseActivated
	{
		[Token(Token = "0x6000120")]
		[Address(RVA = "0x8FF418", Offset = "0x8FF418", VA = "0x8FF418")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000012")]
	public GestureRecognition.FrameOfReference frameOfReferenceYaw
	{
		[Token(Token = "0x6000121")]
		[Address(RVA = "0x8FF420", Offset = "0x8FF420", VA = "0x8FF420")]
		get
		{
			return default(GestureRecognition.FrameOfReference);
		}
		[Token(Token = "0x6000122")]
		[Address(RVA = "0x8FF478", Offset = "0x8FF478", VA = "0x8FF478")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public GestureRecognition.FrameOfReference frameOfReferenceUpDownPitch
	{
		[Token(Token = "0x6000123")]
		[Address(RVA = "0x8FF574", Offset = "0x8FF574", VA = "0x8FF574")]
		get
		{
			return default(GestureRecognition.FrameOfReference);
		}
		[Token(Token = "0x6000124")]
		[Address(RVA = "0x8FF5CC", Offset = "0x8FF5CC", VA = "0x8FF5CC")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public GestureRecognition.FrameOfReference frameOfReferenceRollTilt
	{
		[Token(Token = "0x6000125")]
		[Address(RVA = "0x8FF6C8", Offset = "0x8FF6C8", VA = "0x8FF6C8")]
		get
		{
			return default(GestureRecognition.FrameOfReference);
		}
		[Token(Token = "0x6000126")]
		[Address(RVA = "0x8FF720", Offset = "0x8FF720", VA = "0x8FF720")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public GestureRecognition.RotationOrder frameOfReferenceRotationOrder
	{
		[Token(Token = "0x6000127")]
		[Address(RVA = "0x8FF81C", Offset = "0x8FF81C", VA = "0x8FF81C")]
		get
		{
			return default(GestureRecognition.RotationOrder);
		}
		[Token(Token = "0x6000128")]
		[Address(RVA = "0x8FF848", Offset = "0x8FF848", VA = "0x8FF848")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public bool compensate_head_motion
	{
		[Token(Token = "0x6000129")]
		[Address(RVA = "0x8FF910", Offset = "0x8FF910", VA = "0x8FF910")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600012A")]
		[Address(RVA = "0x8FF958", Offset = "0x8FF958", VA = "0x8FF958")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public string consoleText
	{
		[Token(Token = "0x600013C")]
		[Address(RVA = "0x902644", Offset = "0x902644", VA = "0x902644")]
		set
		{
		}
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x8FF9C8", Offset = "0x8FF9C8", VA = "0x8FF9C8")]
	public GestureManager()
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x8FFE48", Offset = "0x8FFE48", VA = "0x8FFE48")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x900128", Offset = "0x900128", VA = "0x900128")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x9001C8", Offset = "0x9001C8", VA = "0x9001C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x9008CC", Offset = "0x9008CC", VA = "0x9008CC")]
	public void Update()
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x8FDA88", Offset = "0x8FDA88", VA = "0x8FDA88")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingUpdateCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x8FDB3C", Offset = "0x8FDB3C", VA = "0x8FDB3C")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingFinishCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x8FDBF0", Offset = "0x8FDBF0", VA = "0x8FDBF0")]
	[MonoPInvokeCallback(typeof(GestureRecognition.LoadingCallbackFunction))]
	public static void loadingSavingUpdateCallback(int progress, IntPtr ptr)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x8FDCA0", Offset = "0x8FDCA0", VA = "0x8FDCA0")]
	[MonoPInvokeCallback(typeof(GestureRecognition.LoadingCallbackFunction))]
	public static void loadingFinishCallback(int result, IntPtr ptr)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x8FDD50", Offset = "0x8FDD50", VA = "0x8FDD50")]
	[MonoPInvokeCallback(typeof(GestureRecognition.SavingCallbackFunction))]
	public static void savingFinishCallback(int result, IntPtr ptr)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x902BF4", Offset = "0x902BF4", VA = "0x902BF4")]
	public void addToStrokeTrail(Vector3 p)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x902300", Offset = "0x902300", VA = "0x902300")]
	public bool importFromStreamingAssets(string file)
	{
		return default(bool);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x9030C8", Offset = "0x9030C8", VA = "0x9030C8")]
	public string getLoadPath(string file)
	{
		return null;
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x903160", Offset = "0x903160", VA = "0x903160")]
	public string getSavePath(string file)
	{
		return null;
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x9031F8", Offset = "0x9031F8", VA = "0x9031F8")]
	public bool loadFromFile()
	{
		return default(bool);
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x90341C", Offset = "0x90341C", VA = "0x90341C")]
	public bool importFromFile()
	{
		return default(bool);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x90358C", Offset = "0x90358C", VA = "0x90358C")]
	public bool saveToFile()
	{
		return default(bool);
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x902710", Offset = "0x902710", VA = "0x902710")]
	public static float getInputControlValue(string controlName)
	{
		return default(float);
	}
}
[Token(Token = "0x2000010")]
public class GestureManagerVR : MonoBehaviour
{
	[Token(Token = "0x2000011")]
	public class SampleDisplay
	{
		[Token(Token = "0x2000012")]
		public struct Stroke
		{
			[Token(Token = "0x4000070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3[] hmd_p;

			[Token(Token = "0x4000071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Quaternion[] hmd_q;

			[Token(Token = "0x4000072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] p;

			[Token(Token = "0x4000073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Quaternion[] q;
		}

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int sampleId;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int dataPointIndex;

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject headsetModel;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject controllerModelLeft;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject controllerModelRight;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Stroke strokeLeft;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Stroke strokeRight;

		[Token(Token = "0x600014D")]
		[Address(RVA = "0x9073E4", Offset = "0x9073E4", VA = "0x9073E4")]
		public void reloadStrokes()
		{
		}

		[Token(Token = "0x600014E")]
		[Address(RVA = "0x9073D4", Offset = "0x9073D4", VA = "0x9073D4")]
		public SampleDisplay()
		{
		}
	}

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GestureManagerVR me;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool followUser;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GestureManager gestureManager;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EditableTextField inputFocus;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material inputFocusOnMaterial;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material inputFocusOffMaterial;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject keyboard;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject splashscreen;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject submenuNumberOfParts;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject submenuFiles;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject submenuFileSuggestions;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject submenuGesture;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject submenuCombination;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject submenuRecord;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject submenuCoordinateSystem;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject submenuFrameOfReference;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject submenuTraining;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static GestureManagerButton activeButton;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static SampleDisplay sampleDisplay;

	[Token(Token = "0x17000018")]
	public static bool isGesturing
	{
		[Token(Token = "0x6000144")]
		[Address(RVA = "0x9066C4", Offset = "0x9066C4", VA = "0x9066C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000019")]
	public static bool gesturingEnabled
	{
		[Token(Token = "0x6000145")]
		[Address(RVA = "0x9067E0", Offset = "0x9067E0", VA = "0x9067E0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000146")]
		[Address(RVA = "0x9068FC", Offset = "0x9068FC", VA = "0x9068FC")]
		set
		{
		}
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x903714", Offset = "0x903714", VA = "0x903714")]
	private void Start()
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x904014", Offset = "0x904014", VA = "0x904014")]
	public static void keyboardInput(KeyboardKey key)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x9041E8", Offset = "0x9041E8", VA = "0x9041E8")]
	public static void setInputFocus(EditableTextField editableTextField)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x8FE6D0", Offset = "0x8FE6D0", VA = "0x8FE6D0")]
	public static void refresh()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x905094", Offset = "0x905094", VA = "0x905094")]
	public static void refreshTextInputs(GameObject go)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x90519C", Offset = "0x90519C", VA = "0x90519C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x906A18", Offset = "0x906A18", VA = "0x906A18")]
	public static int getSubmenuGesture()
	{
		return default(int);
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x906B4C", Offset = "0x906B4C", VA = "0x906B4C")]
	public static bool setSubmenuGesture(int gesture_id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x906CC4", Offset = "0x906CC4", VA = "0x906CC4")]
	public static int getSubmenuCombination()
	{
		return default(int);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x906E6C", Offset = "0x906E6C", VA = "0x906E6C")]
	public static bool setSubmenuCombination(int combination_id, int part = -1, int gesture_id = -1)
	{
		return default(bool);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x90732C", Offset = "0x90732C", VA = "0x90732C")]
	public GestureManagerVR()
	{
	}
}
[Token(Token = "0x2000013")]
public class EditableTextField : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000014")]
	public enum Target
	{
		[Token(Token = "0x4000078")]
		NumberOfParts,
		[Token(Token = "0x4000079")]
		GestureName,
		[Token(Token = "0x400007A")]
		CombinationName,
		[Token(Token = "0x400007B")]
		LoadFile,
		[Token(Token = "0x400007C")]
		SaveFile
	}

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Target target;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh displayText;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int maxDisplayLength;

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x907B80", Offset = "0x907B80", VA = "0x907B80")]
	private void Start()
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x903C48", Offset = "0x903C48", VA = "0x903C48")]
	public void refreshText()
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x907B84", Offset = "0x907B84", VA = "0x907B84")]
	public void setValue(string text)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x907E68", Offset = "0x907E68", VA = "0x907E68")]
	public string getValue()
	{
		return null;
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x904140", Offset = "0x904140", VA = "0x904140")]
	public void keyboardInput(KeyboardKey key)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x908278", Offset = "0x908278", VA = "0x908278")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x908330", Offset = "0x908330", VA = "0x908330")]
	public EditableTextField()
	{
	}
}
[Token(Token = "0x2000015")]
public interface GestureManagerButton
{
}
[Token(Token = "0x2000016")]
public class GestureManagerHandle : MonoBehaviour
{
	[Token(Token = "0x2000017")]
	public enum Target
	{
		[Token(Token = "0x4000088")]
		GestureManager,
		[Token(Token = "0x4000089")]
		Keyboard
	}

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public Target target;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material inactiveHandleMaterial;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material hoverHandleMaterial;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeHandleMaterial;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject activePointer;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Matrix4x4 lastPointerMat;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GestureManagerHandle hoverHandle;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static GestureManagerHandle draggingHandle;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float hoverHandleLastUpdate;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float draggingHandleLastUpdate;

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x908338", Offset = "0x908338", VA = "0x908338")]
	private void Update()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x908ABC", Offset = "0x908ABC", VA = "0x908ABC")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x908C54", Offset = "0x908C54", VA = "0x908C54")]
	public void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x908DAC", Offset = "0x908DAC", VA = "0x908DAC")]
	public void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x908F04", Offset = "0x908F04", VA = "0x908F04")]
	public GestureManagerHandle()
	{
	}
}
[Token(Token = "0x2000018")]
public class KeyboardKey : MonoBehaviour
{
	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string key;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string keyShift;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string keyAlt;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool shiftActive;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool altActive;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static KeyboardKey activeKeyboardKey;

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x908F0C", Offset = "0x908F0C", VA = "0x908F0C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x909214", Offset = "0x909214", VA = "0x909214")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x90813C", Offset = "0x90813C", VA = "0x90813C")]
	public string applyTo(string input)
	{
		return null;
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x9093BC", Offset = "0x9093BC", VA = "0x9093BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x909418", Offset = "0x909418", VA = "0x909418")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x909474", Offset = "0x909474", VA = "0x909474")]
	public KeyboardKey()
	{
	}
}
[Token(Token = "0x2000019")]
public class SubmenuCombination : MonoBehaviour
{
	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject CombinationCreateBtn;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject CombinationDeleteBtn;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject CombinationNextBtn;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject CombinationPrevBtn;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject CombinationText;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject CombinationInput;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject PartNextBtn;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject PartPrevBtn;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject PartText;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject GestureNextBtn;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject GesturePrevBtn;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject GestureText;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentCombination;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int currentPart;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int currentGesture;

	[Token(Token = "0x1700001A")]
	public int CurrentCombination
	{
		[Token(Token = "0x6000161")]
		[Address(RVA = "0x90947C", Offset = "0x90947C", VA = "0x90947C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000162")]
		[Address(RVA = "0x907238", Offset = "0x907238", VA = "0x907238")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public int CurrentPart
	{
		[Token(Token = "0x6000163")]
		[Address(RVA = "0x909484", Offset = "0x909484", VA = "0x909484")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000164")]
		[Address(RVA = "0x907240", Offset = "0x907240", VA = "0x907240")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public int CurrentGesture
	{
		[Token(Token = "0x6000165")]
		[Address(RVA = "0x90948C", Offset = "0x90948C", VA = "0x90948C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000166")]
		[Address(RVA = "0x907248", Offset = "0x907248", VA = "0x907248")]
		set
		{
		}
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0x909494", Offset = "0x909494", VA = "0x909494")]
	private void Start()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0x9094AC", Offset = "0x9094AC", VA = "0x9094AC")]
	private void init()
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0x904BE4", Offset = "0x904BE4", VA = "0x904BE4")]
	public void refresh()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0x909908", Offset = "0x909908", VA = "0x909908")]
	public SubmenuCombination()
	{
	}
}
[Token(Token = "0x200001A")]
public class SubmenuCombinationButton : MonoBehaviour, GestureManagerButton
{
	[Serializable]
	[Token(Token = "0x200001B")]
	public enum Operation
	{
		[Token(Token = "0x40000A7")]
		CreateCombination,
		[Token(Token = "0x40000A8")]
		DeleteCombination,
		[Token(Token = "0x40000A9")]
		NextCombination,
		[Token(Token = "0x40000AA")]
		PreviousCombination,
		[Token(Token = "0x40000AB")]
		NextPart,
		[Token(Token = "0x40000AC")]
		PreviousPart,
		[Token(Token = "0x40000AD")]
		NextGesture,
		[Token(Token = "0x40000AE")]
		PreviousGesture
	}

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Operation operation;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private SubmenuCombination submenuCombination;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x600016B")]
	[Address(RVA = "0x909920", Offset = "0x909920", VA = "0x909920")]
	private void Start()
	{
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0x9099A0", Offset = "0x9099A0", VA = "0x9099A0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0x909D78", Offset = "0x909D78", VA = "0x909D78")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0x909EE8", Offset = "0x909EE8", VA = "0x909EE8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0x90A01C", Offset = "0x90A01C", VA = "0x90A01C")]
	public SubmenuCombinationButton()
	{
	}
}
[Token(Token = "0x200001C")]
public class SubmenuCoordinateSystem : MonoBehaviour
{
	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMesh SubmenuCoordinateSystemValue;

	[Token(Token = "0x6000170")]
	[Address(RVA = "0x90A024", Offset = "0x90A024", VA = "0x90A024")]
	private void Start()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0x90A028", Offset = "0x90A028", VA = "0x90A028")]
	private void init()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0x90A138", Offset = "0x90A138", VA = "0x90A138")]
	public void refresh()
	{
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0x90A2A8", Offset = "0x90A2A8", VA = "0x90A2A8")]
	public SubmenuCoordinateSystem()
	{
	}
}
[Token(Token = "0x200001D")]
public class SubmenuCoordinateSystemButton : MonoBehaviour, GestureManagerButton
{
	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool forward;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh coordinateSystemDisplay;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x6000174")]
	[Address(RVA = "0x90A2B0", Offset = "0x90A2B0", VA = "0x90A2B0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x90A7F8", Offset = "0x90A7F8", VA = "0x90A7F8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x90A968", Offset = "0x90A968", VA = "0x90A968")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x90AA9C", Offset = "0x90AA9C", VA = "0x90AA9C")]
	public SubmenuCoordinateSystemButton()
	{
	}
}
[Token(Token = "0x200001E")]
public class SubmenuFiles : MonoBehaviour
{
	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject loadFileTextField;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject saveFileTextField;

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x90AAA4", Offset = "0x90AAA4", VA = "0x90AAA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x90AAA8", Offset = "0x90AAA8", VA = "0x90AAA8")]
	private void init()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x90ABDC", Offset = "0x90ABDC", VA = "0x90ABDC")]
	public void refresh()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x90AC58", Offset = "0x90AC58", VA = "0x90AC58")]
	public SubmenuFiles()
	{
	}
}
[Token(Token = "0x200001F")]
public class SubmenuFilesButton : MonoBehaviour, GestureManagerButton
{
	[Serializable]
	[Token(Token = "0x2000020")]
	public enum Operation
	{
		[Token(Token = "0x40000BC")]
		LoadGestureFile,
		[Token(Token = "0x40000BD")]
		SaveGestureFile,
		[Token(Token = "0x40000BE")]
		FileSuggestionUp,
		[Token(Token = "0x40000BF")]
		FileSuggestionDown,
		[Token(Token = "0x40000C0")]
		FileSuggestionSelect
	}

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Operation operation;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x90AC60", Offset = "0x90AC60", VA = "0x90AC60")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x90B0B4", Offset = "0x90B0B4", VA = "0x90B0B4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x90B224", Offset = "0x90B224", VA = "0x90B224")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x90B358", Offset = "0x90B358", VA = "0x90B358")]
	public SubmenuFilesButton()
	{
	}
}
[Token(Token = "0x2000021")]
public class SubmenuFileSuggestions : MonoBehaviour
{
	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMesh textField;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject upButton;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject selectButton;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject downButton;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject background;

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x90B360", Offset = "0x90B360", VA = "0x90B360")]
	private void Start()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x90B578", Offset = "0x90B578", VA = "0x90B578")]
	private void Update()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x90B364", Offset = "0x90B364", VA = "0x90B364")]
	private void init()
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x90B57C", Offset = "0x90B57C", VA = "0x90B57C")]
	public void refresh()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x90BC3C", Offset = "0x90BC3C", VA = "0x90BC3C")]
	public SubmenuFileSuggestions()
	{
	}
}
[Token(Token = "0x2000022")]
public class SubmenuFrameOfReference : MonoBehaviour
{
	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMesh SubmenuFrameOfReferenceYawValue;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMesh SubmenuFrameOfReferencePitchValue;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TextMesh SubmenuFrameOfReferenceRollValue;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TextMesh SubmenuFrameOfReferenceRotationOrderValue;

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x90BC44", Offset = "0x90BC44", VA = "0x90BC44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x90BC48", Offset = "0x90BC48", VA = "0x90BC48")]
	private void init()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x90A584", Offset = "0x90A584", VA = "0x90A584")]
	public void refresh()
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x90BE44", Offset = "0x90BE44", VA = "0x90BE44")]
	public SubmenuFrameOfReference()
	{
	}
}
[Token(Token = "0x2000023")]
public class SubmenuFrameOfReferenceButton : MonoBehaviour, GestureManagerButton
{
	[Token(Token = "0x2000024")]
	private enum FrameOfReference
	{
		[Token(Token = "0x40000D2")]
		Yaw,
		[Token(Token = "0x40000D3")]
		Pitch,
		[Token(Token = "0x40000D4")]
		Roll,
		[Token(Token = "0x40000D5")]
		RotationOrder
	}

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool forward;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh frameOfReferenceDisplay;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private FrameOfReference frameOfReference;

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x90BE4C", Offset = "0x90BE4C", VA = "0x90BE4C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x90C17C", Offset = "0x90C17C", VA = "0x90C17C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x90C2EC", Offset = "0x90C2EC", VA = "0x90C2EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0x90C420", Offset = "0x90C420", VA = "0x90C420")]
	public SubmenuFrameOfReferenceButton()
	{
	}
}
[Token(Token = "0x2000025")]
public class SubmenuGesture : MonoBehaviour
{
	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject PartNextBtn;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject PartPrevBtn;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject PartText;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject GestureNextBtn;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject GesturePrevBtn;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject GestureNameText;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject GestureNameInput;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject GestureCreateBtn;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject GestureDeleteLastSampleBtn;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject GestureDeleteAllSamplesBtn;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject GestureSamplesText;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject GestureDeleteGestureBtn;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int currentPart;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private int currentGesture;

	[Token(Token = "0x1700001D")]
	public int CurrentPart
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0x90C428", Offset = "0x90C428", VA = "0x90C428")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600018E")]
		[Address(RVA = "0x90C430", Offset = "0x90C430", VA = "0x90C430")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public int CurrentGesture
	{
		[Token(Token = "0x600018F")]
		[Address(RVA = "0x90CBA4", Offset = "0x90CBA4", VA = "0x90CBA4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000190")]
		[Address(RVA = "0x90CBAC", Offset = "0x90CBAC", VA = "0x90CBAC")]
		set
		{
		}
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x90CBB4", Offset = "0x90CBB4", VA = "0x90CBB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x90CBCC", Offset = "0x90CBCC", VA = "0x90CBCC")]
	private void init()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x90C438", Offset = "0x90C438", VA = "0x90C438")]
	public void refresh()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x90D110", Offset = "0x90D110", VA = "0x90D110")]
	public SubmenuGesture()
	{
	}
}
[Token(Token = "0x2000026")]
public class SubmenuGestureButton : MonoBehaviour, GestureManagerButton
{
	[Serializable]
	[Token(Token = "0x2000027")]
	public enum Operation
	{
		[Token(Token = "0x40000EC")]
		NextPart,
		[Token(Token = "0x40000ED")]
		PreviousPart,
		[Token(Token = "0x40000EE")]
		CreateGesture,
		[Token(Token = "0x40000EF")]
		DeleteGesture,
		[Token(Token = "0x40000F0")]
		DeleteLastSample,
		[Token(Token = "0x40000F1")]
		DeleteAllSamples,
		[Token(Token = "0x40000F2")]
		NextGesture,
		[Token(Token = "0x40000F3")]
		PreviousGesture
	}

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMesh gestureNameText;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh gestureSamplesText;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Operation operation;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SubmenuGesture submenuGesture;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x90D120", Offset = "0x90D120", VA = "0x90D120")]
	private void Start()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x90D1A0", Offset = "0x90D1A0", VA = "0x90D1A0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x90D6E0", Offset = "0x90D6E0", VA = "0x90D6E0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x90D850", Offset = "0x90D850", VA = "0x90D850")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x90D984", Offset = "0x90D984", VA = "0x90D984")]
	public SubmenuGestureButton()
	{
	}
}
[Token(Token = "0x2000028")]
public class SubmenuGestureManagerButton : MonoBehaviour, GestureManagerButton
{
	[Token(Token = "0x2000029")]
	public enum Setting
	{
		[Token(Token = "0x40000FA")]
		FollowMe
	}

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Setting setting;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool forward;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh displayText;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x90D98C", Offset = "0x90D98C", VA = "0x90D98C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x90DBF0", Offset = "0x90DBF0", VA = "0x90DBF0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x90DD60", Offset = "0x90DD60", VA = "0x90DD60")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x90DE94", Offset = "0x90DE94", VA = "0x90DE94")]
	public SubmenuGestureManagerButton()
	{
	}
}
[Token(Token = "0x200002A")]
public class SubmenuRecord : MonoBehaviour
{
	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMesh SubmenuRecordValue;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMesh SubmenuRecordSampleDisplayValue;

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x90DE9C", Offset = "0x90DE9C", VA = "0x90DE9C")]
	private void Start()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x90DEA0", Offset = "0x90DEA0", VA = "0x90DEA0")]
	private void init()
	{
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x90E004", Offset = "0x90E004", VA = "0x90E004")]
	public void refresh()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x90E4F4", Offset = "0x90E4F4", VA = "0x90E4F4")]
	public SubmenuRecord()
	{
	}
}
[Token(Token = "0x200002B")]
public class SubmenuRecordButton : MonoBehaviour, GestureManagerButton
{
	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool forward;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh gestureNameDisplay;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private SubmenuRecord submenuRecord;

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x90E4FC", Offset = "0x90E4FC", VA = "0x90E4FC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x90E720", Offset = "0x90E720", VA = "0x90E720")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x90E890", Offset = "0x90E890", VA = "0x90E890")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x90E9C4", Offset = "0x90E9C4", VA = "0x90E9C4")]
	public SubmenuRecordButton()
	{
	}
}
[Token(Token = "0x200002C")]
public class SubmenuRecordButtonSampleDisplayButton : MonoBehaviour, GestureManagerButton
{
	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool forward;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh sampleIndexDisplay;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x90E9CC", Offset = "0x90E9CC", VA = "0x90E9CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x90EF94", Offset = "0x90EF94", VA = "0x90EF94")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x90F104", Offset = "0x90F104", VA = "0x90F104")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x90F238", Offset = "0x90F238", VA = "0x90F238")]
	public SubmenuRecordButtonSampleDisplayButton()
	{
	}
}
[Token(Token = "0x200002D")]
public class SubmenuRecordUpdateHeadPositionButton : MonoBehaviour, GestureManagerButton
{
	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool forward;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh updateHeadPositionDisplay;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x90F240", Offset = "0x90F240", VA = "0x90F240")]
	private void Start()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x90F370", Offset = "0x90F370", VA = "0x90F370")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x90F5B8", Offset = "0x90F5B8", VA = "0x90F5B8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x90F728", Offset = "0x90F728", VA = "0x90F728")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x90F85C", Offset = "0x90F85C", VA = "0x90F85C")]
	public SubmenuRecordUpdateHeadPositionButton()
	{
	}
}
[Token(Token = "0x200002E")]
public class SubmenuTraining : MonoBehaviour
{
	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMesh TrainingCurrentStatus;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private TextMesh TrainingCurrentPerformance;

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x90F864", Offset = "0x90F864", VA = "0x90F864")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x90F868", Offset = "0x90F868", VA = "0x90F868")]
	private void init()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x90F9CC", Offset = "0x90F9CC", VA = "0x90F9CC")]
	public void refresh()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x90FDC4", Offset = "0x90FDC4", VA = "0x90FDC4")]
	public SubmenuTraining()
	{
	}
}
[Token(Token = "0x200002F")]
public class SubmenuTrainingButton : MonoBehaviour, GestureManagerButton
{
	[Token(Token = "0x2000030")]
	public enum Operation
	{
		[Token(Token = "0x4000112")]
		StartTraining,
		[Token(Token = "0x4000113")]
		StopTraining
	}

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Operation operation;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x90FDCC", Offset = "0x90FDCC", VA = "0x90FDCC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x90FFD8", Offset = "0x90FFD8", VA = "0x90FFD8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x910148", Offset = "0x910148", VA = "0x910148")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x91027C", Offset = "0x91027C", VA = "0x91027C")]
	public SubmenuTrainingButton()
	{
	}
}
[Token(Token = "0x2000031")]
public class GestureRecognition
{
	[Token(Token = "0x2000032")]
	public enum FrameOfReference
	{
		[Token(Token = "0x4000117")]
		Head,
		[Token(Token = "0x4000118")]
		World
	}

	[Token(Token = "0x2000033")]
	public enum RotationOrder
	{
		[Token(Token = "0x400011A")]
		XYZ,
		[Token(Token = "0x400011B")]
		XZY,
		[Token(Token = "0x400011C")]
		YXZ,
		[Token(Token = "0x400011D")]
		YZX,
		[Token(Token = "0x400011E")]
		ZXY,
		[Token(Token = "0x400011F")]
		ZYX
	}

	[Token(Token = "0x2000034")]
	public enum UpdateHeadPositionPolicy
	{
		[Token(Token = "0x4000121")]
		UseLatest,
		[Token(Token = "0x4000122")]
		UseInitial
	}

	[Token(Token = "0x2000035")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate IntPtr MetadataCreatorFunction();

	[Token(Token = "0x2000036")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate void TrainingCallbackFunction(double performace, IntPtr metadata);

	[Token(Token = "0x2000037")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate void LoadingCallbackFunction(int status, IntPtr metadata);

	[Token(Token = "0x2000038")]
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	public delegate void SavingCallbackFunction(int status, IntPtr metadata);

	[Token(Token = "0x4000114")]
	public const string libfile = "gesturerecognition";

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr m_gro;

	[Token(Token = "0x1700001F")]
	public FrameOfReference frameOfReferenceY
	{
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x9103C8", Offset = "0x9103C8", VA = "0x9103C8")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x91044C", Offset = "0x91044C", VA = "0x91044C")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public FrameOfReference frameOfReferenceX
	{
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x9104D8", Offset = "0x9104D8", VA = "0x9104D8")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x91055C", Offset = "0x91055C", VA = "0x91055C")]
		set
		{
		}
	}

	[Token(Token = "0x17000021")]
	public FrameOfReference frameOfReferenceZ
	{
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x9105E8", Offset = "0x9105E8", VA = "0x9105E8")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x91066C", Offset = "0x91066C", VA = "0x91066C")]
		set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public FrameOfReference frameOfReferenceYaw
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x9106F8", Offset = "0x9106F8", VA = "0x9106F8")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x910700", Offset = "0x910700", VA = "0x910700")]
		set
		{
		}
	}

	[Token(Token = "0x17000023")]
	public FrameOfReference frameOfReferenceUpDownPitch
	{
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x910708", Offset = "0x910708", VA = "0x910708")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x910710", Offset = "0x910710", VA = "0x910710")]
		set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public FrameOfReference frameOfReferenceRollTilt
	{
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x910718", Offset = "0x910718", VA = "0x910718")]
		get
		{
			return default(FrameOfReference);
		}
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x910720", Offset = "0x910720", VA = "0x910720")]
		set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public bool ignoreHeadRotationLeftRight
	{
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x910728", Offset = "0x910728", VA = "0x910728")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x9107C0", Offset = "0x9107C0", VA = "0x9107C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public bool ignoreHeadRotationUpDown
	{
		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x910850", Offset = "0x910850", VA = "0x910850")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x9108E8", Offset = "0x9108E8", VA = "0x9108E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public bool ignoreHeadRotationTilt
	{
		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x910978", Offset = "0x910978", VA = "0x910978")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x910A10", Offset = "0x910A10", VA = "0x910A10")]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public RotationOrder frameOfReferenceRotationOrder
	{
		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x910AA0", Offset = "0x910AA0", VA = "0x910AA0")]
		get
		{
			return default(RotationOrder);
		}
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x910B24", Offset = "0x910B24", VA = "0x910B24")]
		set
		{
		}
	}

	[Token(Token = "0x17000029")]
	public int contdIdentificationPeriod
	{
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x9133D0", Offset = "0x9133D0", VA = "0x9133D0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x913454", Offset = "0x913454", VA = "0x913454")]
		set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public int contdIdentificationSmoothing
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x9134E0", Offset = "0x9134E0", VA = "0x9134E0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x913564", Offset = "0x913564", VA = "0x913564")]
		set
		{
		}
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x910284", Offset = "0x910284", VA = "0x910284")]
	public static string getErrorMessage(int errorCode)
	{
		return null;
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x910BB0", Offset = "0x910BB0", VA = "0x910BB0")]
	public GestureRecognition()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x910C38", Offset = "0x910C38", VA = "0x910C38", Slot = "1")]
	~GestureRecognition()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x910D64", Offset = "0x910D64", VA = "0x910D64")]
	public int activateLicense(string license_name, string license_key)
	{
		return default(int);
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x910E30", Offset = "0x910E30", VA = "0x910E30")]
	public int activateLicenseFile(string license_file_path)
	{
		return default(int);
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x910ED8", Offset = "0x910ED8", VA = "0x910ED8")]
	public int startStroke(double[,] hmd, int record_as_sample = -1)
	{
		return default(int);
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x910EF8", Offset = "0x910EF8", VA = "0x910EF8")]
	public int startStroke(Vector3 hmd_p, Quaternion hmd_q, int record_as_sample = -1)
	{
		return default(int);
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x9110D8", Offset = "0x9110D8", VA = "0x9110D8")]
	public int startStroke(double[] hmd_p, double[] hmd_q, int record_as_sample = -1)
	{
		return default(int);
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0x9110E0", Offset = "0x9110E0", VA = "0x9110E0")]
	public int updateHeadPosition(double[,] hmd)
	{
		return default(int);
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0x911100", Offset = "0x911100", VA = "0x911100")]
	public int updateHeadPosition(Vector3 hmd_p, Quaternion hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0x9112C8", Offset = "0x9112C8", VA = "0x9112C8")]
	public int updateHeadPosition(double[] hmd_p, double[] hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0x9112D0", Offset = "0x9112D0", VA = "0x9112D0")]
	public int contdStroke(Vector3 p)
	{
		return default(int);
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x911408", Offset = "0x911408", VA = "0x911408")]
	public int contdStroke(double[] p)
	{
		return default(int);
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x911410", Offset = "0x911410", VA = "0x911410")]
	public int contdStrokeQ(Vector3 p, Quaternion q)
	{
		return default(int);
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x9115D8", Offset = "0x9115D8", VA = "0x9115D8")]
	public int contdStrokeQ(double[] p, double[] q)
	{
		return default(int);
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x9115E0", Offset = "0x9115E0", VA = "0x9115E0")]
	public int contdStrokeQ(Vector3 p, Vector3 r)
	{
		return default(int);
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x91178C", Offset = "0x91178C", VA = "0x91178C")]
	public int contdStrokeE(double[] p, double[] r)
	{
		return default(int);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x911794", Offset = "0x911794", VA = "0x911794")]
	public int contdStrokeM(double[,] m)
	{
		return default(int);
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x9117B4", Offset = "0x9117B4", VA = "0x9117B4")]
	public int endStroke(ref Vector3 pos, ref double scale, ref Vector3 dir0, ref Vector3 dir1, ref Vector3 dir2)
	{
		return default(int);
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x911AA0", Offset = "0x911AA0", VA = "0x911AA0")]
	public int endStroke(ref Vector3 pos, ref double scale, ref Quaternion q)
	{
		return default(int);
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x911EF8", Offset = "0x911EF8", VA = "0x911EF8")]
	public int endStroke(ref double[] pos, ref double[] scale, ref double[] dir0, ref double[] dir1, ref double[] dir2)
	{
		return default(int);
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x911F14", Offset = "0x911F14", VA = "0x911F14")]
	public int endStroke()
	{
		return default(int);
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x911F30", Offset = "0x911F30", VA = "0x911F30")]
	public int endStroke(ref double similarity, ref Vector3 pos, ref double scale, ref Vector3 dir0, ref Vector3 dir1, ref Vector3 dir2)
	{
		return default(int);
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x912270", Offset = "0x912270", VA = "0x912270")]
	public int endStroke(ref double similarity, ref Vector3 pos, ref double scale, ref Quaternion q)
	{
		return default(int);
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x912700", Offset = "0x912700", VA = "0x912700")]
	public int endStroke(ref double[] similarity, ref double[] pos, ref double[] scale, ref double[] dir0, ref double[] dir1, ref double[] dir2)
	{
		return default(int);
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x912720", Offset = "0x912720", VA = "0x912720")]
	public int endStroke(ref double similarity)
	{
		return default(int);
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x9127BC", Offset = "0x9127BC", VA = "0x9127BC")]
	public int endStrokeAndGetAllProbabilities(ref double[] p)
	{
		return default(int);
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x91299C", Offset = "0x91299C", VA = "0x91299C")]
	public int endStrokeAndGetAllProbabilitiesAndSimilarities(ref double[] p, ref double[] s)
	{
		return default(int);
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x912C30", Offset = "0x912C30", VA = "0x912C30")]
	public bool isStrokeStarted()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x912CC8", Offset = "0x912CC8", VA = "0x912CC8")]
	public int cancelStroke()
	{
		return default(int);
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x912D4C", Offset = "0x912D4C", VA = "0x912D4C")]
	public int contdIdentify(Vector3 hmd_p, Quaternion hmd_q, ref double similarity)
	{
		return default(int);
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0x912F60", Offset = "0x912F60", VA = "0x912F60")]
	public int contdIdentifyAndGetAllProbabilitiesAndSimilarities(Vector3 hmd_p, Quaternion hmd_q, ref double[] p, ref double[] s)
	{
		return default(int);
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0x913208", Offset = "0x913208", VA = "0x913208")]
	public int contdRecord(Vector3 hmd_p, Quaternion hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0x90D024", Offset = "0x90D024", VA = "0x90D024")]
	public int numberOfGestures()
	{
		return default(int);
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x90D6C8", Offset = "0x90D6C8", VA = "0x90D6C8")]
	public int deleteGesture(int index)
	{
		return default(int);
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0x9136F0", Offset = "0x9136F0", VA = "0x9136F0")]
	public int deleteAllGestures()
	{
		return default(int);
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0x90D668", Offset = "0x90D668", VA = "0x90D668")]
	public int createGesture(string name)
	{
		return default(int);
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0x90FDBC", Offset = "0x90FDBC", VA = "0x90FDBC")]
	public double recognitionScore()
	{
		return default(double);
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0x90D02C", Offset = "0x90D02C", VA = "0x90D02C")]
	public string getGestureName(int index)
	{
		return null;
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0x9139E8", Offset = "0x9139E8", VA = "0x9139E8")]
	public string getGestureMetadataAsString(int index)
	{
		return null;
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x90D108", Offset = "0x90D108", VA = "0x90D108")]
	public int getGestureNumberOfSamples(int index)
	{
		return default(int);
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x913D40", Offset = "0x913D40", VA = "0x913D40")]
	public int getGestureSampleLength(int gesture_index, int sample_index, int processed)
	{
		return default(int);
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x913DE4", Offset = "0x913DE4", VA = "0x913DE4")]
	public int getGestureSampleStroke(int gesture_index, int sample_index, int processed, ref Vector3[] p, ref Quaternion[] q, ref Vector3[] hmd_p, ref Quaternion[] hmd_q)
	{
		return default(int);
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0x914338", Offset = "0x914338", VA = "0x914338")]
	public int getGestureMeanStroke(int gesture_index, ref Vector3[] p, ref Quaternion[] q, ref Vector3 stroke_p, ref Quaternion stroke_q, ref float scale)
	{
		return default(int);
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0x90D6D0", Offset = "0x90D6D0", VA = "0x90D6D0")]
	public int deleteGestureSample(int gesture_index, int sample_index)
	{
		return default(int);
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0x90D6D8", Offset = "0x90D6D8", VA = "0x90D6D8")]
	public int deleteAllGestureSamples(int gesture_index)
	{
		return default(int);
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0x9149DC", Offset = "0x9149DC", VA = "0x9149DC")]
	public int setGestureName(int index, string name)
	{
		return default(int);
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0x914A94", Offset = "0x914A94", VA = "0x914A94")]
	public int setGestureMetadataAsString(int index, string str)
	{
		return default(int);
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0x914D88", Offset = "0x914D88", VA = "0x914D88")]
	public bool getGestureEnabled(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0x914E28", Offset = "0x914E28", VA = "0x914E28")]
	public int setGestureEnabled(int index, bool enabled)
	{
		return default(int);
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0x914EC8", Offset = "0x914EC8", VA = "0x914EC8")]
	public int setUpdateHeadPositionPolicy(UpdateHeadPositionPolicy p)
	{
		return default(int);
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0x914F54", Offset = "0x914F54", VA = "0x914F54")]
	public UpdateHeadPositionPolicy getUpdateHeadPositionPolicy()
	{
		return default(UpdateHeadPositionPolicy);
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0x914FD8", Offset = "0x914FD8", VA = "0x914FD8")]
	public int saveToFile(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0x915080", Offset = "0x915080", VA = "0x915080")]
	public int loadFromFile(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0x915208", Offset = "0x915208", VA = "0x915208")]
	public int loadFromBuffer(byte[] buffer)
	{
		return default(int);
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0x9152F0", Offset = "0x9152F0", VA = "0x9152F0")]
	public int importFromFile(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0x9153D8", Offset = "0x9153D8", VA = "0x9153D8")]
	public int importFromBuffer(byte[] buffer)
	{
		return default(int);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x9154C0", Offset = "0x9154C0", VA = "0x9154C0")]
	public int importGestureSamples(GestureRecognition from_gro, int from_gesture_index, int into_gesture_index)
	{
		return default(int);
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x915578", Offset = "0x915578", VA = "0x915578")]
	public int importGestures(GestureRecognition from_gro)
	{
		return default(int);
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x915618", Offset = "0x915618", VA = "0x915618")]
	public int saveToFileAsync(string path)
	{
		return default(int);
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x9156C0", Offset = "0x9156C0", VA = "0x9156C0")]
	public int setSavingUpdateCallbackFunction(SavingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0x915754", Offset = "0x915754", VA = "0x915754")]
	public int setSavingUpdateCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0x9157E0", Offset = "0x9157E0", VA = "0x9157E0")]
	public int setSavingFinishCallbackFunction(SavingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0x915874", Offset = "0x915874", VA = "0x915874")]
	public int setSavingFinishCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x915900", Offset = "0x915900", VA = "0x915900")]
	public bool isSaving()
	{
		return default(bool);
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x915998", Offset = "0x915998", VA = "0x915998")]
	public int cancelSaving()
	{
		return default(int);
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x915A1C", Offset = "0x915A1C", VA = "0x915A1C")]
	public int loadFromFileAsync(string path)
	{
		return default(int);
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x915B04", Offset = "0x915B04", VA = "0x915B04")]
	public int loadFromBufferAsync(byte[] buffer)
	{
		return default(int);
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x915BEC", Offset = "0x915BEC", VA = "0x915BEC")]
	public int setLoadingUpdateCallbackFunction(LoadingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x915C80", Offset = "0x915C80", VA = "0x915C80")]
	public int setLoadingUpdateCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x915D0C", Offset = "0x915D0C", VA = "0x915D0C")]
	public int setLoadingFinishCallbackFunction(LoadingCallbackFunction callback_function)
	{
		return default(int);
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x915DA0", Offset = "0x915DA0", VA = "0x915DA0")]
	public int setLoadingFinishCallbackMetadata(IntPtr callback_metadata)
	{
		return default(int);
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x90FDA0", Offset = "0x90FDA0", VA = "0x90FDA0")]
	public bool isLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x915EA8", Offset = "0x915EA8", VA = "0x915EA8")]
	public int cancelLoading()
	{
		return default(int);
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x90FFC8", Offset = "0x90FFC8", VA = "0x90FFC8")]
	public int startTraining()
	{
		return default(int);
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x90FD84", Offset = "0x90FD84", VA = "0x90FD84")]
	public bool isTraining()
	{
		return default(bool);
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x90FFD0", Offset = "0x90FFD0", VA = "0x90FFD0")]
	public int stopTraining()
	{
		return default(int);
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x9160A0", Offset = "0x9160A0", VA = "0x9160A0")]
	public int getMaxTrainingTime()
	{
		return default(int);
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x916124", Offset = "0x916124", VA = "0x916124")]
	public void setMaxTrainingTime(int t)
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x9161B0", Offset = "0x9161B0", VA = "0x9161B0")]
	public void setTrainingUpdateCallback(TrainingCallbackFunction cbf)
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x916244", Offset = "0x916244", VA = "0x916244")]
	public void setTrainingUpdateCallbackMetadata(IntPtr metadata)
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x9162D0", Offset = "0x9162D0", VA = "0x9162D0")]
	public void setTrainingFinishCallback(TrainingCallbackFunction cbf)
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x916364", Offset = "0x916364", VA = "0x916364")]
	public void setTrainingFinishCallbackMetadata(IntPtr metadata)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x9163F0", Offset = "0x9163F0", VA = "0x9163F0")]
	public string getMetadataAsString()
	{
		return null;
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x916570", Offset = "0x916570", VA = "0x916570")]
	public int setMetadataAsString(string str)
	{
		return default(int);
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x9166B4", Offset = "0x9166B4", VA = "0x9166B4")]
	public static string getVersionString()
	{
		return null;
	}

	[PreserveSig]
	[Token(Token = "0x6000225")]
	[Address(RVA = "0x910BD0", Offset = "0x910BD0", VA = "0x910BD0")]
	public static extern IntPtr GestureRecognition_create();

	[PreserveSig]
	[Token(Token = "0x6000226")]
	[Address(RVA = "0x910CE8", Offset = "0x910CE8", VA = "0x910CE8")]
	public static extern void GestureRecognition_delete(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000227")]
	[Address(RVA = "0x910D6C", Offset = "0x910D6C", VA = "0x910D6C")]
	public static extern int GestureRecognition_activateLicense(IntPtr gro, string license_name, string license_key);

	[PreserveSig]
	[Token(Token = "0x6000228")]
	[Address(RVA = "0x910E38", Offset = "0x910E38", VA = "0x910E38")]
	public static extern int GestureRecognition_activateLicenseFile(IntPtr gro, string license_file_path);

	[PreserveSig]
	[Token(Token = "0x6000229")]
	[Address(RVA = "0x91102C", Offset = "0x91102C", VA = "0x91102C")]
	public static extern int GestureRecognition_startStroke(IntPtr gro, double[] hmd_p, double[] hmd_q, int record_as_sample);

	[PreserveSig]
	[Token(Token = "0x600022A")]
	[Address(RVA = "0x910EE0", Offset = "0x910EE0", VA = "0x910EE0")]
	public static extern int GestureRecognition_startStrokeM(IntPtr gro, double[,] hmd, int record_as_sample);

	[PreserveSig]
	[Token(Token = "0x600022B")]
	[Address(RVA = "0x9110E8", Offset = "0x9110E8", VA = "0x9110E8")]
	public static extern int GestureRecognition_updateHeadPositionM(IntPtr gro, double[,] hmd);

	[PreserveSig]
	[Token(Token = "0x600022C")]
	[Address(RVA = "0x911224", Offset = "0x911224", VA = "0x911224")]
	public static extern int GestureRecognition_updateHeadPositionQ(IntPtr gro, double[] hmd_p, double[] hmd_q);

	[PreserveSig]
	[Token(Token = "0x600022D")]
	[Address(RVA = "0x91137C", Offset = "0x91137C", VA = "0x91137C")]
	public static extern int GestureRecognition_contdStroke(IntPtr gro, double[] p);

	[PreserveSig]
	[Token(Token = "0x600022E")]
	[Address(RVA = "0x911534", Offset = "0x911534", VA = "0x911534")]
	public static extern int GestureRecognition_contdStrokeQ(IntPtr gro, double[] p, double[] q);

	[PreserveSig]
	[Token(Token = "0x600022F")]
	[Address(RVA = "0x9116E8", Offset = "0x9116E8", VA = "0x9116E8")]
	public static extern int GestureRecognition_contdStrokeE(IntPtr gro, double[] p, double[] r);

	[PreserveSig]
	[Token(Token = "0x6000230")]
	[Address(RVA = "0x91179C", Offset = "0x91179C", VA = "0x91179C")]
	public static extern int GestureRecognition_contdStrokeM(IntPtr gro, double[,] m);

	[PreserveSig]
	[Token(Token = "0x6000231")]
	[Address(RVA = "0x9119C4", Offset = "0x9119C4", VA = "0x9119C4")]
	public static extern int GestureRecognition_endStroke(IntPtr gro, double[] pos, double[] scale, double[] dir0, double[] dir1, double[] dir2);

	[PreserveSig]
	[Token(Token = "0x6000232")]
	[Address(RVA = "0x912898", Offset = "0x912898", VA = "0x912898")]
	public static extern int GestureRecognition_endStrokeAndGetAllProbabilities(IntPtr gro, double[] p, int[] n, double[] pos, double[] scale, double[] dir0, double[] dir1, double[] dir2);

	[PreserveSig]
	[Token(Token = "0x6000233")]
	[Address(RVA = "0x91217C", Offset = "0x91217C", VA = "0x91217C")]
	public static extern int GestureRecognition_endStrokeAndGetSimilarity(IntPtr gro, double[] similarity, double[] pos, double[] scale, double[] dir0, double[] dir1, double[] dir2);

	[PreserveSig]
	[Token(Token = "0x6000234")]
	[Address(RVA = "0x912B10", Offset = "0x912B10", VA = "0x912B10")]
	public static extern int GestureRecognition_endStrokeAndGetAllProbabilitiesAndSimilarities(IntPtr gro, double[] p, double[] s, int[] n, double[] pos, double[] scale, double[] dir0, double[] dir1, double[] dir2);

	[PreserveSig]
	[Token(Token = "0x6000235")]
	[Address(RVA = "0x912C4C", Offset = "0x912C4C", VA = "0x912C4C")]
	public static extern int GestureRecognition_isStrokeStarted(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000236")]
	[Address(RVA = "0x912CD0", Offset = "0x912CD0", VA = "0x912CD0")]
	public static extern int GestureRecognition_cancelStroke(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000237")]
	[Address(RVA = "0x912EB0", Offset = "0x912EB0", VA = "0x912EB0")]
	public static extern int GestureRecognition_contdIdentify(IntPtr gro, double[] hmd_p, double[] hmd_q, double[] similarity);

	[PreserveSig]
	[Token(Token = "0x6000238")]
	[Address(RVA = "0x91312C", Offset = "0x91312C", VA = "0x91312C")]
	public static extern int GestureRecognition_contdIdentifyAndGetAllProbabilitiesAndSimilarities(IntPtr gro, double[] hmd_p, double[] hmd_q, double[] p, double[] s, int[] n);

	[PreserveSig]
	[Token(Token = "0x6000239")]
	[Address(RVA = "0x91332C", Offset = "0x91332C", VA = "0x91332C")]
	public static extern int GestureRecognition_contdRecord(IntPtr gro, double[] hmd_p, double[] hmd_q);

	[PreserveSig]
	[Token(Token = "0x600023A")]
	[Address(RVA = "0x9133D8", Offset = "0x9133D8", VA = "0x9133D8")]
	public static extern int GestureRecognition_getContdIdentificationPeriod(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600023B")]
	[Address(RVA = "0x91345C", Offset = "0x91345C", VA = "0x91345C")]
	public static extern int GestureRecognition_setContdIdentificationPeriod(IntPtr gro, int ms);

	[PreserveSig]
	[Token(Token = "0x600023C")]
	[Address(RVA = "0x9134E8", Offset = "0x9134E8", VA = "0x9134E8")]
	public static extern int GestureRecognition_getContdIdentificationSmoothing(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600023D")]
	[Address(RVA = "0x91356C", Offset = "0x91356C", VA = "0x91356C")]
	public static extern int GestureRecognition_setContdIdentificationSmoothing(IntPtr gro, int samples);

	[PreserveSig]
	[Token(Token = "0x600023E")]
	[Address(RVA = "0x9135F0", Offset = "0x9135F0", VA = "0x9135F0")]
	public static extern int GestureRecognition_numberOfGestures(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600023F")]
	[Address(RVA = "0x91366C", Offset = "0x91366C", VA = "0x91366C")]
	public static extern int GestureRecognition_deleteGesture(IntPtr gro, int index);

	[PreserveSig]
	[Token(Token = "0x6000240")]
	[Address(RVA = "0x9136F8", Offset = "0x9136F8", VA = "0x9136F8")]
	public static extern int GestureRecognition_deleteAllGestures(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000241")]
	[Address(RVA = "0x913774", Offset = "0x913774", VA = "0x913774")]
	public static extern int GestureRecognition_createGesture(IntPtr gro, string name, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x6000242")]
	[Address(RVA = "0x913824", Offset = "0x913824", VA = "0x913824")]
	public static extern double GestureRecognition_recognitionScore(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000243")]
	[Address(RVA = "0x9138A0", Offset = "0x9138A0", VA = "0x9138A0")]
	public static extern int GestureRecognition_getGestureNameLength(IntPtr gro, int index);

	[PreserveSig]
	[Token(Token = "0x6000244")]
	[Address(RVA = "0x913924", Offset = "0x913924", VA = "0x913924")]
	public static extern int GestureRecognition_copyGestureName(IntPtr gro, int index, StringBuilder buf, int buflen);

	[PreserveSig]
	[Token(Token = "0x6000245")]
	[Address(RVA = "0x913B00", Offset = "0x913B00", VA = "0x913B00")]
	public static extern IntPtr GestureRecognition_getGestureMetadata(IntPtr gro, int index);

	[PreserveSig]
	[Token(Token = "0x6000246")]
	[Address(RVA = "0x913CBC", Offset = "0x913CBC", VA = "0x913CBC")]
	public static extern int GestureRecognition_getGestureNumberOfSamples(IntPtr gro, int index);

	[PreserveSig]
	[Token(Token = "0x6000247")]
	[Address(RVA = "0x913D48", Offset = "0x913D48", VA = "0x913D48")]
	public static extern int GestureRecognition_getGestureSampleLength(IntPtr gro, int gesture_index, int sample_index, int processed);

	[PreserveSig]
	[Token(Token = "0x6000248")]
	[Address(RVA = "0x914238", Offset = "0x914238", VA = "0x914238")]
	public static extern int GestureRecognition_getGestureSampleStroke(IntPtr gro, int gesture_index, int sample_index, int processed, int stroke_buf_size, double[] p, double[] q, double[] hmd_p, double[] hmd_q);

	[PreserveSig]
	[Token(Token = "0x6000249")]
	[Address(RVA = "0x91474C", Offset = "0x91474C", VA = "0x91474C")]
	public static extern int GestureRecognition_getGestureMeanLength(IntPtr gro, int gesture_index);

	[PreserveSig]
	[Token(Token = "0x600024A")]
	[Address(RVA = "0x9147D0", Offset = "0x9147D0", VA = "0x9147D0")]
	public static extern int GestureRecognition_getGestureMeanStroke(IntPtr gro, int gesture_index, double[] p, double[] q, int stroke_buf_size, double[] stroke_p, double[] stroke_q, double[] scale);

	[PreserveSig]
	[Token(Token = "0x600024B")]
	[Address(RVA = "0x9148C4", Offset = "0x9148C4", VA = "0x9148C4")]
	public static extern int GestureRecognition_deleteGestureSample(IntPtr gro, int gesture_index, int sample_index);

	[PreserveSig]
	[Token(Token = "0x600024C")]
	[Address(RVA = "0x914958", Offset = "0x914958", VA = "0x914958")]
	public static extern int GestureRecognition_deleteAllGestureSamples(IntPtr gro, int gesture_index);

	[PreserveSig]
	[Token(Token = "0x600024D")]
	[Address(RVA = "0x9149E4", Offset = "0x9149E4", VA = "0x9149E4")]
	public static extern int GestureRecognition_setGestureName(IntPtr gro, int index, string name);

	[PreserveSig]
	[Token(Token = "0x600024E")]
	[Address(RVA = "0x914BC8", Offset = "0x914BC8", VA = "0x914BC8")]
	public static extern int GestureRecognition_setGestureMetadata(IntPtr gro, int index, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x600024F")]
	[Address(RVA = "0x914DA4", Offset = "0x914DA4", VA = "0x914DA4")]
	public static extern int GestureRecognition_getGestureEnabled(IntPtr gro, int index);

	[PreserveSig]
	[Token(Token = "0x6000250")]
	[Address(RVA = "0x914E34", Offset = "0x914E34", VA = "0x914E34")]
	public static extern int GestureRecognition_setGestureEnabled(IntPtr gro, int index, int enabled);

	[PreserveSig]
	[Token(Token = "0x6000251")]
	[Address(RVA = "0x914ED0", Offset = "0x914ED0", VA = "0x914ED0")]
	public static extern int GestureRecognition_setUpdateHeadPositionPolicy(IntPtr gro, int p);

	[PreserveSig]
	[Token(Token = "0x6000252")]
	[Address(RVA = "0x914F5C", Offset = "0x914F5C", VA = "0x914F5C")]
	public static extern int GestureRecognition_getUpdateHeadPositionPolicy(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000253")]
	[Address(RVA = "0x914FE0", Offset = "0x914FE0", VA = "0x914FE0")]
	public static extern int GestureRecognition_saveToFile(IntPtr gro, string path);

	[PreserveSig]
	[Token(Token = "0x6000254")]
	[Address(RVA = "0x915150", Offset = "0x915150", VA = "0x915150")]
	public static extern int GestureRecognition_loadFromFile(IntPtr gro, string path, MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x6000255")]
	[Address(RVA = "0x915240", Offset = "0x915240", VA = "0x915240")]
	public static extern int GestureRecognition_loadFromBuffer(IntPtr gro, byte[] buffer, int buffer_size, MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x6000256")]
	[Address(RVA = "0x915320", Offset = "0x915320", VA = "0x915320")]
	public static extern int GestureRecognition_importFromFile(IntPtr gro, string path, MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x6000257")]
	[Address(RVA = "0x915410", Offset = "0x915410", VA = "0x915410")]
	public static extern int GestureRecognition_importFromBuffer(IntPtr gro, byte[] buffer, int buffer_size, MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x6000258")]
	[Address(RVA = "0x9154DC", Offset = "0x9154DC", VA = "0x9154DC")]
	public static extern int GestureRecognition_importGestureSamples(IntPtr gro, IntPtr from_gro, int from_gesture_index, int into_gesture_index);

	[PreserveSig]
	[Token(Token = "0x6000259")]
	[Address(RVA = "0x915594", Offset = "0x915594", VA = "0x915594")]
	public static extern int GestureRecognition_importGestures(IntPtr gro, IntPtr from_gro);

	[PreserveSig]
	[Token(Token = "0x600025A")]
	[Address(RVA = "0x915620", Offset = "0x915620", VA = "0x915620")]
	public static extern int GestureRecognition_saveToFileAsync(IntPtr gro, string path);

	[PreserveSig]
	[Token(Token = "0x600025B")]
	[Address(RVA = "0x9156C8", Offset = "0x9156C8", VA = "0x9156C8")]
	public static extern int GestureRecognition_setSavingUpdateCallbackFunction(IntPtr gro, SavingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x600025C")]
	[Address(RVA = "0x91575C", Offset = "0x91575C", VA = "0x91575C")]
	public static extern int GestureRecognition_setSavingUpdateCallbackMetadata(IntPtr gro, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x600025D")]
	[Address(RVA = "0x9157E8", Offset = "0x9157E8", VA = "0x9157E8")]
	public static extern int GestureRecognition_setSavingFinishCallbackFunction(IntPtr gro, SavingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x600025E")]
	[Address(RVA = "0x91587C", Offset = "0x91587C", VA = "0x91587C")]
	public static extern int GestureRecognition_setSavingFinishCallbackMetadata(IntPtr gro, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x600025F")]
	[Address(RVA = "0x91591C", Offset = "0x91591C", VA = "0x91591C")]
	public static extern int GestureRecognition_isSaving(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000260")]
	[Address(RVA = "0x9159A0", Offset = "0x9159A0", VA = "0x9159A0")]
	public static extern int GestureRecognition_cancelSaving(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000261")]
	[Address(RVA = "0x915A4C", Offset = "0x915A4C", VA = "0x915A4C")]
	public static extern int GestureRecognition_loadFromFileAsync(IntPtr gro, string path, MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x6000262")]
	[Address(RVA = "0x915B3C", Offset = "0x915B3C", VA = "0x915B3C")]
	public static extern int GestureRecognition_loadFromBufferAsync(IntPtr gro, byte[] buffer, int buffer_size, MetadataCreatorFunction createMetadata);

	[PreserveSig]
	[Token(Token = "0x6000263")]
	[Address(RVA = "0x915BF4", Offset = "0x915BF4", VA = "0x915BF4")]
	public static extern int GestureRecognition_setLoadingUpdateCallbackFunction(IntPtr gro, LoadingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x6000264")]
	[Address(RVA = "0x915C88", Offset = "0x915C88", VA = "0x915C88")]
	public static extern int GestureRecognition_setLoadingUpdateCallbackMetadata(IntPtr gro, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x6000265")]
	[Address(RVA = "0x915D14", Offset = "0x915D14", VA = "0x915D14")]
	public static extern int GestureRecognition_setLoadingFinishCallbackFunction(IntPtr gro, LoadingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x6000266")]
	[Address(RVA = "0x915DA8", Offset = "0x915DA8", VA = "0x915DA8")]
	public static extern int GestureRecognition_setLoadingFinishCallbackMetadata(IntPtr gro, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x6000267")]
	[Address(RVA = "0x915E2C", Offset = "0x915E2C", VA = "0x915E2C")]
	public static extern int GestureRecognition_isLoading(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000268")]
	[Address(RVA = "0x915EB0", Offset = "0x915EB0", VA = "0x915EB0")]
	public static extern int GestureRecognition_cancelLoading(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000269")]
	[Address(RVA = "0x915F2C", Offset = "0x915F2C", VA = "0x915F2C")]
	public static extern int GestureRecognition_startTraining(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600026A")]
	[Address(RVA = "0x915FA8", Offset = "0x915FA8", VA = "0x915FA8")]
	public static extern int GestureRecognition_isTraining(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600026B")]
	[Address(RVA = "0x916024", Offset = "0x916024", VA = "0x916024")]
	public static extern int GestureRecognition_stopTraining(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600026C")]
	[Address(RVA = "0x9160A8", Offset = "0x9160A8", VA = "0x9160A8")]
	public static extern int GestureRecognition_getMaxTrainingTime(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600026D")]
	[Address(RVA = "0x91612C", Offset = "0x91612C", VA = "0x91612C")]
	public static extern void GestureRecognition_setMaxTrainingTime(IntPtr gro, int t);

	[PreserveSig]
	[Token(Token = "0x600026E")]
	[Address(RVA = "0x9161B8", Offset = "0x9161B8", VA = "0x9161B8")]
	public static extern void GestureRecognition_setTrainingUpdateCallback(IntPtr gro, TrainingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x600026F")]
	[Address(RVA = "0x9162D8", Offset = "0x9162D8", VA = "0x9162D8")]
	public static extern void GestureRecognition_setTrainingFinishCallback(IntPtr gro, TrainingCallbackFunction cbf);

	[PreserveSig]
	[Token(Token = "0x6000270")]
	[Address(RVA = "0x91624C", Offset = "0x91624C", VA = "0x91624C")]
	public static extern void GestureRecognition_setTrainingUpdateCallbackMetadata(IntPtr gro, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x6000271")]
	[Address(RVA = "0x91636C", Offset = "0x91636C", VA = "0x91636C")]
	public static extern void GestureRecognition_setTrainingFinishCallbackMetadata(IntPtr gro, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x6000272")]
	[Address(RVA = "0x91086C", Offset = "0x91086C", VA = "0x91086C")]
	public static extern int GestureRecognition_getIgnoreHeadRotationX(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000273")]
	[Address(RVA = "0x9108F4", Offset = "0x9108F4", VA = "0x9108F4")]
	public static extern void GestureRecognition_setIgnoreHeadRotationX(IntPtr gro, int on_off);

	[PreserveSig]
	[Token(Token = "0x6000274")]
	[Address(RVA = "0x910744", Offset = "0x910744", VA = "0x910744")]
	public static extern int GestureRecognition_getIgnoreHeadRotationY(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000275")]
	[Address(RVA = "0x9107CC", Offset = "0x9107CC", VA = "0x9107CC")]
	public static extern void GestureRecognition_setIgnoreHeadRotationY(IntPtr gro, int on_off);

	[PreserveSig]
	[Token(Token = "0x6000276")]
	[Address(RVA = "0x910994", Offset = "0x910994", VA = "0x910994")]
	public static extern int GestureRecognition_getIgnoreHeadRotationZ(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000277")]
	[Address(RVA = "0x910A1C", Offset = "0x910A1C", VA = "0x910A1C")]
	public static extern void GestureRecognition_setIgnoreHeadRotationZ(IntPtr gro, int on_off);

	[PreserveSig]
	[Token(Token = "0x6000278")]
	[Address(RVA = "0x9104E0", Offset = "0x9104E0", VA = "0x9104E0")]
	public static extern int GestureRecognition_getRotationalFrameOfReferenceX(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000279")]
	[Address(RVA = "0x910564", Offset = "0x910564", VA = "0x910564")]
	public static extern void GestureRecognition_setRotationalFrameOfReferenceX(IntPtr gro, int i);

	[PreserveSig]
	[Token(Token = "0x600027A")]
	[Address(RVA = "0x9103D0", Offset = "0x9103D0", VA = "0x9103D0")]
	public static extern int GestureRecognition_getRotationalFrameOfReferenceY(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600027B")]
	[Address(RVA = "0x910454", Offset = "0x910454", VA = "0x910454")]
	public static extern void GestureRecognition_setRotationalFrameOfReferenceY(IntPtr gro, int i);

	[PreserveSig]
	[Token(Token = "0x600027C")]
	[Address(RVA = "0x9105F0", Offset = "0x9105F0", VA = "0x9105F0")]
	public static extern int GestureRecognition_getRotationalFrameOfReferenceZ(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600027D")]
	[Address(RVA = "0x910674", Offset = "0x910674", VA = "0x910674")]
	public static extern void GestureRecognition_setRotationalFrameOfReferenceZ(IntPtr gro, int i);

	[PreserveSig]
	[Token(Token = "0x600027E")]
	[Address(RVA = "0x910AA8", Offset = "0x910AA8", VA = "0x910AA8")]
	public static extern int GestureRecognition_getRotationalFrameOfReferenceRotationOrder(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x600027F")]
	[Address(RVA = "0x910B2C", Offset = "0x910B2C", VA = "0x910B2C")]
	public static extern void GestureRecognition_setRotationalFrameOfReferenceRotationOrder(IntPtr gro, int rotOrd);

	[PreserveSig]
	[Token(Token = "0x6000280")]
	[Address(RVA = "0x916768", Offset = "0x916768", VA = "0x916768")]
	public static extern int GestureRecognition_getVersionStringLength();

	[PreserveSig]
	[Token(Token = "0x6000281")]
	[Address(RVA = "0x9167D0", Offset = "0x9167D0", VA = "0x9167D0")]
	public static extern int GestureRecognition_copyVersionString(StringBuilder buf, int buflen);

	[PreserveSig]
	[Token(Token = "0x6000282")]
	[Address(RVA = "0x916630", Offset = "0x916630", VA = "0x916630")]
	public static extern int GestureRecognition_setMetadata(IntPtr gro, IntPtr metadata);

	[PreserveSig]
	[Token(Token = "0x6000283")]
	[Address(RVA = "0x9164F4", Offset = "0x9164F4", VA = "0x9164F4")]
	public static extern IntPtr GestureRecognition_getMetadata(IntPtr gro);

	[PreserveSig]
	[Token(Token = "0x6000284")]
	[Address(RVA = "0x914B60", Offset = "0x914B60", VA = "0x914B60")]
	public static extern IntPtr GestureRecognition_createDefaultMetadata();

	[PreserveSig]
	[Token(Token = "0x6000285")]
	[Address(RVA = "0x914C5C", Offset = "0x914C5C", VA = "0x914C5C")]
	public static extern void GestureRecognition_deleteDefaultMetadata(IntPtr dmo);

	[PreserveSig]
	[Token(Token = "0x6000286")]
	[Address(RVA = "0x913B84", Offset = "0x913B84", VA = "0x913B84")]
	public static extern int GestureRecognition_getDefaultMetadataSize(IntPtr dmo);

	[PreserveSig]
	[Token(Token = "0x6000287")]
	[Address(RVA = "0x916878", Offset = "0x916878", VA = "0x916878")]
	public static extern int GestureRecognition_getDefaultMetadataData(IntPtr dmo, IntPtr data, int size);

	[PreserveSig]
	[Token(Token = "0x6000288")]
	[Address(RVA = "0x913C00", Offset = "0x913C00", VA = "0x913C00")]
	public static extern int GestureRecognition_getDefaultMetadataData(IntPtr dmo, StringBuilder sb, int sbLen);

	[PreserveSig]
	[Token(Token = "0x6000289")]
	[Address(RVA = "0x91690C", Offset = "0x91690C", VA = "0x91690C")]
	public static extern int GestureRecognition_setDefaultMetadataData(IntPtr dmo, IntPtr data, int size);

	[PreserveSig]
	[Token(Token = "0x600028A")]
	[Address(RVA = "0x914CD8", Offset = "0x914CD8", VA = "0x914CD8")]
	public static extern int GestureRecognition_setDefaultMetadataData(IntPtr dmo, string str, int strLen);

	[PreserveSig]
	[Token(Token = "0x600028B")]
	[Address(RVA = "0x9169A0", Offset = "0x9169A0", VA = "0x9169A0")]
	public static extern IntPtr GestureRecognition_defaultMetadataCreatorFunction();

	[PreserveSig]
	[Token(Token = "0x600028C")]
	[Address(RVA = "0x9150B0", Offset = "0x9150B0", VA = "0x9150B0")]
	public static extern MetadataCreatorFunction GestureRecognition_getDefaultMetadataCreatorFunction();
}
[Serializable]
[Token(Token = "0x2000039")]
public class GestureCompletionData
{
	[Token(Token = "0x200003A")]
	public class Part
	{
		[Token(Token = "0x200003B")]
		public enum Side
		{
			[Token(Token = "0x400012E")]
			Left,
			[Token(Token = "0x400012F")]
			Right
		}

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Side side;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector3 position;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public double scale;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion orientation;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 primaryDirection;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 secondaryDirection;

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x91708C", Offset = "0x91708C", VA = "0x91708C")]
		public Part()
		{
		}
	}

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int gestureID;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string gestureName;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public double similarity;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Part[] parts;

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x917028", Offset = "0x917028", VA = "0x917028")]
	public GestureCompletionData()
	{
	}
}
[Serializable]
[Token(Token = "0x200003C")]
public class GestureCompletionEvent : UnityEvent<GestureCompletionData>
{
	[Token(Token = "0x600029F")]
	[Address(RVA = "0x917094", Offset = "0x917094", VA = "0x917094")]
	public GestureCompletionEvent()
	{
	}
}
[Token(Token = "0x200003D")]
public class Mivry : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200003E")]
	public enum UnityXrPlugin
	{
		[Token(Token = "0x4000152")]
		OpenXR,
		[Token(Token = "0x4000153")]
		OculusVR,
		[Token(Token = "0x4000154")]
		SteamVR
	}

	[Serializable]
	[Token(Token = "0x200003F")]
	public enum MivryCoordinateSystem
	{
		[Token(Token = "0x4000156")]
		OpenXR,
		[Token(Token = "0x4000157")]
		OculusVR,
		[Token(Token = "0x4000158")]
		SteamVR,
		[Token(Token = "0x4000159")]
		UnrealEngine
	}

	[Serializable]
	[Token(Token = "0x2000040")]
	public enum InputType
	{
		[Token(Token = "0x400015B")]
		InputSystemControl,
		[Token(Token = "0x400015C")]
		Axis,
		[Token(Token = "0x400015D")]
		Button,
		[Token(Token = "0x400015E")]
		Key,
		[Token(Token = "0x400015F")]
		Value
	}

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("License Name (ID) of your MiVRy license. Leave empty for free version.")]
	public string LicenseName;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("License Key of your MiVRy license. Leave empty for free version.")]
	public string LicenseKey;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Path to file containing License ID and License Key of your MiVRy license. Leave empty for free version.")]
	public string LicenseFilePath;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Path to the .dat file to load gestures from.")]
	public string GestureDatabaseFile;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("The Unity XR plugin used in this project (see: Project Settings -> XR Plugin Manager).")]
	public UnityXrPlugin unityXrPlugin;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("The coordinate system MiVRy should use internally (or that the GestureDatabase file was created with).")]
	public MivryCoordinateSystem mivryCoordinateSystem;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("GameObject to use as the position of the left hand.")]
	public GameObject LeftHand;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The name of the input (in Project Settings -> Input Manager) or Input System Control ('<XRController>{LeftHand}/trigger') that triggers the start/end of a gesture.")]
	public string LeftTriggerInput;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Type of the input (in Project Settings -> Input Manager) that triggers the start/end of a gesture. 'Input System Control' when using the new Input System. 'Value' to manually set LeftTriggerValue.")]
	public InputType LeftTriggerInputType;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[Tooltip("Current value of the trigger input (0~1). If the input type is 'value', this variable controls when a gesture starts/ends (>= threshold).")]
	public float LeftTriggerValue;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("If the input is 'Axis', how strongly it has to be pressed (0~1) to start the gesture.")]
	public float LeftTriggerThreshold;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("GameObject to use as the position of the right hand.")]
	public GameObject RightHand;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("The name of the input (in Project Settings -> Input Manager) or Input System Control ('<XRController>{LeftHand}/trigger') that triggers the start/end of a gesture.")]
	public string RightTriggerInput;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Type of the input (in Project Settings -> Input Manager) that triggers the start/end of a gesture. 'Input System Control' when using the new Input System. 'Value' to manually set RightTriggerValue.")]
	public InputType RightTriggerInputType;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Current value of the trigger input (0~1). If the input type is 'value', this variable controls when a gesture starts/ends (>= threshold).")]
	public float RightTriggerValue;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("How strong the button has to be pressed (0~1) to start the gesture.")]
	public float RightTriggerThreshold;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Tooltip("Whether gestures should be identified continuously during gesturing (instead of only after a gesture motion).")]
	public bool ContinuousGestureRecognition;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Time frame (in milliseconds) that continuous gestures are expected to be.")]
	public int ContinuousGesturePeriod;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("Time frame (in milliseconds) that continuous gestures are expected to be.")]
	public int ContinuousGestureSmoothing;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("Event to trigger when a gesture was performed.")]
	[SerializeField]
	public GestureCompletionEvent OnGestureCompletion;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool InputAction_LeftTriggerPressed;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
	private bool InputAction_RightTriggerPressed;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
	private bool LeftHandActive;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x93")]
	private bool RightHandActive;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GestureRecognition gr;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GestureCombinations gc;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GestureCompletionData data;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Quaternion RotateYp56;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly Quaternion RotateYm56;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly Quaternion RotateZp90;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly Quaternion RotateZm90;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static readonly Quaternion RotateXZY;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static readonly Quaternion RotateXYZ;

	[Token(Token = "0x1700002B")]
	public bool compensateHeadMotion
	{
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x9170DC", Offset = "0x9170DC", VA = "0x9170DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x917118", Offset = "0x917118", VA = "0x917118")]
	public void OnInputAction_LeftTrigger(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x9176CC", Offset = "0x9176CC", VA = "0x9176CC")]
	public void OnInputAction_LeftTriggerPress(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x9176D8", Offset = "0x9176D8", VA = "0x9176D8")]
	public void OnInputAction_LeftTriggerRelease(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x9176E0", Offset = "0x9176E0", VA = "0x9176E0")]
	public void OnInputAction_RightTrigger(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x9177A0", Offset = "0x9177A0", VA = "0x9177A0")]
	public void OnInputAction_RightTriggerPress(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x9177AC", Offset = "0x9177AC", VA = "0x9177AC")]
	public void OnInputAction_RightTriggerRelease(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x9177B4", Offset = "0x9177B4", VA = "0x9177B4")]
	public float getInputControlValue(string controlName)
	{
		return default(float);
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x9171D8", Offset = "0x9171D8", VA = "0x9171D8")]
	public float getInputControlValue(InputControl control)
	{
		return default(float);
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x91789C", Offset = "0x91789C", VA = "0x91789C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x91813C", Offset = "0x91813C", VA = "0x91813C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x91828C", Offset = "0x91828C", VA = "0x91828C")]
	private void UpdateGR()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x918804", Offset = "0x918804", VA = "0x918804")]
	private void UpdateGC()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x9194BC", Offset = "0x9194BC", VA = "0x9194BC")]
	public static void convertHandInput(UnityXrPlugin unityXrPlugin, MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x919328", Offset = "0x919328", VA = "0x919328")]
	public static void convertHeadInput(MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x919850", Offset = "0x919850", VA = "0x919850")]
	public static void convertOutput(MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x919974", Offset = "0x919974", VA = "0x919974")]
	public static void convertBackHandInput(MivryCoordinateSystem mivryCoordinateSystem, UnityXrPlugin unityXrPlugin, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x919D88", Offset = "0x919D88", VA = "0x919D88")]
	public static void convertBackHeadInput(MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x919F24", Offset = "0x919F24", VA = "0x919F24")]
	public Mivry()
	{
	}
}
[Token(Token = "0x2000041")]
public class Sample_Continuous : MonoBehaviour
{
	[Token(Token = "0x2000042")]
	public class StrokePoint
	{
		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float time;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int stroke_index;

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x91C9FC", Offset = "0x91C9FC", VA = "0x91C9FC")]
		public StrokePoint(Vector3 p)
		{
		}
	}

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float RecognitionInterval;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float GesturePeriod;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string LoadGesturesFile;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string SaveGesturesFile;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public string LicenseName;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public string LicenseKey;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GestureRecognition gr;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Text HUDText;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject active_controller;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject active_controller_pointer;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool button_a_pressed;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int recording_gesture;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private double last_performance_report;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float last_recognition_time;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float stroke_start_time;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<StrokePoint> stroke;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<GameObject> created_objects;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GCHandle me;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x91A234", Offset = "0x91A234", VA = "0x91A234")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x91A514", Offset = "0x91A514", VA = "0x91A514")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x91A5B4", Offset = "0x91A5B4", VA = "0x91A5B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x91B524", Offset = "0x91B524", VA = "0x91B524")]
	private void Update()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x91A0DC", Offset = "0x91A0DC", VA = "0x91A0DC")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingUpdateCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x91A184", Offset = "0x91A184", VA = "0x91A184")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingFinishCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x91CE44", Offset = "0x91CE44", VA = "0x91CE44")]
	public Sample_Continuous()
	{
	}
}
[Token(Token = "0x2000043")]
public class Sample_Military : MonoBehaviour
{
	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public string LicenseName;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public string LicenseKey;

	[Token(Token = "0x4000178")]
	public const int Side_Left = 0;

	[Token(Token = "0x4000179")]
	public const int Side_Right = 1;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool trigger_pressed_left;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool trigger_pressed_right;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool gesture_started;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GestureCombinations gc;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int current_tutorial_step;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Text HUDText;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject illustration;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RawImage illustration_image;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<string> stroke;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int stroke_index;

	[Token(Token = "0x4000184")]
	private const string illustration_path = "Sample_Military_Illustration_";

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string[] gestures;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x91CFC4", Offset = "0x91CFC4", VA = "0x91CFC4")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x91D2A4", Offset = "0x91D2A4", VA = "0x91D2A4")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x91D344", Offset = "0x91D344", VA = "0x91D344")]
	private void Start()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x91E03C", Offset = "0x91E03C", VA = "0x91E03C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x91E8B8", Offset = "0x91E8B8", VA = "0x91E8B8")]
	public void addToStrokeTrail(Vector3 p)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x91ECD0", Offset = "0x91ECD0", VA = "0x91ECD0")]
	public Sample_Military()
	{
	}
}
[Token(Token = "0x2000044")]
public class Sample_Mivry : MonoBehaviour
{
	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool canPringLog;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Prefab;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text HUDText;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action FinishedT1;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action FinishedC1;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Sample_Mivry Instance;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float successValue_T1;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float successValue_C1;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform[] TriggerObjs;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int index;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform CurrentTriggerObj;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool isTest;

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x9426E4", Offset = "0x9426E4", VA = "0x9426E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x942800", Offset = "0x942800", VA = "0x942800")]
	public void SetTriggerEnable(int index)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x9428AC", Offset = "0x9428AC", VA = "0x9428AC")]
	public void SetTriggerDisable(int index)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x942980", Offset = "0x942980", VA = "0x942980")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x942C60", Offset = "0x942C60", VA = "0x942C60")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x942D00", Offset = "0x942D00", VA = "0x942D00")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x942DD0", Offset = "0x942DD0", VA = "0x942DD0")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x942DD4", Offset = "0x942DD4", VA = "0x942DD4")]
	public void OnGestureCompleted(GestureCompletionData data)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x9432DC", Offset = "0x9432DC", VA = "0x9432DC")]
	public Sample_Mivry()
	{
	}
}
[Token(Token = "0x2000045")]
public class Sample_OneHanded : MonoBehaviour
{
	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string LoadGesturesFile;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string SaveGesturesFile;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public string LicenseName;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public string LicenseKey;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GestureRecognition gr;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Text HUDText;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject active_controller;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject active_controller_pointer;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool button_a_pressed;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int recording_gesture;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private double last_performance_report;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<string> stroke;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int stroke_index;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<GameObject> created_objects;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GCHandle me;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x9434D8", Offset = "0x9434D8", VA = "0x9434D8")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x9437B8", Offset = "0x9437B8", VA = "0x9437B8")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x943858", Offset = "0x943858", VA = "0x943858")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x944544", Offset = "0x944544", VA = "0x944544")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x943380", Offset = "0x943380", VA = "0x943380")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingUpdateCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x943428", Offset = "0x943428", VA = "0x943428")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingFinishCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x945A9C", Offset = "0x945A9C", VA = "0x945A9C")]
	private GameObject getClosestObject(Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x945D94", Offset = "0x945D94", VA = "0x945D94")]
	public Sample_OneHanded()
	{
	}
}
[Token(Token = "0x2000046")]
public class Sample_Phone : MonoBehaviour
{
	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public string LicenseName;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public string LicenseKey;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GestureRecognition gr;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Text HUDText;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int recording_gesture;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private double last_performance_report;

	[Token(Token = "0x40001AA")]
	private const int ButtonID_None = 0;

	[Token(Token = "0x40001AB")]
	private const int ButtonID_Record = 1;

	[Token(Token = "0x40001AC")]
	private const int ButtonID_Train = 2;

	[Token(Token = "0x40001AD")]
	private const int ButtonID_Exit = 3;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int button_id;

	[Token(Token = "0x40001AF")]
	private const int ButtonState_Idle = 0;

	[Token(Token = "0x40001B0")]
	private const int ButtonState_Pressed = 1;

	[Token(Token = "0x40001B1")]
	private const int ButtonState_Released = 2;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int button_state;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool making_stroke;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly string[] gesture_name_suggestions;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<string> gesture_name_suggestions_list;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private System.Random rnd;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GCHandle me;

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x946064", Offset = "0x946064", VA = "0x946064")]
	private string getRandomWord()
	{
		return null;
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x946220", Offset = "0x946220", VA = "0x946220")]
	private void Start()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x9463A4", Offset = "0x9463A4", VA = "0x9463A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x945F0C", Offset = "0x945F0C", VA = "0x945F0C")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingUpdateCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0x945FB4", Offset = "0x945FB4", VA = "0x945FB4")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingFinishCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x9472F4", Offset = "0x9472F4", VA = "0x9472F4")]
	public Sample_Phone()
	{
	}
}
[Token(Token = "0x2000047")]
public class Sample_Pixie : MonoBehaviour
{
	[Token(Token = "0x2000048")]
	public class Pixie
	{
		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameObject gameobject;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool action_finished;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 target_position;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 target_orientation;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string target_trigger;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speed;

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x948D1C", Offset = "0x948D1C", VA = "0x948D1C")]
		public Pixie()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x9497B0", Offset = "0x9497B0", VA = "0x9497B0")]
		public void update()
		{
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x949FCC", Offset = "0x949FCC", VA = "0x949FCC")]
		public void triggerCome(Vector3 pos)
		{
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x94A048", Offset = "0x94A048", VA = "0x94A048")]
		public void triggerGo(Vector3 pos)
		{
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x94A0C4", Offset = "0x94A0C4", VA = "0x94A0C4")]
		public void triggerSpin(Vector3 pos)
		{
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x94A180", Offset = "0x94A180", VA = "0x94A180")]
		public void triggerFlip(Vector3 pos, Vector3 dir)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x94A210", Offset = "0x94A210", VA = "0x94A210")]
		public void triggerPeekaboo()
		{
		}
	}

	[Token(Token = "0x2000049")]
	public abstract class Step
	{
		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected double similarity;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Vector3 pos;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected double scale;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 dir0;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Vector3 dir1;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Vector3 dir2;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool completed;

		[Token(Token = "0x60002E7")]
		public abstract void init(ref GestureRecognition gr);

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x94A264", Offset = "0x94A264", VA = "0x94A264", Slot = "5")]
		public virtual void dragStart(ref GestureRecognition gr, Vector3 hmd_p, Quaternion hmd_q)
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x94A284", Offset = "0x94A284", VA = "0x94A284", Slot = "6")]
		public virtual void dragContd(ref GestureRecognition gr, Vector3 hmd_p, Quaternion hmd_q, Vector3 controller_p, Quaternion controller_q)
		{
		}

		[Token(Token = "0x60002EA")]
		public abstract void dragStop(ref GestureRecognition gr, ref Pixie pixie);

		[Token(Token = "0x60002EB")]
		public abstract Step nextStep();

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x94A300", Offset = "0x94A300", VA = "0x94A300")]
		protected Step()
		{
		}
	}

	[Token(Token = "0x200004A")]
	public class Step0_PressTrigger : Step
	{
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x94A39C", Offset = "0x94A39C", VA = "0x94A39C", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x94A418", Offset = "0x94A418", VA = "0x94A418", Slot = "5")]
		public override void dragStart(ref GestureRecognition gr, Vector3 hmd_p, Quaternion hmd_q)
		{
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x94A41C", Offset = "0x94A41C", VA = "0x94A41C", Slot = "6")]
		public override void dragContd(ref GestureRecognition gr, Vector3 hmd_p, Quaternion hmd_q, Vector3 controller_p, Quaternion controller_q)
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x94A420", Offset = "0x94A420", VA = "0x94A420", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x94A5D0", Offset = "0x94A5D0", VA = "0x94A5D0", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x948E20", Offset = "0x948E20", VA = "0x948E20")]
		public Step0_PressTrigger()
		{
		}
	}

	[Token(Token = "0x200004B")]
	public class Step1_ComeHere : Step
	{
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x94A62C", Offset = "0x94A62C", VA = "0x94A62C", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x94A6A8", Offset = "0x94A6A8", VA = "0x94A6A8", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x94A788", Offset = "0x94A788", VA = "0x94A788", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x94A628", Offset = "0x94A628", VA = "0x94A628")]
		public Step1_ComeHere()
		{
		}
	}

	[Token(Token = "0x200004C")]
	public class Step2_GoThere : Step
	{
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x94A7E4", Offset = "0x94A7E4", VA = "0x94A7E4", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x94A860", Offset = "0x94A860", VA = "0x94A860", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x94A97C", Offset = "0x94A97C", VA = "0x94A97C", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x94A7E0", Offset = "0x94A7E0", VA = "0x94A7E0")]
		public Step2_GoThere()
		{
		}
	}

	[Token(Token = "0x200004D")]
	public class Step3_ComeHereAndGoThere : Step
	{
		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int num_commands_issued;

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x94A9D8", Offset = "0x94A9D8", VA = "0x94A9D8", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x94AA5C", Offset = "0x94AA5C", VA = "0x94AA5C", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x94AC68", Offset = "0x94AC68", VA = "0x94AC68", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x94A9D4", Offset = "0x94A9D4", VA = "0x94A9D4")]
		public Step3_ComeHereAndGoThere()
		{
		}
	}

	[Token(Token = "0x200004E")]
	public class Step4_Spin : Step
	{
		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int num_commands_issued;

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x94ACC4", Offset = "0x94ACC4", VA = "0x94ACC4", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x94AD44", Offset = "0x94AD44", VA = "0x94AD44", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x94AEB4", Offset = "0x94AEB4", VA = "0x94AEB4", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x94ACC0", Offset = "0x94ACC0", VA = "0x94ACC0")]
		public Step4_Spin()
		{
		}
	}

	[Token(Token = "0x200004F")]
	public class Step5_FlipRecord : Step
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int recorded_samples;

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x94AF10", Offset = "0x94AF10", VA = "0x94AF10", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x94B014", Offset = "0x94B014", VA = "0x94B014", Slot = "5")]
		public override void dragStart(ref GestureRecognition gr, Vector3 hmd_p, Quaternion hmd_q)
		{
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x94B034", Offset = "0x94B034", VA = "0x94B034", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x94B1A8", Offset = "0x94B1A8", VA = "0x94B1A8", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x94AF0C", Offset = "0x94AF0C", VA = "0x94AF0C")]
		public Step5_FlipRecord()
		{
		}
	}

	[Token(Token = "0x2000050")]
	public class Step6_FlipPerform : Step
	{
		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int num_commands_issued;

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x94B204", Offset = "0x94B204", VA = "0x94B204", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x94B284", Offset = "0x94B284", VA = "0x94B284", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x94B504", Offset = "0x94B504", VA = "0x94B504", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x94B200", Offset = "0x94B200", VA = "0x94B200")]
		public Step6_FlipPerform()
		{
		}
	}

	[Token(Token = "0x2000051")]
	public class Step7_PeekabooRecord : Step
	{
		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int recorded_samples;

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x94B560", Offset = "0x94B560", VA = "0x94B560", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x600030D")]
		[Address(RVA = "0x94B658", Offset = "0x94B658", VA = "0x94B658", Slot = "5")]
		public override void dragStart(ref GestureRecognition gr, Vector3 hmd_p, Quaternion hmd_q)
		{
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x94B678", Offset = "0x94B678", VA = "0x94B678", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x94B7EC", Offset = "0x94B7EC", VA = "0x94B7EC", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x94B55C", Offset = "0x94B55C", VA = "0x94B55C")]
		public Step7_PeekabooRecord()
		{
		}
	}

	[Token(Token = "0x2000052")]
	public class Step8_FreePlay : Step
	{
		[Token(Token = "0x6000311")]
		[Address(RVA = "0x94B848", Offset = "0x94B848", VA = "0x94B848", Slot = "4")]
		public override void init(ref GestureRecognition gr)
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x94B8C4", Offset = "0x94B8C4", VA = "0x94B8C4", Slot = "7")]
		public override void dragStop(ref GestureRecognition gr, ref Pixie pixie)
		{
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x94BAF4", Offset = "0x94BAF4", VA = "0x94BAF4", Slot = "8")]
		public override Step nextStep()
		{
			return null;
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0x94B844", Offset = "0x94B844", VA = "0x94B844")]
		public Step8_FreePlay()
		{
		}
	}

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public string LicenseName;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public string LicenseKey;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GestureRecognition gr;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Text HUDText;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject active_controller;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject active_controller_pointer;

	[Token(Token = "0x40001BE")]
	private const int gestureid_come = 0;

	[Token(Token = "0x40001BF")]
	private const int gestureid_go = 1;

	[Token(Token = "0x40001C0")]
	private const int gestureid_spin = 2;

	[Token(Token = "0x40001C1")]
	private const int gestureid_flip = 3;

	[Token(Token = "0x40001C2")]
	private const int gestureid_peekaboo = 4;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private double last_performance_report;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<string> stroke;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int stroke_index;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<GameObject> created_objects;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GCHandle me;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Pixie pixie;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Step current_step;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x947CDC", Offset = "0x947CDC", VA = "0x947CDC")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x947FBC", Offset = "0x947FBC", VA = "0x947FBC")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x94805C", Offset = "0x94805C", VA = "0x94805C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x948E24", Offset = "0x948E24", VA = "0x948E24")]
	private void Update()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x947B8C", Offset = "0x947B8C", VA = "0x947B8C")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingUpdateCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x947C34", Offset = "0x947C34", VA = "0x947C34")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingFinishCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x949E68", Offset = "0x949E68", VA = "0x949E68")]
	public Sample_Pixie()
	{
	}
}
[Token(Token = "0x2000053")]
public class Sample_TwoHanded : MonoBehaviour
{
	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public string LicenseName;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public string LicenseKey;

	[Token(Token = "0x40001E0")]
	public const int Side_Left = 0;

	[Token(Token = "0x40001E1")]
	public const int Side_Right = 1;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string LoadGesturesFile;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string SaveGesturesFile;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private double ControllerMotionDistanceThreshold;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private double ControllerMotionTimeThreshold;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private double controller_motion_distance_left;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private double controller_motion_distance_right;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private DateTime controller_motion_time_left;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private DateTime controller_motion_time_right;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 controller_motion_last_left;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 controller_motion_last_right;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool trigger_pressed_left;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool trigger_pressed_right;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool gesture_started;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GestureCombinations gc;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Text HUDText;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool button_a_pressed;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int recording_gesture;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private double last_performance_report;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<string> stroke;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int stroke_index;

	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GCHandle me;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x94BCA4", Offset = "0x94BCA4", VA = "0x94BCA4")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x94BF84", Offset = "0x94BF84", VA = "0x94BF84")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x94C024", Offset = "0x94C024", VA = "0x94C024")]
	private void Start()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x94C93C", Offset = "0x94C93C", VA = "0x94C93C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x94DAA8", Offset = "0x94DAA8", VA = "0x94DAA8")]
	public void addToStrokeTrail(Vector3 p)
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x94BB4C", Offset = "0x94BB4C", VA = "0x94BB4C")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingUpdateCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x94BBF4", Offset = "0x94BBF4", VA = "0x94BBF4")]
	[MonoPInvokeCallback(typeof(GestureRecognition.TrainingCallbackFunction))]
	public static void trainingFinishCallback(double performance, IntPtr ptr)
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x94DF2C", Offset = "0x94DF2C", VA = "0x94DF2C")]
	public Sample_TwoHanded()
	{
	}
}
[Token(Token = "0x2000054")]
public class TestDestroy : MonoBehaviour
{
	[Token(Token = "0x600031D")]
	[Address(RVA = "0x94E098", Offset = "0x94E098", VA = "0x94E098")]
	private void Start()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x94E108", Offset = "0x94E108", VA = "0x94E108")]
	private void Update()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x94E10C", Offset = "0x94E10C", VA = "0x94E10C")]
	public TestDestroy()
	{
	}
}
[Token(Token = "0x2000055")]
public class LightFlicker : MonoBehaviour
{
	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float initialValue;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Vector3 initialPosition;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 initialScale;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float initialTime;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Light lightRef;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float amount;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float speed;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool adjustLocation;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float locationAdjustAmount;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool adjustScale;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float scaleAdjustAmount;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform scaleObject;

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x94E114", Offset = "0x94E114", VA = "0x94E114")]
	private void Start()
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x94E26C", Offset = "0x94E26C", VA = "0x94E26C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x94E42C", Offset = "0x94E42C", VA = "0x94E42C")]
	public LightFlicker()
	{
	}
}
[Token(Token = "0x2000056")]
public class TileAnimation : MonoBehaviour
{
	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int xFrames;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int yFrames;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool billboard;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Camera mainCamera;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useURPProps;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int frame;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer rendererReference;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int randomStart;

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x94E44C", Offset = "0x94E44C", VA = "0x94E44C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x94E5D0", Offset = "0x94E5D0", VA = "0x94E5D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x94E920", Offset = "0x94E920", VA = "0x94E920")]
	public TileAnimation()
	{
	}
}
[Token(Token = "0x2000057")]
public class HandInputCtrl : MonoBehaviour
{
	[Token(Token = "0x6000326")]
	[Address(RVA = "0x94E93C", Offset = "0x94E93C", VA = "0x94E93C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x94E940", Offset = "0x94E940", VA = "0x94E940")]
	private void Update()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x94E944", Offset = "0x94E944", VA = "0x94E944")]
	public HandInputCtrl()
	{
	}
}
[Token(Token = "0x2000058")]
public class HandLine : LocomotionProvider
{
	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action FinishedToTargetPos;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool rayHitting;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public BLine bline;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LineRenderer lineRender;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("左手/右手")]
	public XRNode hand;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<HighlightEffect> _HighlightEffects;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool canTrigger;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector2 vec2DAxis;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public TeleportationProvider provider;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public XRRayInteractor teleportRayInteractor;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public XRInteractorLineVisual LineVisual;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TeleportPosTrigger targetTrigger;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private XRController xrcontroll;

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x94E94C", Offset = "0x94E94C", VA = "0x94E94C")]
	private new void Awake()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x94EB38", Offset = "0x94EB38", VA = "0x94EB38")]
	private void Start()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x94EB50", Offset = "0x94EB50", VA = "0x94EB50")]
	private void Init()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x94ECE8", Offset = "0x94ECE8", VA = "0x94ECE8")]
	private void Update()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x94F4FC", Offset = "0x94F4FC", VA = "0x94F4FC")]
	private void DetectHasTargetPosCollider2()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0x94EDE0", Offset = "0x94EDE0", VA = "0x94EDE0")]
	private void DetectHasTargetPosCollider()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x94F5EC", Offset = "0x94F5EC", VA = "0x94F5EC")]
	private void DrawLine()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x94F68C", Offset = "0x94F68C", VA = "0x94F68C")]
	private void AppearGroundHover()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x94EC4C", Offset = "0x94EC4C", VA = "0x94EC4C")]
	private void DisappearGroundHover()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x94F010", Offset = "0x94F010", VA = "0x94F010")]
	private void AXButtonUpHandler()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x94F7B8", Offset = "0x94F7B8", VA = "0x94F7B8")]
	public HandLine()
	{
	}
}
[Token(Token = "0x2000059")]
public class PlayerCameraCtrl : MonoBehaviour
{
	[Token(Token = "0x200005A")]
	[CompilerGenerated]
	private sealed class <DelaySetTeleportLockOrNot>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isLock;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerCameraCtrl <>4__this;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600034C")]
			[Address(RVA = "0x950990", Offset = "0x950990", VA = "0x950990", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600034E")]
			[Address(RVA = "0x9509D8", Offset = "0x9509D8", VA = "0x9509D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x9502B8", Offset = "0x9502B8", VA = "0x9502B8")]
		[DebuggerHidden]
		public <DelaySetTeleportLockOrNot>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x95086C", Offset = "0x95086C", VA = "0x95086C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x950870", Offset = "0x950870", VA = "0x950870", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x950998", Offset = "0x950998", VA = "0x950998", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005E")]
	[CompilerGenerated]
	private sealed class <TeleportToPointIE>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerCameraCtrl <>4__this;

		[Token(Token = "0x1700002E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600035C")]
			[Address(RVA = "0x950F04", Offset = "0x950F04", VA = "0x950F04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600035E")]
			[Address(RVA = "0x950F4C", Offset = "0x950F4C", VA = "0x950F4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x9506F4", Offset = "0x9506F4", VA = "0x9506F4")]
		[DebuggerHidden]
		public <TeleportToPointIE>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x950E4C", Offset = "0x950E4C", VA = "0x950E4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x950E50", Offset = "0x950E50", VA = "0x950E50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x950F0C", Offset = "0x950F0C", VA = "0x950F0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CapsuleCollider handRight;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider handLeft;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action ShowTeleportTips;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action ShowTeleportTipsFinished;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float NoTeleportCountingtime;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ShowTeleportTipsTime;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool startCouting_NoTeleport;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool CanCouting_NoTeleport;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	public Transform LeftLine;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	public Transform RightLine;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	public Transform LeftHand;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	public Transform RightHand;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerCameraCtrl Instance;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isDown;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	private bool isGrip;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private bool UpisGrip;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	private bool isGrip2;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool UpisGrip2;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float CameraY;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SpriteRenderer TeleportTips;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform vr;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float InitVRPos_Y;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private LocomotionSystem xroriginSys;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TeleportationProvider provider;

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x94F880", Offset = "0x94F880", VA = "0x94F880")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x94FB78", Offset = "0x94FB78", VA = "0x94FB78")]
	public void SetPlayerTriggerLayer(int _Layer = 2)
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x94FBF8", Offset = "0x94FBF8", VA = "0x94FBF8")]
	public void SetTeleportPosTriggerLayerIgnorePhysics(int TeleportPosTriggerLayer = 2)
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x94FC3C", Offset = "0x94FC3C", VA = "0x94FC3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x94FC40", Offset = "0x94FC40", VA = "0x94FC40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x9501F0", Offset = "0x9501F0", VA = "0x9501F0")]
	public void StartTeleportCounting()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x950200", Offset = "0x950200", VA = "0x950200")]
	public void StopTeleportCounting()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x94F7A8", Offset = "0x94F7A8", VA = "0x94F7A8")]
	public void ResetTeleportCounting()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x94FE20", Offset = "0x94FE20", VA = "0x94FE20")]
	public void CorrectionHeight()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x95018C", Offset = "0x95018C", VA = "0x95018C")]
	public void LockCameraPostion(bool isTrue = true)
	{
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x95020C", Offset = "0x95020C", VA = "0x95020C")]
	public void SetTeleportLockOrNot(bool isLock = true)
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x950230", Offset = "0x950230", VA = "0x950230")]
	[IteratorStateMachine(typeof(<DelaySetTeleportLockOrNot>d__35))]
	private IEnumerator DelaySetTeleportLockOrNot(bool isLock)
	{
		return null;
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x94FF20", Offset = "0x94FF20", VA = "0x94FF20")]
	public void AppearTeleportTips(bool hasParent = true, float showTime = 5f, float TeleportTipsDistance = 1.2f, float HeightOffset = 0f)
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x9502E8", Offset = "0x9502E8", VA = "0x9502E8")]
	public void AppearTips(SpriteRenderer tips, bool hasParent = true, float showTime = 5f, float TeleportTipsDistance = 1.2f, float HeightOffset = 0f)
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x9504D4", Offset = "0x9504D4", VA = "0x9504D4")]
	public void TeleportToPoint(Transform targetTrans)
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x950680", Offset = "0x950680", VA = "0x950680")]
	[IteratorStateMachine(typeof(<TeleportToPointIE>d__39))]
	private IEnumerator TeleportToPointIE()
	{
		return null;
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x9500EC", Offset = "0x9500EC", VA = "0x9500EC")]
	public void DisappearTeleportLine()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x95071C", Offset = "0x95071C", VA = "0x95071C")]
	public void DisappearSnapToTurn()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x95013C", Offset = "0x95013C", VA = "0x95013C")]
	public void AppearTeleportLine()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x950794", Offset = "0x950794", VA = "0x950794")]
	public void SetHandCapsuleColliderValue(float radius = 0.05f, float height = 0.3f, float x = -0.05f, float y = 0f, float z = 0f)
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x950854", Offset = "0x950854", VA = "0x950854")]
	public PlayerCameraCtrl()
	{
	}
}
[Token(Token = "0x200005F")]
public class PlayerTrigger : MonoBehaviour
{
	[Token(Token = "0x600035F")]
	[Address(RVA = "0x950F54", Offset = "0x950F54", VA = "0x950F54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x950F58", Offset = "0x950F58", VA = "0x950F58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x950F94", Offset = "0x950F94", VA = "0x950F94")]
	public PlayerTrigger()
	{
	}
}
[Token(Token = "0x2000060")]
public class SendHapticImpulse : MonoBehaviour
{
	[Token(Token = "0x2000061")]
	[CompilerGenerated]
	private sealed class <SendHighHapticImpulseIEMoreTimesIE>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SendHapticImpulse <>4__this;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RL;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float amplitude;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float duration;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float frequency;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int Times;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <times>5__2;

		[Token(Token = "0x17000030")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000371")]
			[Address(RVA = "0x95154C", Offset = "0x95154C", VA = "0x95154C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000031")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000373")]
			[Address(RVA = "0x951594", Offset = "0x951594", VA = "0x951594", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x951150", Offset = "0x951150", VA = "0x951150")]
		[DebuggerHidden]
		public <SendHighHapticImpulseIEMoreTimesIE>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x951430", Offset = "0x951430", VA = "0x951430", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x951434", Offset = "0x951434", VA = "0x951434", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x951554", Offset = "0x951554", VA = "0x951554", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000062")]
	[CompilerGenerated]
	private sealed class <_SendHapticImpulseIE>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SendHapticImpulse <>4__this;

		[Token(Token = "0x17000032")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000377")]
			[Address(RVA = "0x951660", Offset = "0x951660", VA = "0x951660", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0x9516A8", Offset = "0x9516A8", VA = "0x9516A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x9511FC", Offset = "0x9511FC", VA = "0x9511FC")]
		[DebuggerHidden]
		public <_SendHapticImpulseIE>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x95159C", Offset = "0x95159C", VA = "0x95159C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x9515A0", Offset = "0x9515A0", VA = "0x9515A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x951668", Offset = "0x951668", VA = "0x951668", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000063")]
	[CompilerGenerated]
	private sealed class <_SendHapticImpulseIE_R>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SendHapticImpulse <>4__this;

		[Token(Token = "0x17000034")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600037D")]
			[Address(RVA = "0x9517EC", Offset = "0x9517EC", VA = "0x9517EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600037F")]
			[Address(RVA = "0x951834", Offset = "0x951834", VA = "0x951834", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x951298", Offset = "0x951298", VA = "0x951298")]
		[DebuggerHidden]
		public <_SendHapticImpulseIE_R>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x9516B0", Offset = "0x9516B0", VA = "0x9516B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0x9516B4", Offset = "0x9516B4", VA = "0x9516B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0x9517F4", Offset = "0x9517F4", VA = "0x9517F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000064")]
	[CompilerGenerated]
	private sealed class <_SendHapticImpulseIE_L>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SendHapticImpulse <>4__this;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000383")]
			[Address(RVA = "0x95197C", Offset = "0x95197C", VA = "0x95197C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000385")]
			[Address(RVA = "0x9519C4", Offset = "0x9519C4", VA = "0x9519C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0x951334", Offset = "0x951334", VA = "0x951334")]
		[DebuggerHidden]
		public <_SendHapticImpulseIE_L>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x95183C", Offset = "0x95183C", VA = "0x95183C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x951840", Offset = "0x951840", VA = "0x951840", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x951984", Offset = "0x951984", VA = "0x951984", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SendHapticImpulse Instance;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool startImpulse;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool RL;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sean_DeviceController sean_Device;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float amplitude;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float duration;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine leftHand;

	[Token(Token = "0x4000248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Coroutine rightHand;

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x950F9C", Offset = "0x950F9C", VA = "0x950F9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x950FF4", Offset = "0x950FF4", VA = "0x950FF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x951054", Offset = "0x951054", VA = "0x951054")]
	private void Update()
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0x951058", Offset = "0x951058", VA = "0x951058")]
	public void _SendHapticImpulse(bool RL, float amplitude, float duration = 1f)
	{
	}

	[Token(Token = "0x6000366")]
	[Address(RVA = "0x951078", Offset = "0x951078", VA = "0x951078")]
	public void SendHighHapticImpulseIEMoreTimes(bool RL, float amplitude = 0.99f, float duration = 1f, int Times = 3, float frequency = 0.25f)
	{
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x95109C", Offset = "0x95109C", VA = "0x95109C")]
	[IteratorStateMachine(typeof(<SendHighHapticImpulseIEMoreTimesIE>d__13))]
	public IEnumerator SendHighHapticImpulseIEMoreTimesIE(bool RL, float amplitude, float duration, int Times, float frequency)
	{
		return null;
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x951178", Offset = "0x951178", VA = "0x951178")]
	[IteratorStateMachine(typeof(<_SendHapticImpulseIE>d__14))]
	private IEnumerator _SendHapticImpulseIE(bool RL, float amplitude, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x951224", Offset = "0x951224", VA = "0x951224")]
	[IteratorStateMachine(typeof(<_SendHapticImpulseIE_R>d__15))]
	private IEnumerator _SendHapticImpulseIE_R()
	{
		return null;
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x9512C0", Offset = "0x9512C0", VA = "0x9512C0")]
	[IteratorStateMachine(typeof(<_SendHapticImpulseIE_L>d__16))]
	private IEnumerator _SendHapticImpulseIE_L()
	{
		return null;
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x95135C", Offset = "0x95135C", VA = "0x95135C")]
	public void StartSendHapticImpulse(bool RL)
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x951404", Offset = "0x951404", VA = "0x951404")]
	public void StopSendHapticImpulse(bool RL)
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x951428", Offset = "0x951428", VA = "0x951428")]
	public SendHapticImpulse()
	{
	}
}
[Token(Token = "0x2000065")]
public class TeleportationController : MonoBehaviour
{
	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputActionProperty m_teleportModeActivate;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public InputActionProperty m_teleportModeCancel;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private InputAction teleportModeActivate;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private InputAction teleportModeCancel;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public XRRayInteractor teleportInteractor;

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x9519CC", Offset = "0x9519CC", VA = "0x9519CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x951A54", Offset = "0x951A54", VA = "0x951A54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x951A94", Offset = "0x951A94", VA = "0x951A94")]
	private void Update()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x951B2C", Offset = "0x951B2C", VA = "0x951B2C")]
	private void SetTeleportController(bool isEnable)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x951AD0", Offset = "0x951AD0", VA = "0x951AD0")]
	private bool CanEnterTeleport()
	{
		return default(bool);
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0x951BD0", Offset = "0x951BD0", VA = "0x951BD0")]
	private bool CanExitTeleport()
	{
		return default(bool);
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x951A18", Offset = "0x951A18", VA = "0x951A18")]
	private void EnableAction()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x951A58", Offset = "0x951A58", VA = "0x951A58")]
	private void DisableAction()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x951C28", Offset = "0x951C28", VA = "0x951C28")]
	public TeleportationController()
	{
	}
}
[Token(Token = "0x2000066")]
public class TeleportPosTrigger : MonoBehaviour
{
	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action TeleportToTargetPos;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform Pre_VFX_Poartal;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform TeleportPoint;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string Pre_VFX_Poartal_Name;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string TeleportPoint_Name;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool canTrigger;

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x951C30", Offset = "0x951C30", VA = "0x951C30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x951DD4", Offset = "0x951DD4", VA = "0x951DD4")]
	private bool SearchTransformName(Transform trans, string searchName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x951E10", Offset = "0x951E10", VA = "0x951E10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x951F20", Offset = "0x951F20", VA = "0x951F20")]
	private void Pre_VFX_PoartalOnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x951FA4", Offset = "0x951FA4", VA = "0x951FA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x94F728", Offset = "0x94F728", VA = "0x94F728")]
	public void TeleportToPoint()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x94F500", Offset = "0x94F500", VA = "0x94F500")]
	public void PlayEffect(XRNode hand)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x951FA8", Offset = "0x951FA8", VA = "0x951FA8")]
	public TeleportPosTrigger()
	{
	}
}
[Token(Token = "0x2000067")]
public enum GongjvStyle
{
	[Token(Token = "0x4000268")]
	None,
	[Token(Token = "0x4000269")]
	chuizi,
	[Token(Token = "0x400026A")]
	shuazi
}
[Token(Token = "0x2000068")]
public class XRGrabInteractable_X : XRGrabInteractable
{
	[Token(Token = "0x2000069")]
	[CompilerGenerated]
	private sealed class <FreezeRotIE>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRGrabInteractable_X <>4__this;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003AC")]
			[Address(RVA = "0x9532A8", Offset = "0x9532A8", VA = "0x9532A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003AE")]
			[Address(RVA = "0x9532F0", Offset = "0x9532F0", VA = "0x9532F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x9524F0", Offset = "0x9524F0", VA = "0x9524F0")]
		[DebuggerHidden]
		public <FreezeRotIE>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x9531C0", Offset = "0x9531C0", VA = "0x9531C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x9531C4", Offset = "0x9531C4", VA = "0x9531C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x9532B0", Offset = "0x9532B0", VA = "0x9532B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200006A")]
	[CompilerGenerated]
	private sealed class <SetHandStaticIE>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public XRGrabInteractable_X <>4__this;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform tr;

		[Token(Token = "0x1700003A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B2")]
			[Address(RVA = "0x953408", Offset = "0x953408", VA = "0x953408", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003B4")]
			[Address(RVA = "0x953450", Offset = "0x953450", VA = "0x953450", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x952D20", Offset = "0x952D20", VA = "0x952D20")]
		[DebuggerHidden]
		public <SetHandStaticIE>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x9532F8", Offset = "0x9532F8", VA = "0x9532F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x9532FC", Offset = "0x9532FC", VA = "0x9532FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x953410", Offset = "0x953410", VA = "0x953410", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
	public GongjvStyle style;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
	public Animator BrushAni;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
	private bool isCollison;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
	public Transform brushPointTrans;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
	public Vector3 StartBrush_pos;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
	public Vector3 StopBrush_pos;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
	public bool canGrap;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
	public string TargetName;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
	private uint handIndex;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
	private Sean_HandBase sean_HandBase;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
	public DeviceEventBase _DeviceEventBase;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
	public Sean_LeftHand leftHand;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
	public Sean_RightHand righHand;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
	public float FreezeDelay;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
	public Transform leftAttachTransform;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
	public Transform rightAttachTransform;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
	[SerializeField]
	private Vector3 InitHandPos;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
	[SerializeField]
	private Quaternion InitHandRot;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
	public Transform handTR;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
	public Transform handCotroller;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
	private Vector3 InitScale;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
	[SerializeField]
	private Transform LastAttachTrans;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
	private Rigidbody rig;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
	public bool isGrapping;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D1")]
	private bool canPlayEffectAudio;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
	private Coroutine freezeCor;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
	private bool isFreeze;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E4")]
	private int num;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
	private int num1;

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x952034", Offset = "0x952034", VA = "0x952034")]
	private new void Awake()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x952098", Offset = "0x952098", VA = "0x952098", Slot = "55")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x9520B4", Offset = "0x9520B4", VA = "0x9520B4", Slot = "56")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x9520D0", Offset = "0x9520D0", VA = "0x9520D0")]
	private void Start()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x95225C", Offset = "0x95225C", VA = "0x95225C")]
	private void Update()
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x9522DC", Offset = "0x9522DC", VA = "0x9522DC")]
	private Quaternion BrushAngles()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x9523C8", Offset = "0x9523C8", VA = "0x9523C8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0x95247C", Offset = "0x95247C", VA = "0x95247C")]
	[IteratorStateMachine(typeof(<FreezeRotIE>d__34))]
	private IEnumerator FreezeRotIE()
	{
		return null;
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0x952518", Offset = "0x952518", VA = "0x952518")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0x9525C4", Offset = "0x9525C4", VA = "0x9525C4")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0x9526EC", Offset = "0x9526EC", VA = "0x9526EC", Slot = "73")]
	protected override void OnSelectEntering(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0x9526F0", Offset = "0x9526F0", VA = "0x9526F0", Slot = "74")]
	protected override void OnSelectEntered(SelectEnterEventArgs args)
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x952D10", Offset = "0x952D10", VA = "0x952D10")]
	private void dfdf()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x952D18", Offset = "0x952D18", VA = "0x952D18")]
	private void dfdf1()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x952C80", Offset = "0x952C80", VA = "0x952C80")]
	[IteratorStateMachine(typeof(<SetHandStaticIE>d__43))]
	private IEnumerator SetHandStaticIE(Transform tr)
	{
		return null;
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x952D48", Offset = "0x952D48", VA = "0x952D48", Slot = "76")]
	protected override void OnSelectExited(SelectExitEventArgs args)
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x952FEC", Offset = "0x952FEC", VA = "0x952FEC")]
	public void OnSelectExitedSelf()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x953124", Offset = "0x953124", VA = "0x953124")]
	public XRGrabInteractable_X()
	{
	}
}
[Token(Token = "0x200006B")]
public class LogText : MonoBehaviour
{
	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x953458", Offset = "0x953458", VA = "0x953458")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x95364C", Offset = "0x95364C", VA = "0x95364C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x953594", Offset = "0x953594", VA = "0x953594")]
	public string GetUpPath(string path)
	{
		return null;
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x9535CC", Offset = "0x9535CC", VA = "0x9535CC")]
	private string GetNowTime()
	{
		return null;
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x953654", Offset = "0x953654", VA = "0x953654")]
	public LogText()
	{
	}
}
[Token(Token = "0x200006C")]
public class changeScene : MonoBehaviour
{
	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpriteRenderer sprite;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Hand testhand;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isPress;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isPress2;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool isLoadScene;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image circleImg;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Delay;

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x95365C", Offset = "0x95365C", VA = "0x95365C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x9536D0", Offset = "0x9536D0", VA = "0x9536D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x9536D4", Offset = "0x9536D4", VA = "0x9536D4")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x95374C", Offset = "0x95374C", VA = "0x95374C")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x9538C4", Offset = "0x9538C4", VA = "0x9538C4")]
	public changeScene()
	{
	}
}
[Token(Token = "0x200006D")]
public class Ending : Sean_SceneBase
{
	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x9538D4", Offset = "0x9538D4", VA = "0x9538D4")]
	private new void Awake()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x953960", Offset = "0x953960", VA = "0x953960")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x953A78", Offset = "0x953A78", VA = "0x953A78")]
	private new void Update()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x953A7C", Offset = "0x953A7C", VA = "0x953A7C")]
	public Ending()
	{
	}
}
[Token(Token = "0x200006E")]
public class VideoCtrl : MonoBehaviour
{
	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer render;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool startPlay;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public VideoPlayer player;

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x953A84", Offset = "0x953A84", VA = "0x953A84")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x953B2C", Offset = "0x953B2C", VA = "0x953B2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x953B30", Offset = "0x953B30", VA = "0x953B30")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x953B7C", Offset = "0x953B7C", VA = "0x953B7C")]
	public VideoCtrl()
	{
	}
}
[Token(Token = "0x200006F")]
public class BGMusicCtrl : MonoBehaviour
{
	[Token(Token = "0x2000071")]
	[CompilerGenerated]
	private sealed class <DealySetVolumIE>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BGMusicCtrl <>4__this;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float value;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float _time;

		[Token(Token = "0x1700003C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003DA")]
			[Address(RVA = "0x954430", Offset = "0x954430", VA = "0x954430", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003DC")]
			[Address(RVA = "0x954478", Offset = "0x954478", VA = "0x954478", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x954138", Offset = "0x954138", VA = "0x954138")]
		[DebuggerHidden]
		public <DealySetVolumIE>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x954370", Offset = "0x954370", VA = "0x954370", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x954374", Offset = "0x954374", VA = "0x954374", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x954438", Offset = "0x954438", VA = "0x954438", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000072")]
	[CompilerGenerated]
	private sealed class <DelayPlayNextAudio>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BGMusicCtrl <>4__this;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isLoop;

		[Token(Token = "0x1700003E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003E0")]
			[Address(RVA = "0x954540", Offset = "0x954540", VA = "0x954540", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003E2")]
			[Address(RVA = "0x954588", Offset = "0x954588", VA = "0x954588", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x9542B8", Offset = "0x9542B8", VA = "0x9542B8")]
		[DebuggerHidden]
		public <DelayPlayNextAudio>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x954480", Offset = "0x954480", VA = "0x954480", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x954484", Offset = "0x954484", VA = "0x954484", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x954548", Offset = "0x954548", VA = "0x954548", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BGMusicCtrl instance;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] clips;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioS;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int index;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action audioIsPause;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool IsPlaying;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool autoPlayNext;

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x953B84", Offset = "0x953B84", VA = "0x953B84")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x953C14", Offset = "0x953C14", VA = "0x953C14")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x953C18", Offset = "0x953C18", VA = "0x953C18")]
	private void Update()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x953E30", Offset = "0x953E30", VA = "0x953E30")]
	public void DisappearAudio()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x953F50", Offset = "0x953F50", VA = "0x953F50")]
	public void SetVolum(float value, float _time = 1f)
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x954080", Offset = "0x954080", VA = "0x954080")]
	public void DealySetVolum(float value, float delay, float _time = 1f)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x9540A0", Offset = "0x9540A0", VA = "0x9540A0")]
	[IteratorStateMachine(typeof(<DealySetVolumIE>d__13))]
	private IEnumerator DealySetVolumIE(float value, float delay, float _time)
	{
		return null;
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x954160", Offset = "0x954160", VA = "0x954160")]
	public void Play(int index = 0)
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x9541B8", Offset = "0x9541B8", VA = "0x9541B8")]
	public void AutoPlayNext(bool isLoop = true)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x954220", Offset = "0x954220", VA = "0x954220")]
	[IteratorStateMachine(typeof(<DelayPlayNextAudio>d__16))]
	public IEnumerator DelayPlayNextAudio(float delay, bool isLoop)
	{
		return null;
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x953C80", Offset = "0x953C80", VA = "0x953C80")]
	public void PlayNextAudio(bool isLoop = false)
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x9542E8", Offset = "0x9542E8", VA = "0x9542E8")]
	public BGMusicCtrl()
	{
	}
}
[Token(Token = "0x2000074")]
public class Chenyang : MonoBehaviour
{
	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int index;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Chenyang instance;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator ani;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioSource audio;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] clips;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action StartPicaiGame;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action StartTakeWeaponGame;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action startSeePig;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action StartShotting;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action StartShowFootPrint;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action StartOutSide;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action StartInSide;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isStoping;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action StartGotoHorseRoom;

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x954618", Offset = "0x954618", VA = "0x954618")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x954A50", Offset = "0x954A50", VA = "0x954A50")]
	private void Start()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x954A54", Offset = "0x954A54", VA = "0x954A54")]
	private void ShowInSide()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x954AD8", Offset = "0x954AD8", VA = "0x954AD8")]
	private void ShowOutSide()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x954B5C", Offset = "0x954B5C", VA = "0x954B5C")]
	private void PauseAni()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x954BA0", Offset = "0x954BA0", VA = "0x954BA0")]
	public void _StarHoresGame()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x954BC0", Offset = "0x954BC0", VA = "0x954BC0")]
	public void _StartPicaiGame()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x954BDC", Offset = "0x954BDC", VA = "0x954BDC")]
	public void _StartTakeWeaponGame()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x954BF8", Offset = "0x954BF8", VA = "0x954BF8")]
	public void StartPlayAni()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x954C74", Offset = "0x954C74", VA = "0x954C74")]
	private void DelayPlayAudio()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x954C90", Offset = "0x954C90", VA = "0x954C90")]
	public void FinishedPicai()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x954D58", Offset = "0x954D58", VA = "0x954D58")]
	public void FinishedShotting()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x954E4C", Offset = "0x954E4C", VA = "0x954E4C")]
	public void FinishedHorseEat()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x954F40", Offset = "0x954F40", VA = "0x954F40")]
	public void FinishedPigEat()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x955098", Offset = "0x955098", VA = "0x955098")]
	private void StartNextGame()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x95510C", Offset = "0x95510C", VA = "0x95510C")]
	private void ShowPig()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x955128", Offset = "0x955128", VA = "0x955128")]
	private void ShowShotting()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x955144", Offset = "0x955144", VA = "0x955144")]
	private void ShowFootPrint()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x955160", Offset = "0x955160", VA = "0x955160")]
	public void FinishedTakeWeapon()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x955220", Offset = "0x955220", VA = "0x955220")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x954980", Offset = "0x954980", VA = "0x954980")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x955224", Offset = "0x955224", VA = "0x955224")]
	[ContextMenu("完成砍材后的动画")]
	private void _FinishedPicai()
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x955228", Offset = "0x955228", VA = "0x955228")]
	[ContextMenu("完成整理武器后")]
	private void _FinishedTakeWeapon()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x95522C", Offset = "0x95522C", VA = "0x95522C")]
	[ContextMenu("完成射击后")]
	private void _FinishedShotting()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x955230", Offset = "0x955230", VA = "0x955230")]
	[ContextMenu("完成喂马后")]
	private void _FinishedHorseEat()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x955234", Offset = "0x955234", VA = "0x955234")]
	[ContextMenu("完成喂猪后")]
	private void _FinishedPigEat()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x955238", Offset = "0x955238", VA = "0x955238")]
	public Chenyang()
	{
	}
}
[Token(Token = "0x2000075")]
public class Futou : MonoBehaviour
{
	[Token(Token = "0x2000076")]
	[CompilerGenerated]
	private sealed class <StartPickIE>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Futou <>4__this;

		[Token(Token = "0x17000040")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600040F")]
			[Address(RVA = "0x955694", Offset = "0x955694", VA = "0x955694", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000411")]
			[Address(RVA = "0x9556DC", Offset = "0x9556DC", VA = "0x9556DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x955554", Offset = "0x955554", VA = "0x955554")]
		[DebuggerHidden]
		public <StartPickIE>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0x95558C", Offset = "0x95558C", VA = "0x95558C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x955590", Offset = "0x955590", VA = "0x955590", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x95569C", Offset = "0x95569C", VA = "0x95569C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Futou Instance;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BoxCollider[] collders;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool canSetCollider;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject futouTrigger;

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x955240", Offset = "0x955240", VA = "0x955240")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x955320", Offset = "0x955320", VA = "0x955320")]
	private void Start()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x955324", Offset = "0x955324", VA = "0x955324")]
	private void Update()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x955328", Offset = "0x955328", VA = "0x955328")]
	public void SetColliderAppear()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x955378", Offset = "0x955378", VA = "0x955378")]
	public void DelaySetFutouTriggerAppear()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x9553D4", Offset = "0x9553D4", VA = "0x9553D4")]
	public void SetFutouTriggerAppear()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x9553F4", Offset = "0x9553F4", VA = "0x9553F4")]
	public void SetFutouTriggerDisappear()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x955420", Offset = "0x955420", VA = "0x955420")]
	public void SetColliderDisppear()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x955464", Offset = "0x955464", VA = "0x955464")]
	public void SetCollider()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x9554C0", Offset = "0x9554C0", VA = "0x9554C0")]
	public void StartPick()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x9554E0", Offset = "0x9554E0", VA = "0x9554E0")]
	[IteratorStateMachine(typeof(<StartPickIE>d__14))]
	private IEnumerator StartPickIE()
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x95557C", Offset = "0x95557C", VA = "0x95557C")]
	public Futou()
	{
	}
}
[Token(Token = "0x2000077")]
public class GroundHover : MonoBehaviour
{
	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GroundHover Instance;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> HoverLightList;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<GameObject> CurrentLightList;

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x9556E4", Offset = "0x9556E4", VA = "0x9556E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x955900", Offset = "0x955900", VA = "0x955900")]
	private void Start()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x955904", Offset = "0x955904", VA = "0x955904")]
	private void Update()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x95582C", Offset = "0x95582C", VA = "0x95582C")]
	public void AddList(int index)
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x955908", Offset = "0x955908", VA = "0x955908")]
	public void RemoveList(int index)
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0x95598C", Offset = "0x95598C", VA = "0x95598C")]
	public void AppearHoverHighlight()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x955A2C", Offset = "0x955A2C", VA = "0x955A2C")]
	public void DisappearHoverHighlight()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x955ACC", Offset = "0x955ACC", VA = "0x955ACC")]
	public GroundHover()
	{
	}
}
[Token(Token = "0x2000078")]
public class guanzi : MonoBehaviour
{
	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HighlightEffect _HighlightEffect;

	[Token(Token = "0x600041A")]
	[Address(RVA = "0x955B84", Offset = "0x955B84", VA = "0x955B84")]
	private void Awake()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0x955BF4", Offset = "0x955BF4", VA = "0x955BF4")]
	private void Start()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0x955CC0", Offset = "0x955CC0", VA = "0x955CC0")]
	private void Update()
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0x955CC4", Offset = "0x955CC4", VA = "0x955CC4")]
	public guanzi()
	{
	}
}
[Token(Token = "0x2000079")]
public class guanziMananger : MonoBehaviour
{
	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public guanzi[] guanziArr;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static guanziMananger Instance;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action CaoduiAllBeFire;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action CaoduiStartBeFire;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int BeFireCount;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool isFinished;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isStart;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<HighlightEffect> caoHighlightList;

	[Token(Token = "0x600041E")]
	[Address(RVA = "0x955CCC", Offset = "0x955CCC", VA = "0x955CCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0x955D5C", Offset = "0x955D5C", VA = "0x955D5C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0x955D60", Offset = "0x955D60", VA = "0x955D60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0x955DDC", Offset = "0x955DDC", VA = "0x955DDC")]
	public void HightLightEffectEnable()
	{
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0x955E78", Offset = "0x955E78", VA = "0x955E78")]
	public void HightLightEffectDisable()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x955F14", Offset = "0x955F14", VA = "0x955F14")]
	public guanziMananger()
	{
	}
}
[Token(Token = "0x200007A")]
public class guochang : MonoBehaviour
{
	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action showfeng;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action showbiao;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action showjvhuo;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static guochang instance;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animator ani;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource audio;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip[] clips;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action StartPicaiGame;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action StartTakeWeaponGame;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action EndAni;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action StartIdle;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject[] bodys;

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x955F9C", Offset = "0x955F9C", VA = "0x955F9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x956420", Offset = "0x956420", VA = "0x956420")]
	private void ShowFeng()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x95643C", Offset = "0x95643C", VA = "0x95643C")]
	private void ShowBiao()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x956458", Offset = "0x956458", VA = "0x956458")]
	private void ShowJvhuo()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x956474", Offset = "0x956474", VA = "0x956474")]
	private void Start()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x956494", Offset = "0x956494", VA = "0x956494")]
	private void PauseAni()
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x9564C8", Offset = "0x9564C8", VA = "0x9564C8")]
	public void RePlayAni()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0x956528", Offset = "0x956528", VA = "0x956528")]
	private void PlayBG()
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0x956614", Offset = "0x956614", VA = "0x956614")]
	private void EnaAni()
	{
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0x956630", Offset = "0x956630", VA = "0x956630")]
	private void _StartIdle()
	{
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0x95664C", Offset = "0x95664C", VA = "0x95664C")]
	public void StartPlayAni()
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0x956684", Offset = "0x956684", VA = "0x956684")]
	private void DelayPlayAudio()
	{
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0x9566A0", Offset = "0x9566A0", VA = "0x9566A0")]
	public void PlayAcion1()
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0x956764", Offset = "0x956764", VA = "0x956764")]
	public void PlayAcion2()
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0x956874", Offset = "0x956874", VA = "0x956874")]
	private void DelayPlayAni()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0x956894", Offset = "0x956894", VA = "0x956894")]
	private void StartNextGame()
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0x956908", Offset = "0x956908", VA = "0x956908")]
	private void Update()
	{
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0x956350", Offset = "0x956350", VA = "0x956350")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x95690C", Offset = "0x95690C", VA = "0x95690C")]
	[ContextMenu("堠上（晨）")]
	private void _PlayAcion1()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x956910", Offset = "0x956910", VA = "0x956910")]
	[ContextMenu("堠上（晨）2")]
	private void _PlayAcion2()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x956914", Offset = "0x956914", VA = "0x956914")]
	public guochang()
	{
	}
}
[Token(Token = "0x200007B")]
public class HJ_Day : Sean_SceneBase
{
	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject VRFade;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public SpriteRenderer[] Tips;

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x95691C", Offset = "0x95691C", VA = "0x95691C")]
	private new void Awake()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x956A58", Offset = "0x956A58", VA = "0x956A58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x956CF4", Offset = "0x956CF4", VA = "0x956CF4")]
	private void Start()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x956CF8", Offset = "0x956CF8", VA = "0x956CF8")]
	private new void Update()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x956D00", Offset = "0x956D00", VA = "0x956D00")]
	public void StartGame1()
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x956D04", Offset = "0x956D04", VA = "0x956D04")]
	public HJ_Day()
	{
	}
}
[Token(Token = "0x200007C")]
public class Horse : MonoBehaviour
{
	[Token(Token = "0x200007D")]
	[CompilerGenerated]
	private sealed class <BeTouched>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Horse <>4__this;

		[Token(Token = "0x17000042")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000454")]
			[Address(RVA = "0x957F08", Offset = "0x957F08", VA = "0x957F08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000456")]
			[Address(RVA = "0x957F50", Offset = "0x957F50", VA = "0x957F50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x957164", Offset = "0x957164", VA = "0x957164")]
		[DebuggerHidden]
		public <BeTouched>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x957DB8", Offset = "0x957DB8", VA = "0x957DB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x957DBC", Offset = "0x957DBC", VA = "0x957DBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x957F10", Offset = "0x957F10", VA = "0x957F10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200007E")]
	[CompilerGenerated]
	private sealed class <StartEatFood>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Horse <>4__this;

		[Token(Token = "0x17000044")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600045A")]
			[Address(RVA = "0x9582BC", Offset = "0x9582BC", VA = "0x9582BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000045")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600045C")]
			[Address(RVA = "0x958304", Offset = "0x958304", VA = "0x958304", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x957678", Offset = "0x957678", VA = "0x957678")]
		[DebuggerHidden]
		public <StartEatFood>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x957F58", Offset = "0x957F58", VA = "0x957F58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x957F5C", Offset = "0x957F5C", VA = "0x957F5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0x9582C4", Offset = "0x9582C4", VA = "0x9582C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action HorseStartEat;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action FinishedEatFood;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action AnthorTurnBack;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float DelayShowCaoAni;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject food;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool AnotherHoresHasEat;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool seeFood;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform Target;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Animator ani;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float TurnRightAngel;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float TurnBackValue;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float SeeDistance;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float TurnHeadDistance;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool canStart;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public BoxCollider collider;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private bool isTurnRight;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Horse anotherHorse;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject NeedToDestroyCao;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform meshBody;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private bool canBeTouch;

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x956D0C", Offset = "0x956D0C", VA = "0x956D0C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x956EBC", Offset = "0x956EBC", VA = "0x956EBC")]
	public void RandomPlayHappy()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x956F68", Offset = "0x956F68", VA = "0x956F68")]
	private void OnTriggerEnter_PlayerHand(Collider other)
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x9570F0", Offset = "0x9570F0", VA = "0x9570F0")]
	[IteratorStateMachine(typeof(<BeTouched>d__23))]
	private IEnumerator BeTouched()
	{
		return null;
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x95718C", Offset = "0x95718C", VA = "0x95718C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x957190", Offset = "0x957190", VA = "0x957190")]
	private void StartPlayAni()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x9571B0", Offset = "0x9571B0", VA = "0x9571B0")]
	public void TurnRight()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x9572C0", Offset = "0x9572C0", VA = "0x9572C0")]
	public void TurnToAnother()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x957394", Offset = "0x957394", VA = "0x957394")]
	public void TurnBack()
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x957478", Offset = "0x957478", VA = "0x957478")]
	public void TurnBack2()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x957570", Offset = "0x957570", VA = "0x957570")]
	public void StartEat()
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x957604", Offset = "0x957604", VA = "0x957604")]
	[IteratorStateMachine(typeof(<StartEatFood>d__31))]
	private IEnumerator StartEatFood()
	{
		return null;
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x9576A0", Offset = "0x9576A0", VA = "0x9576A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x9576DC", Offset = "0x9576DC", VA = "0x9576DC")]
	public float CheckTargetDistance(Transform target)
	{
		return default(float);
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x9577C0", Offset = "0x9577C0", VA = "0x9577C0")]
	public void checkTargetDirForMe(Transform target)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x957C1C", Offset = "0x957C1C", VA = "0x957C1C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x957D8C", Offset = "0x957D8C", VA = "0x957D8C")]
	[ContextMenu("喂草")]
	private void EatFood()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x957D90", Offset = "0x957D90", VA = "0x957D90")]
	public Horse()
	{
	}
}
[Token(Token = "0x200007F")]
public class HorseAni : MonoBehaviour
{
	[Token(Token = "0x600045D")]
	[Address(RVA = "0x95830C", Offset = "0x95830C", VA = "0x95830C")]
	private void Start()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x958310", Offset = "0x958310", VA = "0x958310")]
	private void Update()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x958314", Offset = "0x958314", VA = "0x958314")]
	public void CanStartEat()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x95839C", Offset = "0x95839C", VA = "0x95839C")]
	public HorseAni()
	{
	}
}
[Token(Token = "0x2000080")]
public class HorseRoom : Sean_GameBase
{
	[Token(Token = "0x2000083")]
	[CompilerGenerated]
	private sealed class <ShowPicaiTips>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HorseRoom <>4__this;

		[Token(Token = "0x17000046")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000484")]
			[Address(RVA = "0x95ABE0", Offset = "0x95ABE0", VA = "0x95ABE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000486")]
			[Address(RVA = "0x95AC28", Offset = "0x95AC28", VA = "0x95AC28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x95A7C4", Offset = "0x95A7C4", VA = "0x95A7C4")]
		[DebuggerHidden]
		public <ShowPicaiTips>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x95A9CC", Offset = "0x95A9CC", VA = "0x95A9CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x95A9D0", Offset = "0x95A9D0", VA = "0x95A9D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x95ABE8", Offset = "0x95ABE8", VA = "0x95ABE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isStopMusic;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Plane_OutSide;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool FinishedAll;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Horse horseBlack;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Horse horseRed;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private int FinishedEatCount;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private List<DeviceEventBase> caoList;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Coroutine curAniTipsCor;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private string curAniTipsCorName;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private int curOutLineIndex;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int AniTipsIndex;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SpriteRenderer NPC_UI;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public SpriteRenderer[] doudiTips;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] AniTips;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Tween[] doudiTipsTw;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int lastIndex_doudiTips;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public CapsuleCollider handRight;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public CapsuleCollider handLeft;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject Plane_B;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform BPOSTrigger;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Transform TakeFoodTrigger;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform SeeFoodTrigger;

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x9583A4", Offset = "0x9583A4", VA = "0x9583A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x958F5C", Offset = "0x958F5C", VA = "0x958F5C")]
	private void BlackHorseStartEatFood()
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x958F74", Offset = "0x958F74", VA = "0x958F74")]
	private void RedHorseStartEatFood()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x958F8C", Offset = "0x958F8C", VA = "0x958F8C")]
	private void OnTriggerEnter_TakeFood(Collider other)
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x959018", Offset = "0x959018", VA = "0x959018")]
	private void OnTriggerEnter_SeeFood(Collider other)
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x9590A4", Offset = "0x9590A4", VA = "0x9590A4")]
	private void OnTriggerEnter_BPOS()
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0x958E9C", Offset = "0x958E9C", VA = "0x958E9C")]
	private void SetHandCapsuleColliderValue(float radius = 0.05f, float height = 0.3f, float x = -0.05f, float y = 0f, float z = 0f)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0x9591B8", Offset = "0x9591B8", VA = "0x9591B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0x959E24", Offset = "0x959E24", VA = "0x959E24")]
	private void ShowPigRoomPoint()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0x959380", Offset = "0x959380", VA = "0x959380")]
	public void Init()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0x959E94", Offset = "0x959E94", VA = "0x959E94")]
	private void InitToolsScripts(Transform trans)
	{
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x959A28", Offset = "0x959A28", VA = "0x959A28")]
	private void StartGame()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x95A020", Offset = "0x95A020", VA = "0x95A020")]
	private void HorseFinieshedEatFood()
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0x95A128", Offset = "0x95A128", VA = "0x95A128")]
	private void SetHighlightEffectFalse(Sean_HandBase hand, DeviceEventBase _DeviceEventBase)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0x95A144", Offset = "0x95A144", VA = "0x95A144")]
	private void SetHighlightEffectTrue(XRNode hand, DeviceEventBase _DeviceEventBase)
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0x95A160", Offset = "0x95A160", VA = "0x95A160")]
	private void Update()
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0x95A164", Offset = "0x95A164", VA = "0x95A164")]
	public void GrapPlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0x95A1C0", Offset = "0x95A1C0", VA = "0x95A1C0")]
	public void ReleasePlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0x95A21C", Offset = "0x95A21C", VA = "0x95A21C")]
	private void ReleaseHand(XRNode hand)
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x95A220", Offset = "0x95A220", VA = "0x95A220")]
	public void StarthandTips(XRNode hand)
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x95A2AC", Offset = "0x95A2AC", VA = "0x95A2AC")]
	public void StophandTips(Sean_HandBase handbase)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x95A5D4", Offset = "0x95A5D4", VA = "0x95A5D4")]
	private void showDoudiTips(int index)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x95A410", Offset = "0x95A410", VA = "0x95A410")]
	private void stopDoudiTips(int index)
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x959FAC", Offset = "0x959FAC", VA = "0x959FAC")]
	[IteratorStateMachine(typeof(<ShowPicaiTips>d__45))]
	private IEnumerator ShowPicaiTips()
	{
		return null;
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x95A7EC", Offset = "0x95A7EC", VA = "0x95A7EC")]
	[ContextMenu("完成交互")]
	private void _HorseFinieshedEatFood()
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0x95A894", Offset = "0x95A894", VA = "0x95A894")]
	public HorseRoom()
	{
	}
}
[Token(Token = "0x2000084")]
public class Houshang : Sean_GameBase
{
	[Token(Token = "0x2000085")]
	[CompilerGenerated]
	private sealed class <StartShowNPC_UI>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Houshang <>4__this;

		[Token(Token = "0x17000048")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004AC")]
			[Address(RVA = "0x95D8B8", Offset = "0x95D8B8", VA = "0x95D8B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000049")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004AE")]
			[Address(RVA = "0x95D900", Offset = "0x95D900", VA = "0x95D900", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0x95BA70", Offset = "0x95BA70", VA = "0x95BA70")]
		[DebuggerHidden]
		public <StartShowNPC_UI>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0x95D794", Offset = "0x95D794", VA = "0x95D794", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0x95D798", Offset = "0x95D798", VA = "0x95D798", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x95D8C0", Offset = "0x95D8C0", VA = "0x95D8C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000086")]
	[CompilerGenerated]
	private sealed class <ShowFengIE>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Houshang <>4__this;

		[Token(Token = "0x1700004A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B2")]
			[Address(RVA = "0x95D9E4", Offset = "0x95D9E4", VA = "0x95D9E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004B4")]
			[Address(RVA = "0x95DA2C", Offset = "0x95DA2C", VA = "0x95DA2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0x95BD50", Offset = "0x95BD50", VA = "0x95BD50")]
		[DebuggerHidden]
		public <ShowFengIE>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x95D908", Offset = "0x95D908", VA = "0x95D908", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x95D90C", Offset = "0x95D90C", VA = "0x95D90C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x95D9EC", Offset = "0x95D9EC", VA = "0x95D9EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <ShowBiaoIE>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Houshang <>4__this;

		[Token(Token = "0x1700004C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B8")]
			[Address(RVA = "0x95DB10", Offset = "0x95DB10", VA = "0x95DB10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004BA")]
			[Address(RVA = "0x95DB58", Offset = "0x95DB58", VA = "0x95DB58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x95BD78", Offset = "0x95BD78", VA = "0x95BD78")]
		[DebuggerHidden]
		public <ShowBiaoIE>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x95DA34", Offset = "0x95DA34", VA = "0x95DA34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x95DA38", Offset = "0x95DA38", VA = "0x95DA38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x95DB18", Offset = "0x95DB18", VA = "0x95DB18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000088")]
	[CompilerGenerated]
	private sealed class <ShowJvhuoIE>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400033A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400033B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400033C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Houshang <>4__this;

		[Token(Token = "0x1700004E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004BE")]
			[Address(RVA = "0x95DC3C", Offset = "0x95DC3C", VA = "0x95DC3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004C0")]
			[Address(RVA = "0x95DC84", Offset = "0x95DC84", VA = "0x95DC84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x95BDA0", Offset = "0x95BDA0", VA = "0x95BDA0")]
		[DebuggerHidden]
		public <ShowJvhuoIE>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x95DB60", Offset = "0x95DB60", VA = "0x95DB60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x95DB64", Offset = "0x95DB64", VA = "0x95DB64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x95DC44", Offset = "0x95DC44", VA = "0x95DC44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000089")]
	[CompilerGenerated]
	private sealed class <StartScreen>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400033D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400033E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000050")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004C4")]
			[Address(RVA = "0x95DD68", Offset = "0x95DD68", VA = "0x95DD68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000051")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0x95DDB0", Offset = "0x95DDB0", VA = "0x95DDB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x95C9D0", Offset = "0x95C9D0", VA = "0x95C9D0")]
		[DebuggerHidden]
		public <StartScreen>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x95DC8C", Offset = "0x95DC8C", VA = "0x95DC8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x95DC90", Offset = "0x95DC90", VA = "0x95DC90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x95DD70", Offset = "0x95DD70", VA = "0x95DD70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200008A")]
	[CompilerGenerated]
	private sealed class <ChangeSceneIE>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400033F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Houshang <>4__this;

		[Token(Token = "0x17000052")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004CA")]
			[Address(RVA = "0x95DF08", Offset = "0x95DF08", VA = "0x95DF08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000053")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004CC")]
			[Address(RVA = "0x95DF50", Offset = "0x95DF50", VA = "0x95DF50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x95D0A8", Offset = "0x95D0A8", VA = "0x95D0A8")]
		[DebuggerHidden]
		public <ChangeSceneIE>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x95DDB8", Offset = "0x95DDB8", VA = "0x95DDB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x95DDBC", Offset = "0x95DDBC", VA = "0x95DDBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x95DF10", Offset = "0x95DF10", VA = "0x95DF10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200008D")]
	[CompilerGenerated]
	private sealed class <ShowPicaiTips>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Houshang <>4__this;

		[Token(Token = "0x17000054")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004D4")]
			[Address(RVA = "0x95E1A4", Offset = "0x95E1A4", VA = "0x95E1A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004D6")]
			[Address(RVA = "0x95E1EC", Offset = "0x95E1EC", VA = "0x95E1EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x95D69C", Offset = "0x95D69C", VA = "0x95D69C")]
		[DebuggerHidden]
		public <ShowPicaiTips>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x95DFD8", Offset = "0x95DFD8", VA = "0x95DFD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x95DFDC", Offset = "0x95DFDC", VA = "0x95DFDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x95E1AC", Offset = "0x95E1AC", VA = "0x95E1AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator Pre_PingYueFont_V2;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SpriteRenderer[] tips;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PingYueCtrl _PingYueCtrl;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isOpen;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private DeviceEventBase zhujian;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private zhujian zhujianScript;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Interactive_Nu nuInteractive;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Coroutine curAniTipsCor;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private string curAniTipsCorName;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private int curOutLineIndex;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int AniTipsIndex;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SpriteRenderer NPC_UI;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public SpriteRenderer[] doudiTips;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] AniTips;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Tween[] doudiTipsTw;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int lastIndex_doudiTips;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GameObject Plane_A;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject Plane_C;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject Plane_D;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameObject Plane_E;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Transform CPOSTrigger;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform DPOSTrigger;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Transform APOSTrigger;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public HighlightEffect feng;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public HighlightEffect biao;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public HighlightEffect jvhuo;

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x95AC30", Offset = "0x95AC30", VA = "0x95AC30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x95B9FC", Offset = "0x95B9FC", VA = "0x95B9FC")]
	[IteratorStateMachine(typeof(<StartShowNPC_UI>d__27))]
	private IEnumerator StartShowNPC_UI()
	{
		return null;
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x95BA98", Offset = "0x95BA98", VA = "0x95BA98")]
	private void ShowFeng()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x95BB58", Offset = "0x95BB58", VA = "0x95BB58")]
	private void ShowBiao()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x95BC1C", Offset = "0x95BC1C", VA = "0x95BC1C")]
	private void ShowJvhuo()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x95BCE0", Offset = "0x95BCE0", VA = "0x95BCE0")]
	private void DisappearAllTips()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x95BAE4", Offset = "0x95BAE4", VA = "0x95BAE4")]
	[IteratorStateMachine(typeof(<ShowFengIE>d__32))]
	private IEnumerator ShowFengIE()
	{
		return null;
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x95BBA8", Offset = "0x95BBA8", VA = "0x95BBA8")]
	[IteratorStateMachine(typeof(<ShowBiaoIE>d__33))]
	private IEnumerator ShowBiaoIE()
	{
		return null;
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x95BC6C", Offset = "0x95BC6C", VA = "0x95BC6C")]
	[IteratorStateMachine(typeof(<ShowJvhuoIE>d__34))]
	private IEnumerator ShowJvhuoIE()
	{
		return null;
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x95BDC8", Offset = "0x95BDC8", VA = "0x95BDC8")]
	private void OnTriggerEnter_APOS()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x95BE98", Offset = "0x95BE98", VA = "0x95BE98")]
	private void OnTriggerEnter_CPOS(Collider other)
	{
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x95BF54", Offset = "0x95BF54", VA = "0x95BF54")]
	private void OnTriggerEnter_DPOS()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x95C00C", Offset = "0x95C00C", VA = "0x95C00C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x95C970", Offset = "0x95C970", VA = "0x95C970")]
	[IteratorStateMachine(typeof(<StartScreen>d__39))]
	private IEnumerator StartScreen()
	{
		return null;
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x95C9F8", Offset = "0x95C9F8", VA = "0x95C9F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x95C23C", Offset = "0x95C23C", VA = "0x95C23C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x95C9FC", Offset = "0x95C9FC", VA = "0x95C9FC")]
	private void InitToolsScripts(Transform trans)
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x95CAE0", Offset = "0x95CAE0", VA = "0x95CAE0")]
	private void OpenOrCloseZhujian(DeviceEventBase handbase)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x95CB74", Offset = "0x95CB74", VA = "0x95CB74")]
	private void StartGame()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x95CF24", Offset = "0x95CF24", VA = "0x95CF24")]
	private void FinishedAll()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0x95D014", Offset = "0x95D014", VA = "0x95D014")]
	private void ChangeScene()
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0x95D034", Offset = "0x95D034", VA = "0x95D034")]
	[IteratorStateMachine(typeof(<ChangeSceneIE>d__47))]
	private IEnumerator ChangeSceneIE()
	{
		return null;
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x95D0D0", Offset = "0x95D0D0", VA = "0x95D0D0")]
	public void GrapPlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x95D12C", Offset = "0x95D12C", VA = "0x95D12C")]
	public void ReleasePlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x95D188", Offset = "0x95D188", VA = "0x95D188")]
	private void ReleaseHand(XRNode hand)
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x95D18C", Offset = "0x95D18C", VA = "0x95D18C")]
	public void StarthandTips(XRNode hand)
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x95D218", Offset = "0x95D218", VA = "0x95D218")]
	public void StophandTips(Sean_HandBase handbase)
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x95D438", Offset = "0x95D438", VA = "0x95D438")]
	private void showDoudiTips(int index)
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x95D274", Offset = "0x95D274", VA = "0x95D274")]
	private void stopDoudiTips(int index)
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x95D628", Offset = "0x95D628", VA = "0x95D628")]
	[IteratorStateMachine(typeof(<ShowPicaiTips>d__55))]
	private IEnumerator ShowPicaiTips()
	{
		return null;
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x95D6C4", Offset = "0x95D6C4", VA = "0x95D6C4")]
	public Houshang()
	{
	}
}
[Token(Token = "0x200008E")]
public class InRoom : Sean_GameBase
{
	[Token(Token = "0x2000090")]
	[CompilerGenerated]
	private sealed class <StartShowNPC_UI>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InRoom <>4__this;

		[Token(Token = "0x17000056")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000514")]
			[Address(RVA = "0x9657C8", Offset = "0x9657C8", VA = "0x9657C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000516")]
			[Address(RVA = "0x965810", Offset = "0x965810", VA = "0x965810", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x961A88", Offset = "0x961A88", VA = "0x961A88")]
		[DebuggerHidden]
		public <StartShowNPC_UI>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x9656A4", Offset = "0x9656A4", VA = "0x9656A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0x9656A8", Offset = "0x9656A8", VA = "0x9656A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x9657D0", Offset = "0x9657D0", VA = "0x9657D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000091")]
	[CompilerGenerated]
	private sealed class <AutoFinishedGame3>d__69 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InRoom <>4__this;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600051A")]
			[Address(RVA = "0x965B74", Offset = "0x965B74", VA = "0x965B74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600051C")]
			[Address(RVA = "0x965BBC", Offset = "0x965BBC", VA = "0x965BBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x9642AC", Offset = "0x9642AC", VA = "0x9642AC")]
		[DebuggerHidden]
		public <AutoFinishedGame3>d__69(int <>1__state)
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0x965818", Offset = "0x965818", VA = "0x965818", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0x96581C", Offset = "0x96581C", VA = "0x96581C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x965B7C", Offset = "0x965B7C", VA = "0x965B7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000095")]
	[CompilerGenerated]
	private sealed class <ShowPicaiTips>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InRoom <>4__this;

		[Token(Token = "0x1700005A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000526")]
			[Address(RVA = "0x965FCC", Offset = "0x965FCC", VA = "0x965FCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000528")]
			[Address(RVA = "0x966014", Offset = "0x966014", VA = "0x966014", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x964F48", Offset = "0x964F48", VA = "0x964F48")]
		[DebuggerHidden]
		public <ShowPicaiTips>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x965DB8", Offset = "0x965DB8", VA = "0x965DB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x965DBC", Offset = "0x965DBC", VA = "0x965DBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0x965FD4", Offset = "0x965FD4", VA = "0x965FD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HighlightEffect dingzi;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool chengyangIsOutside;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform jianA_BottomTrans;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform jianB_BottomTrans;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject PlanePicai;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform PicaiPosTrigger;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject PlaneSword;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform PlaneSwordPosTrigger;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform OutSideTrigger;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform PlaneHorsePosTrigger;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform Jian_Pos_Trigger_Dingzi;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool startRot_jian_a;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool startRot_jian_b;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Quaternion WoodLocalInitRot;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public CapsuleCollider handRight;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public CapsuleCollider handLeft;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject Plane_OutSide;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject RoomInside;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameObject PlaneHorse;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject Fire;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject ZhaoTai;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public List<BanBian_ChaiHuo> BanBian_ChaiHuos;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public int CutCount;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public int FireCount;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Collider chaiguan_Trigger;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Coroutine curAniTipsCor;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private string curAniTipsCorName;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private int curOutLineIndex;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int AniTipsIndex;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public SpriteRenderer NPC_UI;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public SpriteRenderer[] doudiTips;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject[] AniTips;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Tween[] doudiTipsTw;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private int lastIndex_doudiTips;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Animator doorAni;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private DeviceEventBase futou;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private DeviceEventBase jian_b;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private DeviceEventBase jianqiao;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Transform[] staticJians;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private int WeaponIndex;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private List<Wood> CaiHuoList;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private List<Transform> ZaoTaiPos;

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x95E1F4", Offset = "0x95E1F4", VA = "0x95E1F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x95F00C", Offset = "0x95F00C", VA = "0x95F00C")]
	private void OnTriggerEnter_Jian_Pos(Collider other)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x95F400", Offset = "0x95F400", VA = "0x95F400")]
	private void OnTriggerEnter_PicaiPos()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x95FB60", Offset = "0x95FB60", VA = "0x95FB60")]
	private void OnTriggerEnter_SwordPos()
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x960178", Offset = "0x960178", VA = "0x960178")]
	private void OnTriggerEnter_OutSide(Collider other)
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x9602D8", Offset = "0x9602D8", VA = "0x9602D8")]
	private void OnTriggerEnter_PlaneHorsePosTrigger()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x95EF4C", Offset = "0x95EF4C", VA = "0x95EF4C")]
	private void SetHandCapsuleColliderValue(float radius = 0.05f, float height = 0.3f, float x = -0.05f, float y = 0f, float z = 0f)
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x9603A4", Offset = "0x9603A4", VA = "0x9603A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x961A34", Offset = "0x961A34", VA = "0x961A34")]
	private void DelayPlayChenyangAni()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x9619C0", Offset = "0x9619C0", VA = "0x9619C0")]
	[IteratorStateMachine(typeof(<StartShowNPC_UI>d__51))]
	private IEnumerator StartShowNPC_UI()
	{
		return null;
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x960794", Offset = "0x960794", VA = "0x960794")]
	public void Init()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x961AB0", Offset = "0x961AB0", VA = "0x961AB0")]
	private void InitToolsScripts(Transform trans)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x95F47C", Offset = "0x95F47C", VA = "0x95F47C")]
	public void StartGame1()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x961E80", Offset = "0x961E80", VA = "0x961E80")]
	private void FnishedCuttingOne()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x9625CC", Offset = "0x9625CC", VA = "0x9625CC")]
	private void FinishedAllCut()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x962AEC", Offset = "0x962AEC", VA = "0x962AEC")]
	public void WoodBeFireOne(BanBian_ChaiHuo _BanBian_ChaiHuo)
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x963184", Offset = "0x963184", VA = "0x963184")]
	private void SetMucaiToZaoTaiPos(Transform target)
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x96322C", Offset = "0x96322C", VA = "0x96322C")]
	private void CaiOnDesk(DeviceEventBase _DeviceEventBase)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x96368C", Offset = "0x96368C", VA = "0x96368C")]
	public void StartGame2()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x963E0C", Offset = "0x963E0C", VA = "0x963E0C")]
	public void ShowOutLine(Collider collider)
	{
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x963EE0", Offset = "0x963EE0", VA = "0x963EE0")]
	public void DisppearOutLine(Collider collider)
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x963FB4", Offset = "0x963FB4", VA = "0x963FB4")]
	private void SetHighlightEffectFalse(Sean_HandBase hand, DeviceEventBase _DeviceEventBase)
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x963FD0", Offset = "0x963FD0", VA = "0x963FD0")]
	private void SetHighlightEffectTrue(XRNode hand, DeviceEventBase _DeviceEventBase)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x963FEC", Offset = "0x963FEC", VA = "0x963FEC")]
	private void ShowPlane_OutSide()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x964070", Offset = "0x964070", VA = "0x964070")]
	private void ShowPlane_InSide()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x9640E0", Offset = "0x9640E0", VA = "0x9640E0")]
	private void DetectPlayerFirstStep()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x95FBDC", Offset = "0x95FBDC", VA = "0x95FBDC")]
	public void StartGame3()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x964238", Offset = "0x964238", VA = "0x964238")]
	[IteratorStateMachine(typeof(<AutoFinishedGame3>d__69))]
	private IEnumerator AutoFinishedGame3()
	{
		return null;
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x9642D4", Offset = "0x9642D4", VA = "0x9642D4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x9643B0", Offset = "0x9643B0", VA = "0x9643B0")]
	public void SetWeaponToPos(Collider collider, DeviceEventBase deviceEventBase)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x95F0BC", Offset = "0x95F0BC", VA = "0x95F0BC")]
	public void SetWeaponToPos()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x96492C", Offset = "0x96492C", VA = "0x96492C")]
	public void GrapPlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x964ACC", Offset = "0x964ACC", VA = "0x964ACC")]
	public void ReleasePlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x964C6C", Offset = "0x964C6C", VA = "0x964C6C")]
	private void ReleaseHand(XRNode hand)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x964C70", Offset = "0x964C70", VA = "0x964C70")]
	public void StarthandTips(XRNode hand)
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x964CFC", Offset = "0x964CFC", VA = "0x964CFC")]
	public void StophandTips(Sean_HandBase handbase)
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x964D58", Offset = "0x964D58", VA = "0x964D58")]
	private void showDoudiTips(int index)
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x962928", Offset = "0x962928", VA = "0x962928")]
	private void stopDoudiTips(int index)
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x961E0C", Offset = "0x961E0C", VA = "0x961E0C")]
	[IteratorStateMachine(typeof(<ShowPicaiTips>d__80))]
	private IEnumerator ShowPicaiTips()
	{
		return null;
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x964F70", Offset = "0x964F70", VA = "0x964F70")]
	[ContextMenu("整备武器")]
	private void _StartGame3()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x964F74", Offset = "0x964F74", VA = "0x964F74")]
	public InRoom()
	{
	}
}
[Token(Token = "0x2000096")]
public class Jian : MonoBehaviour
{
	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int layerNumber;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform point;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool canTrigger;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform jianqiao;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Collider[] colliders;

	[Token(Token = "0x6000529")]
	[Address(RVA = "0x96601C", Offset = "0x96601C", VA = "0x96601C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0x966084", Offset = "0x966084", VA = "0x966084")]
	private void Start()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0x966088", Offset = "0x966088", VA = "0x966088")]
	private void Update()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0x9661D8", Offset = "0x9661D8", VA = "0x9661D8")]
	public void SetSwordToScabbard()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0x96643C", Offset = "0x96643C", VA = "0x96643C")]
	public Jian()
	{
	}
}
[Token(Token = "0x2000097")]
public class LastVRPos : MonoBehaviour
{
	[Token(Token = "0x600052F")]
	[Address(RVA = "0x96647C", Offset = "0x96647C", VA = "0x96647C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x966480", Offset = "0x966480", VA = "0x966480")]
	private void Update()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x966484", Offset = "0x966484", VA = "0x966484")]
	public LastVRPos()
	{
	}
}
[Token(Token = "0x2000098")]
public class MeshVisible : MonoBehaviour
{
	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action BeSee;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer render;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isFirstBeSee;

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x96648C", Offset = "0x96648C", VA = "0x96648C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x9664E4", Offset = "0x9664E4", VA = "0x9664E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x9664E8", Offset = "0x9664E8", VA = "0x9664E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x9664EC", Offset = "0x9664EC", VA = "0x9664EC")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0x966560", Offset = "0x966560", VA = "0x966560")]
	public MeshVisible()
	{
	}
}
[Token(Token = "0x2000099")]
public class Nu : MonoBehaviour
{
	[Token(Token = "0x200009A")]
	[CompilerGenerated]
	private sealed class <FinishedShotIE>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Nu <>4__this;

		[Token(Token = "0x1700005C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600054A")]
			[Address(RVA = "0x967654", Offset = "0x967654", VA = "0x967654", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600054C")]
			[Address(RVA = "0x96769C", Offset = "0x96769C", VA = "0x96769C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x966B78", Offset = "0x966B78", VA = "0x966B78")]
		[DebuggerHidden]
		public <FinishedShotIE>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x967570", Offset = "0x967570", VA = "0x967570", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x967574", Offset = "0x967574", VA = "0x967574", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x96765C", Offset = "0x96765C", VA = "0x96765C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200009B")]
	[CompilerGenerated]
	private sealed class <ReadyIE>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Nu <>4__this;

		[Token(Token = "0x1700005E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000550")]
			[Address(RVA = "0x96775C", Offset = "0x96775C", VA = "0x96775C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000552")]
			[Address(RVA = "0x9677A4", Offset = "0x9677A4", VA = "0x9677A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x966FD8", Offset = "0x966FD8", VA = "0x966FD8")]
		[DebuggerHidden]
		public <ReadyIE>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x9676A4", Offset = "0x9676A4", VA = "0x9676A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x9676A8", Offset = "0x9676A8", VA = "0x9676A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x967764", Offset = "0x967764", VA = "0x967764", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject JianPrefab;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isGrap;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject jian;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Interactive_Nu _Interactive_Nu;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public XRNode hand;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private bool canShotting;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool isPress;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public uint Hand_index;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Animator animator;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool hasFire;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject Fire;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool hasJianCollider;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Nu_jian jianP;

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x966570", Offset = "0x966570", VA = "0x966570")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x966AA0", Offset = "0x966AA0", VA = "0x966AA0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x966AC0", Offset = "0x966AC0", VA = "0x966AC0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0x966AE0", Offset = "0x966AE0", VA = "0x966AE0")]
	private void Start()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0x966AE4", Offset = "0x966AE4", VA = "0x966AE4")]
	private void FinishedShot()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x966B04", Offset = "0x966B04", VA = "0x966B04")]
	[IteratorStateMachine(typeof(<FinishedShotIE>d__18))]
	private IEnumerator FinishedShotIE()
	{
		return null;
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x966BA0", Offset = "0x966BA0", VA = "0x966BA0")]
	private void DisappearFire()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0x966BC0", Offset = "0x966BC0", VA = "0x966BC0")]
	private void Update()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x966D4C", Offset = "0x966D4C", VA = "0x966D4C")]
	public void Ready()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0x966F64", Offset = "0x966F64", VA = "0x966F64")]
	[IteratorStateMachine(typeof(<ReadyIE>d__22))]
	public IEnumerator ReadyIE()
	{
		return null;
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0x966D58", Offset = "0x966D58", VA = "0x966D58")]
	private void AppearJian()
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0x9673D8", Offset = "0x9673D8", VA = "0x9673D8")]
	private void DisappearJian()
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0x9673F8", Offset = "0x9673F8", VA = "0x9673F8")]
	private void SetJianColliderFalse()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0x9674FC", Offset = "0x9674FC", VA = "0x9674FC")]
	private void SetJianColliderTrue()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0x9669D0", Offset = "0x9669D0", VA = "0x9669D0")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0x967554", Offset = "0x967554", VA = "0x967554")]
	public Nu()
	{
	}
}
[Token(Token = "0x200009C")]
public class Nu_jian : MonoBehaviour
{
	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hasFire;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider collider;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Speed;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ScaleValue;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Tween MoveTw;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Tween ScaleTw;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float MaxDistance;

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x9677AC", Offset = "0x9677AC", VA = "0x9677AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x9678C0", Offset = "0x9678C0", VA = "0x9678C0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x9678C8", Offset = "0x9678C8", VA = "0x9678C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x96794C", Offset = "0x96794C", VA = "0x96794C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x967950", Offset = "0x967950", VA = "0x967950")]
	private void Update()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x967954", Offset = "0x967954", VA = "0x967954")]
	public void StartShotting()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x967B84", Offset = "0x967B84", VA = "0x967B84")]
	private void OnTriggerEnter_Wall(Collider other)
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x967CA0", Offset = "0x967CA0", VA = "0x967CA0")]
	public Nu_jian()
	{
	}
}
[Token(Token = "0x200009D")]
public class ObjectPool
{
	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ObjectPool instance;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, Queue<GameObject>> objectPool;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject pool;

	[Token(Token = "0x17000060")]
	public static ObjectPool Instance
	{
		[Token(Token = "0x600055C")]
		[Address(RVA = "0x967000", Offset = "0x967000", VA = "0x967000")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x96708C", Offset = "0x96708C", VA = "0x96708C")]
	public GameObject GetObject(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x967D5C", Offset = "0x967D5C", VA = "0x967D5C")]
	public void PushObject(GameObject prefab)
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x967EE8", Offset = "0x967EE8", VA = "0x967EE8")]
	public ObjectPool()
	{
	}
}
[Token(Token = "0x200009E")]
public enum RenderingMode
{
	[Token(Token = "0x40003AC")]
	Opaque,
	[Token(Token = "0x40003AD")]
	Cutout,
	[Token(Token = "0x40003AE")]
	Fade,
	[Token(Token = "0x40003AF")]
	Transparent
}
[Token(Token = "0x200009F")]
public class PigFood : MonoBehaviour
{
	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 startPos;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 targetPos;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform startTran;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform targetTran;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material mat;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string triggerName;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool canDisappear;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Rigidbody rig;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float Movetime;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float rigDistance;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float MoveDistance;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 Rotate;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool canMove;

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x967F70", Offset = "0x967F70", VA = "0x967F70")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x96809C", Offset = "0x96809C", VA = "0x96809C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x968884", Offset = "0x968884", VA = "0x968884")]
	private void Update()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x9682CC", Offset = "0x9682CC", VA = "0x9682CC")]
	private void Move()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x9689B8", Offset = "0x9689B8", VA = "0x9689B8")]
	private void DisappearSelf()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x968A8C", Offset = "0x968A8C", VA = "0x968A8C")]
	private void setMaterialRenderingMode(Material material, RenderingMode renderingMode)
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x968D60", Offset = "0x968D60", VA = "0x968D60")]
	public PigFood()
	{
	}
}
[Token(Token = "0x20000A0")]
public class PigRoom : Sean_GameBase
{
	[Token(Token = "0x20000A4")]
	[CompilerGenerated]
	private sealed class <ShowPicaiTips>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PigRoom <>4__this;

		[Token(Token = "0x17000061")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600058E")]
			[Address(RVA = "0x96BA0C", Offset = "0x96BA0C", VA = "0x96BA0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000062")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000590")]
			[Address(RVA = "0x96BA54", Offset = "0x96BA54", VA = "0x96BA54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x96B814", Offset = "0x96B814", VA = "0x96B814")]
		[DebuggerHidden]
		public <ShowPicaiTips>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0x96B83C", Offset = "0x96B83C", VA = "0x96B83C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0x96B840", Offset = "0x96B840", VA = "0x96B840", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0x96BA14", Offset = "0x96BA14", VA = "0x96BA14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject ZhuShiRange;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Plane_OutSide;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject Plane_B;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform BPOSTrigger;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isFinishedAll;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Interactive_Zhu pig;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int FinishedEatCount;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<DeviceEventBase> zhushiList;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Coroutine curAniTipsCor;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private string curAniTipsCorName;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private int curOutLineIndex;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int AniTipsIndex;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public SpriteRenderer NPC_UI;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public SpriteRenderer[] doudiTips;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject[] AniTips;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Tween[] doudiTipsTw;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int lastIndex_doudiTips;

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x968EA8", Offset = "0x968EA8", VA = "0x968EA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x969514", Offset = "0x969514", VA = "0x969514")]
	private void OnTriggerEnter_BPOS()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x9696E8", Offset = "0x9696E8", VA = "0x9696E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0x96A7CC", Offset = "0x96A7CC", VA = "0x96A7CC")]
	private void ShowTeleportTips()
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x9695D4", Offset = "0x9695D4", VA = "0x9695D4")]
	private void DisappearTeleportTips()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x96A974", Offset = "0x96A974", VA = "0x96A974")]
	private void Update()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x96989C", Offset = "0x96989C", VA = "0x96989C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x96A978", Offset = "0x96A978", VA = "0x96A978")]
	private void InitToolsScripts(Transform trans)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x96A0FC", Offset = "0x96A0FC", VA = "0x96A0FC")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x96AB04", Offset = "0x96AB04", VA = "0x96AB04")]
	private void TriggerEnterZhujuan(Collider collider, DeviceEventBase deviceBase)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x96AC88", Offset = "0x96AC88", VA = "0x96AC88")]
	private void FinieshedEatFood()
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x96AD70", Offset = "0x96AD70", VA = "0x96AD70")]
	private void DelayPlayNextAni()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0x96ADC4", Offset = "0x96ADC4", VA = "0x96ADC4")]
	private void SetHighlightEffectFalse(Sean_HandBase hand, DeviceEventBase _DeviceEventBase)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x96ADF8", Offset = "0x96ADF8", VA = "0x96ADF8")]
	private void SetHighlightEffectTrue(XRNode hand, DeviceEventBase _DeviceEventBase)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x96AE14", Offset = "0x96AE14", VA = "0x96AE14")]
	public void GrapPlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x96AEF8", Offset = "0x96AEF8", VA = "0x96AEF8")]
	public void ReleasePlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x96AFDC", Offset = "0x96AFDC", VA = "0x96AFDC")]
	private void ReleaseHand(XRNode hand)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x96AFE0", Offset = "0x96AFE0", VA = "0x96AFE0")]
	public void StarthandTips(XRNode hand)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x96B06C", Offset = "0x96B06C", VA = "0x96B06C")]
	public void StophandTips(Sean_HandBase handbase)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x96B28C", Offset = "0x96B28C", VA = "0x96B28C")]
	private void showDoudiTips(int index)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x96B0C8", Offset = "0x96B0C8", VA = "0x96B0C8")]
	private void stopDoudiTips(int index)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x96AA90", Offset = "0x96AA90", VA = "0x96AA90")]
	[IteratorStateMachine(typeof(<ShowPicaiTips>d__38))]
	private IEnumerator ShowPicaiTips()
	{
		return null;
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x96B46C", Offset = "0x96B46C", VA = "0x96B46C")]
	[ContextMenu("完成喂猪后")]
	private void _FinishedPigEat()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x96B478", Offset = "0x96B478", VA = "0x96B478")]
	public PigRoom()
	{
	}
}
[Token(Token = "0x20000A5")]
public class SceneStartFade : MonoBehaviour
{
	[Token(Token = "0x20000A6")]
	[CompilerGenerated]
	private sealed class <AppearScene2>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneStartFade <>4__this;

		[Token(Token = "0x17000063")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600059E")]
			[Address(RVA = "0x96C2CC", Offset = "0x96C2CC", VA = "0x96C2CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000064")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005A0")]
			[Address(RVA = "0x96C314", Offset = "0x96C314", VA = "0x96C314", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0x96BE28", Offset = "0x96BE28", VA = "0x96BE28")]
		[DebuggerHidden]
		public <AppearScene2>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x96C010", Offset = "0x96C010", VA = "0x96C010", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x96C014", Offset = "0x96C014", VA = "0x96C014", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x96C2D4", Offset = "0x96C2D4", VA = "0x96C2D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000A7")]
	[CompilerGenerated]
	private sealed class <AppearScene>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneStartFade <>4__this;

		[Token(Token = "0x17000065")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005A4")]
			[Address(RVA = "0x96C7D0", Offset = "0x96C7D0", VA = "0x96C7D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000066")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005A6")]
			[Address(RVA = "0x96C818", Offset = "0x96C818", VA = "0x96C818", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x96BE50", Offset = "0x96BE50", VA = "0x96BE50")]
		[DebuggerHidden]
		public <AppearScene>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x96C31C", Offset = "0x96C31C", VA = "0x96C31C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x96C320", Offset = "0x96C320", VA = "0x96C320", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x96C7D8", Offset = "0x96C7D8", VA = "0x96C7D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera VRCamera;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject eyes;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource BGM;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] BGM_audioClips;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] audioClips;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioSource audioSource;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audio2;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public VideoPlayer player2;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public VideoClip nextClip;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform videoMaks;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Renderer videoRender;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform mask;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Renderer maskRender;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject[] scenes;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool canTriggerEvent;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	private bool canTriggerEvent1;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public PXR_ScreenFade_X screenFade;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool isPlayingEvent;

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x96BA5C", Offset = "0x96BA5C", VA = "0x96BA5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x96BD84", Offset = "0x96BD84", VA = "0x96BD84")]
	protected void PlayerEvent(MediaPlayer arg0, MediaPlayerEvent.EventType arg1, ErrorCode arg2)
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x96BD88", Offset = "0x96BD88", VA = "0x96BD88")]
	protected void PlayerEvent2(MediaPlayer arg0, MediaPlayerEvent.EventType arg1, ErrorCode arg2)
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x96BDB4", Offset = "0x96BDB4", VA = "0x96BDB4")]
	[IteratorStateMachine(typeof(<AppearScene2>d__21))]
	private IEnumerator AppearScene2()
	{
		return null;
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x96BD10", Offset = "0x96BD10", VA = "0x96BD10")]
	[IteratorStateMachine(typeof(<AppearScene>d__22))]
	private IEnumerator AppearScene()
	{
		return null;
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x96BE78", Offset = "0x96BE78", VA = "0x96BE78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x96BED0", Offset = "0x96BED0", VA = "0x96BED0")]
	private void PlayNextAudio()
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x96BF74", Offset = "0x96BF74", VA = "0x96BF74")]
	private void Update()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x96BFC4", Offset = "0x96BFC4", VA = "0x96BFC4")]
	[ContextMenu("跳过片头")]
	private void PassBegining()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x96C000", Offset = "0x96C000", VA = "0x96C000")]
	public SceneStartFade()
	{
	}
}
[Token(Token = "0x20000A8")]
public class Shotting : Sean_GameBase
{
	[Token(Token = "0x20000A9")]
	[CompilerGenerated]
	private sealed class <ChangePosToHoushang>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shotting <>4__this;

		[Token(Token = "0x17000067")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005C5")]
			[Address(RVA = "0x96F15C", Offset = "0x96F15C", VA = "0x96F15C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000068")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005C7")]
			[Address(RVA = "0x96F1A4", Offset = "0x96F1A4", VA = "0x96F1A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x96CE24", Offset = "0x96CE24", VA = "0x96CE24")]
		[DebuggerHidden]
		public <ChangePosToHoushang>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x96F004", Offset = "0x96F004", VA = "0x96F004", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x96F008", Offset = "0x96F008", VA = "0x96F008", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x96F164", Offset = "0x96F164", VA = "0x96F164", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AA")]
	[CompilerGenerated]
	private sealed class <AutoFinished>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shotting <>4__this;

		[Token(Token = "0x17000069")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005CB")]
			[Address(RVA = "0x96F260", Offset = "0x96F260", VA = "0x96F260", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005CD")]
			[Address(RVA = "0x96F2A8", Offset = "0x96F2A8", VA = "0x96F2A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x96DB08", Offset = "0x96DB08", VA = "0x96DB08")]
		[DebuggerHidden]
		public <AutoFinished>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x96F1AC", Offset = "0x96F1AC", VA = "0x96F1AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x96F1B0", Offset = "0x96F1B0", VA = "0x96F1B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x96F268", Offset = "0x96F268", VA = "0x96F268", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000AE")]
	[CompilerGenerated]
	private sealed class <ShowPicaiTips>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shotting <>4__this;

		[Token(Token = "0x1700006B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005D9")]
			[Address(RVA = "0x96F664", Offset = "0x96F664", VA = "0x96F664", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005DB")]
			[Address(RVA = "0x96F6AC", Offset = "0x96F6AC", VA = "0x96F6AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x96EDA0", Offset = "0x96EDA0", VA = "0x96EDA0")]
		[DebuggerHidden]
		public <ShowPicaiTips>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x96F450", Offset = "0x96F450", VA = "0x96F450", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x96F454", Offset = "0x96F454", VA = "0x96F454", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x96F66C", Offset = "0x96F66C", VA = "0x96F66C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isFinisedAll;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool firstGrap;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Plane_OutSide;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private DeviceEventBase nu;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Interactive_Nu nuInteractive;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Coroutine curAniTipsCor;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private string curAniTipsCorName;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private int curOutLineIndex;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int AniTipsIndex;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SpriteRenderer NPC_UI;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public SpriteRenderer[] doudiTips;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject[] AniTips;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Tween[] doudiTipsTw;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int lastIndex_doudiTips;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform FootAreaTrigger;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject FootPrint;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Coroutine AutoFinishedCor;

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x96C820", Offset = "0x96C820", VA = "0x96C820")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x96CC98", Offset = "0x96CC98", VA = "0x96CC98")]
	private void OnTriggerEnter_FootArea(Collider other)
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x96CDB0", Offset = "0x96CDB0", VA = "0x96CDB0")]
	[IteratorStateMachine(typeof(<ChangePosToHoushang>d__18))]
	private IEnumerator ChangePosToHoushang()
	{
		return null;
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x96CE4C", Offset = "0x96CE4C", VA = "0x96CE4C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x96DA94", Offset = "0x96DA94", VA = "0x96DA94")]
	[IteratorStateMachine(typeof(<AutoFinished>d__20))]
	private IEnumerator AutoFinished()
	{
		return null;
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x96DB30", Offset = "0x96DB30", VA = "0x96DB30")]
	private void Update()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x96CFF8", Offset = "0x96CFF8", VA = "0x96CFF8")]
	public void Init()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x96DB34", Offset = "0x96DB34", VA = "0x96DB34")]
	private void InitToolsScripts(Transform trans)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x96D6A0", Offset = "0x96D6A0", VA = "0x96D6A0")]
	private void StartGame()
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x96E0C4", Offset = "0x96E0C4", VA = "0x96E0C4")]
	private void FinishedAllShotting()
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x96E738", Offset = "0x96E738", VA = "0x96E738")]
	public void GrapPlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x96E81C", Offset = "0x96E81C", VA = "0x96E81C")]
	public void ReleasePlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x96E900", Offset = "0x96E900", VA = "0x96E900")]
	private void ReleaseHand(XRNode hand)
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x96E904", Offset = "0x96E904", VA = "0x96E904")]
	public void StarthandTips(XRNode hand)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x96E990", Offset = "0x96E990", VA = "0x96E990")]
	public void StophandTips(Sean_HandBase handbase)
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x96EBB0", Offset = "0x96EBB0", VA = "0x96EBB0")]
	private void showDoudiTips(int index)
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x96E9EC", Offset = "0x96E9EC", VA = "0x96E9EC")]
	private void stopDoudiTips(int index)
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x96E050", Offset = "0x96E050", VA = "0x96E050")]
	[IteratorStateMachine(typeof(<ShowPicaiTips>d__34))]
	private IEnumerator ShowPicaiTips()
	{
		return null;
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x96EDC8", Offset = "0x96EDC8", VA = "0x96EDC8")]
	[ContextMenu("完成交互")]
	private void _HorseFinieshedALL()
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x96EDCC", Offset = "0x96EDCC", VA = "0x96EDCC")]
	public Shotting()
	{
	}
}
[Token(Token = "0x20000AF")]
public class zaotaiFire : MonoBehaviour
{
	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.ForceOverLifetimeModule psForce;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ForceValue_Y;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool startChangeForce;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Tween tw;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EffectAudio audio;

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x96F6B4", Offset = "0x96F6B4", VA = "0x96F6B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x96F734", Offset = "0x96F734", VA = "0x96F734")]
	private void Start()
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x96F804", Offset = "0x96F804", VA = "0x96F804")]
	private void Update()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x96F84C", Offset = "0x96F84C", VA = "0x96F84C")]
	public void ChangeFireFoce(float value = 0f)
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0x96FAB0", Offset = "0x96FAB0", VA = "0x96FAB0")]
	public zaotaiFire()
	{
	}
}
[Token(Token = "0x20000B0")]
public class zhujian : MonoBehaviour
{
	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool canTrigger;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action AniIsEnd;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator ani;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BoxCollider[] colliders;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float delayWordsDisappear;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action canClose;

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x96FAEC", Offset = "0x96FAEC", VA = "0x96FAEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0x96FD44", Offset = "0x96FD44", VA = "0x96FD44")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x96FD48", Offset = "0x96FD48", VA = "0x96FD48")]
	private void PauseAni()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x96FDD8", Offset = "0x96FDD8", VA = "0x96FDD8")]
	private void ResetCanTrigger()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x96FDFC", Offset = "0x96FDFC", VA = "0x96FDFC")]
	public void RePlayAni()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x96FE4C", Offset = "0x96FE4C", VA = "0x96FE4C")]
	public void EndAni()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x96FE88", Offset = "0x96FE88", VA = "0x96FE88")]
	public void StartPlayAni()
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x96FEF0", Offset = "0x96FEF0", VA = "0x96FEF0")]
	public void OpenOrCloseZhujian()
	{
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x96FF38", Offset = "0x96FF38", VA = "0x96FF38")]
	private void Update()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0x96FC74", Offset = "0x96FC74", VA = "0x96FC74")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0x96FF7C", Offset = "0x96FF7C", VA = "0x96FF7C")]
	public zhujian()
	{
	}
}
[Token(Token = "0x20000B1")]
public class BGMusicCtrl_Night : MonoBehaviour
{
	[Token(Token = "0x20000B3")]
	[CompilerGenerated]
	private sealed class <DealySetVolumIE>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BGMusicCtrl_Night <>4__this;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float value;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float _time;

		[Token(Token = "0x1700006D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000602")]
			[Address(RVA = "0x970780", Offset = "0x970780", VA = "0x970780", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000604")]
			[Address(RVA = "0x9707C8", Offset = "0x9707C8", VA = "0x9707C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x970490", Offset = "0x970490", VA = "0x970490")]
		[DebuggerHidden]
		public <DealySetVolumIE>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0x9706C0", Offset = "0x9706C0", VA = "0x9706C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x9706C4", Offset = "0x9706C4", VA = "0x9706C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x970788", Offset = "0x970788", VA = "0x970788", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000B4")]
	[CompilerGenerated]
	private sealed class <DelayPlayNextAudio>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BGMusicCtrl_Night <>4__this;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isLoop;

		[Token(Token = "0x1700006F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000608")]
			[Address(RVA = "0x970890", Offset = "0x970890", VA = "0x970890", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600060A")]
			[Address(RVA = "0x9708D8", Offset = "0x9708D8", VA = "0x9708D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x970610", Offset = "0x970610", VA = "0x970610")]
		[DebuggerHidden]
		public <DelayPlayNextAudio>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x9707D0", Offset = "0x9707D0", VA = "0x9707D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x9707D4", Offset = "0x9707D4", VA = "0x9707D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x970898", Offset = "0x970898", VA = "0x970898", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BGMusicCtrl_Night instance;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] clips;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource audioS;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int index;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action audioIsPause;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool IsPlaying;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool autoPlayNext;

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x96FF94", Offset = "0x96FF94", VA = "0x96FF94")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x970024", Offset = "0x970024", VA = "0x970024")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x970028", Offset = "0x970028", VA = "0x970028")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0x970188", Offset = "0x970188", VA = "0x970188")]
	public void DisappearAudio()
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x9702A8", Offset = "0x9702A8", VA = "0x9702A8")]
	public void SetVolum(float value, float _time = 1f)
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x9703D8", Offset = "0x9703D8", VA = "0x9703D8")]
	public void DealySetVolum(float value, float delay, float _time = 1f)
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x9703F8", Offset = "0x9703F8", VA = "0x9703F8")]
	[IteratorStateMachine(typeof(<DealySetVolumIE>d__13))]
	private IEnumerator DealySetVolumIE(float value, float delay, float _time)
	{
		return null;
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x9704B8", Offset = "0x9704B8", VA = "0x9704B8")]
	public void Play(int index = 0)
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0x970510", Offset = "0x970510", VA = "0x970510")]
	public void AutoPlayNext(bool isLoop = true)
	{
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x970578", Offset = "0x970578", VA = "0x970578")]
	[IteratorStateMachine(typeof(<DelayPlayNextAudio>d__16))]
	public IEnumerator DelayPlayNextAudio(float delay, bool isLoop)
	{
		return null;
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x9700F4", Offset = "0x9700F4", VA = "0x9700F4")]
	public void PlayNextAudio(bool isLoop = false)
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x970638", Offset = "0x970638", VA = "0x970638")]
	public BGMusicCtrl_Night()
	{
	}
}
[Token(Token = "0x20000B5")]
public class caodui : MonoBehaviour
{
	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private BoxCollider collider;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HighlightEffect _HighlightEffect;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ParticleSystem[] ps;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.ForceOverLifetimeModule[] psForce;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float ForceValue_Y;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool startChangeForce;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Tween tw;

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x9708E0", Offset = "0x9708E0", VA = "0x9708E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x970AC0", Offset = "0x970AC0", VA = "0x970AC0")]
	private void Start()
	{
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0x970B8C", Offset = "0x970B8C", VA = "0x970B8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0x970C08", Offset = "0x970C08", VA = "0x970C08")]
	public void Fire()
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0x970D44", Offset = "0x970D44", VA = "0x970D44")]
	public void ChangeFireFoce(float value = 5f)
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0x970F1C", Offset = "0x970F1C", VA = "0x970F1C")]
	public caodui()
	{
	}
}
[Token(Token = "0x20000B6")]
public class caoduiMananger : MonoBehaviour
{
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] caoduiWall;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public caodui[] caoduiArr;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static caoduiMananger Instance;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action CaoduiAllBeFire;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action CaoduiStartBeFire;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int BeFireCount;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isFinished;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool isStart;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<HighlightEffect> caoHighlightList;

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x970F58", Offset = "0x970F58", VA = "0x970F58")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x970FE8", Offset = "0x970FE8", VA = "0x970FE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x970FEC", Offset = "0x970FEC", VA = "0x970FEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x971068", Offset = "0x971068", VA = "0x971068")]
	public void HightLightEffectEnable()
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x971104", Offset = "0x971104", VA = "0x971104")]
	public void HightLightEffectDisable()
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x9711A0", Offset = "0x9711A0", VA = "0x9711A0")]
	public void DisappearWall()
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0x971204", Offset = "0x971204", VA = "0x971204")]
	public caoduiMananger()
	{
	}
}
[Token(Token = "0x20000B7")]
public class EnimyVoice : MonoBehaviour
{
	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioS;

	[Token(Token = "0x600061B")]
	[Address(RVA = "0x97128C", Offset = "0x97128C", VA = "0x97128C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0x971328", Offset = "0x971328", VA = "0x971328")]
	private void Start()
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0x97132C", Offset = "0x97132C", VA = "0x97132C")]
	private void Update()
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0x971330", Offset = "0x971330", VA = "0x971330")]
	public void DelayDisappearSelf(float delay)
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0x97138C", Offset = "0x97138C", VA = "0x97138C")]
	public void DisappearSelf()
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x971448", Offset = "0x971448", VA = "0x971448")]
	public EnimyVoice()
	{
	}
}
[Token(Token = "0x20000B8")]
public class guochang_Night : MonoBehaviour
{
	[Token(Token = "0x20000B9")]
	[CompilerGenerated]
	private sealed class <DelayDisapperEnimyAudio>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public guochang_Night <>4__this;

		[Token(Token = "0x17000071")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000638")]
			[Address(RVA = "0x972008", Offset = "0x972008", VA = "0x972008", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000072")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600063A")]
			[Address(RVA = "0x972050", Offset = "0x972050", VA = "0x972050", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x971B9C", Offset = "0x971B9C", VA = "0x971B9C")]
		[DebuggerHidden]
		public <DelayDisapperEnimyAudio>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0x971F48", Offset = "0x971F48", VA = "0x971F48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0x971F4C", Offset = "0x971F4C", VA = "0x971F4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x972010", Offset = "0x972010", VA = "0x972010", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BA")]
	[CompilerGenerated]
	private sealed class <StartPlayAniIE>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public guochang_Night <>4__this;

		[Token(Token = "0x17000073")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600063E")]
			[Address(RVA = "0x97220C", Offset = "0x97220C", VA = "0x97220C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000074")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000640")]
			[Address(RVA = "0x972254", Offset = "0x972254", VA = "0x972254", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0x971C58", Offset = "0x971C58", VA = "0x971C58")]
		[DebuggerHidden]
		public <StartPlayAniIE>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0x972058", Offset = "0x972058", VA = "0x972058", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0x97205C", Offset = "0x97205C", VA = "0x97205C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0x972214", Offset = "0x972214", VA = "0x972214", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action HoushangAniFinished;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int index;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static guochang_Night instance;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator ani;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audio;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] clips;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Animator[] daojv_anis;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Animator chenyang;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action startPlayGame;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private AudioSource Enimy_audio;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip[] Enimy_clips;

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x9714BC", Offset = "0x9714BC", VA = "0x9714BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x971A50", Offset = "0x971A50", VA = "0x971A50")]
	private void StartPlayGame()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x971A6C", Offset = "0x971A6C", VA = "0x971A6C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x971A8C", Offset = "0x971A8C", VA = "0x971A8C")]
	public void StartPlayDaojv_1()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x971AC0", Offset = "0x971AC0", VA = "0x971AC0")]
	public void StartPlayDaojv_2()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x971B28", Offset = "0x971B28", VA = "0x971B28")]
	[IteratorStateMachine(typeof(<DelayDisapperEnimyAudio>d__16))]
	private IEnumerator DelayDisapperEnimyAudio()
	{
		return null;
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x971BC4", Offset = "0x971BC4", VA = "0x971BC4")]
	public void StartPlayAni()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x971BE4", Offset = "0x971BE4", VA = "0x971BE4")]
	[IteratorStateMachine(typeof(<StartPlayAniIE>d__18))]
	private IEnumerator StartPlayAniIE()
	{
		return null;
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x971C80", Offset = "0x971C80", VA = "0x971C80")]
	private void PlayNextEnimyVoice()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x971CE0", Offset = "0x971CE0", VA = "0x971CE0")]
	public void PlayNextEnimyVoice2()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x971D40", Offset = "0x971D40", VA = "0x971D40")]
	private void DelayPlayAudio()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x971D5C", Offset = "0x971D5C", VA = "0x971D5C")]
	public void DisapperEnimyAudio()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x971D70", Offset = "0x971D70", VA = "0x971D70")]
	public void FinishedHouShangAni()
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x971D8C", Offset = "0x971D8C", VA = "0x971D8C")]
	public void PlayAcion1()
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0x971E38", Offset = "0x971E38", VA = "0x971E38")]
	public void PlayAcion2()
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0x971F1C", Offset = "0x971F1C", VA = "0x971F1C")]
	private void DelayPlayAni()
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0x971F3C", Offset = "0x971F3C", VA = "0x971F3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0x971980", Offset = "0x971980", VA = "0x971980")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0x971F40", Offset = "0x971F40", VA = "0x971F40")]
	public guochang_Night()
	{
	}
}
[Token(Token = "0x20000BB")]
public class guochang_Night2 : MonoBehaviour
{
	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action StartPlayFireJvhuo;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action StartPlayShooting;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action HoushangAniFinished;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action RoomAniFinished;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action StartRunOut;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action StopAni;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int index;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static guochang_Night2 instance;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Animator ani;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource audio;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip[] clips;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Animator[] daojv_anis;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject[] body;

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x97225C", Offset = "0x97225C", VA = "0x97225C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x9727B0", Offset = "0x9727B0", VA = "0x9727B0")]
	private void FireSmoke()
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x972834", Offset = "0x972834", VA = "0x972834")]
	private void RunOutSide()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x972850", Offset = "0x972850", VA = "0x972850")]
	private void Start()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x972854", Offset = "0x972854", VA = "0x972854")]
	public void ShowBody()
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x9728C8", Offset = "0x9728C8", VA = "0x9728C8")]
	private void Stop()
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x9728E4", Offset = "0x9728E4", VA = "0x9728E4")]
	public void StartPlayDaojv_1()
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x972918", Offset = "0x972918", VA = "0x972918")]
	public void StartPlayDaojv_2()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x97298C", Offset = "0x97298C", VA = "0x97298C")]
	public void StartPlayFireJvhuoGame()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x9729A8", Offset = "0x9729A8", VA = "0x9729A8")]
	public void StartPlayShootingGame()
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x9729C4", Offset = "0x9729C4", VA = "0x9729C4")]
	public void StartPlayAni()
	{
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0x972A4C", Offset = "0x972A4C", VA = "0x972A4C")]
	private void DelayPlayAudio()
	{
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x972A68", Offset = "0x972A68", VA = "0x972A68")]
	public void FinishedHouShangAni()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x972AF4", Offset = "0x972AF4", VA = "0x972AF4")]
	public void FinishedRoomAni()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x972B80", Offset = "0x972B80", VA = "0x972B80")]
	public void PlayAcion1()
	{
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x972C80", Offset = "0x972C80", VA = "0x972C80")]
	private void DelayPlayAni()
	{
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0x972CA0", Offset = "0x972CA0", VA = "0x972CA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0x9726E0", Offset = "0x9726E0", VA = "0x9726E0")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x6000653")]
	[Address(RVA = "0x972CA4", Offset = "0x972CA4", VA = "0x972CA4")]
	[ContextMenu("开始烽火台上表演")]
	public void _PlayAcion1()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0x972CA8", Offset = "0x972CA8", VA = "0x972CA8")]
	public guochang_Night2()
	{
	}
}
[Token(Token = "0x20000BC")]
public class HandleTrigger : MonoBehaviour
{
	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform curHand;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform RotHandle;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public jiaojia _jiaojia;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isGrip;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private XRNode useHand;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Sean_HandBase hand;

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x972CB0", Offset = "0x972CB0", VA = "0x972CB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x972CD0", Offset = "0x972CD0", VA = "0x972CD0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x972CD4", Offset = "0x972CD4", VA = "0x972CD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x972E6C", Offset = "0x972E6C", VA = "0x972E6C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x972F84", Offset = "0x972F84", VA = "0x972F84")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x973070", Offset = "0x973070", VA = "0x973070")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x9731B4", Offset = "0x9731B4", VA = "0x9731B4")]
	public HandleTrigger()
	{
	}
}
[Token(Token = "0x20000BD")]
public class HJ_FHT : MonoBehaviour
{
	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action FinishedAll;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action FinishedFireJvhuogun;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action FinishedSetJvhuogun;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action FinishedSwingJvhuogun;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string SHG;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform huoyan;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform nitai;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform huiwu;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform nujian;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform nujian2;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform jvhuogun;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform Fire;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private WoodSwingDetector woodSwingDetector;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int nujian_num;

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x9731C4", Offset = "0x9731C4", VA = "0x9731C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x97342C", Offset = "0x97342C", VA = "0x97342C")]
	private void Start()
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x9736D8", Offset = "0x9736D8", VA = "0x9736D8")]
	private void OnTriggerEnter_huoyan(Collider other)
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0x9737D8", Offset = "0x9737D8", VA = "0x9737D8")]
	private void OnTriggerEnter_huiwu()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x9738D8", Offset = "0x9738D8", VA = "0x9738D8")]
	private void OnTriggerEnter_nitai(Collider other)
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x973A44", Offset = "0x973A44", VA = "0x973A44")]
	private void OnTriggerEnter_nujian(Collider other)
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x973D94", Offset = "0x973D94", VA = "0x973D94")]
	private void OnTriggerEnter_nujian2(Collider other)
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x9740E4", Offset = "0x9740E4", VA = "0x9740E4")]
	public HJ_FHT()
	{
	}
}
[Token(Token = "0x20000BE")]
public class HJ_Night : Sean_SceneBase
{
	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject VRFade;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public SpriteRenderer[] Tips;

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x97413C", Offset = "0x97413C", VA = "0x97413C")]
	private new void Awake()
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x974140", Offset = "0x974140", VA = "0x974140")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x974240", Offset = "0x974240", VA = "0x974240")]
	private void Start()
	{
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x974244", Offset = "0x974244", VA = "0x974244")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x97424C", Offset = "0x97424C", VA = "0x97424C")]
	public HJ_Night()
	{
	}
}
[Token(Token = "0x20000BF")]
public class HoushangNight : Sean_GameBase
{
	[Token(Token = "0x20000C0")]
	[CompilerGenerated]
	private sealed class <StartIE>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight <>4__this;

		[Token(Token = "0x17000075")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600068C")]
			[Address(RVA = "0x976D0C", Offset = "0x976D0C", VA = "0x976D0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000076")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600068E")]
			[Address(RVA = "0x976D54", Offset = "0x976D54", VA = "0x976D54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0x975198", Offset = "0x975198", VA = "0x975198")]
		[DebuggerHidden]
		public <StartIE>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0x976B44", Offset = "0x976B44", VA = "0x976B44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0x976B48", Offset = "0x976B48", VA = "0x976B48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0x976D14", Offset = "0x976D14", VA = "0x976D14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C1")]
	[CompilerGenerated]
	private sealed class <DelayGuochangPlayAcion2IE>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000077")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000692")]
			[Address(RVA = "0x976E28", Offset = "0x976E28", VA = "0x976E28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000694")]
			[Address(RVA = "0x976E70", Offset = "0x976E70", VA = "0x976E70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0x975EA8", Offset = "0x975EA8", VA = "0x975EA8")]
		[DebuggerHidden]
		public <DelayGuochangPlayAcion2IE>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0x976D5C", Offset = "0x976D5C", VA = "0x976D5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0x976D60", Offset = "0x976D60", VA = "0x976D60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0x976E30", Offset = "0x976E30", VA = "0x976E30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C2")]
	[CompilerGenerated]
	private sealed class <FadeToNextIE>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight <>4__this;

		[Token(Token = "0x17000079")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000698")]
			[Address(RVA = "0x976FEC", Offset = "0x976FEC", VA = "0x976FEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600069A")]
			[Address(RVA = "0x977034", Offset = "0x977034", VA = "0x977034", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0x975F64", Offset = "0x975F64", VA = "0x975F64")]
		[DebuggerHidden]
		public <FadeToNextIE>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0x976E78", Offset = "0x976E78", VA = "0x976E78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x976E7C", Offset = "0x976E7C", VA = "0x976E7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x976FF4", Offset = "0x976FF4", VA = "0x976FF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C5")]
	[CompilerGenerated]
	private sealed class <ShowPicaiTips>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight <>4__this;

		[Token(Token = "0x1700007B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006A2")]
			[Address(RVA = "0x977294", Offset = "0x977294", VA = "0x977294", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A4")]
			[Address(RVA = "0x9772DC", Offset = "0x9772DC", VA = "0x9772DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x9768DC", Offset = "0x9768DC", VA = "0x9768DC")]
		[DebuggerHidden]
		public <ShowPicaiTips>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x9770BC", Offset = "0x9770BC", VA = "0x9770BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x9770C0", Offset = "0x9770C0", VA = "0x9770C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x97729C", Offset = "0x97729C", VA = "0x97729C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool IsGuochangPlayAcion2;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public jiaojia _jiaojia;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public DeviceEventBase jvhuogun;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Coroutine curAniTipsCor;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private string curAniTipsCorName;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private int curOutLineIndex;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int AniTipsIndex;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public SpriteRenderer NPC_UI;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public SpriteRenderer[] doudiTips;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] AniTips;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Tween[] doudiTipsTw;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int lastIndex_doudiTips;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float delay;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject Plane_C;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject Plane_D;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject Plane_E;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform CPOSTrigger;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform DPOSTrigger;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform EPOSTrigger;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Coroutine DelayGuochangPlayAcion2Cor;

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x974254", Offset = "0x974254", VA = "0x974254")]
	private void Awake()
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x9749E8", Offset = "0x9749E8", VA = "0x9749E8")]
	private void Start()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x975124", Offset = "0x975124", VA = "0x975124")]
	[IteratorStateMachine(typeof(<StartIE>d__21))]
	private IEnumerator StartIE()
	{
		return null;
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x9751C0", Offset = "0x9751C0", VA = "0x9751C0")]
	private void OnTriggerEnter_CPOS()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x97528C", Offset = "0x97528C", VA = "0x97528C")]
	private void OnTriggerEnter_DPOS()
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x9755D0", Offset = "0x9755D0", VA = "0x9755D0")]
	private void OnTriggerEnter_EPOS()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x975A78", Offset = "0x975A78", VA = "0x975A78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x974A7C", Offset = "0x974A7C", VA = "0x974A7C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x975A7C", Offset = "0x975A7C", VA = "0x975A7C")]
	private void InitToolsScripts(Transform trans)
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x97531C", Offset = "0x97531C", VA = "0x97531C")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x975BE4", Offset = "0x975BE4", VA = "0x975BE4")]
	private void GuochangPlayAcion2()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x975D1C", Offset = "0x975D1C", VA = "0x975D1C")]
	private void DelayGuochangPlayAcion2(DeviceEventBase device)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x975E48", Offset = "0x975E48", VA = "0x975E48")]
	[IteratorStateMachine(typeof(<DelayGuochangPlayAcion2IE>d__32))]
	private IEnumerator DelayGuochangPlayAcion2IE()
	{
		return null;
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x975668", Offset = "0x975668", VA = "0x975668")]
	private void StartGame2()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x975ED0", Offset = "0x975ED0", VA = "0x975ED0")]
	private void FadeToNext()
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x975EF0", Offset = "0x975EF0", VA = "0x975EF0")]
	[IteratorStateMachine(typeof(<FadeToNextIE>d__35))]
	private IEnumerator FadeToNextIE()
	{
		return null;
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x975F8C", Offset = "0x975F8C", VA = "0x975F8C")]
	private void FinishedAll()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x976274", Offset = "0x976274", VA = "0x976274")]
	public void GrapPlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x976358", Offset = "0x976358", VA = "0x976358")]
	public void ReleasePlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x97643C", Offset = "0x97643C", VA = "0x97643C")]
	private void ReleaseHand(XRNode hand)
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x976440", Offset = "0x976440", VA = "0x976440")]
	public void StarthandTips(XRNode hand)
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x9764CC", Offset = "0x9764CC", VA = "0x9764CC")]
	public void StophandTips(Sean_HandBase handbase)
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x9766EC", Offset = "0x9766EC", VA = "0x9766EC")]
	private void showDoudiTips(int index)
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x976528", Offset = "0x976528", VA = "0x976528")]
	private void stopDoudiTips(int index)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x975B70", Offset = "0x975B70", VA = "0x975B70")]
	[IteratorStateMachine(typeof(<ShowPicaiTips>d__44))]
	private IEnumerator ShowPicaiTips()
	{
		return null;
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x976904", Offset = "0x976904", VA = "0x976904")]
	public HoushangNight()
	{
	}
}
[Token(Token = "0x20000C6")]
public class HoushangNight2 : Sean_GameBase
{
	[Token(Token = "0x20000C8")]
	[CompilerGenerated]
	private sealed class <StartIE>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight2 <>4__this;

		[Token(Token = "0x1700007D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006EE")]
			[Address(RVA = "0x97CB78", Offset = "0x97CB78", VA = "0x97CB78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006F0")]
			[Address(RVA = "0x97CBC0", Offset = "0x97CBC0", VA = "0x97CBC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x978D7C", Offset = "0x978D7C", VA = "0x978D7C")]
		[DebuggerHidden]
		public <StartIE>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x97C95C", Offset = "0x97C95C", VA = "0x97C95C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x97C960", Offset = "0x97C960", VA = "0x97C960", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x97CB80", Offset = "0x97CB80", VA = "0x97CB80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C9")]
	[CompilerGenerated]
	private sealed class <DelayFireSmokeIE>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700007F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006F4")]
			[Address(RVA = "0x97CCA8", Offset = "0x97CCA8", VA = "0x97CCA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006F6")]
			[Address(RVA = "0x97CCF0", Offset = "0x97CCF0", VA = "0x97CCF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x978E24", Offset = "0x978E24", VA = "0x978E24")]
		[DebuggerHidden]
		public <DelayFireSmokeIE>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x97CBC8", Offset = "0x97CBC8", VA = "0x97CBC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x97CBCC", Offset = "0x97CBCC", VA = "0x97CBCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x97CCB0", Offset = "0x97CCB0", VA = "0x97CCB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CA")]
	[CompilerGenerated]
	private sealed class <DelayStartHuopen>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight2 <>4__this;

		[Token(Token = "0x17000081")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006FA")]
			[Address(RVA = "0x97CDE0", Offset = "0x97CDE0", VA = "0x97CDE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006FC")]
			[Address(RVA = "0x97CE28", Offset = "0x97CE28", VA = "0x97CE28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x979090", Offset = "0x979090", VA = "0x979090")]
		[DebuggerHidden]
		public <DelayStartHuopen>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x97CCF8", Offset = "0x97CCF8", VA = "0x97CCF8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x97CCFC", Offset = "0x97CCFC", VA = "0x97CCFC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x97CDE8", Offset = "0x97CDE8", VA = "0x97CDE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CB")]
	[CompilerGenerated]
	private sealed class <DelaySetJvhuogun>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight2 <>4__this;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform <jvhuogunTrans>5__2;

		[Token(Token = "0x17000083")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000700")]
			[Address(RVA = "0x97CFA0", Offset = "0x97CFA0", VA = "0x97CFA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000702")]
			[Address(RVA = "0x97CFE8", Offset = "0x97CFE8", VA = "0x97CFE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x97A848", Offset = "0x97A848", VA = "0x97A848")]
		[DebuggerHidden]
		public <DelaySetJvhuogun>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x97CE30", Offset = "0x97CE30", VA = "0x97CE30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x97CE34", Offset = "0x97CE34", VA = "0x97CE34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x97CFA8", Offset = "0x97CFA8", VA = "0x97CFA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CC")]
	[CompilerGenerated]
	private sealed class <TestEndingIE>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight2 <>4__this;

		[Token(Token = "0x17000085")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000706")]
			[Address(RVA = "0x97D354", Offset = "0x97D354", VA = "0x97D354", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000708")]
			[Address(RVA = "0x97D39C", Offset = "0x97D39C", VA = "0x97D39C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x97A978", Offset = "0x97A978", VA = "0x97A978")]
		[DebuggerHidden]
		public <TestEndingIE>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x97CFF0", Offset = "0x97CFF0", VA = "0x97CFF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x97CFF4", Offset = "0x97CFF4", VA = "0x97CFF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0x97D35C", Offset = "0x97D35C", VA = "0x97D35C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CD")]
	[CompilerGenerated]
	private sealed class <FinishedAllIE>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight2 <>4__this;

		[Token(Token = "0x17000087")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600070C")]
			[Address(RVA = "0x97D7A8", Offset = "0x97D7A8", VA = "0x97D7A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600070E")]
			[Address(RVA = "0x97D7F0", Offset = "0x97D7F0", VA = "0x97D7F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x97AA14", Offset = "0x97AA14", VA = "0x97AA14")]
		[DebuggerHidden]
		public <FinishedAllIE>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x97D3A4", Offset = "0x97D3A4", VA = "0x97D3A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x97D3A8", Offset = "0x97D3A8", VA = "0x97D3A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x97D7B0", Offset = "0x97D7B0", VA = "0x97D7B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CE")]
	[CompilerGenerated]
	private sealed class <DelayToFadeToNext>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight2 <>4__this;

		[Token(Token = "0x17000089")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000712")]
			[Address(RVA = "0x97DAA8", Offset = "0x97DAA8", VA = "0x97DAA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000714")]
			[Address(RVA = "0x97DAF0", Offset = "0x97DAF0", VA = "0x97DAF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x97B360", Offset = "0x97B360", VA = "0x97B360")]
		[DebuggerHidden]
		public <DelayToFadeToNext>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x97D7F8", Offset = "0x97D7F8", VA = "0x97D7F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x97D7FC", Offset = "0x97D7FC", VA = "0x97D7FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x97DAB0", Offset = "0x97DAB0", VA = "0x97DAB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D1")]
	[CompilerGenerated]
	private sealed class <ShowPicaiTips>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HoushangNight2 <>4__this;

		[Token(Token = "0x1700008B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600071C")]
			[Address(RVA = "0x97DD50", Offset = "0x97DD50", VA = "0x97DD50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600071E")]
			[Address(RVA = "0x97DD98", Offset = "0x97DD98", VA = "0x97DD98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x97B884", Offset = "0x97B884", VA = "0x97B884")]
		[DebuggerHidden]
		public <ShowPicaiTips>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x97DB78", Offset = "0x97DB78", VA = "0x97DB78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x97DB7C", Offset = "0x97DB7C", VA = "0x97DB7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x97DD58", Offset = "0x97DD58", VA = "0x97DD58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject pianweiPangbai;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isFirstGrabNu;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject MiVRySample;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject SmokeTriangle;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject SmokeCircle;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool startEnding;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Sean_HandBase Hand;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public HJ_FHT _HJ_FHT;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject PlaneB;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public jiaojia _jiaojia;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DeviceEventBase jvhuogun;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public DeviceEventBase nu;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public DeviceEventBase nu2;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Coroutine curAniTipsCor;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private string curAniTipsCorName;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private int curOutLineIndex;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private int AniTipsIndex;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public SpriteRenderer NPC_UI;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public SpriteRenderer[] doudiTips;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject[] AniTips;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Tween[] doudiTipsTw;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private int lastIndex_doudiTips;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float delay;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform pianweiCamara;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform GroundTirgger;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Transform jvhuogunResetPos;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float DelayReset;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameObject Plane_C;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Transform CPOSTrigger;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float DelayToFade;

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x9772E4", Offset = "0x9772E4", VA = "0x9772E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x977BB8", Offset = "0x977BB8", VA = "0x977BB8")]
	private void OnTriggerEnter_CPOS(Collider other)
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x9780B4", Offset = "0x9780B4", VA = "0x9780B4")]
	private void OnTriggerEnter_Ground(Collider other)
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x978238", Offset = "0x978238", VA = "0x978238")]
	private void Start()
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x978D08", Offset = "0x978D08", VA = "0x978D08")]
	[IteratorStateMachine(typeof(<StartIE>d__33))]
	private IEnumerator StartIE()
	{
		return null;
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x978DA4", Offset = "0x978DA4", VA = "0x978DA4")]
	private void DelayFireSmoke()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x978DC4", Offset = "0x978DC4", VA = "0x978DC4")]
	[IteratorStateMachine(typeof(<DelayFireSmokeIE>d__35))]
	private IEnumerator DelayFireSmokeIE()
	{
		return null;
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x978E4C", Offset = "0x978E4C", VA = "0x978E4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x978660", Offset = "0x978660", VA = "0x978660")]
	public void Init()
	{
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x978F28", Offset = "0x978F28", VA = "0x978F28")]
	private void InitToolsScripts(Transform trans)
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x97901C", Offset = "0x97901C", VA = "0x97901C")]
	[IteratorStateMachine(typeof(<DelayStartHuopen>d__39))]
	private IEnumerator DelayStartHuopen()
	{
		return null;
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x9790B8", Offset = "0x9790B8", VA = "0x9790B8")]
	private void StartGame1()
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0x977CA8", Offset = "0x977CA8", VA = "0x977CA8")]
	private void StartGame3()
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x979754", Offset = "0x979754", VA = "0x979754")]
	private void ShowTipsNuToFireCaodui(DeviceEventBase Devic)
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x979840", Offset = "0x979840", VA = "0x979840")]
	private void StartGame4()
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0x97A7D4", Offset = "0x97A7D4", VA = "0x97A7D4")]
	[IteratorStateMachine(typeof(<DelaySetJvhuogun>d__44))]
	private IEnumerator DelaySetJvhuogun()
	{
		return null;
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0x97A870", Offset = "0x97A870", VA = "0x97A870")]
	private void FadeToNext()
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0x978F08", Offset = "0x978F08", VA = "0x978F08")]
	public void TestEnding()
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x97A904", Offset = "0x97A904", VA = "0x97A904")]
	[IteratorStateMachine(typeof(<TestEndingIE>d__47))]
	public IEnumerator TestEndingIE()
	{
		return null;
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x97A9A0", Offset = "0x97A9A0", VA = "0x97A9A0")]
	[IteratorStateMachine(typeof(<FinishedAllIE>d__48))]
	private IEnumerator FinishedAllIE()
	{
		return null;
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x97AA3C", Offset = "0x97AA3C", VA = "0x97AA3C")]
	private void FinishedAll()
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x97A890", Offset = "0x97A890", VA = "0x97A890")]
	[IteratorStateMachine(typeof(<DelayToFadeToNext>d__51))]
	private IEnumerator DelayToFadeToNext()
	{
		return null;
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x97B388", Offset = "0x97B388", VA = "0x97B388")]
	public void GrapPlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x97B3E4", Offset = "0x97B3E4", VA = "0x97B3E4")]
	public void ReleasePlaySound(DeviceEventBase device)
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x97B440", Offset = "0x97B440", VA = "0x97B440")]
	private void ReleaseHand(XRNode hand)
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x97B444", Offset = "0x97B444", VA = "0x97B444")]
	public void StarthandTips(XRNode hand)
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x9796F8", Offset = "0x9796F8", VA = "0x9796F8")]
	public void StophandTips(Sean_HandBase handbase)
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x97B694", Offset = "0x97B694", VA = "0x97B694")]
	private void showDoudiTips(int index)
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x97B4D0", Offset = "0x97B4D0", VA = "0x97B4D0")]
	private void stopDoudiTips(int index)
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x979684", Offset = "0x979684", VA = "0x979684")]
	[IteratorStateMachine(typeof(<ShowPicaiTips>d__59))]
	private IEnumerator ShowPicaiTips()
	{
		return null;
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x97B8AC", Offset = "0x97B8AC", VA = "0x97B8AC")]
	[ContextMenu("看片尾")]
	private void _FinishedAll()
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x97B8B0", Offset = "0x97B8B0", VA = "0x97B8B0")]
	public HoushangNight2()
	{
	}
}
[Token(Token = "0x20000D2")]
public class InRoomNight2 : Sean_GameBase
{
	[Token(Token = "0x20000D3")]
	[CompilerGenerated]
	private sealed class <StartIE>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InRoomNight2 <>4__this;

		[Token(Token = "0x1700008D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600072B")]
			[Address(RVA = "0x97E3E4", Offset = "0x97E3E4", VA = "0x97E3E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600072D")]
			[Address(RVA = "0x97E42C", Offset = "0x97E42C", VA = "0x97E42C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x97DF6C", Offset = "0x97DF6C", VA = "0x97DF6C")]
		[DebuggerHidden]
		public <StartIE>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x97E228", Offset = "0x97E228", VA = "0x97E228", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x97E22C", Offset = "0x97E22C", VA = "0x97E22C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x97E3EC", Offset = "0x97E3EC", VA = "0x97E3EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D4")]
	[CompilerGenerated]
	private sealed class <DelayToFadeToNext>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InRoomNight2 <>4__this;

		[Token(Token = "0x1700008F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000731")]
			[Address(RVA = "0x97E5BC", Offset = "0x97E5BC", VA = "0x97E5BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000733")]
			[Address(RVA = "0x97E604", Offset = "0x97E604", VA = "0x97E604", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x97E1F8", Offset = "0x97E1F8", VA = "0x97E1F8")]
		[DebuggerHidden]
		public <DelayToFadeToNext>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x97E434", Offset = "0x97E434", VA = "0x97E434", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x97E438", Offset = "0x97E438", VA = "0x97E438", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x97E5C4", Offset = "0x97E5C4", VA = "0x97E5C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject Plane;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject TriggerArea;

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x97DDA0", Offset = "0x97DDA0", VA = "0x97DDA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0x97DDF8", Offset = "0x97DDF8", VA = "0x97DDF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0x97DEF8", Offset = "0x97DEF8", VA = "0x97DEF8")]
	[IteratorStateMachine(typeof(<StartIE>d__4))]
	private IEnumerator StartIE()
	{
		return null;
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0x97DF94", Offset = "0x97DF94", VA = "0x97DF94")]
	private void StopAni()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0x97E0B4", Offset = "0x97E0B4", VA = "0x97E0B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0x97E110", Offset = "0x97E110", VA = "0x97E110")]
	private void StartGame()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x97E0F0", Offset = "0x97E0F0", VA = "0x97E0F0")]
	private void FadeToNext()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x97E184", Offset = "0x97E184", VA = "0x97E184")]
	[IteratorStateMachine(typeof(<DelayToFadeToNext>d__9))]
	private IEnumerator DelayToFadeToNext()
	{
		return null;
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x97E220", Offset = "0x97E220", VA = "0x97E220")]
	public InRoomNight2()
	{
	}
}
[Token(Token = "0x20000D5")]
public class jiaojia : MonoBehaviour
{
	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoPlay;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public uint Hand_index;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action FinishedFlag;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform qizi;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float MaxY;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float MinY;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform curhandle;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 pos;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 center;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float RotAngel;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float LastRotAngel;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool canRot;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float SumRotAngel;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float heightPerDot;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float offset;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private bool isFinished;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SliderCtrl slider;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Action<Sean_HandBase> DeviceTriggerEnterClick;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool isDeviceTrigger;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject handModel;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject PlayerRightHand;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject PlayerLeftHand;

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x97E60C", Offset = "0x97E60C", VA = "0x97E60C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0x97E694", Offset = "0x97E694", VA = "0x97E694")]
	private void Start()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0x97E78C", Offset = "0x97E78C", VA = "0x97E78C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0x97E8A4", Offset = "0x97E8A4", VA = "0x97E8A4")]
	private void UpdateRot()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0x97E984", Offset = "0x97E984", VA = "0x97E984")]
	private void UpdateQizi()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0x97ED7C", Offset = "0x97ED7C", VA = "0x97ED7C")]
	private void AutoUpdateQizi()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0x97EC70", Offset = "0x97EC70", VA = "0x97EC70")]
	private float VectorAngle(Vector2 from, Vector2 to)
	{
		return default(float);
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x972F58", Offset = "0x972F58", VA = "0x972F58")]
	public void SetDeviceTriggerEnterClick(Sean_HandBase hand)
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x97EE9C", Offset = "0x97EE9C", VA = "0x97EE9C")]
	[ContextMenu("自动升旗")]
	private void _AutoUpdateQizi()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0x97EEA0", Offset = "0x97EEA0", VA = "0x97EEA0")]
	public jiaojia()
	{
	}
}
[Token(Token = "0x20000D6")]
public class jvhuoSmallFire : MonoBehaviour
{
	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject smallFirePs;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem ps;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool canPlayAudio;

	[Token(Token = "0x600073F")]
	[Address(RVA = "0x97EEE0", Offset = "0x97EEE0", VA = "0x97EEE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x97EF40", Offset = "0x97EF40", VA = "0x97EF40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x97EF44", Offset = "0x97EF44", VA = "0x97EF44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x97EF7C", Offset = "0x97EF7C", VA = "0x97EF7C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0x97F098", Offset = "0x97F098", VA = "0x97F098")]
	public jvhuoSmallFire()
	{
	}
}
[Token(Token = "0x20000D7")]
public class MultiNusMananger : MonoBehaviour
{
	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DeviceEventBase nu;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DeviceEventBase nu2;

	[Token(Token = "0x6000744")]
	[Address(RVA = "0x97F0A8", Offset = "0x97F0A8", VA = "0x97F0A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0x97F360", Offset = "0x97F360", VA = "0x97F360")]
	private void Update()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x97F364", Offset = "0x97F364", VA = "0x97F364")]
	public MultiNusMananger()
	{
	}
}
[Token(Token = "0x20000D8")]
public class pianweipangbai : MonoBehaviour
{
	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource auidos;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool startPlay;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action audioIsPause;

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x97F6B4", Offset = "0x97F6B4", VA = "0x97F6B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x97F750", Offset = "0x97F750", VA = "0x97F750")]
	private void Start()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x97F754", Offset = "0x97F754", VA = "0x97F754")]
	private void Update()
	{
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x97F7A4", Offset = "0x97F7A4", VA = "0x97F7A4")]
	public void Play()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x97F7CC", Offset = "0x97F7CC", VA = "0x97F7CC")]
	public pianweipangbai()
	{
	}
}
[Token(Token = "0x20000D9")]
public class SceneStartFade_Night : MonoBehaviour
{
	[Token(Token = "0x20000DA")]
	[CompilerGenerated]
	private sealed class <AppearScene>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneStartFade_Night <>4__this;

		[Token(Token = "0x17000091")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000759")]
			[Address(RVA = "0x97FC70", Offset = "0x97FC70", VA = "0x97FC70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600075B")]
			[Address(RVA = "0x97FCB8", Offset = "0x97FCB8", VA = "0x97FCB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0x97FA4C", Offset = "0x97FA4C", VA = "0x97FA4C")]
		[DebuggerHidden]
		public <AppearScene>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0x97FB00", Offset = "0x97FB00", VA = "0x97FB00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0x97FB04", Offset = "0x97FB04", VA = "0x97FB04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x97FC78", Offset = "0x97FC78", VA = "0x97FC78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject eyes;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource SZG_BGM;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] audioClips;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource audio2;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public MediaPlayer player;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform videoMaks;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Renderer videoRender;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform mask;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Renderer maskRender;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] scenes;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool canTriggerEvent;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool canTriggerEvent1;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public PXR_ScreenFade_X screenFade;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool isPlayingEvent;

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x97F7D4", Offset = "0x97F7D4", VA = "0x97F7D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000751")]
	[Address(RVA = "0x97F950", Offset = "0x97F950", VA = "0x97F950")]
	private void ResetCamera()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x97F9D8", Offset = "0x97F9D8", VA = "0x97F9D8")]
	[IteratorStateMachine(typeof(<AppearScene>d__17))]
	private IEnumerator AppearScene()
	{
		return null;
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x97FA74", Offset = "0x97FA74", VA = "0x97FA74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x97FA94", Offset = "0x97FA94", VA = "0x97FA94")]
	[ContextMenu("跳过片头")]
	private void PassBegining()
	{
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x97FAF0", Offset = "0x97FAF0", VA = "0x97FAF0")]
	public SceneStartFade_Night()
	{
	}
}
[Token(Token = "0x20000DB")]
public class startSceneNight2 : MonoBehaviour
{
	[Token(Token = "0x20000DC")]
	[CompilerGenerated]
	private sealed class <StartPlay>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public startSceneNight2 <>4__this;

		[Token(Token = "0x17000093")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000765")]
			[Address(RVA = "0x98006C", Offset = "0x98006C", VA = "0x98006C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000767")]
			[Address(RVA = "0x9800B4", Offset = "0x9800B4", VA = "0x9800B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x97FE34", Offset = "0x97FE34", VA = "0x97FE34")]
		[DebuggerHidden]
		public <StartPlay>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x97FEA0", Offset = "0x97FEA0", VA = "0x97FEA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x97FEA4", Offset = "0x97FEA4", VA = "0x97FEA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x980074", Offset = "0x980074", VA = "0x980074", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audios;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public VideoPlayer video;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool startPlay;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject nextScene;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject nextScene1;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RenderTexture rt;

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x97FCC0", Offset = "0x97FCC0", VA = "0x97FCC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x97FD40", Offset = "0x97FD40", VA = "0x97FD40")]
	private void Start()
	{
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x97FE30", Offset = "0x97FE30", VA = "0x97FE30")]
	private void Update()
	{
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0x97FDBC", Offset = "0x97FDBC", VA = "0x97FDBC")]
	[IteratorStateMachine(typeof(<StartPlay>d__9))]
	private IEnumerator StartPlay()
	{
		return null;
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0x97FE5C", Offset = "0x97FE5C", VA = "0x97FE5C")]
	public void OnPlay()
	{
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x97FE98", Offset = "0x97FE98", VA = "0x97FE98")]
	public startSceneNight2()
	{
	}
}
[Token(Token = "0x20000DD")]
public class Xiongnu : MonoBehaviour
{
	[Token(Token = "0x20000DE")]
	[CompilerGenerated]
	private sealed class <PlaySmokeIE>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Xiongnu <>4__this;

		[Token(Token = "0x17000095")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000775")]
			[Address(RVA = "0x980478", Offset = "0x980478", VA = "0x980478", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000777")]
			[Address(RVA = "0x9804C0", Offset = "0x9804C0", VA = "0x9804C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x980354", Offset = "0x980354", VA = "0x980354")]
		[DebuggerHidden]
		public <PlaySmokeIE>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x980420", Offset = "0x980420", VA = "0x980420", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x980424", Offset = "0x980424", VA = "0x980424", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x980480", Offset = "0x980480", VA = "0x980480", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000DF")]
	[CompilerGenerated]
	private sealed class <StartPlayXiongnuAniIE>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Xiongnu <>4__this;

		[Token(Token = "0x17000097")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600077B")]
			[Address(RVA = "0x9805C0", Offset = "0x9805C0", VA = "0x9805C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600077D")]
			[Address(RVA = "0x980608", Offset = "0x980608", VA = "0x980608", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x9803F0", Offset = "0x9803F0", VA = "0x9803F0")]
		[DebuggerHidden]
		public <StartPlayXiongnuAniIE>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x9804C8", Offset = "0x9804C8", VA = "0x9804C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x9804CC", Offset = "0x9804CC", VA = "0x9804CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x9805C8", Offset = "0x9805C8", VA = "0x9805C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Xiongnu Instance;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator ani;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CoreSmokeCtrl _CoreSmokeCtrl;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Delay;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] smokes;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] XiongnuArr;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<navTest> xiongnuAIList;

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x9800BC", Offset = "0x9800BC", VA = "0x9800BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x980288", Offset = "0x980288", VA = "0x980288")]
	private void Start()
	{
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x98028C", Offset = "0x98028C", VA = "0x98028C")]
	private void Update()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x972814", Offset = "0x972814", VA = "0x972814")]
	public void PlaySmoke()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0x97C1E4", Offset = "0x97C1E4", VA = "0x97C1E4")]
	public void PlaySmoke(int index)
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x9802E0", Offset = "0x9802E0", VA = "0x9802E0")]
	[IteratorStateMachine(typeof(<PlaySmokeIE>d__12))]
	public IEnumerator PlaySmokeIE()
	{
		return null;
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x9721EC", Offset = "0x9721EC", VA = "0x9721EC")]
	public void StartPlayXiongnuAni()
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0x97C220", Offset = "0x97C220", VA = "0x97C220")]
	public void XiongnuRunAway()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x98037C", Offset = "0x98037C", VA = "0x98037C")]
	[IteratorStateMachine(typeof(<StartPlayXiongnuAniIE>d__15))]
	public IEnumerator StartPlayXiongnuAniIE()
	{
		return null;
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x980418", Offset = "0x980418", VA = "0x980418")]
	public Xiongnu()
	{
	}
}
[Token(Token = "0x20000E0")]
public class GameCountCtrl : MonoBehaviour
{
	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isLockBowuguan;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int Count;

	[Token(Token = "0x17000099")]
	public static GameCountCtrl Instance
	{
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x980610", Offset = "0x980610", VA = "0x980610")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x980658", Offset = "0x980658", VA = "0x980658")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0x9806B0", Offset = "0x9806B0", VA = "0x9806B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0x98087C", Offset = "0x98087C", VA = "0x98087C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000782")]
	[Address(RVA = "0x980880", Offset = "0x980880", VA = "0x980880")]
	private void Update()
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0x980884", Offset = "0x980884", VA = "0x980884")]
	public GameCountCtrl()
	{
	}
}
[Token(Token = "0x20000E1")]
public class LOGO : Sean_SceneBase
{
	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject NextScene;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Sprite sprite;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public MediaPlayer player2;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool canPlayAciton;

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x98088C", Offset = "0x98088C", VA = "0x98088C")]
	private new void Awake()
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x980E40", Offset = "0x980E40", VA = "0x980E40")]
	private void Init()
	{
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x980EB4", Offset = "0x980EB4", VA = "0x980EB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x980FF4", Offset = "0x980FF4", VA = "0x980FF4")]
	protected void PlayerEvent2(MediaPlayer arg0, MediaPlayerEvent.EventType arg1, ErrorCode arg2)
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x981030", Offset = "0x981030", VA = "0x981030", Slot = "6")]
	protected virtual void _PlayerEvent()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x9810F8", Offset = "0x9810F8", VA = "0x9810F8")]
	protected void PlayerEvent3(MediaPlayer arg0, MediaPlayerEvent.EventType arg1, ErrorCode arg2)
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0x9811AC", Offset = "0x9811AC", VA = "0x9811AC")]
	private new void Update()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x9812A4", Offset = "0x9812A4", VA = "0x9812A4")]
	public LOGO()
	{
	}
}
[Token(Token = "0x20000E2")]
public class LOGO_0 : Sean_GameBase
{
	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SpriteRenderer[] prologue;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Tween[] tws;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<string, bool> IshitDict;

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x9822B4", Offset = "0x9822B4", VA = "0x9822B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x9823DC", Offset = "0x9823DC", VA = "0x9823DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0x9824A0", Offset = "0x9824A0", VA = "0x9824A0")]
	private void Start()
	{
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x982934", Offset = "0x982934", VA = "0x982934")]
	private void RayOnClick(XRNode xR, RaycastHit obj)
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0x982B80", Offset = "0x982B80", VA = "0x982B80")]
	private void DelayToNextScene()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0x982C58", Offset = "0x982C58", VA = "0x982C58")]
	private void RayOnEnter(XRNode xR, RaycastHit obj)
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x98307C", Offset = "0x98307C", VA = "0x98307C")]
	private void RayOnExit2(XRNode xR, string obj)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x982D1C", Offset = "0x982D1C", VA = "0x982D1C")]
	public void UIDoScale(Transform uiTrans)
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x983084", Offset = "0x983084", VA = "0x983084")]
	public void UIResetScale(string name)
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x983428", Offset = "0x983428", VA = "0x983428")]
	[ContextMenu("放大UI1")]
	public void dfer1()
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0x983468", Offset = "0x983468", VA = "0x983468")]
	private void ResetLine()
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0x983580", Offset = "0x983580", VA = "0x983580")]
	private void Update()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0x98374C", Offset = "0x98374C", VA = "0x98374C")]
	public LOGO_0()
	{
	}
}
[Token(Token = "0x20000E3")]
public class UICtrl : MonoBehaviour
{
	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SpriteRenderer spriteRenderer;

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x983924", Offset = "0x983924", VA = "0x983924")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x98397C", Offset = "0x98397C", VA = "0x98397C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x983990", Offset = "0x983990", VA = "0x983990")]
	private void Start()
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x983994", Offset = "0x983994", VA = "0x983994")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x983998", Offset = "0x983998", VA = "0x983998")]
	public UICtrl()
	{
	}
}
[Token(Token = "0x20000E4")]
public class VoiceDelay : MonoBehaviour
{
	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool isFirstLoad;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static VoiceDelay Instance;

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x9839A0", Offset = "0x9839A0", VA = "0x9839A0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x983A44", Offset = "0x983A44", VA = "0x983A44")]
	private void Start()
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x983A48", Offset = "0x983A48", VA = "0x983A48")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x983A4C", Offset = "0x983A4C", VA = "0x983A4C")]
	public VoiceDelay()
	{
	}
}
[Token(Token = "0x20000E5")]
public class EffectAudio : MonoBehaviour
{
	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource audioS;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool startPlay;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaxVolume;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform target;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool hasTarget;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Tween changeVolumTw;

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x983A54", Offset = "0x983A54", VA = "0x983A54")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x983AAC", Offset = "0x983AAC", VA = "0x983AAC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x983AB0", Offset = "0x983AB0", VA = "0x983AB0")]
	public void SetSpaceAudio(float minDistance = 1f, float maxDistance = 500f)
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x983B24", Offset = "0x983B24", VA = "0x983B24")]
	public void SetVolumeRolloffMode(AudioRolloffMode mode = AudioRolloffMode.Linear, float minDistance = 1f, float maxDistance = 5f)
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x983B7C", Offset = "0x983B7C", VA = "0x983B7C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x983C50", Offset = "0x983C50", VA = "0x983C50")]
	public void OnPlayMusic(AudioClip clip, float volume)
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x983CB0", Offset = "0x983CB0", VA = "0x983CB0")]
	public void RepeatPlayMusic(AudioClip clip, float volume)
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x983D18", Offset = "0x983D18", VA = "0x983D18")]
	public void StopRepeatPlay()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x983D48", Offset = "0x983D48", VA = "0x983D48")]
	public void DisappearAudio(float delay = 1f)
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x983E10", Offset = "0x983E10", VA = "0x983E10")]
	public void AddVolume(float offset)
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0x983E98", Offset = "0x983E98", VA = "0x983E98")]
	public void SetVolume(float Volume)
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0x983EB4", Offset = "0x983EB4", VA = "0x983EB4")]
	public void ChangeVolume(float Volume, float _time = 1f)
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x983F14", Offset = "0x983F14", VA = "0x983F14")]
	public void SetTarget(Transform target)
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x983F38", Offset = "0x983F38", VA = "0x983F38")]
	public void SetLoop(bool Isloop = true)
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x983F58", Offset = "0x983F58", VA = "0x983F58")]
	public EffectAudio()
	{
	}
}
[Token(Token = "0x20000E6")]
public class EffectAudioMananger : MonoBehaviour
{
	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip BG;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource source;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static EffectAudioMananger instance;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip[] clips;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dictionary<string, AudioClip> audioClipDic;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject effectAudioPrefab;

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x983FD4", Offset = "0x983FD4", VA = "0x983FD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x9841C4", Offset = "0x9841C4", VA = "0x9841C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x9841C8", Offset = "0x9841C8", VA = "0x9841C8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x9841CC", Offset = "0x9841CC", VA = "0x9841CC")]
	public EffectAudio PlayAudio(string name, float volume = 1f)
	{
		return null;
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x9842C4", Offset = "0x9842C4", VA = "0x9842C4")]
	public EffectAudio PlayAudio(string name, Transform trans, float offsetX = 0f, float offsetY = 0f, float offsetZ = 0f, float volume = 1f, float minDistance = 1f, float maxDistance = 500f, bool hasParent = true, bool hasTarget = false)
	{
		return null;
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x984478", Offset = "0x984478", VA = "0x984478")]
	public EffectAudio RepeatPlayAudio(string name, float volume = 1f)
	{
		return null;
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x984570", Offset = "0x984570", VA = "0x984570")]
	public EffectAudio RepeatPlayAudio(string name, Transform trans, float offsetX = 0f, float offsetY = 0f, float offsetZ = 0f, float volume = 1f, float minDistance = 1f, float maxDistance = 500f, bool hasParent = true)
	{
		return null;
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x984700", Offset = "0x984700", VA = "0x984700")]
	public void SetBGMusic(string name, float Volume = 0.2f)
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x984798", Offset = "0x984798", VA = "0x984798")]
	public void PlayBGMusic(float Volume = 0.5f)
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x984850", Offset = "0x984850", VA = "0x984850")]
	public void StopBGMusic(float delay = 1f)
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0x9848E0", Offset = "0x9848E0", VA = "0x9848E0")]
	public EffectAudioMananger()
	{
	}
}
[Token(Token = "0x20000E7")]
public class SceneCite : UnityInstance<SceneCite>
{
	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected List<string> SceneObjsPath;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected List<string> SceneDestroyObjsPath;

	[Token(Token = "0x1700009A")]
	public List<Transform> SceneObjCite
	{
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x984968", Offset = "0x984968", VA = "0x984968")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x984970", Offset = "0x984970", VA = "0x984970")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0x984978", Offset = "0x984978", VA = "0x984978")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0x984A34", Offset = "0x984A34", VA = "0x984A34")]
	public void Init()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0x984D50", Offset = "0x984D50", VA = "0x984D50")]
	public SceneCite()
	{
	}
}
[Token(Token = "0x20000E8")]
public class ARCameraTest : MonoBehaviour
{
	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float MoveSpeed;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float RotateSpeed;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float X;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float Y;

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x984E40", Offset = "0x984E40", VA = "0x984E40")]
	private void Start()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0x984E44", Offset = "0x984E44", VA = "0x984E44")]
	private void Update()
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x985334", Offset = "0x985334", VA = "0x985334")]
	public ARCameraTest()
	{
	}
}
[Token(Token = "0x20000E9")]
public class DeviceEventBase : MonoBehaviour
{
	[Token(Token = "0x20000EA")]
	[CompilerGenerated]
	private sealed class <DelayResetInitIE>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DeviceEventBase <>4__this;

		[Token(Token = "0x1700009B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E3")]
			[Address(RVA = "0x985DC4", Offset = "0x985DC4", VA = "0x985DC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E5")]
			[Address(RVA = "0x985E0C", Offset = "0x985E0C", VA = "0x985E0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x9859B0", Offset = "0x9859B0", VA = "0x9859B0")]
		[DebuggerHidden]
		public <DelayResetInitIE>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x985D08", Offset = "0x985D08", VA = "0x985D08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x985D0C", Offset = "0x985D0C", VA = "0x985D0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x985DCC", Offset = "0x985DCC", VA = "0x985DCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool needResetPos;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HighlightEffect _HighlightEffect;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isOnInitPos;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool BeGrapping;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool canPlayEffect;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool isForceReset;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ResetDelay;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float CurrentTime;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action DeviceOnClick;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action<XRNode, RaycastHit> RayOnEnter;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Action<XRNode, RaycastHit> RayOnStay;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Action<XRNode, RaycastHit> RayOnExit;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action<XRNode, string> RayOnExit2;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action<XRNode, RaycastHit> RayOnEnterClick;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action<XRNode, RaycastHit> RayOnStayClick;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Action<XRNode, RaycastHit> RayOnExitClick;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action<Collider, DeviceEventBase> ThisTriggerEnter;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Action<Collider, DeviceEventBase> ThisTriggerStay;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Action<Collider, DeviceEventBase> ThisTriggerExit;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Action<Collision> ThisCollisionEnter;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Action<Collision> ThisCollisionStay;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Action<Collision> ThisCollisionExit;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action<Collider> DeviceTriggerEnter;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Action<Collider> DeviceTriggerStay;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Action<Collider> DeviceTriggerExit;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Action<Sean_HandBase> DeviceTriggerEnterClick;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Action<Sean_HandBase> DeviceTriggerStayClick;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Action<Sean_HandBase> DeviceTriggerExitClick;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Action<Sean_HandBase, DeviceEventBase> DeviceTriggerEnterClick2;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Action<Sean_HandBase, DeviceEventBase> DeviceTriggerStayClick2;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Action<Sean_HandBase, DeviceEventBase> DeviceTriggerExitClick2;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Action<DeviceEventBase> HandGrapSound;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Action<DeviceEventBase> HandReleaseSound;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Action<XRNode> HandRelease;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Action<XRNode, DeviceEventBase> HandRelease2;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Action<XRNode> ResetInitStateEvent;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Action<XRNode, DeviceEventBase> ResetInitStateEvent2;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public bool isObjcatch;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	public bool isShake;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public List<string> CloseName;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Vector3 pos;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public Vector3 ro;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private Rigidbody rig;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public XRNode hand;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public XRGrabInteractable_X _XRGrabInteractable_X;

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x985348", Offset = "0x985348", VA = "0x985348")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x9854E4", Offset = "0x9854E4", VA = "0x9854E4")]
	public void SetHighlightEffect(bool TrueOrFalse = true)
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x985590", Offset = "0x985590", VA = "0x985590")]
	public void ResetInitPos(Vector3 pos, Vector3 rot)
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x9855AC", Offset = "0x9855AC", VA = "0x9855AC")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x985770", Offset = "0x985770", VA = "0x985770")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x9858FC", Offset = "0x9858FC", VA = "0x9858FC")]
	public void ForceReset()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x98590C", Offset = "0x98590C", VA = "0x98590C")]
	public void DelayResetInit(float delay = 3f)
	{
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x98592C", Offset = "0x98592C", VA = "0x98592C")]
	[IteratorStateMachine(typeof(<DelayResetInitIE>d__52))]
	private IEnumerator DelayResetInitIE(float delay)
	{
		return null;
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x9859D8", Offset = "0x9859D8", VA = "0x9859D8")]
	public void DisableEffect()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x9857D0", Offset = "0x9857D0", VA = "0x9857D0")]
	public void ResetInitState()
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x9859DC", Offset = "0x9859DC", VA = "0x9859DC")]
	public void StopHandTips()
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x9859E0", Offset = "0x9859E0", VA = "0x9859E0")]
	private void CloseObj(Collision collision)
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x985B94", Offset = "0x985B94", VA = "0x985B94")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x985BB4", Offset = "0x985BB4", VA = "0x985BB4")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0x985BD4", Offset = "0x985BD4", VA = "0x985BD4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x985BF4", Offset = "0x985BF4", VA = "0x985BF4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x985C34", Offset = "0x985C34", VA = "0x985C34")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x985C50", Offset = "0x985C50", VA = "0x985C50")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x985C6C", Offset = "0x985C6C", VA = "0x985C6C")]
	public DeviceEventBase()
	{
	}
}
[Token(Token = "0x20000EB")]
public class FingersValue : MonoBehaviour
{
	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public float _Thumb;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public float _Index;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public float _Middle;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public float _Ring;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public float _Pinky;

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x985E14", Offset = "0x985E14", VA = "0x985E14")]
	public FingersValue(float _Thumb, float _Index, float _Middle, float _Ring, float _Pinky)
	{
	}
}
[Token(Token = "0x20000EC")]
public class Sean_DeviceController : MonoBehaviour
{
	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hasRigCollision;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected InputFeatureUsage<bool> Key;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public Transform LeftLine;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	public Transform RightLine;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public Transform LeftHand;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public Transform RightHand;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Sean_LeftLine sean_LeftLine;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Sean_RightLine sean_RightLine;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Sean_LeftHand sean_LeftHand;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sean_RightHand sean_RightHand;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameplayHand GameplayHand_left;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameplayHand GameplayHand_right;

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x985E64", Offset = "0x985E64", VA = "0x985E64")]
	public void Init()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x9863B0", Offset = "0x9863B0", VA = "0x9863B0")]
	public void SetHandNoTrigger(bool trueOrFalse = true)
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x982AF8", Offset = "0x982AF8", VA = "0x982AF8")]
	public bool SendHapticImpulse(bool RL, float amplitude, float duration)
	{
		return default(bool);
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x9863DC", Offset = "0x9863DC", VA = "0x9863DC")]
	public void SetKey(InputFeatureUsage<bool> key)
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x986468", Offset = "0x986468", VA = "0x986468")]
	public void SetHandObjPa(Transform pa, Transform LeftPos, Transform RightPos)
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x986A2C", Offset = "0x986A2C", VA = "0x986A2C")]
	public void SetHandObjPa(Transform pa)
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x986A6C", Offset = "0x986A6C", VA = "0x986A6C")]
	public void SetLine(bool isShow)
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x986AC8", Offset = "0x986AC8", VA = "0x986AC8")]
	public void SetGameplayHand(float value)
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x986AF0", Offset = "0x986AF0", VA = "0x986AF0")]
	public void AddGameplayHandFingerValue(string GripObj, FingersValue fingers)
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x986B80", Offset = "0x986B80", VA = "0x986B80")]
	public Sean_DeviceController()
	{
	}
}
[Token(Token = "0x20000ED")]
public class Sean_DeviceKey : MonoBehaviour
{
	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool[] iskey;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected bool[] Upiskey;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected XRNode Hand;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected InputFeatureUsage<bool> Key;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected List<Action<bool>> KeyEvent;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected List<Action> KeyDownEvent;

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x986BF4", Offset = "0x986BF4", VA = "0x986BF4")]
	protected void Awake()
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x986EEC", Offset = "0x986EEC", VA = "0x986EEC")]
	protected void Update()
	{
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x98718C", Offset = "0x98718C", VA = "0x98718C")]
	public Sean_DeviceKey()
	{
	}
}
[Token(Token = "0x20000EF")]
public class Sean_GameBase : MonoBehaviour
{
	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action action;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sean_SceneBase SceneBase;

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x9837D4", Offset = "0x9837D4", VA = "0x9837D4")]
	public Sean_GameBase()
	{
	}
}
[Token(Token = "0x20000F0")]
public class Sean_HandBase : MonoBehaviour
{
	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected DeviceEventBase objBase;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool UpisGrip;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isGrip;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform TransObj;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public XRNode Hand;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public InputFeatureUsage<bool> Key;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public Sean_DeviceController sean_Device;

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x9872E4", Offset = "0x9872E4", VA = "0x9872E4")]
	public Sean_HandBase()
	{
	}
}
[Token(Token = "0x20000F1")]
public class Sean_LeftHand : Sean_HandBase
{
	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool HasTrigger;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool hasRigCollision;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SpriteRenderer Tips;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Tween tipsTw;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float TipsCount;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool startTipsCounting;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Tween DoMove;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool NoTrigger;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected List<string> ObjcatchName;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected List<Transform> Poss;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform Pos;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameplayHand _GameplayHand;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Sean_DeviceController Controller;

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x9872F4", Offset = "0x9872F4", VA = "0x9872F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x98734C", Offset = "0x98734C", VA = "0x98734C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x9864D0", Offset = "0x9864D0", VA = "0x9864D0")]
	public void UpdatePoss(Transform pos)
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x987804", Offset = "0x987804", VA = "0x987804")]
	public SpriteRenderer ReShowHandTips()
	{
		return null;
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x987924", Offset = "0x987924", VA = "0x987924")]
	protected void Update()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x9882D4", Offset = "0x9882D4", VA = "0x9882D4")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x9883EC", Offset = "0x9883EC", VA = "0x9883EC")]
	protected void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x9884F0", Offset = "0x9884F0", VA = "0x9884F0")]
	protected void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x9885E8", Offset = "0x9885E8", VA = "0x9885E8")]
	public Sean_LeftHand()
	{
	}
}
[Token(Token = "0x20000F2")]
public class Sean_LeftLine : Sean_HandBase
{
	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isLogoUIScene;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected RaycastHit hit;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float RayDistance;

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x9886C8", Offset = "0x9886C8", VA = "0x9886C8")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x988D14", Offset = "0x988D14", VA = "0x988D14")]
	public Sean_LeftLine()
	{
	}
}
[Token(Token = "0x20000F3")]
public class Sean_RightHand : Sean_LeftHand
{
	[Token(Token = "0x6000805")]
	[Address(RVA = "0x988D2C", Offset = "0x988D2C", VA = "0x988D2C")]
	public Sean_RightHand()
	{
	}
}
[Token(Token = "0x20000F4")]
public class Sean_RightLine : Sean_LeftLine
{
	[Token(Token = "0x6000806")]
	[Address(RVA = "0x988D30", Offset = "0x988D30", VA = "0x988D30")]
	public Sean_RightLine()
	{
	}
}
[Token(Token = "0x20000F5")]
[RequireComponent(typeof(SceneCite))]
public class Sean_SceneBase : MonoBehaviour
{
	[Token(Token = "0x20000F6")]
	[CompilerGenerated]
	private sealed class <UnloadSceneAsync>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string sceneName;

		[Token(Token = "0x1700009E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000821")]
			[Address(RVA = "0x989E40", Offset = "0x989E40", VA = "0x989E40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000823")]
			[Address(RVA = "0x989E88", Offset = "0x989E88", VA = "0x989E88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0x989480", Offset = "0x989480", VA = "0x989480")]
		[DebuggerHidden]
		public <UnloadSceneAsync>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0x989CB8", Offset = "0x989CB8", VA = "0x989CB8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0x989CBC", Offset = "0x989CBC", VA = "0x989CBC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0x989E48", Offset = "0x989E48", VA = "0x989E48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000F7")]
	[CompilerGenerated]
	private sealed class <UnloadAllObj>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sean_SceneBase <>4__this;

		[Token(Token = "0x170000A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000827")]
			[Address(RVA = "0x98A104", Offset = "0x98A104", VA = "0x98A104", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000829")]
			[Address(RVA = "0x98A14C", Offset = "0x98A14C", VA = "0x98A14C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0x98951C", Offset = "0x98951C", VA = "0x98951C")]
		[DebuggerHidden]
		public <UnloadAllObj>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0x989E90", Offset = "0x989E90", VA = "0x989E90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x989E94", Offset = "0x989E94", VA = "0x989E94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000828")]
		[Address(RVA = "0x98A10C", Offset = "0x98A10C", VA = "0x98A10C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000F8")]
	[CompilerGenerated]
	private sealed class <DelayChange>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sean_SceneBase <>4__this;

		[Token(Token = "0x170000A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600082D")]
			[Address(RVA = "0x98A20C", Offset = "0x98A20C", VA = "0x98A20C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600082F")]
			[Address(RVA = "0x98A254", Offset = "0x98A254", VA = "0x98A254", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x9895D8", Offset = "0x9895D8", VA = "0x9895D8")]
		[DebuggerHidden]
		public <DelayChange>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600082B")]
		[Address(RVA = "0x98A154", Offset = "0x98A154", VA = "0x98A154", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600082C")]
		[Address(RVA = "0x98A158", Offset = "0x98A158", VA = "0x98A158", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0x98A214", Offset = "0x98A214", VA = "0x98A214", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000F9")]
	[CompilerGenerated]
	private sealed class <LoadLevelAdd>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sean_SceneBase <>4__this;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <async>5__2;

		[Token(Token = "0x170000A4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000833")]
			[Address(RVA = "0x98A488", Offset = "0x98A488", VA = "0x98A488", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000835")]
			[Address(RVA = "0x98A4D0", Offset = "0x98A4D0", VA = "0x98A4D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0x989674", Offset = "0x989674", VA = "0x989674")]
		[DebuggerHidden]
		public <LoadLevelAdd>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0x98A25C", Offset = "0x98A25C", VA = "0x98A25C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0x98A260", Offset = "0x98A260", VA = "0x98A260", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0x98A490", Offset = "0x98A490", VA = "0x98A490", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000FA")]
	[CompilerGenerated]
	private sealed class <LoadLevelAdd_NoVideo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sean_SceneBase <>4__this;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation <async>5__2;

		[Token(Token = "0x170000A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000839")]
			[Address(RVA = "0x98A664", Offset = "0x98A664", VA = "0x98A664", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600083B")]
			[Address(RVA = "0x98A6AC", Offset = "0x98A6AC", VA = "0x98A6AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x989710", Offset = "0x989710", VA = "0x989710")]
		[DebuggerHidden]
		public <LoadLevelAdd_NoVideo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x98A4D8", Offset = "0x98A4D8", VA = "0x98A4D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x98A4DC", Offset = "0x98A4DC", VA = "0x98A4DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0x98A66C", Offset = "0x98A66C", VA = "0x98A66C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float GCTime;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sean_DeviceController sean_Device;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hasRigCollision;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool isPress;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool isLoadScene;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool HasNoVideo;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected List<GameObject> games;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected int num;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected bool VideoPlayStop;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected Vector3 TestCameraPos;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string SceneName;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string AddSceneName;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	protected List<GameObject> SceneObjs;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isGrip;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool UpisGrip;

	[Token(Token = "0x1700009D")]
	public MediaPlayer player
	{
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x988D48", Offset = "0x988D48", VA = "0x988D48")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000808")]
		[Address(RVA = "0x988D50", Offset = "0x988D50", VA = "0x988D50")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x988D58", Offset = "0x988D58", VA = "0x988D58")]
	protected void Awake()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x98940C", Offset = "0x98940C", VA = "0x98940C")]
	[IteratorStateMachine(typeof(<UnloadSceneAsync>d__18))]
	public IEnumerator UnloadSceneAsync(string sceneName)
	{
		return null;
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x9894A8", Offset = "0x9894A8", VA = "0x9894A8")]
	[IteratorStateMachine(typeof(<UnloadAllObj>d__19))]
	public IEnumerator UnloadAllObj()
	{
		return null;
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x989544", Offset = "0x989544", VA = "0x989544")]
	public void ReleaseMemory()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x989564", Offset = "0x989564", VA = "0x989564")]
	[IteratorStateMachine(typeof(<DelayChange>d__21))]
	protected IEnumerator DelayChange()
	{
		return null;
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x989600", Offset = "0x989600", VA = "0x989600")]
	[IteratorStateMachine(typeof(<LoadLevelAdd>d__22))]
	private IEnumerator LoadLevelAdd()
	{
		return null;
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x98969C", Offset = "0x98969C", VA = "0x98969C")]
	[IteratorStateMachine(typeof(<LoadLevelAdd_NoVideo>d__23))]
	private IEnumerator LoadLevelAdd_NoVideo()
	{
		return null;
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x988E8C", Offset = "0x988E8C", VA = "0x988E8C")]
	protected void StartObj()
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0x9897D8", Offset = "0x9897D8", VA = "0x9897D8", Slot = "4")]
	protected virtual void StartGame()
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0x9898E4", Offset = "0x9898E4", VA = "0x9898E4")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0x989984", Offset = "0x989984", VA = "0x989984")]
	protected void PlayerEvent(MediaPlayer arg0, MediaPlayerEvent.EventType arg1, ErrorCode arg2)
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0x98999C", Offset = "0x98999C", VA = "0x98999C", Slot = "5")]
	protected virtual void PlayerEvent()
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x9899A8", Offset = "0x9899A8", VA = "0x9899A8")]
	protected void Close(GameObject game)
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x982918", Offset = "0x982918", VA = "0x982918")]
	public void SetLine(bool isShose)
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x989738", Offset = "0x989738", VA = "0x989738")]
	public void SetSceneObjs(bool isShow)
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x989AD0", Offset = "0x989AD0", VA = "0x989AD0")]
	public void DestroySceneObjs()
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x982B98", Offset = "0x982B98", VA = "0x982B98")]
	public void Next()
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x989B90", Offset = "0x989B90", VA = "0x989B90")]
	public void LoadToNextScene()
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x989BB0", Offset = "0x989BB0", VA = "0x989BB0")]
	public Sean_SceneBase()
	{
	}
}
[Token(Token = "0x20000FC")]
public class Jvhuogun_GestureRecTrigger : MonoBehaviour
{
	[Token(Token = "0x20000FD")]
	[CompilerGenerated]
	private sealed class <StopRec>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Jvhuogun_GestureRecTrigger <>4__this;

		[Token(Token = "0x170000A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600084C")]
			[Address(RVA = "0x98B304", Offset = "0x98B304", VA = "0x98B304", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600084E")]
			[Address(RVA = "0x98B34C", Offset = "0x98B34C", VA = "0x98B34C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x98AFF8", Offset = "0x98AFF8", VA = "0x98AFF8")]
		[DebuggerHidden]
		public <StopRec>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x98B0E8", Offset = "0x98B0E8", VA = "0x98B0E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0x98B0EC", Offset = "0x98B0EC", VA = "0x98B0EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0x98B30C", Offset = "0x98B30C", VA = "0x98B30C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text HUDText;

	[Token(Token = "0x40005CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DeviceEventBase device;

	[Token(Token = "0x40005CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string INTERACTION_Name;

	[Token(Token = "0x40005CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string INTERACTION_NameEnd;

	[Token(Token = "0x40005CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected RaycastHit hit;

	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float RayDistance;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool hasStart;

	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float delayStop;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Coroutine stopRecCor;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public PXR_Input.Controller controller;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform handTrans;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform handTrans_L;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform handTrans_R;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float MinMoveValue;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public LayerMask _layerMask;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float NeedSpeed;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float curSpeed;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 curpos;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Vector3 lastpos;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 curEuler;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Vector3 lastEuler;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3 dirA;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private Vector3 dirB;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool canStop;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[SerializeField]
	private float count;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private float DelayTime;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[SerializeField]
	private bool startCount;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public SmokeColorCtrl smoke;

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x98A714", Offset = "0x98A714", VA = "0x98A714")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x98A7C4", Offset = "0x98A7C4", VA = "0x98A7C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x98A7C8", Offset = "0x98A7C8", VA = "0x98A7C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x98AAC4", Offset = "0x98AAC4", VA = "0x98AAC4")]
	private void DectetCurrentHandPos()
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0x98A82C", Offset = "0x98A82C", VA = "0x98A82C")]
	private void DetectHasTargetPosCollider()
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0x98ADE0", Offset = "0x98ADE0", VA = "0x98ADE0")]
	private void StartGestureRec()
	{
	}

	[Token(Token = "0x6000844")]
	[Address(RVA = "0x98AF84", Offset = "0x98AF84", VA = "0x98AF84")]
	[IteratorStateMachine(typeof(<StopRec>d__34))]
	private IEnumerator StopRec()
	{
		return null;
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0x98AB90", Offset = "0x98AB90", VA = "0x98AB90")]
	public void ResetRec()
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x98B020", Offset = "0x98B020", VA = "0x98B020")]
	public bool canPlayAcion()
	{
		return default(bool);
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x98ACD8", Offset = "0x98ACD8", VA = "0x98ACD8")]
	private float Speed()
	{
		return default(float);
	}

	[Token(Token = "0x6000848")]
	[Address(RVA = "0x98B030", Offset = "0x98B030", VA = "0x98B030")]
	public Jvhuogun_GestureRecTrigger()
	{
	}
}
[Token(Token = "0x20000FE")]
public class ChangeGesture : MonoBehaviour
{
	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] gestureArr;

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isGrip;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool UpisGrip;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool isGrap_L;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	private bool UpisGrip_L;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isGrap_R;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool UpisGrip_R;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int index;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject Gun_R;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Gun_L;

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x98B354", Offset = "0x98B354", VA = "0x98B354")]
	private void Start()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x98B358", Offset = "0x98B358", VA = "0x98B358")]
	private void Update()
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x98B4F4", Offset = "0x98B4F4", VA = "0x98B4F4")]
	public void ChangeNextGesture()
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x98B59C", Offset = "0x98B59C", VA = "0x98B59C")]
	public ChangeGesture()
	{
	}
}
[Token(Token = "0x20000FF")]
public class Mivry_X : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000100")]
	public enum UnityXrPlugin
	{
		[Token(Token = "0x400061A")]
		OpenXR,
		[Token(Token = "0x400061B")]
		OculusVR,
		[Token(Token = "0x400061C")]
		SteamVR
	}

	[Serializable]
	[Token(Token = "0x2000101")]
	public enum MivryCoordinateSystem
	{
		[Token(Token = "0x400061E")]
		OpenXR,
		[Token(Token = "0x400061F")]
		OculusVR,
		[Token(Token = "0x4000620")]
		SteamVR,
		[Token(Token = "0x4000621")]
		UnrealEngine
	}

	[Serializable]
	[Token(Token = "0x2000102")]
	public enum InputType
	{
		[Token(Token = "0x4000623")]
		InputSystemControl,
		[Token(Token = "0x4000624")]
		Axis,
		[Token(Token = "0x4000625")]
		Button,
		[Token(Token = "0x4000626")]
		Key,
		[Token(Token = "0x4000627")]
		Value
	}

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Mivry_X instance;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isGrip;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool UpisGrip;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool isGrip2;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool UpisGrip2;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("License Name (ID) of your MiVRy license. Leave empty for free version.")]
	public string LicenseName;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("License Key of your MiVRy license. Leave empty for free version.")]
	public string LicenseKey;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Path to file containing License ID and License Key of your MiVRy license. Leave empty for free version.")]
	public string LicenseFilePath;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Path to the .dat file to load gestures from.")]
	public string GestureDatabaseFile;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The Unity XR plugin used in this project (see: Project Settings -> XR Plugin Manager).")]
	public UnityXrPlugin unityXrPlugin;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The coordinate system MiVRy should use internally (or that the GestureDatabase file was created with).")]
	public MivryCoordinateSystem mivryCoordinateSystem;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("GameObject to use as the position of the left hand.")]
	public GameObject LeftHand;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("The name of the input (in Project Settings -> Input Manager) or Input System Control ('<XRController>{LeftHand}/trigger') that triggers the start/end of a gesture.")]
	public string LeftTriggerInput;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("Type of the input (in Project Settings -> Input Manager) that triggers the start/end of a gesture. 'Input System Control' when using the new Input System. 'Value' to manually set LeftTriggerValue.")]
	public InputType LeftTriggerInputType;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Tooltip("Current value of the trigger input (0~1). If the input type is 'value', this variable controls when a gesture starts/ends (>= threshold).")]
	public float LeftTriggerValue;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("If the input is 'Axis', how strongly it has to be pressed (0~1) to start the gesture.")]
	public float LeftTriggerThreshold;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("GameObject to use as the position of the right hand.")]
	public GameObject RightHand;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("The name of the input (in Project Settings -> Input Manager) or Input System Control ('<XRController>{LeftHand}/trigger') that triggers the start/end of a gesture.")]
	public string RightTriggerInput;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Type of the input (in Project Settings -> Input Manager) that triggers the start/end of a gesture. 'Input System Control' when using the new Input System. 'Value' to manually set RightTriggerValue.")]
	public InputType RightTriggerInputType;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[Tooltip("Current value of the trigger input (0~1). If the input type is 'value', this variable controls when a gesture starts/ends (>= threshold).")]
	public float RightTriggerValue;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("How strong the button has to be pressed (0~1) to start the gesture.")]
	public float RightTriggerThreshold;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("Whether gestures should be identified continuously during gesturing (instead of only after a gesture motion).")]
	public bool ContinuousGestureRecognition;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("Time frame (in milliseconds) that continuous gestures are expected to be.")]
	public int ContinuousGesturePeriod;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Tooltip("Time frame (in milliseconds) that continuous gestures are expected to be.")]
	public int ContinuousGestureSmoothing;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Tooltip("Event to trigger when a gesture was performed.")]
	public GestureCompletionEvent OnGestureCompletion;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool InputAction_LeftTriggerPressed;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool InputAction_RightTriggerPressed;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
	public bool LeftHandActive;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
	public bool RightHandActive;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GestureRecognition gr;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GestureCombinations gc;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GestureCompletionData data;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public bool InputIsValue;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly Quaternion RotateYp56;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Quaternion RotateYm56;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static readonly Quaternion RotateZp90;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static readonly Quaternion RotateZm90;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly Quaternion RotateXZY;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static readonly Quaternion RotateXYZ;

	[Token(Token = "0x170000AA")]
	public bool compensateHeadMotion
	{
		[Token(Token = "0x6000854")]
		[Address(RVA = "0x98B60C", Offset = "0x98B60C", VA = "0x98B60C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x98B5A4", Offset = "0x98B5A4", VA = "0x98B5A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x98B64C", Offset = "0x98B64C", VA = "0x98B64C")]
	public void OnInputAction_LeftTrigger(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x98BC00", Offset = "0x98BC00", VA = "0x98BC00")]
	public void OnInputAction_LeftTriggerPress(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x98BC0C", Offset = "0x98BC0C", VA = "0x98BC0C")]
	public void OnInputAction_LeftTriggerRelease(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x98BC14", Offset = "0x98BC14", VA = "0x98BC14")]
	public void OnInputAction_RightTrigger(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x98BCD4", Offset = "0x98BCD4", VA = "0x98BCD4")]
	public void OnInputAction_RightTriggerPress(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x98BCE0", Offset = "0x98BCE0", VA = "0x98BCE0")]
	public void OnInputAction_RightTriggerRelease(InputAction.CallbackContext callbackContext)
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x98BCE8", Offset = "0x98BCE8", VA = "0x98BCE8")]
	public float getInputControlValue(string controlName)
	{
		return default(float);
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x98B70C", Offset = "0x98B70C", VA = "0x98B70C")]
	public float getInputControlValue(InputControl control)
	{
		return default(float);
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x98BDD0", Offset = "0x98BDD0", VA = "0x98BDD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x98C670", Offset = "0x98C670", VA = "0x98C670")]
	private void Update()
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x98C77C", Offset = "0x98C77C", VA = "0x98C77C")]
	private void UpdateGR()
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x98CD18", Offset = "0x98CD18", VA = "0x98CD18")]
	private void UpdateGC()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x98D9E0", Offset = "0x98D9E0", VA = "0x98D9E0")]
	public static void convertHandInput(UnityXrPlugin unityXrPlugin, MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x98D84C", Offset = "0x98D84C", VA = "0x98D84C")]
	public static void convertHeadInput(MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x98DD74", Offset = "0x98DD74", VA = "0x98DD74")]
	public static void convertOutput(MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x98DE98", Offset = "0x98DE98", VA = "0x98DE98")]
	public static void convertBackHandInput(MivryCoordinateSystem mivryCoordinateSystem, UnityXrPlugin unityXrPlugin, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x98E2AC", Offset = "0x98E2AC", VA = "0x98E2AC")]
	public static void convertBackHeadInput(MivryCoordinateSystem mivryCoordinateSystem, ref Vector3 p, ref Quaternion q)
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x98E448", Offset = "0x98E448", VA = "0x98E448")]
	public Mivry_X()
	{
	}
}
[Token(Token = "0x2000103")]
public class Sample_Mivry_X : MonoBehaviour
{
	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool canPlayAciton;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isAuto;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool canPringLog;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Prefab;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text HUDText;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action FinishedT1;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action FinishedC1;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<string, GameObject> controller_gameobjs;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Sample_Mivry_X Instance;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float successValue_T1;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float successValue_C1;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform[] TriggerObjs;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int index;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform CurrentTriggerObj;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool isTest;

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x98E604", Offset = "0x98E604", VA = "0x98E604")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x98E6D4", Offset = "0x98E6D4", VA = "0x98E6D4")]
	public void SetTriggerEnable(int index)
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x98E780", Offset = "0x98E780", VA = "0x98E780")]
	public void SetTriggerDisable(int index)
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x98E800", Offset = "0x98E800", VA = "0x98E800")]
	private void SetActiveControllerModel(string side, string type)
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x98EAE0", Offset = "0x98EAE0", VA = "0x98EAE0")]
	private void DeviceConnected(UnityEngine.XR.InputDevice device)
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x98EB80", Offset = "0x98EB80", VA = "0x98EB80")]
	private void Start()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x98EC50", Offset = "0x98EC50", VA = "0x98EC50")]
	private void Update()
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x98EC54", Offset = "0x98EC54", VA = "0x98EC54")]
	public void OnGestureCompleted(GestureCompletionData data)
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x98F18C", Offset = "0x98F18C", VA = "0x98F18C")]
	public Sample_Mivry_X()
	{
	}
}
[Token(Token = "0x2000104")]
public class navTest : MonoBehaviour
{
	[Token(Token = "0x2000105")]
	[CompilerGenerated]
	private sealed class <DelaySetTarget>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public navTest <>4__this;

		[Token(Token = "0x170000AB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0x98F7E4", Offset = "0x98F7E4", VA = "0x98F7E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000881")]
			[Address(RVA = "0x98F82C", Offset = "0x98F82C", VA = "0x98F82C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600087C")]
		[Address(RVA = "0x98F53C", Offset = "0x98F53C", VA = "0x98F53C")]
		[DebuggerHidden]
		public <DelaySetTarget>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600087D")]
		[Address(RVA = "0x98F720", Offset = "0x98F720", VA = "0x98F720", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x98F724", Offset = "0x98F724", VA = "0x98F724", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x98F7EC", Offset = "0x98F7EC", VA = "0x98F7EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NavMeshAgent agent;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform target;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator ani;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator Target_ani;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float InitMoveSpeed;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float InitAniSpeed;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform targetChild;

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x98F234", Offset = "0x98F234", VA = "0x98F234")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x98F4C8", Offset = "0x98F4C8", VA = "0x98F4C8")]
	[IteratorStateMachine(typeof(<DelaySetTarget>d__8))]
	private IEnumerator DelaySetTarget()
	{
		return null;
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x98F564", Offset = "0x98F564", VA = "0x98F564")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x98F5D8", Offset = "0x98F5D8", VA = "0x98F5D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x98F5F8", Offset = "0x98F5F8", VA = "0x98F5F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x98F63C", Offset = "0x98F63C", VA = "0x98F63C")]
	private void UpdateAniSpeed()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x98F690", Offset = "0x98F690", VA = "0x98F690")]
	private void SlowDown()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x98F69C", Offset = "0x98F69C", VA = "0x98F69C")]
	public void Runaway()
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x98F590", Offset = "0x98F590", VA = "0x98F590")]
	public void ChangeSpeed(float valueScaLe)
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x98F3F8", Offset = "0x98F3F8", VA = "0x98F3F8")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x98F70C", Offset = "0x98F70C", VA = "0x98F70C")]
	public navTest()
	{
	}
}
[Token(Token = "0x2000106")]
public class winghand : MonoBehaviour
{
	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Quaternion InitRot;

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x98F834", Offset = "0x98F834", VA = "0x98F834")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x98F864", Offset = "0x98F864", VA = "0x98F864")]
	private void Start()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x98F868", Offset = "0x98F868", VA = "0x98F868")]
	private void Update()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x98F894", Offset = "0x98F894", VA = "0x98F894")]
	public winghand()
	{
	}
}
[Token(Token = "0x2000107")]
public class AniSceneCtrl : MonoBehaviour
{
	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator ani;

	[Token(Token = "0x6000886")]
	[Address(RVA = "0x98F89C", Offset = "0x98F89C", VA = "0x98F89C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0x98F8F4", Offset = "0x98F8F4", VA = "0x98F8F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0x98FA80", Offset = "0x98FA80", VA = "0x98FA80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x98FA84", Offset = "0x98FA84", VA = "0x98FA84")]
	private void ChangeNextScene()
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x98F9B0", Offset = "0x98F9B0", VA = "0x98F9B0")]
	public void AddAnimationEvent(AnimationClip clip, string functionName, bool isStart = false, float offset = 0.1f)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x98FB08", Offset = "0x98FB08", VA = "0x98FB08")]
	public AniSceneCtrl()
	{
	}
}
[Token(Token = "0x2000108")]
public class ScenesMananger : MonoBehaviour
{
	[Token(Token = "0x2000109")]
	[CompilerGenerated]
	private sealed class <ChangeNextSceneIE>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScenesMananger <>4__this;

		[Token(Token = "0x170000AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600089A")]
			[Address(RVA = "0x99013C", Offset = "0x99013C", VA = "0x99013C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600089C")]
			[Address(RVA = "0x990184", Offset = "0x990184", VA = "0x990184", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x98FD54", Offset = "0x98FD54", VA = "0x98FD54")]
		[DebuggerHidden]
		public <ChangeNextSceneIE>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x990054", Offset = "0x990054", VA = "0x990054", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x990058", Offset = "0x990058", VA = "0x990058", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x990144", Offset = "0x990144", VA = "0x990144", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010A")]
	[CompilerGenerated]
	private sealed class <UnloadAllObj>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScenesMananger <>4__this;

		[Token(Token = "0x170000AF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008A0")]
			[Address(RVA = "0x990370", Offset = "0x990370", VA = "0x990370", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008A2")]
			[Address(RVA = "0x9903B8", Offset = "0x9903B8", VA = "0x9903B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0x98FE98", Offset = "0x98FE98", VA = "0x98FE98")]
		[DebuggerHidden]
		public <UnloadAllObj>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0x99018C", Offset = "0x99018C", VA = "0x99018C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x990190", Offset = "0x990190", VA = "0x990190", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x990378", Offset = "0x990378", VA = "0x990378", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ScenesMananger Instance;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("跳转场景前的最后动画")]
	public Animator ani;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("进场初始状态是否为黑屏")]
	public bool screenIsBlack;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("进入前黑屏淡化的时间")]
	public float screenStartTime;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("跳转场景前黑化的时间")]
	public float screenFadeTime;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public PXR_ScreenFade_X screenFade;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string NextScene;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 Angle;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 StartPosition;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform XR_Origin;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float GCTime;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string AddSceneName;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	protected List<GameObject> SceneObjs;

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x98FB10", Offset = "0x98FB10", VA = "0x98FB10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0x98FC6C", Offset = "0x98FC6C", VA = "0x98FC6C")]
	private void Start()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x98FCA0", Offset = "0x98FCA0", VA = "0x98FCA0")]
	private void ShowMinDan()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x98FCA4", Offset = "0x98FCA4", VA = "0x98FCA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x98FAE8", Offset = "0x98FAE8", VA = "0x98FAE8")]
	public void ChangeNextScene()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x98FCE0", Offset = "0x98FCE0", VA = "0x98FCE0")]
	[IteratorStateMachine(typeof(<ChangeNextSceneIE>d__18))]
	private IEnumerator ChangeNextSceneIE()
	{
		return null;
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x98FD7C", Offset = "0x98FD7C", VA = "0x98FD7C")]
	private void StartPos()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x98FE04", Offset = "0x98FE04", VA = "0x98FE04")]
	public void ReleaseMemory()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0x98FE24", Offset = "0x98FE24", VA = "0x98FE24")]
	[IteratorStateMachine(typeof(<UnloadAllObj>d__21))]
	public IEnumerator UnloadAllObj()
	{
		return null;
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x98FEC0", Offset = "0x98FEC0", VA = "0x98FEC0")]
	public void DestroySceneObjs()
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0x98FF80", Offset = "0x98FF80", VA = "0x98FF80")]
	public ScenesMananger()
	{
	}
}
[Token(Token = "0x200010B")]
public class StartCamera : MonoBehaviour
{
	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 Angle;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 StartPosition;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform XR_Origin;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float StartTime;

	[Token(Token = "0x400065A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float AwakeTime;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform T;

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x9903C0", Offset = "0x9903C0", VA = "0x9903C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0x9904A0", Offset = "0x9904A0", VA = "0x9904A0")]
	private void Awake00()
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0x99068C", Offset = "0x99068C", VA = "0x99068C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0x99076C", Offset = "0x99076C", VA = "0x99076C")]
	private void StartPos()
	{
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0x9908F8", Offset = "0x9908F8", VA = "0x9908F8")]
	public StartCamera()
	{
	}
}
[Token(Token = "0x200010C")]
public class ChangePlayerPos : MonoBehaviour
{
	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform vr;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isGrip;

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool UpisGrip;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float[] poses_Y;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x990918", Offset = "0x990918", VA = "0x990918")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0x990980", Offset = "0x990980", VA = "0x990980")]
	private void Start()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x9909E4", Offset = "0x9909E4", VA = "0x9909E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x990AA4", Offset = "0x990AA4", VA = "0x990AA4")]
	public void ChangeNextPosY()
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x990B48", Offset = "0x990B48", VA = "0x990B48")]
	public ChangePlayerPos()
	{
	}
}
[Token(Token = "0x200010D")]
public class ChangePos : MonoBehaviour
{
	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ChangePos Instance;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform vr;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isGrip;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool UpisGrip;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] poses;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x990BAC", Offset = "0x990BAC", VA = "0x990BAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0x990C4C", Offset = "0x990C4C", VA = "0x990C4C")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0x990CF8", Offset = "0x990CF8", VA = "0x990CF8")]
	private void Update()
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0x990CFC", Offset = "0x990CFC", VA = "0x990CFC")]
	public void ChangeNextPos()
	{
	}

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0x990DC0", Offset = "0x990DC0", VA = "0x990DC0")]
	public ChangePos()
	{
	}
}
[Token(Token = "0x200010E")]
public class ChaiHuoTest : MonoBehaviour
{
	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform H;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform V;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform bo0;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform bo1;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform bo2;

	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform bo3;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform main;

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0x990DC8", Offset = "0x990DC8", VA = "0x990DC8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x990E18", Offset = "0x990E18", VA = "0x990E18")]
	private void Update()
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x991004", Offset = "0x991004", VA = "0x991004")]
	public ChaiHuoTest()
	{
	}
}
[Token(Token = "0x200010F")]
public class SwitchScenes : MonoBehaviour
{
	[Token(Token = "0x2000110")]
	[CompilerGenerated]
	private sealed class <UnloadAllObj>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SwitchScenes <>4__this;

		[Token(Token = "0x170000B1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008C0")]
			[Address(RVA = "0x99145C", Offset = "0x99145C", VA = "0x99145C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008C2")]
			[Address(RVA = "0x9914A4", Offset = "0x9914A4", VA = "0x9914A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x9911D4", Offset = "0x9911D4", VA = "0x9911D4")]
		[DebuggerHidden]
		public <UnloadAllObj>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x99128C", Offset = "0x99128C", VA = "0x99128C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x991290", Offset = "0x991290", VA = "0x991290", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x991464", Offset = "0x991464", VA = "0x991464", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected List<GameObject> SceneObjs;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GCTime;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Hand testhand;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isPress;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string sceneName;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isLoadScene;

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x99100C", Offset = "0x99100C", VA = "0x99100C")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x991064", Offset = "0x991064", VA = "0x991064")]
	private void Update()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0x991138", Offset = "0x991138", VA = "0x991138")]
	private void initIslaod()
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x991140", Offset = "0x991140", VA = "0x991140")]
	public void ReleaseMemory()
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x991160", Offset = "0x991160", VA = "0x991160")]
	[IteratorStateMachine(typeof(<UnloadAllObj>d__10))]
	public IEnumerator UnloadAllObj()
	{
		return null;
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x9911FC", Offset = "0x9911FC", VA = "0x9911FC")]
	public SwitchScenes()
	{
	}
}
[Token(Token = "0x2000111")]
public class BanBian_ChaiHuo : MonoBehaviour
{
	[Token(Token = "0x2000112")]
	[CompilerGenerated]
	private sealed class <ResetGrab>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BanBian_ChaiHuo <>4__this;

		[Token(Token = "0x170000B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008CC")]
			[Address(RVA = "0x99181C", Offset = "0x99181C", VA = "0x99181C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008CE")]
			[Address(RVA = "0x991864", Offset = "0x991864", VA = "0x991864", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x99170C", Offset = "0x99170C", VA = "0x99170C")]
		[DebuggerHidden]
		public <ResetGrab>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x991744", Offset = "0x991744", VA = "0x991744", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x991748", Offset = "0x991748", VA = "0x991748", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x991824", Offset = "0x991824", VA = "0x991824", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<BanBian_ChaiHuo> BeFire;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool CanFire;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 FirePosition;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody Rigidbodyrb;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool canGrap;

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x9914AC", Offset = "0x9914AC", VA = "0x9914AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x9914B0", Offset = "0x9914B0", VA = "0x9914B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x991508", Offset = "0x991508", VA = "0x991508")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x9915C4", Offset = "0x9915C4", VA = "0x9915C4")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x991698", Offset = "0x991698", VA = "0x991698")]
	[IteratorStateMachine(typeof(<ResetGrab>d__9))]
	private IEnumerator ResetGrab()
	{
		return null;
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x991734", Offset = "0x991734", VA = "0x991734")]
	public BanBian_ChaiHuo()
	{
	}
}
[Token(Token = "0x2000113")]
public class BeDetectedObejct : MonoBehaviour
{
	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BeTriggerObject detectionType;

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x99186C", Offset = "0x99186C", VA = "0x99186C")]
	public BeDetectedObejct()
	{
	}
}
[Token(Token = "0x2000114")]
public class CameraController : MonoBehaviour
{
	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator animator;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform cameraTransform;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float smoothing;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool startPlayCamMoveAni;

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0x991874", Offset = "0x991874", VA = "0x991874")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0x991894", Offset = "0x991894", VA = "0x991894")]
	private void Update()
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0x991AC4", Offset = "0x991AC4", VA = "0x991AC4")]
	public void Play()
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x991AFC", Offset = "0x991AFC", VA = "0x991AFC")]
	public CameraController()
	{
	}
}
[Token(Token = "0x2000115")]
public enum BeTriggerObject
{
	[Token(Token = "0x4000686")]
	Player,
	[Token(Token = "0x4000687")]
	Zhushi,
	[Token(Token = "0x4000688")]
	Nu,
	[Token(Token = "0x4000689")]
	Wood,
	[Token(Token = "0x400068A")]
	AxeknifeEdge,
	[Token(Token = "0x400068B")]
	WoodSplinter
}
[Token(Token = "0x2000116")]
public enum TriggerObejcetType
{
	[Token(Token = "0x400068D")]
	Majiu,
	[Token(Token = "0x400068E")]
	ZhuJuan,
	[Token(Token = "0x400068F")]
	ZhuJuanDimian,
	[Token(Token = "0x4000690")]
	Guanzi,
	[Token(Token = "0x4000691")]
	Axe,
	[Token(Token = "0x4000692")]
	Furnace,
	[Token(Token = "0x4000693")]
	Wood,
	[Token(Token = "0x4000694")]
	Mudun
}
[Token(Token = "0x2000117")]
public class DetectionObjectTrigger : MonoBehaviour
{
	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BeTriggerObject beDetectionType;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public TriggerObejcetType detectionArea;

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x991B10", Offset = "0x991B10", VA = "0x991B10")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x991BB4", Offset = "0x991BB4", VA = "0x991BB4")]
	private void Update()
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x991BB8", Offset = "0x991BB8", VA = "0x991BB8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x991D68", Offset = "0x991D68", VA = "0x991D68")]
	public DetectionObjectTrigger()
	{
	}
}
[Token(Token = "0x2000118")]
public class Interactive_ChaiHuo : MonoBehaviour
{
	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float ForceValue;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<DeviceEventBase> CaiOnDesk;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action BeCut;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool beCuted;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 OnMudunLocalPos;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource audioSource;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 FirePos;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Rigidbody _rigidbodyA;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Rigidbody _rigidbodyB;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool OnMudun;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public BoxCollider boxCollider;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Interactive_ChaiHuo[] interactive_ChaiHuos;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public BanBian_ChaiHuo[] BanBian_ChaiHuos;

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x991D70", Offset = "0x991D70", VA = "0x991D70")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x9920F4", Offset = "0x9920F4", VA = "0x9920F4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x9920F8", Offset = "0x9920F8", VA = "0x9920F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x9922F8", Offset = "0x9922F8", VA = "0x9922F8")]
	public void SetBePickActive()
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x991FB0", Offset = "0x991FB0", VA = "0x991FB0")]
	private void SetMeshColliderTrueOrFalse(bool IsEnable)
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x9924A0", Offset = "0x9924A0", VA = "0x9924A0")]
	[ContextMenu("碰触到斧头或者木墩")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x992C84", Offset = "0x992C84", VA = "0x992C84")]
	public void SetBoxcollider()
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0x992CA4", Offset = "0x992CA4", VA = "0x992CA4")]
	[ContextMenu("劈开木块")]
	private void PiKai()
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x9931F0", Offset = "0x9931F0", VA = "0x9931F0")]
	public Interactive_ChaiHuo()
	{
	}
}
[Token(Token = "0x2000119")]
public class Interactive_Nu : MonoBehaviour
{
	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool hasFire;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public BoxCollider collider;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action InteractiveOver;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator animator;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int shotCount;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Nu nu;

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x993258", Offset = "0x993258", VA = "0x993258")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x99339C", Offset = "0x99339C", VA = "0x99339C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x993490", Offset = "0x993490", VA = "0x993490")]
	public void Ready()
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x9933E0", Offset = "0x9933E0", VA = "0x9933E0")]
	public void Shot()
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x9934B0", Offset = "0x9934B0", VA = "0x9934B0")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x9936D8", Offset = "0x9936D8", VA = "0x9936D8")]
	public Interactive_Nu()
	{
	}
}
[Token(Token = "0x200011A")]
public class Interactive_Zhu : MonoBehaviour
{
	[Token(Token = "0x200011B")]
	[CompilerGenerated]
	private sealed class <PlayEatVoice>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Interactive_Zhu <>4__this;

		[Token(Token = "0x170000B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008FC")]
			[Address(RVA = "0x994374", Offset = "0x994374", VA = "0x994374", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008FE")]
			[Address(RVA = "0x9943BC", Offset = "0x9943BC", VA = "0x9943BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x9939B8", Offset = "0x9939B8", VA = "0x9939B8")]
		[DebuggerHidden]
		public <PlayEatVoice>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x99424C", Offset = "0x99424C", VA = "0x99424C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x994250", Offset = "0x994250", VA = "0x994250", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x99437C", Offset = "0x99437C", VA = "0x99437C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200011C")]
	[CompilerGenerated]
	private sealed class <StartEatFood>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Interactive_Zhu <>4__this;

		[Token(Token = "0x170000B7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000902")]
			[Address(RVA = "0x994534", Offset = "0x994534", VA = "0x994534", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000904")]
			[Address(RVA = "0x99457C", Offset = "0x99457C", VA = "0x99457C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x994078", Offset = "0x994078", VA = "0x994078")]
		[DebuggerHidden]
		public <StartEatFood>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x9943C4", Offset = "0x9943C4", VA = "0x9943C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x9943C8", Offset = "0x9943C8", VA = "0x9943C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x99453C", Offset = "0x99453C", VA = "0x99453C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private EffectAudio effectAudio;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform body;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool NoFood;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action AllFoodBeUsed;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int FoodBeUsedCount;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool hasStaticFood;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[SerializeField]
	private bool canEat;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action FinishedEatFood;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool PlayerInCollider;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool FoodOnPlayerHand;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool FoodOffPlayerHand;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	public bool FoodOnPlane;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float DelayShowCaoAni;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject food;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	public bool seeFood;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Animator ani;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool canStart;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	[SerializeField]
	private bool isTurnRight;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject NeedToDestroyCao;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Interactive_Zhu Instance;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Queue<GameObject> foodQue;

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x9936E0", Offset = "0x9936E0", VA = "0x9936E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x9937D4", Offset = "0x9937D4", VA = "0x9937D4")]
	public void RandomPlayIdleVoice()
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x993888", Offset = "0x993888", VA = "0x993888")]
	private void FirstEat()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x993944", Offset = "0x993944", VA = "0x993944")]
	[IteratorStateMachine(typeof(<PlayEatVoice>d__24))]
	private IEnumerator PlayEatVoice()
	{
		return null;
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x9939E0", Offset = "0x9939E0", VA = "0x9939E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x993B1C", Offset = "0x993B1C", VA = "0x993B1C")]
	private void StartPlayAni()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x993B3C", Offset = "0x993B3C", VA = "0x993B3C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x993C28", Offset = "0x993C28", VA = "0x993C28")]
	private void Update()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x993DF8", Offset = "0x993DF8", VA = "0x993DF8")]
	private void PlayerInZhuJuan()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x993E90", Offset = "0x993E90", VA = "0x993E90")]
	private void ZhushiOnGround()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x993F88", Offset = "0x993F88", VA = "0x993F88")]
	public void SeeFoodOnHand()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x993D7C", Offset = "0x993D7C", VA = "0x993D7C")]
	private void AutoEat()
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x993F04", Offset = "0x993F04", VA = "0x993F04")]
	private void StartEat()
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x994004", Offset = "0x994004", VA = "0x994004")]
	[IteratorStateMachine(typeof(<StartEatFood>d__34))]
	private IEnumerator StartEatFood()
	{
		return null;
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x9940A0", Offset = "0x9940A0", VA = "0x9940A0")]
	public void SetFoodQue(GameObject obj)
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0x9940F8", Offset = "0x9940F8", VA = "0x9940F8")]
	private void DestroyFood()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x9941B0", Offset = "0x9941B0", VA = "0x9941B0")]
	[ContextMenu("喂草")]
	private void EatFood()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x9941B4", Offset = "0x9941B4", VA = "0x9941B4")]
	public Interactive_Zhu()
	{
	}
}
[Token(Token = "0x200011D")]
public class Axe : MonoBehaviour
{
	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BeTriggerObject beDetectionType;

	[Token(Token = "0x6000905")]
	[Address(RVA = "0x994584", Offset = "0x994584", VA = "0x994584")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0x994588", Offset = "0x994588", VA = "0x994588")]
	private void Start()
	{
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0x99458C", Offset = "0x99458C", VA = "0x99458C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0x994590", Offset = "0x994590", VA = "0x994590")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000909")]
	[Address(RVA = "0x99469C", Offset = "0x99469C", VA = "0x99469C")]
	public Axe()
	{
	}
}
[Token(Token = "0x200011E")]
public class ChoppingBlock : MonoBehaviour
{
	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BeTriggerObject beDetectionType;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private int curWoodCount;

	[Token(Token = "0x600090A")]
	[Address(RVA = "0x9946A4", Offset = "0x9946A4", VA = "0x9946A4")]
	public void ClearWood()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0x9946AC", Offset = "0x9946AC", VA = "0x9946AC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0x9948B4", Offset = "0x9948B4", VA = "0x9948B4")]
	public ChoppingBlock()
	{
	}
}
[Token(Token = "0x200011F")]
public class Furnace : MonoBehaviour
{
	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int WoodCount;

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x9948C8", Offset = "0x9948C8", VA = "0x9948C8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x994A18", Offset = "0x994A18", VA = "0x994A18")]
	public Furnace()
	{
	}
}
[Token(Token = "0x2000120")]
public class Wood : MonoBehaviour
{
	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float ForceValue;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InRoom room;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BanBian_ChaiHuo[] BanBian_ChaiHuos;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Action<DeviceEventBase> CaiOnDesk;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action BeCut;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool beCuted;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public BeTriggerObject beDetectionType;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform _angle_H;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform _angle_V;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform CutTransform;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Transform> WoodSplinterS;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private ChoppingBlock choppingBlock1;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody Rigidbody;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CapsuleCollider capsuleCollider;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Rigidbody _angle_H_Rigidbody;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Rigidbody _angle_V_Rigidbody;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public BoxCollider boxCollider;

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x994A20", Offset = "0x994A20", VA = "0x994A20")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x994A78", Offset = "0x994A78", VA = "0x994A78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x994D5C", Offset = "0x994D5C", VA = "0x994D5C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x99526C", Offset = "0x99526C", VA = "0x99526C")]
	public void Slice(Vector3 CutDic)
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x995B28", Offset = "0x995B28", VA = "0x995B28")]
	private void BluidChild(Transform _angle)
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0x99537C", Offset = "0x99537C", VA = "0x99537C")]
	private void AddForce()
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x9956A8", Offset = "0x9956A8", VA = "0x9956A8")]
	private void AddXR()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x995D4C", Offset = "0x995D4C", VA = "0x995D4C")]
	private void DestroyThis()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x9947A8", Offset = "0x9947A8", VA = "0x9947A8")]
	public void PlaceOnChoppingBlock(ChoppingBlock choppingBlock)
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x9958BC", Offset = "0x9958BC", VA = "0x9958BC")]
	private Transform Angle(Vector3 kinfeUP)
	{
		return null;
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x995F68", Offset = "0x995F68", VA = "0x995F68")]
	public static Vector3 ProjectVectorOnXZPlane(Vector3 vectorToProject)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x995DB8", Offset = "0x995DB8", VA = "0x995DB8")]
	public void SetBePickActive()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x996064", Offset = "0x996064", VA = "0x996064")]
	public void SetBoxcollider()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x996084", Offset = "0x996084", VA = "0x996084")]
	public Wood()
	{
	}
}
[Token(Token = "0x2000121")]
public class PigFoodMove : MonoBehaviour
{
	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetPoint;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float initialForce;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float friction;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float angularDrag;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minForce;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxForce;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minDistance;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float influenceDistance;

	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float influenceForce;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float influenceFriction;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Rigidbody rb;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isRolling;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float currentForce;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 initialVelocity;

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x9A4D64", Offset = "0x9A4D64", VA = "0x9A4D64")]
	private void Start()
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x9A4DD8", Offset = "0x9A4DD8", VA = "0x9A4DD8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x9A4E6C", Offset = "0x9A4E6C", VA = "0x9A4E6C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x9A53D0", Offset = "0x9A53D0", VA = "0x9A53D0")]
	public PigFoodMove()
	{
	}
}
[Token(Token = "0x2000122")]
public static class TriggerEvent_Helper
{
	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<string> EventTypeList;

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x9A53F8", Offset = "0x9A53F8", VA = "0x9A53F8")]
	public static void AddEventType(BeTriggerObject beDetectionType, TriggerObejcetType detectionArea)
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x9A5680", Offset = "0x9A5680", VA = "0x9A5680")]
	public static string GetEventType(BeTriggerObject beDetectionType, TriggerObejcetType detectionArea)
	{
		return null;
	}

	[Token(Token = "0x6000923")]
	internal static void AddEventType<T>(BeTriggerObject beDetectionType, TriggerObejcetType detectionArea)
	{
	}
}
[Token(Token = "0x2000123")]
public class WoodSwingDetector : MonoBehaviour
{
	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveThreshold;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float moveTimeThreshold;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float reverseAngleThreshold;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int reverseTimeThreshold;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isMoving;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 moveDirection;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<Vector3> moveDirections;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<Vector3> reverseDirections;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int reverseTime;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int SwingDectectorMaxCount;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private int SwingCount;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action SwingOverAction;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private HJ_FHT hJ_FHT;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool finishFire;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 pos;

	[Token(Token = "0x6000925")]
	[Address(RVA = "0x9A57E8", Offset = "0x9A57E8", VA = "0x9A57E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0x9A5864", Offset = "0x9A5864", VA = "0x9A5864")]
	private void Start()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0x9A593C", Offset = "0x9A593C", VA = "0x9A593C")]
	private void IsfinishFire()
	{
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0x9A5948", Offset = "0x9A5948", VA = "0x9A5948")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0x9A59B8", Offset = "0x9A59B8", VA = "0x9A59B8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0x9A5A5C", Offset = "0x9A5A5C", VA = "0x9A5A5C")]
	private void Update()
	{
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0x9A6008", Offset = "0x9A6008", VA = "0x9A6008")]
	public WoodSwingDetector()
	{
	}
}
[Token(Token = "0x2000124")]
public class ALine : MonoBehaviour
{
	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float distance;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector3> Points;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform StratPos;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform EndPos;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Y1;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Y2;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float Y3;

	[Token(Token = "0x600092C")]
	[Address(RVA = "0x9A60E4", Offset = "0x9A60E4", VA = "0x9A60E4")]
	public void Start()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0x9A62EC", Offset = "0x9A62EC", VA = "0x9A62EC")]
	private void Update()
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0x9A63E4", Offset = "0x9A63E4", VA = "0x9A63E4")]
	private void BasePos(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x600092F")]
	[Address(RVA = "0x9A6494", Offset = "0x9A6494", VA = "0x9A6494")]
	public ALine()
	{
	}
}
[Token(Token = "0x2000125")]
public class BLine : MonoBehaviour
{
	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] fixedPoint;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Vector3> bezierPoints;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform StratPos;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform EndPos;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Y1;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Y2;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float Y3;

	[Token(Token = "0x6000930")]
	[Address(RVA = "0x9A64A4", Offset = "0x9A64A4", VA = "0x9A64A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0x9A6588", Offset = "0x9A6588", VA = "0x9A6588")]
	private void Update()
	{
	}

	[Token(Token = "0x6000932")]
	[Address(RVA = "0x9A6694", Offset = "0x9A6694", VA = "0x9A6694")]
	private void bezierBasePos(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x9A6B90", Offset = "0x9A6B90", VA = "0x9A6B90")]
	private Vector3 BezierPos(List<Vector3> fixedPoint, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x9A699C", Offset = "0x9A699C", VA = "0x9A699C")]
	private List<Vector3> BezierPosAll(Vector3[] fixedPoint)
	{
		return null;
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x9A6E50", Offset = "0x9A6E50", VA = "0x9A6E50")]
	public BLine()
	{
	}
}
[Token(Token = "0x2000126")]
public class CoreSmokeCtrl : MonoBehaviour
{
	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<GameObject> smokeList;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<int> smokeIndexBeforeSC01;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private List<int> smokeIndexBeforeSC02;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<int> smokeIndexAfterSC02;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float smokeDuration;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isEnable;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int index;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<int> currentList;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float timeCounting;

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x9A6E58", Offset = "0x9A6E58", VA = "0x9A6E58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x9A6EF0", Offset = "0x9A6EF0", VA = "0x9A6EF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x9A6EF4", Offset = "0x9A6EF4", VA = "0x9A6EF4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x9A6E5C", Offset = "0x9A6E5C", VA = "0x9A6E5C")]
	public void DisableAllSmoke()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x9A6FEC", Offset = "0x9A6FEC", VA = "0x9A6FEC")]
	private void EnableSmoke(List<int> smokeIndex)
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x9A70B0", Offset = "0x9A70B0", VA = "0x9A70B0")]
	public void EnableSmokeBeforeSC01()
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0x9A70B8", Offset = "0x9A70B8", VA = "0x9A70B8")]
	public void EnableSmokeBeforeSC02()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x9A70C0", Offset = "0x9A70C0", VA = "0x9A70C0")]
	public void EnableSmokeAfterSC02()
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0x9A70C8", Offset = "0x9A70C8", VA = "0x9A70C8")]
	public CoreSmokeCtrl()
	{
	}
}
[Token(Token = "0x2000127")]
public class GlowControl : MonoBehaviour
{
	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected List<GameObject> glowObjList;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	protected List<Material> matList;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float duration;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	protected float initValue;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected TweenerCore<float, float, FloatOptions>[] temp_dt;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected TweenerCore<float, float, FloatOptions> temp_dt2;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected bool isSkinMesh;

	[Token(Token = "0x600093F")]
	[Address(RVA = "0x9A722C", Offset = "0x9A722C", VA = "0x9A722C", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x9A75EC", Offset = "0x9A75EC", VA = "0x9A75EC", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x9A75F8", Offset = "0x9A75F8", VA = "0x9A75F8", Slot = "6")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x9A75FC", Offset = "0x9A75FC", VA = "0x9A75FC", Slot = "7")]
	public virtual void DisableFlowEffect()
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0x9A77A8", Offset = "0x9A77A8", VA = "0x9A77A8", Slot = "8")]
	public virtual void EnableFlowEffect()
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0x9A7858", Offset = "0x9A7858", VA = "0x9A7858")]
	public GlowControl()
	{
	}
}
[Token(Token = "0x2000128")]
public class HuoJuCtrl : MonoBehaviour
{
	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform effectPos;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform vfx_fire;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform huoJu;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material huoJuMaterial;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float fireDuration;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HJ_FHT hJ_FHT;

	[Token(Token = "0x6000945")]
	[Address(RVA = "0x9A793C", Offset = "0x9A793C", VA = "0x9A793C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0x9A7A88", Offset = "0x9A7A88", VA = "0x9A7A88")]
	private void Start()
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0x9A7B60", Offset = "0x9A7B60", VA = "0x9A7B60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0x9A7C18", Offset = "0x9A7C18", VA = "0x9A7C18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0x9A7B64", Offset = "0x9A7B64", VA = "0x9A7B64")]
	public void EnableNormalStatus()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0x9A7C4C", Offset = "0x9A7C4C", VA = "0x9A7C4C")]
	public void EnableFireStatus()
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x9A7F54", Offset = "0x9A7F54", VA = "0x9A7F54")]
	public HuoJuCtrl()
	{
	}
}
[Token(Token = "0x200012B")]
public class LookAtCameraCtrl : MonoBehaviour
{
	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform camera;

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x9A8024", Offset = "0x9A8024", VA = "0x9A8024")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x9A8028", Offset = "0x9A8028", VA = "0x9A8028")]
	private void Start()
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x9A802C", Offset = "0x9A802C", VA = "0x9A802C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x9A8140", Offset = "0x9A8140", VA = "0x9A8140")]
	public LookAtCameraCtrl()
	{
	}
}
[Token(Token = "0x200012C")]
public class MinDanCtrl : MonoBehaviour
{
	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform content;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform pos0;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform pos1;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float duration;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action Finished;

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x9A8148", Offset = "0x9A8148", VA = "0x9A8148")]
	private void Start()
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x9A825C", Offset = "0x9A825C", VA = "0x9A825C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x9A8260", Offset = "0x9A8260", VA = "0x9A8260")]
	public MinDanCtrl()
	{
	}
}
[Token(Token = "0x200012D")]
public class PingYueCtrl : MonoBehaviour
{
	[Token(Token = "0x200012E")]
	[CompilerGenerated]
	private sealed class <EnableFont_1234>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PingYueCtrl <>4__this;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000967")]
			[Address(RVA = "0x9A884C", Offset = "0x9A884C", VA = "0x9A884C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000969")]
			[Address(RVA = "0x9A8894", Offset = "0x9A8894", VA = "0x9A8894", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x9A8618", Offset = "0x9A8618", VA = "0x9A8618")]
		[DebuggerHidden]
		public <EnableFont_1234>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x9A8730", Offset = "0x9A8730", VA = "0x9A8730", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x9A8734", Offset = "0x9A8734", VA = "0x9A8734", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x9A8854", Offset = "0x9A8854", VA = "0x9A8854", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float singleDuration;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float singleInterval;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform parent;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int count;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Material> materials;

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x9A828C", Offset = "0x9A828C", VA = "0x9A828C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x9A83F0", Offset = "0x9A83F0", VA = "0x9A83F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x9A84A4", Offset = "0x9A84A4", VA = "0x9A84A4")]
	private void Update()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0x9A83F4", Offset = "0x9A83F4", VA = "0x9A83F4")]
	private void DisableFont()
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0x9A84A8", Offset = "0x9A84A8", VA = "0x9A84A8")]
	public void FadeDisableFont()
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0x9A8558", Offset = "0x9A8558", VA = "0x9A8558")]
	public void EnableFont()
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0x9A85A4", Offset = "0x9A85A4", VA = "0x9A85A4")]
	[IteratorStateMachine(typeof(<EnableFont_1234>d__11))]
	private IEnumerator EnableFont_1234()
	{
		return null;
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0x9A8640", Offset = "0x9A8640", VA = "0x9A8640")]
	private void EnableSingleFont(Material mat)
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0x9A86A0", Offset = "0x9A86A0", VA = "0x9A86A0")]
	public PingYueCtrl()
	{
	}
}
[Token(Token = "0x200012F")]
public class SiLianPingSmokeFade : MonoBehaviour
{
	[Token(Token = "0x2000130")]
	[CompilerGenerated]
	private sealed class <DelayDisableObj>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SiLianPingSmokeFade <>4__this;

		[Token(Token = "0x170000BB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000972")]
			[Address(RVA = "0x9A8B78", Offset = "0x9A8B78", VA = "0x9A8B78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000974")]
			[Address(RVA = "0x9A8BC0", Offset = "0x9A8BC0", VA = "0x9A8BC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x9A8A18", Offset = "0x9A8A18", VA = "0x9A8A18")]
		[DebuggerHidden]
		public <DelayDisableObj>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x9A8A50", Offset = "0x9A8A50", VA = "0x9A8A50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x9A8A54", Offset = "0x9A8A54", VA = "0x9A8A54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x9A8B80", Offset = "0x9A8B80", VA = "0x9A8B80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float continueTime;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material firstMat;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material secondMat;

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x9A889C", Offset = "0x9A889C", VA = "0x9A889C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x9A8954", Offset = "0x9A8954", VA = "0x9A8954")]
	private void Start()
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x9A89A0", Offset = "0x9A89A0", VA = "0x9A89A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0x9A89A4", Offset = "0x9A89A4", VA = "0x9A89A4")]
	[IteratorStateMachine(typeof(<DelayDisableObj>d__6))]
	private IEnumerator DelayDisableObj()
	{
		return null;
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0x9A8A40", Offset = "0x9A8A40", VA = "0x9A8A40")]
	public SiLianPingSmokeFade()
	{
	}
}
[Token(Token = "0x2000131")]
public class SliderCtrl : MonoBehaviour
{
	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action Finished;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material material;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float delayTime;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float Value;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private bool startUpdate;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Tweener tw;

	[Token(Token = "0x6000975")]
	[Address(RVA = "0x9A8BC8", Offset = "0x9A8BC8", VA = "0x9A8BC8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0x9A8CE4", Offset = "0x9A8CE4", VA = "0x9A8CE4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x9A8CE8", Offset = "0x9A8CE8", VA = "0x9A8CE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x9A8EA8", Offset = "0x9A8EA8", VA = "0x9A8EA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0x9A8F58", Offset = "0x9A8F58", VA = "0x9A8F58")]
	public void DisappearSelf()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0x9A8C44", Offset = "0x9A8C44", VA = "0x9A8C44")]
	private void MaterialInit()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0x9A8EB8", Offset = "0x9A8EB8", VA = "0x9A8EB8")]
	private void UpdateMat()
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x9A8F9C", Offset = "0x9A8F9C", VA = "0x9A8F9C")]
	public SliderCtrl()
	{
	}
}
[Token(Token = "0x2000132")]
public class SmokeColorCtrl : MonoBehaviour
{
	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform firstParticleTrans;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform secondParticleTrans;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material firstMat;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material secondMat;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Color firstOriginalColor;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Color firstEnableColor;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Color secondOriginalColor;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Color secondEnableColor;

	[Token(Token = "0x6000980")]
	[Address(RVA = "0x9A9004", Offset = "0x9A9004", VA = "0x9A9004")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0x9A90A0", Offset = "0x9A90A0", VA = "0x9A90A0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0x9A911C", Offset = "0x9A911C", VA = "0x9A911C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0x9A90A4", Offset = "0x9A90A4", VA = "0x9A90A4")]
	public void InitColor()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0x9A9120", Offset = "0x9A9120", VA = "0x9A9120")]
	public void EnableColor()
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0x9A9198", Offset = "0x9A9198", VA = "0x9A9198")]
	public SmokeColorCtrl()
	{
	}
}
[Token(Token = "0x2000133")]
public enum FingerType
{
	[Token(Token = "0x4000746")]
	None,
	[Token(Token = "0x4000747")]
	Thumb,
	[Token(Token = "0x4000748")]
	Index,
	[Token(Token = "0x4000749")]
	Middle,
	[Token(Token = "0x400074A")]
	Ring,
	[Token(Token = "0x400074B")]
	Pinky
}
[Token(Token = "0x2000134")]
public class Finger
{
	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public FingerType type;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float current;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float target;

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x9A91A0", Offset = "0x9A91A0", VA = "0x9A91A0")]
	public Finger(FingerType finger)
	{
	}
}
[Token(Token = "0x2000135")]
public class HandHider : MonoBehaviour
{
	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject handObject;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private XRDirectInteractor interactor;

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x9A91C8", Offset = "0x9A91C8", VA = "0x9A91C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x9A9220", Offset = "0x9A9220", VA = "0x9A9220")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x9A9344", Offset = "0x9A9344", VA = "0x9A9344")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x9A9468", Offset = "0x9A9468", VA = "0x9A9468")]
	private void Show(SelectExitEventArgs interactable)
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x9A9488", Offset = "0x9A9488", VA = "0x9A9488")]
	private void Hide(SelectEnterEventArgs interactable)
	{
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0x9A94A8", Offset = "0x9A94A8", VA = "0x9A94A8")]
	public HandHider()
	{
	}
}
[Token(Token = "0x2000136")]
public abstract class BaseHand : MonoBehaviour
{
	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected Pose defaultPose;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected List<Transform> fingerRoots;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected HandType handType;

	[Token(Token = "0x170000BD")]
	public HandType HandType
	{
		[Token(Token = "0x600098D")]
		[Address(RVA = "0x9A94B0", Offset = "0x9A94B0", VA = "0x9A94B0")]
		get
		{
			return default(HandType);
		}
	}

	[Token(Token = "0x170000BE")]
	public List<Transform> Joints
	{
		[Token(Token = "0x600098E")]
		[Address(RVA = "0x9A94B8", Offset = "0x9A94B8", VA = "0x9A94B8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x9A94C0", Offset = "0x9A94C0", VA = "0x9A94C0")]
		[CompilerGenerated]
		protected set
		{
		}
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0x9A94C8", Offset = "0x9A94C8", VA = "0x9A94C8", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0x9A94E8", Offset = "0x9A94E8", VA = "0x9A94E8")]
	protected List<Transform> CollectJoints()
	{
		return null;
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0x9A96B8", Offset = "0x9A96B8", VA = "0x9A96B8")]
	public List<Quaternion> GetJointRotations()
	{
		return null;
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0x9A98D4", Offset = "0x9A98D4", VA = "0x9A98D4")]
	public void ApplyDefaultPose()
	{
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0x9A98DC", Offset = "0x9A98DC", VA = "0x9A98DC")]
	public void ApplyPose(Pose pose)
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x9A9964", Offset = "0x9A9964", VA = "0x9A9964")]
	public void ApplyFingerRotations(List<Quaternion> rotations)
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x9A9A44", Offset = "0x9A9A44", VA = "0x9A9A44")]
	private bool HasProperCount(List<Quaternion> rotations)
	{
		return default(bool);
	}

	[Token(Token = "0x6000997")]
	public abstract void ApplyOffset(Vector3 position, Quaternion rotation);

	[Token(Token = "0x6000998")]
	[Address(RVA = "0x9A9AAC", Offset = "0x9A9AAC", VA = "0x9A9AAC")]
	protected BaseHand()
	{
	}
}
[Token(Token = "0x2000137")]
public class GameplayHand : BaseHand
{
	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Dictionary<string, FingersValue> FingersAniValues;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float _Thumb;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _Index;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float _Middle;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float _Ring;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float _Pinky;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public XRBaseInteractor targetInteractor;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ActionBasedController controller;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Animator animator;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isUpdateAnimator;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool isCustomValue;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly List<Finger> gripFingers;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private FingersValue finger;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float Value;

	[Token(Token = "0x6000999")]
	[Address(RVA = "0x9A9B64", Offset = "0x9A9B64", VA = "0x9A9B64")]
	private new void Awake()
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0x9A9CB8", Offset = "0x9A9CB8", VA = "0x9A9CB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0x9A9DDC", Offset = "0x9A9DDC", VA = "0x9A9DDC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x9A9F00", Offset = "0x9A9F00", VA = "0x9A9F00")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0x9A9FBC", Offset = "0x9A9FBC", VA = "0x9A9FBC")]
	private void Update()
	{
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x9A9FCC", Offset = "0x9A9FCC", VA = "0x9A9FCC")]
	private void UpdateHand()
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0x9AA008", Offset = "0x9AA008", VA = "0x9AA008")]
	private void SetPointFingerTargets(List<Finger> fingers)
	{
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0x9AA16C", Offset = "0x9AA16C", VA = "0x9AA16C")]
	private void SetPointFingerTargets2(List<Finger> fingers)
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x9AA668", Offset = "0x9AA668", VA = "0x9AA668")]
	public void SetFingerValue(bool isCustomValue, float Thumb = 0f, float Index = 0f, float Middle = 0f, float Ring = 0f, float Pinky = 0f)
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x9AA680", Offset = "0x9AA680", VA = "0x9AA680")]
	public void SetFingerValue(string GripObj)
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x9AA334", Offset = "0x9AA334", VA = "0x9AA334")]
	private void SmoothFinger(List<Finger> fingers)
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x9AA4C4", Offset = "0x9AA4C4", VA = "0x9AA4C4")]
	private void AnimateFinger(List<Finger> fingers)
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x9AA710", Offset = "0x9AA710", VA = "0x9AA710")]
	private void AnimateFinger(string finger, float blend)
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0x9AA72C", Offset = "0x9AA72C", VA = "0x9AA72C")]
	private void TryApplyObjectPose(SelectEnterEventArgs interactable)
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x9AA854", Offset = "0x9AA854", VA = "0x9AA854")]
	private void TryApplyDefaultPose(SelectExitEventArgs interactable)
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x9AA978", Offset = "0x9AA978", VA = "0x9AA978", Slot = "5")]
	public override void ApplyOffset(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x9AAB40", Offset = "0x9AAB40", VA = "0x9AAB40")]
	public GameplayHand()
	{
	}
}
[Token(Token = "0x2000138")]
[ExecuteInEditMode]
[SelectionBase]
public class PreviewHand : BaseHand
{
	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x9AAEE0", Offset = "0x9AAEE0", VA = "0x9AAEE0")]
	public void MirrorAndApplyPose(PreviewHand sourceHand)
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x9AAF94", Offset = "0x9AAF94", VA = "0x9AAF94")]
	private List<Quaternion> MirrorJoints(List<Transform> joints)
	{
		return null;
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x9AB1FC", Offset = "0x9AB1FC", VA = "0x9AB1FC")]
	private Quaternion MirrorJoint(Transform sourceTransform)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x9AB1D4", Offset = "0x9AB1D4", VA = "0x9AB1D4")]
	private Quaternion MirrorRotation(Transform sourceTransform)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x9AB1B0", Offset = "0x9AB1B0", VA = "0x9AB1B0")]
	private Vector3 MirrorPosition(Transform sourceTransform)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x9AB214", Offset = "0x9AB214", VA = "0x9AB214", Slot = "5")]
	public override void ApplyOffset(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x9AB2A8", Offset = "0x9AB2A8", VA = "0x9AB2A8")]
	public PreviewHand()
	{
	}
}
[Serializable]
[Token(Token = "0x2000139")]
public class HandInfo
{
	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 attachPosition;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion attachRotation;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<Quaternion> fingerRotations;

	[Token(Token = "0x170000BF")]
	public static HandInfo Empty
	{
		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x9AB2AC", Offset = "0x9AB2AC", VA = "0x9AB2AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x9AB404", Offset = "0x9AB404", VA = "0x9AB404")]
	public void Save(PreviewHand hand)
	{
	}

	[Token(Token = "0x60009B3")]
	[Address(RVA = "0x9AB304", Offset = "0x9AB304", VA = "0x9AB304")]
	public HandInfo()
	{
	}
}
[Token(Token = "0x200013A")]
public enum HandType
{
	[Token(Token = "0x4000768")]
	None,
	[Token(Token = "0x4000769")]
	Left,
	[Token(Token = "0x400076A")]
	Right
}
[Token(Token = "0x200013B")]
[SerializeField]
[CreateAssetMenu(fileName = "NewPoseData")]
public class Pose : ScriptableObject
{
	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HandInfo leftHandInfo;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HandInfo rightHandInfo;

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0x9A993C", Offset = "0x9A993C", VA = "0x9A993C")]
	public HandInfo GetHandInfo(HandType handType)
	{
		return null;
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0x9AB47C", Offset = "0x9AB47C", VA = "0x9AB47C")]
	public Pose()
	{
	}
}
[Token(Token = "0x200013C")]
public class PoseContainer : MonoBehaviour
{
	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Pose pose;

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0x9AB4BC", Offset = "0x9AB4BC", VA = "0x9AB4BC")]
	public PoseContainer()
	{
	}
}
[Token(Token = "0x200013D")]
[ExecuteInEditMode]
public class HandManager : MonoBehaviour
{
	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool hideHands;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject leftHandPrefab;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject rightHandPrefab;

	[Token(Token = "0x170000C0")]
	public PreviewHand LeftHand
	{
		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x9AB4C4", Offset = "0x9AB4C4", VA = "0x9AB4C4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x9AB4CC", Offset = "0x9AB4CC", VA = "0x9AB4CC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000C1")]
	public PreviewHand RightHand
	{
		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x9AB4D4", Offset = "0x9AB4D4", VA = "0x9AB4D4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x9AB4DC", Offset = "0x9AB4DC", VA = "0x9AB4DC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000C2")]
	public bool HandsExist
	{
		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x9AB4E4", Offset = "0x9AB4E4", VA = "0x9AB4E4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60009BC")]
	[Address(RVA = "0x9AB574", Offset = "0x9AB574", VA = "0x9AB574")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60009BD")]
	[Address(RVA = "0x9AB5B8", Offset = "0x9AB5B8", VA = "0x9AB5B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60009BE")]
	[Address(RVA = "0x9AB578", Offset = "0x9AB578", VA = "0x9AB578")]
	private void CreateHandPreviews()
	{
	}

	[Token(Token = "0x60009BF")]
	[Address(RVA = "0x9AB5C0", Offset = "0x9AB5C0", VA = "0x9AB5C0")]
	private PreviewHand CreateHand(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x60009C0")]
	[Address(RVA = "0x9AB5BC", Offset = "0x9AB5BC", VA = "0x9AB5BC")]
	private void DestroyHandPreviews()
	{
	}

	[Token(Token = "0x60009C1")]
	[Address(RVA = "0x9AB69C", Offset = "0x9AB69C", VA = "0x9AB69C")]
	public void UpdateHands(Pose pose, Transform parentTransform)
	{
	}

	[Token(Token = "0x60009C2")]
	[Address(RVA = "0x9AB71C", Offset = "0x9AB71C", VA = "0x9AB71C")]
	public void SavePose(Pose pose)
	{
	}

	[Token(Token = "0x60009C3")]
	[Address(RVA = "0x9AB75C", Offset = "0x9AB75C", VA = "0x9AB75C")]
	public HandManager()
	{
	}
}
[Token(Token = "0x200013E")]
[ExecuteInEditMode]
public class SelectionHandler : MonoBehaviour
{
	[Token(Token = "0x170000C3")]
	public XRBaseInteractable CurretInteractable
	{
		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x9AB76C", Offset = "0x9AB76C", VA = "0x9AB76C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x9AB774", Offset = "0x9AB774", VA = "0x9AB774")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0x9AB77C", Offset = "0x9AB77C", VA = "0x9AB77C")]
	public bool CheckForNewInteractable()
	{
		return default(bool);
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x9AB7C8", Offset = "0x9AB7C8", VA = "0x9AB7C8")]
	private XRBaseInteractable GetInteractable()
	{
		return null;
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x9AB838", Offset = "0x9AB838", VA = "0x9AB838")]
	private bool IsDifferentInteractable(XRBaseInteractable currentInteractable, XRBaseInteractable newInteractable)
	{
		return default(bool);
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0x9AB91C", Offset = "0x9AB91C", VA = "0x9AB91C")]
	public GameObject SetObjectPose(Pose pose)
	{
		return null;
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0x9AB990", Offset = "0x9AB990", VA = "0x9AB990")]
	public Pose TryGetPose(GameObject targetObject)
	{
		return null;
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x9AB98C", Offset = "0x9AB98C", VA = "0x9AB98C")]
	private void MarkActiveSceneAsDirty()
	{
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0x9ABA48", Offset = "0x9ABA48", VA = "0x9ABA48")]
	public SelectionHandler()
	{
	}
}
[Token(Token = "0x200013F")]
public static class Extensions
{
	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x9AAAC0", Offset = "0x9AAAC0", VA = "0x9AAAC0")]
	public static Vector3 RotatePointAroundPivot(this Vector3 point, Vector3 pivot, Vector3 angles)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000140")]
public class ExampleWheelController : MonoBehaviour
{
	[Token(Token = "0x2000141")]
	private static class Uniforms
	{
		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int _MotionAmount;
	}

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float acceleration;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer motionVectorRenderer;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody m_Rigidbody;

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0x9ABA50", Offset = "0x9ABA50", VA = "0x9ABA50")]
	private void Start()
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x9ABAC4", Offset = "0x9ABAC4", VA = "0x9ABAC4")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x9ABC20", Offset = "0x9ABC20", VA = "0x9ABC20")]
	public ExampleWheelController()
	{
	}
}
[Token(Token = "0x2000142")]
public enum Pipeline
{
	[Token(Token = "0x4000779")]
	HDRP,
	[Token(Token = "0x400077A")]
	LWRP,
	[Token(Token = "0x400077B")]
	Standard
}
[Token(Token = "0x2000143")]
public class lookat : MonoBehaviour
{
	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Target;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform targetpoint;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject myLine;

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x9ABC90", Offset = "0x9ABC90", VA = "0x9ABC90")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x9ABC94", Offset = "0x9ABC94", VA = "0x9ABC94")]
	private void DrawLine(Vector3 start, Vector3 end, Color color, float duration = 0.2f)
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x9ABE68", Offset = "0x9ABE68", VA = "0x9ABE68")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x9ABFC4", Offset = "0x9ABFC4", VA = "0x9ABFC4")]
	public lookat()
	{
	}
}
[Token(Token = "0x2000144")]
public class ChangePos1 : MonoBehaviour
{
	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform vr;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isGrip;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool UpisGrip;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] poses;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int index;

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x9ABFCC", Offset = "0x9ABFCC", VA = "0x9ABFCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009D7")]
	[Address(RVA = "0x9AC034", Offset = "0x9AC034", VA = "0x9AC034")]
	private void Start()
	{
	}

	[Token(Token = "0x60009D8")]
	[Address(RVA = "0x9AC088", Offset = "0x9AC088", VA = "0x9AC088")]
	private void Update()
	{
	}

	[Token(Token = "0x60009D9")]
	[Address(RVA = "0x9AC148", Offset = "0x9AC148", VA = "0x9AC148")]
	public void ChangeNextPos()
	{
	}

	[Token(Token = "0x60009DA")]
	[Address(RVA = "0x9AC20C", Offset = "0x9AC20C", VA = "0x9AC20C")]
	public ChangePos1()
	{
	}
}
[Token(Token = "0x2000145")]
public class SwitchScenes1 : MonoBehaviour
{
	[Token(Token = "0x2000146")]
	[CompilerGenerated]
	private sealed class <UnloadAllObj>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SwitchScenes1 <>4__this;

		[Token(Token = "0x170000C4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0x9AC664", Offset = "0x9AC664", VA = "0x9AC664", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0x9AC6AC", Offset = "0x9AC6AC", VA = "0x9AC6AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x9AC3DC", Offset = "0x9AC3DC", VA = "0x9AC3DC")]
		[DebuggerHidden]
		public <UnloadAllObj>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x9AC494", Offset = "0x9AC494", VA = "0x9AC494", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x9AC498", Offset = "0x9AC498", VA = "0x9AC498", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x9AC66C", Offset = "0x9AC66C", VA = "0x9AC66C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected List<GameObject> SceneObjs;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GCTime;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Hand testhand;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isPress;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string sceneName;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isLoadScene;

	[Token(Token = "0x60009DB")]
	[Address(RVA = "0x9AC214", Offset = "0x9AC214", VA = "0x9AC214")]
	private void Start()
	{
	}

	[Token(Token = "0x60009DC")]
	[Address(RVA = "0x9AC26C", Offset = "0x9AC26C", VA = "0x9AC26C")]
	private void Update()
	{
	}

	[Token(Token = "0x60009DD")]
	[Address(RVA = "0x9AC340", Offset = "0x9AC340", VA = "0x9AC340")]
	private void initIslaod()
	{
	}

	[Token(Token = "0x60009DE")]
	[Address(RVA = "0x9AC348", Offset = "0x9AC348", VA = "0x9AC348")]
	public void ReleaseMemory()
	{
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0x9AC368", Offset = "0x9AC368", VA = "0x9AC368")]
	[IteratorStateMachine(typeof(<UnloadAllObj>d__10))]
	public IEnumerator UnloadAllObj()
	{
		return null;
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0x9AC404", Offset = "0x9AC404", VA = "0x9AC404")]
	public SwitchScenes1()
	{
	}
}
[Token(Token = "0x2000147")]
public class FPSCounter : MonoBehaviour
{
	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool SetTargetFrameRate;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float deltaTime;

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0x9AC6B4", Offset = "0x9AC6B4", VA = "0x9AC6B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0x9AC6CC", Offset = "0x9AC6CC", VA = "0x9AC6CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0x9AC70C", Offset = "0x9AC70C", VA = "0x9AC70C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0x9AC960", Offset = "0x9AC960", VA = "0x9AC960")]
	public FPSCounter()
	{
	}
}
[Token(Token = "0x2000148")]
public class JsonNetSample : MonoBehaviour
{
	[Token(Token = "0x2000149")]
	public class Product
	{
		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime ExpiryDate;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public decimal Price;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Sizes;

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x9AD37C", Offset = "0x9AD37C", VA = "0x9AD37C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x9AD4BC", Offset = "0x9AD4BC", VA = "0x9AD4BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x9AD320", Offset = "0x9AD320", VA = "0x9AD320")]
		public Product()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x200014A")]
	public class CharacterListItem
	{
		[Token(Token = "0x170000C6")]
		public int Id
		{
			[Token(Token = "0x60009F6")]
			[Address(RVA = "0x9AD520", Offset = "0x9AD520", VA = "0x9AD520")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009F7")]
			[Address(RVA = "0x9AD528", Offset = "0x9AD528", VA = "0x9AD528")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public string Name
		{
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0x9AD530", Offset = "0x9AD530", VA = "0x9AD530")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0x9AD538", Offset = "0x9AD538", VA = "0x9AD538")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public int Level
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0x9AD540", Offset = "0x9AD540", VA = "0x9AD540")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60009FB")]
			[Address(RVA = "0x9AD548", Offset = "0x9AD548", VA = "0x9AD548")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public string Class
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0x9AD550", Offset = "0x9AD550", VA = "0x9AD550")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0x9AD558", Offset = "0x9AD558", VA = "0x9AD558")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public string Sex
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0x9AD560", Offset = "0x9AD560", VA = "0x9AD560")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x9AD568", Offset = "0x9AD568", VA = "0x9AD568")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x9AD570", Offset = "0x9AD570", VA = "0x9AD570")]
		public CharacterListItem()
		{
		}
	}

	[Token(Token = "0x200014B")]
	public class Movie
	{
		[Token(Token = "0x170000CB")]
		public string Name
		{
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0x9AD578", Offset = "0x9AD578", VA = "0x9AD578")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0x9AD580", Offset = "0x9AD580", VA = "0x9AD580")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public string Description
		{
			[Token(Token = "0x6000A03")]
			[Address(RVA = "0x9AD588", Offset = "0x9AD588", VA = "0x9AD588")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0x9AD590", Offset = "0x9AD590", VA = "0x9AD590")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public string Classification
		{
			[Token(Token = "0x6000A05")]
			[Address(RVA = "0x9AD598", Offset = "0x9AD598", VA = "0x9AD598")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0x9AD5A0", Offset = "0x9AD5A0", VA = "0x9AD5A0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public string Studio
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0x9AD5A8", Offset = "0x9AD5A8", VA = "0x9AD5A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0x9AD5B0", Offset = "0x9AD5B0", VA = "0x9AD5B0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public DateTime? ReleaseDate
		{
			[Token(Token = "0x6000A09")]
			[Address(RVA = "0x9AD5B8", Offset = "0x9AD5B8", VA = "0x9AD5B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0x9AD5C4", Offset = "0x9AD5C4", VA = "0x9AD5C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public List<string> ReleaseCountries
		{
			[Token(Token = "0x6000A0B")]
			[Address(RVA = "0x9AD5CC", Offset = "0x9AD5CC", VA = "0x9AD5CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0x9AD5D4", Offset = "0x9AD5D4", VA = "0x9AD5D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x9AD5DC", Offset = "0x9AD5DC", VA = "0x9AD5DC")]
		public Movie()
		{
		}
	}

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text Output;

	[Token(Token = "0x60009EB")]
	[Address(RVA = "0x9AC970", Offset = "0x9AC970", VA = "0x9AC970")]
	private void Start()
	{
	}

	[Token(Token = "0x60009EC")]
	[Address(RVA = "0x9AD298", Offset = "0x9AD298", VA = "0x9AD298")]
	private void WriteLine(string msg)
	{
	}

	[Token(Token = "0x60009ED")]
	[Address(RVA = "0x9ACA14", Offset = "0x9ACA14", VA = "0x9ACA14")]
	private void TestJson()
	{
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x9ACB14", Offset = "0x9ACB14", VA = "0x9ACB14")]
	private void SerailizeJson()
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x9ACCBC", Offset = "0x9ACCBC", VA = "0x9ACCBC")]
	private void DeserializeJson()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x9ACD78", Offset = "0x9ACD78", VA = "0x9ACD78")]
	private void LinqToJson()
	{
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x9ACF00", Offset = "0x9ACF00", VA = "0x9ACF00")]
	private void JsonPath()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x9AD374", Offset = "0x9AD374", VA = "0x9AD374")]
	public JsonNetSample()
	{
	}
}
namespace UniStorm
{
	[Token(Token = "0x200014C")]
	[CreateAssetMenu(fileName = "New Cloud Profile", menuName = "UniStorm/New Cloud Profile")]
	public class CloudProfile : ScriptableObject
	{
		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ProfileName;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float EdgeSoftness;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float BaseSoftness;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float DetailStrength;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float Density;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CoverageBias;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int DetailScale;

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x9AD5E4", Offset = "0x9AD5E4", VA = "0x9AD5E4")]
		public CloudProfile()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class UniStormManager : MonoBehaviour
	{
		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static UniStormManager Instance;

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x9AD658", Offset = "0x9AD658", VA = "0x9AD658")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x9AD6B0", Offset = "0x9AD6B0", VA = "0x9AD6B0")]
		public void SetTime(int Hour, int Minute)
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x9AD734", Offset = "0x9AD734", VA = "0x9AD734")]
		public void SetDate(int Month, int Day, int Year)
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x9AD7E0", Offset = "0x9AD7E0", VA = "0x9AD7E0")]
		public DateTime GetDate()
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x9AD838", Offset = "0x9AD838", VA = "0x9AD838")]
		public void ChangeWeatherWithTransition(WeatherType weatherType)
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x9AD930", Offset = "0x9AD930", VA = "0x9AD930")]
		public void ChangeWeatherInstantly(WeatherType weatherType)
		{
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x9ADA48", Offset = "0x9ADA48", VA = "0x9ADA48")]
		public void RandomWeather()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x9ADB14", Offset = "0x9ADB14", VA = "0x9ADB14")]
		public void RegenerateForecast()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x9ADBC4", Offset = "0x9ADBC4", VA = "0x9ADBC4")]
		public void ChangeWeatherSoundsState(bool ActiveState)
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x9ADC3C", Offset = "0x9ADC3C", VA = "0x9ADC3C")]
		public void ChangeWeatherEffectsState(bool ActiveState)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x9ADCB4", Offset = "0x9ADCB4", VA = "0x9ADCB4")]
		public void ChangeCameraSource(Transform PlayerTransform, Camera CameraSource)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x9AE220", Offset = "0x9AE220", VA = "0x9AE220")]
		public string GetWeatherForecastName()
		{
			return null;
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x9AE27C", Offset = "0x9AE27C", VA = "0x9AE27C")]
		public int GetWeatherForecastHour()
		{
			return default(int);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x9AE2D0", Offset = "0x9AE2D0", VA = "0x9AE2D0")]
		public void SetMusicVolume(float Volume)
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x9AE390", Offset = "0x9AE390", VA = "0x9AE390")]
		public void SetAmbienceVolume(float Volume)
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x9AE450", Offset = "0x9AE450", VA = "0x9AE450")]
		public void SetWeatherVolume(float Volume)
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x9AE510", Offset = "0x9AE510", VA = "0x9AE510")]
		public void SetDayLength(int MinuteLength)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x9AE568", Offset = "0x9AE568", VA = "0x9AE568")]
		public void SetNightLength(int MinuteLength)
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x9AE5C0", Offset = "0x9AE5C0", VA = "0x9AE5C0")]
		public void ChangeMoonPhaseColor(Color MoonPhaseColor)
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x9AE640", Offset = "0x9AE640", VA = "0x9AE640")]
		public void UpdateCloudQuality(UniStormSystem.CloudQualityEnum CloudQuality)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x9AE7D0", Offset = "0x9AE7D0", VA = "0x9AE7D0")]
		public void UpdateCloudType(UniStormSystem.CloudTypeEnum CloudType)
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x9AEB20", Offset = "0x9AEB20", VA = "0x9AEB20")]
		public string GetCurrentPrecipitationType()
		{
			return null;
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x9AEC04", Offset = "0x9AEC04", VA = "0x9AEC04")]
		public void SetSunShaftsState(bool CurrentState)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x9AEC9C", Offset = "0x9AEC9C", VA = "0x9AEC9C")]
		public void UpdateSunlightSettings()
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x9AED34", Offset = "0x9AED34", VA = "0x9AED34")]
		public UniStormManager()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class UniStormSystem : MonoBehaviour
	{
		[Token(Token = "0x200014F")]
		public enum CustomizeQualityEnum
		{
			[Token(Token = "0x40008F8")]
			No,
			[Token(Token = "0x40008F9")]
			Yes
		}

		[Token(Token = "0x2000150")]
		public enum UniStormProfileTypeEnum
		{
			[Token(Token = "0x40008FB")]
			Import,
			[Token(Token = "0x40008FC")]
			Export
		}

		[Token(Token = "0x2000151")]
		public enum PlatformTypeEnum
		{
			[Token(Token = "0x40008FE")]
			Desktop,
			[Token(Token = "0x40008FF")]
			VR,
			[Token(Token = "0x4000900")]
			Mobile
		}

		[Token(Token = "0x2000152")]
		public enum GetPlayerMethodEnum
		{
			[Token(Token = "0x4000902")]
			ByTag,
			[Token(Token = "0x4000903")]
			ByName
		}

		[Token(Token = "0x2000153")]
		public enum UseTimeOfDayUpdateSeconds
		{
			[Token(Token = "0x4000905")]
			Yes,
			[Token(Token = "0x4000906")]
			No
		}

		[Token(Token = "0x2000154")]
		public enum CurrentTimeOfDayEnum
		{
			[Token(Token = "0x4000908")]
			Morning,
			[Token(Token = "0x4000909")]
			Day,
			[Token(Token = "0x400090A")]
			Evening,
			[Token(Token = "0x400090B")]
			Night
		}

		[Token(Token = "0x2000155")]
		public enum WeatherGenerationMethodEnum
		{
			[Token(Token = "0x400090D")]
			Hourly,
			[Token(Token = "0x400090E")]
			Daily
		}

		[Token(Token = "0x2000156")]
		public enum EnableFeature
		{
			[Token(Token = "0x4000910")]
			Enabled,
			[Token(Token = "0x4000911")]
			Disabled
		}

		[Token(Token = "0x2000157")]
		public enum CloudShadowResolutionEnum
		{
			[Token(Token = "0x4000913")]
			_256x256,
			[Token(Token = "0x4000914")]
			_512x512,
			[Token(Token = "0x4000915")]
			_1024x1024
		}

		[Token(Token = "0x2000158")]
		public enum FogTypeEnum
		{
			[Token(Token = "0x4000917")]
			UnistormFog,
			[Token(Token = "0x4000918")]
			UnityFog
		}

		[Token(Token = "0x2000159")]
		public enum FogModeEnum
		{
			[Token(Token = "0x400091A")]
			Exponential,
			[Token(Token = "0x400091B")]
			ExponentialSquared
		}

		[Token(Token = "0x200015A")]
		public enum CurrentSeasonEnum
		{
			[Token(Token = "0x400091D")]
			Spring = 1,
			[Token(Token = "0x400091E")]
			Summer,
			[Token(Token = "0x400091F")]
			Fall,
			[Token(Token = "0x4000920")]
			Winter
		}

		[Token(Token = "0x200015B")]
		public enum CloudTypeEnum
		{
			[Token(Token = "0x4000922")]
			_2D,
			[Token(Token = "0x4000923")]
			Volumetric
		}

		[Token(Token = "0x200015C")]
		public enum CloudQualityEnum
		{
			[Token(Token = "0x4000925")]
			Low,
			[Token(Token = "0x4000926")]
			Medium,
			[Token(Token = "0x4000927")]
			High,
			[Token(Token = "0x4000928")]
			Ultra
		}

		[Token(Token = "0x200015D")]
		public enum TemperatureTypeEnum
		{
			[Token(Token = "0x400092A")]
			Fahrenheit,
			[Token(Token = "0x400092B")]
			Celsius
		}

		[Token(Token = "0x200015E")]
		public enum HemisphereEnum
		{
			[Token(Token = "0x400092D")]
			Northern,
			[Token(Token = "0x400092E")]
			Southern
		}

		[Serializable]
		[Token(Token = "0x200015F")]
		public class MoonPhaseClass
		{
			[Token(Token = "0x400092F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Texture MoonPhaseTexture;

			[Token(Token = "0x4000930")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float MoonPhaseIntensity;

			[Token(Token = "0x6000A8C")]
			[Address(RVA = "0x9AED3C", Offset = "0x9AED3C", VA = "0x9AED3C")]
			public MoonPhaseClass()
			{
			}
		}

		[Token(Token = "0x2000160")]
		public enum StarmapTypeEnum
		{
			[Token(Token = "0x4000932")]
			VeryStrongConstellations,
			[Token(Token = "0x4000933")]
			StrongConstellations,
			[Token(Token = "0x4000934")]
			LightConstellations
		}

		[Token(Token = "0x2000161")]
		public enum CloudRenderTypeEnum
		{
			[Token(Token = "0x4000936")]
			Transparent,
			[Token(Token = "0x4000937")]
			Opaque
		}

		[Token(Token = "0x2000162")]
		[CompilerGenerated]
		private sealed class <InitializeDelay>d__357 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000939")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400093A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x170000D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A90")]
				[Address(RVA = "0x9AEFD0", Offset = "0x9AEFD0", VA = "0x9AEFD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A92")]
				[Address(RVA = "0x9AF018", Offset = "0x9AF018", VA = "0x9AF018", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A8D")]
			[Address(RVA = "0x9AED4C", Offset = "0x9AED4C", VA = "0x9AED4C")]
			[DebuggerHidden]
			public <InitializeDelay>d__357(int <>1__state)
			{
			}

			[Token(Token = "0x6000A8E")]
			[Address(RVA = "0x9AED74", Offset = "0x9AED74", VA = "0x9AED74", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A8F")]
			[Address(RVA = "0x9AED78", Offset = "0x9AED78", VA = "0x9AED78", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A91")]
			[Address(RVA = "0x9AEFD8", Offset = "0x9AEFD8", VA = "0x9AEFD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000163")]
		[CompilerGenerated]
		private sealed class <InitializeCloudShadows>d__360 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400093B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400093C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400093D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x170000D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A96")]
				[Address(RVA = "0x9AF2CC", Offset = "0x9AF2CC", VA = "0x9AF2CC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A98")]
				[Address(RVA = "0x9AF314", Offset = "0x9AF314", VA = "0x9AF314", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A93")]
			[Address(RVA = "0x9AF020", Offset = "0x9AF020", VA = "0x9AF020")]
			[DebuggerHidden]
			public <InitializeCloudShadows>d__360(int <>1__state)
			{
			}

			[Token(Token = "0x6000A94")]
			[Address(RVA = "0x9AF048", Offset = "0x9AF048", VA = "0x9AF048", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A95")]
			[Address(RVA = "0x9AF04C", Offset = "0x9AF04C", VA = "0x9AF04C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A97")]
			[Address(RVA = "0x9AF2D4", Offset = "0x9AF2D4", VA = "0x9AF2D4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000164")]
		[CompilerGenerated]
		private sealed class <SunColorFadeSequence>d__396 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400093E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400093F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000941")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float TransitionTime;

			[Token(Token = "0x4000942")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float MaxValue;

			[Token(Token = "0x4000943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <LerpValue>5__2;

			[Token(Token = "0x4000944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__3;

			[Token(Token = "0x170000D5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A9C")]
				[Address(RVA = "0x9AF760", Offset = "0x9AF760", VA = "0x9AF760", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A9E")]
				[Address(RVA = "0x9AF7A8", Offset = "0x9AF7A8", VA = "0x9AF7A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A99")]
			[Address(RVA = "0x9AF31C", Offset = "0x9AF31C", VA = "0x9AF31C")]
			[DebuggerHidden]
			public <SunColorFadeSequence>d__396(int <>1__state)
			{
			}

			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0x9AF344", Offset = "0x9AF344", VA = "0x9AF344", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A9B")]
			[Address(RVA = "0x9AF348", Offset = "0x9AF348", VA = "0x9AF348", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A9D")]
			[Address(RVA = "0x9AF768", Offset = "0x9AF768", VA = "0x9AF768", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000165")]
		[CompilerGenerated]
		private sealed class <ColorFadeSequence>d__397 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float TransitionTime;

			[Token(Token = "0x4000949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Gradient CloudGradientColor;

			[Token(Token = "0x400094A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Gradient FogGradientColor;

			[Token(Token = "0x400094B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float MaxValue;

			[Token(Token = "0x400094C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <LerpValue>5__2;

			[Token(Token = "0x400094D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <t>5__3;

			[Token(Token = "0x170000D7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AA2")]
				[Address(RVA = "0x9B0850", Offset = "0x9B0850", VA = "0x9B0850", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AA4")]
				[Address(RVA = "0x9B0898", Offset = "0x9B0898", VA = "0x9B0898", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A9F")]
			[Address(RVA = "0x9AF7B0", Offset = "0x9AF7B0", VA = "0x9AF7B0")]
			[DebuggerHidden]
			public <ColorFadeSequence>d__397(int <>1__state)
			{
			}

			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0x9AF7D8", Offset = "0x9AF7D8", VA = "0x9AF7D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0x9AF7DC", Offset = "0x9AF7DC", VA = "0x9AF7DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0x9B0858", Offset = "0x9B0858", VA = "0x9B0858", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000166")]
		[CompilerGenerated]
		private sealed class <CloudFadeSequence>d__398 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400094E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400094F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000951")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x4000952")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x4000953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool FadeOut;

			[Token(Token = "0x4000954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <LerpValue>5__3;

			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__4;

			[Token(Token = "0x170000D9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AA8")]
				[Address(RVA = "0x9B0A04", Offset = "0x9B0A04", VA = "0x9B0A04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AAA")]
				[Address(RVA = "0x9B0A4C", Offset = "0x9B0A4C", VA = "0x9B0A4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AA5")]
			[Address(RVA = "0x9B08A0", Offset = "0x9B08A0", VA = "0x9B08A0")]
			[DebuggerHidden]
			public <CloudFadeSequence>d__398(int <>1__state)
			{
			}

			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0x9B08C8", Offset = "0x9B08C8", VA = "0x9B08C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AA7")]
			[Address(RVA = "0x9B08CC", Offset = "0x9B08CC", VA = "0x9B08CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AA9")]
			[Address(RVA = "0x9B0A0C", Offset = "0x9B0A0C", VA = "0x9B0A0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000167")]
		[CompilerGenerated]
		private sealed class <StormyCloudsSequence>d__399 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool FadeOut;

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x400095C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <HorizonColorFadeStart>5__2;

			[Token(Token = "0x400095D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <HorizonColorFadeEnd>5__3;

			[Token(Token = "0x400095E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <LerpValueColorEnd>5__4;

			[Token(Token = "0x400095F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <HorizonFadeStart>5__5;

			[Token(Token = "0x4000960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <HorizonFadeEnd>5__6;

			[Token(Token = "0x4000961")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <HorizonSunFadeEnd>5__7;

			[Token(Token = "0x4000962")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <LerpValueStart>5__8;

			[Token(Token = "0x4000963")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <LerpValueEnd>5__9;

			[Token(Token = "0x4000964")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <LerpSunValueEnd>5__10;

			[Token(Token = "0x4000965")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <HorizonBrightness>5__11;

			[Token(Token = "0x4000966")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <t>5__12;

			[Token(Token = "0x170000DB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AAE")]
				[Address(RVA = "0x9B1184", Offset = "0x9B1184", VA = "0x9B1184", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AB0")]
				[Address(RVA = "0x9B11CC", Offset = "0x9B11CC", VA = "0x9B11CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AAB")]
			[Address(RVA = "0x9B0A54", Offset = "0x9B0A54", VA = "0x9B0A54")]
			[DebuggerHidden]
			public <StormyCloudsSequence>d__399(int <>1__state)
			{
			}

			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0x9B0A7C", Offset = "0x9B0A7C", VA = "0x9B0A7C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AAD")]
			[Address(RVA = "0x9B0A80", Offset = "0x9B0A80", VA = "0x9B0A80", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0x9B118C", Offset = "0x9B118C", VA = "0x9B118C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000168")]
		[CompilerGenerated]
		private sealed class <FogFadeSequence>d__400 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000967")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000968")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000969")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x400096A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x400096B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x400096C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool FadeOut;

			[Token(Token = "0x400096D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x400096E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <LerpValue>5__3;

			[Token(Token = "0x400096F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__4;

			[Token(Token = "0x170000DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AB4")]
				[Address(RVA = "0x9B1440", Offset = "0x9B1440", VA = "0x9B1440", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AB6")]
				[Address(RVA = "0x9B1488", Offset = "0x9B1488", VA = "0x9B1488", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AB1")]
			[Address(RVA = "0x9B11D4", Offset = "0x9B11D4", VA = "0x9B11D4")]
			[DebuggerHidden]
			public <FogFadeSequence>d__400(int <>1__state)
			{
			}

			[Token(Token = "0x6000AB2")]
			[Address(RVA = "0x9B11FC", Offset = "0x9B11FC", VA = "0x9B11FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AB3")]
			[Address(RVA = "0x9B1200", Offset = "0x9B1200", VA = "0x9B1200", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x9B1448", Offset = "0x9B1448", VA = "0x9B1448", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000169")]
		[CompilerGenerated]
		private sealed class <WindFadeSequence>d__401 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000970")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000971")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000972")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000973")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x4000974")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x4000975")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool FadeOut;

			[Token(Token = "0x4000976")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000977")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <LerpValue>5__3;

			[Token(Token = "0x4000978")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__4;

			[Token(Token = "0x170000DF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ABA")]
				[Address(RVA = "0x9B15C4", Offset = "0x9B15C4", VA = "0x9B15C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ABC")]
				[Address(RVA = "0x9B160C", Offset = "0x9B160C", VA = "0x9B160C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AB7")]
			[Address(RVA = "0x9B1490", Offset = "0x9B1490", VA = "0x9B1490")]
			[DebuggerHidden]
			public <WindFadeSequence>d__401(int <>1__state)
			{
			}

			[Token(Token = "0x6000AB8")]
			[Address(RVA = "0x9B14B8", Offset = "0x9B14B8", VA = "0x9B14B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AB9")]
			[Address(RVA = "0x9B14BC", Offset = "0x9B14BC", VA = "0x9B14BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ABB")]
			[Address(RVA = "0x9B15CC", Offset = "0x9B15CC", VA = "0x9B15CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200016A")]
		[CompilerGenerated]
		private sealed class <SunFadeSequence>d__402 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000979")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400097A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400097B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x400097C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool FadeOut;

			[Token(Token = "0x400097D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float MaxValue;

			[Token(Token = "0x400097E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float TransitionTime;

			[Token(Token = "0x400097F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <LerpValue>5__3;

			[Token(Token = "0x4000981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__4;

			[Token(Token = "0x170000E1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AC0")]
				[Address(RVA = "0x9B18AC", Offset = "0x9B18AC", VA = "0x9B18AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AC2")]
				[Address(RVA = "0x9B18F4", Offset = "0x9B18F4", VA = "0x9B18F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0x9B1614", Offset = "0x9B1614", VA = "0x9B1614")]
			[DebuggerHidden]
			public <SunFadeSequence>d__402(int <>1__state)
			{
			}

			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0x9B163C", Offset = "0x9B163C", VA = "0x9B163C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0x9B1640", Offset = "0x9B1640", VA = "0x9B1640", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AC1")]
			[Address(RVA = "0x9B18B4", Offset = "0x9B18B4", VA = "0x9B18B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200016B")]
		[CompilerGenerated]
		private sealed class <MoonFadeSequence>d__403 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool FadeOut;

			[Token(Token = "0x4000986")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float MaxValue;

			[Token(Token = "0x4000987")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float TransitionTime;

			[Token(Token = "0x4000988")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000989")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <LerpValue>5__3;

			[Token(Token = "0x400098A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__4;

			[Token(Token = "0x170000E3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AC6")]
				[Address(RVA = "0x9B1B94", Offset = "0x9B1B94", VA = "0x9B1B94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AC8")]
				[Address(RVA = "0x9B1BDC", Offset = "0x9B1BDC", VA = "0x9B1BDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0x9B18FC", Offset = "0x9B18FC", VA = "0x9B18FC")]
			[DebuggerHidden]
			public <MoonFadeSequence>d__403(int <>1__state)
			{
			}

			[Token(Token = "0x6000AC4")]
			[Address(RVA = "0x9B1924", Offset = "0x9B1924", VA = "0x9B1924", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0x9B1928", Offset = "0x9B1928", VA = "0x9B1928", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0x9B1B9C", Offset = "0x9B1B9C", VA = "0x9B1B9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200016C")]
		[CompilerGenerated]
		private sealed class <MostlyCloudyAdjustment>d__404 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400098B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400098C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400098D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x400098E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool FadeOut;

			[Token(Token = "0x400098F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x4000990")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000991")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <LerpValue>5__3;

			[Token(Token = "0x4000992")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <t>5__4;

			[Token(Token = "0x170000E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ACC")]
				[Address(RVA = "0x9B1DCC", Offset = "0x9B1DCC", VA = "0x9B1DCC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ACE")]
				[Address(RVA = "0x9B1E14", Offset = "0x9B1E14", VA = "0x9B1E14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x9B1BE4", Offset = "0x9B1BE4", VA = "0x9B1BE4")]
			[DebuggerHidden]
			public <MostlyCloudyAdjustment>d__404(int <>1__state)
			{
			}

			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0x9B1C0C", Offset = "0x9B1C0C", VA = "0x9B1C0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0x9B1C10", Offset = "0x9B1C10", VA = "0x9B1C10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x9B1DD4", Offset = "0x9B1DD4", VA = "0x9B1DD4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200016D")]
		[CompilerGenerated]
		private sealed class <CloudHeightSequence>d__405 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000993")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000994")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000995")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000996")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x4000997")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x4000998")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000999")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__3;

			[Token(Token = "0x170000E7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AD2")]
				[Address(RVA = "0x9B1F74", Offset = "0x9B1F74", VA = "0x9B1F74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AD4")]
				[Address(RVA = "0x9B1FBC", Offset = "0x9B1FBC", VA = "0x9B1FBC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0x9B1E1C", Offset = "0x9B1E1C", VA = "0x9B1E1C")]
			[DebuggerHidden]
			public <CloudHeightSequence>d__405(int <>1__state)
			{
			}

			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0x9B1E44", Offset = "0x9B1E44", VA = "0x9B1E44", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0x9B1E48", Offset = "0x9B1E48", VA = "0x9B1E48", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0x9B1F7C", Offset = "0x9B1F7C", VA = "0x9B1F7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200016E")]
		[CompilerGenerated]
		private sealed class <CloudTallnessSequence>d__406 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400099A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400099B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400099C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x400099E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x400099F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__3;

			[Token(Token = "0x170000E9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AD8")]
				[Address(RVA = "0x9B2128", Offset = "0x9B2128", VA = "0x9B2128", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ADA")]
				[Address(RVA = "0x9B2170", Offset = "0x9B2170", VA = "0x9B2170", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0x9B1FC4", Offset = "0x9B1FC4", VA = "0x9B1FC4")]
			[DebuggerHidden]
			public <CloudTallnessSequence>d__406(int <>1__state)
			{
			}

			[Token(Token = "0x6000AD6")]
			[Address(RVA = "0x9B1FEC", Offset = "0x9B1FEC", VA = "0x9B1FEC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AD7")]
			[Address(RVA = "0x9B1FF0", Offset = "0x9B1FF0", VA = "0x9B1FF0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x9B2130", Offset = "0x9B2130", VA = "0x9B2130", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200016F")]
		[CompilerGenerated]
		private sealed class <ParticleFadeSequence>d__407 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ParticleSystem EffectToFade;

			[Token(Token = "0x40009A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float MaxValue;

			[Token(Token = "0x40009A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float TransitionTime;

			[Token(Token = "0x40009A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool FadeOut;

			[Token(Token = "0x40009A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <LerpValue>5__3;

			[Token(Token = "0x40009AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <t>5__4;

			[Token(Token = "0x170000EB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ADE")]
				[Address(RVA = "0x9B2644", Offset = "0x9B2644", VA = "0x9B2644", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AE0")]
				[Address(RVA = "0x9B268C", Offset = "0x9B268C", VA = "0x9B268C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0x9B2178", Offset = "0x9B2178", VA = "0x9B2178")]
			[DebuggerHidden]
			public <ParticleFadeSequence>d__407(int <>1__state)
			{
			}

			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x9B21A0", Offset = "0x9B21A0", VA = "0x9B21A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0x9B21A4", Offset = "0x9B21A4", VA = "0x9B21A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0x9B264C", Offset = "0x9B264C", VA = "0x9B264C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000170")]
		[CompilerGenerated]
		private sealed class <AdditionalParticleFadeSequence>d__408 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ParticleSystem AdditionalEffectToFade;

			[Token(Token = "0x40009AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float MaxValue;

			[Token(Token = "0x40009B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float TransitionTime;

			[Token(Token = "0x40009B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool FadeOut;

			[Token(Token = "0x40009B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <LerpValue>5__3;

			[Token(Token = "0x40009B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <t>5__4;

			[Token(Token = "0x170000ED")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AE4")]
				[Address(RVA = "0x9B2B54", Offset = "0x9B2B54", VA = "0x9B2B54", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AE6")]
				[Address(RVA = "0x9B2B9C", Offset = "0x9B2B9C", VA = "0x9B2B9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0x9B2694", Offset = "0x9B2694", VA = "0x9B2694")]
			[DebuggerHidden]
			public <AdditionalParticleFadeSequence>d__408(int <>1__state)
			{
			}

			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0x9B26BC", Offset = "0x9B26BC", VA = "0x9B26BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0x9B26C0", Offset = "0x9B26C0", VA = "0x9B26C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0x9B2B5C", Offset = "0x9B2B5C", VA = "0x9B2B5C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000171")]
		[CompilerGenerated]
		private sealed class <SoundFadeSequence>d__409 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioSource SourceToFade;

			[Token(Token = "0x40009B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float MaxValue;

			[Token(Token = "0x40009BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float TransitionTime;

			[Token(Token = "0x40009BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool FadeOut;

			[Token(Token = "0x40009BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <LerpValue>5__3;

			[Token(Token = "0x40009BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <t>5__4;

			[Token(Token = "0x170000EF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AEA")]
				[Address(RVA = "0x9B2E90", Offset = "0x9B2E90", VA = "0x9B2E90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AEC")]
				[Address(RVA = "0x9B2ED8", Offset = "0x9B2ED8", VA = "0x9B2ED8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0x9B2BA4", Offset = "0x9B2BA4", VA = "0x9B2BA4")]
			[DebuggerHidden]
			public <SoundFadeSequence>d__409(int <>1__state)
			{
			}

			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0x9B2BCC", Offset = "0x9B2BCC", VA = "0x9B2BCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0x9B2BD0", Offset = "0x9B2BD0", VA = "0x9B2BD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0x9B2E98", Offset = "0x9B2E98", VA = "0x9B2E98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000172")]
		[CompilerGenerated]
		private sealed class <RainShaderFadeSequence>d__410 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool FadeOut;

			[Token(Token = "0x40009C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float MaxValue;

			[Token(Token = "0x40009C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float TransitionTime;

			[Token(Token = "0x40009C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <LerpValue>5__3;

			[Token(Token = "0x40009C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <t>5__4;

			[Token(Token = "0x170000F1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AF0")]
				[Address(RVA = "0x9B31C4", Offset = "0x9B31C4", VA = "0x9B31C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AF2")]
				[Address(RVA = "0x9B320C", Offset = "0x9B320C", VA = "0x9B320C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AED")]
			[Address(RVA = "0x9B2EE0", Offset = "0x9B2EE0", VA = "0x9B2EE0")]
			[DebuggerHidden]
			public <RainShaderFadeSequence>d__410(int <>1__state)
			{
			}

			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0x9B2F08", Offset = "0x9B2F08", VA = "0x9B2F08", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0x9B2F0C", Offset = "0x9B2F0C", VA = "0x9B2F0C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x9B31CC", Offset = "0x9B31CC", VA = "0x9B31CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000173")]
		[CompilerGenerated]
		private sealed class <SnowShaderFadeSequence>d__411 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool FadeOut;

			[Token(Token = "0x40009CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float TransitionTime;

			[Token(Token = "0x40009CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float MaxValue;

			[Token(Token = "0x40009CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <LerpValue>5__3;

			[Token(Token = "0x40009D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <t>5__4;

			[Token(Token = "0x170000F3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AF6")]
				[Address(RVA = "0x9B349C", Offset = "0x9B349C", VA = "0x9B349C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AF8")]
				[Address(RVA = "0x9B34E4", Offset = "0x9B34E4", VA = "0x9B34E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0x9B3214", Offset = "0x9B3214", VA = "0x9B3214")]
			[DebuggerHidden]
			public <SnowShaderFadeSequence>d__411(int <>1__state)
			{
			}

			[Token(Token = "0x6000AF4")]
			[Address(RVA = "0x9B323C", Offset = "0x9B323C", VA = "0x9B323C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0x9B3240", Offset = "0x9B3240", VA = "0x9B3240", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AF7")]
			[Address(RVA = "0x9B34A4", Offset = "0x9B34A4", VA = "0x9B34A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000174")]
		[CompilerGenerated]
		private sealed class <AuroraShaderFadeSequence>d__412 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x40009D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x40009D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Color InnerColor;

			[Token(Token = "0x40009D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Color OuterColor;

			[Token(Token = "0x40009D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <CurrentLightIntensity>5__2;

			[Token(Token = "0x40009D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <LerpLightIntensity>5__3;

			[Token(Token = "0x40009DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Color <CurrentInnerColor>5__4;

			[Token(Token = "0x40009DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Color <CurrentOuterColor>5__5;

			[Token(Token = "0x40009DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private float <t>5__6;

			[Token(Token = "0x170000F5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AFC")]
				[Address(RVA = "0x9B3770", Offset = "0x9B3770", VA = "0x9B3770", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AFE")]
				[Address(RVA = "0x9B37B8", Offset = "0x9B37B8", VA = "0x9B37B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0x9B34EC", Offset = "0x9B34EC", VA = "0x9B34EC")]
			[DebuggerHidden]
			public <AuroraShaderFadeSequence>d__412(int <>1__state)
			{
			}

			[Token(Token = "0x6000AFA")]
			[Address(RVA = "0x9B3514", Offset = "0x9B3514", VA = "0x9B3514", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0x9B3518", Offset = "0x9B3518", VA = "0x9B3518", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AFD")]
			[Address(RVA = "0x9B3778", Offset = "0x9B3778", VA = "0x9B3778", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000175")]
		[CompilerGenerated]
		private sealed class <CloudProfileSequence>d__413 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxEdgeSoftness;

			[Token(Token = "0x40009E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x40009E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float MaxBaseSoftness;

			[Token(Token = "0x40009E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float MaxDetailStrength;

			[Token(Token = "0x40009E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float MaxDensity;

			[Token(Token = "0x40009E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float MaxCoverageBias;

			[Token(Token = "0x40009E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <EdgeSoftnessValue>5__2;

			[Token(Token = "0x40009E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <BaseSoftnessValue>5__3;

			[Token(Token = "0x40009E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <DetailStrengthValue>5__4;

			[Token(Token = "0x40009E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float <DensityValue>5__5;

			[Token(Token = "0x40009EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float <CoverageBiasValue>5__6;

			[Token(Token = "0x40009EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float <t>5__7;

			[Token(Token = "0x170000F7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B02")]
				[Address(RVA = "0x9B3AD0", Offset = "0x9B3AD0", VA = "0x9B3AD0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B04")]
				[Address(RVA = "0x9B3B18", Offset = "0x9B3B18", VA = "0x9B3B18", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0x9B37C0", Offset = "0x9B37C0", VA = "0x9B37C0")]
			[DebuggerHidden]
			public <CloudProfileSequence>d__413(int <>1__state)
			{
			}

			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x9B37E8", Offset = "0x9B37E8", VA = "0x9B37E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B01")]
			[Address(RVA = "0x9B37EC", Offset = "0x9B37EC", VA = "0x9B37EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B03")]
			[Address(RVA = "0x9B3AD8", Offset = "0x9B3AD8", VA = "0x9B3AD8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000176")]
		[CompilerGenerated]
		private sealed class <CloudShadowIntensitySequence>d__414 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x40009F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x40009F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__3;

			[Token(Token = "0x170000F9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B08")]
				[Address(RVA = "0x9B3C3C", Offset = "0x9B3C3C", VA = "0x9B3C3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B0A")]
				[Address(RVA = "0x9B3C84", Offset = "0x9B3C84", VA = "0x9B3C84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B05")]
			[Address(RVA = "0x9B3B20", Offset = "0x9B3B20", VA = "0x9B3B20")]
			[DebuggerHidden]
			public <CloudShadowIntensitySequence>d__414(int <>1__state)
			{
			}

			[Token(Token = "0x6000B06")]
			[Address(RVA = "0x9B3B48", Offset = "0x9B3B48", VA = "0x9B3B48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B07")]
			[Address(RVA = "0x9B3B4C", Offset = "0x9B3B4C", VA = "0x9B3B4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B09")]
			[Address(RVA = "0x9B3C44", Offset = "0x9B3C44", VA = "0x9B3C44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000177")]
		[CompilerGenerated]
		private sealed class <SunAttenuationIntensitySequence>d__415 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x40009F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x40009F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x40009F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__3;

			[Token(Token = "0x170000FB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B0E")]
				[Address(RVA = "0x9B3D94", Offset = "0x9B3D94", VA = "0x9B3D94", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B10")]
				[Address(RVA = "0x9B3DDC", Offset = "0x9B3DDC", VA = "0x9B3DDC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0x9B3C8C", Offset = "0x9B3C8C", VA = "0x9B3C8C")]
			[DebuggerHidden]
			public <SunAttenuationIntensitySequence>d__415(int <>1__state)
			{
			}

			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0x9B3CB4", Offset = "0x9B3CB4", VA = "0x9B3CB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0x9B3CB8", Offset = "0x9B3CB8", VA = "0x9B3CB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B0F")]
			[Address(RVA = "0x9B3D9C", Offset = "0x9B3D9C", VA = "0x9B3D9C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000178")]
		[CompilerGenerated]
		private sealed class <MusicFadeSequence>d__416 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x40009FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float TransitionTime;

			[Token(Token = "0x40009FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public AudioClip NewMusicClip;

			[Token(Token = "0x40009FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__3;

			[Token(Token = "0x170000FD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B14")]
				[Address(RVA = "0x9B4068", Offset = "0x9B4068", VA = "0x9B4068", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B16")]
				[Address(RVA = "0x9B40B0", Offset = "0x9B40B0", VA = "0x9B40B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B11")]
			[Address(RVA = "0x9B3DE4", Offset = "0x9B3DE4", VA = "0x9B3DE4")]
			[DebuggerHidden]
			public <MusicFadeSequence>d__416(int <>1__state)
			{
			}

			[Token(Token = "0x6000B12")]
			[Address(RVA = "0x9B3E0C", Offset = "0x9B3E0C", VA = "0x9B3E0C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B13")]
			[Address(RVA = "0x9B3E10", Offset = "0x9B3E10", VA = "0x9B3E10", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B15")]
			[Address(RVA = "0x9B4070", Offset = "0x9B4070", VA = "0x9B4070", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000179")]
		[CompilerGenerated]
		private sealed class <AtmosphericFogFadeSequence>d__417 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000A04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float ShaderMaxValue;

			[Token(Token = "0x4000A05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x4000A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float CloudMaxValue;

			[Token(Token = "0x4000A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <ShaderCurrentValue>5__2;

			[Token(Token = "0x4000A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <CloudsCurrentValue>5__3;

			[Token(Token = "0x4000A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__4;

			[Token(Token = "0x170000FF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B1A")]
				[Address(RVA = "0x9B4238", Offset = "0x9B4238", VA = "0x9B4238", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000100")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B1C")]
				[Address(RVA = "0x9B4280", Offset = "0x9B4280", VA = "0x9B4280", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B17")]
			[Address(RVA = "0x9B40B8", Offset = "0x9B40B8", VA = "0x9B40B8")]
			[DebuggerHidden]
			public <AtmosphericFogFadeSequence>d__417(int <>1__state)
			{
			}

			[Token(Token = "0x6000B18")]
			[Address(RVA = "0x9B40E0", Offset = "0x9B40E0", VA = "0x9B40E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B19")]
			[Address(RVA = "0x9B40E4", Offset = "0x9B40E4", VA = "0x9B40E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B1B")]
			[Address(RVA = "0x9B4240", Offset = "0x9B4240", VA = "0x9B4240", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200017A")]
		[CompilerGenerated]
		private sealed class <FogLightFalloffSequence>d__418 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float MaxValue;

			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <CurrentValue>5__2;

			[Token(Token = "0x4000A10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <t>5__3;

			[Token(Token = "0x17000101")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B20")]
				[Address(RVA = "0x9B4388", Offset = "0x9B4388", VA = "0x9B4388", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000102")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B22")]
				[Address(RVA = "0x9B43D0", Offset = "0x9B43D0", VA = "0x9B43D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0x9B4288", Offset = "0x9B4288", VA = "0x9B4288")]
			[DebuggerHidden]
			public <FogLightFalloffSequence>d__418(int <>1__state)
			{
			}

			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0x9B42B0", Offset = "0x9B42B0", VA = "0x9B42B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0x9B42B4", Offset = "0x9B42B4", VA = "0x9B42B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B21")]
			[Address(RVA = "0x9B4390", Offset = "0x9B4390", VA = "0x9B4390", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200017B")]
		[CompilerGenerated]
		private sealed class <SunHeightSequence>d__419 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormSystem <>4__this;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float OpaqueValue;

			[Token(Token = "0x4000A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float TransitionTime;

			[Token(Token = "0x4000A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float TransparentValue;

			[Token(Token = "0x4000A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <CurrentOpaqueValue>5__2;

			[Token(Token = "0x4000A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <CurrentTransparentValue>5__3;

			[Token(Token = "0x4000A19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <t>5__4;

			[Token(Token = "0x17000103")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B26")]
				[Address(RVA = "0x9B45A4", Offset = "0x9B45A4", VA = "0x9B45A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000104")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B28")]
				[Address(RVA = "0x9B45EC", Offset = "0x9B45EC", VA = "0x9B45EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B23")]
			[Address(RVA = "0x9B43D8", Offset = "0x9B43D8", VA = "0x9B43D8")]
			[DebuggerHidden]
			public <SunHeightSequence>d__419(int <>1__state)
			{
			}

			[Token(Token = "0x6000B24")]
			[Address(RVA = "0x9B4400", Offset = "0x9B4400", VA = "0x9B4400", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B25")]
			[Address(RVA = "0x9B4404", Offset = "0x9B4404", VA = "0x9B4404", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B27")]
			[Address(RVA = "0x9B45AC", Offset = "0x9B45AC", VA = "0x9B45AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static UniStormSystem Instance;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CustomizeQualityEnum CustomizeQuality;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int ConvergenceSpeed;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int NearMarchSteps;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int DistantMarchSteps;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnableFeature UpdateMarchStepsDuringRuntime;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ColorSpaceSuggestionDismissed;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int RendersPerFrame;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UniStormClouds m_UniStormClouds;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent OnHourChangeEvent;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent OnDayChangeEvent;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent OnMonthChangeEvent;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent OnYearChangeEvent;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent OnWeatherChangeEvent;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UnityEvent OnWeatherGenerationEvent;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnLightningStrikePlayerEvent;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnLightningStrikeObjectEvent;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float WeatherSoundsVolume;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float AmbienceVolume;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float MusicVolume;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Slider TimeSlider;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject WeatherButtonGameObject;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject TimeSliderGameObject;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Dropdown WeatherDropdown;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public EnableFeature UseUniStormMenu;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public KeyCode UniStormMenuKey;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject UniStormCanvas;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool m_MenuToggle;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public int TabNumber;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int TimeTabNumbers;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public int WeatherTabNumbers;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int CelestialTabNumbers;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool TimeFoldout;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		public bool DateFoldout;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		public bool TimeSoundsFoldout;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD7")]
		public bool TimeMusicFoldout;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool SunFoldout;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
		public bool MoonFoldout;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDA")]
		public bool AtmosphereFoldout;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDB")]
		public bool FogFoldout;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public bool WeatherFoldout;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
		public bool LightningFoldout;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDE")]
		public bool CameraFoldout;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDF")]
		public bool SettingsFoldout;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool CloudsFoldout;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool PlatformFoldout;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public UniStormProfile m_UniStormProfile;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public string FilePath;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public UniStormProfileTypeEnum UniStormProfileType;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public PlatformTypeEnum PlatformType;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Transform PlayerTransform;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Camera PlayerCamera;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public bool m_PlayerFound;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public EnableFeature GetPlayerAtRuntime;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public EnableFeature UseRuntimeDelay;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public GetPlayerMethodEnum GetPlayerMethod;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public string PlayerTag;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public string PlayerName;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public string CameraTag;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public string CameraName;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public DateTime UniStormDate;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public int StartingMinute;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public int StartingHour;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public int Minute;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public int Hour;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public int Day;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public int Month;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public int Year;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public int DayLength;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public int NightLength;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public int TimeOfDayUpdateSeconds;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public UseTimeOfDayUpdateSeconds UseTimeOfDayUpdateControl;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float TimeOfDayUpdateTimer;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float m_TimeFloat;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		public EnableFeature TimeFlow;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public EnableFeature RealWorldTime;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private float m_roundingCorrection;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float m_PreciseCurveTime;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public bool m_HourUpdate;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private float m_TimeOfDaySoundsTimer;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private int m_TimeOfDaySoundsSeconds;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public int TimeOfDaySoundsSecondsMin;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		public int TimeOfDaySoundsSecondsMax;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public List<AudioClip> MorningSounds;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public List<AudioClip> DaySounds;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public List<AudioClip> EveningSounds;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public List<AudioClip> NightSounds;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public AudioSource TimeOfDayAudioSource;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public List<AudioClip> MorningMusic;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public List<AudioClip> DayMusic;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public List<AudioClip> EveningMusic;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public List<AudioClip> NightMusic;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public AudioSource TimeOfDayMusicAudioSource;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public int TimeOfDayMusicDelay;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private float m_CurrentMusicClipLength;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private float m_TimeOfDayMusicTimer;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public EnableFeature TimeOfDaySoundsDuringPrecipitationWeather;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public EnableFeature TransitionMusicOnTimeOfDayChange;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private float m_CurrentClipLength;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public bool m_UpdateTimeOfDayMusic;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x209")]
		public bool m_UpdateBiomeTimeOfDayMusic;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public int MusicTransitionLength;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private int m_LastHour;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public CurrentTimeOfDayEnum CurrentTimeOfDay;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public WeatherGenerationMethodEnum WeatherGenerationMethod;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public List<WeatherType> WeatherForecast;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public EnableFeature ForceLowClouds;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		public int LowCloudHeight;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public int CloudDomeTrisCountX;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public int CloudDomeTrisCountY;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public bool IgnoreConditions;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public AnimationCurve CloudyFadeControl;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public AnimationCurve PrecipitationGraph;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public List<WeatherType> NonPrecipiationWeatherTypes;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public List<WeatherType> PrecipiationWeatherTypes;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public List<WeatherType> AllWeatherTypes;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public WeatherType CurrentWeatherType;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public WeatherType NextWeatherType;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public bool ByPassCoverageTransition;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		public int m_PrecipitationOdds;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private float m_CurrentPrecipitationAmountFloat;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		private int m_CurrentPrecipitationAmountInt;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool m_IsFading;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public int TransitionSpeed;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		public int HourToChangeWeather;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private float m_CloudFadeLevelStart;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private float m_CloudFadeLevelEnd;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int m_GeneratedOdds;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private bool m_WeatherGenerated;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private Coroutine CloudCoroutine;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private Coroutine FogCoroutine;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private Coroutine WeatherEffectCoroutine;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private Coroutine AdditionalWeatherEffectCoroutine;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Coroutine ParticleFadeCoroutine;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private Coroutine StormyCloudsCoroutine;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private Coroutine CloudTallnessCoroutine;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private Coroutine AuroraCoroutine;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private Coroutine FogLightFalloffCoroutine;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private Coroutine AdditionalParticleFadeCoroutine;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private Coroutine SunCoroutine;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private Coroutine MoonCoroutine;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Coroutine WindCoroutine;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Coroutine SoundInCoroutine;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private Coroutine SoundOutCoroutine;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private Coroutine MostlyCloudyCoroutine;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private Coroutine SunAttenuationIntensityCoroutine;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private Coroutine AtmosphericFogCoroutine;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private Coroutine ColorCoroutine;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private Coroutine CloudHeightCoroutine;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private Coroutine RainShaderCoroutine;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private Coroutine SnowShaderCoroutine;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private Coroutine SunColorCoroutine;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private Coroutine CloudProfileCoroutine;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private Coroutine CloudShadowIntensityCoroutine;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private Coroutine MusicVolumeCoroutine;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private Coroutine SunHeightCoroutine;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public WindZone UniStormWindZone;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public GameObject m_SoundTransform;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public GameObject m_EffectsTransform;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		public Light m_LightningLight;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public LightningSystem m_UniStormLightningSystem;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public LightningStrike m_LightningStrikeSystem;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public int LightningSecondsMin;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AC")]
		public int LightningSecondsMax;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public Color LightningColor;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		public Color LightningLightColor;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		private int m_LightningSeconds;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D4")]
		private float m_LightningTimer;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public List<AnimationCurve> LightningFlashPatterns;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		public List<AudioClip> ThunderSounds;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public int LightningGroundStrikeOdds;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public GameObject LightningStrikeEffect;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		public GameObject LightningStrikeFire;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		public EnableFeature WeatherGeneration;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x404")]
		public EnableFeature LightningStrikes;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		public EnableFeature CloudShadows;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
		public EnableFeature LightningStrikesEmeraldAI;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		public string EmeraldAITag;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		public int EmeraldAIRagdollForce;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
		public int EmeraldAILightningDamage;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		public ScreenSpaceCloudShadows m_CloudShadows;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		public float m_CurrentCloudHeight;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
		public CloudShadowResolutionEnum CloudShadowResolution;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		public int CloudSpeed;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x434")]
		public int CloudTurbulence;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		public LayerMask DetectionLayerMask;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		public List<string> LightningFireTags;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		public float LightningLightIntensityMin;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44C")]
		public float LightningLightIntensityMax;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		public float CurrentFogAmount;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x454")]
		public int LightningGenerationDistance;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		public int LightningDetectionDistance;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		public int m_CloudSeed;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		public Color CurrentFogColor;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		public FogTypeEnum FogType;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x474")]
		public FogModeEnum FogMode;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		public UniStormAtmosphericFog m_UniStormAtmosphericFog;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		public EnableFeature UseDithering;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x484")]
		public EnableFeature UseRadialDistantFog;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		public float SnowAmount;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48C")]
		public float CurrentWindIntensity;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		public float MostlyCloudyFadeValue;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x494")]
		public float StormyHorizonBrightness;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x498")]
		private WeatherType TempWeatherType;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A0")]
		public AnimationCurve SunAttenuationCurve;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A8")]
		public AnimationCurve AmbientIntensityCurve;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B0")]
		public CurrentSeasonEnum CurrentSeason;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B4")]
		public CloudTypeEnum CloudType;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B8")]
		public CloudQualityEnum CloudQuality;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4BC")]
		public TemperatureTypeEnum TemperatureType;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C0")]
		public AnimationCurve TemperatureCurve;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C8")]
		public AnimationCurve TemperatureFluctuation;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D0")]
		public int Temperature;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D8")]
		public GameObject LightningStruckObject;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E0")]
		public float FogLightFalloff;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E4")]
		public float CameraFogHeight;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E8")]
		private int m_FreezingTemperature;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F0")]
		private Renderer m_CloudDomeRenderer;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F8")]
		private Material m_CloudDomeMaterial;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x500")]
		private Material m_SkyBoxMaterial;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x508")]
		private Renderer m_StarsRenderer;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x510")]
		private Material m_StarsMaterial;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x518")]
		public Light m_SunLight;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x520")]
		private Transform m_CelestialAxisTransform;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x528")]
		public int SunRevolution;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52C")]
		public float SunIntensity;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x530")]
		public float SunAttenuationMultipler;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x534")]
		public float PrecipitationSunIntensity;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x538")]
		public AnimationCurve SunIntensityCurve;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x540")]
		public AnimationCurve SunSize;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x548")]
		public AnimationCurve SunAtmosphericFogIntensity;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x550")]
		public AnimationCurve SunControlCurve;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x558")]
		public AnimationCurve MoonAtmosphericFogIntensity;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x560")]
		public AnimationCurve MoonObjectFade;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x568")]
		public float AtmosphericFogMultiplier;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x570")]
		public Light m_MoonLight;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x578")]
		public int MoonPhaseIndex;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57C")]
		public float MoonBrightness;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x580")]
		public Material m_MoonPhaseMaterial;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x588")]
		private Renderer m_MoonRenderer;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x590")]
		private Transform m_MoonTransform;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x598")]
		private Renderer m_SunRenderer;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A0")]
		private Transform m_SunTransform;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A8")]
		public float MoonIntensity;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5AC")]
		public float MoonPhaseIntensity;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B0")]
		public AnimationCurve MoonIntensityCurve;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B8")]
		public AnimationCurve MoonSize;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C0")]
		private Vector3 m_MoonStartingSize;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D0")]
		private GameObject m_MoonParent;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D8")]
		public AnimationCurve AtmosphereThickness;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E0")]
		public AnimationCurve EnvironmentReflections;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E8")]
		public float StarSpeed;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5EC")]
		public int SunAngle;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F0")]
		public int MoonAngle;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F4")]
		public EnableFeature SunShaftsEffect;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F8")]
		public EnableFeature MoonShaftsEffect;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x600")]
		private UniStormSunShafts m_SunShafts;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x608")]
		private UniStormSunShafts m_MoonShafts;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x610")]
		public GameObject SunObject;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x618")]
		public Material SunObjectMaterial;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x620")]
		public HemisphereEnum Hemisphere;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x624")]
		public LightShadows SunShadowType;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x628")]
		public LightShadows MoonShadowType;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62C")]
		public LightShadows LightningShadowType;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x630")]
		public LightShadowResolution SunShadowResolution;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x634")]
		public LightShadowResolution MoonShadowResolution;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x638")]
		public LightShadowResolution LightningShadowResolution;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63C")]
		public float SunShadowStrength;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x640")]
		public float MoonShadowStrength;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x644")]
		public float LightningShadowStrength;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x648")]
		public List<MoonPhaseClass> MoonPhaseList;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x650")]
		public GameObject m_AuroraParent;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x658")]
		public StarmapTypeEnum StarmapType;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65C")]
		public CloudRenderTypeEnum CloudRenderType;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x660")]
		public AnimationCurve SunLightShaftIntensity;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x668")]
		public Gradient SunLightShaftsColor;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x670")]
		public float SunLightShaftsBlurSize;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x674")]
		public int SunLightShaftsBlurIterations;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x678")]
		public AnimationCurve MoonLightShaftIntensity;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x680")]
		public Gradient MoonLightShaftsColor;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x688")]
		public float MoonLightShaftsBlurSize;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68C")]
		public int MoonLightShaftsBlurIterations;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x690")]
		public Gradient SunColor;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x698")]
		public Gradient StormySunColor;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A0")]
		public Gradient MoonColor;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A8")]
		public Gradient SkyColor;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B0")]
		public Gradient AmbientSkyLightColor;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B8")]
		public Gradient StormyAmbientSkyLightColor;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C0")]
		public Gradient AmbientEquatorLightColor;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C8")]
		public Gradient StormyAmbientEquatorLightColor;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D0")]
		public Gradient AmbientGroundLightColor;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D8")]
		public Gradient StormyAmbientGroundLightColor;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E0")]
		public Gradient StarLightColor;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E8")]
		public Gradient FogColor;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F0")]
		public Gradient FogStormyColor;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F8")]
		public Gradient CloudLightColor;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x700")]
		public Gradient StormyCloudLightColor;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x708")]
		public Gradient CloudBaseColor;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x710")]
		public Gradient CloudStormyBaseColor;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x718")]
		public Gradient SkyTintColor;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x720")]
		[GradientUsage(true)]
		public Gradient SunSpotColor;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x728")]
		public Gradient FogLightColor;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x730")]
		public Gradient StormyFogLightColor;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x738")]
		public Color MoonPhaseColor;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x748")]
		public Color MoonlightColor;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x758")]
		private float m_FadeValue;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75C")]
		private float m_ReceivedCloudValue;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x760")]
		public Gradient DefaultCloudBaseColor;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x768")]
		private GradientColorKey[] CloudColorKeySwitcher;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x770")]
		public Gradient DefaultFogBaseColor;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x778")]
		private GradientColorKey[] FogColorKeySwitcher;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x780")]
		public Gradient DefaultCloudLightColor;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x788")]
		private GradientColorKey[] CloudLightColorKeySwitcher;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x790")]
		public Gradient DefaultFogLightColor;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x798")]
		private GradientColorKey[] FogLightColorKeySwitcher;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A0")]
		public Gradient DefaultAmbientSkyLightBaseColor;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A8")]
		private GradientColorKey[] AmbientSkyLightColorKeySwitcher;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B0")]
		public Gradient DefaultAmbientEquatorLightBaseColor;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B8")]
		private GradientColorKey[] AmbientEquatorLightColorKeySwitcher;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C0")]
		public Gradient DefaultAmbientGroundLightBaseColor;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C8")]
		private GradientColorKey[] AmbientGroundLightColorKeySwitcher;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D0")]
		public Gradient DefaultSunLightBaseColor;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D8")]
		private GradientColorKey[] SunLightColorKeySwitcher;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E0")]
		public List<ParticleSystem> ParticleSystemList;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E8")]
		public List<ParticleSystem> WeatherEffectsList;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F0")]
		public List<ParticleSystem> AdditionalParticleSystemList;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7F8")]
		public List<ParticleSystem> AdditionalWeatherEffectsList;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x800")]
		public List<AudioSource> WeatherSoundsList;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x808")]
		public ParticleSystem CurrentParticleSystem;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x810")]
		public float m_ParticleAmount;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x818")]
		public ParticleSystem AdditionalCurrentParticleSystem;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x820")]
		public bool UniStormInitialized;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x828")]
		public AudioMixer UniStormAudioMixer;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x830")]
		public bool UpgradedToCurrentVersion;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x838")]
		public VRState VRStateData;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x840")]
		private float m_DetailStrength;

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x997120", Offset = "0x997120", VA = "0x997120")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x9976EC", Offset = "0x9976EC", VA = "0x9976EC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x997830", Offset = "0x997830", VA = "0x997830")]
		[IteratorStateMachine(typeof(<InitializeDelay>d__357))]
		private IEnumerator InitializeDelay()
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x99989C", Offset = "0x99989C", VA = "0x99989C")]
		private Gradient UpdateGradient(Gradient Reference, Gradient GradientToUpdate)
		{
			return null;
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x9978A4", Offset = "0x9978A4", VA = "0x9978A4")]
		private void InitializeUniStorm()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x99D7A4", Offset = "0x99D7A4", VA = "0x99D7A4")]
		[IteratorStateMachine(typeof(<InitializeCloudShadows>d__360))]
		private IEnumerator InitializeCloudShadows()
		{
			return null;
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x997304", Offset = "0x997304", VA = "0x997304")]
		private void InitializeCloudSettings()
		{
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x99B84C", Offset = "0x99B84C", VA = "0x99B84C")]
		public void InitializeWeather(bool UseWeatherConditions)
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x99E2DC", Offset = "0x99E2DC", VA = "0x99E2DC")]
		private void FollowPlayer()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x999998", Offset = "0x999998", VA = "0x999998")]
		private void CalculatePrecipiation()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x99A8F4", Offset = "0x99A8F4", VA = "0x99A8F4")]
		private void CreateUniStormFog()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x99E6EC", Offset = "0x99E6EC", VA = "0x99E6EC")]
		private void CheckSinglePass()
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x999FB4", Offset = "0x999FB4", VA = "0x999FB4")]
		private void CreateMoon()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x999B60", Offset = "0x999B60", VA = "0x999B60")]
		private void CreateSun()
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x99E9DC", Offset = "0x99E9DC", VA = "0x99E9DC")]
		private void CreatSunShafts()
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x99E770", Offset = "0x99E770", VA = "0x99E770")]
		private void CreateMoonShafts()
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x99A510", Offset = "0x99A510", VA = "0x99A510")]
		private void CreateLightning()
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x99EBB0", Offset = "0x99EBB0", VA = "0x99EBB0")]
		public void ChangeWeatherUI()
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x99D818", Offset = "0x99D818", VA = "0x99D818")]
		private void CreateUniStormMenu()
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x99E594", Offset = "0x99E594", VA = "0x99E594")]
		public DateTime GetDate()
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x9A051C", Offset = "0x9A051C", VA = "0x9A051C")]
		public void MoveSun()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x99D72C", Offset = "0x99D72C", VA = "0x99D72C")]
		private void UpdateCelestialLightShafts()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x9A04B4", Offset = "0x9A04B4", VA = "0x9A04B4")]
		public void ToggleUniStormMenu()
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x9A065C", Offset = "0x9A065C", VA = "0x9A065C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x99DE68", Offset = "0x99DE68", VA = "0x99DE68")]
		private float GetCloudLevel(bool InstantFade)
		{
			return default(float);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x9A140C", Offset = "0x9A140C", VA = "0x9A140C")]
		public void CalculateTimeSlider()
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x9A1448", Offset = "0x9A1448", VA = "0x9A1448")]
		public void UpdateTimeSlider()
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x9A0BC8", Offset = "0x9A0BC8", VA = "0x9A0BC8")]
		private void HourlyUpdate()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x99D5A4", Offset = "0x99D5A4", VA = "0x99D5A4")]
		private void CalculateTimeOfDay()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x99D65C", Offset = "0x99D65C", VA = "0x99D65C")]
		public void CalculateSeason()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x9A0E8C", Offset = "0x9A0E8C", VA = "0x9A0E8C")]
		private void PlayTimeOfDaySound()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x9A10B4", Offset = "0x9A10B4", VA = "0x9A10B4")]
		private void PlayTimeOfDayMusic()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x9A1474", Offset = "0x9A1474", VA = "0x9A1474")]
		private void CheckWeather()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x9A16C0", Offset = "0x9A16C0", VA = "0x9A16C0")]
		public void ChangeWeather(WeatherType Weather)
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x99EC24", Offset = "0x99EC24", VA = "0x99EC24")]
		private void TransitionWeather()
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x99B6F8", Offset = "0x99B6F8", VA = "0x99B6F8")]
		private void CalculateMoonPhase()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x99ABB8", Offset = "0x99ABB8", VA = "0x99ABB8")]
		private void UpdateColors()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x9A0AF8", Offset = "0x9A0AF8", VA = "0x9A0AF8")]
		private void CalculateDays()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x99E364", Offset = "0x99E364", VA = "0x99E364")]
		private void CalculateMonths()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x99A468", Offset = "0x99A468", VA = "0x99A468")]
		public void GenerateWeather()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x9A2310", Offset = "0x9A2310", VA = "0x9A2310")]
		public void CheckGeneratedWeather()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x9A1CF0", Offset = "0x9A1CF0", VA = "0x9A1CF0")]
		[IteratorStateMachine(typeof(<SunColorFadeSequence>d__396))]
		private IEnumerator SunColorFadeSequence(float TransitionTime, float MaxValue)
		{
			return null;
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x9A1C34", Offset = "0x9A1C34", VA = "0x9A1C34")]
		[IteratorStateMachine(typeof(<ColorFadeSequence>d__397))]
		private IEnumerator ColorFadeSequence(float TransitionTime, float MaxValue, Gradient FogGradientColor, Gradient CloudGradientColor)
		{
			return null;
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x9A16E0", Offset = "0x9A16E0", VA = "0x9A16E0")]
		[IteratorStateMachine(typeof(<CloudFadeSequence>d__398))]
		private IEnumerator CloudFadeSequence(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x9A1D78", Offset = "0x9A1D78", VA = "0x9A1D78")]
		[IteratorStateMachine(typeof(<StormyCloudsSequence>d__399))]
		private IEnumerator StormyCloudsSequence(float TransitionTime, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x9A1A60", Offset = "0x9A1A60", VA = "0x9A1A60")]
		[IteratorStateMachine(typeof(<FogFadeSequence>d__400))]
		private IEnumerator FogFadeSequence(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x9A193C", Offset = "0x9A193C", VA = "0x9A193C")]
		[IteratorStateMachine(typeof(<WindFadeSequence>d__401))]
		private IEnumerator WindFadeSequence(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x9A1AFC", Offset = "0x9A1AFC", VA = "0x9A1AFC")]
		[IteratorStateMachine(typeof(<SunFadeSequence>d__402))]
		private IEnumerator SunFadeSequence(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x9A1B98", Offset = "0x9A1B98", VA = "0x9A1B98")]
		[IteratorStateMachine(typeof(<MoonFadeSequence>d__403))]
		private IEnumerator MoonFadeSequence(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x9A12EC", Offset = "0x9A12EC", VA = "0x9A12EC")]
		[IteratorStateMachine(typeof(<MostlyCloudyAdjustment>d__404))]
		private IEnumerator MostlyCloudyAdjustment(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x9A177C", Offset = "0x9A177C", VA = "0x9A177C")]
		[IteratorStateMachine(typeof(<CloudHeightSequence>d__405))]
		private IEnumerator CloudHeightSequence(float TransitionTime, float MaxValue)
		{
			return null;
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x9A1384", Offset = "0x9A1384", VA = "0x9A1384")]
		[IteratorStateMachine(typeof(<CloudTallnessSequence>d__406))]
		private IEnumerator CloudTallnessSequence(float TransitionTime, float MaxValue)
		{
			return null;
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x9A2100", Offset = "0x9A2100", VA = "0x9A2100")]
		[IteratorStateMachine(typeof(<ParticleFadeSequence>d__407))]
		private IEnumerator ParticleFadeSequence(float TransitionTime, float MaxValue, ParticleSystem EffectToFade, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x9A21B0", Offset = "0x9A21B0", VA = "0x9A21B0")]
		[IteratorStateMachine(typeof(<AdditionalParticleFadeSequence>d__408))]
		private IEnumerator AdditionalParticleFadeSequence(float TransitionTime, float MaxValue, ParticleSystem AdditionalEffectToFade, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x9A2260", Offset = "0x9A2260", VA = "0x9A2260")]
		[IteratorStateMachine(typeof(<SoundFadeSequence>d__409))]
		private IEnumerator SoundFadeSequence(float TransitionTime, float MaxValue, AudioSource SourceToFade, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x9A1FC8", Offset = "0x9A1FC8", VA = "0x9A1FC8")]
		[IteratorStateMachine(typeof(<RainShaderFadeSequence>d__410))]
		private IEnumerator RainShaderFadeSequence(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x9A2064", Offset = "0x9A2064", VA = "0x9A2064")]
		[IteratorStateMachine(typeof(<SnowShaderFadeSequence>d__411))]
		private IEnumerator SnowShaderFadeSequence(float TransitionTime, float MaxValue, bool FadeOut)
		{
			return null;
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x9A1548", Offset = "0x9A1548", VA = "0x9A1548")]
		[IteratorStateMachine(typeof(<AuroraShaderFadeSequence>d__412))]
		private IEnumerator AuroraShaderFadeSequence(float TransitionTime, float MaxValue, Color InnerColor, Color OuterColor)
		{
			return null;
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x9A1804", Offset = "0x9A1804", VA = "0x9A1804")]
		[IteratorStateMachine(typeof(<CloudProfileSequence>d__413))]
		private IEnumerator CloudProfileSequence(float TransitionTime, float MaxEdgeSoftness, float MaxBaseSoftness, float MaxDetailStrength, float MaxDensity, float MaxCoverageBias, float MaxDetailScale)
		{
			return null;
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x9A18B4", Offset = "0x9A18B4", VA = "0x9A18B4")]
		[IteratorStateMachine(typeof(<CloudShadowIntensitySequence>d__414))]
		private IEnumerator CloudShadowIntensitySequence(float TransitionTime, float MaxValue)
		{
			return null;
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x9A1E10", Offset = "0x9A1E10", VA = "0x9A1E10")]
		[IteratorStateMachine(typeof(<SunAttenuationIntensitySequence>d__415))]
		private IEnumerator SunAttenuationIntensitySequence(float TransitionTime, float MaxValue)
		{
			return null;
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x9A1620", Offset = "0x9A1620", VA = "0x9A1620")]
		[IteratorStateMachine(typeof(<MusicFadeSequence>d__416))]
		private IEnumerator MusicFadeSequence(float TransitionTime, AudioClip NewMusicClip)
		{
			return null;
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x9A1F30", Offset = "0x9A1F30", VA = "0x9A1F30")]
		[IteratorStateMachine(typeof(<AtmosphericFogFadeSequence>d__417))]
		private IEnumerator AtmosphericFogFadeSequence(float TransitionTime, float ShaderMaxValue, float CloudMaxValue)
		{
			return null;
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x9A19D8", Offset = "0x9A19D8", VA = "0x9A19D8")]
		[IteratorStateMachine(typeof(<FogLightFalloffSequence>d__418))]
		private IEnumerator FogLightFalloffSequence(float TransitionTime, float MaxValue)
		{
			return null;
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x9A1E98", Offset = "0x9A1E98", VA = "0x9A1E98")]
		[IteratorStateMachine(typeof(<SunHeightSequence>d__419))]
		private IEnumerator SunHeightSequence(float TransitionTime, float OpaqueValue, float TransparentValue)
		{
			return null;
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x9A2538", Offset = "0x9A2538", VA = "0x9A2538")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x9A2730", Offset = "0x9A2730", VA = "0x9A2730")]
		public UniStormSystem()
		{
		}
	}
	[Token(Token = "0x200017C")]
	[CreateAssetMenu(fileName = "New Weather Type", menuName = "UniStorm/New Weather Type")]
	public class WeatherType : ScriptableObject
	{
		[Token(Token = "0x200017D")]
		public enum SeasonEnum
		{
			[Token(Token = "0x4000A48")]
			All,
			[Token(Token = "0x4000A49")]
			Spring,
			[Token(Token = "0x4000A4A")]
			Summer,
			[Token(Token = "0x4000A4B")]
			Fall,
			[Token(Token = "0x4000A4C")]
			Winter
		}

		[Token(Token = "0x200017E")]
		public enum CloudLevelEnum
		{
			[Token(Token = "0x4000A4E")]
			Clear,
			[Token(Token = "0x4000A4F")]
			MostlyClear,
			[Token(Token = "0x4000A50")]
			PartyCloudy,
			[Token(Token = "0x4000A51")]
			MostlyCloudy,
			[Token(Token = "0x4000A52")]
			Cloudy,
			[Token(Token = "0x4000A53")]
			DontChange
		}

		[Token(Token = "0x200017F")]
		public enum TemperatureTypeEnum
		{
			[Token(Token = "0x4000A55")]
			BelowFreezing,
			[Token(Token = "0x4000A56")]
			AboveFreezing,
			[Token(Token = "0x4000A57")]
			Both
		}

		[Token(Token = "0x2000180")]
		public enum ShaderControlEnum
		{
			[Token(Token = "0x4000A59")]
			Rain,
			[Token(Token = "0x4000A5A")]
			Snow,
			[Token(Token = "0x4000A5B")]
			None
		}

		[Token(Token = "0x2000181")]
		public enum Yes_No
		{
			[Token(Token = "0x4000A5D")]
			Yes,
			[Token(Token = "0x4000A5E")]
			No
		}

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string WeatherTypeName;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CloudProfile CloudProfileComponent;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float SunIntensity;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float CloudShadowIntensity;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MoonIntensity;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Yes_No UseAuroras;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float AuroraIntensity;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color AuroraOuterColor;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color AuroraInnerColor;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int MinimumFogLevel;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int MaximumFogLevel;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float FogDensity;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float FogLightFalloff;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float FogHeight;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float CameraFogHeight;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Yes_No OverrideFogColor;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Yes_No OverrideCameraFogHeight;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Gradient FogColor;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float WindSpeedLevel;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float WindBendingLevel;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float WindIntensity;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public ParticleSystem WeatherEffect;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int ParticleEffectAmount;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Vector3 ParticleEffectVector;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ParticleSystem AdditionalWeatherEffect;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int AdditionalParticleEffectAmount;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector3 AdditionalParticleEffectVector;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float WeatherVolume;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AudioClip WeatherSound;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Yes_No PrecipitationWeatherType;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public Yes_No UseWeatherSound;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Yes_No UseWeatherEffect;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public Yes_No UseAdditionalWeatherEffect;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Yes_No SpecialWeatherType;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public SeasonEnum Season;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public int CloudHeight;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public CloudLevelEnum CloudLevel;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public TemperatureTypeEnum TemperatureType;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public ShaderControlEnum ShaderControl;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Yes_No OverrideCloudColor;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Gradient CloudColor;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Yes_No UseLightning;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public Yes_No CustomizeWeatherIcon;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Yes_No WaitForCloudLevel;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Texture WeatherIcon;

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x9B45F4", Offset = "0x9B45F4", VA = "0x9B45F4")]
		public void CreateWeatherSound()
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x9B4998", Offset = "0x9B4998", VA = "0x9B4998")]
		public void CreateWeatherEffect()
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x9B4CA4", Offset = "0x9B4CA4", VA = "0x9B4CA4")]
		public void CreateAdditionalWeatherEffect()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x9B4F80", Offset = "0x9B4F80", VA = "0x9B4F80")]
		public WeatherType()
		{
		}
	}
}
namespace UniStorm.CharacterController
{
	[Token(Token = "0x2000182")]
	public class Pause : MonoBehaviour
	{
		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool Paused;

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x9B509C", Offset = "0x9B509C", VA = "0x9B509C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x9B5164", Offset = "0x9B5164", VA = "0x9B5164")]
		public Pause()
		{
		}
	}
	[Token(Token = "0x2000183")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(AudioSource))]
	[RequireComponent(typeof(CapsuleCollider))]
	public class UniStormCharacterController : MonoBehaviour
	{
		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float walkSpeed;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float runSpeed;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float gravity;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxVelocityChange;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool canJump;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float jumpHeight;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool onlyJumpOnUntagged;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioClip footStepSound;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float runFootStepSeconds;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float walkFootStepSeconds;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float footStepTimer;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool grounded;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float rayDistance;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastHit hit;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Rigidbody rb;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 velocity;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 velocityChange;

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x9B516C", Offset = "0x9B516C", VA = "0x9B516C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x9B5228", Offset = "0x9B5228", VA = "0x9B5228")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x9B5648", Offset = "0x9B5648", VA = "0x9B5648")]
		private void OnCollisionStay(Collision col)
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x9B5630", Offset = "0x9B5630", VA = "0x9B5630")]
		private float CalculateJumpVerticalwalkSpeed()
		{
			return default(float);
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x9B56CC", Offset = "0x9B56CC", VA = "0x9B56CC")]
		public UniStormCharacterController()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class UniStormMouseLook : MonoBehaviour
	{
		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2 _mouseAbsolute;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 _smoothMouse;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 clampInDegrees;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool lockCursor;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 sensitivity;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 smoothing;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector2 targetDirection;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector2 targetCharacterDirection;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject characterBody;

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x9B5700", Offset = "0x9B5700", VA = "0x9B5700")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x9B57EC", Offset = "0x9B57EC", VA = "0x9B57EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x9B5D44", Offset = "0x9B5D44", VA = "0x9B5D44")]
		public UniStormMouseLook()
		{
		}
	}
}
namespace UniStorm.Example
{
	[Token(Token = "0x2000185")]
	public class DemoUIController : MonoBehaviour
	{
		[Token(Token = "0x2000187")]
		[CompilerGenerated]
		private sealed class <WaitForInilialization>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DemoUIController <>4__this;

			[Token(Token = "0x17000105")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B5A")]
				[Address(RVA = "0x9B7524", Offset = "0x9B7524", VA = "0x9B7524", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000106")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B5C")]
				[Address(RVA = "0x9B756C", Offset = "0x9B756C", VA = "0x9B756C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B57")]
			[Address(RVA = "0x9B62A8", Offset = "0x9B62A8", VA = "0x9B62A8")]
			[DebuggerHidden]
			public <WaitForInilialization>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000B58")]
			[Address(RVA = "0x9B73C4", Offset = "0x9B73C4", VA = "0x9B73C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B59")]
			[Address(RVA = "0x9B73C8", Offset = "0x9B73C8", VA = "0x9B73C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0x9B752C", Offset = "0x9B752C", VA = "0x9B752C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dropdown QualityDropdown;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dropdown CloudTypeDropdown;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Slider TimeSlider;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject WeatherButtonGameObject;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject TimeSliderGameObject;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dropdown WeatherDropdown;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject DemoMenu;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Toggle SunShaftsToggle;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Toggle ShadowsToggle;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Toggle CloudShadowsToggle;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Toggle TimeFlowToggle;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Text Temperature;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text Time;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Text CloudLevelText;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject SliderMenu;

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x9B5D64", Offset = "0x9B5D64", VA = "0x9B5D64")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x9B6234", Offset = "0x9B6234", VA = "0x9B6234")]
		[IteratorStateMachine(typeof(<WaitForInilialization>d__16))]
		private IEnumerator WaitForInilialization()
		{
			return null;
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x9B62D0", Offset = "0x9B62D0", VA = "0x9B62D0")]
		public void ControlSunShaftsState()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x9B6334", Offset = "0x9B6334", VA = "0x9B6334")]
		public void ControlTimeFlowState()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x9B63AC", Offset = "0x9B63AC", VA = "0x9B63AC")]
		public void UpdateTime()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x9B6488", Offset = "0x9B6488", VA = "0x9B6488")]
		public void UpdateTemperature()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x9B6524", Offset = "0x9B6524", VA = "0x9B6524")]
		public void UpdateTimeSlider()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x9B6590", Offset = "0x9B6590", VA = "0x9B6590")]
		public void ControlShadowsState()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x9B66A8", Offset = "0x9B66A8", VA = "0x9B66A8")]
		public void ControlCloudShadowsState()
		{
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x9B6730", Offset = "0x9B6730", VA = "0x9B6730")]
		public void EnableObject(GameObject ObjectToEnable)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x9B674C", Offset = "0x9B674C", VA = "0x9B674C")]
		public void DisableObject(GameObject ObjectToDisable)
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x9B6768", Offset = "0x9B6768", VA = "0x9B6768")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x9B67EC", Offset = "0x9B67EC", VA = "0x9B67EC")]
		public void QuitButton()
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x9B67F4", Offset = "0x9B67F4", VA = "0x9B67F4")]
		public void ChangeWeatherUI()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x9B68A8", Offset = "0x9B68A8", VA = "0x9B68A8")]
		public void CalculateTimeSlider()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x9B6918", Offset = "0x9B6918", VA = "0x9B6918")]
		public void UpdateCloudQuality()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x9B697C", Offset = "0x9B697C", VA = "0x9B697C")]
		public void UpdateCloudType()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x9B69E0", Offset = "0x9B69E0", VA = "0x9B69E0")]
		private void CreateUniStormMenu()
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x9B72C8", Offset = "0x9B72C8", VA = "0x9B72C8")]
		public DemoUIController()
		{
		}
	}
	[Token(Token = "0x2000188")]
	public class UniStormUIDisplay : MonoBehaviour
	{
		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text UniStormTime;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text UniStormTemperature;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RawImage UniStormWeatherIcon;

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x9B7574", Offset = "0x9B7574", VA = "0x9B7574")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x9B76E0", Offset = "0x9B76E0", VA = "0x9B76E0")]
		public UniStormUIDisplay()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class DisableWeatherByTrigger : MonoBehaviour
	{
		[Token(Token = "0x200018A")]
		public enum ControlEffectsEnum
		{
			[Token(Token = "0x4000A96")]
			Disable,
			[Token(Token = "0x4000A97")]
			Enable
		}

		[Token(Token = "0x200018B")]
		public enum ControlSoundsEnum
		{
			[Token(Token = "0x4000A99")]
			Yes,
			[Token(Token = "0x4000A9A")]
			No
		}

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string TriggerTag;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControlEffectsEnum ControlEffects;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ControlSoundsEnum ControlSounds;

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x9B76E8", Offset = "0x9B76E8", VA = "0x9B76E8")]
		private void OnTriggerEnter(Collider C)
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x9B7804", Offset = "0x9B7804", VA = "0x9B7804")]
		public DisableWeatherByTrigger()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public class LightningEvent : MonoBehaviour
	{
		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x9B785C", Offset = "0x9B785C", VA = "0x9B785C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x9B790C", Offset = "0x9B790C", VA = "0x9B790C")]
		private void TestLightningEvent()
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x9B79F8", Offset = "0x9B79F8", VA = "0x9B79F8")]
		public LightningEvent()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public class SaveAndLoad : MonoBehaviour
	{
		[Token(Token = "0x200018E")]
		public enum SaveTypeEnum
		{
			[Token(Token = "0x4000AA3")]
			Manual,
			[Token(Token = "0x4000AA4")]
			Auto
		}

		[Token(Token = "0x200018F")]
		public enum LoadOnStartEnum
		{
			[Token(Token = "0x4000AA6")]
			Enabled,
			[Token(Token = "0x4000AA7")]
			Disabled
		}

		[Token(Token = "0x2000190")]
		public enum DebugLogsEnum
		{
			[Token(Token = "0x4000AA9")]
			Enabled,
			[Token(Token = "0x4000AAA")]
			Disabled
		}

		[Token(Token = "0x2000192")]
		[CompilerGenerated]
		private sealed class <LoadAutoSavedData>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SaveAndLoad <>4__this;

			[Token(Token = "0x17000107")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B71")]
				[Address(RVA = "0x9B8A88", Offset = "0x9B8A88", VA = "0x9B8A88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000108")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B73")]
				[Address(RVA = "0x9B8AD0", Offset = "0x9B8AD0", VA = "0x9B8AD0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0x9B8824", Offset = "0x9B8824", VA = "0x9B8824")]
			[DebuggerHidden]
			public <LoadAutoSavedData>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0x9B8928", Offset = "0x9B8928", VA = "0x9B8928", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B70")]
			[Address(RVA = "0x9B892C", Offset = "0x9B892C", VA = "0x9B892C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B72")]
			[Address(RVA = "0x9B8A90", Offset = "0x9B8A90", VA = "0x9B8A90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SaveTypeEnum SaveType;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LoadOnStartEnum LoadOnStart;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugLogsEnum DebugLogs;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int AutoSaveSeconds;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform PlayerTransform;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform PlayerCamera;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_AutoSaveTimer;

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x9B7A04", Offset = "0x9B7A04", VA = "0x9B7A04")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x9B7AF0", Offset = "0x9B7AF0", VA = "0x9B7AF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x9B836C", Offset = "0x9B836C", VA = "0x9B836C")]
		private void LoadData()
		{
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x9B7A7C", Offset = "0x9B7A7C", VA = "0x9B7A7C")]
		[IteratorStateMachine(typeof(<LoadAutoSavedData>d__13))]
		private IEnumerator LoadAutoSavedData()
		{
			return null;
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x9B8700", Offset = "0x9B8700", VA = "0x9B8700")]
		public static Vector3 StringToVector3(string StringVector)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x9B884C", Offset = "0x9B884C", VA = "0x9B884C")]
		public SaveAndLoad()
		{
		}
	}
	[Token(Token = "0x2000193")]
	public class TurnOffLight : MonoBehaviour
	{
		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light LightSource;

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x9B8AD8", Offset = "0x9B8AD8", VA = "0x9B8AD8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x9B8B7C", Offset = "0x9B8B7C", VA = "0x9B8B7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x9B8BE8", Offset = "0x9B8BE8", VA = "0x9B8BE8")]
		public TurnOffLight()
		{
		}
	}
	[Token(Token = "0x2000194")]
	public class UniStormCTSController : MonoBehaviour
	{
		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x9B8BF0", Offset = "0x9B8BF0", VA = "0x9B8BF0")]
		public UniStormCTSController()
		{
		}
	}
	[Token(Token = "0x2000195")]
	public class WeatherTypeByTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WeatherType m_WeatherType;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string TriggerTag;

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x9B8BF8", Offset = "0x9B8BF8", VA = "0x9B8BF8")]
		private void OnTriggerEnter(Collider C)
		{
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x9B8C84", Offset = "0x9B8C84", VA = "0x9B8C84")]
		public WeatherTypeByTrigger()
		{
		}
	}
}
namespace UniStorm.Effects
{
	[Token(Token = "0x2000196")]
	public class ScreenSpaceCloudShadows : MonoBehaviour
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float Fade;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public RenderTexture CloudShadowTexture;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Color ShadowColor;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float CloudTextureScale;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[HideInInspector]
		public float BottomThreshold;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		[HideInInspector]
		public float TopThreshold;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float ShadowIntensity;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Material ScreenSpaceShadowsMaterial;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public Vector3 ShadowDirection;

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x9B8CDC", Offset = "0x9B8CDC", VA = "0x9B8CDC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x9B8DB8", Offset = "0x9B8DB8", VA = "0x9B8DB8")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x9B9094", Offset = "0x9B9094", VA = "0x9B9094")]
		public ScreenSpaceCloudShadows()
		{
		}
	}
	[Token(Token = "0x2000197")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class UniStormAtmosphericFog : UniStormPostEffectsBase
	{
		[Token(Token = "0x2000198")]
		public enum DitheringControl
		{
			[Token(Token = "0x4000AD4")]
			Enabled,
			[Token(Token = "0x4000AD5")]
			Disabled
		}

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Texture2D NoiseTexture;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public DitheringControl Dither;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Light SunSource;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Light MoonSource;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public bool distanceFog;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool useRadialDistance;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		[HideInInspector]
		public bool heightFog;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float height;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float heightDensity;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float startDistance;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Shader fogShader;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Material fogMaterial;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public Color SunColor;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Color MoonColor;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Color TopColor;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Color BottomColor;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 1f)]
		public float BlendHeight;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Range(0f, 1f)]
		[HideInInspector]
		public float FogGradientHeight;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 3f)]
		public float SunIntensity;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 3f)]
		[HideInInspector]
		public float MoonIntensity;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Range(1f, 60f)]
		public float SunFalloffIntensity;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float SunControl;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		public float MoonControl;

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x9B90C4", Offset = "0x9B90C4", VA = "0x9B90C4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x9B972C", Offset = "0x9B972C", VA = "0x9B972C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x9BA418", Offset = "0x9BA418", VA = "0x9BA418")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x9BA578", Offset = "0x9BA578", VA = "0x9BA578")]
		public UniStormAtmosphericFog()
		{
		}
	}
	[Token(Token = "0x2000199")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class UniStormPostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Material> createdMaterials;

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x9B9218", Offset = "0x9B9218", VA = "0x9B9218")]
		public Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x9BA674", Offset = "0x9BA674", VA = "0x9BA674")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x9BA8AC", Offset = "0x9BA8AC", VA = "0x9BA8AC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x9BA8B8", Offset = "0x9BA8B8", VA = "0x9BA8B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x9BA8BC", Offset = "0x9BA8BC", VA = "0x9BA8BC")]
		private void RemoveCreatedMaterials()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x9BA99C", Offset = "0x9BA99C", VA = "0x9BA99C")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x9BA9A4", Offset = "0x9BA9A4", VA = "0x9BA9A4", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x9BAA64", Offset = "0x9BAA64", VA = "0x9BAA64")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x9B912C", Offset = "0x9B912C", VA = "0x9B912C")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x9BAA70", Offset = "0x9BAA70", VA = "0x9BAA70")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x9BAAC8", Offset = "0x9BAAC8", VA = "0x9BAAC8")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x9B9674", Offset = "0x9B9674", VA = "0x9B9674")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x9BAAD0", Offset = "0x9BAAD0", VA = "0x9BAAD0")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x9BA654", Offset = "0x9BA654", VA = "0x9BA654")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x9BAD54", Offset = "0x9BAD54", VA = "0x9BAD54")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x9BA5C0", Offset = "0x9BA5C0", VA = "0x9BA5C0")]
		public UniStormPostEffectsBase()
		{
		}
	}
	[Token(Token = "0x200019A")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class UniStormSunShafts : UniStormPostEffectsBase
	{
		[Token(Token = "0x200019B")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4000AE9")]
			Low,
			[Token(Token = "0x4000AEA")]
			Normal,
			[Token(Token = "0x4000AEB")]
			High
		}

		[Token(Token = "0x200019C")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4000AED")]
			Screen,
			[Token(Token = "0x4000AEE")]
			Add
		}

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform sunTransform;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int radialBlurIterations;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color sunColor;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Color sunThreshold;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float sunShaftIntensity;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float maxRadius;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useDepthTexture;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader sunShaftsShader;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader simpleClearShader;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x9BB0CC", Offset = "0x9BB0CC", VA = "0x9BB0CC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x9BB158", Offset = "0x9BB158", VA = "0x9BB158")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x9BB814", Offset = "0x9BB814", VA = "0x9BB814")]
		public UniStormSunShafts()
		{
		}
	}
}
namespace UniStorm.Utility
{
	[Token(Token = "0x200019D")]
	public class GenerateNoise
	{
		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string baseFolder;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static ComputeShader _noiseCompute;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Texture2D _baseNoiseTexturePrecomputed;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static RenderTexture _baseNoiseTexture;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Texture3D _detailNoiseTexture;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Texture2D _curlNoiseTexture;

		[Token(Token = "0x17000109")]
		public static ComputeShader noiseCompute
		{
			[Token(Token = "0x6000B94")]
			[Address(RVA = "0x9BB858", Offset = "0x9BB858", VA = "0x9BB858")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		public static Texture baseNoiseTexture
		{
			[Token(Token = "0x6000B95")]
			[Address(RVA = "0x9BB968", Offset = "0x9BB968", VA = "0x9BB968")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010B")]
		public static Texture3D detailNoiseTexture
		{
			[Token(Token = "0x6000B96")]
			[Address(RVA = "0x9BBDF8", Offset = "0x9BBDF8", VA = "0x9BBDF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		public static Texture2D curlNoiseTexture
		{
			[Token(Token = "0x6000B97")]
			[Address(RVA = "0x9BBF5C", Offset = "0x9BBF5C", VA = "0x9BBF5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x9BBA98", Offset = "0x9BBA98", VA = "0x9BBA98")]
		public static void GenerateBaseCloudNoise()
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x9BBEBC", Offset = "0x9BBEBC", VA = "0x9BBEBC")]
		public static void GenerateCloudDetailNoise()
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x9BC020", Offset = "0x9BC020", VA = "0x9BC020")]
		public static void GenerateCloudCurlNoise()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x9BC0C0", Offset = "0x9BC0C0", VA = "0x9BC0C0")]
		public GenerateNoise()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class WNG
	{
		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float brightness;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float contrast;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int octaves;

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x9BC170", Offset = "0x9BC170", VA = "0x9BC170")]
		private static int wrap(int n, int period)
		{
			return default(int);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x9BC188", Offset = "0x9BC188", VA = "0x9BC188")]
		public static float Noise(Vector3 pos, int period, int seed)
		{
			return default(float);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x9BC54C", Offset = "0x9BC54C", VA = "0x9BC54C")]
		public static float OctaveNoise(Vector3 pos, int octaves, int period, int seed = 0, float persistence = 0.5f)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x9BC724", Offset = "0x9BC724", VA = "0x9BC724")]
		public static float ModifiedOctaveNoise(Vector3 pos, int octaves, int period, int seed = 0, float persistence = 0.5f, float fade = 0f)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x9BC8FC", Offset = "0x9BC8FC", VA = "0x9BC8FC")]
		public WNG()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class PNG
	{
		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int octaves;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] perm;

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x9BC958", Offset = "0x9BC958", VA = "0x9BC958")]
		private static float Fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x9BC984", Offset = "0x9BC984", VA = "0x9BC984")]
		private static float Lerp(float t, float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x9BC994", Offset = "0x9BC994", VA = "0x9BC994")]
		private static float Grad(int hash, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x9BC9DC", Offset = "0x9BC9DC", VA = "0x9BC9DC")]
		private static int wrap(int n, int period)
		{
			return default(int);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x9BC9F4", Offset = "0x9BC9F4", VA = "0x9BC9F4")]
		public static float Noise(Vector3 pos, int period)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x9BD070", Offset = "0x9BD070", VA = "0x9BD070")]
		public static float OctaveNoise(Vector3 pos, int period, int octaves, float persistence = 0.5f)
		{
			return default(float);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x9BD254", Offset = "0x9BD254", VA = "0x9BD254")]
		public PNG()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class ProceduralHemispherePolarUVs : MonoBehaviour
	{
		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh _hemisphere;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Mesh _hemisphereInv;

		[Token(Token = "0x1700010D")]
		public static Mesh hemisphere
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0x9BD304", Offset = "0x9BD304", VA = "0x9BD304")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		public static Mesh hemisphereInv
		{
			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0x9BDCD4", Offset = "0x9BDCD4", VA = "0x9BDCD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x9BD394", Offset = "0x9BD394", VA = "0x9BD394")]
		private static void CreateProceduralHemisphereWithUVs()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x9BDD64", Offset = "0x9BDD64", VA = "0x9BDD64")]
		public ProceduralHemispherePolarUVs()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class UniStormClouds : MonoBehaviour
	{
		[Token(Token = "0x20001A2")]
		[HideInInspector]
		public enum CloudPerformance
		{
			[Token(Token = "0x4000B1B")]
			Low,
			[Token(Token = "0x4000B1C")]
			Medium,
			[Token(Token = "0x4000B1D")]
			High,
			[Token(Token = "0x4000B1E")]
			Ultra
		}

		[Token(Token = "0x20001A3")]
		[HideInInspector]
		public enum CloudShadowsType
		{
			[Token(Token = "0x4000B20")]
			Off,
			[Token(Token = "0x4000B21")]
			Simulated,
			[Token(Token = "0x4000B22")]
			RealTime
		}

		[Token(Token = "0x20001A4")]
		[HideInInspector]
		public enum CloudType
		{
			[Token(Token = "0x4000B24")]
			TwoD,
			[Token(Token = "0x4000B25")]
			Volumetric
		}

		[Token(Token = "0x20001A6")]
		[CompilerGenerated]
		private sealed class <InitializeClouds>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UniStormClouds <>4__this;

			[Token(Token = "0x1700010F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BBF")]
				[Address(RVA = "0x9BFD54", Offset = "0x9BFD54", VA = "0x9BFD54", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000110")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BC1")]
				[Address(RVA = "0x9BFD9C", Offset = "0x9BFD9C", VA = "0x9BFD9C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0x9BE4F0", Offset = "0x9BE4F0", VA = "0x9BE4F0")]
			[DebuggerHidden]
			public <InitializeClouds>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0x9BFB8C", Offset = "0x9BFB8C", VA = "0x9BFB8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0x9BFB90", Offset = "0x9BFB90", VA = "0x9BFB90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0x9BFD5C", Offset = "0x9BFD5C", VA = "0x9BFD5C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Material skyMaterial;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Material cloudsMaterial;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Material shadowsMaterial;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public Material shadowsBuildingMaterial;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Transform cloudShadows;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Light sun;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Transform moon;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		private int[] presetResolutions;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		private string[] keywordsA;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public CloudShadowsType CloudShadowsTypeRef;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		private string[] keywordsB;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public CloudType cloudType;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public CloudPerformance performance;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public int CloudShadowResolutionValue;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[HideInInspector]
		[Range(0f, 1f)]
		public float cloudTransparency;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 6f)]
		[HideInInspector]
		public int shadowBlurIterations;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public CommandBuffer cloudsCommBuff;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int frameCount;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] haltonSequence;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int[,] offset;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int[,] bayerOffsets;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int frameIndex;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int haltonSequenceIndex;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int fullBufferIndex;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RenderTexture[] fullCloudsBuffer;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RenderTexture lowResCloudsBuffer;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RenderTexture[] cloudShadowsBuffer;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		public RenderTexture PublicCloudShadowTexture;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float baseCloudOffset;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float detailCloudOffset;

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x9BDD6C", Offset = "0x9BDD6C", VA = "0x9BDD6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x9BDDF0", Offset = "0x9BDDF0", VA = "0x9BDDF0")]
		private void GenerateInitialNoise()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x9BE15C", Offset = "0x9BE15C", VA = "0x9BE15C")]
		[IteratorStateMachine(typeof(<InitializeClouds>d__23))]
		private IEnumerator InitializeClouds()
		{
			return null;
		}

		[Token(Token = "0x6000BB2")]
		public void EnsureArray<T>(ref T[] array, int size, [Optional] T initialValue)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x9BE518", Offset = "0x9BE518", VA = "0x9BE518")]
		public bool EnsureRenderTarget(ref RenderTexture rt, int width, int height, RenderTextureFormat format, FilterMode filterMode, string name, int depthBits = 0, int antiAliasing = 1)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x9BE1D0", Offset = "0x9BE1D0", VA = "0x9BE1D0")]
		public void SetCloudDetails(CloudPerformance performance, CloudType cloudType, CloudShadowsType cloudShadowsType, bool forceRecreateTextures = false)
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x9BE70C", Offset = "0x9BE70C", VA = "0x9BE70C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x9BE778", Offset = "0x9BE778", VA = "0x9BE778")]
		private void CloudsUpdate()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x9BF614", Offset = "0x9BF614", VA = "0x9BF614")]
		public UniStormClouds()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public class DespawnObjectUniStorm : MonoBehaviour
	{
		[Token(Token = "0x20001A8")]
		[CompilerGenerated]
		private sealed class <Despawn>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DespawnObjectUniStorm <>4__this;

			[Token(Token = "0x17000111")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BC8")]
				[Address(RVA = "0x9C0088", Offset = "0x9C0088", VA = "0x9C0088", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000112")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BCA")]
				[Address(RVA = "0x9C00D0", Offset = "0x9C00D0", VA = "0x9C00D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0x9BFE38", Offset = "0x9BFE38", VA = "0x9BFE38")]
			[DebuggerHidden]
			public <Despawn>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0x9BFE70", Offset = "0x9BFE70", VA = "0x9BFE70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0x9BFE74", Offset = "0x9BFE74", VA = "0x9BFE74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0x9C0090", Offset = "0x9C0090", VA = "0x9C0090", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Seconds;

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x9BFDA4", Offset = "0x9BFDA4", VA = "0x9BFDA4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x9BFDC4", Offset = "0x9BFDC4", VA = "0x9BFDC4")]
		[IteratorStateMachine(typeof(<Despawn>d__2))]
		private IEnumerator Despawn()
		{
			return null;
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x9BFE60", Offset = "0x9BFE60", VA = "0x9BFE60")]
		public DespawnObjectUniStorm()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public class FadeLightEffect : MonoBehaviour
	{
		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve LightCurve;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeMultipler;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Light LightSource;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float Timer;

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x9C00D8", Offset = "0x9C00D8", VA = "0x9C00D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x9C00E0", Offset = "0x9C00E0", VA = "0x9C00E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x9C01CC", Offset = "0x9C01CC", VA = "0x9C01CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x9C0224", Offset = "0x9C0224", VA = "0x9C0224")]
		public FadeLightEffect()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class FadeParticleEffect : MonoBehaviour
	{
		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve ParticleCurve;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeMultipler;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ParticleSystem ParticleSource;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float EmissionAmount;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float Timer;

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x9C026C", Offset = "0x9C026C", VA = "0x9C026C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x9C032C", Offset = "0x9C032C", VA = "0x9C032C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x9C0468", Offset = "0x9C0468", VA = "0x9C0468")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x9C0500", Offset = "0x9C0500", VA = "0x9C0500")]
		public FadeParticleEffect()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class FireLight : MonoBehaviour
	{
		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Rnd;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool m_Burning;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light m_Light;

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x9C0548", Offset = "0x9C0548", VA = "0x9C0548")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x9C05B8", Offset = "0x9C05B8", VA = "0x9C05B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x9C07A0", Offset = "0x9C07A0", VA = "0x9C07A0")]
		public void Extinguish()
		{
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x9C07C8", Offset = "0x9C07C8", VA = "0x9C07C8")]
		public FireLight()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class LightningStrike : MonoBehaviour
	{
		[Token(Token = "0x20001AD")]
		[CompilerGenerated]
		private sealed class <ResetDelay>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningStrike <>4__this;

			[Token(Token = "0x17000113")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BDF")]
				[Address(RVA = "0x9C146C", Offset = "0x9C146C", VA = "0x9C146C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000114")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BE1")]
				[Address(RVA = "0x9C14B4", Offset = "0x9C14B4", VA = "0x9C14B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x9C125C", Offset = "0x9C125C", VA = "0x9C125C")]
			[DebuggerHidden]
			public <ResetDelay>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x9C1398", Offset = "0x9C1398", VA = "0x9C1398", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x9C139C", Offset = "0x9C139C", VA = "0x9C139C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0x9C1474", Offset = "0x9C1474", VA = "0x9C1474", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public GameObject LightningStrikeFire;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public GameObject LightningStrikeEffect;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Vector3 HitPosition;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public bool PlayerDetected;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int GroundStrikeOdds;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int RaycastDistance;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool LightningGenerated;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public LayerMask DetectionLayerMask;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public bool ObjectDetected;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public string FireTag;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public List<string> LightningFireTags;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public GameObject HitObject;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public string PlayerTag;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public int EmeraldAIRagdollForce;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public int EmeraldAILightningDamage;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public bool EmeraldAIAgentDetected;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public GameObject HitAgent;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public string EmeraldAITag;

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x9C07D8", Offset = "0x9C07D8", VA = "0x9C07D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x9C09B4", Offset = "0x9C09B4", VA = "0x9C09B4")]
		private void OnTriggerEnter(Collider C)
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x9C0C1C", Offset = "0x9C0C1C", VA = "0x9C0C1C")]
		public void CreateLightningStrike()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x9C11E8", Offset = "0x9C11E8", VA = "0x9C11E8")]
		[IteratorStateMachine(typeof(<ResetDelay>d__21))]
		private IEnumerator ResetDelay()
		{
			return null;
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x9C1284", Offset = "0x9C1284", VA = "0x9C1284")]
		public LightningStrike()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public class LightningSystem : MonoBehaviour
	{
		[Token(Token = "0x20001AF")]
		[CompilerGenerated]
		private sealed class <DrawLightning>d__40 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningSystem <>4__this;

			[Token(Token = "0x17000115")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BED")]
				[Address(RVA = "0x9C35A4", Offset = "0x9C35A4", VA = "0x9C35A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000116")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BEF")]
				[Address(RVA = "0x9C35EC", Offset = "0x9C35EC", VA = "0x9C35EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0x9C2D08", Offset = "0x9C2D08", VA = "0x9C2D08")]
			[DebuggerHidden]
			public <DrawLightning>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0x9C2F1C", Offset = "0x9C2F1C", VA = "0x9C2F1C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0x9C2F20", Offset = "0x9C2F20", VA = "0x9C2F20", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0x9C35AC", Offset = "0x9C35AC", VA = "0x9C35AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001B0")]
		[CompilerGenerated]
		private sealed class <ThunderSoundDelay>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LightningSystem <>4__this;

			[Token(Token = "0x17000117")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000BF3")]
				[Address(RVA = "0x9C3830", Offset = "0x9C3830", VA = "0x9C3830", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000118")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000BF5")]
				[Address(RVA = "0x9C3878", Offset = "0x9C3878", VA = "0x9C3878", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0x9C2DA4", Offset = "0x9C2DA4", VA = "0x9C2DA4")]
			[DebuggerHidden]
			public <ThunderSoundDelay>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0x9C35F4", Offset = "0x9C35F4", VA = "0x9C35F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000BF2")]
			[Address(RVA = "0x9C35F8", Offset = "0x9C35F8", VA = "0x9C35F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000BF4")]
			[Address(RVA = "0x9C3838", Offset = "0x9C3838", VA = "0x9C3838", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int LightningGenerationDistance;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public LineRenderer LightningBolt;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		private List<Vector3> LightningPoints;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public bool AnimateLight;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float LightningLightIntensityMin;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float LightningLightIntensityMax;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public float LightningLightIntensity;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Light LightningLightSource;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float LightningCurveMultipler;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public AnimationCurve LightningCurve;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public float m_FlashSeconds;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public Transform StartingPoint;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public Transform EndingPoint;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public int m_Segments;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[HideInInspector]
		public float Speed;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public float Scale;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public Transform PlayerTransform;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public List<AudioClip> ThunderSounds;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public int BoltIntensity;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[HideInInspector]
		public float LightningSpeed;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public float StaticIntensity;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioSource AS;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Coroutine LightningCoroutine;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float m_FlashTimer;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float m_GenerateTimer;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float m_WidthTimer;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Material m_LightningMaterial;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Color m_LightningColor;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float PointIndex;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 m_LightningCurve;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool Generated;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float LightningTime;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Perlin noise;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float CurrentIndex;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Vector3 Final;

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x9C14BC", Offset = "0x9C14BC", VA = "0x9C14BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x9C1CFC", Offset = "0x9C1CFC", VA = "0x9C1CFC")]
		private void SetupLightningLight()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x9C1D7C", Offset = "0x9C1D7C", VA = "0x9C1D7C")]
		private void GeneratePoints()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x9C2A78", Offset = "0x9C2A78", VA = "0x9C2A78")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x9C2BC8", Offset = "0x9C2BC8", VA = "0x9C2BC8")]
		public void GenerateLightning()
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x9C2C94", Offset = "0x9C2C94", VA = "0x9C2C94")]
		[IteratorStateMachine(typeof(<DrawLightning>d__40))]
		private IEnumerator DrawLightning()
		{
			return null;
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x9C2D30", Offset = "0x9C2D30", VA = "0x9C2D30")]
		[IteratorStateMachine(typeof(<ThunderSoundDelay>d__41))]
		private IEnumerator ThunderSoundDelay()
		{
			return null;
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x9C2DCC", Offset = "0x9C2DCC", VA = "0x9C2DCC")]
		public LightningSystem()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public class Perlin
	{
		[Token(Token = "0x4000B79")]
		private const int B = 256;

		[Token(Token = "0x4000B7A")]
		private const int BM = 255;

		[Token(Token = "0x4000B7B")]
		private const int N = 4096;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int[] p;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[,] g3;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float[,] g2;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] g1;

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x9C3880", Offset = "0x9C3880", VA = "0x9C3880")]
		private float s_curve(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x9C3898", Offset = "0x9C3898", VA = "0x9C3898")]
		private float lerp(float t, float a, float b)
		{
			return default(float);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x9C38A8", Offset = "0x9C38A8", VA = "0x9C38A8")]
		private void setup(float value, out int b0, out int b1, out float r0, out float r1)
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x9C38FC", Offset = "0x9C38FC", VA = "0x9C38FC")]
		private float at2(float rx, float ry, float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x9C390C", Offset = "0x9C390C", VA = "0x9C390C")]
		private float at3(float rx, float ry, float rz, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x9C3924", Offset = "0x9C3924", VA = "0x9C3924")]
		public float Noise(float arg)
		{
			return default(float);
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x9C39F8", Offset = "0x9C39F8", VA = "0x9C39F8")]
		public float Noise(float x, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x9C26F4", Offset = "0x9C26F4", VA = "0x9C26F4")]
		public float Noise(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x9C3BDC", Offset = "0x9C3BDC", VA = "0x9C3BDC")]
		private void normalize2(ref float x, ref float y)
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x9C3C74", Offset = "0x9C3C74", VA = "0x9C3C74")]
		private void normalize3(ref float x, ref float y, ref float z)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x9C2230", Offset = "0x9C2230", VA = "0x9C2230")]
		public Perlin()
		{
		}
	}
	[Token(Token = "0x20001B2")]
	public static class UniStormPool
	{
		[Token(Token = "0x20001B3")]
		private class Pool
		{
			[Token(Token = "0x4000B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int nextId;

			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Stack<GameObject> inactive;

			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private GameObject prefab;

			[Token(Token = "0x6000C05")]
			[Address(RVA = "0x9C3ECC", Offset = "0x9C3ECC", VA = "0x9C3ECC")]
			public Pool(GameObject prefab, int initialQty)
			{
			}

			[Token(Token = "0x6000C06")]
			[Address(RVA = "0x9C413C", Offset = "0x9C413C", VA = "0x9C413C")]
			public GameObject Spawn(Vector3 pos, Quaternion rot)
			{
				return null;
			}

			[Token(Token = "0x6000C07")]
			[Address(RVA = "0x9C43C8", Offset = "0x9C43C8", VA = "0x9C43C8")]
			public void Despawn(GameObject obj)
			{
			}
		}

		[Token(Token = "0x20001B4")]
		private class PoolMember : MonoBehaviour
		{
			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Pool myPool;

			[Token(Token = "0x6000C08")]
			[Address(RVA = "0x9C4434", Offset = "0x9C4434", VA = "0x9C4434")]
			public PoolMember()
			{
			}
		}

		[Token(Token = "0x4000B80")]
		private const int DEFAULT_POOL_SIZE = 3;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<GameObject, Pool> pools;

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x9C3D30", Offset = "0x9C3D30", VA = "0x9C3D30")]
		private static void Init([Optional] GameObject prefab, int qty = 3)
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x9C3F80", Offset = "0x9C3F80", VA = "0x9C3F80")]
		public static void Preload(GameObject prefab, int qty = 1)
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x9C110C", Offset = "0x9C110C", VA = "0x9C110C")]
		public static GameObject Spawn(GameObject prefab, Vector3 pos, Quaternion rot)
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x9BFF30", Offset = "0x9BFF30", VA = "0x9BFF30")]
		public static void Despawn(GameObject obj)
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class UniStormProfile : ScriptableObject
	{
		[Token(Token = "0x20001B6")]
		public enum FogTypeEnum
		{
			[Token(Token = "0x4000BA8")]
			UnistormFog,
			[Token(Token = "0x4000BA9")]
			UnityFog
		}

		[Token(Token = "0x20001B7")]
		public enum FogModeEnum
		{
			[Token(Token = "0x4000BAB")]
			Exponential,
			[Token(Token = "0x4000BAC")]
			ExponentialSquared
		}

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Gradient SunColor;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gradient StormySunColor;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[GradientUsage(true)]
		public Gradient SunSpotColor;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient MoonColor;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Gradient SkyColor;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Gradient AmbientSkyLightColor;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Gradient StormyAmbientSkyLightColor;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Gradient AmbientEquatorLightColor;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Gradient StormyAmbientEquatorLightColor;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Gradient AmbientGroundLightColor;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Gradient StormyAmbientGroundLightColor;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Gradient StarLightColor;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Gradient FogColor;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Gradient FogStormyColor;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Gradient CloudLightColor;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Gradient StormyCloudLightColor;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Gradient FogLightColor;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Gradient StormyFogLightColor;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Gradient CloudBaseColor;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Gradient CloudStormyBaseColor;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Gradient SkyTintColor;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AnimationCurve SunIntensityCurve;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AnimationCurve MoonIntensityCurve;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public AnimationCurve AtmosphereThickness;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AnimationCurve SunAttenuationCurve;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AnimationCurve EnvironmentReflections;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AnimationCurve AmbientIntensityCurve;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public AnimationCurve SunAtmosphericFogIntensity;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public AnimationCurve MoonAtmosphericFogIntensity;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public AnimationCurve SunControlCurve;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public AnimationCurve MoonObjectFade;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public FogTypeEnum FogType;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public FogModeEnum FogMode;

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x9C443C", Offset = "0x9C443C", VA = "0x9C443C")]
		public UniStormProfile()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public class VRState : ScriptableObject
	{
		[Token(Token = "0x20001B9")]
		public enum StereoRenderingModes
		{
			[Token(Token = "0x4000BB0")]
			SinglePass,
			[Token(Token = "0x4000BB1")]
			MultiPass
		}

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool VREnabled;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public StereoRenderingModes StereoRenderingMode;

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x9C45F8", Offset = "0x9C45F8", VA = "0x9C45F8")]
		public VRState()
		{
		}
	}
}
namespace UnityFBXExporter
{
	[Token(Token = "0x20001BA")]
	public class FBXExporter
	{
		[Token(Token = "0x17000119")]
		public static string VersionInformation
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0x9C69EC", Offset = "0x9C69EC", VA = "0x9C69EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x9C4600", Offset = "0x9C4600", VA = "0x9C4600")]
		public static bool ExportGameObjToFBX(GameObject gameObj, string newPath, bool copyMaterials = false, bool copyTextures = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x9C6A2C", Offset = "0x9C6A2C", VA = "0x9C6A2C")]
		public static long GetRandomFBXId()
		{
			return default(long);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x9C4740", Offset = "0x9C4740", VA = "0x9C4740")]
		public static string MeshToString(GameObject gameObj, string newPath, bool copyMaterials = false, bool copyTextures = false)
		{
			return null;
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x9C473C", Offset = "0x9C473C", VA = "0x9C473C")]
		public static void CopyComplexMaterialsToPath(GameObject gameObj, string path, bool copyTextures, string texturesFolder = "/Textures", string materialsFolder = "/Materials")
		{
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x9C6AB0", Offset = "0x9C6AB0", VA = "0x9C6AB0")]
		public static bool CopyAndRenameAsset(UnityEngine.Object obj, string newName, string newFolderPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x9C6AB8", Offset = "0x9C6AB8", VA = "0x9C6AB8")]
		private static string GetFileName(string path)
		{
			return null;
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x9C6AFC", Offset = "0x9C6AFC", VA = "0x9C6AFC")]
		private static Material CopyTexturesAndAssignCopiesToMaterial(Material material, string newPath)
		{
			return null;
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x9C6E40", Offset = "0x9C6E40", VA = "0x9C6E40")]
		private static void GetTextureUpdateMaterialWithPath(Material material, string textureShaderName, string newPath)
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x9C6F38", Offset = "0x9C6F38", VA = "0x9C6F38")]
		public static UnityEngine.Object CopyAndRenameAssetReturnObject(UnityEngine.Object obj, string newName, string newFolderPath)
		{
			return null;
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x9C6F40", Offset = "0x9C6F40", VA = "0x9C6F40")]
		public FBXExporter()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public class FBXUnityMaterialGetter
	{
		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x9C7F48", Offset = "0x9C7F48", VA = "0x9C7F48")]
		public static void GetAllMaterialsToString(GameObject gameObj, string newPath, bool copyMaterials, bool copyTextures, out Material[] materials, out string matObjects, out string connections)
		{
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x9C8B78", Offset = "0x9C8B78", VA = "0x9C8B78")]
		private static void SerializedTextures(GameObject gameObj, string newPath, Material material, string materialName, bool copyTextures, out string objects, out string connections)
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x9C8D94", Offset = "0x9C8D94", VA = "0x9C8D94")]
		private static bool SerializeOneTexture(GameObject gameObj, string newPath, Material material, string materialName, int materialId, bool copyTextures, string unityExtension, string textureType, out string objects, out string connections)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x9C8EE8", Offset = "0x9C8EE8", VA = "0x9C8EE8")]
		public FBXUnityMaterialGetter()
		{
		}
	}
	[Token(Token = "0x20001BC")]
	public class FBXUnityMeshGetter
	{
		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x9C8EF0", Offset = "0x9C8EF0", VA = "0x9C8EF0")]
		public static long GetMeshToString(GameObject gameObj, Material[] materials, ref StringBuilder objects, ref StringBuilder connections, [Optional] GameObject parentObject, long parentModelId = 0L)
		{
			return default(long);
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x9CBC10", Offset = "0x9CBC10", VA = "0x9CBC10")]
		public FBXUnityMeshGetter()
		{
		}
	}
}
namespace HighlightPlus
{
	[Token(Token = "0x20001BD")]
	public delegate bool OnObjectHighlightEvent(GameObject obj);
	[Token(Token = "0x20001BE")]
	public delegate bool OnRendererHighlightEvent(Renderer renderer);
	[Token(Token = "0x20001BF")]
	public delegate void OnTargetAnimatesEvent(ref Vector3 center, ref Quaternion rotation, ref Vector3 scale, float t);
	[Token(Token = "0x20001C0")]
	public enum NormalsOption
	{
		[Token(Token = "0x4000BB3")]
		Smooth,
		[Token(Token = "0x4000BB4")]
		PreserveOriginal,
		[Token(Token = "0x4000BB5")]
		Reorient,
		[Token(Token = "0x4000BB6")]
		Planar
	}
	[Token(Token = "0x20001C1")]
	public enum SeeThroughMode
	{
		[Token(Token = "0x4000BB8")]
		WhenHighlighted,
		[Token(Token = "0x4000BB9")]
		AlwaysWhenOccluded,
		[Token(Token = "0x4000BBA")]
		Never
	}
	[Token(Token = "0x20001C2")]
	public enum QualityLevel
	{
		[Token(Token = "0x4000BBC")]
		Fastest,
		[Token(Token = "0x4000BBD")]
		High,
		[Token(Token = "0x4000BBE")]
		Highest,
		[Token(Token = "0x4000BBF")]
		Medium
	}
	[Token(Token = "0x20001C3")]
	public static class QualityLevelExtensions
	{
		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x9CC11C", Offset = "0x9CC11C", VA = "0x9CC11C")]
		public static bool UsesMultipleOffsets(this QualityLevel qualityLevel)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C4")]
	public enum TargetOptions
	{
		[Token(Token = "0x4000BC1")]
		Children,
		[Token(Token = "0x4000BC2")]
		OnlyThisObject,
		[Token(Token = "0x4000BC3")]
		RootToChildren,
		[Token(Token = "0x4000BC4")]
		LayerInScene,
		[Token(Token = "0x4000BC5")]
		LayerInChildren,
		[Token(Token = "0x4000BC6")]
		Scripting
	}
	[Token(Token = "0x20001C5")]
	public enum Visibility
	{
		[Token(Token = "0x4000BC8")]
		Normal,
		[Token(Token = "0x4000BC9")]
		AlwaysOnTop,
		[Token(Token = "0x4000BCA")]
		OnlyWhenOccluded
	}
	[Token(Token = "0x20001C6")]
	public enum GlowBlendMode
	{
		[Token(Token = "0x4000BCC")]
		Additive,
		[Token(Token = "0x4000BCD")]
		AlphaBlending
	}
	[Serializable]
	[Token(Token = "0x20001C7")]
	public struct GlowPassData
	{
		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float offset;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float alpha;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Color color;
	}
	[Token(Token = "0x20001C8")]
	[HelpURL("https://www.dropbox.com/s/v9qgn68ydblqz8x/Documentation.pdf?dl=0")]
	[ExecuteInEditMode]
	public class HighlightEffect : MonoBehaviour
	{
		[Token(Token = "0x20001C9")]
		private struct ModelMaterials
		{
			[Token(Token = "0x4000CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool render;

			[Token(Token = "0x4000CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool bakedTransform;

			[Token(Token = "0x4000CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 currentPosition;

			[Token(Token = "0x4000CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 currentRotation;

			[Token(Token = "0x4000CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 currentScale;

			[Token(Token = "0x4000CA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool renderWasVisibleDuringSetup;

			[Token(Token = "0x4000CA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Mesh mesh;

			[Token(Token = "0x4000CA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Mesh originalMesh;

			[Token(Token = "0x4000CA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Renderer renderer;

			[Token(Token = "0x4000CAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool isSkinnedMesh;

			[Token(Token = "0x4000CAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public NormalsOption normalsOption;

			[Token(Token = "0x4000CAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Material[] fxMatMask;

			[Token(Token = "0x4000CAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Material[] fxMatSolidColor;

			[Token(Token = "0x4000CAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Material[] fxMatSeeThroughInner;

			[Token(Token = "0x4000CAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Material[] fxMatSeeThroughBorder;

			[Token(Token = "0x4000CB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Material[] fxMatOverlay;

			[Token(Token = "0x4000CB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Material[] fxMatInnerGlow;

			[Token(Token = "0x4000CB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Matrix4x4 renderingMatrix;

			[Token(Token = "0x4000CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public bool isCombined;

			[Token(Token = "0x17000123")]
			public bool preserveOriginalMesh
			{
				[Token(Token = "0x6000C7C")]
				[Address(RVA = "0x91F0B0", Offset = "0x91F0B0", VA = "0x91F0B0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0x91F0D0", Offset = "0x91F0D0", VA = "0x91F0D0")]
			public void Init()
			{
			}
		}

		[Token(Token = "0x20001CA")]
		private enum FadingState
		{
			[Token(Token = "0x4000CB5")]
			FadingOut = -1,
			[Token(Token = "0x4000CB6")]
			NoFading,
			[Token(Token = "0x4000CB7")]
			FadingIn
		}

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The current profile (optional). A profile let you store Highlight Plus settings and apply those settings easily to many objects. You can also load a profile and apply its settings at runtime, using the ProfileLoad() method of the Highlight Effect component.")]
		public HighlightProfile profile;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If enabled, settings from the profile will be applied to this component automatically when game starts or when any profile setting is updated.")]
		public bool profileSync;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If enabled, effects will be visible also when not in Play mode.")]
		public bool previewInEditor;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Which cameras can render the effect.")]
		public LayerMask camerasLayerMask;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Different options to specify which objects are affected by this Highlight Effect component.")]
		public TargetOptions effectGroup;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The layer that contains the affected objects by this effect when effectGroup is set to LayerMask.")]
		public LayerMask effectGroupLayer;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Only include objects whose names contains this text.")]
		public string effectNameFilter;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Combine meshes of all objects in this group affected by Highlight Effect reducing draw calls.")]
		public bool combineMeshes;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[Tooltip("The alpha threshold for transparent cutout objects. Pixels with alpha below this value will be discarded.")]
		public float alphaCutOff;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If back facing triangles are ignored.Backfaces triangles are not visible but you may set this property to false to force highlight effects to act on those triangles as well.")]
		public bool cullBackFaces;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("Show highlight effects even if the object is not visible. If this object or its children use GPU Instancing tools, the MeshRenderer can be disabled although the object is visible. In this case, this option is useful to enable highlighting.")]
		public bool ignoreObjectVisibility;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Tooltip("Support reflection probes. Enable only if you want the effects to be visible in reflections.")]
		public bool reflectionProbes;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
		[Tooltip("Enables GPU instancing. Reduces draw calls in outline and outer glow effects on platforms that support GPU instancing. Should be enabled by default.")]
		public bool GPUInstancing;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Enables depth buffer clipping. Only applies to outline or outer glow in High Quality mode.")]
		public bool depthClip;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Tooltip("Fades out effects based on distance to camera")]
		public bool cameraDistanceFade;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The closest distance particles can get to the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeNear;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The farthest distance particles can get away from the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeFar;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Normals handling option:\nPreserve original: use original mesh normals.\nSmooth: average normals to produce a smoother outline/glow mesh based effect.\nReorient: recomputes normals based on vertex direction to centroid.\nPlanar: same than reorient but renders outline and glow in an optimized way for 2D or planar meshes like quads or planes.")]
		public NormalsOption normalsOption;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Ignore highlighting on this object.")]
		public bool ignore;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[SerializeField]
		private bool _highlighted;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float fadeInDuration;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float fadeOutDuration;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool flipY;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Keeps the outline/glow size unaffected by object distance.")]
		public bool constantWidth;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Mask to include or exclude certain submeshes. By default, all submeshes are included.")]
		public int subMeshMask;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Intensity of the overlay effect. A value of 0 disables the overlay completely.")]
		[Range(0f, 1f)]
		public float overlay;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[ColorUsage(true, true)]
		public Color overlayColor;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float overlayAnimationSpeed;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float overlayMinIntensity;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Controls the blending or mix of the overlay color with the natural colors of the object.")]
		[Range(0f, 1f)]
		public float overlayBlending;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Optional overlay texture.")]
		public Texture2D overlayTexture;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float overlayTextureScale;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("Intensity of the outline. A value of 0 disables the outline completely.")]
		[Range(0f, 1f)]
		public float outline;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[ColorUsage(true, true)]
		public Color outlineColor;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float outlineWidth;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public QualityLevel outlineQuality;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Reduces the quality of the outline but improves performance a bit.")]
		[Range(1f, 8f)]
		public int outlineDownsampling;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Visibility outlineVisibility;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GlowBlendMode glowBlendMode;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool outlineOptimalBlit;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		public bool outlineBlitDebug;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		[Tooltip("If enabled, this object won't combine the outline with other objects.")]
		public bool outlineIndependent;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The intensity of the outer glow effect. A value of 0 disables the glow completely.")]
		[Range(0f, 5f)]
		public float glow;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float glowWidth;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public QualityLevel glowQuality;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Reduces the quality of the glow but improves performance a bit.")]
		[Range(1f, 8f)]
		public int glowDownsampling;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[ColorUsage(true, true)]
		public Color glowHQColor;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("When enabled, outer glow renders with dithering. When disabled, glow appears as a solid color.")]
		public bool glowDithering;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Seed for the dithering effect")]
		public float glowMagicNumber1;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Another seed for the dithering effect that combines with first seed to create different patterns")]
		public float glowMagicNumber2;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float glowAnimationSpeed;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Visibility glowVisibility;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("Performs a blit to screen only over the affected area, instead of a full-screen pass")]
		public bool glowOptimalBlit;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		public bool glowBlitDebug;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF6")]
		[Tooltip("Blends glow passes one after another. If this option is disabled, glow passes won't overlap (in this case, make sure the glow pass 1 has a smaller offset than pass 2, etc.)")]
		public bool glowBlendPasses;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[NonReorderable]
		public GlowPassData[] glowPasses;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("If enabled, glow effect will not use a stencil mask. This can be used to render the glow effect alone.")]
		public bool glowIgnoreMask;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Tooltip("The intensity of the inner glow effect. A value of 0 disables the glow completely.")]
		[Range(0f, 5f)]
		public float innerGlow;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Range(0f, 2f)]
		public float innerGlowWidth;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[ColorUsage(true, true)]
		public Color innerGlowColor;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public Visibility innerGlowVisibility;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Enables the targetFX effect. This effect draws an animated sprite over the object.")]
		public bool targetFX;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Texture2D targetFXTexture;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[ColorUsage(true, true)]
		public Color targetFXColor;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Transform targetFXCenter;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float targetFXRotationSpeed;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float targetFXInitialScale;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float targetFXEndScale;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[Tooltip("Makes target scale relative to object renderer bounds")]
		public bool targetFXScaleToRenderBounds;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x155")]
		[Tooltip("Places target FX sprite at the bottom of the highlighted object.")]
		public bool targetFXAlignToGround;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Tooltip("Fade out effect with altitude")]
		public float targetFXFadePower;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float targetFXGroundMaxDistance;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public LayerMask targetFXGroundLayerMask;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public float targetFXTransitionDuration;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Tooltip("The duration of the effect. A value of 0 will keep the target sprite on screen while object is highlighted.")]
		public float targetFXStayDuration;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public Visibility targetFXVisibility;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[Tooltip("See-through mode for this Highlight Effect component.")]
		public SeeThroughMode seeThrough;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[Tooltip("This mask setting let you specify which objects will be considered as occluders and cause the see-through effect for this Highlight Effect component. For example, you assign your walls to a different layer and specify that layer here, so only walls and not other objects, like ground or ceiling, will trigger the see-through effect.")]
		public LayerMask seeThroughOccluderMask;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[Tooltip("A multiplier for the occluder volume size which can be used to reduce the actual size of occluders when Highlight Effect checks if they're occluding this object.")]
		[Range(0.01f, 0.6f)]
		public float seeThroughOccluderThreshold;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		[Tooltip("Uses stencil buffers to ensure pixel-accurate occlusion test. If this option is disabled, only physics raycasting is used to test for occlusion.")]
		public bool seeThroughOccluderMaskAccurate;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[Tooltip("The interval of time between occlusion tests.")]
		public float seeThroughOccluderCheckInterval;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		[Tooltip("If enabled, occlusion test is performed for each children element. If disabled, the bounds of all children is combined and a single occlusion test is performed for the combined bounds.")]
		public bool seeThroughOccluderCheckIndividualObjects;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[Tooltip("Shows the see-through effect only if the occluder if at this 'offset' distance from the object.")]
		public float seeThroughDepthOffset;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[Tooltip("Hides the see-through effect if the occluder is further than this distance from the object (0 = infinite)")]
		public float seeThroughMaxDepth;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[Range(0f, 5f)]
		public float seeThroughIntensity;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		[Range(0f, 1f)]
		public float seeThroughTintAlpha;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[ColorUsage(true, true)]
		public Color seeThroughTintColor;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[Range(0f, 1f)]
		public float seeThroughNoise;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[Range(0f, 1f)]
		public float seeThroughBorder;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Color seeThroughBorderColor;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[Tooltip("Only display the border instead of the full see-through effect.")]
		public bool seeThroughBorderOnly;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float seeThroughBorderWidth;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[Tooltip("Renders see-through effect on overlapping objects in a sequence that's relative to the distance to the camera")]
		public bool seeThroughOrdered;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[HideInInspector]
		[SerializeField]
		private ModelMaterials[] rms;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[HideInInspector]
		[SerializeField]
		private int rmsCount;

		[NonSerialized]
		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public Transform target;

		[NonSerialized]
		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public float highlightStartTime;

		[NonSerialized]
		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public float targetFxStartTime;

		[NonSerialized]
		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public bool isSelected;

		[NonSerialized]
		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public HighlightProfile previousSettings;

		[Token(Token = "0x4000C39")]
		private const float TAU = 0.70711f;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material fxMatMask;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material fxMatSolidColor;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Material fxMatSeeThroughInner;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Material fxMatSeeThroughBorder;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Material fxMatOverlay;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Material fxMatClearStencil;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Material fxMatGlowRef;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Material fxMatInnerGlow;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Material fxMatOutlineRef;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Material fxMatTargetRef;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Material fxMatComposeGlowRef;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Material fxMatComposeOutlineRef;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static Material fxMatBlurGlowRef;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static Material fxMatBlurOutlineRef;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static Material fxMatSeeThroughMask;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Material _fxMatOutline;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Material _fxMatGlow;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Material _fxMatTarget;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Material _fxMatComposeGlow;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Material _fxMatComposeOutline;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Material _fxMatBlurGlow;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Material _fxMatBlurOutline;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static Vector4[] offsets;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private float fadeStartTime;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		private FadingState fading;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private CommandBuffer cbMask;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private CommandBuffer cbSeeThrough;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private CommandBuffer cbGlow;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private CommandBuffer cbOutline;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private CommandBuffer cbOverlay;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private CommandBuffer cbInnerGlow;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private CommandBuffer cbSmoothBlend;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int[] mipGlowBuffers;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private int[] mipOutlineBuffers;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private int glowRT;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private int outlineRT;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static Mesh quadMesh;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static Mesh cubeMesh;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private int sourceRT;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		private Matrix4x4 quadGlowMatrix;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		private Matrix4x4 quadOutlineMatrix;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private Vector3[] corners;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private RenderTextureDescriptor sourceDesc;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		private Color debugColor;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x384")]
		private Color blackColor;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
		private Visibility lastOutlineVisibility;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private bool requireUpdateMaterial;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x399")]
		private bool usingPipeline;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39C")]
		private float occlusionCheckLastTime;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private int occlusionRenderFrame;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A4")]
		private bool lastOcclusionTestResult;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A5")]
		private bool useGPUInstancing;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private MaterialPropertyBlock glowPropertyBlock;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private MaterialPropertyBlock outlinePropertyBlock;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static readonly List<Vector4> matDataDirection;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private static readonly List<Vector4> matDataGlow;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static readonly List<Vector4> matDataColor;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static Matrix4x4[] matrices;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly List<HighlightEffect> effects;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static bool customSorting;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private static int customSortingFrame;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private static Camera customSortingCamera;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private int skipThisFrame;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		private int outlineOffsetsMin;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private int outlineOffsetsMax;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private int glowOffsetsMin;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private int glowOffsetsMax;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private static CombineInstance[] combineInstances;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		private Matrix4x4 matrix4X4Identity;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40C")]
		private bool maskRequired;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private List<Renderer> tempRR;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private static List<Vector3> vertices;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private static List<Vector3> normals;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private static Vector3[] newNormals;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private static int[] matches;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private static readonly Dictionary<Vector3, int> vv;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private static readonly Dictionary<int, Mesh> smoothMeshes;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private static readonly Dictionary<int, Mesh> reorientedMeshes;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private static readonly Dictionary<int, Mesh> combinedMeshes;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private static readonly List<Material> rendererSharedMaterials;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private int combinedMeshesHashId;

		[Token(Token = "0x4000C8B")]
		private const int MAX_VERTEX_COUNT = 65535;

		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41C")]
		[Range(0f, 1f)]
		public float hitFxInitialIntensity;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		public HitFxMode hitFxMode;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
		public float hitFxFadeOutDuration;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		[ColorUsage(true, true)]
		public Color hitFxColor;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		public float hitFxRadius;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x43C")]
		private float hitInitialIntensity;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private float hitStartTime;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x444")]
		private float hitFadeOutDuration;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private Color hitColor;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private bool hitActive;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		private Vector3 hitPosition;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private float hitRadius;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private static readonly List<HighlightSeeThroughOccluder> occluders;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private static readonly Dictionary<Camera, int> occludersFrameCount;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private static CommandBuffer cbOccluder;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private static Material fxMatOccluder;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private static RaycastHit[] hits;

		[Token(Token = "0x4000C9D")]
		private const int MAX_OCCLUDER_HITS = 50;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private static RaycastHit[] occluderHits;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private readonly Dictionary<Camera, List<Renderer>> cachedOccludersPerCamera;

		[Token(Token = "0x1700011A")]
		public bool highlighted
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0x9CC12C", Offset = "0x9CC12C", VA = "0x9CC12C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x9CC134", Offset = "0x9CC134", VA = "0x9CC134")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public int includedObjectsCount
		{
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x9CC7DC", Offset = "0x9CC7DC", VA = "0x9CC7DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700011C")]
		private Material fxMatOutline
		{
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0x9CC804", Offset = "0x9CC804", VA = "0x9CC804")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		private Material fxMatGlow
		{
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0x9CC95C", Offset = "0x9CC95C", VA = "0x9CC95C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		private Material fxMatTarget
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0x9CCAB4", Offset = "0x9CCAB4", VA = "0x9CCAB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		private Material fxMatComposeGlow
		{
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0x9CCBE4", Offset = "0x9CCBE4", VA = "0x9CCBE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		private Material fxMatComposeOutline
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0x9CCD14", Offset = "0x9CCD14", VA = "0x9CCD14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000121")]
		private Material fxMatBlurGlow
		{
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0x9CCE44", Offset = "0x9CCE44", VA = "0x9CCE44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		private Material fxMatBlurOutline
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0x9CCF74", Offset = "0x9CCF74", VA = "0x9CCF74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000001")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x9CC2DC", Offset = "0x9CC2DC", VA = "0x9CC2DC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0x9CC37C", Offset = "0x9CC37C", VA = "0x9CC37C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000002")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0x9CC41C", Offset = "0x9CC41C", VA = "0x9CC41C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0x9CC4BC", Offset = "0x9CC4BC", VA = "0x9CC4BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000003")]
		public event OnRendererHighlightEvent OnRendererHighlightStart
		{
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0x9CC55C", Offset = "0x9CC55C", VA = "0x9CC55C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C30")]
			[Address(RVA = "0x9CC5FC", Offset = "0x9CC5FC", VA = "0x9CC5FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event OnTargetAnimatesEvent OnTargetAnimates
		{
			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x9CC69C", Offset = "0x9CC69C", VA = "0x9CC69C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0x9CC73C", Offset = "0x9CC73C", VA = "0x9CC73C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x9CC7E4", Offset = "0x9CC7E4", VA = "0x9CC7E4")]
		public void RestorePreviousHighlightEffectSettings()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x9CD0A4", Offset = "0x9CD0A4", VA = "0x9CD0A4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x9CE0A4", Offset = "0x9CE0A4", VA = "0x9CE0A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x9CFAE8", Offset = "0x9CFAE8", VA = "0x9CFAE8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x9CFAEC", Offset = "0x9CFAEC", VA = "0x9CFAEC")]
		private void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x9CFB74", Offset = "0x9CFB74", VA = "0x9CFB74")]
		private void DestroyMaterialArray(Material[] mm)
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x9CFBCC", Offset = "0x9CFBCC", VA = "0x9CFBCC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x9CFE78", Offset = "0x9CFE78", VA = "0x9CFE78")]
		public static void DrawEffectsNow([Optional] Camera cam)
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x9D0200", Offset = "0x9D0200", VA = "0x9D0200")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x9D0230", Offset = "0x9D0230", VA = "0x9D0230")]
		public void ProfileLoad(HighlightProfile profile)
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x9D02D4", Offset = "0x9D02D4", VA = "0x9D02D4")]
		public void ProfileReload()
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x9D035C", Offset = "0x9D035C", VA = "0x9D035C")]
		public void ProfileSaveChanges(HighlightProfile profile)
		{
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x9D03F0", Offset = "0x9D03F0", VA = "0x9D03F0")]
		public void ProfileSaveChanges()
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x9D0478", Offset = "0x9D0478", VA = "0x9D0478")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x9D0014", Offset = "0x9D0014", VA = "0x9D0014")]
		private void DoOnRenderObject(Camera cam)
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0x9D04A0", Offset = "0x9D04A0", VA = "0x9D04A0")]
		private void RenderEffect(Camera cam)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0x9D5F44", Offset = "0x9D5F44", VA = "0x9D5F44")]
		private void RenderMask(int k, Mesh mesh, bool alwaysOnTop)
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0x9D63A0", Offset = "0x9D63A0", VA = "0x9D63A0")]
		private void RenderSeeThroughClearStencil(int k, Mesh mesh)
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0x9D65B8", Offset = "0x9D65B8", VA = "0x9D65B8")]
		private void RenderSeeThroughMask(int k, Mesh mesh)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0x9D6838", Offset = "0x9D6838", VA = "0x9D6838")]
		private bool ComputeSmoothQuadMatrix(Camera cam, Bounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0x9D7E34", Offset = "0x9D7E34", VA = "0x9D7E34")]
		private void BuildMatrix(Camera cam, Vector3 scrMin, Vector3 scrMax, int border, ref Matrix4x4 quadMatrix)
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x9D6BF0", Offset = "0x9D6BF0", VA = "0x9D6BF0")]
		private void SmoothGlow(int rtWidth, int rtHeight)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x9D712C", Offset = "0x9D712C", VA = "0x9D712C")]
		private void SmoothOutline(int rtWidth, int rtHeight)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x9D7668", Offset = "0x9D7668", VA = "0x9D7668")]
		private void ComposeSmoothBlend(Visibility smoothGlowVisibility, Visibility smoothOutlineVisibility)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x9D8080", Offset = "0x9D8080", VA = "0x9D8080")]
		private void InitMaterial(ref Material material, string shaderName)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x9D8210", Offset = "0x9D8210", VA = "0x9D8210")]
		public void SetTarget(Transform transform)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x9D8368", Offset = "0x9D8368", VA = "0x9D8368")]
		public void SetTargets(Transform transform, Renderer[] renderers)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x9CC13C", Offset = "0x9CC13C", VA = "0x9CC13C")]
		public void SetHighlighted(bool state)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x9D82E0", Offset = "0x9D82E0", VA = "0x9D82E0")]
		private void ImmediateFadeOut()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x9CDCFC", Offset = "0x9CDCFC", VA = "0x9CDCFC")]
		private void SetupMaterial()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x9D841C", Offset = "0x9D841C", VA = "0x9D841C")]
		private void SetupMaterial(Renderer[] rr)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x9D8C0C", Offset = "0x9D8C0C", VA = "0x9D8C0C")]
		private Renderer[] FindRenderersWithLayerInScene(LayerMask layer)
		{
			return null;
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x9D8E44", Offset = "0x9D8E44", VA = "0x9D8E44")]
		private Renderer[] FindRenderersWithLayerInChildren(LayerMask layer)
		{
			return null;
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x9CD9F8", Offset = "0x9CD9F8", VA = "0x9CD9F8")]
		private void CheckGeometrySupportDependencies()
		{
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x9DA910", Offset = "0x9DA910", VA = "0x9DA910")]
		private void CheckRequiredCommandBuffers()
		{
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x9D9060", Offset = "0x9D9060", VA = "0x9D9060")]
		private void CheckCommandBuffers()
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x9D62C8", Offset = "0x9D62C8", VA = "0x9D62C8")]
		private void CheckBlurCommandBuffer()
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x9D92B8", Offset = "0x9D92B8", VA = "0x9D92B8")]
		private void Fork(Material mat, ref Material[] mats, Mesh mesh)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x9D5B1C", Offset = "0x9D5B1C", VA = "0x9D5B1C")]
		private void BakeTransform(int objIndex, bool duplicateMesh)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x9DAA68", Offset = "0x9DAA68", VA = "0x9DAA68")]
		public void UpdateMaterialProperties(bool forceNow = false)
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x9CE0A8", Offset = "0x9CE0A8", VA = "0x9CE0A8")]
		private void UpdateMaterialPropertiesNow()
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x9D6788", Offset = "0x9D6788", VA = "0x9D6788")]
		private float ComputeCameraDistanceFade(Vector3 position, Transform cameraTransform)
		{
			return default(float);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x9D8060", Offset = "0x9D8060", VA = "0x9D8060")]
		private int GetZTestValue(Visibility param)
		{
			return default(int);
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x9CD664", Offset = "0x9CD664", VA = "0x9CD664")]
		private void BuildQuad()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x9CD958", Offset = "0x9CD958", VA = "0x9CD958")]
		private void BuildCube()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x9DAAA0", Offset = "0x9DAAA0", VA = "0x9DAAA0")]
		public bool Includes(Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x9DAB6C", Offset = "0x9DAB6C", VA = "0x9DAB6C")]
		public void SetGlowColor(Color color)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x9D9A8C", Offset = "0x9D9A8C", VA = "0x9D9A8C")]
		private void AverageNormals(int objIndex)
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x9D947C", Offset = "0x9D947C", VA = "0x9D947C")]
		private void ReorientNormals(int objIndex)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x9DA3A8", Offset = "0x9DA3A8", VA = "0x9DA3A8")]
		private void CombineMeshes()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x9DABF0", Offset = "0x9DABF0", VA = "0x9DABF0")]
		public void HitFX()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x9DAC78", Offset = "0x9DAC78", VA = "0x9DAC78")]
		public void HitFX(Vector3 position)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x9DAC0C", Offset = "0x9DAC0C", VA = "0x9DAC0C")]
		public void HitFX(Color color, float fadeOutDuration, float initialIntensity = 1f)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x9DACC4", Offset = "0x9DACC4", VA = "0x9DACC4")]
		public void HitFX(Color color, float fadeOutDuration, float initialIntensity, Vector3 position, float radius)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x9DAD64", Offset = "0x9DAD64", VA = "0x9DAD64")]
		public void TargetFX()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x9DADBC", Offset = "0x9DADBC", VA = "0x9DADBC")]
		public bool IsSeeThroughOccluded(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x9DB318", Offset = "0x9DB318", VA = "0x9DB318")]
		public static void RegisterOccluder(HighlightSeeThroughOccluder occluder)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x9DB440", Offset = "0x9DB440", VA = "0x9DB440")]
		public static void UnregisterOccluder(HighlightSeeThroughOccluder occluder)
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x9D4398", Offset = "0x9D4398", VA = "0x9D4398")]
		public bool RenderSeeThroughOccluders(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x9D53DC", Offset = "0x9D53DC", VA = "0x9D53DC")]
		private bool CheckOcclusion(Camera cam)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C77")]
		private void AddWithoutRepetition<T>(List<T> target, List<T> source)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x9D48AC", Offset = "0x9D48AC", VA = "0x9D48AC")]
		private void CheckOcclusionAccurate(Camera cam)
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x9DB510", Offset = "0x9DB510", VA = "0x9DB510")]
		public List<Renderer> GetOccluders(Camera camera)
		{
			return null;
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x9DB57C", Offset = "0x9DB57C", VA = "0x9DB57C")]
		public HighlightEffect()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	public enum HitFxMode
	{
		[Token(Token = "0x4000CB9")]
		Overlay,
		[Token(Token = "0x4000CBA")]
		InnerGlow,
		[Token(Token = "0x4000CBB")]
		LocalHit
	}
	[Token(Token = "0x20001CC")]
	public delegate bool OnObjectSelectionEvent(GameObject obj);
	[Token(Token = "0x20001CD")]
	[RequireComponent(typeof(HighlightEffect))]
	[HelpURL("https://www.dropbox.com/s/v9qgn68ydblqz8x/Documentation.pdf?dl=0")]
	[DefaultExecutionOrder(100)]
	public class HighlightManager : MonoBehaviour
	{
		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enables highlight when pointer is over this object.")]
		public bool highlightOnHover;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask layerMask;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera raycastCamera;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RayCastSource raycastSource;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Minimum distance for target.")]
		public float minDistance;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum distance for target. 0 = infinity")]
		public float maxDistance;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Blocks interaction if pointer is over an UI element")]
		public bool respectUI;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("If the object will be selected by clicking with mouse or tapping on it.")]
		public bool selectOnClick;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Optional profile for objects selected by clicking on them")]
		public HighlightProfile selectedProfile;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Profile to use whtn object is selected and highlighted.")]
		public HighlightProfile selectedAndHighlightedProfile;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Automatically deselects other previously selected objects")]
		public bool singleSelection;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[Tooltip("Toggles selection on/off when clicking object")]
		public bool toggle;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HighlightEffect baseEffect;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private HighlightEffect currentEffect;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform currentObject;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly List<HighlightEffect> selectedObjects;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int lastTriggerTime;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static HighlightManager _instance;

		[Token(Token = "0x17000124")]
		public static HighlightManager instance
		{
			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0x91F7A4", Offset = "0x91F7A4", VA = "0x91F7A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000005")]
		public event OnObjectSelectionEvent OnObjectSelected
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0x91F2C4", Offset = "0x91F2C4", VA = "0x91F2C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0x91F360", Offset = "0x91F360", VA = "0x91F360")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000006")]
		public event OnObjectSelectionEvent OnObjectUnSelected
		{
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0x91F3FC", Offset = "0x91F3FC", VA = "0x91F3FC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C85")]
			[Address(RVA = "0x91F498", Offset = "0x91F498", VA = "0x91F498")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000007")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6000C86")]
			[Address(RVA = "0x91F534", Offset = "0x91F534", VA = "0x91F534")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C87")]
			[Address(RVA = "0x91F5D0", Offset = "0x91F5D0", VA = "0x91F5D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000008")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6000C88")]
			[Address(RVA = "0x91F66C", Offset = "0x91F66C", VA = "0x91F66C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C89")]
			[Address(RVA = "0x91F708", Offset = "0x91F708", VA = "0x91F708")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x91F8AC", Offset = "0x91F8AC", VA = "0x91F8AC")]
		[RuntimeInitializeOnLoadMethod]
		private void DomainReloadDisabledSupport()
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x91F950", Offset = "0x91F950", VA = "0x91F950")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x91FC64", Offset = "0x91FC64", VA = "0x91FC64")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x9201D0", Offset = "0x9201D0", VA = "0x9201D0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x920920", Offset = "0x920920", VA = "0x920920")]
		private EventSystem CreateEventSystem()
		{
			return null;
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x91FC80", Offset = "0x91FC80", VA = "0x91FC80")]
		private void SwitchesCollider(Transform newObject)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x921434", Offset = "0x921434", VA = "0x921434")]
		private bool CanInteract()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x920D64", Offset = "0x920D64", VA = "0x920D64")]
		private void ToggleSelection(Transform t, bool forceSelection)
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x921204", Offset = "0x921204", VA = "0x921204")]
		private void Highlight(bool state)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x91FB98", Offset = "0x91FB98", VA = "0x91FB98")]
		public static Camera GetCamera()
		{
			return null;
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x91FF2C", Offset = "0x91FF2C", VA = "0x91FF2C")]
		private void internal_DeselectAll()
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x921B4C", Offset = "0x921B4C", VA = "0x921B4C")]
		public static void DeselectAll()
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x921E34", Offset = "0x921E34", VA = "0x921E34")]
		public void SelectObject(Transform t)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x921E3C", Offset = "0x921E3C", VA = "0x921E3C")]
		public void ToggleObject(Transform t)
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x921E44", Offset = "0x921E44", VA = "0x921E44")]
		public void UnselectObject(Transform t)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x921FF8", Offset = "0x921FF8", VA = "0x921FF8")]
		public HighlightManager()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	[HelpURL("https://www.dropbox.com/s/v9qgn68ydblqz8x/Documentation.pdf?dl=0")]
	[CreateAssetMenu(menuName = "Highlight Plus Profile", fileName = "Highlight Plus Profile", order = 100)]
	public class HighlightProfile : ScriptableObject
	{
		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Different options to specify which objects are affected by this Highlight Effect component.")]
		public TargetOptions effectGroup;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The layer that contains the affected objects by this effect when effectGroup is set to LayerMask.")]
		public LayerMask effectGroupLayer;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Only include objects whose names contains this text.")]
		public string effectNameFilter;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Combine meshes of all objects in this group affected by Highlight Effect reducing draw calls.")]
		public bool combineMeshes;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The alpha threshold for transparent cutout objects. Pixels with alpha below this value will be discarded.")]
		[Range(0f, 1f)]
		public float alphaCutOff;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If back facing triangles are ignored.Backfaces triangles are not visible but you may set this property to false to force highlight effects to act on those triangles as well.")]
		public bool cullBackFaces;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool depthClip;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Normals handling option:\nPreserve original: use original mesh normals.\nSmooth: average normals to produce a smoother outline/glow mesh based effect.\nReorient: recomputes normals based on vertex direction to centroid.")]
		public NormalsOption normalsOption;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float fadeInDuration;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float fadeOutDuration;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Fades out effects based on distance to camera")]
		public bool cameraDistanceFade;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The closest distance particles can get to the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeNear;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The farthest distance particles can get away from the camera before they fade from the camera’s view.")]
		public float cameraDistanceFadeFar;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Keeps the outline/glow size unaffected by object distance.")]
		public bool constantWidth;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Intensity of the overlay effect. A value of 0 disables the overlay completely.")]
		[Range(0f, 1f)]
		public float overlay;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[ColorUsage(true, true)]
		public Color overlayColor;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float overlayAnimationSpeed;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float overlayMinIntensity;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Controls the blending or mix of the overlay color with the natural colors of the object.")]
		[Range(0f, 1f)]
		public float overlayBlending;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Optional overlay texture.")]
		public Texture2D overlayTexture;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float overlayTextureScale;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		[Tooltip("Intensity of the outline. A value of 0 disables the outline completely.")]
		public float outline;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[ColorUsage(true, true)]
		public Color outlineColor;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float outlineWidth;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public QualityLevel outlineQuality;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(1f, 8f)]
		[Tooltip("Reduces the quality of the outline but improves performance a bit.")]
		public int outlineDownsampling;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool outlineOptimalBlit;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Visibility outlineVisibility;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("If enabled, this object won't combine the outline with other objects.")]
		public bool outlineIndependent;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the outer glow effect. A value of 0 disables the glow completely.")]
		public float glow;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float glowWidth;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public QualityLevel glowQuality;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(1f, 8f)]
		[Tooltip("Reduces the quality of the glow but improves performance a bit.")]
		public int glowDownsampling;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[ColorUsage(true, true)]
		public Color glowHQColor;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("When enabled, outer glow renders with dithering. When disabled, glow appears as a solid color.")]
		public bool glowDithering;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		public bool glowOptimalBlit;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Seed for the dithering effect")]
		public float glowMagicNumber1;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Another seed for the dithering effect that combines with first seed to create different patterns")]
		public float glowMagicNumber2;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float glowAnimationSpeed;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Visibility glowVisibility;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public GlowBlendMode glowBlendMode;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Blends glow passes one after another. If this option is disabled, glow passes won't overlap (in this case, make sure the glow pass 1 has a smaller offset than pass 2, etc.)")]
		public bool glowBlendPasses;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public GlowPassData[] glowPasses;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("If enabled, glow effect will not use a stencil mask. This can be used to render the glow effect alone.")]
		public bool glowIgnoreMask;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Range(0f, 5f)]
		[Tooltip("The intensity of the inner glow effect. A value of 0 disables the glow completely.")]
		public float innerGlow;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Range(0f, 2f)]
		public float innerGlowWidth;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[ColorUsage(true, true)]
		public Color innerGlowColor;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Visibility innerGlowVisibility;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Enables the targetFX effect. This effect draws an animated sprite over the object.")]
		public bool targetFX;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public Texture2D targetFXTexture;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[ColorUsage(true, true)]
		public Color targetFXColor;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public float targetFXRotationSpeed;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public float targetFXInitialScale;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public float targetFXEndScale;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[Tooltip("Makes target scale relative to object renderer bounds.")]
		public bool targetFXScaleToRenderBounds;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
		[Tooltip("Places target FX sprite at the bottom of the highlighted object.")]
		public bool targetFXAlignToGround;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("Max distance from the center of the highlighted object to the ground.")]
		public float targetFXGroundMaxDistance;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public LayerMask targetFXGroundLayerMask;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Fade out effect with altitude")]
		public float targetFXFadePower;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float targetFXTransitionDuration;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float targetFXStayDuration;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public Visibility targetFXVisibility;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Tooltip("See-through mode for this Highlight Effect component.")]
		public SeeThroughMode seeThrough;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[Tooltip("This mask setting let you specify which objects will be considered as occluders and cause the see-through effect for this Highlight Effect component. For example, you assign your walls to a different layer and specify that layer here, so only walls and not other objects, like ground or ceiling, will trigger the see-through effect.")]
		public LayerMask seeThroughOccluderMask;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Tooltip("Uses stencil buffers to ensure pixel-accurate occlusion test. If this option is disabled, only physics raycasting is used to test for occlusion.")]
		public bool seeThroughOccluderMaskAccurate;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[Range(0.01f, 0.9f)]
		[Tooltip("A multiplier for the occluder volume size which can be used to reduce the actual size of occluders when Highlight Effect checks if they're occluding this object.")]
		public float seeThroughOccluderThreshold;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[Tooltip("The interval of time between occlusion tests.")]
		public float seeThroughOccluderCheckInterval;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[Tooltip("If enabled, occlusion test is performed for each children element. If disabled, the bounds of all children is combined and a single occlusion test is performed for the combined bounds.")]
		public bool seeThroughOccluderCheckIndividualObjects;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Tooltip("Shows the see-through effect only if the occluder if at this 'offset' distance from the object.")]
		public float seeThroughDepthOffset;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[Tooltip("Hides the see-through effect if the occluder is further than this distance from the object (0 = infinite)")]
		public float seeThroughMaxDepth;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[Range(0f, 5f)]
		public float seeThroughIntensity;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[Range(0f, 1f)]
		public float seeThroughTintAlpha;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Color seeThroughTintColor;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[Range(0f, 1f)]
		public float seeThroughNoise;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[Range(0f, 1f)]
		public float seeThroughBorder;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Color seeThroughBorderColor;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public float seeThroughBorderWidth;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[Tooltip("Only display the border instead of the full see-through effect.")]
		public bool seeThroughBorderOnly;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AD")]
		[Tooltip("Renders see-through effect on overlapping objects in a sequence that's relative to the distance to the camera")]
		public bool seeThroughOrdered;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[Range(0f, 1f)]
		public float hitFxInitialIntensity;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public HitFxMode hitFxMode;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float hitFxFadeOutDuration;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[ColorUsage(true, true)]
		public Color hitFxColor;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public float hitFxRadius;

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x9218B8", Offset = "0x9218B8", VA = "0x9218B8")]
		public void Load(HighlightEffect effect)
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x921640", Offset = "0x921640", VA = "0x921640")]
		public void Save(HighlightEffect effect)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x9220CC", Offset = "0x9220CC", VA = "0x9220CC")]
		private GlowPassData[] GetGlowPassesCopy(GlowPassData[] glowPasses)
		{
			return null;
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x9221A0", Offset = "0x9221A0", VA = "0x9221A0")]
		public void OnValidate()
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x9222EC", Offset = "0x9222EC", VA = "0x9222EC")]
		public HighlightProfile()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	public struct MeshData
	{
		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Renderer renderer;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int subMeshCount;
	}
	[Token(Token = "0x20001D0")]
	public enum DetectionMethod
	{
		[Token(Token = "0x4000D29")]
		Stencil,
		[Token(Token = "0x4000D2A")]
		RayCast
	}
	[Token(Token = "0x20001D1")]
	[ExecuteInEditMode]
	public class HighlightSeeThroughOccluder : MonoBehaviour
	{
		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DetectionMethod detectionMethod;

		[NonSerialized]
		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshData[] meshData;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Renderer> rr;

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x922480", Offset = "0x922480", VA = "0x922480")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x9224B8", Offset = "0x9224B8", VA = "0x9224B8")]
		private void Init()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x922904", Offset = "0x922904", VA = "0x922904")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x92295C", Offset = "0x92295C", VA = "0x92295C")]
		public HighlightSeeThroughOccluder()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	public enum TriggerMode
	{
		[Token(Token = "0x4000D2F")]
		ColliderEventsOnlyOnThisObject,
		[Token(Token = "0x4000D30")]
		RaycastOnThisObjectAndChildren,
		[Token(Token = "0x4000D31")]
		Volume
	}
	[Token(Token = "0x20001D3")]
	public enum RayCastSource
	{
		[Token(Token = "0x4000D33")]
		MousePosition,
		[Token(Token = "0x4000D34")]
		CameraDirection
	}
	[Token(Token = "0x20001D4")]
	[RequireComponent(typeof(HighlightEffect))]
	[ExecuteInEditMode]
	[HelpURL("https://www.dropbox.com/s/v9qgn68ydblqz8x/Documentation.pdf?dl=0")]
	public class HighlightTrigger : MonoBehaviour
	{
		[Token(Token = "0x20001D5")]
		[CompilerGenerated]
		private sealed class <DoRayCast>d__38 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HighlightTrigger <>4__this;

			[Token(Token = "0x17000126")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CC2")]
				[Address(RVA = "0x92480C", Offset = "0x92480C", VA = "0x92480C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000127")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CC4")]
				[Address(RVA = "0x924854", Offset = "0x924854", VA = "0x924854", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0x9234D4", Offset = "0x9234D4", VA = "0x9234D4")]
			[DebuggerHidden]
			public <DoRayCast>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0x923FB0", Offset = "0x923FB0", VA = "0x923FB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0x923FB4", Offset = "0x923FB4", VA = "0x923FB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0x924814", Offset = "0x924814", VA = "0x924814", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enables highlight when pointer is over this object.")]
		public bool highlightOnHover;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Used to trigger automatic highlighting including children objects.")]
		public TriggerMode triggerMode;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Camera raycastCamera;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RayCastSource raycastSource;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Minimum distance for target.")]
		public float minDistance;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum distance for target. 0 = infinity")]
		public float maxDistance;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Blocks interaction if pointer is over an UI element")]
		public bool respectUI;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LayerMask volumeLayerMask;

		[Token(Token = "0x4000D3D")]
		private const int MAX_RAYCAST_HITS = 100;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If the object will be selected by clicking with mouse or tapping on it.")]
		public bool selectOnClick;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Profile to use when object is selected by clicking on it.")]
		public HighlightProfile selectedProfile;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Profile to use whtn object is selected and highlighted.")]
		public HighlightProfile selectedAndHighlightedProfile;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Automatically deselects any other selected object prior selecting this one")]
		public bool singleSelection;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("Toggles selection on/off when clicking object")]
		public bool toggle;

		[NonSerialized]
		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Collider[] colliders;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Collider currentCollider;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RaycastHit[] hits;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HighlightEffect hb;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private TriggerMode currentTriggerMode;

		[Token(Token = "0x17000125")]
		public HighlightEffect highlightEffect
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0x922964", Offset = "0x922964", VA = "0x922964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000009")]
		public event OnObjectSelectionEvent OnObjectSelected
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0x92296C", Offset = "0x92296C", VA = "0x92296C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0x922A08", Offset = "0x922A08", VA = "0x922A08")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000A")]
		public event OnObjectSelectionEvent OnObjectUnSelected
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0x922AA4", Offset = "0x922AA4", VA = "0x922AA4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0x922B40", Offset = "0x922B40", VA = "0x922B40")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event OnObjectHighlightEvent OnObjectHighlightStart
		{
			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0x922BDC", Offset = "0x922BDC", VA = "0x922BDC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0x922C78", Offset = "0x922C78", VA = "0x922C78")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event OnObjectHighlightEvent OnObjectHighlightEnd
		{
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0x922D14", Offset = "0x922D14", VA = "0x922D14")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0x922DB0", Offset = "0x922DB0", VA = "0x922DB0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x922E4C", Offset = "0x922E4C", VA = "0x922E4C")]
		[RuntimeInitializeOnLoadMethod]
		private void DomainReloadDisabledSupport()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x922EE4", Offset = "0x922EE4", VA = "0x922EE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x923050", Offset = "0x923050", VA = "0x923050")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x922EE8", Offset = "0x922EE8", VA = "0x922EE8")]
		public void Init()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x923200", Offset = "0x923200", VA = "0x923200")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x92318C", Offset = "0x92318C", VA = "0x92318C")]
		[IteratorStateMachine(typeof(<DoRayCast>d__38))]
		private IEnumerator DoRayCast()
		{
			return null;
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x9234FC", Offset = "0x9234FC", VA = "0x9234FC")]
		private EventSystem CreateEventSystem()
		{
			return null;
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x9236A4", Offset = "0x9236A4", VA = "0x9236A4")]
		private void SwitchCollider(Collider newCollider)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x92398C", Offset = "0x92398C", VA = "0x92398C")]
		private bool CanInteract()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x923A94", Offset = "0x923A94", VA = "0x923A94")]
		private void OnMouseDown()
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x923E20", Offset = "0x923E20", VA = "0x923E20")]
		private void OnMouseEnter()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x923E60", Offset = "0x923E60", VA = "0x923E60")]
		private void OnMouseExit()
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x92375C", Offset = "0x92375C", VA = "0x92375C")]
		private void Highlight(bool state)
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x923AF4", Offset = "0x923AF4", VA = "0x923AF4")]
		private void ToggleSelection()
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x923EA0", Offset = "0x923EA0", VA = "0x923EA0")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x923F1C", Offset = "0x923F1C", VA = "0x923F1C")]
		public void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x923F98", Offset = "0x923F98", VA = "0x923F98")]
		public HighlightTrigger()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	public static class InputProxy
	{
		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 lastPointerPosition;

		[Token(Token = "0x17000128")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0x920AC8", Offset = "0x920AC8", VA = "0x920AC8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000129")]
		public static int touchCount
		{
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0x92153C", Offset = "0x92153C", VA = "0x92153C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x91FC40", Offset = "0x91FC40", VA = "0x91FC40")]
		public static void Init()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x920C1C", Offset = "0x920C1C", VA = "0x920C1C")]
		public static bool GetMouseButtonDown(int buttonIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x9215A0", Offset = "0x9215A0", VA = "0x9215A0")]
		public static int GetFingerIdFromTouch(int touchIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x92485C", Offset = "0x92485C", VA = "0x92485C")]
		public static bool GetKeyDown(string name)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001D7")]
	public static class ShaderParams
	{
		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int Cull;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int BlurScale;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int Speed;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int ConstantWidth;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int CutOff;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int ZTest;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static int Flip;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static int Debug;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static int Color;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static int MainTex;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static int BlendSrc;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static int BlendDst;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static int OutlineWidth;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static int OutlineZTest;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static int OutlineDirection;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int OutlineColor;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static int OutlineVertexWidth;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static int GlowZTest;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static int GlowStencilComp;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static int GlowStencilOp;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static int GlowDirection;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static int Glow;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static int GlowColor;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static int Glow2;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static int SeeThrough;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static int SeeThroughNoise;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static int SeeThroughBorderWidth;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static int SeeThroughBorderConstantWidth;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static int SeeThroughTintColor;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static int SeeThroughBorderColor;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static int SeeThroughStencilRef;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static int SeeThroughStencilComp;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static int SeeThroughStencilPassOp;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public static int SeeThroughDepthOffset;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static int SeeThroughMaxDepth;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public static int SeeThroughOrdered;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static int InnerGlowWidth;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public static int InnerGlowZTest;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static int InnerGlowColor;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public static int OverlayData;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static int OverlayBackColor;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public static int OverlayColor;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static int OverlayHitPosData;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public static int OverlayHitStartTime;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static int OverlayTexture;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public static int TargetFXRenderData;

		[Token(Token = "0x4000D7E")]
		public const string SKW_ALPHACLIP = "HP_ALPHACLIP";

		[Token(Token = "0x4000D7F")]
		public const string SKW_DEPTHCLIP = "HP_DEPTHCLIP";

		[Token(Token = "0x4000D80")]
		public const string SKW_DEPTH_OFFSET = "HP_DEPTH_OFFSET";

		[Token(Token = "0x4000D81")]
		public const string SKW_USES_OVERLAY_TEXTURE = "HP_USES_OVERLAY_TEXTURE";

		[Token(Token = "0x4000D82")]
		public const string SKW_SEETHROUGH_ONLY_BORDER = "HP_SEETHROUGH_ONLY_BORDER";
	}
}
namespace HighlightPlus.Demos
{
	[Token(Token = "0x20001D8")]
	public class HitFxDemo : MonoBehaviour
	{
		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip hitSound;

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x925160", Offset = "0x925160", VA = "0x925160")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x92529C", Offset = "0x92529C", VA = "0x92529C")]
		public HitFxDemo()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	public class ManualSelectionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HighlightManager hm;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform objectToSelect;

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x9252A4", Offset = "0x9252A4", VA = "0x9252A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x92531C", Offset = "0x92531C", VA = "0x92531C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x92539C", Offset = "0x92539C", VA = "0x92539C")]
		public ManualSelectionDemo()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	public class SphereHighlightEventExample : MonoBehaviour
	{
		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private HighlightEffect effect;

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x9253A4", Offset = "0x9253A4", VA = "0x9253A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x92546C", Offset = "0x92546C", VA = "0x92546C")]
		private bool ValidateHighlightObject(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x925474", Offset = "0x925474", VA = "0x925474")]
		private void HighlightStart()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x9254DC", Offset = "0x9254DC", VA = "0x9254DC")]
		private void HighlightEnd()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x925544", Offset = "0x925544", VA = "0x925544")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x925638", Offset = "0x925638", VA = "0x925638")]
		public SphereHighlightEventExample()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class SphereSelectionEventsExample : MonoBehaviour
	{
		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x925640", Offset = "0x925640", VA = "0x925640")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x925744", Offset = "0x925744", VA = "0x925744")]
		private bool OnObjectSelected(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x9257E0", Offset = "0x9257E0", VA = "0x9257E0")]
		private bool OnObjectUnSelected(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x92587C", Offset = "0x92587C", VA = "0x92587C")]
		public SphereSelectionEventsExample()
		{
		}
	}
}
namespace UnityEngine.PostProcessing
{
	[Token(Token = "0x20001DC")]
	public sealed class GetSetAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string name;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool dirty;

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x925884", Offset = "0x925884", VA = "0x925884")]
		public GetSetAttribute(string name)
		{
		}
	}
	[Token(Token = "0x20001DD")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float min;

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x9258B4", Offset = "0x9258B4", VA = "0x9258B4")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public sealed class TrackballAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string method;

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x9258DC", Offset = "0x9258DC", VA = "0x9258DC")]
		public TrackballAttribute(string method)
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public sealed class TrackballGroupAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x92590C", Offset = "0x92590C", VA = "0x92590C")]
		public TrackballGroupAttribute()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public sealed class AmbientOcclusionComponent : PostProcessingComponentCommandBuffer<AmbientOcclusionModel>
	{
		[Token(Token = "0x20001E1")]
		private static class Uniforms
		{
			[Token(Token = "0x4000D8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Intensity;

			[Token(Token = "0x4000D8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Radius;

			[Token(Token = "0x4000D90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _FogParams;

			[Token(Token = "0x4000D91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Downsample;

			[Token(Token = "0x4000D92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _SampleCount;

			[Token(Token = "0x4000D93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _OcclusionTexture1;

			[Token(Token = "0x4000D94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _OcclusionTexture2;

			[Token(Token = "0x4000D95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _OcclusionTexture;

			[Token(Token = "0x4000D96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4000D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _TempRT;
		}

		[Token(Token = "0x20001E2")]
		private enum OcclusionSource
		{
			[Token(Token = "0x4000D99")]
			DepthTexture,
			[Token(Token = "0x4000D9A")]
			DepthNormalsTexture,
			[Token(Token = "0x4000D9B")]
			GBuffer
		}

		[Token(Token = "0x4000D8B")]
		private const string k_BlitShaderString = "Hidden/Post FX/Blit";

		[Token(Token = "0x4000D8C")]
		private const string k_ShaderString = "Hidden/Post FX/Ambient Occlusion";

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderTargetIdentifier[] m_MRT;

		[Token(Token = "0x1700012A")]
		private OcclusionSource occlusionSource
		{
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0x925914", Offset = "0x925914", VA = "0x925914")]
			get
			{
				return default(OcclusionSource);
			}
		}

		[Token(Token = "0x1700012B")]
		private bool ambientOnlySupported
		{
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0x9259B8", Offset = "0x9259B8", VA = "0x9259B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012C")]
		public override bool active
		{
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0x925A48", Offset = "0x925A48", VA = "0x925A48", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x925ABC", Offset = "0x925ABC", VA = "0x925ABC", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x925AF4", Offset = "0x925AF4", VA = "0x925AF4", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x925B34", Offset = "0x925B34", VA = "0x925B34", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x925B8C", Offset = "0x925B8C", VA = "0x925B8C", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x926550", Offset = "0x926550", VA = "0x926550")]
		public AmbientOcclusionComponent()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public sealed class BloomComponent : PostProcessingComponentRenderTexture<BloomModel>
	{
		[Token(Token = "0x20001E4")]
		private static class Uniforms
		{
			[Token(Token = "0x4000D9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x4000DA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Threshold;

			[Token(Token = "0x4000DA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Curve;

			[Token(Token = "0x4000DA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _PrefilterOffs;

			[Token(Token = "0x4000DA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _SampleScale;

			[Token(Token = "0x4000DA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _BaseTex;

			[Token(Token = "0x4000DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _BloomTex;

			[Token(Token = "0x4000DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Bloom_Settings;

			[Token(Token = "0x4000DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _Bloom_DirtTex;

			[Token(Token = "0x4000DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Bloom_DirtIntensity;
		}

		[Token(Token = "0x4000D9C")]
		private const int k_MaxPyramidBlurLevel = 16;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderTexture[] m_BlurBuffer1;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly RenderTexture[] m_BlurBuffer2;

		[Token(Token = "0x1700012D")]
		public override bool active
		{
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0x926888", Offset = "0x926888", VA = "0x926888", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x9268FC", Offset = "0x9268FC", VA = "0x9268FC")]
		public void Prepare(RenderTexture source, Material uberMaterial, Texture autoExposure)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x927250", Offset = "0x927250", VA = "0x927250")]
		public BloomComponent()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public sealed class BuiltinDebugViewsComponent : PostProcessingComponentCommandBuffer<BuiltinDebugViewsModel>
	{
		[Token(Token = "0x20001E6")]
		private static class Uniforms
		{
			[Token(Token = "0x4000DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthScale;

			[Token(Token = "0x4000DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _TempRT;

			[Token(Token = "0x4000DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Opacity;

			[Token(Token = "0x4000DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4000DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _TempRT2;

			[Token(Token = "0x4000DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Amplitude;

			[Token(Token = "0x4000DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Scale;
		}

		[Token(Token = "0x20001E7")]
		private enum Pass
		{
			[Token(Token = "0x4000DB3")]
			Depth,
			[Token(Token = "0x4000DB4")]
			Normals,
			[Token(Token = "0x4000DB5")]
			MovecOpacity,
			[Token(Token = "0x4000DB6")]
			MovecImaging,
			[Token(Token = "0x4000DB7")]
			MovecArrows
		}

		[Token(Token = "0x20001E8")]
		private class ArrowArray
		{
			[Token(Token = "0x1700012F")]
			public Mesh mesh
			{
				[Token(Token = "0x6000CF8")]
				[Address(RVA = "0x9286A0", Offset = "0x9286A0", VA = "0x9286A0")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000CF9")]
				[Address(RVA = "0x9286A8", Offset = "0x9286A8", VA = "0x9286A8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000130")]
			public int columnCount
			{
				[Token(Token = "0x6000CFA")]
				[Address(RVA = "0x9286B0", Offset = "0x9286B0", VA = "0x9286B0")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000CFB")]
				[Address(RVA = "0x9286B8", Offset = "0x9286B8", VA = "0x9286B8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000131")]
			public int rowCount
			{
				[Token(Token = "0x6000CFC")]
				[Address(RVA = "0x9286C0", Offset = "0x9286C0", VA = "0x9286C0")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6000CFD")]
				[Address(RVA = "0x9286C8", Offset = "0x9286C8", VA = "0x9286C8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0x928050", Offset = "0x928050", VA = "0x928050")]
			public void BuildMesh(int columns, int rows)
			{
			}

			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0x928028", Offset = "0x928028", VA = "0x928028")]
			public void Release()
			{
			}

			[Token(Token = "0x6000D00")]
			[Address(RVA = "0x928020", Offset = "0x928020", VA = "0x928020")]
			public ArrowArray()
			{
			}
		}

		[Token(Token = "0x4000DA9")]
		private const string k_ShaderString = "Hidden/Post FX/Builtin Debug Views";

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ArrowArray m_Arrows;

		[Token(Token = "0x1700012E")]
		public override bool active
		{
			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0x927500", Offset = "0x927500", VA = "0x927500", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x92758C", Offset = "0x92758C", VA = "0x92758C", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x9275F4", Offset = "0x9275F4", VA = "0x9275F4", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x92764C", Offset = "0x92764C", VA = "0x92764C", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x92768C", Offset = "0x92768C", VA = "0x92768C", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x9277AC", Offset = "0x9277AC", VA = "0x9277AC")]
		private void DepthPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x9278C4", Offset = "0x9278C4", VA = "0x9278C4")]
		private void DepthNormalsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x927988", Offset = "0x927988", VA = "0x927988")]
		private void MotionVectorsPass(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x927F10", Offset = "0x927F10", VA = "0x927F10")]
		private void PrepareArrows()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x928488", Offset = "0x928488", VA = "0x928488", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x9284D0", Offset = "0x9284D0", VA = "0x9284D0")]
		public BuiltinDebugViewsComponent()
		{
		}
	}
	[Token(Token = "0x20001E9")]
	public sealed class ChromaticAberrationComponent : PostProcessingComponentRenderTexture<ChromaticAberrationModel>
	{
		[Token(Token = "0x20001EA")]
		private static class Uniforms
		{
			[Token(Token = "0x4000DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _ChromaticAberration_Amount;

			[Token(Token = "0x4000DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ChromaticAberration_Spectrum;
		}

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D m_SpectrumLut;

		[Token(Token = "0x17000132")]
		public override bool active
		{
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0x9286D0", Offset = "0x9286D0", VA = "0x9286D0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x928744", Offset = "0x928744", VA = "0x928744", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x92876C", Offset = "0x92876C", VA = "0x92876C", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x9289F4", Offset = "0x9289F4", VA = "0x9289F4")]
		public ChromaticAberrationComponent()
		{
		}
	}
	[Token(Token = "0x20001EB")]
	public sealed class ColorGradingComponent : PostProcessingComponentRenderTexture<ColorGradingModel>
	{
		[Token(Token = "0x20001EC")]
		private static class Uniforms
		{
			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _LutParams;

			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _NeutralTonemapperParams1;

			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _NeutralTonemapperParams2;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _HueShift;

			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Saturation;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Contrast;

			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Balance;

			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Lift;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _InvGamma;

			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _Gain;

			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _Slope;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _Power;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _Offset;

			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _ChannelMixerRed;

			[Token(Token = "0x4000DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _ChannelMixerGreen;

			[Token(Token = "0x4000DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _ChannelMixerBlue;

			[Token(Token = "0x4000DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _Curves;

			[Token(Token = "0x4000DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _LogLut;

			[Token(Token = "0x4000DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _LogLut_Params;

			[Token(Token = "0x4000DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ExposureEV;
		}

		[Token(Token = "0x4000DBE")]
		private const int k_InternalLogLutSize = 32;

		[Token(Token = "0x4000DBF")]
		private const int k_CurvePrecision = 128;

		[Token(Token = "0x4000DC0")]
		private const float k_CurveStep = 1f / 128f;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D m_GradingCurves;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] m_pixels;

		[Token(Token = "0x17000133")]
		public override bool active
		{
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0x928AD8", Offset = "0x928AD8", VA = "0x928AD8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x928B40", Offset = "0x928B40", VA = "0x928B40")]
		private float StandardIlluminantY(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x928B6C", Offset = "0x928B6C", VA = "0x928B6C")]
		private Vector3 CIExyToLMS(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x928BFC", Offset = "0x928BFC", VA = "0x928BFC")]
		private Vector3 CalculateColorBalance(float temperature, float tint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x928D00", Offset = "0x928D00", VA = "0x928D00")]
		private static Color NormalizeColor(Color c)
		{
			return default(Color);
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x928DCC", Offset = "0x928DCC", VA = "0x928DCC")]
		private static Vector3 ClampVector(Vector3 v, float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x928E00", Offset = "0x928E00", VA = "0x928E00")]
		public static Vector3 GetLiftValue(Color lift)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x928E84", Offset = "0x928E84", VA = "0x928E84")]
		public static Vector3 GetGammaValue(Color gamma)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x928F68", Offset = "0x928F68", VA = "0x928F68")]
		public static Vector3 GetGainValue(Color gain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x929020", Offset = "0x929020", VA = "0x929020")]
		public static void CalculateLiftGammaGain(Color lift, Color gamma, Color gain, out Vector3 outLift, out Vector3 outGamma, out Vector3 outGain)
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x9290BC", Offset = "0x9290BC", VA = "0x9290BC")]
		public static Vector3 GetSlopeValue(Color slope)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x929158", Offset = "0x929158", VA = "0x929158")]
		public static Vector3 GetPowerValue(Color power)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x929210", Offset = "0x929210", VA = "0x929210")]
		public static Vector3 GetOffsetValue(Color offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x9292A4", Offset = "0x9292A4", VA = "0x9292A4")]
		public static void CalculateSlopePowerOffset(Color slope, Color power, Color offset, out Vector3 outSlope, out Vector3 outPower, out Vector3 outOffset)
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x929340", Offset = "0x929340", VA = "0x929340")]
		private TextureFormat GetCurveFormat()
		{
			return default(TextureFormat);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x929368", Offset = "0x929368", VA = "0x929368")]
		private Texture2D GetCurveTexture()
		{
			return null;
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x92969C", Offset = "0x92969C", VA = "0x92969C")]
		private bool IsLogLutValid(RenderTexture lut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x929738", Offset = "0x929738", VA = "0x929738")]
		private RenderTextureFormat GetLutFormat()
		{
			return default(RenderTextureFormat);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x92975C", Offset = "0x92975C", VA = "0x92975C")]
		private void GenerateLut()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x929EF8", Offset = "0x929EF8", VA = "0x929EF8", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x92A0D8", Offset = "0x92A0D8", VA = "0x92A0D8")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x92A1F8", Offset = "0x92A1F8", VA = "0x92A1F8", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x92A27C", Offset = "0x92A27C", VA = "0x92A27C")]
		public ColorGradingComponent()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public sealed class DepthOfFieldComponent : PostProcessingComponentRenderTexture<DepthOfFieldModel>
	{
		[Token(Token = "0x20001EE")]
		private static class Uniforms
		{
			[Token(Token = "0x4000DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DepthOfFieldTex;

			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _DepthOfFieldCoCTex;

			[Token(Token = "0x4000DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Distance;

			[Token(Token = "0x4000DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _LensCoeff;

			[Token(Token = "0x4000DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _MaxCoC;

			[Token(Token = "0x4000DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _RcpMaxCoC;

			[Token(Token = "0x4000DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _RcpAspect;

			[Token(Token = "0x4000DE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4000DE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _CoCTex;

			[Token(Token = "0x4000DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _TaaParams;

			[Token(Token = "0x4000DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _DepthOfFieldParams;
		}

		[Token(Token = "0x4000DD7")]
		private const string k_ShaderString = "Hidden/Post FX/Depth Of Field";

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture m_CoCHistory;

		[Token(Token = "0x4000DD9")]
		private const float k_FilmHeight = 0.024f;

		[Token(Token = "0x17000134")]
		public override bool active
		{
			[Token(Token = "0x6000D1E")]
			[Address(RVA = "0x92A6C8", Offset = "0x92A6C8", VA = "0x92A6C8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x92A730", Offset = "0x92A730", VA = "0x92A730", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x92A738", Offset = "0x92A738", VA = "0x92A738")]
		private float CalculateFocalLength()
		{
			return default(float);
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x92A7D4", Offset = "0x92A7D4", VA = "0x92A7D4")]
		private float CalculateMaxCoCRadius(int screenHeight)
		{
			return default(float);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x92A848", Offset = "0x92A848", VA = "0x92A848")]
		private bool CheckHistory(int width, int height)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x92A918", Offset = "0x92A918", VA = "0x92A918")]
		private RenderTextureFormat SelectFormat(RenderTextureFormat primary, RenderTextureFormat secondary)
		{
			return default(RenderTextureFormat);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x92A964", Offset = "0x92A964", VA = "0x92A964")]
		public void Prepare(RenderTexture source, Material uberMaterial, bool antialiasCoC, Vector2 taaJitter, float taaBlending)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x92B094", Offset = "0x92B094", VA = "0x92B094", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x92B114", Offset = "0x92B114", VA = "0x92B114")]
		public DepthOfFieldComponent()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	public sealed class DitheringComponent : PostProcessingComponentRenderTexture<DitheringModel>
	{
		[Token(Token = "0x20001F0")]
		private static class Uniforms
		{
			[Token(Token = "0x4000DE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _DitheringTex;

			[Token(Token = "0x4000DE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _DitheringCoords;
		}

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D[] noiseTextures;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int textureIndex;

		[Token(Token = "0x4000DE7")]
		private const int k_TextureCount = 64;

		[Token(Token = "0x17000135")]
		public override bool active
		{
			[Token(Token = "0x6000D28")]
			[Address(RVA = "0x92B39C", Offset = "0x92B39C", VA = "0x92B39C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x92B404", Offset = "0x92B404", VA = "0x92B404", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0x92B410", Offset = "0x92B410", VA = "0x92B410")]
		private void LoadNoiseTextures()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x92B53C", Offset = "0x92B53C", VA = "0x92B53C", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x92B6DC", Offset = "0x92B6DC", VA = "0x92B6DC")]
		public DitheringComponent()
		{
		}
	}
	[Token(Token = "0x20001F1")]
	public sealed class EyeAdaptationComponent : PostProcessingComponentRenderTexture<EyeAdaptationModel>
	{
		[Token(Token = "0x20001F2")]
		private static class Uniforms
		{
			[Token(Token = "0x4000DF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Params;

			[Token(Token = "0x4000DF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Speed;

			[Token(Token = "0x4000DF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _ScaleOffsetRes;

			[Token(Token = "0x4000DF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _ExposureCompensation;

			[Token(Token = "0x4000DF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AutoExposure;

			[Token(Token = "0x4000DFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _DebugWidth;
		}

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ComputeShader m_EyeCompute;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComputeBuffer m_HistogramBuffer;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly RenderTexture[] m_AutoExposurePool;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int m_AutoExposurePingPing;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture m_CurrentAutoExposure;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTexture m_DebugHistogram;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint[] s_EmptyHistogramBuffer;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_FirstFrame;

		[Token(Token = "0x4000DF2")]
		private const int k_HistogramBins = 64;

		[Token(Token = "0x4000DF3")]
		private const int k_HistogramThreadX = 16;

		[Token(Token = "0x4000DF4")]
		private const int k_HistogramThreadY = 16;

		[Token(Token = "0x17000136")]
		public override bool active
		{
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0x92B7C0", Offset = "0x92B7C0", VA = "0x92B7C0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x92B834", Offset = "0x92B834", VA = "0x92B834")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x92B840", Offset = "0x92B840", VA = "0x92B840", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x92B84C", Offset = "0x92B84C", VA = "0x92B84C", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x92B948", Offset = "0x92B948", VA = "0x92B948")]
		private Vector4 GetHistogramScaleOffsetRes()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x92BA08", Offset = "0x92BA08", VA = "0x92BA08")]
		public Texture Prepare(RenderTexture source, Material uberMaterial)
		{
			return null;
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x92C49C", Offset = "0x92C49C", VA = "0x92C49C")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x92C604", Offset = "0x92C604", VA = "0x92C604")]
		public EyeAdaptationComponent()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public sealed class FogComponent : PostProcessingComponentCommandBuffer<FogModel>
	{
		[Token(Token = "0x20001F4")]
		private static class Uniforms
		{
			[Token(Token = "0x4000DFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _FogColor;

			[Token(Token = "0x4000DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Density;

			[Token(Token = "0x4000DFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Start;

			[Token(Token = "0x4000DFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _End;

			[Token(Token = "0x4000E00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _TempRT;
		}

		[Token(Token = "0x4000DFB")]
		private const string k_ShaderString = "Hidden/Post FX/Fog";

		[Token(Token = "0x17000137")]
		public override bool active
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0x92C7E8", Offset = "0x92C7E8", VA = "0x92C7E8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x92C870", Offset = "0x92C870", VA = "0x92C870", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x92C8B0", Offset = "0x92C8B0", VA = "0x92C8B0", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x92C8B8", Offset = "0x92C8B8", VA = "0x92C8B8", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x92C8C0", Offset = "0x92C8C0", VA = "0x92C8C0", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x92CD34", Offset = "0x92CD34", VA = "0x92CD34")]
		public FogComponent()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public sealed class FxaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x20001F6")]
		private static class Uniforms
		{
			[Token(Token = "0x4000E01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _QualitySettings;

			[Token(Token = "0x4000E02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _ConsoleSettings;
		}

		[Token(Token = "0x17000138")]
		public override bool active
		{
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0x92CEA4", Offset = "0x92CEA4", VA = "0x92CEA4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x92CF14", Offset = "0x92CF14", VA = "0x92CF14")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0x92D114", Offset = "0x92D114", VA = "0x92D114")]
		public FxaaComponent()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public sealed class GrainComponent : PostProcessingComponentRenderTexture<GrainModel>
	{
		[Token(Token = "0x20001F8")]
		private static class Uniforms
		{
			[Token(Token = "0x4000E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Grain_Params1;

			[Token(Token = "0x4000E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Grain_Params2;

			[Token(Token = "0x4000E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _GrainTex;

			[Token(Token = "0x4000E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Phase;
		}

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private RenderTexture m_GrainLookupRT;

		[Token(Token = "0x17000139")]
		public override bool active
		{
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0x92D1F8", Offset = "0x92D1F8", VA = "0x92D1F8", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x92D27C", Offset = "0x92D27C", VA = "0x92D27C", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x92D2A4", Offset = "0x92D2A4", VA = "0x92D2A4", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x92D644", Offset = "0x92D644", VA = "0x92D644")]
		public GrainComponent()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public sealed class MotionBlurComponent : PostProcessingComponentCommandBuffer<MotionBlurModel>
	{
		[Token(Token = "0x20001FA")]
		private static class Uniforms
		{
			[Token(Token = "0x4000E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _VelocityScale;

			[Token(Token = "0x4000E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _MaxBlurRadius;

			[Token(Token = "0x4000E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _RcpMaxBlurRadius;

			[Token(Token = "0x4000E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _VelocityTex;

			[Token(Token = "0x4000E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _MainTex;

			[Token(Token = "0x4000E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _Tile2RT;

			[Token(Token = "0x4000E11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _Tile4RT;

			[Token(Token = "0x4000E12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _Tile8RT;

			[Token(Token = "0x4000E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _TileMaxOffs;

			[Token(Token = "0x4000E14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _TileMaxLoop;

			[Token(Token = "0x4000E15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _TileVRT;

			[Token(Token = "0x4000E16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _NeighborMaxTex;

			[Token(Token = "0x4000E17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _LoopCount;

			[Token(Token = "0x4000E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _TempRT;

			[Token(Token = "0x4000E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _History1LumaTex;

			[Token(Token = "0x4000E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _History2LumaTex;

			[Token(Token = "0x4000E1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _History3LumaTex;

			[Token(Token = "0x4000E1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _History4LumaTex;

			[Token(Token = "0x4000E1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _History1ChromaTex;

			[Token(Token = "0x4000E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _History2ChromaTex;

			[Token(Token = "0x4000E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _History3ChromaTex;

			[Token(Token = "0x4000E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _History4ChromaTex;

			[Token(Token = "0x4000E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _History1Weight;

			[Token(Token = "0x4000E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _History2Weight;

			[Token(Token = "0x4000E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly int _History3Weight;

			[Token(Token = "0x4000E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal static readonly int _History4Weight;
		}

		[Token(Token = "0x20001FB")]
		private enum Pass
		{
			[Token(Token = "0x4000E26")]
			VelocitySetup,
			[Token(Token = "0x4000E27")]
			TileMax1,
			[Token(Token = "0x4000E28")]
			TileMax2,
			[Token(Token = "0x4000E29")]
			TileMaxV,
			[Token(Token = "0x4000E2A")]
			NeighborMax,
			[Token(Token = "0x4000E2B")]
			Reconstruction,
			[Token(Token = "0x4000E2C")]
			FrameCompression,
			[Token(Token = "0x4000E2D")]
			FrameBlendingChroma,
			[Token(Token = "0x4000E2E")]
			FrameBlendingRaw
		}

		[Token(Token = "0x20001FC")]
		public class ReconstructionFilter
		{
			[Token(Token = "0x4000E2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private RenderTextureFormat m_VectorRTFormat;

			[Token(Token = "0x4000E30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat m_PackedRTFormat;

			[Token(Token = "0x6000D53")]
			[Address(RVA = "0x92D7FC", Offset = "0x92D7FC", VA = "0x92D7FC")]
			public ReconstructionFilter()
			{
			}

			[Token(Token = "0x6000D54")]
			[Address(RVA = "0x92F5C8", Offset = "0x92F5C8", VA = "0x92F5C8")]
			private void CheckTextureFormatSupport()
			{
			}

			[Token(Token = "0x6000D55")]
			[Address(RVA = "0x92D9DC", Offset = "0x92D9DC", VA = "0x92D9DC")]
			public bool IsSupported()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D56")]
			[Address(RVA = "0x92E180", Offset = "0x92E180", VA = "0x92E180")]
			public void ProcessImage(PostProcessingContext context, CommandBuffer cb, ref MotionBlurModel.Settings settings, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}
		}

		[Token(Token = "0x20001FD")]
		public class FrameBlendingFilter
		{
			[Token(Token = "0x20001FE")]
			private struct Frame
			{
				[Token(Token = "0x4000E35")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public RenderTexture lumaTexture;

				[Token(Token = "0x4000E36")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public RenderTexture chromaTexture;

				[Token(Token = "0x4000E37")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private float m_Time;

				[Token(Token = "0x4000E38")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private RenderTargetIdentifier[] m_MRT;

				[Token(Token = "0x6000D5E")]
				[Address(RVA = "0x92FC80", Offset = "0x92FC80", VA = "0x92FC80")]
				public float CalculateWeight(float strength, float currentTime)
				{
					return default(float);
				}

				[Token(Token = "0x6000D5F")]
				[Address(RVA = "0x92F6EC", Offset = "0x92F6EC", VA = "0x92F6EC")]
				public void Release()
				{
				}

				[Token(Token = "0x6000D60")]
				[Address(RVA = "0x92F7BC", Offset = "0x92F7BC", VA = "0x92F7BC")]
				public void MakeRecord(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
				{
				}

				[Token(Token = "0x6000D61")]
				[Address(RVA = "0x92FAAC", Offset = "0x92FAAC", VA = "0x92FAAC")]
				public void MakeRecordRaw(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, RenderTextureFormat format)
				{
				}
			}

			[Token(Token = "0x4000E31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool m_UseCompression;

			[Token(Token = "0x4000E32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat m_RawTextureFormat;

			[Token(Token = "0x4000E33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Frame[] m_FrameList;

			[Token(Token = "0x4000E34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_LastFrameCount;

			[Token(Token = "0x6000D57")]
			[Address(RVA = "0x92D8A8", Offset = "0x92D8A8", VA = "0x92D8A8")]
			public FrameBlendingFilter()
			{
			}

			[Token(Token = "0x6000D58")]
			[Address(RVA = "0x92DA4C", Offset = "0x92DA4C", VA = "0x92DA4C")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000D59")]
			[Address(RVA = "0x92EF74", Offset = "0x92EF74", VA = "0x92EF74")]
			public void PushFrame(CommandBuffer cb, RenderTargetIdentifier source, int width, int height, Material material)
			{
			}

			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0x92EA90", Offset = "0x92EA90", VA = "0x92EA90")]
			public void BlendFrames(CommandBuffer cb, float strength, RenderTargetIdentifier source, RenderTargetIdentifier destination, Material material)
			{
			}

			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0x92F5EC", Offset = "0x92F5EC", VA = "0x92F5EC")]
			private static bool CheckSupportCompression()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0x92F620", Offset = "0x92F620", VA = "0x92F620")]
			private static RenderTextureFormat GetPreferredRenderTextureFormat()
			{
				return default(RenderTextureFormat);
			}

			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0x92FC1C", Offset = "0x92FC1C", VA = "0x92FC1C")]
			private Frame GetFrameRelative(int offset)
			{
				return default(Frame);
			}
		}

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ReconstructionFilter m_ReconstructionFilter;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FrameBlendingFilter m_FrameBlendingFilter;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool m_FirstFrame;

		[Token(Token = "0x1700013A")]
		public ReconstructionFilter reconstructionFilter
		{
			[Token(Token = "0x6000D47")]
			[Address(RVA = "0x92D788", Offset = "0x92D788", VA = "0x92D788")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public FrameBlendingFilter frameBlendingFilter
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0x92D834", Offset = "0x92D834", VA = "0x92D834")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public override bool active
		{
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0x92D920", Offset = "0x92D920", VA = "0x92D920", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x92D9E4", Offset = "0x92D9E4", VA = "0x92D9E4", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0x92DA24", Offset = "0x92DA24", VA = "0x92DA24")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x92DAC0", Offset = "0x92DAC0", VA = "0x92DAC0", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x92DAC8", Offset = "0x92DAC8", VA = "0x92DAC8", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x92DAD0", Offset = "0x92DAD0", VA = "0x92DAD0", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x92DADC", Offset = "0x92DADC", VA = "0x92DADC", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x92F094", Offset = "0x92F094", VA = "0x92F094", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x92F0A4", Offset = "0x92F0A4", VA = "0x92F0A4")]
		public MotionBlurComponent()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public sealed class ScreenSpaceReflectionComponent : PostProcessingComponentCommandBuffer<ScreenSpaceReflectionModel>
	{
		[Token(Token = "0x2000200")]
		private static class Uniforms
		{
			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _RayStepSize;

			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _AdditiveReflection;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _BilateralUpsampling;

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _TreatBackfaceHitAsMiss;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _AllowBackwardsRays;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal static readonly int _TraceBehindObjects;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly int _MaxSteps;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal static readonly int _FullResolutionFiltering;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly int _HalfResolution;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal static readonly int _HighlightSuppression;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly int _PixelsPerMeterAtOneMeter;

			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal static readonly int _ScreenEdgeFading;

			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly int _ReflectionBlur;

			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal static readonly int _MaxRayTraceDistance;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly int _FadeDistance;

			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal static readonly int _LayerThickness;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly int _SSRMultiplier;

			[Token(Token = "0x4000E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal static readonly int _FresnelFade;

			[Token(Token = "0x4000E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly int _FresnelFadePower;

			[Token(Token = "0x4000E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal static readonly int _ReflectionBufferSize;

			[Token(Token = "0x4000E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly int _ScreenSize;

			[Token(Token = "0x4000E53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal static readonly int _InvScreenSize;

			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly int _ProjInfo;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal static readonly int _CameraClipInfo;

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly int _ProjectToPixelMatrix;

			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal static readonly int _WorldToCameraMatrix;

			[Token(Token = "0x4000E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly int _CameraToWorldMatrix;

			[Token(Token = "0x4000E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			internal static readonly int _Axis;

			[Token(Token = "0x4000E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly int _CurrentMipLevel;

			[Token(Token = "0x4000E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			internal static readonly int _NormalAndRoughnessTexture;

			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly int _HitPointTexture;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			internal static readonly int _BlurTexture;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly int _FilteredReflections;

			[Token(Token = "0x4000E5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			internal static readonly int _FinalReflectionTexture;

			[Token(Token = "0x4000E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly int _TempTexture;
		}

		[Token(Token = "0x2000201")]
		private enum PassIndex
		{
			[Token(Token = "0x4000E62")]
			RayTraceStep,
			[Token(Token = "0x4000E63")]
			CompositeFinal,
			[Token(Token = "0x4000E64")]
			Blur,
			[Token(Token = "0x4000E65")]
			CompositeSSR,
			[Token(Token = "0x4000E66")]
			MinMipGeneration,
			[Token(Token = "0x4000E67")]
			HitPointToReflections,
			[Token(Token = "0x4000E68")]
			BilateralKeyPack,
			[Token(Token = "0x4000E69")]
			BlitDepthAsCSZ,
			[Token(Token = "0x4000E6A")]
			PoissonBlur
		}

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool k_HighlightSuppression;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool k_TraceBehindObjects;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool k_TreatBackfaceHitAsMiss;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		private bool k_BilateralUpsample;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly int[] m_ReflectionTextures;

		[Token(Token = "0x1700013D")]
		public override bool active
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0x92FD70", Offset = "0x92FD70", VA = "0x92FD70", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x92FD68", Offset = "0x92FD68", VA = "0x92FD68", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x92FDEC", Offset = "0x92FDEC", VA = "0x92FDEC", Slot = "6")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x92FF34", Offset = "0x92FF34", VA = "0x92FF34", Slot = "11")]
		public override string GetName()
		{
			return null;
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x92FF74", Offset = "0x92FF74", VA = "0x92FF74", Slot = "10")]
		public override CameraEvent GetCameraEvent()
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x92FF7C", Offset = "0x92FF7C", VA = "0x92FF7C", Slot = "12")]
		public override void PopulateCommandBuffer(CommandBuffer cb)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x930F84", Offset = "0x930F84", VA = "0x930F84")]
		public ScreenSpaceReflectionComponent()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public sealed class TaaComponent : PostProcessingComponentRenderTexture<AntialiasingModel>
	{
		[Token(Token = "0x2000203")]
		private static class Uniforms
		{
			[Token(Token = "0x4000E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static int _Jitter;

			[Token(Token = "0x4000E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static int _SharpenParameters;

			[Token(Token = "0x4000E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static int _FinalBlendParameters;

			[Token(Token = "0x4000E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static int _HistoryTex;

			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static int _MainTex;
		}

		[Token(Token = "0x4000E6B")]
		private const string k_ShaderString = "Hidden/Post FX/Temporal Anti-aliasing";

		[Token(Token = "0x4000E6C")]
		private const int k_SampleCount = 8;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly RenderBuffer[] m_MRT;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_SampleIndex;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_ResetHistory;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture m_HistoryTexture;

		[Token(Token = "0x1700013E")]
		public override bool active
		{
			[Token(Token = "0x6000D6A")]
			[Address(RVA = "0x932670", Offset = "0x932670", VA = "0x932670", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013F")]
		public Vector2 jitterVector
		{
			[Token(Token = "0x6000D6C")]
			[Address(RVA = "0x932708", Offset = "0x932708", VA = "0x932708")]
			[CompilerGenerated]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000D6D")]
			[Address(RVA = "0x932710", Offset = "0x932710", VA = "0x932710")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x932700", Offset = "0x932700", VA = "0x932700", Slot = "4")]
		public override DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x932718", Offset = "0x932718", VA = "0x932718")]
		public void ResetHistory()
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x932724", Offset = "0x932724", VA = "0x932724")]
		public void SetProjectionMatrix(Func<Vector2, Matrix4x4> jitteredFunc)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x93321C", Offset = "0x93321C", VA = "0x93321C")]
		public void Render(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x93375C", Offset = "0x93375C", VA = "0x93375C")]
		private float GetHaltonValue(int index, int radix)
		{
			return default(float);
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x9329BC", Offset = "0x9329BC", VA = "0x9329BC")]
		private Vector2 GenerateRandomOffset()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x932A50", Offset = "0x932A50", VA = "0x932A50")]
		private Matrix4x4 GetPerspectiveProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x932E84", Offset = "0x932E84", VA = "0x932E84")]
		private Matrix4x4 GetOrthographicProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x9337A0", Offset = "0x9337A0", VA = "0x9337A0", Slot = "7")]
		public override void OnDisable()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x93383C", Offset = "0x93383C", VA = "0x93383C")]
		public TaaComponent()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public sealed class UserLutComponent : PostProcessingComponentRenderTexture<UserLutModel>
	{
		[Token(Token = "0x2000205")]
		private static class Uniforms
		{
			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _UserLut;

			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _UserLut_Params;
		}

		[Token(Token = "0x17000140")]
		public override bool active
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x9339EC", Offset = "0x9339EC", VA = "0x9339EC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x933AF8", Offset = "0x933AF8", VA = "0x933AF8", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x933C38", Offset = "0x933C38", VA = "0x933C38")]
		public void OnGUI()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x933D7C", Offset = "0x933D7C", VA = "0x933D7C")]
		public UserLutComponent()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public sealed class VignetteComponent : PostProcessingComponentRenderTexture<VignetteModel>
	{
		[Token(Token = "0x2000207")]
		private static class Uniforms
		{
			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly int _Vignette_Color;

			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			internal static readonly int _Vignette_Center;

			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly int _Vignette_Settings;

			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal static readonly int _Vignette_Mask;

			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly int _Vignette_Opacity;
		}

		[Token(Token = "0x17000141")]
		public override bool active
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x933E60", Offset = "0x933E60", VA = "0x933E60", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x933EC8", Offset = "0x933EC8", VA = "0x933EC8", Slot = "10")]
		public override void Prepare(Material uberMaterial)
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x93415C", Offset = "0x93415C", VA = "0x93415C")]
		public VignetteComponent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000208")]
	public class AmbientOcclusionModel : PostProcessingModel
	{
		[Token(Token = "0x2000209")]
		public enum SampleCount
		{
			[Token(Token = "0x4000E80")]
			Lowest = 3,
			[Token(Token = "0x4000E81")]
			Low = 6,
			[Token(Token = "0x4000E82")]
			Medium = 10,
			[Token(Token = "0x4000E83")]
			High = 16
		}

		[Serializable]
		[Token(Token = "0x200020A")]
		public struct Settings
		{
			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Degree of darkness produced by the effect.")]
			[Range(0f, 4f)]
			public float intensity;

			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Radius of sample points, which affects extent of darkened areas.")]
			[Min(0.0001f)]
			public float radius;

			[Token(Token = "0x4000E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Number of sample points, which affects quality and performance.")]
			public SampleCount sampleCount;

			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Halves the resolution of the effect to increase performance at the cost of visual quality.")]
			public bool downsampling;

			[Token(Token = "0x4000E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			[Tooltip("Forces compatibility with Forward rendered objects when working with the Deferred rendering path.")]
			public bool forceForwardCompatibility;

			[Token(Token = "0x4000E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			[Tooltip("Enables the ambient-only mode in that the effect only affects ambient lighting. This mode is only available with the Deferred rendering path and HDR rendering.")]
			public bool ambientOnly;

			[Token(Token = "0x4000E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			[Tooltip("Toggles the use of a higher precision depth texture with the forward rendering path (may impact performances). Has no effect with the deferred rendering path.")]
			public bool highPrecision;

			[Token(Token = "0x17000143")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000D85")]
				[Address(RVA = "0x9342F8", Offset = "0x9342F8", VA = "0x9342F8")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000142")]
		public Settings settings
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x9342CC", Offset = "0x9342CC", VA = "0x9342CC")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x9342DC", Offset = "0x9342DC", VA = "0x9342DC")]
			set
			{
			}
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x9342E8", Offset = "0x9342E8", VA = "0x9342E8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x934310", Offset = "0x934310", VA = "0x934310")]
		public AmbientOcclusionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020B")]
	public class AntialiasingModel : PostProcessingModel
	{
		[Token(Token = "0x200020C")]
		public enum Method
		{
			[Token(Token = "0x4000E8D")]
			Fxaa,
			[Token(Token = "0x4000E8E")]
			Taa
		}

		[Token(Token = "0x200020D")]
		public enum FxaaPreset
		{
			[Token(Token = "0x4000E90")]
			ExtremePerformance,
			[Token(Token = "0x4000E91")]
			Performance,
			[Token(Token = "0x4000E92")]
			Default,
			[Token(Token = "0x4000E93")]
			Quality,
			[Token(Token = "0x4000E94")]
			ExtremeQuality
		}

		[Serializable]
		[Token(Token = "0x200020E")]
		public struct FxaaQualitySettings
		{
			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("The amount of desired sub-pixel aliasing removal. Effects the sharpeness of the output.")]
			public float subpixelAliasingRemovalAmount;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			[Range(0.063f, 0.333f)]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			[Range(0f, 0.0833f)]
			public float minimumRequiredLuminance;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaQualitySettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x200020F")]
		public struct FxaaConsoleSettings
		{
			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The amount of spread applied to the sampling coordinates while sampling for subpixel information.")]
			[Range(0.33f, 0.5f)]
			public float subpixelSpreadAmount;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(2f, 8f)]
			[Tooltip("This value dictates how sharp the edges in the image are kept; a higher value implies sharper edges.")]
			public float edgeSharpnessAmount;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0.125f, 0.25f)]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4000E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			[Range(0.04f, 0.06f)]
			public float minimumRequiredLuminance;

			[Token(Token = "0x4000E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FxaaConsoleSettings[] presets;
		}

		[Serializable]
		[Token(Token = "0x2000210")]
		public struct FxaaSettings
		{
			[Token(Token = "0x4000E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public FxaaPreset preset;

			[Token(Token = "0x17000145")]
			public static FxaaSettings defaultSettings
			{
				[Token(Token = "0x6000D8C")]
				[Address(RVA = "0x9345A0", Offset = "0x9345A0", VA = "0x9345A0")]
				get
				{
					return default(FxaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000211")]
		public struct TaaSettings
		{
			[Token(Token = "0x4000E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The diameter (in texels) inside which jitter samples are spread. Smaller values result in crisper but more aliased output, while larger values result in more stable but blurrier output.")]
			[Range(0.1f, 1f)]
			public float jitterSpread;

			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Controls the amount of sharpening applied to the color buffer.")]
			[Range(0f, 3f)]
			public float sharpen;

			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The blend coefficient for a stationary fragment. Controls the percentage of history sample blended into the final color.")]
			[Range(0f, 0.99f)]
			public float stationaryBlending;

			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("The blend coefficient for a fragment with significant motion. Controls the percentage of history sample blended into the final color.")]
			[Range(0f, 0.99f)]
			public float motionBlending;

			[Token(Token = "0x17000146")]
			public static TaaSettings defaultSettings
			{
				[Token(Token = "0x6000D8D")]
				[Address(RVA = "0x9345A8", Offset = "0x9345A8", VA = "0x9345A8")]
				get
				{
					return default(TaaSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000212")]
		public struct Settings
		{
			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Method method;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public FxaaSettings fxaaSettings;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TaaSettings taaSettings;

			[Token(Token = "0x17000147")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000D8E")]
				[Address(RVA = "0x934370", Offset = "0x934370", VA = "0x934370")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000144")]
		public Settings settings
		{
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0x93432C", Offset = "0x93432C", VA = "0x93432C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0x934340", Offset = "0x934340", VA = "0x934340")]
			set
			{
			}
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x934354", Offset = "0x934354", VA = "0x934354", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x93438C", Offset = "0x93438C", VA = "0x93438C")]
		public AntialiasingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000213")]
	public class BloomModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000214")]
		public struct BloomSettings
		{
			[Token(Token = "0x4000EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Min(0f)]
			[Tooltip("Strength of the bloom filter.")]
			public float intensity;

			[Token(Token = "0x4000EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Min(0f)]
			[Tooltip("Filters out pixels under this level of brightness.")]
			public float threshold;

			[Token(Token = "0x4000EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 1f)]
			[Tooltip("Makes transition between under/over-threshold gradual (0 = hard threshold, 1 = soft threshold).")]
			public float softKnee;

			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(1f, 7f)]
			[Tooltip("Changes extent of veiling effects in a screen resolution-independent fashion.")]
			public float radius;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Reduces flashing noise with an additional filter.")]
			public bool antiFlicker;

			[Token(Token = "0x17000149")]
			public float thresholdLinear
			{
				[Token(Token = "0x6000D94")]
				[Address(RVA = "0x934720", Offset = "0x934720", VA = "0x934720")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D93")]
				[Address(RVA = "0x934704", Offset = "0x934704", VA = "0x934704")]
				set
				{
				}
			}

			[Token(Token = "0x1700014A")]
			public static BloomSettings defaultSettings
			{
				[Token(Token = "0x6000D95")]
				[Address(RVA = "0x93472C", Offset = "0x93472C", VA = "0x93472C")]
				get
				{
					return default(BloomSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000215")]
		public struct LensDirtSettings
		{
			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Dirtiness texture to add smudges or dust to the lens.")]
			public Texture texture;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Min(0f)]
			[Tooltip("Amount of lens dirtiness.")]
			public float intensity;

			[Token(Token = "0x1700014B")]
			public static LensDirtSettings defaultSettings
			{
				[Token(Token = "0x6000D96")]
				[Address(RVA = "0x934748", Offset = "0x934748", VA = "0x934748")]
				get
				{
					return default(LensDirtSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000216")]
		public struct Settings
		{
			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BloomSettings bloom;

			[Token(Token = "0x4000EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public LensDirtSettings lensDirt;

			[Token(Token = "0x1700014C")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000D97")]
				[Address(RVA = "0x934644", Offset = "0x934644", VA = "0x934644")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000148")]
		public Settings settings
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0x9345C8", Offset = "0x9345C8", VA = "0x9345C8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x9345E0", Offset = "0x9345E0", VA = "0x9345E0")]
			set
			{
			}
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x934604", Offset = "0x934604", VA = "0x934604", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x9346B8", Offset = "0x9346B8", VA = "0x9346B8")]
		public BloomModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000217")]
	public class BuiltinDebugViewsModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000218")]
		public struct DepthSettings
		{
			[Token(Token = "0x4000EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("Scales the camera far plane before displaying the depth map.")]
			public float scale;

			[Token(Token = "0x1700014F")]
			public static DepthSettings defaultSettings
			{
				[Token(Token = "0x6000D9E")]
				[Address(RVA = "0x934848", Offset = "0x934848", VA = "0x934848")]
				get
				{
					return default(DepthSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000219")]
		public struct MotionVectorsSettings
		{
			[Token(Token = "0x4000EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("Opacity of the source render.")]
			public float sourceOpacity;

			[Token(Token = "0x4000EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Opacity of the per-pixel motion vector colors.")]
			[Range(0f, 1f)]
			public float motionImageOpacity;

			[Token(Token = "0x4000EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Because motion vectors are mainly very small vectors, you can use this setting to make them more visible.")]
			[Min(0f)]
			public float motionImageAmplitude;

			[Token(Token = "0x4000EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Opacity for the motion vector arrows.")]
			[Range(0f, 1f)]
			public float motionVectorsOpacity;

			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The arrow density on screen.")]
			[Range(8f, 64f)]
			public int motionVectorsResolution;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Min(0f)]
			[Tooltip("Tweaks the arrows length.")]
			public float motionVectorsAmplitude;

			[Token(Token = "0x17000150")]
			public static MotionVectorsSettings defaultSettings
			{
				[Token(Token = "0x6000D9F")]
				[Address(RVA = "0x934850", Offset = "0x934850", VA = "0x934850")]
				get
				{
					return default(MotionVectorsSettings);
				}
			}
		}

		[Token(Token = "0x200021A")]
		public enum Mode
		{
			[Token(Token = "0x4000EB9")]
			None,
			[Token(Token = "0x4000EBA")]
			Depth,
			[Token(Token = "0x4000EBB")]
			Normals,
			[Token(Token = "0x4000EBC")]
			MotionVectors,
			[Token(Token = "0x4000EBD")]
			AmbientOcclusion,
			[Token(Token = "0x4000EBE")]
			EyeAdaptation,
			[Token(Token = "0x4000EBF")]
			FocusPlane,
			[Token(Token = "0x4000EC0")]
			PreGradingLog,
			[Token(Token = "0x4000EC1")]
			LogLut,
			[Token(Token = "0x4000EC2")]
			UserLut
		}

		[Serializable]
		[Token(Token = "0x200021B")]
		public struct Settings
		{
			[Token(Token = "0x4000EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Mode mode;

			[Token(Token = "0x4000EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public DepthSettings depth;

			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MotionVectorsSettings motionVectors;

			[Token(Token = "0x17000151")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DA0")]
				[Address(RVA = "0x9347F4", Offset = "0x9347F4", VA = "0x9347F4")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700014D")]
		public Settings settings
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x934778", Offset = "0x934778", VA = "0x934778")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x934788", Offset = "0x934788", VA = "0x934788")]
			set
			{
			}
		}

		[Token(Token = "0x1700014E")]
		public bool willInterrupt
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x934798", Offset = "0x934798", VA = "0x934798")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x9347CC", Offset = "0x9347CC", VA = "0x9347CC", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x9347BC", Offset = "0x9347BC", VA = "0x9347BC")]
		public bool IsModeActive(Mode mode)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x93481C", Offset = "0x93481C", VA = "0x93481C")]
		public BuiltinDebugViewsModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021C")]
	public class ChromaticAberrationModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200021D")]
		public struct Settings
		{
			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Shift the hue of chromatic aberrations.")]
			public Texture2D spectralTexture;

			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0f, 1f)]
			[Tooltip("Amount of tangential distortion.")]
			public float intensity;

			[Token(Token = "0x17000153")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DA5")]
				[Address(RVA = "0x9348D4", Offset = "0x9348D4", VA = "0x9348D4")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000152")]
		public Settings settings
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x93486C", Offset = "0x93486C", VA = "0x93486C")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x934878", Offset = "0x934878", VA = "0x934878")]
			set
			{
			}
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x934888", Offset = "0x934888", VA = "0x934888", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x934908", Offset = "0x934908", VA = "0x934908")]
		public ChromaticAberrationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021E")]
	public class ColorGradingModel : PostProcessingModel
	{
		[Token(Token = "0x200021F")]
		public enum Tonemapper
		{
			[Token(Token = "0x4000ECD")]
			None,
			[Token(Token = "0x4000ECE")]
			ACES,
			[Token(Token = "0x4000ECF")]
			Neutral
		}

		[Serializable]
		[Token(Token = "0x2000220")]
		public struct TonemappingSettings
		{
			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Tonemapping algorithm to use at the end of the color grading process. Use \"Neutral\" if you need a customizable tonemapper or \"Filmic\" to give a standard filmic look to your scenes.")]
			public Tonemapper tonemapper;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(-0.1f, 0.1f)]
			public float neutralBlackIn;

			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(1f, 20f)]
			public float neutralWhiteIn;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(-0.09f, 0.1f)]
			public float neutralBlackOut;

			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(1f, 19f)]
			public float neutralWhiteOut;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0.1f, 20f)]
			public float neutralWhiteLevel;

			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(1f, 10f)]
			public float neutralWhiteClip;

			[Token(Token = "0x17000157")]
			public static TonemappingSettings defaultSettings
			{
				[Token(Token = "0x6000DAF")]
				[Address(RVA = "0x934B4C", Offset = "0x934B4C", VA = "0x934B4C")]
				get
				{
					return default(TonemappingSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000221")]
		public struct BasicSettings
		{
			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Adjusts the overall exposure of the scene in EV units. This is applied after HDR effect and right before tonemapping so it won't affect previous effects in the chain.")]
			public float postExposure;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(-100f, 100f)]
			[Tooltip("Sets the white balance to a custom color temperature.")]
			public float temperature;

			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Sets the white balance to compensate for a green or magenta tint.")]
			[Range(-100f, 100f)]
			public float tint;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(-180f, 180f)]
			[Tooltip("Shift the hue of all colors.")]
			public float hueShift;

			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 2f)]
			[Tooltip("Pushes the intensity of all colors.")]
			public float saturation;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0f, 2f)]
			[Tooltip("Expands or shrinks the overall range of tonal values.")]
			public float contrast;

			[Token(Token = "0x17000158")]
			public static BasicSettings defaultSettings
			{
				[Token(Token = "0x6000DB0")]
				[Address(RVA = "0x934B74", Offset = "0x934B74", VA = "0x934B74")]
				get
				{
					return default(BasicSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000222")]
		public struct ChannelMixerSettings
		{
			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 red;

			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 green;

			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 blue;

			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[HideInInspector]
			public int currentEditingChannel;

			[Token(Token = "0x17000159")]
			public static ChannelMixerSettings defaultSettings
			{
				[Token(Token = "0x6000DB1")]
				[Address(RVA = "0x934B84", Offset = "0x934B84", VA = "0x934B84")]
				get
				{
					return default(ChannelMixerSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000223")]
		public struct LogWheelsSettings
		{
			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Trackball("GetSlopeValue")]
			public Color slope;

			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Trackball("GetPowerValue")]
			public Color power;

			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Trackball("GetOffsetValue")]
			public Color offset;

			[Token(Token = "0x1700015A")]
			public static LogWheelsSettings defaultSettings
			{
				[Token(Token = "0x6000DB2")]
				[Address(RVA = "0x934B9C", Offset = "0x934B9C", VA = "0x934B9C")]
				get
				{
					return default(LogWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000224")]
		public struct LinearWheelsSettings
		{
			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Trackball("GetLiftValue")]
			public Color lift;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Trackball("GetGammaValue")]
			public Color gamma;

			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Trackball("GetGainValue")]
			public Color gain;

			[Token(Token = "0x1700015B")]
			public static LinearWheelsSettings defaultSettings
			{
				[Token(Token = "0x6000DB3")]
				[Address(RVA = "0x934BAC", Offset = "0x934BAC", VA = "0x934BAC")]
				get
				{
					return default(LinearWheelsSettings);
				}
			}
		}

		[Token(Token = "0x2000225")]
		public enum ColorWheelMode
		{
			[Token(Token = "0x4000EE8")]
			Linear,
			[Token(Token = "0x4000EE9")]
			Log
		}

		[Serializable]
		[Token(Token = "0x2000226")]
		public struct ColorWheelsSettings
		{
			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorWheelMode mode;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[TrackballGroup]
			public LogWheelsSettings log;

			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[TrackballGroup]
			public LinearWheelsSettings linear;

			[Token(Token = "0x1700015C")]
			public static ColorWheelsSettings defaultSettings
			{
				[Token(Token = "0x6000DB4")]
				[Address(RVA = "0x934BBC", Offset = "0x934BBC", VA = "0x934BBC")]
				get
				{
					return default(ColorWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000227")]
		public struct CurvesSettings
		{
			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ColorGradingCurve master;

			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public ColorGradingCurve red;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ColorGradingCurve green;

			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ColorGradingCurve blue;

			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ColorGradingCurve hueVShue;

			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ColorGradingCurve hueVSsat;

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ColorGradingCurve satVSsat;

			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public ColorGradingCurve lumVSsat;

			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[HideInInspector]
			public int e_CurrentEditingCurve;

			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[HideInInspector]
			public bool e_CurveY;

			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
			[HideInInspector]
			public bool e_CurveR;

			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
			[HideInInspector]
			public bool e_CurveG;

			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
			[HideInInspector]
			public bool e_CurveB;

			[Token(Token = "0x1700015D")]
			public static CurvesSettings defaultSettings
			{
				[Token(Token = "0x6000DB5")]
				[Address(RVA = "0x934BE4", Offset = "0x934BE4", VA = "0x934BE4")]
				get
				{
					return default(CurvesSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000228")]
		public struct Settings
		{
			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TonemappingSettings tonemapping;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public BasicSettings basic;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public ChannelMixerSettings channelMixer;

			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public ColorWheelsSettings colorWheels;

			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public CurvesSettings curves;

			[Token(Token = "0x1700015E")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DB6")]
				[Address(RVA = "0x934A20", Offset = "0x934A20", VA = "0x934A20")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000154")]
		public Settings settings
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x934960", Offset = "0x934960", VA = "0x934960")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x934970", Offset = "0x934970", VA = "0x934970")]
			set
			{
			}
		}

		[Token(Token = "0x17000155")]
		public bool isDirty
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x9349A4", Offset = "0x9349A4", VA = "0x9349A4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x9349AC", Offset = "0x9349AC", VA = "0x9349AC")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000156")]
		public RenderTexture bakedLut
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x9349B8", Offset = "0x9349B8", VA = "0x9349B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x9349C0", Offset = "0x9349C0", VA = "0x9349C0")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x9349D0", Offset = "0x9349D0", VA = "0x9349D0", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x934AF4", Offset = "0x934AF4", VA = "0x934AF4", Slot = "5")]
		public override void OnValidate()
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x934B00", Offset = "0x934B00", VA = "0x934B00")]
		public ColorGradingModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000229")]
	public class DepthOfFieldModel : PostProcessingModel
	{
		[Token(Token = "0x200022A")]
		public enum KernelSize
		{
			[Token(Token = "0x4000F01")]
			Small,
			[Token(Token = "0x4000F02")]
			Medium,
			[Token(Token = "0x4000F03")]
			Large,
			[Token(Token = "0x4000F04")]
			VeryLarge
		}

		[Serializable]
		[Token(Token = "0x200022B")]
		public struct Settings
		{
			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Min(0.1f)]
			[Tooltip("Distance to the point of focus.")]
			public float focusDistance;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0.05f, 32f)]
			[Tooltip("Ratio of aperture (known as f-stop or f-number). The smaller the value is, the shallower the depth of field is.")]
			public float aperture;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(1f, 300f)]
			[Tooltip("Distance between the lens and the film. The larger the value is, the shallower the depth of field is.")]
			public float focalLength;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Calculate the focal length automatically from the field-of-view value set on the camera. Using this setting isn't recommended.")]
			public bool useCameraFov;

			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Convolution kernel size of the bokeh filter, which determines the maximum radius of bokeh. It also affects the performance (the larger the kernel is, the longer the GPU time is required).")]
			public KernelSize kernelSize;

			[Token(Token = "0x17000160")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DBB")]
				[Address(RVA = "0x93534C", Offset = "0x93534C", VA = "0x93534C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700015F")]
		public Settings settings
		{
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0x9352F8", Offset = "0x9352F8", VA = "0x9352F8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0x93530C", Offset = "0x93530C", VA = "0x93530C")]
			set
			{
			}
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x935320", Offset = "0x935320", VA = "0x935320", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x935378", Offset = "0x935378", VA = "0x935378")]
		public DepthOfFieldModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022C")]
	public class DitheringModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200022D")]
		public struct Settings
		{
			[Token(Token = "0x17000162")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DC0")]
				[Address(RVA = "0x9353C0", Offset = "0x9353C0", VA = "0x9353C0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000161")]
		public Settings settings
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0x9353A8", Offset = "0x9353A8", VA = "0x9353A8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DBD")]
			[Address(RVA = "0x9353B0", Offset = "0x9353B0", VA = "0x9353B0")]
			set
			{
			}
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x9353B8", Offset = "0x9353B8", VA = "0x9353B8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x9353C8", Offset = "0x9353C8", VA = "0x9353C8")]
		public DitheringModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022E")]
	public class EyeAdaptationModel : PostProcessingModel
	{
		[Token(Token = "0x200022F")]
		public enum EyeAdaptationType
		{
			[Token(Token = "0x4000F0D")]
			Progressive,
			[Token(Token = "0x4000F0E")]
			Fixed
		}

		[Serializable]
		[Token(Token = "0x2000230")]
		public struct Settings
		{
			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Filters the dark part of the histogram when computing the average luminance to avoid very dark pixels from contributing to the auto exposure. Unit is in percent.")]
			[Range(1f, 99f)]
			public float lowPercent;

			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(1f, 99f)]
			[Tooltip("Filters the bright part of the histogram when computing the average luminance to avoid very dark pixels from contributing to the auto exposure. Unit is in percent.")]
			public float highPercent;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Minimum average luminance to consider for auto exposure (in EV).")]
			public float minLuminance;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Maximum average luminance to consider for auto exposure (in EV).")]
			public float maxLuminance;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Min(0f)]
			[Tooltip("Exposure bias. Use this to offset the global exposure of the scene.")]
			public float keyValue;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Set this to true to let Unity handle the key value automatically based on average luminance.")]
			public bool dynamicKeyValue;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Use \"Progressive\" if you want the auto exposure to be animated. Use \"Fixed\" otherwise.")]
			public EyeAdaptationType adaptationType;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Min(0f)]
			[Tooltip("Adaptation speed from a dark to a light environment.")]
			public float speedUp;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Min(0f)]
			[Tooltip("Adaptation speed from a light to a dark environment.")]
			public float speedDown;

			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(-16f, -1f)]
			[Tooltip("Lower bound for the brightness range of the generated histogram (in EV). The bigger the spread between min & max, the lower the precision will be.")]
			public int logMin;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(1f, 16f)]
			[Tooltip("Upper bound for the brightness range of the generated histogram (in EV). The bigger the spread between min & max, the lower the precision will be.")]
			public int logMax;

			[Token(Token = "0x17000164")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DC5")]
				[Address(RVA = "0x93544C", Offset = "0x93544C", VA = "0x93544C")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000163")]
		public Settings settings
		{
			[Token(Token = "0x6000DC1")]
			[Address(RVA = "0x9353D4", Offset = "0x9353D4", VA = "0x9353D4")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0x9353EC", Offset = "0x9353EC", VA = "0x9353EC")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x93540C", Offset = "0x93540C", VA = "0x93540C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x935490", Offset = "0x935490", VA = "0x935490")]
		public EyeAdaptationModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000231")]
	public class FogModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000232")]
		public struct Settings
		{
			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Should the fog affect the skybox?")]
			public bool excludeSkybox;

			[Token(Token = "0x17000166")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DCA")]
				[Address(RVA = "0x9354F0", Offset = "0x9354F0", VA = "0x9354F0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000165")]
		public Settings settings
		{
			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0x9354D4", Offset = "0x9354D4", VA = "0x9354D4")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0x9354DC", Offset = "0x9354DC", VA = "0x9354DC")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x9354E4", Offset = "0x9354E4", VA = "0x9354E4", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x9354F8", Offset = "0x9354F8", VA = "0x9354F8")]
		public FogModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000233")]
	public class GrainModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000234")]
		public struct Settings
		{
			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Enable the use of colored grain.")]
			public bool colored;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 1f)]
			[Tooltip("Grain strength. Higher means more visible grain.")]
			public float intensity;

			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Grain particle size.")]
			[Range(0.3f, 3f)]
			public float size;

			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 1f)]
			[Tooltip("Controls the noisiness response curve based on scene luminance. Lower values mean less noise in dark areas.")]
			public float luminanceContribution;

			[Token(Token = "0x17000168")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DCF")]
				[Address(RVA = "0x935534", Offset = "0x935534", VA = "0x935534")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000167")]
		public Settings settings
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0x935508", Offset = "0x935508", VA = "0x935508")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0x935518", Offset = "0x935518", VA = "0x935518")]
			set
			{
			}
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x935524", Offset = "0x935524", VA = "0x935524", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x93554C", Offset = "0x93554C", VA = "0x93554C")]
		public GrainModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000235")]
	public class MotionBlurModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x2000236")]
		public struct Settings
		{
			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The angle of rotary shutter. Larger values give longer exposure.")]
			[Range(0f, 360f)]
			public float shutterAngle;

			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("The amount of sample points, which affects quality and performances.")]
			[Range(4f, 32f)]
			public int sampleCount;

			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The strength of multiple frame blending. The opacity of preceding frames are determined from this coefficient and time differences.")]
			[Range(0f, 1f)]
			public float frameBlending;

			[Token(Token = "0x1700016A")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DD4")]
				[Address(RVA = "0x935590", Offset = "0x935590", VA = "0x935590")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x17000169")]
		public Settings settings
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x935560", Offset = "0x935560", VA = "0x935560")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0x935570", Offset = "0x935570", VA = "0x935570")]
			set
			{
			}
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x93557C", Offset = "0x93557C", VA = "0x93557C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x9355A0", Offset = "0x9355A0", VA = "0x9355A0")]
		public MotionBlurModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000237")]
	public class ScreenSpaceReflectionModel : PostProcessingModel
	{
		[Token(Token = "0x2000238")]
		public enum SSRResolution
		{
			[Token(Token = "0x4000F27")]
			High = 0,
			[Token(Token = "0x4000F28")]
			Low = 2
		}

		[Token(Token = "0x2000239")]
		public enum SSRReflectionBlendType
		{
			[Token(Token = "0x4000F2A")]
			PhysicallyBased,
			[Token(Token = "0x4000F2B")]
			Additive
		}

		[Serializable]
		[Token(Token = "0x200023A")]
		public struct IntensitySettings
		{
			[Token(Token = "0x4000F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 2f)]
			[Tooltip("Nonphysical multiplier for the SSR reflections. 1.0 is physically based.")]
			public float reflectionMultiplier;

			[Token(Token = "0x4000F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("How far away from the maxDistance to begin fading SSR.")]
			[Range(0f, 1000f)]
			public float fadeDistance;

			[Token(Token = "0x4000F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Amplify Fresnel fade out. Increase if floor reflections look good close to the surface and bad farther 'under' the floor.")]
			[Range(0f, 1f)]
			public float fresnelFade;

			[Token(Token = "0x4000F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Higher values correspond to a faster Fresnel fade as the reflection changes from the grazing angle.")]
			[Range(0.1f, 10f)]
			public float fresnelFadePower;
		}

		[Serializable]
		[Token(Token = "0x200023B")]
		public struct ReflectionSettings
		{
			[Token(Token = "0x4000F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("How the reflections are blended into the render.")]
			public SSRReflectionBlendType blendType;

			[Token(Token = "0x4000F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Half resolution SSRR is much faster, but less accurate.")]
			public SSRResolution reflectionQuality;

			[Token(Token = "0x4000F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Maximum reflection distance in world units.")]
			[Range(0.1f, 300f)]
			public float maxDistance;

			[Token(Token = "0x4000F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(16f, 1024f)]
			[Tooltip("Max raytracing length.")]
			public int iterationCount;

			[Token(Token = "0x4000F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Log base 2 of ray tracing coarse step size. Higher traces farther, lower gives better quality silhouettes.")]
			[Range(1f, 16f)]
			public int stepSize;

			[Token(Token = "0x4000F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Typical thickness of columns, walls, furniture, and other objects that reflection rays might pass behind.")]
			[Range(0.01f, 10f)]
			public float widthModifier;

			[Token(Token = "0x4000F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Blurriness of reflections.")]
			[Range(0.1f, 8f)]
			public float reflectionBlur;

			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Disable for a performance gain in scenes where most glossy objects are horizontal, like floors, water, and tables. Leave on for scenes with glossy vertical objects.")]
			public bool reflectBackfaces;
		}

		[Serializable]
		[Token(Token = "0x200023C")]
		public struct ScreenEdgeMask
		{
			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("Higher = fade out SSRR near the edge of the screen so that reflections don't pop under camera motion.")]
			public float intensity;
		}

		[Serializable]
		[Token(Token = "0x200023D")]
		public struct Settings
		{
			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public ReflectionSettings reflection;

			[Token(Token = "0x4000F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IntensitySettings intensity;

			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ScreenEdgeMask screenEdgeMask;

			[Token(Token = "0x1700016C")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DD9")]
				[Address(RVA = "0x935648", Offset = "0x935648", VA = "0x935648")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700016B")]
		public Settings settings
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0x9355B8", Offset = "0x9355B8", VA = "0x9355B8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0x9355D8", Offset = "0x9355D8", VA = "0x9355D8")]
			set
			{
			}
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x9355F8", Offset = "0x9355F8", VA = "0x9355F8", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x93569C", Offset = "0x93569C", VA = "0x93569C")]
		public ScreenSpaceReflectionModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023E")]
	public class UserLutModel : PostProcessingModel
	{
		[Serializable]
		[Token(Token = "0x200023F")]
		public struct Settings
		{
			[Token(Token = "0x4000F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Custom lookup texture (strip format, e.g. 256x16).")]
			public Texture2D lut;

			[Token(Token = "0x4000F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Blending factor.")]
			[Range(0f, 1f)]
			public float contribution;

			[Token(Token = "0x1700016E")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DDE")]
				[Address(RVA = "0x935754", Offset = "0x935754", VA = "0x935754")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700016D")]
		public Settings settings
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0x9356F0", Offset = "0x9356F0", VA = "0x9356F0")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0x9356FC", Offset = "0x9356FC", VA = "0x9356FC")]
			set
			{
			}
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x93570C", Offset = "0x93570C", VA = "0x93570C", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x935784", Offset = "0x935784", VA = "0x935784")]
		public UserLutModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000240")]
	public class VignetteModel : PostProcessingModel
	{
		[Token(Token = "0x2000241")]
		public enum Mode
		{
			[Token(Token = "0x4000F41")]
			Classic,
			[Token(Token = "0x4000F42")]
			Masked
		}

		[Serializable]
		[Token(Token = "0x2000242")]
		public struct Settings
		{
			[Token(Token = "0x4000F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Use the \"Classic\" mode for parametric controls. Use the \"Masked\" mode to use your own texture mask.")]
			public Mode mode;

			[Token(Token = "0x4000F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Vignette color. Use the alpha channel for transparency.")]
			[ColorUsage(false)]
			public Color color;

			[Token(Token = "0x4000F45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Sets the vignette center point (screen center is [0.5,0.5]).")]
			public Vector2 center;

			[Token(Token = "0x4000F46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(0f, 1f)]
			[Tooltip("Amount of vignetting on screen.")]
			public float intensity;

			[Token(Token = "0x4000F47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0.01f, 1f)]
			[Tooltip("Smoothness of the vignette borders.")]
			public float smoothness;

			[Token(Token = "0x4000F48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(0f, 1f)]
			[Tooltip("Lower values will make a square-ish vignette.")]
			public float roundness;

			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("A black and white mask to use as a vignette.")]
			public Texture mask;

			[Token(Token = "0x4000F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Range(0f, 1f)]
			[Tooltip("Mask opacity.")]
			public float opacity;

			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("Should the vignette be perfectly round or be dependent on the current aspect ratio?")]
			public bool rounded;

			[Token(Token = "0x17000170")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DE3")]
				[Address(RVA = "0x9358C0", Offset = "0x9358C0", VA = "0x9358C0")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings m_Settings;

		[Token(Token = "0x1700016F")]
		public Settings settings
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x9357D8", Offset = "0x9357D8", VA = "0x9357D8")]
			get
			{
				return default(Settings);
			}
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0x9357F8", Offset = "0x9357F8", VA = "0x9357F8")]
			set
			{
			}
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x935824", Offset = "0x935824", VA = "0x935824", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x935940", Offset = "0x935940", VA = "0x935940")]
		public VignetteModel()
		{
		}
	}
	[Token(Token = "0x2000243")]
	[RequireComponent(typeof(Camera))]
	[ImageEffectAllowedInSceneView]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	[AddComponentMenu("Effects/Post-Processing Behaviour", -1)]
	public class PostProcessingBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PostProcessingProfile profile;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Func<Vector2, Matrix4x4> jitteredMatrixFunc;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<Type, KeyValuePair<CameraEvent, CommandBuffer>> m_CommandBuffers;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<PostProcessingComponentBase> m_Components;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<PostProcessingComponentBase, bool> m_ComponentStates;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MaterialFactory m_MaterialFactory;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTextureFactory m_RenderTextureFactory;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PostProcessingContext m_Context;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Camera m_Camera;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PostProcessingProfile m_PreviousProfile;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool m_RenderingInSceneView;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BuiltinDebugViewsComponent m_DebugViews;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AmbientOcclusionComponent m_AmbientOcclusion;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ScreenSpaceReflectionComponent m_ScreenSpaceReflection;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FogComponent m_FogComponent;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MotionBlurComponent m_MotionBlur;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private TaaComponent m_Taa;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private EyeAdaptationComponent m_EyeAdaptation;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DepthOfFieldComponent m_DepthOfField;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BloomComponent m_Bloom;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private ChromaticAberrationComponent m_ChromaticAberration;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ColorGradingComponent m_ColorGrading;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private UserLutComponent m_UserLut;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private GrainComponent m_Grain;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private VignetteComponent m_Vignette;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private DitheringComponent m_Dithering;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private FxaaComponent m_Fxaa;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private List<PostProcessingComponentBase> m_ComponentsToEnable;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<PostProcessingComponentBase> m_ComponentsToDisable;

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x9359E8", Offset = "0x9359E8", VA = "0x9359E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x936414", Offset = "0x936414", VA = "0x936414")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x936FAC", Offset = "0x936FAC", VA = "0x936FAC")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x9370E4", Offset = "0x9370E4", VA = "0x9370E4")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x9371E8", Offset = "0x9371E8", VA = "0x9371E8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x937A80", Offset = "0x937A80", VA = "0x937A80")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x937C10", Offset = "0x937C10", VA = "0x937C10")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x937FB4", Offset = "0x937FB4", VA = "0x937FB4")]
		public void ResetTemporalEffects()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x936B68", Offset = "0x936B68", VA = "0x936B68")]
		private void CheckObservers()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x9369F4", Offset = "0x9369F4", VA = "0x9369F4")]
		private void DisableComponents()
		{
		}

		[Token(Token = "0x6000DEE")]
		private CommandBuffer AddCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x6000DEF")]
		private void RemoveCommandBuffer<T>() where T : PostProcessingModel
		{
		}

		[Token(Token = "0x6000DF0")]
		private CommandBuffer GetCommandBuffer<T>(CameraEvent evt, string name) where T : PostProcessingModel
		{
			return null;
		}

		[Token(Token = "0x6000DF1")]
		private void TryExecuteCommandBuffer<T>(PostProcessingComponentCommandBuffer<T> component) where T : PostProcessingModel
		{
		}

		[Token(Token = "0x6000DF2")]
		private bool TryPrepareUberImageEffect<T>(PostProcessingComponentRenderTexture<T> component, Material material) where T : PostProcessingModel
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF3")]
		private T AddComponent<T>(T component) where T : PostProcessingComponentBase
		{
			return null;
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x937FF4", Offset = "0x937FF4", VA = "0x937FF4")]
		public PostProcessingBehaviour()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public abstract class PostProcessingComponentBase
	{
		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PostProcessingContext context;

		[Token(Token = "0x17000171")]
		public abstract bool active
		{
			[Token(Token = "0x6000DF6")]
			get;
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x9380AC", Offset = "0x9380AC", VA = "0x9380AC", Slot = "4")]
		public virtual DepthTextureMode GetCameraFlags()
		{
			return default(DepthTextureMode);
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x9380B4", Offset = "0x9380B4", VA = "0x9380B4", Slot = "6")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x9380B8", Offset = "0x9380B8", VA = "0x9380B8", Slot = "7")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000DF9")]
		public abstract PostProcessingModel GetModel();

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x9380BC", Offset = "0x9380BC", VA = "0x9380BC")]
		protected PostProcessingComponentBase()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public abstract class PostProcessingComponent<T> : PostProcessingComponentBase where T : PostProcessingModel
	{
		[Token(Token = "0x17000172")]
		public T model
		{
			[Token(Token = "0x6000DFB")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DFC")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6000DFD")]
		public virtual void Init(PostProcessingContext pcontext, T pmodel)
		{
		}

		[Token(Token = "0x6000DFE")]
		public override PostProcessingModel GetModel()
		{
			return null;
		}

		[Token(Token = "0x6000DFF")]
		protected PostProcessingComponent()
		{
		}
	}
	[Token(Token = "0x2000246")]
	public abstract class PostProcessingComponentCommandBuffer<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x6000E00")]
		public abstract CameraEvent GetCameraEvent();

		[Token(Token = "0x6000E01")]
		public abstract string GetName();

		[Token(Token = "0x6000E02")]
		public abstract void PopulateCommandBuffer(CommandBuffer cb);

		[Token(Token = "0x6000E03")]
		protected PostProcessingComponentCommandBuffer()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public abstract class PostProcessingComponentRenderTexture<T> : PostProcessingComponent<T> where T : PostProcessingModel
	{
		[Token(Token = "0x6000E04")]
		public virtual void Prepare(Material material)
		{
		}

		[Token(Token = "0x6000E05")]
		protected PostProcessingComponentRenderTexture()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class PostProcessingContext
	{
		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PostProcessingProfile profile;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera camera;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MaterialFactory materialFactory;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RenderTextureFactory renderTextureFactory;

		[Token(Token = "0x17000173")]
		public bool interrupted
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x9380C4", Offset = "0x9380C4", VA = "0x9380C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E07")]
			[Address(RVA = "0x9380CC", Offset = "0x9380CC", VA = "0x9380CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000174")]
		public bool isGBufferAvailable
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0x9380E4", Offset = "0x9380E4", VA = "0x9380E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000175")]
		public bool isHdr
		{
			[Token(Token = "0x6000E0B")]
			[Address(RVA = "0x93810C", Offset = "0x93810C", VA = "0x93810C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000176")]
		public int width
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0x932FE0", Offset = "0x932FE0", VA = "0x932FE0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000177")]
		public int height
		{
			[Token(Token = "0x6000E0D")]
			[Address(RVA = "0x932FFC", Offset = "0x932FFC", VA = "0x932FFC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000178")]
		public Rect viewport
		{
			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x933D60", Offset = "0x933D60", VA = "0x933D60")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x9380D8", Offset = "0x9380D8", VA = "0x9380D8")]
		public void Interrupt()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x9369A0", Offset = "0x9369A0", VA = "0x9369A0")]
		public PostProcessingContext Reset()
		{
			return null;
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x93640C", Offset = "0x93640C", VA = "0x93640C")]
		public PostProcessingContext()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000249")]
	public abstract class PostProcessingModel
	{
		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[GetSet("enabled")]
		private bool m_Enabled;

		[Token(Token = "0x17000179")]
		public bool enabled
		{
			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x938128", Offset = "0x938128", VA = "0x938128")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E11")]
			[Address(RVA = "0x938130", Offset = "0x938130", VA = "0x938130")]
			set
			{
			}
		}

		[Token(Token = "0x6000E12")]
		public abstract void Reset();

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x93814C", Offset = "0x93814C", VA = "0x93814C", Slot = "5")]
		public virtual void OnValidate()
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x934324", Offset = "0x934324", VA = "0x934324")]
		protected PostProcessingModel()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class PostProcessingProfile : ScriptableObject
	{
		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BuiltinDebugViewsModel debugViews;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FogModel fog;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AntialiasingModel antialiasing;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AmbientOcclusionModel ambientOcclusion;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ScreenSpaceReflectionModel screenSpaceReflection;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DepthOfFieldModel depthOfField;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MotionBlurModel motionBlur;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public EyeAdaptationModel eyeAdaptation;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BloomModel bloom;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public ColorGradingModel colorGrading;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public UserLutModel userLut;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ChromaticAberrationModel chromaticAberration;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GrainModel grain;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public VignetteModel vignette;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public DitheringModel dithering;

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x938150", Offset = "0x938150", VA = "0x938150")]
		public PostProcessingProfile()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200024B")]
	public sealed class ColorGradingCurve
	{
		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_Loop;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_ZeroValue;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_Range;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationCurve m_InternalLoopingCurve;

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x935244", Offset = "0x935244", VA = "0x935244")]
		public ColorGradingCurve(AnimationCurve curve, float zeroValue, bool loop, Vector2 bounds)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x938618", Offset = "0x938618", VA = "0x938618")]
		public void Cache()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x938800", Offset = "0x938800", VA = "0x938800")]
		public float Evaluate(float t)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200024C")]
	public static class GraphicsUtils
	{
		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Texture2D s_WhiteTexture;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Mesh s_Quad;

		[Token(Token = "0x1700017A")]
		public static bool isLinearColorSpace
		{
			[Token(Token = "0x6000E19")]
			[Address(RVA = "0x937998", Offset = "0x937998", VA = "0x937998")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017B")]
		public static bool supportsDX11
		{
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x93887C", Offset = "0x93887C", VA = "0x93887C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017C")]
		public static Texture2D whiteTexture
		{
			[Token(Token = "0x6000E1B")]
			[Address(RVA = "0x937868", Offset = "0x937868", VA = "0x937868")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017D")]
		public static Mesh quad
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x9388A8", Offset = "0x9388A8", VA = "0x9388A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x93365C", Offset = "0x93365C", VA = "0x93365C")]
		public static void Blit(Material material, int pass)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x938B18", Offset = "0x938B18", VA = "0x938B18")]
		public static void ClearAndBlit(Texture source, RenderTexture destination, Material material, int pass, bool clearColor = true, bool clearDepth = false)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x938CB4", Offset = "0x938CB4", VA = "0x938CB4")]
		public static void Destroy(Object obj)
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x937F6C", Offset = "0x937F6C", VA = "0x937F6C")]
		public static void Dispose()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public sealed class MaterialFactory : IDisposable
	{
		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, Material> m_Materials;

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x9362FC", Offset = "0x9362FC", VA = "0x9362FC")]
		public MaterialFactory()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x933018", Offset = "0x933018", VA = "0x933018")]
		public Material Get(string shaderName)
		{
			return null;
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0x937E90", Offset = "0x937E90", VA = "0x937E90", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public sealed class RenderTextureFactory : IDisposable
	{
		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private HashSet<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0x936384", Offset = "0x936384", VA = "0x936384")]
		public RenderTextureFactory()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0x937750", Offset = "0x937750", VA = "0x937750")]
		public RenderTexture Get(RenderTexture baseRenderTexture)
		{
			return null;
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0x938D3C", Offset = "0x938D3C", VA = "0x938D3C")]
		public RenderTexture Get(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, RenderTextureReadWrite rw = RenderTextureReadWrite.Default, FilterMode filterMode = FilterMode.Bilinear, TextureWrapMode wrapMode = TextureWrapMode.Clamp, string name = "FactoryTempTexture")
		{
			return null;
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x938E20", Offset = "0x938E20", VA = "0x938E20")]
		public void Release(RenderTexture rt)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0x9379B4", Offset = "0x9379B4", VA = "0x9379B4")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x937F68", Offset = "0x937F68", VA = "0x937F68", Slot = "4")]
		public void Dispose()
		{
		}
	}
}
namespace UnityEngine.XR.Interaction.Toolkit
{
	[Token(Token = "0x200024F")]
	public interface ILineRenderable
	{
		[Token(Token = "0x6000E2A")]
		bool GetLinePoints(ref Vector3[] linePoints, out int numPoints);

		[Token(Token = "0x6000E2B")]
		bool TryGetHitInfo(out Vector3 position, out Vector3 normal, out int positionInLine, out bool isValidTarget);
	}
	[Token(Token = "0x2000250")]
	[RequireComponent(typeof(LineRenderer))]
	[DefaultExecutionOrder(100)]
	[AddComponentMenu("XR/Visual/XR Interactor Line Visual", 11)]
	[DisallowMultipleComponent]
	public class XRInteractorLineVisual_X : XRInteractorLineVisual
	{
		[Token(Token = "0x4000F89")]
		private const float k_MinLineWidth = 0.0001f;

		[Token(Token = "0x4000F8A")]
		private const float k_MaxLineWidth = 0.05f;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		[Range(0.0001f, 0.05f)]
		private float m_LineWidth;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[SerializeField]
		private bool m_OverrideInteractorLineLength;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private float m_LineLength;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private AnimationCurve m_WidthCurve;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private Gradient m_ValidColorGradient;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private Gradient m_InvalidColorGradient;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private Gradient m_BlockedColorGradient;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private bool m_TreatSelectionAsValidState;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		[SerializeField]
		private bool m_SmoothMovement;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[SerializeField]
		private float m_FollowTightness;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[SerializeField]
		private float m_SnapThresholdDistance;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		private GameObject m_Reticle;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private GameObject m_BlockedReticle;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[SerializeField]
		private bool m_StopLineAtFirstRaycastHit;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
		[SerializeField]
		private bool m_StopLineAtSelection;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A2")]
		[SerializeField]
		private bool m_SnapEndpointIfAvailable;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Vector3 m_ReticlePos;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Vector3 m_ReticleNormal;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private int m_EndPositionInLine;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool m_SnapCurve;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
		private bool m_PerformSetup;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private GameObject m_ReticleToUse;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private LineRenderer m_LineRenderer;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private ILineRenderable m_LineRenderable;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private IXRSelectInteractor m_LineRenderableAsSelectInteractor;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private XRBaseInteractor m_LineRenderableAsBaseInteractor;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private XRRayInteractor m_LineRenderableAsRayInteractor;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Vector3[] m_TargetPoints;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private int m_NoTargetPoints;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3[] m_RenderPoints;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private int m_NoRenderPoints;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Vector3[] m_PreviousRenderPoints;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private int m_NoPreviousRenderPoints;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private readonly Vector3[] m_ClearArray;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private GameObject m_CustomReticle;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private bool m_CustomReticleAttached;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x239")]
		private bool m_Snapping;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private XRInteractableSnapVolume m_XRInteractableSnapVolume;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private int m_NumberOfSegmentsForBendableLine;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Vector3[] m_LineRenderablePoints;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Vector3 m_CurrentHitPoint;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		private bool m_HasHitInfo;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x265")]
		private bool m_ValidHit;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Vector3 m_CurrentRenderEndpoint;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Collider m_PreviousCollider;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private XROrigin m_XROrigin;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static XROrigin s_XROriginCache;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public Vector3 targetPos;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public Transform targetTran;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public bool hasTarget;

		[Token(Token = "0x1700017E")]
		public new float lineWidth
		{
			[Token(Token = "0x6000E2C")]
			[Address(RVA = "0x938F5C", Offset = "0x938F5C", VA = "0x938F5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0x938F64", Offset = "0x938F64", VA = "0x938F64")]
			set
			{
			}
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x938F74", Offset = "0x938F74", VA = "0x938F74")]
		protected new void Reset()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x938F78", Offset = "0x938F78", VA = "0x938F78")]
		protected new void Awake()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x939564", Offset = "0x939564", VA = "0x939564")]
		protected new void OnEnable()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x939650", Offset = "0x939650", VA = "0x939650")]
		protected new void OnDisable()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x9394B4", Offset = "0x9394B4", VA = "0x9394B4")]
		private void ClearLineRenderer()
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x939874", Offset = "0x939874", VA = "0x939874")]
		private void OnBeforeRenderLineVisual()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x93AE40", Offset = "0x93AE40", VA = "0x93AE40")]
		private bool UpdateCurrentHitInfo()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x93B308", Offset = "0x93B308", VA = "0x93B308")]
		private void CalculateSnapRenderPoints()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x939878", Offset = "0x939878", VA = "0x939878")]
		internal void UpdateLineVisual()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x9394FC", Offset = "0x9394FC", VA = "0x9394FC")]
		private void UpdateSettings()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x939770", Offset = "0x939770", VA = "0x939770")]
		private bool TryFindLineRenderer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x93915C", Offset = "0x93915C", VA = "0x93915C")]
		private void FindXROrigin()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x939280", Offset = "0x939280", VA = "0x939280")]
		private void SetupReticle()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x9393BC", Offset = "0x9393BC", VA = "0x9393BC")]
		private void SetupBlockedReticle()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x93B5A0", Offset = "0x93B5A0", VA = "0x93B5A0")]
		public XRInteractorLineVisual_X()
		{
		}
	}
	[Token(Token = "0x2000251")]
	[DisallowMultipleComponent]
	[AddComponentMenu("XR/XR Ray Interactor", 11)]
	public class XRRayInteractor_X : XRRayInteractor, ILineRenderable, IUIInteractor
	{
		[Token(Token = "0x2000252")]
		private struct SamplePoint
		{
			[Token(Token = "0x1700018A")]
			public Vector3 position
			{
				[Token(Token = "0x6000E76")]
				[Address(RVA = "0x93EF7C", Offset = "0x93EF7C", VA = "0x93EF7C")]
				[CompilerGenerated]
				readonly get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000E77")]
				[Address(RVA = "0x93EF88", Offset = "0x93EF88", VA = "0x93EF88")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700018B")]
			public float parameter
			{
				[Token(Token = "0x6000E78")]
				[Address(RVA = "0x93EF94", Offset = "0x93EF94", VA = "0x93EF94")]
				[CompilerGenerated]
				readonly get
				{
					return default(float);
				}
				[Token(Token = "0x6000E79")]
				[Address(RVA = "0x93EF9C", Offset = "0x93EF9C", VA = "0x93EF9C")]
				[CompilerGenerated]
				set
				{
				}
			}
		}

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public Vector3 targetPos;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public Transform targetTran;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public bool hasTarget;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<IXRInteractable> s_Results;

		[Token(Token = "0x4000FC1")]
		private const int k_MaxRaycastHits = 10;

		[Token(Token = "0x4000FC2")]
		private const int k_MinSampleFrequency = 2;

		[Token(Token = "0x4000FC3")]
		private const int k_MaxSampleFrequency = 100;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38C")]
		[SerializeField]
		private LineType m_LineType;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		[SerializeField]
		private bool m_BlendVisualLinePoints;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x394")]
		[SerializeField]
		private float m_MaxRaycastDistance;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		[SerializeField]
		private Transform m_RayOriginTransform;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		[SerializeField]
		private Transform m_ReferenceFrame;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		[SerializeField]
		private float m_Velocity;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3AC")]
		[SerializeField]
		private float m_Acceleration;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		[SerializeField]
		private float m_AdditionalGroundHeight;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B4")]
		[SerializeField]
		private float m_AdditionalFlightTime;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		[SerializeField]
		private float m_EndPointDistance;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3BC")]
		[SerializeField]
		private float m_EndPointHeight;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		[SerializeField]
		private float m_ControlPointDistance;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		[SerializeField]
		private float m_ControlPointHeight;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		[SerializeField]
		[Range(2f, 100f)]
		private int m_SampleFrequency;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3CC")]
		[SerializeField]
		private HitDetectionType m_HitDetectionType;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		[SerializeField]
		[Range(0.01f, 0.25f)]
		private float m_SphereCastRadius;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D4")]
		[SerializeField]
		private LayerMask m_RaycastMask;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		[SerializeField]
		private QueryTriggerInteraction m_RaycastTriggerInteraction;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3DC")]
		[SerializeField]
		private QuerySnapVolumeInteraction m_RaycastSnapVolumeInteraction;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		[SerializeField]
		private bool m_HitClosestOnly;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E1")]
		[SerializeField]
		private bool m_HoverToSelect;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E4")]
		[SerializeField]
		private float m_HoverTimeToSelect;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		[SerializeField]
		private bool m_AutoDeselect;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3EC")]
		[SerializeField]
		private float m_TimeToAutoDeselect;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		[SerializeField]
		private bool m_EnableUIInteraction;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F1")]
		[SerializeField]
		private bool m_AllowAnchorControl;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F2")]
		[SerializeField]
		private bool m_UseForceGrab;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F4")]
		[SerializeField]
		private float m_RotateSpeed;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		[SerializeField]
		private float m_TranslateSpeed;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		[SerializeField]
		private Transform m_AnchorRotateReferenceFrame;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		[SerializeField]
		private AnchorRotationMode m_AnchorRotationMode;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private readonly List<IXRInteractable> m_ValidTargets;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		private float m_LastTimeHoveredObjectChanged;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x424")]
		private bool m_PassedHoverTimeToSelect;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		private float m_LastTimeAutoSelected;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42C")]
		private bool m_PassedTimeToAutoDeselect;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		private readonly RaycastHit[] m_RaycastHits;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		private int m_RaycastHitsCount;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		private readonly RaycastHitComparer m_RaycastHitComparer;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		private List<SamplePoint> m_SamplePoints;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		private int m_SamplePointsFrameUpdated;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x454")]
		private int m_RaycastHitEndpointIndex;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private int m_UIRaycastHitEndpointIndex;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		private readonly Vector3[] m_ControlPoints;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		private readonly Vector3[] m_HitChordControlPoints;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<SamplePoint> s_ScratchSamplePoints;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Vector3[] s_ScratchControlPoints;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		private PhysicsScene m_LocalPhysicsScene;

		[Token(Token = "0x1700017F")]
		public new float maxRaycastDistance
		{
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0x93BC1C", Offset = "0x93BC1C", VA = "0x93BC1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x93BC24", Offset = "0x93BC24", VA = "0x93BC24")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public new float additionalFlightTime
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0x93BC2C", Offset = "0x93BC2C", VA = "0x93BC2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0x93BC34", Offset = "0x93BC34", VA = "0x93BC34")]
			set
			{
			}
		}

		[Token(Token = "0x17000181")]
		public new float controlPointHeight
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0x93BC3C", Offset = "0x93BC3C", VA = "0x93BC3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x93BC44", Offset = "0x93BC44", VA = "0x93BC44")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public new int sampleFrequency
		{
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0x93BC4C", Offset = "0x93BC4C", VA = "0x93BC4C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E44")]
			[Address(RVA = "0x93BC54", Offset = "0x93BC54", VA = "0x93BC54")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public new HitDetectionType hitDetectionType
		{
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0x93BCD0", Offset = "0x93BCD0", VA = "0x93BCD0")]
			get
			{
				return default(HitDetectionType);
			}
			[Token(Token = "0x6000E46")]
			[Address(RVA = "0x93BCD8", Offset = "0x93BCD8", VA = "0x93BCD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public new QuerySnapVolumeInteraction raycastSnapVolumeInteraction
		{
			[Token(Token = "0x6000E47")]
			[Address(RVA = "0x93BCE0", Offset = "0x93BCE0", VA = "0x93BCE0")]
			get
			{
				return default(QuerySnapVolumeInteraction);
			}
			[Token(Token = "0x6000E48")]
			[Address(RVA = "0x93BCE8", Offset = "0x93BCE8", VA = "0x93BCE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public new AnchorRotationMode anchorRotationMode
		{
			[Token(Token = "0x6000E49")]
			[Address(RVA = "0x93BCF0", Offset = "0x93BCF0", VA = "0x93BCF0")]
			get
			{
				return default(AnchorRotationMode);
			}
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0x93BCF8", Offset = "0x93BCF8", VA = "0x93BCF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		protected new IXRInteractable currentNearestValidTarget
		{
			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0x93BD00", Offset = "0x93BD00", VA = "0x93BD00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0x93BD08", Offset = "0x93BD08", VA = "0x93BD08")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000187")]
		private Transform effectiveRayOrigin
		{
			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0x93BD18", Offset = "0x93BD18", VA = "0x93BD18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		private int closestAnyHitIndex
		{
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0x93BD98", Offset = "0x93BD98", VA = "0x93BD98")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000189")]
		public override bool isSelectActive
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0x93E99C", Offset = "0x93E99C", VA = "0x93E99C", Slot = "59")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x93BDC4", Offset = "0x93BDC4", VA = "0x93BDC4")]
		protected new void OnValidate()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x93BE28", Offset = "0x93BE28", VA = "0x93BE28", Slot = "51")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x93C3D0", Offset = "0x93C3D0", VA = "0x93C3D0", Slot = "52")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x93C3D8", Offset = "0x93C3D8", VA = "0x93C3D8", Slot = "53")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x93C430", Offset = "0x93C430", VA = "0x93C430", Slot = "116")]
		protected new virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x93C434", Offset = "0x93C434", VA = "0x93C434")]
		private static void DrawQuadraticBezierGizmo(Vector3 p0, Vector3 p1, Vector3 p2)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x93BFE0", Offset = "0x93BFE0", VA = "0x93BFE0")]
		private void FindReferenceFrame()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x93C168", Offset = "0x93C168", VA = "0x93C168")]
		private void CreateRayOrigin()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x93C640", Offset = "0x93C640", VA = "0x93C640", Slot = "114")]
		public new bool GetLinePoints(ref Vector3[] linePoints, out int numPoints)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x93C6D8", Offset = "0x93C6D8", VA = "0x93C6D8")]
		private static void EnsureCapacity(ref Vector3[] linePoints, int numPoints)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x93C754", Offset = "0x93C754", VA = "0x93C754")]
		private void UpdateBezierControlPoints()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x93C940", Offset = "0x93C940", VA = "0x93C940")]
		private static Vector3 SampleQuadraticBezierPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0x93C9A4", Offset = "0x93C9A4", VA = "0x93C9A4")]
		private static Vector3 SampleCubicBezierPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0x93CA3C", Offset = "0x93CA3C", VA = "0x93CA3C")]
		private static void ElevateQuadraticToCubicBezier(Vector3 p0, Vector3 p1, Vector3 p2, out Vector3 c0, out Vector3 c1, out Vector3 c2, out Vector3 c3)
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0x93CABC", Offset = "0x93CABC", VA = "0x93CABC")]
		private static Vector3 SampleProjectilePoint(Vector3 initialPosition, Vector3 initialVelocity, Vector3 constantAcceleration, float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x93CB08", Offset = "0x93CB08", VA = "0x93CB08")]
		private void CalculateProjectileParameters(out Vector3 initialPosition, out Vector3 initialVelocity, out Vector3 constantAcceleration, out float flightTime)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x93CF00", Offset = "0x93CF00", VA = "0x93CF00")]
		private static bool TryRead2DAxis(InputAction action, out Vector2 output)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x93CF68", Offset = "0x93CF68", VA = "0x93CF68", Slot = "67")]
		public override void PreprocessInteractor(XRInteractionUpdateOrder.UpdatePhase updatePhase)
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x93D62C", Offset = "0x93D62C", VA = "0x93D62C", Slot = "68")]
		public override void ProcessInteractor(XRInteractionUpdateOrder.UpdatePhase updatePhase)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x93DC74", Offset = "0x93DC74", VA = "0x93DC74", Slot = "57")]
		public override void GetValidTargets(List<IXRInteractable> targets)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x93BE80", Offset = "0x93BE80", VA = "0x93BE80")]
		private void CreateSamplePointsListsIfNecessary()
		{
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x93D1D0", Offset = "0x93D1D0", VA = "0x93D1D0")]
		private void UpdateSamplePointsIfNecessary()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x93E028", Offset = "0x93E028", VA = "0x93E028")]
		private void UpdateSamplePoints(int count, List<SamplePoint> samplePoints)
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x93D21C", Offset = "0x93D21C", VA = "0x93D21C")]
		private void UpdateRaycastHits()
		{
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x93E454", Offset = "0x93E454", VA = "0x93E454")]
		private void CheckCollidersBetweenPoints(Vector3 from, Vector3 to)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x93E858", Offset = "0x93E858", VA = "0x93E858")]
		private static int FilterTriggerColliders(XRInteractionManager interactionManager, RaycastHit[] raycastHits, int count, Func<XRInteractableSnapVolume, bool> removeRule)
		{
			return default(int);
		}

		[Token(Token = "0x6000E69")]
		private static void RemoveAt<T>(T[] array, int index, int count) where T : struct
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x93D304", Offset = "0x93D304", VA = "0x93D304")]
		private void UpdateUIHitIndex()
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x93D338", Offset = "0x93D338", VA = "0x93D338")]
		private void CreateBezierCurve(List<SamplePoint> samplePoints, int endSamplePointIndex, Vector3[] quadraticControlPoints)
		{
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x93E9BC", Offset = "0x93E9BC", VA = "0x93E9BC", Slot = "64")]
		public override bool CanHover(IXRHoverInteractable interactable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x93EA18", Offset = "0x93EA18", VA = "0x93EA18", Slot = "65")]
		public override bool CanSelect(IXRSelectInteractable interactable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x93EACC", Offset = "0x93EACC", VA = "0x93EACC", Slot = "117")]
		protected new virtual float GetHoverTimeToSelect(IXRInteractable interactable)
		{
			return default(float);
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x93EAD4", Offset = "0x93EAD4", VA = "0x93EAD4", Slot = "75")]
		protected override void OnSelectEntering(SelectEnterEventArgs args)
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x93EBE0", Offset = "0x93EBE0", VA = "0x93EBE0", Slot = "77")]
		protected override void OnSelectExiting(SelectExitEventArgs args)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x93EC28", Offset = "0x93EC28", VA = "0x93EC28")]
		private void RestoreAttachTransform()
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x93BCC0", Offset = "0x93BCC0", VA = "0x93BCC0")]
		private static int SanitizeSampleFrequency(int value)
		{
			return default(int);
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x93ECA4", Offset = "0x93ECA4", VA = "0x93ECA4")]
		public XRRayInteractor_X()
		{
		}
	}
}
namespace Unity.XR.PXR
{
	[Token(Token = "0x2000254")]
	public class PXR_ScreenFade_X : MonoBehaviour
	{
		[Token(Token = "0x2000255")]
		[CompilerGenerated]
		private sealed class <ScreenShowBlackMask>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001009")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PXR_ScreenFade_X <>4__this;

			[Token(Token = "0x400100A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <nowTime>5__2;

			[Token(Token = "0x1700018C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E90")]
				[Address(RVA = "0x940418", Offset = "0x940418", VA = "0x940418", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E92")]
				[Address(RVA = "0x940460", Offset = "0x940460", VA = "0x940460", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0x93FF24", Offset = "0x93FF24", VA = "0x93FF24")]
			[DebuggerHidden]
			public <ScreenShowBlackMask>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6000E8E")]
			[Address(RVA = "0x940308", Offset = "0x940308", VA = "0x940308", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E8F")]
			[Address(RVA = "0x94030C", Offset = "0x94030C", VA = "0x94030C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E91")]
			[Address(RVA = "0x940420", Offset = "0x940420", VA = "0x940420", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000256")]
		[CompilerGenerated]
		private sealed class <ScreenFade>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400100B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400100C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PXR_ScreenFade_X <>4__this;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <nowTime>5__2;

			[Token(Token = "0x1700018E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E96")]
				[Address(RVA = "0x940578", Offset = "0x940578", VA = "0x940578", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700018F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E98")]
				[Address(RVA = "0x9405C0", Offset = "0x9405C0", VA = "0x9405C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E93")]
			[Address(RVA = "0x93FFC0", Offset = "0x93FFC0", VA = "0x93FFC0")]
			[DebuggerHidden]
			public <ScreenFade>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000E94")]
			[Address(RVA = "0x940468", Offset = "0x940468", VA = "0x940468", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E95")]
			[Address(RVA = "0x94046C", Offset = "0x94046C", VA = "0x94046C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E97")]
			[Address(RVA = "0x940580", Offset = "0x940580", VA = "0x940580", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float InitAlpha;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The gradient of time.")]
		public float gradientTime;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Basic color.")]
		public Color fadeColor;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The default value is 4000.")]
		private int renderQueue;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer gradientMeshRenderer;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MeshFilter gradientMeshFilter;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material gradientMaterial;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isGradient;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float currentAlpha;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float nowFadeAlpha;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> verts;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<int> indices;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int N;

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x93F0D4", Offset = "0x93F0D4", VA = "0x93F0D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x93F2B8", Offset = "0x93F2B8", VA = "0x93F2B8")]
		public void StartDisappearFade(float time = 1f)
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x93F38C", Offset = "0x93F38C", VA = "0x93F38C")]
		public void StartAppearFade(float time = 1f)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x93F460", Offset = "0x93F460", VA = "0x93F460")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x93F464", Offset = "0x93F464", VA = "0x93F464")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x93F0F4", Offset = "0x93F0F4", VA = "0x93F0F4")]
		private void CreateFadeMesh()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x93F2B0", Offset = "0x93F2B0", VA = "0x93F2B0")]
		public void SetCurrentAlpha(float alpha)
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x93FEB0", Offset = "0x93FEB0", VA = "0x93FEB0")]
		[IteratorStateMachine(typeof(<ScreenShowBlackMask>d__20))]
		private IEnumerator ScreenShowBlackMask()
		{
			return null;
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x93FF4C", Offset = "0x93FF4C", VA = "0x93FF4C")]
		[IteratorStateMachine(typeof(<ScreenFade>d__21))]
		private IEnumerator ScreenFade()
		{
			return null;
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x93FDA8", Offset = "0x93FDA8", VA = "0x93FDA8")]
		private void SetAlpha()
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x93F588", Offset = "0x93F588", VA = "0x93F588")]
		private void CreateModel()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x93FFE8", Offset = "0x93FFE8", VA = "0x93FFE8")]
		public void CreateMakePos(int num)
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x940154", Offset = "0x940154", VA = "0x940154")]
		public void OtherMakePos(int num)
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x93F468", Offset = "0x93F468", VA = "0x93F468")]
		private void DestoryGradientMesh()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x9402E0", Offset = "0x9402E0", VA = "0x9402E0")]
		public PXR_ScreenFade_X()
		{
		}
	}
}
namespace FSSExamples
{
	[Token(Token = "0x2000257")]
	public class StyleChanger : MonoBehaviour
	{
		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private FSSManager manager;

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x9405C8", Offset = "0x9405C8", VA = "0x9405C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x94062C", Offset = "0x94062C", VA = "0x94062C")]
		public void SetScale(Slider slider)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x9406E0", Offset = "0x9406E0", VA = "0x9406E0")]
		public void SetIntensity(Slider slider)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x940794", Offset = "0x940794", VA = "0x940794")]
		public void SetShadowRes(Slider slider)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x9407D8", Offset = "0x9407D8", VA = "0x9407D8")]
		public StyleChanger()
		{
		}
	}
}
namespace AQUAS_Lite
{
	[Token(Token = "0x2000258")]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("AQUAS Lite/AQUAS Lite Camera")]
	public class AQUAS_Lite_Camera : MonoBehaviour
	{
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x9407E0", Offset = "0x9407E0", VA = "0x9407E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x9407E4", Offset = "0x9407E4", VA = "0x9407E4")]
		private void Set()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x940868", Offset = "0x940868", VA = "0x940868")]
		public AQUAS_Lite_Camera()
		{
		}
	}
	[Token(Token = "0x2000259")]
	[AddComponentMenu("AQUAS Lite/Camera Navigation")]
	public class AQUAS_Lite_CamNav : MonoBehaviour
	{
		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool freeLookEnabled;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool showCursor;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float lookSpeed;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float moveSpeed;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sprintSpeed;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_yaw;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_pitch;

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x940870", Offset = "0x940870", VA = "0x940870")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x940908", Offset = "0x940908", VA = "0x940908")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x940D00", Offset = "0x940D00", VA = "0x940D00")]
		public AQUAS_Lite_CamNav()
		{
		}
	}
	[Token(Token = "0x200025A")]
	[ExecuteInEditMode]
	[AddComponentMenu("AQUAS Lite/Reflection")]
	public class AQUAS_Lite_Reflection : MonoBehaviour
	{
		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_DisablePixelLights;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_TextureSize;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_ClipPlaneOffset;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LayerMask m_ReflectLayers;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Hashtable m_ReflectionCameras;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool s_InsideRendering;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool ignoreOcclusionCulling;

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x940D20", Offset = "0x940D20", VA = "0x940D20")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x9421DC", Offset = "0x9421DC", VA = "0x9421DC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x941B78", Offset = "0x941B78", VA = "0x941B78")]
		private void UpdateCameraModes(Camera src, Camera dest)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x941628", Offset = "0x941628", VA = "0x941628")]
		private void CreateMirrorObjects(Camera currentCamera, out Camera reflectionCamera)
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x9425AC", Offset = "0x9425AC", VA = "0x9425AC")]
		private static float sgn(float a)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x941EDC", Offset = "0x941EDC", VA = "0x941EDC")]
		private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x94208C", Offset = "0x94208C", VA = "0x94208C")]
		private static void CalculateObliqueMatrix(ref Matrix4x4 projection, Vector4 clipPlane)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x941E48", Offset = "0x941E48", VA = "0x941E48")]
		private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x9425CC", Offset = "0x9425CC", VA = "0x9425CC")]
		public AQUAS_Lite_Reflection()
		{
		}
	}
}
